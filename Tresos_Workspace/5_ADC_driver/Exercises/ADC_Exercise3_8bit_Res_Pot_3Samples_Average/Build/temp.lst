
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000c1b 	.word	0x00000c1b
  10:	00000c1d 	.word	0x00000c1d
  14:	00000c1f 	.word	0x00000c1f
  18:	00000c21 	.word	0x00000c21
	...
  2c:	00000c23 	.word	0x00000c23
  30:	00000c25 	.word	0x00000c25
  34:	00000000 	.word	0x00000000
  38:	00000c27 	.word	0x00000c27
  3c:	00000c29 	.word	0x00000c29
  40:	00000c2b 	.word	0x00000c2b
  44:	00000c2b 	.word	0x00000c2b
  48:	00000c2b 	.word	0x00000c2b
  4c:	00000c2b 	.word	0x00000c2b
  50:	00000c2b 	.word	0x00000c2b
  54:	00000c2b 	.word	0x00000c2b
  58:	00000c2b 	.word	0x00000c2b
  5c:	00000c2b 	.word	0x00000c2b
  60:	00000c2b 	.word	0x00000c2b
  64:	00000c2b 	.word	0x00000c2b
  68:	00000c2b 	.word	0x00000c2b
  6c:	00000c2b 	.word	0x00000c2b
  70:	00000c2b 	.word	0x00000c2b
  74:	00000c2b 	.word	0x00000c2b
  78:	00000c2b 	.word	0x00000c2b
  7c:	00000c2b 	.word	0x00000c2b
  80:	00000c2b 	.word	0x00000c2b
  84:	00000c2b 	.word	0x00000c2b
  88:	00000c2b 	.word	0x00000c2b
  8c:	00000c2b 	.word	0x00000c2b
  90:	00000c2b 	.word	0x00000c2b
  94:	00000c2b 	.word	0x00000c2b
  98:	00000c2b 	.word	0x00000c2b
  9c:	00000c2b 	.word	0x00000c2b
  a0:	00000c2b 	.word	0x00000c2b
  a4:	00000c2b 	.word	0x00000c2b
  a8:	00000c2b 	.word	0x00000c2b
  ac:	00000c2b 	.word	0x00000c2b
  b0:	00000c2b 	.word	0x00000c2b
  b4:	00000c2b 	.word	0x00000c2b
  b8:	00000c2b 	.word	0x00000c2b
  bc:	00000c2b 	.word	0x00000c2b
  c0:	00000c2b 	.word	0x00000c2b
  c4:	00000c2b 	.word	0x00000c2b
  c8:	00000c2b 	.word	0x00000c2b
  cc:	00000c2b 	.word	0x00000c2b
  d0:	00000c2b 	.word	0x00000c2b
  d4:	00000c2b 	.word	0x00000c2b
  d8:	00000c2b 	.word	0x00000c2b
  dc:	00000c2b 	.word	0x00000c2b
  e0:	00000c2b 	.word	0x00000c2b
  e4:	00000c2b 	.word	0x00000c2b
  e8:	00000c2b 	.word	0x00000c2b
  ec:	00000c2b 	.word	0x00000c2b
  f0:	00000c2b 	.word	0x00000c2b
  f4:	00000c2b 	.word	0x00000c2b
  f8:	00000c2b 	.word	0x00000c2b
  fc:	00000c2b 	.word	0x00000c2b
 100:	00000c2b 	.word	0x00000c2b
 104:	00000c2b 	.word	0x00000c2b
 108:	00000c2b 	.word	0x00000c2b
 10c:	00000c2b 	.word	0x00000c2b
 110:	00000c2b 	.word	0x00000c2b
 114:	00000c2b 	.word	0x00000c2b
 118:	00000c2b 	.word	0x00000c2b
 11c:	00000c2b 	.word	0x00000c2b
 120:	00000c2b 	.word	0x00000c2b
 124:	00000c2b 	.word	0x00000c2b
 128:	00000c2b 	.word	0x00000c2b
 12c:	00000c2b 	.word	0x00000c2b
 130:	00000c2b 	.word	0x00000c2b
 134:	00000c2b 	.word	0x00000c2b
 138:	00000c2b 	.word	0x00000c2b
 13c:	00000c2b 	.word	0x00000c2b
 140:	00000c2b 	.word	0x00000c2b
 144:	00000c2b 	.word	0x00000c2b
 148:	00000c2b 	.word	0x00000c2b
 14c:	00000c2b 	.word	0x00000c2b
 150:	00000c2b 	.word	0x00000c2b
 154:	00000c2b 	.word	0x00000c2b
 158:	00000c2b 	.word	0x00000c2b
 15c:	00000c2b 	.word	0x00000c2b
 160:	00000c2b 	.word	0x00000c2b
 164:	00000c2b 	.word	0x00000c2b
 168:	00000c2b 	.word	0x00000c2b
 16c:	00000c2b 	.word	0x00000c2b
 170:	00000c2b 	.word	0x00000c2b
 174:	00000c2b 	.word	0x00000c2b
 178:	00000c2b 	.word	0x00000c2b
 17c:	00000c2b 	.word	0x00000c2b
 180:	00000c2b 	.word	0x00000c2b
 184:	00000c2b 	.word	0x00000c2b
 188:	00000c2b 	.word	0x00000c2b
 18c:	00000c2b 	.word	0x00000c2b
 190:	00000c2b 	.word	0x00000c2b
 194:	00000c2b 	.word	0x00000c2b
 198:	00000c2b 	.word	0x00000c2b
 19c:	00000c2b 	.word	0x00000c2b
 1a0:	00000c2b 	.word	0x00000c2b
 1a4:	00000c2b 	.word	0x00000c2b
 1a8:	00000c2b 	.word	0x00000c2b
 1ac:	00000c2b 	.word	0x00000c2b
 1b0:	00000c2b 	.word	0x00000c2b
 1b4:	00000c2b 	.word	0x00000c2b
 1b8:	00000c2b 	.word	0x00000c2b
 1bc:	00000c2b 	.word	0x00000c2b
 1c0:	00000c2b 	.word	0x00000c2b
 1c4:	00000c2b 	.word	0x00000c2b
 1c8:	00000c2b 	.word	0x00000c2b
 1cc:	00000c2b 	.word	0x00000c2b
 1d0:	00000c2b 	.word	0x00000c2b
 1d4:	00000c2b 	.word	0x00000c2b
 1d8:	00000c2b 	.word	0x00000c2b
 1dc:	00000c2b 	.word	0x00000c2b
 1e0:	00000c2b 	.word	0x00000c2b
 1e4:	00000c2b 	.word	0x00000c2b
 1e8:	00000c2b 	.word	0x00000c2b
 1ec:	00000c2b 	.word	0x00000c2b
 1f0:	00000c2b 	.word	0x00000c2b
 1f4:	00000c2b 	.word	0x00000c2b
 1f8:	00000c2b 	.word	0x00000c2b
 1fc:	00000c2b 	.word	0x00000c2b
 200:	00000c2b 	.word	0x00000c2b
 204:	00000c2b 	.word	0x00000c2b
 208:	00000c2b 	.word	0x00000c2b
 20c:	00000c2b 	.word	0x00000c2b
 210:	00000c2b 	.word	0x00000c2b
 214:	00000c2b 	.word	0x00000c2b
 218:	00000c2b 	.word	0x00000c2b
 21c:	00000c2b 	.word	0x00000c2b
 220:	00000c2b 	.word	0x00000c2b
 224:	00000c2b 	.word	0x00000c2b
 228:	00000c2b 	.word	0x00000c2b
 22c:	00000c2b 	.word	0x00000c2b
 230:	00000c2b 	.word	0x00000c2b
 234:	00000c2b 	.word	0x00000c2b
 238:	00000c2b 	.word	0x00000c2b
 23c:	00000c2b 	.word	0x00000c2b
 240:	00000c2b 	.word	0x00000c2b
 244:	00000c2b 	.word	0x00000c2b
 248:	00000c2b 	.word	0x00000c2b
 24c:	00000c2b 	.word	0x00000c2b
 250:	00000c2b 	.word	0x00000c2b
 254:	00000c2b 	.word	0x00000c2b
 258:	00000c2b 	.word	0x00000c2b
 25c:	00000c2b 	.word	0x00000c2b
 260:	00000c2b 	.word	0x00000c2b
 264:	00000c2b 	.word	0x00000c2b
 268:	00000c2b 	.word	0x00000c2b
 26c:	00000c2b 	.word	0x00000c2b
 270:	00000c2b 	.word	0x00000c2b
 274:	00000c2b 	.word	0x00000c2b
 278:	00000c2b 	.word	0x00000c2b
 27c:	00000c2b 	.word	0x00000c2b
 280:	00000c2b 	.word	0x00000c2b
 284:	00000c2b 	.word	0x00000c2b
 288:	00000c2b 	.word	0x00000c2b
 28c:	00000c2b 	.word	0x00000c2b
 290:	00000c2b 	.word	0x00000c2b
 294:	00000c2b 	.word	0x00000c2b
 298:	00000c2b 	.word	0x00000c2b
 29c:	00000c2b 	.word	0x00000c2b
 2a0:	00000c2b 	.word	0x00000c2b
 2a4:	00000c2b 	.word	0x00000c2b
 2a8:	00000c2b 	.word	0x00000c2b
 2ac:	00000c2b 	.word	0x00000c2b
 2b0:	00000c2b 	.word	0x00000c2b
 2b4:	00000c2b 	.word	0x00000c2b
 2b8:	00000c2b 	.word	0x00000c2b
 2bc:	00000c2b 	.word	0x00000c2b
 2c0:	00000c2b 	.word	0x00000c2b
 2c4:	00000c2b 	.word	0x00000c2b
 2c8:	00000c2b 	.word	0x00000c2b
 2cc:	00000c2b 	.word	0x00000c2b
 2d0:	00000c2b 	.word	0x00000c2b
 2d4:	00000c2b 	.word	0x00000c2b
 2d8:	00000c2b 	.word	0x00000c2b
 2dc:	00000c2b 	.word	0x00000c2b
 2e0:	00000c2b 	.word	0x00000c2b
 2e4:	00000c2b 	.word	0x00000c2b
 2e8:	00000c2b 	.word	0x00000c2b
 2ec:	00000c2b 	.word	0x00000c2b
 2f0:	00000c2b 	.word	0x00000c2b
 2f4:	00000c2b 	.word	0x00000c2b
 2f8:	00000c2b 	.word	0x00000c2b
 2fc:	00000c2b 	.word	0x00000c2b
 300:	00000c2b 	.word	0x00000c2b
 304:	00000c2b 	.word	0x00000c2b
 308:	00000c2b 	.word	0x00000c2b
 30c:	00000c2b 	.word	0x00000c2b

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fb01 	bl	a88 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fbc0 	bl	c10 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff91f0 	.word	0x1fff91f0

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fb0b 	bl	bb4 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b500      	push	{lr}
     8b2:	b089      	sub	sp, #36	; 0x24
    Adc_CalibrationStatusType CalibStatus;
    Adc_ValueGroupType    AdcReadGroupBuffer[2];
    Adc_ValueGroupType    ResultBuffer[2];

    uint16_t adcvalue1_Pot1 = 0;
     8b4:	2300      	movs	r3, #0
     8b6:	f8ad 301e 	strh.w	r3, [sp, #30]
    uint16_t adcvalue1_Pot2 = 0;
     8ba:	2300      	movs	r3, #0
     8bc:	f8ad 301c 	strh.w	r3, [sp, #28]
    uint16_t adcvalue2_Pot1 = 0;
     8c0:	2300      	movs	r3, #0
     8c2:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint16_t adcvalue2_Pot2 = 0;
     8c6:	2300      	movs	r3, #0
     8c8:	f8ad 3018 	strh.w	r3, [sp, #24]
    uint16_t adcvalue3_Pot1 = 0;
     8cc:	2300      	movs	r3, #0
     8ce:	f8ad 3016 	strh.w	r3, [sp, #22]
    uint16_t adcvalue3_Pot2 = 0;
     8d2:	2300      	movs	r3, #0
     8d4:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint16_t average_Pot1 = 0;
     8d8:	2300      	movs	r3, #0
     8da:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint16_t average_Pot2 = 0;
     8de:	2300      	movs	r3, #0
     8e0:	f8ad 3010 	strh.w	r3, [sp, #16]

    EcuM_Init();
     8e4:	f000 f870 	bl	9c8 <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     8e8:	f000 fb32 	bl	f50 <SEGGER_RTT_Init>

    /* By default ADC0-CH8 is not connected to B13, but with this function
    it will, this is called Interleave, read RM page 1194*/
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 13, PORT_MUX_ADC_INTERLEAVE );
     8ec:	2208      	movs	r2, #8
     8ee:	210d      	movs	r1, #13
     8f0:	4832      	ldr	r0, [pc, #200]	; (9bc <main+0x10c>)
     8f2:	f005 fcb1 	bl	6258 <Port_Ci_Port_Ip_SetMuxModeSel>

    /* Calibrate ADC module */
    Adc_Calibrate( AdcHwUnit_0, &CalibStatus );
     8f6:	ab03      	add	r3, sp, #12
     8f8:	4619      	mov	r1, r3
     8fa:	2000      	movs	r0, #0
     8fc:	f007 f9ba 	bl	7c74 <Adc_Calibrate>
    /* Set the memory buffer to store conversions */
    Adc_SetupResultBuffer(AdcGroup_0, ResultBuffer);
     900:	ab01      	add	r3, sp, #4
     902:	4619      	mov	r1, r3
     904:	2000      	movs	r0, #0
     906:	f006 ff57 	bl	77b8 <Adc_SetupResultBuffer>

    while( 1u )
    {
        /* Software trigger conversion */
        Adc_StartGroupConversion( AdcGroup_0 );
     90a:	2000      	movs	r0, #0
     90c:	f006 ffee 	bl	78ec <Adc_StartGroupConversion>
        /* Wait until the conversion is done */
        while( Adc_GetGroupStatus( AdcGroup_0 ) == ADC_BUSY );
     910:	bf00      	nop
     912:	2000      	movs	r0, #0
     914:	f007 f8c7 	bl	7aa6 <Adc_GetGroupStatus>
     918:	4603      	mov	r3, r0
     91a:	2b01      	cmp	r3, #1
     91c:	d0f9      	beq.n	912 <main+0x62>
        /* Read ready conversion */
        Adc_ReadGroup( AdcGroup_0, AdcReadGroupBuffer );
     91e:	ab02      	add	r3, sp, #8
     920:	4619      	mov	r1, r3
     922:	2000      	movs	r0, #0
     924:	f007 f87a 	bl	7a1c <Adc_ReadGroup>

        /* Taking 3 samples */
        adcvalue1_Pot1 = AdcReadGroupBuffer[AdcChannel_0];
     928:	f8bd 3008 	ldrh.w	r3, [sp, #8]
     92c:	f8ad 301e 	strh.w	r3, [sp, #30]
        adcvalue1_Pot2 = AdcReadGroupBuffer[AdcChannel_1];
     930:	f8bd 300a 	ldrh.w	r3, [sp, #10]
     934:	f8ad 301c 	strh.w	r3, [sp, #28]
        Delay( 100u );
     938:	2064      	movs	r0, #100	; 0x64
     93a:	f000 f863 	bl	a04 <Delay>

        adcvalue2_Pot1 = AdcReadGroupBuffer[AdcChannel_0];
     93e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
     942:	f8ad 301a 	strh.w	r3, [sp, #26]
        adcvalue2_Pot2 = AdcReadGroupBuffer[AdcChannel_1];
     946:	f8bd 300a 	ldrh.w	r3, [sp, #10]
     94a:	f8ad 3018 	strh.w	r3, [sp, #24]
        Delay( 100u );
     94e:	2064      	movs	r0, #100	; 0x64
     950:	f000 f858 	bl	a04 <Delay>

        adcvalue3_Pot1 = AdcReadGroupBuffer[AdcChannel_0];
     954:	f8bd 3008 	ldrh.w	r3, [sp, #8]
     958:	f8ad 3016 	strh.w	r3, [sp, #22]
        adcvalue3_Pot2 = AdcReadGroupBuffer[AdcChannel_1];
     95c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
     960:	f8ad 3014 	strh.w	r3, [sp, #20]

        average_Pot1 = (adcvalue1_Pot1 + adcvalue2_Pot1 + adcvalue3_Pot1) / 3;
     964:	f8bd 201e 	ldrh.w	r2, [sp, #30]
     968:	f8bd 301a 	ldrh.w	r3, [sp, #26]
     96c:	441a      	add	r2, r3
     96e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
     972:	4413      	add	r3, r2
     974:	4a12      	ldr	r2, [pc, #72]	; (9c0 <main+0x110>)
     976:	fb82 1203 	smull	r1, r2, r2, r3
     97a:	17db      	asrs	r3, r3, #31
     97c:	1ad3      	subs	r3, r2, r3
     97e:	f8ad 3012 	strh.w	r3, [sp, #18]
        average_Pot2 = (adcvalue1_Pot2 + adcvalue2_Pot2 + adcvalue3_Pot2) / 3;
     982:	f8bd 201c 	ldrh.w	r2, [sp, #28]
     986:	f8bd 3018 	ldrh.w	r3, [sp, #24]
     98a:	441a      	add	r2, r3
     98c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     990:	4413      	add	r3, r2
     992:	4a0b      	ldr	r2, [pc, #44]	; (9c0 <main+0x110>)
     994:	fb82 1203 	smull	r1, r2, r2, r3
     998:	17db      	asrs	r3, r3, #31
     99a:	1ad3      	subs	r3, r2, r3
     99c:	f8ad 3010 	strh.w	r3, [sp, #16]

        /* Display value */
        SEGGER_RTT_printf( 0, "ADC1 average value: %d, ADC2 average value: %d\n", 
     9a0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
     9a4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     9a8:	4906      	ldr	r1, [pc, #24]	; (9c4 <main+0x114>)
     9aa:	2000      	movs	r0, #0
     9ac:	f000 fe38 	bl	1620 <SEGGER_RTT_printf>
            average_Pot1, average_Pot2 );        
        
        Delay( 500u );
     9b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     9b4:	f000 f826 	bl	a04 <Delay>
    {
     9b8:	e7a7      	b.n	90a <main+0x5a>
     9ba:	bf00      	nop
     9bc:	4004a000 	.word	0x4004a000
     9c0:	55555556 	.word	0x55555556
     9c4:	00010054 	.word	0x00010054

000009c8 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     9c8:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     9ca:	480b      	ldr	r0, [pc, #44]	; (9f8 <EcuM_Init+0x30>)
     9cc:	f004 fe6e 	bl	56ac <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     9d0:	2000      	movs	r0, #0
     9d2:	f004 febf 	bl	5754 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     9d6:	2000      	movs	r0, #0
     9d8:	f004 fee0 	bl	579c <Mcu_SetMode>

    /*Init the internal tick reference Systick Timer*/
    OsIf_Init( NULL_PTR );
     9dc:	2000      	movs	r0, #0
     9de:	f001 f8d0 	bl	1b82 <OsIf_Init>
    /*Enable and setup interrupts*/
    Platform_Init( NULL_PTR );
     9e2:	2000      	movs	r0, #0
     9e4:	f000 ffca 	bl	197c <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration, for this case
    only Port Pin ADC0-SE5 (B1) and ADC0-SE8 (B13) */
    Port_Init( &Port_Config );
     9e8:	4804      	ldr	r0, [pc, #16]	; (9fc <EcuM_Init+0x34>)
     9ea:	f005 fa61 	bl	5eb0 <Port_Init>

    /* Init the ADC with the paramters set in Tresos*/
    Adc_Init( &Adc_Config );
     9ee:	4804      	ldr	r0, [pc, #16]	; (a00 <EcuM_Init+0x38>)
     9f0:	f006 fe94 	bl	771c <Adc_Init>
}
     9f4:	bf00      	nop
     9f6:	bd08      	pop	{r3, pc}
     9f8:	00010d4c 	.word	0x00010d4c
     9fc:	00010ed8 	.word	0x00010ed8
     a00:	00010924 	.word	0x00010924

00000a04 <Delay>:

/* This is dummy delay function prepared just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     a04:	b500      	push	{lr}
     a06:	b087      	sub	sp, #28
     a08:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     a0a:	9b01      	ldr	r3, [sp, #4]
     a0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     a10:	fb02 f303 	mul.w	r3, r2, r3
     a14:	2101      	movs	r1, #1
     a16:	4618      	mov	r0, r3
     a18:	f001 f908 	bl	1c2c <OsIf_MicrosToTicks>
     a1c:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     a1e:	2001      	movs	r0, #1
     a20:	f001 f8b8 	bl	1b94 <OsIf_GetCounter>
     a24:	4603      	mov	r3, r0
     a26:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     a28:	2300      	movs	r3, #0
     a2a:	9305      	str	r3, [sp, #20]
    do
    {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     a2c:	ab03      	add	r3, sp, #12
     a2e:	2101      	movs	r1, #1
     a30:	4618      	mov	r0, r3
     a32:	f001 f8c8 	bl	1bc6 <OsIf_GetElapsed>
     a36:	4602      	mov	r2, r0
     a38:	9b05      	ldr	r3, [sp, #20]
     a3a:	4413      	add	r3, r2
     a3c:	9305      	str	r3, [sp, #20]
    }while( ElapsedTime < Timeout );
     a3e:	9a05      	ldr	r2, [sp, #20]
     a40:	9b04      	ldr	r3, [sp, #16]
     a42:	429a      	cmp	r2, r3
     a44:	d3f2      	bcc.n	a2c <Delay+0x28>
     a46:	bf00      	nop
     a48:	bf00      	nop
     a4a:	b007      	add	sp, #28
     a4c:	f85d fb04 	ldr.w	pc, [sp], #4

00000a50 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     a50:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a52:	f3ef 8310 	mrs	r3, PRIMASK
     a56:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a58:	4623      	mov	r3, r4
}
     a5a:	4618      	mov	r0, r3
     a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
     a60:	4770      	bx	lr

00000a62 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     a62:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a64:	f3ef 8310 	mrs	r3, PRIMASK
     a68:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a6a:	4623      	mov	r3, r4
}
     a6c:	4618      	mov	r0, r3
     a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
     a72:	4770      	bx	lr

00000a74 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     a74:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a76:	f3ef 8310 	mrs	r3, PRIMASK
     a7a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a7c:	4623      	mov	r3, r4
}
     a7e:	4618      	mov	r0, r3
     a80:	f85d 4b04 	ldr.w	r4, [sp], #4
     a84:	4770      	bx	lr
	...

00000a88 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     a88:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     a8a:	2300      	movs	r3, #0
     a8c:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     a8e:	2300      	movs	r3, #0
     a90:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     a92:	2300      	movs	r3, #0
     a94:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     a96:	2300      	movs	r3, #0
     a98:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     a9a:	4b44      	ldr	r3, [pc, #272]	; (bac <__BSS_SRAM_SIZE+0x2c>)
     a9c:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     a9e:	4b44      	ldr	r3, [pc, #272]	; (bb0 <__BSS_SRAM_SIZE+0x30>)
     aa0:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     aa2:	9b05      	ldr	r3, [sp, #20]
     aa4:	681b      	ldr	r3, [r3, #0]
     aa6:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     aa8:	9b05      	ldr	r3, [sp, #20]
     aaa:	3304      	adds	r3, #4
     aac:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     aae:	9b05      	ldr	r3, [sp, #20]
     ab0:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     ab2:	2300      	movs	r3, #0
     ab4:	9309      	str	r3, [sp, #36]	; 0x24
     ab6:	e03d      	b.n	b34 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aba:	4613      	mov	r3, r2
     abc:	005b      	lsls	r3, r3, #1
     abe:	4413      	add	r3, r2
     ac0:	009b      	lsls	r3, r3, #2
     ac2:	461a      	mov	r2, r3
     ac4:	9b03      	ldr	r3, [sp, #12]
     ac6:	4413      	add	r3, r2
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ace:	4613      	mov	r3, r2
     ad0:	005b      	lsls	r3, r3, #1
     ad2:	4413      	add	r3, r2
     ad4:	009b      	lsls	r3, r3, #2
     ad6:	461a      	mov	r2, r3
     ad8:	9b03      	ldr	r3, [sp, #12]
     ada:	4413      	add	r3, r2
     adc:	681b      	ldr	r3, [r3, #0]
     ade:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     ae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ae2:	4613      	mov	r3, r2
     ae4:	005b      	lsls	r3, r3, #1
     ae6:	4413      	add	r3, r2
     ae8:	009b      	lsls	r3, r3, #2
     aea:	461a      	mov	r2, r3
     aec:	9b03      	ldr	r3, [sp, #12]
     aee:	4413      	add	r3, r2
     af0:	689b      	ldr	r3, [r3, #8]
     af2:	4619      	mov	r1, r3
     af4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     af6:	4613      	mov	r3, r2
     af8:	005b      	lsls	r3, r3, #1
     afa:	4413      	add	r3, r2
     afc:	009b      	lsls	r3, r3, #2
     afe:	461a      	mov	r2, r3
     b00:	9b03      	ldr	r3, [sp, #12]
     b02:	4413      	add	r3, r2
     b04:	685b      	ldr	r3, [r3, #4]
     b06:	1acb      	subs	r3, r1, r3
     b08:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b0a:	2300      	movs	r3, #0
     b0c:	9308      	str	r3, [sp, #32]
     b0e:	e00a      	b.n	b26 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     b10:	9a00      	ldr	r2, [sp, #0]
     b12:	9b08      	ldr	r3, [sp, #32]
     b14:	441a      	add	r2, r3
     b16:	9901      	ldr	r1, [sp, #4]
     b18:	9b08      	ldr	r3, [sp, #32]
     b1a:	440b      	add	r3, r1
     b1c:	7812      	ldrb	r2, [r2, #0]
     b1e:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b20:	9b08      	ldr	r3, [sp, #32]
     b22:	3301      	adds	r3, #1
     b24:	9308      	str	r3, [sp, #32]
     b26:	9a08      	ldr	r2, [sp, #32]
     b28:	9b06      	ldr	r3, [sp, #24]
     b2a:	429a      	cmp	r2, r3
     b2c:	d3f0      	bcc.n	b10 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b30:	3301      	adds	r3, #1
     b32:	9309      	str	r3, [sp, #36]	; 0x24
     b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b36:	9b07      	ldr	r3, [sp, #28]
     b38:	429a      	cmp	r2, r3
     b3a:	d3bd      	bcc.n	ab8 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     b3c:	9b04      	ldr	r3, [sp, #16]
     b3e:	681b      	ldr	r3, [r3, #0]
     b40:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     b42:	9b04      	ldr	r3, [sp, #16]
     b44:	3304      	adds	r3, #4
     b46:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     b48:	9b04      	ldr	r3, [sp, #16]
     b4a:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     b4c:	2300      	movs	r3, #0
     b4e:	9309      	str	r3, [sp, #36]	; 0x24
     b50:	e024      	b.n	b9c <__BSS_SRAM_SIZE+0x1c>
    {
        ram = zero_layout[i].ram_start;
     b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b54:	00db      	lsls	r3, r3, #3
     b56:	9a02      	ldr	r2, [sp, #8]
     b58:	4413      	add	r3, r2
     b5a:	681b      	ldr	r3, [r3, #0]
     b5c:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b60:	00db      	lsls	r3, r3, #3
     b62:	9a02      	ldr	r2, [sp, #8]
     b64:	4413      	add	r3, r2
     b66:	685b      	ldr	r3, [r3, #4]
     b68:	4619      	mov	r1, r3
     b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b6c:	00db      	lsls	r3, r3, #3
     b6e:	9a02      	ldr	r2, [sp, #8]
     b70:	4413      	add	r3, r2
     b72:	681b      	ldr	r3, [r3, #0]
     b74:	1acb      	subs	r3, r1, r3
     b76:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b78:	2300      	movs	r3, #0
     b7a:	9308      	str	r3, [sp, #32]
     b7c:	e007      	b.n	b8e <__BSS_SRAM_SIZE+0xe>
        {
            ram[j] = 0U;
     b7e:	9a01      	ldr	r2, [sp, #4]
     b80:	9b08      	ldr	r3, [sp, #32]
     b82:	4413      	add	r3, r2
     b84:	2200      	movs	r2, #0
     b86:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b88:	9b08      	ldr	r3, [sp, #32]
     b8a:	3301      	adds	r3, #1
     b8c:	9308      	str	r3, [sp, #32]
     b8e:	9a08      	ldr	r2, [sp, #32]
     b90:	9b06      	ldr	r3, [sp, #24]
     b92:	429a      	cmp	r2, r3
     b94:	d3f3      	bcc.n	b7e <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b98:	3301      	adds	r3, #1
     b9a:	9309      	str	r3, [sp, #36]	; 0x24
     b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b9e:	9b07      	ldr	r3, [sp, #28]
     ba0:	429a      	cmp	r2, r3
     ba2:	d3d6      	bcc.n	b52 <init_data_bss+0xca>
        }
    }
}
     ba4:	bf00      	nop
     ba6:	bf00      	nop
     ba8:	b00a      	add	sp, #40	; 0x28
     baa:	4770      	bx	lr
     bac:	00010f48 	.word	0x00010f48
     bb0:	00010f64 	.word	0x00010f64

00000bb4 <sys_m4_cache_init>:
{
     bb4:	b084      	sub	sp, #16
     bb6:	4603      	mov	r3, r0
     bb8:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     bbc:	2300      	movs	r3, #0
     bbe:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     bc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bc6:	2b00      	cmp	r3, #0
     bc8:	d118      	bne.n	bfc <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     bca:	4b10      	ldr	r3, [pc, #64]	; (c0c <sys_m4_cache_init+0x58>)
     bcc:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     bd0:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     bd2:	4b0e      	ldr	r3, [pc, #56]	; (c0c <sys_m4_cache_init+0x58>)
     bd4:	681b      	ldr	r3, [r3, #0]
     bd6:	4a0d      	ldr	r2, [pc, #52]	; (c0c <sys_m4_cache_init+0x58>)
     bd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     bdc:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     bde:	bf00      	nop
     be0:	4b0a      	ldr	r3, [pc, #40]	; (c0c <sys_m4_cache_init+0x58>)
     be2:	681b      	ldr	r3, [r3, #0]
     be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     bec:	d0f8      	beq.n	be0 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     bee:	4b07      	ldr	r3, [pc, #28]	; (c0c <sys_m4_cache_init+0x58>)
     bf0:	681b      	ldr	r3, [r3, #0]
     bf2:	4a06      	ldr	r2, [pc, #24]	; (c0c <sys_m4_cache_init+0x58>)
     bf4:	f043 0301 	orr.w	r3, r3, #1
     bf8:	6013      	str	r3, [r2, #0]
     bfa:	e002      	b.n	c02 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     bfc:	2301      	movs	r3, #1
     bfe:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     c02:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     c06:	4618      	mov	r0, r3
     c08:	b004      	add	sp, #16
     c0a:	4770      	bx	lr
     c0c:	e0082000 	.word	0xe0082000

00000c10 <startup_go_to_user_mode>:
}
     c10:	bf00      	nop
     c12:	4770      	bx	lr

00000c14 <Sys_GetCoreID>:
    return 0U;
     c14:	2300      	movs	r3, #0
}
     c16:	4618      	mov	r0, r3
     c18:	4770      	bx	lr

00000c1a <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     c1a:	e7fe      	b.n	c1a <HardFault_Handler>

00000c1c <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     c1c:	e7fe      	b.n	c1c <MemManage_Handler>

00000c1e <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     c1e:	e7fe      	b.n	c1e <BusFault_Handler>

00000c20 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     c20:	e7fe      	b.n	c20 <UsageFault_Handler>

00000c22 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     c22:	e7fe      	b.n	c22 <SVC_Handler>

00000c24 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     c24:	e7fe      	b.n	c24 <DebugMon_Handler>

00000c26 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     c26:	e7fe      	b.n	c26 <PendSV_Handler>

00000c28 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     c28:	e7fe      	b.n	c28 <SysTick_Handler>

00000c2a <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     c2a:	e7fe      	b.n	c2a <undefined_handler>

00000c2c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     c2c:	b500      	push	{lr}
     c2e:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     c30:	4b26      	ldr	r3, [pc, #152]	; (ccc <_DoInit+0xa0>)
     c32:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     c34:	22a8      	movs	r2, #168	; 0xa8
     c36:	2100      	movs	r1, #0
     c38:	9800      	ldr	r0, [sp, #0]
     c3a:	f000 fd13 	bl	1664 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     c3e:	9b00      	ldr	r3, [sp, #0]
     c40:	2203      	movs	r2, #3
     c42:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     c44:	9b00      	ldr	r3, [sp, #0]
     c46:	2203      	movs	r2, #3
     c48:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     c4a:	9b00      	ldr	r3, [sp, #0]
     c4c:	4a20      	ldr	r2, [pc, #128]	; (cd0 <_DoInit+0xa4>)
     c4e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     c50:	9b00      	ldr	r3, [sp, #0]
     c52:	4a20      	ldr	r2, [pc, #128]	; (cd4 <_DoInit+0xa8>)
     c54:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     c56:	9b00      	ldr	r3, [sp, #0]
     c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
     c5c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     c5e:	9b00      	ldr	r3, [sp, #0]
     c60:	2200      	movs	r2, #0
     c62:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     c64:	9b00      	ldr	r3, [sp, #0]
     c66:	2200      	movs	r2, #0
     c68:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     c6a:	9b00      	ldr	r3, [sp, #0]
     c6c:	2200      	movs	r2, #0
     c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     c70:	9b00      	ldr	r3, [sp, #0]
     c72:	4a17      	ldr	r2, [pc, #92]	; (cd0 <_DoInit+0xa4>)
     c74:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     c76:	9b00      	ldr	r3, [sp, #0]
     c78:	4a17      	ldr	r2, [pc, #92]	; (cd8 <_DoInit+0xac>)
     c7a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     c7c:	9b00      	ldr	r3, [sp, #0]
     c7e:	2210      	movs	r2, #16
     c80:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     c82:	9b00      	ldr	r3, [sp, #0]
     c84:	2200      	movs	r2, #0
     c86:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     c88:	9b00      	ldr	r3, [sp, #0]
     c8a:	2200      	movs	r2, #0
     c8c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     c8e:	9b00      	ldr	r3, [sp, #0]
     c90:	2200      	movs	r2, #0
     c92:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     c94:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     c98:	2300      	movs	r3, #0
     c9a:	9301      	str	r3, [sp, #4]
     c9c:	e00c      	b.n	cb8 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     c9e:	9b01      	ldr	r3, [sp, #4]
     ca0:	f1c3 030f 	rsb	r3, r3, #15
     ca4:	4a0d      	ldr	r2, [pc, #52]	; (cdc <_DoInit+0xb0>)
     ca6:	5cd1      	ldrb	r1, [r2, r3]
     ca8:	9a00      	ldr	r2, [sp, #0]
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	4413      	add	r3, r2
     cae:	460a      	mov	r2, r1
     cb0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     cb2:	9b01      	ldr	r3, [sp, #4]
     cb4:	3301      	adds	r3, #1
     cb6:	9301      	str	r3, [sp, #4]
     cb8:	9b01      	ldr	r3, [sp, #4]
     cba:	2b0f      	cmp	r3, #15
     cbc:	d9ef      	bls.n	c9e <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     cbe:	f3bf 8f5f 	dmb	sy
}
     cc2:	bf00      	nop
     cc4:	b003      	add	sp, #12
     cc6:	f85d fb04 	ldr.w	pc, [sp], #4
     cca:	bf00      	nop
     ccc:	1fff91f4 	.word	0x1fff91f4
     cd0:	00010084 	.word	0x00010084
     cd4:	1fff929c 	.word	0x1fff929c
     cd8:	1fff969c 	.word	0x1fff969c
     cdc:	00010f24 	.word	0x00010f24

00000ce0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     ce0:	b500      	push	{lr}
     ce2:	b08b      	sub	sp, #44	; 0x2c
     ce4:	9003      	str	r0, [sp, #12]
     ce6:	9102      	str	r1, [sp, #8]
     ce8:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     cea:	2300      	movs	r3, #0
     cec:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     cee:	9b03      	ldr	r3, [sp, #12]
     cf0:	68db      	ldr	r3, [r3, #12]
     cf2:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     cf4:	9b03      	ldr	r3, [sp, #12]
     cf6:	691b      	ldr	r3, [r3, #16]
     cf8:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     cfa:	9a06      	ldr	r2, [sp, #24]
     cfc:	9b07      	ldr	r3, [sp, #28]
     cfe:	429a      	cmp	r2, r3
     d00:	d905      	bls.n	d0e <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     d02:	9a06      	ldr	r2, [sp, #24]
     d04:	9b07      	ldr	r3, [sp, #28]
     d06:	1ad3      	subs	r3, r2, r3
     d08:	3b01      	subs	r3, #1
     d0a:	9309      	str	r3, [sp, #36]	; 0x24
     d0c:	e007      	b.n	d1e <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     d0e:	9b03      	ldr	r3, [sp, #12]
     d10:	689a      	ldr	r2, [r3, #8]
     d12:	9906      	ldr	r1, [sp, #24]
     d14:	9b07      	ldr	r3, [sp, #28]
     d16:	1acb      	subs	r3, r1, r3
     d18:	4413      	add	r3, r2
     d1a:	3b01      	subs	r3, #1
     d1c:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     d1e:	9b03      	ldr	r3, [sp, #12]
     d20:	689a      	ldr	r2, [r3, #8]
     d22:	9b07      	ldr	r3, [sp, #28]
     d24:	1ad3      	subs	r3, r2, r3
     d26:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d28:	4293      	cmp	r3, r2
     d2a:	bf28      	it	cs
     d2c:	4613      	movcs	r3, r2
     d2e:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d32:	9b01      	ldr	r3, [sp, #4]
     d34:	4293      	cmp	r3, r2
     d36:	bf28      	it	cs
     d38:	4613      	movcs	r3, r2
     d3a:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d3c:	9b03      	ldr	r3, [sp, #12]
     d3e:	685a      	ldr	r2, [r3, #4]
     d40:	9b07      	ldr	r3, [sp, #28]
     d42:	4413      	add	r3, r2
     d44:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d48:	9902      	ldr	r1, [sp, #8]
     d4a:	9805      	ldr	r0, [sp, #20]
     d4c:	f000 fc7c 	bl	1648 <memcpy>
    NumBytesWritten += NumBytesToWrite;
     d50:	9a08      	ldr	r2, [sp, #32]
     d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d54:	4413      	add	r3, r2
     d56:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     d58:	9a02      	ldr	r2, [sp, #8]
     d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d5c:	4413      	add	r3, r2
     d5e:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     d60:	9a01      	ldr	r2, [sp, #4]
     d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d64:	1ad3      	subs	r3, r2, r3
     d66:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     d68:	9a07      	ldr	r2, [sp, #28]
     d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d6c:	4413      	add	r3, r2
     d6e:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     d70:	9b03      	ldr	r3, [sp, #12]
     d72:	689b      	ldr	r3, [r3, #8]
     d74:	9a07      	ldr	r2, [sp, #28]
     d76:	429a      	cmp	r2, r3
     d78:	d101      	bne.n	d7e <_WriteBlocking+0x9e>
      WrOff = 0u;
     d7a:	2300      	movs	r3, #0
     d7c:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d7e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     d82:	9b03      	ldr	r3, [sp, #12]
     d84:	9a07      	ldr	r2, [sp, #28]
     d86:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     d88:	9b01      	ldr	r3, [sp, #4]
     d8a:	2b00      	cmp	r3, #0
     d8c:	d1b2      	bne.n	cf4 <_WriteBlocking+0x14>
  return NumBytesWritten;
     d8e:	9b08      	ldr	r3, [sp, #32]
}
     d90:	4618      	mov	r0, r3
     d92:	b00b      	add	sp, #44	; 0x2c
     d94:	f85d fb04 	ldr.w	pc, [sp], #4

00000d98 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     d98:	b500      	push	{lr}
     d9a:	b089      	sub	sp, #36	; 0x24
     d9c:	9003      	str	r0, [sp, #12]
     d9e:	9102      	str	r1, [sp, #8]
     da0:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     da2:	9b03      	ldr	r3, [sp, #12]
     da4:	68db      	ldr	r3, [r3, #12]
     da6:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     da8:	9b03      	ldr	r3, [sp, #12]
     daa:	689a      	ldr	r2, [r3, #8]
     dac:	9b07      	ldr	r3, [sp, #28]
     dae:	1ad3      	subs	r3, r2, r3
     db0:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     db2:	9a06      	ldr	r2, [sp, #24]
     db4:	9b01      	ldr	r3, [sp, #4]
     db6:	429a      	cmp	r2, r3
     db8:	d911      	bls.n	dde <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     dba:	9b03      	ldr	r3, [sp, #12]
     dbc:	685a      	ldr	r2, [r3, #4]
     dbe:	9b07      	ldr	r3, [sp, #28]
     dc0:	4413      	add	r3, r2
     dc2:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     dc4:	9a01      	ldr	r2, [sp, #4]
     dc6:	9902      	ldr	r1, [sp, #8]
     dc8:	9804      	ldr	r0, [sp, #16]
     dca:	f000 fc3d 	bl	1648 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     dce:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     dd2:	9a07      	ldr	r2, [sp, #28]
     dd4:	9b01      	ldr	r3, [sp, #4]
     dd6:	441a      	add	r2, r3
     dd8:	9b03      	ldr	r3, [sp, #12]
     dda:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     ddc:	e01f      	b.n	e1e <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     dde:	9b06      	ldr	r3, [sp, #24]
     de0:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     de2:	9b03      	ldr	r3, [sp, #12]
     de4:	685a      	ldr	r2, [r3, #4]
     de6:	9b07      	ldr	r3, [sp, #28]
     de8:	4413      	add	r3, r2
     dea:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     dec:	9a05      	ldr	r2, [sp, #20]
     dee:	9902      	ldr	r1, [sp, #8]
     df0:	9804      	ldr	r0, [sp, #16]
     df2:	f000 fc29 	bl	1648 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     df6:	9a01      	ldr	r2, [sp, #4]
     df8:	9b06      	ldr	r3, [sp, #24]
     dfa:	1ad3      	subs	r3, r2, r3
     dfc:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     dfe:	9b03      	ldr	r3, [sp, #12]
     e00:	685b      	ldr	r3, [r3, #4]
     e02:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     e04:	9a02      	ldr	r2, [sp, #8]
     e06:	9b06      	ldr	r3, [sp, #24]
     e08:	4413      	add	r3, r2
     e0a:	9a05      	ldr	r2, [sp, #20]
     e0c:	4619      	mov	r1, r3
     e0e:	9804      	ldr	r0, [sp, #16]
     e10:	f000 fc1a 	bl	1648 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     e14:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     e18:	9b03      	ldr	r3, [sp, #12]
     e1a:	9a05      	ldr	r2, [sp, #20]
     e1c:	60da      	str	r2, [r3, #12]
}
     e1e:	bf00      	nop
     e20:	b009      	add	sp, #36	; 0x24
     e22:	f85d fb04 	ldr.w	pc, [sp], #4

00000e26 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     e26:	b086      	sub	sp, #24
     e28:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     e2a:	9b01      	ldr	r3, [sp, #4]
     e2c:	691b      	ldr	r3, [r3, #16]
     e2e:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     e30:	9b01      	ldr	r3, [sp, #4]
     e32:	68db      	ldr	r3, [r3, #12]
     e34:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     e36:	9a04      	ldr	r2, [sp, #16]
     e38:	9b03      	ldr	r3, [sp, #12]
     e3a:	429a      	cmp	r2, r3
     e3c:	d808      	bhi.n	e50 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     e3e:	9b01      	ldr	r3, [sp, #4]
     e40:	689a      	ldr	r2, [r3, #8]
     e42:	9b03      	ldr	r3, [sp, #12]
     e44:	1ad2      	subs	r2, r2, r3
     e46:	9b04      	ldr	r3, [sp, #16]
     e48:	4413      	add	r3, r2
     e4a:	3b01      	subs	r3, #1
     e4c:	9305      	str	r3, [sp, #20]
     e4e:	e004      	b.n	e5a <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     e50:	9a04      	ldr	r2, [sp, #16]
     e52:	9b03      	ldr	r3, [sp, #12]
     e54:	1ad3      	subs	r3, r2, r3
     e56:	3b01      	subs	r3, #1
     e58:	9305      	str	r3, [sp, #20]
  }
  return r;
     e5a:	9b05      	ldr	r3, [sp, #20]
}
     e5c:	4618      	mov	r0, r3
     e5e:	b006      	add	sp, #24
     e60:	4770      	bx	lr
	...

00000e64 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     e64:	b500      	push	{lr}
     e66:	b089      	sub	sp, #36	; 0x24
     e68:	9003      	str	r0, [sp, #12]
     e6a:	9102      	str	r1, [sp, #8]
     e6c:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     e6e:	9b02      	ldr	r3, [sp, #8]
     e70:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     e72:	9b03      	ldr	r3, [sp, #12]
     e74:	1c5a      	adds	r2, r3, #1
     e76:	4613      	mov	r3, r2
     e78:	005b      	lsls	r3, r3, #1
     e7a:	4413      	add	r3, r2
     e7c:	00db      	lsls	r3, r3, #3
     e7e:	4a20      	ldr	r2, [pc, #128]	; (f00 <SEGGER_RTT_WriteNoLock+0x9c>)
     e80:	4413      	add	r3, r2
     e82:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     e84:	9b05      	ldr	r3, [sp, #20]
     e86:	695b      	ldr	r3, [r3, #20]
     e88:	2b02      	cmp	r3, #2
     e8a:	d029      	beq.n	ee0 <SEGGER_RTT_WriteNoLock+0x7c>
     e8c:	2b02      	cmp	r3, #2
     e8e:	d82e      	bhi.n	eee <SEGGER_RTT_WriteNoLock+0x8a>
     e90:	2b00      	cmp	r3, #0
     e92:	d002      	beq.n	e9a <SEGGER_RTT_WriteNoLock+0x36>
     e94:	2b01      	cmp	r3, #1
     e96:	d013      	beq.n	ec0 <SEGGER_RTT_WriteNoLock+0x5c>
     e98:	e029      	b.n	eee <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     e9a:	9805      	ldr	r0, [sp, #20]
     e9c:	f7ff ffc3 	bl	e26 <_GetAvailWriteSpace>
     ea0:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     ea2:	9a04      	ldr	r2, [sp, #16]
     ea4:	9b01      	ldr	r3, [sp, #4]
     ea6:	429a      	cmp	r2, r3
     ea8:	d202      	bcs.n	eb0 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     eaa:	2300      	movs	r3, #0
     eac:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     eae:	e021      	b.n	ef4 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     eb0:	9b01      	ldr	r3, [sp, #4]
     eb2:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     eb4:	9a01      	ldr	r2, [sp, #4]
     eb6:	9906      	ldr	r1, [sp, #24]
     eb8:	9805      	ldr	r0, [sp, #20]
     eba:	f7ff ff6d 	bl	d98 <_WriteNoCheck>
    break;
     ebe:	e019      	b.n	ef4 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     ec0:	9805      	ldr	r0, [sp, #20]
     ec2:	f7ff ffb0 	bl	e26 <_GetAvailWriteSpace>
     ec6:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     ec8:	9a01      	ldr	r2, [sp, #4]
     eca:	9b04      	ldr	r3, [sp, #16]
     ecc:	4293      	cmp	r3, r2
     ece:	bf28      	it	cs
     ed0:	4613      	movcs	r3, r2
     ed2:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     ed4:	9a07      	ldr	r2, [sp, #28]
     ed6:	9906      	ldr	r1, [sp, #24]
     ed8:	9805      	ldr	r0, [sp, #20]
     eda:	f7ff ff5d 	bl	d98 <_WriteNoCheck>
    break;
     ede:	e009      	b.n	ef4 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     ee0:	9a01      	ldr	r2, [sp, #4]
     ee2:	9906      	ldr	r1, [sp, #24]
     ee4:	9805      	ldr	r0, [sp, #20]
     ee6:	f7ff fefb 	bl	ce0 <_WriteBlocking>
     eea:	9007      	str	r0, [sp, #28]
    break;
     eec:	e002      	b.n	ef4 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     eee:	2300      	movs	r3, #0
     ef0:	9307      	str	r3, [sp, #28]
    break;
     ef2:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     ef4:	9b07      	ldr	r3, [sp, #28]
}
     ef6:	4618      	mov	r0, r3
     ef8:	b009      	add	sp, #36	; 0x24
     efa:	f85d fb04 	ldr.w	pc, [sp], #4
     efe:	bf00      	nop
     f00:	1fff91f4 	.word	0x1fff91f4

00000f04 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     f04:	b500      	push	{lr}
     f06:	b089      	sub	sp, #36	; 0x24
     f08:	9003      	str	r0, [sp, #12]
     f0a:	9102      	str	r1, [sp, #8]
     f0c:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     f0e:	4b0f      	ldr	r3, [pc, #60]	; (f4c <SEGGER_RTT_Write+0x48>)
     f10:	9307      	str	r3, [sp, #28]
     f12:	9b07      	ldr	r3, [sp, #28]
     f14:	781b      	ldrb	r3, [r3, #0]
     f16:	b2db      	uxtb	r3, r3
     f18:	2b53      	cmp	r3, #83	; 0x53
     f1a:	d001      	beq.n	f20 <SEGGER_RTT_Write+0x1c>
     f1c:	f7ff fe86 	bl	c2c <_DoInit>
  SEGGER_RTT_LOCK();
     f20:	f3ef 8311 	mrs	r3, BASEPRI
     f24:	f04f 0120 	mov.w	r1, #32
     f28:	f381 8811 	msr	BASEPRI, r1
     f2c:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     f2e:	9a01      	ldr	r2, [sp, #4]
     f30:	9902      	ldr	r1, [sp, #8]
     f32:	9803      	ldr	r0, [sp, #12]
     f34:	f7ff ff96 	bl	e64 <SEGGER_RTT_WriteNoLock>
     f38:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     f3a:	9b06      	ldr	r3, [sp, #24]
     f3c:	f383 8811 	msr	BASEPRI, r3
  return Status;
     f40:	9b05      	ldr	r3, [sp, #20]
}
     f42:	4618      	mov	r0, r3
     f44:	b009      	add	sp, #36	; 0x24
     f46:	f85d fb04 	ldr.w	pc, [sp], #4
     f4a:	bf00      	nop
     f4c:	1fff91f4 	.word	0x1fff91f4

00000f50 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
     f50:	b508      	push	{r3, lr}
  _DoInit();
     f52:	f7ff fe6b 	bl	c2c <_DoInit>
}
     f56:	bf00      	nop
     f58:	bd08      	pop	{r3, pc}

00000f5a <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     f5a:	b500      	push	{lr}
     f5c:	b085      	sub	sp, #20
     f5e:	9001      	str	r0, [sp, #4]
     f60:	460b      	mov	r3, r1
     f62:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
     f66:	9b01      	ldr	r3, [sp, #4]
     f68:	689b      	ldr	r3, [r3, #8]
     f6a:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
     f6c:	9b03      	ldr	r3, [sp, #12]
     f6e:	1c5a      	adds	r2, r3, #1
     f70:	9b01      	ldr	r3, [sp, #4]
     f72:	685b      	ldr	r3, [r3, #4]
     f74:	429a      	cmp	r2, r3
     f76:	d80f      	bhi.n	f98 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
     f78:	9b01      	ldr	r3, [sp, #4]
     f7a:	681a      	ldr	r2, [r3, #0]
     f7c:	9b03      	ldr	r3, [sp, #12]
     f7e:	4413      	add	r3, r2
     f80:	f89d 2003 	ldrb.w	r2, [sp, #3]
     f84:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
     f86:	9b03      	ldr	r3, [sp, #12]
     f88:	1c5a      	adds	r2, r3, #1
     f8a:	9b01      	ldr	r3, [sp, #4]
     f8c:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
     f8e:	9b01      	ldr	r3, [sp, #4]
     f90:	68db      	ldr	r3, [r3, #12]
     f92:	1c5a      	adds	r2, r3, #1
     f94:	9b01      	ldr	r3, [sp, #4]
     f96:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
     f98:	9b01      	ldr	r3, [sp, #4]
     f9a:	689a      	ldr	r2, [r3, #8]
     f9c:	9b01      	ldr	r3, [sp, #4]
     f9e:	685b      	ldr	r3, [r3, #4]
     fa0:	429a      	cmp	r2, r3
     fa2:	d115      	bne.n	fd0 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
     fa4:	9b01      	ldr	r3, [sp, #4]
     fa6:	6918      	ldr	r0, [r3, #16]
     fa8:	9b01      	ldr	r3, [sp, #4]
     faa:	6819      	ldr	r1, [r3, #0]
     fac:	9b01      	ldr	r3, [sp, #4]
     fae:	689b      	ldr	r3, [r3, #8]
     fb0:	461a      	mov	r2, r3
     fb2:	f7ff ffa7 	bl	f04 <SEGGER_RTT_Write>
     fb6:	4602      	mov	r2, r0
     fb8:	9b01      	ldr	r3, [sp, #4]
     fba:	689b      	ldr	r3, [r3, #8]
     fbc:	429a      	cmp	r2, r3
     fbe:	d004      	beq.n	fca <_StoreChar+0x70>
      p->ReturnValue = -1;
     fc0:	9b01      	ldr	r3, [sp, #4]
     fc2:	f04f 32ff 	mov.w	r2, #4294967295
     fc6:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
     fc8:	e002      	b.n	fd0 <_StoreChar+0x76>
      p->Cnt = 0u;
     fca:	9b01      	ldr	r3, [sp, #4]
     fcc:	2200      	movs	r2, #0
     fce:	609a      	str	r2, [r3, #8]
}
     fd0:	bf00      	nop
     fd2:	b005      	add	sp, #20
     fd4:	f85d fb04 	ldr.w	pc, [sp], #4

00000fd8 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
     fd8:	b500      	push	{lr}
     fda:	b08b      	sub	sp, #44	; 0x2c
     fdc:	9003      	str	r0, [sp, #12]
     fde:	9102      	str	r1, [sp, #8]
     fe0:	9201      	str	r2, [sp, #4]
     fe2:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
     fe4:	9b02      	ldr	r3, [sp, #8]
     fe6:	9308      	str	r3, [sp, #32]
  Digit = 1u;
     fe8:	2301      	movs	r3, #1
     fea:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
     fec:	2301      	movs	r3, #1
     fee:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     ff0:	e007      	b.n	1002 <_PrintUnsigned+0x2a>
    Number = (Number / Base);
     ff2:	9a08      	ldr	r2, [sp, #32]
     ff4:	9b01      	ldr	r3, [sp, #4]
     ff6:	fbb2 f3f3 	udiv	r3, r2, r3
     ffa:	9308      	str	r3, [sp, #32]
    Width++;
     ffc:	9b07      	ldr	r3, [sp, #28]
     ffe:	3301      	adds	r3, #1
    1000:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1002:	9a08      	ldr	r2, [sp, #32]
    1004:	9b01      	ldr	r3, [sp, #4]
    1006:	429a      	cmp	r2, r3
    1008:	d2f3      	bcs.n	ff2 <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    100a:	9a00      	ldr	r2, [sp, #0]
    100c:	9b07      	ldr	r3, [sp, #28]
    100e:	429a      	cmp	r2, r3
    1010:	d901      	bls.n	1016 <_PrintUnsigned+0x3e>
    Width = NumDigits;
    1012:	9b00      	ldr	r3, [sp, #0]
    1014:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    1016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1018:	f003 0301 	and.w	r3, r3, #1
    101c:	2b00      	cmp	r3, #0
    101e:	d128      	bne.n	1072 <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1022:	2b00      	cmp	r3, #0
    1024:	d025      	beq.n	1072 <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    1026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1028:	f003 0302 	and.w	r3, r3, #2
    102c:	2b00      	cmp	r3, #0
    102e:	d006      	beq.n	103e <_PrintUnsigned+0x66>
    1030:	9b00      	ldr	r3, [sp, #0]
    1032:	2b00      	cmp	r3, #0
    1034:	d103      	bne.n	103e <_PrintUnsigned+0x66>
        c = '0';
    1036:	2330      	movs	r3, #48	; 0x30
    1038:	f88d 301b 	strb.w	r3, [sp, #27]
    103c:	e002      	b.n	1044 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    103e:	2320      	movs	r3, #32
    1040:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1044:	e00c      	b.n	1060 <_PrintUnsigned+0x88>
        FieldWidth--;
    1046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1048:	3b01      	subs	r3, #1
    104a:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    104c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1050:	4619      	mov	r1, r3
    1052:	9803      	ldr	r0, [sp, #12]
    1054:	f7ff ff81 	bl	f5a <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1058:	9b03      	ldr	r3, [sp, #12]
    105a:	68db      	ldr	r3, [r3, #12]
    105c:	2b00      	cmp	r3, #0
    105e:	db07      	blt.n	1070 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1062:	2b00      	cmp	r3, #0
    1064:	d005      	beq.n	1072 <_PrintUnsigned+0x9a>
    1066:	9a07      	ldr	r2, [sp, #28]
    1068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    106a:	429a      	cmp	r2, r3
    106c:	d3eb      	bcc.n	1046 <_PrintUnsigned+0x6e>
    106e:	e000      	b.n	1072 <_PrintUnsigned+0x9a>
          break;
    1070:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    1072:	9b03      	ldr	r3, [sp, #12]
    1074:	68db      	ldr	r3, [r3, #12]
    1076:	2b00      	cmp	r3, #0
    1078:	db55      	blt.n	1126 <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    107a:	9b00      	ldr	r3, [sp, #0]
    107c:	2b01      	cmp	r3, #1
    107e:	d903      	bls.n	1088 <_PrintUnsigned+0xb0>
        NumDigits--;
    1080:	9b00      	ldr	r3, [sp, #0]
    1082:	3b01      	subs	r3, #1
    1084:	9300      	str	r3, [sp, #0]
    1086:	e009      	b.n	109c <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1088:	9a02      	ldr	r2, [sp, #8]
    108a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    108c:	fbb2 f3f3 	udiv	r3, r2, r3
    1090:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    1092:	9a05      	ldr	r2, [sp, #20]
    1094:	9b01      	ldr	r3, [sp, #4]
    1096:	429a      	cmp	r2, r3
    1098:	d200      	bcs.n	109c <_PrintUnsigned+0xc4>
          break;
    109a:	e005      	b.n	10a8 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    109c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    109e:	9a01      	ldr	r2, [sp, #4]
    10a0:	fb02 f303 	mul.w	r3, r2, r3
    10a4:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    10a6:	e7e8      	b.n	107a <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    10a8:	9a02      	ldr	r2, [sp, #8]
    10aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10ac:	fbb2 f3f3 	udiv	r3, r2, r3
    10b0:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    10b2:	9b05      	ldr	r3, [sp, #20]
    10b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10b6:	fb02 f303 	mul.w	r3, r2, r3
    10ba:	9a02      	ldr	r2, [sp, #8]
    10bc:	1ad3      	subs	r3, r2, r3
    10be:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    10c0:	4a1b      	ldr	r2, [pc, #108]	; (1130 <_PrintUnsigned+0x158>)
    10c2:	9b05      	ldr	r3, [sp, #20]
    10c4:	4413      	add	r3, r2
    10c6:	781b      	ldrb	r3, [r3, #0]
    10c8:	4619      	mov	r1, r3
    10ca:	9803      	ldr	r0, [sp, #12]
    10cc:	f7ff ff45 	bl	f5a <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    10d0:	9b03      	ldr	r3, [sp, #12]
    10d2:	68db      	ldr	r3, [r3, #12]
    10d4:	2b00      	cmp	r3, #0
    10d6:	db08      	blt.n	10ea <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    10d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10da:	9b01      	ldr	r3, [sp, #4]
    10dc:	fbb2 f3f3 	udiv	r3, r2, r3
    10e0:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    10e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10e4:	2b00      	cmp	r3, #0
    10e6:	d1df      	bne.n	10a8 <_PrintUnsigned+0xd0>
    10e8:	e000      	b.n	10ec <_PrintUnsigned+0x114>
        break;
    10ea:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    10ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    10ee:	f003 0301 	and.w	r3, r3, #1
    10f2:	2b00      	cmp	r3, #0
    10f4:	d017      	beq.n	1126 <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    10f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10f8:	2b00      	cmp	r3, #0
    10fa:	d014      	beq.n	1126 <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    10fc:	e00a      	b.n	1114 <_PrintUnsigned+0x13c>
          FieldWidth--;
    10fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1100:	3b01      	subs	r3, #1
    1102:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1104:	2120      	movs	r1, #32
    1106:	9803      	ldr	r0, [sp, #12]
    1108:	f7ff ff27 	bl	f5a <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    110c:	9b03      	ldr	r3, [sp, #12]
    110e:	68db      	ldr	r3, [r3, #12]
    1110:	2b00      	cmp	r3, #0
    1112:	db07      	blt.n	1124 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1116:	2b00      	cmp	r3, #0
    1118:	d005      	beq.n	1126 <_PrintUnsigned+0x14e>
    111a:	9a07      	ldr	r2, [sp, #28]
    111c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    111e:	429a      	cmp	r2, r3
    1120:	d3ed      	bcc.n	10fe <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    1122:	e000      	b.n	1126 <_PrintUnsigned+0x14e>
            break;
    1124:	bf00      	nop
}
    1126:	bf00      	nop
    1128:	b00b      	add	sp, #44	; 0x2c
    112a:	f85d fb04 	ldr.w	pc, [sp], #4
    112e:	bf00      	nop
    1130:	00010f38 	.word	0x00010f38

00001134 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1134:	b500      	push	{lr}
    1136:	b089      	sub	sp, #36	; 0x24
    1138:	9005      	str	r0, [sp, #20]
    113a:	9104      	str	r1, [sp, #16]
    113c:	9203      	str	r2, [sp, #12]
    113e:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1140:	9b04      	ldr	r3, [sp, #16]
    1142:	2b00      	cmp	r3, #0
    1144:	bfb8      	it	lt
    1146:	425b      	neglt	r3, r3
    1148:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    114a:	2301      	movs	r3, #1
    114c:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    114e:	e007      	b.n	1160 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1150:	9b03      	ldr	r3, [sp, #12]
    1152:	9a06      	ldr	r2, [sp, #24]
    1154:	fb92 f3f3 	sdiv	r3, r2, r3
    1158:	9306      	str	r3, [sp, #24]
    Width++;
    115a:	9b07      	ldr	r3, [sp, #28]
    115c:	3301      	adds	r3, #1
    115e:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1160:	9b03      	ldr	r3, [sp, #12]
    1162:	9a06      	ldr	r2, [sp, #24]
    1164:	429a      	cmp	r2, r3
    1166:	daf3      	bge.n	1150 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1168:	9a02      	ldr	r2, [sp, #8]
    116a:	9b07      	ldr	r3, [sp, #28]
    116c:	429a      	cmp	r2, r3
    116e:	d901      	bls.n	1174 <_PrintInt+0x40>
    Width = NumDigits;
    1170:	9b02      	ldr	r3, [sp, #8]
    1172:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1176:	2b00      	cmp	r3, #0
    1178:	d00a      	beq.n	1190 <_PrintInt+0x5c>
    117a:	9b04      	ldr	r3, [sp, #16]
    117c:	2b00      	cmp	r3, #0
    117e:	db04      	blt.n	118a <_PrintInt+0x56>
    1180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1182:	f003 0304 	and.w	r3, r3, #4
    1186:	2b00      	cmp	r3, #0
    1188:	d002      	beq.n	1190 <_PrintInt+0x5c>
    FieldWidth--;
    118a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    118c:	3b01      	subs	r3, #1
    118e:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1192:	f003 0302 	and.w	r3, r3, #2
    1196:	2b00      	cmp	r3, #0
    1198:	d002      	beq.n	11a0 <_PrintInt+0x6c>
    119a:	9b02      	ldr	r3, [sp, #8]
    119c:	2b00      	cmp	r3, #0
    119e:	d01c      	beq.n	11da <_PrintInt+0xa6>
    11a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11a2:	f003 0301 	and.w	r3, r3, #1
    11a6:	2b00      	cmp	r3, #0
    11a8:	d117      	bne.n	11da <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    11aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11ac:	2b00      	cmp	r3, #0
    11ae:	d014      	beq.n	11da <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11b0:	e00a      	b.n	11c8 <_PrintInt+0x94>
        FieldWidth--;
    11b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11b4:	3b01      	subs	r3, #1
    11b6:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    11b8:	2120      	movs	r1, #32
    11ba:	9805      	ldr	r0, [sp, #20]
    11bc:	f7ff fecd 	bl	f5a <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    11c0:	9b05      	ldr	r3, [sp, #20]
    11c2:	68db      	ldr	r3, [r3, #12]
    11c4:	2b00      	cmp	r3, #0
    11c6:	db07      	blt.n	11d8 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11ca:	2b00      	cmp	r3, #0
    11cc:	d005      	beq.n	11da <_PrintInt+0xa6>
    11ce:	9a07      	ldr	r2, [sp, #28]
    11d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11d2:	429a      	cmp	r2, r3
    11d4:	d3ed      	bcc.n	11b2 <_PrintInt+0x7e>
    11d6:	e000      	b.n	11da <_PrintInt+0xa6>
          break;
    11d8:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    11da:	9b05      	ldr	r3, [sp, #20]
    11dc:	68db      	ldr	r3, [r3, #12]
    11de:	2b00      	cmp	r3, #0
    11e0:	db4a      	blt.n	1278 <_PrintInt+0x144>
    if (v < 0) {
    11e2:	9b04      	ldr	r3, [sp, #16]
    11e4:	2b00      	cmp	r3, #0
    11e6:	da07      	bge.n	11f8 <_PrintInt+0xc4>
      v = -v;
    11e8:	9b04      	ldr	r3, [sp, #16]
    11ea:	425b      	negs	r3, r3
    11ec:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    11ee:	212d      	movs	r1, #45	; 0x2d
    11f0:	9805      	ldr	r0, [sp, #20]
    11f2:	f7ff feb2 	bl	f5a <_StoreChar>
    11f6:	e008      	b.n	120a <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    11f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11fa:	f003 0304 	and.w	r3, r3, #4
    11fe:	2b00      	cmp	r3, #0
    1200:	d003      	beq.n	120a <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    1202:	212b      	movs	r1, #43	; 0x2b
    1204:	9805      	ldr	r0, [sp, #20]
    1206:	f7ff fea8 	bl	f5a <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    120a:	9b05      	ldr	r3, [sp, #20]
    120c:	68db      	ldr	r3, [r3, #12]
    120e:	2b00      	cmp	r3, #0
    1210:	db32      	blt.n	1278 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    1212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1214:	f003 0302 	and.w	r3, r3, #2
    1218:	2b00      	cmp	r3, #0
    121a:	d01f      	beq.n	125c <_PrintInt+0x128>
    121c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    121e:	f003 0301 	and.w	r3, r3, #1
    1222:	2b00      	cmp	r3, #0
    1224:	d11a      	bne.n	125c <_PrintInt+0x128>
    1226:	9b02      	ldr	r3, [sp, #8]
    1228:	2b00      	cmp	r3, #0
    122a:	d117      	bne.n	125c <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    122c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    122e:	2b00      	cmp	r3, #0
    1230:	d014      	beq.n	125c <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1232:	e00a      	b.n	124a <_PrintInt+0x116>
            FieldWidth--;
    1234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1236:	3b01      	subs	r3, #1
    1238:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    123a:	2130      	movs	r1, #48	; 0x30
    123c:	9805      	ldr	r0, [sp, #20]
    123e:	f7ff fe8c 	bl	f5a <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    1242:	9b05      	ldr	r3, [sp, #20]
    1244:	68db      	ldr	r3, [r3, #12]
    1246:	2b00      	cmp	r3, #0
    1248:	db07      	blt.n	125a <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    124a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    124c:	2b00      	cmp	r3, #0
    124e:	d005      	beq.n	125c <_PrintInt+0x128>
    1250:	9a07      	ldr	r2, [sp, #28]
    1252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1254:	429a      	cmp	r2, r3
    1256:	d3ed      	bcc.n	1234 <_PrintInt+0x100>
    1258:	e000      	b.n	125c <_PrintInt+0x128>
              break;
    125a:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    125c:	9b05      	ldr	r3, [sp, #20]
    125e:	68db      	ldr	r3, [r3, #12]
    1260:	2b00      	cmp	r3, #0
    1262:	db09      	blt.n	1278 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    1264:	9904      	ldr	r1, [sp, #16]
    1266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1268:	9301      	str	r3, [sp, #4]
    126a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    126c:	9300      	str	r3, [sp, #0]
    126e:	9b02      	ldr	r3, [sp, #8]
    1270:	9a03      	ldr	r2, [sp, #12]
    1272:	9805      	ldr	r0, [sp, #20]
    1274:	f7ff feb0 	bl	fd8 <_PrintUnsigned>
      }
    }
  }
}
    1278:	bf00      	nop
    127a:	b009      	add	sp, #36	; 0x24
    127c:	f85d fb04 	ldr.w	pc, [sp], #4

00001280 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1280:	b500      	push	{lr}
    1282:	b0a3      	sub	sp, #140	; 0x8c
    1284:	9005      	str	r0, [sp, #20]
    1286:	9104      	str	r1, [sp, #16]
    1288:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    128a:	ab06      	add	r3, sp, #24
    128c:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    128e:	2340      	movs	r3, #64	; 0x40
    1290:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    1292:	2300      	movs	r3, #0
    1294:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    1296:	9b05      	ldr	r3, [sp, #20]
    1298:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    129a:	2300      	movs	r3, #0
    129c:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    129e:	9b04      	ldr	r3, [sp, #16]
    12a0:	781b      	ldrb	r3, [r3, #0]
    12a2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    12a6:	9b04      	ldr	r3, [sp, #16]
    12a8:	3301      	adds	r3, #1
    12aa:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    12ac:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12b0:	2b00      	cmp	r3, #0
    12b2:	f000 819c 	beq.w	15ee <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    12b6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12ba:	2b25      	cmp	r3, #37	; 0x25
    12bc:	f040 818b 	bne.w	15d6 <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    12c0:	2300      	movs	r3, #0
    12c2:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    12c4:	2301      	movs	r3, #1
    12c6:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    12c8:	9b04      	ldr	r3, [sp, #16]
    12ca:	781b      	ldrb	r3, [r3, #0]
    12cc:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    12d0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12d4:	3b23      	subs	r3, #35	; 0x23
    12d6:	2b0d      	cmp	r3, #13
    12d8:	d83e      	bhi.n	1358 <SEGGER_RTT_vprintf+0xd8>
    12da:	a201      	add	r2, pc, #4	; (adr r2, 12e0 <SEGGER_RTT_vprintf+0x60>)
    12dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    12e0:	00001349 	.word	0x00001349
    12e4:	00001359 	.word	0x00001359
    12e8:	00001359 	.word	0x00001359
    12ec:	00001359 	.word	0x00001359
    12f0:	00001359 	.word	0x00001359
    12f4:	00001359 	.word	0x00001359
    12f8:	00001359 	.word	0x00001359
    12fc:	00001359 	.word	0x00001359
    1300:	00001339 	.word	0x00001339
    1304:	00001359 	.word	0x00001359
    1308:	00001319 	.word	0x00001319
    130c:	00001359 	.word	0x00001359
    1310:	00001359 	.word	0x00001359
    1314:	00001329 	.word	0x00001329
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1318:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    131a:	f043 0301 	orr.w	r3, r3, #1
    131e:	931e      	str	r3, [sp, #120]	; 0x78
    1320:	9b04      	ldr	r3, [sp, #16]
    1322:	3301      	adds	r3, #1
    1324:	9304      	str	r3, [sp, #16]
    1326:	e01a      	b.n	135e <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1328:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    132a:	f043 0302 	orr.w	r3, r3, #2
    132e:	931e      	str	r3, [sp, #120]	; 0x78
    1330:	9b04      	ldr	r3, [sp, #16]
    1332:	3301      	adds	r3, #1
    1334:	9304      	str	r3, [sp, #16]
    1336:	e012      	b.n	135e <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1338:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    133a:	f043 0304 	orr.w	r3, r3, #4
    133e:	931e      	str	r3, [sp, #120]	; 0x78
    1340:	9b04      	ldr	r3, [sp, #16]
    1342:	3301      	adds	r3, #1
    1344:	9304      	str	r3, [sp, #16]
    1346:	e00a      	b.n	135e <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1348:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    134a:	f043 0308 	orr.w	r3, r3, #8
    134e:	931e      	str	r3, [sp, #120]	; 0x78
    1350:	9b04      	ldr	r3, [sp, #16]
    1352:	3301      	adds	r3, #1
    1354:	9304      	str	r3, [sp, #16]
    1356:	e002      	b.n	135e <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1358:	2300      	movs	r3, #0
    135a:	9320      	str	r3, [sp, #128]	; 0x80
    135c:	bf00      	nop
        }
      } while (v);
    135e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1360:	2b00      	cmp	r3, #0
    1362:	d1b1      	bne.n	12c8 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    1364:	2300      	movs	r3, #0
    1366:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1368:	9b04      	ldr	r3, [sp, #16]
    136a:	781b      	ldrb	r3, [r3, #0]
    136c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1370:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1374:	2b2f      	cmp	r3, #47	; 0x2f
    1376:	d912      	bls.n	139e <SEGGER_RTT_vprintf+0x11e>
    1378:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    137c:	2b39      	cmp	r3, #57	; 0x39
    137e:	d80e      	bhi.n	139e <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1380:	9b04      	ldr	r3, [sp, #16]
    1382:	3301      	adds	r3, #1
    1384:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    1386:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1388:	4613      	mov	r3, r2
    138a:	009b      	lsls	r3, r3, #2
    138c:	4413      	add	r3, r2
    138e:	005b      	lsls	r3, r3, #1
    1390:	461a      	mov	r2, r3
    1392:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1396:	4413      	add	r3, r2
    1398:	3b30      	subs	r3, #48	; 0x30
    139a:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    139c:	e7e4      	b.n	1368 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    139e:	2300      	movs	r3, #0
    13a0:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    13a2:	9b04      	ldr	r3, [sp, #16]
    13a4:	781b      	ldrb	r3, [r3, #0]
    13a6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    13aa:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13ae:	2b2e      	cmp	r3, #46	; 0x2e
    13b0:	d11d      	bne.n	13ee <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    13b2:	9b04      	ldr	r3, [sp, #16]
    13b4:	3301      	adds	r3, #1
    13b6:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    13b8:	9b04      	ldr	r3, [sp, #16]
    13ba:	781b      	ldrb	r3, [r3, #0]
    13bc:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    13c0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13c4:	2b2f      	cmp	r3, #47	; 0x2f
    13c6:	d912      	bls.n	13ee <SEGGER_RTT_vprintf+0x16e>
    13c8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13cc:	2b39      	cmp	r3, #57	; 0x39
    13ce:	d80e      	bhi.n	13ee <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    13d0:	9b04      	ldr	r3, [sp, #16]
    13d2:	3301      	adds	r3, #1
    13d4:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    13d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    13d8:	4613      	mov	r3, r2
    13da:	009b      	lsls	r3, r3, #2
    13dc:	4413      	add	r3, r2
    13de:	005b      	lsls	r3, r3, #1
    13e0:	461a      	mov	r2, r3
    13e2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13e6:	4413      	add	r3, r2
    13e8:	3b30      	subs	r3, #48	; 0x30
    13ea:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    13ec:	e7e4      	b.n	13b8 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    13ee:	9b04      	ldr	r3, [sp, #16]
    13f0:	781b      	ldrb	r3, [r3, #0]
    13f2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    13f6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13fa:	2b6c      	cmp	r3, #108	; 0x6c
    13fc:	d003      	beq.n	1406 <SEGGER_RTT_vprintf+0x186>
    13fe:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1402:	2b68      	cmp	r3, #104	; 0x68
    1404:	d107      	bne.n	1416 <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    1406:	9b04      	ldr	r3, [sp, #16]
    1408:	3301      	adds	r3, #1
    140a:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    140c:	9b04      	ldr	r3, [sp, #16]
    140e:	781b      	ldrb	r3, [r3, #0]
    1410:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    1414:	e7ef      	b.n	13f6 <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    1416:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    141a:	2b25      	cmp	r3, #37	; 0x25
    141c:	f000 80d0 	beq.w	15c0 <SEGGER_RTT_vprintf+0x340>
    1420:	2b25      	cmp	r3, #37	; 0x25
    1422:	f2c0 80d3 	blt.w	15cc <SEGGER_RTT_vprintf+0x34c>
    1426:	2b78      	cmp	r3, #120	; 0x78
    1428:	f300 80d0 	bgt.w	15cc <SEGGER_RTT_vprintf+0x34c>
    142c:	2b58      	cmp	r3, #88	; 0x58
    142e:	f2c0 80cd 	blt.w	15cc <SEGGER_RTT_vprintf+0x34c>
    1432:	3b58      	subs	r3, #88	; 0x58
    1434:	2b20      	cmp	r3, #32
    1436:	f200 80c9 	bhi.w	15cc <SEGGER_RTT_vprintf+0x34c>
    143a:	a201      	add	r2, pc, #4	; (adr r2, 1440 <SEGGER_RTT_vprintf+0x1c0>)
    143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1440:	00001531 	.word	0x00001531
    1444:	000015cd 	.word	0x000015cd
    1448:	000015cd 	.word	0x000015cd
    144c:	000015cd 	.word	0x000015cd
    1450:	000015cd 	.word	0x000015cd
    1454:	000015cd 	.word	0x000015cd
    1458:	000015cd 	.word	0x000015cd
    145c:	000015cd 	.word	0x000015cd
    1460:	000015cd 	.word	0x000015cd
    1464:	000015cd 	.word	0x000015cd
    1468:	000015cd 	.word	0x000015cd
    146c:	000014c5 	.word	0x000014c5
    1470:	000014e9 	.word	0x000014e9
    1474:	000015cd 	.word	0x000015cd
    1478:	000015cd 	.word	0x000015cd
    147c:	000015cd 	.word	0x000015cd
    1480:	000015cd 	.word	0x000015cd
    1484:	000015cd 	.word	0x000015cd
    1488:	000015cd 	.word	0x000015cd
    148c:	000015cd 	.word	0x000015cd
    1490:	000015cd 	.word	0x000015cd
    1494:	000015cd 	.word	0x000015cd
    1498:	000015cd 	.word	0x000015cd
    149c:	000015cd 	.word	0x000015cd
    14a0:	0000159d 	.word	0x0000159d
    14a4:	000015cd 	.word	0x000015cd
    14a8:	000015cd 	.word	0x000015cd
    14ac:	00001555 	.word	0x00001555
    14b0:	000015cd 	.word	0x000015cd
    14b4:	0000150d 	.word	0x0000150d
    14b8:	000015cd 	.word	0x000015cd
    14bc:	000015cd 	.word	0x000015cd
    14c0:	00001531 	.word	0x00001531
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    14c4:	9b03      	ldr	r3, [sp, #12]
    14c6:	681b      	ldr	r3, [r3, #0]
    14c8:	1d19      	adds	r1, r3, #4
    14ca:	9a03      	ldr	r2, [sp, #12]
    14cc:	6011      	str	r1, [r2, #0]
    14ce:	681b      	ldr	r3, [r3, #0]
    14d0:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    14d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    14d4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    14d8:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    14dc:	ab16      	add	r3, sp, #88	; 0x58
    14de:	4611      	mov	r1, r2
    14e0:	4618      	mov	r0, r3
    14e2:	f7ff fd3a 	bl	f5a <_StoreChar>
        break;
    14e6:	e072      	b.n	15ce <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    14e8:	9b03      	ldr	r3, [sp, #12]
    14ea:	681b      	ldr	r3, [r3, #0]
    14ec:	1d19      	adds	r1, r3, #4
    14ee:	9a03      	ldr	r2, [sp, #12]
    14f0:	6011      	str	r1, [r2, #0]
    14f2:	681b      	ldr	r3, [r3, #0]
    14f4:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    14f6:	a816      	add	r0, sp, #88	; 0x58
    14f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    14fa:	9301      	str	r3, [sp, #4]
    14fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    14fe:	9300      	str	r3, [sp, #0]
    1500:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1502:	220a      	movs	r2, #10
    1504:	9920      	ldr	r1, [sp, #128]	; 0x80
    1506:	f7ff fe15 	bl	1134 <_PrintInt>
        break;
    150a:	e060      	b.n	15ce <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    150c:	9b03      	ldr	r3, [sp, #12]
    150e:	681b      	ldr	r3, [r3, #0]
    1510:	1d19      	adds	r1, r3, #4
    1512:	9a03      	ldr	r2, [sp, #12]
    1514:	6011      	str	r1, [r2, #0]
    1516:	681b      	ldr	r3, [r3, #0]
    1518:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    151a:	9920      	ldr	r1, [sp, #128]	; 0x80
    151c:	a816      	add	r0, sp, #88	; 0x58
    151e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1520:	9301      	str	r3, [sp, #4]
    1522:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1524:	9300      	str	r3, [sp, #0]
    1526:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1528:	220a      	movs	r2, #10
    152a:	f7ff fd55 	bl	fd8 <_PrintUnsigned>
        break;
    152e:	e04e      	b.n	15ce <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1530:	9b03      	ldr	r3, [sp, #12]
    1532:	681b      	ldr	r3, [r3, #0]
    1534:	1d19      	adds	r1, r3, #4
    1536:	9a03      	ldr	r2, [sp, #12]
    1538:	6011      	str	r1, [r2, #0]
    153a:	681b      	ldr	r3, [r3, #0]
    153c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    153e:	9920      	ldr	r1, [sp, #128]	; 0x80
    1540:	a816      	add	r0, sp, #88	; 0x58
    1542:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1544:	9301      	str	r3, [sp, #4]
    1546:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1548:	9300      	str	r3, [sp, #0]
    154a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    154c:	2210      	movs	r2, #16
    154e:	f7ff fd43 	bl	fd8 <_PrintUnsigned>
        break;
    1552:	e03c      	b.n	15ce <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    1554:	9b03      	ldr	r3, [sp, #12]
    1556:	681b      	ldr	r3, [r3, #0]
    1558:	1d19      	adds	r1, r3, #4
    155a:	9a03      	ldr	r2, [sp, #12]
    155c:	6011      	str	r1, [r2, #0]
    155e:	681b      	ldr	r3, [r3, #0]
    1560:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    1562:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1564:	2b00      	cmp	r3, #0
    1566:	d101      	bne.n	156c <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    1568:	4b2c      	ldr	r3, [pc, #176]	; (161c <SEGGER_RTT_vprintf+0x39c>)
    156a:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    156c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    156e:	781b      	ldrb	r3, [r3, #0]
    1570:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    1574:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1576:	3301      	adds	r3, #1
    1578:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    157a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    157e:	2b00      	cmp	r3, #0
    1580:	d00a      	beq.n	1598 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    1582:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1586:	ab16      	add	r3, sp, #88	; 0x58
    1588:	4611      	mov	r1, r2
    158a:	4618      	mov	r0, r3
    158c:	f7ff fce5 	bl	f5a <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1590:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1592:	2b00      	cmp	r3, #0
    1594:	daea      	bge.n	156c <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    1596:	e01a      	b.n	15ce <SEGGER_RTT_vprintf+0x34e>
              break;
    1598:	bf00      	nop
        break;
    159a:	e018      	b.n	15ce <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    159c:	9b03      	ldr	r3, [sp, #12]
    159e:	681b      	ldr	r3, [r3, #0]
    15a0:	1d19      	adds	r1, r3, #4
    15a2:	9a03      	ldr	r2, [sp, #12]
    15a4:	6011      	str	r1, [r2, #0]
    15a6:	681b      	ldr	r3, [r3, #0]
    15a8:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    15aa:	9920      	ldr	r1, [sp, #128]	; 0x80
    15ac:	a816      	add	r0, sp, #88	; 0x58
    15ae:	2300      	movs	r3, #0
    15b0:	9301      	str	r3, [sp, #4]
    15b2:	2308      	movs	r3, #8
    15b4:	9300      	str	r3, [sp, #0]
    15b6:	2308      	movs	r3, #8
    15b8:	2210      	movs	r2, #16
    15ba:	f7ff fd0d 	bl	fd8 <_PrintUnsigned>
        break;
    15be:	e006      	b.n	15ce <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    15c0:	ab16      	add	r3, sp, #88	; 0x58
    15c2:	2125      	movs	r1, #37	; 0x25
    15c4:	4618      	mov	r0, r3
    15c6:	f7ff fcc8 	bl	f5a <_StoreChar>
        break;
    15ca:	e000      	b.n	15ce <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    15cc:	bf00      	nop
      }
      sFormat++;
    15ce:	9b04      	ldr	r3, [sp, #16]
    15d0:	3301      	adds	r3, #1
    15d2:	9304      	str	r3, [sp, #16]
    15d4:	e006      	b.n	15e4 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    15d6:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    15da:	ab16      	add	r3, sp, #88	; 0x58
    15dc:	4611      	mov	r1, r2
    15de:	4618      	mov	r0, r3
    15e0:	f7ff fcbb 	bl	f5a <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    15e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15e6:	2b00      	cmp	r3, #0
    15e8:	f6bf ae59 	bge.w	129e <SEGGER_RTT_vprintf+0x1e>
    15ec:	e000      	b.n	15f0 <SEGGER_RTT_vprintf+0x370>
      break;
    15ee:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    15f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15f2:	2b00      	cmp	r3, #0
    15f4:	dd0c      	ble.n	1610 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    15f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    15f8:	2b00      	cmp	r3, #0
    15fa:	d005      	beq.n	1608 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    15fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    15fe:	ab06      	add	r3, sp, #24
    1600:	4619      	mov	r1, r3
    1602:	9805      	ldr	r0, [sp, #20]
    1604:	f7ff fc7e 	bl	f04 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1608:	9b19      	ldr	r3, [sp, #100]	; 0x64
    160a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    160c:	4413      	add	r3, r2
    160e:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1610:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    1612:	4618      	mov	r0, r3
    1614:	b023      	add	sp, #140	; 0x8c
    1616:	f85d fb04 	ldr.w	pc, [sp], #4
    161a:	bf00      	nop
    161c:	00010090 	.word	0x00010090

00001620 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1620:	b40e      	push	{r1, r2, r3}
    1622:	b500      	push	{lr}
    1624:	b084      	sub	sp, #16
    1626:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1628:	ab06      	add	r3, sp, #24
    162a:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    162c:	ab02      	add	r3, sp, #8
    162e:	461a      	mov	r2, r3
    1630:	9905      	ldr	r1, [sp, #20]
    1632:	9801      	ldr	r0, [sp, #4]
    1634:	f7ff fe24 	bl	1280 <SEGGER_RTT_vprintf>
    1638:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    163a:	9b03      	ldr	r3, [sp, #12]
}
    163c:	4618      	mov	r0, r3
    163e:	b004      	add	sp, #16
    1640:	f85d eb04 	ldr.w	lr, [sp], #4
    1644:	b003      	add	sp, #12
    1646:	4770      	bx	lr

00001648 <memcpy>:
    1648:	440a      	add	r2, r1
    164a:	4291      	cmp	r1, r2
    164c:	f100 33ff 	add.w	r3, r0, #4294967295
    1650:	d100      	bne.n	1654 <memcpy+0xc>
    1652:	4770      	bx	lr
    1654:	b510      	push	{r4, lr}
    1656:	f811 4b01 	ldrb.w	r4, [r1], #1
    165a:	f803 4f01 	strb.w	r4, [r3, #1]!
    165e:	4291      	cmp	r1, r2
    1660:	d1f9      	bne.n	1656 <memcpy+0xe>
    1662:	bd10      	pop	{r4, pc}

00001664 <memset>:
    1664:	4402      	add	r2, r0
    1666:	4603      	mov	r3, r0
    1668:	4293      	cmp	r3, r2
    166a:	d100      	bne.n	166e <memset+0xa>
    166c:	4770      	bx	lr
    166e:	f803 1b01 	strb.w	r1, [r3], #1
    1672:	e7f9      	b.n	1668 <memset+0x4>

00001674 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1674:	b086      	sub	sp, #24
    1676:	9003      	str	r0, [sp, #12]
    1678:	9102      	str	r1, [sp, #8]
    167a:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    167c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1680:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    1684:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    1686:	9b01      	ldr	r3, [sp, #4]
    1688:	2b00      	cmp	r3, #0
    168a:	d007      	beq.n	169c <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    168c:	9b03      	ldr	r3, [sp, #12]
    168e:	3310      	adds	r3, #16
    1690:	009b      	lsls	r3, r3, #2
    1692:	9a05      	ldr	r2, [sp, #20]
    1694:	4413      	add	r3, r2
    1696:	681a      	ldr	r2, [r3, #0]
    1698:	9b01      	ldr	r3, [sp, #4]
    169a:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    169c:	9b03      	ldr	r3, [sp, #12]
    169e:	3310      	adds	r3, #16
    16a0:	009b      	lsls	r3, r3, #2
    16a2:	9a05      	ldr	r2, [sp, #20]
    16a4:	4413      	add	r3, r2
    16a6:	9a02      	ldr	r2, [sp, #8]
    16a8:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    16aa:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    16ae:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    16b2:	bf00      	nop
    16b4:	b006      	add	sp, #24
    16b6:	4770      	bx	lr

000016b8 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    16b8:	b082      	sub	sp, #8
    16ba:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    16bc:	9b01      	ldr	r3, [sp, #4]
    16be:	f003 021f 	and.w	r2, r3, #31
    16c2:	4905      	ldr	r1, [pc, #20]	; (16d8 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    16c4:	9b01      	ldr	r3, [sp, #4]
    16c6:	095b      	lsrs	r3, r3, #5
    16c8:	2001      	movs	r0, #1
    16ca:	fa00 f202 	lsl.w	r2, r0, r2
    16ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    16d2:	bf00      	nop
    16d4:	b002      	add	sp, #8
    16d6:	4770      	bx	lr
    16d8:	e000e100 	.word	0xe000e100

000016dc <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    16dc:	b082      	sub	sp, #8
    16de:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    16e0:	9b01      	ldr	r3, [sp, #4]
    16e2:	f003 021f 	and.w	r2, r3, #31
    16e6:	4906      	ldr	r1, [pc, #24]	; (1700 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    16e8:	9b01      	ldr	r3, [sp, #4]
    16ea:	095b      	lsrs	r3, r3, #5
    16ec:	2001      	movs	r0, #1
    16ee:	fa00 f202 	lsl.w	r2, r0, r2
    16f2:	3320      	adds	r3, #32
    16f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    16f8:	bf00      	nop
    16fa:	b002      	add	sp, #8
    16fc:	4770      	bx	lr
    16fe:	bf00      	nop
    1700:	e000e100 	.word	0xe000e100

00001704 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1704:	b084      	sub	sp, #16
    1706:	9001      	str	r0, [sp, #4]
    1708:	460b      	mov	r3, r1
    170a:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    170e:	2304      	movs	r3, #4
    1710:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    1714:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1718:	f89d 300f 	ldrb.w	r3, [sp, #15]
    171c:	fa02 f103 	lsl.w	r1, r2, r3
    1720:	4a04      	ldr	r2, [pc, #16]	; (1734 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    1722:	9b01      	ldr	r3, [sp, #4]
    1724:	b2c9      	uxtb	r1, r1
    1726:	4413      	add	r3, r2
    1728:	460a      	mov	r2, r1
    172a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    172e:	bf00      	nop
    1730:	b004      	add	sp, #16
    1732:	4770      	bx	lr
    1734:	e000e100 	.word	0xe000e100

00001738 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    1738:	b084      	sub	sp, #16
    173a:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    173c:	2304      	movs	r3, #4
    173e:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    1742:	4a09      	ldr	r2, [pc, #36]	; (1768 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    1744:	9b01      	ldr	r3, [sp, #4]
    1746:	4413      	add	r3, r2
    1748:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    174c:	b2db      	uxtb	r3, r3
    174e:	461a      	mov	r2, r3
    1750:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1754:	fa42 f303 	asr.w	r3, r2, r3
    1758:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    175c:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    1760:	4618      	mov	r0, r3
    1762:	b004      	add	sp, #16
    1764:	4770      	bx	lr
    1766:	bf00      	nop
    1768:	e000e100 	.word	0xe000e100

0000176c <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    176c:	b082      	sub	sp, #8
    176e:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1770:	9b01      	ldr	r3, [sp, #4]
    1772:	f003 021f 	and.w	r2, r3, #31
    1776:	4906      	ldr	r1, [pc, #24]	; (1790 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    1778:	9b01      	ldr	r3, [sp, #4]
    177a:	095b      	lsrs	r3, r3, #5
    177c:	2001      	movs	r0, #1
    177e:	fa00 f202 	lsl.w	r2, r0, r2
    1782:	3360      	adds	r3, #96	; 0x60
    1784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    1788:	bf00      	nop
    178a:	b002      	add	sp, #8
    178c:	4770      	bx	lr
    178e:	bf00      	nop
    1790:	e000e100 	.word	0xe000e100

00001794 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1794:	b500      	push	{lr}
    1796:	b085      	sub	sp, #20
    1798:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    179a:	2300      	movs	r3, #0
    179c:	9303      	str	r3, [sp, #12]
    179e:	e05d      	b.n	185c <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    17a0:	9b01      	ldr	r3, [sp, #4]
    17a2:	6859      	ldr	r1, [r3, #4]
    17a4:	9a03      	ldr	r2, [sp, #12]
    17a6:	4613      	mov	r3, r2
    17a8:	005b      	lsls	r3, r3, #1
    17aa:	4413      	add	r3, r2
    17ac:	009b      	lsls	r3, r3, #2
    17ae:	440b      	add	r3, r1
    17b0:	681b      	ldr	r3, [r3, #0]
    17b2:	4618      	mov	r0, r3
    17b4:	f000 f899 	bl	18ea <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17b8:	9b01      	ldr	r3, [sp, #4]
    17ba:	6859      	ldr	r1, [r3, #4]
    17bc:	9a03      	ldr	r2, [sp, #12]
    17be:	4613      	mov	r3, r2
    17c0:	005b      	lsls	r3, r3, #1
    17c2:	4413      	add	r3, r2
    17c4:	009b      	lsls	r3, r3, #2
    17c6:	440b      	add	r3, r1
    17c8:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    17ca:	9b01      	ldr	r3, [sp, #4]
    17cc:	6859      	ldr	r1, [r3, #4]
    17ce:	9a03      	ldr	r2, [sp, #12]
    17d0:	4613      	mov	r3, r2
    17d2:	005b      	lsls	r3, r3, #1
    17d4:	4413      	add	r3, r2
    17d6:	009b      	lsls	r3, r3, #2
    17d8:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17da:	795b      	ldrb	r3, [r3, #5]
    17dc:	4619      	mov	r1, r3
    17de:	f000 f869 	bl	18b4 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17e2:	9b01      	ldr	r3, [sp, #4]
    17e4:	6859      	ldr	r1, [r3, #4]
    17e6:	9a03      	ldr	r2, [sp, #12]
    17e8:	4613      	mov	r3, r2
    17ea:	005b      	lsls	r3, r3, #1
    17ec:	4413      	add	r3, r2
    17ee:	009b      	lsls	r3, r3, #2
    17f0:	440b      	add	r3, r1
    17f2:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    17f4:	9b01      	ldr	r3, [sp, #4]
    17f6:	6859      	ldr	r1, [r3, #4]
    17f8:	9a03      	ldr	r2, [sp, #12]
    17fa:	4613      	mov	r3, r2
    17fc:	005b      	lsls	r3, r3, #1
    17fe:	4413      	add	r3, r2
    1800:	009b      	lsls	r3, r3, #2
    1802:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1804:	689b      	ldr	r3, [r3, #8]
    1806:	2200      	movs	r2, #0
    1808:	4619      	mov	r1, r3
    180a:	f000 f831 	bl	1870 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    180e:	9b01      	ldr	r3, [sp, #4]
    1810:	6859      	ldr	r1, [r3, #4]
    1812:	9a03      	ldr	r2, [sp, #12]
    1814:	4613      	mov	r3, r2
    1816:	005b      	lsls	r3, r3, #1
    1818:	4413      	add	r3, r2
    181a:	009b      	lsls	r3, r3, #2
    181c:	440b      	add	r3, r1
    181e:	791b      	ldrb	r3, [r3, #4]
    1820:	2b00      	cmp	r3, #0
    1822:	d00c      	beq.n	183e <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1824:	9b01      	ldr	r3, [sp, #4]
    1826:	6859      	ldr	r1, [r3, #4]
    1828:	9a03      	ldr	r2, [sp, #12]
    182a:	4613      	mov	r3, r2
    182c:	005b      	lsls	r3, r3, #1
    182e:	4413      	add	r3, r2
    1830:	009b      	lsls	r3, r3, #2
    1832:	440b      	add	r3, r1
    1834:	681b      	ldr	r3, [r3, #0]
    1836:	4618      	mov	r0, r3
    1838:	f000 f828 	bl	188c <IntCtrl_Ip_EnableIrq>
    183c:	e00b      	b.n	1856 <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    183e:	9b01      	ldr	r3, [sp, #4]
    1840:	6859      	ldr	r1, [r3, #4]
    1842:	9a03      	ldr	r2, [sp, #12]
    1844:	4613      	mov	r3, r2
    1846:	005b      	lsls	r3, r3, #1
    1848:	4413      	add	r3, r2
    184a:	009b      	lsls	r3, r3, #2
    184c:	440b      	add	r3, r1
    184e:	681b      	ldr	r3, [r3, #0]
    1850:	4618      	mov	r0, r3
    1852:	f000 f825 	bl	18a0 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1856:	9b03      	ldr	r3, [sp, #12]
    1858:	3301      	adds	r3, #1
    185a:	9303      	str	r3, [sp, #12]
    185c:	9b01      	ldr	r3, [sp, #4]
    185e:	681b      	ldr	r3, [r3, #0]
    1860:	9a03      	ldr	r2, [sp, #12]
    1862:	429a      	cmp	r2, r3
    1864:	d39c      	bcc.n	17a0 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    1866:	2300      	movs	r3, #0
}
    1868:	4618      	mov	r0, r3
    186a:	b005      	add	sp, #20
    186c:	f85d fb04 	ldr.w	pc, [sp], #4

00001870 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1870:	b500      	push	{lr}
    1872:	b085      	sub	sp, #20
    1874:	9003      	str	r0, [sp, #12]
    1876:	9102      	str	r1, [sp, #8]
    1878:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    187a:	9a01      	ldr	r2, [sp, #4]
    187c:	9902      	ldr	r1, [sp, #8]
    187e:	9803      	ldr	r0, [sp, #12]
    1880:	f7ff fef8 	bl	1674 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    1884:	bf00      	nop
    1886:	b005      	add	sp, #20
    1888:	f85d fb04 	ldr.w	pc, [sp], #4

0000188c <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    188c:	b500      	push	{lr}
    188e:	b083      	sub	sp, #12
    1890:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    1892:	9801      	ldr	r0, [sp, #4]
    1894:	f7ff ff10 	bl	16b8 <IntCtrl_Ip_EnableIrqPrivileged>
}
    1898:	bf00      	nop
    189a:	b003      	add	sp, #12
    189c:	f85d fb04 	ldr.w	pc, [sp], #4

000018a0 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    18a0:	b500      	push	{lr}
    18a2:	b083      	sub	sp, #12
    18a4:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    18a6:	9801      	ldr	r0, [sp, #4]
    18a8:	f7ff ff18 	bl	16dc <IntCtrl_Ip_DisableIrqPrivileged>
}
    18ac:	bf00      	nop
    18ae:	b003      	add	sp, #12
    18b0:	f85d fb04 	ldr.w	pc, [sp], #4

000018b4 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    18b4:	b500      	push	{lr}
    18b6:	b083      	sub	sp, #12
    18b8:	9001      	str	r0, [sp, #4]
    18ba:	460b      	mov	r3, r1
    18bc:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    18c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    18c4:	4619      	mov	r1, r3
    18c6:	9801      	ldr	r0, [sp, #4]
    18c8:	f7ff ff1c 	bl	1704 <IntCtrl_Ip_SetPriorityPrivileged>
}
    18cc:	bf00      	nop
    18ce:	b003      	add	sp, #12
    18d0:	f85d fb04 	ldr.w	pc, [sp], #4

000018d4 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    18d4:	b500      	push	{lr}
    18d6:	b083      	sub	sp, #12
    18d8:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    18da:	9801      	ldr	r0, [sp, #4]
    18dc:	f7ff ff2c 	bl	1738 <IntCtrl_Ip_GetPriorityPrivileged>
    18e0:	4603      	mov	r3, r0
}
    18e2:	4618      	mov	r0, r3
    18e4:	b003      	add	sp, #12
    18e6:	f85d fb04 	ldr.w	pc, [sp], #4

000018ea <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    18ea:	b500      	push	{lr}
    18ec:	b083      	sub	sp, #12
    18ee:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    18f0:	9801      	ldr	r0, [sp, #4]
    18f2:	f7ff ff3b 	bl	176c <IntCtrl_Ip_ClearPendingPrivileged>
}
    18f6:	bf00      	nop
    18f8:	b003      	add	sp, #12
    18fa:	f85d fb04 	ldr.w	pc, [sp], #4
    18fe:	bf00      	nop

00001900 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1900:	b500      	push	{lr}
    1902:	b083      	sub	sp, #12
    1904:	9001      	str	r0, [sp, #4]
    1906:	460b      	mov	r3, r1
    1908:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    190c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1910:	2b00      	cmp	r3, #0
    1912:	d003      	beq.n	191c <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    1914:	9801      	ldr	r0, [sp, #4]
    1916:	f7ff ffb9 	bl	188c <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    191a:	e002      	b.n	1922 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    191c:	9801      	ldr	r0, [sp, #4]
    191e:	f7ff ffbf 	bl	18a0 <IntCtrl_Ip_DisableIrq>
}
    1922:	bf00      	nop
    1924:	b003      	add	sp, #12
    1926:	f85d fb04 	ldr.w	pc, [sp], #4

0000192a <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    192a:	b500      	push	{lr}
    192c:	b083      	sub	sp, #12
    192e:	9001      	str	r0, [sp, #4]
    1930:	460b      	mov	r3, r1
    1932:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    1936:	f89d 3003 	ldrb.w	r3, [sp, #3]
    193a:	4619      	mov	r1, r3
    193c:	9801      	ldr	r0, [sp, #4]
    193e:	f7ff ffb9 	bl	18b4 <IntCtrl_Ip_SetPriority>
}
    1942:	bf00      	nop
    1944:	b003      	add	sp, #12
    1946:	f85d fb04 	ldr.w	pc, [sp], #4

0000194a <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    194a:	b500      	push	{lr}
    194c:	b083      	sub	sp, #12
    194e:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1950:	9801      	ldr	r0, [sp, #4]
    1952:	f7ff ffbf 	bl	18d4 <IntCtrl_Ip_GetPriority>
    1956:	4603      	mov	r3, r0
}
    1958:	4618      	mov	r0, r3
    195a:	b003      	add	sp, #12
    195c:	f85d fb04 	ldr.w	pc, [sp], #4

00001960 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1960:	b500      	push	{lr}
    1962:	b085      	sub	sp, #20
    1964:	9003      	str	r0, [sp, #12]
    1966:	9102      	str	r1, [sp, #8]
    1968:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    196a:	9a01      	ldr	r2, [sp, #4]
    196c:	9902      	ldr	r1, [sp, #8]
    196e:	9803      	ldr	r0, [sp, #12]
    1970:	f7ff ff7e 	bl	1870 <IntCtrl_Ip_InstallHandler>
}
    1974:	bf00      	nop
    1976:	b005      	add	sp, #20
    1978:	f85d fb04 	ldr.w	pc, [sp], #4

0000197c <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    197c:	b500      	push	{lr}
    197e:	b085      	sub	sp, #20
    1980:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    1982:	2300      	movs	r3, #0
    1984:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    1988:	f89d 300f 	ldrb.w	r3, [sp, #15]
    198c:	4a05      	ldr	r2, [pc, #20]	; (19a4 <Platform_Init+0x28>)
    198e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1992:	681b      	ldr	r3, [r3, #0]
    1994:	4618      	mov	r0, r3
    1996:	f000 f8c7 	bl	1b28 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    199a:	bf00      	nop
    199c:	b005      	add	sp, #20
    199e:	f85d fb04 	ldr.w	pc, [sp], #4
    19a2:	bf00      	nop
    19a4:	00010d98 	.word	0x00010d98

000019a8 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    19a8:	b500      	push	{lr}
    19aa:	b085      	sub	sp, #20
    19ac:	9001      	str	r0, [sp, #4]
    19ae:	460b      	mov	r3, r1
    19b0:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    19b4:	2300      	movs	r3, #0
    19b6:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    19ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
    19be:	4619      	mov	r1, r3
    19c0:	9801      	ldr	r0, [sp, #4]
    19c2:	f7ff ff9d 	bl	1900 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    19c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    19ca:	4618      	mov	r0, r3
    19cc:	b005      	add	sp, #20
    19ce:	f85d fb04 	ldr.w	pc, [sp], #4

000019d2 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    19d2:	b500      	push	{lr}
    19d4:	b085      	sub	sp, #20
    19d6:	9001      	str	r0, [sp, #4]
    19d8:	460b      	mov	r3, r1
    19da:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    19de:	2300      	movs	r3, #0
    19e0:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    19e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    19e8:	4619      	mov	r1, r3
    19ea:	9801      	ldr	r0, [sp, #4]
    19ec:	f7ff ff9d 	bl	192a <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    19f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    19f4:	4618      	mov	r0, r3
    19f6:	b005      	add	sp, #20
    19f8:	f85d fb04 	ldr.w	pc, [sp], #4

000019fc <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    19fc:	b500      	push	{lr}
    19fe:	b085      	sub	sp, #20
    1a00:	9001      	str	r0, [sp, #4]
    1a02:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1a04:	2300      	movs	r3, #0
    1a06:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    1a0a:	9801      	ldr	r0, [sp, #4]
    1a0c:	f7ff ff9d 	bl	194a <Platform_Ipw_GetIrqPriority>
    1a10:	4603      	mov	r3, r0
    1a12:	461a      	mov	r2, r3
    1a14:	9b00      	ldr	r3, [sp, #0]
    1a16:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    1a18:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1a1c:	4618      	mov	r0, r3
    1a1e:	b005      	add	sp, #20
    1a20:	f85d fb04 	ldr.w	pc, [sp], #4

00001a24 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1a24:	b500      	push	{lr}
    1a26:	b087      	sub	sp, #28
    1a28:	9003      	str	r0, [sp, #12]
    1a2a:	9102      	str	r1, [sp, #8]
    1a2c:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1a2e:	2300      	movs	r3, #0
    1a30:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1a34:	9a01      	ldr	r2, [sp, #4]
    1a36:	9902      	ldr	r1, [sp, #8]
    1a38:	9803      	ldr	r0, [sp, #12]
    1a3a:	f7ff ff91 	bl	1960 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1a3e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1a42:	4618      	mov	r0, r3
    1a44:	b007      	add	sp, #28
    1a46:	f85d fb04 	ldr.w	pc, [sp], #4
    1a4a:	bf00      	nop

00001a4c <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1a4c:	b500      	push	{lr}
    1a4e:	b085      	sub	sp, #20
    1a50:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a52:	2300      	movs	r3, #0
    1a54:	9303      	str	r3, [sp, #12]
    1a56:	e05d      	b.n	1b14 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a58:	9b01      	ldr	r3, [sp, #4]
    1a5a:	6859      	ldr	r1, [r3, #4]
    1a5c:	9a03      	ldr	r2, [sp, #12]
    1a5e:	4613      	mov	r3, r2
    1a60:	005b      	lsls	r3, r3, #1
    1a62:	4413      	add	r3, r2
    1a64:	009b      	lsls	r3, r3, #2
    1a66:	440b      	add	r3, r1
    1a68:	681b      	ldr	r3, [r3, #0]
    1a6a:	4618      	mov	r0, r3
    1a6c:	f7ff ff3d 	bl	18ea <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a70:	9b01      	ldr	r3, [sp, #4]
    1a72:	6859      	ldr	r1, [r3, #4]
    1a74:	9a03      	ldr	r2, [sp, #12]
    1a76:	4613      	mov	r3, r2
    1a78:	005b      	lsls	r3, r3, #1
    1a7a:	4413      	add	r3, r2
    1a7c:	009b      	lsls	r3, r3, #2
    1a7e:	440b      	add	r3, r1
    1a80:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1a82:	9b01      	ldr	r3, [sp, #4]
    1a84:	6859      	ldr	r1, [r3, #4]
    1a86:	9a03      	ldr	r2, [sp, #12]
    1a88:	4613      	mov	r3, r2
    1a8a:	005b      	lsls	r3, r3, #1
    1a8c:	4413      	add	r3, r2
    1a8e:	009b      	lsls	r3, r3, #2
    1a90:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a92:	795b      	ldrb	r3, [r3, #5]
    1a94:	4619      	mov	r1, r3
    1a96:	f7ff ff0d 	bl	18b4 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a9a:	9b01      	ldr	r3, [sp, #4]
    1a9c:	6859      	ldr	r1, [r3, #4]
    1a9e:	9a03      	ldr	r2, [sp, #12]
    1aa0:	4613      	mov	r3, r2
    1aa2:	005b      	lsls	r3, r3, #1
    1aa4:	4413      	add	r3, r2
    1aa6:	009b      	lsls	r3, r3, #2
    1aa8:	440b      	add	r3, r1
    1aaa:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1aac:	9b01      	ldr	r3, [sp, #4]
    1aae:	6859      	ldr	r1, [r3, #4]
    1ab0:	9a03      	ldr	r2, [sp, #12]
    1ab2:	4613      	mov	r3, r2
    1ab4:	005b      	lsls	r3, r3, #1
    1ab6:	4413      	add	r3, r2
    1ab8:	009b      	lsls	r3, r3, #2
    1aba:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1abc:	689b      	ldr	r3, [r3, #8]
    1abe:	2200      	movs	r2, #0
    1ac0:	4619      	mov	r1, r3
    1ac2:	f7ff fed5 	bl	1870 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1ac6:	9b01      	ldr	r3, [sp, #4]
    1ac8:	6859      	ldr	r1, [r3, #4]
    1aca:	9a03      	ldr	r2, [sp, #12]
    1acc:	4613      	mov	r3, r2
    1ace:	005b      	lsls	r3, r3, #1
    1ad0:	4413      	add	r3, r2
    1ad2:	009b      	lsls	r3, r3, #2
    1ad4:	440b      	add	r3, r1
    1ad6:	791b      	ldrb	r3, [r3, #4]
    1ad8:	2b00      	cmp	r3, #0
    1ada:	d00c      	beq.n	1af6 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1adc:	9b01      	ldr	r3, [sp, #4]
    1ade:	6859      	ldr	r1, [r3, #4]
    1ae0:	9a03      	ldr	r2, [sp, #12]
    1ae2:	4613      	mov	r3, r2
    1ae4:	005b      	lsls	r3, r3, #1
    1ae6:	4413      	add	r3, r2
    1ae8:	009b      	lsls	r3, r3, #2
    1aea:	440b      	add	r3, r1
    1aec:	681b      	ldr	r3, [r3, #0]
    1aee:	4618      	mov	r0, r3
    1af0:	f7ff fecc 	bl	188c <IntCtrl_Ip_EnableIrq>
    1af4:	e00b      	b.n	1b0e <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1af6:	9b01      	ldr	r3, [sp, #4]
    1af8:	6859      	ldr	r1, [r3, #4]
    1afa:	9a03      	ldr	r2, [sp, #12]
    1afc:	4613      	mov	r3, r2
    1afe:	005b      	lsls	r3, r3, #1
    1b00:	4413      	add	r3, r2
    1b02:	009b      	lsls	r3, r3, #2
    1b04:	440b      	add	r3, r1
    1b06:	681b      	ldr	r3, [r3, #0]
    1b08:	4618      	mov	r0, r3
    1b0a:	f7ff fec9 	bl	18a0 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1b0e:	9b03      	ldr	r3, [sp, #12]
    1b10:	3301      	adds	r3, #1
    1b12:	9303      	str	r3, [sp, #12]
    1b14:	9b01      	ldr	r3, [sp, #4]
    1b16:	681b      	ldr	r3, [r3, #0]
    1b18:	9a03      	ldr	r2, [sp, #12]
    1b1a:	429a      	cmp	r2, r3
    1b1c:	d39c      	bcc.n	1a58 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1b1e:	2300      	movs	r3, #0
}
    1b20:	4618      	mov	r0, r3
    1b22:	b005      	add	sp, #20
    1b24:	f85d fb04 	ldr.w	pc, [sp], #4

00001b28 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1b28:	b500      	push	{lr}
    1b2a:	b085      	sub	sp, #20
    1b2c:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1b2e:	2300      	movs	r3, #0
    1b30:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1b34:	9b01      	ldr	r3, [sp, #4]
    1b36:	681b      	ldr	r3, [r3, #0]
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d007      	beq.n	1b4c <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1b3c:	9b01      	ldr	r3, [sp, #4]
    1b3e:	681b      	ldr	r3, [r3, #0]
    1b40:	4618      	mov	r0, r3
    1b42:	f7ff ff83 	bl	1a4c <Platform_Ipw_InitIntCtrl>
    1b46:	4603      	mov	r3, r0
    1b48:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1b4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1b50:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1b52:	bf00      	nop
    1b54:	b005      	add	sp, #20
    1b56:	f85d fb04 	ldr.w	pc, [sp], #4

00001b5a <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1b5a:	2300      	movs	r3, #0
}
    1b5c:	4618      	mov	r0, r3
    1b5e:	4770      	bx	lr

00001b60 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1b60:	b082      	sub	sp, #8
    1b62:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1b64:	2301      	movs	r3, #1
}
    1b66:	4618      	mov	r0, r3
    1b68:	b002      	add	sp, #8
    1b6a:	4770      	bx	lr

00001b6c <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1b6c:	b082      	sub	sp, #8
    1b6e:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1b70:	bf00      	nop
    1b72:	b002      	add	sp, #8
    1b74:	4770      	bx	lr

00001b76 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1b76:	b082      	sub	sp, #8
    1b78:	9001      	str	r0, [sp, #4]
    return Micros;
    1b7a:	9b01      	ldr	r3, [sp, #4]
}
    1b7c:	4618      	mov	r0, r3
    1b7e:	b002      	add	sp, #8
    1b80:	4770      	bx	lr

00001b82 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1b82:	b500      	push	{lr}
    1b84:	b083      	sub	sp, #12
    1b86:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1b88:	f000 f86c 	bl	1c64 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1b8c:	bf00      	nop
    1b8e:	b003      	add	sp, #12
    1b90:	f85d fb04 	ldr.w	pc, [sp], #4

00001b94 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1b94:	b500      	push	{lr}
    1b96:	b085      	sub	sp, #20
    1b98:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1b9a:	2300      	movs	r3, #0
    1b9c:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1b9e:	9b01      	ldr	r3, [sp, #4]
    1ba0:	2b00      	cmp	r3, #0
    1ba2:	d003      	beq.n	1bac <OsIf_GetCounter+0x18>
    1ba4:	9b01      	ldr	r3, [sp, #4]
    1ba6:	2b01      	cmp	r3, #1
    1ba8:	d004      	beq.n	1bb4 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1baa:	e007      	b.n	1bbc <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1bac:	f7ff ffd5 	bl	1b5a <OsIf_Timer_Dummy_GetCounter>
    1bb0:	9003      	str	r0, [sp, #12]
            break;
    1bb2:	e003      	b.n	1bbc <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1bb4:	f000 f872 	bl	1c9c <OsIf_Timer_System_GetCounter>
    1bb8:	9003      	str	r0, [sp, #12]
            break;
    1bba:	bf00      	nop
    }

    return Value;
    1bbc:	9b03      	ldr	r3, [sp, #12]
}
    1bbe:	4618      	mov	r0, r3
    1bc0:	b005      	add	sp, #20
    1bc2:	f85d fb04 	ldr.w	pc, [sp], #4

00001bc6 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1bc6:	b500      	push	{lr}
    1bc8:	b085      	sub	sp, #20
    1bca:	9001      	str	r0, [sp, #4]
    1bcc:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1bce:	2300      	movs	r3, #0
    1bd0:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1bd2:	9b00      	ldr	r3, [sp, #0]
    1bd4:	2b00      	cmp	r3, #0
    1bd6:	d003      	beq.n	1be0 <OsIf_GetElapsed+0x1a>
    1bd8:	9b00      	ldr	r3, [sp, #0]
    1bda:	2b01      	cmp	r3, #1
    1bdc:	d005      	beq.n	1bea <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1bde:	e009      	b.n	1bf4 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1be0:	9801      	ldr	r0, [sp, #4]
    1be2:	f7ff ffbd 	bl	1b60 <OsIf_Timer_Dummy_GetElapsed>
    1be6:	9003      	str	r0, [sp, #12]
            break;
    1be8:	e004      	b.n	1bf4 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1bea:	9801      	ldr	r0, [sp, #4]
    1bec:	f000 f864 	bl	1cb8 <OsIf_Timer_System_GetElapsed>
    1bf0:	9003      	str	r0, [sp, #12]
            break;
    1bf2:	bf00      	nop
    }

    return Value;
    1bf4:	9b03      	ldr	r3, [sp, #12]
}
    1bf6:	4618      	mov	r0, r3
    1bf8:	b005      	add	sp, #20
    1bfa:	f85d fb04 	ldr.w	pc, [sp], #4

00001bfe <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1bfe:	b500      	push	{lr}
    1c00:	b083      	sub	sp, #12
    1c02:	9001      	str	r0, [sp, #4]
    1c04:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1c06:	9b00      	ldr	r3, [sp, #0]
    1c08:	2b00      	cmp	r3, #0
    1c0a:	d003      	beq.n	1c14 <OsIf_SetTimerFrequency+0x16>
    1c0c:	9b00      	ldr	r3, [sp, #0]
    1c0e:	2b01      	cmp	r3, #1
    1c10:	d004      	beq.n	1c1c <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c12:	e007      	b.n	1c24 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1c14:	9801      	ldr	r0, [sp, #4]
    1c16:	f7ff ffa9 	bl	1b6c <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1c1a:	e003      	b.n	1c24 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1c1c:	9801      	ldr	r0, [sp, #4]
    1c1e:	f000 f85b 	bl	1cd8 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1c22:	bf00      	nop
    }
}
    1c24:	bf00      	nop
    1c26:	b003      	add	sp, #12
    1c28:	f85d fb04 	ldr.w	pc, [sp], #4

00001c2c <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1c2c:	b500      	push	{lr}
    1c2e:	b085      	sub	sp, #20
    1c30:	9001      	str	r0, [sp, #4]
    1c32:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1c34:	2300      	movs	r3, #0
    1c36:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1c38:	9b00      	ldr	r3, [sp, #0]
    1c3a:	2b00      	cmp	r3, #0
    1c3c:	d003      	beq.n	1c46 <OsIf_MicrosToTicks+0x1a>
    1c3e:	9b00      	ldr	r3, [sp, #0]
    1c40:	2b01      	cmp	r3, #1
    1c42:	d005      	beq.n	1c50 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c44:	e009      	b.n	1c5a <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1c46:	9801      	ldr	r0, [sp, #4]
    1c48:	f7ff ff95 	bl	1b76 <OsIf_Timer_Dummy_MicrosToTicks>
    1c4c:	9003      	str	r0, [sp, #12]
            break;
    1c4e:	e004      	b.n	1c5a <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1c50:	9801      	ldr	r0, [sp, #4]
    1c52:	f000 f84f 	bl	1cf4 <OsIf_Timer_System_MicrosToTicks>
    1c56:	9003      	str	r0, [sp, #12]
            break;
    1c58:	bf00      	nop
    }

    return Value;
    1c5a:	9b03      	ldr	r3, [sp, #12]
}
    1c5c:	4618      	mov	r0, r3
    1c5e:	b005      	add	sp, #20
    1c60:	f85d fb04 	ldr.w	pc, [sp], #4

00001c64 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1c64:	b500      	push	{lr}
    1c66:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1c68:	2300      	movs	r3, #0
    1c6a:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1c6c:	4a09      	ldr	r2, [pc, #36]	; (1c94 <OsIf_Timer_System_Init+0x30>)
    1c6e:	9b01      	ldr	r3, [sp, #4]
    1c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c74:	685a      	ldr	r2, [r3, #4]
    1c76:	4908      	ldr	r1, [pc, #32]	; (1c98 <OsIf_Timer_System_Init+0x34>)
    1c78:	9b01      	ldr	r3, [sp, #4]
    1c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1c7e:	4a06      	ldr	r2, [pc, #24]	; (1c98 <OsIf_Timer_System_Init+0x34>)
    1c80:	9b01      	ldr	r3, [sp, #4]
    1c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c86:	4618      	mov	r0, r3
    1c88:	f000 f868 	bl	1d5c <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1c8c:	bf00      	nop
    1c8e:	b003      	add	sp, #12
    1c90:	f85d fb04 	ldr.w	pc, [sp], #4
    1c94:	00010d70 	.word	0x00010d70
    1c98:	1fff8b30 	.word	0x1fff8b30

00001c9c <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1c9c:	b500      	push	{lr}
    1c9e:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1ca0:	2300      	movs	r3, #0
    1ca2:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1ca4:	2300      	movs	r3, #0
    1ca6:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1ca8:	f000 f86c 	bl	1d84 <OsIf_Timer_System_Internal_GetCounter>
    1cac:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1cae:	9b01      	ldr	r3, [sp, #4]
}
    1cb0:	4618      	mov	r0, r3
    1cb2:	b003      	add	sp, #12
    1cb4:	f85d fb04 	ldr.w	pc, [sp], #4

00001cb8 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1cb8:	b500      	push	{lr}
    1cba:	b085      	sub	sp, #20
    1cbc:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1cbe:	2300      	movs	r3, #0
    1cc0:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1cc2:	2300      	movs	r3, #0
    1cc4:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1cc6:	9801      	ldr	r0, [sp, #4]
    1cc8:	f000 f864 	bl	1d94 <OsIf_Timer_System_Internal_GetElapsed>
    1ccc:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1cce:	9b03      	ldr	r3, [sp, #12]
}
    1cd0:	4618      	mov	r0, r3
    1cd2:	b005      	add	sp, #20
    1cd4:	f85d fb04 	ldr.w	pc, [sp], #4

00001cd8 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1cd8:	b084      	sub	sp, #16
    1cda:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1cdc:	2300      	movs	r3, #0
    1cde:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1ce0:	4903      	ldr	r1, [pc, #12]	; (1cf0 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1ce2:	9b03      	ldr	r3, [sp, #12]
    1ce4:	9a01      	ldr	r2, [sp, #4]
    1ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1cea:	bf00      	nop
    1cec:	b004      	add	sp, #16
    1cee:	4770      	bx	lr
    1cf0:	1fff8b30 	.word	0x1fff8b30

00001cf4 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cf6:	b087      	sub	sp, #28
    1cf8:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1cfa:	2100      	movs	r1, #0
    1cfc:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1cfe:	2100      	movs	r1, #0
    1d00:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1d02:	9901      	ldr	r1, [sp, #4]
    1d04:	2000      	movs	r0, #0
    1d06:	460e      	mov	r6, r1
    1d08:	4607      	mov	r7, r0
    1d0a:	4812      	ldr	r0, [pc, #72]	; (1d54 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1d0c:	9904      	ldr	r1, [sp, #16]
    1d0e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1d12:	2000      	movs	r0, #0
    1d14:	460c      	mov	r4, r1
    1d16:	4605      	mov	r5, r0
    1d18:	fb04 f007 	mul.w	r0, r4, r7
    1d1c:	fb06 f105 	mul.w	r1, r6, r5
    1d20:	4401      	add	r1, r0
    1d22:	fba6 2304 	umull	r2, r3, r6, r4
    1d26:	4419      	add	r1, r3
    1d28:	460b      	mov	r3, r1
    1d2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1d2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1d32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1d36:	4a08      	ldr	r2, [pc, #32]	; (1d58 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1d38:	f04f 0300 	mov.w	r3, #0
    1d3c:	f7fe fc32 	bl	5a4 <__aeabi_uldivmod>
    1d40:	4602      	mov	r2, r0
    1d42:	460b      	mov	r3, r1
    1d44:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1d48:	9b02      	ldr	r3, [sp, #8]
    1d4a:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1d4c:	9b05      	ldr	r3, [sp, #20]
}
    1d4e:	4618      	mov	r0, r3
    1d50:	b007      	add	sp, #28
    1d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d54:	1fff8b30 	.word	0x1fff8b30
    1d58:	000f4240 	.word	0x000f4240

00001d5c <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1d5c:	b082      	sub	sp, #8
    1d5e:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1d60:	4b07      	ldr	r3, [pc, #28]	; (1d80 <OsIf_Timer_System_Internal_Init+0x24>)
    1d62:	2200      	movs	r2, #0
    1d64:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1d66:	4b06      	ldr	r3, [pc, #24]	; (1d80 <OsIf_Timer_System_Internal_Init+0x24>)
    1d68:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1d6c:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1d6e:	4b04      	ldr	r3, [pc, #16]	; (1d80 <OsIf_Timer_System_Internal_Init+0x24>)
    1d70:	2200      	movs	r2, #0
    1d72:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1d74:	4b02      	ldr	r3, [pc, #8]	; (1d80 <OsIf_Timer_System_Internal_Init+0x24>)
    1d76:	2205      	movs	r2, #5
    1d78:	601a      	str	r2, [r3, #0]
}
    1d7a:	bf00      	nop
    1d7c:	b002      	add	sp, #8
    1d7e:	4770      	bx	lr
    1d80:	e000e010 	.word	0xe000e010

00001d84 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1d84:	4b02      	ldr	r3, [pc, #8]	; (1d90 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1d86:	689b      	ldr	r3, [r3, #8]
    1d88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1d8c:	4618      	mov	r0, r3
    1d8e:	4770      	bx	lr
    1d90:	e000e010 	.word	0xe000e010

00001d94 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1d94:	b084      	sub	sp, #16
    1d96:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1d98:	4b10      	ldr	r3, [pc, #64]	; (1ddc <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1d9a:	689b      	ldr	r3, [r3, #8]
    1d9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1da0:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1da2:	2300      	movs	r3, #0
    1da4:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1da6:	9b01      	ldr	r3, [sp, #4]
    1da8:	681b      	ldr	r3, [r3, #0]
    1daa:	9a02      	ldr	r2, [sp, #8]
    1dac:	429a      	cmp	r2, r3
    1dae:	d909      	bls.n	1dc4 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1db0:	9b01      	ldr	r3, [sp, #4]
    1db2:	681a      	ldr	r2, [r3, #0]
    1db4:	9b02      	ldr	r3, [sp, #8]
    1db6:	1ad3      	subs	r3, r2, r3
    1db8:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1dbc:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1dc0:	9303      	str	r3, [sp, #12]
    1dc2:	e004      	b.n	1dce <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1dc4:	9b01      	ldr	r3, [sp, #4]
    1dc6:	681a      	ldr	r2, [r3, #0]
    1dc8:	9b02      	ldr	r3, [sp, #8]
    1dca:	1ad3      	subs	r3, r2, r3
    1dcc:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1dce:	9b01      	ldr	r3, [sp, #4]
    1dd0:	9a02      	ldr	r2, [sp, #8]
    1dd2:	601a      	str	r2, [r3, #0]

    return dif;
    1dd4:	9b03      	ldr	r3, [sp, #12]
}
    1dd6:	4618      	mov	r0, r3
    1dd8:	b004      	add	sp, #16
    1dda:	4770      	bx	lr
    1ddc:	e000e010 	.word	0xe000e010

00001de0 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1de0:	b082      	sub	sp, #8
    1de2:	9001      	str	r0, [sp, #4]
    1de4:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1de6:	bf00      	nop
    1de8:	b002      	add	sp, #8
    1dea:	4770      	bx	lr

00001dec <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1dec:	b500      	push	{lr}
    1dee:	b085      	sub	sp, #20
    1df0:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1df2:	4b24      	ldr	r3, [pc, #144]	; (1e84 <Clock_Ip_UpdateDriverContext+0x98>)
    1df4:	2201      	movs	r2, #1
    1df6:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1df8:	4b23      	ldr	r3, [pc, #140]	; (1e88 <Clock_Ip_UpdateDriverContext+0x9c>)
    1dfa:	681b      	ldr	r3, [r3, #0]
    1dfc:	2102      	movs	r1, #2
    1dfe:	4618      	mov	r0, r3
    1e00:	f003 fc32 	bl	5668 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1e04:	2300      	movs	r3, #0
    1e06:	f88d 300f 	strb.w	r3, [sp, #15]
    1e0a:	e015      	b.n	1e38 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1e0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e10:	9a01      	ldr	r2, [sp, #4]
    1e12:	334a      	adds	r3, #74	; 0x4a
    1e14:	00db      	lsls	r3, r3, #3
    1e16:	4413      	add	r3, r2
    1e18:	6858      	ldr	r0, [r3, #4]
    1e1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e1e:	9a01      	ldr	r2, [sp, #4]
    1e20:	334a      	adds	r3, #74	; 0x4a
    1e22:	00db      	lsls	r3, r3, #3
    1e24:	4413      	add	r3, r2
    1e26:	689b      	ldr	r3, [r3, #8]
    1e28:	4619      	mov	r1, r3
    1e2a:	f001 fadc 	bl	33e6 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1e2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e32:	3301      	adds	r3, #1
    1e34:	f88d 300f 	strb.w	r3, [sp, #15]
    1e38:	9b01      	ldr	r3, [sp, #4]
    1e3a:	7bdb      	ldrb	r3, [r3, #15]
    1e3c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e40:	429a      	cmp	r2, r3
    1e42:	d3e3      	bcc.n	1e0c <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1e44:	f000 f824 	bl	1e90 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1e48:	2301      	movs	r3, #1
    1e4a:	f88d 300f 	strb.w	r3, [sp, #15]
    1e4e:	e00e      	b.n	1e6e <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1e50:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e54:	9b01      	ldr	r3, [sp, #4]
    1e56:	327e      	adds	r2, #126	; 0x7e
    1e58:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1e5c:	490b      	ldr	r1, [pc, #44]	; (1e8c <Clock_Ip_UpdateDriverContext+0xa0>)
    1e5e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e62:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1e64:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e68:	3301      	adds	r3, #1
    1e6a:	f88d 300f 	strb.w	r3, [sp, #15]
    1e6e:	9b01      	ldr	r3, [sp, #4]
    1e70:	7cdb      	ldrb	r3, [r3, #19]
    1e72:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e76:	429a      	cmp	r2, r3
    1e78:	d3ea      	bcc.n	1e50 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1e7a:	bf00      	nop
    1e7c:	bf00      	nop
    1e7e:	b005      	add	sp, #20
    1e80:	f85d fb04 	ldr.w	pc, [sp], #4
    1e84:	1fff8b10 	.word	0x1fff8b10
    1e88:	1fff8b34 	.word	0x1fff8b34
    1e8c:	1fff8b40 	.word	0x1fff8b40

00001e90 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1e90:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1e92:	4b23      	ldr	r3, [pc, #140]	; (1f20 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1e94:	781b      	ldrb	r3, [r3, #0]
    1e96:	f083 0301 	eor.w	r3, r3, #1
    1e9a:	b2db      	uxtb	r3, r3
    1e9c:	2b00      	cmp	r3, #0
    1e9e:	d03d      	beq.n	1f1c <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1ea0:	4b1f      	ldr	r3, [pc, #124]	; (1f20 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1ea2:	2201      	movs	r2, #1
    1ea4:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1ea6:	4b1f      	ldr	r3, [pc, #124]	; (1f24 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1ea8:	685b      	ldr	r3, [r3, #4]
    1eaa:	2100      	movs	r1, #0
    1eac:	2000      	movs	r0, #0
    1eae:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1eb0:	4b1c      	ldr	r3, [pc, #112]	; (1f24 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1eb2:	689b      	ldr	r3, [r3, #8]
    1eb4:	2057      	movs	r0, #87	; 0x57
    1eb6:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1eb8:	4b1b      	ldr	r3, [pc, #108]	; (1f28 <Clock_Ip_CallEmptyCallbacks+0x98>)
    1eba:	681b      	ldr	r3, [r3, #0]
    1ebc:	2000      	movs	r0, #0
    1ebe:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1ec0:	4b1a      	ldr	r3, [pc, #104]	; (1f2c <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1ec2:	681b      	ldr	r3, [r3, #0]
    1ec4:	2000      	movs	r0, #0
    1ec6:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1ec8:	4b19      	ldr	r3, [pc, #100]	; (1f30 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1eca:	681b      	ldr	r3, [r3, #0]
    1ecc:	2000      	movs	r0, #0
    1ece:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ed0:	4b18      	ldr	r3, [pc, #96]	; (1f34 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1ed2:	685b      	ldr	r3, [r3, #4]
    1ed4:	2000      	movs	r0, #0
    1ed6:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1ed8:	4b16      	ldr	r3, [pc, #88]	; (1f34 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1eda:	689b      	ldr	r3, [r3, #8]
    1edc:	2057      	movs	r0, #87	; 0x57
    1ede:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ee0:	4b15      	ldr	r3, [pc, #84]	; (1f38 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1ee2:	681b      	ldr	r3, [r3, #0]
    1ee4:	2000      	movs	r0, #0
    1ee6:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1ee8:	4b13      	ldr	r3, [pc, #76]	; (1f38 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1eea:	685b      	ldr	r3, [r3, #4]
    1eec:	2100      	movs	r1, #0
    1eee:	2057      	movs	r0, #87	; 0x57
    1ef0:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ef2:	4b12      	ldr	r3, [pc, #72]	; (1f3c <Clock_Ip_CallEmptyCallbacks+0xac>)
    1ef4:	681b      	ldr	r3, [r3, #0]
    1ef6:	2000      	movs	r0, #0
    1ef8:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1efa:	4b11      	ldr	r3, [pc, #68]	; (1f40 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1efc:	685b      	ldr	r3, [r3, #4]
    1efe:	2000      	movs	r0, #0
    1f00:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1f02:	4b0f      	ldr	r3, [pc, #60]	; (1f40 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1f04:	689b      	ldr	r3, [r3, #8]
    1f06:	2057      	movs	r0, #87	; 0x57
    1f08:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1f0a:	4b0e      	ldr	r3, [pc, #56]	; (1f44 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1f0c:	685b      	ldr	r3, [r3, #4]
    1f0e:	2000      	movs	r0, #0
    1f10:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1f12:	4b0d      	ldr	r3, [pc, #52]	; (1f48 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1f14:	681b      	ldr	r3, [r3, #0]
    1f16:	2100      	movs	r1, #0
    1f18:	2000      	movs	r0, #0
    1f1a:	4798      	blx	r3
    }
}
    1f1c:	bf00      	nop
    1f1e:	bd08      	pop	{r3, pc}
    1f20:	1fff8b38 	.word	0x1fff8b38
    1f24:	00010734 	.word	0x00010734
    1f28:	00010648 	.word	0x00010648
    1f2c:	00010684 	.word	0x00010684
    1f30:	0001068c 	.word	0x0001068c
    1f34:	000106b4 	.word	0x000106b4
    1f38:	000106c0 	.word	0x000106c0
    1f3c:	000106f8 	.word	0x000106f8
    1f40:	00010744 	.word	0x00010744
    1f44:	00010770 	.word	0x00010770
    1f48:	0001076c 	.word	0x0001076c

00001f4c <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1f4c:	b500      	push	{lr}
    1f4e:	b085      	sub	sp, #20
    1f50:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1f52:	9b01      	ldr	r3, [sp, #4]
    1f54:	7adb      	ldrb	r3, [r3, #11]
    1f56:	9303      	str	r3, [sp, #12]
    1f58:	e01f      	b.n	1f9a <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f5a:	9b03      	ldr	r3, [sp, #12]
    1f5c:	1e5a      	subs	r2, r3, #1
    1f5e:	9b01      	ldr	r3, [sp, #4]
    1f60:	320d      	adds	r2, #13
    1f62:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1f66:	495a      	ldr	r1, [pc, #360]	; (20d0 <Clock_Ip_ResetClockConfiguration+0x184>)
    1f68:	4613      	mov	r3, r2
    1f6a:	00db      	lsls	r3, r3, #3
    1f6c:	4413      	add	r3, r2
    1f6e:	440b      	add	r3, r1
    1f70:	3301      	adds	r3, #1
    1f72:	781b      	ldrb	r3, [r3, #0]
    1f74:	461a      	mov	r2, r3
    1f76:	4b57      	ldr	r3, [pc, #348]	; (20d4 <Clock_Ip_ResetClockConfiguration+0x188>)
    1f78:	5c9b      	ldrb	r3, [r3, r2]
    1f7a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1f7c:	4a56      	ldr	r2, [pc, #344]	; (20d8 <Clock_Ip_ResetClockConfiguration+0x18c>)
    1f7e:	9b02      	ldr	r3, [sp, #8]
    1f80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f84:	9a03      	ldr	r2, [sp, #12]
    1f86:	3a01      	subs	r2, #1
    1f88:	320d      	adds	r2, #13
    1f8a:	00d2      	lsls	r2, r2, #3
    1f8c:	9901      	ldr	r1, [sp, #4]
    1f8e:	440a      	add	r2, r1
    1f90:	4610      	mov	r0, r2
    1f92:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1f94:	9b03      	ldr	r3, [sp, #12]
    1f96:	3b01      	subs	r3, #1
    1f98:	9303      	str	r3, [sp, #12]
    1f9a:	9b03      	ldr	r3, [sp, #12]
    1f9c:	2b00      	cmp	r3, #0
    1f9e:	d1dc      	bne.n	1f5a <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1fa0:	9b01      	ldr	r3, [sp, #4]
    1fa2:	7b9b      	ldrb	r3, [r3, #14]
    1fa4:	9303      	str	r3, [sp, #12]
    1fa6:	e026      	b.n	1ff6 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1fa8:	9b03      	ldr	r3, [sp, #12]
    1faa:	3b01      	subs	r3, #1
    1fac:	9a01      	ldr	r2, [sp, #4]
    1fae:	3324      	adds	r3, #36	; 0x24
    1fb0:	011b      	lsls	r3, r3, #4
    1fb2:	4413      	add	r3, r2
    1fb4:	3304      	adds	r3, #4
    1fb6:	681a      	ldr	r2, [r3, #0]
    1fb8:	4945      	ldr	r1, [pc, #276]	; (20d0 <Clock_Ip_ResetClockConfiguration+0x184>)
    1fba:	4613      	mov	r3, r2
    1fbc:	00db      	lsls	r3, r3, #3
    1fbe:	4413      	add	r3, r2
    1fc0:	440b      	add	r3, r1
    1fc2:	3301      	adds	r3, #1
    1fc4:	781b      	ldrb	r3, [r3, #0]
    1fc6:	461a      	mov	r2, r3
    1fc8:	4b44      	ldr	r3, [pc, #272]	; (20dc <Clock_Ip_ResetClockConfiguration+0x190>)
    1fca:	5c9b      	ldrb	r3, [r3, r2]
    1fcc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1fce:	4944      	ldr	r1, [pc, #272]	; (20e0 <Clock_Ip_ResetClockConfiguration+0x194>)
    1fd0:	9a02      	ldr	r2, [sp, #8]
    1fd2:	4613      	mov	r3, r2
    1fd4:	005b      	lsls	r3, r3, #1
    1fd6:	4413      	add	r3, r2
    1fd8:	009b      	lsls	r3, r3, #2
    1fda:	440b      	add	r3, r1
    1fdc:	681b      	ldr	r3, [r3, #0]
    1fde:	9a03      	ldr	r2, [sp, #12]
    1fe0:	3a01      	subs	r2, #1
    1fe2:	3224      	adds	r2, #36	; 0x24
    1fe4:	0112      	lsls	r2, r2, #4
    1fe6:	9901      	ldr	r1, [sp, #4]
    1fe8:	440a      	add	r2, r1
    1fea:	3204      	adds	r2, #4
    1fec:	4610      	mov	r0, r2
    1fee:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1ff0:	9b03      	ldr	r3, [sp, #12]
    1ff2:	3b01      	subs	r3, #1
    1ff4:	9303      	str	r3, [sp, #12]
    1ff6:	9b03      	ldr	r3, [sp, #12]
    1ff8:	2b00      	cmp	r3, #0
    1ffa:	d1d5      	bne.n	1fa8 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1ffc:	9b01      	ldr	r3, [sp, #4]
    1ffe:	7a9b      	ldrb	r3, [r3, #10]
    2000:	9303      	str	r3, [sp, #12]
    2002:	e02a      	b.n	205a <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2004:	9b03      	ldr	r3, [sp, #12]
    2006:	1e5a      	subs	r2, r3, #1
    2008:	9901      	ldr	r1, [sp, #4]
    200a:	4613      	mov	r3, r2
    200c:	009b      	lsls	r3, r3, #2
    200e:	4413      	add	r3, r2
    2010:	00db      	lsls	r3, r3, #3
    2012:	440b      	add	r3, r1
    2014:	3340      	adds	r3, #64	; 0x40
    2016:	681a      	ldr	r2, [r3, #0]
    2018:	492d      	ldr	r1, [pc, #180]	; (20d0 <Clock_Ip_ResetClockConfiguration+0x184>)
    201a:	4613      	mov	r3, r2
    201c:	00db      	lsls	r3, r3, #3
    201e:	4413      	add	r3, r2
    2020:	440b      	add	r3, r1
    2022:	3301      	adds	r3, #1
    2024:	781b      	ldrb	r3, [r3, #0]
    2026:	461a      	mov	r2, r3
    2028:	4b2e      	ldr	r3, [pc, #184]	; (20e4 <Clock_Ip_ResetClockConfiguration+0x198>)
    202a:	5c9b      	ldrb	r3, [r3, r2]
    202c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    202e:	492e      	ldr	r1, [pc, #184]	; (20e8 <Clock_Ip_ResetClockConfiguration+0x19c>)
    2030:	9a02      	ldr	r2, [sp, #8]
    2032:	4613      	mov	r3, r2
    2034:	009b      	lsls	r3, r3, #2
    2036:	4413      	add	r3, r2
    2038:	009b      	lsls	r3, r3, #2
    203a:	440b      	add	r3, r1
    203c:	6819      	ldr	r1, [r3, #0]
    203e:	9b03      	ldr	r3, [sp, #12]
    2040:	1e5a      	subs	r2, r3, #1
    2042:	4613      	mov	r3, r2
    2044:	009b      	lsls	r3, r3, #2
    2046:	4413      	add	r3, r2
    2048:	00db      	lsls	r3, r3, #3
    204a:	3340      	adds	r3, #64	; 0x40
    204c:	9a01      	ldr	r2, [sp, #4]
    204e:	4413      	add	r3, r2
    2050:	4618      	mov	r0, r3
    2052:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2054:	9b03      	ldr	r3, [sp, #12]
    2056:	3b01      	subs	r3, #1
    2058:	9303      	str	r3, [sp, #12]
    205a:	9b03      	ldr	r3, [sp, #12]
    205c:	2b00      	cmp	r3, #0
    205e:	d1d1      	bne.n	2004 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2060:	9b01      	ldr	r3, [sp, #4]
    2062:	7a5b      	ldrb	r3, [r3, #9]
    2064:	9303      	str	r3, [sp, #12]
    2066:	e02b      	b.n	20c0 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2068:	9b03      	ldr	r3, [sp, #12]
    206a:	1e5a      	subs	r2, r3, #1
    206c:	9901      	ldr	r1, [sp, #4]
    206e:	4613      	mov	r3, r2
    2070:	009b      	lsls	r3, r3, #2
    2072:	4413      	add	r3, r2
    2074:	009b      	lsls	r3, r3, #2
    2076:	440b      	add	r3, r1
    2078:	332c      	adds	r3, #44	; 0x2c
    207a:	681a      	ldr	r2, [r3, #0]
    207c:	4914      	ldr	r1, [pc, #80]	; (20d0 <Clock_Ip_ResetClockConfiguration+0x184>)
    207e:	4613      	mov	r3, r2
    2080:	00db      	lsls	r3, r3, #3
    2082:	4413      	add	r3, r2
    2084:	440b      	add	r3, r1
    2086:	3301      	adds	r3, #1
    2088:	781b      	ldrb	r3, [r3, #0]
    208a:	461a      	mov	r2, r3
    208c:	4b17      	ldr	r3, [pc, #92]	; (20ec <Clock_Ip_ResetClockConfiguration+0x1a0>)
    208e:	5c9b      	ldrb	r3, [r3, r2]
    2090:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    2092:	4917      	ldr	r1, [pc, #92]	; (20f0 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    2094:	9a02      	ldr	r2, [sp, #8]
    2096:	4613      	mov	r3, r2
    2098:	009b      	lsls	r3, r3, #2
    209a:	4413      	add	r3, r2
    209c:	009b      	lsls	r3, r3, #2
    209e:	440b      	add	r3, r1
    20a0:	6819      	ldr	r1, [r3, #0]
    20a2:	9b03      	ldr	r3, [sp, #12]
    20a4:	1e5a      	subs	r2, r3, #1
    20a6:	4613      	mov	r3, r2
    20a8:	009b      	lsls	r3, r3, #2
    20aa:	4413      	add	r3, r2
    20ac:	009b      	lsls	r3, r3, #2
    20ae:	3328      	adds	r3, #40	; 0x28
    20b0:	9a01      	ldr	r2, [sp, #4]
    20b2:	4413      	add	r3, r2
    20b4:	3304      	adds	r3, #4
    20b6:	4618      	mov	r0, r3
    20b8:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    20ba:	9b03      	ldr	r3, [sp, #12]
    20bc:	3b01      	subs	r3, #1
    20be:	9303      	str	r3, [sp, #12]
    20c0:	9b03      	ldr	r3, [sp, #12]
    20c2:	2b00      	cmp	r3, #0
    20c4:	d1d0      	bne.n	2068 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    20c6:	bf00      	nop
    20c8:	bf00      	nop
    20ca:	b005      	add	sp, #20
    20cc:	f85d fb04 	ldr.w	pc, [sp], #4
    20d0:	00010138 	.word	0x00010138
    20d4:	00010108 	.word	0x00010108
    20d8:	00010770 	.word	0x00010770
    20dc:	000100e8 	.word	0x000100e8
    20e0:	000106b4 	.word	0x000106b4
    20e4:	000100f8 	.word	0x000100f8
    20e8:	00010744 	.word	0x00010744
    20ec:	000100b8 	.word	0x000100b8
    20f0:	0001068c 	.word	0x0001068c

000020f4 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    20f4:	b500      	push	{lr}
    20f6:	b085      	sub	sp, #20
    20f8:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    20fa:	2301      	movs	r3, #1
    20fc:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    20fe:	9801      	ldr	r0, [sp, #4]
    2100:	f000 f818 	bl	2134 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2104:	4b0a      	ldr	r3, [pc, #40]	; (2130 <Clock_Ip_Init+0x3c>)
    2106:	781b      	ldrb	r3, [r3, #0]
    2108:	2b00      	cmp	r3, #0
    210a:	d00a      	beq.n	2122 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    210c:	f000 fb74 	bl	27f8 <Clock_Ip_GetPllStatus>
    2110:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    2112:	9b02      	ldr	r3, [sp, #8]
    2114:	2b00      	cmp	r3, #0
    2116:	d106      	bne.n	2126 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2118:	f000 fbf2 	bl	2900 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    211c:	2300      	movs	r3, #0
    211e:	9303      	str	r3, [sp, #12]
    2120:	e001      	b.n	2126 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    2122:	2300      	movs	r3, #0
    2124:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    2126:	9b03      	ldr	r3, [sp, #12]
}
    2128:	4618      	mov	r0, r3
    212a:	b005      	add	sp, #20
    212c:	f85d fb04 	ldr.w	pc, [sp], #4
    2130:	1fff8b3c 	.word	0x1fff8b3c

00002134 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2134:	b510      	push	{r4, lr}
    2136:	b084      	sub	sp, #16
    2138:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    213a:	4a9f      	ldr	r2, [pc, #636]	; (23b8 <Clock_Ip_InitClock+0x284>)
    213c:	9b01      	ldr	r3, [sp, #4]
    213e:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2140:	2101      	movs	r1, #1
    2142:	9801      	ldr	r0, [sp, #4]
    2144:	f003 fa90 	bl	5668 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2148:	4b9b      	ldr	r3, [pc, #620]	; (23b8 <Clock_Ip_InitClock+0x284>)
    214a:	681b      	ldr	r3, [r3, #0]
    214c:	2b00      	cmp	r3, #0
    214e:	d030      	beq.n	21b2 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2150:	2300      	movs	r3, #0
    2152:	9303      	str	r3, [sp, #12]
    2154:	e027      	b.n	21a6 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2156:	9901      	ldr	r1, [sp, #4]
    2158:	9a03      	ldr	r2, [sp, #12]
    215a:	4613      	mov	r3, r2
    215c:	009b      	lsls	r3, r3, #2
    215e:	4413      	add	r3, r2
    2160:	009b      	lsls	r3, r3, #2
    2162:	440b      	add	r3, r1
    2164:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2168:	681a      	ldr	r2, [r3, #0]
    216a:	4994      	ldr	r1, [pc, #592]	; (23bc <Clock_Ip_InitClock+0x288>)
    216c:	4613      	mov	r3, r2
    216e:	00db      	lsls	r3, r3, #3
    2170:	4413      	add	r3, r2
    2172:	440b      	add	r3, r1
    2174:	3301      	adds	r3, #1
    2176:	781b      	ldrb	r3, [r3, #0]
    2178:	461a      	mov	r2, r3
    217a:	4b91      	ldr	r3, [pc, #580]	; (23c0 <Clock_Ip_InitClock+0x28c>)
    217c:	5c9b      	ldrb	r3, [r3, r2]
    217e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2180:	4a90      	ldr	r2, [pc, #576]	; (23c4 <Clock_Ip_InitClock+0x290>)
    2182:	9b02      	ldr	r3, [sp, #8]
    2184:	011b      	lsls	r3, r3, #4
    2186:	4413      	add	r3, r2
    2188:	6819      	ldr	r1, [r3, #0]
    218a:	9a03      	ldr	r2, [sp, #12]
    218c:	4613      	mov	r3, r2
    218e:	009b      	lsls	r3, r3, #2
    2190:	4413      	add	r3, r2
    2192:	009b      	lsls	r3, r3, #2
    2194:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2198:	9a01      	ldr	r2, [sp, #4]
    219a:	4413      	add	r3, r2
    219c:	4618      	mov	r0, r3
    219e:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    21a0:	9b03      	ldr	r3, [sp, #12]
    21a2:	3301      	adds	r3, #1
    21a4:	9303      	str	r3, [sp, #12]
    21a6:	9b01      	ldr	r3, [sp, #4]
    21a8:	7c9b      	ldrb	r3, [r3, #18]
    21aa:	461a      	mov	r2, r3
    21ac:	9b03      	ldr	r3, [sp, #12]
    21ae:	4293      	cmp	r3, r2
    21b0:	d3d1      	bcc.n	2156 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    21b2:	9801      	ldr	r0, [sp, #4]
    21b4:	f7ff feca 	bl	1f4c <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    21b8:	2300      	movs	r3, #0
    21ba:	9303      	str	r3, [sp, #12]
    21bc:	e029      	b.n	2212 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    21be:	9901      	ldr	r1, [sp, #4]
    21c0:	9a03      	ldr	r2, [sp, #12]
    21c2:	4613      	mov	r3, r2
    21c4:	005b      	lsls	r3, r3, #1
    21c6:	4413      	add	r3, r2
    21c8:	009b      	lsls	r3, r3, #2
    21ca:	440b      	add	r3, r1
    21cc:	3314      	adds	r3, #20
    21ce:	681a      	ldr	r2, [r3, #0]
    21d0:	497a      	ldr	r1, [pc, #488]	; (23bc <Clock_Ip_InitClock+0x288>)
    21d2:	4613      	mov	r3, r2
    21d4:	00db      	lsls	r3, r3, #3
    21d6:	4413      	add	r3, r2
    21d8:	440b      	add	r3, r1
    21da:	3301      	adds	r3, #1
    21dc:	781b      	ldrb	r3, [r3, #0]
    21de:	461a      	mov	r2, r3
    21e0:	4b79      	ldr	r3, [pc, #484]	; (23c8 <Clock_Ip_InitClock+0x294>)
    21e2:	5c9b      	ldrb	r3, [r3, r2]
    21e4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    21e6:	4979      	ldr	r1, [pc, #484]	; (23cc <Clock_Ip_InitClock+0x298>)
    21e8:	9a02      	ldr	r2, [sp, #8]
    21ea:	4613      	mov	r3, r2
    21ec:	005b      	lsls	r3, r3, #1
    21ee:	4413      	add	r3, r2
    21f0:	009b      	lsls	r3, r3, #2
    21f2:	440b      	add	r3, r1
    21f4:	6819      	ldr	r1, [r3, #0]
    21f6:	9a03      	ldr	r2, [sp, #12]
    21f8:	4613      	mov	r3, r2
    21fa:	005b      	lsls	r3, r3, #1
    21fc:	4413      	add	r3, r2
    21fe:	009b      	lsls	r3, r3, #2
    2200:	3310      	adds	r3, #16
    2202:	9a01      	ldr	r2, [sp, #4]
    2204:	4413      	add	r3, r2
    2206:	3304      	adds	r3, #4
    2208:	4618      	mov	r0, r3
    220a:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    220c:	9b03      	ldr	r3, [sp, #12]
    220e:	3301      	adds	r3, #1
    2210:	9303      	str	r3, [sp, #12]
    2212:	9b01      	ldr	r3, [sp, #4]
    2214:	7a1b      	ldrb	r3, [r3, #8]
    2216:	461a      	mov	r2, r3
    2218:	9b03      	ldr	r3, [sp, #12]
    221a:	4293      	cmp	r3, r2
    221c:	d3cf      	bcc.n	21be <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    221e:	2300      	movs	r3, #0
    2220:	9303      	str	r3, [sp, #12]
    2222:	e02a      	b.n	227a <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2224:	9901      	ldr	r1, [sp, #4]
    2226:	9a03      	ldr	r2, [sp, #12]
    2228:	4613      	mov	r3, r2
    222a:	009b      	lsls	r3, r3, #2
    222c:	4413      	add	r3, r2
    222e:	009b      	lsls	r3, r3, #2
    2230:	440b      	add	r3, r1
    2232:	332c      	adds	r3, #44	; 0x2c
    2234:	681a      	ldr	r2, [r3, #0]
    2236:	4961      	ldr	r1, [pc, #388]	; (23bc <Clock_Ip_InitClock+0x288>)
    2238:	4613      	mov	r3, r2
    223a:	00db      	lsls	r3, r3, #3
    223c:	4413      	add	r3, r2
    223e:	440b      	add	r3, r1
    2240:	3301      	adds	r3, #1
    2242:	781b      	ldrb	r3, [r3, #0]
    2244:	461a      	mov	r2, r3
    2246:	4b62      	ldr	r3, [pc, #392]	; (23d0 <Clock_Ip_InitClock+0x29c>)
    2248:	5c9b      	ldrb	r3, [r3, r2]
    224a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    224c:	4961      	ldr	r1, [pc, #388]	; (23d4 <Clock_Ip_InitClock+0x2a0>)
    224e:	9a02      	ldr	r2, [sp, #8]
    2250:	4613      	mov	r3, r2
    2252:	009b      	lsls	r3, r3, #2
    2254:	4413      	add	r3, r2
    2256:	009b      	lsls	r3, r3, #2
    2258:	440b      	add	r3, r1
    225a:	3304      	adds	r3, #4
    225c:	6819      	ldr	r1, [r3, #0]
    225e:	9a03      	ldr	r2, [sp, #12]
    2260:	4613      	mov	r3, r2
    2262:	009b      	lsls	r3, r3, #2
    2264:	4413      	add	r3, r2
    2266:	009b      	lsls	r3, r3, #2
    2268:	3328      	adds	r3, #40	; 0x28
    226a:	9a01      	ldr	r2, [sp, #4]
    226c:	4413      	add	r3, r2
    226e:	3304      	adds	r3, #4
    2270:	4618      	mov	r0, r3
    2272:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2274:	9b03      	ldr	r3, [sp, #12]
    2276:	3301      	adds	r3, #1
    2278:	9303      	str	r3, [sp, #12]
    227a:	9b01      	ldr	r3, [sp, #4]
    227c:	7a5b      	ldrb	r3, [r3, #9]
    227e:	461a      	mov	r2, r3
    2280:	9b03      	ldr	r3, [sp, #12]
    2282:	4293      	cmp	r3, r2
    2284:	d3ce      	bcc.n	2224 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    2286:	9801      	ldr	r0, [sp, #4]
    2288:	f7ff fdb0 	bl	1dec <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    228c:	2300      	movs	r3, #0
    228e:	9303      	str	r3, [sp, #12]
    2290:	e028      	b.n	22e4 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    2292:	9901      	ldr	r1, [sp, #4]
    2294:	9a03      	ldr	r2, [sp, #12]
    2296:	4613      	mov	r3, r2
    2298:	009b      	lsls	r3, r3, #2
    229a:	4413      	add	r3, r2
    229c:	009b      	lsls	r3, r3, #2
    229e:	440b      	add	r3, r1
    22a0:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    22a4:	681a      	ldr	r2, [r3, #0]
    22a6:	4945      	ldr	r1, [pc, #276]	; (23bc <Clock_Ip_InitClock+0x288>)
    22a8:	4613      	mov	r3, r2
    22aa:	00db      	lsls	r3, r3, #3
    22ac:	4413      	add	r3, r2
    22ae:	440b      	add	r3, r1
    22b0:	3301      	adds	r3, #1
    22b2:	781b      	ldrb	r3, [r3, #0]
    22b4:	461a      	mov	r2, r3
    22b6:	4b48      	ldr	r3, [pc, #288]	; (23d8 <Clock_Ip_InitClock+0x2a4>)
    22b8:	5c9b      	ldrb	r3, [r3, r2]
    22ba:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    22bc:	4a47      	ldr	r2, [pc, #284]	; (23dc <Clock_Ip_InitClock+0x2a8>)
    22be:	9b02      	ldr	r3, [sp, #8]
    22c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    22c4:	9a03      	ldr	r2, [sp, #12]
    22c6:	4613      	mov	r3, r2
    22c8:	009b      	lsls	r3, r3, #2
    22ca:	4413      	add	r3, r2
    22cc:	009b      	lsls	r3, r3, #2
    22ce:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    22d2:	9a01      	ldr	r2, [sp, #4]
    22d4:	4413      	add	r3, r2
    22d6:	3304      	adds	r3, #4
    22d8:	9903      	ldr	r1, [sp, #12]
    22da:	4618      	mov	r0, r3
    22dc:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    22de:	9b03      	ldr	r3, [sp, #12]
    22e0:	3301      	adds	r3, #1
    22e2:	9303      	str	r3, [sp, #12]
    22e4:	9b01      	ldr	r3, [sp, #4]
    22e6:	7c5b      	ldrb	r3, [r3, #17]
    22e8:	461a      	mov	r2, r3
    22ea:	9b03      	ldr	r3, [sp, #12]
    22ec:	4293      	cmp	r3, r2
    22ee:	d3d0      	bcc.n	2292 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    22f0:	2300      	movs	r3, #0
    22f2:	9303      	str	r3, [sp, #12]
    22f4:	e026      	b.n	2344 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    22f6:	9901      	ldr	r1, [sp, #4]
    22f8:	9a03      	ldr	r2, [sp, #12]
    22fa:	4613      	mov	r3, r2
    22fc:	005b      	lsls	r3, r3, #1
    22fe:	4413      	add	r3, r2
    2300:	009b      	lsls	r3, r3, #2
    2302:	440b      	add	r3, r1
    2304:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2308:	681a      	ldr	r2, [r3, #0]
    230a:	492c      	ldr	r1, [pc, #176]	; (23bc <Clock_Ip_InitClock+0x288>)
    230c:	4613      	mov	r3, r2
    230e:	00db      	lsls	r3, r3, #3
    2310:	4413      	add	r3, r2
    2312:	440b      	add	r3, r1
    2314:	3301      	adds	r3, #1
    2316:	781b      	ldrb	r3, [r3, #0]
    2318:	461a      	mov	r2, r3
    231a:	4b31      	ldr	r3, [pc, #196]	; (23e0 <Clock_Ip_InitClock+0x2ac>)
    231c:	5c9b      	ldrb	r3, [r3, r2]
    231e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2320:	4a30      	ldr	r2, [pc, #192]	; (23e4 <Clock_Ip_InitClock+0x2b0>)
    2322:	9b02      	ldr	r3, [sp, #8]
    2324:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2328:	9a03      	ldr	r2, [sp, #12]
    232a:	4613      	mov	r3, r2
    232c:	005b      	lsls	r3, r3, #1
    232e:	4413      	add	r3, r2
    2330:	009b      	lsls	r3, r3, #2
    2332:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2336:	9a01      	ldr	r2, [sp, #4]
    2338:	4413      	add	r3, r2
    233a:	4618      	mov	r0, r3
    233c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    233e:	9b03      	ldr	r3, [sp, #12]
    2340:	3301      	adds	r3, #1
    2342:	9303      	str	r3, [sp, #12]
    2344:	9b01      	ldr	r3, [sp, #4]
    2346:	7b5b      	ldrb	r3, [r3, #13]
    2348:	461a      	mov	r2, r3
    234a:	9b03      	ldr	r3, [sp, #12]
    234c:	4293      	cmp	r3, r2
    234e:	d3d2      	bcc.n	22f6 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2350:	2300      	movs	r3, #0
    2352:	9303      	str	r3, [sp, #12]
    2354:	e026      	b.n	23a4 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    2356:	9901      	ldr	r1, [sp, #4]
    2358:	9a03      	ldr	r2, [sp, #12]
    235a:	4613      	mov	r3, r2
    235c:	005b      	lsls	r3, r3, #1
    235e:	4413      	add	r3, r2
    2360:	009b      	lsls	r3, r3, #2
    2362:	440b      	add	r3, r1
    2364:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2368:	681a      	ldr	r2, [r3, #0]
    236a:	4914      	ldr	r1, [pc, #80]	; (23bc <Clock_Ip_InitClock+0x288>)
    236c:	4613      	mov	r3, r2
    236e:	00db      	lsls	r3, r3, #3
    2370:	4413      	add	r3, r2
    2372:	440b      	add	r3, r1
    2374:	3301      	adds	r3, #1
    2376:	781b      	ldrb	r3, [r3, #0]
    2378:	461a      	mov	r2, r3
    237a:	4b1b      	ldr	r3, [pc, #108]	; (23e8 <Clock_Ip_InitClock+0x2b4>)
    237c:	5c9b      	ldrb	r3, [r3, r2]
    237e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    2380:	4a1a      	ldr	r2, [pc, #104]	; (23ec <Clock_Ip_InitClock+0x2b8>)
    2382:	9b02      	ldr	r3, [sp, #8]
    2384:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    2388:	9a03      	ldr	r2, [sp, #12]
    238a:	4613      	mov	r3, r2
    238c:	005b      	lsls	r3, r3, #1
    238e:	4413      	add	r3, r2
    2390:	009b      	lsls	r3, r3, #2
    2392:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2396:	9a01      	ldr	r2, [sp, #4]
    2398:	4413      	add	r3, r2
    239a:	4618      	mov	r0, r3
    239c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    239e:	9b03      	ldr	r3, [sp, #12]
    23a0:	3301      	adds	r3, #1
    23a2:	9303      	str	r3, [sp, #12]
    23a4:	9b01      	ldr	r3, [sp, #4]
    23a6:	7b1b      	ldrb	r3, [r3, #12]
    23a8:	461a      	mov	r2, r3
    23aa:	9b03      	ldr	r3, [sp, #12]
    23ac:	4293      	cmp	r3, r2
    23ae:	d3d2      	bcc.n	2356 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    23b0:	2300      	movs	r3, #0
    23b2:	9303      	str	r3, [sp, #12]
    23b4:	e044      	b.n	2440 <Clock_Ip_InitClock+0x30c>
    23b6:	bf00      	nop
    23b8:	1fff8b34 	.word	0x1fff8b34
    23bc:	00010138 	.word	0x00010138
    23c0:	00010128 	.word	0x00010128
    23c4:	00010734 	.word	0x00010734
    23c8:	000100c8 	.word	0x000100c8
    23cc:	000106f8 	.word	0x000106f8
    23d0:	000100b8 	.word	0x000100b8
    23d4:	0001068c 	.word	0x0001068c
    23d8:	00010118 	.word	0x00010118
    23dc:	0001076c 	.word	0x0001076c
    23e0:	000100a8 	.word	0x000100a8
    23e4:	00010684 	.word	0x00010684
    23e8:	00010098 	.word	0x00010098
    23ec:	00010648 	.word	0x00010648
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    23f0:	9901      	ldr	r1, [sp, #4]
    23f2:	9a03      	ldr	r2, [sp, #12]
    23f4:	4613      	mov	r3, r2
    23f6:	005b      	lsls	r3, r3, #1
    23f8:	4413      	add	r3, r2
    23fa:	009b      	lsls	r3, r3, #2
    23fc:	440b      	add	r3, r1
    23fe:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2402:	681a      	ldr	r2, [r3, #0]
    2404:	49ac      	ldr	r1, [pc, #688]	; (26b8 <Clock_Ip_InitClock+0x584>)
    2406:	4613      	mov	r3, r2
    2408:	00db      	lsls	r3, r3, #3
    240a:	4413      	add	r3, r2
    240c:	440b      	add	r3, r1
    240e:	3301      	adds	r3, #1
    2410:	781b      	ldrb	r3, [r3, #0]
    2412:	461a      	mov	r2, r3
    2414:	4ba9      	ldr	r3, [pc, #676]	; (26bc <Clock_Ip_InitClock+0x588>)
    2416:	5c9b      	ldrb	r3, [r3, r2]
    2418:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    241a:	4aa9      	ldr	r2, [pc, #676]	; (26c0 <Clock_Ip_InitClock+0x58c>)
    241c:	9b02      	ldr	r3, [sp, #8]
    241e:	00db      	lsls	r3, r3, #3
    2420:	4413      	add	r3, r2
    2422:	6859      	ldr	r1, [r3, #4]
    2424:	9a03      	ldr	r2, [sp, #12]
    2426:	4613      	mov	r3, r2
    2428:	005b      	lsls	r3, r3, #1
    242a:	4413      	add	r3, r2
    242c:	009b      	lsls	r3, r3, #2
    242e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2432:	9a01      	ldr	r2, [sp, #4]
    2434:	4413      	add	r3, r2
    2436:	4618      	mov	r0, r3
    2438:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    243a:	9b03      	ldr	r3, [sp, #12]
    243c:	3301      	adds	r3, #1
    243e:	9303      	str	r3, [sp, #12]
    2440:	9b01      	ldr	r3, [sp, #4]
    2442:	7b5b      	ldrb	r3, [r3, #13]
    2444:	461a      	mov	r2, r3
    2446:	9b03      	ldr	r3, [sp, #12]
    2448:	4293      	cmp	r3, r2
    244a:	d3d1      	bcc.n	23f0 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    244c:	2300      	movs	r3, #0
    244e:	9303      	str	r3, [sp, #12]
    2450:	e029      	b.n	24a6 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2452:	9901      	ldr	r1, [sp, #4]
    2454:	9a03      	ldr	r2, [sp, #12]
    2456:	4613      	mov	r3, r2
    2458:	009b      	lsls	r3, r3, #2
    245a:	4413      	add	r3, r2
    245c:	00db      	lsls	r3, r3, #3
    245e:	440b      	add	r3, r1
    2460:	3340      	adds	r3, #64	; 0x40
    2462:	681a      	ldr	r2, [r3, #0]
    2464:	4994      	ldr	r1, [pc, #592]	; (26b8 <Clock_Ip_InitClock+0x584>)
    2466:	4613      	mov	r3, r2
    2468:	00db      	lsls	r3, r3, #3
    246a:	4413      	add	r3, r2
    246c:	440b      	add	r3, r1
    246e:	3301      	adds	r3, #1
    2470:	781b      	ldrb	r3, [r3, #0]
    2472:	461a      	mov	r2, r3
    2474:	4b93      	ldr	r3, [pc, #588]	; (26c4 <Clock_Ip_InitClock+0x590>)
    2476:	5c9b      	ldrb	r3, [r3, r2]
    2478:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    247a:	4993      	ldr	r1, [pc, #588]	; (26c8 <Clock_Ip_InitClock+0x594>)
    247c:	9a02      	ldr	r2, [sp, #8]
    247e:	4613      	mov	r3, r2
    2480:	009b      	lsls	r3, r3, #2
    2482:	4413      	add	r3, r2
    2484:	009b      	lsls	r3, r3, #2
    2486:	440b      	add	r3, r1
    2488:	3304      	adds	r3, #4
    248a:	6819      	ldr	r1, [r3, #0]
    248c:	9a03      	ldr	r2, [sp, #12]
    248e:	4613      	mov	r3, r2
    2490:	009b      	lsls	r3, r3, #2
    2492:	4413      	add	r3, r2
    2494:	00db      	lsls	r3, r3, #3
    2496:	3340      	adds	r3, #64	; 0x40
    2498:	9a01      	ldr	r2, [sp, #4]
    249a:	4413      	add	r3, r2
    249c:	4618      	mov	r0, r3
    249e:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    24a0:	9b03      	ldr	r3, [sp, #12]
    24a2:	3301      	adds	r3, #1
    24a4:	9303      	str	r3, [sp, #12]
    24a6:	9b01      	ldr	r3, [sp, #4]
    24a8:	7a9b      	ldrb	r3, [r3, #10]
    24aa:	461a      	mov	r2, r3
    24ac:	9b03      	ldr	r3, [sp, #12]
    24ae:	4293      	cmp	r3, r2
    24b0:	d3cf      	bcc.n	2452 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    24b2:	2300      	movs	r3, #0
    24b4:	9303      	str	r3, [sp, #12]
    24b6:	e029      	b.n	250c <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    24b8:	9901      	ldr	r1, [sp, #4]
    24ba:	9a03      	ldr	r2, [sp, #12]
    24bc:	4613      	mov	r3, r2
    24be:	009b      	lsls	r3, r3, #2
    24c0:	4413      	add	r3, r2
    24c2:	009b      	lsls	r3, r3, #2
    24c4:	440b      	add	r3, r1
    24c6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24ca:	681a      	ldr	r2, [r3, #0]
    24cc:	497a      	ldr	r1, [pc, #488]	; (26b8 <Clock_Ip_InitClock+0x584>)
    24ce:	4613      	mov	r3, r2
    24d0:	00db      	lsls	r3, r3, #3
    24d2:	4413      	add	r3, r2
    24d4:	440b      	add	r3, r1
    24d6:	3301      	adds	r3, #1
    24d8:	781b      	ldrb	r3, [r3, #0]
    24da:	461a      	mov	r2, r3
    24dc:	4b7b      	ldr	r3, [pc, #492]	; (26cc <Clock_Ip_InitClock+0x598>)
    24de:	5c9b      	ldrb	r3, [r3, r2]
    24e0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    24e2:	4a7b      	ldr	r2, [pc, #492]	; (26d0 <Clock_Ip_InitClock+0x59c>)
    24e4:	9b02      	ldr	r3, [sp, #8]
    24e6:	011b      	lsls	r3, r3, #4
    24e8:	4413      	add	r3, r2
    24ea:	3304      	adds	r3, #4
    24ec:	681c      	ldr	r4, [r3, #0]
    24ee:	9a03      	ldr	r2, [sp, #12]
    24f0:	4613      	mov	r3, r2
    24f2:	009b      	lsls	r3, r3, #2
    24f4:	4413      	add	r3, r2
    24f6:	009b      	lsls	r3, r3, #2
    24f8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24fc:	9a01      	ldr	r2, [sp, #4]
    24fe:	4413      	add	r3, r2
    2500:	9903      	ldr	r1, [sp, #12]
    2502:	4618      	mov	r0, r3
    2504:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2506:	9b03      	ldr	r3, [sp, #12]
    2508:	3301      	adds	r3, #1
    250a:	9303      	str	r3, [sp, #12]
    250c:	9b01      	ldr	r3, [sp, #4]
    250e:	7c9b      	ldrb	r3, [r3, #18]
    2510:	461a      	mov	r2, r3
    2512:	9b03      	ldr	r3, [sp, #12]
    2514:	4293      	cmp	r3, r2
    2516:	d3cf      	bcc.n	24b8 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2518:	2300      	movs	r3, #0
    251a:	9303      	str	r3, [sp, #12]
    251c:	e02a      	b.n	2574 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    251e:	9901      	ldr	r1, [sp, #4]
    2520:	9a03      	ldr	r2, [sp, #12]
    2522:	4613      	mov	r3, r2
    2524:	009b      	lsls	r3, r3, #2
    2526:	4413      	add	r3, r2
    2528:	009b      	lsls	r3, r3, #2
    252a:	440b      	add	r3, r1
    252c:	332c      	adds	r3, #44	; 0x2c
    252e:	681a      	ldr	r2, [r3, #0]
    2530:	4961      	ldr	r1, [pc, #388]	; (26b8 <Clock_Ip_InitClock+0x584>)
    2532:	4613      	mov	r3, r2
    2534:	00db      	lsls	r3, r3, #3
    2536:	4413      	add	r3, r2
    2538:	440b      	add	r3, r1
    253a:	3301      	adds	r3, #1
    253c:	781b      	ldrb	r3, [r3, #0]
    253e:	461a      	mov	r2, r3
    2540:	4b64      	ldr	r3, [pc, #400]	; (26d4 <Clock_Ip_InitClock+0x5a0>)
    2542:	5c9b      	ldrb	r3, [r3, r2]
    2544:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    2546:	4964      	ldr	r1, [pc, #400]	; (26d8 <Clock_Ip_InitClock+0x5a4>)
    2548:	9a02      	ldr	r2, [sp, #8]
    254a:	4613      	mov	r3, r2
    254c:	009b      	lsls	r3, r3, #2
    254e:	4413      	add	r3, r2
    2550:	009b      	lsls	r3, r3, #2
    2552:	440b      	add	r3, r1
    2554:	3308      	adds	r3, #8
    2556:	6819      	ldr	r1, [r3, #0]
    2558:	9a03      	ldr	r2, [sp, #12]
    255a:	4613      	mov	r3, r2
    255c:	009b      	lsls	r3, r3, #2
    255e:	4413      	add	r3, r2
    2560:	009b      	lsls	r3, r3, #2
    2562:	3328      	adds	r3, #40	; 0x28
    2564:	9a01      	ldr	r2, [sp, #4]
    2566:	4413      	add	r3, r2
    2568:	3304      	adds	r3, #4
    256a:	4618      	mov	r0, r3
    256c:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    256e:	9b03      	ldr	r3, [sp, #12]
    2570:	3301      	adds	r3, #1
    2572:	9303      	str	r3, [sp, #12]
    2574:	9b01      	ldr	r3, [sp, #4]
    2576:	7a5b      	ldrb	r3, [r3, #9]
    2578:	461a      	mov	r2, r3
    257a:	9b03      	ldr	r3, [sp, #12]
    257c:	4293      	cmp	r3, r2
    257e:	d3ce      	bcc.n	251e <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2580:	2300      	movs	r3, #0
    2582:	9303      	str	r3, [sp, #12]
    2584:	e029      	b.n	25da <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2586:	9901      	ldr	r1, [sp, #4]
    2588:	9a03      	ldr	r2, [sp, #12]
    258a:	4613      	mov	r3, r2
    258c:	009b      	lsls	r3, r3, #2
    258e:	4413      	add	r3, r2
    2590:	00db      	lsls	r3, r3, #3
    2592:	440b      	add	r3, r1
    2594:	3340      	adds	r3, #64	; 0x40
    2596:	681a      	ldr	r2, [r3, #0]
    2598:	4947      	ldr	r1, [pc, #284]	; (26b8 <Clock_Ip_InitClock+0x584>)
    259a:	4613      	mov	r3, r2
    259c:	00db      	lsls	r3, r3, #3
    259e:	4413      	add	r3, r2
    25a0:	440b      	add	r3, r1
    25a2:	3301      	adds	r3, #1
    25a4:	781b      	ldrb	r3, [r3, #0]
    25a6:	461a      	mov	r2, r3
    25a8:	4b46      	ldr	r3, [pc, #280]	; (26c4 <Clock_Ip_InitClock+0x590>)
    25aa:	5c9b      	ldrb	r3, [r3, r2]
    25ac:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    25ae:	4946      	ldr	r1, [pc, #280]	; (26c8 <Clock_Ip_InitClock+0x594>)
    25b0:	9a02      	ldr	r2, [sp, #8]
    25b2:	4613      	mov	r3, r2
    25b4:	009b      	lsls	r3, r3, #2
    25b6:	4413      	add	r3, r2
    25b8:	009b      	lsls	r3, r3, #2
    25ba:	440b      	add	r3, r1
    25bc:	330c      	adds	r3, #12
    25be:	6819      	ldr	r1, [r3, #0]
    25c0:	9a03      	ldr	r2, [sp, #12]
    25c2:	4613      	mov	r3, r2
    25c4:	009b      	lsls	r3, r3, #2
    25c6:	4413      	add	r3, r2
    25c8:	00db      	lsls	r3, r3, #3
    25ca:	3340      	adds	r3, #64	; 0x40
    25cc:	9a01      	ldr	r2, [sp, #4]
    25ce:	4413      	add	r3, r2
    25d0:	4618      	mov	r0, r3
    25d2:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    25d4:	9b03      	ldr	r3, [sp, #12]
    25d6:	3301      	adds	r3, #1
    25d8:	9303      	str	r3, [sp, #12]
    25da:	9b01      	ldr	r3, [sp, #4]
    25dc:	7a9b      	ldrb	r3, [r3, #10]
    25de:	461a      	mov	r2, r3
    25e0:	9b03      	ldr	r3, [sp, #12]
    25e2:	4293      	cmp	r3, r2
    25e4:	d3cf      	bcc.n	2586 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    25e6:	2300      	movs	r3, #0
    25e8:	9303      	str	r3, [sp, #12]
    25ea:	e025      	b.n	2638 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    25ec:	9a01      	ldr	r2, [sp, #4]
    25ee:	9b03      	ldr	r3, [sp, #12]
    25f0:	3324      	adds	r3, #36	; 0x24
    25f2:	011b      	lsls	r3, r3, #4
    25f4:	4413      	add	r3, r2
    25f6:	3304      	adds	r3, #4
    25f8:	681a      	ldr	r2, [r3, #0]
    25fa:	492f      	ldr	r1, [pc, #188]	; (26b8 <Clock_Ip_InitClock+0x584>)
    25fc:	4613      	mov	r3, r2
    25fe:	00db      	lsls	r3, r3, #3
    2600:	4413      	add	r3, r2
    2602:	440b      	add	r3, r1
    2604:	3301      	adds	r3, #1
    2606:	781b      	ldrb	r3, [r3, #0]
    2608:	461a      	mov	r2, r3
    260a:	4b34      	ldr	r3, [pc, #208]	; (26dc <Clock_Ip_InitClock+0x5a8>)
    260c:	5c9b      	ldrb	r3, [r3, r2]
    260e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2610:	4933      	ldr	r1, [pc, #204]	; (26e0 <Clock_Ip_InitClock+0x5ac>)
    2612:	9a02      	ldr	r2, [sp, #8]
    2614:	4613      	mov	r3, r2
    2616:	005b      	lsls	r3, r3, #1
    2618:	4413      	add	r3, r2
    261a:	009b      	lsls	r3, r3, #2
    261c:	440b      	add	r3, r1
    261e:	3304      	adds	r3, #4
    2620:	681b      	ldr	r3, [r3, #0]
    2622:	9a03      	ldr	r2, [sp, #12]
    2624:	3224      	adds	r2, #36	; 0x24
    2626:	0112      	lsls	r2, r2, #4
    2628:	9901      	ldr	r1, [sp, #4]
    262a:	440a      	add	r2, r1
    262c:	3204      	adds	r2, #4
    262e:	4610      	mov	r0, r2
    2630:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2632:	9b03      	ldr	r3, [sp, #12]
    2634:	3301      	adds	r3, #1
    2636:	9303      	str	r3, [sp, #12]
    2638:	9b01      	ldr	r3, [sp, #4]
    263a:	7b9b      	ldrb	r3, [r3, #14]
    263c:	461a      	mov	r2, r3
    263e:	9b03      	ldr	r3, [sp, #12]
    2640:	4293      	cmp	r3, r2
    2642:	d3d3      	bcc.n	25ec <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2644:	4b27      	ldr	r3, [pc, #156]	; (26e4 <Clock_Ip_InitClock+0x5b0>)
    2646:	2200      	movs	r2, #0
    2648:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    264a:	4b26      	ldr	r3, [pc, #152]	; (26e4 <Clock_Ip_InitClock+0x5b0>)
    264c:	2200      	movs	r2, #0
    264e:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    2650:	4b24      	ldr	r3, [pc, #144]	; (26e4 <Clock_Ip_InitClock+0x5b0>)
    2652:	2201      	movs	r2, #1
    2654:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    2656:	4b23      	ldr	r3, [pc, #140]	; (26e4 <Clock_Ip_InitClock+0x5b0>)
    2658:	2200      	movs	r2, #0
    265a:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    265c:	f000 fa9c 	bl	2b98 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2660:	2300      	movs	r3, #0
    2662:	9303      	str	r3, [sp, #12]
    2664:	e04c      	b.n	2700 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    2666:	9a01      	ldr	r2, [sp, #4]
    2668:	9b03      	ldr	r3, [sp, #12]
    266a:	330d      	adds	r3, #13
    266c:	00db      	lsls	r3, r3, #3
    266e:	4413      	add	r3, r2
    2670:	685b      	ldr	r3, [r3, #4]
    2672:	4a1d      	ldr	r2, [pc, #116]	; (26e8 <Clock_Ip_InitClock+0x5b4>)
    2674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2678:	2b03      	cmp	r3, #3
    267a:	d03b      	beq.n	26f4 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    267c:	9b01      	ldr	r3, [sp, #4]
    267e:	9a03      	ldr	r2, [sp, #12]
    2680:	320d      	adds	r2, #13
    2682:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2686:	490c      	ldr	r1, [pc, #48]	; (26b8 <Clock_Ip_InitClock+0x584>)
    2688:	4613      	mov	r3, r2
    268a:	00db      	lsls	r3, r3, #3
    268c:	4413      	add	r3, r2
    268e:	440b      	add	r3, r1
    2690:	3301      	adds	r3, #1
    2692:	781b      	ldrb	r3, [r3, #0]
    2694:	461a      	mov	r2, r3
    2696:	4b15      	ldr	r3, [pc, #84]	; (26ec <Clock_Ip_InitClock+0x5b8>)
    2698:	5c9b      	ldrb	r3, [r3, r2]
    269a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    269c:	4a14      	ldr	r2, [pc, #80]	; (26f0 <Clock_Ip_InitClock+0x5bc>)
    269e:	9b02      	ldr	r3, [sp, #8]
    26a0:	00db      	lsls	r3, r3, #3
    26a2:	4413      	add	r3, r2
    26a4:	685b      	ldr	r3, [r3, #4]
    26a6:	9a03      	ldr	r2, [sp, #12]
    26a8:	320d      	adds	r2, #13
    26aa:	00d2      	lsls	r2, r2, #3
    26ac:	9901      	ldr	r1, [sp, #4]
    26ae:	440a      	add	r2, r1
    26b0:	4610      	mov	r0, r2
    26b2:	4798      	blx	r3
    26b4:	e021      	b.n	26fa <Clock_Ip_InitClock+0x5c6>
    26b6:	bf00      	nop
    26b8:	00010138 	.word	0x00010138
    26bc:	000100a8 	.word	0x000100a8
    26c0:	00010684 	.word	0x00010684
    26c4:	000100f8 	.word	0x000100f8
    26c8:	00010744 	.word	0x00010744
    26cc:	00010128 	.word	0x00010128
    26d0:	00010734 	.word	0x00010734
    26d4:	000100b8 	.word	0x000100b8
    26d8:	0001068c 	.word	0x0001068c
    26dc:	000100e8 	.word	0x000100e8
    26e0:	000106b4 	.word	0x000106b4
    26e4:	1fff8b3c 	.word	0x1fff8b3c
    26e8:	00010584 	.word	0x00010584
    26ec:	00010108 	.word	0x00010108
    26f0:	00010770 	.word	0x00010770
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    26f4:	4b3a      	ldr	r3, [pc, #232]	; (27e0 <Clock_Ip_InitClock+0x6ac>)
    26f6:	2201      	movs	r2, #1
    26f8:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    26fa:	9b03      	ldr	r3, [sp, #12]
    26fc:	3301      	adds	r3, #1
    26fe:	9303      	str	r3, [sp, #12]
    2700:	9b01      	ldr	r3, [sp, #4]
    2702:	7adb      	ldrb	r3, [r3, #11]
    2704:	461a      	mov	r2, r3
    2706:	9b03      	ldr	r3, [sp, #12]
    2708:	4293      	cmp	r3, r2
    270a:	d3ac      	bcc.n	2666 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    270c:	4b34      	ldr	r3, [pc, #208]	; (27e0 <Clock_Ip_InitClock+0x6ac>)
    270e:	781b      	ldrb	r3, [r3, #0]
    2710:	f083 0301 	eor.w	r3, r3, #1
    2714:	b2db      	uxtb	r3, r3
    2716:	2b00      	cmp	r3, #0
    2718:	d05e      	beq.n	27d8 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    271a:	2300      	movs	r3, #0
    271c:	9303      	str	r3, [sp, #12]
    271e:	e01f      	b.n	2760 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2720:	9a01      	ldr	r2, [sp, #4]
    2722:	9b03      	ldr	r3, [sp, #12]
    2724:	334e      	adds	r3, #78	; 0x4e
    2726:	00db      	lsls	r3, r3, #3
    2728:	4413      	add	r3, r2
    272a:	685a      	ldr	r2, [r3, #4]
    272c:	492d      	ldr	r1, [pc, #180]	; (27e4 <Clock_Ip_InitClock+0x6b0>)
    272e:	4613      	mov	r3, r2
    2730:	00db      	lsls	r3, r3, #3
    2732:	4413      	add	r3, r2
    2734:	440b      	add	r3, r1
    2736:	3301      	adds	r3, #1
    2738:	781b      	ldrb	r3, [r3, #0]
    273a:	461a      	mov	r2, r3
    273c:	4b2a      	ldr	r3, [pc, #168]	; (27e8 <Clock_Ip_InitClock+0x6b4>)
    273e:	5c9b      	ldrb	r3, [r3, r2]
    2740:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    2742:	4a2a      	ldr	r2, [pc, #168]	; (27ec <Clock_Ip_InitClock+0x6b8>)
    2744:	9b02      	ldr	r3, [sp, #8]
    2746:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    274a:	9a03      	ldr	r2, [sp, #12]
    274c:	324e      	adds	r2, #78	; 0x4e
    274e:	00d2      	lsls	r2, r2, #3
    2750:	9901      	ldr	r1, [sp, #4]
    2752:	440a      	add	r2, r1
    2754:	3204      	adds	r2, #4
    2756:	4610      	mov	r0, r2
    2758:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    275a:	9b03      	ldr	r3, [sp, #12]
    275c:	3301      	adds	r3, #1
    275e:	9303      	str	r3, [sp, #12]
    2760:	9b01      	ldr	r3, [sp, #4]
    2762:	7c1b      	ldrb	r3, [r3, #16]
    2764:	461a      	mov	r2, r3
    2766:	9b03      	ldr	r3, [sp, #12]
    2768:	4293      	cmp	r3, r2
    276a:	d3d9      	bcc.n	2720 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    276c:	2300      	movs	r3, #0
    276e:	9303      	str	r3, [sp, #12]
    2770:	e028      	b.n	27c4 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2772:	9901      	ldr	r1, [sp, #4]
    2774:	9a03      	ldr	r2, [sp, #12]
    2776:	4613      	mov	r3, r2
    2778:	009b      	lsls	r3, r3, #2
    277a:	4413      	add	r3, r2
    277c:	009b      	lsls	r3, r3, #2
    277e:	440b      	add	r3, r1
    2780:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2784:	681a      	ldr	r2, [r3, #0]
    2786:	4917      	ldr	r1, [pc, #92]	; (27e4 <Clock_Ip_InitClock+0x6b0>)
    2788:	4613      	mov	r3, r2
    278a:	00db      	lsls	r3, r3, #3
    278c:	4413      	add	r3, r2
    278e:	440b      	add	r3, r1
    2790:	3301      	adds	r3, #1
    2792:	781b      	ldrb	r3, [r3, #0]
    2794:	461a      	mov	r2, r3
    2796:	4b16      	ldr	r3, [pc, #88]	; (27f0 <Clock_Ip_InitClock+0x6bc>)
    2798:	5c9b      	ldrb	r3, [r3, r2]
    279a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    279c:	4a15      	ldr	r2, [pc, #84]	; (27f4 <Clock_Ip_InitClock+0x6c0>)
    279e:	9b02      	ldr	r3, [sp, #8]
    27a0:	011b      	lsls	r3, r3, #4
    27a2:	4413      	add	r3, r2
    27a4:	330c      	adds	r3, #12
    27a6:	6819      	ldr	r1, [r3, #0]
    27a8:	9a03      	ldr	r2, [sp, #12]
    27aa:	4613      	mov	r3, r2
    27ac:	009b      	lsls	r3, r3, #2
    27ae:	4413      	add	r3, r2
    27b0:	009b      	lsls	r3, r3, #2
    27b2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    27b6:	9a01      	ldr	r2, [sp, #4]
    27b8:	4413      	add	r3, r2
    27ba:	4618      	mov	r0, r3
    27bc:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    27be:	9b03      	ldr	r3, [sp, #12]
    27c0:	3301      	adds	r3, #1
    27c2:	9303      	str	r3, [sp, #12]
    27c4:	9b01      	ldr	r3, [sp, #4]
    27c6:	7c9b      	ldrb	r3, [r3, #18]
    27c8:	461a      	mov	r2, r3
    27ca:	9b03      	ldr	r3, [sp, #12]
    27cc:	4293      	cmp	r3, r2
    27ce:	d3d0      	bcc.n	2772 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    27d0:	2104      	movs	r1, #4
    27d2:	9801      	ldr	r0, [sp, #4]
    27d4:	f002 ff48 	bl	5668 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    27d8:	bf00      	nop
    27da:	b004      	add	sp, #16
    27dc:	bd10      	pop	{r4, pc}
    27de:	bf00      	nop
    27e0:	1fff8b3c 	.word	0x1fff8b3c
    27e4:	00010138 	.word	0x00010138
    27e8:	000100d8 	.word	0x000100d8
    27ec:	000106c0 	.word	0x000106c0
    27f0:	00010128 	.word	0x00010128
    27f4:	00010734 	.word	0x00010734

000027f8 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    27f8:	b500      	push	{lr}
    27fa:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    27fc:	2302      	movs	r3, #2
    27fe:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2800:	2300      	movs	r3, #0
    2802:	9304      	str	r3, [sp, #16]
    2804:	e02c      	b.n	2860 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    2806:	4a36      	ldr	r2, [pc, #216]	; (28e0 <Clock_Ip_GetPllStatus+0xe8>)
    2808:	9b04      	ldr	r3, [sp, #16]
    280a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    280e:	4935      	ldr	r1, [pc, #212]	; (28e4 <Clock_Ip_GetPllStatus+0xec>)
    2810:	4613      	mov	r3, r2
    2812:	00db      	lsls	r3, r3, #3
    2814:	4413      	add	r3, r2
    2816:	440b      	add	r3, r1
    2818:	3301      	adds	r3, #1
    281a:	781b      	ldrb	r3, [r3, #0]
    281c:	461a      	mov	r2, r3
    281e:	4b32      	ldr	r3, [pc, #200]	; (28e8 <Clock_Ip_GetPllStatus+0xf0>)
    2820:	5c9b      	ldrb	r3, [r3, r2]
    2822:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2824:	4931      	ldr	r1, [pc, #196]	; (28ec <Clock_Ip_GetPllStatus+0xf4>)
    2826:	9a03      	ldr	r2, [sp, #12]
    2828:	4613      	mov	r3, r2
    282a:	009b      	lsls	r3, r3, #2
    282c:	4413      	add	r3, r2
    282e:	009b      	lsls	r3, r3, #2
    2830:	440b      	add	r3, r1
    2832:	3308      	adds	r3, #8
    2834:	681b      	ldr	r3, [r3, #0]
    2836:	492a      	ldr	r1, [pc, #168]	; (28e0 <Clock_Ip_GetPllStatus+0xe8>)
    2838:	9a04      	ldr	r2, [sp, #16]
    283a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    283e:	4610      	mov	r0, r2
    2840:	4798      	blx	r3
    2842:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2844:	9b02      	ldr	r3, [sp, #8]
    2846:	2b01      	cmp	r3, #1
    2848:	d102      	bne.n	2850 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    284a:	2301      	movs	r3, #1
    284c:	9305      	str	r3, [sp, #20]
            break;
    284e:	e00d      	b.n	286c <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2850:	9b02      	ldr	r3, [sp, #8]
    2852:	2b02      	cmp	r3, #2
    2854:	d101      	bne.n	285a <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2856:	2300      	movs	r3, #0
    2858:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    285a:	9b04      	ldr	r3, [sp, #16]
    285c:	3301      	adds	r3, #1
    285e:	9304      	str	r3, [sp, #16]
    2860:	4b23      	ldr	r3, [pc, #140]	; (28f0 <Clock_Ip_GetPllStatus+0xf8>)
    2862:	789b      	ldrb	r3, [r3, #2]
    2864:	461a      	mov	r2, r3
    2866:	9b04      	ldr	r3, [sp, #16]
    2868:	4293      	cmp	r3, r2
    286a:	d3cc      	bcc.n	2806 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    286c:	9b05      	ldr	r3, [sp, #20]
    286e:	2b00      	cmp	r3, #0
    2870:	d130      	bne.n	28d4 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2872:	2300      	movs	r3, #0
    2874:	9304      	str	r3, [sp, #16]
    2876:	e027      	b.n	28c8 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2878:	4a1e      	ldr	r2, [pc, #120]	; (28f4 <Clock_Ip_GetPllStatus+0xfc>)
    287a:	9b04      	ldr	r3, [sp, #16]
    287c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2880:	4918      	ldr	r1, [pc, #96]	; (28e4 <Clock_Ip_GetPllStatus+0xec>)
    2882:	4613      	mov	r3, r2
    2884:	00db      	lsls	r3, r3, #3
    2886:	4413      	add	r3, r2
    2888:	440b      	add	r3, r1
    288a:	3301      	adds	r3, #1
    288c:	781b      	ldrb	r3, [r3, #0]
    288e:	461a      	mov	r2, r3
    2890:	4b19      	ldr	r3, [pc, #100]	; (28f8 <Clock_Ip_GetPllStatus+0x100>)
    2892:	5c9b      	ldrb	r3, [r3, r2]
    2894:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2896:	4919      	ldr	r1, [pc, #100]	; (28fc <Clock_Ip_GetPllStatus+0x104>)
    2898:	9a03      	ldr	r2, [sp, #12]
    289a:	4613      	mov	r3, r2
    289c:	005b      	lsls	r3, r3, #1
    289e:	4413      	add	r3, r2
    28a0:	009b      	lsls	r3, r3, #2
    28a2:	440b      	add	r3, r1
    28a4:	3308      	adds	r3, #8
    28a6:	681b      	ldr	r3, [r3, #0]
    28a8:	4912      	ldr	r1, [pc, #72]	; (28f4 <Clock_Ip_GetPllStatus+0xfc>)
    28aa:	9a04      	ldr	r2, [sp, #16]
    28ac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    28b0:	4610      	mov	r0, r2
    28b2:	4798      	blx	r3
    28b4:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    28b6:	9b01      	ldr	r3, [sp, #4]
    28b8:	2b01      	cmp	r3, #1
    28ba:	d102      	bne.n	28c2 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    28bc:	2301      	movs	r3, #1
    28be:	9305      	str	r3, [sp, #20]
                break;
    28c0:	e008      	b.n	28d4 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    28c2:	9b04      	ldr	r3, [sp, #16]
    28c4:	3301      	adds	r3, #1
    28c6:	9304      	str	r3, [sp, #16]
    28c8:	4b09      	ldr	r3, [pc, #36]	; (28f0 <Clock_Ip_GetPllStatus+0xf8>)
    28ca:	78db      	ldrb	r3, [r3, #3]
    28cc:	461a      	mov	r2, r3
    28ce:	9b04      	ldr	r3, [sp, #16]
    28d0:	4293      	cmp	r3, r2
    28d2:	d3d1      	bcc.n	2878 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    28d4:	9b05      	ldr	r3, [sp, #20]
}
    28d6:	4618      	mov	r0, r3
    28d8:	b007      	add	sp, #28
    28da:	f85d fb04 	ldr.w	pc, [sp], #4
    28de:	bf00      	nop
    28e0:	00010640 	.word	0x00010640
    28e4:	00010138 	.word	0x00010138
    28e8:	000100f8 	.word	0x000100f8
    28ec:	00010744 	.word	0x00010744
    28f0:	1fff8b3c 	.word	0x1fff8b3c
    28f4:	00010644 	.word	0x00010644
    28f8:	000100e8 	.word	0x000100e8
    28fc:	000106b4 	.word	0x000106b4

00002900 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2900:	b500      	push	{lr}
    2902:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2904:	4b55      	ldr	r3, [pc, #340]	; (2a5c <Clock_Ip_DistributePll+0x15c>)
    2906:	681b      	ldr	r3, [r3, #0]
    2908:	2b00      	cmp	r3, #0
    290a:	f000 80a2 	beq.w	2a52 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    290e:	2300      	movs	r3, #0
    2910:	9301      	str	r3, [sp, #4]
    2912:	e02c      	b.n	296e <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2914:	4b51      	ldr	r3, [pc, #324]	; (2a5c <Clock_Ip_DistributePll+0x15c>)
    2916:	681a      	ldr	r2, [r3, #0]
    2918:	9b01      	ldr	r3, [sp, #4]
    291a:	330d      	adds	r3, #13
    291c:	00db      	lsls	r3, r3, #3
    291e:	4413      	add	r3, r2
    2920:	685b      	ldr	r3, [r3, #4]
    2922:	4a4f      	ldr	r2, [pc, #316]	; (2a60 <Clock_Ip_DistributePll+0x160>)
    2924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2928:	2b03      	cmp	r3, #3
    292a:	d11d      	bne.n	2968 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    292c:	4b4b      	ldr	r3, [pc, #300]	; (2a5c <Clock_Ip_DistributePll+0x15c>)
    292e:	681b      	ldr	r3, [r3, #0]
    2930:	9a01      	ldr	r2, [sp, #4]
    2932:	320d      	adds	r2, #13
    2934:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2938:	494a      	ldr	r1, [pc, #296]	; (2a64 <Clock_Ip_DistributePll+0x164>)
    293a:	4613      	mov	r3, r2
    293c:	00db      	lsls	r3, r3, #3
    293e:	4413      	add	r3, r2
    2940:	440b      	add	r3, r1
    2942:	3301      	adds	r3, #1
    2944:	781b      	ldrb	r3, [r3, #0]
    2946:	461a      	mov	r2, r3
    2948:	4b47      	ldr	r3, [pc, #284]	; (2a68 <Clock_Ip_DistributePll+0x168>)
    294a:	5c9b      	ldrb	r3, [r3, r2]
    294c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    294e:	4a47      	ldr	r2, [pc, #284]	; (2a6c <Clock_Ip_DistributePll+0x16c>)
    2950:	9b00      	ldr	r3, [sp, #0]
    2952:	00db      	lsls	r3, r3, #3
    2954:	4413      	add	r3, r2
    2956:	685b      	ldr	r3, [r3, #4]
    2958:	4a40      	ldr	r2, [pc, #256]	; (2a5c <Clock_Ip_DistributePll+0x15c>)
    295a:	6811      	ldr	r1, [r2, #0]
    295c:	9a01      	ldr	r2, [sp, #4]
    295e:	320d      	adds	r2, #13
    2960:	00d2      	lsls	r2, r2, #3
    2962:	440a      	add	r2, r1
    2964:	4610      	mov	r0, r2
    2966:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2968:	9b01      	ldr	r3, [sp, #4]
    296a:	3301      	adds	r3, #1
    296c:	9301      	str	r3, [sp, #4]
    296e:	4b3b      	ldr	r3, [pc, #236]	; (2a5c <Clock_Ip_DistributePll+0x15c>)
    2970:	681b      	ldr	r3, [r3, #0]
    2972:	7adb      	ldrb	r3, [r3, #11]
    2974:	461a      	mov	r2, r3
    2976:	9b01      	ldr	r3, [sp, #4]
    2978:	4293      	cmp	r3, r2
    297a:	d3cb      	bcc.n	2914 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    297c:	4b3c      	ldr	r3, [pc, #240]	; (2a70 <Clock_Ip_DistributePll+0x170>)
    297e:	781b      	ldrb	r3, [r3, #0]
    2980:	2b00      	cmp	r3, #0
    2982:	d066      	beq.n	2a52 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2984:	2300      	movs	r3, #0
    2986:	9301      	str	r3, [sp, #4]
    2988:	e021      	b.n	29ce <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    298a:	4b34      	ldr	r3, [pc, #208]	; (2a5c <Clock_Ip_DistributePll+0x15c>)
    298c:	681a      	ldr	r2, [r3, #0]
    298e:	9b01      	ldr	r3, [sp, #4]
    2990:	334e      	adds	r3, #78	; 0x4e
    2992:	00db      	lsls	r3, r3, #3
    2994:	4413      	add	r3, r2
    2996:	685a      	ldr	r2, [r3, #4]
    2998:	4932      	ldr	r1, [pc, #200]	; (2a64 <Clock_Ip_DistributePll+0x164>)
    299a:	4613      	mov	r3, r2
    299c:	00db      	lsls	r3, r3, #3
    299e:	4413      	add	r3, r2
    29a0:	440b      	add	r3, r1
    29a2:	3301      	adds	r3, #1
    29a4:	781b      	ldrb	r3, [r3, #0]
    29a6:	461a      	mov	r2, r3
    29a8:	4b32      	ldr	r3, [pc, #200]	; (2a74 <Clock_Ip_DistributePll+0x174>)
    29aa:	5c9b      	ldrb	r3, [r3, r2]
    29ac:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    29ae:	4a32      	ldr	r2, [pc, #200]	; (2a78 <Clock_Ip_DistributePll+0x178>)
    29b0:	9b00      	ldr	r3, [sp, #0]
    29b2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    29b6:	4a29      	ldr	r2, [pc, #164]	; (2a5c <Clock_Ip_DistributePll+0x15c>)
    29b8:	6811      	ldr	r1, [r2, #0]
    29ba:	9a01      	ldr	r2, [sp, #4]
    29bc:	324e      	adds	r2, #78	; 0x4e
    29be:	00d2      	lsls	r2, r2, #3
    29c0:	440a      	add	r2, r1
    29c2:	3204      	adds	r2, #4
    29c4:	4610      	mov	r0, r2
    29c6:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    29c8:	9b01      	ldr	r3, [sp, #4]
    29ca:	3301      	adds	r3, #1
    29cc:	9301      	str	r3, [sp, #4]
    29ce:	4b23      	ldr	r3, [pc, #140]	; (2a5c <Clock_Ip_DistributePll+0x15c>)
    29d0:	681b      	ldr	r3, [r3, #0]
    29d2:	7c1b      	ldrb	r3, [r3, #16]
    29d4:	461a      	mov	r2, r3
    29d6:	9b01      	ldr	r3, [sp, #4]
    29d8:	4293      	cmp	r3, r2
    29da:	d3d6      	bcc.n	298a <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    29dc:	2300      	movs	r3, #0
    29de:	9301      	str	r3, [sp, #4]
    29e0:	e02a      	b.n	2a38 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    29e2:	4b1e      	ldr	r3, [pc, #120]	; (2a5c <Clock_Ip_DistributePll+0x15c>)
    29e4:	6819      	ldr	r1, [r3, #0]
    29e6:	9a01      	ldr	r2, [sp, #4]
    29e8:	4613      	mov	r3, r2
    29ea:	009b      	lsls	r3, r3, #2
    29ec:	4413      	add	r3, r2
    29ee:	009b      	lsls	r3, r3, #2
    29f0:	440b      	add	r3, r1
    29f2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    29f6:	681a      	ldr	r2, [r3, #0]
    29f8:	491a      	ldr	r1, [pc, #104]	; (2a64 <Clock_Ip_DistributePll+0x164>)
    29fa:	4613      	mov	r3, r2
    29fc:	00db      	lsls	r3, r3, #3
    29fe:	4413      	add	r3, r2
    2a00:	440b      	add	r3, r1
    2a02:	3301      	adds	r3, #1
    2a04:	781b      	ldrb	r3, [r3, #0]
    2a06:	461a      	mov	r2, r3
    2a08:	4b1c      	ldr	r3, [pc, #112]	; (2a7c <Clock_Ip_DistributePll+0x17c>)
    2a0a:	5c9b      	ldrb	r3, [r3, r2]
    2a0c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2a0e:	4a1c      	ldr	r2, [pc, #112]	; (2a80 <Clock_Ip_DistributePll+0x180>)
    2a10:	9b00      	ldr	r3, [sp, #0]
    2a12:	011b      	lsls	r3, r3, #4
    2a14:	4413      	add	r3, r2
    2a16:	330c      	adds	r3, #12
    2a18:	6819      	ldr	r1, [r3, #0]
    2a1a:	4b10      	ldr	r3, [pc, #64]	; (2a5c <Clock_Ip_DistributePll+0x15c>)
    2a1c:	6818      	ldr	r0, [r3, #0]
    2a1e:	9a01      	ldr	r2, [sp, #4]
    2a20:	4613      	mov	r3, r2
    2a22:	009b      	lsls	r3, r3, #2
    2a24:	4413      	add	r3, r2
    2a26:	009b      	lsls	r3, r3, #2
    2a28:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2a2c:	4403      	add	r3, r0
    2a2e:	4618      	mov	r0, r3
    2a30:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2a32:	9b01      	ldr	r3, [sp, #4]
    2a34:	3301      	adds	r3, #1
    2a36:	9301      	str	r3, [sp, #4]
    2a38:	4b08      	ldr	r3, [pc, #32]	; (2a5c <Clock_Ip_DistributePll+0x15c>)
    2a3a:	681b      	ldr	r3, [r3, #0]
    2a3c:	7c9b      	ldrb	r3, [r3, #18]
    2a3e:	461a      	mov	r2, r3
    2a40:	9b01      	ldr	r3, [sp, #4]
    2a42:	4293      	cmp	r3, r2
    2a44:	d3cd      	bcc.n	29e2 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2a46:	4b05      	ldr	r3, [pc, #20]	; (2a5c <Clock_Ip_DistributePll+0x15c>)
    2a48:	681b      	ldr	r3, [r3, #0]
    2a4a:	2104      	movs	r1, #4
    2a4c:	4618      	mov	r0, r3
    2a4e:	f002 fe0b 	bl	5668 <Clock_Ip_Command>
        }
    }
}
    2a52:	bf00      	nop
    2a54:	b003      	add	sp, #12
    2a56:	f85d fb04 	ldr.w	pc, [sp], #4
    2a5a:	bf00      	nop
    2a5c:	1fff8b34 	.word	0x1fff8b34
    2a60:	00010584 	.word	0x00010584
    2a64:	00010138 	.word	0x00010138
    2a68:	00010108 	.word	0x00010108
    2a6c:	00010770 	.word	0x00010770
    2a70:	1fff8b3c 	.word	0x1fff8b3c
    2a74:	000100d8 	.word	0x000100d8
    2a78:	000106c0 	.word	0x000106c0
    2a7c:	00010128 	.word	0x00010128
    2a80:	00010734 	.word	0x00010734

00002a84 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2a84:	b500      	push	{lr}
    2a86:	b085      	sub	sp, #20
    2a88:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2a8a:	490c      	ldr	r1, [pc, #48]	; (2abc <Clock_Ip_DisableClockMonitor+0x38>)
    2a8c:	9a01      	ldr	r2, [sp, #4]
    2a8e:	4613      	mov	r3, r2
    2a90:	00db      	lsls	r3, r3, #3
    2a92:	4413      	add	r3, r2
    2a94:	440b      	add	r3, r1
    2a96:	3301      	adds	r3, #1
    2a98:	781b      	ldrb	r3, [r3, #0]
    2a9a:	461a      	mov	r2, r3
    2a9c:	4b08      	ldr	r3, [pc, #32]	; (2ac0 <Clock_Ip_DisableClockMonitor+0x3c>)
    2a9e:	5c9b      	ldrb	r3, [r3, r2]
    2aa0:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2aa2:	4a08      	ldr	r2, [pc, #32]	; (2ac4 <Clock_Ip_DisableClockMonitor+0x40>)
    2aa4:	9b03      	ldr	r3, [sp, #12]
    2aa6:	011b      	lsls	r3, r3, #4
    2aa8:	4413      	add	r3, r2
    2aaa:	3308      	adds	r3, #8
    2aac:	681b      	ldr	r3, [r3, #0]
    2aae:	9801      	ldr	r0, [sp, #4]
    2ab0:	4798      	blx	r3
}
    2ab2:	bf00      	nop
    2ab4:	b005      	add	sp, #20
    2ab6:	f85d fb04 	ldr.w	pc, [sp], #4
    2aba:	bf00      	nop
    2abc:	00010138 	.word	0x00010138
    2ac0:	00010128 	.word	0x00010128
    2ac4:	00010734 	.word	0x00010734

00002ac8 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2ac8:	b082      	sub	sp, #8
    2aca:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2acc:	4a02      	ldr	r2, [pc, #8]	; (2ad8 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2ace:	9b01      	ldr	r3, [sp, #4]
    2ad0:	6013      	str	r3, [r2, #0]
}
    2ad2:	bf00      	nop
    2ad4:	b002      	add	sp, #8
    2ad6:	4770      	bx	lr
    2ad8:	1fff8b14 	.word	0x1fff8b14

00002adc <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2adc:	b500      	push	{lr}
    2ade:	b085      	sub	sp, #20
    2ae0:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2ae2:	490c      	ldr	r1, [pc, #48]	; (2b14 <Clock_Ip_DisableModuleClock+0x38>)
    2ae4:	9a01      	ldr	r2, [sp, #4]
    2ae6:	4613      	mov	r3, r2
    2ae8:	00db      	lsls	r3, r3, #3
    2aea:	4413      	add	r3, r2
    2aec:	440b      	add	r3, r1
    2aee:	3301      	adds	r3, #1
    2af0:	781b      	ldrb	r3, [r3, #0]
    2af2:	461a      	mov	r2, r3
    2af4:	4b08      	ldr	r3, [pc, #32]	; (2b18 <Clock_Ip_DisableModuleClock+0x3c>)
    2af6:	5c9b      	ldrb	r3, [r3, r2]
    2af8:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2afa:	4a08      	ldr	r2, [pc, #32]	; (2b1c <Clock_Ip_DisableModuleClock+0x40>)
    2afc:	9b03      	ldr	r3, [sp, #12]
    2afe:	00db      	lsls	r3, r3, #3
    2b00:	4413      	add	r3, r2
    2b02:	685b      	ldr	r3, [r3, #4]
    2b04:	2101      	movs	r1, #1
    2b06:	9801      	ldr	r0, [sp, #4]
    2b08:	4798      	blx	r3
}
    2b0a:	bf00      	nop
    2b0c:	b005      	add	sp, #20
    2b0e:	f85d fb04 	ldr.w	pc, [sp], #4
    2b12:	bf00      	nop
    2b14:	00010138 	.word	0x00010138
    2b18:	000100d8 	.word	0x000100d8
    2b1c:	000106c0 	.word	0x000106c0

00002b20 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2b20:	b500      	push	{lr}
    2b22:	b085      	sub	sp, #20
    2b24:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2b26:	490c      	ldr	r1, [pc, #48]	; (2b58 <Clock_Ip_EnableModuleClock+0x38>)
    2b28:	9a01      	ldr	r2, [sp, #4]
    2b2a:	4613      	mov	r3, r2
    2b2c:	00db      	lsls	r3, r3, #3
    2b2e:	4413      	add	r3, r2
    2b30:	440b      	add	r3, r1
    2b32:	3301      	adds	r3, #1
    2b34:	781b      	ldrb	r3, [r3, #0]
    2b36:	461a      	mov	r2, r3
    2b38:	4b08      	ldr	r3, [pc, #32]	; (2b5c <Clock_Ip_EnableModuleClock+0x3c>)
    2b3a:	5c9b      	ldrb	r3, [r3, r2]
    2b3c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2b3e:	4a08      	ldr	r2, [pc, #32]	; (2b60 <Clock_Ip_EnableModuleClock+0x40>)
    2b40:	9b03      	ldr	r3, [sp, #12]
    2b42:	00db      	lsls	r3, r3, #3
    2b44:	4413      	add	r3, r2
    2b46:	685b      	ldr	r3, [r3, #4]
    2b48:	2100      	movs	r1, #0
    2b4a:	9801      	ldr	r0, [sp, #4]
    2b4c:	4798      	blx	r3
}
    2b4e:	bf00      	nop
    2b50:	b005      	add	sp, #20
    2b52:	f85d fb04 	ldr.w	pc, [sp], #4
    2b56:	bf00      	nop
    2b58:	00010138 	.word	0x00010138
    2b5c:	000100d8 	.word	0x000100d8
    2b60:	000106c0 	.word	0x000106c0

00002b64 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2b64:	b500      	push	{lr}
    2b66:	b083      	sub	sp, #12
    2b68:	9001      	str	r0, [sp, #4]
    2b6a:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2b6c:	4b08      	ldr	r3, [pc, #32]	; (2b90 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2b6e:	2200      	movs	r2, #0
    2b70:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2b72:	4b08      	ldr	r3, [pc, #32]	; (2b94 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2b74:	681b      	ldr	r3, [r3, #0]
    2b76:	2102      	movs	r1, #2
    2b78:	4618      	mov	r0, r3
    2b7a:	f002 fd75 	bl	5668 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2b7e:	9900      	ldr	r1, [sp, #0]
    2b80:	9801      	ldr	r0, [sp, #4]
    2b82:	f002 fc51 	bl	5428 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2b86:	bf00      	nop
    2b88:	b003      	add	sp, #12
    2b8a:	f85d fb04 	ldr.w	pc, [sp], #4
    2b8e:	bf00      	nop
    2b90:	1fff8b10 	.word	0x1fff8b10
    2b94:	1fff8b34 	.word	0x1fff8b34

00002b98 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2b98:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2b9a:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2b9e:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2ba0:	4b06      	ldr	r3, [pc, #24]	; (2bbc <Clock_Ip_SetWaitStates+0x24>)
    2ba2:	785b      	ldrb	r3, [r3, #1]
    2ba4:	2b00      	cmp	r3, #0
    2ba6:	d005      	beq.n	2bb4 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2ba8:	9b01      	ldr	r3, [sp, #4]
    2baa:	3b01      	subs	r3, #1
    2bac:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2bae:	9b01      	ldr	r3, [sp, #4]
    2bb0:	2b00      	cmp	r3, #0
    2bb2:	d1f9      	bne.n	2ba8 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2bb4:	bf00      	nop
    2bb6:	b002      	add	sp, #8
    2bb8:	4770      	bx	lr
    2bba:	bf00      	nop
    2bbc:	1fff8b3c 	.word	0x1fff8b3c

00002bc0 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2bc0:	b500      	push	{lr}
    2bc2:	b083      	sub	sp, #12
    2bc4:	9001      	str	r0, [sp, #4]
    2bc6:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2bc8:	4b04      	ldr	r3, [pc, #16]	; (2bdc <Clock_Ip_ReportClockErrors+0x1c>)
    2bca:	681b      	ldr	r3, [r3, #0]
    2bcc:	9900      	ldr	r1, [sp, #0]
    2bce:	9801      	ldr	r0, [sp, #4]
    2bd0:	4798      	blx	r3
}
    2bd2:	bf00      	nop
    2bd4:	b003      	add	sp, #12
    2bd6:	f85d fb04 	ldr.w	pc, [sp], #4
    2bda:	bf00      	nop
    2bdc:	1fff8b14 	.word	0x1fff8b14

00002be0 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2be0:	b500      	push	{lr}
    2be2:	b085      	sub	sp, #20
    2be4:	9003      	str	r0, [sp, #12]
    2be6:	9102      	str	r1, [sp, #8]
    2be8:	9201      	str	r2, [sp, #4]
    2bea:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2bec:	2000      	movs	r0, #0
    2bee:	f7fe ffd1 	bl	1b94 <OsIf_GetCounter>
    2bf2:	4602      	mov	r2, r0
    2bf4:	9b03      	ldr	r3, [sp, #12]
    2bf6:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2bf8:	9b02      	ldr	r3, [sp, #8]
    2bfa:	2200      	movs	r2, #0
    2bfc:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2bfe:	2100      	movs	r1, #0
    2c00:	9800      	ldr	r0, [sp, #0]
    2c02:	f7ff f813 	bl	1c2c <OsIf_MicrosToTicks>
    2c06:	4602      	mov	r2, r0
    2c08:	9b01      	ldr	r3, [sp, #4]
    2c0a:	601a      	str	r2, [r3, #0]
}
    2c0c:	bf00      	nop
    2c0e:	b005      	add	sp, #20
    2c10:	f85d fb04 	ldr.w	pc, [sp], #4

00002c14 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2c14:	b500      	push	{lr}
    2c16:	b087      	sub	sp, #28
    2c18:	9003      	str	r0, [sp, #12]
    2c1a:	9102      	str	r1, [sp, #8]
    2c1c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2c1e:	2300      	movs	r3, #0
    2c20:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2c24:	2100      	movs	r1, #0
    2c26:	9803      	ldr	r0, [sp, #12]
    2c28:	f7fe ffcd 	bl	1bc6 <OsIf_GetElapsed>
    2c2c:	4602      	mov	r2, r0
    2c2e:	9b02      	ldr	r3, [sp, #8]
    2c30:	681b      	ldr	r3, [r3, #0]
    2c32:	441a      	add	r2, r3
    2c34:	9b02      	ldr	r3, [sp, #8]
    2c36:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2c38:	9b02      	ldr	r3, [sp, #8]
    2c3a:	681b      	ldr	r3, [r3, #0]
    2c3c:	9a01      	ldr	r2, [sp, #4]
    2c3e:	429a      	cmp	r2, r3
    2c40:	d802      	bhi.n	2c48 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2c42:	2301      	movs	r3, #1
    2c44:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2c48:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2c4c:	4618      	mov	r0, r3
    2c4e:	b007      	add	sp, #28
    2c50:	f85d fb04 	ldr.w	pc, [sp], #4

00002c54 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2c54:	b082      	sub	sp, #8
    2c56:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2c58:	bf00      	nop
    2c5a:	b002      	add	sp, #8
    2c5c:	4770      	bx	lr

00002c5e <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2c5e:	b500      	push	{lr}
    2c60:	b083      	sub	sp, #12
    2c62:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c64:	9b01      	ldr	r3, [sp, #4]
    2c66:	2b00      	cmp	r3, #0
    2c68:	d002      	beq.n	2c70 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2c6a:	9801      	ldr	r0, [sp, #4]
    2c6c:	f000 f8ad 	bl	2dca <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c70:	bf00      	nop
    2c72:	b003      	add	sp, #12
    2c74:	f85d fb04 	ldr.w	pc, [sp], #4

00002c78 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2c78:	b500      	push	{lr}
    2c7a:	b083      	sub	sp, #12
    2c7c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c7e:	9b01      	ldr	r3, [sp, #4]
    2c80:	2b00      	cmp	r3, #0
    2c82:	d002      	beq.n	2c8a <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2c84:	9801      	ldr	r0, [sp, #4]
    2c86:	f000 f8cd 	bl	2e24 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c8a:	bf00      	nop
    2c8c:	b003      	add	sp, #12
    2c8e:	f85d fb04 	ldr.w	pc, [sp], #4

00002c92 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2c92:	b500      	push	{lr}
    2c94:	b083      	sub	sp, #12
    2c96:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c98:	9b01      	ldr	r3, [sp, #4]
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	d002      	beq.n	2ca4 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2c9e:	9801      	ldr	r0, [sp, #4]
    2ca0:	f000 f8ee 	bl	2e80 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ca4:	bf00      	nop
    2ca6:	b003      	add	sp, #12
    2ca8:	f85d fb04 	ldr.w	pc, [sp], #4

00002cac <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2cac:	b500      	push	{lr}
    2cae:	b083      	sub	sp, #12
    2cb0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cb2:	9b01      	ldr	r3, [sp, #4]
    2cb4:	2b00      	cmp	r3, #0
    2cb6:	d002      	beq.n	2cbe <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2cb8:	9801      	ldr	r0, [sp, #4]
    2cba:	f000 f8f9 	bl	2eb0 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cbe:	bf00      	nop
    2cc0:	b003      	add	sp, #12
    2cc2:	f85d fb04 	ldr.w	pc, [sp], #4

00002cc6 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2cc6:	b500      	push	{lr}
    2cc8:	b083      	sub	sp, #12
    2cca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ccc:	9b01      	ldr	r3, [sp, #4]
    2cce:	2b00      	cmp	r3, #0
    2cd0:	d002      	beq.n	2cd8 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2cd2:	9801      	ldr	r0, [sp, #4]
    2cd4:	f000 f904 	bl	2ee0 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cd8:	bf00      	nop
    2cda:	b003      	add	sp, #12
    2cdc:	f85d fb04 	ldr.w	pc, [sp], #4

00002ce0 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2ce0:	b500      	push	{lr}
    2ce2:	b083      	sub	sp, #12
    2ce4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ce6:	9b01      	ldr	r3, [sp, #4]
    2ce8:	2b00      	cmp	r3, #0
    2cea:	d002      	beq.n	2cf2 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2cec:	9801      	ldr	r0, [sp, #4]
    2cee:	f000 f90f 	bl	2f10 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cf2:	bf00      	nop
    2cf4:	b003      	add	sp, #12
    2cf6:	f85d fb04 	ldr.w	pc, [sp], #4

00002cfa <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2cfa:	b500      	push	{lr}
    2cfc:	b083      	sub	sp, #12
    2cfe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d00:	9b01      	ldr	r3, [sp, #4]
    2d02:	2b00      	cmp	r3, #0
    2d04:	d002      	beq.n	2d0c <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2d06:	9801      	ldr	r0, [sp, #4]
    2d08:	f000 f91a 	bl	2f40 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d0c:	bf00      	nop
    2d0e:	b003      	add	sp, #12
    2d10:	f85d fb04 	ldr.w	pc, [sp], #4

00002d14 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2d14:	b500      	push	{lr}
    2d16:	b083      	sub	sp, #12
    2d18:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d1a:	9b01      	ldr	r3, [sp, #4]
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	d002      	beq.n	2d26 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2d20:	9801      	ldr	r0, [sp, #4]
    2d22:	f000 f925 	bl	2f70 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d26:	bf00      	nop
    2d28:	b003      	add	sp, #12
    2d2a:	f85d fb04 	ldr.w	pc, [sp], #4

00002d2e <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2d2e:	b500      	push	{lr}
    2d30:	b083      	sub	sp, #12
    2d32:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d34:	9b01      	ldr	r3, [sp, #4]
    2d36:	2b00      	cmp	r3, #0
    2d38:	d002      	beq.n	2d40 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2d3a:	9801      	ldr	r0, [sp, #4]
    2d3c:	f000 f930 	bl	2fa0 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d40:	bf00      	nop
    2d42:	b003      	add	sp, #12
    2d44:	f85d fb04 	ldr.w	pc, [sp], #4

00002d48 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2d48:	b500      	push	{lr}
    2d4a:	b083      	sub	sp, #12
    2d4c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d4e:	9b01      	ldr	r3, [sp, #4]
    2d50:	2b00      	cmp	r3, #0
    2d52:	d002      	beq.n	2d5a <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2d54:	9801      	ldr	r0, [sp, #4]
    2d56:	f000 f93b 	bl	2fd0 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d5a:	bf00      	nop
    2d5c:	b003      	add	sp, #12
    2d5e:	f85d fb04 	ldr.w	pc, [sp], #4

00002d62 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2d62:	b500      	push	{lr}
    2d64:	b083      	sub	sp, #12
    2d66:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d68:	9b01      	ldr	r3, [sp, #4]
    2d6a:	2b00      	cmp	r3, #0
    2d6c:	d002      	beq.n	2d74 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2d6e:	9801      	ldr	r0, [sp, #4]
    2d70:	f000 f946 	bl	3000 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d74:	bf00      	nop
    2d76:	b003      	add	sp, #12
    2d78:	f85d fb04 	ldr.w	pc, [sp], #4

00002d7c <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2d7c:	b500      	push	{lr}
    2d7e:	b083      	sub	sp, #12
    2d80:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d82:	9b01      	ldr	r3, [sp, #4]
    2d84:	2b00      	cmp	r3, #0
    2d86:	d002      	beq.n	2d8e <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2d88:	9801      	ldr	r0, [sp, #4]
    2d8a:	f000 f951 	bl	3030 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d8e:	bf00      	nop
    2d90:	b003      	add	sp, #12
    2d92:	f85d fb04 	ldr.w	pc, [sp], #4

00002d96 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2d96:	b500      	push	{lr}
    2d98:	b083      	sub	sp, #12
    2d9a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d9c:	9b01      	ldr	r3, [sp, #4]
    2d9e:	2b00      	cmp	r3, #0
    2da0:	d002      	beq.n	2da8 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2da2:	9801      	ldr	r0, [sp, #4]
    2da4:	f000 f95e 	bl	3064 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2da8:	bf00      	nop
    2daa:	b003      	add	sp, #12
    2dac:	f85d fb04 	ldr.w	pc, [sp], #4

00002db0 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2db0:	b500      	push	{lr}
    2db2:	b083      	sub	sp, #12
    2db4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2db6:	9b01      	ldr	r3, [sp, #4]
    2db8:	2b00      	cmp	r3, #0
    2dba:	d002      	beq.n	2dc2 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2dbc:	9801      	ldr	r0, [sp, #4]
    2dbe:	f000 f98b 	bl	30d8 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2dc2:	bf00      	nop
    2dc4:	b003      	add	sp, #12
    2dc6:	f85d fb04 	ldr.w	pc, [sp], #4

00002dca <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2dca:	b086      	sub	sp, #24
    2dcc:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2dce:	9b01      	ldr	r3, [sp, #4]
    2dd0:	681a      	ldr	r2, [r3, #0]
    2dd2:	4911      	ldr	r1, [pc, #68]	; (2e18 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2dd4:	4613      	mov	r3, r2
    2dd6:	00db      	lsls	r3, r3, #3
    2dd8:	4413      	add	r3, r2
    2dda:	440b      	add	r3, r1
    2ddc:	781b      	ldrb	r3, [r3, #0]
    2dde:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2de0:	9b01      	ldr	r3, [sp, #4]
    2de2:	685b      	ldr	r3, [r3, #4]
    2de4:	4a0d      	ldr	r2, [pc, #52]	; (2e1c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2de6:	5cd3      	ldrb	r3, [r2, r3]
    2de8:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2dea:	4a0d      	ldr	r2, [pc, #52]	; (2e20 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2dec:	9b05      	ldr	r3, [sp, #20]
    2dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2df2:	681b      	ldr	r3, [r3, #0]
    2df4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2df6:	9b03      	ldr	r3, [sp, #12]
    2df8:	f023 0307 	bic.w	r3, r3, #7
    2dfc:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2dfe:	9a03      	ldr	r2, [sp, #12]
    2e00:	9b04      	ldr	r3, [sp, #16]
    2e02:	4313      	orrs	r3, r2
    2e04:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2e06:	4a06      	ldr	r2, [pc, #24]	; (2e20 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2e08:	9b05      	ldr	r3, [sp, #20]
    2e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e0e:	9a03      	ldr	r2, [sp, #12]
    2e10:	601a      	str	r2, [r3, #0]
}
    2e12:	bf00      	nop
    2e14:	b006      	add	sp, #24
    2e16:	4770      	bx	lr
    2e18:	00010138 	.word	0x00010138
    2e1c:	00010530 	.word	0x00010530
    2e20:	00010574 	.word	0x00010574

00002e24 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e24:	b086      	sub	sp, #24
    2e26:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2e28:	9b01      	ldr	r3, [sp, #4]
    2e2a:	681a      	ldr	r2, [r3, #0]
    2e2c:	4911      	ldr	r1, [pc, #68]	; (2e74 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2e2e:	4613      	mov	r3, r2
    2e30:	00db      	lsls	r3, r3, #3
    2e32:	4413      	add	r3, r2
    2e34:	440b      	add	r3, r1
    2e36:	781b      	ldrb	r3, [r3, #0]
    2e38:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2e3a:	9b01      	ldr	r3, [sp, #4]
    2e3c:	685b      	ldr	r3, [r3, #4]
    2e3e:	4a0e      	ldr	r2, [pc, #56]	; (2e78 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2e40:	5cd3      	ldrb	r3, [r2, r3]
    2e42:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2e44:	4a0d      	ldr	r2, [pc, #52]	; (2e7c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2e46:	9b05      	ldr	r3, [sp, #20]
    2e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e4c:	681b      	ldr	r3, [r3, #0]
    2e4e:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2e50:	9b03      	ldr	r3, [sp, #12]
    2e52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2e56:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2e58:	9b04      	ldr	r3, [sp, #16]
    2e5a:	021b      	lsls	r3, r3, #8
    2e5c:	9a03      	ldr	r2, [sp, #12]
    2e5e:	4313      	orrs	r3, r2
    2e60:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2e62:	4a06      	ldr	r2, [pc, #24]	; (2e7c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2e64:	9b05      	ldr	r3, [sp, #20]
    2e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e6a:	9a03      	ldr	r2, [sp, #12]
    2e6c:	601a      	str	r2, [r3, #0]
}
    2e6e:	bf00      	nop
    2e70:	b006      	add	sp, #24
    2e72:	4770      	bx	lr
    2e74:	00010138 	.word	0x00010138
    2e78:	00010530 	.word	0x00010530
    2e7c:	00010574 	.word	0x00010574

00002e80 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e80:	b084      	sub	sp, #16
    2e82:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2e84:	4b09      	ldr	r3, [pc, #36]	; (2eac <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2e86:	695b      	ldr	r3, [r3, #20]
    2e88:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2e8a:	9b03      	ldr	r3, [sp, #12]
    2e8c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2e90:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2e92:	9b01      	ldr	r3, [sp, #4]
    2e94:	685b      	ldr	r3, [r3, #4]
    2e96:	3b01      	subs	r3, #1
    2e98:	041b      	lsls	r3, r3, #16
    2e9a:	9a03      	ldr	r2, [sp, #12]
    2e9c:	4313      	orrs	r3, r2
    2e9e:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2ea0:	4a02      	ldr	r2, [pc, #8]	; (2eac <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2ea2:	9b03      	ldr	r3, [sp, #12]
    2ea4:	6153      	str	r3, [r2, #20]
}
    2ea6:	bf00      	nop
    2ea8:	b004      	add	sp, #16
    2eaa:	4770      	bx	lr
    2eac:	40064000 	.word	0x40064000

00002eb0 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2eb0:	b084      	sub	sp, #16
    2eb2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2eb4:	4b09      	ldr	r3, [pc, #36]	; (2edc <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2eb6:	695b      	ldr	r3, [r3, #20]
    2eb8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2eba:	9b03      	ldr	r3, [sp, #12]
    2ebc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2ec0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2ec2:	9b01      	ldr	r3, [sp, #4]
    2ec4:	685b      	ldr	r3, [r3, #4]
    2ec6:	3b01      	subs	r3, #1
    2ec8:	011b      	lsls	r3, r3, #4
    2eca:	9a03      	ldr	r2, [sp, #12]
    2ecc:	4313      	orrs	r3, r2
    2ece:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2ed0:	4a02      	ldr	r2, [pc, #8]	; (2edc <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2ed2:	9b03      	ldr	r3, [sp, #12]
    2ed4:	6153      	str	r3, [r2, #20]
}
    2ed6:	bf00      	nop
    2ed8:	b004      	add	sp, #16
    2eda:	4770      	bx	lr
    2edc:	40064000 	.word	0x40064000

00002ee0 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ee0:	b084      	sub	sp, #16
    2ee2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2ee4:	4b09      	ldr	r3, [pc, #36]	; (2f0c <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2ee6:	695b      	ldr	r3, [r3, #20]
    2ee8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2eea:	9b03      	ldr	r3, [sp, #12]
    2eec:	f023 030f 	bic.w	r3, r3, #15
    2ef0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2ef2:	9b01      	ldr	r3, [sp, #4]
    2ef4:	685b      	ldr	r3, [r3, #4]
    2ef6:	3b01      	subs	r3, #1
    2ef8:	9a03      	ldr	r2, [sp, #12]
    2efa:	4313      	orrs	r3, r2
    2efc:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2efe:	4a03      	ldr	r2, [pc, #12]	; (2f0c <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2f00:	9b03      	ldr	r3, [sp, #12]
    2f02:	6153      	str	r3, [r2, #20]
}
    2f04:	bf00      	nop
    2f06:	b004      	add	sp, #16
    2f08:	4770      	bx	lr
    2f0a:	bf00      	nop
    2f0c:	40064000 	.word	0x40064000

00002f10 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f10:	b084      	sub	sp, #16
    2f12:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f14:	4b09      	ldr	r3, [pc, #36]	; (2f3c <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2f16:	699b      	ldr	r3, [r3, #24]
    2f18:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2f1a:	9b03      	ldr	r3, [sp, #12]
    2f1c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2f20:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2f22:	9b01      	ldr	r3, [sp, #4]
    2f24:	685b      	ldr	r3, [r3, #4]
    2f26:	3b01      	subs	r3, #1
    2f28:	041b      	lsls	r3, r3, #16
    2f2a:	9a03      	ldr	r2, [sp, #12]
    2f2c:	4313      	orrs	r3, r2
    2f2e:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f30:	4a02      	ldr	r2, [pc, #8]	; (2f3c <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2f32:	9b03      	ldr	r3, [sp, #12]
    2f34:	6193      	str	r3, [r2, #24]
}
    2f36:	bf00      	nop
    2f38:	b004      	add	sp, #16
    2f3a:	4770      	bx	lr
    2f3c:	40064000 	.word	0x40064000

00002f40 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f40:	b084      	sub	sp, #16
    2f42:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f44:	4b09      	ldr	r3, [pc, #36]	; (2f6c <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2f46:	699b      	ldr	r3, [r3, #24]
    2f48:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2f4a:	9b03      	ldr	r3, [sp, #12]
    2f4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2f50:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2f52:	9b01      	ldr	r3, [sp, #4]
    2f54:	685b      	ldr	r3, [r3, #4]
    2f56:	3b01      	subs	r3, #1
    2f58:	011b      	lsls	r3, r3, #4
    2f5a:	9a03      	ldr	r2, [sp, #12]
    2f5c:	4313      	orrs	r3, r2
    2f5e:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f60:	4a02      	ldr	r2, [pc, #8]	; (2f6c <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2f62:	9b03      	ldr	r3, [sp, #12]
    2f64:	6193      	str	r3, [r2, #24]
}
    2f66:	bf00      	nop
    2f68:	b004      	add	sp, #16
    2f6a:	4770      	bx	lr
    2f6c:	40064000 	.word	0x40064000

00002f70 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f70:	b084      	sub	sp, #16
    2f72:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f74:	4b09      	ldr	r3, [pc, #36]	; (2f9c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2f76:	699b      	ldr	r3, [r3, #24]
    2f78:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2f7a:	9b03      	ldr	r3, [sp, #12]
    2f7c:	f023 030f 	bic.w	r3, r3, #15
    2f80:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2f82:	9b01      	ldr	r3, [sp, #4]
    2f84:	685b      	ldr	r3, [r3, #4]
    2f86:	3b01      	subs	r3, #1
    2f88:	9a03      	ldr	r2, [sp, #12]
    2f8a:	4313      	orrs	r3, r2
    2f8c:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f8e:	4a03      	ldr	r2, [pc, #12]	; (2f9c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2f90:	9b03      	ldr	r3, [sp, #12]
    2f92:	6193      	str	r3, [r2, #24]
}
    2f94:	bf00      	nop
    2f96:	b004      	add	sp, #16
    2f98:	4770      	bx	lr
    2f9a:	bf00      	nop
    2f9c:	40064000 	.word	0x40064000

00002fa0 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fa0:	b084      	sub	sp, #16
    2fa2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2fa4:	4b09      	ldr	r3, [pc, #36]	; (2fcc <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2fa6:	69db      	ldr	r3, [r3, #28]
    2fa8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2faa:	9b03      	ldr	r3, [sp, #12]
    2fac:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2fb0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2fb2:	9b01      	ldr	r3, [sp, #4]
    2fb4:	685b      	ldr	r3, [r3, #4]
    2fb6:	3b01      	subs	r3, #1
    2fb8:	041b      	lsls	r3, r3, #16
    2fba:	9a03      	ldr	r2, [sp, #12]
    2fbc:	4313      	orrs	r3, r2
    2fbe:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2fc0:	4a02      	ldr	r2, [pc, #8]	; (2fcc <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2fc2:	9b03      	ldr	r3, [sp, #12]
    2fc4:	61d3      	str	r3, [r2, #28]
}
    2fc6:	bf00      	nop
    2fc8:	b004      	add	sp, #16
    2fca:	4770      	bx	lr
    2fcc:	40064000 	.word	0x40064000

00002fd0 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fd0:	b084      	sub	sp, #16
    2fd2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2fd4:	4b09      	ldr	r3, [pc, #36]	; (2ffc <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2fd6:	69db      	ldr	r3, [r3, #28]
    2fd8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2fda:	9b03      	ldr	r3, [sp, #12]
    2fdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2fe0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2fe2:	9b01      	ldr	r3, [sp, #4]
    2fe4:	685b      	ldr	r3, [r3, #4]
    2fe6:	3b01      	subs	r3, #1
    2fe8:	011b      	lsls	r3, r3, #4
    2fea:	9a03      	ldr	r2, [sp, #12]
    2fec:	4313      	orrs	r3, r2
    2fee:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2ff0:	4a02      	ldr	r2, [pc, #8]	; (2ffc <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2ff2:	9b03      	ldr	r3, [sp, #12]
    2ff4:	61d3      	str	r3, [r2, #28]
}
    2ff6:	bf00      	nop
    2ff8:	b004      	add	sp, #16
    2ffa:	4770      	bx	lr
    2ffc:	40064000 	.word	0x40064000

00003000 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3000:	b084      	sub	sp, #16
    3002:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3004:	4b09      	ldr	r3, [pc, #36]	; (302c <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3006:	69db      	ldr	r3, [r3, #28]
    3008:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    300a:	9b03      	ldr	r3, [sp, #12]
    300c:	f023 030f 	bic.w	r3, r3, #15
    3010:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    3012:	9b01      	ldr	r3, [sp, #4]
    3014:	685b      	ldr	r3, [r3, #4]
    3016:	3b01      	subs	r3, #1
    3018:	9a03      	ldr	r2, [sp, #12]
    301a:	4313      	orrs	r3, r2
    301c:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    301e:	4a03      	ldr	r2, [pc, #12]	; (302c <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3020:	9b03      	ldr	r3, [sp, #12]
    3022:	61d3      	str	r3, [r2, #28]
}
    3024:	bf00      	nop
    3026:	b004      	add	sp, #16
    3028:	4770      	bx	lr
    302a:	bf00      	nop
    302c:	40064000 	.word	0x40064000

00003030 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3030:	b084      	sub	sp, #16
    3032:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3034:	4b0a      	ldr	r3, [pc, #40]	; (3060 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3036:	685b      	ldr	r3, [r3, #4]
    3038:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    303a:	9b03      	ldr	r3, [sp, #12]
    303c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3040:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    3042:	9b01      	ldr	r3, [sp, #4]
    3044:	685b      	ldr	r3, [r3, #4]
    3046:	3b01      	subs	r3, #1
    3048:	021b      	lsls	r3, r3, #8
    304a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    304e:	9a03      	ldr	r2, [sp, #12]
    3050:	4313      	orrs	r3, r2
    3052:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3054:	4a02      	ldr	r2, [pc, #8]	; (3060 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3056:	9b03      	ldr	r3, [sp, #12]
    3058:	6053      	str	r3, [r2, #4]
}
    305a:	bf00      	nop
    305c:	b004      	add	sp, #16
    305e:	4770      	bx	lr
    3060:	40048000 	.word	0x40048000

00003064 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3064:	b084      	sub	sp, #16
    3066:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3068:	4919      	ldr	r1, [pc, #100]	; (30d0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    306a:	9b01      	ldr	r3, [sp, #4]
    306c:	681a      	ldr	r2, [r3, #0]
    306e:	4819      	ldr	r0, [pc, #100]	; (30d4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3070:	4613      	mov	r3, r2
    3072:	00db      	lsls	r3, r3, #3
    3074:	4413      	add	r3, r2
    3076:	4403      	add	r3, r0
    3078:	3305      	adds	r3, #5
    307a:	781b      	ldrb	r3, [r3, #0]
    307c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3080:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    3082:	9b03      	ldr	r3, [sp, #12]
    3084:	f023 030f 	bic.w	r3, r3, #15
    3088:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    308a:	9b01      	ldr	r3, [sp, #4]
    308c:	685b      	ldr	r3, [r3, #4]
    308e:	3b01      	subs	r3, #1
    3090:	f003 0307 	and.w	r3, r3, #7
    3094:	9a03      	ldr	r2, [sp, #12]
    3096:	4313      	orrs	r3, r2
    3098:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    309a:	9b01      	ldr	r3, [sp, #4]
    309c:	7a1b      	ldrb	r3, [r3, #8]
    309e:	3b01      	subs	r3, #1
    30a0:	00db      	lsls	r3, r3, #3
    30a2:	f003 0308 	and.w	r3, r3, #8
    30a6:	9a03      	ldr	r2, [sp, #12]
    30a8:	4313      	orrs	r3, r2
    30aa:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    30ac:	4908      	ldr	r1, [pc, #32]	; (30d0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    30ae:	9b01      	ldr	r3, [sp, #4]
    30b0:	681a      	ldr	r2, [r3, #0]
    30b2:	4808      	ldr	r0, [pc, #32]	; (30d4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    30b4:	4613      	mov	r3, r2
    30b6:	00db      	lsls	r3, r3, #3
    30b8:	4413      	add	r3, r2
    30ba:	4403      	add	r3, r0
    30bc:	3305      	adds	r3, #5
    30be:	781b      	ldrb	r3, [r3, #0]
    30c0:	461a      	mov	r2, r3
    30c2:	9b03      	ldr	r3, [sp, #12]
    30c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    30c8:	bf00      	nop
    30ca:	b004      	add	sp, #16
    30cc:	4770      	bx	lr
    30ce:	bf00      	nop
    30d0:	40065000 	.word	0x40065000
    30d4:	00010138 	.word	0x00010138

000030d8 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30d8:	b084      	sub	sp, #16
    30da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    30dc:	4b10      	ldr	r3, [pc, #64]	; (3120 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    30e0:	4a0f      	ldr	r2, [pc, #60]	; (3120 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    30e6:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    30e8:	4b0d      	ldr	r3, [pc, #52]	; (3120 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    30ec:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    30ee:	9b03      	ldr	r3, [sp, #12]
    30f0:	f023 030f 	bic.w	r3, r3, #15
    30f4:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    30f6:	9b01      	ldr	r3, [sp, #4]
    30f8:	685b      	ldr	r3, [r3, #4]
    30fa:	3b01      	subs	r3, #1
    30fc:	005b      	lsls	r3, r3, #1
    30fe:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    3102:	9b01      	ldr	r3, [sp, #4]
    3104:	7a1b      	ldrb	r3, [r3, #8]
    3106:	3b01      	subs	r3, #1
    3108:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    310c:	4313      	orrs	r3, r2
    310e:	9a03      	ldr	r2, [sp, #12]
    3110:	4313      	orrs	r3, r2
    3112:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3114:	4a02      	ldr	r2, [pc, #8]	; (3120 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3116:	9b03      	ldr	r3, [sp, #12]
    3118:	6693      	str	r3, [r2, #104]	; 0x68
}
    311a:	bf00      	nop
    311c:	b004      	add	sp, #16
    311e:	4770      	bx	lr
    3120:	40048000 	.word	0x40048000

00003124 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3124:	b082      	sub	sp, #8
    3126:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3128:	bf00      	nop
    312a:	b002      	add	sp, #8
    312c:	4770      	bx	lr
	...

00003130 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3130:	b082      	sub	sp, #8
    3132:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3134:	bf00      	nop
    3136:	b002      	add	sp, #8
    3138:	4770      	bx	lr

0000313a <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    313a:	b082      	sub	sp, #8
    313c:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    313e:	bf00      	nop
    3140:	b002      	add	sp, #8
    3142:	4770      	bx	lr

00003144 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3144:	b500      	push	{lr}
    3146:	b083      	sub	sp, #12
    3148:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    314a:	9b01      	ldr	r3, [sp, #4]
    314c:	2b00      	cmp	r3, #0
    314e:	d002      	beq.n	3156 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3150:	9801      	ldr	r0, [sp, #4]
    3152:	f000 f86a 	bl	322a <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3156:	bf00      	nop
    3158:	b003      	add	sp, #12
    315a:	f85d fb04 	ldr.w	pc, [sp], #4

0000315e <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    315e:	b500      	push	{lr}
    3160:	b083      	sub	sp, #12
    3162:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3164:	9b01      	ldr	r3, [sp, #4]
    3166:	2b00      	cmp	r3, #0
    3168:	d002      	beq.n	3170 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    316a:	9801      	ldr	r0, [sp, #4]
    316c:	f000 f884 	bl	3278 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3170:	bf00      	nop
    3172:	b003      	add	sp, #12
    3174:	f85d fb04 	ldr.w	pc, [sp], #4

00003178 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3178:	b500      	push	{lr}
    317a:	b089      	sub	sp, #36	; 0x24
    317c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    317e:	2300      	movs	r3, #0
    3180:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    3184:	9b01      	ldr	r3, [sp, #4]
    3186:	2b00      	cmp	r3, #0
    3188:	d031      	beq.n	31ee <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    318a:	4b1b      	ldr	r3, [pc, #108]	; (31f8 <Clock_Ip_CompleteSOSC+0x80>)
    318c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3190:	f003 0301 	and.w	r3, r3, #1
    3194:	2b00      	cmp	r3, #0
    3196:	d02a      	beq.n	31ee <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3198:	aa03      	add	r2, sp, #12
    319a:	a904      	add	r1, sp, #16
    319c:	a805      	add	r0, sp, #20
    319e:	f24c 3350 	movw	r3, #50000	; 0xc350
    31a2:	f7ff fd1d 	bl	2be0 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    31a6:	4b14      	ldr	r3, [pc, #80]	; (31f8 <Clock_Ip_CompleteSOSC+0x80>)
    31a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31ac:	0e1b      	lsrs	r3, r3, #24
    31ae:	f003 0301 	and.w	r3, r3, #1
    31b2:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    31b4:	9a03      	ldr	r2, [sp, #12]
    31b6:	a904      	add	r1, sp, #16
    31b8:	ab05      	add	r3, sp, #20
    31ba:	4618      	mov	r0, r3
    31bc:	f7ff fd2a 	bl	2c14 <Clock_Ip_TimeoutExpired>
    31c0:	4603      	mov	r3, r0
    31c2:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    31c6:	9b06      	ldr	r3, [sp, #24]
    31c8:	2b00      	cmp	r3, #0
    31ca:	d106      	bne.n	31da <Clock_Ip_CompleteSOSC+0x62>
    31cc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31d0:	f083 0301 	eor.w	r3, r3, #1
    31d4:	b2db      	uxtb	r3, r3
    31d6:	2b00      	cmp	r3, #0
    31d8:	d1e5      	bne.n	31a6 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    31da:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31de:	2b00      	cmp	r3, #0
    31e0:	d005      	beq.n	31ee <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    31e2:	9b01      	ldr	r3, [sp, #4]
    31e4:	681b      	ldr	r3, [r3, #0]
    31e6:	4619      	mov	r1, r3
    31e8:	2001      	movs	r0, #1
    31ea:	f7ff fce9 	bl	2bc0 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    31ee:	bf00      	nop
    31f0:	b009      	add	sp, #36	; 0x24
    31f2:	f85d fb04 	ldr.w	pc, [sp], #4
    31f6:	bf00      	nop
    31f8:	40064000 	.word	0x40064000

000031fc <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    31fc:	b500      	push	{lr}
    31fe:	b083      	sub	sp, #12
    3200:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    3202:	9801      	ldr	r0, [sp, #4]
    3204:	f000 f8c0 	bl	3388 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3208:	bf00      	nop
    320a:	b003      	add	sp, #12
    320c:	f85d fb04 	ldr.w	pc, [sp], #4

00003210 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3210:	b500      	push	{lr}
    3212:	b083      	sub	sp, #12
    3214:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3216:	9b01      	ldr	r3, [sp, #4]
    3218:	2b00      	cmp	r3, #0
    321a:	d002      	beq.n	3222 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    321c:	9801      	ldr	r0, [sp, #4]
    321e:	f000 f8c3 	bl	33a8 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3222:	bf00      	nop
    3224:	b003      	add	sp, #12
    3226:	f85d fb04 	ldr.w	pc, [sp], #4

0000322a <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    322a:	b082      	sub	sp, #8
    322c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    322e:	4b11      	ldr	r3, [pc, #68]	; (3274 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3230:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3234:	4a0f      	ldr	r2, [pc, #60]	; (3274 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3236:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    323a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    323e:	4b0d      	ldr	r3, [pc, #52]	; (3274 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3240:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3244:	4a0b      	ldr	r2, [pc, #44]	; (3274 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    324a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    324e:	4b09      	ldr	r3, [pc, #36]	; (3274 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3250:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3254:	4a07      	ldr	r2, [pc, #28]	; (3274 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3256:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    325a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    325e:	4b05      	ldr	r3, [pc, #20]	; (3274 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3260:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3264:	4a03      	ldr	r2, [pc, #12]	; (3274 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3266:	f023 0301 	bic.w	r3, r3, #1
    326a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    326e:	bf00      	nop
    3270:	b002      	add	sp, #8
    3272:	4770      	bx	lr
    3274:	40064000 	.word	0x40064000

00003278 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3278:	b082      	sub	sp, #8
    327a:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    327c:	9b01      	ldr	r3, [sp, #4]
    327e:	891b      	ldrh	r3, [r3, #8]
    3280:	2b01      	cmp	r3, #1
    3282:	d174      	bne.n	336e <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    3284:	9b01      	ldr	r3, [sp, #4]
    3286:	7bdb      	ldrb	r3, [r3, #15]
    3288:	2b00      	cmp	r3, #0
    328a:	d002      	beq.n	3292 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    328c:	2b01      	cmp	r3, #1
    328e:	d009      	beq.n	32a4 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    3290:	e011      	b.n	32b6 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    3292:	4b39      	ldr	r3, [pc, #228]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3294:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3298:	4a37      	ldr	r2, [pc, #220]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    329a:	f023 0308 	bic.w	r3, r3, #8
    329e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    32a2:	e008      	b.n	32b6 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    32a4:	4b34      	ldr	r3, [pc, #208]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32aa:	4a33      	ldr	r2, [pc, #204]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32ac:	f043 0308 	orr.w	r3, r3, #8
    32b0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    32b4:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    32b6:	4b30      	ldr	r3, [pc, #192]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32bc:	4a2e      	ldr	r2, [pc, #184]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    32c2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    32c6:	9b01      	ldr	r3, [sp, #4]
    32c8:	685b      	ldr	r3, [r3, #4]
    32ca:	4a2c      	ldr	r2, [pc, #176]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    32cc:	4293      	cmp	r3, r2
    32ce:	d90d      	bls.n	32ec <Clock_Ip_SetSOSC_TrustedCall+0x74>
    32d0:	9b01      	ldr	r3, [sp, #4]
    32d2:	685b      	ldr	r3, [r3, #4]
    32d4:	4a2a      	ldr	r2, [pc, #168]	; (3380 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    32d6:	4293      	cmp	r3, r2
    32d8:	d208      	bcs.n	32ec <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    32da:	4b27      	ldr	r3, [pc, #156]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32e0:	4a25      	ldr	r2, [pc, #148]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32e2:	f043 0320 	orr.w	r3, r3, #32
    32e6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    32ea:	e007      	b.n	32fc <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    32ec:	4b22      	ldr	r3, [pc, #136]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32f2:	4a21      	ldr	r2, [pc, #132]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32f4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    32f8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    32fc:	9b01      	ldr	r3, [sp, #4]
    32fe:	7b1b      	ldrb	r3, [r3, #12]
    3300:	2b00      	cmp	r3, #0
    3302:	d108      	bne.n	3316 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3304:	4b1c      	ldr	r3, [pc, #112]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3306:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    330a:	4a1b      	ldr	r2, [pc, #108]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    330c:	f043 0304 	orr.w	r3, r3, #4
    3310:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3314:	e007      	b.n	3326 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    3316:	4b18      	ldr	r3, [pc, #96]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3318:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    331c:	4a16      	ldr	r2, [pc, #88]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    331e:	f023 0304 	bic.w	r3, r3, #4
    3322:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3326:	9b01      	ldr	r3, [sp, #4]
    3328:	7c1b      	ldrb	r3, [r3, #16]
    332a:	2b02      	cmp	r3, #2
    332c:	d011      	beq.n	3352 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    332e:	2b02      	cmp	r3, #2
    3330:	dc14      	bgt.n	335c <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    3332:	2b00      	cmp	r3, #0
    3334:	d002      	beq.n	333c <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    3336:	2b01      	cmp	r3, #1
    3338:	d005      	beq.n	3346 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    333a:	e00f      	b.n	335c <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    333c:	4b0e      	ldr	r3, [pc, #56]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    333e:	2201      	movs	r2, #1
    3340:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3344:	e014      	b.n	3370 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3346:	4b0c      	ldr	r3, [pc, #48]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3348:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    334c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3350:	e00e      	b.n	3370 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3352:	4b09      	ldr	r3, [pc, #36]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3354:	4a0b      	ldr	r2, [pc, #44]	; (3384 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    3356:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    335a:	e009      	b.n	3370 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    335c:	4b06      	ldr	r3, [pc, #24]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    335e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3362:	4a05      	ldr	r2, [pc, #20]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3364:	f043 0301 	orr.w	r3, r3, #1
    3368:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    336c:	e000      	b.n	3370 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    336e:	bf00      	nop
}
    3370:	bf00      	nop
    3372:	b002      	add	sp, #8
    3374:	4770      	bx	lr
    3376:	bf00      	nop
    3378:	40064000 	.word	0x40064000
    337c:	003d08ff 	.word	0x003d08ff
    3380:	007a1200 	.word	0x007a1200
    3384:	00030001 	.word	0x00030001

00003388 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    3388:	b082      	sub	sp, #8
    338a:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    338c:	4b05      	ldr	r3, [pc, #20]	; (33a4 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    338e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3392:	4a04      	ldr	r2, [pc, #16]	; (33a4 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3394:	f023 0301 	bic.w	r3, r3, #1
    3398:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    339c:	bf00      	nop
    339e:	b002      	add	sp, #8
    33a0:	4770      	bx	lr
    33a2:	bf00      	nop
    33a4:	40064000 	.word	0x40064000

000033a8 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    33a8:	b082      	sub	sp, #8
    33aa:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    33ac:	9b01      	ldr	r3, [sp, #4]
    33ae:	891b      	ldrh	r3, [r3, #8]
    33b0:	2b01      	cmp	r3, #1
    33b2:	d107      	bne.n	33c4 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    33b4:	4b05      	ldr	r3, [pc, #20]	; (33cc <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    33b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    33ba:	4a04      	ldr	r2, [pc, #16]	; (33cc <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    33bc:	f043 0301 	orr.w	r3, r3, #1
    33c0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    33c4:	bf00      	nop
    33c6:	b002      	add	sp, #8
    33c8:	4770      	bx	lr
    33ca:	bf00      	nop
    33cc:	40064000 	.word	0x40064000

000033d0 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    33d0:	b082      	sub	sp, #8
    33d2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    33d4:	bf00      	nop
    33d6:	b002      	add	sp, #8
    33d8:	4770      	bx	lr

000033da <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    33da:	b082      	sub	sp, #8
    33dc:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    33de:	2300      	movs	r3, #0
}
    33e0:	4618      	mov	r0, r3
    33e2:	b002      	add	sp, #8
    33e4:	4770      	bx	lr

000033e6 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    33e6:	b082      	sub	sp, #8
    33e8:	9001      	str	r0, [sp, #4]
    33ea:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    33ec:	bf00      	nop
    33ee:	b002      	add	sp, #8
    33f0:	4770      	bx	lr
	...

000033f4 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    33f4:	b082      	sub	sp, #8
    33f6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    33f8:	bf00      	nop
    33fa:	b002      	add	sp, #8
    33fc:	4770      	bx	lr

000033fe <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    33fe:	b082      	sub	sp, #8
    3400:	9001      	str	r0, [sp, #4]
    3402:	460b      	mov	r3, r1
    3404:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    3408:	bf00      	nop
    340a:	b002      	add	sp, #8
    340c:	4770      	bx	lr

0000340e <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    340e:	b500      	push	{lr}
    3410:	b083      	sub	sp, #12
    3412:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3414:	9b01      	ldr	r3, [sp, #4]
    3416:	2b00      	cmp	r3, #0
    3418:	d002      	beq.n	3420 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    341a:	9801      	ldr	r0, [sp, #4]
    341c:	f000 f8e7 	bl	35ee <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3420:	bf00      	nop
    3422:	b003      	add	sp, #12
    3424:	f85d fb04 	ldr.w	pc, [sp], #4

00003428 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3428:	b500      	push	{lr}
    342a:	b085      	sub	sp, #20
    342c:	9001      	str	r0, [sp, #4]
    342e:	460b      	mov	r3, r1
    3430:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3434:	9b01      	ldr	r3, [sp, #4]
    3436:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3438:	f89d 3003 	ldrb.w	r3, [sp, #3]
    343c:	2b00      	cmp	r3, #0
    343e:	d003      	beq.n	3448 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3440:	2300      	movs	r3, #0
    3442:	f8ad 300c 	strh.w	r3, [sp, #12]
    3446:	e002      	b.n	344e <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3448:	2301      	movs	r3, #1
    344a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    344e:	ab02      	add	r3, sp, #8
    3450:	4618      	mov	r0, r3
    3452:	f7ff ffdc 	bl	340e <Clock_Ip_ClockSetSimLPO1KEnable>
}
    3456:	bf00      	nop
    3458:	b005      	add	sp, #20
    345a:	f85d fb04 	ldr.w	pc, [sp], #4

0000345e <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    345e:	b500      	push	{lr}
    3460:	b083      	sub	sp, #12
    3462:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3464:	9b01      	ldr	r3, [sp, #4]
    3466:	2b00      	cmp	r3, #0
    3468:	d002      	beq.n	3470 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    346a:	9801      	ldr	r0, [sp, #4]
    346c:	f000 f8d6 	bl	361c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3470:	bf00      	nop
    3472:	b003      	add	sp, #12
    3474:	f85d fb04 	ldr.w	pc, [sp], #4

00003478 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3478:	b500      	push	{lr}
    347a:	b085      	sub	sp, #20
    347c:	9001      	str	r0, [sp, #4]
    347e:	460b      	mov	r3, r1
    3480:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3484:	9b01      	ldr	r3, [sp, #4]
    3486:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3488:	f89d 3003 	ldrb.w	r3, [sp, #3]
    348c:	2b00      	cmp	r3, #0
    348e:	d003      	beq.n	3498 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    3490:	2300      	movs	r3, #0
    3492:	f8ad 300c 	strh.w	r3, [sp, #12]
    3496:	e002      	b.n	349e <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3498:	2301      	movs	r3, #1
    349a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    349e:	ab02      	add	r3, sp, #8
    34a0:	4618      	mov	r0, r3
    34a2:	f7ff ffdc 	bl	345e <Clock_Ip_ClockSetSimLPO32KEnable>
}
    34a6:	bf00      	nop
    34a8:	b005      	add	sp, #20
    34aa:	f85d fb04 	ldr.w	pc, [sp], #4

000034ae <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    34ae:	b500      	push	{lr}
    34b0:	b083      	sub	sp, #12
    34b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34b4:	9b01      	ldr	r3, [sp, #4]
    34b6:	2b00      	cmp	r3, #0
    34b8:	d002      	beq.n	34c0 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    34ba:	9801      	ldr	r0, [sp, #4]
    34bc:	f000 f8c6 	bl	364c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34c0:	bf00      	nop
    34c2:	b003      	add	sp, #12
    34c4:	f85d fb04 	ldr.w	pc, [sp], #4

000034c8 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    34c8:	b500      	push	{lr}
    34ca:	b085      	sub	sp, #20
    34cc:	9001      	str	r0, [sp, #4]
    34ce:	460b      	mov	r3, r1
    34d0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    34d4:	9b01      	ldr	r3, [sp, #4]
    34d6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    34d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    34dc:	2b00      	cmp	r3, #0
    34de:	d003      	beq.n	34e8 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    34e0:	2300      	movs	r3, #0
    34e2:	f8ad 300c 	strh.w	r3, [sp, #12]
    34e6:	e002      	b.n	34ee <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    34e8:	2301      	movs	r3, #1
    34ea:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    34ee:	ab02      	add	r3, sp, #8
    34f0:	4618      	mov	r0, r3
    34f2:	f7ff ffdc 	bl	34ae <Clock_Ip_ClockSetSimClkoutEnable>
}
    34f6:	bf00      	nop
    34f8:	b005      	add	sp, #20
    34fa:	f85d fb04 	ldr.w	pc, [sp], #4

000034fe <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    34fe:	b500      	push	{lr}
    3500:	b083      	sub	sp, #12
    3502:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3504:	9b01      	ldr	r3, [sp, #4]
    3506:	2b00      	cmp	r3, #0
    3508:	d002      	beq.n	3510 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    350a:	9801      	ldr	r0, [sp, #4]
    350c:	f000 f8b6 	bl	367c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3510:	bf00      	nop
    3512:	b003      	add	sp, #12
    3514:	f85d fb04 	ldr.w	pc, [sp], #4

00003518 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3518:	b500      	push	{lr}
    351a:	b085      	sub	sp, #20
    351c:	9001      	str	r0, [sp, #4]
    351e:	460b      	mov	r3, r1
    3520:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3524:	9b01      	ldr	r3, [sp, #4]
    3526:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3528:	f89d 3003 	ldrb.w	r3, [sp, #3]
    352c:	2b00      	cmp	r3, #0
    352e:	d003      	beq.n	3538 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3530:	2300      	movs	r3, #0
    3532:	f8ad 300c 	strh.w	r3, [sp, #12]
    3536:	e002      	b.n	353e <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3538:	2301      	movs	r3, #1
    353a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    353e:	ab02      	add	r3, sp, #8
    3540:	4618      	mov	r0, r3
    3542:	f7ff ffdc 	bl	34fe <Clock_Ip_ClockSetPccCgcEnable>
}
    3546:	bf00      	nop
    3548:	b005      	add	sp, #20
    354a:	f85d fb04 	ldr.w	pc, [sp], #4

0000354e <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    354e:	b500      	push	{lr}
    3550:	b083      	sub	sp, #12
    3552:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3554:	9b01      	ldr	r3, [sp, #4]
    3556:	2b00      	cmp	r3, #0
    3558:	d002      	beq.n	3560 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    355a:	9801      	ldr	r0, [sp, #4]
    355c:	f000 f8bc 	bl	36d8 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3560:	bf00      	nop
    3562:	b003      	add	sp, #12
    3564:	f85d fb04 	ldr.w	pc, [sp], #4

00003568 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    3568:	b500      	push	{lr}
    356a:	b085      	sub	sp, #20
    356c:	9001      	str	r0, [sp, #4]
    356e:	460b      	mov	r3, r1
    3570:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3574:	9b01      	ldr	r3, [sp, #4]
    3576:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3578:	f89d 3003 	ldrb.w	r3, [sp, #3]
    357c:	2b00      	cmp	r3, #0
    357e:	d003      	beq.n	3588 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    3580:	2300      	movs	r3, #0
    3582:	f8ad 300c 	strh.w	r3, [sp, #12]
    3586:	e002      	b.n	358e <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3588:	2301      	movs	r3, #1
    358a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    358e:	ab02      	add	r3, sp, #8
    3590:	4618      	mov	r0, r3
    3592:	f7ff ffdc 	bl	354e <Clock_Ip_ClockSetSimGate>
}
    3596:	bf00      	nop
    3598:	b005      	add	sp, #20
    359a:	f85d fb04 	ldr.w	pc, [sp], #4

0000359e <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    359e:	b500      	push	{lr}
    35a0:	b083      	sub	sp, #12
    35a2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    35a4:	9b01      	ldr	r3, [sp, #4]
    35a6:	2b00      	cmp	r3, #0
    35a8:	d002      	beq.n	35b0 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    35aa:	9801      	ldr	r0, [sp, #4]
    35ac:	f000 f8c0 	bl	3730 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    35b0:	bf00      	nop
    35b2:	b003      	add	sp, #12
    35b4:	f85d fb04 	ldr.w	pc, [sp], #4

000035b8 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    35b8:	b500      	push	{lr}
    35ba:	b085      	sub	sp, #20
    35bc:	9001      	str	r0, [sp, #4]
    35be:	460b      	mov	r3, r1
    35c0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    35c4:	9b01      	ldr	r3, [sp, #4]
    35c6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    35c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    35cc:	2b00      	cmp	r3, #0
    35ce:	d003      	beq.n	35d8 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    35d0:	2300      	movs	r3, #0
    35d2:	f8ad 300c 	strh.w	r3, [sp, #12]
    35d6:	e002      	b.n	35de <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    35d8:	2301      	movs	r3, #1
    35da:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    35de:	ab02      	add	r3, sp, #8
    35e0:	4618      	mov	r0, r3
    35e2:	f7ff ffdc 	bl	359e <Clock_Ip_ClockSetSimTraceEnable>
}
    35e6:	bf00      	nop
    35e8:	b005      	add	sp, #20
    35ea:	f85d fb04 	ldr.w	pc, [sp], #4

000035ee <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35ee:	b084      	sub	sp, #16
    35f0:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    35f2:	4b09      	ldr	r3, [pc, #36]	; (3618 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    35f4:	691b      	ldr	r3, [r3, #16]
    35f6:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    35f8:	9b03      	ldr	r3, [sp, #12]
    35fa:	f023 0301 	bic.w	r3, r3, #1
    35fe:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3600:	9b01      	ldr	r3, [sp, #4]
    3602:	889b      	ldrh	r3, [r3, #4]
    3604:	461a      	mov	r2, r3
    3606:	9b03      	ldr	r3, [sp, #12]
    3608:	4313      	orrs	r3, r2
    360a:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    360c:	4a02      	ldr	r2, [pc, #8]	; (3618 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    360e:	9b03      	ldr	r3, [sp, #12]
    3610:	6113      	str	r3, [r2, #16]
}
    3612:	bf00      	nop
    3614:	b004      	add	sp, #16
    3616:	4770      	bx	lr
    3618:	40048000 	.word	0x40048000

0000361c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    361c:	b084      	sub	sp, #16
    361e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3620:	4b09      	ldr	r3, [pc, #36]	; (3648 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3622:	691b      	ldr	r3, [r3, #16]
    3624:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    3626:	9b03      	ldr	r3, [sp, #12]
    3628:	f023 0302 	bic.w	r3, r3, #2
    362c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    362e:	9b01      	ldr	r3, [sp, #4]
    3630:	889b      	ldrh	r3, [r3, #4]
    3632:	005b      	lsls	r3, r3, #1
    3634:	9a03      	ldr	r2, [sp, #12]
    3636:	4313      	orrs	r3, r2
    3638:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    363a:	4a03      	ldr	r2, [pc, #12]	; (3648 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    363c:	9b03      	ldr	r3, [sp, #12]
    363e:	6113      	str	r3, [r2, #16]
}
    3640:	bf00      	nop
    3642:	b004      	add	sp, #16
    3644:	4770      	bx	lr
    3646:	bf00      	nop
    3648:	40048000 	.word	0x40048000

0000364c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    364c:	b084      	sub	sp, #16
    364e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3650:	4b09      	ldr	r3, [pc, #36]	; (3678 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3652:	685b      	ldr	r3, [r3, #4]
    3654:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    3656:	9b03      	ldr	r3, [sp, #12]
    3658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    365c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    365e:	9b01      	ldr	r3, [sp, #4]
    3660:	889b      	ldrh	r3, [r3, #4]
    3662:	02db      	lsls	r3, r3, #11
    3664:	9a03      	ldr	r2, [sp, #12]
    3666:	4313      	orrs	r3, r2
    3668:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    366a:	4a03      	ldr	r2, [pc, #12]	; (3678 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    366c:	9b03      	ldr	r3, [sp, #12]
    366e:	6053      	str	r3, [r2, #4]
}
    3670:	bf00      	nop
    3672:	b004      	add	sp, #16
    3674:	4770      	bx	lr
    3676:	bf00      	nop
    3678:	40048000 	.word	0x40048000

0000367c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    367c:	b084      	sub	sp, #16
    367e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    3680:	4913      	ldr	r1, [pc, #76]	; (36d0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3682:	9b01      	ldr	r3, [sp, #4]
    3684:	681a      	ldr	r2, [r3, #0]
    3686:	4813      	ldr	r0, [pc, #76]	; (36d4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3688:	4613      	mov	r3, r2
    368a:	00db      	lsls	r3, r3, #3
    368c:	4413      	add	r3, r2
    368e:	4403      	add	r3, r0
    3690:	3306      	adds	r3, #6
    3692:	781b      	ldrb	r3, [r3, #0]
    3694:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3698:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    369a:	9b03      	ldr	r3, [sp, #12]
    369c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    36a0:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    36a2:	9b01      	ldr	r3, [sp, #4]
    36a4:	889b      	ldrh	r3, [r3, #4]
    36a6:	079b      	lsls	r3, r3, #30
    36a8:	9a03      	ldr	r2, [sp, #12]
    36aa:	4313      	orrs	r3, r2
    36ac:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    36ae:	4908      	ldr	r1, [pc, #32]	; (36d0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    36b0:	9b01      	ldr	r3, [sp, #4]
    36b2:	681a      	ldr	r2, [r3, #0]
    36b4:	4807      	ldr	r0, [pc, #28]	; (36d4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    36b6:	4613      	mov	r3, r2
    36b8:	00db      	lsls	r3, r3, #3
    36ba:	4413      	add	r3, r2
    36bc:	4403      	add	r3, r0
    36be:	3306      	adds	r3, #6
    36c0:	781b      	ldrb	r3, [r3, #0]
    36c2:	461a      	mov	r2, r3
    36c4:	9b03      	ldr	r3, [sp, #12]
    36c6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    36ca:	bf00      	nop
    36cc:	b004      	add	sp, #16
    36ce:	4770      	bx	lr
    36d0:	40065000 	.word	0x40065000
    36d4:	00010138 	.word	0x00010138

000036d8 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    36d8:	b086      	sub	sp, #24
    36da:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    36dc:	9b01      	ldr	r3, [sp, #4]
    36de:	889b      	ldrh	r3, [r3, #4]
    36e0:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    36e2:	9b01      	ldr	r3, [sp, #4]
    36e4:	681a      	ldr	r2, [r3, #0]
    36e6:	4910      	ldr	r1, [pc, #64]	; (3728 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    36e8:	4613      	mov	r3, r2
    36ea:	00db      	lsls	r3, r3, #3
    36ec:	4413      	add	r3, r2
    36ee:	440b      	add	r3, r1
    36f0:	3306      	adds	r3, #6
    36f2:	781b      	ldrb	r3, [r3, #0]
    36f4:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    36f6:	4b0d      	ldr	r3, [pc, #52]	; (372c <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    36f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    36fa:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    36fc:	2201      	movs	r2, #1
    36fe:	9b04      	ldr	r3, [sp, #16]
    3700:	fa02 f303 	lsl.w	r3, r2, r3
    3704:	43db      	mvns	r3, r3
    3706:	9a03      	ldr	r2, [sp, #12]
    3708:	4013      	ands	r3, r2
    370a:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    370c:	9a05      	ldr	r2, [sp, #20]
    370e:	9b04      	ldr	r3, [sp, #16]
    3710:	fa02 f303 	lsl.w	r3, r2, r3
    3714:	9a03      	ldr	r2, [sp, #12]
    3716:	4313      	orrs	r3, r2
    3718:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    371a:	4a04      	ldr	r2, [pc, #16]	; (372c <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    371c:	9b03      	ldr	r3, [sp, #12]
    371e:	6413      	str	r3, [r2, #64]	; 0x40
}
    3720:	bf00      	nop
    3722:	b006      	add	sp, #24
    3724:	4770      	bx	lr
    3726:	bf00      	nop
    3728:	00010138 	.word	0x00010138
    372c:	40048000 	.word	0x40048000

00003730 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3730:	b084      	sub	sp, #16
    3732:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3734:	4b0a      	ldr	r3, [pc, #40]	; (3760 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3738:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    373a:	9b01      	ldr	r3, [sp, #4]
    373c:	889b      	ldrh	r3, [r3, #4]
    373e:	2b01      	cmp	r3, #1
    3740:	d104      	bne.n	374c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    3742:	9b03      	ldr	r3, [sp, #12]
    3744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3748:	9303      	str	r3, [sp, #12]
    374a:	e003      	b.n	3754 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    374c:	9b03      	ldr	r3, [sp, #12]
    374e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3752:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3754:	4a02      	ldr	r2, [pc, #8]	; (3760 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3756:	9b03      	ldr	r3, [sp, #12]
    3758:	6693      	str	r3, [r2, #104]	; 0x68
}
    375a:	bf00      	nop
    375c:	b004      	add	sp, #16
    375e:	4770      	bx	lr
    3760:	40048000 	.word	0x40048000

00003764 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3764:	b082      	sub	sp, #8
    3766:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3768:	bf00      	nop
    376a:	b002      	add	sp, #8
    376c:	4770      	bx	lr

0000376e <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    376e:	b082      	sub	sp, #8
    3770:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3772:	bf00      	nop
    3774:	b002      	add	sp, #8
    3776:	4770      	bx	lr

00003778 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3778:	b500      	push	{lr}
    377a:	b083      	sub	sp, #12
    377c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    377e:	9b01      	ldr	r3, [sp, #4]
    3780:	2b00      	cmp	r3, #0
    3782:	d002      	beq.n	378a <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    3784:	9801      	ldr	r0, [sp, #4]
    3786:	f000 f8d1 	bl	392c <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    378a:	bf00      	nop
    378c:	b003      	add	sp, #12
    378e:	f85d fb04 	ldr.w	pc, [sp], #4

00003792 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3792:	b500      	push	{lr}
    3794:	b083      	sub	sp, #12
    3796:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3798:	9b01      	ldr	r3, [sp, #4]
    379a:	2b00      	cmp	r3, #0
    379c:	d002      	beq.n	37a4 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    379e:	9801      	ldr	r0, [sp, #4]
    37a0:	f000 f950 	bl	3a44 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37a4:	bf00      	nop
    37a6:	b003      	add	sp, #12
    37a8:	f85d fb04 	ldr.w	pc, [sp], #4

000037ac <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    37ac:	b500      	push	{lr}
    37ae:	b083      	sub	sp, #12
    37b0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    37b2:	9801      	ldr	r0, [sp, #4]
    37b4:	f000 f98e 	bl	3ad4 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    37b8:	bf00      	nop
    37ba:	b003      	add	sp, #12
    37bc:	f85d fb04 	ldr.w	pc, [sp], #4

000037c0 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    37c0:	b500      	push	{lr}
    37c2:	b083      	sub	sp, #12
    37c4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37c6:	9b01      	ldr	r3, [sp, #4]
    37c8:	2b00      	cmp	r3, #0
    37ca:	d002      	beq.n	37d2 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    37cc:	9801      	ldr	r0, [sp, #4]
    37ce:	f000 f999 	bl	3b04 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37d2:	bf00      	nop
    37d4:	b003      	add	sp, #12
    37d6:	f85d fb04 	ldr.w	pc, [sp], #4

000037da <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    37da:	b500      	push	{lr}
    37dc:	b083      	sub	sp, #12
    37de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37e0:	9b01      	ldr	r3, [sp, #4]
    37e2:	2b00      	cmp	r3, #0
    37e4:	d002      	beq.n	37ec <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    37e6:	9801      	ldr	r0, [sp, #4]
    37e8:	f000 f9b0 	bl	3b4c <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37ec:	bf00      	nop
    37ee:	b003      	add	sp, #12
    37f0:	f85d fb04 	ldr.w	pc, [sp], #4

000037f4 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    37f4:	b500      	push	{lr}
    37f6:	b083      	sub	sp, #12
    37f8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    37fa:	9801      	ldr	r0, [sp, #4]
    37fc:	f000 f9ba 	bl	3b74 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3800:	bf00      	nop
    3802:	b003      	add	sp, #12
    3804:	f85d fb04 	ldr.w	pc, [sp], #4

00003808 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3808:	b500      	push	{lr}
    380a:	b083      	sub	sp, #12
    380c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    380e:	9b01      	ldr	r3, [sp, #4]
    3810:	2b00      	cmp	r3, #0
    3812:	d002      	beq.n	381a <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3814:	9801      	ldr	r0, [sp, #4]
    3816:	f000 f9bd 	bl	3b94 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    381a:	bf00      	nop
    381c:	b003      	add	sp, #12
    381e:	f85d fb04 	ldr.w	pc, [sp], #4

00003822 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3822:	b500      	push	{lr}
    3824:	b083      	sub	sp, #12
    3826:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3828:	9b01      	ldr	r3, [sp, #4]
    382a:	2b00      	cmp	r3, #0
    382c:	d002      	beq.n	3834 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    382e:	9801      	ldr	r0, [sp, #4]
    3830:	f000 f9d4 	bl	3bdc <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3834:	bf00      	nop
    3836:	b003      	add	sp, #12
    3838:	f85d fb04 	ldr.w	pc, [sp], #4

0000383c <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    383c:	b500      	push	{lr}
    383e:	b083      	sub	sp, #12
    3840:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3842:	9801      	ldr	r0, [sp, #4]
    3844:	f000 f9de 	bl	3c04 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3848:	bf00      	nop
    384a:	b003      	add	sp, #12
    384c:	f85d fb04 	ldr.w	pc, [sp], #4

00003850 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3850:	b500      	push	{lr}
    3852:	b089      	sub	sp, #36	; 0x24
    3854:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3856:	2300      	movs	r3, #0
    3858:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    385c:	4b20      	ldr	r3, [pc, #128]	; (38e0 <SetInputSouceSytemClock+0x90>)
    385e:	695b      	ldr	r3, [r3, #20]
    3860:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3862:	9b06      	ldr	r3, [sp, #24]
    3864:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3868:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    386a:	9b01      	ldr	r3, [sp, #4]
    386c:	061b      	lsls	r3, r3, #24
    386e:	9a06      	ldr	r2, [sp, #24]
    3870:	4313      	orrs	r3, r2
    3872:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3874:	4a1a      	ldr	r2, [pc, #104]	; (38e0 <SetInputSouceSytemClock+0x90>)
    3876:	9b06      	ldr	r3, [sp, #24]
    3878:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    387a:	aa02      	add	r2, sp, #8
    387c:	a903      	add	r1, sp, #12
    387e:	a804      	add	r0, sp, #16
    3880:	f24c 3350 	movw	r3, #50000	; 0xc350
    3884:	f7ff f9ac 	bl	2be0 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3888:	4b15      	ldr	r3, [pc, #84]	; (38e0 <SetInputSouceSytemClock+0x90>)
    388a:	691b      	ldr	r3, [r3, #16]
    388c:	0e1b      	lsrs	r3, r3, #24
    388e:	f003 030f 	and.w	r3, r3, #15
    3892:	9a01      	ldr	r2, [sp, #4]
    3894:	429a      	cmp	r2, r3
    3896:	bf0c      	ite	eq
    3898:	2301      	moveq	r3, #1
    389a:	2300      	movne	r3, #0
    389c:	b2db      	uxtb	r3, r3
    389e:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    38a0:	9a02      	ldr	r2, [sp, #8]
    38a2:	a903      	add	r1, sp, #12
    38a4:	ab04      	add	r3, sp, #16
    38a6:	4618      	mov	r0, r3
    38a8:	f7ff f9b4 	bl	2c14 <Clock_Ip_TimeoutExpired>
    38ac:	4603      	mov	r3, r0
    38ae:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    38b2:	9b05      	ldr	r3, [sp, #20]
    38b4:	2b00      	cmp	r3, #0
    38b6:	d106      	bne.n	38c6 <SetInputSouceSytemClock+0x76>
    38b8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    38bc:	f083 0301 	eor.w	r3, r3, #1
    38c0:	b2db      	uxtb	r3, r3
    38c2:	2b00      	cmp	r3, #0
    38c4:	d1e0      	bne.n	3888 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    38c6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    38ca:	2b00      	cmp	r3, #0
    38cc:	d003      	beq.n	38d6 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    38ce:	2105      	movs	r1, #5
    38d0:	2001      	movs	r0, #1
    38d2:	f7ff f975 	bl	2bc0 <Clock_Ip_ReportClockErrors>
    }
}
    38d6:	bf00      	nop
    38d8:	b009      	add	sp, #36	; 0x24
    38da:	f85d fb04 	ldr.w	pc, [sp], #4
    38de:	bf00      	nop
    38e0:	40064000 	.word	0x40064000

000038e4 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    38e4:	b500      	push	{lr}
    38e6:	b083      	sub	sp, #12
    38e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38ea:	9b01      	ldr	r3, [sp, #4]
    38ec:	2b00      	cmp	r3, #0
    38ee:	d002      	beq.n	38f6 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    38f0:	9801      	ldr	r0, [sp, #4]
    38f2:	f000 f997 	bl	3c24 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38f6:	bf00      	nop
    38f8:	b003      	add	sp, #12
    38fa:	f85d fb04 	ldr.w	pc, [sp], #4

000038fe <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    38fe:	b500      	push	{lr}
    3900:	b083      	sub	sp, #12
    3902:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3904:	9b01      	ldr	r3, [sp, #4]
    3906:	2b00      	cmp	r3, #0
    3908:	d002      	beq.n	3910 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    390a:	9801      	ldr	r0, [sp, #4]
    390c:	f000 fa7e 	bl	3e0c <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3910:	bf00      	nop
    3912:	b003      	add	sp, #12
    3914:	f85d fb04 	ldr.w	pc, [sp], #4

00003918 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3918:	b500      	push	{lr}
    391a:	b083      	sub	sp, #12
    391c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    391e:	9801      	ldr	r0, [sp, #4]
    3920:	f000 fab8 	bl	3e94 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3924:	bf00      	nop
    3926:	b003      	add	sp, #12
    3928:	f85d fb04 	ldr.w	pc, [sp], #4

0000392c <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    392c:	b500      	push	{lr}
    392e:	b08b      	sub	sp, #44	; 0x2c
    3930:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3932:	2300      	movs	r3, #0
    3934:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3938:	9b01      	ldr	r3, [sp, #4]
    393a:	2b00      	cmp	r3, #0
    393c:	d10b      	bne.n	3956 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    393e:	2305      	movs	r3, #5
    3940:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3942:	2301      	movs	r3, #1
    3944:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3948:	2301      	movs	r3, #1
    394a:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    394e:	2301      	movs	r3, #1
    3950:	f88d 3010 	strb.w	r3, [sp, #16]
    3954:	e00e      	b.n	3974 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3956:	9b01      	ldr	r3, [sp, #4]
    3958:	681b      	ldr	r3, [r3, #0]
    395a:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    395c:	9b01      	ldr	r3, [sp, #4]
    395e:	79db      	ldrb	r3, [r3, #7]
    3960:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3964:	9b01      	ldr	r3, [sp, #4]
    3966:	889b      	ldrh	r3, [r3, #4]
    3968:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    396c:	9b01      	ldr	r3, [sp, #4]
    396e:	7a1b      	ldrb	r3, [r3, #8]
    3970:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3974:	4b32      	ldr	r3, [pc, #200]	; (3a40 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3976:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    397a:	4a31      	ldr	r2, [pc, #196]	; (3a40 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    397c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3980:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3984:	4b2e      	ldr	r3, [pc, #184]	; (3a40 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3986:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    398a:	4a2d      	ldr	r2, [pc, #180]	; (3a40 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    398c:	f023 0301 	bic.w	r3, r3, #1
    3990:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3994:	4b2a      	ldr	r3, [pc, #168]	; (3a40 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3996:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    399a:	4a29      	ldr	r2, [pc, #164]	; (3a40 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    399c:	f023 0304 	bic.w	r3, r3, #4
    39a0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    39a4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    39a8:	2b01      	cmp	r3, #1
    39aa:	d144      	bne.n	3a36 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    39ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    39b0:	4a23      	ldr	r2, [pc, #140]	; (3a40 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39b2:	f003 0301 	and.w	r3, r3, #1
    39b6:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    39ba:	4b21      	ldr	r3, [pc, #132]	; (3a40 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39c0:	4a1f      	ldr	r2, [pc, #124]	; (3a40 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39c2:	f043 0301 	orr.w	r3, r3, #1
    39c6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    39ca:	4b1d      	ldr	r3, [pc, #116]	; (3a40 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    39d0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    39d4:	009b      	lsls	r3, r3, #2
    39d6:	f003 0304 	and.w	r3, r3, #4
    39da:	4919      	ldr	r1, [pc, #100]	; (3a40 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39dc:	4313      	orrs	r3, r2
    39de:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    39e2:	aa05      	add	r2, sp, #20
    39e4:	a906      	add	r1, sp, #24
    39e6:	a807      	add	r0, sp, #28
    39e8:	f24c 3350 	movw	r3, #50000	; 0xc350
    39ec:	f7ff f8f8 	bl	2be0 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    39f0:	4b13      	ldr	r3, [pc, #76]	; (3a40 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39f6:	0e1b      	lsrs	r3, r3, #24
    39f8:	f003 0301 	and.w	r3, r3, #1
    39fc:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    39fe:	9a05      	ldr	r2, [sp, #20]
    3a00:	a906      	add	r1, sp, #24
    3a02:	ab07      	add	r3, sp, #28
    3a04:	4618      	mov	r0, r3
    3a06:	f7ff f905 	bl	2c14 <Clock_Ip_TimeoutExpired>
    3a0a:	4603      	mov	r3, r0
    3a0c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3a10:	9b08      	ldr	r3, [sp, #32]
    3a12:	2b00      	cmp	r3, #0
    3a14:	d106      	bne.n	3a24 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    3a16:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3a1a:	f083 0301 	eor.w	r3, r3, #1
    3a1e:	b2db      	uxtb	r3, r3
    3a20:	2b00      	cmp	r3, #0
    3a22:	d1e5      	bne.n	39f0 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3a24:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3a28:	2b00      	cmp	r3, #0
    3a2a:	d004      	beq.n	3a36 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3a2c:	9b02      	ldr	r3, [sp, #8]
    3a2e:	4619      	mov	r1, r3
    3a30:	2001      	movs	r0, #1
    3a32:	f7ff f8c5 	bl	2bc0 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3a36:	bf00      	nop
    3a38:	b00b      	add	sp, #44	; 0x2c
    3a3a:	f85d fb04 	ldr.w	pc, [sp], #4
    3a3e:	bf00      	nop
    3a40:	40064000 	.word	0x40064000

00003a44 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a44:	b500      	push	{lr}
    3a46:	b089      	sub	sp, #36	; 0x24
    3a48:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3a4a:	2300      	movs	r3, #0
    3a4c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3a50:	4b1f      	ldr	r3, [pc, #124]	; (3ad0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a56:	4a1e      	ldr	r2, [pc, #120]	; (3ad0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a58:	f043 0301 	orr.w	r3, r3, #1
    3a5c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3a60:	4b1b      	ldr	r3, [pc, #108]	; (3ad0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a66:	4a1a      	ldr	r2, [pc, #104]	; (3ad0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a68:	f043 0304 	orr.w	r3, r3, #4
    3a6c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a70:	aa03      	add	r2, sp, #12
    3a72:	a904      	add	r1, sp, #16
    3a74:	a805      	add	r0, sp, #20
    3a76:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a7a:	f7ff f8b1 	bl	2be0 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3a7e:	4b14      	ldr	r3, [pc, #80]	; (3ad0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a84:	0e1b      	lsrs	r3, r3, #24
    3a86:	f003 0301 	and.w	r3, r3, #1
    3a8a:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3a8c:	9a03      	ldr	r2, [sp, #12]
    3a8e:	a904      	add	r1, sp, #16
    3a90:	ab05      	add	r3, sp, #20
    3a92:	4618      	mov	r0, r3
    3a94:	f7ff f8be 	bl	2c14 <Clock_Ip_TimeoutExpired>
    3a98:	4603      	mov	r3, r0
    3a9a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3a9e:	9b06      	ldr	r3, [sp, #24]
    3aa0:	2b00      	cmp	r3, #0
    3aa2:	d106      	bne.n	3ab2 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3aa4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3aa8:	f083 0301 	eor.w	r3, r3, #1
    3aac:	b2db      	uxtb	r3, r3
    3aae:	2b00      	cmp	r3, #0
    3ab0:	d1e5      	bne.n	3a7e <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3ab2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	d005      	beq.n	3ac6 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3aba:	9b01      	ldr	r3, [sp, #4]
    3abc:	681b      	ldr	r3, [r3, #0]
    3abe:	4619      	mov	r1, r3
    3ac0:	2001      	movs	r0, #1
    3ac2:	f7ff f87d 	bl	2bc0 <Clock_Ip_ReportClockErrors>
    }
}
    3ac6:	bf00      	nop
    3ac8:	b009      	add	sp, #36	; 0x24
    3aca:	f85d fb04 	ldr.w	pc, [sp], #4
    3ace:	bf00      	nop
    3ad0:	40064000 	.word	0x40064000

00003ad4 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3ad4:	b082      	sub	sp, #8
    3ad6:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3ad8:	4b09      	ldr	r3, [pc, #36]	; (3b00 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ada:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ade:	4a08      	ldr	r2, [pc, #32]	; (3b00 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ae0:	f023 0301 	bic.w	r3, r3, #1
    3ae4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3ae8:	4b05      	ldr	r3, [pc, #20]	; (3b00 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3aea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3aee:	4a04      	ldr	r2, [pc, #16]	; (3b00 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3af0:	f023 0304 	bic.w	r3, r3, #4
    3af4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3af8:	bf00      	nop
    3afa:	b002      	add	sp, #8
    3afc:	4770      	bx	lr
    3afe:	bf00      	nop
    3b00:	40064000 	.word	0x40064000

00003b04 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b04:	b082      	sub	sp, #8
    3b06:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3b08:	4b0f      	ldr	r3, [pc, #60]	; (3b48 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b0e:	4a0e      	ldr	r2, [pc, #56]	; (3b48 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b10:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b14:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b18:	4b0b      	ldr	r3, [pc, #44]	; (3b48 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b1e:	4a0a      	ldr	r2, [pc, #40]	; (3b48 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b20:	f023 0304 	bic.w	r3, r3, #4
    3b24:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3b28:	4b07      	ldr	r3, [pc, #28]	; (3b48 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b2a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3b2e:	9b01      	ldr	r3, [sp, #4]
    3b30:	7a1b      	ldrb	r3, [r3, #8]
    3b32:	009b      	lsls	r3, r3, #2
    3b34:	f003 0304 	and.w	r3, r3, #4
    3b38:	4903      	ldr	r1, [pc, #12]	; (3b48 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b3a:	4313      	orrs	r3, r2
    3b3c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3b40:	bf00      	nop
    3b42:	b002      	add	sp, #8
    3b44:	4770      	bx	lr
    3b46:	bf00      	nop
    3b48:	40064000 	.word	0x40064000

00003b4c <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b4c:	b082      	sub	sp, #8
    3b4e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3b50:	9b01      	ldr	r3, [sp, #4]
    3b52:	889b      	ldrh	r3, [r3, #4]
    3b54:	2b01      	cmp	r3, #1
    3b56:	d107      	bne.n	3b68 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3b58:	4b05      	ldr	r3, [pc, #20]	; (3b70 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3b5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b5e:	4a04      	ldr	r2, [pc, #16]	; (3b70 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3b60:	f043 0304 	orr.w	r3, r3, #4
    3b64:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3b68:	bf00      	nop
    3b6a:	b002      	add	sp, #8
    3b6c:	4770      	bx	lr
    3b6e:	bf00      	nop
    3b70:	40064000 	.word	0x40064000

00003b74 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3b74:	b082      	sub	sp, #8
    3b76:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b78:	4b05      	ldr	r3, [pc, #20]	; (3b90 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3b7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b7e:	4a04      	ldr	r2, [pc, #16]	; (3b90 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3b80:	f023 0304 	bic.w	r3, r3, #4
    3b84:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3b88:	bf00      	nop
    3b8a:	b002      	add	sp, #8
    3b8c:	4770      	bx	lr
    3b8e:	bf00      	nop
    3b90:	40064000 	.word	0x40064000

00003b94 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b94:	b082      	sub	sp, #8
    3b96:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3b98:	4b0f      	ldr	r3, [pc, #60]	; (3bd8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b9e:	4a0e      	ldr	r2, [pc, #56]	; (3bd8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3ba0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3ba4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3ba8:	4b0b      	ldr	r3, [pc, #44]	; (3bd8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3baa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bae:	4a0a      	ldr	r2, [pc, #40]	; (3bd8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bb0:	f023 0302 	bic.w	r3, r3, #2
    3bb4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3bb8:	4b07      	ldr	r3, [pc, #28]	; (3bd8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3bbe:	9b01      	ldr	r3, [sp, #4]
    3bc0:	7a5b      	ldrb	r3, [r3, #9]
    3bc2:	005b      	lsls	r3, r3, #1
    3bc4:	f003 0302 	and.w	r3, r3, #2
    3bc8:	4903      	ldr	r1, [pc, #12]	; (3bd8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bca:	4313      	orrs	r3, r2
    3bcc:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3bd0:	bf00      	nop
    3bd2:	b002      	add	sp, #8
    3bd4:	4770      	bx	lr
    3bd6:	bf00      	nop
    3bd8:	40064000 	.word	0x40064000

00003bdc <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3bdc:	b082      	sub	sp, #8
    3bde:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3be0:	9b01      	ldr	r3, [sp, #4]
    3be2:	889b      	ldrh	r3, [r3, #4]
    3be4:	2b01      	cmp	r3, #1
    3be6:	d107      	bne.n	3bf8 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3be8:	4b05      	ldr	r3, [pc, #20]	; (3c00 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3bea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bee:	4a04      	ldr	r2, [pc, #16]	; (3c00 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3bf0:	f043 0302 	orr.w	r3, r3, #2
    3bf4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3bf8:	bf00      	nop
    3bfa:	b002      	add	sp, #8
    3bfc:	4770      	bx	lr
    3bfe:	bf00      	nop
    3c00:	40064000 	.word	0x40064000

00003c04 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3c04:	b082      	sub	sp, #8
    3c06:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3c08:	4b05      	ldr	r3, [pc, #20]	; (3c20 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3c0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c0e:	4a04      	ldr	r2, [pc, #16]	; (3c20 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3c10:	f023 0302 	bic.w	r3, r3, #2
    3c14:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3c18:	bf00      	nop
    3c1a:	b002      	add	sp, #8
    3c1c:	4770      	bx	lr
    3c1e:	bf00      	nop
    3c20:	40064000 	.word	0x40064000

00003c24 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c24:	b500      	push	{lr}
    3c26:	b08b      	sub	sp, #44	; 0x2c
    3c28:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3c2a:	9b01      	ldr	r3, [sp, #4]
    3c2c:	681a      	ldr	r2, [r3, #0]
    3c2e:	4975      	ldr	r1, [pc, #468]	; (3e04 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3c30:	4613      	mov	r3, r2
    3c32:	00db      	lsls	r3, r3, #3
    3c34:	4413      	add	r3, r2
    3c36:	440b      	add	r3, r1
    3c38:	781b      	ldrb	r3, [r3, #0]
    3c3a:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3c3c:	2300      	movs	r3, #0
    3c3e:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3c42:	2300      	movs	r3, #0
    3c44:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3c48:	4b6f      	ldr	r3, [pc, #444]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c4e:	4a6e      	ldr	r2, [pc, #440]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3c54:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3c58:	4b6b      	ldr	r3, [pc, #428]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3c62:	2b00      	cmp	r3, #0
    3c64:	d07d      	beq.n	3d62 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3c66:	9b01      	ldr	r3, [sp, #4]
    3c68:	79db      	ldrb	r3, [r3, #7]
    3c6a:	461a      	mov	r2, r3
    3c6c:	4b66      	ldr	r3, [pc, #408]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c6e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3c72:	f003 0303 	and.w	r3, r3, #3
    3c76:	429a      	cmp	r2, r3
    3c78:	d10b      	bne.n	3c92 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3c7a:	9b01      	ldr	r3, [sp, #4]
    3c7c:	799b      	ldrb	r3, [r3, #6]
    3c7e:	461a      	mov	r2, r3
    3c80:	4b61      	ldr	r3, [pc, #388]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c86:	08db      	lsrs	r3, r3, #3
    3c88:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3c8c:	429a      	cmp	r2, r3
    3c8e:	f000 80b4 	beq.w	3dfa <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3c92:	4b5d      	ldr	r3, [pc, #372]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c98:	f003 0301 	and.w	r3, r3, #1
    3c9c:	2b00      	cmp	r3, #0
    3c9e:	d105      	bne.n	3cac <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3ca0:	2301      	movs	r3, #1
    3ca2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3ca6:	2000      	movs	r0, #0
    3ca8:	f7ff fd66 	bl	3778 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3cac:	2002      	movs	r0, #2
    3cae:	f7ff fdcf 	bl	3850 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3cb2:	4b55      	ldr	r3, [pc, #340]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cb4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3cb8:	4a53      	ldr	r2, [pc, #332]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cba:	f023 0301 	bic.w	r3, r3, #1
    3cbe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3cc2:	9b01      	ldr	r3, [sp, #4]
    3cc4:	889b      	ldrh	r3, [r3, #4]
    3cc6:	2b01      	cmp	r3, #1
    3cc8:	f040 8097 	bne.w	3dfa <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3ccc:	9b01      	ldr	r3, [sp, #4]
    3cce:	79db      	ldrb	r3, [r3, #7]
    3cd0:	4a4d      	ldr	r2, [pc, #308]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cd2:	f003 0303 	and.w	r3, r3, #3
    3cd6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3cda:	4b4b      	ldr	r3, [pc, #300]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cdc:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3ce0:	9b01      	ldr	r3, [sp, #4]
    3ce2:	799b      	ldrb	r3, [r3, #6]
    3ce4:	00db      	lsls	r3, r3, #3
    3ce6:	f003 0308 	and.w	r3, r3, #8
    3cea:	4313      	orrs	r3, r2
    3cec:	4a46      	ldr	r2, [pc, #280]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cee:	f043 0301 	orr.w	r3, r3, #1
    3cf2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3cf6:	aa03      	add	r2, sp, #12
    3cf8:	a904      	add	r1, sp, #16
    3cfa:	a805      	add	r0, sp, #20
    3cfc:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d00:	f7fe ff6e 	bl	2be0 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3d04:	4b40      	ldr	r3, [pc, #256]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d0a:	0e1b      	lsrs	r3, r3, #24
    3d0c:	f003 0301 	and.w	r3, r3, #1
    3d10:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d12:	9a03      	ldr	r2, [sp, #12]
    3d14:	a904      	add	r1, sp, #16
    3d16:	ab05      	add	r3, sp, #20
    3d18:	4618      	mov	r0, r3
    3d1a:	f7fe ff7b 	bl	2c14 <Clock_Ip_TimeoutExpired>
    3d1e:	4603      	mov	r3, r0
    3d20:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d24:	9b06      	ldr	r3, [sp, #24]
    3d26:	2b00      	cmp	r3, #0
    3d28:	d106      	bne.n	3d38 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3d2a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d2e:	f083 0301 	eor.w	r3, r3, #1
    3d32:	b2db      	uxtb	r3, r3
    3d34:	2b00      	cmp	r3, #0
    3d36:	d1e5      	bne.n	3d04 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3d38:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d3c:	2b00      	cmp	r3, #0
    3d3e:	d005      	beq.n	3d4c <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d40:	9b01      	ldr	r3, [sp, #4]
    3d42:	681b      	ldr	r3, [r3, #0]
    3d44:	4619      	mov	r1, r3
    3d46:	2001      	movs	r0, #1
    3d48:	f7fe ff3a 	bl	2bc0 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3d4c:	2003      	movs	r0, #3
    3d4e:	f7ff fd7f 	bl	3850 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3d52:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3d56:	2b00      	cmp	r3, #0
    3d58:	d04f      	beq.n	3dfa <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3d5a:	2002      	movs	r0, #2
    3d5c:	f7ff fd26 	bl	37ac <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3d60:	e04b      	b.n	3dfa <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3d62:	4b29      	ldr	r3, [pc, #164]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d64:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d68:	4a27      	ldr	r2, [pc, #156]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d6a:	f023 0301 	bic.w	r3, r3, #1
    3d6e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3d72:	9b01      	ldr	r3, [sp, #4]
    3d74:	889b      	ldrh	r3, [r3, #4]
    3d76:	2b01      	cmp	r3, #1
    3d78:	d13f      	bne.n	3dfa <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3d7a:	9b01      	ldr	r3, [sp, #4]
    3d7c:	79db      	ldrb	r3, [r3, #7]
    3d7e:	4a22      	ldr	r2, [pc, #136]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d80:	f003 0303 	and.w	r3, r3, #3
    3d84:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3d88:	4b1f      	ldr	r3, [pc, #124]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d8a:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3d8e:	9b01      	ldr	r3, [sp, #4]
    3d90:	799b      	ldrb	r3, [r3, #6]
    3d92:	00db      	lsls	r3, r3, #3
    3d94:	f003 0308 	and.w	r3, r3, #8
    3d98:	4313      	orrs	r3, r2
    3d9a:	4a1b      	ldr	r2, [pc, #108]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d9c:	f043 0301 	orr.w	r3, r3, #1
    3da0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3da4:	aa03      	add	r2, sp, #12
    3da6:	a904      	add	r1, sp, #16
    3da8:	a805      	add	r0, sp, #20
    3daa:	f24c 3350 	movw	r3, #50000	; 0xc350
    3dae:	f7fe ff17 	bl	2be0 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3db2:	4b15      	ldr	r3, [pc, #84]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3db4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3db8:	0e1b      	lsrs	r3, r3, #24
    3dba:	f003 0301 	and.w	r3, r3, #1
    3dbe:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3dc0:	9a03      	ldr	r2, [sp, #12]
    3dc2:	a904      	add	r1, sp, #16
    3dc4:	ab05      	add	r3, sp, #20
    3dc6:	4618      	mov	r0, r3
    3dc8:	f7fe ff24 	bl	2c14 <Clock_Ip_TimeoutExpired>
    3dcc:	4603      	mov	r3, r0
    3dce:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3dd2:	9b06      	ldr	r3, [sp, #24]
    3dd4:	2b00      	cmp	r3, #0
    3dd6:	d106      	bne.n	3de6 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3dd8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ddc:	f083 0301 	eor.w	r3, r3, #1
    3de0:	b2db      	uxtb	r3, r3
    3de2:	2b00      	cmp	r3, #0
    3de4:	d1e5      	bne.n	3db2 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3de6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dea:	2b00      	cmp	r3, #0
    3dec:	d005      	beq.n	3dfa <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3dee:	9b01      	ldr	r3, [sp, #4]
    3df0:	681b      	ldr	r3, [r3, #0]
    3df2:	4619      	mov	r1, r3
    3df4:	2001      	movs	r0, #1
    3df6:	f7fe fee3 	bl	2bc0 <Clock_Ip_ReportClockErrors>
}
    3dfa:	bf00      	nop
    3dfc:	b00b      	add	sp, #44	; 0x2c
    3dfe:	f85d fb04 	ldr.w	pc, [sp], #4
    3e02:	bf00      	nop
    3e04:	00010138 	.word	0x00010138
    3e08:	40064000 	.word	0x40064000

00003e0c <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e0c:	b500      	push	{lr}
    3e0e:	b089      	sub	sp, #36	; 0x24
    3e10:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3e12:	2300      	movs	r3, #0
    3e14:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3e18:	9b01      	ldr	r3, [sp, #4]
    3e1a:	889b      	ldrh	r3, [r3, #4]
    3e1c:	2b01      	cmp	r3, #1
    3e1e:	d132      	bne.n	3e86 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3e20:	4b1b      	ldr	r3, [pc, #108]	; (3e90 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e26:	4a1a      	ldr	r2, [pc, #104]	; (3e90 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e28:	f043 0301 	orr.w	r3, r3, #1
    3e2c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3e30:	aa03      	add	r2, sp, #12
    3e32:	a904      	add	r1, sp, #16
    3e34:	a805      	add	r0, sp, #20
    3e36:	f24c 3350 	movw	r3, #50000	; 0xc350
    3e3a:	f7fe fed1 	bl	2be0 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3e3e:	4b14      	ldr	r3, [pc, #80]	; (3e90 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e40:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e44:	0e1b      	lsrs	r3, r3, #24
    3e46:	f003 0301 	and.w	r3, r3, #1
    3e4a:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3e4c:	9a03      	ldr	r2, [sp, #12]
    3e4e:	a904      	add	r1, sp, #16
    3e50:	ab05      	add	r3, sp, #20
    3e52:	4618      	mov	r0, r3
    3e54:	f7fe fede 	bl	2c14 <Clock_Ip_TimeoutExpired>
    3e58:	4603      	mov	r3, r0
    3e5a:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3e5e:	9b06      	ldr	r3, [sp, #24]
    3e60:	2b00      	cmp	r3, #0
    3e62:	d106      	bne.n	3e72 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3e64:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e68:	f083 0301 	eor.w	r3, r3, #1
    3e6c:	b2db      	uxtb	r3, r3
    3e6e:	2b00      	cmp	r3, #0
    3e70:	d1e5      	bne.n	3e3e <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3e72:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e76:	2b00      	cmp	r3, #0
    3e78:	d005      	beq.n	3e86 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3e7a:	9b01      	ldr	r3, [sp, #4]
    3e7c:	681b      	ldr	r3, [r3, #0]
    3e7e:	4619      	mov	r1, r3
    3e80:	2001      	movs	r0, #1
    3e82:	f7fe fe9d 	bl	2bc0 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3e86:	bf00      	nop
    3e88:	b009      	add	sp, #36	; 0x24
    3e8a:	f85d fb04 	ldr.w	pc, [sp], #4
    3e8e:	bf00      	nop
    3e90:	40064000 	.word	0x40064000

00003e94 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3e94:	b082      	sub	sp, #8
    3e96:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3e98:	4b05      	ldr	r3, [pc, #20]	; (3eb0 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3e9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e9e:	4a04      	ldr	r2, [pc, #16]	; (3eb0 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3ea0:	f023 0301 	bic.w	r3, r3, #1
    3ea4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3ea8:	bf00      	nop
    3eaa:	b002      	add	sp, #8
    3eac:	4770      	bx	lr
    3eae:	bf00      	nop
    3eb0:	40064000 	.word	0x40064000

00003eb4 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3eb4:	b082      	sub	sp, #8
    3eb6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3eb8:	bf00      	nop
    3eba:	b002      	add	sp, #8
    3ebc:	4770      	bx	lr

00003ebe <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3ebe:	b082      	sub	sp, #8
    3ec0:	9001      	str	r0, [sp, #4]
    3ec2:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3ec4:	bf00      	nop
    3ec6:	b002      	add	sp, #8
    3ec8:	4770      	bx	lr

00003eca <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3eca:	b082      	sub	sp, #8
    3ecc:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3ece:	bf00      	nop
    3ed0:	b002      	add	sp, #8
    3ed2:	4770      	bx	lr

00003ed4 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3ed4:	b082      	sub	sp, #8
    3ed6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3ed8:	bf00      	nop
    3eda:	b002      	add	sp, #8
    3edc:	4770      	bx	lr

00003ede <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3ede:	b082      	sub	sp, #8
    3ee0:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3ee2:	2302      	movs	r3, #2
}
    3ee4:	4618      	mov	r0, r3
    3ee6:	b002      	add	sp, #8
    3ee8:	4770      	bx	lr

00003eea <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3eea:	b082      	sub	sp, #8
    3eec:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3eee:	bf00      	nop
    3ef0:	b002      	add	sp, #8
    3ef2:	4770      	bx	lr

00003ef4 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3ef4:	b500      	push	{lr}
    3ef6:	b083      	sub	sp, #12
    3ef8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3efa:	9b01      	ldr	r3, [sp, #4]
    3efc:	2b00      	cmp	r3, #0
    3efe:	d002      	beq.n	3f06 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3f00:	9801      	ldr	r0, [sp, #4]
    3f02:	f000 f870 	bl	3fe6 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f06:	bf00      	nop
    3f08:	b003      	add	sp, #12
    3f0a:	f85d fb04 	ldr.w	pc, [sp], #4

00003f0e <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3f0e:	b500      	push	{lr}
    3f10:	b083      	sub	sp, #12
    3f12:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f14:	9b01      	ldr	r3, [sp, #4]
    3f16:	2b00      	cmp	r3, #0
    3f18:	d002      	beq.n	3f20 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3f1a:	9801      	ldr	r0, [sp, #4]
    3f1c:	f000 f89a 	bl	4054 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f20:	bf00      	nop
    3f22:	b003      	add	sp, #12
    3f24:	f85d fb04 	ldr.w	pc, [sp], #4

00003f28 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3f28:	b500      	push	{lr}
    3f2a:	b089      	sub	sp, #36	; 0x24
    3f2c:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3f2e:	2301      	movs	r3, #1
    3f30:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3f32:	2300      	movs	r3, #0
    3f34:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3f38:	4b1e      	ldr	r3, [pc, #120]	; (3fb4 <Clock_Ip_CompleteSpll+0x8c>)
    3f3a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f3e:	f003 0301 	and.w	r3, r3, #1
    3f42:	2b00      	cmp	r3, #0
    3f44:	d02f      	beq.n	3fa6 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3f46:	aa02      	add	r2, sp, #8
    3f48:	a903      	add	r1, sp, #12
    3f4a:	a804      	add	r0, sp, #16
    3f4c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3f50:	f7fe fe46 	bl	2be0 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3f54:	4b17      	ldr	r3, [pc, #92]	; (3fb4 <Clock_Ip_CompleteSpll+0x8c>)
    3f56:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f5a:	0e1b      	lsrs	r3, r3, #24
    3f5c:	f003 0301 	and.w	r3, r3, #1
    3f60:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3f62:	9a02      	ldr	r2, [sp, #8]
    3f64:	a903      	add	r1, sp, #12
    3f66:	ab04      	add	r3, sp, #16
    3f68:	4618      	mov	r0, r3
    3f6a:	f7fe fe53 	bl	2c14 <Clock_Ip_TimeoutExpired>
    3f6e:	4603      	mov	r3, r0
    3f70:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3f74:	9b05      	ldr	r3, [sp, #20]
    3f76:	2b00      	cmp	r3, #0
    3f78:	d106      	bne.n	3f88 <Clock_Ip_CompleteSpll+0x60>
    3f7a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3f7e:	f083 0301 	eor.w	r3, r3, #1
    3f82:	b2db      	uxtb	r3, r3
    3f84:	2b00      	cmp	r3, #0
    3f86:	d1e5      	bne.n	3f54 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3f88:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3f8c:	f083 0301 	eor.w	r3, r3, #1
    3f90:	b2db      	uxtb	r3, r3
    3f92:	2b00      	cmp	r3, #0
    3f94:	d002      	beq.n	3f9c <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3f96:	2302      	movs	r3, #2
    3f98:	9307      	str	r3, [sp, #28]
    3f9a:	e006      	b.n	3faa <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3f9c:	9901      	ldr	r1, [sp, #4]
    3f9e:	2001      	movs	r0, #1
    3fa0:	f7fe fe0e 	bl	2bc0 <Clock_Ip_ReportClockErrors>
    3fa4:	e001      	b.n	3faa <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3fa6:	2300      	movs	r3, #0
    3fa8:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3faa:	9b07      	ldr	r3, [sp, #28]
}
    3fac:	4618      	mov	r0, r3
    3fae:	b009      	add	sp, #36	; 0x24
    3fb0:	f85d fb04 	ldr.w	pc, [sp], #4
    3fb4:	40064000 	.word	0x40064000

00003fb8 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3fb8:	b500      	push	{lr}
    3fba:	b083      	sub	sp, #12
    3fbc:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3fbe:	9801      	ldr	r0, [sp, #4]
    3fc0:	f000 f886 	bl	40d0 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3fc4:	bf00      	nop
    3fc6:	b003      	add	sp, #12
    3fc8:	f85d fb04 	ldr.w	pc, [sp], #4

00003fcc <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3fcc:	b500      	push	{lr}
    3fce:	b083      	sub	sp, #12
    3fd0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3fd2:	9b01      	ldr	r3, [sp, #4]
    3fd4:	2b00      	cmp	r3, #0
    3fd6:	d002      	beq.n	3fde <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3fd8:	9801      	ldr	r0, [sp, #4]
    3fda:	f000 f891 	bl	4100 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3fde:	bf00      	nop
    3fe0:	b003      	add	sp, #12
    3fe2:	f85d fb04 	ldr.w	pc, [sp], #4

00003fe6 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3fe6:	b082      	sub	sp, #8
    3fe8:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3fea:	4b19      	ldr	r3, [pc, #100]	; (4050 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fec:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ff0:	4a17      	ldr	r2, [pc, #92]	; (4050 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ff2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3ff6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3ffa:	4b15      	ldr	r3, [pc, #84]	; (4050 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ffc:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4000:	4a13      	ldr	r2, [pc, #76]	; (4050 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4006:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    400a:	4b11      	ldr	r3, [pc, #68]	; (4050 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    400c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4010:	4a0f      	ldr	r2, [pc, #60]	; (4050 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4012:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4016:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    401a:	4b0d      	ldr	r3, [pc, #52]	; (4050 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    401c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4020:	4a0b      	ldr	r2, [pc, #44]	; (4050 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4022:	f023 0301 	bic.w	r3, r3, #1
    4026:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    402a:	4b09      	ldr	r3, [pc, #36]	; (4050 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    402c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4030:	4a07      	ldr	r2, [pc, #28]	; (4050 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4032:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    4036:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    403a:	4b05      	ldr	r3, [pc, #20]	; (4050 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    403c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4040:	4a03      	ldr	r2, [pc, #12]	; (4050 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4042:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    4046:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    404a:	bf00      	nop
    404c:	b002      	add	sp, #8
    404e:	4770      	bx	lr
    4050:	40064000 	.word	0x40064000

00004054 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4054:	b082      	sub	sp, #8
    4056:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4058:	9b01      	ldr	r3, [sp, #4]
    405a:	889b      	ldrh	r3, [r3, #4]
    405c:	2b01      	cmp	r3, #1
    405e:	d12f      	bne.n	40c0 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4060:	4b1a      	ldr	r3, [pc, #104]	; (40cc <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4062:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    4066:	9b01      	ldr	r3, [sp, #4]
    4068:	7b5b      	ldrb	r3, [r3, #13]
    406a:	3b01      	subs	r3, #1
    406c:	021b      	lsls	r3, r3, #8
    406e:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    4072:	9b01      	ldr	r3, [sp, #4]
    4074:	7d1b      	ldrb	r3, [r3, #20]
    4076:	3b10      	subs	r3, #16
    4078:	041b      	lsls	r3, r3, #16
    407a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    407e:	430b      	orrs	r3, r1
    4080:	4912      	ldr	r1, [pc, #72]	; (40cc <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4082:	4313      	orrs	r3, r2
    4084:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4088:	9b01      	ldr	r3, [sp, #4]
    408a:	7fdb      	ldrb	r3, [r3, #31]
    408c:	2b02      	cmp	r3, #2
    408e:	d011      	beq.n	40b4 <Clock_Ip_SetSpll_TrustedCall+0x60>
    4090:	2b02      	cmp	r3, #2
    4092:	dc17      	bgt.n	40c4 <Clock_Ip_SetSpll_TrustedCall+0x70>
    4094:	2b00      	cmp	r3, #0
    4096:	d002      	beq.n	409e <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4098:	2b01      	cmp	r3, #1
    409a:	d005      	beq.n	40a8 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    409c:	e012      	b.n	40c4 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    409e:	4b0b      	ldr	r3, [pc, #44]	; (40cc <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40a0:	2200      	movs	r2, #0
    40a2:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    40a6:	e00e      	b.n	40c6 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    40a8:	4b08      	ldr	r3, [pc, #32]	; (40cc <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    40ae:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    40b2:	e008      	b.n	40c6 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    40b4:	4b05      	ldr	r3, [pc, #20]	; (40cc <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40b6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    40ba:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    40be:	e002      	b.n	40c6 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    40c0:	bf00      	nop
    40c2:	e000      	b.n	40c6 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    40c4:	bf00      	nop
}
    40c6:	bf00      	nop
    40c8:	b002      	add	sp, #8
    40ca:	4770      	bx	lr
    40cc:	40064000 	.word	0x40064000

000040d0 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    40d0:	b082      	sub	sp, #8
    40d2:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    40d4:	4b09      	ldr	r3, [pc, #36]	; (40fc <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40d6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    40da:	4a08      	ldr	r2, [pc, #32]	; (40fc <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    40e0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    40e4:	4b05      	ldr	r3, [pc, #20]	; (40fc <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40e6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    40ea:	4a04      	ldr	r2, [pc, #16]	; (40fc <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40ec:	f023 0301 	bic.w	r3, r3, #1
    40f0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    40f4:	bf00      	nop
    40f6:	b002      	add	sp, #8
    40f8:	4770      	bx	lr
    40fa:	bf00      	nop
    40fc:	40064000 	.word	0x40064000

00004100 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4100:	b082      	sub	sp, #8
    4102:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4104:	9b01      	ldr	r3, [sp, #4]
    4106:	889b      	ldrh	r3, [r3, #4]
    4108:	2b01      	cmp	r3, #1
    410a:	d107      	bne.n	411c <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    410c:	4b05      	ldr	r3, [pc, #20]	; (4124 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    410e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4112:	4a04      	ldr	r2, [pc, #16]	; (4124 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4114:	f043 0301 	orr.w	r3, r3, #1
    4118:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    411c:	bf00      	nop
    411e:	b002      	add	sp, #8
    4120:	4770      	bx	lr
    4122:	bf00      	nop
    4124:	40064000 	.word	0x40064000

00004128 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4128:	b082      	sub	sp, #8
    412a:	9001      	str	r0, [sp, #4]
    412c:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    412e:	bf00      	nop
    4130:	b002      	add	sp, #8
    4132:	4770      	bx	lr

00004134 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4134:	b082      	sub	sp, #8
    4136:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4138:	bf00      	nop
    413a:	b002      	add	sp, #8
    413c:	4770      	bx	lr

0000413e <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    413e:	b500      	push	{lr}
    4140:	b083      	sub	sp, #12
    4142:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4144:	9b01      	ldr	r3, [sp, #4]
    4146:	2b00      	cmp	r3, #0
    4148:	d002      	beq.n	4150 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    414a:	9801      	ldr	r0, [sp, #4]
    414c:	f000 f8ee 	bl	432c <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4150:	bf00      	nop
    4152:	b003      	add	sp, #12
    4154:	f85d fb04 	ldr.w	pc, [sp], #4

00004158 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4158:	b500      	push	{lr}
    415a:	b083      	sub	sp, #12
    415c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    415e:	9b01      	ldr	r3, [sp, #4]
    4160:	2b00      	cmp	r3, #0
    4162:	d002      	beq.n	416a <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    4164:	9801      	ldr	r0, [sp, #4]
    4166:	f000 f8ff 	bl	4368 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    416a:	bf00      	nop
    416c:	b003      	add	sp, #12
    416e:	f85d fb04 	ldr.w	pc, [sp], #4

00004172 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    4172:	b500      	push	{lr}
    4174:	b083      	sub	sp, #12
    4176:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4178:	9b01      	ldr	r3, [sp, #4]
    417a:	2b00      	cmp	r3, #0
    417c:	d002      	beq.n	4184 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    417e:	9801      	ldr	r0, [sp, #4]
    4180:	f000 f912 	bl	43a8 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4184:	bf00      	nop
    4186:	b003      	add	sp, #12
    4188:	f85d fb04 	ldr.w	pc, [sp], #4

0000418c <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    418c:	b500      	push	{lr}
    418e:	b083      	sub	sp, #12
    4190:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4192:	9b01      	ldr	r3, [sp, #4]
    4194:	2b00      	cmp	r3, #0
    4196:	d002      	beq.n	419e <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4198:	9801      	ldr	r0, [sp, #4]
    419a:	f000 f925 	bl	43e8 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    419e:	bf00      	nop
    41a0:	b003      	add	sp, #12
    41a2:	f85d fb04 	ldr.w	pc, [sp], #4

000041a6 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    41a6:	b500      	push	{lr}
    41a8:	b083      	sub	sp, #12
    41aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41ac:	9b01      	ldr	r3, [sp, #4]
    41ae:	2b00      	cmp	r3, #0
    41b0:	d002      	beq.n	41b8 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    41b2:	9801      	ldr	r0, [sp, #4]
    41b4:	f000 f936 	bl	4424 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41b8:	bf00      	nop
    41ba:	b003      	add	sp, #12
    41bc:	f85d fb04 	ldr.w	pc, [sp], #4

000041c0 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    41c0:	b500      	push	{lr}
    41c2:	b083      	sub	sp, #12
    41c4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41c6:	9b01      	ldr	r3, [sp, #4]
    41c8:	2b00      	cmp	r3, #0
    41ca:	d002      	beq.n	41d2 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    41cc:	9801      	ldr	r0, [sp, #4]
    41ce:	f000 f949 	bl	4464 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41d2:	bf00      	nop
    41d4:	b003      	add	sp, #12
    41d6:	f85d fb04 	ldr.w	pc, [sp], #4

000041da <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    41da:	b500      	push	{lr}
    41dc:	b083      	sub	sp, #12
    41de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41e0:	9b01      	ldr	r3, [sp, #4]
    41e2:	2b00      	cmp	r3, #0
    41e4:	d002      	beq.n	41ec <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    41e6:	9801      	ldr	r0, [sp, #4]
    41e8:	f000 f958 	bl	449c <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41ec:	bf00      	nop
    41ee:	b003      	add	sp, #12
    41f0:	f85d fb04 	ldr.w	pc, [sp], #4

000041f4 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    41f4:	b500      	push	{lr}
    41f6:	b083      	sub	sp, #12
    41f8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41fa:	9b01      	ldr	r3, [sp, #4]
    41fc:	2b00      	cmp	r3, #0
    41fe:	d002      	beq.n	4206 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4200:	9801      	ldr	r0, [sp, #4]
    4202:	f000 f969 	bl	44d8 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4206:	bf00      	nop
    4208:	b003      	add	sp, #12
    420a:	f85d fb04 	ldr.w	pc, [sp], #4

0000420e <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    420e:	b500      	push	{lr}
    4210:	b083      	sub	sp, #12
    4212:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4214:	9b01      	ldr	r3, [sp, #4]
    4216:	2b00      	cmp	r3, #0
    4218:	d002      	beq.n	4220 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    421a:	9801      	ldr	r0, [sp, #4]
    421c:	f000 f978 	bl	4510 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4220:	bf00      	nop
    4222:	b003      	add	sp, #12
    4224:	f85d fb04 	ldr.w	pc, [sp], #4

00004228 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4228:	b500      	push	{lr}
    422a:	b083      	sub	sp, #12
    422c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    422e:	9b01      	ldr	r3, [sp, #4]
    4230:	2b00      	cmp	r3, #0
    4232:	d002      	beq.n	423a <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4234:	9801      	ldr	r0, [sp, #4]
    4236:	f000 f989 	bl	454c <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    423a:	bf00      	nop
    423c:	b003      	add	sp, #12
    423e:	f85d fb04 	ldr.w	pc, [sp], #4

00004242 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4242:	b500      	push	{lr}
    4244:	b083      	sub	sp, #12
    4246:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4248:	9b01      	ldr	r3, [sp, #4]
    424a:	2b00      	cmp	r3, #0
    424c:	d002      	beq.n	4254 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    424e:	9801      	ldr	r0, [sp, #4]
    4250:	f000 f998 	bl	4584 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4254:	bf00      	nop
    4256:	b003      	add	sp, #12
    4258:	f85d fb04 	ldr.w	pc, [sp], #4

0000425c <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    425c:	b500      	push	{lr}
    425e:	b083      	sub	sp, #12
    4260:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4262:	9b01      	ldr	r3, [sp, #4]
    4264:	2b00      	cmp	r3, #0
    4266:	d002      	beq.n	426e <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4268:	9801      	ldr	r0, [sp, #4]
    426a:	f000 f9a9 	bl	45c0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    426e:	bf00      	nop
    4270:	b003      	add	sp, #12
    4272:	f85d fb04 	ldr.w	pc, [sp], #4

00004276 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4276:	b500      	push	{lr}
    4278:	b083      	sub	sp, #12
    427a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    427c:	9b01      	ldr	r3, [sp, #4]
    427e:	2b00      	cmp	r3, #0
    4280:	d002      	beq.n	4288 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    4282:	9801      	ldr	r0, [sp, #4]
    4284:	f000 f9e6 	bl	4654 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4288:	bf00      	nop
    428a:	b003      	add	sp, #12
    428c:	f85d fb04 	ldr.w	pc, [sp], #4

00004290 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4290:	b500      	push	{lr}
    4292:	b083      	sub	sp, #12
    4294:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4296:	9b01      	ldr	r3, [sp, #4]
    4298:	2b00      	cmp	r3, #0
    429a:	d002      	beq.n	42a2 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    429c:	9801      	ldr	r0, [sp, #4]
    429e:	f000 fa25 	bl	46ec <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42a2:	bf00      	nop
    42a4:	b003      	add	sp, #12
    42a6:	f85d fb04 	ldr.w	pc, [sp], #4

000042aa <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    42aa:	b500      	push	{lr}
    42ac:	b083      	sub	sp, #12
    42ae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42b0:	9b01      	ldr	r3, [sp, #4]
    42b2:	2b00      	cmp	r3, #0
    42b4:	d002      	beq.n	42bc <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    42b6:	9801      	ldr	r0, [sp, #4]
    42b8:	f000 fa2a 	bl	4710 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42bc:	bf00      	nop
    42be:	b003      	add	sp, #12
    42c0:	f85d fb04 	ldr.w	pc, [sp], #4

000042c4 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    42c4:	b500      	push	{lr}
    42c6:	b083      	sub	sp, #12
    42c8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42ca:	9b01      	ldr	r3, [sp, #4]
    42cc:	2b00      	cmp	r3, #0
    42ce:	d002      	beq.n	42d6 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    42d0:	9801      	ldr	r0, [sp, #4]
    42d2:	f000 fa3b 	bl	474c <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42d6:	bf00      	nop
    42d8:	b003      	add	sp, #12
    42da:	f85d fb04 	ldr.w	pc, [sp], #4

000042de <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    42de:	b500      	push	{lr}
    42e0:	b083      	sub	sp, #12
    42e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42e4:	9b01      	ldr	r3, [sp, #4]
    42e6:	2b00      	cmp	r3, #0
    42e8:	d002      	beq.n	42f0 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    42ea:	9801      	ldr	r0, [sp, #4]
    42ec:	f000 fa56 	bl	479c <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42f0:	bf00      	nop
    42f2:	b003      	add	sp, #12
    42f4:	f85d fb04 	ldr.w	pc, [sp], #4

000042f8 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    42f8:	b500      	push	{lr}
    42fa:	b083      	sub	sp, #12
    42fc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42fe:	9b01      	ldr	r3, [sp, #4]
    4300:	2b00      	cmp	r3, #0
    4302:	d002      	beq.n	430a <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4304:	9801      	ldr	r0, [sp, #4]
    4306:	f000 fa79 	bl	47fc <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    430a:	bf00      	nop
    430c:	b003      	add	sp, #12
    430e:	f85d fb04 	ldr.w	pc, [sp], #4

00004312 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4312:	b500      	push	{lr}
    4314:	b083      	sub	sp, #12
    4316:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4318:	9b01      	ldr	r3, [sp, #4]
    431a:	2b00      	cmp	r3, #0
    431c:	d002      	beq.n	4324 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    431e:	9801      	ldr	r0, [sp, #4]
    4320:	f000 fa8a 	bl	4838 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4324:	bf00      	nop
    4326:	b003      	add	sp, #12
    4328:	f85d fb04 	ldr.w	pc, [sp], #4

0000432c <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    432c:	b084      	sub	sp, #16
    432e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4330:	4b0b      	ldr	r3, [pc, #44]	; (4360 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    4332:	795b      	ldrb	r3, [r3, #5]
    4334:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    4336:	4b0b      	ldr	r3, [pc, #44]	; (4364 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4338:	695b      	ldr	r3, [r3, #20]
    433a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    433c:	9b02      	ldr	r3, [sp, #8]
    433e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4342:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4344:	9b03      	ldr	r3, [sp, #12]
    4346:	061b      	lsls	r3, r3, #24
    4348:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    434c:	9a02      	ldr	r2, [sp, #8]
    434e:	4313      	orrs	r3, r2
    4350:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4352:	4a04      	ldr	r2, [pc, #16]	; (4364 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4354:	9b02      	ldr	r3, [sp, #8]
    4356:	6153      	str	r3, [r2, #20]
}
    4358:	bf00      	nop
    435a:	b004      	add	sp, #16
    435c:	4770      	bx	lr
    435e:	bf00      	nop
    4360:	000104a0 	.word	0x000104a0
    4364:	40064000 	.word	0x40064000

00004368 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4368:	b084      	sub	sp, #16
    436a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    436c:	9b01      	ldr	r3, [sp, #4]
    436e:	685b      	ldr	r3, [r3, #4]
    4370:	4a0b      	ldr	r2, [pc, #44]	; (43a0 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    4372:	5cd3      	ldrb	r3, [r2, r3]
    4374:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    4376:	4b0b      	ldr	r3, [pc, #44]	; (43a4 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4378:	695b      	ldr	r3, [r3, #20]
    437a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    437c:	9b02      	ldr	r3, [sp, #8]
    437e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4382:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4384:	9b03      	ldr	r3, [sp, #12]
    4386:	061b      	lsls	r3, r3, #24
    4388:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    438c:	9a02      	ldr	r2, [sp, #8]
    438e:	4313      	orrs	r3, r2
    4390:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4392:	4a04      	ldr	r2, [pc, #16]	; (43a4 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4394:	9b02      	ldr	r3, [sp, #8]
    4396:	6153      	str	r3, [r2, #20]
}
    4398:	bf00      	nop
    439a:	b004      	add	sp, #16
    439c:	4770      	bx	lr
    439e:	bf00      	nop
    43a0:	000104a0 	.word	0x000104a0
    43a4:	40064000 	.word	0x40064000

000043a8 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43a8:	b084      	sub	sp, #16
    43aa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43ac:	9b01      	ldr	r3, [sp, #4]
    43ae:	685b      	ldr	r3, [r3, #4]
    43b0:	4a0b      	ldr	r2, [pc, #44]	; (43e0 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    43b2:	5cd3      	ldrb	r3, [r2, r3]
    43b4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    43b6:	4b0b      	ldr	r3, [pc, #44]	; (43e4 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    43b8:	699b      	ldr	r3, [r3, #24]
    43ba:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    43bc:	9b02      	ldr	r3, [sp, #8]
    43be:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    43c2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    43c4:	9b03      	ldr	r3, [sp, #12]
    43c6:	061b      	lsls	r3, r3, #24
    43c8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    43cc:	9a02      	ldr	r2, [sp, #8]
    43ce:	4313      	orrs	r3, r2
    43d0:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    43d2:	4a04      	ldr	r2, [pc, #16]	; (43e4 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    43d4:	9b02      	ldr	r3, [sp, #8]
    43d6:	6193      	str	r3, [r2, #24]
}
    43d8:	bf00      	nop
    43da:	b004      	add	sp, #16
    43dc:	4770      	bx	lr
    43de:	bf00      	nop
    43e0:	000104a0 	.word	0x000104a0
    43e4:	40064000 	.word	0x40064000

000043e8 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43e8:	b084      	sub	sp, #16
    43ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43ec:	4b0b      	ldr	r3, [pc, #44]	; (441c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    43ee:	795b      	ldrb	r3, [r3, #5]
    43f0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    43f2:	4b0b      	ldr	r3, [pc, #44]	; (4420 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    43f4:	69db      	ldr	r3, [r3, #28]
    43f6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    43f8:	9b02      	ldr	r3, [sp, #8]
    43fa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    43fe:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4400:	9b03      	ldr	r3, [sp, #12]
    4402:	061b      	lsls	r3, r3, #24
    4404:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4408:	9a02      	ldr	r2, [sp, #8]
    440a:	4313      	orrs	r3, r2
    440c:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    440e:	4a04      	ldr	r2, [pc, #16]	; (4420 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4410:	9b02      	ldr	r3, [sp, #8]
    4412:	61d3      	str	r3, [r2, #28]
}
    4414:	bf00      	nop
    4416:	b004      	add	sp, #16
    4418:	4770      	bx	lr
    441a:	bf00      	nop
    441c:	000104a0 	.word	0x000104a0
    4420:	40064000 	.word	0x40064000

00004424 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4424:	b084      	sub	sp, #16
    4426:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4428:	9b01      	ldr	r3, [sp, #4]
    442a:	685b      	ldr	r3, [r3, #4]
    442c:	4a0b      	ldr	r2, [pc, #44]	; (445c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    442e:	5cd3      	ldrb	r3, [r2, r3]
    4430:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    4432:	4b0b      	ldr	r3, [pc, #44]	; (4460 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4434:	69db      	ldr	r3, [r3, #28]
    4436:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4438:	9b02      	ldr	r3, [sp, #8]
    443a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    443e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4440:	9b03      	ldr	r3, [sp, #12]
    4442:	061b      	lsls	r3, r3, #24
    4444:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4448:	9a02      	ldr	r2, [sp, #8]
    444a:	4313      	orrs	r3, r2
    444c:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    444e:	4a04      	ldr	r2, [pc, #16]	; (4460 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4450:	9b02      	ldr	r3, [sp, #8]
    4452:	61d3      	str	r3, [r2, #28]
}
    4454:	bf00      	nop
    4456:	b004      	add	sp, #16
    4458:	4770      	bx	lr
    445a:	bf00      	nop
    445c:	000104a0 	.word	0x000104a0
    4460:	40064000 	.word	0x40064000

00004464 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4464:	b084      	sub	sp, #16
    4466:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4468:	4b0a      	ldr	r3, [pc, #40]	; (4494 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    446a:	7b9b      	ldrb	r3, [r3, #14]
    446c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    446e:	4b0a      	ldr	r3, [pc, #40]	; (4498 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4470:	691b      	ldr	r3, [r3, #16]
    4472:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4474:	9b02      	ldr	r3, [sp, #8]
    4476:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    447a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    447c:	9b03      	ldr	r3, [sp, #12]
    447e:	011b      	lsls	r3, r3, #4
    4480:	9a02      	ldr	r2, [sp, #8]
    4482:	4313      	orrs	r3, r2
    4484:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4486:	4a04      	ldr	r2, [pc, #16]	; (4498 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4488:	9b02      	ldr	r3, [sp, #8]
    448a:	6113      	str	r3, [r2, #16]
}
    448c:	bf00      	nop
    448e:	b004      	add	sp, #16
    4490:	4770      	bx	lr
    4492:	bf00      	nop
    4494:	00010448 	.word	0x00010448
    4498:	40048000 	.word	0x40048000

0000449c <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    449c:	b084      	sub	sp, #16
    449e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44a0:	9b01      	ldr	r3, [sp, #4]
    44a2:	685b      	ldr	r3, [r3, #4]
    44a4:	4a0a      	ldr	r2, [pc, #40]	; (44d0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    44a6:	5cd3      	ldrb	r3, [r2, r3]
    44a8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    44aa:	4b0a      	ldr	r3, [pc, #40]	; (44d4 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    44ac:	691b      	ldr	r3, [r3, #16]
    44ae:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    44b0:	9b02      	ldr	r3, [sp, #8]
    44b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    44b6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    44b8:	9b03      	ldr	r3, [sp, #12]
    44ba:	011b      	lsls	r3, r3, #4
    44bc:	9a02      	ldr	r2, [sp, #8]
    44be:	4313      	orrs	r3, r2
    44c0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    44c2:	4a04      	ldr	r2, [pc, #16]	; (44d4 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    44c4:	9b02      	ldr	r3, [sp, #8]
    44c6:	6113      	str	r3, [r2, #16]
}
    44c8:	bf00      	nop
    44ca:	b004      	add	sp, #16
    44cc:	4770      	bx	lr
    44ce:	bf00      	nop
    44d0:	00010448 	.word	0x00010448
    44d4:	40048000 	.word	0x40048000

000044d8 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44d8:	b084      	sub	sp, #16
    44da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44dc:	4b0a      	ldr	r3, [pc, #40]	; (4508 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    44de:	785b      	ldrb	r3, [r3, #1]
    44e0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    44e2:	4b0a      	ldr	r3, [pc, #40]	; (450c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    44e4:	691b      	ldr	r3, [r3, #16]
    44e6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    44e8:	9b02      	ldr	r3, [sp, #8]
    44ea:	f023 030c 	bic.w	r3, r3, #12
    44ee:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    44f0:	9b03      	ldr	r3, [sp, #12]
    44f2:	009b      	lsls	r3, r3, #2
    44f4:	9a02      	ldr	r2, [sp, #8]
    44f6:	4313      	orrs	r3, r2
    44f8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    44fa:	4a04      	ldr	r2, [pc, #16]	; (450c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    44fc:	9b02      	ldr	r3, [sp, #8]
    44fe:	6113      	str	r3, [r2, #16]
}
    4500:	bf00      	nop
    4502:	b004      	add	sp, #16
    4504:	4770      	bx	lr
    4506:	bf00      	nop
    4508:	00010500 	.word	0x00010500
    450c:	40048000 	.word	0x40048000

00004510 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4510:	b084      	sub	sp, #16
    4512:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4514:	9b01      	ldr	r3, [sp, #4]
    4516:	685b      	ldr	r3, [r3, #4]
    4518:	4a0a      	ldr	r2, [pc, #40]	; (4544 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    451a:	5cd3      	ldrb	r3, [r2, r3]
    451c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    451e:	4b0a      	ldr	r3, [pc, #40]	; (4548 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4520:	691b      	ldr	r3, [r3, #16]
    4522:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4524:	9b02      	ldr	r3, [sp, #8]
    4526:	f023 030c 	bic.w	r3, r3, #12
    452a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    452c:	9b03      	ldr	r3, [sp, #12]
    452e:	009b      	lsls	r3, r3, #2
    4530:	9a02      	ldr	r2, [sp, #8]
    4532:	4313      	orrs	r3, r2
    4534:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4536:	4a04      	ldr	r2, [pc, #16]	; (4548 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4538:	9b02      	ldr	r3, [sp, #8]
    453a:	6113      	str	r3, [r2, #16]
}
    453c:	bf00      	nop
    453e:	b004      	add	sp, #16
    4540:	4770      	bx	lr
    4542:	bf00      	nop
    4544:	00010500 	.word	0x00010500
    4548:	40048000 	.word	0x40048000

0000454c <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    454c:	b084      	sub	sp, #16
    454e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4550:	4b0a      	ldr	r3, [pc, #40]	; (457c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    4552:	795b      	ldrb	r3, [r3, #5]
    4554:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    4556:	4b0a      	ldr	r3, [pc, #40]	; (4580 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4558:	6a1b      	ldr	r3, [r3, #32]
    455a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    455c:	9b02      	ldr	r3, [sp, #8]
    455e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4562:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4564:	9b03      	ldr	r3, [sp, #12]
    4566:	061b      	lsls	r3, r3, #24
    4568:	9a02      	ldr	r2, [sp, #8]
    456a:	4313      	orrs	r3, r2
    456c:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    456e:	4a04      	ldr	r2, [pc, #16]	; (4580 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4570:	9b02      	ldr	r3, [sp, #8]
    4572:	6213      	str	r3, [r2, #32]
}
    4574:	bf00      	nop
    4576:	b004      	add	sp, #16
    4578:	4770      	bx	lr
    457a:	bf00      	nop
    457c:	000104a0 	.word	0x000104a0
    4580:	40064000 	.word	0x40064000

00004584 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4584:	b084      	sub	sp, #16
    4586:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4588:	9b01      	ldr	r3, [sp, #4]
    458a:	685b      	ldr	r3, [r3, #4]
    458c:	4a0a      	ldr	r2, [pc, #40]	; (45b8 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    458e:	5cd3      	ldrb	r3, [r2, r3]
    4590:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    4592:	4b0a      	ldr	r3, [pc, #40]	; (45bc <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4594:	6a1b      	ldr	r3, [r3, #32]
    4596:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4598:	9b02      	ldr	r3, [sp, #8]
    459a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    459e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    45a0:	9b03      	ldr	r3, [sp, #12]
    45a2:	061b      	lsls	r3, r3, #24
    45a4:	9a02      	ldr	r2, [sp, #8]
    45a6:	4313      	orrs	r3, r2
    45a8:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    45aa:	4a04      	ldr	r2, [pc, #16]	; (45bc <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    45ac:	9b02      	ldr	r3, [sp, #8]
    45ae:	6213      	str	r3, [r2, #32]
}
    45b0:	bf00      	nop
    45b2:	b004      	add	sp, #16
    45b4:	4770      	bx	lr
    45b6:	bf00      	nop
    45b8:	000104a0 	.word	0x000104a0
    45bc:	40064000 	.word	0x40064000

000045c0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45c0:	b086      	sub	sp, #24
    45c2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45c4:	4b20      	ldr	r3, [pc, #128]	; (4648 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    45c6:	795b      	ldrb	r3, [r3, #5]
    45c8:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    45ca:	9b01      	ldr	r3, [sp, #4]
    45cc:	681a      	ldr	r2, [r3, #0]
    45ce:	491f      	ldr	r1, [pc, #124]	; (464c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    45d0:	4613      	mov	r3, r2
    45d2:	00db      	lsls	r3, r3, #3
    45d4:	4413      	add	r3, r2
    45d6:	440b      	add	r3, r1
    45d8:	781b      	ldrb	r3, [r3, #0]
    45da:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    45dc:	4b1c      	ldr	r3, [pc, #112]	; (4650 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    45de:	68db      	ldr	r3, [r3, #12]
    45e0:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    45e2:	9b03      	ldr	r3, [sp, #12]
    45e4:	2b03      	cmp	r3, #3
    45e6:	d813      	bhi.n	4610 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    45e8:	9b03      	ldr	r3, [sp, #12]
    45ea:	005b      	lsls	r3, r3, #1
    45ec:	3318      	adds	r3, #24
    45ee:	2203      	movs	r2, #3
    45f0:	fa02 f303 	lsl.w	r3, r2, r3
    45f4:	43db      	mvns	r3, r3
    45f6:	9a05      	ldr	r2, [sp, #20]
    45f8:	4013      	ands	r3, r2
    45fa:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    45fc:	9b03      	ldr	r3, [sp, #12]
    45fe:	005b      	lsls	r3, r3, #1
    4600:	3318      	adds	r3, #24
    4602:	9a04      	ldr	r2, [sp, #16]
    4604:	fa02 f303 	lsl.w	r3, r2, r3
    4608:	9a05      	ldr	r2, [sp, #20]
    460a:	4313      	orrs	r3, r2
    460c:	9305      	str	r3, [sp, #20]
    460e:	e014      	b.n	463a <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4610:	9b03      	ldr	r3, [sp, #12]
    4612:	3b04      	subs	r3, #4
    4614:	005b      	lsls	r3, r3, #1
    4616:	3310      	adds	r3, #16
    4618:	2203      	movs	r2, #3
    461a:	fa02 f303 	lsl.w	r3, r2, r3
    461e:	43db      	mvns	r3, r3
    4620:	9a05      	ldr	r2, [sp, #20]
    4622:	4013      	ands	r3, r2
    4624:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4626:	9b03      	ldr	r3, [sp, #12]
    4628:	3b04      	subs	r3, #4
    462a:	005b      	lsls	r3, r3, #1
    462c:	3310      	adds	r3, #16
    462e:	9a04      	ldr	r2, [sp, #16]
    4630:	fa02 f303 	lsl.w	r3, r2, r3
    4634:	9a05      	ldr	r2, [sp, #20]
    4636:	4313      	orrs	r3, r2
    4638:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    463a:	4a05      	ldr	r2, [pc, #20]	; (4650 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    463c:	9b05      	ldr	r3, [sp, #20]
    463e:	60d3      	str	r3, [r2, #12]
}
    4640:	bf00      	nop
    4642:	b006      	add	sp, #24
    4644:	4770      	bx	lr
    4646:	bf00      	nop
    4648:	00010448 	.word	0x00010448
    464c:	00010138 	.word	0x00010138
    4650:	40048000 	.word	0x40048000

00004654 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4654:	b086      	sub	sp, #24
    4656:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4658:	9b01      	ldr	r3, [sp, #4]
    465a:	685b      	ldr	r3, [r3, #4]
    465c:	4a20      	ldr	r2, [pc, #128]	; (46e0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    465e:	5cd3      	ldrb	r3, [r2, r3]
    4660:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4662:	9b01      	ldr	r3, [sp, #4]
    4664:	681a      	ldr	r2, [r3, #0]
    4666:	491f      	ldr	r1, [pc, #124]	; (46e4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    4668:	4613      	mov	r3, r2
    466a:	00db      	lsls	r3, r3, #3
    466c:	4413      	add	r3, r2
    466e:	440b      	add	r3, r1
    4670:	781b      	ldrb	r3, [r3, #0]
    4672:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4674:	4b1c      	ldr	r3, [pc, #112]	; (46e8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4676:	68db      	ldr	r3, [r3, #12]
    4678:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    467a:	9b03      	ldr	r3, [sp, #12]
    467c:	2b03      	cmp	r3, #3
    467e:	d813      	bhi.n	46a8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4680:	9b03      	ldr	r3, [sp, #12]
    4682:	005b      	lsls	r3, r3, #1
    4684:	3318      	adds	r3, #24
    4686:	2203      	movs	r2, #3
    4688:	fa02 f303 	lsl.w	r3, r2, r3
    468c:	43db      	mvns	r3, r3
    468e:	9a05      	ldr	r2, [sp, #20]
    4690:	4013      	ands	r3, r2
    4692:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4694:	9b03      	ldr	r3, [sp, #12]
    4696:	005b      	lsls	r3, r3, #1
    4698:	3318      	adds	r3, #24
    469a:	9a04      	ldr	r2, [sp, #16]
    469c:	fa02 f303 	lsl.w	r3, r2, r3
    46a0:	9a05      	ldr	r2, [sp, #20]
    46a2:	4313      	orrs	r3, r2
    46a4:	9305      	str	r3, [sp, #20]
    46a6:	e014      	b.n	46d2 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    46a8:	9b03      	ldr	r3, [sp, #12]
    46aa:	3b04      	subs	r3, #4
    46ac:	005b      	lsls	r3, r3, #1
    46ae:	3310      	adds	r3, #16
    46b0:	2203      	movs	r2, #3
    46b2:	fa02 f303 	lsl.w	r3, r2, r3
    46b6:	43db      	mvns	r3, r3
    46b8:	9a05      	ldr	r2, [sp, #20]
    46ba:	4013      	ands	r3, r2
    46bc:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    46be:	9b03      	ldr	r3, [sp, #12]
    46c0:	3b04      	subs	r3, #4
    46c2:	005b      	lsls	r3, r3, #1
    46c4:	3310      	adds	r3, #16
    46c6:	9a04      	ldr	r2, [sp, #16]
    46c8:	fa02 f303 	lsl.w	r3, r2, r3
    46cc:	9a05      	ldr	r2, [sp, #20]
    46ce:	4313      	orrs	r3, r2
    46d0:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    46d2:	4a05      	ldr	r2, [pc, #20]	; (46e8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    46d4:	9b05      	ldr	r3, [sp, #20]
    46d6:	60d3      	str	r3, [r2, #12]
}
    46d8:	bf00      	nop
    46da:	b006      	add	sp, #24
    46dc:	4770      	bx	lr
    46de:	bf00      	nop
    46e0:	00010448 	.word	0x00010448
    46e4:	00010138 	.word	0x00010138
    46e8:	40048000 	.word	0x40048000

000046ec <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46ec:	b084      	sub	sp, #16
    46ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    46f0:	4b06      	ldr	r3, [pc, #24]	; (470c <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    46f2:	685b      	ldr	r3, [r3, #4]
    46f4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    46f6:	9b03      	ldr	r3, [sp, #12]
    46f8:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    46fc:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    46fe:	4a03      	ldr	r2, [pc, #12]	; (470c <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4700:	9b03      	ldr	r3, [sp, #12]
    4702:	6053      	str	r3, [r2, #4]
}
    4704:	bf00      	nop
    4706:	b004      	add	sp, #16
    4708:	4770      	bx	lr
    470a:	bf00      	nop
    470c:	40048000 	.word	0x40048000

00004710 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4710:	b084      	sub	sp, #16
    4712:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4714:	9b01      	ldr	r3, [sp, #4]
    4716:	685b      	ldr	r3, [r3, #4]
    4718:	4a0a      	ldr	r2, [pc, #40]	; (4744 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    471a:	5cd3      	ldrb	r3, [r2, r3]
    471c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    471e:	4b0a      	ldr	r3, [pc, #40]	; (4748 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4720:	685b      	ldr	r3, [r3, #4]
    4722:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4724:	9b02      	ldr	r3, [sp, #8]
    4726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    472a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    472c:	9b03      	ldr	r3, [sp, #12]
    472e:	011b      	lsls	r3, r3, #4
    4730:	9a02      	ldr	r2, [sp, #8]
    4732:	4313      	orrs	r3, r2
    4734:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    4736:	4a04      	ldr	r2, [pc, #16]	; (4748 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4738:	9b02      	ldr	r3, [sp, #8]
    473a:	6053      	str	r3, [r2, #4]
}
    473c:	bf00      	nop
    473e:	b004      	add	sp, #16
    4740:	4770      	bx	lr
    4742:	bf00      	nop
    4744:	00010448 	.word	0x00010448
    4748:	40048000 	.word	0x40048000

0000474c <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    474c:	b084      	sub	sp, #16
    474e:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4750:	9b01      	ldr	r3, [sp, #4]
    4752:	681a      	ldr	r2, [r3, #0]
    4754:	490f      	ldr	r1, [pc, #60]	; (4794 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    4756:	4613      	mov	r3, r2
    4758:	00db      	lsls	r3, r3, #3
    475a:	4413      	add	r3, r2
    475c:	440b      	add	r3, r1
    475e:	3304      	adds	r3, #4
    4760:	781b      	ldrb	r3, [r3, #0]
    4762:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4764:	4a0c      	ldr	r2, [pc, #48]	; (4798 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4766:	9b03      	ldr	r3, [sp, #12]
    4768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    476c:	490a      	ldr	r1, [pc, #40]	; (4798 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    476e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    4772:	9b03      	ldr	r3, [sp, #12]
    4774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4778:	4a07      	ldr	r2, [pc, #28]	; (4798 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    477a:	9b03      	ldr	r3, [sp, #12]
    477c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4780:	4905      	ldr	r1, [pc, #20]	; (4798 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4782:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    4786:	9b03      	ldr	r3, [sp, #12]
    4788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    478c:	bf00      	nop
    478e:	b004      	add	sp, #16
    4790:	4770      	bx	lr
    4792:	bf00      	nop
    4794:	00010138 	.word	0x00010138
    4798:	40065000 	.word	0x40065000

0000479c <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    479c:	b086      	sub	sp, #24
    479e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    47a0:	9b01      	ldr	r3, [sp, #4]
    47a2:	681a      	ldr	r2, [r3, #0]
    47a4:	4912      	ldr	r1, [pc, #72]	; (47f0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    47a6:	4613      	mov	r3, r2
    47a8:	00db      	lsls	r3, r3, #3
    47aa:	4413      	add	r3, r2
    47ac:	440b      	add	r3, r1
    47ae:	3304      	adds	r3, #4
    47b0:	781b      	ldrb	r3, [r3, #0]
    47b2:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47b4:	9b01      	ldr	r3, [sp, #4]
    47b6:	685b      	ldr	r3, [r3, #4]
    47b8:	4a0e      	ldr	r2, [pc, #56]	; (47f4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    47ba:	5cd3      	ldrb	r3, [r2, r3]
    47bc:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    47be:	4a0e      	ldr	r2, [pc, #56]	; (47f8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    47c0:	9b05      	ldr	r3, [sp, #20]
    47c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    47c6:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    47c8:	9b03      	ldr	r3, [sp, #12]
    47ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    47ce:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    47d0:	9b04      	ldr	r3, [sp, #16]
    47d2:	061b      	lsls	r3, r3, #24
    47d4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    47d8:	9a03      	ldr	r2, [sp, #12]
    47da:	4313      	orrs	r3, r2
    47dc:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    47de:	4906      	ldr	r1, [pc, #24]	; (47f8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    47e0:	9b05      	ldr	r3, [sp, #20]
    47e2:	9a03      	ldr	r2, [sp, #12]
    47e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    47e8:	bf00      	nop
    47ea:	b006      	add	sp, #24
    47ec:	4770      	bx	lr
    47ee:	bf00      	nop
    47f0:	00010138 	.word	0x00010138
    47f4:	000104d0 	.word	0x000104d0
    47f8:	40065000 	.word	0x40065000

000047fc <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47fc:	b084      	sub	sp, #16
    47fe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4800:	4b0b      	ldr	r3, [pc, #44]	; (4830 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4802:	7f1b      	ldrb	r3, [r3, #28]
    4804:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    4806:	4b0b      	ldr	r3, [pc, #44]	; (4834 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4808:	685b      	ldr	r3, [r3, #4]
    480a:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    480c:	9b02      	ldr	r3, [sp, #8]
    480e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4812:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4814:	9b03      	ldr	r3, [sp, #12]
    4816:	031b      	lsls	r3, r3, #12
    4818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    481c:	9a02      	ldr	r2, [sp, #8]
    481e:	4313      	orrs	r3, r2
    4820:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4822:	4a04      	ldr	r2, [pc, #16]	; (4834 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4824:	9b02      	ldr	r3, [sp, #8]
    4826:	6053      	str	r3, [r2, #4]
}
    4828:	bf00      	nop
    482a:	b004      	add	sp, #16
    482c:	4770      	bx	lr
    482e:	bf00      	nop
    4830:	00010448 	.word	0x00010448
    4834:	40048000 	.word	0x40048000

00004838 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4838:	b084      	sub	sp, #16
    483a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    483c:	9b01      	ldr	r3, [sp, #4]
    483e:	685b      	ldr	r3, [r3, #4]
    4840:	4a0b      	ldr	r2, [pc, #44]	; (4870 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4842:	5cd3      	ldrb	r3, [r2, r3]
    4844:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4846:	4b0b      	ldr	r3, [pc, #44]	; (4874 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4848:	685b      	ldr	r3, [r3, #4]
    484a:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    484c:	9b02      	ldr	r3, [sp, #8]
    484e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4852:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4854:	9b03      	ldr	r3, [sp, #12]
    4856:	031b      	lsls	r3, r3, #12
    4858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    485c:	9a02      	ldr	r2, [sp, #8]
    485e:	4313      	orrs	r3, r2
    4860:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4862:	4a04      	ldr	r2, [pc, #16]	; (4874 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4864:	9b02      	ldr	r3, [sp, #8]
    4866:	6053      	str	r3, [r2, #4]
}
    4868:	bf00      	nop
    486a:	b004      	add	sp, #16
    486c:	4770      	bx	lr
    486e:	bf00      	nop
    4870:	00010448 	.word	0x00010448
    4874:	40048000 	.word	0x40048000

00004878 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4878:	b500      	push	{lr}
    487a:	b085      	sub	sp, #20
    487c:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    487e:	2300      	movs	r3, #0
    4880:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4884:	9b01      	ldr	r3, [sp, #4]
    4886:	2b00      	cmp	r3, #0
    4888:	d037      	beq.n	48fa <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    488a:	2300      	movs	r3, #0
    488c:	9303      	str	r3, [sp, #12]
    488e:	e02b      	b.n	48e8 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4890:	4b29      	ldr	r3, [pc, #164]	; (4938 <DisableSafeClock+0xc0>)
    4892:	6819      	ldr	r1, [r3, #0]
    4894:	9a03      	ldr	r2, [sp, #12]
    4896:	4613      	mov	r3, r2
    4898:	005b      	lsls	r3, r3, #1
    489a:	4413      	add	r3, r2
    489c:	009b      	lsls	r3, r3, #2
    489e:	440b      	add	r3, r1
    48a0:	3314      	adds	r3, #20
    48a2:	681b      	ldr	r3, [r3, #0]
    48a4:	2b05      	cmp	r3, #5
    48a6:	d11c      	bne.n	48e2 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    48a8:	2301      	movs	r3, #1
    48aa:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    48ae:	4b22      	ldr	r3, [pc, #136]	; (4938 <DisableSafeClock+0xc0>)
    48b0:	6819      	ldr	r1, [r3, #0]
    48b2:	9a03      	ldr	r2, [sp, #12]
    48b4:	4613      	mov	r3, r2
    48b6:	005b      	lsls	r3, r3, #1
    48b8:	4413      	add	r3, r2
    48ba:	009b      	lsls	r3, r3, #2
    48bc:	440b      	add	r3, r1
    48be:	3318      	adds	r3, #24
    48c0:	881b      	ldrh	r3, [r3, #0]
    48c2:	2b00      	cmp	r3, #0
    48c4:	d118      	bne.n	48f8 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    48c6:	4b1d      	ldr	r3, [pc, #116]	; (493c <DisableSafeClock+0xc4>)
    48c8:	791b      	ldrb	r3, [r3, #4]
    48ca:	4619      	mov	r1, r3
    48cc:	4a1c      	ldr	r2, [pc, #112]	; (4940 <DisableSafeClock+0xc8>)
    48ce:	460b      	mov	r3, r1
    48d0:	005b      	lsls	r3, r3, #1
    48d2:	440b      	add	r3, r1
    48d4:	009b      	lsls	r3, r3, #2
    48d6:	4413      	add	r3, r2
    48d8:	3308      	adds	r3, #8
    48da:	681b      	ldr	r3, [r3, #0]
    48dc:	2005      	movs	r0, #5
    48de:	4798      	blx	r3
                }
                break;
    48e0:	e00a      	b.n	48f8 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    48e2:	9b03      	ldr	r3, [sp, #12]
    48e4:	3301      	adds	r3, #1
    48e6:	9303      	str	r3, [sp, #12]
    48e8:	4b13      	ldr	r3, [pc, #76]	; (4938 <DisableSafeClock+0xc0>)
    48ea:	681b      	ldr	r3, [r3, #0]
    48ec:	7a1b      	ldrb	r3, [r3, #8]
    48ee:	461a      	mov	r2, r3
    48f0:	9b03      	ldr	r3, [sp, #12]
    48f2:	4293      	cmp	r3, r2
    48f4:	d3cc      	bcc.n	4890 <DisableSafeClock+0x18>
    48f6:	e000      	b.n	48fa <DisableSafeClock+0x82>
                break;
    48f8:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    48fa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    48fe:	f083 0301 	eor.w	r3, r3, #1
    4902:	b2db      	uxtb	r3, r3
    4904:	2b00      	cmp	r3, #0
    4906:	d013      	beq.n	4930 <DisableSafeClock+0xb8>
    4908:	4b0e      	ldr	r3, [pc, #56]	; (4944 <DisableSafeClock+0xcc>)
    490a:	781b      	ldrb	r3, [r3, #0]
    490c:	f083 0301 	eor.w	r3, r3, #1
    4910:	b2db      	uxtb	r3, r3
    4912:	2b00      	cmp	r3, #0
    4914:	d00c      	beq.n	4930 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4916:	4b09      	ldr	r3, [pc, #36]	; (493c <DisableSafeClock+0xc4>)
    4918:	791b      	ldrb	r3, [r3, #4]
    491a:	4619      	mov	r1, r3
    491c:	4a08      	ldr	r2, [pc, #32]	; (4940 <DisableSafeClock+0xc8>)
    491e:	460b      	mov	r3, r1
    4920:	005b      	lsls	r3, r3, #1
    4922:	440b      	add	r3, r1
    4924:	009b      	lsls	r3, r3, #2
    4926:	4413      	add	r3, r2
    4928:	3308      	adds	r3, #8
    492a:	681b      	ldr	r3, [r3, #0]
    492c:	2005      	movs	r0, #5
    492e:	4798      	blx	r3
    }
}
    4930:	bf00      	nop
    4932:	b005      	add	sp, #20
    4934:	f85d fb04 	ldr.w	pc, [sp], #4
    4938:	1fff8b98 	.word	0x1fff8b98
    493c:	000100c8 	.word	0x000100c8
    4940:	000106f8 	.word	0x000106f8
    4944:	1fff8b18 	.word	0x1fff8b18

00004948 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4948:	4b06      	ldr	r3, [pc, #24]	; (4964 <SetFircToResetValue_TrustedCall+0x1c>)
    494a:	2200      	movs	r2, #0
    494c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4950:	4b04      	ldr	r3, [pc, #16]	; (4964 <SetFircToResetValue_TrustedCall+0x1c>)
    4952:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4956:	4a03      	ldr	r2, [pc, #12]	; (4964 <SetFircToResetValue_TrustedCall+0x1c>)
    4958:	f043 0301 	orr.w	r3, r3, #1
    495c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4960:	bf00      	nop
    4962:	4770      	bx	lr
    4964:	40064000 	.word	0x40064000

00004968 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4968:	b084      	sub	sp, #16
    496a:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    496c:	2303      	movs	r3, #3
    496e:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4970:	2300      	movs	r3, #0
    4972:	9302      	str	r3, [sp, #8]
    4974:	e028      	b.n	49c8 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4976:	9b01      	ldr	r3, [sp, #4]
    4978:	9a02      	ldr	r2, [sp, #8]
    497a:	320d      	adds	r2, #13
    497c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4980:	2b28      	cmp	r3, #40	; 0x28
    4982:	d10b      	bne.n	499c <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4984:	9a01      	ldr	r2, [sp, #4]
    4986:	9b02      	ldr	r3, [sp, #8]
    4988:	330d      	adds	r3, #13
    498a:	00db      	lsls	r3, r3, #3
    498c:	4413      	add	r3, r2
    498e:	685b      	ldr	r3, [r3, #4]
    4990:	4a2b      	ldr	r2, [pc, #172]	; (4a40 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4992:	5cd3      	ldrb	r3, [r2, r3]
    4994:	011b      	lsls	r3, r3, #4
    4996:	9a03      	ldr	r2, [sp, #12]
    4998:	4313      	orrs	r3, r2
    499a:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    499c:	9b01      	ldr	r3, [sp, #4]
    499e:	9a02      	ldr	r2, [sp, #8]
    49a0:	320d      	adds	r2, #13
    49a2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    49a6:	2b29      	cmp	r3, #41	; 0x29
    49a8:	d10b      	bne.n	49c2 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    49aa:	9a01      	ldr	r2, [sp, #4]
    49ac:	9b02      	ldr	r3, [sp, #8]
    49ae:	330d      	adds	r3, #13
    49b0:	00db      	lsls	r3, r3, #3
    49b2:	4413      	add	r3, r2
    49b4:	685b      	ldr	r3, [r3, #4]
    49b6:	4a23      	ldr	r2, [pc, #140]	; (4a44 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    49b8:	5cd3      	ldrb	r3, [r2, r3]
    49ba:	009b      	lsls	r3, r3, #2
    49bc:	9a03      	ldr	r2, [sp, #12]
    49be:	4313      	orrs	r3, r2
    49c0:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    49c2:	9b02      	ldr	r3, [sp, #8]
    49c4:	3301      	adds	r3, #1
    49c6:	9302      	str	r3, [sp, #8]
    49c8:	9b01      	ldr	r3, [sp, #4]
    49ca:	7adb      	ldrb	r3, [r3, #11]
    49cc:	461a      	mov	r2, r3
    49ce:	9b02      	ldr	r3, [sp, #8]
    49d0:	4293      	cmp	r3, r2
    49d2:	d3d0      	bcc.n	4976 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    49d4:	2300      	movs	r3, #0
    49d6:	9302      	str	r3, [sp, #8]
    49d8:	e026      	b.n	4a28 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    49da:	9a01      	ldr	r2, [sp, #4]
    49dc:	9b02      	ldr	r3, [sp, #8]
    49de:	334e      	adds	r3, #78	; 0x4e
    49e0:	00db      	lsls	r3, r3, #3
    49e2:	4413      	add	r3, r2
    49e4:	685b      	ldr	r3, [r3, #4]
    49e6:	2b12      	cmp	r3, #18
    49e8:	d109      	bne.n	49fe <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    49ea:	9a01      	ldr	r2, [sp, #4]
    49ec:	9b02      	ldr	r3, [sp, #8]
    49ee:	334e      	adds	r3, #78	; 0x4e
    49f0:	00db      	lsls	r3, r3, #3
    49f2:	4413      	add	r3, r2
    49f4:	891b      	ldrh	r3, [r3, #8]
    49f6:	005b      	lsls	r3, r3, #1
    49f8:	9a03      	ldr	r2, [sp, #12]
    49fa:	4313      	orrs	r3, r2
    49fc:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    49fe:	9a01      	ldr	r2, [sp, #4]
    4a00:	9b02      	ldr	r3, [sp, #8]
    4a02:	334e      	adds	r3, #78	; 0x4e
    4a04:	00db      	lsls	r3, r3, #3
    4a06:	4413      	add	r3, r2
    4a08:	685b      	ldr	r3, [r3, #4]
    4a0a:	2b13      	cmp	r3, #19
    4a0c:	d109      	bne.n	4a22 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4a0e:	9a01      	ldr	r2, [sp, #4]
    4a10:	9b02      	ldr	r3, [sp, #8]
    4a12:	334e      	adds	r3, #78	; 0x4e
    4a14:	00db      	lsls	r3, r3, #3
    4a16:	4413      	add	r3, r2
    4a18:	891b      	ldrh	r3, [r3, #8]
    4a1a:	461a      	mov	r2, r3
    4a1c:	9b03      	ldr	r3, [sp, #12]
    4a1e:	4313      	orrs	r3, r2
    4a20:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4a22:	9b02      	ldr	r3, [sp, #8]
    4a24:	3301      	adds	r3, #1
    4a26:	9302      	str	r3, [sp, #8]
    4a28:	9b01      	ldr	r3, [sp, #4]
    4a2a:	7c1b      	ldrb	r3, [r3, #16]
    4a2c:	461a      	mov	r2, r3
    4a2e:	9b02      	ldr	r3, [sp, #8]
    4a30:	4293      	cmp	r3, r2
    4a32:	d3d2      	bcc.n	49da <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4a34:	4a04      	ldr	r2, [pc, #16]	; (4a48 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4a36:	9b03      	ldr	r3, [sp, #12]
    4a38:	6113      	str	r3, [r2, #16]
}
    4a3a:	bf00      	nop
    4a3c:	b004      	add	sp, #16
    4a3e:	4770      	bx	lr
    4a40:	00010448 	.word	0x00010448
    4a44:	00010500 	.word	0x00010500
    4a48:	40048000 	.word	0x40048000

00004a4c <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4a4c:	b500      	push	{lr}
    4a4e:	b089      	sub	sp, #36	; 0x24
    4a50:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4a52:	2300      	movs	r3, #0
    4a54:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4a58:	4a21      	ldr	r2, [pc, #132]	; (4ae0 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4a5a:	9b01      	ldr	r3, [sp, #4]
    4a5c:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4a5e:	4b21      	ldr	r3, [pc, #132]	; (4ae4 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4a60:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a64:	f003 0301 	and.w	r3, r3, #1
    4a68:	2b00      	cmp	r3, #0
    4a6a:	d12e      	bne.n	4aca <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4a6c:	4b1e      	ldr	r3, [pc, #120]	; (4ae8 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4a6e:	2200      	movs	r2, #0
    4a70:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4a72:	f7ff ff69 	bl	4948 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4a76:	aa03      	add	r2, sp, #12
    4a78:	a904      	add	r1, sp, #16
    4a7a:	a805      	add	r0, sp, #20
    4a7c:	f24c 3350 	movw	r3, #50000	; 0xc350
    4a80:	f7fe f8ae 	bl	2be0 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4a84:	4b17      	ldr	r3, [pc, #92]	; (4ae4 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4a86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a8a:	0e1b      	lsrs	r3, r3, #24
    4a8c:	f003 0301 	and.w	r3, r3, #1
    4a90:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4a92:	9a03      	ldr	r2, [sp, #12]
    4a94:	a904      	add	r1, sp, #16
    4a96:	ab05      	add	r3, sp, #20
    4a98:	4618      	mov	r0, r3
    4a9a:	f7fe f8bb 	bl	2c14 <Clock_Ip_TimeoutExpired>
    4a9e:	4603      	mov	r3, r0
    4aa0:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4aa4:	9b06      	ldr	r3, [sp, #24]
    4aa6:	2b00      	cmp	r3, #0
    4aa8:	d106      	bne.n	4ab8 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4aaa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4aae:	f083 0301 	eor.w	r3, r3, #1
    4ab2:	b2db      	uxtb	r3, r3
    4ab4:	2b00      	cmp	r3, #0
    4ab6:	d1e5      	bne.n	4a84 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4ab8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4abc:	2b00      	cmp	r3, #0
    4abe:	d007      	beq.n	4ad0 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4ac0:	2105      	movs	r1, #5
    4ac2:	2001      	movs	r0, #1
    4ac4:	f7fe f87c 	bl	2bc0 <Clock_Ip_ReportClockErrors>
    4ac8:	e002      	b.n	4ad0 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4aca:	4b07      	ldr	r3, [pc, #28]	; (4ae8 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4acc:	2201      	movs	r2, #1
    4ace:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4ad0:	9801      	ldr	r0, [sp, #4]
    4ad2:	f7ff ff49 	bl	4968 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4ad6:	bf00      	nop
    4ad8:	b009      	add	sp, #36	; 0x24
    4ada:	f85d fb04 	ldr.w	pc, [sp], #4
    4ade:	bf00      	nop
    4ae0:	1fff8b98 	.word	0x1fff8b98
    4ae4:	40064000 	.word	0x40064000
    4ae8:	1fff8b18 	.word	0x1fff8b18

00004aec <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4aec:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4aee:	2300      	movs	r3, #0
    4af0:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4af2:	4b29      	ldr	r3, [pc, #164]	; (4b98 <getFircConfig+0xac>)
    4af4:	681b      	ldr	r3, [r3, #0]
    4af6:	2b00      	cmp	r3, #0
    4af8:	d024      	beq.n	4b44 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4afa:	2300      	movs	r3, #0
    4afc:	9301      	str	r3, [sp, #4]
    4afe:	e01a      	b.n	4b36 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4b00:	4b25      	ldr	r3, [pc, #148]	; (4b98 <getFircConfig+0xac>)
    4b02:	6819      	ldr	r1, [r3, #0]
    4b04:	9a01      	ldr	r2, [sp, #4]
    4b06:	4613      	mov	r3, r2
    4b08:	005b      	lsls	r3, r3, #1
    4b0a:	4413      	add	r3, r2
    4b0c:	009b      	lsls	r3, r3, #2
    4b0e:	440b      	add	r3, r1
    4b10:	3314      	adds	r3, #20
    4b12:	681b      	ldr	r3, [r3, #0]
    4b14:	2b05      	cmp	r3, #5
    4b16:	d10b      	bne.n	4b30 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4b18:	4b1f      	ldr	r3, [pc, #124]	; (4b98 <getFircConfig+0xac>)
    4b1a:	6819      	ldr	r1, [r3, #0]
    4b1c:	9a01      	ldr	r2, [sp, #4]
    4b1e:	4613      	mov	r3, r2
    4b20:	005b      	lsls	r3, r3, #1
    4b22:	4413      	add	r3, r2
    4b24:	009b      	lsls	r3, r3, #2
    4b26:	3310      	adds	r3, #16
    4b28:	440b      	add	r3, r1
    4b2a:	3304      	adds	r3, #4
    4b2c:	9300      	str	r3, [sp, #0]
                break;
    4b2e:	e009      	b.n	4b44 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4b30:	9b01      	ldr	r3, [sp, #4]
    4b32:	3301      	adds	r3, #1
    4b34:	9301      	str	r3, [sp, #4]
    4b36:	4b18      	ldr	r3, [pc, #96]	; (4b98 <getFircConfig+0xac>)
    4b38:	681b      	ldr	r3, [r3, #0]
    4b3a:	7a1b      	ldrb	r3, [r3, #8]
    4b3c:	461a      	mov	r2, r3
    4b3e:	9b01      	ldr	r3, [sp, #4]
    4b40:	4293      	cmp	r3, r2
    4b42:	d3dd      	bcc.n	4b00 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4b44:	9b00      	ldr	r3, [sp, #0]
    4b46:	2b00      	cmp	r3, #0
    4b48:	d121      	bne.n	4b8e <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4b4a:	4b14      	ldr	r3, [pc, #80]	; (4b9c <getFircConfig+0xb0>)
    4b4c:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4b4e:	4b13      	ldr	r3, [pc, #76]	; (4b9c <getFircConfig+0xb0>)
    4b50:	2205      	movs	r2, #5
    4b52:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4b54:	4b12      	ldr	r3, [pc, #72]	; (4ba0 <getFircConfig+0xb4>)
    4b56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b5a:	b29b      	uxth	r3, r3
    4b5c:	f003 0301 	and.w	r3, r3, #1
    4b60:	b29a      	uxth	r2, r3
    4b62:	4b0e      	ldr	r3, [pc, #56]	; (4b9c <getFircConfig+0xb0>)
    4b64:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4b66:	4b0e      	ldr	r3, [pc, #56]	; (4ba0 <getFircConfig+0xb4>)
    4b68:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4b6c:	b2db      	uxtb	r3, r3
    4b6e:	f003 0303 	and.w	r3, r3, #3
    4b72:	b2da      	uxtb	r2, r3
    4b74:	4b09      	ldr	r3, [pc, #36]	; (4b9c <getFircConfig+0xb0>)
    4b76:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4b78:	4b09      	ldr	r3, [pc, #36]	; (4ba0 <getFircConfig+0xb4>)
    4b7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b7e:	b2db      	uxtb	r3, r3
    4b80:	10db      	asrs	r3, r3, #3
    4b82:	b2db      	uxtb	r3, r3
    4b84:	f003 0301 	and.w	r3, r3, #1
    4b88:	b2da      	uxtb	r2, r3
    4b8a:	4b04      	ldr	r3, [pc, #16]	; (4b9c <getFircConfig+0xb0>)
    4b8c:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4b8e:	9b00      	ldr	r3, [sp, #0]
}
    4b90:	4618      	mov	r0, r3
    4b92:	b002      	add	sp, #8
    4b94:	4770      	bx	lr
    4b96:	bf00      	nop
    4b98:	1fff8b98 	.word	0x1fff8b98
    4b9c:	1fff8c04 	.word	0x1fff8c04
    4ba0:	40064000 	.word	0x40064000

00004ba4 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4ba4:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4ba6:	2300      	movs	r3, #0
    4ba8:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4baa:	4b20      	ldr	r3, [pc, #128]	; (4c2c <getSoscConfig+0x88>)
    4bac:	681b      	ldr	r3, [r3, #0]
    4bae:	2b00      	cmp	r3, #0
    4bb0:	d024      	beq.n	4bfc <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4bb2:	2300      	movs	r3, #0
    4bb4:	9301      	str	r3, [sp, #4]
    4bb6:	e01a      	b.n	4bee <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4bb8:	4b1c      	ldr	r3, [pc, #112]	; (4c2c <getSoscConfig+0x88>)
    4bba:	6819      	ldr	r1, [r3, #0]
    4bbc:	9a01      	ldr	r2, [sp, #4]
    4bbe:	4613      	mov	r3, r2
    4bc0:	009b      	lsls	r3, r3, #2
    4bc2:	4413      	add	r3, r2
    4bc4:	009b      	lsls	r3, r3, #2
    4bc6:	440b      	add	r3, r1
    4bc8:	332c      	adds	r3, #44	; 0x2c
    4bca:	681b      	ldr	r3, [r3, #0]
    4bcc:	2b08      	cmp	r3, #8
    4bce:	d10b      	bne.n	4be8 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4bd0:	4b16      	ldr	r3, [pc, #88]	; (4c2c <getSoscConfig+0x88>)
    4bd2:	6819      	ldr	r1, [r3, #0]
    4bd4:	9a01      	ldr	r2, [sp, #4]
    4bd6:	4613      	mov	r3, r2
    4bd8:	009b      	lsls	r3, r3, #2
    4bda:	4413      	add	r3, r2
    4bdc:	009b      	lsls	r3, r3, #2
    4bde:	3328      	adds	r3, #40	; 0x28
    4be0:	440b      	add	r3, r1
    4be2:	3304      	adds	r3, #4
    4be4:	9300      	str	r3, [sp, #0]
                break;
    4be6:	e009      	b.n	4bfc <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4be8:	9b01      	ldr	r3, [sp, #4]
    4bea:	3301      	adds	r3, #1
    4bec:	9301      	str	r3, [sp, #4]
    4bee:	4b0f      	ldr	r3, [pc, #60]	; (4c2c <getSoscConfig+0x88>)
    4bf0:	681b      	ldr	r3, [r3, #0]
    4bf2:	7a5b      	ldrb	r3, [r3, #9]
    4bf4:	461a      	mov	r2, r3
    4bf6:	9b01      	ldr	r3, [sp, #4]
    4bf8:	4293      	cmp	r3, r2
    4bfa:	d3dd      	bcc.n	4bb8 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4bfc:	9b00      	ldr	r3, [sp, #0]
    4bfe:	2b00      	cmp	r3, #0
    4c00:	d110      	bne.n	4c24 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4c02:	4b0b      	ldr	r3, [pc, #44]	; (4c30 <getSoscConfig+0x8c>)
    4c04:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4c06:	4b0a      	ldr	r3, [pc, #40]	; (4c30 <getSoscConfig+0x8c>)
    4c08:	2208      	movs	r2, #8
    4c0a:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4c0c:	4b09      	ldr	r3, [pc, #36]	; (4c34 <getSoscConfig+0x90>)
    4c0e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4c12:	b29b      	uxth	r3, r3
    4c14:	f003 0301 	and.w	r3, r3, #1
    4c18:	b29a      	uxth	r2, r3
    4c1a:	4b05      	ldr	r3, [pc, #20]	; (4c30 <getSoscConfig+0x8c>)
    4c1c:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4c1e:	4b04      	ldr	r3, [pc, #16]	; (4c30 <getSoscConfig+0x8c>)
    4c20:	4a05      	ldr	r2, [pc, #20]	; (4c38 <getSoscConfig+0x94>)
    4c22:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4c24:	9b00      	ldr	r3, [sp, #0]
}
    4c26:	4618      	mov	r0, r3
    4c28:	b002      	add	sp, #8
    4c2a:	4770      	bx	lr
    4c2c:	1fff8b98 	.word	0x1fff8b98
    4c30:	1fff8c10 	.word	0x1fff8c10
    4c34:	40064000 	.word	0x40064000
    4c38:	02625a00 	.word	0x02625a00

00004c3c <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4c3c:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4c3e:	2300      	movs	r3, #0
    4c40:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4c42:	4b28      	ldr	r3, [pc, #160]	; (4ce4 <getSpllConfig+0xa8>)
    4c44:	681b      	ldr	r3, [r3, #0]
    4c46:	2b00      	cmp	r3, #0
    4c48:	d023      	beq.n	4c92 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4c4a:	2300      	movs	r3, #0
    4c4c:	9301      	str	r3, [sp, #4]
    4c4e:	e019      	b.n	4c84 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4c50:	4b24      	ldr	r3, [pc, #144]	; (4ce4 <getSpllConfig+0xa8>)
    4c52:	6819      	ldr	r1, [r3, #0]
    4c54:	9a01      	ldr	r2, [sp, #4]
    4c56:	4613      	mov	r3, r2
    4c58:	009b      	lsls	r3, r3, #2
    4c5a:	4413      	add	r3, r2
    4c5c:	00db      	lsls	r3, r3, #3
    4c5e:	440b      	add	r3, r1
    4c60:	3340      	adds	r3, #64	; 0x40
    4c62:	681b      	ldr	r3, [r3, #0]
    4c64:	2b09      	cmp	r3, #9
    4c66:	d10a      	bne.n	4c7e <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4c68:	4b1e      	ldr	r3, [pc, #120]	; (4ce4 <getSpllConfig+0xa8>)
    4c6a:	6819      	ldr	r1, [r3, #0]
    4c6c:	9a01      	ldr	r2, [sp, #4]
    4c6e:	4613      	mov	r3, r2
    4c70:	009b      	lsls	r3, r3, #2
    4c72:	4413      	add	r3, r2
    4c74:	00db      	lsls	r3, r3, #3
    4c76:	3340      	adds	r3, #64	; 0x40
    4c78:	440b      	add	r3, r1
    4c7a:	9300      	str	r3, [sp, #0]
                break;
    4c7c:	e009      	b.n	4c92 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4c7e:	9b01      	ldr	r3, [sp, #4]
    4c80:	3301      	adds	r3, #1
    4c82:	9301      	str	r3, [sp, #4]
    4c84:	4b17      	ldr	r3, [pc, #92]	; (4ce4 <getSpllConfig+0xa8>)
    4c86:	681b      	ldr	r3, [r3, #0]
    4c88:	7a9b      	ldrb	r3, [r3, #10]
    4c8a:	461a      	mov	r2, r3
    4c8c:	9b01      	ldr	r3, [sp, #4]
    4c8e:	4293      	cmp	r3, r2
    4c90:	d3de      	bcc.n	4c50 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4c92:	9b00      	ldr	r3, [sp, #0]
    4c94:	2b00      	cmp	r3, #0
    4c96:	d121      	bne.n	4cdc <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4c98:	4b13      	ldr	r3, [pc, #76]	; (4ce8 <getSpllConfig+0xac>)
    4c9a:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4c9c:	4b12      	ldr	r3, [pc, #72]	; (4ce8 <getSpllConfig+0xac>)
    4c9e:	2209      	movs	r2, #9
    4ca0:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4ca2:	4b12      	ldr	r3, [pc, #72]	; (4cec <getSpllConfig+0xb0>)
    4ca4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4ca8:	b29b      	uxth	r3, r3
    4caa:	f003 0301 	and.w	r3, r3, #1
    4cae:	b29a      	uxth	r2, r3
    4cb0:	4b0d      	ldr	r3, [pc, #52]	; (4ce8 <getSpllConfig+0xac>)
    4cb2:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4cb4:	4b0d      	ldr	r3, [pc, #52]	; (4cec <getSpllConfig+0xb0>)
    4cb6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4cba:	0a1b      	lsrs	r3, r3, #8
    4cbc:	b2db      	uxtb	r3, r3
    4cbe:	f003 0307 	and.w	r3, r3, #7
    4cc2:	b2da      	uxtb	r2, r3
    4cc4:	4b08      	ldr	r3, [pc, #32]	; (4ce8 <getSpllConfig+0xac>)
    4cc6:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4cc8:	4b08      	ldr	r3, [pc, #32]	; (4cec <getSpllConfig+0xb0>)
    4cca:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4cce:	0c1b      	lsrs	r3, r3, #16
    4cd0:	b2db      	uxtb	r3, r3
    4cd2:	f003 031f 	and.w	r3, r3, #31
    4cd6:	b2da      	uxtb	r2, r3
    4cd8:	4b03      	ldr	r3, [pc, #12]	; (4ce8 <getSpllConfig+0xac>)
    4cda:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4cdc:	9b00      	ldr	r3, [sp, #0]
}
    4cde:	4618      	mov	r0, r3
    4ce0:	b002      	add	sp, #8
    4ce2:	4770      	bx	lr
    4ce4:	1fff8b98 	.word	0x1fff8b98
    4ce8:	1fff8c24 	.word	0x1fff8c24
    4cec:	40064000 	.word	0x40064000

00004cf0 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4cf0:	b086      	sub	sp, #24
    4cf2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4cf4:	2300      	movs	r3, #0
    4cf6:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4cf8:	9b01      	ldr	r3, [sp, #4]
    4cfa:	2b1b      	cmp	r3, #27
    4cfc:	d00f      	beq.n	4d1e <getSelectorConfig+0x2e>
    4cfe:	9b01      	ldr	r3, [sp, #4]
    4d00:	2b1b      	cmp	r3, #27
    4d02:	d80f      	bhi.n	4d24 <getSelectorConfig+0x34>
    4d04:	9b01      	ldr	r3, [sp, #4]
    4d06:	2b19      	cmp	r3, #25
    4d08:	d003      	beq.n	4d12 <getSelectorConfig+0x22>
    4d0a:	9b01      	ldr	r3, [sp, #4]
    4d0c:	2b1a      	cmp	r3, #26
    4d0e:	d003      	beq.n	4d18 <getSelectorConfig+0x28>
    4d10:	e008      	b.n	4d24 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4d12:	2300      	movs	r3, #0
    4d14:	9304      	str	r3, [sp, #16]
            break;
    4d16:	e008      	b.n	4d2a <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4d18:	2301      	movs	r3, #1
    4d1a:	9304      	str	r3, [sp, #16]
            break;
    4d1c:	e005      	b.n	4d2a <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4d1e:	2302      	movs	r3, #2
    4d20:	9304      	str	r3, [sp, #16]
            break;
    4d22:	e002      	b.n	4d2a <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4d24:	2300      	movs	r3, #0
    4d26:	9304      	str	r3, [sp, #16]
            break;
    4d28:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4d2a:	4b36      	ldr	r3, [pc, #216]	; (4e04 <getSelectorConfig+0x114>)
    4d2c:	681b      	ldr	r3, [r3, #0]
    4d2e:	2b00      	cmp	r3, #0
    4d30:	d01d      	beq.n	4d6e <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4d32:	2300      	movs	r3, #0
    4d34:	9303      	str	r3, [sp, #12]
    4d36:	e013      	b.n	4d60 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4d38:	4b32      	ldr	r3, [pc, #200]	; (4e04 <getSelectorConfig+0x114>)
    4d3a:	681b      	ldr	r3, [r3, #0]
    4d3c:	9a03      	ldr	r2, [sp, #12]
    4d3e:	320d      	adds	r2, #13
    4d40:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4d44:	9a01      	ldr	r2, [sp, #4]
    4d46:	429a      	cmp	r2, r3
    4d48:	d107      	bne.n	4d5a <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4d4a:	4b2e      	ldr	r3, [pc, #184]	; (4e04 <getSelectorConfig+0x114>)
    4d4c:	681a      	ldr	r2, [r3, #0]
    4d4e:	9b03      	ldr	r3, [sp, #12]
    4d50:	330d      	adds	r3, #13
    4d52:	00db      	lsls	r3, r3, #3
    4d54:	4413      	add	r3, r2
    4d56:	9305      	str	r3, [sp, #20]
                break;
    4d58:	e009      	b.n	4d6e <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4d5a:	9b03      	ldr	r3, [sp, #12]
    4d5c:	3301      	adds	r3, #1
    4d5e:	9303      	str	r3, [sp, #12]
    4d60:	4b28      	ldr	r3, [pc, #160]	; (4e04 <getSelectorConfig+0x114>)
    4d62:	681b      	ldr	r3, [r3, #0]
    4d64:	7adb      	ldrb	r3, [r3, #11]
    4d66:	461a      	mov	r2, r3
    4d68:	9b03      	ldr	r3, [sp, #12]
    4d6a:	4293      	cmp	r3, r2
    4d6c:	d3e4      	bcc.n	4d38 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4d6e:	9b05      	ldr	r3, [sp, #20]
    4d70:	2b00      	cmp	r3, #0
    4d72:	d140      	bne.n	4df6 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4d74:	9b04      	ldr	r3, [sp, #16]
    4d76:	00db      	lsls	r3, r3, #3
    4d78:	4a23      	ldr	r2, [pc, #140]	; (4e08 <getSelectorConfig+0x118>)
    4d7a:	4413      	add	r3, r2
    4d7c:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4d7e:	4922      	ldr	r1, [pc, #136]	; (4e08 <getSelectorConfig+0x118>)
    4d80:	9b04      	ldr	r3, [sp, #16]
    4d82:	9a01      	ldr	r2, [sp, #4]
    4d84:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4d88:	9b01      	ldr	r3, [sp, #4]
    4d8a:	2b1b      	cmp	r3, #27
    4d8c:	d025      	beq.n	4dda <getSelectorConfig+0xea>
    4d8e:	9b01      	ldr	r3, [sp, #4]
    4d90:	2b1b      	cmp	r3, #27
    4d92:	d832      	bhi.n	4dfa <getSelectorConfig+0x10a>
    4d94:	9b01      	ldr	r3, [sp, #4]
    4d96:	2b19      	cmp	r3, #25
    4d98:	d003      	beq.n	4da2 <getSelectorConfig+0xb2>
    4d9a:	9b01      	ldr	r3, [sp, #4]
    4d9c:	2b1a      	cmp	r3, #26
    4d9e:	d00e      	beq.n	4dbe <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4da0:	e02b      	b.n	4dfa <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4da2:	4b1a      	ldr	r3, [pc, #104]	; (4e0c <getSelectorConfig+0x11c>)
    4da4:	695b      	ldr	r3, [r3, #20]
    4da6:	0e1b      	lsrs	r3, r3, #24
    4da8:	f003 030f 	and.w	r3, r3, #15
    4dac:	4a18      	ldr	r2, [pc, #96]	; (4e10 <getSelectorConfig+0x120>)
    4dae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4db2:	4915      	ldr	r1, [pc, #84]	; (4e08 <getSelectorConfig+0x118>)
    4db4:	9b04      	ldr	r3, [sp, #16]
    4db6:	00db      	lsls	r3, r3, #3
    4db8:	440b      	add	r3, r1
    4dba:	605a      	str	r2, [r3, #4]
                break;
    4dbc:	e01e      	b.n	4dfc <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4dbe:	4b13      	ldr	r3, [pc, #76]	; (4e0c <getSelectorConfig+0x11c>)
    4dc0:	699b      	ldr	r3, [r3, #24]
    4dc2:	0e1b      	lsrs	r3, r3, #24
    4dc4:	f003 030f 	and.w	r3, r3, #15
    4dc8:	4a11      	ldr	r2, [pc, #68]	; (4e10 <getSelectorConfig+0x120>)
    4dca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4dce:	490e      	ldr	r1, [pc, #56]	; (4e08 <getSelectorConfig+0x118>)
    4dd0:	9b04      	ldr	r3, [sp, #16]
    4dd2:	00db      	lsls	r3, r3, #3
    4dd4:	440b      	add	r3, r1
    4dd6:	605a      	str	r2, [r3, #4]
                break;
    4dd8:	e010      	b.n	4dfc <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4dda:	4b0c      	ldr	r3, [pc, #48]	; (4e0c <getSelectorConfig+0x11c>)
    4ddc:	69db      	ldr	r3, [r3, #28]
    4dde:	0e1b      	lsrs	r3, r3, #24
    4de0:	f003 030f 	and.w	r3, r3, #15
    4de4:	4a0a      	ldr	r2, [pc, #40]	; (4e10 <getSelectorConfig+0x120>)
    4de6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4dea:	4907      	ldr	r1, [pc, #28]	; (4e08 <getSelectorConfig+0x118>)
    4dec:	9b04      	ldr	r3, [sp, #16]
    4dee:	00db      	lsls	r3, r3, #3
    4df0:	440b      	add	r3, r1
    4df2:	605a      	str	r2, [r3, #4]
                break;
    4df4:	e002      	b.n	4dfc <getSelectorConfig+0x10c>
        }
    }
    4df6:	bf00      	nop
    4df8:	e000      	b.n	4dfc <getSelectorConfig+0x10c>
                break;
    4dfa:	bf00      	nop

    return ReturnValue;
    4dfc:	9b05      	ldr	r3, [sp, #20]
}
    4dfe:	4618      	mov	r0, r3
    4e00:	b006      	add	sp, #24
    4e02:	4770      	bx	lr
    4e04:	1fff8b98 	.word	0x1fff8b98
    4e08:	1fff8c4c 	.word	0x1fff8c4c
    4e0c:	40064000 	.word	0x40064000
    4e10:	000107c8 	.word	0x000107c8

00004e14 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4e14:	b086      	sub	sp, #24
    4e16:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4e18:	2300      	movs	r3, #0
    4e1a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4e1c:	2300      	movs	r3, #0
    4e1e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4e20:	9b01      	ldr	r3, [sp, #4]
    4e22:	2b1f      	cmp	r3, #31
    4e24:	d00f      	beq.n	4e46 <getCoreDividerConfig+0x32>
    4e26:	9b01      	ldr	r3, [sp, #4]
    4e28:	2b1f      	cmp	r3, #31
    4e2a:	d80f      	bhi.n	4e4c <getCoreDividerConfig+0x38>
    4e2c:	9b01      	ldr	r3, [sp, #4]
    4e2e:	2b1d      	cmp	r3, #29
    4e30:	d003      	beq.n	4e3a <getCoreDividerConfig+0x26>
    4e32:	9b01      	ldr	r3, [sp, #4]
    4e34:	2b1e      	cmp	r3, #30
    4e36:	d003      	beq.n	4e40 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4e38:	e008      	b.n	4e4c <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4e3a:	2300      	movs	r3, #0
    4e3c:	9304      	str	r3, [sp, #16]
            break;
    4e3e:	e006      	b.n	4e4e <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4e40:	2301      	movs	r3, #1
    4e42:	9304      	str	r3, [sp, #16]
            break;
    4e44:	e003      	b.n	4e4e <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4e46:	2302      	movs	r3, #2
    4e48:	9304      	str	r3, [sp, #16]
            break;
    4e4a:	e000      	b.n	4e4e <getCoreDividerConfig+0x3a>
                break;
    4e4c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4e4e:	4b41      	ldr	r3, [pc, #260]	; (4f54 <getCoreDividerConfig+0x140>)
    4e50:	681b      	ldr	r3, [r3, #0]
    4e52:	2b00      	cmp	r3, #0
    4e54:	d026      	beq.n	4ea4 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e56:	2300      	movs	r3, #0
    4e58:	9303      	str	r3, [sp, #12]
    4e5a:	e01c      	b.n	4e96 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4e5c:	4b3d      	ldr	r3, [pc, #244]	; (4f54 <getCoreDividerConfig+0x140>)
    4e5e:	6819      	ldr	r1, [r3, #0]
    4e60:	9a03      	ldr	r2, [sp, #12]
    4e62:	4613      	mov	r3, r2
    4e64:	005b      	lsls	r3, r3, #1
    4e66:	4413      	add	r3, r2
    4e68:	009b      	lsls	r3, r3, #2
    4e6a:	440b      	add	r3, r1
    4e6c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e70:	681b      	ldr	r3, [r3, #0]
    4e72:	9a01      	ldr	r2, [sp, #4]
    4e74:	429a      	cmp	r2, r3
    4e76:	d10b      	bne.n	4e90 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4e78:	4b36      	ldr	r3, [pc, #216]	; (4f54 <getCoreDividerConfig+0x140>)
    4e7a:	6819      	ldr	r1, [r3, #0]
    4e7c:	9a03      	ldr	r2, [sp, #12]
    4e7e:	4613      	mov	r3, r2
    4e80:	005b      	lsls	r3, r3, #1
    4e82:	4413      	add	r3, r2
    4e84:	009b      	lsls	r3, r3, #2
    4e86:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e8a:	440b      	add	r3, r1
    4e8c:	9305      	str	r3, [sp, #20]
                break;
    4e8e:	e009      	b.n	4ea4 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e90:	9b03      	ldr	r3, [sp, #12]
    4e92:	3301      	adds	r3, #1
    4e94:	9303      	str	r3, [sp, #12]
    4e96:	4b2f      	ldr	r3, [pc, #188]	; (4f54 <getCoreDividerConfig+0x140>)
    4e98:	681b      	ldr	r3, [r3, #0]
    4e9a:	7b1b      	ldrb	r3, [r3, #12]
    4e9c:	461a      	mov	r2, r3
    4e9e:	9b03      	ldr	r3, [sp, #12]
    4ea0:	4293      	cmp	r3, r2
    4ea2:	d3db      	bcc.n	4e5c <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4ea4:	9b05      	ldr	r3, [sp, #20]
    4ea6:	2b00      	cmp	r3, #0
    4ea8:	d14d      	bne.n	4f46 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4eaa:	9a04      	ldr	r2, [sp, #16]
    4eac:	4613      	mov	r3, r2
    4eae:	005b      	lsls	r3, r3, #1
    4eb0:	4413      	add	r3, r2
    4eb2:	009b      	lsls	r3, r3, #2
    4eb4:	4a28      	ldr	r2, [pc, #160]	; (4f58 <getCoreDividerConfig+0x144>)
    4eb6:	4413      	add	r3, r2
    4eb8:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4eba:	4927      	ldr	r1, [pc, #156]	; (4f58 <getCoreDividerConfig+0x144>)
    4ebc:	9a04      	ldr	r2, [sp, #16]
    4ebe:	4613      	mov	r3, r2
    4ec0:	005b      	lsls	r3, r3, #1
    4ec2:	4413      	add	r3, r2
    4ec4:	009b      	lsls	r3, r3, #2
    4ec6:	440b      	add	r3, r1
    4ec8:	9a01      	ldr	r2, [sp, #4]
    4eca:	601a      	str	r2, [r3, #0]
        switch(Name)
    4ecc:	9b01      	ldr	r3, [sp, #4]
    4ece:	2b1f      	cmp	r3, #31
    4ed0:	d029      	beq.n	4f26 <getCoreDividerConfig+0x112>
    4ed2:	9b01      	ldr	r3, [sp, #4]
    4ed4:	2b1f      	cmp	r3, #31
    4ed6:	d838      	bhi.n	4f4a <getCoreDividerConfig+0x136>
    4ed8:	9b01      	ldr	r3, [sp, #4]
    4eda:	2b1d      	cmp	r3, #29
    4edc:	d003      	beq.n	4ee6 <getCoreDividerConfig+0xd2>
    4ede:	9b01      	ldr	r3, [sp, #4]
    4ee0:	2b1e      	cmp	r3, #30
    4ee2:	d010      	beq.n	4f06 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4ee4:	e031      	b.n	4f4a <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4ee6:	4b1d      	ldr	r3, [pc, #116]	; (4f5c <getCoreDividerConfig+0x148>)
    4ee8:	695b      	ldr	r3, [r3, #20]
    4eea:	0c1b      	lsrs	r3, r3, #16
    4eec:	f003 030f 	and.w	r3, r3, #15
    4ef0:	1c59      	adds	r1, r3, #1
    4ef2:	4819      	ldr	r0, [pc, #100]	; (4f58 <getCoreDividerConfig+0x144>)
    4ef4:	9a04      	ldr	r2, [sp, #16]
    4ef6:	4613      	mov	r3, r2
    4ef8:	005b      	lsls	r3, r3, #1
    4efa:	4413      	add	r3, r2
    4efc:	009b      	lsls	r3, r3, #2
    4efe:	4403      	add	r3, r0
    4f00:	3304      	adds	r3, #4
    4f02:	6019      	str	r1, [r3, #0]
                break;
    4f04:	e022      	b.n	4f4c <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4f06:	4b15      	ldr	r3, [pc, #84]	; (4f5c <getCoreDividerConfig+0x148>)
    4f08:	699b      	ldr	r3, [r3, #24]
    4f0a:	0c1b      	lsrs	r3, r3, #16
    4f0c:	f003 030f 	and.w	r3, r3, #15
    4f10:	1c59      	adds	r1, r3, #1
    4f12:	4811      	ldr	r0, [pc, #68]	; (4f58 <getCoreDividerConfig+0x144>)
    4f14:	9a04      	ldr	r2, [sp, #16]
    4f16:	4613      	mov	r3, r2
    4f18:	005b      	lsls	r3, r3, #1
    4f1a:	4413      	add	r3, r2
    4f1c:	009b      	lsls	r3, r3, #2
    4f1e:	4403      	add	r3, r0
    4f20:	3304      	adds	r3, #4
    4f22:	6019      	str	r1, [r3, #0]
                break;
    4f24:	e012      	b.n	4f4c <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4f26:	4b0d      	ldr	r3, [pc, #52]	; (4f5c <getCoreDividerConfig+0x148>)
    4f28:	69db      	ldr	r3, [r3, #28]
    4f2a:	0c1b      	lsrs	r3, r3, #16
    4f2c:	f003 030f 	and.w	r3, r3, #15
    4f30:	1c59      	adds	r1, r3, #1
    4f32:	4809      	ldr	r0, [pc, #36]	; (4f58 <getCoreDividerConfig+0x144>)
    4f34:	9a04      	ldr	r2, [sp, #16]
    4f36:	4613      	mov	r3, r2
    4f38:	005b      	lsls	r3, r3, #1
    4f3a:	4413      	add	r3, r2
    4f3c:	009b      	lsls	r3, r3, #2
    4f3e:	4403      	add	r3, r0
    4f40:	3304      	adds	r3, #4
    4f42:	6019      	str	r1, [r3, #0]
                break;
    4f44:	e002      	b.n	4f4c <getCoreDividerConfig+0x138>
        }
    }
    4f46:	bf00      	nop
    4f48:	e000      	b.n	4f4c <getCoreDividerConfig+0x138>
                break;
    4f4a:	bf00      	nop

    return ReturnValue;
    4f4c:	9b05      	ldr	r3, [sp, #20]
}
    4f4e:	4618      	mov	r0, r3
    4f50:	b006      	add	sp, #24
    4f52:	4770      	bx	lr
    4f54:	1fff8b98 	.word	0x1fff8b98
    4f58:	1fff8c64 	.word	0x1fff8c64
    4f5c:	40064000 	.word	0x40064000

00004f60 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4f60:	b086      	sub	sp, #24
    4f62:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4f64:	2300      	movs	r3, #0
    4f66:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4f68:	2300      	movs	r3, #0
    4f6a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4f6c:	9b01      	ldr	r3, [sp, #4]
    4f6e:	2b23      	cmp	r3, #35	; 0x23
    4f70:	d00f      	beq.n	4f92 <getBusDividerConfig+0x32>
    4f72:	9b01      	ldr	r3, [sp, #4]
    4f74:	2b23      	cmp	r3, #35	; 0x23
    4f76:	d80f      	bhi.n	4f98 <getBusDividerConfig+0x38>
    4f78:	9b01      	ldr	r3, [sp, #4]
    4f7a:	2b21      	cmp	r3, #33	; 0x21
    4f7c:	d003      	beq.n	4f86 <getBusDividerConfig+0x26>
    4f7e:	9b01      	ldr	r3, [sp, #4]
    4f80:	2b22      	cmp	r3, #34	; 0x22
    4f82:	d003      	beq.n	4f8c <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4f84:	e008      	b.n	4f98 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4f86:	2300      	movs	r3, #0
    4f88:	9304      	str	r3, [sp, #16]
            break;
    4f8a:	e006      	b.n	4f9a <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4f8c:	2301      	movs	r3, #1
    4f8e:	9304      	str	r3, [sp, #16]
            break;
    4f90:	e003      	b.n	4f9a <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4f92:	2302      	movs	r3, #2
    4f94:	9304      	str	r3, [sp, #16]
            break;
    4f96:	e000      	b.n	4f9a <getBusDividerConfig+0x3a>
                break;
    4f98:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4f9a:	4b41      	ldr	r3, [pc, #260]	; (50a0 <getBusDividerConfig+0x140>)
    4f9c:	681b      	ldr	r3, [r3, #0]
    4f9e:	2b00      	cmp	r3, #0
    4fa0:	d026      	beq.n	4ff0 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4fa2:	2300      	movs	r3, #0
    4fa4:	9303      	str	r3, [sp, #12]
    4fa6:	e01c      	b.n	4fe2 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4fa8:	4b3d      	ldr	r3, [pc, #244]	; (50a0 <getBusDividerConfig+0x140>)
    4faa:	6819      	ldr	r1, [r3, #0]
    4fac:	9a03      	ldr	r2, [sp, #12]
    4fae:	4613      	mov	r3, r2
    4fb0:	005b      	lsls	r3, r3, #1
    4fb2:	4413      	add	r3, r2
    4fb4:	009b      	lsls	r3, r3, #2
    4fb6:	440b      	add	r3, r1
    4fb8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4fbc:	681b      	ldr	r3, [r3, #0]
    4fbe:	9a01      	ldr	r2, [sp, #4]
    4fc0:	429a      	cmp	r2, r3
    4fc2:	d10b      	bne.n	4fdc <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4fc4:	4b36      	ldr	r3, [pc, #216]	; (50a0 <getBusDividerConfig+0x140>)
    4fc6:	6819      	ldr	r1, [r3, #0]
    4fc8:	9a03      	ldr	r2, [sp, #12]
    4fca:	4613      	mov	r3, r2
    4fcc:	005b      	lsls	r3, r3, #1
    4fce:	4413      	add	r3, r2
    4fd0:	009b      	lsls	r3, r3, #2
    4fd2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4fd6:	440b      	add	r3, r1
    4fd8:	9305      	str	r3, [sp, #20]
                break;
    4fda:	e009      	b.n	4ff0 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4fdc:	9b03      	ldr	r3, [sp, #12]
    4fde:	3301      	adds	r3, #1
    4fe0:	9303      	str	r3, [sp, #12]
    4fe2:	4b2f      	ldr	r3, [pc, #188]	; (50a0 <getBusDividerConfig+0x140>)
    4fe4:	681b      	ldr	r3, [r3, #0]
    4fe6:	7b1b      	ldrb	r3, [r3, #12]
    4fe8:	461a      	mov	r2, r3
    4fea:	9b03      	ldr	r3, [sp, #12]
    4fec:	4293      	cmp	r3, r2
    4fee:	d3db      	bcc.n	4fa8 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4ff0:	9b05      	ldr	r3, [sp, #20]
    4ff2:	2b00      	cmp	r3, #0
    4ff4:	d14d      	bne.n	5092 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4ff6:	9a04      	ldr	r2, [sp, #16]
    4ff8:	4613      	mov	r3, r2
    4ffa:	005b      	lsls	r3, r3, #1
    4ffc:	4413      	add	r3, r2
    4ffe:	009b      	lsls	r3, r3, #2
    5000:	4a28      	ldr	r2, [pc, #160]	; (50a4 <getBusDividerConfig+0x144>)
    5002:	4413      	add	r3, r2
    5004:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    5006:	4927      	ldr	r1, [pc, #156]	; (50a4 <getBusDividerConfig+0x144>)
    5008:	9a04      	ldr	r2, [sp, #16]
    500a:	4613      	mov	r3, r2
    500c:	005b      	lsls	r3, r3, #1
    500e:	4413      	add	r3, r2
    5010:	009b      	lsls	r3, r3, #2
    5012:	440b      	add	r3, r1
    5014:	9a01      	ldr	r2, [sp, #4]
    5016:	601a      	str	r2, [r3, #0]
        switch(Name)
    5018:	9b01      	ldr	r3, [sp, #4]
    501a:	2b23      	cmp	r3, #35	; 0x23
    501c:	d029      	beq.n	5072 <getBusDividerConfig+0x112>
    501e:	9b01      	ldr	r3, [sp, #4]
    5020:	2b23      	cmp	r3, #35	; 0x23
    5022:	d838      	bhi.n	5096 <getBusDividerConfig+0x136>
    5024:	9b01      	ldr	r3, [sp, #4]
    5026:	2b21      	cmp	r3, #33	; 0x21
    5028:	d003      	beq.n	5032 <getBusDividerConfig+0xd2>
    502a:	9b01      	ldr	r3, [sp, #4]
    502c:	2b22      	cmp	r3, #34	; 0x22
    502e:	d010      	beq.n	5052 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5030:	e031      	b.n	5096 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    5032:	4b1d      	ldr	r3, [pc, #116]	; (50a8 <getBusDividerConfig+0x148>)
    5034:	695b      	ldr	r3, [r3, #20]
    5036:	091b      	lsrs	r3, r3, #4
    5038:	f003 030f 	and.w	r3, r3, #15
    503c:	1c59      	adds	r1, r3, #1
    503e:	4819      	ldr	r0, [pc, #100]	; (50a4 <getBusDividerConfig+0x144>)
    5040:	9a04      	ldr	r2, [sp, #16]
    5042:	4613      	mov	r3, r2
    5044:	005b      	lsls	r3, r3, #1
    5046:	4413      	add	r3, r2
    5048:	009b      	lsls	r3, r3, #2
    504a:	4403      	add	r3, r0
    504c:	3304      	adds	r3, #4
    504e:	6019      	str	r1, [r3, #0]
                break;
    5050:	e022      	b.n	5098 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    5052:	4b15      	ldr	r3, [pc, #84]	; (50a8 <getBusDividerConfig+0x148>)
    5054:	699b      	ldr	r3, [r3, #24]
    5056:	091b      	lsrs	r3, r3, #4
    5058:	f003 030f 	and.w	r3, r3, #15
    505c:	1c59      	adds	r1, r3, #1
    505e:	4811      	ldr	r0, [pc, #68]	; (50a4 <getBusDividerConfig+0x144>)
    5060:	9a04      	ldr	r2, [sp, #16]
    5062:	4613      	mov	r3, r2
    5064:	005b      	lsls	r3, r3, #1
    5066:	4413      	add	r3, r2
    5068:	009b      	lsls	r3, r3, #2
    506a:	4403      	add	r3, r0
    506c:	3304      	adds	r3, #4
    506e:	6019      	str	r1, [r3, #0]
                break;
    5070:	e012      	b.n	5098 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    5072:	4b0d      	ldr	r3, [pc, #52]	; (50a8 <getBusDividerConfig+0x148>)
    5074:	69db      	ldr	r3, [r3, #28]
    5076:	091b      	lsrs	r3, r3, #4
    5078:	f003 030f 	and.w	r3, r3, #15
    507c:	1c59      	adds	r1, r3, #1
    507e:	4809      	ldr	r0, [pc, #36]	; (50a4 <getBusDividerConfig+0x144>)
    5080:	9a04      	ldr	r2, [sp, #16]
    5082:	4613      	mov	r3, r2
    5084:	005b      	lsls	r3, r3, #1
    5086:	4413      	add	r3, r2
    5088:	009b      	lsls	r3, r3, #2
    508a:	4403      	add	r3, r0
    508c:	3304      	adds	r3, #4
    508e:	6019      	str	r1, [r3, #0]
                break;
    5090:	e002      	b.n	5098 <getBusDividerConfig+0x138>
        }
    }
    5092:	bf00      	nop
    5094:	e000      	b.n	5098 <getBusDividerConfig+0x138>
                break;
    5096:	bf00      	nop

    return ReturnValue;
    5098:	9b05      	ldr	r3, [sp, #20]
}
    509a:	4618      	mov	r0, r3
    509c:	b006      	add	sp, #24
    509e:	4770      	bx	lr
    50a0:	1fff8b98 	.word	0x1fff8b98
    50a4:	1fff8c88 	.word	0x1fff8c88
    50a8:	40064000 	.word	0x40064000

000050ac <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    50ac:	b086      	sub	sp, #24
    50ae:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    50b0:	2300      	movs	r3, #0
    50b2:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    50b4:	2300      	movs	r3, #0
    50b6:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    50b8:	9b01      	ldr	r3, [sp, #4]
    50ba:	2b27      	cmp	r3, #39	; 0x27
    50bc:	d00f      	beq.n	50de <getSlowDividerConfig+0x32>
    50be:	9b01      	ldr	r3, [sp, #4]
    50c0:	2b27      	cmp	r3, #39	; 0x27
    50c2:	d80f      	bhi.n	50e4 <getSlowDividerConfig+0x38>
    50c4:	9b01      	ldr	r3, [sp, #4]
    50c6:	2b25      	cmp	r3, #37	; 0x25
    50c8:	d003      	beq.n	50d2 <getSlowDividerConfig+0x26>
    50ca:	9b01      	ldr	r3, [sp, #4]
    50cc:	2b26      	cmp	r3, #38	; 0x26
    50ce:	d003      	beq.n	50d8 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    50d0:	e008      	b.n	50e4 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    50d2:	2300      	movs	r3, #0
    50d4:	9304      	str	r3, [sp, #16]
            break;
    50d6:	e006      	b.n	50e6 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    50d8:	2301      	movs	r3, #1
    50da:	9304      	str	r3, [sp, #16]
            break;
    50dc:	e003      	b.n	50e6 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    50de:	2302      	movs	r3, #2
    50e0:	9304      	str	r3, [sp, #16]
            break;
    50e2:	e000      	b.n	50e6 <getSlowDividerConfig+0x3a>
                break;
    50e4:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    50e6:	4b40      	ldr	r3, [pc, #256]	; (51e8 <getSlowDividerConfig+0x13c>)
    50e8:	681b      	ldr	r3, [r3, #0]
    50ea:	2b00      	cmp	r3, #0
    50ec:	d026      	beq.n	513c <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    50ee:	2300      	movs	r3, #0
    50f0:	9303      	str	r3, [sp, #12]
    50f2:	e01c      	b.n	512e <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    50f4:	4b3c      	ldr	r3, [pc, #240]	; (51e8 <getSlowDividerConfig+0x13c>)
    50f6:	6819      	ldr	r1, [r3, #0]
    50f8:	9a03      	ldr	r2, [sp, #12]
    50fa:	4613      	mov	r3, r2
    50fc:	005b      	lsls	r3, r3, #1
    50fe:	4413      	add	r3, r2
    5100:	009b      	lsls	r3, r3, #2
    5102:	440b      	add	r3, r1
    5104:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5108:	681b      	ldr	r3, [r3, #0]
    510a:	9a01      	ldr	r2, [sp, #4]
    510c:	429a      	cmp	r2, r3
    510e:	d10b      	bne.n	5128 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5110:	4b35      	ldr	r3, [pc, #212]	; (51e8 <getSlowDividerConfig+0x13c>)
    5112:	6819      	ldr	r1, [r3, #0]
    5114:	9a03      	ldr	r2, [sp, #12]
    5116:	4613      	mov	r3, r2
    5118:	005b      	lsls	r3, r3, #1
    511a:	4413      	add	r3, r2
    511c:	009b      	lsls	r3, r3, #2
    511e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5122:	440b      	add	r3, r1
    5124:	9305      	str	r3, [sp, #20]
                break;
    5126:	e009      	b.n	513c <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5128:	9b03      	ldr	r3, [sp, #12]
    512a:	3301      	adds	r3, #1
    512c:	9303      	str	r3, [sp, #12]
    512e:	4b2e      	ldr	r3, [pc, #184]	; (51e8 <getSlowDividerConfig+0x13c>)
    5130:	681b      	ldr	r3, [r3, #0]
    5132:	7b1b      	ldrb	r3, [r3, #12]
    5134:	461a      	mov	r2, r3
    5136:	9b03      	ldr	r3, [sp, #12]
    5138:	4293      	cmp	r3, r2
    513a:	d3db      	bcc.n	50f4 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    513c:	9b05      	ldr	r3, [sp, #20]
    513e:	2b00      	cmp	r3, #0
    5140:	d14a      	bne.n	51d8 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    5142:	9a04      	ldr	r2, [sp, #16]
    5144:	4613      	mov	r3, r2
    5146:	005b      	lsls	r3, r3, #1
    5148:	4413      	add	r3, r2
    514a:	009b      	lsls	r3, r3, #2
    514c:	4a27      	ldr	r2, [pc, #156]	; (51ec <getSlowDividerConfig+0x140>)
    514e:	4413      	add	r3, r2
    5150:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    5152:	4926      	ldr	r1, [pc, #152]	; (51ec <getSlowDividerConfig+0x140>)
    5154:	9a04      	ldr	r2, [sp, #16]
    5156:	4613      	mov	r3, r2
    5158:	005b      	lsls	r3, r3, #1
    515a:	4413      	add	r3, r2
    515c:	009b      	lsls	r3, r3, #2
    515e:	440b      	add	r3, r1
    5160:	9a01      	ldr	r2, [sp, #4]
    5162:	601a      	str	r2, [r3, #0]
        switch(Name)
    5164:	9b01      	ldr	r3, [sp, #4]
    5166:	2b27      	cmp	r3, #39	; 0x27
    5168:	d027      	beq.n	51ba <getSlowDividerConfig+0x10e>
    516a:	9b01      	ldr	r3, [sp, #4]
    516c:	2b27      	cmp	r3, #39	; 0x27
    516e:	d835      	bhi.n	51dc <getSlowDividerConfig+0x130>
    5170:	9b01      	ldr	r3, [sp, #4]
    5172:	2b25      	cmp	r3, #37	; 0x25
    5174:	d003      	beq.n	517e <getSlowDividerConfig+0xd2>
    5176:	9b01      	ldr	r3, [sp, #4]
    5178:	2b26      	cmp	r3, #38	; 0x26
    517a:	d00f      	beq.n	519c <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    517c:	e02e      	b.n	51dc <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    517e:	4b1c      	ldr	r3, [pc, #112]	; (51f0 <getSlowDividerConfig+0x144>)
    5180:	695b      	ldr	r3, [r3, #20]
    5182:	f003 030f 	and.w	r3, r3, #15
    5186:	1c59      	adds	r1, r3, #1
    5188:	4818      	ldr	r0, [pc, #96]	; (51ec <getSlowDividerConfig+0x140>)
    518a:	9a04      	ldr	r2, [sp, #16]
    518c:	4613      	mov	r3, r2
    518e:	005b      	lsls	r3, r3, #1
    5190:	4413      	add	r3, r2
    5192:	009b      	lsls	r3, r3, #2
    5194:	4403      	add	r3, r0
    5196:	3304      	adds	r3, #4
    5198:	6019      	str	r1, [r3, #0]
                break;
    519a:	e020      	b.n	51de <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    519c:	4b14      	ldr	r3, [pc, #80]	; (51f0 <getSlowDividerConfig+0x144>)
    519e:	699b      	ldr	r3, [r3, #24]
    51a0:	f003 030f 	and.w	r3, r3, #15
    51a4:	1c59      	adds	r1, r3, #1
    51a6:	4811      	ldr	r0, [pc, #68]	; (51ec <getSlowDividerConfig+0x140>)
    51a8:	9a04      	ldr	r2, [sp, #16]
    51aa:	4613      	mov	r3, r2
    51ac:	005b      	lsls	r3, r3, #1
    51ae:	4413      	add	r3, r2
    51b0:	009b      	lsls	r3, r3, #2
    51b2:	4403      	add	r3, r0
    51b4:	3304      	adds	r3, #4
    51b6:	6019      	str	r1, [r3, #0]
                break;
    51b8:	e011      	b.n	51de <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    51ba:	4b0d      	ldr	r3, [pc, #52]	; (51f0 <getSlowDividerConfig+0x144>)
    51bc:	69db      	ldr	r3, [r3, #28]
    51be:	f003 030f 	and.w	r3, r3, #15
    51c2:	1c59      	adds	r1, r3, #1
    51c4:	4809      	ldr	r0, [pc, #36]	; (51ec <getSlowDividerConfig+0x140>)
    51c6:	9a04      	ldr	r2, [sp, #16]
    51c8:	4613      	mov	r3, r2
    51ca:	005b      	lsls	r3, r3, #1
    51cc:	4413      	add	r3, r2
    51ce:	009b      	lsls	r3, r3, #2
    51d0:	4403      	add	r3, r0
    51d2:	3304      	adds	r3, #4
    51d4:	6019      	str	r1, [r3, #0]
                break;
    51d6:	e002      	b.n	51de <getSlowDividerConfig+0x132>
        }
    }
    51d8:	bf00      	nop
    51da:	e000      	b.n	51de <getSlowDividerConfig+0x132>
                break;
    51dc:	bf00      	nop

    return ReturnValue;
    51de:	9b05      	ldr	r3, [sp, #20]
}
    51e0:	4618      	mov	r0, r3
    51e2:	b006      	add	sp, #24
    51e4:	4770      	bx	lr
    51e6:	bf00      	nop
    51e8:	1fff8b98 	.word	0x1fff8b98
    51ec:	1fff8cac 	.word	0x1fff8cac
    51f0:	40064000 	.word	0x40064000

000051f4 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    51f4:	b500      	push	{lr}
    51f6:	b083      	sub	sp, #12
    51f8:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    51fa:	4b64      	ldr	r3, [pc, #400]	; (538c <Clock_Ip_ClockInitializeObjects+0x198>)
    51fc:	781b      	ldrb	r3, [r3, #0]
    51fe:	f083 0301 	eor.w	r3, r3, #1
    5202:	b2db      	uxtb	r3, r3
    5204:	2b00      	cmp	r3, #0
    5206:	d05b      	beq.n	52c0 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5208:	4b60      	ldr	r3, [pc, #384]	; (538c <Clock_Ip_ClockInitializeObjects+0x198>)
    520a:	2201      	movs	r2, #1
    520c:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    520e:	4b60      	ldr	r3, [pc, #384]	; (5390 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5210:	785b      	ldrb	r3, [r3, #1]
    5212:	461a      	mov	r2, r3
    5214:	4613      	mov	r3, r2
    5216:	009b      	lsls	r3, r3, #2
    5218:	4413      	add	r3, r2
    521a:	009b      	lsls	r3, r3, #2
    521c:	4a5d      	ldr	r2, [pc, #372]	; (5394 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    521e:	4413      	add	r3, r2
    5220:	4a5d      	ldr	r2, [pc, #372]	; (5398 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    5222:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5224:	4b5d      	ldr	r3, [pc, #372]	; (539c <Clock_Ip_ClockInitializeObjects+0x1a8>)
    5226:	785b      	ldrb	r3, [r3, #1]
    5228:	461a      	mov	r2, r3
    522a:	4613      	mov	r3, r2
    522c:	009b      	lsls	r3, r3, #2
    522e:	4413      	add	r3, r2
    5230:	009b      	lsls	r3, r3, #2
    5232:	4a5b      	ldr	r2, [pc, #364]	; (53a0 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5234:	4413      	add	r3, r2
    5236:	4a5b      	ldr	r2, [pc, #364]	; (53a4 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5238:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    523a:	4b5b      	ldr	r3, [pc, #364]	; (53a8 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    523c:	791b      	ldrb	r3, [r3, #4]
    523e:	461a      	mov	r2, r3
    5240:	4613      	mov	r3, r2
    5242:	005b      	lsls	r3, r3, #1
    5244:	4413      	add	r3, r2
    5246:	009b      	lsls	r3, r3, #2
    5248:	4a58      	ldr	r2, [pc, #352]	; (53ac <Clock_Ip_ClockInitializeObjects+0x1b8>)
    524a:	4413      	add	r3, r2
    524c:	4a58      	ldr	r2, [pc, #352]	; (53b0 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    524e:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5250:	4b58      	ldr	r3, [pc, #352]	; (53b4 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5252:	795b      	ldrb	r3, [r3, #5]
    5254:	00db      	lsls	r3, r3, #3
    5256:	4a58      	ldr	r2, [pc, #352]	; (53b8 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5258:	4413      	add	r3, r2
    525a:	4a58      	ldr	r2, [pc, #352]	; (53bc <Clock_Ip_ClockInitializeObjects+0x1c8>)
    525c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    525e:	4b55      	ldr	r3, [pc, #340]	; (53b4 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5260:	79db      	ldrb	r3, [r3, #7]
    5262:	00db      	lsls	r3, r3, #3
    5264:	4a54      	ldr	r2, [pc, #336]	; (53b8 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5266:	4413      	add	r3, r2
    5268:	4a55      	ldr	r2, [pc, #340]	; (53c0 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    526a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    526c:	4b55      	ldr	r3, [pc, #340]	; (53c4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    526e:	799b      	ldrb	r3, [r3, #6]
    5270:	009b      	lsls	r3, r3, #2
    5272:	4a55      	ldr	r2, [pc, #340]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5274:	4413      	add	r3, r2
    5276:	4a55      	ldr	r2, [pc, #340]	; (53cc <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5278:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    527a:	4b52      	ldr	r3, [pc, #328]	; (53c4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    527c:	7a1b      	ldrb	r3, [r3, #8]
    527e:	009b      	lsls	r3, r3, #2
    5280:	4a51      	ldr	r2, [pc, #324]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5282:	4413      	add	r3, r2
    5284:	4a52      	ldr	r2, [pc, #328]	; (53d0 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    5286:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    5288:	4b4e      	ldr	r3, [pc, #312]	; (53c4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    528a:	7a5b      	ldrb	r3, [r3, #9]
    528c:	009b      	lsls	r3, r3, #2
    528e:	4a4e      	ldr	r2, [pc, #312]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5290:	4413      	add	r3, r2
    5292:	4a50      	ldr	r2, [pc, #320]	; (53d4 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    5294:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    5296:	4b4b      	ldr	r3, [pc, #300]	; (53c4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5298:	7adb      	ldrb	r3, [r3, #11]
    529a:	009b      	lsls	r3, r3, #2
    529c:	4a4a      	ldr	r2, [pc, #296]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    529e:	4413      	add	r3, r2
    52a0:	4a4d      	ldr	r2, [pc, #308]	; (53d8 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    52a2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    52a4:	4b47      	ldr	r3, [pc, #284]	; (53c4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52a6:	7b1b      	ldrb	r3, [r3, #12]
    52a8:	009b      	lsls	r3, r3, #2
    52aa:	4a47      	ldr	r2, [pc, #284]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52ac:	4413      	add	r3, r2
    52ae:	4a4b      	ldr	r2, [pc, #300]	; (53dc <Clock_Ip_ClockInitializeObjects+0x1e8>)
    52b0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    52b2:	4b44      	ldr	r3, [pc, #272]	; (53c4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52b4:	7b9b      	ldrb	r3, [r3, #14]
    52b6:	009b      	lsls	r3, r3, #2
    52b8:	4a43      	ldr	r2, [pc, #268]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52ba:	4413      	add	r3, r2
    52bc:	4a48      	ldr	r2, [pc, #288]	; (53e0 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    52be:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    52c0:	4b48      	ldr	r3, [pc, #288]	; (53e4 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    52c2:	781b      	ldrb	r3, [r3, #0]
    52c4:	2b00      	cmp	r3, #0
    52c6:	d002      	beq.n	52ce <Clock_Ip_ClockInitializeObjects+0xda>
    52c8:	9b01      	ldr	r3, [sp, #4]
    52ca:	2b00      	cmp	r3, #0
    52cc:	d003      	beq.n	52d6 <Clock_Ip_ClockInitializeObjects+0xe2>
    52ce:	4b46      	ldr	r3, [pc, #280]	; (53e8 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    52d0:	781b      	ldrb	r3, [r3, #0]
    52d2:	2b00      	cmp	r3, #0
    52d4:	d056      	beq.n	5384 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    52d6:	f7ff fc09 	bl	4aec <getFircConfig>
    52da:	4603      	mov	r3, r0
    52dc:	4a43      	ldr	r2, [pc, #268]	; (53ec <Clock_Ip_ClockInitializeObjects+0x1f8>)
    52de:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    52e0:	f7ff fc60 	bl	4ba4 <getSoscConfig>
    52e4:	4603      	mov	r3, r0
    52e6:	4a42      	ldr	r2, [pc, #264]	; (53f0 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    52e8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    52ea:	f7ff fca7 	bl	4c3c <getSpllConfig>
    52ee:	4603      	mov	r3, r0
    52f0:	4a40      	ldr	r2, [pc, #256]	; (53f4 <Clock_Ip_ClockInitializeObjects+0x200>)
    52f2:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    52f4:	2019      	movs	r0, #25
    52f6:	f7ff fcfb 	bl	4cf0 <getSelectorConfig>
    52fa:	4603      	mov	r3, r0
    52fc:	4a3e      	ldr	r2, [pc, #248]	; (53f8 <Clock_Ip_ClockInitializeObjects+0x204>)
    52fe:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5300:	201a      	movs	r0, #26
    5302:	f7ff fcf5 	bl	4cf0 <getSelectorConfig>
    5306:	4603      	mov	r3, r0
    5308:	4a3c      	ldr	r2, [pc, #240]	; (53fc <Clock_Ip_ClockInitializeObjects+0x208>)
    530a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    530c:	201b      	movs	r0, #27
    530e:	f7ff fcef 	bl	4cf0 <getSelectorConfig>
    5312:	4603      	mov	r3, r0
    5314:	4a3a      	ldr	r2, [pc, #232]	; (5400 <Clock_Ip_ClockInitializeObjects+0x20c>)
    5316:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5318:	201d      	movs	r0, #29
    531a:	f7ff fd7b 	bl	4e14 <getCoreDividerConfig>
    531e:	4603      	mov	r3, r0
    5320:	4a38      	ldr	r2, [pc, #224]	; (5404 <Clock_Ip_ClockInitializeObjects+0x210>)
    5322:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5324:	201e      	movs	r0, #30
    5326:	f7ff fd75 	bl	4e14 <getCoreDividerConfig>
    532a:	4603      	mov	r3, r0
    532c:	4a36      	ldr	r2, [pc, #216]	; (5408 <Clock_Ip_ClockInitializeObjects+0x214>)
    532e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5330:	201f      	movs	r0, #31
    5332:	f7ff fd6f 	bl	4e14 <getCoreDividerConfig>
    5336:	4603      	mov	r3, r0
    5338:	4a34      	ldr	r2, [pc, #208]	; (540c <Clock_Ip_ClockInitializeObjects+0x218>)
    533a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    533c:	2021      	movs	r0, #33	; 0x21
    533e:	f7ff fe0f 	bl	4f60 <getBusDividerConfig>
    5342:	4603      	mov	r3, r0
    5344:	4a32      	ldr	r2, [pc, #200]	; (5410 <Clock_Ip_ClockInitializeObjects+0x21c>)
    5346:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5348:	2022      	movs	r0, #34	; 0x22
    534a:	f7ff fe09 	bl	4f60 <getBusDividerConfig>
    534e:	4603      	mov	r3, r0
    5350:	4a30      	ldr	r2, [pc, #192]	; (5414 <Clock_Ip_ClockInitializeObjects+0x220>)
    5352:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    5354:	2023      	movs	r0, #35	; 0x23
    5356:	f7ff fe03 	bl	4f60 <getBusDividerConfig>
    535a:	4603      	mov	r3, r0
    535c:	4a2e      	ldr	r2, [pc, #184]	; (5418 <Clock_Ip_ClockInitializeObjects+0x224>)
    535e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    5360:	2025      	movs	r0, #37	; 0x25
    5362:	f7ff fea3 	bl	50ac <getSlowDividerConfig>
    5366:	4603      	mov	r3, r0
    5368:	4a2c      	ldr	r2, [pc, #176]	; (541c <Clock_Ip_ClockInitializeObjects+0x228>)
    536a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    536c:	2026      	movs	r0, #38	; 0x26
    536e:	f7ff fe9d 	bl	50ac <getSlowDividerConfig>
    5372:	4603      	mov	r3, r0
    5374:	4a2a      	ldr	r2, [pc, #168]	; (5420 <Clock_Ip_ClockInitializeObjects+0x22c>)
    5376:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5378:	2027      	movs	r0, #39	; 0x27
    537a:	f7ff fe97 	bl	50ac <getSlowDividerConfig>
    537e:	4603      	mov	r3, r0
    5380:	4a28      	ldr	r2, [pc, #160]	; (5424 <Clock_Ip_ClockInitializeObjects+0x230>)
    5382:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    5384:	bf00      	nop
    5386:	b003      	add	sp, #12
    5388:	f85d fb04 	ldr.w	pc, [sp], #4
    538c:	1fff8cd0 	.word	0x1fff8cd0
    5390:	000100f8 	.word	0x000100f8
    5394:	00010744 	.word	0x00010744
    5398:	1fff8b9c 	.word	0x1fff8b9c
    539c:	000100b8 	.word	0x000100b8
    53a0:	0001068c 	.word	0x0001068c
    53a4:	1fff8ba0 	.word	0x1fff8ba0
    53a8:	000100c8 	.word	0x000100c8
    53ac:	000106f8 	.word	0x000106f8
    53b0:	1fff8ba4 	.word	0x1fff8ba4
    53b4:	00010108 	.word	0x00010108
    53b8:	00010770 	.word	0x00010770
    53bc:	1fff8ba8 	.word	0x1fff8ba8
    53c0:	1fff8be4 	.word	0x1fff8be4
    53c4:	00010098 	.word	0x00010098
    53c8:	00010648 	.word	0x00010648
    53cc:	1fff8bac 	.word	0x1fff8bac
    53d0:	1fff8be8 	.word	0x1fff8be8
    53d4:	1fff8bb0 	.word	0x1fff8bb0
    53d8:	1fff8bec 	.word	0x1fff8bec
    53dc:	1fff8bb4 	.word	0x1fff8bb4
    53e0:	1fff8bf0 	.word	0x1fff8bf0
    53e4:	1fff8b19 	.word	0x1fff8b19
    53e8:	1fff8b10 	.word	0x1fff8b10
    53ec:	1fff8bb8 	.word	0x1fff8bb8
    53f0:	1fff8bbc 	.word	0x1fff8bbc
    53f4:	1fff8bc0 	.word	0x1fff8bc0
    53f8:	1fff8bc4 	.word	0x1fff8bc4
    53fc:	1fff8bc8 	.word	0x1fff8bc8
    5400:	1fff8bf4 	.word	0x1fff8bf4
    5404:	1fff8bcc 	.word	0x1fff8bcc
    5408:	1fff8bd0 	.word	0x1fff8bd0
    540c:	1fff8bf8 	.word	0x1fff8bf8
    5410:	1fff8bd4 	.word	0x1fff8bd4
    5414:	1fff8bd8 	.word	0x1fff8bd8
    5418:	1fff8bfc 	.word	0x1fff8bfc
    541c:	1fff8bdc 	.word	0x1fff8bdc
    5420:	1fff8be0 	.word	0x1fff8be0
    5424:	1fff8c00 	.word	0x1fff8c00

00005428 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5428:	b500      	push	{lr}
    542a:	b083      	sub	sp, #12
    542c:	9001      	str	r0, [sp, #4]
    542e:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5430:	9b01      	ldr	r3, [sp, #4]
    5432:	2b03      	cmp	r3, #3
    5434:	f000 8090 	beq.w	5558 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    5438:	9b01      	ldr	r3, [sp, #4]
    543a:	2b03      	cmp	r3, #3
    543c:	f200 80d3 	bhi.w	55e6 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5440:	9b01      	ldr	r3, [sp, #4]
    5442:	2b00      	cmp	r3, #0
    5444:	d040      	beq.n	54c8 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    5446:	9b01      	ldr	r3, [sp, #4]
    5448:	3b01      	subs	r3, #1
    544a:	2b01      	cmp	r3, #1
    544c:	f200 80cb 	bhi.w	55e6 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    5450:	9b00      	ldr	r3, [sp, #0]
    5452:	2b00      	cmp	r3, #0
    5454:	f040 80c9 	bne.w	55ea <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    5458:	4b68      	ldr	r3, [pc, #416]	; (55fc <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    545a:	2200      	movs	r2, #0
    545c:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    545e:	4b68      	ldr	r3, [pc, #416]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5460:	681b      	ldr	r3, [r3, #0]
    5462:	685b      	ldr	r3, [r3, #4]
    5464:	4a67      	ldr	r2, [pc, #412]	; (5604 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    5466:	6812      	ldr	r2, [r2, #0]
    5468:	4610      	mov	r0, r2
    546a:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    546c:	4b66      	ldr	r3, [pc, #408]	; (5608 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    546e:	681b      	ldr	r3, [r3, #0]
    5470:	681b      	ldr	r3, [r3, #0]
    5472:	4a66      	ldr	r2, [pc, #408]	; (560c <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    5474:	6812      	ldr	r2, [r2, #0]
    5476:	4610      	mov	r0, r2
    5478:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    547a:	4b65      	ldr	r3, [pc, #404]	; (5610 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    547c:	681b      	ldr	r3, [r3, #0]
    547e:	681b      	ldr	r3, [r3, #0]
    5480:	4a64      	ldr	r2, [pc, #400]	; (5614 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    5482:	6812      	ldr	r2, [r2, #0]
    5484:	4610      	mov	r0, r2
    5486:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    5488:	4b63      	ldr	r3, [pc, #396]	; (5618 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    548a:	681b      	ldr	r3, [r3, #0]
    548c:	681b      	ldr	r3, [r3, #0]
    548e:	4a63      	ldr	r2, [pc, #396]	; (561c <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    5490:	6812      	ldr	r2, [r2, #0]
    5492:	4610      	mov	r0, r2
    5494:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    5496:	4b62      	ldr	r3, [pc, #392]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5498:	681b      	ldr	r3, [r3, #0]
    549a:	691b      	ldr	r3, [r3, #16]
    549c:	4a61      	ldr	r2, [pc, #388]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    549e:	6812      	ldr	r2, [r2, #0]
    54a0:	6812      	ldr	r2, [r2, #0]
    54a2:	4610      	mov	r0, r2
    54a4:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    54a6:	4b60      	ldr	r3, [pc, #384]	; (5628 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54a8:	681b      	ldr	r3, [r3, #0]
    54aa:	68db      	ldr	r3, [r3, #12]
    54ac:	4a5f      	ldr	r2, [pc, #380]	; (562c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54ae:	6812      	ldr	r2, [r2, #0]
    54b0:	6812      	ldr	r2, [r2, #0]
    54b2:	4610      	mov	r0, r2
    54b4:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    54b6:	4b5e      	ldr	r3, [pc, #376]	; (5630 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    54b8:	681b      	ldr	r3, [r3, #0]
    54ba:	689b      	ldr	r3, [r3, #8]
    54bc:	4a5d      	ldr	r2, [pc, #372]	; (5634 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    54be:	6812      	ldr	r2, [r2, #0]
    54c0:	6812      	ldr	r2, [r2, #0]
    54c2:	4610      	mov	r0, r2
    54c4:	4798      	blx	r3
            }
        }
        break;
    54c6:	e090      	b.n	55ea <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    54c8:	9b00      	ldr	r3, [sp, #0]
    54ca:	2b02      	cmp	r3, #2
    54cc:	f040 808f 	bne.w	55ee <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    54d0:	4b4a      	ldr	r3, [pc, #296]	; (55fc <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    54d2:	2201      	movs	r2, #1
    54d4:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    54d6:	4b56      	ldr	r3, [pc, #344]	; (5630 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    54d8:	681b      	ldr	r3, [r3, #0]
    54da:	685b      	ldr	r3, [r3, #4]
    54dc:	4a55      	ldr	r2, [pc, #340]	; (5634 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    54de:	6812      	ldr	r2, [r2, #0]
    54e0:	4610      	mov	r0, r2
    54e2:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    54e4:	4b50      	ldr	r3, [pc, #320]	; (5628 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54e6:	681b      	ldr	r3, [r3, #0]
    54e8:	691b      	ldr	r3, [r3, #16]
    54ea:	4a50      	ldr	r2, [pc, #320]	; (562c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54ec:	6812      	ldr	r2, [r2, #0]
    54ee:	4610      	mov	r0, r2
    54f0:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    54f2:	4b4d      	ldr	r3, [pc, #308]	; (5628 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54f4:	681b      	ldr	r3, [r3, #0]
    54f6:	689b      	ldr	r3, [r3, #8]
    54f8:	4a4c      	ldr	r2, [pc, #304]	; (562c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54fa:	6812      	ldr	r2, [r2, #0]
    54fc:	4610      	mov	r0, r2
    54fe:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5500:	4b47      	ldr	r3, [pc, #284]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5502:	681b      	ldr	r3, [r3, #0]
    5504:	68db      	ldr	r3, [r3, #12]
    5506:	4a47      	ldr	r2, [pc, #284]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5508:	6812      	ldr	r2, [r2, #0]
    550a:	4610      	mov	r0, r2
    550c:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    550e:	4b44      	ldr	r3, [pc, #272]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5510:	681b      	ldr	r3, [r3, #0]
    5512:	689b      	ldr	r3, [r3, #8]
    5514:	4a43      	ldr	r2, [pc, #268]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5516:	6812      	ldr	r2, [r2, #0]
    5518:	6812      	ldr	r2, [r2, #0]
    551a:	4610      	mov	r0, r2
    551c:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    551e:	4b38      	ldr	r3, [pc, #224]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5520:	681b      	ldr	r3, [r3, #0]
    5522:	685b      	ldr	r3, [r3, #4]
    5524:	4a44      	ldr	r2, [pc, #272]	; (5638 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    5526:	6812      	ldr	r2, [r2, #0]
    5528:	4610      	mov	r0, r2
    552a:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    552c:	4b36      	ldr	r3, [pc, #216]	; (5608 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    552e:	681b      	ldr	r3, [r3, #0]
    5530:	681b      	ldr	r3, [r3, #0]
    5532:	4a42      	ldr	r2, [pc, #264]	; (563c <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5534:	6812      	ldr	r2, [r2, #0]
    5536:	4610      	mov	r0, r2
    5538:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    553a:	4b35      	ldr	r3, [pc, #212]	; (5610 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    553c:	681b      	ldr	r3, [r3, #0]
    553e:	681b      	ldr	r3, [r3, #0]
    5540:	4a3f      	ldr	r2, [pc, #252]	; (5640 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    5542:	6812      	ldr	r2, [r2, #0]
    5544:	4610      	mov	r0, r2
    5546:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5548:	4b33      	ldr	r3, [pc, #204]	; (5618 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    554a:	681b      	ldr	r3, [r3, #0]
    554c:	681b      	ldr	r3, [r3, #0]
    554e:	4a3d      	ldr	r2, [pc, #244]	; (5644 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    5550:	6812      	ldr	r2, [r2, #0]
    5552:	4610      	mov	r0, r2
    5554:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5556:	e04a      	b.n	55ee <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5558:	9b00      	ldr	r3, [sp, #0]
    555a:	2b02      	cmp	r3, #2
    555c:	d149      	bne.n	55f2 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    555e:	4b27      	ldr	r3, [pc, #156]	; (55fc <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5560:	2201      	movs	r2, #1
    5562:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5564:	4b32      	ldr	r3, [pc, #200]	; (5630 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5566:	681b      	ldr	r3, [r3, #0]
    5568:	685b      	ldr	r3, [r3, #4]
    556a:	4a32      	ldr	r2, [pc, #200]	; (5634 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    556c:	6812      	ldr	r2, [r2, #0]
    556e:	4610      	mov	r0, r2
    5570:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5572:	4b2d      	ldr	r3, [pc, #180]	; (5628 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5574:	681b      	ldr	r3, [r3, #0]
    5576:	691b      	ldr	r3, [r3, #16]
    5578:	4a2c      	ldr	r2, [pc, #176]	; (562c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    557a:	6812      	ldr	r2, [r2, #0]
    557c:	4610      	mov	r0, r2
    557e:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5580:	4b29      	ldr	r3, [pc, #164]	; (5628 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5582:	681b      	ldr	r3, [r3, #0]
    5584:	689b      	ldr	r3, [r3, #8]
    5586:	4a29      	ldr	r2, [pc, #164]	; (562c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5588:	6812      	ldr	r2, [r2, #0]
    558a:	4610      	mov	r0, r2
    558c:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    558e:	4b24      	ldr	r3, [pc, #144]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5590:	681b      	ldr	r3, [r3, #0]
    5592:	68db      	ldr	r3, [r3, #12]
    5594:	4a23      	ldr	r2, [pc, #140]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5596:	6812      	ldr	r2, [r2, #0]
    5598:	4610      	mov	r0, r2
    559a:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    559c:	4b20      	ldr	r3, [pc, #128]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    559e:	681b      	ldr	r3, [r3, #0]
    55a0:	689b      	ldr	r3, [r3, #8]
    55a2:	4a20      	ldr	r2, [pc, #128]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    55a4:	6812      	ldr	r2, [r2, #0]
    55a6:	6812      	ldr	r2, [r2, #0]
    55a8:	4610      	mov	r0, r2
    55aa:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    55ac:	4b26      	ldr	r3, [pc, #152]	; (5648 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    55ae:	681b      	ldr	r3, [r3, #0]
    55b0:	685b      	ldr	r3, [r3, #4]
    55b2:	4a26      	ldr	r2, [pc, #152]	; (564c <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    55b4:	6812      	ldr	r2, [r2, #0]
    55b6:	4610      	mov	r0, r2
    55b8:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    55ba:	4b25      	ldr	r3, [pc, #148]	; (5650 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    55bc:	681b      	ldr	r3, [r3, #0]
    55be:	681b      	ldr	r3, [r3, #0]
    55c0:	4a24      	ldr	r2, [pc, #144]	; (5654 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    55c2:	6812      	ldr	r2, [r2, #0]
    55c4:	4610      	mov	r0, r2
    55c6:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    55c8:	4b23      	ldr	r3, [pc, #140]	; (5658 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    55ca:	681b      	ldr	r3, [r3, #0]
    55cc:	681b      	ldr	r3, [r3, #0]
    55ce:	4a23      	ldr	r2, [pc, #140]	; (565c <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    55d0:	6812      	ldr	r2, [r2, #0]
    55d2:	4610      	mov	r0, r2
    55d4:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    55d6:	4b22      	ldr	r3, [pc, #136]	; (5660 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    55d8:	681b      	ldr	r3, [r3, #0]
    55da:	681b      	ldr	r3, [r3, #0]
    55dc:	4a21      	ldr	r2, [pc, #132]	; (5664 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    55de:	6812      	ldr	r2, [r2, #0]
    55e0:	4610      	mov	r0, r2
    55e2:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    55e4:	e005      	b.n	55f2 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    55e6:	bf00      	nop
    55e8:	e004      	b.n	55f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    55ea:	bf00      	nop
    55ec:	e002      	b.n	55f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    55ee:	bf00      	nop
    55f0:	e000      	b.n	55f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    55f2:	bf00      	nop
    }

}
    55f4:	bf00      	nop
    55f6:	b003      	add	sp, #12
    55f8:	f85d fb04 	ldr.w	pc, [sp], #4
    55fc:	1fff8b19 	.word	0x1fff8b19
    5600:	1fff8ba8 	.word	0x1fff8ba8
    5604:	1fff8bc8 	.word	0x1fff8bc8
    5608:	1fff8bac 	.word	0x1fff8bac
    560c:	1fff8bd0 	.word	0x1fff8bd0
    5610:	1fff8bb0 	.word	0x1fff8bb0
    5614:	1fff8bd8 	.word	0x1fff8bd8
    5618:	1fff8bb4 	.word	0x1fff8bb4
    561c:	1fff8be0 	.word	0x1fff8be0
    5620:	1fff8b9c 	.word	0x1fff8b9c
    5624:	1fff8bc0 	.word	0x1fff8bc0
    5628:	1fff8ba0 	.word	0x1fff8ba0
    562c:	1fff8bbc 	.word	0x1fff8bbc
    5630:	1fff8ba4 	.word	0x1fff8ba4
    5634:	1fff8bb8 	.word	0x1fff8bb8
    5638:	1fff8bc4 	.word	0x1fff8bc4
    563c:	1fff8bcc 	.word	0x1fff8bcc
    5640:	1fff8bd4 	.word	0x1fff8bd4
    5644:	1fff8bdc 	.word	0x1fff8bdc
    5648:	1fff8be4 	.word	0x1fff8be4
    564c:	1fff8bf4 	.word	0x1fff8bf4
    5650:	1fff8be8 	.word	0x1fff8be8
    5654:	1fff8bf8 	.word	0x1fff8bf8
    5658:	1fff8bec 	.word	0x1fff8bec
    565c:	1fff8bfc 	.word	0x1fff8bfc
    5660:	1fff8bf0 	.word	0x1fff8bf0
    5664:	1fff8c00 	.word	0x1fff8c00

00005668 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    5668:	b500      	push	{lr}
    566a:	b083      	sub	sp, #12
    566c:	9001      	str	r0, [sp, #4]
    566e:	9100      	str	r1, [sp, #0]
    switch(Command)
    5670:	9b00      	ldr	r3, [sp, #0]
    5672:	2b04      	cmp	r3, #4
    5674:	d010      	beq.n	5698 <Clock_Ip_Command+0x30>
    5676:	9b00      	ldr	r3, [sp, #0]
    5678:	2b04      	cmp	r3, #4
    567a:	d811      	bhi.n	56a0 <Clock_Ip_Command+0x38>
    567c:	9b00      	ldr	r3, [sp, #0]
    567e:	2b01      	cmp	r3, #1
    5680:	d006      	beq.n	5690 <Clock_Ip_Command+0x28>
    5682:	9b00      	ldr	r3, [sp, #0]
    5684:	2b02      	cmp	r3, #2
    5686:	d10b      	bne.n	56a0 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    5688:	9801      	ldr	r0, [sp, #4]
    568a:	f7ff fdb3 	bl	51f4 <Clock_Ip_ClockInitializeObjects>
            break;
    568e:	e008      	b.n	56a2 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    5690:	9801      	ldr	r0, [sp, #4]
    5692:	f7ff f9db 	bl	4a4c <Clock_Ip_SpecificPlatformInitClock>
            break;
    5696:	e004      	b.n	56a2 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5698:	9801      	ldr	r0, [sp, #4]
    569a:	f7ff f8ed 	bl	4878 <DisableSafeClock>
            break;
    569e:	e000      	b.n	56a2 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    56a0:	bf00      	nop
    }
}
    56a2:	bf00      	nop
    56a4:	b003      	add	sp, #12
    56a6:	f85d fb04 	ldr.w	pc, [sp], #4
    56aa:	bf00      	nop

000056ac <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    56ac:	b500      	push	{lr}
    56ae:	b085      	sub	sp, #20
    56b0:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    56b2:	4a20      	ldr	r2, [pc, #128]	; (5734 <Mcu_Init+0x88>)
    56b4:	9b01      	ldr	r3, [sp, #4]
    56b6:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    56b8:	2300      	movs	r3, #0
    56ba:	9303      	str	r3, [sp, #12]
    56bc:	e010      	b.n	56e0 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    56be:	4b1d      	ldr	r3, [pc, #116]	; (5734 <Mcu_Init+0x88>)
    56c0:	681b      	ldr	r3, [r3, #0]
    56c2:	6919      	ldr	r1, [r3, #16]
    56c4:	9a03      	ldr	r2, [sp, #12]
    56c6:	4613      	mov	r3, r2
    56c8:	005b      	lsls	r3, r3, #1
    56ca:	4413      	add	r3, r2
    56cc:	009b      	lsls	r3, r3, #2
    56ce:	440b      	add	r3, r1
    56d0:	681b      	ldr	r3, [r3, #0]
    56d2:	9a03      	ldr	r2, [sp, #12]
    56d4:	b2d1      	uxtb	r1, r2
    56d6:	4a18      	ldr	r2, [pc, #96]	; (5738 <Mcu_Init+0x8c>)
    56d8:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    56da:	9b03      	ldr	r3, [sp, #12]
    56dc:	3301      	adds	r3, #1
    56de:	9303      	str	r3, [sp, #12]
    56e0:	4b14      	ldr	r3, [pc, #80]	; (5734 <Mcu_Init+0x88>)
    56e2:	681b      	ldr	r3, [r3, #0]
    56e4:	689b      	ldr	r3, [r3, #8]
    56e6:	9a03      	ldr	r2, [sp, #12]
    56e8:	429a      	cmp	r2, r3
    56ea:	d3e8      	bcc.n	56be <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    56ec:	2300      	movs	r3, #0
    56ee:	9303      	str	r3, [sp, #12]
    56f0:	e010      	b.n	5714 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    56f2:	4b10      	ldr	r3, [pc, #64]	; (5734 <Mcu_Init+0x88>)
    56f4:	681b      	ldr	r3, [r3, #0]
    56f6:	6959      	ldr	r1, [r3, #20]
    56f8:	9a03      	ldr	r2, [sp, #12]
    56fa:	4613      	mov	r3, r2
    56fc:	01db      	lsls	r3, r3, #7
    56fe:	1a9b      	subs	r3, r3, r2
    5700:	00db      	lsls	r3, r3, #3
    5702:	440b      	add	r3, r1
    5704:	681b      	ldr	r3, [r3, #0]
    5706:	9a03      	ldr	r2, [sp, #12]
    5708:	b2d1      	uxtb	r1, r2
    570a:	4a0c      	ldr	r2, [pc, #48]	; (573c <Mcu_Init+0x90>)
    570c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    570e:	9b03      	ldr	r3, [sp, #12]
    5710:	3301      	adds	r3, #1
    5712:	9303      	str	r3, [sp, #12]
    5714:	4b07      	ldr	r3, [pc, #28]	; (5734 <Mcu_Init+0x88>)
    5716:	681b      	ldr	r3, [r3, #0]
    5718:	68db      	ldr	r3, [r3, #12]
    571a:	9a03      	ldr	r2, [sp, #12]
    571c:	429a      	cmp	r2, r3
    571e:	d3e8      	bcc.n	56f2 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5720:	4b04      	ldr	r3, [pc, #16]	; (5734 <Mcu_Init+0x88>)
    5722:	681b      	ldr	r3, [r3, #0]
    5724:	699b      	ldr	r3, [r3, #24]
    5726:	4618      	mov	r0, r3
    5728:	f000 f88a 	bl	5840 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    572c:	bf00      	nop
    572e:	b005      	add	sp, #20
    5730:	f85d fb04 	ldr.w	pc, [sp], #4
    5734:	1fff8cdc 	.word	0x1fff8cdc
    5738:	1fff8cd8 	.word	0x1fff8cd8
    573c:	1fff8cd4 	.word	0x1fff8cd4

00005740 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5740:	b084      	sub	sp, #16
    5742:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5744:	2301      	movs	r3, #1
    5746:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    574a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    574e:	4618      	mov	r0, r3
    5750:	b004      	add	sp, #16
    5752:	4770      	bx	lr

00005754 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5754:	b500      	push	{lr}
    5756:	b085      	sub	sp, #20
    5758:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    575a:	4a0e      	ldr	r2, [pc, #56]	; (5794 <Mcu_InitClock+0x40>)
    575c:	9b01      	ldr	r3, [sp, #4]
    575e:	4413      	add	r3, r2
    5760:	781b      	ldrb	r3, [r3, #0]
    5762:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    5766:	4b0c      	ldr	r3, [pc, #48]	; (5798 <Mcu_InitClock+0x44>)
    5768:	681b      	ldr	r3, [r3, #0]
    576a:	6959      	ldr	r1, [r3, #20]
    576c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5770:	4613      	mov	r3, r2
    5772:	01db      	lsls	r3, r3, #7
    5774:	1a9b      	subs	r3, r3, r2
    5776:	00db      	lsls	r3, r3, #3
    5778:	440b      	add	r3, r1
    577a:	4618      	mov	r0, r3
    577c:	f000 f86a 	bl	5854 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5780:	2300      	movs	r3, #0
    5782:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    5786:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    578a:	4618      	mov	r0, r3
    578c:	b005      	add	sp, #20
    578e:	f85d fb04 	ldr.w	pc, [sp], #4
    5792:	bf00      	nop
    5794:	1fff8cd4 	.word	0x1fff8cd4
    5798:	1fff8cdc 	.word	0x1fff8cdc

0000579c <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    579c:	b500      	push	{lr}
    579e:	b085      	sub	sp, #20
    57a0:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    57a2:	4a0d      	ldr	r2, [pc, #52]	; (57d8 <Mcu_SetMode+0x3c>)
    57a4:	9b01      	ldr	r3, [sp, #4]
    57a6:	4413      	add	r3, r2
    57a8:	781b      	ldrb	r3, [r3, #0]
    57aa:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    57ae:	f009 f9b1 	bl	eb14 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    57b2:	4b0a      	ldr	r3, [pc, #40]	; (57dc <Mcu_SetMode+0x40>)
    57b4:	681b      	ldr	r3, [r3, #0]
    57b6:	6919      	ldr	r1, [r3, #16]
    57b8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    57bc:	4613      	mov	r3, r2
    57be:	005b      	lsls	r3, r3, #1
    57c0:	4413      	add	r3, r2
    57c2:	009b      	lsls	r3, r3, #2
    57c4:	440b      	add	r3, r1
    57c6:	4618      	mov	r0, r3
    57c8:	f000 f84e 	bl	5868 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    57cc:	f009 f9ce 	bl	eb6c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    57d0:	bf00      	nop
    57d2:	b005      	add	sp, #20
    57d4:	f85d fb04 	ldr.w	pc, [sp], #4
    57d8:	1fff8cd8 	.word	0x1fff8cd8
    57dc:	1fff8cdc 	.word	0x1fff8cdc

000057e0 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    57e0:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    57e2:	2302      	movs	r3, #2
    57e4:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    57e6:	9b01      	ldr	r3, [sp, #4]
}
    57e8:	4618      	mov	r0, r3
    57ea:	b002      	add	sp, #8
    57ec:	4770      	bx	lr

000057ee <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    57ee:	b500      	push	{lr}
    57f0:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    57f2:	f000 f843 	bl	587c <Mcu_Ipw_GetResetReason>
    57f6:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    57f8:	9b01      	ldr	r3, [sp, #4]
}
    57fa:	4618      	mov	r0, r3
    57fc:	b003      	add	sp, #12
    57fe:	f85d fb04 	ldr.w	pc, [sp], #4

00005802 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5802:	b500      	push	{lr}
    5804:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    5806:	f000 f83f 	bl	5888 <Mcu_Ipw_GetResetRawValue>
    580a:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    580c:	9b01      	ldr	r3, [sp, #4]
}
    580e:	4618      	mov	r0, r3
    5810:	b003      	add	sp, #12
    5812:	f85d fb04 	ldr.w	pc, [sp], #4

00005816 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5816:	b500      	push	{lr}
    5818:	b083      	sub	sp, #12
    581a:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    581c:	9801      	ldr	r0, [sp, #4]
    581e:	f000 f839 	bl	5894 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5822:	bf00      	nop
    5824:	b003      	add	sp, #12
    5826:	f85d fb04 	ldr.w	pc, [sp], #4

0000582a <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    582a:	b082      	sub	sp, #8
    582c:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    582e:	4b03      	ldr	r3, [pc, #12]	; (583c <Mcu_ClkSrcFailureNotification+0x12>)
    5830:	681b      	ldr	r3, [r3, #0]
    5832:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5834:	bf00      	nop
    5836:	b002      	add	sp, #8
    5838:	4770      	bx	lr
    583a:	bf00      	nop
    583c:	1fff8cdc 	.word	0x1fff8cdc

00005840 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5840:	b500      	push	{lr}
    5842:	b083      	sub	sp, #12
    5844:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5846:	9801      	ldr	r0, [sp, #4]
    5848:	f000 f882 	bl	5950 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    584c:	bf00      	nop
    584e:	b003      	add	sp, #12
    5850:	f85d fb04 	ldr.w	pc, [sp], #4

00005854 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5854:	b500      	push	{lr}
    5856:	b083      	sub	sp, #12
    5858:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    585a:	9801      	ldr	r0, [sp, #4]
    585c:	f7fc fc6a 	bl	2134 <Clock_Ip_InitClock>
}
    5860:	bf00      	nop
    5862:	b003      	add	sp, #12
    5864:	f85d fb04 	ldr.w	pc, [sp], #4

00005868 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5868:	b500      	push	{lr}
    586a:	b083      	sub	sp, #12
    586c:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    586e:	9801      	ldr	r0, [sp, #4]
    5870:	f000 f820 	bl	58b4 <Power_Ip_SetMode>
}
    5874:	bf00      	nop
    5876:	b003      	add	sp, #12
    5878:	f85d fb04 	ldr.w	pc, [sp], #4

0000587c <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    587c:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    587e:	f000 f84f 	bl	5920 <Power_Ip_GetResetReason>
    5882:	4603      	mov	r3, r0
}
    5884:	4618      	mov	r0, r3
    5886:	bd08      	pop	{r3, pc}

00005888 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5888:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    588a:	f000 f857 	bl	593c <Power_Ip_GetResetRawValue>
    588e:	4603      	mov	r3, r0
}
    5890:	4618      	mov	r0, r3
    5892:	bd08      	pop	{r3, pc}

00005894 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5894:	b500      	push	{lr}
    5896:	b083      	sub	sp, #12
    5898:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    589a:	9b01      	ldr	r3, [sp, #4]
    589c:	2b00      	cmp	r3, #0
    589e:	d102      	bne.n	58a6 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    58a0:	f000 f86c 	bl	597c <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    58a4:	e001      	b.n	58aa <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    58a6:	f000 f86e 	bl	5986 <Power_Ip_EnableSleepOnExit>
}
    58aa:	bf00      	nop
    58ac:	b003      	add	sp, #12
    58ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000058b4 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    58b4:	b500      	push	{lr}
    58b6:	b085      	sub	sp, #20
    58b8:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    58ba:	9b01      	ldr	r3, [sp, #4]
    58bc:	685b      	ldr	r3, [r3, #4]
    58be:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    58c0:	9802      	ldr	r0, [sp, #8]
    58c2:	f000 f9f5 	bl	5cb0 <Power_Ip_SMC_ModeCheckEntry>
    58c6:	4603      	mov	r3, r0
    58c8:	2b00      	cmp	r3, #0
    58ca:	d002      	beq.n	58d2 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    58cc:	2301      	movs	r3, #1
    58ce:	9303      	str	r3, [sp, #12]
    58d0:	e003      	b.n	58da <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    58d2:	9801      	ldr	r0, [sp, #4]
    58d4:	f000 fa1e 	bl	5d14 <Power_Ip_SMC_ModeConfig>
    58d8:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    58da:	9b03      	ldr	r3, [sp, #12]
    58dc:	2b01      	cmp	r3, #1
    58de:	d103      	bne.n	58e8 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    58e0:	21ff      	movs	r1, #255	; 0xff
    58e2:	2003      	movs	r0, #3
    58e4:	f000 f8f4 	bl	5ad0 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    58e8:	bf00      	nop
    58ea:	b005      	add	sp, #20
    58ec:	f85d fb04 	ldr.w	pc, [sp], #4

000058f0 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    58f0:	b084      	sub	sp, #16
    58f2:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    58f4:	230c      	movs	r3, #12
    58f6:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    58f8:	4a08      	ldr	r2, [pc, #32]	; (591c <Power_Ip_ConvertIntergeToResetType+0x2c>)
    58fa:	9b01      	ldr	r3, [sp, #4]
    58fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5900:	2b0e      	cmp	r3, #14
    5902:	d805      	bhi.n	5910 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5904:	4a05      	ldr	r2, [pc, #20]	; (591c <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5906:	9b01      	ldr	r3, [sp, #4]
    5908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    590c:	9303      	str	r3, [sp, #12]
    590e:	e001      	b.n	5914 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5910:	230c      	movs	r3, #12
    5912:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5914:	9b03      	ldr	r3, [sp, #12]
}
    5916:	4618      	mov	r0, r3
    5918:	b004      	add	sp, #16
    591a:	4770      	bx	lr
    591c:	000107e4 	.word	0x000107e4

00005920 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5920:	b500      	push	{lr}
    5922:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5924:	f000 f940 	bl	5ba8 <Power_Ip_RCM_GetResetReason>
    5928:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    592a:	9801      	ldr	r0, [sp, #4]
    592c:	f7ff ffe0 	bl	58f0 <Power_Ip_ConvertIntergeToResetType>
    5930:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5932:	9b00      	ldr	r3, [sp, #0]
}
    5934:	4618      	mov	r0, r3
    5936:	b003      	add	sp, #12
    5938:	f85d fb04 	ldr.w	pc, [sp], #4

0000593c <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    593c:	b500      	push	{lr}
    593e:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5940:	f000 f98a 	bl	5c58 <Power_Ip_RCM_GetResetRawValue>
    5944:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5946:	9b01      	ldr	r3, [sp, #4]
}
    5948:	4618      	mov	r0, r3
    594a:	b003      	add	sp, #12
    594c:	f85d fb04 	ldr.w	pc, [sp], #4

00005950 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5950:	b500      	push	{lr}
    5952:	b083      	sub	sp, #12
    5954:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5956:	9b01      	ldr	r3, [sp, #4]
    5958:	681b      	ldr	r3, [r3, #0]
    595a:	4618      	mov	r0, r3
    595c:	f000 f90e 	bl	5b7c <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5960:	9b01      	ldr	r3, [sp, #4]
    5962:	685b      	ldr	r3, [r3, #4]
    5964:	4618      	mov	r0, r3
    5966:	f000 f86d 	bl	5a44 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    596a:	9b01      	ldr	r3, [sp, #4]
    596c:	689b      	ldr	r3, [r3, #8]
    596e:	4618      	mov	r0, r3
    5970:	f000 f990 	bl	5c94 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5974:	bf00      	nop
    5976:	b003      	add	sp, #12
    5978:	f85d fb04 	ldr.w	pc, [sp], #4

0000597c <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    597c:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    597e:	f000 f811 	bl	59a4 <Power_Ip_CM4_DisableSleepOnExit>
}
    5982:	bf00      	nop
    5984:	bd08      	pop	{r3, pc}

00005986 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5986:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5988:	f000 f820 	bl	59cc <Power_Ip_CM4_EnableSleepOnExit>
}
    598c:	bf00      	nop
    598e:	bd08      	pop	{r3, pc}

00005990 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5990:	b082      	sub	sp, #8
    5992:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5994:	4a02      	ldr	r2, [pc, #8]	; (59a0 <Power_Ip_InstallNotificationsCallback+0x10>)
    5996:	9b01      	ldr	r3, [sp, #4]
    5998:	6013      	str	r3, [r2, #0]
}
    599a:	bf00      	nop
    599c:	b002      	add	sp, #8
    599e:	4770      	bx	lr
    59a0:	1fff8b1c 	.word	0x1fff8b1c

000059a4 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    59a4:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59a6:	2300      	movs	r3, #0
    59a8:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59aa:	4b07      	ldr	r3, [pc, #28]	; (59c8 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    59ac:	681b      	ldr	r3, [r3, #0]
    59ae:	685b      	ldr	r3, [r3, #4]
    59b0:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    59b2:	9b01      	ldr	r3, [sp, #4]
    59b4:	f023 0302 	bic.w	r3, r3, #2
    59b8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    59ba:	4b03      	ldr	r3, [pc, #12]	; (59c8 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    59bc:	681b      	ldr	r3, [r3, #0]
    59be:	9a01      	ldr	r2, [sp, #4]
    59c0:	605a      	str	r2, [r3, #4]
}
    59c2:	bf00      	nop
    59c4:	b002      	add	sp, #8
    59c6:	4770      	bx	lr
    59c8:	1fff8b20 	.word	0x1fff8b20

000059cc <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    59cc:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59ce:	2300      	movs	r3, #0
    59d0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59d2:	4b07      	ldr	r3, [pc, #28]	; (59f0 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    59d4:	681b      	ldr	r3, [r3, #0]
    59d6:	685b      	ldr	r3, [r3, #4]
    59d8:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    59da:	9b01      	ldr	r3, [sp, #4]
    59dc:	f043 0302 	orr.w	r3, r3, #2
    59e0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    59e2:	4b03      	ldr	r3, [pc, #12]	; (59f0 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    59e4:	681b      	ldr	r3, [r3, #0]
    59e6:	9a01      	ldr	r2, [sp, #4]
    59e8:	605a      	str	r2, [r3, #4]
}
    59ea:	bf00      	nop
    59ec:	b002      	add	sp, #8
    59ee:	4770      	bx	lr
    59f0:	1fff8b20 	.word	0x1fff8b20

000059f4 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    59f4:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59f6:	2300      	movs	r3, #0
    59f8:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59fa:	4b07      	ldr	r3, [pc, #28]	; (5a18 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    59fc:	681b      	ldr	r3, [r3, #0]
    59fe:	685b      	ldr	r3, [r3, #4]
    5a00:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5a02:	9b01      	ldr	r3, [sp, #4]
    5a04:	f043 0304 	orr.w	r3, r3, #4
    5a08:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a0a:	4b03      	ldr	r3, [pc, #12]	; (5a18 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5a0c:	681b      	ldr	r3, [r3, #0]
    5a0e:	9a01      	ldr	r2, [sp, #4]
    5a10:	605a      	str	r2, [r3, #4]
}
    5a12:	bf00      	nop
    5a14:	b002      	add	sp, #8
    5a16:	4770      	bx	lr
    5a18:	1fff8b20 	.word	0x1fff8b20

00005a1c <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5a1c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5a1e:	2300      	movs	r3, #0
    5a20:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5a22:	4b07      	ldr	r3, [pc, #28]	; (5a40 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5a24:	681b      	ldr	r3, [r3, #0]
    5a26:	685b      	ldr	r3, [r3, #4]
    5a28:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5a2a:	9b01      	ldr	r3, [sp, #4]
    5a2c:	f023 0304 	bic.w	r3, r3, #4
    5a30:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a32:	4b03      	ldr	r3, [pc, #12]	; (5a40 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5a34:	681b      	ldr	r3, [r3, #0]
    5a36:	9a01      	ldr	r2, [sp, #4]
    5a38:	605a      	str	r2, [r3, #4]
}
    5a3a:	bf00      	nop
    5a3c:	b002      	add	sp, #8
    5a3e:	4770      	bx	lr
    5a40:	1fff8b20 	.word	0x1fff8b20

00005a44 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5a44:	b084      	sub	sp, #16
    5a46:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5a48:	4b20      	ldr	r3, [pc, #128]	; (5acc <Power_Ip_PMC_PowerInit+0x88>)
    5a4a:	781b      	ldrb	r3, [r3, #0]
    5a4c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5a50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a54:	f003 030f 	and.w	r3, r3, #15
    5a58:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5a5c:	9b01      	ldr	r3, [sp, #4]
    5a5e:	781a      	ldrb	r2, [r3, #0]
    5a60:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a64:	4313      	orrs	r3, r2
    5a66:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5a6a:	4a18      	ldr	r2, [pc, #96]	; (5acc <Power_Ip_PMC_PowerInit+0x88>)
    5a6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a70:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5a72:	4b16      	ldr	r3, [pc, #88]	; (5acc <Power_Ip_PMC_PowerInit+0x88>)
    5a74:	785b      	ldrb	r3, [r3, #1]
    5a76:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5a7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a7e:	f003 031f 	and.w	r3, r3, #31
    5a82:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5a86:	9b01      	ldr	r3, [sp, #4]
    5a88:	785a      	ldrb	r2, [r3, #1]
    5a8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a8e:	4313      	orrs	r3, r2
    5a90:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5a94:	4a0d      	ldr	r2, [pc, #52]	; (5acc <Power_Ip_PMC_PowerInit+0x88>)
    5a96:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a9a:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5a9c:	4b0b      	ldr	r3, [pc, #44]	; (5acc <Power_Ip_PMC_PowerInit+0x88>)
    5a9e:	789b      	ldrb	r3, [r3, #2]
    5aa0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5aa4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5aa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5aac:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5ab0:	9b01      	ldr	r3, [sp, #4]
    5ab2:	789a      	ldrb	r2, [r3, #2]
    5ab4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ab8:	4313      	orrs	r3, r2
    5aba:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5abe:	4a03      	ldr	r2, [pc, #12]	; (5acc <Power_Ip_PMC_PowerInit+0x88>)
    5ac0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ac4:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5ac6:	bf00      	nop
    5ac8:	b004      	add	sp, #16
    5aca:	4770      	bx	lr
    5acc:	4007d000 	.word	0x4007d000

00005ad0 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5ad0:	b500      	push	{lr}
    5ad2:	b083      	sub	sp, #12
    5ad4:	9001      	str	r0, [sp, #4]
    5ad6:	460b      	mov	r3, r1
    5ad8:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5adc:	4b05      	ldr	r3, [pc, #20]	; (5af4 <Power_Ip_ReportPowerErrors+0x24>)
    5ade:	681b      	ldr	r3, [r3, #0]
    5ae0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5ae4:	4611      	mov	r1, r2
    5ae6:	9801      	ldr	r0, [sp, #4]
    5ae8:	4798      	blx	r3
}
    5aea:	bf00      	nop
    5aec:	b003      	add	sp, #12
    5aee:	f85d fb04 	ldr.w	pc, [sp], #4
    5af2:	bf00      	nop
    5af4:	1fff8b1c 	.word	0x1fff8b1c

00005af8 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5af8:	b082      	sub	sp, #8
    5afa:	9001      	str	r0, [sp, #4]
    5afc:	460b      	mov	r3, r1
    5afe:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5b02:	bf00      	nop
    5b04:	b002      	add	sp, #8
    5b06:	4770      	bx	lr

00005b08 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5b08:	b500      	push	{lr}
    5b0a:	b085      	sub	sp, #20
    5b0c:	9003      	str	r0, [sp, #12]
    5b0e:	9102      	str	r1, [sp, #8]
    5b10:	9201      	str	r2, [sp, #4]
    5b12:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5b14:	2000      	movs	r0, #0
    5b16:	f7fc f83d 	bl	1b94 <OsIf_GetCounter>
    5b1a:	4602      	mov	r2, r0
    5b1c:	9b03      	ldr	r3, [sp, #12]
    5b1e:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5b20:	9b02      	ldr	r3, [sp, #8]
    5b22:	2200      	movs	r2, #0
    5b24:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5b26:	2100      	movs	r1, #0
    5b28:	9800      	ldr	r0, [sp, #0]
    5b2a:	f7fc f87f 	bl	1c2c <OsIf_MicrosToTicks>
    5b2e:	4602      	mov	r2, r0
    5b30:	9b01      	ldr	r3, [sp, #4]
    5b32:	601a      	str	r2, [r3, #0]
}
    5b34:	bf00      	nop
    5b36:	b005      	add	sp, #20
    5b38:	f85d fb04 	ldr.w	pc, [sp], #4

00005b3c <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5b3c:	b500      	push	{lr}
    5b3e:	b087      	sub	sp, #28
    5b40:	9003      	str	r0, [sp, #12]
    5b42:	9102      	str	r1, [sp, #8]
    5b44:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5b46:	2300      	movs	r3, #0
    5b48:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5b4c:	2100      	movs	r1, #0
    5b4e:	9803      	ldr	r0, [sp, #12]
    5b50:	f7fc f839 	bl	1bc6 <OsIf_GetElapsed>
    5b54:	4602      	mov	r2, r0
    5b56:	9b02      	ldr	r3, [sp, #8]
    5b58:	681b      	ldr	r3, [r3, #0]
    5b5a:	441a      	add	r2, r3
    5b5c:	9b02      	ldr	r3, [sp, #8]
    5b5e:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5b60:	9b02      	ldr	r3, [sp, #8]
    5b62:	681b      	ldr	r3, [r3, #0]
    5b64:	9a01      	ldr	r2, [sp, #4]
    5b66:	429a      	cmp	r2, r3
    5b68:	d802      	bhi.n	5b70 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5b6a:	2301      	movs	r3, #1
    5b6c:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5b70:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5b74:	4618      	mov	r0, r3
    5b76:	b007      	add	sp, #28
    5b78:	f85d fb04 	ldr.w	pc, [sp], #4

00005b7c <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5b7c:	b082      	sub	sp, #8
    5b7e:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5b80:	9b01      	ldr	r3, [sp, #4]
    5b82:	681a      	ldr	r2, [r3, #0]
    5b84:	4907      	ldr	r1, [pc, #28]	; (5ba4 <Power_Ip_RCM_ResetInit+0x28>)
    5b86:	f641 7307 	movw	r3, #7943	; 0x1f07
    5b8a:	4013      	ands	r3, r2
    5b8c:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5b8e:	9b01      	ldr	r3, [sp, #4]
    5b90:	685a      	ldr	r2, [r3, #4]
    5b92:	4904      	ldr	r1, [pc, #16]	; (5ba4 <Power_Ip_RCM_ResetInit+0x28>)
    5b94:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5b98:	4013      	ands	r3, r2
    5b9a:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5b9c:	bf00      	nop
    5b9e:	b002      	add	sp, #8
    5ba0:	4770      	bx	lr
    5ba2:	bf00      	nop
    5ba4:	4007f000 	.word	0x4007f000

00005ba8 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5ba8:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5baa:	230c      	movs	r3, #12
    5bac:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5bae:	2300      	movs	r3, #0
    5bb0:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5bb2:	2300      	movs	r3, #0
    5bb4:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5bb6:	2300      	movs	r3, #0
    5bb8:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5bba:	4b25      	ldr	r3, [pc, #148]	; (5c50 <Power_Ip_RCM_GetResetReason+0xa8>)
    5bbc:	699a      	ldr	r2, [r3, #24]
    5bbe:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bc2:	4013      	ands	r3, r2
    5bc4:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5bc6:	9b03      	ldr	r3, [sp, #12]
    5bc8:	2b00      	cmp	r3, #0
    5bca:	d008      	beq.n	5bde <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5bcc:	4920      	ldr	r1, [pc, #128]	; (5c50 <Power_Ip_RCM_GetResetReason+0xa8>)
    5bce:	9a03      	ldr	r2, [sp, #12]
    5bd0:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bd4:	4013      	ands	r3, r2
    5bd6:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5bd8:	4a1e      	ldr	r2, [pc, #120]	; (5c54 <Power_Ip_RCM_GetResetReason+0xac>)
    5bda:	9b03      	ldr	r3, [sp, #12]
    5bdc:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5bde:	4b1d      	ldr	r3, [pc, #116]	; (5c54 <Power_Ip_RCM_GetResetReason+0xac>)
    5be0:	681b      	ldr	r3, [r3, #0]
    5be2:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5be4:	9a02      	ldr	r2, [sp, #8]
    5be6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bea:	4013      	ands	r3, r2
    5bec:	2b82      	cmp	r3, #130	; 0x82
    5bee:	d102      	bne.n	5bf6 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5bf0:	2305      	movs	r3, #5
    5bf2:	9307      	str	r3, [sp, #28]
    5bf4:	e027      	b.n	5c46 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5bf6:	2300      	movs	r3, #0
    5bf8:	9306      	str	r3, [sp, #24]
    5bfa:	e021      	b.n	5c40 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5bfc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5c00:	9b06      	ldr	r3, [sp, #24]
    5c02:	fa22 f303 	lsr.w	r3, r2, r3
    5c06:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5c08:	9a01      	ldr	r2, [sp, #4]
    5c0a:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5c0e:	4013      	ands	r3, r2
    5c10:	2b00      	cmp	r3, #0
    5c12:	d012      	beq.n	5c3a <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5c14:	9a01      	ldr	r2, [sp, #4]
    5c16:	9b02      	ldr	r3, [sp, #8]
    5c18:	4013      	ands	r3, r2
    5c1a:	2b00      	cmp	r3, #0
    5c1c:	d00a      	beq.n	5c34 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5c1e:	9b05      	ldr	r3, [sp, #20]
    5c20:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5c22:	9b04      	ldr	r3, [sp, #16]
    5c24:	3301      	adds	r3, #1
    5c26:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5c28:	9b04      	ldr	r3, [sp, #16]
    5c2a:	2b01      	cmp	r3, #1
    5c2c:	d902      	bls.n	5c34 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5c2e:	230d      	movs	r3, #13
    5c30:	9307      	str	r3, [sp, #28]
                        break;
    5c32:	e008      	b.n	5c46 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5c34:	9b05      	ldr	r3, [sp, #20]
    5c36:	3301      	adds	r3, #1
    5c38:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5c3a:	9b06      	ldr	r3, [sp, #24]
    5c3c:	3301      	adds	r3, #1
    5c3e:	9306      	str	r3, [sp, #24]
    5c40:	9b06      	ldr	r3, [sp, #24]
    5c42:	2b1f      	cmp	r3, #31
    5c44:	d9da      	bls.n	5bfc <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5c46:	9b07      	ldr	r3, [sp, #28]
}
    5c48:	4618      	mov	r0, r3
    5c4a:	b008      	add	sp, #32
    5c4c:	4770      	bx	lr
    5c4e:	bf00      	nop
    5c50:	4007f000 	.word	0x4007f000
    5c54:	1fff8ce0 	.word	0x1fff8ce0

00005c58 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5c58:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5c5a:	4b0c      	ldr	r3, [pc, #48]	; (5c8c <Power_Ip_RCM_GetResetRawValue+0x34>)
    5c5c:	699a      	ldr	r2, [r3, #24]
    5c5e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c62:	4013      	ands	r3, r2
    5c64:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5c66:	9b01      	ldr	r3, [sp, #4]
    5c68:	2b00      	cmp	r3, #0
    5c6a:	d008      	beq.n	5c7e <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5c6c:	4907      	ldr	r1, [pc, #28]	; (5c8c <Power_Ip_RCM_GetResetRawValue+0x34>)
    5c6e:	9a01      	ldr	r2, [sp, #4]
    5c70:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c74:	4013      	ands	r3, r2
    5c76:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5c78:	4a05      	ldr	r2, [pc, #20]	; (5c90 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5c7a:	9b01      	ldr	r3, [sp, #4]
    5c7c:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5c7e:	4b04      	ldr	r3, [pc, #16]	; (5c90 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5c80:	681b      	ldr	r3, [r3, #0]
    5c82:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5c84:	9b00      	ldr	r3, [sp, #0]
}
    5c86:	4618      	mov	r0, r3
    5c88:	b002      	add	sp, #8
    5c8a:	4770      	bx	lr
    5c8c:	4007f000 	.word	0x4007f000
    5c90:	1fff8ce0 	.word	0x1fff8ce0

00005c94 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5c94:	b082      	sub	sp, #8
    5c96:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5c98:	9b01      	ldr	r3, [sp, #4]
    5c9a:	681b      	ldr	r3, [r3, #0]
    5c9c:	4a03      	ldr	r2, [pc, #12]	; (5cac <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5c9e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5ca2:	6093      	str	r3, [r2, #8]
}
    5ca4:	bf00      	nop
    5ca6:	b002      	add	sp, #8
    5ca8:	4770      	bx	lr
    5caa:	bf00      	nop
    5cac:	4007e000 	.word	0x4007e000

00005cb0 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5cb0:	b084      	sub	sp, #16
    5cb2:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5cb4:	2301      	movs	r3, #1
    5cb6:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5cb8:	4b15      	ldr	r3, [pc, #84]	; (5d10 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5cba:	695b      	ldr	r3, [r3, #20]
    5cbc:	b2db      	uxtb	r3, r3
    5cbe:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5cc0:	9b01      	ldr	r3, [sp, #4]
    5cc2:	2b02      	cmp	r3, #2
    5cc4:	d012      	beq.n	5cec <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5cc6:	9b01      	ldr	r3, [sp, #4]
    5cc8:	2b02      	cmp	r3, #2
    5cca:	d818      	bhi.n	5cfe <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5ccc:	9b01      	ldr	r3, [sp, #4]
    5cce:	2b00      	cmp	r3, #0
    5cd0:	d003      	beq.n	5cda <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5cd2:	9b01      	ldr	r3, [sp, #4]
    5cd4:	2b01      	cmp	r3, #1
    5cd6:	d003      	beq.n	5ce0 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5cd8:	e011      	b.n	5cfe <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5cda:	2300      	movs	r3, #0
    5cdc:	9303      	str	r3, [sp, #12]
            break;
    5cde:	e013      	b.n	5d08 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5ce0:	9b02      	ldr	r3, [sp, #8]
    5ce2:	2b01      	cmp	r3, #1
    5ce4:	d10d      	bne.n	5d02 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5ce6:	2300      	movs	r3, #0
    5ce8:	9303      	str	r3, [sp, #12]
            break;
    5cea:	e00a      	b.n	5d02 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5cec:	9b02      	ldr	r3, [sp, #8]
    5cee:	2b01      	cmp	r3, #1
    5cf0:	d002      	beq.n	5cf8 <Power_Ip_SMC_ModeCheckEntry+0x48>
    5cf2:	9b02      	ldr	r3, [sp, #8]
    5cf4:	2b10      	cmp	r3, #16
    5cf6:	d106      	bne.n	5d06 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5cf8:	2300      	movs	r3, #0
    5cfa:	9303      	str	r3, [sp, #12]
            break;
    5cfc:	e003      	b.n	5d06 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5cfe:	bf00      	nop
    5d00:	e002      	b.n	5d08 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5d02:	bf00      	nop
    5d04:	e000      	b.n	5d08 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5d06:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5d08:	9b03      	ldr	r3, [sp, #12]
}
    5d0a:	4618      	mov	r0, r3
    5d0c:	b004      	add	sp, #16
    5d0e:	4770      	bx	lr
    5d10:	4007e000 	.word	0x4007e000

00005d14 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5d14:	b500      	push	{lr}
    5d16:	b08b      	sub	sp, #44	; 0x2c
    5d18:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5d1a:	2300      	movs	r3, #0
    5d1c:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5d1e:	2300      	movs	r3, #0
    5d20:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5d22:	2300      	movs	r3, #0
    5d24:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5d28:	9b01      	ldr	r3, [sp, #4]
    5d2a:	685b      	ldr	r3, [r3, #4]
    5d2c:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5d2e:	9b08      	ldr	r3, [sp, #32]
    5d30:	2b02      	cmp	r3, #2
    5d32:	d076      	beq.n	5e22 <Power_Ip_SMC_ModeConfig+0x10e>
    5d34:	9b08      	ldr	r3, [sp, #32]
    5d36:	2b02      	cmp	r3, #2
    5d38:	f200 80ab 	bhi.w	5e92 <Power_Ip_SMC_ModeConfig+0x17e>
    5d3c:	9b08      	ldr	r3, [sp, #32]
    5d3e:	2b00      	cmp	r3, #0
    5d40:	d003      	beq.n	5d4a <Power_Ip_SMC_ModeConfig+0x36>
    5d42:	9b08      	ldr	r3, [sp, #32]
    5d44:	2b01      	cmp	r3, #1
    5d46:	d034      	beq.n	5db2 <Power_Ip_SMC_ModeConfig+0x9e>
    5d48:	e0a3      	b.n	5e92 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5d4a:	4b58      	ldr	r3, [pc, #352]	; (5eac <Power_Ip_SMC_ModeConfig+0x198>)
    5d4c:	68db      	ldr	r3, [r3, #12]
    5d4e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d50:	9b06      	ldr	r3, [sp, #24]
    5d52:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d56:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5d58:	4a54      	ldr	r2, [pc, #336]	; (5eac <Power_Ip_SMC_ModeConfig+0x198>)
    5d5a:	9b06      	ldr	r3, [sp, #24]
    5d5c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5d5e:	aa02      	add	r2, sp, #8
    5d60:	a903      	add	r1, sp, #12
    5d62:	a804      	add	r0, sp, #16
    5d64:	f24c 3350 	movw	r3, #50000	; 0xc350
    5d68:	f7ff fece 	bl	5b08 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5d6c:	9a02      	ldr	r2, [sp, #8]
    5d6e:	a903      	add	r1, sp, #12
    5d70:	ab04      	add	r3, sp, #16
    5d72:	4618      	mov	r0, r3
    5d74:	f7ff fee2 	bl	5b3c <Power_Ip_TimeoutExpired>
    5d78:	4603      	mov	r3, r0
    5d7a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5d7e:	4b4b      	ldr	r3, [pc, #300]	; (5eac <Power_Ip_SMC_ModeConfig+0x198>)
    5d80:	695b      	ldr	r3, [r3, #20]
    5d82:	f003 0301 	and.w	r3, r3, #1
    5d86:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5d88:	9b05      	ldr	r3, [sp, #20]
    5d8a:	2b01      	cmp	r3, #1
    5d8c:	d006      	beq.n	5d9c <Power_Ip_SMC_ModeConfig+0x88>
    5d8e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d92:	f083 0301 	eor.w	r3, r3, #1
    5d96:	b2db      	uxtb	r3, r3
    5d98:	2b00      	cmp	r3, #0
    5d9a:	d1e7      	bne.n	5d6c <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5d9c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5da0:	2b00      	cmp	r3, #0
    5da2:	d079      	beq.n	5e98 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5da4:	2301      	movs	r3, #1
    5da6:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5da8:	21ff      	movs	r1, #255	; 0xff
    5daa:	2000      	movs	r0, #0
    5dac:	f7ff fe90 	bl	5ad0 <Power_Ip_ReportPowerErrors>
            }

            break;
    5db0:	e072      	b.n	5e98 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5db2:	4b3e      	ldr	r3, [pc, #248]	; (5eac <Power_Ip_SMC_ModeConfig+0x198>)
    5db4:	68db      	ldr	r3, [r3, #12]
    5db6:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5db8:	9b06      	ldr	r3, [sp, #24]
    5dba:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5dbe:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5dc0:	9b06      	ldr	r3, [sp, #24]
    5dc2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5dc6:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5dc8:	4a38      	ldr	r2, [pc, #224]	; (5eac <Power_Ip_SMC_ModeConfig+0x198>)
    5dca:	9b06      	ldr	r3, [sp, #24]
    5dcc:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5dce:	aa02      	add	r2, sp, #8
    5dd0:	a903      	add	r1, sp, #12
    5dd2:	a804      	add	r0, sp, #16
    5dd4:	f24c 3350 	movw	r3, #50000	; 0xc350
    5dd8:	f7ff fe96 	bl	5b08 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5ddc:	9a02      	ldr	r2, [sp, #8]
    5dde:	a903      	add	r1, sp, #12
    5de0:	ab04      	add	r3, sp, #16
    5de2:	4618      	mov	r0, r3
    5de4:	f7ff feaa 	bl	5b3c <Power_Ip_TimeoutExpired>
    5de8:	4603      	mov	r3, r0
    5dea:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5dee:	4b2f      	ldr	r3, [pc, #188]	; (5eac <Power_Ip_SMC_ModeConfig+0x198>)
    5df0:	695b      	ldr	r3, [r3, #20]
    5df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5df6:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5df8:	9b05      	ldr	r3, [sp, #20]
    5dfa:	2b80      	cmp	r3, #128	; 0x80
    5dfc:	d006      	beq.n	5e0c <Power_Ip_SMC_ModeConfig+0xf8>
    5dfe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e02:	f083 0301 	eor.w	r3, r3, #1
    5e06:	b2db      	uxtb	r3, r3
    5e08:	2b00      	cmp	r3, #0
    5e0a:	d1e7      	bne.n	5ddc <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5e0c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e10:	2b00      	cmp	r3, #0
    5e12:	d043      	beq.n	5e9c <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e14:	2301      	movs	r3, #1
    5e16:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5e18:	21ff      	movs	r1, #255	; 0xff
    5e1a:	2000      	movs	r0, #0
    5e1c:	f7ff fe58 	bl	5ad0 <Power_Ip_ReportPowerErrors>
            }

            break;
    5e20:	e03c      	b.n	5e9c <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5e22:	4b22      	ldr	r3, [pc, #136]	; (5eac <Power_Ip_SMC_ModeConfig+0x198>)
    5e24:	68db      	ldr	r3, [r3, #12]
    5e26:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5e28:	9b06      	ldr	r3, [sp, #24]
    5e2a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5e2e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5e30:	9b06      	ldr	r3, [sp, #24]
    5e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5e36:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5e38:	4a1c      	ldr	r2, [pc, #112]	; (5eac <Power_Ip_SMC_ModeConfig+0x198>)
    5e3a:	9b06      	ldr	r3, [sp, #24]
    5e3c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5e3e:	aa02      	add	r2, sp, #8
    5e40:	a903      	add	r1, sp, #12
    5e42:	a804      	add	r0, sp, #16
    5e44:	f24c 3350 	movw	r3, #50000	; 0xc350
    5e48:	f7ff fe5e 	bl	5b08 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5e4c:	9a02      	ldr	r2, [sp, #8]
    5e4e:	a903      	add	r1, sp, #12
    5e50:	ab04      	add	r3, sp, #16
    5e52:	4618      	mov	r0, r3
    5e54:	f7ff fe72 	bl	5b3c <Power_Ip_TimeoutExpired>
    5e58:	4603      	mov	r3, r0
    5e5a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5e5e:	4b13      	ldr	r3, [pc, #76]	; (5eac <Power_Ip_SMC_ModeConfig+0x198>)
    5e60:	695b      	ldr	r3, [r3, #20]
    5e62:	f003 0304 	and.w	r3, r3, #4
    5e66:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5e68:	9b05      	ldr	r3, [sp, #20]
    5e6a:	2b04      	cmp	r3, #4
    5e6c:	d006      	beq.n	5e7c <Power_Ip_SMC_ModeConfig+0x168>
    5e6e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e72:	f083 0301 	eor.w	r3, r3, #1
    5e76:	b2db      	uxtb	r3, r3
    5e78:	2b00      	cmp	r3, #0
    5e7a:	d1e7      	bne.n	5e4c <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5e7c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e80:	2b00      	cmp	r3, #0
    5e82:	d00d      	beq.n	5ea0 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e84:	2301      	movs	r3, #1
    5e86:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5e88:	21ff      	movs	r1, #255	; 0xff
    5e8a:	2000      	movs	r0, #0
    5e8c:	f7ff fe20 	bl	5ad0 <Power_Ip_ReportPowerErrors>
            }

            break;
    5e90:	e006      	b.n	5ea0 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e92:	2301      	movs	r3, #1
    5e94:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5e96:	e004      	b.n	5ea2 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e98:	bf00      	nop
    5e9a:	e002      	b.n	5ea2 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e9c:	bf00      	nop
    5e9e:	e000      	b.n	5ea2 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5ea0:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5ea4:	4618      	mov	r0, r3
    5ea6:	b00b      	add	sp, #44	; 0x2c
    5ea8:	f85d fb04 	ldr.w	pc, [sp], #4
    5eac:	4007e000 	.word	0x4007e000

00005eb0 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5eb0:	b500      	push	{lr}
    5eb2:	b085      	sub	sp, #20
    5eb4:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5eb6:	9b01      	ldr	r3, [sp, #4]
    5eb8:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5eba:	9803      	ldr	r0, [sp, #12]
    5ebc:	f000 fbc8 	bl	6650 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5ec0:	4a03      	ldr	r2, [pc, #12]	; (5ed0 <Port_Init+0x20>)
    5ec2:	9b03      	ldr	r3, [sp, #12]
    5ec4:	6013      	str	r3, [r2, #0]
        }
    }
}
    5ec6:	bf00      	nop
    5ec8:	b005      	add	sp, #20
    5eca:	f85d fb04 	ldr.w	pc, [sp], #4
    5ece:	bf00      	nop
    5ed0:	1fff8ce4 	.word	0x1fff8ce4

00005ed4 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5ed4:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5ed6:	4b03      	ldr	r3, [pc, #12]	; (5ee4 <Port_RefreshPortDirection+0x10>)
    5ed8:	681b      	ldr	r3, [r3, #0]
    5eda:	4618      	mov	r0, r3
    5edc:	f000 fc10 	bl	6700 <Port_Ipw_RefreshPortDirection>
    }
}
    5ee0:	bf00      	nop
    5ee2:	bd08      	pop	{r3, pc}
    5ee4:	1fff8ce4 	.word	0x1fff8ce4

00005ee8 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5ee8:	b086      	sub	sp, #24
    5eea:	9003      	str	r0, [sp, #12]
    5eec:	9102      	str	r1, [sp, #8]
    5eee:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5ef0:	23ff      	movs	r3, #255	; 0xff
    5ef2:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5ef4:	9b03      	ldr	r3, [sp, #12]
    5ef6:	4a39      	ldr	r2, [pc, #228]	; (5fdc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5ef8:	4293      	cmp	r3, r2
    5efa:	d151      	bne.n	5fa0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5efc:	9b02      	ldr	r3, [sp, #8]
    5efe:	2b10      	cmp	r3, #16
    5f00:	d867      	bhi.n	5fd2 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5f02:	a201      	add	r2, pc, #4	; (adr r2, 5f08 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5f08:	00005f4d 	.word	0x00005f4d
    5f0c:	00005f5b 	.word	0x00005f5b
    5f10:	00005fd3 	.word	0x00005fd3
    5f14:	00005fd3 	.word	0x00005fd3
    5f18:	00005fd3 	.word	0x00005fd3
    5f1c:	00005fd3 	.word	0x00005fd3
    5f20:	00005fd3 	.word	0x00005fd3
    5f24:	00005fd3 	.word	0x00005fd3
    5f28:	00005fd3 	.word	0x00005fd3
    5f2c:	00005fd3 	.word	0x00005fd3
    5f30:	00005fd3 	.word	0x00005fd3
    5f34:	00005fd3 	.word	0x00005fd3
    5f38:	00005fd3 	.word	0x00005fd3
    5f3c:	00005f69 	.word	0x00005f69
    5f40:	00005f77 	.word	0x00005f77
    5f44:	00005f85 	.word	0x00005f85
    5f48:	00005f93 	.word	0x00005f93
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5f4c:	2301      	movs	r3, #1
    5f4e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f50:	9a05      	ldr	r2, [sp, #20]
    5f52:	9b01      	ldr	r3, [sp, #4]
    5f54:	4313      	orrs	r3, r2
    5f56:	9305      	str	r3, [sp, #20]
                break;
    5f58:	e03c      	b.n	5fd4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5f5a:	2302      	movs	r3, #2
    5f5c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f5e:	9a05      	ldr	r2, [sp, #20]
    5f60:	9b01      	ldr	r3, [sp, #4]
    5f62:	4313      	orrs	r3, r2
    5f64:	9305      	str	r3, [sp, #20]
                break;
    5f66:	e035      	b.n	5fd4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5f68:	2304      	movs	r3, #4
    5f6a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f6c:	9a05      	ldr	r2, [sp, #20]
    5f6e:	9b01      	ldr	r3, [sp, #4]
    5f70:	4313      	orrs	r3, r2
    5f72:	9305      	str	r3, [sp, #20]
                break;
    5f74:	e02e      	b.n	5fd4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5f76:	2308      	movs	r3, #8
    5f78:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f7a:	9a05      	ldr	r2, [sp, #20]
    5f7c:	9b01      	ldr	r3, [sp, #4]
    5f7e:	4313      	orrs	r3, r2
    5f80:	9305      	str	r3, [sp, #20]
                break;
    5f82:	e027      	b.n	5fd4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5f84:	230e      	movs	r3, #14
    5f86:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f88:	9a05      	ldr	r2, [sp, #20]
    5f8a:	9b01      	ldr	r3, [sp, #4]
    5f8c:	4013      	ands	r3, r2
    5f8e:	9305      	str	r3, [sp, #20]
                break;
    5f90:	e020      	b.n	5fd4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5f92:	230d      	movs	r3, #13
    5f94:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f96:	9a05      	ldr	r2, [sp, #20]
    5f98:	9b01      	ldr	r3, [sp, #4]
    5f9a:	4013      	ands	r3, r2
    5f9c:	9305      	str	r3, [sp, #20]
                break;
    5f9e:	e019      	b.n	5fd4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5fa0:	9b03      	ldr	r3, [sp, #12]
    5fa2:	4a0f      	ldr	r2, [pc, #60]	; (5fe0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5fa4:	4293      	cmp	r3, r2
    5fa6:	d115      	bne.n	5fd4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5fa8:	9b02      	ldr	r3, [sp, #8]
    5faa:	2b00      	cmp	r3, #0
    5fac:	d003      	beq.n	5fb6 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5fae:	9b02      	ldr	r3, [sp, #8]
    5fb0:	2b01      	cmp	r3, #1
    5fb2:	d007      	beq.n	5fc4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5fb4:	e00e      	b.n	5fd4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5fb6:	230b      	movs	r3, #11
    5fb8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5fba:	9a05      	ldr	r2, [sp, #20]
    5fbc:	9b01      	ldr	r3, [sp, #4]
    5fbe:	4013      	ands	r3, r2
    5fc0:	9305      	str	r3, [sp, #20]
                break;
    5fc2:	e007      	b.n	5fd4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5fc4:	2307      	movs	r3, #7
    5fc6:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5fc8:	9a05      	ldr	r2, [sp, #20]
    5fca:	9b01      	ldr	r3, [sp, #4]
    5fcc:	4013      	ands	r3, r2
    5fce:	9305      	str	r3, [sp, #20]
                break;
    5fd0:	e000      	b.n	5fd4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5fd2:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5fd4:	9b05      	ldr	r3, [sp, #20]
}
    5fd6:	4618      	mov	r0, r3
    5fd8:	b006      	add	sp, #24
    5fda:	4770      	bx	lr
    5fdc:	4004a000 	.word	0x4004a000
    5fe0:	4004b000 	.word	0x4004b000

00005fe4 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5fe4:	b500      	push	{lr}
    5fe6:	b089      	sub	sp, #36	; 0x24
    5fe8:	9003      	str	r0, [sp, #12]
    5fea:	9102      	str	r1, [sp, #8]
    5fec:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5fee:	9b01      	ldr	r3, [sp, #4]
    5ff0:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5ff2:	9b01      	ldr	r3, [sp, #4]
    5ff4:	2b08      	cmp	r3, #8
    5ff6:	d121      	bne.n	603c <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5ff8:	4b13      	ldr	r3, [pc, #76]	; (6048 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5ffa:	685b      	ldr	r3, [r3, #4]
    5ffc:	f003 030f 	and.w	r3, r3, #15
    6000:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    6002:	9a06      	ldr	r2, [sp, #24]
    6004:	9902      	ldr	r1, [sp, #8]
    6006:	9803      	ldr	r0, [sp, #12]
    6008:	f7ff ff6e 	bl	5ee8 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    600c:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    600e:	9b05      	ldr	r3, [sp, #20]
    6010:	2bff      	cmp	r3, #255	; 0xff
    6012:	d011      	beq.n	6038 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    6014:	f009 f80e 	bl	f034 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6018:	4b0b      	ldr	r3, [pc, #44]	; (6048 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    601a:	685b      	ldr	r3, [r3, #4]
    601c:	4a0a      	ldr	r2, [pc, #40]	; (6048 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    601e:	f023 030f 	bic.w	r3, r3, #15
    6022:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6024:	4b08      	ldr	r3, [pc, #32]	; (6048 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6026:	685a      	ldr	r2, [r3, #4]
    6028:	9b05      	ldr	r3, [sp, #20]
    602a:	f003 030f 	and.w	r3, r3, #15
    602e:	4906      	ldr	r1, [pc, #24]	; (6048 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6030:	4313      	orrs	r3, r2
    6032:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    6034:	f009 f82a 	bl	f08c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6038:	2300      	movs	r3, #0
    603a:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    603c:	9b07      	ldr	r3, [sp, #28]
}
    603e:	4618      	mov	r0, r3
    6040:	b009      	add	sp, #36	; 0x24
    6042:	f85d fb04 	ldr.w	pc, [sp], #4
    6046:	bf00      	nop
    6048:	40048000 	.word	0x40048000

0000604c <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    604c:	b500      	push	{lr}
    604e:	b087      	sub	sp, #28
    6050:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    6052:	2300      	movs	r3, #0
    6054:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    6056:	2300      	movs	r3, #0
    6058:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    605a:	2300      	movs	r3, #0
    605c:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    605e:	9b01      	ldr	r3, [sp, #4]
    6060:	68db      	ldr	r3, [r3, #12]
    6062:	2b02      	cmp	r3, #2
    6064:	d00a      	beq.n	607c <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    6066:	9b05      	ldr	r3, [sp, #20]
    6068:	f043 0302 	orr.w	r3, r3, #2
    606c:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    606e:	9b01      	ldr	r3, [sp, #4]
    6070:	68db      	ldr	r3, [r3, #12]
    6072:	f003 0301 	and.w	r3, r3, #1
    6076:	9a05      	ldr	r2, [sp, #20]
    6078:	4313      	orrs	r3, r2
    607a:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    607c:	9b01      	ldr	r3, [sp, #4]
    607e:	699b      	ldr	r3, [r3, #24]
    6080:	019b      	lsls	r3, r3, #6
    6082:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6086:	9a05      	ldr	r2, [sp, #20]
    6088:	4313      	orrs	r3, r2
    608a:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    608c:	9b01      	ldr	r3, [sp, #4]
    608e:	6a1b      	ldr	r3, [r3, #32]
    6090:	03db      	lsls	r3, r3, #15
    6092:	b29b      	uxth	r3, r3
    6094:	9a05      	ldr	r2, [sp, #20]
    6096:	4313      	orrs	r3, r2
    6098:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    609a:	9b01      	ldr	r3, [sp, #4]
    609c:	7f1b      	ldrb	r3, [r3, #28]
    609e:	2b00      	cmp	r3, #0
    60a0:	d001      	beq.n	60a6 <Port_Ci_Port_Ip_PinInit+0x5a>
    60a2:	2310      	movs	r3, #16
    60a4:	e000      	b.n	60a8 <Port_Ci_Port_Ip_PinInit+0x5c>
    60a6:	2300      	movs	r3, #0
    60a8:	9a05      	ldr	r2, [sp, #20]
    60aa:	4313      	orrs	r3, r2
    60ac:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    60ae:	9b01      	ldr	r3, [sp, #4]
    60b0:	691b      	ldr	r3, [r3, #16]
    60b2:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    60b4:	9b01      	ldr	r3, [sp, #4]
    60b6:	6818      	ldr	r0, [r3, #0]
    60b8:	9b01      	ldr	r3, [sp, #4]
    60ba:	689b      	ldr	r3, [r3, #8]
    60bc:	9a04      	ldr	r2, [sp, #16]
    60be:	4619      	mov	r1, r3
    60c0:	f7ff ff90 	bl	5fe4 <Port_Ci_Port_Ip_ConfigureInterleave>
    60c4:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    60c6:	9b03      	ldr	r3, [sp, #12]
    60c8:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    60ca:	9b04      	ldr	r3, [sp, #16]
    60cc:	021b      	lsls	r3, r3, #8
    60ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    60d2:	9a05      	ldr	r2, [sp, #20]
    60d4:	4313      	orrs	r3, r2
    60d6:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    60d8:	f008 fe12 	bl	ed00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    60dc:	9b01      	ldr	r3, [sp, #4]
    60de:	681b      	ldr	r3, [r3, #0]
    60e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    60e4:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    60e6:	9b01      	ldr	r3, [sp, #4]
    60e8:	689b      	ldr	r3, [r3, #8]
    60ea:	2201      	movs	r2, #1
    60ec:	fa02 f303 	lsl.w	r3, r2, r3
    60f0:	43db      	mvns	r3, r3
    60f2:	9a02      	ldr	r2, [sp, #8]
    60f4:	4013      	ands	r3, r2
    60f6:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    60f8:	9b01      	ldr	r3, [sp, #4]
    60fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    60fe:	2b00      	cmp	r3, #0
    6100:	d001      	beq.n	6106 <Port_Ci_Port_Ip_PinInit+0xba>
    6102:	2201      	movs	r2, #1
    6104:	e000      	b.n	6108 <Port_Ci_Port_Ip_PinInit+0xbc>
    6106:	2200      	movs	r2, #0
    6108:	9b01      	ldr	r3, [sp, #4]
    610a:	689b      	ldr	r3, [r3, #8]
    610c:	fa02 f303 	lsl.w	r3, r2, r3
    6110:	9a02      	ldr	r2, [sp, #8]
    6112:	4313      	orrs	r3, r2
    6114:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    6116:	9b01      	ldr	r3, [sp, #4]
    6118:	681b      	ldr	r3, [r3, #0]
    611a:	9a02      	ldr	r2, [sp, #8]
    611c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6120:	f008 fe1a 	bl	ed58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6124:	9b04      	ldr	r3, [sp, #16]
    6126:	2b01      	cmp	r3, #1
    6128:	d16d      	bne.n	6206 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    612a:	9b01      	ldr	r3, [sp, #4]
    612c:	695b      	ldr	r3, [r3, #20]
    612e:	2b02      	cmp	r3, #2
    6130:	d138      	bne.n	61a4 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    6132:	9b01      	ldr	r3, [sp, #4]
    6134:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6138:	2b01      	cmp	r3, #1
    613a:	d10f      	bne.n	615c <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    613c:	f008 fe32 	bl	eda4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6140:	9b01      	ldr	r3, [sp, #4]
    6142:	685b      	ldr	r3, [r3, #4]
    6144:	6859      	ldr	r1, [r3, #4]
    6146:	9b01      	ldr	r3, [sp, #4]
    6148:	689b      	ldr	r3, [r3, #8]
    614a:	2201      	movs	r2, #1
    614c:	409a      	lsls	r2, r3
    614e:	9b01      	ldr	r3, [sp, #4]
    6150:	685b      	ldr	r3, [r3, #4]
    6152:	430a      	orrs	r2, r1
    6154:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    6156:	f008 fe51 	bl	edfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    615a:	e013      	b.n	6184 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    615c:	9b01      	ldr	r3, [sp, #4]
    615e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6162:	2b00      	cmp	r3, #0
    6164:	d10e      	bne.n	6184 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    6166:	f008 fe6f 	bl	ee48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    616a:	9b01      	ldr	r3, [sp, #4]
    616c:	685b      	ldr	r3, [r3, #4]
    616e:	6899      	ldr	r1, [r3, #8]
    6170:	9b01      	ldr	r3, [sp, #4]
    6172:	689b      	ldr	r3, [r3, #8]
    6174:	2201      	movs	r2, #1
    6176:	409a      	lsls	r2, r3
    6178:	9b01      	ldr	r3, [sp, #4]
    617a:	685b      	ldr	r3, [r3, #4]
    617c:	430a      	orrs	r2, r1
    617e:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6180:	f008 fe8e 	bl	eea0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6184:	f008 feb2 	bl	eeec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6188:	9b01      	ldr	r3, [sp, #4]
    618a:	685b      	ldr	r3, [r3, #4]
    618c:	6959      	ldr	r1, [r3, #20]
    618e:	9b01      	ldr	r3, [sp, #4]
    6190:	689b      	ldr	r3, [r3, #8]
    6192:	2201      	movs	r2, #1
    6194:	409a      	lsls	r2, r3
    6196:	9b01      	ldr	r3, [sp, #4]
    6198:	685b      	ldr	r3, [r3, #4]
    619a:	430a      	orrs	r2, r1
    619c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    619e:	f008 fed1 	bl	ef44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    61a2:	e030      	b.n	6206 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    61a4:	f008 fea2 	bl	eeec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    61a8:	9b01      	ldr	r3, [sp, #4]
    61aa:	685b      	ldr	r3, [r3, #4]
    61ac:	6959      	ldr	r1, [r3, #20]
    61ae:	9b01      	ldr	r3, [sp, #4]
    61b0:	689b      	ldr	r3, [r3, #8]
    61b2:	2201      	movs	r2, #1
    61b4:	fa02 f303 	lsl.w	r3, r2, r3
    61b8:	43da      	mvns	r2, r3
    61ba:	9b01      	ldr	r3, [sp, #4]
    61bc:	685b      	ldr	r3, [r3, #4]
    61be:	400a      	ands	r2, r1
    61c0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    61c2:	f008 febf 	bl	ef44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    61c6:	f008 fee3 	bl	ef90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    61ca:	9b01      	ldr	r3, [sp, #4]
    61cc:	685b      	ldr	r3, [r3, #4]
    61ce:	6999      	ldr	r1, [r3, #24]
    61d0:	9b01      	ldr	r3, [sp, #4]
    61d2:	689b      	ldr	r3, [r3, #8]
    61d4:	2201      	movs	r2, #1
    61d6:	fa02 f303 	lsl.w	r3, r2, r3
    61da:	43da      	mvns	r2, r3
    61dc:	9b01      	ldr	r3, [sp, #4]
    61de:	685b      	ldr	r3, [r3, #4]
    61e0:	400a      	ands	r2, r1
    61e2:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    61e4:	9b01      	ldr	r3, [sp, #4]
    61e6:	695b      	ldr	r3, [r3, #20]
    61e8:	2b03      	cmp	r3, #3
    61ea:	d10a      	bne.n	6202 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    61ec:	9b01      	ldr	r3, [sp, #4]
    61ee:	685b      	ldr	r3, [r3, #4]
    61f0:	6999      	ldr	r1, [r3, #24]
    61f2:	9b01      	ldr	r3, [sp, #4]
    61f4:	689b      	ldr	r3, [r3, #8]
    61f6:	2201      	movs	r2, #1
    61f8:	409a      	lsls	r2, r3
    61fa:	9b01      	ldr	r3, [sp, #4]
    61fc:	685b      	ldr	r3, [r3, #4]
    61fe:	430a      	orrs	r2, r1
    6200:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    6202:	f008 fef1 	bl	efe8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    6206:	9b01      	ldr	r3, [sp, #4]
    6208:	681b      	ldr	r3, [r3, #0]
    620a:	9a01      	ldr	r2, [sp, #4]
    620c:	6892      	ldr	r2, [r2, #8]
    620e:	9905      	ldr	r1, [sp, #20]
    6210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6214:	bf00      	nop
    6216:	b007      	add	sp, #28
    6218:	f85d fb04 	ldr.w	pc, [sp], #4

0000621c <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    621c:	b500      	push	{lr}
    621e:	b085      	sub	sp, #20
    6220:	9001      	str	r0, [sp, #4]
    6222:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6224:	2300      	movs	r3, #0
    6226:	9303      	str	r3, [sp, #12]
    6228:	e00d      	b.n	6246 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    622a:	9a03      	ldr	r2, [sp, #12]
    622c:	4613      	mov	r3, r2
    622e:	009b      	lsls	r3, r3, #2
    6230:	4413      	add	r3, r2
    6232:	00db      	lsls	r3, r3, #3
    6234:	461a      	mov	r2, r3
    6236:	9b00      	ldr	r3, [sp, #0]
    6238:	4413      	add	r3, r2
    623a:	4618      	mov	r0, r3
    623c:	f7ff ff06 	bl	604c <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6240:	9b03      	ldr	r3, [sp, #12]
    6242:	3301      	adds	r3, #1
    6244:	9303      	str	r3, [sp, #12]
    6246:	9a03      	ldr	r2, [sp, #12]
    6248:	9b01      	ldr	r3, [sp, #4]
    624a:	429a      	cmp	r2, r3
    624c:	d3ed      	bcc.n	622a <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    624e:	2300      	movs	r3, #0
}
    6250:	4618      	mov	r0, r3
    6252:	b005      	add	sp, #20
    6254:	f85d fb04 	ldr.w	pc, [sp], #4

00006258 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6258:	b500      	push	{lr}
    625a:	b087      	sub	sp, #28
    625c:	9003      	str	r0, [sp, #12]
    625e:	9102      	str	r1, [sp, #8]
    6260:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    6262:	9a01      	ldr	r2, [sp, #4]
    6264:	9902      	ldr	r1, [sp, #8]
    6266:	9803      	ldr	r0, [sp, #12]
    6268:	f7ff febc 	bl	5fe4 <Port_Ci_Port_Ip_ConfigureInterleave>
    626c:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    626e:	f008 ff33 	bl	f0d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    6272:	9b03      	ldr	r3, [sp, #12]
    6274:	9a02      	ldr	r2, [sp, #8]
    6276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    627a:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    627c:	9b04      	ldr	r3, [sp, #16]
    627e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    6282:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    6284:	9b05      	ldr	r3, [sp, #20]
    6286:	021b      	lsls	r3, r3, #8
    6288:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    628c:	9a04      	ldr	r2, [sp, #16]
    628e:	4313      	orrs	r3, r2
    6290:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    6292:	9b03      	ldr	r3, [sp, #12]
    6294:	9a02      	ldr	r2, [sp, #8]
    6296:	9904      	ldr	r1, [sp, #16]
    6298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    629c:	f008 ff48 	bl	f130 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    62a0:	bf00      	nop
    62a2:	b007      	add	sp, #28
    62a4:	f85d fb04 	ldr.w	pc, [sp], #4

000062a8 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    62a8:	b500      	push	{lr}
    62aa:	b083      	sub	sp, #12
    62ac:	9001      	str	r0, [sp, #4]
    62ae:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    62b0:	f008 ff64 	bl	f17c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    62b4:	9b01      	ldr	r3, [sp, #4]
    62b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    62ba:	2101      	movs	r1, #1
    62bc:	9b00      	ldr	r3, [sp, #0]
    62be:	fa01 f303 	lsl.w	r3, r1, r3
    62c2:	431a      	orrs	r2, r3
    62c4:	9b01      	ldr	r3, [sp, #4]
    62c6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    62ca:	f008 ff83 	bl	f1d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    62ce:	bf00      	nop
    62d0:	b003      	add	sp, #12
    62d2:	f85d fb04 	ldr.w	pc, [sp], #4

000062d6 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    62d6:	b500      	push	{lr}
    62d8:	b083      	sub	sp, #12
    62da:	9001      	str	r0, [sp, #4]
    62dc:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    62de:	f008 ff9f 	bl	f220 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    62e2:	9b01      	ldr	r3, [sp, #4]
    62e4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    62e8:	2101      	movs	r1, #1
    62ea:	9b00      	ldr	r3, [sp, #0]
    62ec:	fa01 f303 	lsl.w	r3, r1, r3
    62f0:	43db      	mvns	r3, r3
    62f2:	401a      	ands	r2, r3
    62f4:	9b01      	ldr	r3, [sp, #4]
    62f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    62fa:	f008 ffbd 	bl	f278 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    62fe:	bf00      	nop
    6300:	b003      	add	sp, #12
    6302:	f85d fb04 	ldr.w	pc, [sp], #4

00006306 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    6306:	b082      	sub	sp, #8
    6308:	9001      	str	r0, [sp, #4]
    630a:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    630c:	9b00      	ldr	r3, [sp, #0]
    630e:	785b      	ldrb	r3, [r3, #1]
    6310:	f003 0201 	and.w	r2, r3, #1
    6314:	9b01      	ldr	r3, [sp, #4]
    6316:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    631a:	9b00      	ldr	r3, [sp, #0]
    631c:	789b      	ldrb	r3, [r3, #2]
    631e:	f003 021f 	and.w	r2, r3, #31
    6322:	9b01      	ldr	r3, [sp, #4]
    6324:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6328:	bf00      	nop
    632a:	b002      	add	sp, #8
    632c:	4770      	bx	lr

0000632e <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    632e:	b086      	sub	sp, #24
    6330:	9003      	str	r0, [sp, #12]
    6332:	9301      	str	r3, [sp, #4]
    6334:	460b      	mov	r3, r1
    6336:	f8ad 300a 	strh.w	r3, [sp, #10]
    633a:	4613      	mov	r3, r2
    633c:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6340:	2300      	movs	r3, #0
    6342:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    6346:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    634a:	f043 0301 	orr.w	r3, r3, #1
    634e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    6352:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6356:	f043 0302 	orr.w	r3, r3, #2
    635a:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    635e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6362:	f043 0310 	orr.w	r3, r3, #16
    6366:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    636a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    636e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6372:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    6376:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    637a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    637e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    6382:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    638a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    638e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    6392:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6396:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    639a:	4013      	ands	r3, r2
    639c:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    63a0:	9b01      	ldr	r3, [sp, #4]
    63a2:	2b00      	cmp	r3, #0
    63a4:	d003      	beq.n	63ae <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    63a6:	9b01      	ldr	r3, [sp, #4]
    63a8:	2b01      	cmp	r3, #1
    63aa:	d00a      	beq.n	63c2 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    63ac:	e013      	b.n	63d6 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    63ae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    63b2:	041a      	lsls	r2, r3, #16
    63b4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63b8:	431a      	orrs	r2, r3
    63ba:	9b03      	ldr	r3, [sp, #12]
    63bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    63c0:	e009      	b.n	63d6 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    63c2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    63c6:	041a      	lsls	r2, r3, #16
    63c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63cc:	431a      	orrs	r2, r3
    63ce:	9b03      	ldr	r3, [sp, #12]
    63d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    63d4:	bf00      	nop
    }
}
    63d6:	bf00      	nop
    63d8:	b006      	add	sp, #24
    63da:	4770      	bx	lr

000063dc <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    63dc:	b500      	push	{lr}
    63de:	b087      	sub	sp, #28
    63e0:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    63e2:	9b01      	ldr	r3, [sp, #4]
    63e4:	885b      	ldrh	r3, [r3, #2]
    63e6:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    63ea:	9b01      	ldr	r3, [sp, #4]
    63ec:	689b      	ldr	r3, [r3, #8]
    63ee:	7a1b      	ldrb	r3, [r3, #8]
    63f0:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    63f4:	9b01      	ldr	r3, [sp, #4]
    63f6:	689b      	ldr	r3, [r3, #8]
    63f8:	681b      	ldr	r3, [r3, #0]
    63fa:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    63fc:	9b01      	ldr	r3, [sp, #4]
    63fe:	689b      	ldr	r3, [r3, #8]
    6400:	685b      	ldr	r3, [r3, #4]
    6402:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6404:	2300      	movs	r3, #0
    6406:	f8ad 3016 	strh.w	r3, [sp, #22]
    640a:	e111      	b.n	6630 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    640c:	9b02      	ldr	r3, [sp, #8]
    640e:	2b02      	cmp	r3, #2
    6410:	d169      	bne.n	64e6 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6412:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6416:	2b01      	cmp	r3, #1
    6418:	d11a      	bne.n	6450 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    641a:	9b01      	ldr	r3, [sp, #4]
    641c:	685a      	ldr	r2, [r3, #4]
    641e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6422:	005b      	lsls	r3, r3, #1
    6424:	4413      	add	r3, r2
    6426:	881b      	ldrh	r3, [r3, #0]
    6428:	f003 021f 	and.w	r2, r3, #31
    642c:	9b01      	ldr	r3, [sp, #4]
    642e:	6859      	ldr	r1, [r3, #4]
    6430:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6434:	005b      	lsls	r3, r3, #1
    6436:	440b      	add	r3, r1
    6438:	881b      	ldrh	r3, [r3, #0]
    643a:	095b      	lsrs	r3, r3, #5
    643c:	b29b      	uxth	r3, r3
    643e:	4619      	mov	r1, r3
    6440:	4b81      	ldr	r3, [pc, #516]	; (6648 <Port_Ipw_Init_UnusedPins+0x26c>)
    6442:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6446:	2101      	movs	r1, #1
    6448:	fa01 f202 	lsl.w	r2, r1, r2
    644c:	605a      	str	r2, [r3, #4]
    644e:	e01d      	b.n	648c <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6450:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6454:	2b00      	cmp	r3, #0
    6456:	d119      	bne.n	648c <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6458:	9b01      	ldr	r3, [sp, #4]
    645a:	685a      	ldr	r2, [r3, #4]
    645c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6460:	005b      	lsls	r3, r3, #1
    6462:	4413      	add	r3, r2
    6464:	881b      	ldrh	r3, [r3, #0]
    6466:	f003 021f 	and.w	r2, r3, #31
    646a:	9b01      	ldr	r3, [sp, #4]
    646c:	6859      	ldr	r1, [r3, #4]
    646e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6472:	005b      	lsls	r3, r3, #1
    6474:	440b      	add	r3, r1
    6476:	881b      	ldrh	r3, [r3, #0]
    6478:	095b      	lsrs	r3, r3, #5
    647a:	b29b      	uxth	r3, r3
    647c:	4619      	mov	r1, r3
    647e:	4b72      	ldr	r3, [pc, #456]	; (6648 <Port_Ipw_Init_UnusedPins+0x26c>)
    6480:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6484:	2101      	movs	r1, #1
    6486:	fa01 f202 	lsl.w	r2, r1, r2
    648a:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    648c:	f008 ff1a 	bl	f2c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6490:	9b01      	ldr	r3, [sp, #4]
    6492:	685a      	ldr	r2, [r3, #4]
    6494:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6498:	005b      	lsls	r3, r3, #1
    649a:	4413      	add	r3, r2
    649c:	881b      	ldrh	r3, [r3, #0]
    649e:	095b      	lsrs	r3, r3, #5
    64a0:	b29b      	uxth	r3, r3
    64a2:	461a      	mov	r2, r3
    64a4:	4b68      	ldr	r3, [pc, #416]	; (6648 <Port_Ipw_Init_UnusedPins+0x26c>)
    64a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64aa:	6959      	ldr	r1, [r3, #20]
    64ac:	9b01      	ldr	r3, [sp, #4]
    64ae:	685a      	ldr	r2, [r3, #4]
    64b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64b4:	005b      	lsls	r3, r3, #1
    64b6:	4413      	add	r3, r2
    64b8:	881b      	ldrh	r3, [r3, #0]
    64ba:	f003 031f 	and.w	r3, r3, #31
    64be:	2201      	movs	r2, #1
    64c0:	409a      	lsls	r2, r3
    64c2:	9b01      	ldr	r3, [sp, #4]
    64c4:	6858      	ldr	r0, [r3, #4]
    64c6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64ca:	005b      	lsls	r3, r3, #1
    64cc:	4403      	add	r3, r0
    64ce:	881b      	ldrh	r3, [r3, #0]
    64d0:	095b      	lsrs	r3, r3, #5
    64d2:	b29b      	uxth	r3, r3
    64d4:	4618      	mov	r0, r3
    64d6:	4b5c      	ldr	r3, [pc, #368]	; (6648 <Port_Ipw_Init_UnusedPins+0x26c>)
    64d8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    64dc:	430a      	orrs	r2, r1
    64de:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    64e0:	f008 ff1c 	bl	f31c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    64e4:	e086      	b.n	65f4 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    64e6:	f008 feed 	bl	f2c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    64ea:	9b01      	ldr	r3, [sp, #4]
    64ec:	685a      	ldr	r2, [r3, #4]
    64ee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64f2:	005b      	lsls	r3, r3, #1
    64f4:	4413      	add	r3, r2
    64f6:	881b      	ldrh	r3, [r3, #0]
    64f8:	095b      	lsrs	r3, r3, #5
    64fa:	b29b      	uxth	r3, r3
    64fc:	461a      	mov	r2, r3
    64fe:	4b52      	ldr	r3, [pc, #328]	; (6648 <Port_Ipw_Init_UnusedPins+0x26c>)
    6500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6504:	6959      	ldr	r1, [r3, #20]
    6506:	9b01      	ldr	r3, [sp, #4]
    6508:	685a      	ldr	r2, [r3, #4]
    650a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    650e:	005b      	lsls	r3, r3, #1
    6510:	4413      	add	r3, r2
    6512:	881b      	ldrh	r3, [r3, #0]
    6514:	f003 031f 	and.w	r3, r3, #31
    6518:	2201      	movs	r2, #1
    651a:	fa02 f303 	lsl.w	r3, r2, r3
    651e:	43da      	mvns	r2, r3
    6520:	9b01      	ldr	r3, [sp, #4]
    6522:	6858      	ldr	r0, [r3, #4]
    6524:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6528:	005b      	lsls	r3, r3, #1
    652a:	4403      	add	r3, r0
    652c:	881b      	ldrh	r3, [r3, #0]
    652e:	095b      	lsrs	r3, r3, #5
    6530:	b29b      	uxth	r3, r3
    6532:	4618      	mov	r0, r3
    6534:	4b44      	ldr	r3, [pc, #272]	; (6648 <Port_Ipw_Init_UnusedPins+0x26c>)
    6536:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    653a:	400a      	ands	r2, r1
    653c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    653e:	f008 feed 	bl	f31c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    6542:	f008 ff11 	bl	f368 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6546:	9b01      	ldr	r3, [sp, #4]
    6548:	685a      	ldr	r2, [r3, #4]
    654a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    654e:	005b      	lsls	r3, r3, #1
    6550:	4413      	add	r3, r2
    6552:	881b      	ldrh	r3, [r3, #0]
    6554:	095b      	lsrs	r3, r3, #5
    6556:	b29b      	uxth	r3, r3
    6558:	461a      	mov	r2, r3
    655a:	4b3b      	ldr	r3, [pc, #236]	; (6648 <Port_Ipw_Init_UnusedPins+0x26c>)
    655c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6560:	6999      	ldr	r1, [r3, #24]
    6562:	9b01      	ldr	r3, [sp, #4]
    6564:	685a      	ldr	r2, [r3, #4]
    6566:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    656a:	005b      	lsls	r3, r3, #1
    656c:	4413      	add	r3, r2
    656e:	881b      	ldrh	r3, [r3, #0]
    6570:	f003 031f 	and.w	r3, r3, #31
    6574:	2201      	movs	r2, #1
    6576:	fa02 f303 	lsl.w	r3, r2, r3
    657a:	43da      	mvns	r2, r3
    657c:	9b01      	ldr	r3, [sp, #4]
    657e:	6858      	ldr	r0, [r3, #4]
    6580:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6584:	005b      	lsls	r3, r3, #1
    6586:	4403      	add	r3, r0
    6588:	881b      	ldrh	r3, [r3, #0]
    658a:	095b      	lsrs	r3, r3, #5
    658c:	b29b      	uxth	r3, r3
    658e:	4618      	mov	r0, r3
    6590:	4b2d      	ldr	r3, [pc, #180]	; (6648 <Port_Ipw_Init_UnusedPins+0x26c>)
    6592:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6596:	400a      	ands	r2, r1
    6598:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    659a:	9b02      	ldr	r3, [sp, #8]
    659c:	2b03      	cmp	r3, #3
    659e:	d127      	bne.n	65f0 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    65a0:	9b01      	ldr	r3, [sp, #4]
    65a2:	685a      	ldr	r2, [r3, #4]
    65a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65a8:	005b      	lsls	r3, r3, #1
    65aa:	4413      	add	r3, r2
    65ac:	881b      	ldrh	r3, [r3, #0]
    65ae:	095b      	lsrs	r3, r3, #5
    65b0:	b29b      	uxth	r3, r3
    65b2:	461a      	mov	r2, r3
    65b4:	4b24      	ldr	r3, [pc, #144]	; (6648 <Port_Ipw_Init_UnusedPins+0x26c>)
    65b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    65ba:	6999      	ldr	r1, [r3, #24]
    65bc:	9b01      	ldr	r3, [sp, #4]
    65be:	685a      	ldr	r2, [r3, #4]
    65c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65c4:	005b      	lsls	r3, r3, #1
    65c6:	4413      	add	r3, r2
    65c8:	881b      	ldrh	r3, [r3, #0]
    65ca:	f003 031f 	and.w	r3, r3, #31
    65ce:	2201      	movs	r2, #1
    65d0:	409a      	lsls	r2, r3
    65d2:	9b01      	ldr	r3, [sp, #4]
    65d4:	6858      	ldr	r0, [r3, #4]
    65d6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65da:	005b      	lsls	r3, r3, #1
    65dc:	4403      	add	r3, r0
    65de:	881b      	ldrh	r3, [r3, #0]
    65e0:	095b      	lsrs	r3, r3, #5
    65e2:	b29b      	uxth	r3, r3
    65e4:	4618      	mov	r0, r3
    65e6:	4b18      	ldr	r3, [pc, #96]	; (6648 <Port_Ipw_Init_UnusedPins+0x26c>)
    65e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    65ec:	430a      	orrs	r2, r1
    65ee:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    65f0:	f008 fee6 	bl	f3c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    65f4:	9b01      	ldr	r3, [sp, #4]
    65f6:	685a      	ldr	r2, [r3, #4]
    65f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65fc:	005b      	lsls	r3, r3, #1
    65fe:	4413      	add	r3, r2
    6600:	881b      	ldrh	r3, [r3, #0]
    6602:	095b      	lsrs	r3, r3, #5
    6604:	b29b      	uxth	r3, r3
    6606:	461a      	mov	r2, r3
    6608:	4b10      	ldr	r3, [pc, #64]	; (664c <Port_Ipw_Init_UnusedPins+0x270>)
    660a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    660e:	9a01      	ldr	r2, [sp, #4]
    6610:	6851      	ldr	r1, [r2, #4]
    6612:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6616:	0052      	lsls	r2, r2, #1
    6618:	440a      	add	r2, r1
    661a:	8812      	ldrh	r2, [r2, #0]
    661c:	f002 021f 	and.w	r2, r2, #31
    6620:	9903      	ldr	r1, [sp, #12]
    6622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6626:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    662a:	3301      	adds	r3, #1
    662c:	f8ad 3016 	strh.w	r3, [sp, #22]
    6630:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6634:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6638:	429a      	cmp	r2, r3
    663a:	f4ff aee7 	bcc.w	640c <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    663e:	bf00      	nop
    6640:	bf00      	nop
    6642:	b007      	add	sp, #28
    6644:	f85d fb04 	ldr.w	pc, [sp], #4
    6648:	00010834 	.word	0x00010834
    664c:	00010820 	.word	0x00010820

00006650 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6650:	b500      	push	{lr}
    6652:	b085      	sub	sp, #20
    6654:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    6656:	9b01      	ldr	r3, [sp, #4]
    6658:	7c1b      	ldrb	r3, [r3, #16]
    665a:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    665e:	2300      	movs	r3, #0
    6660:	f8ad 300e 	strh.w	r3, [sp, #14]
    6664:	e035      	b.n	66d2 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    6666:	9b01      	ldr	r3, [sp, #4]
    6668:	695a      	ldr	r2, [r3, #20]
    666a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    666e:	00db      	lsls	r3, r3, #3
    6670:	4413      	add	r3, r2
    6672:	781b      	ldrb	r3, [r3, #0]
    6674:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6678:	f89d 300c 	ldrb.w	r3, [sp, #12]
    667c:	4a1f      	ldr	r2, [pc, #124]	; (66fc <Port_Ipw_Init+0xac>)
    667e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6682:	9b01      	ldr	r3, [sp, #4]
    6684:	695a      	ldr	r2, [r3, #20]
    6686:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    668a:	00db      	lsls	r3, r3, #3
    668c:	4413      	add	r3, r2
    668e:	4619      	mov	r1, r3
    6690:	f7ff fe39 	bl	6306 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6694:	f009 f802 	bl	f69c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6698:	f89d 300c 	ldrb.w	r3, [sp, #12]
    669c:	4a17      	ldr	r2, [pc, #92]	; (66fc <Port_Ipw_Init+0xac>)
    669e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66a2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    66a6:	9b01      	ldr	r3, [sp, #4]
    66a8:	695a      	ldr	r2, [r3, #20]
    66aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    66ae:	00db      	lsls	r3, r3, #3
    66b0:	4413      	add	r3, r2
    66b2:	685a      	ldr	r2, [r3, #4]
    66b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    66b8:	4810      	ldr	r0, [pc, #64]	; (66fc <Port_Ipw_Init+0xac>)
    66ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    66be:	430a      	orrs	r2, r1
    66c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    66c4:	f009 f816 	bl	f6f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    66c8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    66cc:	3301      	adds	r3, #1
    66ce:	f8ad 300e 	strh.w	r3, [sp, #14]
    66d2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    66d6:	b29b      	uxth	r3, r3
    66d8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66dc:	429a      	cmp	r2, r3
    66de:	d3c2      	bcc.n	6666 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    66e0:	9b01      	ldr	r3, [sp, #4]
    66e2:	6a1b      	ldr	r3, [r3, #32]
    66e4:	4619      	mov	r1, r3
    66e6:	2002      	movs	r0, #2
    66e8:	f7ff fd98 	bl	621c <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    66ec:	9801      	ldr	r0, [sp, #4]
    66ee:	f7ff fe75 	bl	63dc <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    66f2:	bf00      	nop
    66f4:	b005      	add	sp, #20
    66f6:	f85d fb04 	ldr.w	pc, [sp], #4
    66fa:	bf00      	nop
    66fc:	00010820 	.word	0x00010820

00006700 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    6700:	b500      	push	{lr}
    6702:	b085      	sub	sp, #20
    6704:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    6706:	9b01      	ldr	r3, [sp, #4]
    6708:	881b      	ldrh	r3, [r3, #0]
    670a:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    670e:	2300      	movs	r3, #0
    6710:	f8ad 300e 	strh.w	r3, [sp, #14]
    6714:	e0d2      	b.n	68bc <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    6716:	9b01      	ldr	r3, [sp, #4]
    6718:	68d9      	ldr	r1, [r3, #12]
    671a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    671e:	4613      	mov	r3, r2
    6720:	009b      	lsls	r3, r3, #2
    6722:	4413      	add	r3, r2
    6724:	009b      	lsls	r3, r3, #2
    6726:	440b      	add	r3, r1
    6728:	7c5b      	ldrb	r3, [r3, #17]
    672a:	f083 0301 	eor.w	r3, r3, #1
    672e:	b2db      	uxtb	r3, r3
    6730:	2b00      	cmp	r3, #0
    6732:	f000 80be 	beq.w	68b2 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    6736:	9b01      	ldr	r3, [sp, #4]
    6738:	68d9      	ldr	r1, [r3, #12]
    673a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    673e:	4613      	mov	r3, r2
    6740:	009b      	lsls	r3, r3, #2
    6742:	4413      	add	r3, r2
    6744:	009b      	lsls	r3, r3, #2
    6746:	440b      	add	r3, r1
    6748:	7c1b      	ldrb	r3, [r3, #16]
    674a:	2b00      	cmp	r3, #0
    674c:	f000 80b1 	beq.w	68b2 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    6750:	9b01      	ldr	r3, [sp, #4]
    6752:	68d9      	ldr	r1, [r3, #12]
    6754:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6758:	4613      	mov	r3, r2
    675a:	009b      	lsls	r3, r3, #2
    675c:	4413      	add	r3, r2
    675e:	009b      	lsls	r3, r3, #2
    6760:	440b      	add	r3, r1
    6762:	881b      	ldrh	r3, [r3, #0]
    6764:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6768:	9b01      	ldr	r3, [sp, #4]
    676a:	68d9      	ldr	r1, [r3, #12]
    676c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6770:	4613      	mov	r3, r2
    6772:	009b      	lsls	r3, r3, #2
    6774:	4413      	add	r3, r2
    6776:	009b      	lsls	r3, r3, #2
    6778:	440b      	add	r3, r1
    677a:	68db      	ldr	r3, [r3, #12]
    677c:	2b02      	cmp	r3, #2
    677e:	d11d      	bne.n	67bc <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6780:	f009 f8d4 	bl	f92c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6784:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6788:	095b      	lsrs	r3, r3, #5
    678a:	b29b      	uxth	r3, r3
    678c:	461a      	mov	r2, r3
    678e:	4b51      	ldr	r3, [pc, #324]	; (68d4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6794:	6959      	ldr	r1, [r3, #20]
    6796:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    679a:	f003 031f 	and.w	r3, r3, #31
    679e:	2201      	movs	r2, #1
    67a0:	409a      	lsls	r2, r3
    67a2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67a6:	095b      	lsrs	r3, r3, #5
    67a8:	b29b      	uxth	r3, r3
    67aa:	4618      	mov	r0, r3
    67ac:	4b49      	ldr	r3, [pc, #292]	; (68d4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    67ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67b2:	430a      	orrs	r2, r1
    67b4:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    67b6:	f009 f8e5 	bl	f984 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    67ba:	e07a      	b.n	68b2 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    67bc:	9b01      	ldr	r3, [sp, #4]
    67be:	68d9      	ldr	r1, [r3, #12]
    67c0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67c4:	4613      	mov	r3, r2
    67c6:	009b      	lsls	r3, r3, #2
    67c8:	4413      	add	r3, r2
    67ca:	009b      	lsls	r3, r3, #2
    67cc:	440b      	add	r3, r1
    67ce:	68db      	ldr	r3, [r3, #12]
    67d0:	2b01      	cmp	r3, #1
    67d2:	d00b      	beq.n	67ec <Port_Ipw_RefreshPortDirection+0xec>
    67d4:	9b01      	ldr	r3, [sp, #4]
    67d6:	68d9      	ldr	r1, [r3, #12]
    67d8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67dc:	4613      	mov	r3, r2
    67de:	009b      	lsls	r3, r3, #2
    67e0:	4413      	add	r3, r2
    67e2:	009b      	lsls	r3, r3, #2
    67e4:	440b      	add	r3, r1
    67e6:	68db      	ldr	r3, [r3, #12]
    67e8:	2b03      	cmp	r3, #3
    67ea:	d162      	bne.n	68b2 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    67ec:	f009 f89e 	bl	f92c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    67f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67f4:	095b      	lsrs	r3, r3, #5
    67f6:	b29b      	uxth	r3, r3
    67f8:	461a      	mov	r2, r3
    67fa:	4b36      	ldr	r3, [pc, #216]	; (68d4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    67fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6800:	6959      	ldr	r1, [r3, #20]
    6802:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6806:	f003 031f 	and.w	r3, r3, #31
    680a:	2201      	movs	r2, #1
    680c:	fa02 f303 	lsl.w	r3, r2, r3
    6810:	43da      	mvns	r2, r3
    6812:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6816:	095b      	lsrs	r3, r3, #5
    6818:	b29b      	uxth	r3, r3
    681a:	4618      	mov	r0, r3
    681c:	4b2d      	ldr	r3, [pc, #180]	; (68d4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    681e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6822:	400a      	ands	r2, r1
    6824:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6826:	f009 f8ad 	bl	f984 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    682a:	f009 f8d1 	bl	f9d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    682e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6832:	095b      	lsrs	r3, r3, #5
    6834:	b29b      	uxth	r3, r3
    6836:	461a      	mov	r2, r3
    6838:	4b26      	ldr	r3, [pc, #152]	; (68d4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    683a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    683e:	6999      	ldr	r1, [r3, #24]
    6840:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6844:	f003 031f 	and.w	r3, r3, #31
    6848:	2201      	movs	r2, #1
    684a:	fa02 f303 	lsl.w	r3, r2, r3
    684e:	43da      	mvns	r2, r3
    6850:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6854:	095b      	lsrs	r3, r3, #5
    6856:	b29b      	uxth	r3, r3
    6858:	4618      	mov	r0, r3
    685a:	4b1e      	ldr	r3, [pc, #120]	; (68d4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    685c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6860:	400a      	ands	r2, r1
    6862:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6864:	9b01      	ldr	r3, [sp, #4]
    6866:	68d9      	ldr	r1, [r3, #12]
    6868:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    686c:	4613      	mov	r3, r2
    686e:	009b      	lsls	r3, r3, #2
    6870:	4413      	add	r3, r2
    6872:	009b      	lsls	r3, r3, #2
    6874:	440b      	add	r3, r1
    6876:	68db      	ldr	r3, [r3, #12]
    6878:	2b03      	cmp	r3, #3
    687a:	d118      	bne.n	68ae <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    687c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6880:	095b      	lsrs	r3, r3, #5
    6882:	b29b      	uxth	r3, r3
    6884:	461a      	mov	r2, r3
    6886:	4b13      	ldr	r3, [pc, #76]	; (68d4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    688c:	6999      	ldr	r1, [r3, #24]
    688e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6892:	f003 031f 	and.w	r3, r3, #31
    6896:	2201      	movs	r2, #1
    6898:	409a      	lsls	r2, r3
    689a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    689e:	095b      	lsrs	r3, r3, #5
    68a0:	b29b      	uxth	r3, r3
    68a2:	4618      	mov	r0, r3
    68a4:	4b0b      	ldr	r3, [pc, #44]	; (68d4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    68a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    68aa:	430a      	orrs	r2, r1
    68ac:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    68ae:	f009 f8bb 	bl	fa28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    68b2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    68b6:	3301      	adds	r3, #1
    68b8:	f8ad 300e 	strh.w	r3, [sp, #14]
    68bc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    68c0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    68c4:	429a      	cmp	r2, r3
    68c6:	f4ff af26 	bcc.w	6716 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    68ca:	bf00      	nop
    68cc:	bf00      	nop
    68ce:	b005      	add	sp, #20
    68d0:	f85d fb04 	ldr.w	pc, [sp], #4
    68d4:	00010834 	.word	0x00010834

000068d8 <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    68d8:	b500      	push	{lr}
    68da:	b083      	sub	sp, #12
    68dc:	4603      	mov	r3, r0
    68de:	460a      	mov	r2, r1
    68e0:	f88d 3007 	strb.w	r3, [sp, #7]
    68e4:	4613      	mov	r3, r2
    68e6:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    68ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
    68ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
    68f2:	2100      	movs	r1, #0
    68f4:	207b      	movs	r0, #123	; 0x7b
    68f6:	f009 fb37 	bl	ff68 <Det_ReportRuntimeError>
}
    68fa:	bf00      	nop
    68fc:	b003      	add	sp, #12
    68fe:	f85d fb04 	ldr.w	pc, [sp], #4

00006902 <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    6902:	b500      	push	{lr}
    6904:	b085      	sub	sp, #20
    6906:	4603      	mov	r3, r0
    6908:	460a      	mov	r2, r1
    690a:	f88d 3007 	strb.w	r3, [sp, #7]
    690e:	4613      	mov	r3, r2
    6910:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6914:	2300      	movs	r3, #0
    6916:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    691a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    691e:	4a0c      	ldr	r2, [pc, #48]	; (6950 <Adc_ValidateNotBusyNoQueue+0x4e>)
    6920:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    6924:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    6928:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    692c:	2b00      	cmp	r3, #0
    692e:	d008      	beq.n	6942 <Adc_ValidateNotBusyNoQueue+0x40>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    6930:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6934:	210b      	movs	r1, #11
    6936:	4618      	mov	r0, r3
    6938:	f7ff ffce 	bl	68d8 <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    693c:	2301      	movs	r3, #1
    693e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    6942:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6946:	4618      	mov	r0, r3
    6948:	b005      	add	sp, #20
    694a:	f85d fb04 	ldr.w	pc, [sp], #4
    694e:	bf00      	nop
    6950:	1fff8d00 	.word	0x1fff8d00

00006954 <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    6954:	b500      	push	{lr}
    6956:	b085      	sub	sp, #20
    6958:	4603      	mov	r3, r0
    695a:	f8ad 3006 	strh.w	r3, [sp, #6]
    695e:	460b      	mov	r3, r1
    6960:	f88d 3005 	strb.w	r3, [sp, #5]
    6964:	4613      	mov	r3, r2
    6966:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    696a:	2301      	movs	r3, #1
    696c:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    6970:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6974:	4917      	ldr	r1, [pc, #92]	; (69d4 <Adc_ValidateNotBusyNoPrio+0x80>)
    6976:	4613      	mov	r3, r2
    6978:	009b      	lsls	r3, r3, #2
    697a:	4413      	add	r3, r2
    697c:	009b      	lsls	r3, r3, #2
    697e:	440b      	add	r3, r1
    6980:	681b      	ldr	r3, [r3, #0]
    6982:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    6984:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6988:	f083 0301 	eor.w	r3, r3, #1
    698c:	b2db      	uxtb	r3, r3
    698e:	2b00      	cmp	r3, #0
    6990:	d007      	beq.n	69a2 <Adc_ValidateNotBusyNoPrio+0x4e>
    6992:	9b02      	ldr	r3, [sp, #8]
    6994:	2b00      	cmp	r3, #0
    6996:	d004      	beq.n	69a2 <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6998:	210b      	movs	r1, #11
    699a:	2002      	movs	r0, #2
    699c:	f7ff ff9c 	bl	68d8 <Adc_ReportDetRuntimeError>
    69a0:	e011      	b.n	69c6 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    69a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    69a6:	2b00      	cmp	r3, #0
    69a8:	d00a      	beq.n	69c0 <Adc_ValidateNotBusyNoPrio+0x6c>
    69aa:	9b02      	ldr	r3, [sp, #8]
    69ac:	2b00      	cmp	r3, #0
    69ae:	d007      	beq.n	69c0 <Adc_ValidateNotBusyNoPrio+0x6c>
    69b0:	9b02      	ldr	r3, [sp, #8]
    69b2:	2b03      	cmp	r3, #3
    69b4:	d004      	beq.n	69c0 <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    69b6:	210b      	movs	r1, #11
    69b8:	2002      	movs	r0, #2
    69ba:	f7ff ff8d 	bl	68d8 <Adc_ReportDetRuntimeError>
    69be:	e002      	b.n	69c6 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    69c0:	2300      	movs	r3, #0
    69c2:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    69c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    69ca:	4618      	mov	r0, r3
    69cc:	b005      	add	sp, #20
    69ce:	f85d fb04 	ldr.w	pc, [sp], #4
    69d2:	bf00      	nop
    69d4:	1fff8cec 	.word	0x1fff8cec

000069d8 <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    69d8:	b500      	push	{lr}
    69da:	b087      	sub	sp, #28
    69dc:	4603      	mov	r3, r0
    69de:	460a      	mov	r2, r1
    69e0:	f88d 3007 	strb.w	r3, [sp, #7]
    69e4:	4613      	mov	r3, r2
    69e6:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    69ea:	2300      	movs	r3, #0
    69ec:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    69f0:	2300      	movs	r3, #0
    69f2:	f8ad 3016 	strh.w	r3, [sp, #22]
    69f6:	e02c      	b.n	6a52 <Adc_ValidateCheckGroupNotConversion+0x7a>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    69f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    69fc:	4a1d      	ldr	r2, [pc, #116]	; (6a74 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    69fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a02:	685a      	ldr	r2, [r3, #4]
    6a04:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a08:	2134      	movs	r1, #52	; 0x34
    6a0a:	fb01 f303 	mul.w	r3, r1, r3
    6a0e:	4413      	add	r3, r2
    6a10:	881b      	ldrh	r3, [r3, #0]
    6a12:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    6a16:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    6a1a:	4917      	ldr	r1, [pc, #92]	; (6a78 <Adc_ValidateCheckGroupNotConversion+0xa0>)
    6a1c:	4613      	mov	r3, r2
    6a1e:	009b      	lsls	r3, r3, #2
    6a20:	4413      	add	r3, r2
    6a22:	009b      	lsls	r3, r3, #2
    6a24:	440b      	add	r3, r1
    6a26:	681b      	ldr	r3, [r3, #0]
    6a28:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    6a2a:	9b03      	ldr	r3, [sp, #12]
    6a2c:	2b00      	cmp	r3, #0
    6a2e:	d00b      	beq.n	6a48 <Adc_ValidateCheckGroupNotConversion+0x70>
    6a30:	9b03      	ldr	r3, [sp, #12]
    6a32:	2b03      	cmp	r3, #3
    6a34:	d008      	beq.n	6a48 <Adc_ValidateCheckGroupNotConversion+0x70>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    6a36:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a3a:	210b      	movs	r1, #11
    6a3c:	4618      	mov	r0, r3
    6a3e:	f7ff ff4b 	bl	68d8 <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    6a42:	2301      	movs	r3, #1
    6a44:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    6a48:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a4c:	3301      	adds	r3, #1
    6a4e:	f8ad 3016 	strh.w	r3, [sp, #22]
    6a52:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6a56:	4a07      	ldr	r2, [pc, #28]	; (6a74 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    6a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a5c:	891b      	ldrh	r3, [r3, #8]
    6a5e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6a62:	429a      	cmp	r2, r3
    6a64:	d3c8      	bcc.n	69f8 <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    6a66:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    6a6a:	4618      	mov	r0, r3
    6a6c:	b007      	add	sp, #28
    6a6e:	f85d fb04 	ldr.w	pc, [sp], #4
    6a72:	bf00      	nop
    6a74:	1fff8ce8 	.word	0x1fff8ce8
    6a78:	1fff8cec 	.word	0x1fff8cec

00006a7c <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    6a7c:	b500      	push	{lr}
    6a7e:	b085      	sub	sp, #20
    6a80:	4603      	mov	r3, r0
    6a82:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6a86:	2300      	movs	r3, #0
    6a88:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    6a8c:	2301      	movs	r3, #1
    6a8e:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    6a92:	2300      	movs	r3, #0
    6a94:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6a98:	2300      	movs	r3, #0
    6a9a:	f88d 300d 	strb.w	r3, [sp, #13]
    6a9e:	e01d      	b.n	6adc <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    6aa0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6aa4:	4a1b      	ldr	r2, [pc, #108]	; (6b14 <Adc_ValidateDeInitNotBusy+0x98>)
    6aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6aaa:	681a      	ldr	r2, [r3, #0]
    6aac:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6ab0:	4413      	add	r3, r2
    6ab2:	7f9b      	ldrb	r3, [r3, #30]
    6ab4:	2b01      	cmp	r3, #1
    6ab6:	d10c      	bne.n	6ad2 <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    6ab8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6abc:	2101      	movs	r1, #1
    6abe:	4618      	mov	r0, r3
    6ac0:	f7ff ff1f 	bl	6902 <Adc_ValidateNotBusyNoQueue>
    6ac4:	4603      	mov	r3, r0
    6ac6:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    6aca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6ace:	2b01      	cmp	r3, #1
    6ad0:	d009      	beq.n	6ae6 <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6ad2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6ad6:	3301      	adds	r3, #1
    6ad8:	f88d 300d 	strb.w	r3, [sp, #13]
    6adc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6ae0:	2b01      	cmp	r3, #1
    6ae2:	d9dd      	bls.n	6aa0 <Adc_ValidateDeInitNotBusy+0x24>
    6ae4:	e000      	b.n	6ae8 <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    6ae6:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    6ae8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6aec:	2b00      	cmp	r3, #0
    6aee:	d10b      	bne.n	6b08 <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    6af0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6af4:	4619      	mov	r1, r3
    6af6:	2001      	movs	r0, #1
    6af8:	f7ff ff6e 	bl	69d8 <Adc_ValidateCheckGroupNotConversion>
    6afc:	4603      	mov	r3, r0
    6afe:	2b00      	cmp	r3, #0
    6b00:	d102      	bne.n	6b08 <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    6b02:	2300      	movs	r3, #0
    6b04:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    6b08:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    6b0c:	4618      	mov	r0, r3
    6b0e:	b005      	add	sp, #20
    6b10:	f85d fb04 	ldr.w	pc, [sp], #4
    6b14:	1fff8ce8 	.word	0x1fff8ce8

00006b18 <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    6b18:	b500      	push	{lr}
    6b1a:	b085      	sub	sp, #20
    6b1c:	4603      	mov	r3, r0
    6b1e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    6b22:	2301      	movs	r3, #1
    6b24:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    6b28:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6b2c:	490b      	ldr	r1, [pc, #44]	; (6b5c <Adc_ValidateSetupBufferNotBusy+0x44>)
    6b2e:	4613      	mov	r3, r2
    6b30:	009b      	lsls	r3, r3, #2
    6b32:	4413      	add	r3, r2
    6b34:	009b      	lsls	r3, r3, #2
    6b36:	440b      	add	r3, r1
    6b38:	681b      	ldr	r3, [r3, #0]
    6b3a:	2b00      	cmp	r3, #0
    6b3c:	d004      	beq.n	6b48 <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    6b3e:	210b      	movs	r1, #11
    6b40:	200c      	movs	r0, #12
    6b42:	f7ff fec9 	bl	68d8 <Adc_ReportDetRuntimeError>
    6b46:	e002      	b.n	6b4e <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    6b48:	2300      	movs	r3, #0
    6b4a:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    6b4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6b52:	4618      	mov	r0, r3
    6b54:	b005      	add	sp, #20
    6b56:	f85d fb04 	ldr.w	pc, [sp], #4
    6b5a:	bf00      	nop
    6b5c:	1fff8cec 	.word	0x1fff8cec

00006b60 <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    6b60:	b500      	push	{lr}
    6b62:	b085      	sub	sp, #20
    6b64:	4603      	mov	r3, r0
    6b66:	460a      	mov	r2, r1
    6b68:	f8ad 3006 	strh.w	r3, [sp, #6]
    6b6c:	4613      	mov	r3, r2
    6b6e:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    6b72:	2300      	movs	r3, #0
    6b74:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    6b78:	2300      	movs	r3, #0
    6b7a:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    6b7e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b82:	4a32      	ldr	r2, [pc, #200]	; (6c4c <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b88:	68da      	ldr	r2, [r3, #12]
    6b8a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6b8e:	005b      	lsls	r3, r3, #1
    6b90:	4413      	add	r3, r2
    6b92:	881b      	ldrh	r3, [r3, #0]
    6b94:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    6b98:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b9c:	4a2b      	ldr	r2, [pc, #172]	; (6c4c <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ba2:	685a      	ldr	r2, [r3, #4]
    6ba4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6ba8:	2134      	movs	r1, #52	; 0x34
    6baa:	fb01 f303 	mul.w	r3, r1, r3
    6bae:	4413      	add	r3, r2
    6bb0:	689b      	ldr	r3, [r3, #8]
    6bb2:	2b00      	cmp	r3, #0
    6bb4:	d02c      	beq.n	6c10 <Adc_ValidateStateStartGroupConvNotBusy+0xb0>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    6bb6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6bba:	4a24      	ldr	r2, [pc, #144]	; (6c4c <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bc0:	685a      	ldr	r2, [r3, #4]
    6bc2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6bc6:	2134      	movs	r1, #52	; 0x34
    6bc8:	fb01 f303 	mul.w	r3, r1, r3
    6bcc:	4413      	add	r3, r2
    6bce:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    6bd0:	2b01      	cmp	r3, #1
    6bd2:	d120      	bne.n	6c16 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    6bd4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6bd8:	4a1c      	ldr	r2, [pc, #112]	; (6c4c <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bde:	685a      	ldr	r2, [r3, #4]
    6be0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6be4:	2134      	movs	r1, #52	; 0x34
    6be6:	fb01 f303 	mul.w	r3, r1, r3
    6bea:	4413      	add	r3, r2
    6bec:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    6bee:	2b01      	cmp	r3, #1
    6bf0:	d111      	bne.n	6c16 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    6bf2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6bf6:	4a15      	ldr	r2, [pc, #84]	; (6c4c <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bfc:	685a      	ldr	r2, [r3, #4]
    6bfe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6c02:	2134      	movs	r1, #52	; 0x34
    6c04:	fb01 f303 	mul.w	r3, r1, r3
    6c08:	4413      	add	r3, r2
    6c0a:	699b      	ldr	r3, [r3, #24]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    6c0c:	2b00      	cmp	r3, #0
    6c0e:	d102      	bne.n	6c16 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    6c10:	2301      	movs	r3, #1
    6c12:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    6c16:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6c1a:	2b01      	cmp	r3, #1
    6c1c:	d104      	bne.n	6c28 <Adc_ValidateStateStartGroupConvNotBusy+0xc8>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6c1e:	210b      	movs	r1, #11
    6c20:	2002      	movs	r0, #2
    6c22:	f7ff fe59 	bl	68d8 <Adc_ReportDetRuntimeError>
    6c26:	e00b      	b.n	6c40 <Adc_ValidateStateStartGroupConvNotBusy+0xe0>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    6c28:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6c2c:	f89d 100e 	ldrb.w	r1, [sp, #14]
    6c30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6c34:	4618      	mov	r0, r3
    6c36:	f7ff fe8d 	bl	6954 <Adc_ValidateNotBusyNoPrio>
    6c3a:	4603      	mov	r3, r0
    6c3c:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    6c40:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6c44:	4618      	mov	r0, r3
    6c46:	b005      	add	sp, #20
    6c48:	f85d fb04 	ldr.w	pc, [sp], #4
    6c4c:	1fff8ce8 	.word	0x1fff8ce8

00006c50 <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    6c50:	b500      	push	{lr}
    6c52:	b085      	sub	sp, #20
    6c54:	4603      	mov	r3, r0
    6c56:	f88d 3007 	strb.w	r3, [sp, #7]
    6c5a:	460b      	mov	r3, r1
    6c5c:	f8ad 3004 	strh.w	r3, [sp, #4]
    6c60:	4613      	mov	r3, r2
    6c62:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    6c66:	2300      	movs	r3, #0
    6c68:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    6c6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c70:	2b0b      	cmp	r3, #11
    6c72:	d03b      	beq.n	6cec <Adc_ValidateStateNotIdle+0x9c>
    6c74:	2b0b      	cmp	r3, #11
    6c76:	dc4e      	bgt.n	6d16 <Adc_ValidateStateNotIdle+0xc6>
    6c78:	2b03      	cmp	r3, #3
    6c7a:	d022      	beq.n	6cc2 <Adc_ValidateStateNotIdle+0x72>
    6c7c:	2b04      	cmp	r3, #4
    6c7e:	d14a      	bne.n	6d16 <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6c80:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6c84:	492a      	ldr	r1, [pc, #168]	; (6d30 <Adc_ValidateStateNotIdle+0xe0>)
    6c86:	4613      	mov	r3, r2
    6c88:	009b      	lsls	r3, r3, #2
    6c8a:	4413      	add	r3, r2
    6c8c:	009b      	lsls	r3, r3, #2
    6c8e:	440b      	add	r3, r1
    6c90:	681b      	ldr	r3, [r3, #0]
    6c92:	2b00      	cmp	r3, #0
    6c94:	d141      	bne.n	6d1a <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    6c96:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6c9a:	4925      	ldr	r1, [pc, #148]	; (6d30 <Adc_ValidateStateNotIdle+0xe0>)
    6c9c:	4613      	mov	r3, r2
    6c9e:	009b      	lsls	r3, r3, #2
    6ca0:	4413      	add	r3, r2
    6ca2:	009b      	lsls	r3, r3, #2
    6ca4:	440b      	add	r3, r1
    6ca6:	3304      	adds	r3, #4
    6ca8:	681b      	ldr	r3, [r3, #0]
    6caa:	2b00      	cmp	r3, #0
    6cac:	d135      	bne.n	6d1a <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6cae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cb2:	210c      	movs	r1, #12
    6cb4:	4618      	mov	r0, r3
    6cb6:	f7ff fe0f 	bl	68d8 <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    6cba:	2301      	movs	r3, #1
    6cbc:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    6cc0:	e02b      	b.n	6d1a <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6cc2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6cc6:	491a      	ldr	r1, [pc, #104]	; (6d30 <Adc_ValidateStateNotIdle+0xe0>)
    6cc8:	4613      	mov	r3, r2
    6cca:	009b      	lsls	r3, r3, #2
    6ccc:	4413      	add	r3, r2
    6cce:	009b      	lsls	r3, r3, #2
    6cd0:	440b      	add	r3, r1
    6cd2:	681b      	ldr	r3, [r3, #0]
    6cd4:	2b00      	cmp	r3, #0
    6cd6:	d122      	bne.n	6d1e <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6cd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cdc:	210c      	movs	r1, #12
    6cde:	4618      	mov	r0, r3
    6ce0:	f7ff fdfa 	bl	68d8 <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    6ce4:	2301      	movs	r3, #1
    6ce6:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    6cea:	e018      	b.n	6d1e <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6cec:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6cf0:	490f      	ldr	r1, [pc, #60]	; (6d30 <Adc_ValidateStateNotIdle+0xe0>)
    6cf2:	4613      	mov	r3, r2
    6cf4:	009b      	lsls	r3, r3, #2
    6cf6:	4413      	add	r3, r2
    6cf8:	009b      	lsls	r3, r3, #2
    6cfa:	440b      	add	r3, r1
    6cfc:	681b      	ldr	r3, [r3, #0]
    6cfe:	2b00      	cmp	r3, #0
    6d00:	d10f      	bne.n	6d22 <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6d02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d06:	210c      	movs	r1, #12
    6d08:	4618      	mov	r0, r3
    6d0a:	f7ff fde5 	bl	68d8 <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    6d0e:	2301      	movs	r3, #1
    6d10:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    6d14:	e005      	b.n	6d22 <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    6d16:	bf00      	nop
    6d18:	e004      	b.n	6d24 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6d1a:	bf00      	nop
    6d1c:	e002      	b.n	6d24 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6d1e:	bf00      	nop
    6d20:	e000      	b.n	6d24 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6d22:	bf00      	nop
        }
    }

    return ValidState;
    6d24:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6d28:	4618      	mov	r0, r3
    6d2a:	b005      	add	sp, #20
    6d2c:	f85d fb04 	ldr.w	pc, [sp], #4
    6d30:	1fff8cec 	.word	0x1fff8cec

00006d34 <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    6d34:	b084      	sub	sp, #16
    6d36:	4603      	mov	r3, r0
    6d38:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    6d3c:	2300      	movs	r3, #0
    6d3e:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    6d42:	2300      	movs	r3, #0
    6d44:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    6d48:	2300      	movs	r3, #0
    6d4a:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d4e:	e049      	b.n	6de4 <Adc_InitGroupsStatus+0xb0>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    6d50:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d54:	4a2a      	ldr	r2, [pc, #168]	; (6e00 <Adc_InitGroupsStatus+0xcc>)
    6d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d5a:	685a      	ldr	r2, [r3, #4]
    6d5c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d60:	2134      	movs	r1, #52	; 0x34
    6d62:	fb01 f303 	mul.w	r3, r1, r3
    6d66:	4413      	add	r3, r2
    6d68:	881b      	ldrh	r3, [r3, #0]
    6d6a:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    6d6e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6d72:	4924      	ldr	r1, [pc, #144]	; (6e04 <Adc_InitGroupsStatus+0xd0>)
    6d74:	4613      	mov	r3, r2
    6d76:	009b      	lsls	r3, r3, #2
    6d78:	4413      	add	r3, r2
    6d7a:	009b      	lsls	r3, r3, #2
    6d7c:	440b      	add	r3, r1
    6d7e:	2200      	movs	r2, #0
    6d80:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    6d82:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6d86:	491f      	ldr	r1, [pc, #124]	; (6e04 <Adc_InitGroupsStatus+0xd0>)
    6d88:	4613      	mov	r3, r2
    6d8a:	009b      	lsls	r3, r3, #2
    6d8c:	4413      	add	r3, r2
    6d8e:	009b      	lsls	r3, r3, #2
    6d90:	440b      	add	r3, r1
    6d92:	3304      	adds	r3, #4
    6d94:	2200      	movs	r2, #0
    6d96:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    6d98:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6d9c:	4919      	ldr	r1, [pc, #100]	; (6e04 <Adc_InitGroupsStatus+0xd0>)
    6d9e:	4613      	mov	r3, r2
    6da0:	009b      	lsls	r3, r3, #2
    6da2:	4413      	add	r3, r2
    6da4:	009b      	lsls	r3, r3, #2
    6da6:	440b      	add	r3, r1
    6da8:	3308      	adds	r3, #8
    6daa:	2200      	movs	r2, #0
    6dac:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    6dae:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6db2:	4914      	ldr	r1, [pc, #80]	; (6e04 <Adc_InitGroupsStatus+0xd0>)
    6db4:	4613      	mov	r3, r2
    6db6:	009b      	lsls	r3, r3, #2
    6db8:	4413      	add	r3, r2
    6dba:	009b      	lsls	r3, r3, #2
    6dbc:	440b      	add	r3, r1
    6dbe:	330c      	adds	r3, #12
    6dc0:	2200      	movs	r2, #0
    6dc2:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    6dc4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6dc8:	490e      	ldr	r1, [pc, #56]	; (6e04 <Adc_InitGroupsStatus+0xd0>)
    6dca:	4613      	mov	r3, r2
    6dcc:	009b      	lsls	r3, r3, #2
    6dce:	4413      	add	r3, r2
    6dd0:	009b      	lsls	r3, r3, #2
    6dd2:	440b      	add	r3, r1
    6dd4:	3310      	adds	r3, #16
    6dd6:	2200      	movs	r2, #0
    6dd8:	701a      	strb	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    6dda:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6dde:	3301      	adds	r3, #1
    6de0:	f8ad 300e 	strh.w	r3, [sp, #14]
    6de4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6de8:	4a05      	ldr	r2, [pc, #20]	; (6e00 <Adc_InitGroupsStatus+0xcc>)
    6dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dee:	891b      	ldrh	r3, [r3, #8]
    6df0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6df4:	429a      	cmp	r2, r3
    6df6:	d3ab      	bcc.n	6d50 <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    6df8:	bf00      	nop
    6dfa:	bf00      	nop
    6dfc:	b004      	add	sp, #16
    6dfe:	4770      	bx	lr
    6e00:	1fff8ce8 	.word	0x1fff8ce8
    6e04:	1fff8cec 	.word	0x1fff8cec

00006e08 <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    6e08:	b084      	sub	sp, #16
    6e0a:	4603      	mov	r3, r0
    6e0c:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    6e10:	2300      	movs	r3, #0
    6e12:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    6e16:	2300      	movs	r3, #0
    6e18:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6e1c:	2300      	movs	r3, #0
    6e1e:	f88d 300f 	strb.w	r3, [sp, #15]
    6e22:	e035      	b.n	6e90 <Adc_InitUnitStatus+0x88>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    6e24:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e28:	4a1d      	ldr	r2, [pc, #116]	; (6ea0 <Adc_InitUnitStatus+0x98>)
    6e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e2e:	681a      	ldr	r2, [r3, #0]
    6e30:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e34:	4413      	add	r3, r2
    6e36:	7f9b      	ldrb	r3, [r3, #30]
    6e38:	2b01      	cmp	r3, #1
    6e3a:	d124      	bne.n	6e86 <Adc_InitUnitStatus+0x7e>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    6e3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e40:	4a18      	ldr	r2, [pc, #96]	; (6ea4 <Adc_InitUnitStatus+0x9c>)
    6e42:	2100      	movs	r1, #0
    6e44:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    6e48:	2300      	movs	r3, #0
    6e4a:	f8ad 300c 	strh.w	r3, [sp, #12]
    6e4e:	e00f      	b.n	6e70 <Adc_InitUnitStatus+0x68>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    6e50:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6e54:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6e58:	4912      	ldr	r1, [pc, #72]	; (6ea4 <Adc_InitUnitStatus+0x9c>)
    6e5a:	0092      	lsls	r2, r2, #2
    6e5c:	4413      	add	r3, r2
    6e5e:	005b      	lsls	r3, r3, #1
    6e60:	440b      	add	r3, r1
    6e62:	2200      	movs	r2, #0
    6e64:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    6e66:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6e6a:	3301      	adds	r3, #1
    6e6c:	f8ad 300c 	strh.w	r3, [sp, #12]
    6e70:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6e74:	2b01      	cmp	r3, #1
    6e76:	d9eb      	bls.n	6e50 <Adc_InitUnitStatus+0x48>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    6e78:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e7c:	4a09      	ldr	r2, [pc, #36]	; (6ea4 <Adc_InitUnitStatus+0x9c>)
    6e7e:	00db      	lsls	r3, r3, #3
    6e80:	4413      	add	r3, r2
    6e82:	2200      	movs	r2, #0
    6e84:	719a      	strb	r2, [r3, #6]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6e86:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e8a:	3301      	adds	r3, #1
    6e8c:	f88d 300f 	strb.w	r3, [sp, #15]
    6e90:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e94:	2b01      	cmp	r3, #1
    6e96:	d9c5      	bls.n	6e24 <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    6e98:	bf00      	nop
    6e9a:	bf00      	nop
    6e9c:	b004      	add	sp, #16
    6e9e:	4770      	bx	lr
    6ea0:	1fff8ce8 	.word	0x1fff8ce8
    6ea4:	1fff8d00 	.word	0x1fff8d00

00006ea8 <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    6ea8:	b084      	sub	sp, #16
    6eaa:	9001      	str	r0, [sp, #4]
    6eac:	460b      	mov	r3, r1
    6eae:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    6eb2:	2300      	movs	r3, #0
    6eb4:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    6eb8:	2301      	movs	r3, #1
    6eba:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    6ebe:	9b01      	ldr	r3, [sp, #4]
    6ec0:	7c1b      	ldrb	r3, [r3, #16]
    6ec2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6ec6:	429a      	cmp	r2, r3
    6ec8:	d11c      	bne.n	6f04 <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    6eca:	2300      	movs	r3, #0
    6ecc:	f88d 300f 	strb.w	r3, [sp, #15]
    6ed0:	e012      	b.n	6ef8 <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    6ed2:	9b01      	ldr	r3, [sp, #4]
    6ed4:	695a      	ldr	r2, [r3, #20]
    6ed6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6eda:	4413      	add	r3, r2
    6edc:	781b      	ldrb	r3, [r3, #0]
    6ede:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6ee2:	429a      	cmp	r2, r3
    6ee4:	d103      	bne.n	6eee <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    6ee6:	2300      	movs	r3, #0
    6ee8:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    6eec:	e00a      	b.n	6f04 <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    6eee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6ef2:	3301      	adds	r3, #1
    6ef4:	f88d 300f 	strb.w	r3, [sp, #15]
    6ef8:	9b01      	ldr	r3, [sp, #4]
    6efa:	7e1b      	ldrb	r3, [r3, #24]
    6efc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6f00:	429a      	cmp	r2, r3
    6f02:	d3e6      	bcc.n	6ed2 <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    6f04:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    6f08:	4618      	mov	r0, r3
    6f0a:	b004      	add	sp, #16
    6f0c:	4770      	bx	lr

00006f0e <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    6f0e:	b500      	push	{lr}
    6f10:	b085      	sub	sp, #20
    6f12:	4603      	mov	r3, r0
    6f14:	f8ad 3006 	strh.w	r3, [sp, #6]
    6f18:	460b      	mov	r3, r1
    6f1a:	f88d 3005 	strb.w	r3, [sp, #5]
    6f1e:	4613      	mov	r3, r2
    6f20:	f88d 3004 	strb.w	r3, [sp, #4]
#if (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON)
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    /* First available slot in the Queue */
#if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) || ((ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)))
    Adc_QueueIndexType QueueIndex = 0U;
    6f24:	2300      	movs	r3, #0
    6f26:	f8ad 300e 	strh.w	r3, [sp, #14]
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    6f2a:	2300      	movs	r3, #0
    6f2c:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    6f30:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6f34:	493e      	ldr	r1, [pc, #248]	; (7030 <Adc_UpdateStatusStartConversion+0x122>)
    6f36:	4613      	mov	r3, r2
    6f38:	009b      	lsls	r3, r3, #2
    6f3a:	4413      	add	r3, r2
    6f3c:	009b      	lsls	r3, r3, #2
    6f3e:	440b      	add	r3, r1
    6f40:	2201      	movs	r2, #1
    6f42:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    6f44:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6f48:	4939      	ldr	r1, [pc, #228]	; (7030 <Adc_UpdateStatusStartConversion+0x122>)
    6f4a:	4613      	mov	r3, r2
    6f4c:	009b      	lsls	r3, r3, #2
    6f4e:	4413      	add	r3, r2
    6f50:	009b      	lsls	r3, r3, #2
    6f52:	440b      	add	r3, r1
    6f54:	3308      	adds	r3, #8
    6f56:	2200      	movs	r2, #0
    6f58:	801a      	strh	r2, [r3, #0]
            }
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
#else /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */
#if (ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)
        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    6f5a:	f003 fec9 	bl	acf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
        QueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    6f5e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6f62:	4a34      	ldr	r2, [pc, #208]	; (7034 <Adc_UpdateStatusStartConversion+0x126>)
    6f64:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    6f68:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (QueueIndex > (Adc_QueueIndexType)0U)
    6f6c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6f70:	2b00      	cmp	r3, #0
    6f72:	d016      	beq.n	6fa2 <Adc_UpdateStatusStartConversion+0x94>
        {
            /* Place the Group in the Queue */
            Adc_axUnitStatus[Unit].SwNormalQueue[QueueIndex] = Group;
    6f74:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6f78:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6f7c:	492d      	ldr	r1, [pc, #180]	; (7034 <Adc_UpdateStatusStartConversion+0x126>)
    6f7e:	0092      	lsls	r2, r2, #2
    6f80:	4413      	add	r3, r2
    6f82:	005b      	lsls	r3, r3, #1
    6f84:	440b      	add	r3, r1
    6f86:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6f8a:	805a      	strh	r2, [r3, #2]
            /* Increase the Queue Index */
            Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    6f8c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6f90:	4a28      	ldr	r2, [pc, #160]	; (7034 <Adc_UpdateStatusStartConversion+0x126>)
    6f92:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    6f96:	b292      	uxth	r2, r2
    6f98:	3201      	adds	r2, #1
    6f9a:	b291      	uxth	r1, r2
    6f9c:	4a25      	ldr	r2, [pc, #148]	; (7034 <Adc_UpdateStatusStartConversion+0x126>)
    6f9e:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    6fa2:	f003 fed1 	bl	ad48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    6fa6:	f003 fea3 	bl	acf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    6faa:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6fae:	4a21      	ldr	r2, [pc, #132]	; (7034 <Adc_UpdateStatusStartConversion+0x126>)
    6fb0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    6fb4:	f8ad 300a 	strh.w	r3, [sp, #10]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    6fb8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6fbc:	4a1d      	ldr	r2, [pc, #116]	; (7034 <Adc_UpdateStatusStartConversion+0x126>)
    6fbe:	00db      	lsls	r3, r3, #3
    6fc0:	4413      	add	r3, r2
    6fc2:	885b      	ldrh	r3, [r3, #2]
    6fc4:	b29b      	uxth	r3, r3
    6fc6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6fca:	429a      	cmp	r2, r3
    6fcc:	d003      	beq.n	6fd6 <Adc_UpdateStatusStartConversion+0xc8>
    6fce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6fd2:	2b00      	cmp	r3, #0
    6fd4:	d125      	bne.n	7022 <Adc_UpdateStatusStartConversion+0x114>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    6fd6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6fda:	4a16      	ldr	r2, [pc, #88]	; (7034 <Adc_UpdateStatusStartConversion+0x126>)
    6fdc:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    6fe0:	b29b      	uxth	r3, r3
    6fe2:	2b00      	cmp	r3, #0
    6fe4:	d112      	bne.n	700c <Adc_UpdateStatusStartConversion+0xfe>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    6fe6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6fea:	4a12      	ldr	r2, [pc, #72]	; (7034 <Adc_UpdateStatusStartConversion+0x126>)
    6fec:	00db      	lsls	r3, r3, #3
    6fee:	4413      	add	r3, r2
    6ff0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6ff4:	805a      	strh	r2, [r3, #2]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    6ff6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6ffa:	4a0e      	ldr	r2, [pc, #56]	; (7034 <Adc_UpdateStatusStartConversion+0x126>)
    6ffc:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    7000:	b292      	uxth	r2, r2
    7002:	3201      	adds	r2, #1
    7004:	b291      	uxth	r1, r2
    7006:	4a0b      	ldr	r2, [pc, #44]	; (7034 <Adc_UpdateStatusStartConversion+0x126>)
    7008:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    700c:	f003 fe9c 	bl	ad48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    7010:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7014:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7018:	4611      	mov	r1, r2
    701a:	4618      	mov	r0, r3
    701c:	f002 fbf2 	bl	9804 <Adc_Ipw_StartNormalConversion>
    7020:	e002      	b.n	7028 <Adc_UpdateStatusStartConversion+0x11a>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7022:	f003 fe91 	bl	ad48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    7026:	bf00      	nop
    7028:	bf00      	nop
    702a:	b005      	add	sp, #20
    702c:	f85d fb04 	ldr.w	pc, [sp], #4
    7030:	1fff8cec 	.word	0x1fff8cec
    7034:	1fff8d00 	.word	0x1fff8d00

00007038 <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    7038:	b500      	push	{lr}
    703a:	b085      	sub	sp, #20
    703c:	9001      	str	r0, [sp, #4]
    703e:	4608      	mov	r0, r1
    7040:	4611      	mov	r1, r2
    7042:	461a      	mov	r2, r3
    7044:	4603      	mov	r3, r0
    7046:	f8ad 3002 	strh.w	r3, [sp, #2]
    704a:	460b      	mov	r3, r1
    704c:	f88d 3001 	strb.w	r3, [sp, #1]
    7050:	4613      	mov	r3, r2
    7052:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    7056:	2300      	movs	r3, #0
    7058:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    705c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7060:	4a26      	ldr	r2, [pc, #152]	; (70fc <Adc_StopSwGroupConversion+0xc4>)
    7062:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7066:	b29a      	uxth	r2, r3
    7068:	9b01      	ldr	r3, [sp, #4]
    706a:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    706c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7070:	4a22      	ldr	r2, [pc, #136]	; (70fc <Adc_StopSwGroupConversion+0xc4>)
    7072:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7076:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    707a:	2300      	movs	r3, #0
    707c:	f8ad 300c 	strh.w	r3, [sp, #12]
    7080:	e02f      	b.n	70e2 <Adc_StopSwGroupConversion+0xaa>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    7082:	f89d 2001 	ldrb.w	r2, [sp, #1]
    7086:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    708a:	491c      	ldr	r1, [pc, #112]	; (70fc <Adc_StopSwGroupConversion+0xc4>)
    708c:	0092      	lsls	r2, r2, #2
    708e:	4413      	add	r3, r2
    7090:	005b      	lsls	r3, r3, #1
    7092:	440b      	add	r3, r1
    7094:	885b      	ldrh	r3, [r3, #2]
    7096:	b29b      	uxth	r3, r3
    7098:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    709c:	429a      	cmp	r2, r3
    709e:	d11b      	bne.n	70d8 <Adc_StopSwGroupConversion+0xa0>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    70a0:	9b01      	ldr	r3, [sp, #4]
    70a2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    70a6:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    70a8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    70ac:	2b00      	cmp	r3, #0
    70ae:	d10b      	bne.n	70c8 <Adc_StopSwGroupConversion+0x90>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    70b0:	f89d 2000 	ldrb.w	r2, [sp]
    70b4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    70b8:	f89d 3001 	ldrb.w	r3, [sp, #1]
    70bc:	4618      	mov	r0, r3
    70be:	f002 fc4b 	bl	9958 <Adc_Ipw_StopCurrentConversion>
    70c2:	4603      	mov	r3, r0
    70c4:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    70c8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    70cc:	f89d 3001 	ldrb.w	r3, [sp, #1]
    70d0:	4611      	mov	r1, r2
    70d2:	4618      	mov	r0, r3
    70d4:	f001 fd88 	bl	8be8 <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    70d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    70dc:	3301      	adds	r3, #1
    70de:	f8ad 300c 	strh.w	r3, [sp, #12]
    70e2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    70e6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    70ea:	429a      	cmp	r2, r3
    70ec:	d3c9      	bcc.n	7082 <Adc_StopSwGroupConversion+0x4a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    70ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    70f2:	4618      	mov	r0, r3
    70f4:	b005      	add	sp, #20
    70f6:	f85d fb04 	ldr.w	pc, [sp], #4
    70fa:	bf00      	nop
    70fc:	1fff8d00 	.word	0x1fff8d00

00007100 <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    7100:	b500      	push	{lr}
    7102:	b089      	sub	sp, #36	; 0x24
    7104:	4603      	mov	r3, r0
    7106:	f8ad 3006 	strh.w	r3, [sp, #6]
    710a:	460b      	mov	r3, r1
    710c:	f88d 3005 	strb.w	r3, [sp, #5]
    7110:	4613      	mov	r3, r2
    7112:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7116:	f89d 3004 	ldrb.w	r3, [sp, #4]
    711a:	4a4f      	ldr	r2, [pc, #316]	; (7258 <Adc_UpdateStatusStopConversion+0x158>)
    711c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7120:	68da      	ldr	r2, [r3, #12]
    7122:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7126:	005b      	lsls	r3, r3, #1
    7128:	4413      	add	r3, r2
    712a:	881b      	ldrh	r3, [r3, #0]
    712c:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    7130:	2300      	movs	r3, #0
    7132:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    7136:	2300      	movs	r3, #0
    7138:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    713c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7140:	4a45      	ldr	r2, [pc, #276]	; (7258 <Adc_UpdateStatusStopConversion+0x158>)
    7142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7146:	685a      	ldr	r2, [r3, #4]
    7148:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    714c:	2134      	movs	r1, #52	; 0x34
    714e:	fb01 f303 	mul.w	r3, r1, r3
    7152:	4413      	add	r3, r2
    7154:	689b      	ldr	r3, [r3, #8]
    7156:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    7158:	f89d 3004 	ldrb.w	r3, [sp, #4]
    715c:	4a3e      	ldr	r2, [pc, #248]	; (7258 <Adc_UpdateStatusStopConversion+0x158>)
    715e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7162:	685a      	ldr	r2, [r3, #4]
    7164:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7168:	2134      	movs	r1, #52	; 0x34
    716a:	fb01 f303 	mul.w	r3, r1, r3
    716e:	4413      	add	r3, r2
    7170:	685b      	ldr	r3, [r3, #4]
    7172:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    7174:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7178:	4a37      	ldr	r2, [pc, #220]	; (7258 <Adc_UpdateStatusStopConversion+0x158>)
    717a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    717e:	685a      	ldr	r2, [r3, #4]
    7180:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7184:	2134      	movs	r1, #52	; 0x34
    7186:	fb01 f303 	mul.w	r3, r1, r3
    718a:	4413      	add	r3, r2
    718c:	699b      	ldr	r3, [r3, #24]
    718e:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    7190:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7194:	4931      	ldr	r1, [pc, #196]	; (725c <Adc_UpdateStatusStopConversion+0x15c>)
    7196:	4613      	mov	r3, r2
    7198:	009b      	lsls	r3, r3, #2
    719a:	4413      	add	r3, r2
    719c:	009b      	lsls	r3, r3, #2
    719e:	440b      	add	r3, r1
    71a0:	681b      	ldr	r3, [r3, #0]
    71a2:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    71a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    71a8:	492c      	ldr	r1, [pc, #176]	; (725c <Adc_UpdateStatusStopConversion+0x15c>)
    71aa:	4613      	mov	r3, r2
    71ac:	009b      	lsls	r3, r3, #2
    71ae:	4413      	add	r3, r2
    71b0:	009b      	lsls	r3, r3, #2
    71b2:	440b      	add	r3, r1
    71b4:	3308      	adds	r3, #8
    71b6:	2200      	movs	r2, #0
    71b8:	801a      	strh	r2, [r3, #0]
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    71ba:	9b06      	ldr	r3, [sp, #24]
    71bc:	2b00      	cmp	r3, #0
    71be:	d005      	beq.n	71cc <Adc_UpdateStatusStopConversion+0xcc>
    71c0:	9b05      	ldr	r3, [sp, #20]
    71c2:	2b01      	cmp	r3, #1
    71c4:	d110      	bne.n	71e8 <Adc_UpdateStatusStopConversion+0xe8>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    71c6:	9b04      	ldr	r3, [sp, #16]
    71c8:	2b00      	cmp	r3, #0
    71ca:	d10d      	bne.n	71e8 <Adc_UpdateStatusStopConversion+0xe8>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    71cc:	9b03      	ldr	r3, [sp, #12]
    71ce:	2b03      	cmp	r3, #3
    71d0:	d10a      	bne.n	71e8 <Adc_UpdateStatusStopConversion+0xe8>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    71d2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    71d6:	4921      	ldr	r1, [pc, #132]	; (725c <Adc_UpdateStatusStopConversion+0x15c>)
    71d8:	4613      	mov	r3, r2
    71da:	009b      	lsls	r3, r3, #2
    71dc:	4413      	add	r3, r2
    71de:	009b      	lsls	r3, r3, #2
    71e0:	440b      	add	r3, r1
    71e2:	2200      	movs	r2, #0
    71e4:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    71e6:	e032      	b.n	724e <Adc_UpdateStatusStopConversion+0x14e>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    71e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    71ec:	f89d 2005 	ldrb.w	r2, [sp, #5]
    71f0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    71f4:	f10d 000a 	add.w	r0, sp, #10
    71f8:	f7ff ff1e 	bl	7038 <Adc_StopSwGroupConversion>
    71fc:	4603      	mov	r3, r0
    71fe:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7202:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7206:	4915      	ldr	r1, [pc, #84]	; (725c <Adc_UpdateStatusStopConversion+0x15c>)
    7208:	4613      	mov	r3, r2
    720a:	009b      	lsls	r3, r3, #2
    720c:	4413      	add	r3, r2
    720e:	009b      	lsls	r3, r3, #2
    7210:	440b      	add	r3, r1
    7212:	2200      	movs	r2, #0
    7214:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    7216:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    721a:	2b00      	cmp	r3, #0
    721c:	d10f      	bne.n	723e <Adc_UpdateStatusStopConversion+0x13e>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    721e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7222:	4a0f      	ldr	r2, [pc, #60]	; (7260 <Adc_UpdateStatusStopConversion+0x160>)
    7224:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7228:	b29b      	uxth	r3, r3
    722a:	2b00      	cmp	r3, #0
    722c:	d007      	beq.n	723e <Adc_UpdateStatusStopConversion+0x13e>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    722e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7232:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7236:	4611      	mov	r1, r2
    7238:	4618      	mov	r0, r3
    723a:	f002 fae3 	bl	9804 <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    723e:	f89d 301d 	ldrb.w	r3, [sp, #29]
    7242:	2b01      	cmp	r3, #1
    7244:	d103      	bne.n	724e <Adc_UpdateStatusStopConversion+0x14e>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    7246:	212b      	movs	r1, #43	; 0x2b
    7248:	2003      	movs	r0, #3
    724a:	f7ff fb45 	bl	68d8 <Adc_ReportDetRuntimeError>
}
    724e:	bf00      	nop
    7250:	b009      	add	sp, #36	; 0x24
    7252:	f85d fb04 	ldr.w	pc, [sp], #4
    7256:	bf00      	nop
    7258:	1fff8ce8 	.word	0x1fff8ce8
    725c:	1fff8cec 	.word	0x1fff8cec
    7260:	1fff8d00 	.word	0x1fff8d00

00007264 <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    7264:	b500      	push	{lr}
    7266:	b085      	sub	sp, #20
    7268:	4603      	mov	r3, r0
    726a:	f8ad 3006 	strh.w	r3, [sp, #6]
    726e:	460b      	mov	r3, r1
    7270:	f88d 3005 	strb.w	r3, [sp, #5]
    7274:	4613      	mov	r3, r2
    7276:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    727a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    727e:	4a18      	ldr	r2, [pc, #96]	; (72e0 <Adc_UpdateStatusReadGroup+0x7c>)
    7280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7284:	68da      	ldr	r2, [r3, #12]
    7286:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    728a:	005b      	lsls	r3, r3, #1
    728c:	4413      	add	r3, r2
    728e:	881b      	ldrh	r3, [r3, #0]
    7290:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    7294:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7298:	4a11      	ldr	r2, [pc, #68]	; (72e0 <Adc_UpdateStatusReadGroup+0x7c>)
    729a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    729e:	685a      	ldr	r2, [r3, #4]
    72a0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72a4:	2134      	movs	r1, #52	; 0x34
    72a6:	fb01 f303 	mul.w	r3, r1, r3
    72aa:	4413      	add	r3, r2
    72ac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    72b0:	2b01      	cmp	r3, #1
    72b2:	d109      	bne.n	72c8 <Adc_UpdateStatusReadGroup+0x64>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    72b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    72b8:	f89d 1005 	ldrb.w	r1, [sp, #5]
    72bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    72c0:	4618      	mov	r0, r3
    72c2:	f000 f80f 	bl	72e4 <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    72c6:	e007      	b.n	72d8 <Adc_UpdateStatusReadGroup+0x74>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    72c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    72cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    72d0:	4611      	mov	r1, r2
    72d2:	4618      	mov	r0, r3
    72d4:	f000 f8e8 	bl	74a8 <Adc_UpdateStatusReadGroupInt>
}
    72d8:	bf00      	nop
    72da:	b005      	add	sp, #20
    72dc:	f85d fb04 	ldr.w	pc, [sp], #4
    72e0:	1fff8ce8 	.word	0x1fff8ce8

000072e4 <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    72e4:	b500      	push	{lr}
    72e6:	b085      	sub	sp, #20
    72e8:	4603      	mov	r3, r0
    72ea:	f8ad 3006 	strh.w	r3, [sp, #6]
    72ee:	460b      	mov	r3, r1
    72f0:	f88d 3005 	strb.w	r3, [sp, #5]
    72f4:	4613      	mov	r3, r2
    72f6:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    72fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
    72fe:	4a2c      	ldr	r2, [pc, #176]	; (73b0 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    7300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7304:	68da      	ldr	r2, [r3, #12]
    7306:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    730a:	005b      	lsls	r3, r3, #1
    730c:	4413      	add	r3, r2
    730e:	881b      	ldrh	r3, [r3, #0]
    7310:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    7314:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7318:	4926      	ldr	r1, [pc, #152]	; (73b4 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    731a:	4613      	mov	r3, r2
    731c:	009b      	lsls	r3, r3, #2
    731e:	4413      	add	r3, r2
    7320:	009b      	lsls	r3, r3, #2
    7322:	440b      	add	r3, r1
    7324:	3304      	adds	r3, #4
    7326:	2201      	movs	r2, #1
    7328:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    732a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    732e:	2b00      	cmp	r3, #0
    7330:	d03a      	beq.n	73a8 <Adc_UpdateStatusReadGroupNoInt+0xc4>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    7332:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7336:	4a1e      	ldr	r2, [pc, #120]	; (73b0 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    7338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    733c:	685a      	ldr	r2, [r3, #4]
    733e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7342:	2134      	movs	r1, #52	; 0x34
    7344:	fb01 f303 	mul.w	r3, r1, r3
    7348:	4413      	add	r3, r2
    734a:	689b      	ldr	r3, [r3, #8]
    734c:	2b01      	cmp	r3, #1
    734e:	d10a      	bne.n	7366 <Adc_UpdateStatusReadGroupNoInt+0x82>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7350:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7354:	4917      	ldr	r1, [pc, #92]	; (73b4 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    7356:	4613      	mov	r3, r2
    7358:	009b      	lsls	r3, r3, #2
    735a:	4413      	add	r3, r2
    735c:	009b      	lsls	r3, r3, #2
    735e:	440b      	add	r3, r1
    7360:	2201      	movs	r2, #1
    7362:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    7364:	e020      	b.n	73a8 <Adc_UpdateStatusReadGroupNoInt+0xc4>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    7366:	f89d 3004 	ldrb.w	r3, [sp, #4]
    736a:	4a11      	ldr	r2, [pc, #68]	; (73b0 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    736c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7370:	685a      	ldr	r2, [r3, #4]
    7372:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7376:	2134      	movs	r1, #52	; 0x34
    7378:	fb01 f303 	mul.w	r3, r1, r3
    737c:	4413      	add	r3, r2
    737e:	695b      	ldr	r3, [r3, #20]
    7380:	2b00      	cmp	r3, #0
    7382:	d111      	bne.n	73a8 <Adc_UpdateStatusReadGroupNoInt+0xc4>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7384:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7388:	490a      	ldr	r1, [pc, #40]	; (73b4 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    738a:	4613      	mov	r3, r2
    738c:	009b      	lsls	r3, r3, #2
    738e:	4413      	add	r3, r2
    7390:	009b      	lsls	r3, r3, #2
    7392:	440b      	add	r3, r1
    7394:	2200      	movs	r2, #0
    7396:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    7398:	f89d 2004 	ldrb.w	r2, [sp, #4]
    739c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    73a0:	4611      	mov	r1, r2
    73a2:	4618      	mov	r0, r3
    73a4:	f000 f808 	bl	73b8 <Adc_UpdateSwQueueIndexNoInt>
}
    73a8:	bf00      	nop
    73aa:	b005      	add	sp, #20
    73ac:	f85d fb04 	ldr.w	pc, [sp], #4
    73b0:	1fff8ce8 	.word	0x1fff8ce8
    73b4:	1fff8cec 	.word	0x1fff8cec

000073b8 <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    73b8:	b500      	push	{lr}
    73ba:	b085      	sub	sp, #20
    73bc:	4603      	mov	r3, r0
    73be:	460a      	mov	r2, r1
    73c0:	f8ad 3006 	strh.w	r3, [sp, #6]
    73c4:	4613      	mov	r3, r2
    73c6:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    73ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
    73ce:	4a34      	ldr	r2, [pc, #208]	; (74a0 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    73d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73d4:	68da      	ldr	r2, [r3, #12]
    73d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    73da:	005b      	lsls	r3, r3, #1
    73dc:	4413      	add	r3, r2
    73de:	881b      	ldrh	r3, [r3, #0]
    73e0:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    73e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    73e8:	4a2d      	ldr	r2, [pc, #180]	; (74a0 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    73ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73ee:	685a      	ldr	r2, [r3, #4]
    73f0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    73f4:	2134      	movs	r1, #52	; 0x34
    73f6:	fb01 f303 	mul.w	r3, r1, r3
    73fa:	4413      	add	r3, r2
    73fc:	789b      	ldrb	r3, [r3, #2]
    73fe:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    7402:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7406:	4a27      	ldr	r2, [pc, #156]	; (74a4 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    7408:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    740c:	b29b      	uxth	r3, r3
    740e:	2b00      	cmp	r3, #0
    7410:	d041      	beq.n	7496 <Adc_UpdateSwQueueIndexNoInt+0xde>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    7412:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7416:	4a23      	ldr	r2, [pc, #140]	; (74a4 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    7418:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    741c:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    7420:	2300      	movs	r3, #0
    7422:	f8ad 300e 	strh.w	r3, [sp, #14]
    7426:	e01c      	b.n	7462 <Adc_UpdateSwQueueIndexNoInt+0xaa>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    7428:	f89d 200b 	ldrb.w	r2, [sp, #11]
    742c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7430:	491c      	ldr	r1, [pc, #112]	; (74a4 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    7432:	0092      	lsls	r2, r2, #2
    7434:	4413      	add	r3, r2
    7436:	005b      	lsls	r3, r3, #1
    7438:	440b      	add	r3, r1
    743a:	885b      	ldrh	r3, [r3, #2]
    743c:	b29b      	uxth	r3, r3
    743e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7442:	429a      	cmp	r2, r3
    7444:	d108      	bne.n	7458 <Adc_UpdateSwQueueIndexNoInt+0xa0>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    7446:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    744a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    744e:	4611      	mov	r1, r2
    7450:	4618      	mov	r0, r3
    7452:	f001 fbc9 	bl	8be8 <Adc_Ipw_RemoveFromQueue>
                    break;
    7456:	e00a      	b.n	746e <Adc_UpdateSwQueueIndexNoInt+0xb6>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    7458:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    745c:	3301      	adds	r3, #1
    745e:	f8ad 300e 	strh.w	r3, [sp, #14]
    7462:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7466:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    746a:	429a      	cmp	r2, r3
    746c:	d3dc      	bcc.n	7428 <Adc_UpdateSwQueueIndexNoInt+0x70>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    746e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7472:	2b00      	cmp	r3, #0
    7474:	d10f      	bne.n	7496 <Adc_UpdateSwQueueIndexNoInt+0xde>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    7476:	f89d 300b 	ldrb.w	r3, [sp, #11]
    747a:	4a0a      	ldr	r2, [pc, #40]	; (74a4 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    747c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7480:	b29b      	uxth	r3, r3
    7482:	2b00      	cmp	r3, #0
    7484:	d007      	beq.n	7496 <Adc_UpdateSwQueueIndexNoInt+0xde>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    7486:	f89d 2005 	ldrb.w	r2, [sp, #5]
    748a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    748e:	4611      	mov	r1, r2
    7490:	4618      	mov	r0, r3
    7492:	f002 f9b7 	bl	9804 <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    7496:	bf00      	nop
    7498:	b005      	add	sp, #20
    749a:	f85d fb04 	ldr.w	pc, [sp], #4
    749e:	bf00      	nop
    74a0:	1fff8ce8 	.word	0x1fff8ce8
    74a4:	1fff8d00 	.word	0x1fff8d00

000074a8 <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    74a8:	b084      	sub	sp, #16
    74aa:	4603      	mov	r3, r0
    74ac:	460a      	mov	r2, r1
    74ae:	f8ad 3006 	strh.w	r3, [sp, #6]
    74b2:	4613      	mov	r3, r2
    74b4:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    74b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    74bc:	4a47      	ldr	r2, [pc, #284]	; (75dc <Adc_UpdateStatusReadGroupInt+0x134>)
    74be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74c2:	68da      	ldr	r2, [r3, #12]
    74c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    74c8:	005b      	lsls	r3, r3, #1
    74ca:	4413      	add	r3, r2
    74cc:	881b      	ldrh	r3, [r3, #0]
    74ce:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    74d2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    74d6:	4942      	ldr	r1, [pc, #264]	; (75e0 <Adc_UpdateStatusReadGroupInt+0x138>)
    74d8:	4613      	mov	r3, r2
    74da:	009b      	lsls	r3, r3, #2
    74dc:	4413      	add	r3, r2
    74de:	009b      	lsls	r3, r3, #2
    74e0:	440b      	add	r3, r1
    74e2:	681b      	ldr	r3, [r3, #0]
    74e4:	2b02      	cmp	r3, #2
    74e6:	d10a      	bne.n	74fe <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    74e8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    74ec:	493c      	ldr	r1, [pc, #240]	; (75e0 <Adc_UpdateStatusReadGroupInt+0x138>)
    74ee:	4613      	mov	r3, r2
    74f0:	009b      	lsls	r3, r3, #2
    74f2:	4413      	add	r3, r2
    74f4:	009b      	lsls	r3, r3, #2
    74f6:	440b      	add	r3, r1
    74f8:	2201      	movs	r2, #1
    74fa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    74fc:	e06a      	b.n	75d4 <Adc_UpdateStatusReadGroupInt+0x12c>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    74fe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7502:	4937      	ldr	r1, [pc, #220]	; (75e0 <Adc_UpdateStatusReadGroupInt+0x138>)
    7504:	4613      	mov	r3, r2
    7506:	009b      	lsls	r3, r3, #2
    7508:	4413      	add	r3, r2
    750a:	009b      	lsls	r3, r3, #2
    750c:	440b      	add	r3, r1
    750e:	681b      	ldr	r3, [r3, #0]
    7510:	2b03      	cmp	r3, #3
    7512:	d15f      	bne.n	75d4 <Adc_UpdateStatusReadGroupInt+0x12c>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    7514:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7518:	4a30      	ldr	r2, [pc, #192]	; (75dc <Adc_UpdateStatusReadGroupInt+0x134>)
    751a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    751e:	685a      	ldr	r2, [r3, #4]
    7520:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7524:	2134      	movs	r1, #52	; 0x34
    7526:	fb01 f303 	mul.w	r3, r1, r3
    752a:	4413      	add	r3, r2
    752c:	695b      	ldr	r3, [r3, #20]
    752e:	2b00      	cmp	r3, #0
    7530:	d150      	bne.n	75d4 <Adc_UpdateStatusReadGroupInt+0x12c>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    7532:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7536:	4a29      	ldr	r2, [pc, #164]	; (75dc <Adc_UpdateStatusReadGroupInt+0x134>)
    7538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    753c:	685a      	ldr	r2, [r3, #4]
    753e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7542:	2134      	movs	r1, #52	; 0x34
    7544:	fb01 f303 	mul.w	r3, r1, r3
    7548:	4413      	add	r3, r2
    754a:	689b      	ldr	r3, [r3, #8]
    754c:	2b00      	cmp	r3, #0
    754e:	d02c      	beq.n	75aa <Adc_UpdateStatusReadGroupInt+0x102>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7550:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7554:	4a21      	ldr	r2, [pc, #132]	; (75dc <Adc_UpdateStatusReadGroupInt+0x134>)
    7556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    755a:	685a      	ldr	r2, [r3, #4]
    755c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7560:	2134      	movs	r1, #52	; 0x34
    7562:	fb01 f303 	mul.w	r3, r1, r3
    7566:	4413      	add	r3, r2
    7568:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    756a:	2b01      	cmp	r3, #1
    756c:	d128      	bne.n	75c0 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    756e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7572:	4a1a      	ldr	r2, [pc, #104]	; (75dc <Adc_UpdateStatusReadGroupInt+0x134>)
    7574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7578:	685a      	ldr	r2, [r3, #4]
    757a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    757e:	2134      	movs	r1, #52	; 0x34
    7580:	fb01 f303 	mul.w	r3, r1, r3
    7584:	4413      	add	r3, r2
    7586:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7588:	2b01      	cmp	r3, #1
    758a:	d119      	bne.n	75c0 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    758c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7590:	4a12      	ldr	r2, [pc, #72]	; (75dc <Adc_UpdateStatusReadGroupInt+0x134>)
    7592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7596:	685a      	ldr	r2, [r3, #4]
    7598:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    759c:	2134      	movs	r1, #52	; 0x34
    759e:	fb01 f303 	mul.w	r3, r1, r3
    75a2:	4413      	add	r3, r2
    75a4:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    75a6:	2b00      	cmp	r3, #0
    75a8:	d10a      	bne.n	75c0 <Adc_UpdateStatusReadGroupInt+0x118>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    75aa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    75ae:	490c      	ldr	r1, [pc, #48]	; (75e0 <Adc_UpdateStatusReadGroupInt+0x138>)
    75b0:	4613      	mov	r3, r2
    75b2:	009b      	lsls	r3, r3, #2
    75b4:	4413      	add	r3, r2
    75b6:	009b      	lsls	r3, r3, #2
    75b8:	440b      	add	r3, r1
    75ba:	2200      	movs	r2, #0
    75bc:	601a      	str	r2, [r3, #0]
}
    75be:	e009      	b.n	75d4 <Adc_UpdateStatusReadGroupInt+0x12c>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    75c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    75c4:	4906      	ldr	r1, [pc, #24]	; (75e0 <Adc_UpdateStatusReadGroupInt+0x138>)
    75c6:	4613      	mov	r3, r2
    75c8:	009b      	lsls	r3, r3, #2
    75ca:	4413      	add	r3, r2
    75cc:	009b      	lsls	r3, r3, #2
    75ce:	440b      	add	r3, r1
    75d0:	2201      	movs	r2, #1
    75d2:	601a      	str	r2, [r3, #0]
}
    75d4:	bf00      	nop
    75d6:	b004      	add	sp, #16
    75d8:	4770      	bx	lr
    75da:	bf00      	nop
    75dc:	1fff8ce8 	.word	0x1fff8ce8
    75e0:	1fff8cec 	.word	0x1fff8cec

000075e4 <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    75e4:	b084      	sub	sp, #16
    75e6:	4603      	mov	r3, r0
    75e8:	460a      	mov	r2, r1
    75ea:	f8ad 3006 	strh.w	r3, [sp, #6]
    75ee:	4613      	mov	r3, r2
    75f0:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    75f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    75f8:	4a46      	ldr	r2, [pc, #280]	; (7714 <Adc_UpdateStatusAfterGetStream+0x130>)
    75fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75fe:	68da      	ldr	r2, [r3, #12]
    7600:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7604:	005b      	lsls	r3, r3, #1
    7606:	4413      	add	r3, r2
    7608:	881b      	ldrh	r3, [r3, #0]
    760a:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    760e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7612:	4941      	ldr	r1, [pc, #260]	; (7718 <Adc_UpdateStatusAfterGetStream+0x134>)
    7614:	4613      	mov	r3, r2
    7616:	009b      	lsls	r3, r3, #2
    7618:	4413      	add	r3, r2
    761a:	009b      	lsls	r3, r3, #2
    761c:	440b      	add	r3, r1
    761e:	681b      	ldr	r3, [r3, #0]
    7620:	2b02      	cmp	r3, #2
    7622:	d109      	bne.n	7638 <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7624:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7628:	493b      	ldr	r1, [pc, #236]	; (7718 <Adc_UpdateStatusAfterGetStream+0x134>)
    762a:	4613      	mov	r3, r2
    762c:	009b      	lsls	r3, r3, #2
    762e:	4413      	add	r3, r2
    7630:	009b      	lsls	r3, r3, #2
    7632:	440b      	add	r3, r1
    7634:	2201      	movs	r2, #1
    7636:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7638:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    763c:	4936      	ldr	r1, [pc, #216]	; (7718 <Adc_UpdateStatusAfterGetStream+0x134>)
    763e:	4613      	mov	r3, r2
    7640:	009b      	lsls	r3, r3, #2
    7642:	4413      	add	r3, r2
    7644:	009b      	lsls	r3, r3, #2
    7646:	440b      	add	r3, r1
    7648:	681b      	ldr	r3, [r3, #0]
    764a:	2b03      	cmp	r3, #3
    764c:	d15f      	bne.n	770e <Adc_UpdateStatusAfterGetStream+0x12a>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    764e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7652:	4a30      	ldr	r2, [pc, #192]	; (7714 <Adc_UpdateStatusAfterGetStream+0x130>)
    7654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7658:	685a      	ldr	r2, [r3, #4]
    765a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    765e:	2134      	movs	r1, #52	; 0x34
    7660:	fb01 f303 	mul.w	r3, r1, r3
    7664:	4413      	add	r3, r2
    7666:	695b      	ldr	r3, [r3, #20]
    7668:	2b00      	cmp	r3, #0
    766a:	d150      	bne.n	770e <Adc_UpdateStatusAfterGetStream+0x12a>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    766c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7670:	4a28      	ldr	r2, [pc, #160]	; (7714 <Adc_UpdateStatusAfterGetStream+0x130>)
    7672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7676:	685a      	ldr	r2, [r3, #4]
    7678:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    767c:	2134      	movs	r1, #52	; 0x34
    767e:	fb01 f303 	mul.w	r3, r1, r3
    7682:	4413      	add	r3, r2
    7684:	689b      	ldr	r3, [r3, #8]
    7686:	2b00      	cmp	r3, #0
    7688:	d02c      	beq.n	76e4 <Adc_UpdateStatusAfterGetStream+0x100>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    768a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    768e:	4a21      	ldr	r2, [pc, #132]	; (7714 <Adc_UpdateStatusAfterGetStream+0x130>)
    7690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7694:	685a      	ldr	r2, [r3, #4]
    7696:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    769a:	2134      	movs	r1, #52	; 0x34
    769c:	fb01 f303 	mul.w	r3, r1, r3
    76a0:	4413      	add	r3, r2
    76a2:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    76a4:	2b01      	cmp	r3, #1
    76a6:	d128      	bne.n	76fa <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    76a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    76ac:	4a19      	ldr	r2, [pc, #100]	; (7714 <Adc_UpdateStatusAfterGetStream+0x130>)
    76ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76b2:	685a      	ldr	r2, [r3, #4]
    76b4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    76b8:	2134      	movs	r1, #52	; 0x34
    76ba:	fb01 f303 	mul.w	r3, r1, r3
    76be:	4413      	add	r3, r2
    76c0:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    76c2:	2b01      	cmp	r3, #1
    76c4:	d119      	bne.n	76fa <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    76c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    76ca:	4a12      	ldr	r2, [pc, #72]	; (7714 <Adc_UpdateStatusAfterGetStream+0x130>)
    76cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76d0:	685a      	ldr	r2, [r3, #4]
    76d2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    76d6:	2134      	movs	r1, #52	; 0x34
    76d8:	fb01 f303 	mul.w	r3, r1, r3
    76dc:	4413      	add	r3, r2
    76de:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    76e0:	2b00      	cmp	r3, #0
    76e2:	d10a      	bne.n	76fa <Adc_UpdateStatusAfterGetStream+0x116>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    76e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    76e8:	490b      	ldr	r1, [pc, #44]	; (7718 <Adc_UpdateStatusAfterGetStream+0x134>)
    76ea:	4613      	mov	r3, r2
    76ec:	009b      	lsls	r3, r3, #2
    76ee:	4413      	add	r3, r2
    76f0:	009b      	lsls	r3, r3, #2
    76f2:	440b      	add	r3, r1
    76f4:	2200      	movs	r2, #0
    76f6:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    76f8:	e009      	b.n	770e <Adc_UpdateStatusAfterGetStream+0x12a>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    76fa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    76fe:	4906      	ldr	r1, [pc, #24]	; (7718 <Adc_UpdateStatusAfterGetStream+0x134>)
    7700:	4613      	mov	r3, r2
    7702:	009b      	lsls	r3, r3, #2
    7704:	4413      	add	r3, r2
    7706:	009b      	lsls	r3, r3, #2
    7708:	440b      	add	r3, r1
    770a:	2201      	movs	r2, #1
    770c:	601a      	str	r2, [r3, #0]
}
    770e:	bf00      	nop
    7710:	b004      	add	sp, #16
    7712:	4770      	bx	lr
    7714:	1fff8ce8 	.word	0x1fff8ce8
    7718:	1fff8cec 	.word	0x1fff8cec

0000771c <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    771c:	b500      	push	{lr}
    771e:	b085      	sub	sp, #20
    7720:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    7722:	f002 fa5b 	bl	9bdc <Adc_GetCoreID>
    7726:	4603      	mov	r3, r0
    7728:	f88d 300c 	strb.w	r3, [sp, #12]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    772c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7730:	f88d 300f 	strb.w	r3, [sp, #15]
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    7734:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7738:	b2db      	uxtb	r3, r3
    773a:	4619      	mov	r1, r3
    773c:	9801      	ldr	r0, [sp, #4]
    773e:	f7ff fbb3 	bl	6ea8 <Adc_CheckCurrentCoreId>
    7742:	4603      	mov	r3, r0
    7744:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    7748:	f89d 300e 	ldrb.w	r3, [sp, #14]
    774c:	2b00      	cmp	r3, #0
    774e:	d12c      	bne.n	77aa <Adc_Init+0x8e>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    7750:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7754:	b2db      	uxtb	r3, r3
    7756:	4619      	mov	r1, r3
    7758:	4a16      	ldr	r2, [pc, #88]	; (77b4 <Adc_Init+0x98>)
    775a:	9b01      	ldr	r3, [sp, #4]
    775c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    7760:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7764:	b2db      	uxtb	r3, r3
    7766:	4618      	mov	r0, r3
    7768:	f7ff fb4e 	bl	6e08 <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    776c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7770:	b2db      	uxtb	r3, r3
    7772:	4618      	mov	r0, r3
    7774:	f7ff fade 	bl	6d34 <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    7778:	f89d 300c 	ldrb.w	r3, [sp, #12]
    777c:	b2db      	uxtb	r3, r3
    777e:	461a      	mov	r2, r3
    7780:	4b0c      	ldr	r3, [pc, #48]	; (77b4 <Adc_Init+0x98>)
    7782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7786:	681b      	ldr	r3, [r3, #0]
    7788:	f89d 200f 	ldrb.w	r2, [sp, #15]
    778c:	4611      	mov	r1, r2
    778e:	4618      	mov	r0, r3
    7790:	f001 ff78 	bl	9684 <Adc_Ipw_Init>
    7794:	4603      	mov	r3, r0
    7796:	f88d 300d 	strb.w	r3, [sp, #13]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    779a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    779e:	2b01      	cmp	r3, #1
    77a0:	d103      	bne.n	77aa <Adc_Init+0x8e>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    77a2:	212b      	movs	r1, #43	; 0x2b
    77a4:	2000      	movs	r0, #0
    77a6:	f7ff f897 	bl	68d8 <Adc_ReportDetRuntimeError>
        if ((Std_ReturnType)E_OK == ValidStatus)
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    77aa:	bf00      	nop
    77ac:	b005      	add	sp, #20
    77ae:	f85d fb04 	ldr.w	pc, [sp], #4
    77b2:	bf00      	nop
    77b4:	1fff8ce8 	.word	0x1fff8ce8

000077b8 <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    77b8:	b500      	push	{lr}
    77ba:	b085      	sub	sp, #20
    77bc:	4603      	mov	r3, r0
    77be:	9100      	str	r1, [sp, #0]
    77c0:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    77c4:	2301      	movs	r3, #1
    77c6:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    77ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    77ce:	4618      	mov	r0, r3
    77d0:	f7ff f9a2 	bl	6b18 <Adc_ValidateSetupBufferNotBusy>
    77d4:	4603      	mov	r3, r0
    77d6:	2b00      	cmp	r3, #0
    77d8:	d10d      	bne.n	77f6 <Adc_SetupResultBuffer+0x3e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    77da:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    77de:	4909      	ldr	r1, [pc, #36]	; (7804 <Adc_SetupResultBuffer+0x4c>)
    77e0:	4613      	mov	r3, r2
    77e2:	009b      	lsls	r3, r3, #2
    77e4:	4413      	add	r3, r2
    77e6:	009b      	lsls	r3, r3, #2
    77e8:	440b      	add	r3, r1
    77ea:	330c      	adds	r3, #12
    77ec:	9a00      	ldr	r2, [sp, #0]
    77ee:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    77f0:	2300      	movs	r3, #0
    77f2:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    77f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    77fa:	4618      	mov	r0, r3
    77fc:	b005      	add	sp, #20
    77fe:	f85d fb04 	ldr.w	pc, [sp], #4
    7802:	bf00      	nop
    7804:	1fff8cec 	.word	0x1fff8cec

00007808 <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    7808:	b500      	push	{lr}
    780a:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    780c:	2300      	movs	r3, #0
    780e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    7812:	f002 f9e3 	bl	9bdc <Adc_GetCoreID>
    7816:	4603      	mov	r3, r0
    7818:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    781c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7820:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    if ((Std_ReturnType)E_OK == ValidStatus)
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    7824:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7828:	b2db      	uxtb	r3, r3
    782a:	461a      	mov	r2, r3
    782c:	4b2d      	ldr	r3, [pc, #180]	; (78e4 <Adc_DeInit+0xdc>)
    782e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7832:	f89d 2006 	ldrb.w	r2, [sp, #6]
    7836:	4611      	mov	r1, r2
    7838:	4618      	mov	r0, r3
    783a:	f7ff fb35 	bl	6ea8 <Adc_CheckCurrentCoreId>
    783e:	4603      	mov	r3, r0
    7840:	f88d 3005 	strb.w	r3, [sp, #5]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    7844:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7848:	2b00      	cmp	r3, #0
    784a:	d147      	bne.n	78dc <Adc_DeInit+0xd4>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    784c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7850:	b2db      	uxtb	r3, r3
    7852:	4618      	mov	r0, r3
    7854:	f7ff f912 	bl	6a7c <Adc_ValidateDeInitNotBusy>
    7858:	4603      	mov	r3, r0
    785a:	f88d 3004 	strb.w	r3, [sp, #4]
            if ((Std_ReturnType)E_OK == ValidStatus)
    785e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7862:	2b00      	cmp	r3, #0
    7864:	d13a      	bne.n	78dc <Adc_DeInit+0xd4>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    7866:	f89d 3002 	ldrb.w	r3, [sp, #2]
    786a:	b2db      	uxtb	r3, r3
    786c:	4618      	mov	r0, r3
    786e:	f001 ff4e 	bl	970e <Adc_Ipw_DeInit>
    7872:	4603      	mov	r3, r0
    7874:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    7878:	f89d 3003 	ldrb.w	r3, [sp, #3]
    787c:	2b01      	cmp	r3, #1
    787e:	d103      	bne.n	7888 <Adc_DeInit+0x80>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    7880:	212b      	movs	r1, #43	; 0x2b
    7882:	2001      	movs	r0, #1
    7884:	f7ff f828 	bl	68d8 <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7888:	2300      	movs	r3, #0
    788a:	f88d 3007 	strb.w	r3, [sp, #7]
    788e:	e019      	b.n	78c4 <Adc_DeInit+0xbc>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7890:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7894:	b2db      	uxtb	r3, r3
    7896:	461a      	mov	r2, r3
    7898:	4b12      	ldr	r3, [pc, #72]	; (78e4 <Adc_DeInit+0xdc>)
    789a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    789e:	681a      	ldr	r2, [r3, #0]
    78a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78a4:	4413      	add	r3, r2
    78a6:	7f9b      	ldrb	r3, [r3, #30]
    78a8:	2b01      	cmp	r3, #1
    78aa:	d106      	bne.n	78ba <Adc_DeInit+0xb2>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    78ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78b0:	4a0d      	ldr	r2, [pc, #52]	; (78e8 <Adc_DeInit+0xe0>)
    78b2:	00db      	lsls	r3, r3, #3
    78b4:	4413      	add	r3, r2
    78b6:	2200      	movs	r2, #0
    78b8:	719a      	strb	r2, [r3, #6]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    78ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78be:	3301      	adds	r3, #1
    78c0:	f88d 3007 	strb.w	r3, [sp, #7]
    78c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78c8:	2b01      	cmp	r3, #1
    78ca:	d9e1      	bls.n	7890 <Adc_DeInit+0x88>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    78cc:	f89d 3002 	ldrb.w	r3, [sp, #2]
    78d0:	b2db      	uxtb	r3, r3
    78d2:	4619      	mov	r1, r3
    78d4:	4b03      	ldr	r3, [pc, #12]	; (78e4 <Adc_DeInit+0xdc>)
    78d6:	2200      	movs	r2, #0
    78d8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    78dc:	bf00      	nop
    78de:	b003      	add	sp, #12
    78e0:	f85d fb04 	ldr.w	pc, [sp], #4
    78e4:	1fff8ce8 	.word	0x1fff8ce8
    78e8:	1fff8d00 	.word	0x1fff8d00

000078ec <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    78ec:	b500      	push	{lr}
    78ee:	b085      	sub	sp, #20
    78f0:	4603      	mov	r3, r0
    78f2:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    78f6:	2300      	movs	r3, #0
    78f8:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    78fc:	2300      	movs	r3, #0
    78fe:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    7902:	f002 f96b 	bl	9bdc <Adc_GetCoreID>
    7906:	4603      	mov	r3, r0
    7908:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    790c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7910:	b2db      	uxtb	r3, r3
    7912:	461a      	mov	r2, r3
    7914:	4b1a      	ldr	r3, [pc, #104]	; (7980 <Adc_StartGroupConversion+0x94>)
    7916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    791a:	68da      	ldr	r2, [r3, #12]
    791c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7920:	005b      	lsls	r3, r3, #1
    7922:	4413      	add	r3, r2
    7924:	881b      	ldrh	r3, [r3, #0]
    7926:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    792a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    792e:	b2da      	uxtb	r2, r3
    7930:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7934:	4611      	mov	r1, r2
    7936:	4618      	mov	r0, r3
    7938:	f7ff f912 	bl	6b60 <Adc_ValidateStateStartGroupConvNotBusy>
    793c:	4603      	mov	r3, r0
    793e:	2b00      	cmp	r3, #0
    7940:	d11a      	bne.n	7978 <Adc_StartGroupConversion+0x8c>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    7942:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7946:	b2db      	uxtb	r3, r3
    7948:	461a      	mov	r2, r3
    794a:	4b0d      	ldr	r3, [pc, #52]	; (7980 <Adc_StartGroupConversion+0x94>)
    794c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7950:	685a      	ldr	r2, [r3, #4]
    7952:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7956:	2134      	movs	r1, #52	; 0x34
    7958:	fb01 f303 	mul.w	r3, r1, r3
    795c:	4413      	add	r3, r2
    795e:	789b      	ldrb	r3, [r3, #2]
    7960:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    7964:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7968:	b2da      	uxtb	r2, r3
    796a:	f89d 100d 	ldrb.w	r1, [sp, #13]
    796e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7972:	4618      	mov	r0, r3
    7974:	f7ff facb 	bl	6f0e <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7978:	bf00      	nop
    797a:	b005      	add	sp, #20
    797c:	f85d fb04 	ldr.w	pc, [sp], #4
    7980:	1fff8ce8 	.word	0x1fff8ce8

00007984 <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    7984:	b500      	push	{lr}
    7986:	b085      	sub	sp, #20
    7988:	4603      	mov	r3, r0
    798a:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    798e:	2300      	movs	r3, #0
    7990:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    7994:	2300      	movs	r3, #0
    7996:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    799a:	f002 f91f 	bl	9bdc <Adc_GetCoreID>
    799e:	4603      	mov	r3, r0
    79a0:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    79a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    79a8:	b2da      	uxtb	r2, r3
    79aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    79ae:	4619      	mov	r1, r3
    79b0:	2003      	movs	r0, #3
    79b2:	f7ff f94d 	bl	6c50 <Adc_ValidateStateNotIdle>
    79b6:	4603      	mov	r3, r0
    79b8:	2b00      	cmp	r3, #0
    79ba:	d129      	bne.n	7a10 <Adc_StopGroupConversion+0x8c>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    79bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    79c0:	b2db      	uxtb	r3, r3
    79c2:	461a      	mov	r2, r3
    79c4:	4b14      	ldr	r3, [pc, #80]	; (7a18 <Adc_StopGroupConversion+0x94>)
    79c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    79ca:	68da      	ldr	r2, [r3, #12]
    79cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    79d0:	005b      	lsls	r3, r3, #1
    79d2:	4413      	add	r3, r2
    79d4:	881b      	ldrh	r3, [r3, #0]
    79d6:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    79da:	f89d 300b 	ldrb.w	r3, [sp, #11]
    79de:	b2db      	uxtb	r3, r3
    79e0:	461a      	mov	r2, r3
    79e2:	4b0d      	ldr	r3, [pc, #52]	; (7a18 <Adc_StopGroupConversion+0x94>)
    79e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    79e8:	685a      	ldr	r2, [r3, #4]
    79ea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    79ee:	2134      	movs	r1, #52	; 0x34
    79f0:	fb01 f303 	mul.w	r3, r1, r3
    79f4:	4413      	add	r3, r2
    79f6:	789b      	ldrb	r3, [r3, #2]
    79f8:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    79fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7a00:	b2da      	uxtb	r2, r3
    7a02:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7a06:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a0a:	4618      	mov	r0, r3
    7a0c:	f7ff fb78 	bl	7100 <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7a10:	bf00      	nop
    7a12:	b005      	add	sp, #20
    7a14:	f85d fb04 	ldr.w	pc, [sp], #4
    7a18:	1fff8ce8 	.word	0x1fff8ce8

00007a1c <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    7a1c:	b500      	push	{lr}
    7a1e:	b085      	sub	sp, #20
    7a20:	4603      	mov	r3, r0
    7a22:	9100      	str	r1, [sp, #0]
    7a24:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    7a28:	2301      	movs	r3, #1
    7a2a:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    7a2e:	2301      	movs	r3, #1
    7a30:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    7a34:	f002 f8d2 	bl	9bdc <Adc_GetCoreID>
    7a38:	4603      	mov	r3, r0
    7a3a:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    7a3e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7a42:	b2da      	uxtb	r2, r3
    7a44:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a48:	4619      	mov	r1, r3
    7a4a:	2004      	movs	r0, #4
    7a4c:	f7ff f900 	bl	6c50 <Adc_ValidateStateNotIdle>
    7a50:	4603      	mov	r3, r0
    7a52:	2b00      	cmp	r3, #0
    7a54:	d121      	bne.n	7a9a <Adc_ReadGroup+0x7e>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    7a56:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7a5a:	b2db      	uxtb	r3, r3
    7a5c:	f10d 020d 	add.w	r2, sp, #13
    7a60:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    7a64:	9900      	ldr	r1, [sp, #0]
    7a66:	f002 f812 	bl	9a8e <Adc_Ipw_ReadGroup>
    7a6a:	4603      	mov	r3, r0
    7a6c:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    7a70:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7a74:	2b00      	cmp	r3, #0
    7a76:	d006      	beq.n	7a86 <Adc_ReadGroup+0x6a>
    7a78:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7a7c:	f083 0301 	eor.w	r3, r3, #1
    7a80:	b2db      	uxtb	r3, r3
    7a82:	2b00      	cmp	r3, #0
    7a84:	d009      	beq.n	7a9a <Adc_ReadGroup+0x7e>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    7a86:	f89d 100d 	ldrb.w	r1, [sp, #13]
    7a8a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7a8e:	b2da      	uxtb	r2, r3
    7a90:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a94:	4618      	mov	r0, r3
    7a96:	f7ff fbe5 	bl	7264 <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    7a9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7a9e:	4618      	mov	r0, r3
    7aa0:	b005      	add	sp, #20
    7aa2:	f85d fb04 	ldr.w	pc, [sp], #4

00007aa6 <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    7aa6:	b084      	sub	sp, #16
    7aa8:	4603      	mov	r3, r0
    7aaa:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    7aae:	2300      	movs	r3, #0
    7ab0:	9303      	str	r3, [sp, #12]
    CoreId = Adc_GetCoreID();
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    7ab2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7ab6:	4906      	ldr	r1, [pc, #24]	; (7ad0 <Adc_GetGroupStatus+0x2a>)
    7ab8:	4613      	mov	r3, r2
    7aba:	009b      	lsls	r3, r3, #2
    7abc:	4413      	add	r3, r2
    7abe:	009b      	lsls	r3, r3, #2
    7ac0:	440b      	add	r3, r1
    7ac2:	681b      	ldr	r3, [r3, #0]
    7ac4:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    7ac6:	9b03      	ldr	r3, [sp, #12]
}
    7ac8:	4618      	mov	r0, r3
    7aca:	b004      	add	sp, #16
    7acc:	4770      	bx	lr
    7ace:	bf00      	nop
    7ad0:	1fff8cec 	.word	0x1fff8cec

00007ad4 <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    7ad4:	b500      	push	{lr}
    7ad6:	b085      	sub	sp, #20
    7ad8:	4603      	mov	r3, r0
    7ada:	9100      	str	r1, [sp, #0]
    7adc:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    7ae0:	f002 f87c 	bl	9bdc <Adc_GetCoreID>
    7ae4:	4603      	mov	r3, r0
    7ae6:	f88d 3009 	strb.w	r3, [sp, #9]
    Adc_GroupType GroupIndex = 0U;
    7aea:	2300      	movs	r3, #0
    7aec:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    7af0:	2300      	movs	r3, #0
    7af2:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    7af6:	2300      	movs	r3, #0
    7af8:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    7afc:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7b00:	b2da      	uxtb	r2, r3
    7b02:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7b06:	4619      	mov	r1, r3
    7b08:	200b      	movs	r0, #11
    7b0a:	f7ff f8a1 	bl	6c50 <Adc_ValidateStateNotIdle>
    7b0e:	4603      	mov	r3, r0
    7b10:	2b00      	cmp	r3, #0
    7b12:	f040 808e 	bne.w	7c32 <Adc_GetStreamLastPointer+0x15e>
        {
            *PtrToSamplePtr = NULL_PTR;
    7b16:	9b00      	ldr	r3, [sp, #0]
    7b18:	2200      	movs	r2, #0
    7b1a:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    7b1c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b20:	4948      	ldr	r1, [pc, #288]	; (7c44 <Adc_GetStreamLastPointer+0x170>)
    7b22:	4613      	mov	r3, r2
    7b24:	009b      	lsls	r3, r3, #2
    7b26:	4413      	add	r3, r2
    7b28:	009b      	lsls	r3, r3, #2
    7b2a:	440b      	add	r3, r1
    7b2c:	681b      	ldr	r3, [r3, #0]
    7b2e:	2b00      	cmp	r3, #0
    7b30:	f000 8082 	beq.w	7c38 <Adc_GetStreamLastPointer+0x164>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    7b34:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b38:	4942      	ldr	r1, [pc, #264]	; (7c44 <Adc_GetStreamLastPointer+0x170>)
    7b3a:	4613      	mov	r3, r2
    7b3c:	009b      	lsls	r3, r3, #2
    7b3e:	4413      	add	r3, r2
    7b40:	009b      	lsls	r3, r3, #2
    7b42:	440b      	add	r3, r1
    7b44:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    7b46:	2b01      	cmp	r3, #1
    7b48:	d076      	beq.n	7c38 <Adc_GetStreamLastPointer+0x164>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7b4a:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7b4e:	b2db      	uxtb	r3, r3
    7b50:	461a      	mov	r2, r3
    7b52:	4b3d      	ldr	r3, [pc, #244]	; (7c48 <Adc_GetStreamLastPointer+0x174>)
    7b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b58:	68da      	ldr	r2, [r3, #12]
    7b5a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7b5e:	005b      	lsls	r3, r3, #1
    7b60:	4413      	add	r3, r2
    7b62:	881b      	ldrh	r3, [r3, #0]
    7b64:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    7b68:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b6c:	4935      	ldr	r1, [pc, #212]	; (7c44 <Adc_GetStreamLastPointer+0x170>)
    7b6e:	4613      	mov	r3, r2
    7b70:	009b      	lsls	r3, r3, #2
    7b72:	4413      	add	r3, r2
    7b74:	009b      	lsls	r3, r3, #2
    7b76:	440b      	add	r3, r1
    7b78:	3308      	adds	r3, #8
    7b7a:	881b      	ldrh	r3, [r3, #0]
    7b7c:	b29b      	uxth	r3, r3
    7b7e:	2b00      	cmp	r3, #0
    7b80:	d123      	bne.n	7bca <Adc_GetStreamLastPointer+0xf6>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    7b82:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7b86:	b2db      	uxtb	r3, r3
    7b88:	461a      	mov	r2, r3
    7b8a:	4b2f      	ldr	r3, [pc, #188]	; (7c48 <Adc_GetStreamLastPointer+0x174>)
    7b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b90:	685a      	ldr	r2, [r3, #4]
    7b92:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7b96:	2134      	movs	r1, #52	; 0x34
    7b98:	fb01 f303 	mul.w	r3, r1, r3
    7b9c:	4413      	add	r3, r2
    7b9e:	8b9b      	ldrh	r3, [r3, #28]
    7ba0:	3b01      	subs	r3, #1
    7ba2:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    7ba6:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7baa:	b2db      	uxtb	r3, r3
    7bac:	461a      	mov	r2, r3
    7bae:	4b26      	ldr	r3, [pc, #152]	; (7c48 <Adc_GetStreamLastPointer+0x174>)
    7bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7bb4:	685a      	ldr	r2, [r3, #4]
    7bb6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7bba:	2134      	movs	r1, #52	; 0x34
    7bbc:	fb01 f303 	mul.w	r3, r1, r3
    7bc0:	4413      	add	r3, r2
    7bc2:	8b9b      	ldrh	r3, [r3, #28]
    7bc4:	f8ad 300e 	strh.w	r3, [sp, #14]
    7bc8:	e019      	b.n	7bfe <Adc_GetStreamLastPointer+0x12a>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    7bca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7bce:	491d      	ldr	r1, [pc, #116]	; (7c44 <Adc_GetStreamLastPointer+0x170>)
    7bd0:	4613      	mov	r3, r2
    7bd2:	009b      	lsls	r3, r3, #2
    7bd4:	4413      	add	r3, r2
    7bd6:	009b      	lsls	r3, r3, #2
    7bd8:	440b      	add	r3, r1
    7bda:	3308      	adds	r3, #8
    7bdc:	881b      	ldrh	r3, [r3, #0]
    7bde:	b29b      	uxth	r3, r3
    7be0:	3b01      	subs	r3, #1
    7be2:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    7be6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7bea:	4916      	ldr	r1, [pc, #88]	; (7c44 <Adc_GetStreamLastPointer+0x170>)
    7bec:	4613      	mov	r3, r2
    7bee:	009b      	lsls	r3, r3, #2
    7bf0:	4413      	add	r3, r2
    7bf2:	009b      	lsls	r3, r3, #2
    7bf4:	440b      	add	r3, r1
    7bf6:	3308      	adds	r3, #8
    7bf8:	881b      	ldrh	r3, [r3, #0]
    7bfa:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    7bfe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7c02:	4910      	ldr	r1, [pc, #64]	; (7c44 <Adc_GetStreamLastPointer+0x170>)
    7c04:	4613      	mov	r3, r2
    7c06:	009b      	lsls	r3, r3, #2
    7c08:	4413      	add	r3, r2
    7c0a:	009b      	lsls	r3, r3, #2
    7c0c:	440b      	add	r3, r1
    7c0e:	330c      	adds	r3, #12
    7c10:	681a      	ldr	r2, [r3, #0]
    7c12:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7c16:	005b      	lsls	r3, r3, #1
    7c18:	441a      	add	r2, r3
    7c1a:	9b00      	ldr	r3, [sp, #0]
    7c1c:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    7c1e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7c22:	b2da      	uxtb	r2, r3
    7c24:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7c28:	4611      	mov	r1, r2
    7c2a:	4618      	mov	r0, r3
    7c2c:	f7ff fcda 	bl	75e4 <Adc_UpdateStatusAfterGetStream>
    7c30:	e002      	b.n	7c38 <Adc_GetStreamLastPointer+0x164>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    7c32:	9b00      	ldr	r3, [sp, #0]
    7c34:	2200      	movs	r2, #0
    7c36:	601a      	str	r2, [r3, #0]
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    7c38:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    7c3c:	4618      	mov	r0, r3
    7c3e:	b005      	add	sp, #20
    7c40:	f85d fb04 	ldr.w	pc, [sp], #4
    7c44:	1fff8cec 	.word	0x1fff8cec
    7c48:	1fff8ce8 	.word	0x1fff8ce8

00007c4c <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    7c4c:	b082      	sub	sp, #8
    7c4e:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    7c50:	9b01      	ldr	r3, [sp, #4]
    7c52:	222b      	movs	r2, #43	; 0x2b
    7c54:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    7c56:	9b01      	ldr	r3, [sp, #4]
    7c58:	227b      	movs	r2, #123	; 0x7b
    7c5a:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    7c5c:	9b01      	ldr	r3, [sp, #4]
    7c5e:	2202      	movs	r2, #2
    7c60:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    7c62:	9b01      	ldr	r3, [sp, #4]
    7c64:	2200      	movs	r2, #0
    7c66:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    7c68:	9b01      	ldr	r3, [sp, #4]
    7c6a:	2200      	movs	r2, #0
    7c6c:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    7c6e:	bf00      	nop
    7c70:	b002      	add	sp, #8
    7c72:	4770      	bx	lr

00007c74 <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    7c74:	b500      	push	{lr}
    7c76:	b085      	sub	sp, #20
    7c78:	4603      	mov	r3, r0
    7c7a:	9100      	str	r1, [sp, #0]
    7c7c:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    7c80:	2300      	movs	r3, #0
    7c82:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    7c86:	f001 ffa9 	bl	9bdc <Adc_GetCoreID>
    7c8a:	4603      	mov	r3, r0
    7c8c:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    7c90:	9b00      	ldr	r3, [sp, #0]
    7c92:	2201      	movs	r2, #1
    7c94:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    7c96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c9a:	2129      	movs	r1, #41	; 0x29
    7c9c:	4618      	mov	r0, r3
    7c9e:	f7fe fe30 	bl	6902 <Adc_ValidateNotBusyNoQueue>
    7ca2:	4603      	mov	r3, r0
    7ca4:	2b00      	cmp	r3, #0
    7ca6:	d115      	bne.n	7cd4 <Adc_Calibrate+0x60>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    7ca8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7cac:	b2db      	uxtb	r3, r3
    7cae:	4619      	mov	r1, r3
    7cb0:	2029      	movs	r0, #41	; 0x29
    7cb2:	f7fe fe91 	bl	69d8 <Adc_ValidateCheckGroupNotConversion>
    7cb6:	4603      	mov	r3, r0
    7cb8:	2b00      	cmp	r3, #0
    7cba:	d10b      	bne.n	7cd4 <Adc_Calibrate+0x60>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    7cbc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7cc0:	b2da      	uxtb	r2, r3
    7cc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7cc6:	9900      	ldr	r1, [sp, #0]
    7cc8:	4618      	mov	r0, r3
    7cca:	f001 ff5d 	bl	9b88 <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    7cce:	2301      	movs	r3, #1
    7cd0:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    7cd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7cd8:	2b00      	cmp	r3, #0
    7cda:	d007      	beq.n	7cec <Adc_Calibrate+0x78>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    7cdc:	9b00      	ldr	r3, [sp, #0]
    7cde:	781b      	ldrb	r3, [r3, #0]
    7ce0:	2b01      	cmp	r3, #1
    7ce2:	d103      	bne.n	7cec <Adc_Calibrate+0x78>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    7ce4:	212b      	movs	r1, #43	; 0x2b
    7ce6:	2029      	movs	r0, #41	; 0x29
    7ce8:	f7fe fdf6 	bl	68d8 <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    7cec:	bf00      	nop
    7cee:	b005      	add	sp, #20
    7cf0:	f85d fb04 	ldr.w	pc, [sp], #4

00007cf4 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    7cf4:	b086      	sub	sp, #24
    7cf6:	9003      	str	r0, [sp, #12]
    7cf8:	9102      	str	r1, [sp, #8]
    7cfa:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    7cfc:	9b03      	ldr	r3, [sp, #12]
    7cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7d02:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    7d04:	9b02      	ldr	r3, [sp, #8]
    7d06:	43db      	mvns	r3, r3
    7d08:	9a05      	ldr	r2, [sp, #20]
    7d0a:	4013      	ands	r3, r2
    7d0c:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    7d0e:	9a05      	ldr	r2, [sp, #20]
    7d10:	9b01      	ldr	r3, [sp, #4]
    7d12:	4313      	orrs	r3, r2
    7d14:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    7d16:	9b03      	ldr	r3, [sp, #12]
    7d18:	9a05      	ldr	r2, [sp, #20]
    7d1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7d1e:	bf00      	nop
    7d20:	b006      	add	sp, #24
    7d22:	4770      	bx	lr

00007d24 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    7d24:	b086      	sub	sp, #24
    7d26:	9003      	str	r0, [sp, #12]
    7d28:	9102      	str	r1, [sp, #8]
    7d2a:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    7d2c:	9b03      	ldr	r3, [sp, #12]
    7d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7d30:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    7d32:	9b05      	ldr	r3, [sp, #20]
    7d34:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    7d38:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    7d3a:	9b02      	ldr	r3, [sp, #8]
    7d3c:	015b      	lsls	r3, r3, #5
    7d3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
    7d42:	9a05      	ldr	r2, [sp, #20]
    7d44:	4313      	orrs	r3, r2
    7d46:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    7d48:	9b01      	ldr	r3, [sp, #4]
    7d4a:	f003 0303 	and.w	r3, r3, #3
    7d4e:	9a05      	ldr	r2, [sp, #20]
    7d50:	4313      	orrs	r3, r2
    7d52:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    7d54:	9b03      	ldr	r3, [sp, #12]
    7d56:	9a05      	ldr	r2, [sp, #20]
    7d58:	641a      	str	r2, [r3, #64]	; 0x40
}
    7d5a:	bf00      	nop
    7d5c:	b006      	add	sp, #24
    7d5e:	4770      	bx	lr

00007d60 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    7d60:	b084      	sub	sp, #16
    7d62:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    7d64:	2300      	movs	r3, #0
    7d66:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    7d68:	9b01      	ldr	r3, [sp, #4]
    7d6a:	095b      	lsrs	r3, r3, #5
    7d6c:	f003 0303 	and.w	r3, r3, #3
    7d70:	2b03      	cmp	r3, #3
    7d72:	d00c      	beq.n	7d8e <Adc_HwAcc_GetClockDivide+0x2e>
    7d74:	2b03      	cmp	r3, #3
    7d76:	d80d      	bhi.n	7d94 <Adc_HwAcc_GetClockDivide+0x34>
    7d78:	2b01      	cmp	r3, #1
    7d7a:	d002      	beq.n	7d82 <Adc_HwAcc_GetClockDivide+0x22>
    7d7c:	2b02      	cmp	r3, #2
    7d7e:	d003      	beq.n	7d88 <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    7d80:	e008      	b.n	7d94 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    7d82:	2301      	movs	r3, #1
    7d84:	9303      	str	r3, [sp, #12]
            break;
    7d86:	e006      	b.n	7d96 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    7d88:	2302      	movs	r3, #2
    7d8a:	9303      	str	r3, [sp, #12]
            break;
    7d8c:	e003      	b.n	7d96 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    7d8e:	2303      	movs	r3, #3
    7d90:	9303      	str	r3, [sp, #12]
            break;
    7d92:	e000      	b.n	7d96 <Adc_HwAcc_GetClockDivide+0x36>
            break;
    7d94:	bf00      	nop
    }
    return ReturnValue;
    7d96:	9b03      	ldr	r3, [sp, #12]
}
    7d98:	4618      	mov	r0, r3
    7d9a:	b004      	add	sp, #16
    7d9c:	4770      	bx	lr

00007d9e <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    7d9e:	b084      	sub	sp, #16
    7da0:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    7da2:	2300      	movs	r3, #0
    7da4:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    7da6:	9b01      	ldr	r3, [sp, #4]
    7da8:	f003 0303 	and.w	r3, r3, #3
    7dac:	2b03      	cmp	r3, #3
    7dae:	d00c      	beq.n	7dca <Adc_HwAcc_GetInputClock+0x2c>
    7db0:	2b03      	cmp	r3, #3
    7db2:	d80d      	bhi.n	7dd0 <Adc_HwAcc_GetInputClock+0x32>
    7db4:	2b01      	cmp	r3, #1
    7db6:	d002      	beq.n	7dbe <Adc_HwAcc_GetInputClock+0x20>
    7db8:	2b02      	cmp	r3, #2
    7dba:	d003      	beq.n	7dc4 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    7dbc:	e008      	b.n	7dd0 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    7dbe:	2301      	movs	r3, #1
    7dc0:	9303      	str	r3, [sp, #12]
            break;
    7dc2:	e006      	b.n	7dd2 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    7dc4:	2302      	movs	r3, #2
    7dc6:	9303      	str	r3, [sp, #12]
            break;
    7dc8:	e003      	b.n	7dd2 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    7dca:	2303      	movs	r3, #3
    7dcc:	9303      	str	r3, [sp, #12]
            break;
    7dce:	e000      	b.n	7dd2 <Adc_HwAcc_GetInputClock+0x34>
            break;
    7dd0:	bf00      	nop
    }
    return ReturnValue;
    7dd2:	9b03      	ldr	r3, [sp, #12]
}
    7dd4:	4618      	mov	r0, r3
    7dd6:	b004      	add	sp, #16
    7dd8:	4770      	bx	lr

00007dda <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    7dda:	b084      	sub	sp, #16
    7ddc:	9001      	str	r0, [sp, #4]
    7dde:	460b      	mov	r3, r1
    7de0:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    7de4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7de8:	2b00      	cmp	r3, #0
    7dea:	d002      	beq.n	7df2 <Adc_HwAcc_SetSampleTime+0x18>
    7dec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7df0:	e000      	b.n	7df4 <Adc_HwAcc_SetSampleTime+0x1a>
    7df2:	2301      	movs	r3, #1
    7df4:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    7df8:	9b01      	ldr	r3, [sp, #4]
    7dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7dfc:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    7dfe:	9b02      	ldr	r3, [sp, #8]
    7e00:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    7e04:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    7e06:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e0a:	9a02      	ldr	r2, [sp, #8]
    7e0c:	4313      	orrs	r3, r2
    7e0e:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    7e10:	9b01      	ldr	r3, [sp, #4]
    7e12:	9a02      	ldr	r2, [sp, #8]
    7e14:	645a      	str	r2, [r3, #68]	; 0x44
}
    7e16:	bf00      	nop
    7e18:	b004      	add	sp, #16
    7e1a:	4770      	bx	lr

00007e1c <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    7e1c:	b086      	sub	sp, #24
    7e1e:	9003      	str	r0, [sp, #12]
    7e20:	460b      	mov	r3, r1
    7e22:	9201      	str	r2, [sp, #4]
    7e24:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    7e28:	9b03      	ldr	r3, [sp, #12]
    7e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7e2e:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    7e30:	9b05      	ldr	r3, [sp, #20]
    7e32:	f023 0307 	bic.w	r3, r3, #7
    7e36:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    7e38:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7e3c:	2b00      	cmp	r3, #0
    7e3e:	d001      	beq.n	7e44 <Adc_HwAcc_SetAveraging+0x28>
    7e40:	2304      	movs	r3, #4
    7e42:	e000      	b.n	7e46 <Adc_HwAcc_SetAveraging+0x2a>
    7e44:	2300      	movs	r3, #0
    7e46:	9a05      	ldr	r2, [sp, #20]
    7e48:	4313      	orrs	r3, r2
    7e4a:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    7e4c:	9b01      	ldr	r3, [sp, #4]
    7e4e:	f003 0303 	and.w	r3, r3, #3
    7e52:	9a05      	ldr	r2, [sp, #20]
    7e54:	4313      	orrs	r3, r2
    7e56:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    7e58:	9b03      	ldr	r3, [sp, #12]
    7e5a:	9a05      	ldr	r2, [sp, #20]
    7e5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    7e60:	bf00      	nop
    7e62:	b006      	add	sp, #24
    7e64:	4770      	bx	lr

00007e66 <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    7e66:	b084      	sub	sp, #16
    7e68:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    7e6a:	2300      	movs	r3, #0
    7e6c:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    7e6e:	9b01      	ldr	r3, [sp, #4]
    7e70:	f003 0303 	and.w	r3, r3, #3
    7e74:	2b03      	cmp	r3, #3
    7e76:	d00c      	beq.n	7e92 <Adc_HwAcc_GetAverageSelect+0x2c>
    7e78:	2b03      	cmp	r3, #3
    7e7a:	d80d      	bhi.n	7e98 <Adc_HwAcc_GetAverageSelect+0x32>
    7e7c:	2b01      	cmp	r3, #1
    7e7e:	d002      	beq.n	7e86 <Adc_HwAcc_GetAverageSelect+0x20>
    7e80:	2b02      	cmp	r3, #2
    7e82:	d003      	beq.n	7e8c <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    7e84:	e008      	b.n	7e98 <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    7e86:	2301      	movs	r3, #1
    7e88:	9303      	str	r3, [sp, #12]
            break;
    7e8a:	e006      	b.n	7e9a <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    7e8c:	2302      	movs	r3, #2
    7e8e:	9303      	str	r3, [sp, #12]
            break;
    7e90:	e003      	b.n	7e9a <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    7e92:	2303      	movs	r3, #3
    7e94:	9303      	str	r3, [sp, #12]
            break;
    7e96:	e000      	b.n	7e9a <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    7e98:	bf00      	nop
    }
    return ReturnValue;
    7e9a:	9b03      	ldr	r3, [sp, #12]
}
    7e9c:	4618      	mov	r0, r3
    7e9e:	b004      	add	sp, #16
    7ea0:	4770      	bx	lr

00007ea2 <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    7ea2:	b084      	sub	sp, #16
    7ea4:	9001      	str	r0, [sp, #4]
    7ea6:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    7ea8:	9b01      	ldr	r3, [sp, #4]
    7eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7eae:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    7eb0:	9b03      	ldr	r3, [sp, #12]
    7eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7eb6:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    7eb8:	9b00      	ldr	r3, [sp, #0]
    7eba:	019b      	lsls	r3, r3, #6
    7ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7ec0:	9a03      	ldr	r2, [sp, #12]
    7ec2:	4313      	orrs	r3, r2
    7ec4:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    7ec6:	9b01      	ldr	r3, [sp, #4]
    7ec8:	9a03      	ldr	r2, [sp, #12]
    7eca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7ece:	bf00      	nop
    7ed0:	b004      	add	sp, #16
    7ed2:	4770      	bx	lr

00007ed4 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    7ed4:	b084      	sub	sp, #16
    7ed6:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    7ed8:	2300      	movs	r3, #0
    7eda:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    7edc:	9b01      	ldr	r3, [sp, #4]
    7ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7ee2:	2b00      	cmp	r3, #0
    7ee4:	d001      	beq.n	7eea <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    7ee6:	2301      	movs	r3, #1
    7ee8:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    7eea:	9b03      	ldr	r3, [sp, #12]
}
    7eec:	4618      	mov	r0, r3
    7eee:	b004      	add	sp, #16
    7ef0:	4770      	bx	lr

00007ef2 <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    7ef2:	b086      	sub	sp, #24
    7ef4:	9003      	str	r0, [sp, #12]
    7ef6:	9201      	str	r2, [sp, #4]
    7ef8:	461a      	mov	r2, r3
    7efa:	460b      	mov	r3, r1
    7efc:	f88d 300b 	strb.w	r3, [sp, #11]
    7f00:	4613      	mov	r3, r2
    7f02:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    7f06:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7f0a:	9b03      	ldr	r3, [sp, #12]
    7f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f10:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    7f12:	9b05      	ldr	r3, [sp, #20]
    7f14:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    7f18:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    7f1a:	9b01      	ldr	r3, [sp, #4]
    7f1c:	f003 031f 	and.w	r3, r3, #31
    7f20:	9a05      	ldr	r2, [sp, #20]
    7f22:	4313      	orrs	r3, r2
    7f24:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    7f26:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7f2a:	2b00      	cmp	r3, #0
    7f2c:	d001      	beq.n	7f32 <Adc_HwAcc_SetChannel+0x40>
    7f2e:	2340      	movs	r3, #64	; 0x40
    7f30:	e000      	b.n	7f34 <Adc_HwAcc_SetChannel+0x42>
    7f32:	2300      	movs	r3, #0
    7f34:	9a05      	ldr	r2, [sp, #20]
    7f36:	4313      	orrs	r3, r2
    7f38:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    7f3a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7f3e:	9b03      	ldr	r3, [sp, #12]
    7f40:	9905      	ldr	r1, [sp, #20]
    7f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7f46:	bf00      	nop
    7f48:	b006      	add	sp, #24
    7f4a:	4770      	bx	lr

00007f4c <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    7f4c:	b082      	sub	sp, #8
    7f4e:	9001      	str	r0, [sp, #4]
    7f50:	460b      	mov	r3, r1
    7f52:	f8ad 3002 	strh.w	r3, [sp, #2]
    7f56:	4613      	mov	r3, r2
    7f58:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    7f5c:	f8bd 3000 	ldrh.w	r3, [sp]
    7f60:	b2da      	uxtb	r2, r3
    7f62:	9b01      	ldr	r3, [sp, #4]
    7f64:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    7f68:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7f6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    7f70:	9b01      	ldr	r3, [sp, #4]
    7f72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    7f76:	bf00      	nop
    7f78:	b002      	add	sp, #8
    7f7a:	4770      	bx	lr

00007f7c <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    7f7c:	b082      	sub	sp, #8
    7f7e:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    7f80:	9b01      	ldr	r3, [sp, #4]
    7f82:	099b      	lsrs	r3, r3, #6
    7f84:	f003 0301 	and.w	r3, r3, #1
    7f88:	2b00      	cmp	r3, #0
    7f8a:	bf14      	ite	ne
    7f8c:	2301      	movne	r3, #1
    7f8e:	2300      	moveq	r3, #0
    7f90:	b2db      	uxtb	r3, r3
}
    7f92:	4618      	mov	r0, r3
    7f94:	b002      	add	sp, #8
    7f96:	4770      	bx	lr

00007f98 <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    7f98:	b082      	sub	sp, #8
    7f9a:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    7f9c:	9b01      	ldr	r3, [sp, #4]
    7f9e:	09db      	lsrs	r3, r3, #7
    7fa0:	f003 0301 	and.w	r3, r3, #1
    7fa4:	2b00      	cmp	r3, #0
    7fa6:	bf14      	ite	ne
    7fa8:	2301      	movne	r3, #1
    7faa:	2300      	moveq	r3, #0
    7fac:	b2db      	uxtb	r3, r3
}
    7fae:	4618      	mov	r0, r3
    7fb0:	b002      	add	sp, #8
    7fb2:	4770      	bx	lr

00007fb4 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    7fb4:	b084      	sub	sp, #16
    7fb6:	9001      	str	r0, [sp, #4]
    7fb8:	460b      	mov	r3, r1
    7fba:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    7fbe:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7fc2:	9b01      	ldr	r3, [sp, #4]
    7fc4:	3212      	adds	r2, #18
    7fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7fca:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    7fce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    7fd6:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    7fda:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    7fde:	4618      	mov	r0, r3
    7fe0:	b004      	add	sp, #16
    7fe2:	4770      	bx	lr

00007fe4 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    7fe4:	b500      	push	{lr}
    7fe6:	b085      	sub	sp, #20
    7fe8:	9003      	str	r0, [sp, #12]
    7fea:	9102      	str	r1, [sp, #8]
    7fec:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    7fee:	f003 ff77 	bl	bee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    7ff2:	9b02      	ldr	r3, [sp, #8]
    7ff4:	7a59      	ldrb	r1, [r3, #9]
    7ff6:	9b02      	ldr	r3, [sp, #8]
    7ff8:	68db      	ldr	r3, [r3, #12]
    7ffa:	461a      	mov	r2, r3
    7ffc:	9803      	ldr	r0, [sp, #12]
    7ffe:	f7ff ff0d 	bl	7e1c <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    8002:	f003 ff99 	bl	bf38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    8006:	f003 fdd1 	bl	bbac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    800a:	9901      	ldr	r1, [sp, #4]
    800c:	9803      	ldr	r0, [sp, #12]
    800e:	f7ff ff48 	bl	7ea2 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    8012:	f003 fdf7 	bl	bc04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    8016:	f003 fae7 	bl	b5e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    801a:	9b02      	ldr	r3, [sp, #8]
    801c:	7a1b      	ldrb	r3, [r3, #8]
    801e:	4619      	mov	r1, r3
    8020:	9803      	ldr	r0, [sp, #12]
    8022:	f7ff feda 	bl	7dda <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    8026:	f003 fb0b 	bl	b640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    802a:	f003 fa39 	bl	b4a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    802e:	9b02      	ldr	r3, [sp, #8]
    8030:	6819      	ldr	r1, [r3, #0]
    8032:	9b02      	ldr	r3, [sp, #8]
    8034:	685b      	ldr	r3, [r3, #4]
    8036:	461a      	mov	r2, r3
    8038:	9803      	ldr	r0, [sp, #12]
    803a:	f7ff fe73 	bl	7d24 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    803e:	f003 fa5b 	bl	b4f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    8042:	bf00      	nop
    8044:	b005      	add	sp, #20
    8046:	f85d fb04 	ldr.w	pc, [sp], #4

0000804a <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    804a:	b500      	push	{lr}
    804c:	b087      	sub	sp, #28
    804e:	9001      	str	r0, [sp, #4]
    8050:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8052:	4a67      	ldr	r2, [pc, #412]	; (81f0 <Adc_Ip_Init+0x1a6>)
    8054:	9b01      	ldr	r3, [sp, #4]
    8056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    805a:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    805c:	2300      	movs	r3, #0
    805e:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    8060:	2300      	movs	r3, #0
    8062:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    8064:	9b00      	ldr	r3, [sp, #0]
    8066:	6819      	ldr	r1, [r3, #0]
    8068:	9b00      	ldr	r3, [sp, #0]
    806a:	689b      	ldr	r3, [r3, #8]
    806c:	461a      	mov	r2, r3
    806e:	9802      	ldr	r0, [sp, #8]
    8070:	f7ff fe58 	bl	7d24 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    8074:	9b00      	ldr	r3, [sp, #0]
    8076:	7b1b      	ldrb	r3, [r3, #12]
    8078:	4619      	mov	r1, r3
    807a:	9802      	ldr	r0, [sp, #8]
    807c:	f7ff fead 	bl	7dda <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    8080:	9b00      	ldr	r3, [sp, #0]
    8082:	7b59      	ldrb	r1, [r3, #13]
    8084:	9b00      	ldr	r3, [sp, #0]
    8086:	691b      	ldr	r3, [r3, #16]
    8088:	461a      	mov	r2, r3
    808a:	9802      	ldr	r0, [sp, #8]
    808c:	f7ff fec6 	bl	7e1c <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    8090:	9b00      	ldr	r3, [sp, #0]
    8092:	695b      	ldr	r3, [r3, #20]
    8094:	4619      	mov	r1, r3
    8096:	9801      	ldr	r0, [sp, #4]
    8098:	f000 f9ea 	bl	8470 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    809c:	9b04      	ldr	r3, [sp, #16]
    809e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    80a2:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    80a4:	9b00      	ldr	r3, [sp, #0]
    80a6:	699b      	ldr	r3, [r3, #24]
    80a8:	019b      	lsls	r3, r3, #6
    80aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    80ae:	9a05      	ldr	r2, [sp, #20]
    80b0:	4313      	orrs	r3, r2
    80b2:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    80b4:	9b00      	ldr	r3, [sp, #0]
    80b6:	7f1b      	ldrb	r3, [r3, #28]
    80b8:	2b00      	cmp	r3, #0
    80ba:	d004      	beq.n	80c6 <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    80bc:	9b05      	ldr	r3, [sp, #20]
    80be:	f043 0304 	orr.w	r3, r3, #4
    80c2:	9305      	str	r3, [sp, #20]
    80c4:	e003      	b.n	80ce <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    80c6:	9b04      	ldr	r3, [sp, #16]
    80c8:	f043 0304 	orr.w	r3, r3, #4
    80cc:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    80ce:	9b04      	ldr	r3, [sp, #16]
    80d0:	f043 0303 	orr.w	r3, r3, #3
    80d4:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    80d6:	9b00      	ldr	r3, [sp, #0]
    80d8:	6a1b      	ldr	r3, [r3, #32]
    80da:	f003 0303 	and.w	r3, r3, #3
    80de:	9a05      	ldr	r2, [sp, #20]
    80e0:	4313      	orrs	r3, r2
    80e2:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    80e4:	9b04      	ldr	r3, [sp, #16]
    80e6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    80ea:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    80ec:	9b00      	ldr	r3, [sp, #0]
    80ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    80f2:	2b00      	cmp	r3, #0
    80f4:	d001      	beq.n	80fa <Adc_Ip_Init+0xb0>
    80f6:	2320      	movs	r3, #32
    80f8:	e000      	b.n	80fc <Adc_Ip_Init+0xb2>
    80fa:	2300      	movs	r3, #0
    80fc:	9a05      	ldr	r2, [sp, #20]
    80fe:	4313      	orrs	r3, r2
    8100:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    8102:	9b00      	ldr	r3, [sp, #0]
    8104:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    8108:	2b00      	cmp	r3, #0
    810a:	d001      	beq.n	8110 <Adc_Ip_Init+0xc6>
    810c:	2310      	movs	r3, #16
    810e:	e000      	b.n	8112 <Adc_Ip_Init+0xc8>
    8110:	2300      	movs	r3, #0
    8112:	9a05      	ldr	r2, [sp, #20]
    8114:	4313      	orrs	r3, r2
    8116:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    8118:	9b00      	ldr	r3, [sp, #0]
    811a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    811e:	2b00      	cmp	r3, #0
    8120:	d001      	beq.n	8126 <Adc_Ip_Init+0xdc>
    8122:	2308      	movs	r3, #8
    8124:	e000      	b.n	8128 <Adc_Ip_Init+0xde>
    8126:	2300      	movs	r3, #0
    8128:	9a05      	ldr	r2, [sp, #20]
    812a:	4313      	orrs	r3, r2
    812c:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    812e:	9b00      	ldr	r3, [sp, #0]
    8130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8132:	461a      	mov	r2, r3
    8134:	9b02      	ldr	r3, [sp, #8]
    8136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    813a:	9b00      	ldr	r3, [sp, #0]
    813c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    813e:	461a      	mov	r2, r3
    8140:	9b02      	ldr	r3, [sp, #8]
    8142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    8146:	9a05      	ldr	r2, [sp, #20]
    8148:	9904      	ldr	r1, [sp, #16]
    814a:	9802      	ldr	r0, [sp, #8]
    814c:	f7ff fdd2 	bl	7cf4 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    8150:	9b00      	ldr	r3, [sp, #0]
    8152:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    8154:	9b00      	ldr	r3, [sp, #0]
    8156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    8158:	461a      	mov	r2, r3
    815a:	9802      	ldr	r0, [sp, #8]
    815c:	f7ff fef6 	bl	7f4c <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    8160:	9b00      	ldr	r3, [sp, #0]
    8162:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8166:	4619      	mov	r1, r3
    8168:	9801      	ldr	r0, [sp, #4]
    816a:	f000 f955 	bl	8418 <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    816e:	9b00      	ldr	r3, [sp, #0]
    8170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8172:	2b00      	cmp	r3, #0
    8174:	d01c      	beq.n	81b0 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    8176:	2300      	movs	r3, #0
    8178:	f88d 300f 	strb.w	r3, [sp, #15]
    817c:	e011      	b.n	81a2 <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    817e:	9b00      	ldr	r3, [sp, #0]
    8180:	6b59      	ldr	r1, [r3, #52]	; 0x34
    8182:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8186:	4613      	mov	r3, r2
    8188:	005b      	lsls	r3, r3, #1
    818a:	4413      	add	r3, r2
    818c:	009b      	lsls	r3, r3, #2
    818e:	440b      	add	r3, r1
    8190:	4619      	mov	r1, r3
    8192:	9801      	ldr	r0, [sp, #4]
    8194:	f000 f9c2 	bl	851c <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    8198:	f89d 300f 	ldrb.w	r3, [sp, #15]
    819c:	3301      	adds	r3, #1
    819e:	f88d 300f 	strb.w	r3, [sp, #15]
    81a2:	9b00      	ldr	r3, [sp, #0]
    81a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    81a8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    81ac:	429a      	cmp	r2, r3
    81ae:	d3e6      	bcc.n	817e <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    81b0:	9b00      	ldr	r3, [sp, #0]
    81b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    81b4:	490f      	ldr	r1, [pc, #60]	; (81f4 <Adc_Ip_Init+0x1aa>)
    81b6:	9b01      	ldr	r3, [sp, #4]
    81b8:	204c      	movs	r0, #76	; 0x4c
    81ba:	fb00 f303 	mul.w	r3, r0, r3
    81be:	440b      	add	r3, r1
    81c0:	3308      	adds	r3, #8
    81c2:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    81c4:	9b00      	ldr	r3, [sp, #0]
    81c6:	685a      	ldr	r2, [r3, #4]
    81c8:	490a      	ldr	r1, [pc, #40]	; (81f4 <Adc_Ip_Init+0x1aa>)
    81ca:	9b01      	ldr	r3, [sp, #4]
    81cc:	204c      	movs	r0, #76	; 0x4c
    81ce:	fb00 f303 	mul.w	r3, r0, r3
    81d2:	440b      	add	r3, r1
    81d4:	3304      	adds	r3, #4
    81d6:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    81d8:	4a06      	ldr	r2, [pc, #24]	; (81f4 <Adc_Ip_Init+0x1aa>)
    81da:	9b01      	ldr	r3, [sp, #4]
    81dc:	214c      	movs	r1, #76	; 0x4c
    81de:	fb01 f303 	mul.w	r3, r1, r3
    81e2:	4413      	add	r3, r2
    81e4:	2201      	movs	r2, #1
    81e6:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    81e8:	bf00      	nop
    81ea:	b007      	add	sp, #28
    81ec:	f85d fb04 	ldr.w	pc, [sp], #4
    81f0:	00010848 	.word	0x00010848
    81f4:	1fff8d10 	.word	0x1fff8d10

000081f8 <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    81f8:	b500      	push	{lr}
    81fa:	b0c3      	sub	sp, #268	; 0x10c
    81fc:	ab42      	add	r3, sp, #264	; 0x108
    81fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8202:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    8204:	2300      	movs	r3, #0
    8206:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    8208:	2303      	movs	r3, #3
    820a:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    820c:	2300      	movs	r3, #0
    820e:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    8210:	230c      	movs	r3, #12
    8212:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    8216:	2300      	movs	r3, #0
    8218:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    821c:	2300      	movs	r3, #0
    821e:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    8220:	2300      	movs	r3, #0
    8222:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    8224:	2300      	movs	r3, #0
    8226:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    8228:	2300      	movs	r3, #0
    822a:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    822e:	2300      	movs	r3, #0
    8230:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    8232:	2300      	movs	r3, #0
    8234:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    8238:	2300      	movs	r3, #0
    823a:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    823e:	2300      	movs	r3, #0
    8240:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    8244:	2300      	movs	r3, #0
    8246:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    824a:	2300      	movs	r3, #0
    824c:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    8250:	2300      	movs	r3, #0
    8252:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    8256:	2304      	movs	r3, #4
    8258:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    825c:	2300      	movs	r3, #0
    825e:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    8262:	2310      	movs	r3, #16
    8264:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    8268:	2300      	movs	r3, #0
    826a:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    826e:	e02b      	b.n	82c8 <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    8270:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    8274:	ab42      	add	r3, sp, #264	; 0x108
    8276:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    827a:	4613      	mov	r3, r2
    827c:	005b      	lsls	r3, r3, #1
    827e:	4413      	add	r3, r2
    8280:	009b      	lsls	r3, r3, #2
    8282:	440b      	add	r3, r1
    8284:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    8288:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    828a:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    828e:	ab42      	add	r3, sp, #264	; 0x108
    8290:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    8294:	4613      	mov	r3, r2
    8296:	005b      	lsls	r3, r3, #1
    8298:	4413      	add	r3, r2
    829a:	009b      	lsls	r3, r3, #2
    829c:	440b      	add	r3, r1
    829e:	3304      	adds	r3, #4
    82a0:	221f      	movs	r2, #31
    82a2:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    82a4:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    82a8:	ab42      	add	r3, sp, #264	; 0x108
    82aa:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    82ae:	4613      	mov	r3, r2
    82b0:	005b      	lsls	r3, r3, #1
    82b2:	4413      	add	r3, r2
    82b4:	009b      	lsls	r3, r3, #2
    82b6:	440b      	add	r3, r1
    82b8:	3308      	adds	r3, #8
    82ba:	2200      	movs	r2, #0
    82bc:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    82be:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    82c2:	3301      	adds	r3, #1
    82c4:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    82c8:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    82cc:	2b0f      	cmp	r3, #15
    82ce:	d9cf      	bls.n	8270 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    82d0:	ab02      	add	r3, sp, #8
    82d2:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    82d4:	2300      	movs	r3, #0
    82d6:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    82d8:	aa32      	add	r2, sp, #200	; 0xc8
    82da:	ab42      	add	r3, sp, #264	; 0x108
    82dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    82e0:	4611      	mov	r1, r2
    82e2:	6818      	ldr	r0, [r3, #0]
    82e4:	f7ff feb1 	bl	804a <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    82e8:	4a07      	ldr	r2, [pc, #28]	; (8308 <Adc_Ip_DeInit+0x110>)
    82ea:	ab42      	add	r3, sp, #264	; 0x108
    82ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    82f0:	681b      	ldr	r3, [r3, #0]
    82f2:	214c      	movs	r1, #76	; 0x4c
    82f4:	fb01 f303 	mul.w	r3, r1, r3
    82f8:	4413      	add	r3, r2
    82fa:	2200      	movs	r2, #0
    82fc:	701a      	strb	r2, [r3, #0]
}
    82fe:	bf00      	nop
    8300:	b043      	add	sp, #268	; 0x10c
    8302:	f85d fb04 	ldr.w	pc, [sp], #4
    8306:	bf00      	nop
    8308:	1fff8d10 	.word	0x1fff8d10

0000830c <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    830c:	b500      	push	{lr}
    830e:	b087      	sub	sp, #28
    8310:	9003      	str	r0, [sp, #12]
    8312:	460b      	mov	r3, r1
    8314:	9201      	str	r2, [sp, #4]
    8316:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    831a:	4a0a      	ldr	r2, [pc, #40]	; (8344 <Adc_Ip_SetAveraging+0x38>)
    831c:	9b03      	ldr	r3, [sp, #12]
    831e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8322:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    8324:	f003 fd38 	bl	bd98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    8328:	f89d 300b 	ldrb.w	r3, [sp, #11]
    832c:	9a01      	ldr	r2, [sp, #4]
    832e:	4619      	mov	r1, r3
    8330:	9805      	ldr	r0, [sp, #20]
    8332:	f7ff fd73 	bl	7e1c <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    8336:	f003 fd5b 	bl	bdf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    833a:	bf00      	nop
    833c:	b007      	add	sp, #28
    833e:	f85d fb04 	ldr.w	pc, [sp], #4
    8342:	bf00      	nop
    8344:	00010848 	.word	0x00010848

00008348 <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    8348:	b500      	push	{lr}
    834a:	b085      	sub	sp, #20
    834c:	9001      	str	r0, [sp, #4]
    834e:	460b      	mov	r3, r1
    8350:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8354:	4a09      	ldr	r2, [pc, #36]	; (837c <Adc_Ip_SetSampleTime+0x34>)
    8356:	9b01      	ldr	r3, [sp, #4]
    8358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    835c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    835e:	f003 f995 	bl	b68c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    8362:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8366:	4619      	mov	r1, r3
    8368:	9803      	ldr	r0, [sp, #12]
    836a:	f7ff fd36 	bl	7dda <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    836e:	f003 f9b9 	bl	b6e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    8372:	bf00      	nop
    8374:	b005      	add	sp, #20
    8376:	f85d fb04 	ldr.w	pc, [sp], #4
    837a:	bf00      	nop
    837c:	00010848 	.word	0x00010848

00008380 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    8380:	b500      	push	{lr}
    8382:	b085      	sub	sp, #20
    8384:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8386:	4a0a      	ldr	r2, [pc, #40]	; (83b0 <Adc_Ip_EnableDma+0x30>)
    8388:	9b01      	ldr	r3, [sp, #4]
    838a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    838e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    8390:	f003 fcb0 	bl	bcf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    8394:	9b03      	ldr	r3, [sp, #12]
    8396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    839a:	f043 0204 	orr.w	r2, r3, #4
    839e:	9b03      	ldr	r3, [sp, #12]
    83a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    83a4:	f003 fcd2 	bl	bd4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    83a8:	bf00      	nop
    83aa:	b005      	add	sp, #20
    83ac:	f85d fb04 	ldr.w	pc, [sp], #4
    83b0:	00010848 	.word	0x00010848

000083b4 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    83b4:	b500      	push	{lr}
    83b6:	b085      	sub	sp, #20
    83b8:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    83ba:	4a0a      	ldr	r2, [pc, #40]	; (83e4 <Adc_Ip_DisableDma+0x30>)
    83bc:	9b01      	ldr	r3, [sp, #4]
    83be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83c2:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    83c4:	f003 fb4e 	bl	ba64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    83c8:	9b03      	ldr	r3, [sp, #12]
    83ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    83ce:	f023 0204 	bic.w	r2, r3, #4
    83d2:	9b03      	ldr	r3, [sp, #12]
    83d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    83d8:	f003 fb70 	bl	babc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    83dc:	bf00      	nop
    83de:	b005      	add	sp, #20
    83e0:	f85d fb04 	ldr.w	pc, [sp], #4
    83e4:	00010848 	.word	0x00010848

000083e8 <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    83e8:	b500      	push	{lr}
    83ea:	b085      	sub	sp, #20
    83ec:	9001      	str	r0, [sp, #4]
    83ee:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    83f0:	4a08      	ldr	r2, [pc, #32]	; (8414 <Adc_Ip_SetTriggerMode+0x2c>)
    83f2:	9b01      	ldr	r3, [sp, #4]
    83f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83f8:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    83fa:	f003 fb85 	bl	bb08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    83fe:	9900      	ldr	r1, [sp, #0]
    8400:	9803      	ldr	r0, [sp, #12]
    8402:	f7ff fd4e 	bl	7ea2 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    8406:	f003 fbab 	bl	bb60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    840a:	bf00      	nop
    840c:	b005      	add	sp, #20
    840e:	f85d fb04 	ldr.w	pc, [sp], #4
    8412:	bf00      	nop
    8414:	00010848 	.word	0x00010848

00008418 <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    8418:	b500      	push	{lr}
    841a:	b085      	sub	sp, #20
    841c:	9001      	str	r0, [sp, #4]
    841e:	460b      	mov	r3, r1
    8420:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8424:	4a11      	ldr	r2, [pc, #68]	; (846c <Adc_Ip_SetContinuousMode+0x54>)
    8426:	9b01      	ldr	r3, [sp, #4]
    8428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    842c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    842e:	f003 fda9 	bl	bf84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    8432:	9b03      	ldr	r3, [sp, #12]
    8434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8438:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    843a:	9b02      	ldr	r3, [sp, #8]
    843c:	f023 0308 	bic.w	r3, r3, #8
    8440:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    8442:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8446:	2b00      	cmp	r3, #0
    8448:	d001      	beq.n	844e <Adc_Ip_SetContinuousMode+0x36>
    844a:	2308      	movs	r3, #8
    844c:	e000      	b.n	8450 <Adc_Ip_SetContinuousMode+0x38>
    844e:	2300      	movs	r3, #0
    8450:	9a02      	ldr	r2, [sp, #8]
    8452:	4313      	orrs	r3, r2
    8454:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    8456:	9b03      	ldr	r3, [sp, #12]
    8458:	9a02      	ldr	r2, [sp, #8]
    845a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    845e:	f003 fdbd 	bl	bfdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    8462:	bf00      	nop
    8464:	b005      	add	sp, #20
    8466:	f85d fb04 	ldr.w	pc, [sp], #4
    846a:	bf00      	nop
    846c:	00010848 	.word	0x00010848

00008470 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    8470:	b500      	push	{lr}
    8472:	b085      	sub	sp, #20
    8474:	9001      	str	r0, [sp, #4]
    8476:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8478:	4a0e      	ldr	r2, [pc, #56]	; (84b4 <Adc_Ip_SetResolution+0x44>)
    847a:	9b01      	ldr	r3, [sp, #4]
    847c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8480:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    8482:	f002 fdcf 	bl	b024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    8486:	9b03      	ldr	r3, [sp, #12]
    8488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    848a:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    848c:	9b02      	ldr	r3, [sp, #8]
    848e:	f023 030c 	bic.w	r3, r3, #12
    8492:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    8494:	9b00      	ldr	r3, [sp, #0]
    8496:	009b      	lsls	r3, r3, #2
    8498:	f003 030c 	and.w	r3, r3, #12
    849c:	9a02      	ldr	r2, [sp, #8]
    849e:	4313      	orrs	r3, r2
    84a0:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    84a2:	9b03      	ldr	r3, [sp, #12]
    84a4:	9a02      	ldr	r2, [sp, #8]
    84a6:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    84a8:	f002 fde8 	bl	b07c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    84ac:	bf00      	nop
    84ae:	b005      	add	sp, #20
    84b0:	f85d fb04 	ldr.w	pc, [sp], #4
    84b4:	00010848 	.word	0x00010848

000084b8 <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    84b8:	b500      	push	{lr}
    84ba:	b085      	sub	sp, #20
    84bc:	9001      	str	r0, [sp, #4]
    84be:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    84c0:	4a15      	ldr	r2, [pc, #84]	; (8518 <Adc_Ip_SetClockMode+0x60>)
    84c2:	9b01      	ldr	r3, [sp, #4]
    84c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84c8:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    84ca:	f002 ff45 	bl	b358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    84ce:	9b00      	ldr	r3, [sp, #0]
    84d0:	6819      	ldr	r1, [r3, #0]
    84d2:	9b00      	ldr	r3, [sp, #0]
    84d4:	685b      	ldr	r3, [r3, #4]
    84d6:	461a      	mov	r2, r3
    84d8:	9803      	ldr	r0, [sp, #12]
    84da:	f7ff fc23 	bl	7d24 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    84de:	f002 ff67 	bl	b3b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    84e2:	f003 f82f 	bl	b544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    84e6:	9b00      	ldr	r3, [sp, #0]
    84e8:	7a1b      	ldrb	r3, [r3, #8]
    84ea:	4619      	mov	r1, r3
    84ec:	9803      	ldr	r0, [sp, #12]
    84ee:	f7ff fc74 	bl	7dda <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    84f2:	f003 f853 	bl	b59c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    84f6:	f003 fca1 	bl	be3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    84fa:	9b00      	ldr	r3, [sp, #0]
    84fc:	7a59      	ldrb	r1, [r3, #9]
    84fe:	9b00      	ldr	r3, [sp, #0]
    8500:	68db      	ldr	r3, [r3, #12]
    8502:	461a      	mov	r2, r3
    8504:	9803      	ldr	r0, [sp, #12]
    8506:	f7ff fc89 	bl	7e1c <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    850a:	f003 fcc3 	bl	be94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    850e:	bf00      	nop
    8510:	b005      	add	sp, #20
    8512:	f85d fb04 	ldr.w	pc, [sp], #4
    8516:	bf00      	nop
    8518:	00010848 	.word	0x00010848

0000851c <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    851c:	b510      	push	{r4, lr}
    851e:	b084      	sub	sp, #16
    8520:	9001      	str	r0, [sp, #4]
    8522:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8524:	4a13      	ldr	r2, [pc, #76]	; (8574 <Adc_Ip_ConfigChannel+0x58>)
    8526:	9b01      	ldr	r3, [sp, #4]
    8528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    852c:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    852e:	9b00      	ldr	r3, [sp, #0]
    8530:	685b      	ldr	r3, [r3, #4]
    8532:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    8534:	f003 fa44 	bl	b9c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    8538:	9b00      	ldr	r3, [sp, #0]
    853a:	7819      	ldrb	r1, [r3, #0]
    853c:	9b00      	ldr	r3, [sp, #0]
    853e:	7a1b      	ldrb	r3, [r3, #8]
    8540:	9a02      	ldr	r2, [sp, #8]
    8542:	9803      	ldr	r0, [sp, #12]
    8544:	f7ff fcd5 	bl	7ef2 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    8548:	f003 fa66 	bl	ba18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    854c:	9b00      	ldr	r3, [sp, #0]
    854e:	781b      	ldrb	r3, [r3, #0]
    8550:	461c      	mov	r4, r3
    8552:	9b00      	ldr	r3, [sp, #0]
    8554:	6859      	ldr	r1, [r3, #4]
    8556:	4808      	ldr	r0, [pc, #32]	; (8578 <Adc_Ip_ConfigChannel+0x5c>)
    8558:	9a01      	ldr	r2, [sp, #4]
    855a:	4613      	mov	r3, r2
    855c:	00db      	lsls	r3, r3, #3
    855e:	4413      	add	r3, r2
    8560:	005b      	lsls	r3, r3, #1
    8562:	4413      	add	r3, r2
    8564:	4423      	add	r3, r4
    8566:	3302      	adds	r3, #2
    8568:	009b      	lsls	r3, r3, #2
    856a:	4403      	add	r3, r0
    856c:	6059      	str	r1, [r3, #4]
}
    856e:	bf00      	nop
    8570:	b004      	add	sp, #16
    8572:	bd10      	pop	{r4, pc}
    8574:	00010848 	.word	0x00010848
    8578:	1fff8d10 	.word	0x1fff8d10

0000857c <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    857c:	b500      	push	{lr}
    857e:	b089      	sub	sp, #36	; 0x24
    8580:	9001      	str	r0, [sp, #4]
    8582:	460b      	mov	r3, r1
    8584:	f88d 3003 	strb.w	r3, [sp, #3]
    8588:	4613      	mov	r3, r2
    858a:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    858e:	4a24      	ldr	r2, [pc, #144]	; (8620 <Adc_Ip_SetDisabledChannel+0xa4>)
    8590:	9b01      	ldr	r3, [sp, #4]
    8592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8596:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8598:	2300      	movs	r3, #0
    859a:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    859c:	2100      	movs	r1, #0
    859e:	4821      	ldr	r0, [pc, #132]	; (8624 <Adc_Ip_SetDisabledChannel+0xa8>)
    85a0:	f7f9 fb44 	bl	1c2c <OsIf_MicrosToTicks>
    85a4:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    85a6:	2000      	movs	r0, #0
    85a8:	f7f9 faf4 	bl	1b94 <OsIf_GetCounter>
    85ac:	4603      	mov	r3, r0
    85ae:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    85b0:	2300      	movs	r3, #0
    85b2:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    85b4:	f003 f8bc 	bl	b730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    85b8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    85bc:	9b05      	ldr	r3, [sp, #20]
    85be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    85c2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    85c6:	f043 011f 	orr.w	r1, r3, #31
    85ca:	9b05      	ldr	r3, [sp, #20]
    85cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    85d0:	f003 f8da 	bl	b788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    85d4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    85d8:	2b00      	cmp	r3, #0
    85da:	d01c      	beq.n	8616 <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    85dc:	e008      	b.n	85f0 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    85de:	ab03      	add	r3, sp, #12
    85e0:	2100      	movs	r1, #0
    85e2:	4618      	mov	r0, r3
    85e4:	f7f9 faef 	bl	1bc6 <OsIf_GetElapsed>
    85e8:	4602      	mov	r2, r0
    85ea:	9b06      	ldr	r3, [sp, #24]
    85ec:	4413      	add	r3, r2
    85ee:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    85f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    85f4:	9b05      	ldr	r3, [sp, #20]
    85f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    85fa:	f003 031f 	and.w	r3, r3, #31
    85fe:	2b1f      	cmp	r3, #31
    8600:	d003      	beq.n	860a <Adc_Ip_SetDisabledChannel+0x8e>
    8602:	9a06      	ldr	r2, [sp, #24]
    8604:	9b04      	ldr	r3, [sp, #16]
    8606:	429a      	cmp	r2, r3
    8608:	d3e9      	bcc.n	85de <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    860a:	9a06      	ldr	r2, [sp, #24]
    860c:	9b04      	ldr	r3, [sp, #16]
    860e:	429a      	cmp	r2, r3
    8610:	d301      	bcc.n	8616 <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    8612:	2302      	movs	r3, #2
    8614:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    8616:	9b07      	ldr	r3, [sp, #28]
}
    8618:	4618      	mov	r0, r3
    861a:	b009      	add	sp, #36	; 0x24
    861c:	f85d fb04 	ldr.w	pc, [sp], #4
    8620:	00010848 	.word	0x00010848
    8624:	000186a0 	.word	0x000186a0

00008628 <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    8628:	b500      	push	{lr}
    862a:	b087      	sub	sp, #28
    862c:	9003      	str	r0, [sp, #12]
    862e:	9102      	str	r1, [sp, #8]
    8630:	4613      	mov	r3, r2
    8632:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8636:	4a0a      	ldr	r2, [pc, #40]	; (8660 <Adc_Ip_StartConversion+0x38>)
    8638:	9b03      	ldr	r3, [sp, #12]
    863a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    863e:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    8640:	f003 f8c8 	bl	b7d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    8644:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8648:	9a02      	ldr	r2, [sp, #8]
    864a:	2100      	movs	r1, #0
    864c:	9805      	ldr	r0, [sp, #20]
    864e:	f7ff fc50 	bl	7ef2 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    8652:	f003 f8eb 	bl	b82c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    8656:	bf00      	nop
    8658:	b007      	add	sp, #28
    865a:	f85d fb04 	ldr.w	pc, [sp], #4
    865e:	bf00      	nop
    8660:	00010848 	.word	0x00010848

00008664 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    8664:	b084      	sub	sp, #16
    8666:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8668:	4a0b      	ldr	r2, [pc, #44]	; (8698 <Adc_Ip_GetConvActiveFlag+0x34>)
    866a:	9b01      	ldr	r3, [sp, #4]
    866c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8670:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    8672:	9b03      	ldr	r3, [sp, #12]
    8674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8678:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    867a:	9b02      	ldr	r3, [sp, #8]
    867c:	09db      	lsrs	r3, r3, #7
    867e:	f003 0301 	and.w	r3, r3, #1
    8682:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    8684:	9b02      	ldr	r3, [sp, #8]
    8686:	2b00      	cmp	r3, #0
    8688:	bf14      	ite	ne
    868a:	2301      	movne	r3, #1
    868c:	2300      	moveq	r3, #0
    868e:	b2db      	uxtb	r3, r3
}
    8690:	4618      	mov	r0, r3
    8692:	b004      	add	sp, #16
    8694:	4770      	bx	lr
    8696:	bf00      	nop
    8698:	00010848 	.word	0x00010848

0000869c <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    869c:	b500      	push	{lr}
    869e:	b085      	sub	sp, #20
    86a0:	9001      	str	r0, [sp, #4]
    86a2:	460b      	mov	r3, r1
    86a4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    86a8:	4a08      	ldr	r2, [pc, #32]	; (86cc <Adc_Ip_GetChanInterrupt+0x30>)
    86aa:	9b01      	ldr	r3, [sp, #4]
    86ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    86b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    86b8:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    86ba:	9803      	ldr	r0, [sp, #12]
    86bc:	f7ff fc5e 	bl	7f7c <Adc_HwAcc_GetAIEN>
    86c0:	4603      	mov	r3, r0
}
    86c2:	4618      	mov	r0, r3
    86c4:	b005      	add	sp, #20
    86c6:	f85d fb04 	ldr.w	pc, [sp], #4
    86ca:	bf00      	nop
    86cc:	00010848 	.word	0x00010848

000086d0 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    86d0:	b500      	push	{lr}
    86d2:	b085      	sub	sp, #20
    86d4:	9001      	str	r0, [sp, #4]
    86d6:	460b      	mov	r3, r1
    86d8:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    86dc:	4a08      	ldr	r2, [pc, #32]	; (8700 <Adc_Ip_GetConvCompleteFlag+0x30>)
    86de:	9b01      	ldr	r3, [sp, #4]
    86e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86e4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    86e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    86ec:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    86ee:	9803      	ldr	r0, [sp, #12]
    86f0:	f7ff fc52 	bl	7f98 <Adc_HwAcc_GetCOCO>
    86f4:	4603      	mov	r3, r0
}
    86f6:	4618      	mov	r0, r3
    86f8:	b005      	add	sp, #20
    86fa:	f85d fb04 	ldr.w	pc, [sp], #4
    86fe:	bf00      	nop
    8700:	00010848 	.word	0x00010848

00008704 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    8704:	b500      	push	{lr}
    8706:	b085      	sub	sp, #20
    8708:	9001      	str	r0, [sp, #4]
    870a:	460b      	mov	r3, r1
    870c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8710:	4a07      	ldr	r2, [pc, #28]	; (8730 <Adc_Ip_GetConvData+0x2c>)
    8712:	9b01      	ldr	r3, [sp, #4]
    8714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8718:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    871a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    871e:	4619      	mov	r1, r3
    8720:	9803      	ldr	r0, [sp, #12]
    8722:	f7ff fc47 	bl	7fb4 <Adc_HwAcc_GetData>
    8726:	4603      	mov	r3, r0
}
    8728:	4618      	mov	r0, r3
    872a:	b005      	add	sp, #20
    872c:	f85d fb04 	ldr.w	pc, [sp], #4
    8730:	00010848 	.word	0x00010848

00008734 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    8734:	b500      	push	{lr}
    8736:	b093      	sub	sp, #76	; 0x4c
    8738:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    873a:	4a59      	ldr	r2, [pc, #356]	; (88a0 <Adc_Ip_DoCalibration+0x16c>)
    873c:	9b01      	ldr	r3, [sp, #4]
    873e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8742:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8744:	2300      	movs	r3, #0
    8746:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    8748:	2100      	movs	r1, #0
    874a:	4856      	ldr	r0, [pc, #344]	; (88a4 <Adc_Ip_DoCalibration+0x170>)
    874c:	f7f9 fa6e 	bl	1c2c <OsIf_MicrosToTicks>
    8750:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    8752:	2000      	movs	r0, #0
    8754:	f7f9 fa1e 	bl	1b94 <OsIf_GetCounter>
    8758:	4603      	mov	r3, r0
    875a:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    875c:	2300      	movs	r3, #0
    875e:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    8760:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8766:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    8768:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    876a:	089b      	lsrs	r3, r3, #2
    876c:	f003 0301 	and.w	r3, r3, #1
    8770:	2b00      	cmp	r3, #0
    8772:	bf14      	ite	ne
    8774:	2301      	movne	r3, #1
    8776:	2300      	moveq	r3, #0
    8778:	b2db      	uxtb	r3, r3
    877a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    877e:	980d      	ldr	r0, [sp, #52]	; 0x34
    8780:	f7ff fb71 	bl	7e66 <Adc_HwAcc_GetAverageSelect>
    8784:	4603      	mov	r3, r0
    8786:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    8788:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    878a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    878c:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    878e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8790:	b2db      	uxtb	r3, r3
    8792:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    8796:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    879c:	4618      	mov	r0, r3
    879e:	f7ff fb99 	bl	7ed4 <Adc_HwAcc_GetTriggerMode>
    87a2:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    87a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    87a8:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    87aa:	980d      	ldr	r0, [sp, #52]	; 0x34
    87ac:	f7ff fad8 	bl	7d60 <Adc_HwAcc_GetClockDivide>
    87b0:	4603      	mov	r3, r0
    87b2:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    87b4:	980d      	ldr	r0, [sp, #52]	; 0x34
    87b6:	f7ff faf2 	bl	7d9e <Adc_HwAcc_GetInputClock>
    87ba:	4603      	mov	r3, r0
    87bc:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    87be:	2301      	movs	r3, #1
    87c0:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    87c4:	2303      	movs	r3, #3
    87c6:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    87c8:	230c      	movs	r3, #12
    87ca:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    87ce:	4a36      	ldr	r2, [pc, #216]	; (88a8 <Adc_Ip_DoCalibration+0x174>)
    87d0:	9b01      	ldr	r3, [sp, #4]
    87d2:	214c      	movs	r1, #76	; 0x4c
    87d4:	fb01 f303 	mul.w	r3, r1, r3
    87d8:	4413      	add	r3, r2
    87da:	3304      	adds	r3, #4
    87dc:	681b      	ldr	r3, [r3, #0]
    87de:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    87e0:	9b08      	ldr	r3, [sp, #32]
    87e2:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    87e4:	ab03      	add	r3, sp, #12
    87e6:	2200      	movs	r2, #0
    87e8:	4619      	mov	r1, r3
    87ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
    87ec:	f7ff fbfa 	bl	7fe4 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    87f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87f2:	2200      	movs	r2, #0
    87f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    87f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87fa:	2200      	movs	r2, #0
    87fc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    8800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8802:	2200      	movs	r2, #0
    8804:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    8808:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    880a:	2200      	movs	r2, #0
    880c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    8810:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8812:	2200      	movs	r2, #0
    8814:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    8818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    881a:	2200      	movs	r2, #0
    881c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    8820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8822:	2200      	movs	r2, #0
    8824:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    8828:	f003 fb5a 	bl	bee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    882c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    882e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8832:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    8834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    883a:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    883c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    883e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8842:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    8844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8846:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8848:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    884c:	f003 fb74 	bl	bf38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8850:	e008      	b.n	8864 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8852:	ab0b      	add	r3, sp, #44	; 0x2c
    8854:	2100      	movs	r1, #0
    8856:	4618      	mov	r0, r3
    8858:	f7f9 f9b5 	bl	1bc6 <OsIf_GetElapsed>
    885c:	4602      	mov	r2, r0
    885e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8860:	4413      	add	r3, r2
    8862:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    886a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    886e:	2b00      	cmp	r3, #0
    8870:	d003      	beq.n	887a <Adc_Ip_DoCalibration+0x146>
    8872:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8876:	429a      	cmp	r2, r3
    8878:	d3eb      	bcc.n	8852 <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    887a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    887c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    887e:	429a      	cmp	r2, r3
    8880:	d301      	bcc.n	8886 <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8882:	2302      	movs	r3, #2
    8884:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    8886:	ab07      	add	r3, sp, #28
    8888:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    888a:	4619      	mov	r1, r3
    888c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    888e:	f7ff fba9 	bl	7fe4 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    8892:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8894:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    8896:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    8898:	4618      	mov	r0, r3
    889a:	b013      	add	sp, #76	; 0x4c
    889c:	f85d fb04 	ldr.w	pc, [sp], #4
    88a0:	00010848 	.word	0x00010848
    88a4:	000186a0 	.word	0x000186a0
    88a8:	1fff8d10 	.word	0x1fff8d10

000088ac <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    88ac:	b500      	push	{lr}
    88ae:	b089      	sub	sp, #36	; 0x24
    88b0:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    88b2:	4a1e      	ldr	r2, [pc, #120]	; (892c <Adc_Ip_ClearLatchedTriggers+0x80>)
    88b4:	9b01      	ldr	r3, [sp, #4]
    88b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88ba:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    88bc:	2300      	movs	r3, #0
    88be:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    88c0:	2100      	movs	r1, #0
    88c2:	481b      	ldr	r0, [pc, #108]	; (8930 <Adc_Ip_ClearLatchedTriggers+0x84>)
    88c4:	f7f9 f9b2 	bl	1c2c <OsIf_MicrosToTicks>
    88c8:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    88ca:	2000      	movs	r0, #0
    88cc:	f7f9 f962 	bl	1b94 <OsIf_GetCounter>
    88d0:	4603      	mov	r3, r0
    88d2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    88d4:	2300      	movs	r3, #0
    88d6:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    88d8:	f002 fd90 	bl	b3fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    88dc:	9b05      	ldr	r3, [sp, #20]
    88de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    88e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    88e4:	9b05      	ldr	r3, [sp, #20]
    88e6:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    88e8:	f002 fdb4 	bl	b454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    88ec:	e008      	b.n	8900 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    88ee:	ab03      	add	r3, sp, #12
    88f0:	2100      	movs	r1, #0
    88f2:	4618      	mov	r0, r3
    88f4:	f7f9 f967 	bl	1bc6 <OsIf_GetElapsed>
    88f8:	4602      	mov	r2, r0
    88fa:	9b06      	ldr	r3, [sp, #24]
    88fc:	4413      	add	r3, r2
    88fe:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8900:	9b05      	ldr	r3, [sp, #20]
    8902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8906:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    890a:	2b00      	cmp	r3, #0
    890c:	d003      	beq.n	8916 <Adc_Ip_ClearLatchedTriggers+0x6a>
    890e:	9a06      	ldr	r2, [sp, #24]
    8910:	9b04      	ldr	r3, [sp, #16]
    8912:	429a      	cmp	r2, r3
    8914:	d3eb      	bcc.n	88ee <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    8916:	9a06      	ldr	r2, [sp, #24]
    8918:	9b04      	ldr	r3, [sp, #16]
    891a:	429a      	cmp	r2, r3
    891c:	d301      	bcc.n	8922 <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    891e:	2302      	movs	r3, #2
    8920:	9307      	str	r3, [sp, #28]
    }

    return Status;
    8922:	9b07      	ldr	r3, [sp, #28]
}
    8924:	4618      	mov	r0, r3
    8926:	b009      	add	sp, #36	; 0x24
    8928:	f85d fb04 	ldr.w	pc, [sp], #4
    892c:	00010848 	.word	0x00010848
    8930:	000186a0 	.word	0x000186a0

00008934 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    8934:	b500      	push	{lr}
    8936:	b085      	sub	sp, #20
    8938:	9001      	str	r0, [sp, #4]
    893a:	460b      	mov	r3, r1
    893c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8940:	4a0c      	ldr	r2, [pc, #48]	; (8974 <Adc_Ip_EnableChannelNotification+0x40>)
    8942:	9b01      	ldr	r3, [sp, #4]
    8944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8948:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    894a:	f002 ff95 	bl	b878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    894e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8952:	9b03      	ldr	r3, [sp, #12]
    8954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8958:	f89d 2003 	ldrb.w	r2, [sp, #3]
    895c:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    8960:	9b03      	ldr	r3, [sp, #12]
    8962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    8966:	f002 ffb3 	bl	b8d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    896a:	bf00      	nop
    896c:	b005      	add	sp, #20
    896e:	f85d fb04 	ldr.w	pc, [sp], #4
    8972:	bf00      	nop
    8974:	00010848 	.word	0x00010848

00008978 <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    8978:	b500      	push	{lr}
    897a:	b085      	sub	sp, #20
    897c:	9001      	str	r0, [sp, #4]
    897e:	460b      	mov	r3, r1
    8980:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8984:	4a0c      	ldr	r2, [pc, #48]	; (89b8 <Adc_Ip_DisableChannelNotification+0x40>)
    8986:	9b01      	ldr	r3, [sp, #4]
    8988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    898c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    898e:	f002 ffc5 	bl	b91c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    8992:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8996:	9b03      	ldr	r3, [sp, #12]
    8998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    899c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    89a0:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    89a4:	9b03      	ldr	r3, [sp, #12]
    89a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    89aa:	f002 ffe3 	bl	b974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    89ae:	bf00      	nop
    89b0:	b005      	add	sp, #20
    89b2:	f85d fb04 	ldr.w	pc, [sp], #4
    89b6:	bf00      	nop
    89b8:	00010848 	.word	0x00010848

000089bc <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    89bc:	b500      	push	{lr}
    89be:	b085      	sub	sp, #20
    89c0:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    89c2:	4a0a      	ldr	r2, [pc, #40]	; (89ec <Adc_Ip_ClearTrigErrReg+0x30>)
    89c4:	9b01      	ldr	r3, [sp, #4]
    89c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89ca:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    89cc:	f003 f940 	bl	bc50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    89d0:	9b03      	ldr	r3, [sp, #12]
    89d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    89d6:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    89da:	9b03      	ldr	r3, [sp, #12]
    89dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    89e0:	f003 f962 	bl	bca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    89e4:	bf00      	nop
    89e6:	b005      	add	sp, #20
    89e8:	f85d fb04 	ldr.w	pc, [sp], #4
    89ec:	00010848 	.word	0x00010848

000089f0 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    89f0:	b084      	sub	sp, #16
    89f2:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    89f4:	4a06      	ldr	r2, [pc, #24]	; (8a10 <Adc_Ip_GetTrigErrReg+0x20>)
    89f6:	9b01      	ldr	r3, [sp, #4]
    89f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89fc:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    89fe:	9b03      	ldr	r3, [sp, #12]
    8a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8a04:	0e1b      	lsrs	r3, r3, #24
    8a06:	f003 030f 	and.w	r3, r3, #15
}
    8a0a:	4618      	mov	r0, r3
    8a0c:	b004      	add	sp, #16
    8a0e:	4770      	bx	lr
    8a10:	00010848 	.word	0x00010848

00008a14 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    8a14:	b082      	sub	sp, #8
    8a16:	9001      	str	r0, [sp, #4]
    8a18:	460b      	mov	r3, r1
    8a1a:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    8a1e:	4a06      	ldr	r2, [pc, #24]	; (8a38 <Adc_Ip_GetDataAddress+0x24>)
    8a20:	9b01      	ldr	r3, [sp, #4]
    8a22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8a26:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8a2a:	3312      	adds	r3, #18
    8a2c:	009b      	lsls	r3, r3, #2
    8a2e:	4413      	add	r3, r2
}
    8a30:	4618      	mov	r0, r3
    8a32:	b002      	add	sp, #8
    8a34:	4770      	bx	lr
    8a36:	bf00      	nop
    8a38:	00010848 	.word	0x00010848

00008a3c <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    8a3c:	b088      	sub	sp, #32
    8a3e:	9003      	str	r0, [sp, #12]
    8a40:	9102      	str	r1, [sp, #8]
    8a42:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8a44:	4a25      	ldr	r2, [pc, #148]	; (8adc <Adc_Ip_GetChanData+0xa0>)
    8a46:	9b03      	ldr	r3, [sp, #12]
    8a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a4c:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8a4e:	2300      	movs	r3, #0
    8a50:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    8a52:	2300      	movs	r3, #0
    8a54:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    8a58:	2300      	movs	r3, #0
    8a5a:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8a5e:	2300      	movs	r3, #0
    8a60:	f88d 3019 	strb.w	r3, [sp, #25]
    8a64:	e019      	b.n	8a9a <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    8a66:	f89d 1019 	ldrb.w	r1, [sp, #25]
    8a6a:	481d      	ldr	r0, [pc, #116]	; (8ae0 <Adc_Ip_GetChanData+0xa4>)
    8a6c:	9a03      	ldr	r2, [sp, #12]
    8a6e:	4613      	mov	r3, r2
    8a70:	00db      	lsls	r3, r3, #3
    8a72:	4413      	add	r3, r2
    8a74:	005b      	lsls	r3, r3, #1
    8a76:	4413      	add	r3, r2
    8a78:	440b      	add	r3, r1
    8a7a:	3302      	adds	r3, #2
    8a7c:	009b      	lsls	r3, r3, #2
    8a7e:	4403      	add	r3, r0
    8a80:	685b      	ldr	r3, [r3, #4]
    8a82:	9a02      	ldr	r2, [sp, #8]
    8a84:	429a      	cmp	r2, r3
    8a86:	d103      	bne.n	8a90 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    8a88:	2301      	movs	r3, #1
    8a8a:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    8a8e:	e008      	b.n	8aa2 <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8a90:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8a94:	3301      	adds	r3, #1
    8a96:	f88d 3019 	strb.w	r3, [sp, #25]
    8a9a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8a9e:	2b0f      	cmp	r3, #15
    8aa0:	d9e1      	bls.n	8a66 <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    8aa2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    8aa6:	2b00      	cmp	r3, #0
    8aa8:	d00e      	beq.n	8ac8 <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    8aaa:	f89d 2019 	ldrb.w	r2, [sp, #25]
    8aae:	9b05      	ldr	r3, [sp, #20]
    8ab0:	3212      	adds	r2, #18
    8ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8ab6:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    8aba:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    8abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8ac2:	f8ad 301a 	strh.w	r3, [sp, #26]
    8ac6:	e001      	b.n	8acc <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    8ac8:	2301      	movs	r3, #1
    8aca:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    8acc:	9b01      	ldr	r3, [sp, #4]
    8ace:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    8ad2:	801a      	strh	r2, [r3, #0]

    return Status;
    8ad4:	9b07      	ldr	r3, [sp, #28]
}
    8ad6:	4618      	mov	r0, r3
    8ad8:	b008      	add	sp, #32
    8ada:	4770      	bx	lr
    8adc:	00010848 	.word	0x00010848
    8ae0:	1fff8d10 	.word	0x1fff8d10

00008ae4 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    8ae4:	b500      	push	{lr}
    8ae6:	b085      	sub	sp, #20
    8ae8:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    8aea:	2300      	movs	r3, #0
    8aec:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    8af0:	2300      	movs	r3, #0
    8af2:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    8af6:	4a32      	ldr	r2, [pc, #200]	; (8bc0 <Adc_Ip_IRQHandler+0xdc>)
    8af8:	9b01      	ldr	r3, [sp, #4]
    8afa:	214c      	movs	r1, #76	; 0x4c
    8afc:	fb01 f303 	mul.w	r3, r1, r3
    8b00:	4413      	add	r3, r2
    8b02:	781b      	ldrb	r3, [r3, #0]
    8b04:	2b00      	cmp	r3, #0
    8b06:	d040      	beq.n	8b8a <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    8b08:	4a2d      	ldr	r2, [pc, #180]	; (8bc0 <Adc_Ip_IRQHandler+0xdc>)
    8b0a:	9b01      	ldr	r3, [sp, #4]
    8b0c:	214c      	movs	r1, #76	; 0x4c
    8b0e:	fb01 f303 	mul.w	r3, r1, r3
    8b12:	4413      	add	r3, r2
    8b14:	3308      	adds	r3, #8
    8b16:	681b      	ldr	r3, [r3, #0]
    8b18:	2b00      	cmp	r3, #0
    8b1a:	d04d      	beq.n	8bb8 <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8b1c:	2300      	movs	r3, #0
    8b1e:	f88d 300f 	strb.w	r3, [sp, #15]
    8b22:	e02d      	b.n	8b80 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8b24:	4a27      	ldr	r2, [pc, #156]	; (8bc4 <Adc_Ip_IRQHandler+0xe0>)
    8b26:	9b01      	ldr	r3, [sp, #4]
    8b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b2c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8b34:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    8b36:	9802      	ldr	r0, [sp, #8]
    8b38:	f7ff fa20 	bl	7f7c <Adc_HwAcc_GetAIEN>
    8b3c:	4603      	mov	r3, r0
    8b3e:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    8b42:	9802      	ldr	r0, [sp, #8]
    8b44:	f7ff fa28 	bl	7f98 <Adc_HwAcc_GetCOCO>
    8b48:	4603      	mov	r3, r0
    8b4a:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    8b4e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8b52:	2b00      	cmp	r3, #0
    8b54:	d00f      	beq.n	8b76 <Adc_Ip_IRQHandler+0x92>
    8b56:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8b5a:	2b00      	cmp	r3, #0
    8b5c:	d00b      	beq.n	8b76 <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    8b5e:	4a18      	ldr	r2, [pc, #96]	; (8bc0 <Adc_Ip_IRQHandler+0xdc>)
    8b60:	9b01      	ldr	r3, [sp, #4]
    8b62:	214c      	movs	r1, #76	; 0x4c
    8b64:	fb01 f303 	mul.w	r3, r1, r3
    8b68:	4413      	add	r3, r2
    8b6a:	3308      	adds	r3, #8
    8b6c:	681b      	ldr	r3, [r3, #0]
    8b6e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8b72:	4610      	mov	r0, r2
    8b74:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8b76:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8b7a:	3301      	adds	r3, #1
    8b7c:	f88d 300f 	strb.w	r3, [sp, #15]
    8b80:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8b84:	2b0f      	cmp	r3, #15
    8b86:	d9cd      	bls.n	8b24 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    8b88:	e016      	b.n	8bb8 <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8b8a:	2300      	movs	r3, #0
    8b8c:	f88d 300f 	strb.w	r3, [sp, #15]
    8b90:	e00e      	b.n	8bb0 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8b92:	4a0c      	ldr	r2, [pc, #48]	; (8bc4 <Adc_Ip_IRQHandler+0xe0>)
    8b94:	9b01      	ldr	r3, [sp, #4]
    8b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b9a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8b9e:	4611      	mov	r1, r2
    8ba0:	4618      	mov	r0, r3
    8ba2:	f7ff fa07 	bl	7fb4 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8ba6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8baa:	3301      	adds	r3, #1
    8bac:	f88d 300f 	strb.w	r3, [sp, #15]
    8bb0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8bb4:	2b0f      	cmp	r3, #15
    8bb6:	d9ec      	bls.n	8b92 <Adc_Ip_IRQHandler+0xae>
}
    8bb8:	bf00      	nop
    8bba:	b005      	add	sp, #20
    8bbc:	f85d fb04 	ldr.w	pc, [sp], #4
    8bc0:	1fff8d10 	.word	0x1fff8d10
    8bc4:	00010848 	.word	0x00010848

00008bc8 <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    8bc8:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    8bca:	2000      	movs	r0, #0
    8bcc:	f7ff ff8a 	bl	8ae4 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8bd0:	f3bf 8f4f 	dsb	sy
}
    8bd4:	bf00      	nop
    8bd6:	bd08      	pop	{r3, pc}

00008bd8 <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    8bd8:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    8bda:	2001      	movs	r0, #1
    8bdc:	f7ff ff82 	bl	8ae4 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8be0:	f3bf 8f4f 	dsb	sy
}
    8be4:	bf00      	nop
    8be6:	bd08      	pop	{r3, pc}

00008be8 <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    8be8:	b510      	push	{r4, lr}
    8bea:	b084      	sub	sp, #16
    8bec:	4603      	mov	r3, r0
    8bee:	460a      	mov	r2, r1
    8bf0:	f88d 3007 	strb.w	r3, [sp, #7]
    8bf4:	4613      	mov	r3, r2
    8bf6:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    8bfa:	2300      	movs	r3, #0
    8bfc:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    8c00:	2300      	movs	r3, #0
    8c02:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    8c06:	f002 f821 	bl	ac4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    8c0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c0e:	4a24      	ldr	r2, [pc, #144]	; (8ca0 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8c10:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8c14:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    8c18:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8c1c:	2b01      	cmp	r3, #1
    8c1e:	d806      	bhi.n	8c2e <Adc_Ipw_RemoveFromQueue+0x46>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    8c20:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c24:	4a1e      	ldr	r2, [pc, #120]	; (8ca0 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8c26:	2100      	movs	r1, #0
    8c28:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    8c2c:	e032      	b.n	8c94 <Adc_Ipw_RemoveFromQueue+0xac>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    8c2e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8c32:	3301      	adds	r3, #1
    8c34:	f8ad 300e 	strh.w	r3, [sp, #14]
    8c38:	e01b      	b.n	8c72 <Adc_Ipw_RemoveFromQueue+0x8a>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    8c3a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8c3e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8c42:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8c46:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8c4a:	3a01      	subs	r2, #1
    8c4c:	4c14      	ldr	r4, [pc, #80]	; (8ca0 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8c4e:	0080      	lsls	r0, r0, #2
    8c50:	4403      	add	r3, r0
    8c52:	005b      	lsls	r3, r3, #1
    8c54:	4423      	add	r3, r4
    8c56:	885b      	ldrh	r3, [r3, #2]
    8c58:	b29c      	uxth	r4, r3
    8c5a:	4811      	ldr	r0, [pc, #68]	; (8ca0 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8c5c:	008b      	lsls	r3, r1, #2
    8c5e:	4413      	add	r3, r2
    8c60:	005b      	lsls	r3, r3, #1
    8c62:	4403      	add	r3, r0
    8c64:	4622      	mov	r2, r4
    8c66:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    8c68:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8c6c:	3301      	adds	r3, #1
    8c6e:	f8ad 300e 	strh.w	r3, [sp, #14]
    8c72:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8c76:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8c7a:	429a      	cmp	r2, r3
    8c7c:	d3dd      	bcc.n	8c3a <Adc_Ipw_RemoveFromQueue+0x52>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    8c7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c82:	4a07      	ldr	r2, [pc, #28]	; (8ca0 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8c84:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    8c88:	b292      	uxth	r2, r2
    8c8a:	3a01      	subs	r2, #1
    8c8c:	b291      	uxth	r1, r2
    8c8e:	4a04      	ldr	r2, [pc, #16]	; (8ca0 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8c90:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    8c94:	f002 f806 	bl	aca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    8c98:	bf00      	nop
    8c9a:	b004      	add	sp, #16
    8c9c:	bd10      	pop	{r4, pc}
    8c9e:	bf00      	nop
    8ca0:	1fff8d00 	.word	0x1fff8d00

00008ca4 <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    8ca4:	b500      	push	{lr}
    8ca6:	b087      	sub	sp, #28
    8ca8:	9003      	str	r0, [sp, #12]
    8caa:	9102      	str	r1, [sp, #8]
    8cac:	9201      	str	r2, [sp, #4]
    8cae:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    8cb2:	2300      	movs	r3, #0
    8cb4:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    8cb8:	9b03      	ldr	r3, [sp, #12]
    8cba:	789b      	ldrb	r3, [r3, #2]
    8cbc:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    8cc0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8cc4:	4a29      	ldr	r2, [pc, #164]	; (8d6c <Adc_Ipw_ReadGroupConvData+0xc8>)
    8cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cca:	681a      	ldr	r2, [r3, #0]
    8ccc:	f89d 3015 	ldrb.w	r3, [sp, #21]
    8cd0:	4413      	add	r3, r2
    8cd2:	7c1b      	ldrb	r3, [r3, #16]
    8cd4:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    8cd8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8cdc:	4a23      	ldr	r2, [pc, #140]	; (8d6c <Adc_Ipw_ReadGroupConvData+0xc8>)
    8cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ce2:	681b      	ldr	r3, [r3, #0]
    8ce4:	f89d 2015 	ldrb.w	r2, [sp, #21]
    8ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8cec:	695b      	ldr	r3, [r3, #20]
    8cee:	4618      	mov	r0, r3
    8cf0:	f000 fbce 	bl	9490 <Adc_Ipw_CalculateNumsBitShift>
    8cf4:	4603      	mov	r3, r0
    8cf6:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    8cfa:	9b03      	ldr	r3, [sp, #12]
    8cfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8d00:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    8d04:	2300      	movs	r3, #0
    8d06:	f88d 3017 	strb.w	r3, [sp, #23]
    8d0a:	e022      	b.n	8d52 <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    8d0c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8d10:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8d14:	4611      	mov	r1, r2
    8d16:	4618      	mov	r0, r3
    8d18:	f7ff fcf4 	bl	8704 <Adc_Ip_GetConvData>
    8d1c:	4603      	mov	r3, r0
    8d1e:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    8d22:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    8d26:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8d2a:	fa02 f303 	lsl.w	r3, r2, r3
    8d2e:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    8d32:	9b01      	ldr	r3, [sp, #4]
    8d34:	2201      	movs	r2, #1
    8d36:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    8d38:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8d3c:	005b      	lsls	r3, r3, #1
    8d3e:	9a02      	ldr	r2, [sp, #8]
    8d40:	4413      	add	r3, r2
    8d42:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    8d46:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    8d48:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8d4c:	3301      	adds	r3, #1
    8d4e:	f88d 3017 	strb.w	r3, [sp, #23]
    8d52:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8d56:	f89d 3012 	ldrb.w	r3, [sp, #18]
    8d5a:	429a      	cmp	r2, r3
    8d5c:	d3d6      	bcc.n	8d0c <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    8d5e:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    8d62:	4618      	mov	r0, r3
    8d64:	b007      	add	sp, #28
    8d66:	f85d fb04 	ldr.w	pc, [sp], #4
    8d6a:	bf00      	nop
    8d6c:	1fff8ce8 	.word	0x1fff8ce8

00008d70 <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    8d70:	b500      	push	{lr}
    8d72:	b087      	sub	sp, #28
    8d74:	9003      	str	r0, [sp, #12]
    8d76:	9102      	str	r1, [sp, #8]
    8d78:	9201      	str	r2, [sp, #4]
    8d7a:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    8d7e:	2301      	movs	r3, #1
    8d80:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    8d84:	2300      	movs	r3, #0
    8d86:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    8d8a:	9b03      	ldr	r3, [sp, #12]
    8d8c:	789b      	ldrb	r3, [r3, #2]
    8d8e:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    8d92:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8d96:	4a19      	ldr	r2, [pc, #100]	; (8dfc <Adc_Ipw_ReadGroupNoInt+0x8c>)
    8d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d9c:	681a      	ldr	r2, [r3, #0]
    8d9e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    8da2:	4413      	add	r3, r2
    8da4:	7c1b      	ldrb	r3, [r3, #16]
    8da6:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    8daa:	9b03      	ldr	r3, [sp, #12]
    8dac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8db0:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    8db4:	f89d 2013 	ldrb.w	r2, [sp, #19]
    8db8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8dbc:	2100      	movs	r1, #0
    8dbe:	4618      	mov	r0, r3
    8dc0:	f000 fe2a 	bl	9a18 <Adc_Ipw_CheckValidConversion>
    8dc4:	4603      	mov	r3, r0
    8dc6:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    8dca:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8dce:	2b00      	cmp	r3, #0
    8dd0:	d00a      	beq.n	8de8 <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    8dd2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8dd6:	9a01      	ldr	r2, [sp, #4]
    8dd8:	9902      	ldr	r1, [sp, #8]
    8dda:	9803      	ldr	r0, [sp, #12]
    8ddc:	f7ff ff62 	bl	8ca4 <Adc_Ipw_ReadGroupConvData>
    8de0:	4603      	mov	r3, r0
    8de2:	f88d 3017 	strb.w	r3, [sp, #23]
    8de6:	e002      	b.n	8dee <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    8de8:	2301      	movs	r3, #1
    8dea:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    8dee:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    8df2:	4618      	mov	r0, r3
    8df4:	b007      	add	sp, #28
    8df6:	f85d fb04 	ldr.w	pc, [sp], #4
    8dfa:	bf00      	nop
    8dfc:	1fff8ce8 	.word	0x1fff8ce8

00008e00 <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    8e00:	b088      	sub	sp, #32
    8e02:	4603      	mov	r3, r0
    8e04:	9100      	str	r1, [sp, #0]
    8e06:	f8ad 3006 	strh.w	r3, [sp, #6]
    8e0a:	4613      	mov	r3, r2
    8e0c:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8e10:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8e14:	4a3a      	ldr	r2, [pc, #232]	; (8f00 <Adc_Ipw_WriteDataBuffer+0x100>)
    8e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e1a:	68da      	ldr	r2, [r3, #12]
    8e1c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8e20:	005b      	lsls	r3, r3, #1
    8e22:	4413      	add	r3, r2
    8e24:	881b      	ldrh	r3, [r3, #0]
    8e26:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    8e2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8e2e:	4a34      	ldr	r2, [pc, #208]	; (8f00 <Adc_Ipw_WriteDataBuffer+0x100>)
    8e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e34:	685a      	ldr	r2, [r3, #4]
    8e36:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    8e3a:	2134      	movs	r1, #52	; 0x34
    8e3c:	fb01 f303 	mul.w	r3, r1, r3
    8e40:	4413      	add	r3, r2
    8e42:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    8e44:	9b04      	ldr	r3, [sp, #16]
    8e46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8e4a:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    8e4e:	2300      	movs	r3, #0
    8e50:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    8e52:	2300      	movs	r3, #0
    8e54:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    8e58:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8e5c:	4929      	ldr	r1, [pc, #164]	; (8f04 <Adc_Ipw_WriteDataBuffer+0x104>)
    8e5e:	4613      	mov	r3, r2
    8e60:	009b      	lsls	r3, r3, #2
    8e62:	4413      	add	r3, r2
    8e64:	009b      	lsls	r3, r3, #2
    8e66:	440b      	add	r3, r1
    8e68:	3308      	adds	r3, #8
    8e6a:	881b      	ldrh	r3, [r3, #0]
    8e6c:	b29b      	uxth	r3, r3
    8e6e:	3b01      	subs	r3, #1
    8e70:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    8e74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8e78:	4922      	ldr	r1, [pc, #136]	; (8f04 <Adc_Ipw_WriteDataBuffer+0x104>)
    8e7a:	4613      	mov	r3, r2
    8e7c:	009b      	lsls	r3, r3, #2
    8e7e:	4413      	add	r3, r2
    8e80:	009b      	lsls	r3, r3, #2
    8e82:	440b      	add	r3, r1
    8e84:	3308      	adds	r3, #8
    8e86:	881b      	ldrh	r3, [r3, #0]
    8e88:	b29b      	uxth	r3, r3
    8e8a:	2b00      	cmp	r3, #0
    8e8c:	d104      	bne.n	8e98 <Adc_Ipw_WriteDataBuffer+0x98>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    8e8e:	9b04      	ldr	r3, [sp, #16]
    8e90:	8b9b      	ldrh	r3, [r3, #28]
    8e92:	3b01      	subs	r3, #1
    8e94:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    8e98:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8e9c:	4919      	ldr	r1, [pc, #100]	; (8f04 <Adc_Ipw_WriteDataBuffer+0x104>)
    8e9e:	4613      	mov	r3, r2
    8ea0:	009b      	lsls	r3, r3, #2
    8ea2:	4413      	add	r3, r2
    8ea4:	009b      	lsls	r3, r3, #2
    8ea6:	440b      	add	r3, r1
    8ea8:	330c      	adds	r3, #12
    8eaa:	681a      	ldr	r2, [r3, #0]
    8eac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    8eb0:	005b      	lsls	r3, r3, #1
    8eb2:	4413      	add	r3, r2
    8eb4:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    8eb6:	9b04      	ldr	r3, [sp, #16]
    8eb8:	8b9b      	ldrh	r3, [r3, #28]
    8eba:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    8ebe:	2300      	movs	r3, #0
    8ec0:	f88d 301f 	strb.w	r3, [sp, #31]
    8ec4:	e012      	b.n	8eec <Adc_Ipw_WriteDataBuffer+0xec>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    8ec6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8eca:	005b      	lsls	r3, r3, #1
    8ecc:	9a00      	ldr	r2, [sp, #0]
    8ece:	4413      	add	r3, r2
    8ed0:	9a06      	ldr	r2, [sp, #24]
    8ed2:	8812      	ldrh	r2, [r2, #0]
    8ed4:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    8ed6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8eda:	005b      	lsls	r3, r3, #1
    8edc:	9a06      	ldr	r2, [sp, #24]
    8ede:	4413      	add	r3, r2
    8ee0:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    8ee2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8ee6:	3301      	adds	r3, #1
    8ee8:	f88d 301f 	strb.w	r3, [sp, #31]
    8eec:	f89d 201f 	ldrb.w	r2, [sp, #31]
    8ef0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8ef4:	429a      	cmp	r2, r3
    8ef6:	d3e6      	bcc.n	8ec6 <Adc_Ipw_WriteDataBuffer+0xc6>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    8ef8:	bf00      	nop
    8efa:	bf00      	nop
    8efc:	b008      	add	sp, #32
    8efe:	4770      	bx	lr
    8f00:	1fff8ce8 	.word	0x1fff8ce8
    8f04:	1fff8cec 	.word	0x1fff8cec

00008f08 <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    8f08:	b500      	push	{lr}
    8f0a:	b089      	sub	sp, #36	; 0x24
    8f0c:	9200      	str	r2, [sp, #0]
    8f0e:	461a      	mov	r2, r3
    8f10:	4603      	mov	r3, r0
    8f12:	f88d 3007 	strb.w	r3, [sp, #7]
    8f16:	460b      	mov	r3, r1
    8f18:	f8ad 3004 	strh.w	r3, [sp, #4]
    8f1c:	4613      	mov	r3, r2
    8f1e:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    8f22:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f26:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    8f2a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f2e:	f003 0307 	and.w	r3, r3, #7
    8f32:	b2db      	uxtb	r3, r3
    8f34:	2b00      	cmp	r3, #0
    8f36:	d006      	beq.n	8f46 <Adc_Ipw_ConfigurePdbChannels+0x3e>
    8f38:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f3c:	08db      	lsrs	r3, r3, #3
    8f3e:	b2db      	uxtb	r3, r3
    8f40:	3301      	adds	r3, #1
    8f42:	b2db      	uxtb	r3, r3
    8f44:	e003      	b.n	8f4e <Adc_Ipw_ConfigurePdbChannels+0x46>
    8f46:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f4a:	08db      	lsrs	r3, r3, #3
    8f4c:	b2db      	uxtb	r3, r3
    8f4e:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    8f52:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8f56:	4987      	ldr	r1, [pc, #540]	; (9174 <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    8f58:	4613      	mov	r3, r2
    8f5a:	009b      	lsls	r3, r3, #2
    8f5c:	4413      	add	r3, r2
    8f5e:	009b      	lsls	r3, r3, #2
    8f60:	440b      	add	r3, r1
    8f62:	3310      	adds	r3, #16
    8f64:	781b      	ldrb	r3, [r3, #0]
    8f66:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    8f6a:	4b83      	ldr	r3, [pc, #524]	; (9178 <Adc_Ipw_ConfigurePdbChannels+0x270>)
    8f6c:	681b      	ldr	r3, [r3, #0]
    8f6e:	681a      	ldr	r2, [r3, #0]
    8f70:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f74:	4413      	add	r3, r2
    8f76:	7c1b      	ldrb	r3, [r3, #16]
    8f78:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    8f7c:	9b00      	ldr	r3, [sp, #0]
    8f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8f80:	691b      	ldr	r3, [r3, #16]
    8f82:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    8f84:	2300      	movs	r3, #0
    8f86:	f88d 301f 	strb.w	r3, [sp, #31]
    8f8a:	e0e6      	b.n	915a <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    8f8c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    8f90:	08db      	lsrs	r3, r3, #3
    8f92:	b2db      	uxtb	r3, r3
    8f94:	2b00      	cmp	r3, #0
    8f96:	d102      	bne.n	8f9e <Adc_Ipw_ConfigurePdbChannels+0x96>
    8f98:	f89d 301d 	ldrb.w	r3, [sp, #29]
    8f9c:	e000      	b.n	8fa0 <Adc_Ipw_ConfigurePdbChannels+0x98>
    8f9e:	2308      	movs	r3, #8
    8fa0:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    8fa4:	9b00      	ldr	r3, [sp, #0]
    8fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8fa8:	7bdb      	ldrb	r3, [r3, #15]
    8faa:	2b00      	cmp	r3, #0
    8fac:	d05e      	beq.n	906c <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    8fae:	9b00      	ldr	r3, [sp, #0]
    8fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8fb2:	7b9b      	ldrb	r3, [r3, #14]
    8fb4:	f083 0301 	eor.w	r3, r3, #1
    8fb8:	b2db      	uxtb	r3, r3
    8fba:	2b00      	cmp	r3, #0
    8fbc:	d02a      	beq.n	9014 <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    8fbe:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8fc2:	f1c3 0308 	rsb	r3, r3, #8
    8fc6:	22ff      	movs	r2, #255	; 0xff
    8fc8:	fa22 f303 	lsr.w	r3, r2, r3
    8fcc:	b2db      	uxtb	r3, r3
    8fce:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    8fd2:	2300      	movs	r3, #0
    8fd4:	f88d 301e 	strb.w	r3, [sp, #30]
    8fd8:	e015      	b.n	9006 <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    8fda:	f89d 0018 	ldrb.w	r0, [sp, #24]
    8fde:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    8fe2:	f89d 301e 	ldrb.w	r3, [sp, #30]
    8fe6:	4413      	add	r3, r2
    8fe8:	005b      	lsls	r3, r3, #1
    8fea:	9a05      	ldr	r2, [sp, #20]
    8fec:	4413      	add	r3, r2
    8fee:	881b      	ldrh	r3, [r3, #0]
    8ff0:	f89d 201e 	ldrb.w	r2, [sp, #30]
    8ff4:	f89d 101f 	ldrb.w	r1, [sp, #31]
    8ff8:	f001 fd06 	bl	aa08 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    8ffc:	f89d 301e 	ldrb.w	r3, [sp, #30]
    9000:	3301      	adds	r3, #1
    9002:	f88d 301e 	strb.w	r3, [sp, #30]
    9006:	f89d 201e 	ldrb.w	r2, [sp, #30]
    900a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    900e:	429a      	cmp	r2, r3
    9010:	d3e3      	bcc.n	8fda <Adc_Ipw_ConfigurePdbChannels+0xd2>
    9012:	e051      	b.n	90b8 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    9014:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9018:	2b00      	cmp	r3, #0
    901a:	d110      	bne.n	903e <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    901c:	2301      	movs	r3, #1
    901e:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    9022:	9b05      	ldr	r3, [sp, #20]
    9024:	881b      	ldrh	r3, [r3, #0]
    9026:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    902a:	f89d 0018 	ldrb.w	r0, [sp, #24]
    902e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9032:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9036:	2200      	movs	r2, #0
    9038:	f001 fce6 	bl	aa08 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    903c:	e03c      	b.n	90b8 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    903e:	2301      	movs	r3, #1
    9040:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    9044:	9b00      	ldr	r3, [sp, #0]
    9046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9048:	899a      	ldrh	r2, [r3, #12]
    904a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    904e:	b29b      	uxth	r3, r3
    9050:	fb12 f303 	smulbb	r3, r2, r3
    9054:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    9058:	f89d 0018 	ldrb.w	r0, [sp, #24]
    905c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9060:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9064:	2200      	movs	r2, #0
    9066:	f001 fccf 	bl	aa08 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    906a:	e025      	b.n	90b8 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    906c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9070:	2b00      	cmp	r3, #0
    9072:	d10b      	bne.n	908c <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    9074:	2301      	movs	r3, #1
    9076:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    907a:	f89d 0018 	ldrb.w	r0, [sp, #24]
    907e:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9082:	2300      	movs	r3, #0
    9084:	2200      	movs	r2, #0
    9086:	f001 fcbf 	bl	aa08 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    908a:	e015      	b.n	90b8 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    908c:	2301      	movs	r3, #1
    908e:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    9092:	9b00      	ldr	r3, [sp, #0]
    9094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9096:	899a      	ldrh	r2, [r3, #12]
    9098:	f89d 301f 	ldrb.w	r3, [sp, #31]
    909c:	b29b      	uxth	r3, r3
    909e:	fb12 f303 	smulbb	r3, r2, r3
    90a2:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    90a6:	f89d 0018 	ldrb.w	r0, [sp, #24]
    90aa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    90ae:	f89d 101f 	ldrb.w	r1, [sp, #31]
    90b2:	2200      	movs	r2, #0
    90b4:	f001 fca8 	bl	aa08 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    90b8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    90bc:	4618      	mov	r0, r3
    90be:	f001 fb77 	bl	a7b0 <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    90c2:	f89d 201d 	ldrb.w	r2, [sp, #29]
    90c6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    90ca:	1ad3      	subs	r3, r2, r3
    90cc:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    90d0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    90d4:	b29a      	uxth	r2, r3
    90d6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    90da:	4413      	add	r3, r2
    90dc:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    90e0:	9b00      	ldr	r3, [sp, #0]
    90e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    90e4:	7b9b      	ldrb	r3, [r3, #14]
    90e6:	2b00      	cmp	r3, #0
    90e8:	d01d      	beq.n	9126 <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    90ea:	f89d 301f 	ldrb.w	r3, [sp, #31]
    90ee:	2b00      	cmp	r3, #0
    90f0:	d10c      	bne.n	910c <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    90f2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    90f6:	f1c3 0308 	rsb	r3, r3, #8
    90fa:	22ff      	movs	r2, #255	; 0xff
    90fc:	fa22 f303 	lsr.w	r3, r2, r3
    9100:	b2db      	uxtb	r3, r3
    9102:	3b01      	subs	r3, #1
    9104:	b2db      	uxtb	r3, r3
    9106:	f88d 300e 	strb.w	r3, [sp, #14]
    910a:	e00f      	b.n	912c <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    910c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9110:	f1c3 0308 	rsb	r3, r3, #8
    9114:	22ff      	movs	r2, #255	; 0xff
    9116:	fa22 f303 	lsr.w	r3, r2, r3
    911a:	b2db      	uxtb	r3, r3
    911c:	3b01      	subs	r3, #1
    911e:	b2db      	uxtb	r3, r3
    9120:	f88d 300e 	strb.w	r3, [sp, #14]
    9124:	e002      	b.n	912c <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    9126:	2300      	movs	r3, #0
    9128:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    912c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9130:	f1c3 0308 	rsb	r3, r3, #8
    9134:	22ff      	movs	r2, #255	; 0xff
    9136:	fa22 f303 	lsr.w	r3, r2, r3
    913a:	b2db      	uxtb	r3, r3
    913c:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    9140:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9144:	aa03      	add	r2, sp, #12
    9146:	f89d 101f 	ldrb.w	r1, [sp, #31]
    914a:	4618      	mov	r0, r3
    914c:	f001 fb6c 	bl	a828 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    9150:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9154:	3301      	adds	r3, #1
    9156:	f88d 301f 	strb.w	r3, [sp, #31]
    915a:	f89d 201f 	ldrb.w	r2, [sp, #31]
    915e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    9162:	429a      	cmp	r2, r3
    9164:	f4ff af12 	bcc.w	8f8c <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    9168:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    916c:	4618      	mov	r0, r3
    916e:	b009      	add	sp, #36	; 0x24
    9170:	f85d fb04 	ldr.w	pc, [sp], #4
    9174:	1fff8cec 	.word	0x1fff8cec
    9178:	1fff8ce8 	.word	0x1fff8ce8

0000917c <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    917c:	b500      	push	{lr}
    917e:	b089      	sub	sp, #36	; 0x24
    9180:	9202      	str	r2, [sp, #8]
    9182:	9301      	str	r3, [sp, #4]
    9184:	4603      	mov	r3, r0
    9186:	f88d 300f 	strb.w	r3, [sp, #15]
    918a:	460b      	mov	r3, r1
    918c:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    9190:	2300      	movs	r3, #0
    9192:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9196:	4b62      	ldr	r3, [pc, #392]	; (9320 <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    9198:	681b      	ldr	r3, [r3, #0]
    919a:	681a      	ldr	r2, [r3, #0]
    919c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    91a0:	4413      	add	r3, r2
    91a2:	7c1b      	ldrb	r3, [r3, #16]
    91a4:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    91a8:	9b02      	ldr	r3, [sp, #8]
    91aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    91ac:	691b      	ldr	r3, [r3, #16]
    91ae:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    91b0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    91b4:	f003 0307 	and.w	r3, r3, #7
    91b8:	b2db      	uxtb	r3, r3
    91ba:	2b00      	cmp	r3, #0
    91bc:	d006      	beq.n	91cc <Adc_Ipw_ConfigurePdbConversion+0x50>
    91be:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    91c2:	08db      	lsrs	r3, r3, #3
    91c4:	b2db      	uxtb	r3, r3
    91c6:	3301      	adds	r3, #1
    91c8:	b2db      	uxtb	r3, r3
    91ca:	e003      	b.n	91d4 <Adc_Ipw_ConfigurePdbConversion+0x58>
    91cc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    91d0:	08db      	lsrs	r3, r3, #3
    91d2:	b2db      	uxtb	r3, r3
    91d4:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    91d8:	f89d 301b 	ldrb.w	r3, [sp, #27]
    91dc:	4618      	mov	r0, r3
    91de:	f001 fa51 	bl	a684 <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    91e2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    91e6:	9901      	ldr	r1, [sp, #4]
    91e8:	4618      	mov	r0, r3
    91ea:	f001 fa79 	bl	a6e0 <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    91ee:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    91f2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    91f6:	f89d 000f 	ldrb.w	r0, [sp, #15]
    91fa:	9a02      	ldr	r2, [sp, #8]
    91fc:	f7ff fe84 	bl	8f08 <Adc_Ipw_ConfigurePdbChannels>
    9200:	4603      	mov	r3, r0
    9202:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    9206:	9b02      	ldr	r3, [sp, #8]
    9208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    920a:	7bdb      	ldrb	r3, [r3, #15]
    920c:	2b00      	cmp	r3, #0
    920e:	d02f      	beq.n	9270 <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9210:	9b02      	ldr	r3, [sp, #8]
    9212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9214:	7b9b      	ldrb	r3, [r3, #14]
    9216:	f083 0301 	eor.w	r3, r3, #1
    921a:	b2db      	uxtb	r3, r3
    921c:	2b00      	cmp	r3, #0
    921e:	d017      	beq.n	9250 <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    9220:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9224:	493f      	ldr	r1, [pc, #252]	; (9324 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    9226:	4613      	mov	r3, r2
    9228:	009b      	lsls	r3, r3, #2
    922a:	4413      	add	r3, r2
    922c:	009b      	lsls	r3, r3, #2
    922e:	440b      	add	r3, r1
    9230:	3310      	adds	r3, #16
    9232:	781b      	ldrb	r3, [r3, #0]
    9234:	461a      	mov	r2, r3
    9236:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    923a:	4413      	add	r3, r2
    923c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    9240:	3b01      	subs	r3, #1
    9242:	005b      	lsls	r3, r3, #1
    9244:	9a05      	ldr	r2, [sp, #20]
    9246:	4413      	add	r3, r2
    9248:	881b      	ldrh	r3, [r3, #0]
    924a:	f8ad 301c 	strh.w	r3, [sp, #28]
    924e:	e01a      	b.n	9286 <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    9250:	9b05      	ldr	r3, [sp, #20]
    9252:	881a      	ldrh	r2, [r3, #0]
    9254:	9b02      	ldr	r3, [sp, #8]
    9256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9258:	8999      	ldrh	r1, [r3, #12]
    925a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    925e:	3b01      	subs	r3, #1
    9260:	b29b      	uxth	r3, r3
    9262:	fb11 f303 	smulbb	r3, r1, r3
    9266:	b29b      	uxth	r3, r3
    9268:	4413      	add	r3, r2
    926a:	f8ad 301c 	strh.w	r3, [sp, #28]
    926e:	e00a      	b.n	9286 <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    9270:	9b02      	ldr	r3, [sp, #8]
    9272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9274:	899a      	ldrh	r2, [r3, #12]
    9276:	f89d 3013 	ldrb.w	r3, [sp, #19]
    927a:	3b01      	subs	r3, #1
    927c:	b29b      	uxth	r3, r3
    927e:	fb12 f303 	smulbb	r3, r2, r3
    9282:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    9286:	f89d 301b 	ldrb.w	r3, [sp, #27]
    928a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    928e:	4611      	mov	r1, r2
    9290:	4618      	mov	r0, r3
    9292:	f001 faa5 	bl	a7e0 <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    9296:	f89d 301b 	ldrb.w	r3, [sp, #27]
    929a:	4618      	mov	r0, r3
    929c:	f001 fa88 	bl	a7b0 <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    92a0:	2300      	movs	r3, #0
    92a2:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    92a6:	2300      	movs	r3, #0
    92a8:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    92ac:	2300      	movs	r3, #0
    92ae:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    92b2:	e00c      	b.n	92ce <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    92b4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    92b8:	aa04      	add	r2, sp, #16
    92ba:	f89d 101f 	ldrb.w	r1, [sp, #31]
    92be:	4618      	mov	r0, r3
    92c0:	f001 fab2 	bl	a828 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    92c4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    92c8:	3301      	adds	r3, #1
    92ca:	f88d 301f 	strb.w	r3, [sp, #31]
    92ce:	f89d 301f 	ldrb.w	r3, [sp, #31]
    92d2:	2b01      	cmp	r3, #1
    92d4:	d9ee      	bls.n	92b4 <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    92d6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    92da:	4912      	ldr	r1, [pc, #72]	; (9324 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    92dc:	4613      	mov	r3, r2
    92de:	009b      	lsls	r3, r3, #2
    92e0:	4413      	add	r3, r2
    92e2:	009b      	lsls	r3, r3, #2
    92e4:	440b      	add	r3, r1
    92e6:	3310      	adds	r3, #16
    92e8:	7819      	ldrb	r1, [r3, #0]
    92ea:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    92ee:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    92f2:	440b      	add	r3, r1
    92f4:	b2d8      	uxtb	r0, r3
    92f6:	490b      	ldr	r1, [pc, #44]	; (9324 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    92f8:	4613      	mov	r3, r2
    92fa:	009b      	lsls	r3, r3, #2
    92fc:	4413      	add	r3, r2
    92fe:	009b      	lsls	r3, r3, #2
    9300:	440b      	add	r3, r1
    9302:	3310      	adds	r3, #16
    9304:	4602      	mov	r2, r0
    9306:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    9308:	9b01      	ldr	r3, [sp, #4]
    930a:	2b0f      	cmp	r3, #15
    930c:	d104      	bne.n	9318 <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    930e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9312:	4618      	mov	r0, r3
    9314:	f001 fa24 	bl	a760 <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    9318:	bf00      	nop
    931a:	b009      	add	sp, #36	; 0x24
    931c:	f85d fb04 	ldr.w	pc, [sp], #4
    9320:	1fff8ce8 	.word	0x1fff8ce8
    9324:	1fff8cec 	.word	0x1fff8cec

00009328 <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    9328:	b500      	push	{lr}
    932a:	b087      	sub	sp, #28
    932c:	4603      	mov	r3, r0
    932e:	f88d 3007 	strb.w	r3, [sp, #7]
    9332:	460b      	mov	r3, r1
    9334:	f8ad 3004 	strh.w	r3, [sp, #4]
    9338:	4613      	mov	r3, r2
    933a:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    933e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9342:	4a36      	ldr	r2, [pc, #216]	; (941c <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    9344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9348:	68da      	ldr	r2, [r3, #12]
    934a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    934e:	005b      	lsls	r3, r3, #1
    9350:	4413      	add	r3, r2
    9352:	881b      	ldrh	r3, [r3, #0]
    9354:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9358:	f89d 3006 	ldrb.w	r3, [sp, #6]
    935c:	4a2f      	ldr	r2, [pc, #188]	; (941c <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    935e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9362:	681a      	ldr	r2, [r3, #0]
    9364:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9368:	4413      	add	r3, r2
    936a:	7c1b      	ldrb	r3, [r3, #16]
    936c:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    9370:	2300      	movs	r3, #0
    9372:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    9376:	f89d 3013 	ldrb.w	r3, [sp, #19]
    937a:	4618      	mov	r0, r3
    937c:	f001 fb6e 	bl	aa5c <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    9380:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9384:	4a25      	ldr	r2, [pc, #148]	; (941c <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    9386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    938a:	685a      	ldr	r2, [r3, #4]
    938c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9390:	2134      	movs	r1, #52	; 0x34
    9392:	fb01 f303 	mul.w	r3, r1, r3
    9396:	4413      	add	r3, r2
    9398:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    939c:	2b01      	cmp	r3, #1
    939e:	d114      	bne.n	93ca <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    93a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    93a4:	4a1d      	ldr	r2, [pc, #116]	; (941c <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    93a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93aa:	685a      	ldr	r2, [r3, #4]
    93ac:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    93b0:	2134      	movs	r1, #52	; 0x34
    93b2:	fb01 f303 	mul.w	r3, r1, r3
    93b6:	4413      	add	r3, r2
    93b8:	689b      	ldr	r3, [r3, #8]
    93ba:	2b01      	cmp	r3, #1
    93bc:	d105      	bne.n	93ca <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    93be:	f89d 3013 	ldrb.w	r3, [sp, #19]
    93c2:	2100      	movs	r1, #0
    93c4:	4618      	mov	r0, r3
    93c6:	f7ff f827 	bl	8418 <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    93ca:	2300      	movs	r3, #0
    93cc:	f88d 3016 	strb.w	r3, [sp, #22]
    93d0:	e013      	b.n	93fa <Adc_Ipw_StopConversionCheckTimeout+0xd2>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    93d2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    93d6:	f89d 1016 	ldrb.w	r1, [sp, #22]
    93da:	2201      	movs	r2, #1
    93dc:	4618      	mov	r0, r3
    93de:	f7ff f8cd 	bl	857c <Adc_Ip_SetDisabledChannel>
    93e2:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    93e4:	9b03      	ldr	r3, [sp, #12]
    93e6:	2b02      	cmp	r3, #2
    93e8:	d102      	bne.n	93f0 <Adc_Ipw_StopConversionCheckTimeout+0xc8>
        {
            Status = E_NOT_OK;
    93ea:	2301      	movs	r3, #1
    93ec:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    93f0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    93f4:	3301      	adds	r3, #1
    93f6:	f88d 3016 	strb.w	r3, [sp, #22]
    93fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93fe:	4a08      	ldr	r2, [pc, #32]	; (9420 <Adc_Ipw_StopConversionCheckTimeout+0xf8>)
    9400:	00db      	lsls	r3, r3, #3
    9402:	4413      	add	r3, r2
    9404:	799b      	ldrb	r3, [r3, #6]
    9406:	f89d 2016 	ldrb.w	r2, [sp, #22]
    940a:	429a      	cmp	r2, r3
    940c:	d3e1      	bcc.n	93d2 <Adc_Ipw_StopConversionCheckTimeout+0xaa>
        }
    }
    return Status;
    940e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9412:	4618      	mov	r0, r3
    9414:	b007      	add	sp, #28
    9416:	f85d fb04 	ldr.w	pc, [sp], #4
    941a:	bf00      	nop
    941c:	1fff8ce8 	.word	0x1fff8ce8
    9420:	1fff8d00 	.word	0x1fff8d00

00009424 <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    9424:	b500      	push	{lr}
    9426:	b085      	sub	sp, #20
    9428:	4603      	mov	r3, r0
    942a:	9100      	str	r1, [sp, #0]
    942c:	f88d 3007 	strb.w	r3, [sp, #7]
    9430:	4613      	mov	r3, r2
    9432:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9436:	f89d 3006 	ldrb.w	r3, [sp, #6]
    943a:	4a14      	ldr	r2, [pc, #80]	; (948c <Adc_Ipw_PrepareGroupStart+0x68>)
    943c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9440:	681a      	ldr	r2, [r3, #0]
    9442:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9446:	4413      	add	r3, r2
    9448:	7c1b      	ldrb	r3, [r3, #16]
    944a:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    944e:	9b00      	ldr	r3, [sp, #0]
    9450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9452:	781b      	ldrb	r3, [r3, #0]
    9454:	2b01      	cmp	r3, #1
    9456:	d108      	bne.n	946a <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    9458:	f89d 000f 	ldrb.w	r0, [sp, #15]
    945c:	9b00      	ldr	r3, [sp, #0]
    945e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9460:	685b      	ldr	r3, [r3, #4]
    9462:	461a      	mov	r2, r3
    9464:	2101      	movs	r1, #1
    9466:	f7fe ff51 	bl	830c <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    946a:	9b00      	ldr	r3, [sp, #0]
    946c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    946e:	7a1b      	ldrb	r3, [r3, #8]
    9470:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    9474:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9478:	f89d 200e 	ldrb.w	r2, [sp, #14]
    947c:	4611      	mov	r1, r2
    947e:	4618      	mov	r0, r3
    9480:	f7fe ff62 	bl	8348 <Adc_Ip_SetSampleTime>
}
    9484:	bf00      	nop
    9486:	b005      	add	sp, #20
    9488:	f85d fb04 	ldr.w	pc, [sp], #4
    948c:	1fff8ce8 	.word	0x1fff8ce8

00009490 <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    9490:	b084      	sub	sp, #16
    9492:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    9494:	2300      	movs	r3, #0
    9496:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    949a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    949e:	4618      	mov	r0, r3
    94a0:	b004      	add	sp, #16
    94a2:	4770      	bx	lr

000094a4 <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    94a4:	b500      	push	{lr}
    94a6:	b08f      	sub	sp, #60	; 0x3c
    94a8:	9202      	str	r2, [sp, #8]
    94aa:	461a      	mov	r2, r3
    94ac:	4603      	mov	r3, r0
    94ae:	f88d 300f 	strb.w	r3, [sp, #15]
    94b2:	460b      	mov	r3, r1
    94b4:	f8ad 300c 	strh.w	r3, [sp, #12]
    94b8:	4613      	mov	r3, r2
    94ba:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    94be:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    94c2:	4a6d      	ldr	r2, [pc, #436]	; (9678 <Adc_Ipw_ConfigureConversion+0x1d4>)
    94c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94c8:	68da      	ldr	r2, [r3, #12]
    94ca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    94ce:	005b      	lsls	r3, r3, #1
    94d0:	4413      	add	r3, r2
    94d2:	881b      	ldrh	r3, [r3, #0]
    94d4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    94d8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    94dc:	4a66      	ldr	r2, [pc, #408]	; (9678 <Adc_Ipw_ConfigureConversion+0x1d4>)
    94de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94e2:	685a      	ldr	r2, [r3, #4]
    94e4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    94e8:	2134      	movs	r1, #52	; 0x34
    94ea:	fb01 f303 	mul.w	r3, r1, r3
    94ee:	4413      	add	r3, r2
    94f0:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    94f2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    94f6:	4a60      	ldr	r2, [pc, #384]	; (9678 <Adc_Ipw_ConfigureConversion+0x1d4>)
    94f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94fc:	681a      	ldr	r2, [r3, #0]
    94fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9502:	4413      	add	r3, r2
    9504:	7c1b      	ldrb	r3, [r3, #16]
    9506:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    950a:	2300      	movs	r3, #0
    950c:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    950e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9512:	495a      	ldr	r1, [pc, #360]	; (967c <Adc_Ipw_ConfigureConversion+0x1d8>)
    9514:	4613      	mov	r3, r2
    9516:	009b      	lsls	r3, r3, #2
    9518:	4413      	add	r3, r2
    951a:	009b      	lsls	r3, r3, #2
    951c:	440b      	add	r3, r1
    951e:	3310      	adds	r3, #16
    9520:	781b      	ldrb	r3, [r3, #0]
    9522:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    9526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9528:	6a1b      	ldr	r3, [r3, #32]
    952a:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    952c:	2300      	movs	r3, #0
    952e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9532:	e030      	b.n	9596 <Adc_Ipw_ConfigureConversion+0xf2>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    9534:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9538:	4a4f      	ldr	r2, [pc, #316]	; (9678 <Adc_Ipw_ConfigureConversion+0x1d4>)
    953a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    953e:	681b      	ldr	r3, [r3, #0]
    9540:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    954a:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    954e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9552:	440b      	add	r3, r1
    9554:	005b      	lsls	r3, r3, #1
    9556:	990a      	ldr	r1, [sp, #40]	; 0x28
    9558:	440b      	add	r3, r1
    955a:	881b      	ldrh	r3, [r3, #0]
    955c:	4619      	mov	r1, r3
    955e:	460b      	mov	r3, r1
    9560:	005b      	lsls	r3, r3, #1
    9562:	440b      	add	r3, r1
    9564:	009b      	lsls	r3, r3, #2
    9566:	4413      	add	r3, r2
    9568:	685b      	ldr	r3, [r3, #4]
    956a:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    956c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9570:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    9574:	9b08      	ldr	r3, [sp, #32]
    9576:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    9578:	2300      	movs	r3, #0
    957a:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    957e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9582:	aa05      	add	r2, sp, #20
    9584:	4611      	mov	r1, r2
    9586:	4618      	mov	r0, r3
    9588:	f7fe ffc8 	bl	851c <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    958c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9590:	3301      	adds	r3, #1
    9592:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9596:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    959a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    959e:	3b01      	subs	r3, #1
    95a0:	429a      	cmp	r2, r3
    95a2:	d3c7      	bcc.n	9534 <Adc_Ipw_ConfigureConversion+0x90>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    95a4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    95a8:	4a33      	ldr	r2, [pc, #204]	; (9678 <Adc_Ipw_ConfigureConversion+0x1d4>)
    95aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95ae:	681b      	ldr	r3, [r3, #0]
    95b0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    95b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    95b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    95ba:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    95be:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    95c2:	440b      	add	r3, r1
    95c4:	005b      	lsls	r3, r3, #1
    95c6:	990a      	ldr	r1, [sp, #40]	; 0x28
    95c8:	440b      	add	r3, r1
    95ca:	881b      	ldrh	r3, [r3, #0]
    95cc:	4619      	mov	r1, r3
    95ce:	460b      	mov	r3, r1
    95d0:	005b      	lsls	r3, r3, #1
    95d2:	440b      	add	r3, r1
    95d4:	009b      	lsls	r3, r3, #2
    95d6:	4413      	add	r3, r2
    95d8:	685b      	ldr	r3, [r3, #4]
    95da:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    95dc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    95e0:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    95e4:	9b08      	ldr	r3, [sp, #32]
    95e6:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    95e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    95ea:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    95ee:	2b00      	cmp	r3, #0
    95f0:	d103      	bne.n	95fa <Adc_Ipw_ConfigureConversion+0x156>
        {
            ChannelConfig.InterruptEnable = TRUE;
    95f2:	2301      	movs	r3, #1
    95f4:	f88d 301c 	strb.w	r3, [sp, #28]
    95f8:	e002      	b.n	9600 <Adc_Ipw_ConfigureConversion+0x15c>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    95fa:	2300      	movs	r3, #0
    95fc:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    9600:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9604:	aa05      	add	r2, sp, #20
    9606:	4611      	mov	r1, r2
    9608:	4618      	mov	r0, r3
    960a:	f7fe ff87 	bl	851c <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    960e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9612:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9616:	e014      	b.n	9642 <Adc_Ipw_ConfigureConversion+0x19e>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    9618:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    961c:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    9620:	231f      	movs	r3, #31
    9622:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    9624:	2300      	movs	r3, #0
    9626:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    962a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    962e:	aa05      	add	r2, sp, #20
    9630:	4611      	mov	r1, r2
    9632:	4618      	mov	r0, r3
    9634:	f7fe ff72 	bl	851c <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    9638:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    963c:	3301      	adds	r3, #1
    963e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9642:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9646:	2b0f      	cmp	r3, #15
    9648:	d9e6      	bls.n	9618 <Adc_Ipw_ConfigureConversion+0x174>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    964a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    964e:	4a0c      	ldr	r2, [pc, #48]	; (9680 <Adc_Ipw_ConfigureConversion+0x1dc>)
    9650:	00db      	lsls	r3, r3, #3
    9652:	4413      	add	r3, r2
    9654:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9658:	719a      	strb	r2, [r3, #6]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    965a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    965e:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9662:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9666:	9300      	str	r3, [sp, #0]
    9668:	9b02      	ldr	r3, [sp, #8]
    966a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    966c:	f7ff fd86 	bl	917c <Adc_Ipw_ConfigurePdbConversion>
}
    9670:	bf00      	nop
    9672:	b00f      	add	sp, #60	; 0x3c
    9674:	f85d fb04 	ldr.w	pc, [sp], #4
    9678:	1fff8ce8 	.word	0x1fff8ce8
    967c:	1fff8cec 	.word	0x1fff8cec
    9680:	1fff8d00 	.word	0x1fff8d00

00009684 <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    9684:	b500      	push	{lr}
    9686:	b085      	sub	sp, #20
    9688:	9001      	str	r0, [sp, #4]
    968a:	460b      	mov	r3, r1
    968c:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9690:	2300      	movs	r3, #0
    9692:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    9696:	2300      	movs	r3, #0
    9698:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    969c:	2300      	movs	r3, #0
    969e:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    96a2:	2300      	movs	r3, #0
    96a4:	f88d 300f 	strb.w	r3, [sp, #15]
    96a8:	e027      	b.n	96fa <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    96aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    96ae:	9a01      	ldr	r2, [sp, #4]
    96b0:	4413      	add	r3, r2
    96b2:	7f9b      	ldrb	r3, [r3, #30]
    96b4:	2b01      	cmp	r3, #1
    96b6:	d11b      	bne.n	96f0 <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    96b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    96bc:	9a01      	ldr	r2, [sp, #4]
    96be:	4413      	add	r3, r2
    96c0:	7c1b      	ldrb	r3, [r3, #16]
    96c2:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    96c6:	f89d 000e 	ldrb.w	r0, [sp, #14]
    96ca:	f89d 200f 	ldrb.w	r2, [sp, #15]
    96ce:	9b01      	ldr	r3, [sp, #4]
    96d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    96d4:	4619      	mov	r1, r3
    96d6:	f7fe fcb8 	bl	804a <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    96da:	f89d 000e 	ldrb.w	r0, [sp, #14]
    96de:	f89d 200f 	ldrb.w	r2, [sp, #15]
    96e2:	9b01      	ldr	r3, [sp, #4]
    96e4:	3202      	adds	r2, #2
    96e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    96ea:	4619      	mov	r1, r3
    96ec:	f000 fe9d 	bl	a42a <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    96f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    96f4:	3301      	adds	r3, #1
    96f6:	f88d 300f 	strb.w	r3, [sp, #15]
    96fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    96fe:	2b00      	cmp	r3, #0
    9700:	d0d3      	beq.n	96aa <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    9702:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    9706:	4618      	mov	r0, r3
    9708:	b005      	add	sp, #20
    970a:	f85d fb04 	ldr.w	pc, [sp], #4

0000970e <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    970e:	b500      	push	{lr}
    9710:	b087      	sub	sp, #28
    9712:	4603      	mov	r3, r0
    9714:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    9718:	2300      	movs	r3, #0
    971a:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    971e:	2300      	movs	r3, #0
    9720:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    9724:	2300      	movs	r3, #0
    9726:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    972a:	2300      	movs	r3, #0
    972c:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    9730:	2300      	movs	r3, #0
    9732:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9736:	2300      	movs	r3, #0
    9738:	f88d 3017 	strb.w	r3, [sp, #23]
    973c:	e026      	b.n	978c <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    973e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9742:	4a2e      	ldr	r2, [pc, #184]	; (97fc <Adc_Ipw_DeInit+0xee>)
    9744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9748:	681a      	ldr	r2, [r3, #0]
    974a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    974e:	4413      	add	r3, r2
    9750:	7f9b      	ldrb	r3, [r3, #30]
    9752:	2b01      	cmp	r3, #1
    9754:	d115      	bne.n	9782 <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9756:	f89d 3007 	ldrb.w	r3, [sp, #7]
    975a:	4a28      	ldr	r2, [pc, #160]	; (97fc <Adc_Ipw_DeInit+0xee>)
    975c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9760:	681a      	ldr	r2, [r3, #0]
    9762:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9766:	4413      	add	r3, r2
    9768:	7c1b      	ldrb	r3, [r3, #16]
    976a:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    976e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9772:	4618      	mov	r0, r3
    9774:	f7fe fd40 	bl	81f8 <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    9778:	f89d 3013 	ldrb.w	r3, [sp, #19]
    977c:	4618      	mov	r0, r3
    977e:	f000 fefd 	bl	a57c <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9782:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9786:	3301      	adds	r3, #1
    9788:	f88d 3017 	strb.w	r3, [sp, #23]
    978c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9790:	2b00      	cmp	r3, #0
    9792:	d0d4      	beq.n	973e <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    9794:	2300      	movs	r3, #0
    9796:	f8ad 3014 	strh.w	r3, [sp, #20]
    979a:	e01e      	b.n	97da <Adc_Ipw_DeInit+0xcc>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    979c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    97a0:	4a16      	ldr	r2, [pc, #88]	; (97fc <Adc_Ipw_DeInit+0xee>)
    97a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97a6:	685a      	ldr	r2, [r3, #4]
    97a8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    97ac:	2134      	movs	r1, #52	; 0x34
    97ae:	fb01 f303 	mul.w	r3, r1, r3
    97b2:	4413      	add	r3, r2
    97b4:	881b      	ldrh	r3, [r3, #0]
    97b6:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    97ba:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    97be:	4910      	ldr	r1, [pc, #64]	; (9800 <Adc_Ipw_DeInit+0xf2>)
    97c0:	4613      	mov	r3, r2
    97c2:	009b      	lsls	r3, r3, #2
    97c4:	4413      	add	r3, r2
    97c6:	009b      	lsls	r3, r3, #2
    97c8:	440b      	add	r3, r1
    97ca:	330c      	adds	r3, #12
    97cc:	2200      	movs	r2, #0
    97ce:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    97d0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    97d4:	3301      	adds	r3, #1
    97d6:	f8ad 3014 	strh.w	r3, [sp, #20]
    97da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    97de:	4a07      	ldr	r2, [pc, #28]	; (97fc <Adc_Ipw_DeInit+0xee>)
    97e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97e4:	891b      	ldrh	r3, [r3, #8]
    97e6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    97ea:	429a      	cmp	r2, r3
    97ec:	d3d6      	bcc.n	979c <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    97ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    97f2:	4618      	mov	r0, r3
    97f4:	b007      	add	sp, #28
    97f6:	f85d fb04 	ldr.w	pc, [sp], #4
    97fa:	bf00      	nop
    97fc:	1fff8ce8 	.word	0x1fff8ce8
    9800:	1fff8cec 	.word	0x1fff8cec

00009804 <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    9804:	b500      	push	{lr}
    9806:	b089      	sub	sp, #36	; 0x24
    9808:	4603      	mov	r3, r0
    980a:	460a      	mov	r2, r1
    980c:	f88d 300f 	strb.w	r3, [sp, #15]
    9810:	4613      	mov	r3, r2
    9812:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    9816:	f89d 300f 	ldrb.w	r3, [sp, #15]
    981a:	4a4c      	ldr	r2, [pc, #304]	; (994c <Adc_Ipw_StartNormalConversion+0x148>)
    981c:	00db      	lsls	r3, r3, #3
    981e:	4413      	add	r3, r2
    9820:	885b      	ldrh	r3, [r3, #2]
    9822:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    9826:	f89d 300e 	ldrb.w	r3, [sp, #14]
    982a:	4a49      	ldr	r2, [pc, #292]	; (9950 <Adc_Ipw_StartNormalConversion+0x14c>)
    982c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9830:	68da      	ldr	r2, [r3, #12]
    9832:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    9836:	005b      	lsls	r3, r3, #1
    9838:	4413      	add	r3, r2
    983a:	881b      	ldrh	r3, [r3, #0]
    983c:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    9840:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9844:	4a42      	ldr	r2, [pc, #264]	; (9950 <Adc_Ipw_StartNormalConversion+0x14c>)
    9846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    984a:	685a      	ldr	r2, [r3, #4]
    984c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9850:	2134      	movs	r1, #52	; 0x34
    9852:	fb01 f303 	mul.w	r3, r1, r3
    9856:	4413      	add	r3, r2
    9858:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    985a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    985e:	4a3c      	ldr	r2, [pc, #240]	; (9950 <Adc_Ipw_StartNormalConversion+0x14c>)
    9860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9864:	681a      	ldr	r2, [r3, #0]
    9866:	f89d 300f 	ldrb.w	r3, [sp, #15]
    986a:	4413      	add	r3, r2
    986c:	7c1b      	ldrb	r3, [r3, #16]
    986e:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    9872:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9876:	4a35      	ldr	r2, [pc, #212]	; (994c <Adc_Ipw_StartNormalConversion+0x148>)
    9878:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    987c:	b29b      	uxth	r3, r3
    987e:	2b00      	cmp	r3, #0
    9880:	d05f      	beq.n	9942 <Adc_Ipw_StartNormalConversion+0x13e>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    9882:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9886:	f89d 300f 	ldrb.w	r3, [sp, #15]
    988a:	9905      	ldr	r1, [sp, #20]
    988c:	4618      	mov	r0, r3
    988e:	f7ff fdc9 	bl	9424 <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    9892:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    9896:	492f      	ldr	r1, [pc, #188]	; (9954 <Adc_Ipw_StartNormalConversion+0x150>)
    9898:	4613      	mov	r3, r2
    989a:	009b      	lsls	r3, r3, #2
    989c:	4413      	add	r3, r2
    989e:	009b      	lsls	r3, r3, #2
    98a0:	440b      	add	r3, r1
    98a2:	3310      	adds	r3, #16
    98a4:	2200      	movs	r2, #0
    98a6:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    98a8:	9b05      	ldr	r3, [sp, #20]
    98aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    98ae:	2b0f      	cmp	r3, #15
    98b0:	d806      	bhi.n	98c0 <Adc_Ipw_StartNormalConversion+0xbc>
    98b2:	9b05      	ldr	r3, [sp, #20]
    98b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    98b8:	f003 030f 	and.w	r3, r3, #15
    98bc:	b2db      	uxtb	r3, r3
    98be:	e000      	b.n	98c2 <Adc_Ipw_StartNormalConversion+0xbe>
    98c0:	2310      	movs	r3, #16
    98c2:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    98c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    98ca:	4a20      	ldr	r2, [pc, #128]	; (994c <Adc_Ipw_StartNormalConversion+0x148>)
    98cc:	00db      	lsls	r3, r3, #3
    98ce:	4413      	add	r3, r2
    98d0:	799b      	ldrb	r3, [r3, #6]
    98d2:	2b00      	cmp	r3, #0
    98d4:	d107      	bne.n	98e6 <Adc_Ipw_StartNormalConversion+0xe2>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    98d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    98da:	4a1c      	ldr	r2, [pc, #112]	; (994c <Adc_Ipw_StartNormalConversion+0x148>)
    98dc:	00db      	lsls	r3, r3, #3
    98de:	4413      	add	r3, r2
    98e0:	f89d 2012 	ldrb.w	r2, [sp, #18]
    98e4:	719a      	strb	r2, [r3, #6]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    98e6:	2300      	movs	r3, #0
    98e8:	f88d 301f 	strb.w	r3, [sp, #31]
    98ec:	e00c      	b.n	9908 <Adc_Ipw_StartNormalConversion+0x104>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    98ee:	f89d 3013 	ldrb.w	r3, [sp, #19]
    98f2:	f89d 201f 	ldrb.w	r2, [sp, #31]
    98f6:	4611      	mov	r1, r2
    98f8:	4618      	mov	r0, r3
    98fa:	f7fe ff03 	bl	8704 <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    98fe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9902:	3301      	adds	r3, #1
    9904:	f88d 301f 	strb.w	r3, [sp, #31]
    9908:	f89d 300f 	ldrb.w	r3, [sp, #15]
    990c:	4a0f      	ldr	r2, [pc, #60]	; (994c <Adc_Ipw_StartNormalConversion+0x148>)
    990e:	00db      	lsls	r3, r3, #3
    9910:	4413      	add	r3, r2
    9912:	799b      	ldrb	r3, [r3, #6]
    9914:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9918:	429a      	cmp	r2, r3
    991a:	d3e8      	bcc.n	98ee <Adc_Ipw_StartNormalConversion+0xea>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    991c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9920:	2101      	movs	r1, #1
    9922:	4618      	mov	r0, r3
    9924:	f7fe fd60 	bl	83e8 <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    9928:	f89d 2012 	ldrb.w	r2, [sp, #18]
    992c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    9930:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9934:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9938:	9300      	str	r3, [sp, #0]
    993a:	4613      	mov	r3, r2
    993c:	220f      	movs	r2, #15
    993e:	f7ff fdb1 	bl	94a4 <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    9942:	bf00      	nop
    9944:	b009      	add	sp, #36	; 0x24
    9946:	f85d fb04 	ldr.w	pc, [sp], #4
    994a:	bf00      	nop
    994c:	1fff8d00 	.word	0x1fff8d00
    9950:	1fff8ce8 	.word	0x1fff8ce8
    9954:	1fff8cec 	.word	0x1fff8cec

00009958 <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    9958:	b500      	push	{lr}
    995a:	b085      	sub	sp, #20
    995c:	4603      	mov	r3, r0
    995e:	f88d 3007 	strb.w	r3, [sp, #7]
    9962:	460b      	mov	r3, r1
    9964:	f8ad 3004 	strh.w	r3, [sp, #4]
    9968:	4613      	mov	r3, r2
    996a:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    996e:	2300      	movs	r3, #0
    9970:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9974:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9978:	4a24      	ldr	r2, [pc, #144]	; (9a0c <Adc_Ipw_StopCurrentConversion+0xb4>)
    997a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    997e:	681a      	ldr	r2, [r3, #0]
    9980:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9984:	4413      	add	r3, r2
    9986:	7c1b      	ldrb	r3, [r3, #16]
    9988:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    998c:	2300      	movs	r3, #0
    998e:	f88d 300f 	strb.w	r3, [sp, #15]
    9992:	e014      	b.n	99be <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    9994:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9998:	f89d 100f 	ldrb.w	r1, [sp, #15]
    999c:	2200      	movs	r2, #0
    999e:	4618      	mov	r0, r3
    99a0:	f7fe fdec 	bl	857c <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    99a4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    99a8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    99ac:	4611      	mov	r1, r2
    99ae:	4618      	mov	r0, r3
    99b0:	f7fe fea8 	bl	8704 <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    99b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    99b8:	3301      	adds	r3, #1
    99ba:	f88d 300f 	strb.w	r3, [sp, #15]
    99be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    99c2:	4a13      	ldr	r2, [pc, #76]	; (9a10 <Adc_Ipw_StopCurrentConversion+0xb8>)
    99c4:	00db      	lsls	r3, r3, #3
    99c6:	4413      	add	r3, r2
    99c8:	799b      	ldrb	r3, [r3, #6]
    99ca:	f89d 200f 	ldrb.w	r2, [sp, #15]
    99ce:	429a      	cmp	r2, r3
    99d0:	d3e0      	bcc.n	9994 <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    99d2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    99d6:	490f      	ldr	r1, [pc, #60]	; (9a14 <Adc_Ipw_StopCurrentConversion+0xbc>)
    99d8:	4613      	mov	r3, r2
    99da:	009b      	lsls	r3, r3, #2
    99dc:	4413      	add	r3, r2
    99de:	009b      	lsls	r3, r3, #2
    99e0:	440b      	add	r3, r1
    99e2:	3310      	adds	r3, #16
    99e4:	2200      	movs	r2, #0
    99e6:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    99e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
    99ec:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    99f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    99f4:	4618      	mov	r0, r3
    99f6:	f7ff fc97 	bl	9328 <Adc_Ipw_StopConversionCheckTimeout>
    99fa:	4603      	mov	r3, r0
    99fc:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    9a00:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    9a04:	4618      	mov	r0, r3
    9a06:	b005      	add	sp, #20
    9a08:	f85d fb04 	ldr.w	pc, [sp], #4
    9a0c:	1fff8ce8 	.word	0x1fff8ce8
    9a10:	1fff8d00 	.word	0x1fff8d00
    9a14:	1fff8cec 	.word	0x1fff8cec

00009a18 <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    9a18:	b500      	push	{lr}
    9a1a:	b085      	sub	sp, #20
    9a1c:	4603      	mov	r3, r0
    9a1e:	f88d 3007 	strb.w	r3, [sp, #7]
    9a22:	460b      	mov	r3, r1
    9a24:	f88d 3006 	strb.w	r3, [sp, #6]
    9a28:	4613      	mov	r3, r2
    9a2a:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    9a2e:	2301      	movs	r3, #1
    9a30:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    9a34:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9a38:	f88d 300f 	strb.w	r3, [sp, #15]
    9a3c:	e019      	b.n	9a72 <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    9a3e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9a42:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9a46:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9a4a:	1ad3      	subs	r3, r2, r3
    9a4c:	b2db      	uxtb	r3, r3
    9a4e:	4619      	mov	r1, r3
    9a50:	f7fe fe3e 	bl	86d0 <Adc_Ip_GetConvCompleteFlag>
    9a54:	4603      	mov	r3, r0
    9a56:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    9a5a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9a5e:	f083 0301 	eor.w	r3, r3, #1
    9a62:	b2db      	uxtb	r3, r3
    9a64:	2b00      	cmp	r3, #0
    9a66:	d10b      	bne.n	9a80 <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    9a68:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9a6c:	3301      	adds	r3, #1
    9a6e:	f88d 300f 	strb.w	r3, [sp, #15]
    9a72:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9a76:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9a7a:	429a      	cmp	r2, r3
    9a7c:	d3df      	bcc.n	9a3e <Adc_Ipw_CheckValidConversion+0x26>
    9a7e:	e000      	b.n	9a82 <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    9a80:	bf00      	nop
        }
    }

    return ValidConversion;
    9a82:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    9a86:	4618      	mov	r0, r3
    9a88:	b005      	add	sp, #20
    9a8a:	f85d fb04 	ldr.w	pc, [sp], #4

00009a8e <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    9a8e:	b500      	push	{lr}
    9a90:	b089      	sub	sp, #36	; 0x24
    9a92:	9102      	str	r1, [sp, #8]
    9a94:	9201      	str	r2, [sp, #4]
    9a96:	461a      	mov	r2, r3
    9a98:	4603      	mov	r3, r0
    9a9a:	f8ad 300e 	strh.w	r3, [sp, #14]
    9a9e:	4613      	mov	r3, r2
    9aa0:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    9aa4:	2300      	movs	r3, #0
    9aa6:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9aaa:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9aae:	4a33      	ldr	r2, [pc, #204]	; (9b7c <Adc_Ipw_ReadGroup+0xee>)
    9ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ab4:	68da      	ldr	r2, [r3, #12]
    9ab6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9aba:	005b      	lsls	r3, r3, #1
    9abc:	4413      	add	r3, r2
    9abe:	881b      	ldrh	r3, [r3, #0]
    9ac0:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9ac4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9ac8:	4a2c      	ldr	r2, [pc, #176]	; (9b7c <Adc_Ipw_ReadGroup+0xee>)
    9aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ace:	685a      	ldr	r2, [r3, #4]
    9ad0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    9ad4:	2134      	movs	r1, #52	; 0x34
    9ad6:	fb01 f303 	mul.w	r3, r1, r3
    9ada:	4413      	add	r3, r2
    9adc:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9ade:	9b06      	ldr	r3, [sp, #24]
    9ae0:	789b      	ldrb	r3, [r3, #2]
    9ae2:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    9ae6:	9b06      	ldr	r3, [sp, #24]
    9ae8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    9aec:	2b01      	cmp	r3, #1
    9aee:	d124      	bne.n	9b3a <Adc_Ipw_ReadGroup+0xac>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    9af0:	9b06      	ldr	r3, [sp, #24]
    9af2:	68db      	ldr	r3, [r3, #12]
    9af4:	2b00      	cmp	r3, #0
    9af6:	d111      	bne.n	9b1c <Adc_Ipw_ReadGroup+0x8e>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    9af8:	9b06      	ldr	r3, [sp, #24]
    9afa:	695b      	ldr	r3, [r3, #20]
    9afc:	2b00      	cmp	r3, #0
    9afe:	d10d      	bne.n	9b1c <Adc_Ipw_ReadGroup+0x8e>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    9b00:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9b04:	4a1e      	ldr	r2, [pc, #120]	; (9b80 <Adc_Ipw_ReadGroup+0xf2>)
    9b06:	00db      	lsls	r3, r3, #3
    9b08:	4413      	add	r3, r2
    9b0a:	885b      	ldrh	r3, [r3, #2]
    9b0c:	b29b      	uxth	r3, r3
    9b0e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9b12:	429a      	cmp	r2, r3
    9b14:	d002      	beq.n	9b1c <Adc_Ipw_ReadGroup+0x8e>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9b16:	2301      	movs	r3, #1
    9b18:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    9b1c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9b20:	2b00      	cmp	r3, #0
    9b22:	d124      	bne.n	9b6e <Adc_Ipw_ReadGroup+0xe0>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    9b24:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9b28:	9a01      	ldr	r2, [sp, #4]
    9b2a:	9902      	ldr	r1, [sp, #8]
    9b2c:	9806      	ldr	r0, [sp, #24]
    9b2e:	f7ff f91f 	bl	8d70 <Adc_Ipw_ReadGroupNoInt>
    9b32:	4603      	mov	r3, r0
    9b34:	f88d 301f 	strb.w	r3, [sp, #31]
    9b38:	e019      	b.n	9b6e <Adc_Ipw_ReadGroup+0xe0>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    9b3a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9b3e:	4911      	ldr	r1, [pc, #68]	; (9b84 <Adc_Ipw_ReadGroup+0xf6>)
    9b40:	4613      	mov	r3, r2
    9b42:	009b      	lsls	r3, r3, #2
    9b44:	4413      	add	r3, r2
    9b46:	009b      	lsls	r3, r3, #2
    9b48:	440b      	add	r3, r1
    9b4a:	681b      	ldr	r3, [r3, #0]
    9b4c:	2b01      	cmp	r3, #1
    9b4e:	d102      	bne.n	9b56 <Adc_Ipw_ReadGroup+0xc8>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9b50:	2301      	movs	r3, #1
    9b52:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    9b56:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9b5a:	2b00      	cmp	r3, #0
    9b5c:	d107      	bne.n	9b6e <Adc_Ipw_ReadGroup+0xe0>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    9b5e:	f89d 200d 	ldrb.w	r2, [sp, #13]
    9b62:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9b66:	9902      	ldr	r1, [sp, #8]
    9b68:	4618      	mov	r0, r3
    9b6a:	f7ff f949 	bl	8e00 <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    9b6e:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    9b72:	4618      	mov	r0, r3
    9b74:	b009      	add	sp, #36	; 0x24
    9b76:	f85d fb04 	ldr.w	pc, [sp], #4
    9b7a:	bf00      	nop
    9b7c:	1fff8ce8 	.word	0x1fff8ce8
    9b80:	1fff8d00 	.word	0x1fff8d00
    9b84:	1fff8cec 	.word	0x1fff8cec

00009b88 <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    9b88:	b500      	push	{lr}
    9b8a:	b085      	sub	sp, #20
    9b8c:	4603      	mov	r3, r0
    9b8e:	9100      	str	r1, [sp, #0]
    9b90:	f88d 3007 	strb.w	r3, [sp, #7]
    9b94:	4613      	mov	r3, r2
    9b96:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9b9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9b9e:	4a0e      	ldr	r2, [pc, #56]	; (9bd8 <Adc_Ipw_Calibrate+0x50>)
    9ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ba4:	681a      	ldr	r2, [r3, #0]
    9ba6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9baa:	4413      	add	r3, r2
    9bac:	7c1b      	ldrb	r3, [r3, #16]
    9bae:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    9bb2:	9b00      	ldr	r3, [sp, #0]
    9bb4:	2200      	movs	r2, #0
    9bb6:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    9bb8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9bbc:	4618      	mov	r0, r3
    9bbe:	f7fe fdb9 	bl	8734 <Adc_Ip_DoCalibration>
    9bc2:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    9bc4:	9b02      	ldr	r3, [sp, #8]
    9bc6:	2b00      	cmp	r3, #0
    9bc8:	d002      	beq.n	9bd0 <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    9bca:	9b00      	ldr	r3, [sp, #0]
    9bcc:	2201      	movs	r2, #1
    9bce:	701a      	strb	r2, [r3, #0]
    }
}
    9bd0:	bf00      	nop
    9bd2:	b005      	add	sp, #20
    9bd4:	f85d fb04 	ldr.w	pc, [sp], #4
    9bd8:	1fff8ce8 	.word	0x1fff8ce8

00009bdc <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    9bdc:	2300      	movs	r3, #0
}
    9bde:	4618      	mov	r0, r3
    9be0:	4770      	bx	lr
    9be2:	bf00      	nop

00009be4 <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    9be4:	b500      	push	{lr}
    9be6:	b083      	sub	sp, #12
    9be8:	4603      	mov	r3, r0
    9bea:	460a      	mov	r2, r1
    9bec:	f88d 3007 	strb.w	r3, [sp, #7]
    9bf0:	4613      	mov	r3, r2
    9bf2:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    9bf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9bfa:	2100      	movs	r1, #0
    9bfc:	4618      	mov	r0, r3
    9bfe:	f7fe fff3 	bl	8be8 <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    9c02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c06:	4a09      	ldr	r2, [pc, #36]	; (9c2c <Adc_Ipw_UpdateQueue+0x48>)
    9c08:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9c0c:	b29b      	uxth	r3, r3
    9c0e:	2b00      	cmp	r3, #0
    9c10:	d007      	beq.n	9c22 <Adc_Ipw_UpdateQueue+0x3e>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    9c12:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9c16:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c1a:	4611      	mov	r1, r2
    9c1c:	4618      	mov	r0, r3
    9c1e:	f7ff fdf1 	bl	9804 <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    9c22:	bf00      	nop
    9c24:	b003      	add	sp, #12
    9c26:	f85d fb04 	ldr.w	pc, [sp], #4
    9c2a:	bf00      	nop
    9c2c:	1fff8d00 	.word	0x1fff8d00

00009c30 <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    9c30:	b510      	push	{r4, lr}
    9c32:	b08a      	sub	sp, #40	; 0x28
    9c34:	4604      	mov	r4, r0
    9c36:	4608      	mov	r0, r1
    9c38:	4611      	mov	r1, r2
    9c3a:	461a      	mov	r2, r3
    9c3c:	4623      	mov	r3, r4
    9c3e:	f88d 300f 	strb.w	r3, [sp, #15]
    9c42:	4603      	mov	r3, r0
    9c44:	f8ad 300c 	strh.w	r3, [sp, #12]
    9c48:	460b      	mov	r3, r1
    9c4a:	f8ad 300a 	strh.w	r3, [sp, #10]
    9c4e:	4613      	mov	r3, r2
    9c50:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9c54:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9c58:	4a68      	ldr	r2, [pc, #416]	; (9dfc <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c5e:	68da      	ldr	r2, [r3, #12]
    9c60:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9c64:	005b      	lsls	r3, r3, #1
    9c66:	4413      	add	r3, r2
    9c68:	881b      	ldrh	r3, [r3, #0]
    9c6a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    9c6e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9c72:	4963      	ldr	r1, [pc, #396]	; (9e00 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9c74:	4613      	mov	r3, r2
    9c76:	009b      	lsls	r3, r3, #2
    9c78:	4413      	add	r3, r2
    9c7a:	009b      	lsls	r3, r3, #2
    9c7c:	440b      	add	r3, r1
    9c7e:	3310      	adds	r3, #16
    9c80:	781b      	ldrb	r3, [r3, #0]
    9c82:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    9c86:	2300      	movs	r3, #0
    9c88:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9c8a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9c8e:	4a5b      	ldr	r2, [pc, #364]	; (9dfc <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c94:	681a      	ldr	r2, [r3, #0]
    9c96:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9c9a:	4413      	add	r3, r2
    9c9c:	7c1b      	ldrb	r3, [r3, #16]
    9c9e:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9ca2:	2300      	movs	r3, #0
    9ca4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    9ca8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9cac:	4a53      	ldr	r2, [pc, #332]	; (9dfc <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cb2:	681b      	ldr	r3, [r3, #0]
    9cb4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9cbc:	695b      	ldr	r3, [r3, #20]
    9cbe:	4618      	mov	r0, r3
    9cc0:	f7ff fbe6 	bl	9490 <Adc_Ipw_CalculateNumsBitShift>
    9cc4:	4603      	mov	r3, r0
    9cc6:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    9cca:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9cce:	4a4b      	ldr	r2, [pc, #300]	; (9dfc <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cd4:	685a      	ldr	r2, [r3, #4]
    9cd6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9cda:	2134      	movs	r1, #52	; 0x34
    9cdc:	fb01 f303 	mul.w	r3, r1, r3
    9ce0:	4413      	add	r3, r2
    9ce2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9ce6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9cea:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9cee:	4a43      	ldr	r2, [pc, #268]	; (9dfc <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cf4:	685a      	ldr	r2, [r3, #4]
    9cf6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9cfa:	2134      	movs	r1, #52	; 0x34
    9cfc:	fb01 f303 	mul.w	r3, r1, r3
    9d00:	4413      	add	r3, r2
    9d02:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    9d04:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    9d08:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9d0c:	429a      	cmp	r2, r3
    9d0e:	d870      	bhi.n	9df2 <Adc_Ipw_CheckConversionChannels+0x1c2>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    9d10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9d14:	f003 030f 	and.w	r3, r3, #15
    9d18:	b2db      	uxtb	r3, r3
    9d1a:	2b00      	cmp	r3, #0
    9d1c:	d104      	bne.n	9d28 <Adc_Ipw_CheckConversionChannels+0xf8>
    9d1e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9d22:	3b10      	subs	r3, #16
    9d24:	b2db      	uxtb	r3, r3
    9d26:	e004      	b.n	9d32 <Adc_Ipw_CheckConversionChannels+0x102>
    9d28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9d2c:	f023 030f 	bic.w	r3, r3, #15
    9d30:	b2db      	uxtb	r3, r3
    9d32:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    9d36:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9d3a:	4931      	ldr	r1, [pc, #196]	; (9e00 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9d3c:	4613      	mov	r3, r2
    9d3e:	009b      	lsls	r3, r3, #2
    9d40:	4413      	add	r3, r2
    9d42:	009b      	lsls	r3, r3, #2
    9d44:	440b      	add	r3, r1
    9d46:	330c      	adds	r3, #12
    9d48:	6819      	ldr	r1, [r3, #0]
    9d4a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9d4e:	482c      	ldr	r0, [pc, #176]	; (9e00 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9d50:	4613      	mov	r3, r2
    9d52:	009b      	lsls	r3, r3, #2
    9d54:	4413      	add	r3, r2
    9d56:	009b      	lsls	r3, r3, #2
    9d58:	4403      	add	r3, r0
    9d5a:	3308      	adds	r3, #8
    9d5c:	881b      	ldrh	r3, [r3, #0]
    9d5e:	b29b      	uxth	r3, r3
    9d60:	005b      	lsls	r3, r3, #1
    9d62:	440b      	add	r3, r1
    9d64:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    9d66:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    9d6a:	f89d 1013 	ldrb.w	r1, [sp, #19]
    9d6e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9d72:	4618      	mov	r0, r3
    9d74:	f7ff fe50 	bl	9a18 <Adc_Ipw_CheckValidConversion>
    9d78:	4603      	mov	r3, r0
    9d7a:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    9d7e:	f89d 3012 	ldrb.w	r3, [sp, #18]
    9d82:	2b00      	cmp	r3, #0
    9d84:	d032      	beq.n	9dec <Adc_Ipw_CheckConversionChannels+0x1bc>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    9d86:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9d8a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    9d8e:	e026      	b.n	9dde <Adc_Ipw_CheckConversionChannels+0x1ae>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    9d90:	f89d 001b 	ldrb.w	r0, [sp, #27]
    9d94:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    9d98:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9d9c:	1ad3      	subs	r3, r2, r3
    9d9e:	b2db      	uxtb	r3, r3
    9da0:	4619      	mov	r1, r3
    9da2:	f7fe fcaf 	bl	8704 <Adc_Ip_GetConvData>
    9da6:	4603      	mov	r3, r0
    9da8:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    9dac:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9db0:	f89d 301a 	ldrb.w	r3, [sp, #26]
    9db4:	fa02 f303 	lsl.w	r3, r2, r3
    9db8:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    9dbc:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    9dc0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    9dc4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9dc8:	9300      	str	r3, [sp, #0]
    9dca:	460b      	mov	r3, r1
    9dcc:	9907      	ldr	r1, [sp, #28]
    9dce:	9805      	ldr	r0, [sp, #20]
    9dd0:	f000 fa02 	bl	a1d8 <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    9dd4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9dd8:	3301      	adds	r3, #1
    9dda:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    9dde:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    9de2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9de6:	429a      	cmp	r2, r3
    9de8:	d3d2      	bcc.n	9d90 <Adc_Ipw_CheckConversionChannels+0x160>
    9dea:	e002      	b.n	9df2 <Adc_Ipw_CheckConversionChannels+0x1c2>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    9dec:	2301      	movs	r3, #1
    9dee:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    9df2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    9df6:	4618      	mov	r0, r3
    9df8:	b00a      	add	sp, #40	; 0x28
    9dfa:	bd10      	pop	{r4, pc}
    9dfc:	1fff8ce8 	.word	0x1fff8ce8
    9e00:	1fff8cec 	.word	0x1fff8cec

00009e04 <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    9e04:	b500      	push	{lr}
    9e06:	b087      	sub	sp, #28
    9e08:	4603      	mov	r3, r0
    9e0a:	f88d 300f 	strb.w	r3, [sp, #15]
    9e0e:	460b      	mov	r3, r1
    9e10:	f8ad 300c 	strh.w	r3, [sp, #12]
    9e14:	4613      	mov	r3, r2
    9e16:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9e1a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9e1e:	4a33      	ldr	r2, [pc, #204]	; (9eec <Adc_Ipw_RestartConversion+0xe8>)
    9e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e24:	68da      	ldr	r2, [r3, #12]
    9e26:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9e2a:	005b      	lsls	r3, r3, #1
    9e2c:	4413      	add	r3, r2
    9e2e:	881b      	ldrh	r3, [r3, #0]
    9e30:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9e34:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9e38:	4a2c      	ldr	r2, [pc, #176]	; (9eec <Adc_Ipw_RestartConversion+0xe8>)
    9e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e3e:	681a      	ldr	r2, [r3, #0]
    9e40:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9e44:	4413      	add	r3, r2
    9e46:	7c1b      	ldrb	r3, [r3, #16]
    9e48:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    9e4c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9e50:	4a26      	ldr	r2, [pc, #152]	; (9eec <Adc_Ipw_RestartConversion+0xe8>)
    9e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e56:	685a      	ldr	r2, [r3, #4]
    9e58:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9e5c:	2134      	movs	r1, #52	; 0x34
    9e5e:	fb01 f303 	mul.w	r3, r1, r3
    9e62:	4413      	add	r3, r2
    9e64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9e68:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    9e6c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9e70:	2b0f      	cmp	r3, #15
    9e72:	d805      	bhi.n	9e80 <Adc_Ipw_RestartConversion+0x7c>
    9e74:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9e78:	f003 030f 	and.w	r3, r3, #15
    9e7c:	b2db      	uxtb	r3, r3
    9e7e:	e000      	b.n	9e82 <Adc_Ipw_RestartConversion+0x7e>
    9e80:	2310      	movs	r3, #16
    9e82:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    9e86:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9e8a:	2b10      	cmp	r3, #16
    9e8c:	d811      	bhi.n	9eb2 <Adc_Ipw_RestartConversion+0xae>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    9e8e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9e92:	4917      	ldr	r1, [pc, #92]	; (9ef0 <Adc_Ipw_RestartConversion+0xec>)
    9e94:	4613      	mov	r3, r2
    9e96:	009b      	lsls	r3, r3, #2
    9e98:	4413      	add	r3, r2
    9e9a:	009b      	lsls	r3, r3, #2
    9e9c:	440b      	add	r3, r1
    9e9e:	3310      	adds	r3, #16
    9ea0:	f89d 2014 	ldrb.w	r2, [sp, #20]
    9ea4:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    9ea6:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9eaa:	4618      	mov	r0, r3
    9eac:	f000 fc58 	bl	a760 <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    9eb0:	e017      	b.n	9ee2 <Adc_Ipw_RestartConversion+0xde>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    9eb2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9eb6:	490e      	ldr	r1, [pc, #56]	; (9ef0 <Adc_Ipw_RestartConversion+0xec>)
    9eb8:	4613      	mov	r3, r2
    9eba:	009b      	lsls	r3, r3, #2
    9ebc:	4413      	add	r3, r2
    9ebe:	009b      	lsls	r3, r3, #2
    9ec0:	440b      	add	r3, r1
    9ec2:	3310      	adds	r3, #16
    9ec4:	2200      	movs	r2, #0
    9ec6:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    9ec8:	f89d 2013 	ldrb.w	r2, [sp, #19]
    9ecc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9ed0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9ed4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9ed8:	9300      	str	r3, [sp, #0]
    9eda:	4613      	mov	r3, r2
    9edc:	220f      	movs	r2, #15
    9ede:	f7ff fae1 	bl	94a4 <Adc_Ipw_ConfigureConversion>
}
    9ee2:	bf00      	nop
    9ee4:	b007      	add	sp, #28
    9ee6:	f85d fb04 	ldr.w	pc, [sp], #4
    9eea:	bf00      	nop
    9eec:	1fff8ce8 	.word	0x1fff8ce8
    9ef0:	1fff8cec 	.word	0x1fff8cec

00009ef4 <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    9ef4:	b084      	sub	sp, #16
    9ef6:	4603      	mov	r3, r0
    9ef8:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    9efc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9f00:	4907      	ldr	r1, [pc, #28]	; (9f20 <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    9f02:	4613      	mov	r3, r2
    9f04:	009b      	lsls	r3, r3, #2
    9f06:	4413      	add	r3, r2
    9f08:	009b      	lsls	r3, r3, #2
    9f0a:	440b      	add	r3, r1
    9f0c:	3308      	adds	r3, #8
    9f0e:	881b      	ldrh	r3, [r3, #0]
    9f10:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    9f14:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    9f18:	4618      	mov	r0, r3
    9f1a:	b004      	add	sp, #16
    9f1c:	4770      	bx	lr
    9f1e:	bf00      	nop
    9f20:	1fff8cec 	.word	0x1fff8cec

00009f24 <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    9f24:	b510      	push	{r4, lr}
    9f26:	b084      	sub	sp, #16
    9f28:	4604      	mov	r4, r0
    9f2a:	4608      	mov	r0, r1
    9f2c:	4611      	mov	r1, r2
    9f2e:	461a      	mov	r2, r3
    9f30:	4623      	mov	r3, r4
    9f32:	f88d 3007 	strb.w	r3, [sp, #7]
    9f36:	4603      	mov	r3, r0
    9f38:	f8ad 3004 	strh.w	r3, [sp, #4]
    9f3c:	460b      	mov	r3, r1
    9f3e:	f8ad 3002 	strh.w	r3, [sp, #2]
    9f42:	4613      	mov	r3, r2
    9f44:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9f48:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f4c:	4a4f      	ldr	r2, [pc, #316]	; (a08c <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    9f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f52:	68da      	ldr	r2, [r3, #12]
    9f54:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9f58:	005b      	lsls	r3, r3, #1
    9f5a:	4413      	add	r3, r2
    9f5c:	881b      	ldrh	r3, [r3, #0]
    9f5e:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    9f62:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9f66:	494a      	ldr	r1, [pc, #296]	; (a090 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    9f68:	4613      	mov	r3, r2
    9f6a:	009b      	lsls	r3, r3, #2
    9f6c:	4413      	add	r3, r2
    9f6e:	009b      	lsls	r3, r3, #2
    9f70:	440b      	add	r3, r1
    9f72:	3304      	adds	r3, #4
    9f74:	2201      	movs	r2, #1
    9f76:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    9f78:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9f7c:	4944      	ldr	r1, [pc, #272]	; (a090 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    9f7e:	4613      	mov	r3, r2
    9f80:	009b      	lsls	r3, r3, #2
    9f82:	4413      	add	r3, r2
    9f84:	009b      	lsls	r3, r3, #2
    9f86:	440b      	add	r3, r1
    9f88:	681b      	ldr	r3, [r3, #0]
    9f8a:	2b01      	cmp	r3, #1
    9f8c:	d109      	bne.n	9fa2 <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    9f8e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9f92:	493f      	ldr	r1, [pc, #252]	; (a090 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    9f94:	4613      	mov	r3, r2
    9f96:	009b      	lsls	r3, r3, #2
    9f98:	4413      	add	r3, r2
    9f9a:	009b      	lsls	r3, r3, #2
    9f9c:	440b      	add	r3, r1
    9f9e:	2202      	movs	r2, #2
    9fa0:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    9fa2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9fa6:	4618      	mov	r0, r3
    9fa8:	f7ff ffa4 	bl	9ef4 <Adc_Ipw_GetCurrentSampleCount>
    9fac:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    9fae:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    9fb2:	9a02      	ldr	r2, [sp, #8]
    9fb4:	429a      	cmp	r2, r3
    9fb6:	d35d      	bcc.n	a074 <Adc_Ipw_UpdateSoftwareGroupState+0x150>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    9fb8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9fbc:	4934      	ldr	r1, [pc, #208]	; (a090 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    9fbe:	4613      	mov	r3, r2
    9fc0:	009b      	lsls	r3, r3, #2
    9fc2:	4413      	add	r3, r2
    9fc4:	009b      	lsls	r3, r3, #2
    9fc6:	440b      	add	r3, r1
    9fc8:	2203      	movs	r2, #3
    9fca:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    9fcc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9fd0:	4a2e      	ldr	r2, [pc, #184]	; (a08c <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    9fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fd6:	685a      	ldr	r2, [r3, #4]
    9fd8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9fdc:	2134      	movs	r1, #52	; 0x34
    9fde:	fb01 f303 	mul.w	r3, r1, r3
    9fe2:	4413      	add	r3, r2
    9fe4:	699b      	ldr	r3, [r3, #24]
    9fe6:	2b00      	cmp	r3, #0
    9fe8:	d117      	bne.n	a01a <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    9fea:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9fee:	4a27      	ldr	r2, [pc, #156]	; (a08c <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    9ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ff4:	685a      	ldr	r2, [r3, #4]
    9ff6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9ffa:	2134      	movs	r1, #52	; 0x34
    9ffc:	fb01 f303 	mul.w	r3, r1, r3
    a000:	4413      	add	r3, r2
    a002:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    a004:	2b01      	cmp	r3, #1
    a006:	d108      	bne.n	a01a <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    a008:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a00c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a010:	4611      	mov	r1, r2
    a012:	4618      	mov	r0, r3
    a014:	f7ff fde6 	bl	9be4 <Adc_Ipw_UpdateQueue>

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    a018:	e035      	b.n	a086 <Adc_Ipw_UpdateSoftwareGroupState+0x162>
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    a01a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a01e:	4a1b      	ldr	r2, [pc, #108]	; (a08c <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    a020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a024:	685a      	ldr	r2, [r3, #4]
    a026:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a02a:	2134      	movs	r1, #52	; 0x34
    a02c:	fb01 f303 	mul.w	r3, r1, r3
    a030:	4413      	add	r3, r2
    a032:	689b      	ldr	r3, [r3, #8]
    a034:	2b01      	cmp	r3, #1
    a036:	d114      	bne.n	a062 <Adc_Ipw_UpdateSoftwareGroupState+0x13e>
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    a038:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a03c:	4914      	ldr	r1, [pc, #80]	; (a090 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a03e:	4613      	mov	r3, r2
    a040:	009b      	lsls	r3, r3, #2
    a042:	4413      	add	r3, r2
    a044:	009b      	lsls	r3, r3, #2
    a046:	440b      	add	r3, r1
    a048:	3308      	adds	r3, #8
    a04a:	2200      	movs	r2, #0
    a04c:	801a      	strh	r2, [r3, #0]
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    a04e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a052:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a056:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a05a:	4618      	mov	r0, r3
    a05c:	f7ff fed2 	bl	9e04 <Adc_Ipw_RestartConversion>
}
    a060:	e011      	b.n	a086 <Adc_Ipw_UpdateSoftwareGroupState+0x162>
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    a062:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a066:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a06a:	4611      	mov	r1, r2
    a06c:	4618      	mov	r0, r3
    a06e:	f7ff fdb9 	bl	9be4 <Adc_Ipw_UpdateQueue>
}
    a072:	e008      	b.n	a086 <Adc_Ipw_UpdateSoftwareGroupState+0x162>
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    a074:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a078:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a07c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a080:	4618      	mov	r0, r3
    a082:	f7ff febf 	bl	9e04 <Adc_Ipw_RestartConversion>
}
    a086:	bf00      	nop
    a088:	b004      	add	sp, #16
    a08a:	bd10      	pop	{r4, pc}
    a08c:	1fff8ce8 	.word	0x1fff8ce8
    a090:	1fff8cec 	.word	0x1fff8cec

0000a094 <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    a094:	b510      	push	{r4, lr}
    a096:	b088      	sub	sp, #32
    a098:	4604      	mov	r4, r0
    a09a:	4608      	mov	r0, r1
    a09c:	4611      	mov	r1, r2
    a09e:	461a      	mov	r2, r3
    a0a0:	4623      	mov	r3, r4
    a0a2:	f88d 300f 	strb.w	r3, [sp, #15]
    a0a6:	4603      	mov	r3, r0
    a0a8:	f8ad 300c 	strh.w	r3, [sp, #12]
    a0ac:	460b      	mov	r3, r1
    a0ae:	f88d 300e 	strb.w	r3, [sp, #14]
    a0b2:	4613      	mov	r3, r2
    a0b4:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a0b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a0bc:	4a44      	ldr	r2, [pc, #272]	; (a1d0 <Adc_Ipw_EndConversion+0x13c>)
    a0be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0c2:	68da      	ldr	r2, [r3, #12]
    a0c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a0c8:	005b      	lsls	r3, r3, #1
    a0ca:	4413      	add	r3, r2
    a0cc:	881b      	ldrh	r3, [r3, #0]
    a0ce:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a0d2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a0d6:	4a3e      	ldr	r2, [pc, #248]	; (a1d0 <Adc_Ipw_EndConversion+0x13c>)
    a0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0dc:	685a      	ldr	r2, [r3, #4]
    a0de:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    a0e2:	2134      	movs	r1, #52	; 0x34
    a0e4:	fb01 f303 	mul.w	r3, r1, r3
    a0e8:	4413      	add	r3, r2
    a0ea:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    a0ec:	9b06      	ldr	r3, [sp, #24]
    a0ee:	8b9a      	ldrh	r2, [r3, #28]
    a0f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a0f4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a0f8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a0fc:	f7ff fd98 	bl	9c30 <Adc_Ipw_CheckConversionChannels>
    a100:	4603      	mov	r3, r0
    a102:	2b00      	cmp	r3, #0
    a104:	d160      	bne.n	a1c8 <Adc_Ipw_EndConversion+0x134>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    a106:	9b06      	ldr	r3, [sp, #24]
    a108:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a10c:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    a110:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a114:	492f      	ldr	r1, [pc, #188]	; (a1d4 <Adc_Ipw_EndConversion+0x140>)
    a116:	4613      	mov	r3, r2
    a118:	009b      	lsls	r3, r3, #2
    a11a:	4413      	add	r3, r2
    a11c:	009b      	lsls	r3, r3, #2
    a11e:	440b      	add	r3, r1
    a120:	3310      	adds	r3, #16
    a122:	781b      	ldrb	r3, [r3, #0]
    a124:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a128:	429a      	cmp	r2, r3
    a12a:	d929      	bls.n	a180 <Adc_Ipw_EndConversion+0xec>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    a12c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a130:	4928      	ldr	r1, [pc, #160]	; (a1d4 <Adc_Ipw_EndConversion+0x140>)
    a132:	4613      	mov	r3, r2
    a134:	009b      	lsls	r3, r3, #2
    a136:	4413      	add	r3, r2
    a138:	009b      	lsls	r3, r3, #2
    a13a:	440b      	add	r3, r1
    a13c:	3310      	adds	r3, #16
    a13e:	781b      	ldrb	r3, [r3, #0]
    a140:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a144:	1ad3      	subs	r3, r2, r3
    a146:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    a14a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a14e:	2b0f      	cmp	r3, #15
    a150:	d805      	bhi.n	a15e <Adc_Ipw_EndConversion+0xca>
    a152:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a156:	f003 030f 	and.w	r3, r3, #15
    a15a:	b2db      	uxtb	r3, r3
    a15c:	e000      	b.n	a160 <Adc_Ipw_EndConversion+0xcc>
    a15e:	2310      	movs	r3, #16
    a160:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    a164:	f89d 2015 	ldrb.w	r2, [sp, #21]
    a168:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a16c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a170:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a174:	9300      	str	r3, [sp, #0]
    a176:	4613      	mov	r3, r2
    a178:	220f      	movs	r2, #15
    a17a:	f7ff f993 	bl	94a4 <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    a17e:	e023      	b.n	a1c8 <Adc_Ipw_EndConversion+0x134>
                Adc_axGroupStatus[Group].ResultIndex++;
    a180:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a184:	4913      	ldr	r1, [pc, #76]	; (a1d4 <Adc_Ipw_EndConversion+0x140>)
    a186:	4613      	mov	r3, r2
    a188:	009b      	lsls	r3, r3, #2
    a18a:	4413      	add	r3, r2
    a18c:	009b      	lsls	r3, r3, #2
    a18e:	440b      	add	r3, r1
    a190:	3308      	adds	r3, #8
    a192:	881b      	ldrh	r3, [r3, #0]
    a194:	b29b      	uxth	r3, r3
    a196:	3301      	adds	r3, #1
    a198:	b298      	uxth	r0, r3
    a19a:	490e      	ldr	r1, [pc, #56]	; (a1d4 <Adc_Ipw_EndConversion+0x140>)
    a19c:	4613      	mov	r3, r2
    a19e:	009b      	lsls	r3, r3, #2
    a1a0:	4413      	add	r3, r2
    a1a2:	009b      	lsls	r3, r3, #2
    a1a4:	440b      	add	r3, r1
    a1a6:	3308      	adds	r3, #8
    a1a8:	4602      	mov	r2, r0
    a1aa:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    a1ac:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1b0:	2b00      	cmp	r3, #0
    a1b2:	d009      	beq.n	a1c8 <Adc_Ipw_EndConversion+0x134>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    a1b4:	9b06      	ldr	r3, [sp, #24]
    a1b6:	8b9a      	ldrh	r2, [r3, #28]
    a1b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a1bc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a1c0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a1c4:	f7ff feae 	bl	9f24 <Adc_Ipw_UpdateSoftwareGroupState>
}
    a1c8:	bf00      	nop
    a1ca:	b008      	add	sp, #32
    a1cc:	bd10      	pop	{r4, pc}
    a1ce:	bf00      	nop
    a1d0:	1fff8ce8 	.word	0x1fff8ce8
    a1d4:	1fff8cec 	.word	0x1fff8cec

0000a1d8 <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    a1d8:	b084      	sub	sp, #16
    a1da:	9003      	str	r0, [sp, #12]
    a1dc:	9102      	str	r1, [sp, #8]
    a1de:	4611      	mov	r1, r2
    a1e0:	461a      	mov	r2, r3
    a1e2:	460b      	mov	r3, r1
    a1e4:	f8ad 3006 	strh.w	r3, [sp, #6]
    a1e8:	4613      	mov	r3, r2
    a1ea:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    a1ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a1f2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a1f6:	fb02 f303 	mul.w	r3, r2, r3
    a1fa:	005b      	lsls	r3, r3, #1
    a1fc:	9a02      	ldr	r2, [sp, #8]
    a1fe:	4413      	add	r3, r2
    a200:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a204:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    a206:	bf00      	nop
    a208:	b004      	add	sp, #16
    a20a:	4770      	bx	lr

0000a20c <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    a20c:	b500      	push	{lr}
    a20e:	b085      	sub	sp, #20
    a210:	4603      	mov	r3, r0
    a212:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    a216:	f7ff fce1 	bl	9bdc <Adc_GetCoreID>
    a21a:	4603      	mov	r3, r0
    a21c:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    a220:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a224:	b2db      	uxtb	r3, r3
    a226:	461a      	mov	r2, r3
    a228:	4b14      	ldr	r3, [pc, #80]	; (a27c <Adc_Ipw_EndConversionNotification+0x70>)
    a22a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a22e:	681a      	ldr	r2, [r3, #0]
    a230:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a234:	4413      	add	r3, r2
    a236:	f893 3020 	ldrb.w	r3, [r3, #32]
    a23a:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    a23e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a242:	4a0f      	ldr	r2, [pc, #60]	; (a280 <Adc_Ipw_EndConversionNotification+0x74>)
    a244:	00db      	lsls	r3, r3, #3
    a246:	4413      	add	r3, r2
    a248:	885b      	ldrh	r3, [r3, #2]
    a24a:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    a24e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a252:	4a0b      	ldr	r2, [pc, #44]	; (a280 <Adc_Ipw_EndConversionNotification+0x74>)
    a254:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    a258:	b29b      	uxth	r3, r3
    a25a:	2b00      	cmp	r3, #0
    a25c:	d009      	beq.n	a272 <Adc_Ipw_EndConversionNotification+0x66>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    a25e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a262:	b2db      	uxtb	r3, r3
    a264:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a268:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a26c:	2201      	movs	r2, #1
    a26e:	f7ff ff11 	bl	a094 <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    a272:	bf00      	nop
    a274:	b005      	add	sp, #20
    a276:	f85d fb04 	ldr.w	pc, [sp], #4
    a27a:	bf00      	nop
    a27c:	1fff8ce8 	.word	0x1fff8ce8
    a280:	1fff8d00 	.word	0x1fff8d00

0000a284 <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    a284:	b500      	push	{lr}
    a286:	b085      	sub	sp, #20
    a288:	4603      	mov	r3, r0
    a28a:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    a28e:	2300      	movs	r3, #0
    a290:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    a294:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a298:	4618      	mov	r0, r3
    a29a:	f7ff ffb7 	bl	a20c <Adc_Ipw_EndConversionNotification>
}
    a29e:	bf00      	nop
    a2a0:	b005      	add	sp, #20
    a2a2:	f85d fb04 	ldr.w	pc, [sp], #4
    a2a6:	bf00      	nop

0000a2a8 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    a2a8:	b084      	sub	sp, #16
    a2aa:	9003      	str	r0, [sp, #12]
    a2ac:	9201      	str	r2, [sp, #4]
    a2ae:	461a      	mov	r2, r3
    a2b0:	460b      	mov	r3, r1
    a2b2:	f88d 300b 	strb.w	r3, [sp, #11]
    a2b6:	4613      	mov	r3, r2
    a2b8:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    a2bc:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a2c0:	2b00      	cmp	r3, #0
    a2c2:	d016      	beq.n	a2f2 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    a2c4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a2c8:	9903      	ldr	r1, [sp, #12]
    a2ca:	4613      	mov	r3, r2
    a2cc:	009b      	lsls	r3, r3, #2
    a2ce:	4413      	add	r3, r2
    a2d0:	00db      	lsls	r3, r3, #3
    a2d2:	440b      	add	r3, r1
    a2d4:	3310      	adds	r3, #16
    a2d6:	6819      	ldr	r1, [r3, #0]
    a2d8:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a2dc:	9b01      	ldr	r3, [sp, #4]
    a2de:	4319      	orrs	r1, r3
    a2e0:	9803      	ldr	r0, [sp, #12]
    a2e2:	4613      	mov	r3, r2
    a2e4:	009b      	lsls	r3, r3, #2
    a2e6:	4413      	add	r3, r2
    a2e8:	00db      	lsls	r3, r3, #3
    a2ea:	4403      	add	r3, r0
    a2ec:	3310      	adds	r3, #16
    a2ee:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    a2f0:	e016      	b.n	a320 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    a2f2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a2f6:	9903      	ldr	r1, [sp, #12]
    a2f8:	4613      	mov	r3, r2
    a2fa:	009b      	lsls	r3, r3, #2
    a2fc:	4413      	add	r3, r2
    a2fe:	00db      	lsls	r3, r3, #3
    a300:	440b      	add	r3, r1
    a302:	3310      	adds	r3, #16
    a304:	6819      	ldr	r1, [r3, #0]
    a306:	9b01      	ldr	r3, [sp, #4]
    a308:	43db      	mvns	r3, r3
    a30a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a30e:	4019      	ands	r1, r3
    a310:	9803      	ldr	r0, [sp, #12]
    a312:	4613      	mov	r3, r2
    a314:	009b      	lsls	r3, r3, #2
    a316:	4413      	add	r3, r2
    a318:	00db      	lsls	r3, r3, #3
    a31a:	4403      	add	r3, r0
    a31c:	3310      	adds	r3, #16
    a31e:	6019      	str	r1, [r3, #0]
}
    a320:	bf00      	nop
    a322:	b004      	add	sp, #16
    a324:	4770      	bx	lr

0000a326 <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    a326:	b082      	sub	sp, #8
    a328:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    a32a:	9b01      	ldr	r3, [sp, #4]
    a32c:	681b      	ldr	r3, [r3, #0]
    a32e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    a332:	9b01      	ldr	r3, [sp, #4]
    a334:	601a      	str	r2, [r3, #0]
}
    a336:	bf00      	nop
    a338:	b002      	add	sp, #8
    a33a:	4770      	bx	lr

0000a33c <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    a33c:	b082      	sub	sp, #8
    a33e:	9001      	str	r0, [sp, #4]
    a340:	460b      	mov	r3, r1
    a342:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    a346:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a34a:	2b00      	cmp	r3, #0
    a34c:	d006      	beq.n	a35c <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    a34e:	9b01      	ldr	r3, [sp, #4]
    a350:	681b      	ldr	r3, [r3, #0]
    a352:	f043 0202 	orr.w	r2, r3, #2
    a356:	9b01      	ldr	r3, [sp, #4]
    a358:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    a35a:	e005      	b.n	a368 <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    a35c:	9b01      	ldr	r3, [sp, #4]
    a35e:	681b      	ldr	r3, [r3, #0]
    a360:	f023 0202 	bic.w	r2, r3, #2
    a364:	9b01      	ldr	r3, [sp, #4]
    a366:	601a      	str	r2, [r3, #0]
}
    a368:	bf00      	nop
    a36a:	b002      	add	sp, #8
    a36c:	4770      	bx	lr

0000a36e <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    a36e:	b086      	sub	sp, #24
    a370:	9003      	str	r0, [sp, #12]
    a372:	460b      	mov	r3, r1
    a374:	9201      	str	r2, [sp, #4]
    a376:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    a37a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a37e:	9903      	ldr	r1, [sp, #12]
    a380:	4613      	mov	r3, r2
    a382:	009b      	lsls	r3, r3, #2
    a384:	4413      	add	r3, r2
    a386:	00db      	lsls	r3, r3, #3
    a388:	440b      	add	r3, r1
    a38a:	3310      	adds	r3, #16
    a38c:	681b      	ldr	r3, [r3, #0]
    a38e:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    a390:	9b05      	ldr	r3, [sp, #20]
    a392:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    a396:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    a398:	9b01      	ldr	r3, [sp, #4]
    a39a:	781b      	ldrb	r3, [r3, #0]
    a39c:	461a      	mov	r2, r3
    a39e:	9b05      	ldr	r3, [sp, #20]
    a3a0:	4313      	orrs	r3, r2
    a3a2:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    a3a4:	9b01      	ldr	r3, [sp, #4]
    a3a6:	785b      	ldrb	r3, [r3, #1]
    a3a8:	021b      	lsls	r3, r3, #8
    a3aa:	b29b      	uxth	r3, r3
    a3ac:	9a05      	ldr	r2, [sp, #20]
    a3ae:	4313      	orrs	r3, r2
    a3b0:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    a3b2:	9b01      	ldr	r3, [sp, #4]
    a3b4:	789b      	ldrb	r3, [r3, #2]
    a3b6:	041b      	lsls	r3, r3, #16
    a3b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a3bc:	9a05      	ldr	r2, [sp, #20]
    a3be:	4313      	orrs	r3, r2
    a3c0:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    a3c2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a3c6:	9903      	ldr	r1, [sp, #12]
    a3c8:	4613      	mov	r3, r2
    a3ca:	009b      	lsls	r3, r3, #2
    a3cc:	4413      	add	r3, r2
    a3ce:	00db      	lsls	r3, r3, #3
    a3d0:	440b      	add	r3, r1
    a3d2:	3310      	adds	r3, #16
    a3d4:	9a05      	ldr	r2, [sp, #20]
    a3d6:	601a      	str	r2, [r3, #0]
}
    a3d8:	bf00      	nop
    a3da:	b006      	add	sp, #24
    a3dc:	4770      	bx	lr

0000a3de <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    a3de:	b082      	sub	sp, #8
    a3e0:	9001      	str	r0, [sp, #4]
    a3e2:	460b      	mov	r3, r1
    a3e4:	f88d 3003 	strb.w	r3, [sp, #3]
    a3e8:	4613      	mov	r3, r2
    a3ea:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    a3ee:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a3f2:	9901      	ldr	r1, [sp, #4]
    a3f4:	4613      	mov	r3, r2
    a3f6:	009b      	lsls	r3, r3, #2
    a3f8:	4413      	add	r3, r2
    a3fa:	00db      	lsls	r3, r3, #3
    a3fc:	440b      	add	r3, r1
    a3fe:	3314      	adds	r3, #20
    a400:	6819      	ldr	r1, [r3, #0]
    a402:	f8bd 3000 	ldrh.w	r3, [sp]
    a406:	041b      	lsls	r3, r3, #16
    a408:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a40c:	43db      	mvns	r3, r3
    a40e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a412:	4019      	ands	r1, r3
    a414:	9801      	ldr	r0, [sp, #4]
    a416:	4613      	mov	r3, r2
    a418:	009b      	lsls	r3, r3, #2
    a41a:	4413      	add	r3, r2
    a41c:	00db      	lsls	r3, r3, #3
    a41e:	4403      	add	r3, r0
    a420:	3314      	adds	r3, #20
    a422:	6019      	str	r1, [r3, #0]
}
    a424:	bf00      	nop
    a426:	b002      	add	sp, #8
    a428:	4770      	bx	lr

0000a42a <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    a42a:	b500      	push	{lr}
    a42c:	b087      	sub	sp, #28
    a42e:	9001      	str	r0, [sp, #4]
    a430:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a432:	4a50      	ldr	r2, [pc, #320]	; (a574 <Pdb_Adc_Ip_Init+0x14a>)
    a434:	9b01      	ldr	r3, [sp, #4]
    a436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a43a:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    a43c:	2300      	movs	r3, #0
    a43e:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    a440:	9b00      	ldr	r3, [sp, #0]
    a442:	681b      	ldr	r3, [r3, #0]
    a444:	049b      	lsls	r3, r3, #18
    a446:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    a44a:	9a04      	ldr	r2, [sp, #16]
    a44c:	4313      	orrs	r3, r2
    a44e:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    a450:	9b00      	ldr	r3, [sp, #0]
    a452:	685b      	ldr	r3, [r3, #4]
    a454:	031b      	lsls	r3, r3, #12
    a456:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    a45a:	9a04      	ldr	r2, [sp, #16]
    a45c:	4313      	orrs	r3, r2
    a45e:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    a460:	9b00      	ldr	r3, [sp, #0]
    a462:	689b      	ldr	r3, [r3, #8]
    a464:	009b      	lsls	r3, r3, #2
    a466:	f003 030c 	and.w	r3, r3, #12
    a46a:	9a04      	ldr	r2, [sp, #16]
    a46c:	4313      	orrs	r3, r2
    a46e:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    a470:	9b00      	ldr	r3, [sp, #0]
    a472:	68db      	ldr	r3, [r3, #12]
    a474:	021b      	lsls	r3, r3, #8
    a476:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    a47a:	9a04      	ldr	r2, [sp, #16]
    a47c:	4313      	orrs	r3, r2
    a47e:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    a480:	9b00      	ldr	r3, [sp, #0]
    a482:	7c1b      	ldrb	r3, [r3, #16]
    a484:	2b00      	cmp	r3, #0
    a486:	d003      	beq.n	a490 <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    a488:	9b04      	ldr	r3, [sp, #16]
    a48a:	f043 0302 	orr.w	r3, r3, #2
    a48e:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    a490:	9b00      	ldr	r3, [sp, #0]
    a492:	7c5b      	ldrb	r3, [r3, #17]
    a494:	2b00      	cmp	r3, #0
    a496:	d003      	beq.n	a4a0 <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    a498:	9b04      	ldr	r3, [sp, #16]
    a49a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    a49e:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    a4a0:	9b00      	ldr	r3, [sp, #0]
    a4a2:	69db      	ldr	r3, [r3, #28]
    a4a4:	2b00      	cmp	r3, #0
    a4a6:	d003      	beq.n	a4b0 <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    a4a8:	9b04      	ldr	r3, [sp, #16]
    a4aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a4ae:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    a4b0:	9b03      	ldr	r3, [sp, #12]
    a4b2:	9a04      	ldr	r2, [sp, #16]
    a4b4:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    a4b6:	9b00      	ldr	r3, [sp, #0]
    a4b8:	8a5b      	ldrh	r3, [r3, #18]
    a4ba:	4619      	mov	r1, r3
    a4bc:	9801      	ldr	r0, [sp, #4]
    a4be:	f000 f98f 	bl	a7e0 <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    a4c2:	9b00      	ldr	r3, [sp, #0]
    a4c4:	7d1b      	ldrb	r3, [r3, #20]
    a4c6:	2b00      	cmp	r3, #0
    a4c8:	d03e      	beq.n	a548 <Pdb_Adc_Ip_Init+0x11e>
    a4ca:	9b00      	ldr	r3, [sp, #0]
    a4cc:	699b      	ldr	r3, [r3, #24]
    a4ce:	2b00      	cmp	r3, #0
    a4d0:	d03a      	beq.n	a548 <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    a4d2:	2300      	movs	r3, #0
    a4d4:	f88d 3017 	strb.w	r3, [sp, #23]
    a4d8:	e030      	b.n	a53c <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    a4da:	9b00      	ldr	r3, [sp, #0]
    a4dc:	6999      	ldr	r1, [r3, #24]
    a4de:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a4e2:	4613      	mov	r3, r2
    a4e4:	009b      	lsls	r3, r3, #2
    a4e6:	4413      	add	r3, r2
    a4e8:	009b      	lsls	r3, r3, #2
    a4ea:	440b      	add	r3, r1
    a4ec:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    a4ee:	9b02      	ldr	r3, [sp, #8]
    a4f0:	7819      	ldrb	r1, [r3, #0]
    a4f2:	9b02      	ldr	r3, [sp, #8]
    a4f4:	3301      	adds	r3, #1
    a4f6:	461a      	mov	r2, r3
    a4f8:	9803      	ldr	r0, [sp, #12]
    a4fa:	f7ff ff38 	bl	a36e <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a4fe:	2300      	movs	r3, #0
    a500:	f88d 3016 	strb.w	r3, [sp, #22]
    a504:	e011      	b.n	a52a <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    a506:	9b02      	ldr	r3, [sp, #8]
    a508:	7819      	ldrb	r1, [r3, #0]
    a50a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a50e:	9a02      	ldr	r2, [sp, #8]
    a510:	005b      	lsls	r3, r3, #1
    a512:	4413      	add	r3, r2
    a514:	889b      	ldrh	r3, [r3, #4]
    a516:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a51a:	9801      	ldr	r0, [sp, #4]
    a51c:	f000 fa74 	bl	aa08 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a520:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a524:	3301      	adds	r3, #1
    a526:	f88d 3016 	strb.w	r3, [sp, #22]
    a52a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a52e:	2b07      	cmp	r3, #7
    a530:	d9e9      	bls.n	a506 <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    a532:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a536:	3301      	adds	r3, #1
    a538:	f88d 3017 	strb.w	r3, [sp, #23]
    a53c:	9b00      	ldr	r3, [sp, #0]
    a53e:	7d1b      	ldrb	r3, [r3, #20]
    a540:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a544:	429a      	cmp	r2, r3
    a546:	d3c8      	bcc.n	a4da <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    a548:	9801      	ldr	r0, [sp, #4]
    a54a:	f000 f89b 	bl	a684 <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    a54e:	9801      	ldr	r0, [sp, #4]
    a550:	f000 f92e 	bl	a7b0 <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    a554:	9b00      	ldr	r3, [sp, #0]
    a556:	69da      	ldr	r2, [r3, #28]
    a558:	4907      	ldr	r1, [pc, #28]	; (a578 <Pdb_Adc_Ip_Init+0x14e>)
    a55a:	9b01      	ldr	r3, [sp, #4]
    a55c:	00db      	lsls	r3, r3, #3
    a55e:	440b      	add	r3, r1
    a560:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    a562:	4a05      	ldr	r2, [pc, #20]	; (a578 <Pdb_Adc_Ip_Init+0x14e>)
    a564:	9b01      	ldr	r3, [sp, #4]
    a566:	2101      	movs	r1, #1
    a568:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    a56c:	bf00      	nop
    a56e:	b007      	add	sp, #28
    a570:	f85d fb04 	ldr.w	pc, [sp], #4
    a574:	00010850 	.word	0x00010850
    a578:	1fff8da8 	.word	0x1fff8da8

0000a57c <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    a57c:	b500      	push	{lr}
    a57e:	b097      	sub	sp, #92	; 0x5c
    a580:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    a582:	2300      	movs	r3, #0
    a584:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    a586:	2300      	movs	r3, #0
    a588:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    a58a:	2300      	movs	r3, #0
    a58c:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    a58e:	2300      	movs	r3, #0
    a590:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    a592:	2300      	movs	r3, #0
    a594:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    a598:	2300      	movs	r3, #0
    a59a:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    a59e:	2300      	movs	r3, #0
    a5a0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    a5a4:	2302      	movs	r3, #2
    a5a6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    a5aa:	2300      	movs	r3, #0
    a5ac:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    a5b0:	e04d      	b.n	a64e <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    a5b2:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a5b6:	4613      	mov	r3, r2
    a5b8:	009b      	lsls	r3, r3, #2
    a5ba:	4413      	add	r3, r2
    a5bc:	009b      	lsls	r3, r3, #2
    a5be:	aa16      	add	r2, sp, #88	; 0x58
    a5c0:	4413      	add	r3, r2
    a5c2:	3b4c      	subs	r3, #76	; 0x4c
    a5c4:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a5c8:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    a5ca:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a5ce:	4613      	mov	r3, r2
    a5d0:	009b      	lsls	r3, r3, #2
    a5d2:	4413      	add	r3, r2
    a5d4:	009b      	lsls	r3, r3, #2
    a5d6:	aa16      	add	r2, sp, #88	; 0x58
    a5d8:	4413      	add	r3, r2
    a5da:	3b4b      	subs	r3, #75	; 0x4b
    a5dc:	2200      	movs	r2, #0
    a5de:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    a5e0:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a5e4:	4613      	mov	r3, r2
    a5e6:	009b      	lsls	r3, r3, #2
    a5e8:	4413      	add	r3, r2
    a5ea:	009b      	lsls	r3, r3, #2
    a5ec:	aa16      	add	r2, sp, #88	; 0x58
    a5ee:	4413      	add	r3, r2
    a5f0:	3b4a      	subs	r3, #74	; 0x4a
    a5f2:	2200      	movs	r2, #0
    a5f4:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    a5f6:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a5fa:	4613      	mov	r3, r2
    a5fc:	009b      	lsls	r3, r3, #2
    a5fe:	4413      	add	r3, r2
    a600:	009b      	lsls	r3, r3, #2
    a602:	aa16      	add	r2, sp, #88	; 0x58
    a604:	4413      	add	r3, r2
    a606:	3b49      	subs	r3, #73	; 0x49
    a608:	2200      	movs	r2, #0
    a60a:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a60c:	2300      	movs	r3, #0
    a60e:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    a612:	e013      	b.n	a63c <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    a614:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a618:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    a61c:	4613      	mov	r3, r2
    a61e:	009b      	lsls	r3, r3, #2
    a620:	4413      	add	r3, r2
    a622:	005b      	lsls	r3, r3, #1
    a624:	440b      	add	r3, r1
    a626:	005b      	lsls	r3, r3, #1
    a628:	aa16      	add	r2, sp, #88	; 0x58
    a62a:	4413      	add	r3, r2
    a62c:	2200      	movs	r2, #0
    a62e:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a632:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    a636:	3301      	adds	r3, #1
    a638:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    a63c:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    a640:	2b07      	cmp	r3, #7
    a642:	d9e7      	bls.n	a614 <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    a644:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    a648:	3301      	adds	r3, #1
    a64a:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    a64e:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    a652:	2b01      	cmp	r3, #1
    a654:	d9ad      	bls.n	a5b2 <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    a656:	ab03      	add	r3, sp, #12
    a658:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    a65a:	2300      	movs	r3, #0
    a65c:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    a65e:	ab0d      	add	r3, sp, #52	; 0x34
    a660:	4619      	mov	r1, r3
    a662:	9801      	ldr	r0, [sp, #4]
    a664:	f7ff fee1 	bl	a42a <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    a668:	9801      	ldr	r0, [sp, #4]
    a66a:	f000 f823 	bl	a6b4 <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    a66e:	4a04      	ldr	r2, [pc, #16]	; (a680 <Pdb_Adc_Ip_DeInit+0x104>)
    a670:	9b01      	ldr	r3, [sp, #4]
    a672:	2100      	movs	r1, #0
    a674:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    a678:	bf00      	nop
    a67a:	b017      	add	sp, #92	; 0x5c
    a67c:	f85d fb04 	ldr.w	pc, [sp], #4
    a680:	1fff8da8 	.word	0x1fff8da8

0000a684 <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    a684:	b500      	push	{lr}
    a686:	b085      	sub	sp, #20
    a688:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a68a:	4a09      	ldr	r2, [pc, #36]	; (a6b0 <Pdb_Adc_Ip_Enable+0x2c>)
    a68c:	9b01      	ldr	r3, [sp, #4]
    a68e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a692:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    a694:	f001 fdbe 	bl	c214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    a698:	9b03      	ldr	r3, [sp, #12]
    a69a:	681b      	ldr	r3, [r3, #0]
    a69c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    a6a0:	9b03      	ldr	r3, [sp, #12]
    a6a2:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    a6a4:	f001 fde2 	bl	c26c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    a6a8:	bf00      	nop
    a6aa:	b005      	add	sp, #20
    a6ac:	f85d fb04 	ldr.w	pc, [sp], #4
    a6b0:	00010850 	.word	0x00010850

0000a6b4 <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    a6b4:	b500      	push	{lr}
    a6b6:	b085      	sub	sp, #20
    a6b8:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a6ba:	4a08      	ldr	r2, [pc, #32]	; (a6dc <Pdb_Adc_Ip_Disable+0x28>)
    a6bc:	9b01      	ldr	r3, [sp, #4]
    a6be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6c2:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    a6c4:	f001 fdf8 	bl	c2b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    a6c8:	9803      	ldr	r0, [sp, #12]
    a6ca:	f7ff fe2c 	bl	a326 <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    a6ce:	f001 fe1f 	bl	c310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    a6d2:	bf00      	nop
    a6d4:	b005      	add	sp, #20
    a6d6:	f85d fb04 	ldr.w	pc, [sp], #4
    a6da:	bf00      	nop
    a6dc:	00010850 	.word	0x00010850

0000a6e0 <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    a6e0:	b500      	push	{lr}
    a6e2:	b085      	sub	sp, #20
    a6e4:	9001      	str	r0, [sp, #4]
    a6e6:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a6e8:	4a0e      	ldr	r2, [pc, #56]	; (a724 <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    a6ea:	9b01      	ldr	r3, [sp, #4]
    a6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6f0:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    a6f2:	f001 fe33 	bl	c35c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    a6f6:	9b03      	ldr	r3, [sp, #12]
    a6f8:	681b      	ldr	r3, [r3, #0]
    a6fa:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    a6fc:	9b02      	ldr	r3, [sp, #8]
    a6fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    a702:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    a704:	9b00      	ldr	r3, [sp, #0]
    a706:	021b      	lsls	r3, r3, #8
    a708:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    a70c:	9a02      	ldr	r2, [sp, #8]
    a70e:	4313      	orrs	r3, r2
    a710:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    a712:	9b03      	ldr	r3, [sp, #12]
    a714:	9a02      	ldr	r2, [sp, #8]
    a716:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    a718:	f001 fe4c 	bl	c3b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    a71c:	bf00      	nop
    a71e:	b005      	add	sp, #20
    a720:	f85d fb04 	ldr.w	pc, [sp], #4
    a724:	00010850 	.word	0x00010850

0000a728 <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    a728:	b500      	push	{lr}
    a72a:	b085      	sub	sp, #20
    a72c:	9001      	str	r0, [sp, #4]
    a72e:	460b      	mov	r3, r1
    a730:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a734:	4a09      	ldr	r2, [pc, #36]	; (a75c <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    a736:	9b01      	ldr	r3, [sp, #4]
    a738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a73c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    a73e:	f001 fe5f 	bl	c400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    a742:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a746:	4619      	mov	r1, r3
    a748:	9803      	ldr	r0, [sp, #12]
    a74a:	f7ff fdf7 	bl	a33c <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    a74e:	f001 fe83 	bl	c458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    a752:	bf00      	nop
    a754:	b005      	add	sp, #20
    a756:	f85d fb04 	ldr.w	pc, [sp], #4
    a75a:	bf00      	nop
    a75c:	00010850 	.word	0x00010850

0000a760 <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    a760:	b500      	push	{lr}
    a762:	b085      	sub	sp, #20
    a764:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a766:	4a09      	ldr	r2, [pc, #36]	; (a78c <Pdb_Adc_Ip_SwTrigger+0x2c>)
    a768:	9b01      	ldr	r3, [sp, #4]
    a76a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a76e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    a770:	f001 fe98 	bl	c4a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    a774:	9b03      	ldr	r3, [sp, #12]
    a776:	681b      	ldr	r3, [r3, #0]
    a778:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    a77c:	9b03      	ldr	r3, [sp, #12]
    a77e:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    a780:	f001 febc 	bl	c4fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    a784:	bf00      	nop
    a786:	b005      	add	sp, #20
    a788:	f85d fb04 	ldr.w	pc, [sp], #4
    a78c:	00010850 	.word	0x00010850

0000a790 <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    a790:	b084      	sub	sp, #16
    a792:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a794:	4a05      	ldr	r2, [pc, #20]	; (a7ac <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    a796:	9b01      	ldr	r3, [sp, #4]
    a798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a79c:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    a79e:	9b03      	ldr	r3, [sp, #12]
    a7a0:	689b      	ldr	r3, [r3, #8]
    a7a2:	b29b      	uxth	r3, r3
}
    a7a4:	4618      	mov	r0, r3
    a7a6:	b004      	add	sp, #16
    a7a8:	4770      	bx	lr
    a7aa:	bf00      	nop
    a7ac:	00010850 	.word	0x00010850

0000a7b0 <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    a7b0:	b500      	push	{lr}
    a7b2:	b085      	sub	sp, #20
    a7b4:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a7b6:	4a09      	ldr	r2, [pc, #36]	; (a7dc <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    a7b8:	9b01      	ldr	r3, [sp, #4]
    a7ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7be:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    a7c0:	f001 fec2 	bl	c548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    a7c4:	9b03      	ldr	r3, [sp, #12]
    a7c6:	681b      	ldr	r3, [r3, #0]
    a7c8:	f043 0201 	orr.w	r2, r3, #1
    a7cc:	9b03      	ldr	r3, [sp, #12]
    a7ce:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    a7d0:	f001 fee6 	bl	c5a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    a7d4:	bf00      	nop
    a7d6:	b005      	add	sp, #20
    a7d8:	f85d fb04 	ldr.w	pc, [sp], #4
    a7dc:	00010850 	.word	0x00010850

0000a7e0 <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    a7e0:	b500      	push	{lr}
    a7e2:	b085      	sub	sp, #20
    a7e4:	9001      	str	r0, [sp, #4]
    a7e6:	460b      	mov	r3, r1
    a7e8:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a7ec:	4a0d      	ldr	r2, [pc, #52]	; (a824 <Pdb_Adc_Ip_SetModulus+0x44>)
    a7ee:	9b01      	ldr	r3, [sp, #4]
    a7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7f4:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    a7f6:	f002 f989 	bl	cb0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    a7fa:	9b03      	ldr	r3, [sp, #12]
    a7fc:	685b      	ldr	r3, [r3, #4]
    a7fe:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    a800:	9b02      	ldr	r3, [sp, #8]
    a802:	0c1b      	lsrs	r3, r3, #16
    a804:	041b      	lsls	r3, r3, #16
    a806:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    a808:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    a80c:	9a02      	ldr	r2, [sp, #8]
    a80e:	4313      	orrs	r3, r2
    a810:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    a812:	9b03      	ldr	r3, [sp, #12]
    a814:	9a02      	ldr	r2, [sp, #8]
    a816:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    a818:	f002 f9a4 	bl	cb64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    a81c:	bf00      	nop
    a81e:	b005      	add	sp, #20
    a820:	f85d fb04 	ldr.w	pc, [sp], #4
    a824:	00010850 	.word	0x00010850

0000a828 <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    a828:	b500      	push	{lr}
    a82a:	b087      	sub	sp, #28
    a82c:	9003      	str	r0, [sp, #12]
    a82e:	460b      	mov	r3, r1
    a830:	9201      	str	r2, [sp, #4]
    a832:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a836:	4a0a      	ldr	r2, [pc, #40]	; (a860 <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    a838:	9b03      	ldr	r3, [sp, #12]
    a83a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a83e:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    a840:	f001 ff26 	bl	c690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    a844:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a848:	9a01      	ldr	r2, [sp, #4]
    a84a:	4619      	mov	r1, r3
    a84c:	9805      	ldr	r0, [sp, #20]
    a84e:	f7ff fd8e 	bl	a36e <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    a852:	f001 ff49 	bl	c6e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    a856:	bf00      	nop
    a858:	b007      	add	sp, #28
    a85a:	f85d fb04 	ldr.w	pc, [sp], #4
    a85e:	bf00      	nop
    a860:	00010850 	.word	0x00010850

0000a864 <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    a864:	b084      	sub	sp, #16
    a866:	9001      	str	r0, [sp, #4]
    a868:	460b      	mov	r3, r1
    a86a:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a86e:	4a0c      	ldr	r2, [pc, #48]	; (a8a0 <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    a870:	9b01      	ldr	r3, [sp, #4]
    a872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a876:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    a878:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a87c:	9903      	ldr	r1, [sp, #12]
    a87e:	4613      	mov	r3, r2
    a880:	009b      	lsls	r3, r3, #2
    a882:	4413      	add	r3, r2
    a884:	00db      	lsls	r3, r3, #3
    a886:	440b      	add	r3, r1
    a888:	3314      	adds	r3, #20
    a88a:	681b      	ldr	r3, [r3, #0]
    a88c:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    a88e:	9b02      	ldr	r3, [sp, #8]
    a890:	0c1b      	lsrs	r3, r3, #16
    a892:	b2db      	uxtb	r3, r3
    a894:	9302      	str	r3, [sp, #8]

    return Result;
    a896:	9b02      	ldr	r3, [sp, #8]
}
    a898:	4618      	mov	r0, r3
    a89a:	b004      	add	sp, #16
    a89c:	4770      	bx	lr
    a89e:	bf00      	nop
    a8a0:	00010850 	.word	0x00010850

0000a8a4 <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    a8a4:	b500      	push	{lr}
    a8a6:	b085      	sub	sp, #20
    a8a8:	9001      	str	r0, [sp, #4]
    a8aa:	460b      	mov	r3, r1
    a8ac:	f88d 3003 	strb.w	r3, [sp, #3]
    a8b0:	4613      	mov	r3, r2
    a8b2:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a8b6:	4a0a      	ldr	r2, [pc, #40]	; (a8e0 <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    a8b8:	9b01      	ldr	r3, [sp, #4]
    a8ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8be:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    a8c0:	f002 f880 	bl	c9c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    a8c4:	f8bd 2000 	ldrh.w	r2, [sp]
    a8c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a8cc:	4619      	mov	r1, r3
    a8ce:	9803      	ldr	r0, [sp, #12]
    a8d0:	f7ff fd85 	bl	a3de <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    a8d4:	f002 f8a2 	bl	ca1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    a8d8:	bf00      	nop
    a8da:	b005      	add	sp, #20
    a8dc:	f85d fb04 	ldr.w	pc, [sp], #4
    a8e0:	00010850 	.word	0x00010850

0000a8e4 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    a8e4:	b500      	push	{lr}
    a8e6:	b085      	sub	sp, #20
    a8e8:	9001      	str	r0, [sp, #4]
    a8ea:	4608      	mov	r0, r1
    a8ec:	4611      	mov	r1, r2
    a8ee:	461a      	mov	r2, r3
    a8f0:	4603      	mov	r3, r0
    a8f2:	f88d 3003 	strb.w	r3, [sp, #3]
    a8f6:	460b      	mov	r3, r1
    a8f8:	f88d 3002 	strb.w	r3, [sp, #2]
    a8fc:	4613      	mov	r3, r2
    a8fe:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a902:	4a10      	ldr	r2, [pc, #64]	; (a944 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    a904:	9b01      	ldr	r3, [sp, #4]
    a906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a90a:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    a90c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a910:	2201      	movs	r2, #1
    a912:	fa02 f303 	lsl.w	r3, r2, r3
    a916:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    a918:	9b02      	ldr	r3, [sp, #8]
    a91a:	041b      	lsls	r3, r3, #16
    a91c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a920:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    a922:	f001 ff07 	bl	c734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    a926:	f89d 3001 	ldrb.w	r3, [sp, #1]
    a92a:	f89d 1003 	ldrb.w	r1, [sp, #3]
    a92e:	9a02      	ldr	r2, [sp, #8]
    a930:	9803      	ldr	r0, [sp, #12]
    a932:	f7ff fcb9 	bl	a2a8 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    a936:	f001 ff29 	bl	c78c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    a93a:	bf00      	nop
    a93c:	b005      	add	sp, #20
    a93e:	f85d fb04 	ldr.w	pc, [sp], #4
    a942:	bf00      	nop
    a944:	00010850 	.word	0x00010850

0000a948 <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    a948:	b500      	push	{lr}
    a94a:	b085      	sub	sp, #20
    a94c:	9001      	str	r0, [sp, #4]
    a94e:	4608      	mov	r0, r1
    a950:	4611      	mov	r1, r2
    a952:	461a      	mov	r2, r3
    a954:	4603      	mov	r3, r0
    a956:	f88d 3003 	strb.w	r3, [sp, #3]
    a95a:	460b      	mov	r3, r1
    a95c:	f88d 3002 	strb.w	r3, [sp, #2]
    a960:	4613      	mov	r3, r2
    a962:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a966:	4a0f      	ldr	r2, [pc, #60]	; (a9a4 <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    a968:	9b01      	ldr	r3, [sp, #4]
    a96a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a96e:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    a970:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a974:	2201      	movs	r2, #1
    a976:	fa02 f303 	lsl.w	r3, r2, r3
    a97a:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    a97c:	9b02      	ldr	r3, [sp, #8]
    a97e:	b2db      	uxtb	r3, r3
    a980:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    a982:	f001 ff29 	bl	c7d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    a986:	f89d 3001 	ldrb.w	r3, [sp, #1]
    a98a:	f89d 1003 	ldrb.w	r1, [sp, #3]
    a98e:	9a02      	ldr	r2, [sp, #8]
    a990:	9803      	ldr	r0, [sp, #12]
    a992:	f7ff fc89 	bl	a2a8 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    a996:	f001 ff4b 	bl	c830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    a99a:	bf00      	nop
    a99c:	b005      	add	sp, #20
    a99e:	f85d fb04 	ldr.w	pc, [sp], #4
    a9a2:	bf00      	nop
    a9a4:	00010850 	.word	0x00010850

0000a9a8 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    a9a8:	b500      	push	{lr}
    a9aa:	b085      	sub	sp, #20
    a9ac:	9001      	str	r0, [sp, #4]
    a9ae:	4608      	mov	r0, r1
    a9b0:	4611      	mov	r1, r2
    a9b2:	461a      	mov	r2, r3
    a9b4:	4603      	mov	r3, r0
    a9b6:	f88d 3003 	strb.w	r3, [sp, #3]
    a9ba:	460b      	mov	r3, r1
    a9bc:	f88d 3002 	strb.w	r3, [sp, #2]
    a9c0:	4613      	mov	r3, r2
    a9c2:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a9c6:	4a0f      	ldr	r2, [pc, #60]	; (aa04 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    a9c8:	9b01      	ldr	r3, [sp, #4]
    a9ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9ce:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    a9d0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a9d4:	2201      	movs	r2, #1
    a9d6:	fa02 f303 	lsl.w	r3, r2, r3
    a9da:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    a9dc:	9b02      	ldr	r3, [sp, #8]
    a9de:	021b      	lsls	r3, r3, #8
    a9e0:	b29b      	uxth	r3, r3
    a9e2:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    a9e4:	f001 ff4a 	bl	c87c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    a9e8:	f89d 3001 	ldrb.w	r3, [sp, #1]
    a9ec:	f89d 1003 	ldrb.w	r1, [sp, #3]
    a9f0:	9a02      	ldr	r2, [sp, #8]
    a9f2:	9803      	ldr	r0, [sp, #12]
    a9f4:	f7ff fc58 	bl	a2a8 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    a9f8:	f001 ff6c 	bl	c8d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    a9fc:	bf00      	nop
    a9fe:	b005      	add	sp, #20
    aa00:	f85d fb04 	ldr.w	pc, [sp], #4
    aa04:	00010850 	.word	0x00010850

0000aa08 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    aa08:	b410      	push	{r4}
    aa0a:	b085      	sub	sp, #20
    aa0c:	9001      	str	r0, [sp, #4]
    aa0e:	4608      	mov	r0, r1
    aa10:	4611      	mov	r1, r2
    aa12:	461a      	mov	r2, r3
    aa14:	4603      	mov	r3, r0
    aa16:	f88d 3003 	strb.w	r3, [sp, #3]
    aa1a:	460b      	mov	r3, r1
    aa1c:	f88d 3002 	strb.w	r3, [sp, #2]
    aa20:	4613      	mov	r3, r2
    aa22:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa26:	4a0c      	ldr	r2, [pc, #48]	; (aa58 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    aa28:	9b01      	ldr	r3, [sp, #4]
    aa2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa2e:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    aa30:	f89d 2003 	ldrb.w	r2, [sp, #3]
    aa34:	f89d 4002 	ldrb.w	r4, [sp, #2]
    aa38:	f8bd 0000 	ldrh.w	r0, [sp]
    aa3c:	9903      	ldr	r1, [sp, #12]
    aa3e:	4613      	mov	r3, r2
    aa40:	009b      	lsls	r3, r3, #2
    aa42:	4413      	add	r3, r2
    aa44:	005b      	lsls	r3, r3, #1
    aa46:	4423      	add	r3, r4
    aa48:	3306      	adds	r3, #6
    aa4a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    aa4e:	bf00      	nop
    aa50:	b005      	add	sp, #20
    aa52:	f85d 4b04 	ldr.w	r4, [sp], #4
    aa56:	4770      	bx	lr
    aa58:	00010850 	.word	0x00010850

0000aa5c <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    aa5c:	b500      	push	{lr}
    aa5e:	b087      	sub	sp, #28
    aa60:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa62:	4a19      	ldr	r2, [pc, #100]	; (aac8 <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    aa64:	9b01      	ldr	r3, [sp, #4]
    aa66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa6a:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    aa6c:	2300      	movs	r3, #0
    aa6e:	f88d 300c 	strb.w	r3, [sp, #12]
    aa72:	2300      	movs	r3, #0
    aa74:	f88d 300d 	strb.w	r3, [sp, #13]
    aa78:	2300      	movs	r3, #0
    aa7a:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    aa7e:	f001 fdb5 	bl	c5ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    aa82:	9804      	ldr	r0, [sp, #16]
    aa84:	f7ff fc4f 	bl	a326 <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    aa88:	2100      	movs	r1, #0
    aa8a:	9804      	ldr	r0, [sp, #16]
    aa8c:	f7ff fc56 	bl	a33c <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    aa90:	f001 fdd8 	bl	c644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    aa94:	2300      	movs	r3, #0
    aa96:	f88d 3017 	strb.w	r3, [sp, #23]
    aa9a:	e00b      	b.n	aab4 <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    aa9c:	aa03      	add	r2, sp, #12
    aa9e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aaa2:	4619      	mov	r1, r3
    aaa4:	9804      	ldr	r0, [sp, #16]
    aaa6:	f000 f899 	bl	abdc <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    aaaa:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aaae:	3301      	adds	r3, #1
    aab0:	f88d 3017 	strb.w	r3, [sp, #23]
    aab4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aab8:	2b01      	cmp	r3, #1
    aaba:	d9ef      	bls.n	aa9c <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    aabc:	bf00      	nop
    aabe:	bf00      	nop
    aac0:	b007      	add	sp, #28
    aac2:	f85d fb04 	ldr.w	pc, [sp], #4
    aac6:	bf00      	nop
    aac8:	00010850 	.word	0x00010850

0000aacc <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    aacc:	b500      	push	{lr}
    aace:	b087      	sub	sp, #28
    aad0:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aad2:	4a40      	ldr	r2, [pc, #256]	; (abd4 <Pdb_Adc_Ip_IRQHandler+0x108>)
    aad4:	9b01      	ldr	r3, [sp, #4]
    aad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aada:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    aadc:	4a3e      	ldr	r2, [pc, #248]	; (abd8 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    aade:	9b01      	ldr	r3, [sp, #4]
    aae0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    aae4:	2b00      	cmp	r3, #0
    aae6:	d04d      	beq.n	ab84 <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    aae8:	9b04      	ldr	r3, [sp, #16]
    aaea:	681b      	ldr	r3, [r3, #0]
    aaec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    aaf0:	2b00      	cmp	r3, #0
    aaf2:	d06a      	beq.n	abca <Pdb_Adc_Ip_IRQHandler+0xfe>
    aaf4:	4a38      	ldr	r2, [pc, #224]	; (abd8 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    aaf6:	9b01      	ldr	r3, [sp, #4]
    aaf8:	00db      	lsls	r3, r3, #3
    aafa:	4413      	add	r3, r2
    aafc:	685b      	ldr	r3, [r3, #4]
    aafe:	2b00      	cmp	r3, #0
    ab00:	d063      	beq.n	abca <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ab02:	2300      	movs	r3, #0
    ab04:	f88d 3017 	strb.w	r3, [sp, #23]
    ab08:	e037      	b.n	ab7a <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    ab0a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ab0e:	9904      	ldr	r1, [sp, #16]
    ab10:	4613      	mov	r3, r2
    ab12:	009b      	lsls	r3, r3, #2
    ab14:	4413      	add	r3, r2
    ab16:	00db      	lsls	r3, r3, #3
    ab18:	440b      	add	r3, r1
    ab1a:	3314      	adds	r3, #20
    ab1c:	681b      	ldr	r3, [r3, #0]
    ab1e:	b29b      	uxth	r3, r3
    ab20:	b2db      	uxtb	r3, r3
    ab22:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    ab26:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ab2a:	2b00      	cmp	r3, #0
    ab2c:	d020      	beq.n	ab70 <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    ab2e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ab32:	9904      	ldr	r1, [sp, #16]
    ab34:	4613      	mov	r3, r2
    ab36:	009b      	lsls	r3, r3, #2
    ab38:	4413      	add	r3, r2
    ab3a:	00db      	lsls	r3, r3, #3
    ab3c:	440b      	add	r3, r1
    ab3e:	3314      	adds	r3, #20
    ab40:	681b      	ldr	r3, [r3, #0]
    ab42:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ab46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    ab4a:	9804      	ldr	r0, [sp, #16]
    ab4c:	4613      	mov	r3, r2
    ab4e:	009b      	lsls	r3, r3, #2
    ab50:	4413      	add	r3, r2
    ab52:	00db      	lsls	r3, r3, #3
    ab54:	4403      	add	r3, r0
    ab56:	3314      	adds	r3, #20
    ab58:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    ab5a:	4a1f      	ldr	r2, [pc, #124]	; (abd8 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    ab5c:	9b01      	ldr	r3, [sp, #4]
    ab5e:	00db      	lsls	r3, r3, #3
    ab60:	4413      	add	r3, r2
    ab62:	685b      	ldr	r3, [r3, #4]
    ab64:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    ab68:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ab6c:	4610      	mov	r0, r2
    ab6e:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ab70:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ab74:	3301      	adds	r3, #1
    ab76:	f88d 3017 	strb.w	r3, [sp, #23]
    ab7a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ab7e:	2b01      	cmp	r3, #1
    ab80:	d9c3      	bls.n	ab0a <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    ab82:	e022      	b.n	abca <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ab84:	2300      	movs	r3, #0
    ab86:	f88d 3017 	strb.w	r3, [sp, #23]
    ab8a:	e01a      	b.n	abc2 <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    ab8c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ab90:	9904      	ldr	r1, [sp, #16]
    ab92:	4613      	mov	r3, r2
    ab94:	009b      	lsls	r3, r3, #2
    ab96:	4413      	add	r3, r2
    ab98:	00db      	lsls	r3, r3, #3
    ab9a:	440b      	add	r3, r1
    ab9c:	3314      	adds	r3, #20
    ab9e:	681b      	ldr	r3, [r3, #0]
    aba0:	f89d 2017 	ldrb.w	r2, [sp, #23]
    aba4:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    aba8:	9804      	ldr	r0, [sp, #16]
    abaa:	4613      	mov	r3, r2
    abac:	009b      	lsls	r3, r3, #2
    abae:	4413      	add	r3, r2
    abb0:	00db      	lsls	r3, r3, #3
    abb2:	4403      	add	r3, r0
    abb4:	3314      	adds	r3, #20
    abb6:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    abb8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    abbc:	3301      	adds	r3, #1
    abbe:	f88d 3017 	strb.w	r3, [sp, #23]
    abc2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    abc6:	2b01      	cmp	r3, #1
    abc8:	d9e0      	bls.n	ab8c <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    abca:	bf00      	nop
    abcc:	b007      	add	sp, #28
    abce:	f85d fb04 	ldr.w	pc, [sp], #4
    abd2:	bf00      	nop
    abd4:	00010850 	.word	0x00010850
    abd8:	1fff8da8 	.word	0x1fff8da8

0000abdc <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    abdc:	b500      	push	{lr}
    abde:	b085      	sub	sp, #20
    abe0:	9003      	str	r0, [sp, #12]
    abe2:	460b      	mov	r3, r1
    abe4:	9201      	str	r2, [sp, #4]
    abe6:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    abea:	f001 fe99 	bl	c920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    abee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    abf2:	9a01      	ldr	r2, [sp, #4]
    abf4:	4619      	mov	r1, r3
    abf6:	9803      	ldr	r0, [sp, #12]
    abf8:	f7ff fbb9 	bl	a36e <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    abfc:	f001 febc 	bl	c978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    ac00:	f001 ff32 	bl	ca68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    ac04:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ac08:	22ff      	movs	r2, #255	; 0xff
    ac0a:	4619      	mov	r1, r3
    ac0c:	9803      	ldr	r0, [sp, #12]
    ac0e:	f7ff fbe6 	bl	a3de <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    ac12:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ac16:	9903      	ldr	r1, [sp, #12]
    ac18:	4613      	mov	r3, r2
    ac1a:	009b      	lsls	r3, r3, #2
    ac1c:	4413      	add	r3, r2
    ac1e:	00db      	lsls	r3, r3, #3
    ac20:	440b      	add	r3, r1
    ac22:	3314      	adds	r3, #20
    ac24:	681b      	ldr	r3, [r3, #0]
    ac26:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ac2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    ac2e:	9803      	ldr	r0, [sp, #12]
    ac30:	4613      	mov	r3, r2
    ac32:	009b      	lsls	r3, r3, #2
    ac34:	4413      	add	r3, r2
    ac36:	00db      	lsls	r3, r3, #3
    ac38:	4403      	add	r3, r0
    ac3a:	3314      	adds	r3, #20
    ac3c:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    ac3e:	f001 ff3f 	bl	cac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    ac42:	bf00      	nop
    ac44:	b005      	add	sp, #20
    ac46:	f85d fb04 	ldr.w	pc, [sp], #4
    ac4a:	bf00      	nop

0000ac4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    ac4c:	b500      	push	{lr}
    ac4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac50:	f7f5 ffe0 	bl	c14 <Sys_GetCoreID>
    ac54:	4603      	mov	r3, r0
    ac56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    ac58:	4a10      	ldr	r2, [pc, #64]	; (ac9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    ac5a:	9b01      	ldr	r3, [sp, #4]
    ac5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac60:	2b00      	cmp	r3, #0
    ac62:	d10d      	bne.n	ac80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ac64:	f7f5 fef4 	bl	a50 <Adc_schm_read_msr>
    ac68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ac6a:	9b00      	ldr	r3, [sp, #0]
    ac6c:	f003 0301 	and.w	r3, r3, #1
    ac70:	2b00      	cmp	r3, #0
    ac72:	d100      	bne.n	ac76 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ac74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    ac76:	490a      	ldr	r1, [pc, #40]	; (aca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    ac78:	9b01      	ldr	r3, [sp, #4]
    ac7a:	9a00      	ldr	r2, [sp, #0]
    ac7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    ac80:	4a06      	ldr	r2, [pc, #24]	; (ac9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    ac82:	9b01      	ldr	r3, [sp, #4]
    ac84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac88:	1c5a      	adds	r2, r3, #1
    ac8a:	4904      	ldr	r1, [pc, #16]	; (ac9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    ac8c:	9b01      	ldr	r3, [sp, #4]
    ac8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ac92:	bf00      	nop
    ac94:	b003      	add	sp, #12
    ac96:	f85d fb04 	ldr.w	pc, [sp], #4
    ac9a:	bf00      	nop
    ac9c:	1fff8dbc 	.word	0x1fff8dbc
    aca0:	1fff8db8 	.word	0x1fff8db8

0000aca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    aca4:	b500      	push	{lr}
    aca6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aca8:	f7f5 ffb4 	bl	c14 <Sys_GetCoreID>
    acac:	4603      	mov	r3, r0
    acae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    acb0:	4a0d      	ldr	r2, [pc, #52]	; (ace8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    acb2:	9b01      	ldr	r3, [sp, #4]
    acb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acb8:	1e5a      	subs	r2, r3, #1
    acba:	490b      	ldr	r1, [pc, #44]	; (ace8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    acbc:	9b01      	ldr	r3, [sp, #4]
    acbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    acc2:	4a0a      	ldr	r2, [pc, #40]	; (acec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    acc4:	9b01      	ldr	r3, [sp, #4]
    acc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acca:	f003 0301 	and.w	r3, r3, #1
    acce:	2b00      	cmp	r3, #0
    acd0:	d106      	bne.n	ace0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    acd2:	4a05      	ldr	r2, [pc, #20]	; (ace8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    acd4:	9b01      	ldr	r3, [sp, #4]
    acd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acda:	2b00      	cmp	r3, #0
    acdc:	d100      	bne.n	ace0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    acde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ace0:	bf00      	nop
    ace2:	b003      	add	sp, #12
    ace4:	f85d fb04 	ldr.w	pc, [sp], #4
    ace8:	1fff8dbc 	.word	0x1fff8dbc
    acec:	1fff8db8 	.word	0x1fff8db8

0000acf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    acf0:	b500      	push	{lr}
    acf2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    acf4:	f7f5 ff8e 	bl	c14 <Sys_GetCoreID>
    acf8:	4603      	mov	r3, r0
    acfa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    acfc:	4a10      	ldr	r2, [pc, #64]	; (ad40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    acfe:	9b01      	ldr	r3, [sp, #4]
    ad00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad04:	2b00      	cmp	r3, #0
    ad06:	d10d      	bne.n	ad24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ad08:	f7f5 fea2 	bl	a50 <Adc_schm_read_msr>
    ad0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ad0e:	9b00      	ldr	r3, [sp, #0]
    ad10:	f003 0301 	and.w	r3, r3, #1
    ad14:	2b00      	cmp	r3, #0
    ad16:	d100      	bne.n	ad1a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ad18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ad1a:	490a      	ldr	r1, [pc, #40]	; (ad44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    ad1c:	9b01      	ldr	r3, [sp, #4]
    ad1e:	9a00      	ldr	r2, [sp, #0]
    ad20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    ad24:	4a06      	ldr	r2, [pc, #24]	; (ad40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    ad26:	9b01      	ldr	r3, [sp, #4]
    ad28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad2c:	1c5a      	adds	r2, r3, #1
    ad2e:	4904      	ldr	r1, [pc, #16]	; (ad40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    ad30:	9b01      	ldr	r3, [sp, #4]
    ad32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ad36:	bf00      	nop
    ad38:	b003      	add	sp, #12
    ad3a:	f85d fb04 	ldr.w	pc, [sp], #4
    ad3e:	bf00      	nop
    ad40:	1fff8dc4 	.word	0x1fff8dc4
    ad44:	1fff8dc0 	.word	0x1fff8dc0

0000ad48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    ad48:	b500      	push	{lr}
    ad4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad4c:	f7f5 ff62 	bl	c14 <Sys_GetCoreID>
    ad50:	4603      	mov	r3, r0
    ad52:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    ad54:	4a0d      	ldr	r2, [pc, #52]	; (ad8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ad56:	9b01      	ldr	r3, [sp, #4]
    ad58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad5c:	1e5a      	subs	r2, r3, #1
    ad5e:	490b      	ldr	r1, [pc, #44]	; (ad8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ad60:	9b01      	ldr	r3, [sp, #4]
    ad62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    ad66:	4a0a      	ldr	r2, [pc, #40]	; (ad90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    ad68:	9b01      	ldr	r3, [sp, #4]
    ad6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad6e:	f003 0301 	and.w	r3, r3, #1
    ad72:	2b00      	cmp	r3, #0
    ad74:	d106      	bne.n	ad84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    ad76:	4a05      	ldr	r2, [pc, #20]	; (ad8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ad78:	9b01      	ldr	r3, [sp, #4]
    ad7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad7e:	2b00      	cmp	r3, #0
    ad80:	d100      	bne.n	ad84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ad82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ad84:	bf00      	nop
    ad86:	b003      	add	sp, #12
    ad88:	f85d fb04 	ldr.w	pc, [sp], #4
    ad8c:	1fff8dc4 	.word	0x1fff8dc4
    ad90:	1fff8dc0 	.word	0x1fff8dc0

0000ad94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    ad94:	b500      	push	{lr}
    ad96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad98:	f7f5 ff3c 	bl	c14 <Sys_GetCoreID>
    ad9c:	4603      	mov	r3, r0
    ad9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    ada0:	4a10      	ldr	r2, [pc, #64]	; (ade4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    ada2:	9b01      	ldr	r3, [sp, #4]
    ada4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ada8:	2b00      	cmp	r3, #0
    adaa:	d10d      	bne.n	adc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    adac:	f7f5 fe50 	bl	a50 <Adc_schm_read_msr>
    adb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    adb2:	9b00      	ldr	r3, [sp, #0]
    adb4:	f003 0301 	and.w	r3, r3, #1
    adb8:	2b00      	cmp	r3, #0
    adba:	d100      	bne.n	adbe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    adbc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    adbe:	490a      	ldr	r1, [pc, #40]	; (ade8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    adc0:	9b01      	ldr	r3, [sp, #4]
    adc2:	9a00      	ldr	r2, [sp, #0]
    adc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    adc8:	4a06      	ldr	r2, [pc, #24]	; (ade4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    adca:	9b01      	ldr	r3, [sp, #4]
    adcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    add0:	1c5a      	adds	r2, r3, #1
    add2:	4904      	ldr	r1, [pc, #16]	; (ade4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    add4:	9b01      	ldr	r3, [sp, #4]
    add6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    adda:	bf00      	nop
    addc:	b003      	add	sp, #12
    adde:	f85d fb04 	ldr.w	pc, [sp], #4
    ade2:	bf00      	nop
    ade4:	1fff8dcc 	.word	0x1fff8dcc
    ade8:	1fff8dc8 	.word	0x1fff8dc8

0000adec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    adec:	b500      	push	{lr}
    adee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    adf0:	f7f5 ff10 	bl	c14 <Sys_GetCoreID>
    adf4:	4603      	mov	r3, r0
    adf6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    adf8:	4a0d      	ldr	r2, [pc, #52]	; (ae30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    adfa:	9b01      	ldr	r3, [sp, #4]
    adfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae00:	1e5a      	subs	r2, r3, #1
    ae02:	490b      	ldr	r1, [pc, #44]	; (ae30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ae04:	9b01      	ldr	r3, [sp, #4]
    ae06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    ae0a:	4a0a      	ldr	r2, [pc, #40]	; (ae34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    ae0c:	9b01      	ldr	r3, [sp, #4]
    ae0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae12:	f003 0301 	and.w	r3, r3, #1
    ae16:	2b00      	cmp	r3, #0
    ae18:	d106      	bne.n	ae28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    ae1a:	4a05      	ldr	r2, [pc, #20]	; (ae30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ae1c:	9b01      	ldr	r3, [sp, #4]
    ae1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae22:	2b00      	cmp	r3, #0
    ae24:	d100      	bne.n	ae28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ae26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ae28:	bf00      	nop
    ae2a:	b003      	add	sp, #12
    ae2c:	f85d fb04 	ldr.w	pc, [sp], #4
    ae30:	1fff8dcc 	.word	0x1fff8dcc
    ae34:	1fff8dc8 	.word	0x1fff8dc8

0000ae38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    ae38:	b500      	push	{lr}
    ae3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae3c:	f7f5 feea 	bl	c14 <Sys_GetCoreID>
    ae40:	4603      	mov	r3, r0
    ae42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
    ae44:	4a10      	ldr	r2, [pc, #64]	; (ae88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    ae46:	9b01      	ldr	r3, [sp, #4]
    ae48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae4c:	2b00      	cmp	r3, #0
    ae4e:	d10d      	bne.n	ae6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ae50:	f7f5 fdfe 	bl	a50 <Adc_schm_read_msr>
    ae54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ae56:	9b00      	ldr	r3, [sp, #0]
    ae58:	f003 0301 	and.w	r3, r3, #1
    ae5c:	2b00      	cmp	r3, #0
    ae5e:	d100      	bne.n	ae62 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ae60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    ae62:	490a      	ldr	r1, [pc, #40]	; (ae8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
    ae64:	9b01      	ldr	r3, [sp, #4]
    ae66:	9a00      	ldr	r2, [sp, #0]
    ae68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
    ae6c:	4a06      	ldr	r2, [pc, #24]	; (ae88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    ae6e:	9b01      	ldr	r3, [sp, #4]
    ae70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae74:	1c5a      	adds	r2, r3, #1
    ae76:	4904      	ldr	r1, [pc, #16]	; (ae88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    ae78:	9b01      	ldr	r3, [sp, #4]
    ae7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ae7e:	bf00      	nop
    ae80:	b003      	add	sp, #12
    ae82:	f85d fb04 	ldr.w	pc, [sp], #4
    ae86:	bf00      	nop
    ae88:	1fff8dd4 	.word	0x1fff8dd4
    ae8c:	1fff8dd0 	.word	0x1fff8dd0

0000ae90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    ae90:	b500      	push	{lr}
    ae92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae94:	f7f5 febe 	bl	c14 <Sys_GetCoreID>
    ae98:	4603      	mov	r3, r0
    ae9a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
    ae9c:	4a0d      	ldr	r2, [pc, #52]	; (aed4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    ae9e:	9b01      	ldr	r3, [sp, #4]
    aea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aea4:	1e5a      	subs	r2, r3, #1
    aea6:	490b      	ldr	r1, [pc, #44]	; (aed4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    aea8:	9b01      	ldr	r3, [sp, #4]
    aeaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    aeae:	4a0a      	ldr	r2, [pc, #40]	; (aed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
    aeb0:	9b01      	ldr	r3, [sp, #4]
    aeb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aeb6:	f003 0301 	and.w	r3, r3, #1
    aeba:	2b00      	cmp	r3, #0
    aebc:	d106      	bne.n	aecc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    aebe:	4a05      	ldr	r2, [pc, #20]	; (aed4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    aec0:	9b01      	ldr	r3, [sp, #4]
    aec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aec6:	2b00      	cmp	r3, #0
    aec8:	d100      	bne.n	aecc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aeca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aecc:	bf00      	nop
    aece:	b003      	add	sp, #12
    aed0:	f85d fb04 	ldr.w	pc, [sp], #4
    aed4:	1fff8dd4 	.word	0x1fff8dd4
    aed8:	1fff8dd0 	.word	0x1fff8dd0

0000aedc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    aedc:	b500      	push	{lr}
    aede:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aee0:	f7f5 fe98 	bl	c14 <Sys_GetCoreID>
    aee4:	4603      	mov	r3, r0
    aee6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
    aee8:	4a10      	ldr	r2, [pc, #64]	; (af2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    aeea:	9b01      	ldr	r3, [sp, #4]
    aeec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aef0:	2b00      	cmp	r3, #0
    aef2:	d10d      	bne.n	af10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aef4:	f7f5 fdac 	bl	a50 <Adc_schm_read_msr>
    aef8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aefa:	9b00      	ldr	r3, [sp, #0]
    aefc:	f003 0301 	and.w	r3, r3, #1
    af00:	2b00      	cmp	r3, #0
    af02:	d100      	bne.n	af06 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    af04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    af06:	490a      	ldr	r1, [pc, #40]	; (af30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
    af08:	9b01      	ldr	r3, [sp, #4]
    af0a:	9a00      	ldr	r2, [sp, #0]
    af0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
    af10:	4a06      	ldr	r2, [pc, #24]	; (af2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    af12:	9b01      	ldr	r3, [sp, #4]
    af14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af18:	1c5a      	adds	r2, r3, #1
    af1a:	4904      	ldr	r1, [pc, #16]	; (af2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    af1c:	9b01      	ldr	r3, [sp, #4]
    af1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    af22:	bf00      	nop
    af24:	b003      	add	sp, #12
    af26:	f85d fb04 	ldr.w	pc, [sp], #4
    af2a:	bf00      	nop
    af2c:	1fff8ddc 	.word	0x1fff8ddc
    af30:	1fff8dd8 	.word	0x1fff8dd8

0000af34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    af34:	b500      	push	{lr}
    af36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af38:	f7f5 fe6c 	bl	c14 <Sys_GetCoreID>
    af3c:	4603      	mov	r3, r0
    af3e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
    af40:	4a0d      	ldr	r2, [pc, #52]	; (af78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    af42:	9b01      	ldr	r3, [sp, #4]
    af44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af48:	1e5a      	subs	r2, r3, #1
    af4a:	490b      	ldr	r1, [pc, #44]	; (af78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    af4c:	9b01      	ldr	r3, [sp, #4]
    af4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    af52:	4a0a      	ldr	r2, [pc, #40]	; (af7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
    af54:	9b01      	ldr	r3, [sp, #4]
    af56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af5a:	f003 0301 	and.w	r3, r3, #1
    af5e:	2b00      	cmp	r3, #0
    af60:	d106      	bne.n	af70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    af62:	4a05      	ldr	r2, [pc, #20]	; (af78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    af64:	9b01      	ldr	r3, [sp, #4]
    af66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af6a:	2b00      	cmp	r3, #0
    af6c:	d100      	bne.n	af70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    af6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    af70:	bf00      	nop
    af72:	b003      	add	sp, #12
    af74:	f85d fb04 	ldr.w	pc, [sp], #4
    af78:	1fff8ddc 	.word	0x1fff8ddc
    af7c:	1fff8dd8 	.word	0x1fff8dd8

0000af80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    af80:	b500      	push	{lr}
    af82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af84:	f7f5 fe46 	bl	c14 <Sys_GetCoreID>
    af88:	4603      	mov	r3, r0
    af8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
    af8c:	4a10      	ldr	r2, [pc, #64]	; (afd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    af8e:	9b01      	ldr	r3, [sp, #4]
    af90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af94:	2b00      	cmp	r3, #0
    af96:	d10d      	bne.n	afb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    af98:	f7f5 fd5a 	bl	a50 <Adc_schm_read_msr>
    af9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    af9e:	9b00      	ldr	r3, [sp, #0]
    afa0:	f003 0301 	and.w	r3, r3, #1
    afa4:	2b00      	cmp	r3, #0
    afa6:	d100      	bne.n	afaa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    afa8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    afaa:	490a      	ldr	r1, [pc, #40]	; (afd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
    afac:	9b01      	ldr	r3, [sp, #4]
    afae:	9a00      	ldr	r2, [sp, #0]
    afb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
    afb4:	4a06      	ldr	r2, [pc, #24]	; (afd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    afb6:	9b01      	ldr	r3, [sp, #4]
    afb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afbc:	1c5a      	adds	r2, r3, #1
    afbe:	4904      	ldr	r1, [pc, #16]	; (afd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    afc0:	9b01      	ldr	r3, [sp, #4]
    afc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    afc6:	bf00      	nop
    afc8:	b003      	add	sp, #12
    afca:	f85d fb04 	ldr.w	pc, [sp], #4
    afce:	bf00      	nop
    afd0:	1fff8de4 	.word	0x1fff8de4
    afd4:	1fff8de0 	.word	0x1fff8de0

0000afd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    afd8:	b500      	push	{lr}
    afda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    afdc:	f7f5 fe1a 	bl	c14 <Sys_GetCoreID>
    afe0:	4603      	mov	r3, r0
    afe2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
    afe4:	4a0d      	ldr	r2, [pc, #52]	; (b01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    afe6:	9b01      	ldr	r3, [sp, #4]
    afe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afec:	1e5a      	subs	r2, r3, #1
    afee:	490b      	ldr	r1, [pc, #44]	; (b01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    aff0:	9b01      	ldr	r3, [sp, #4]
    aff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    aff6:	4a0a      	ldr	r2, [pc, #40]	; (b020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
    aff8:	9b01      	ldr	r3, [sp, #4]
    affa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    affe:	f003 0301 	and.w	r3, r3, #1
    b002:	2b00      	cmp	r3, #0
    b004:	d106      	bne.n	b014 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    b006:	4a05      	ldr	r2, [pc, #20]	; (b01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    b008:	9b01      	ldr	r3, [sp, #4]
    b00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b00e:	2b00      	cmp	r3, #0
    b010:	d100      	bne.n	b014 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b012:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b014:	bf00      	nop
    b016:	b003      	add	sp, #12
    b018:	f85d fb04 	ldr.w	pc, [sp], #4
    b01c:	1fff8de4 	.word	0x1fff8de4
    b020:	1fff8de0 	.word	0x1fff8de0

0000b024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    b024:	b500      	push	{lr}
    b026:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b028:	f7f5 fdf4 	bl	c14 <Sys_GetCoreID>
    b02c:	4603      	mov	r3, r0
    b02e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
    b030:	4a10      	ldr	r2, [pc, #64]	; (b074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b032:	9b01      	ldr	r3, [sp, #4]
    b034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b038:	2b00      	cmp	r3, #0
    b03a:	d10d      	bne.n	b058 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b03c:	f7f5 fd08 	bl	a50 <Adc_schm_read_msr>
    b040:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b042:	9b00      	ldr	r3, [sp, #0]
    b044:	f003 0301 	and.w	r3, r3, #1
    b048:	2b00      	cmp	r3, #0
    b04a:	d100      	bne.n	b04e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b04c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    b04e:	490a      	ldr	r1, [pc, #40]	; (b078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
    b050:	9b01      	ldr	r3, [sp, #4]
    b052:	9a00      	ldr	r2, [sp, #0]
    b054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
    b058:	4a06      	ldr	r2, [pc, #24]	; (b074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b05a:	9b01      	ldr	r3, [sp, #4]
    b05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b060:	1c5a      	adds	r2, r3, #1
    b062:	4904      	ldr	r1, [pc, #16]	; (b074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b064:	9b01      	ldr	r3, [sp, #4]
    b066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b06a:	bf00      	nop
    b06c:	b003      	add	sp, #12
    b06e:	f85d fb04 	ldr.w	pc, [sp], #4
    b072:	bf00      	nop
    b074:	1fff8dec 	.word	0x1fff8dec
    b078:	1fff8de8 	.word	0x1fff8de8

0000b07c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    b07c:	b500      	push	{lr}
    b07e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b080:	f7f5 fdc8 	bl	c14 <Sys_GetCoreID>
    b084:	4603      	mov	r3, r0
    b086:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
    b088:	4a0d      	ldr	r2, [pc, #52]	; (b0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b08a:	9b01      	ldr	r3, [sp, #4]
    b08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b090:	1e5a      	subs	r2, r3, #1
    b092:	490b      	ldr	r1, [pc, #44]	; (b0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b094:	9b01      	ldr	r3, [sp, #4]
    b096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    b09a:	4a0a      	ldr	r2, [pc, #40]	; (b0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
    b09c:	9b01      	ldr	r3, [sp, #4]
    b09e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0a2:	f003 0301 	and.w	r3, r3, #1
    b0a6:	2b00      	cmp	r3, #0
    b0a8:	d106      	bne.n	b0b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    b0aa:	4a05      	ldr	r2, [pc, #20]	; (b0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b0ac:	9b01      	ldr	r3, [sp, #4]
    b0ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0b2:	2b00      	cmp	r3, #0
    b0b4:	d100      	bne.n	b0b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b0b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b0b8:	bf00      	nop
    b0ba:	b003      	add	sp, #12
    b0bc:	f85d fb04 	ldr.w	pc, [sp], #4
    b0c0:	1fff8dec 	.word	0x1fff8dec
    b0c4:	1fff8de8 	.word	0x1fff8de8

0000b0c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    b0c8:	b500      	push	{lr}
    b0ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b0cc:	f7f5 fda2 	bl	c14 <Sys_GetCoreID>
    b0d0:	4603      	mov	r3, r0
    b0d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
    b0d4:	4a10      	ldr	r2, [pc, #64]	; (b118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b0d6:	9b01      	ldr	r3, [sp, #4]
    b0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0dc:	2b00      	cmp	r3, #0
    b0de:	d10d      	bne.n	b0fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b0e0:	f7f5 fcb6 	bl	a50 <Adc_schm_read_msr>
    b0e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b0e6:	9b00      	ldr	r3, [sp, #0]
    b0e8:	f003 0301 	and.w	r3, r3, #1
    b0ec:	2b00      	cmp	r3, #0
    b0ee:	d100      	bne.n	b0f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b0f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
    b0f2:	490a      	ldr	r1, [pc, #40]	; (b11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
    b0f4:	9b01      	ldr	r3, [sp, #4]
    b0f6:	9a00      	ldr	r2, [sp, #0]
    b0f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
    b0fc:	4a06      	ldr	r2, [pc, #24]	; (b118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b0fe:	9b01      	ldr	r3, [sp, #4]
    b100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b104:	1c5a      	adds	r2, r3, #1
    b106:	4904      	ldr	r1, [pc, #16]	; (b118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b108:	9b01      	ldr	r3, [sp, #4]
    b10a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b10e:	bf00      	nop
    b110:	b003      	add	sp, #12
    b112:	f85d fb04 	ldr.w	pc, [sp], #4
    b116:	bf00      	nop
    b118:	1fff8df4 	.word	0x1fff8df4
    b11c:	1fff8df0 	.word	0x1fff8df0

0000b120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    b120:	b500      	push	{lr}
    b122:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b124:	f7f5 fd76 	bl	c14 <Sys_GetCoreID>
    b128:	4603      	mov	r3, r0
    b12a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
    b12c:	4a0d      	ldr	r2, [pc, #52]	; (b164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b12e:	9b01      	ldr	r3, [sp, #4]
    b130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b134:	1e5a      	subs	r2, r3, #1
    b136:	490b      	ldr	r1, [pc, #44]	; (b164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b138:	9b01      	ldr	r3, [sp, #4]
    b13a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
    b13e:	4a0a      	ldr	r2, [pc, #40]	; (b168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
    b140:	9b01      	ldr	r3, [sp, #4]
    b142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b146:	f003 0301 	and.w	r3, r3, #1
    b14a:	2b00      	cmp	r3, #0
    b14c:	d106      	bne.n	b15c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    b14e:	4a05      	ldr	r2, [pc, #20]	; (b164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b150:	9b01      	ldr	r3, [sp, #4]
    b152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b156:	2b00      	cmp	r3, #0
    b158:	d100      	bne.n	b15c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b15a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b15c:	bf00      	nop
    b15e:	b003      	add	sp, #12
    b160:	f85d fb04 	ldr.w	pc, [sp], #4
    b164:	1fff8df4 	.word	0x1fff8df4
    b168:	1fff8df0 	.word	0x1fff8df0

0000b16c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    b16c:	b500      	push	{lr}
    b16e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b170:	f7f5 fd50 	bl	c14 <Sys_GetCoreID>
    b174:	4603      	mov	r3, r0
    b176:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
    b178:	4a10      	ldr	r2, [pc, #64]	; (b1bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b17a:	9b01      	ldr	r3, [sp, #4]
    b17c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b180:	2b00      	cmp	r3, #0
    b182:	d10d      	bne.n	b1a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b184:	f7f5 fc64 	bl	a50 <Adc_schm_read_msr>
    b188:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b18a:	9b00      	ldr	r3, [sp, #0]
    b18c:	f003 0301 	and.w	r3, r3, #1
    b190:	2b00      	cmp	r3, #0
    b192:	d100      	bne.n	b196 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b194:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
    b196:	490a      	ldr	r1, [pc, #40]	; (b1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
    b198:	9b01      	ldr	r3, [sp, #4]
    b19a:	9a00      	ldr	r2, [sp, #0]
    b19c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
    b1a0:	4a06      	ldr	r2, [pc, #24]	; (b1bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b1a2:	9b01      	ldr	r3, [sp, #4]
    b1a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1a8:	1c5a      	adds	r2, r3, #1
    b1aa:	4904      	ldr	r1, [pc, #16]	; (b1bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b1ac:	9b01      	ldr	r3, [sp, #4]
    b1ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b1b2:	bf00      	nop
    b1b4:	b003      	add	sp, #12
    b1b6:	f85d fb04 	ldr.w	pc, [sp], #4
    b1ba:	bf00      	nop
    b1bc:	1fff8dfc 	.word	0x1fff8dfc
    b1c0:	1fff8df8 	.word	0x1fff8df8

0000b1c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    b1c4:	b500      	push	{lr}
    b1c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b1c8:	f7f5 fd24 	bl	c14 <Sys_GetCoreID>
    b1cc:	4603      	mov	r3, r0
    b1ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
    b1d0:	4a0d      	ldr	r2, [pc, #52]	; (b208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b1d2:	9b01      	ldr	r3, [sp, #4]
    b1d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1d8:	1e5a      	subs	r2, r3, #1
    b1da:	490b      	ldr	r1, [pc, #44]	; (b208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b1dc:	9b01      	ldr	r3, [sp, #4]
    b1de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
    b1e2:	4a0a      	ldr	r2, [pc, #40]	; (b20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
    b1e4:	9b01      	ldr	r3, [sp, #4]
    b1e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1ea:	f003 0301 	and.w	r3, r3, #1
    b1ee:	2b00      	cmp	r3, #0
    b1f0:	d106      	bne.n	b200 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    b1f2:	4a05      	ldr	r2, [pc, #20]	; (b208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b1f4:	9b01      	ldr	r3, [sp, #4]
    b1f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1fa:	2b00      	cmp	r3, #0
    b1fc:	d100      	bne.n	b200 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b1fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b200:	bf00      	nop
    b202:	b003      	add	sp, #12
    b204:	f85d fb04 	ldr.w	pc, [sp], #4
    b208:	1fff8dfc 	.word	0x1fff8dfc
    b20c:	1fff8df8 	.word	0x1fff8df8

0000b210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    b210:	b500      	push	{lr}
    b212:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b214:	f7f5 fcfe 	bl	c14 <Sys_GetCoreID>
    b218:	4603      	mov	r3, r0
    b21a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
    b21c:	4a10      	ldr	r2, [pc, #64]	; (b260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b21e:	9b01      	ldr	r3, [sp, #4]
    b220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b224:	2b00      	cmp	r3, #0
    b226:	d10d      	bne.n	b244 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b228:	f7f5 fc12 	bl	a50 <Adc_schm_read_msr>
    b22c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b22e:	9b00      	ldr	r3, [sp, #0]
    b230:	f003 0301 	and.w	r3, r3, #1
    b234:	2b00      	cmp	r3, #0
    b236:	d100      	bne.n	b23a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b238:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
    b23a:	490a      	ldr	r1, [pc, #40]	; (b264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
    b23c:	9b01      	ldr	r3, [sp, #4]
    b23e:	9a00      	ldr	r2, [sp, #0]
    b240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
    b244:	4a06      	ldr	r2, [pc, #24]	; (b260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b246:	9b01      	ldr	r3, [sp, #4]
    b248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b24c:	1c5a      	adds	r2, r3, #1
    b24e:	4904      	ldr	r1, [pc, #16]	; (b260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b250:	9b01      	ldr	r3, [sp, #4]
    b252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b256:	bf00      	nop
    b258:	b003      	add	sp, #12
    b25a:	f85d fb04 	ldr.w	pc, [sp], #4
    b25e:	bf00      	nop
    b260:	1fff8e04 	.word	0x1fff8e04
    b264:	1fff8e00 	.word	0x1fff8e00

0000b268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    b268:	b500      	push	{lr}
    b26a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b26c:	f7f5 fcd2 	bl	c14 <Sys_GetCoreID>
    b270:	4603      	mov	r3, r0
    b272:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
    b274:	4a0d      	ldr	r2, [pc, #52]	; (b2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b276:	9b01      	ldr	r3, [sp, #4]
    b278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b27c:	1e5a      	subs	r2, r3, #1
    b27e:	490b      	ldr	r1, [pc, #44]	; (b2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b280:	9b01      	ldr	r3, [sp, #4]
    b282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
    b286:	4a0a      	ldr	r2, [pc, #40]	; (b2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
    b288:	9b01      	ldr	r3, [sp, #4]
    b28a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b28e:	f003 0301 	and.w	r3, r3, #1
    b292:	2b00      	cmp	r3, #0
    b294:	d106      	bne.n	b2a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    b296:	4a05      	ldr	r2, [pc, #20]	; (b2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b298:	9b01      	ldr	r3, [sp, #4]
    b29a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b29e:	2b00      	cmp	r3, #0
    b2a0:	d100      	bne.n	b2a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b2a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b2a4:	bf00      	nop
    b2a6:	b003      	add	sp, #12
    b2a8:	f85d fb04 	ldr.w	pc, [sp], #4
    b2ac:	1fff8e04 	.word	0x1fff8e04
    b2b0:	1fff8e00 	.word	0x1fff8e00

0000b2b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    b2b4:	b500      	push	{lr}
    b2b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b2b8:	f7f5 fcac 	bl	c14 <Sys_GetCoreID>
    b2bc:	4603      	mov	r3, r0
    b2be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
    b2c0:	4a10      	ldr	r2, [pc, #64]	; (b304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b2c2:	9b01      	ldr	r3, [sp, #4]
    b2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2c8:	2b00      	cmp	r3, #0
    b2ca:	d10d      	bne.n	b2e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b2cc:	f7f5 fbc0 	bl	a50 <Adc_schm_read_msr>
    b2d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b2d2:	9b00      	ldr	r3, [sp, #0]
    b2d4:	f003 0301 	and.w	r3, r3, #1
    b2d8:	2b00      	cmp	r3, #0
    b2da:	d100      	bne.n	b2de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b2dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
    b2de:	490a      	ldr	r1, [pc, #40]	; (b308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
    b2e0:	9b01      	ldr	r3, [sp, #4]
    b2e2:	9a00      	ldr	r2, [sp, #0]
    b2e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
    b2e8:	4a06      	ldr	r2, [pc, #24]	; (b304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b2ea:	9b01      	ldr	r3, [sp, #4]
    b2ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2f0:	1c5a      	adds	r2, r3, #1
    b2f2:	4904      	ldr	r1, [pc, #16]	; (b304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b2f4:	9b01      	ldr	r3, [sp, #4]
    b2f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b2fa:	bf00      	nop
    b2fc:	b003      	add	sp, #12
    b2fe:	f85d fb04 	ldr.w	pc, [sp], #4
    b302:	bf00      	nop
    b304:	1fff8e0c 	.word	0x1fff8e0c
    b308:	1fff8e08 	.word	0x1fff8e08

0000b30c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    b30c:	b500      	push	{lr}
    b30e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b310:	f7f5 fc80 	bl	c14 <Sys_GetCoreID>
    b314:	4603      	mov	r3, r0
    b316:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
    b318:	4a0d      	ldr	r2, [pc, #52]	; (b350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b31a:	9b01      	ldr	r3, [sp, #4]
    b31c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b320:	1e5a      	subs	r2, r3, #1
    b322:	490b      	ldr	r1, [pc, #44]	; (b350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b324:	9b01      	ldr	r3, [sp, #4]
    b326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
    b32a:	4a0a      	ldr	r2, [pc, #40]	; (b354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
    b32c:	9b01      	ldr	r3, [sp, #4]
    b32e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b332:	f003 0301 	and.w	r3, r3, #1
    b336:	2b00      	cmp	r3, #0
    b338:	d106      	bne.n	b348 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    b33a:	4a05      	ldr	r2, [pc, #20]	; (b350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b33c:	9b01      	ldr	r3, [sp, #4]
    b33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b342:	2b00      	cmp	r3, #0
    b344:	d100      	bne.n	b348 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b346:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b348:	bf00      	nop
    b34a:	b003      	add	sp, #12
    b34c:	f85d fb04 	ldr.w	pc, [sp], #4
    b350:	1fff8e0c 	.word	0x1fff8e0c
    b354:	1fff8e08 	.word	0x1fff8e08

0000b358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    b358:	b500      	push	{lr}
    b35a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b35c:	f7f5 fc5a 	bl	c14 <Sys_GetCoreID>
    b360:	4603      	mov	r3, r0
    b362:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
    b364:	4a10      	ldr	r2, [pc, #64]	; (b3a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b366:	9b01      	ldr	r3, [sp, #4]
    b368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b36c:	2b00      	cmp	r3, #0
    b36e:	d10d      	bne.n	b38c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b370:	f7f5 fb6e 	bl	a50 <Adc_schm_read_msr>
    b374:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b376:	9b00      	ldr	r3, [sp, #0]
    b378:	f003 0301 	and.w	r3, r3, #1
    b37c:	2b00      	cmp	r3, #0
    b37e:	d100      	bne.n	b382 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b380:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    b382:	490a      	ldr	r1, [pc, #40]	; (b3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
    b384:	9b01      	ldr	r3, [sp, #4]
    b386:	9a00      	ldr	r2, [sp, #0]
    b388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
    b38c:	4a06      	ldr	r2, [pc, #24]	; (b3a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b38e:	9b01      	ldr	r3, [sp, #4]
    b390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b394:	1c5a      	adds	r2, r3, #1
    b396:	4904      	ldr	r1, [pc, #16]	; (b3a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b398:	9b01      	ldr	r3, [sp, #4]
    b39a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b39e:	bf00      	nop
    b3a0:	b003      	add	sp, #12
    b3a2:	f85d fb04 	ldr.w	pc, [sp], #4
    b3a6:	bf00      	nop
    b3a8:	1fff8e14 	.word	0x1fff8e14
    b3ac:	1fff8e10 	.word	0x1fff8e10

0000b3b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    b3b0:	b500      	push	{lr}
    b3b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3b4:	f7f5 fc2e 	bl	c14 <Sys_GetCoreID>
    b3b8:	4603      	mov	r3, r0
    b3ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
    b3bc:	4a0d      	ldr	r2, [pc, #52]	; (b3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b3be:	9b01      	ldr	r3, [sp, #4]
    b3c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3c4:	1e5a      	subs	r2, r3, #1
    b3c6:	490b      	ldr	r1, [pc, #44]	; (b3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b3c8:	9b01      	ldr	r3, [sp, #4]
    b3ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    b3ce:	4a0a      	ldr	r2, [pc, #40]	; (b3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
    b3d0:	9b01      	ldr	r3, [sp, #4]
    b3d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3d6:	f003 0301 	and.w	r3, r3, #1
    b3da:	2b00      	cmp	r3, #0
    b3dc:	d106      	bne.n	b3ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    b3de:	4a05      	ldr	r2, [pc, #20]	; (b3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b3e0:	9b01      	ldr	r3, [sp, #4]
    b3e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3e6:	2b00      	cmp	r3, #0
    b3e8:	d100      	bne.n	b3ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b3ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b3ec:	bf00      	nop
    b3ee:	b003      	add	sp, #12
    b3f0:	f85d fb04 	ldr.w	pc, [sp], #4
    b3f4:	1fff8e14 	.word	0x1fff8e14
    b3f8:	1fff8e10 	.word	0x1fff8e10

0000b3fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    b3fc:	b500      	push	{lr}
    b3fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b400:	f7f5 fc08 	bl	c14 <Sys_GetCoreID>
    b404:	4603      	mov	r3, r0
    b406:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
    b408:	4a10      	ldr	r2, [pc, #64]	; (b44c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    b40a:	9b01      	ldr	r3, [sp, #4]
    b40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b410:	2b00      	cmp	r3, #0
    b412:	d10d      	bne.n	b430 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b414:	f7f5 fb1c 	bl	a50 <Adc_schm_read_msr>
    b418:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b41a:	9b00      	ldr	r3, [sp, #0]
    b41c:	f003 0301 	and.w	r3, r3, #1
    b420:	2b00      	cmp	r3, #0
    b422:	d100      	bne.n	b426 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b424:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    b426:	490a      	ldr	r1, [pc, #40]	; (b450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
    b428:	9b01      	ldr	r3, [sp, #4]
    b42a:	9a00      	ldr	r2, [sp, #0]
    b42c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
    b430:	4a06      	ldr	r2, [pc, #24]	; (b44c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    b432:	9b01      	ldr	r3, [sp, #4]
    b434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b438:	1c5a      	adds	r2, r3, #1
    b43a:	4904      	ldr	r1, [pc, #16]	; (b44c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    b43c:	9b01      	ldr	r3, [sp, #4]
    b43e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b442:	bf00      	nop
    b444:	b003      	add	sp, #12
    b446:	f85d fb04 	ldr.w	pc, [sp], #4
    b44a:	bf00      	nop
    b44c:	1fff8e1c 	.word	0x1fff8e1c
    b450:	1fff8e18 	.word	0x1fff8e18

0000b454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    b454:	b500      	push	{lr}
    b456:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b458:	f7f5 fbdc 	bl	c14 <Sys_GetCoreID>
    b45c:	4603      	mov	r3, r0
    b45e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
    b460:	4a0d      	ldr	r2, [pc, #52]	; (b498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    b462:	9b01      	ldr	r3, [sp, #4]
    b464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b468:	1e5a      	subs	r2, r3, #1
    b46a:	490b      	ldr	r1, [pc, #44]	; (b498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    b46c:	9b01      	ldr	r3, [sp, #4]
    b46e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    b472:	4a0a      	ldr	r2, [pc, #40]	; (b49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
    b474:	9b01      	ldr	r3, [sp, #4]
    b476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b47a:	f003 0301 	and.w	r3, r3, #1
    b47e:	2b00      	cmp	r3, #0
    b480:	d106      	bne.n	b490 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    b482:	4a05      	ldr	r2, [pc, #20]	; (b498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    b484:	9b01      	ldr	r3, [sp, #4]
    b486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b48a:	2b00      	cmp	r3, #0
    b48c:	d100      	bne.n	b490 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b48e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b490:	bf00      	nop
    b492:	b003      	add	sp, #12
    b494:	f85d fb04 	ldr.w	pc, [sp], #4
    b498:	1fff8e1c 	.word	0x1fff8e1c
    b49c:	1fff8e18 	.word	0x1fff8e18

0000b4a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    b4a0:	b500      	push	{lr}
    b4a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4a4:	f7f5 fbb6 	bl	c14 <Sys_GetCoreID>
    b4a8:	4603      	mov	r3, r0
    b4aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
    b4ac:	4a10      	ldr	r2, [pc, #64]	; (b4f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    b4ae:	9b01      	ldr	r3, [sp, #4]
    b4b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4b4:	2b00      	cmp	r3, #0
    b4b6:	d10d      	bne.n	b4d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b4b8:	f7f5 faca 	bl	a50 <Adc_schm_read_msr>
    b4bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b4be:	9b00      	ldr	r3, [sp, #0]
    b4c0:	f003 0301 	and.w	r3, r3, #1
    b4c4:	2b00      	cmp	r3, #0
    b4c6:	d100      	bne.n	b4ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b4c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    b4ca:	490a      	ldr	r1, [pc, #40]	; (b4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
    b4cc:	9b01      	ldr	r3, [sp, #4]
    b4ce:	9a00      	ldr	r2, [sp, #0]
    b4d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
    b4d4:	4a06      	ldr	r2, [pc, #24]	; (b4f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    b4d6:	9b01      	ldr	r3, [sp, #4]
    b4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4dc:	1c5a      	adds	r2, r3, #1
    b4de:	4904      	ldr	r1, [pc, #16]	; (b4f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    b4e0:	9b01      	ldr	r3, [sp, #4]
    b4e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b4e6:	bf00      	nop
    b4e8:	b003      	add	sp, #12
    b4ea:	f85d fb04 	ldr.w	pc, [sp], #4
    b4ee:	bf00      	nop
    b4f0:	1fff8e24 	.word	0x1fff8e24
    b4f4:	1fff8e20 	.word	0x1fff8e20

0000b4f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    b4f8:	b500      	push	{lr}
    b4fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4fc:	f7f5 fb8a 	bl	c14 <Sys_GetCoreID>
    b500:	4603      	mov	r3, r0
    b502:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
    b504:	4a0d      	ldr	r2, [pc, #52]	; (b53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    b506:	9b01      	ldr	r3, [sp, #4]
    b508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b50c:	1e5a      	subs	r2, r3, #1
    b50e:	490b      	ldr	r1, [pc, #44]	; (b53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    b510:	9b01      	ldr	r3, [sp, #4]
    b512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    b516:	4a0a      	ldr	r2, [pc, #40]	; (b540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
    b518:	9b01      	ldr	r3, [sp, #4]
    b51a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b51e:	f003 0301 	and.w	r3, r3, #1
    b522:	2b00      	cmp	r3, #0
    b524:	d106      	bne.n	b534 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    b526:	4a05      	ldr	r2, [pc, #20]	; (b53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    b528:	9b01      	ldr	r3, [sp, #4]
    b52a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b52e:	2b00      	cmp	r3, #0
    b530:	d100      	bne.n	b534 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b532:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b534:	bf00      	nop
    b536:	b003      	add	sp, #12
    b538:	f85d fb04 	ldr.w	pc, [sp], #4
    b53c:	1fff8e24 	.word	0x1fff8e24
    b540:	1fff8e20 	.word	0x1fff8e20

0000b544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    b544:	b500      	push	{lr}
    b546:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b548:	f7f5 fb64 	bl	c14 <Sys_GetCoreID>
    b54c:	4603      	mov	r3, r0
    b54e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
    b550:	4a10      	ldr	r2, [pc, #64]	; (b594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    b552:	9b01      	ldr	r3, [sp, #4]
    b554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b558:	2b00      	cmp	r3, #0
    b55a:	d10d      	bne.n	b578 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b55c:	f7f5 fa78 	bl	a50 <Adc_schm_read_msr>
    b560:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b562:	9b00      	ldr	r3, [sp, #0]
    b564:	f003 0301 	and.w	r3, r3, #1
    b568:	2b00      	cmp	r3, #0
    b56a:	d100      	bne.n	b56e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b56c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    b56e:	490a      	ldr	r1, [pc, #40]	; (b598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
    b570:	9b01      	ldr	r3, [sp, #4]
    b572:	9a00      	ldr	r2, [sp, #0]
    b574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
    b578:	4a06      	ldr	r2, [pc, #24]	; (b594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    b57a:	9b01      	ldr	r3, [sp, #4]
    b57c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b580:	1c5a      	adds	r2, r3, #1
    b582:	4904      	ldr	r1, [pc, #16]	; (b594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    b584:	9b01      	ldr	r3, [sp, #4]
    b586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b58a:	bf00      	nop
    b58c:	b003      	add	sp, #12
    b58e:	f85d fb04 	ldr.w	pc, [sp], #4
    b592:	bf00      	nop
    b594:	1fff8e2c 	.word	0x1fff8e2c
    b598:	1fff8e28 	.word	0x1fff8e28

0000b59c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    b59c:	b500      	push	{lr}
    b59e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5a0:	f7f5 fb38 	bl	c14 <Sys_GetCoreID>
    b5a4:	4603      	mov	r3, r0
    b5a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
    b5a8:	4a0d      	ldr	r2, [pc, #52]	; (b5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    b5aa:	9b01      	ldr	r3, [sp, #4]
    b5ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5b0:	1e5a      	subs	r2, r3, #1
    b5b2:	490b      	ldr	r1, [pc, #44]	; (b5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    b5b4:	9b01      	ldr	r3, [sp, #4]
    b5b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    b5ba:	4a0a      	ldr	r2, [pc, #40]	; (b5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
    b5bc:	9b01      	ldr	r3, [sp, #4]
    b5be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5c2:	f003 0301 	and.w	r3, r3, #1
    b5c6:	2b00      	cmp	r3, #0
    b5c8:	d106      	bne.n	b5d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    b5ca:	4a05      	ldr	r2, [pc, #20]	; (b5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    b5cc:	9b01      	ldr	r3, [sp, #4]
    b5ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5d2:	2b00      	cmp	r3, #0
    b5d4:	d100      	bne.n	b5d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b5d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b5d8:	bf00      	nop
    b5da:	b003      	add	sp, #12
    b5dc:	f85d fb04 	ldr.w	pc, [sp], #4
    b5e0:	1fff8e2c 	.word	0x1fff8e2c
    b5e4:	1fff8e28 	.word	0x1fff8e28

0000b5e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    b5e8:	b500      	push	{lr}
    b5ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5ec:	f7f5 fb12 	bl	c14 <Sys_GetCoreID>
    b5f0:	4603      	mov	r3, r0
    b5f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
    b5f4:	4a10      	ldr	r2, [pc, #64]	; (b638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    b5f6:	9b01      	ldr	r3, [sp, #4]
    b5f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5fc:	2b00      	cmp	r3, #0
    b5fe:	d10d      	bne.n	b61c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b600:	f7f5 fa26 	bl	a50 <Adc_schm_read_msr>
    b604:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b606:	9b00      	ldr	r3, [sp, #0]
    b608:	f003 0301 	and.w	r3, r3, #1
    b60c:	2b00      	cmp	r3, #0
    b60e:	d100      	bne.n	b612 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b610:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    b612:	490a      	ldr	r1, [pc, #40]	; (b63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
    b614:	9b01      	ldr	r3, [sp, #4]
    b616:	9a00      	ldr	r2, [sp, #0]
    b618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
    b61c:	4a06      	ldr	r2, [pc, #24]	; (b638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    b61e:	9b01      	ldr	r3, [sp, #4]
    b620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b624:	1c5a      	adds	r2, r3, #1
    b626:	4904      	ldr	r1, [pc, #16]	; (b638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    b628:	9b01      	ldr	r3, [sp, #4]
    b62a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b62e:	bf00      	nop
    b630:	b003      	add	sp, #12
    b632:	f85d fb04 	ldr.w	pc, [sp], #4
    b636:	bf00      	nop
    b638:	1fff8e34 	.word	0x1fff8e34
    b63c:	1fff8e30 	.word	0x1fff8e30

0000b640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    b640:	b500      	push	{lr}
    b642:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b644:	f7f5 fae6 	bl	c14 <Sys_GetCoreID>
    b648:	4603      	mov	r3, r0
    b64a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
    b64c:	4a0d      	ldr	r2, [pc, #52]	; (b684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    b64e:	9b01      	ldr	r3, [sp, #4]
    b650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b654:	1e5a      	subs	r2, r3, #1
    b656:	490b      	ldr	r1, [pc, #44]	; (b684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    b658:	9b01      	ldr	r3, [sp, #4]
    b65a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    b65e:	4a0a      	ldr	r2, [pc, #40]	; (b688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
    b660:	9b01      	ldr	r3, [sp, #4]
    b662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b666:	f003 0301 	and.w	r3, r3, #1
    b66a:	2b00      	cmp	r3, #0
    b66c:	d106      	bne.n	b67c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    b66e:	4a05      	ldr	r2, [pc, #20]	; (b684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    b670:	9b01      	ldr	r3, [sp, #4]
    b672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b676:	2b00      	cmp	r3, #0
    b678:	d100      	bne.n	b67c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b67a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b67c:	bf00      	nop
    b67e:	b003      	add	sp, #12
    b680:	f85d fb04 	ldr.w	pc, [sp], #4
    b684:	1fff8e34 	.word	0x1fff8e34
    b688:	1fff8e30 	.word	0x1fff8e30

0000b68c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    b68c:	b500      	push	{lr}
    b68e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b690:	f7f5 fac0 	bl	c14 <Sys_GetCoreID>
    b694:	4603      	mov	r3, r0
    b696:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
    b698:	4a10      	ldr	r2, [pc, #64]	; (b6dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    b69a:	9b01      	ldr	r3, [sp, #4]
    b69c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6a0:	2b00      	cmp	r3, #0
    b6a2:	d10d      	bne.n	b6c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b6a4:	f7f5 f9d4 	bl	a50 <Adc_schm_read_msr>
    b6a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b6aa:	9b00      	ldr	r3, [sp, #0]
    b6ac:	f003 0301 	and.w	r3, r3, #1
    b6b0:	2b00      	cmp	r3, #0
    b6b2:	d100      	bne.n	b6b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b6b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    b6b6:	490a      	ldr	r1, [pc, #40]	; (b6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
    b6b8:	9b01      	ldr	r3, [sp, #4]
    b6ba:	9a00      	ldr	r2, [sp, #0]
    b6bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
    b6c0:	4a06      	ldr	r2, [pc, #24]	; (b6dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    b6c2:	9b01      	ldr	r3, [sp, #4]
    b6c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6c8:	1c5a      	adds	r2, r3, #1
    b6ca:	4904      	ldr	r1, [pc, #16]	; (b6dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    b6cc:	9b01      	ldr	r3, [sp, #4]
    b6ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b6d2:	bf00      	nop
    b6d4:	b003      	add	sp, #12
    b6d6:	f85d fb04 	ldr.w	pc, [sp], #4
    b6da:	bf00      	nop
    b6dc:	1fff8e3c 	.word	0x1fff8e3c
    b6e0:	1fff8e38 	.word	0x1fff8e38

0000b6e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    b6e4:	b500      	push	{lr}
    b6e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b6e8:	f7f5 fa94 	bl	c14 <Sys_GetCoreID>
    b6ec:	4603      	mov	r3, r0
    b6ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
    b6f0:	4a0d      	ldr	r2, [pc, #52]	; (b728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    b6f2:	9b01      	ldr	r3, [sp, #4]
    b6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6f8:	1e5a      	subs	r2, r3, #1
    b6fa:	490b      	ldr	r1, [pc, #44]	; (b728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    b6fc:	9b01      	ldr	r3, [sp, #4]
    b6fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    b702:	4a0a      	ldr	r2, [pc, #40]	; (b72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
    b704:	9b01      	ldr	r3, [sp, #4]
    b706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b70a:	f003 0301 	and.w	r3, r3, #1
    b70e:	2b00      	cmp	r3, #0
    b710:	d106      	bne.n	b720 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    b712:	4a05      	ldr	r2, [pc, #20]	; (b728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    b714:	9b01      	ldr	r3, [sp, #4]
    b716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b71a:	2b00      	cmp	r3, #0
    b71c:	d100      	bne.n	b720 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b71e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b720:	bf00      	nop
    b722:	b003      	add	sp, #12
    b724:	f85d fb04 	ldr.w	pc, [sp], #4
    b728:	1fff8e3c 	.word	0x1fff8e3c
    b72c:	1fff8e38 	.word	0x1fff8e38

0000b730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    b730:	b500      	push	{lr}
    b732:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b734:	f7f5 fa6e 	bl	c14 <Sys_GetCoreID>
    b738:	4603      	mov	r3, r0
    b73a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
    b73c:	4a10      	ldr	r2, [pc, #64]	; (b780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    b73e:	9b01      	ldr	r3, [sp, #4]
    b740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b744:	2b00      	cmp	r3, #0
    b746:	d10d      	bne.n	b764 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b748:	f7f5 f982 	bl	a50 <Adc_schm_read_msr>
    b74c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b74e:	9b00      	ldr	r3, [sp, #0]
    b750:	f003 0301 	and.w	r3, r3, #1
    b754:	2b00      	cmp	r3, #0
    b756:	d100      	bne.n	b75a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b758:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    b75a:	490a      	ldr	r1, [pc, #40]	; (b784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
    b75c:	9b01      	ldr	r3, [sp, #4]
    b75e:	9a00      	ldr	r2, [sp, #0]
    b760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
    b764:	4a06      	ldr	r2, [pc, #24]	; (b780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    b766:	9b01      	ldr	r3, [sp, #4]
    b768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b76c:	1c5a      	adds	r2, r3, #1
    b76e:	4904      	ldr	r1, [pc, #16]	; (b780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    b770:	9b01      	ldr	r3, [sp, #4]
    b772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b776:	bf00      	nop
    b778:	b003      	add	sp, #12
    b77a:	f85d fb04 	ldr.w	pc, [sp], #4
    b77e:	bf00      	nop
    b780:	1fff8e44 	.word	0x1fff8e44
    b784:	1fff8e40 	.word	0x1fff8e40

0000b788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    b788:	b500      	push	{lr}
    b78a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b78c:	f7f5 fa42 	bl	c14 <Sys_GetCoreID>
    b790:	4603      	mov	r3, r0
    b792:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
    b794:	4a0d      	ldr	r2, [pc, #52]	; (b7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    b796:	9b01      	ldr	r3, [sp, #4]
    b798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b79c:	1e5a      	subs	r2, r3, #1
    b79e:	490b      	ldr	r1, [pc, #44]	; (b7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    b7a0:	9b01      	ldr	r3, [sp, #4]
    b7a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    b7a6:	4a0a      	ldr	r2, [pc, #40]	; (b7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
    b7a8:	9b01      	ldr	r3, [sp, #4]
    b7aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7ae:	f003 0301 	and.w	r3, r3, #1
    b7b2:	2b00      	cmp	r3, #0
    b7b4:	d106      	bne.n	b7c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    b7b6:	4a05      	ldr	r2, [pc, #20]	; (b7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    b7b8:	9b01      	ldr	r3, [sp, #4]
    b7ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7be:	2b00      	cmp	r3, #0
    b7c0:	d100      	bne.n	b7c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b7c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b7c4:	bf00      	nop
    b7c6:	b003      	add	sp, #12
    b7c8:	f85d fb04 	ldr.w	pc, [sp], #4
    b7cc:	1fff8e44 	.word	0x1fff8e44
    b7d0:	1fff8e40 	.word	0x1fff8e40

0000b7d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    b7d4:	b500      	push	{lr}
    b7d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b7d8:	f7f5 fa1c 	bl	c14 <Sys_GetCoreID>
    b7dc:	4603      	mov	r3, r0
    b7de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
    b7e0:	4a10      	ldr	r2, [pc, #64]	; (b824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    b7e2:	9b01      	ldr	r3, [sp, #4]
    b7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7e8:	2b00      	cmp	r3, #0
    b7ea:	d10d      	bne.n	b808 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b7ec:	f7f5 f930 	bl	a50 <Adc_schm_read_msr>
    b7f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b7f2:	9b00      	ldr	r3, [sp, #0]
    b7f4:	f003 0301 	and.w	r3, r3, #1
    b7f8:	2b00      	cmp	r3, #0
    b7fa:	d100      	bne.n	b7fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b7fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    b7fe:	490a      	ldr	r1, [pc, #40]	; (b828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
    b800:	9b01      	ldr	r3, [sp, #4]
    b802:	9a00      	ldr	r2, [sp, #0]
    b804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
    b808:	4a06      	ldr	r2, [pc, #24]	; (b824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    b80a:	9b01      	ldr	r3, [sp, #4]
    b80c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b810:	1c5a      	adds	r2, r3, #1
    b812:	4904      	ldr	r1, [pc, #16]	; (b824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    b814:	9b01      	ldr	r3, [sp, #4]
    b816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b81a:	bf00      	nop
    b81c:	b003      	add	sp, #12
    b81e:	f85d fb04 	ldr.w	pc, [sp], #4
    b822:	bf00      	nop
    b824:	1fff8e4c 	.word	0x1fff8e4c
    b828:	1fff8e48 	.word	0x1fff8e48

0000b82c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    b82c:	b500      	push	{lr}
    b82e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b830:	f7f5 f9f0 	bl	c14 <Sys_GetCoreID>
    b834:	4603      	mov	r3, r0
    b836:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
    b838:	4a0d      	ldr	r2, [pc, #52]	; (b870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    b83a:	9b01      	ldr	r3, [sp, #4]
    b83c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b840:	1e5a      	subs	r2, r3, #1
    b842:	490b      	ldr	r1, [pc, #44]	; (b870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    b844:	9b01      	ldr	r3, [sp, #4]
    b846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    b84a:	4a0a      	ldr	r2, [pc, #40]	; (b874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
    b84c:	9b01      	ldr	r3, [sp, #4]
    b84e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b852:	f003 0301 	and.w	r3, r3, #1
    b856:	2b00      	cmp	r3, #0
    b858:	d106      	bne.n	b868 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    b85a:	4a05      	ldr	r2, [pc, #20]	; (b870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    b85c:	9b01      	ldr	r3, [sp, #4]
    b85e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b862:	2b00      	cmp	r3, #0
    b864:	d100      	bne.n	b868 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b866:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b868:	bf00      	nop
    b86a:	b003      	add	sp, #12
    b86c:	f85d fb04 	ldr.w	pc, [sp], #4
    b870:	1fff8e4c 	.word	0x1fff8e4c
    b874:	1fff8e48 	.word	0x1fff8e48

0000b878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    b878:	b500      	push	{lr}
    b87a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b87c:	f7f5 f9ca 	bl	c14 <Sys_GetCoreID>
    b880:	4603      	mov	r3, r0
    b882:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
    b884:	4a10      	ldr	r2, [pc, #64]	; (b8c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    b886:	9b01      	ldr	r3, [sp, #4]
    b888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b88c:	2b00      	cmp	r3, #0
    b88e:	d10d      	bne.n	b8ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b890:	f7f5 f8de 	bl	a50 <Adc_schm_read_msr>
    b894:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b896:	9b00      	ldr	r3, [sp, #0]
    b898:	f003 0301 	and.w	r3, r3, #1
    b89c:	2b00      	cmp	r3, #0
    b89e:	d100      	bne.n	b8a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b8a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    b8a2:	490a      	ldr	r1, [pc, #40]	; (b8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
    b8a4:	9b01      	ldr	r3, [sp, #4]
    b8a6:	9a00      	ldr	r2, [sp, #0]
    b8a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
    b8ac:	4a06      	ldr	r2, [pc, #24]	; (b8c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    b8ae:	9b01      	ldr	r3, [sp, #4]
    b8b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8b4:	1c5a      	adds	r2, r3, #1
    b8b6:	4904      	ldr	r1, [pc, #16]	; (b8c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    b8b8:	9b01      	ldr	r3, [sp, #4]
    b8ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b8be:	bf00      	nop
    b8c0:	b003      	add	sp, #12
    b8c2:	f85d fb04 	ldr.w	pc, [sp], #4
    b8c6:	bf00      	nop
    b8c8:	1fff8e54 	.word	0x1fff8e54
    b8cc:	1fff8e50 	.word	0x1fff8e50

0000b8d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    b8d0:	b500      	push	{lr}
    b8d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b8d4:	f7f5 f99e 	bl	c14 <Sys_GetCoreID>
    b8d8:	4603      	mov	r3, r0
    b8da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
    b8dc:	4a0d      	ldr	r2, [pc, #52]	; (b914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    b8de:	9b01      	ldr	r3, [sp, #4]
    b8e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8e4:	1e5a      	subs	r2, r3, #1
    b8e6:	490b      	ldr	r1, [pc, #44]	; (b914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    b8e8:	9b01      	ldr	r3, [sp, #4]
    b8ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    b8ee:	4a0a      	ldr	r2, [pc, #40]	; (b918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
    b8f0:	9b01      	ldr	r3, [sp, #4]
    b8f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8f6:	f003 0301 	and.w	r3, r3, #1
    b8fa:	2b00      	cmp	r3, #0
    b8fc:	d106      	bne.n	b90c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    b8fe:	4a05      	ldr	r2, [pc, #20]	; (b914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    b900:	9b01      	ldr	r3, [sp, #4]
    b902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b906:	2b00      	cmp	r3, #0
    b908:	d100      	bne.n	b90c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b90a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b90c:	bf00      	nop
    b90e:	b003      	add	sp, #12
    b910:	f85d fb04 	ldr.w	pc, [sp], #4
    b914:	1fff8e54 	.word	0x1fff8e54
    b918:	1fff8e50 	.word	0x1fff8e50

0000b91c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    b91c:	b500      	push	{lr}
    b91e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b920:	f7f5 f978 	bl	c14 <Sys_GetCoreID>
    b924:	4603      	mov	r3, r0
    b926:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
    b928:	4a10      	ldr	r2, [pc, #64]	; (b96c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    b92a:	9b01      	ldr	r3, [sp, #4]
    b92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b930:	2b00      	cmp	r3, #0
    b932:	d10d      	bne.n	b950 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b934:	f7f5 f88c 	bl	a50 <Adc_schm_read_msr>
    b938:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b93a:	9b00      	ldr	r3, [sp, #0]
    b93c:	f003 0301 	and.w	r3, r3, #1
    b940:	2b00      	cmp	r3, #0
    b942:	d100      	bne.n	b946 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b944:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    b946:	490a      	ldr	r1, [pc, #40]	; (b970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
    b948:	9b01      	ldr	r3, [sp, #4]
    b94a:	9a00      	ldr	r2, [sp, #0]
    b94c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
    b950:	4a06      	ldr	r2, [pc, #24]	; (b96c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    b952:	9b01      	ldr	r3, [sp, #4]
    b954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b958:	1c5a      	adds	r2, r3, #1
    b95a:	4904      	ldr	r1, [pc, #16]	; (b96c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    b95c:	9b01      	ldr	r3, [sp, #4]
    b95e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b962:	bf00      	nop
    b964:	b003      	add	sp, #12
    b966:	f85d fb04 	ldr.w	pc, [sp], #4
    b96a:	bf00      	nop
    b96c:	1fff8e5c 	.word	0x1fff8e5c
    b970:	1fff8e58 	.word	0x1fff8e58

0000b974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    b974:	b500      	push	{lr}
    b976:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b978:	f7f5 f94c 	bl	c14 <Sys_GetCoreID>
    b97c:	4603      	mov	r3, r0
    b97e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
    b980:	4a0d      	ldr	r2, [pc, #52]	; (b9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    b982:	9b01      	ldr	r3, [sp, #4]
    b984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b988:	1e5a      	subs	r2, r3, #1
    b98a:	490b      	ldr	r1, [pc, #44]	; (b9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    b98c:	9b01      	ldr	r3, [sp, #4]
    b98e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    b992:	4a0a      	ldr	r2, [pc, #40]	; (b9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
    b994:	9b01      	ldr	r3, [sp, #4]
    b996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b99a:	f003 0301 	and.w	r3, r3, #1
    b99e:	2b00      	cmp	r3, #0
    b9a0:	d106      	bne.n	b9b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    b9a2:	4a05      	ldr	r2, [pc, #20]	; (b9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    b9a4:	9b01      	ldr	r3, [sp, #4]
    b9a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9aa:	2b00      	cmp	r3, #0
    b9ac:	d100      	bne.n	b9b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b9ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b9b0:	bf00      	nop
    b9b2:	b003      	add	sp, #12
    b9b4:	f85d fb04 	ldr.w	pc, [sp], #4
    b9b8:	1fff8e5c 	.word	0x1fff8e5c
    b9bc:	1fff8e58 	.word	0x1fff8e58

0000b9c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    b9c0:	b500      	push	{lr}
    b9c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b9c4:	f7f5 f926 	bl	c14 <Sys_GetCoreID>
    b9c8:	4603      	mov	r3, r0
    b9ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
    b9cc:	4a10      	ldr	r2, [pc, #64]	; (ba10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    b9ce:	9b01      	ldr	r3, [sp, #4]
    b9d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9d4:	2b00      	cmp	r3, #0
    b9d6:	d10d      	bne.n	b9f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b9d8:	f7f5 f83a 	bl	a50 <Adc_schm_read_msr>
    b9dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b9de:	9b00      	ldr	r3, [sp, #0]
    b9e0:	f003 0301 	and.w	r3, r3, #1
    b9e4:	2b00      	cmp	r3, #0
    b9e6:	d100      	bne.n	b9ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b9e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    b9ea:	490a      	ldr	r1, [pc, #40]	; (ba14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
    b9ec:	9b01      	ldr	r3, [sp, #4]
    b9ee:	9a00      	ldr	r2, [sp, #0]
    b9f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
    b9f4:	4a06      	ldr	r2, [pc, #24]	; (ba10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    b9f6:	9b01      	ldr	r3, [sp, #4]
    b9f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9fc:	1c5a      	adds	r2, r3, #1
    b9fe:	4904      	ldr	r1, [pc, #16]	; (ba10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    ba00:	9b01      	ldr	r3, [sp, #4]
    ba02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ba06:	bf00      	nop
    ba08:	b003      	add	sp, #12
    ba0a:	f85d fb04 	ldr.w	pc, [sp], #4
    ba0e:	bf00      	nop
    ba10:	1fff8e64 	.word	0x1fff8e64
    ba14:	1fff8e60 	.word	0x1fff8e60

0000ba18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    ba18:	b500      	push	{lr}
    ba1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba1c:	f7f5 f8fa 	bl	c14 <Sys_GetCoreID>
    ba20:	4603      	mov	r3, r0
    ba22:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
    ba24:	4a0d      	ldr	r2, [pc, #52]	; (ba5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    ba26:	9b01      	ldr	r3, [sp, #4]
    ba28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba2c:	1e5a      	subs	r2, r3, #1
    ba2e:	490b      	ldr	r1, [pc, #44]	; (ba5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    ba30:	9b01      	ldr	r3, [sp, #4]
    ba32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    ba36:	4a0a      	ldr	r2, [pc, #40]	; (ba60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
    ba38:	9b01      	ldr	r3, [sp, #4]
    ba3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba3e:	f003 0301 	and.w	r3, r3, #1
    ba42:	2b00      	cmp	r3, #0
    ba44:	d106      	bne.n	ba54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    ba46:	4a05      	ldr	r2, [pc, #20]	; (ba5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    ba48:	9b01      	ldr	r3, [sp, #4]
    ba4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba4e:	2b00      	cmp	r3, #0
    ba50:	d100      	bne.n	ba54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ba52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ba54:	bf00      	nop
    ba56:	b003      	add	sp, #12
    ba58:	f85d fb04 	ldr.w	pc, [sp], #4
    ba5c:	1fff8e64 	.word	0x1fff8e64
    ba60:	1fff8e60 	.word	0x1fff8e60

0000ba64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    ba64:	b500      	push	{lr}
    ba66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba68:	f7f5 f8d4 	bl	c14 <Sys_GetCoreID>
    ba6c:	4603      	mov	r3, r0
    ba6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
    ba70:	4a10      	ldr	r2, [pc, #64]	; (bab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    ba72:	9b01      	ldr	r3, [sp, #4]
    ba74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba78:	2b00      	cmp	r3, #0
    ba7a:	d10d      	bne.n	ba98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ba7c:	f7f4 ffe8 	bl	a50 <Adc_schm_read_msr>
    ba80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ba82:	9b00      	ldr	r3, [sp, #0]
    ba84:	f003 0301 	and.w	r3, r3, #1
    ba88:	2b00      	cmp	r3, #0
    ba8a:	d100      	bne.n	ba8e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ba8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    ba8e:	490a      	ldr	r1, [pc, #40]	; (bab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
    ba90:	9b01      	ldr	r3, [sp, #4]
    ba92:	9a00      	ldr	r2, [sp, #0]
    ba94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
    ba98:	4a06      	ldr	r2, [pc, #24]	; (bab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    ba9a:	9b01      	ldr	r3, [sp, #4]
    ba9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    baa0:	1c5a      	adds	r2, r3, #1
    baa2:	4904      	ldr	r1, [pc, #16]	; (bab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    baa4:	9b01      	ldr	r3, [sp, #4]
    baa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    baaa:	bf00      	nop
    baac:	b003      	add	sp, #12
    baae:	f85d fb04 	ldr.w	pc, [sp], #4
    bab2:	bf00      	nop
    bab4:	1fff8e6c 	.word	0x1fff8e6c
    bab8:	1fff8e68 	.word	0x1fff8e68

0000babc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    babc:	b500      	push	{lr}
    babe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bac0:	f7f5 f8a8 	bl	c14 <Sys_GetCoreID>
    bac4:	4603      	mov	r3, r0
    bac6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
    bac8:	4a0d      	ldr	r2, [pc, #52]	; (bb00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    baca:	9b01      	ldr	r3, [sp, #4]
    bacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bad0:	1e5a      	subs	r2, r3, #1
    bad2:	490b      	ldr	r1, [pc, #44]	; (bb00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    bad4:	9b01      	ldr	r3, [sp, #4]
    bad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    bada:	4a0a      	ldr	r2, [pc, #40]	; (bb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
    badc:	9b01      	ldr	r3, [sp, #4]
    bade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bae2:	f003 0301 	and.w	r3, r3, #1
    bae6:	2b00      	cmp	r3, #0
    bae8:	d106      	bne.n	baf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    baea:	4a05      	ldr	r2, [pc, #20]	; (bb00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    baec:	9b01      	ldr	r3, [sp, #4]
    baee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    baf2:	2b00      	cmp	r3, #0
    baf4:	d100      	bne.n	baf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    baf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    baf8:	bf00      	nop
    bafa:	b003      	add	sp, #12
    bafc:	f85d fb04 	ldr.w	pc, [sp], #4
    bb00:	1fff8e6c 	.word	0x1fff8e6c
    bb04:	1fff8e68 	.word	0x1fff8e68

0000bb08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    bb08:	b500      	push	{lr}
    bb0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bb0c:	f7f5 f882 	bl	c14 <Sys_GetCoreID>
    bb10:	4603      	mov	r3, r0
    bb12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
    bb14:	4a10      	ldr	r2, [pc, #64]	; (bb58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    bb16:	9b01      	ldr	r3, [sp, #4]
    bb18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb1c:	2b00      	cmp	r3, #0
    bb1e:	d10d      	bne.n	bb3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bb20:	f7f4 ff96 	bl	a50 <Adc_schm_read_msr>
    bb24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bb26:	9b00      	ldr	r3, [sp, #0]
    bb28:	f003 0301 	and.w	r3, r3, #1
    bb2c:	2b00      	cmp	r3, #0
    bb2e:	d100      	bne.n	bb32 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bb30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    bb32:	490a      	ldr	r1, [pc, #40]	; (bb5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
    bb34:	9b01      	ldr	r3, [sp, #4]
    bb36:	9a00      	ldr	r2, [sp, #0]
    bb38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
    bb3c:	4a06      	ldr	r2, [pc, #24]	; (bb58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    bb3e:	9b01      	ldr	r3, [sp, #4]
    bb40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb44:	1c5a      	adds	r2, r3, #1
    bb46:	4904      	ldr	r1, [pc, #16]	; (bb58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    bb48:	9b01      	ldr	r3, [sp, #4]
    bb4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bb4e:	bf00      	nop
    bb50:	b003      	add	sp, #12
    bb52:	f85d fb04 	ldr.w	pc, [sp], #4
    bb56:	bf00      	nop
    bb58:	1fff8e74 	.word	0x1fff8e74
    bb5c:	1fff8e70 	.word	0x1fff8e70

0000bb60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    bb60:	b500      	push	{lr}
    bb62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bb64:	f7f5 f856 	bl	c14 <Sys_GetCoreID>
    bb68:	4603      	mov	r3, r0
    bb6a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
    bb6c:	4a0d      	ldr	r2, [pc, #52]	; (bba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    bb6e:	9b01      	ldr	r3, [sp, #4]
    bb70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb74:	1e5a      	subs	r2, r3, #1
    bb76:	490b      	ldr	r1, [pc, #44]	; (bba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    bb78:	9b01      	ldr	r3, [sp, #4]
    bb7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    bb7e:	4a0a      	ldr	r2, [pc, #40]	; (bba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
    bb80:	9b01      	ldr	r3, [sp, #4]
    bb82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb86:	f003 0301 	and.w	r3, r3, #1
    bb8a:	2b00      	cmp	r3, #0
    bb8c:	d106      	bne.n	bb9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    bb8e:	4a05      	ldr	r2, [pc, #20]	; (bba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    bb90:	9b01      	ldr	r3, [sp, #4]
    bb92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb96:	2b00      	cmp	r3, #0
    bb98:	d100      	bne.n	bb9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bb9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bb9c:	bf00      	nop
    bb9e:	b003      	add	sp, #12
    bba0:	f85d fb04 	ldr.w	pc, [sp], #4
    bba4:	1fff8e74 	.word	0x1fff8e74
    bba8:	1fff8e70 	.word	0x1fff8e70

0000bbac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    bbac:	b500      	push	{lr}
    bbae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bbb0:	f7f5 f830 	bl	c14 <Sys_GetCoreID>
    bbb4:	4603      	mov	r3, r0
    bbb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
    bbb8:	4a10      	ldr	r2, [pc, #64]	; (bbfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    bbba:	9b01      	ldr	r3, [sp, #4]
    bbbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbc0:	2b00      	cmp	r3, #0
    bbc2:	d10d      	bne.n	bbe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bbc4:	f7f4 ff44 	bl	a50 <Adc_schm_read_msr>
    bbc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bbca:	9b00      	ldr	r3, [sp, #0]
    bbcc:	f003 0301 	and.w	r3, r3, #1
    bbd0:	2b00      	cmp	r3, #0
    bbd2:	d100      	bne.n	bbd6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bbd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    bbd6:	490a      	ldr	r1, [pc, #40]	; (bc00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
    bbd8:	9b01      	ldr	r3, [sp, #4]
    bbda:	9a00      	ldr	r2, [sp, #0]
    bbdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
    bbe0:	4a06      	ldr	r2, [pc, #24]	; (bbfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    bbe2:	9b01      	ldr	r3, [sp, #4]
    bbe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbe8:	1c5a      	adds	r2, r3, #1
    bbea:	4904      	ldr	r1, [pc, #16]	; (bbfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    bbec:	9b01      	ldr	r3, [sp, #4]
    bbee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bbf2:	bf00      	nop
    bbf4:	b003      	add	sp, #12
    bbf6:	f85d fb04 	ldr.w	pc, [sp], #4
    bbfa:	bf00      	nop
    bbfc:	1fff8e7c 	.word	0x1fff8e7c
    bc00:	1fff8e78 	.word	0x1fff8e78

0000bc04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    bc04:	b500      	push	{lr}
    bc06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc08:	f7f5 f804 	bl	c14 <Sys_GetCoreID>
    bc0c:	4603      	mov	r3, r0
    bc0e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
    bc10:	4a0d      	ldr	r2, [pc, #52]	; (bc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    bc12:	9b01      	ldr	r3, [sp, #4]
    bc14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc18:	1e5a      	subs	r2, r3, #1
    bc1a:	490b      	ldr	r1, [pc, #44]	; (bc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    bc1c:	9b01      	ldr	r3, [sp, #4]
    bc1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    bc22:	4a0a      	ldr	r2, [pc, #40]	; (bc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
    bc24:	9b01      	ldr	r3, [sp, #4]
    bc26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc2a:	f003 0301 	and.w	r3, r3, #1
    bc2e:	2b00      	cmp	r3, #0
    bc30:	d106      	bne.n	bc40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    bc32:	4a05      	ldr	r2, [pc, #20]	; (bc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    bc34:	9b01      	ldr	r3, [sp, #4]
    bc36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc3a:	2b00      	cmp	r3, #0
    bc3c:	d100      	bne.n	bc40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bc3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bc40:	bf00      	nop
    bc42:	b003      	add	sp, #12
    bc44:	f85d fb04 	ldr.w	pc, [sp], #4
    bc48:	1fff8e7c 	.word	0x1fff8e7c
    bc4c:	1fff8e78 	.word	0x1fff8e78

0000bc50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    bc50:	b500      	push	{lr}
    bc52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc54:	f7f4 ffde 	bl	c14 <Sys_GetCoreID>
    bc58:	4603      	mov	r3, r0
    bc5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
    bc5c:	4a10      	ldr	r2, [pc, #64]	; (bca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    bc5e:	9b01      	ldr	r3, [sp, #4]
    bc60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc64:	2b00      	cmp	r3, #0
    bc66:	d10d      	bne.n	bc84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bc68:	f7f4 fef2 	bl	a50 <Adc_schm_read_msr>
    bc6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bc6e:	9b00      	ldr	r3, [sp, #0]
    bc70:	f003 0301 	and.w	r3, r3, #1
    bc74:	2b00      	cmp	r3, #0
    bc76:	d100      	bne.n	bc7a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bc78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    bc7a:	490a      	ldr	r1, [pc, #40]	; (bca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
    bc7c:	9b01      	ldr	r3, [sp, #4]
    bc7e:	9a00      	ldr	r2, [sp, #0]
    bc80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
    bc84:	4a06      	ldr	r2, [pc, #24]	; (bca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    bc86:	9b01      	ldr	r3, [sp, #4]
    bc88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc8c:	1c5a      	adds	r2, r3, #1
    bc8e:	4904      	ldr	r1, [pc, #16]	; (bca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    bc90:	9b01      	ldr	r3, [sp, #4]
    bc92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bc96:	bf00      	nop
    bc98:	b003      	add	sp, #12
    bc9a:	f85d fb04 	ldr.w	pc, [sp], #4
    bc9e:	bf00      	nop
    bca0:	1fff8e84 	.word	0x1fff8e84
    bca4:	1fff8e80 	.word	0x1fff8e80

0000bca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    bca8:	b500      	push	{lr}
    bcaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bcac:	f7f4 ffb2 	bl	c14 <Sys_GetCoreID>
    bcb0:	4603      	mov	r3, r0
    bcb2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
    bcb4:	4a0d      	ldr	r2, [pc, #52]	; (bcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    bcb6:	9b01      	ldr	r3, [sp, #4]
    bcb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcbc:	1e5a      	subs	r2, r3, #1
    bcbe:	490b      	ldr	r1, [pc, #44]	; (bcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    bcc0:	9b01      	ldr	r3, [sp, #4]
    bcc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    bcc6:	4a0a      	ldr	r2, [pc, #40]	; (bcf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
    bcc8:	9b01      	ldr	r3, [sp, #4]
    bcca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcce:	f003 0301 	and.w	r3, r3, #1
    bcd2:	2b00      	cmp	r3, #0
    bcd4:	d106      	bne.n	bce4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    bcd6:	4a05      	ldr	r2, [pc, #20]	; (bcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    bcd8:	9b01      	ldr	r3, [sp, #4]
    bcda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcde:	2b00      	cmp	r3, #0
    bce0:	d100      	bne.n	bce4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bce2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bce4:	bf00      	nop
    bce6:	b003      	add	sp, #12
    bce8:	f85d fb04 	ldr.w	pc, [sp], #4
    bcec:	1fff8e84 	.word	0x1fff8e84
    bcf0:	1fff8e80 	.word	0x1fff8e80

0000bcf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    bcf4:	b500      	push	{lr}
    bcf6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bcf8:	f7f4 ff8c 	bl	c14 <Sys_GetCoreID>
    bcfc:	4603      	mov	r3, r0
    bcfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
    bd00:	4a10      	ldr	r2, [pc, #64]	; (bd44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    bd02:	9b01      	ldr	r3, [sp, #4]
    bd04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd08:	2b00      	cmp	r3, #0
    bd0a:	d10d      	bne.n	bd28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bd0c:	f7f4 fea0 	bl	a50 <Adc_schm_read_msr>
    bd10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bd12:	9b00      	ldr	r3, [sp, #0]
    bd14:	f003 0301 	and.w	r3, r3, #1
    bd18:	2b00      	cmp	r3, #0
    bd1a:	d100      	bne.n	bd1e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bd1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    bd1e:	490a      	ldr	r1, [pc, #40]	; (bd48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
    bd20:	9b01      	ldr	r3, [sp, #4]
    bd22:	9a00      	ldr	r2, [sp, #0]
    bd24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
    bd28:	4a06      	ldr	r2, [pc, #24]	; (bd44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    bd2a:	9b01      	ldr	r3, [sp, #4]
    bd2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd30:	1c5a      	adds	r2, r3, #1
    bd32:	4904      	ldr	r1, [pc, #16]	; (bd44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    bd34:	9b01      	ldr	r3, [sp, #4]
    bd36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bd3a:	bf00      	nop
    bd3c:	b003      	add	sp, #12
    bd3e:	f85d fb04 	ldr.w	pc, [sp], #4
    bd42:	bf00      	nop
    bd44:	1fff8e8c 	.word	0x1fff8e8c
    bd48:	1fff8e88 	.word	0x1fff8e88

0000bd4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    bd4c:	b500      	push	{lr}
    bd4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd50:	f7f4 ff60 	bl	c14 <Sys_GetCoreID>
    bd54:	4603      	mov	r3, r0
    bd56:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
    bd58:	4a0d      	ldr	r2, [pc, #52]	; (bd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    bd5a:	9b01      	ldr	r3, [sp, #4]
    bd5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd60:	1e5a      	subs	r2, r3, #1
    bd62:	490b      	ldr	r1, [pc, #44]	; (bd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    bd64:	9b01      	ldr	r3, [sp, #4]
    bd66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    bd6a:	4a0a      	ldr	r2, [pc, #40]	; (bd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
    bd6c:	9b01      	ldr	r3, [sp, #4]
    bd6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd72:	f003 0301 	and.w	r3, r3, #1
    bd76:	2b00      	cmp	r3, #0
    bd78:	d106      	bne.n	bd88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    bd7a:	4a05      	ldr	r2, [pc, #20]	; (bd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    bd7c:	9b01      	ldr	r3, [sp, #4]
    bd7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd82:	2b00      	cmp	r3, #0
    bd84:	d100      	bne.n	bd88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bd86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bd88:	bf00      	nop
    bd8a:	b003      	add	sp, #12
    bd8c:	f85d fb04 	ldr.w	pc, [sp], #4
    bd90:	1fff8e8c 	.word	0x1fff8e8c
    bd94:	1fff8e88 	.word	0x1fff8e88

0000bd98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    bd98:	b500      	push	{lr}
    bd9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd9c:	f7f4 ff3a 	bl	c14 <Sys_GetCoreID>
    bda0:	4603      	mov	r3, r0
    bda2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
    bda4:	4a10      	ldr	r2, [pc, #64]	; (bde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    bda6:	9b01      	ldr	r3, [sp, #4]
    bda8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdac:	2b00      	cmp	r3, #0
    bdae:	d10d      	bne.n	bdcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bdb0:	f7f4 fe4e 	bl	a50 <Adc_schm_read_msr>
    bdb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bdb6:	9b00      	ldr	r3, [sp, #0]
    bdb8:	f003 0301 	and.w	r3, r3, #1
    bdbc:	2b00      	cmp	r3, #0
    bdbe:	d100      	bne.n	bdc2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bdc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    bdc2:	490a      	ldr	r1, [pc, #40]	; (bdec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
    bdc4:	9b01      	ldr	r3, [sp, #4]
    bdc6:	9a00      	ldr	r2, [sp, #0]
    bdc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
    bdcc:	4a06      	ldr	r2, [pc, #24]	; (bde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    bdce:	9b01      	ldr	r3, [sp, #4]
    bdd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdd4:	1c5a      	adds	r2, r3, #1
    bdd6:	4904      	ldr	r1, [pc, #16]	; (bde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    bdd8:	9b01      	ldr	r3, [sp, #4]
    bdda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bdde:	bf00      	nop
    bde0:	b003      	add	sp, #12
    bde2:	f85d fb04 	ldr.w	pc, [sp], #4
    bde6:	bf00      	nop
    bde8:	1fff8e94 	.word	0x1fff8e94
    bdec:	1fff8e90 	.word	0x1fff8e90

0000bdf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    bdf0:	b500      	push	{lr}
    bdf2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bdf4:	f7f4 ff0e 	bl	c14 <Sys_GetCoreID>
    bdf8:	4603      	mov	r3, r0
    bdfa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
    bdfc:	4a0d      	ldr	r2, [pc, #52]	; (be34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    bdfe:	9b01      	ldr	r3, [sp, #4]
    be00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be04:	1e5a      	subs	r2, r3, #1
    be06:	490b      	ldr	r1, [pc, #44]	; (be34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    be08:	9b01      	ldr	r3, [sp, #4]
    be0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    be0e:	4a0a      	ldr	r2, [pc, #40]	; (be38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
    be10:	9b01      	ldr	r3, [sp, #4]
    be12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be16:	f003 0301 	and.w	r3, r3, #1
    be1a:	2b00      	cmp	r3, #0
    be1c:	d106      	bne.n	be2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    be1e:	4a05      	ldr	r2, [pc, #20]	; (be34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    be20:	9b01      	ldr	r3, [sp, #4]
    be22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be26:	2b00      	cmp	r3, #0
    be28:	d100      	bne.n	be2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    be2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    be2c:	bf00      	nop
    be2e:	b003      	add	sp, #12
    be30:	f85d fb04 	ldr.w	pc, [sp], #4
    be34:	1fff8e94 	.word	0x1fff8e94
    be38:	1fff8e90 	.word	0x1fff8e90

0000be3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    be3c:	b500      	push	{lr}
    be3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be40:	f7f4 fee8 	bl	c14 <Sys_GetCoreID>
    be44:	4603      	mov	r3, r0
    be46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
    be48:	4a10      	ldr	r2, [pc, #64]	; (be8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    be4a:	9b01      	ldr	r3, [sp, #4]
    be4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be50:	2b00      	cmp	r3, #0
    be52:	d10d      	bne.n	be70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    be54:	f7f4 fdfc 	bl	a50 <Adc_schm_read_msr>
    be58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    be5a:	9b00      	ldr	r3, [sp, #0]
    be5c:	f003 0301 	and.w	r3, r3, #1
    be60:	2b00      	cmp	r3, #0
    be62:	d100      	bne.n	be66 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    be64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
    be66:	490a      	ldr	r1, [pc, #40]	; (be90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
    be68:	9b01      	ldr	r3, [sp, #4]
    be6a:	9a00      	ldr	r2, [sp, #0]
    be6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
    be70:	4a06      	ldr	r2, [pc, #24]	; (be8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    be72:	9b01      	ldr	r3, [sp, #4]
    be74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be78:	1c5a      	adds	r2, r3, #1
    be7a:	4904      	ldr	r1, [pc, #16]	; (be8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    be7c:	9b01      	ldr	r3, [sp, #4]
    be7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    be82:	bf00      	nop
    be84:	b003      	add	sp, #12
    be86:	f85d fb04 	ldr.w	pc, [sp], #4
    be8a:	bf00      	nop
    be8c:	1fff8e9c 	.word	0x1fff8e9c
    be90:	1fff8e98 	.word	0x1fff8e98

0000be94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    be94:	b500      	push	{lr}
    be96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be98:	f7f4 febc 	bl	c14 <Sys_GetCoreID>
    be9c:	4603      	mov	r3, r0
    be9e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
    bea0:	4a0d      	ldr	r2, [pc, #52]	; (bed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    bea2:	9b01      	ldr	r3, [sp, #4]
    bea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bea8:	1e5a      	subs	r2, r3, #1
    beaa:	490b      	ldr	r1, [pc, #44]	; (bed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    beac:	9b01      	ldr	r3, [sp, #4]
    beae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
    beb2:	4a0a      	ldr	r2, [pc, #40]	; (bedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
    beb4:	9b01      	ldr	r3, [sp, #4]
    beb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    beba:	f003 0301 	and.w	r3, r3, #1
    bebe:	2b00      	cmp	r3, #0
    bec0:	d106      	bne.n	bed0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    bec2:	4a05      	ldr	r2, [pc, #20]	; (bed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    bec4:	9b01      	ldr	r3, [sp, #4]
    bec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    beca:	2b00      	cmp	r3, #0
    becc:	d100      	bne.n	bed0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bece:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bed0:	bf00      	nop
    bed2:	b003      	add	sp, #12
    bed4:	f85d fb04 	ldr.w	pc, [sp], #4
    bed8:	1fff8e9c 	.word	0x1fff8e9c
    bedc:	1fff8e98 	.word	0x1fff8e98

0000bee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    bee0:	b500      	push	{lr}
    bee2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bee4:	f7f4 fe96 	bl	c14 <Sys_GetCoreID>
    bee8:	4603      	mov	r3, r0
    beea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
    beec:	4a10      	ldr	r2, [pc, #64]	; (bf30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    beee:	9b01      	ldr	r3, [sp, #4]
    bef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bef4:	2b00      	cmp	r3, #0
    bef6:	d10d      	bne.n	bf14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bef8:	f7f4 fdaa 	bl	a50 <Adc_schm_read_msr>
    befc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    befe:	9b00      	ldr	r3, [sp, #0]
    bf00:	f003 0301 	and.w	r3, r3, #1
    bf04:	2b00      	cmp	r3, #0
    bf06:	d100      	bne.n	bf0a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bf08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
    bf0a:	490a      	ldr	r1, [pc, #40]	; (bf34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
    bf0c:	9b01      	ldr	r3, [sp, #4]
    bf0e:	9a00      	ldr	r2, [sp, #0]
    bf10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
    bf14:	4a06      	ldr	r2, [pc, #24]	; (bf30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    bf16:	9b01      	ldr	r3, [sp, #4]
    bf18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf1c:	1c5a      	adds	r2, r3, #1
    bf1e:	4904      	ldr	r1, [pc, #16]	; (bf30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    bf20:	9b01      	ldr	r3, [sp, #4]
    bf22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bf26:	bf00      	nop
    bf28:	b003      	add	sp, #12
    bf2a:	f85d fb04 	ldr.w	pc, [sp], #4
    bf2e:	bf00      	nop
    bf30:	1fff8ea4 	.word	0x1fff8ea4
    bf34:	1fff8ea0 	.word	0x1fff8ea0

0000bf38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    bf38:	b500      	push	{lr}
    bf3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf3c:	f7f4 fe6a 	bl	c14 <Sys_GetCoreID>
    bf40:	4603      	mov	r3, r0
    bf42:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
    bf44:	4a0d      	ldr	r2, [pc, #52]	; (bf7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    bf46:	9b01      	ldr	r3, [sp, #4]
    bf48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf4c:	1e5a      	subs	r2, r3, #1
    bf4e:	490b      	ldr	r1, [pc, #44]	; (bf7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    bf50:	9b01      	ldr	r3, [sp, #4]
    bf52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
    bf56:	4a0a      	ldr	r2, [pc, #40]	; (bf80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
    bf58:	9b01      	ldr	r3, [sp, #4]
    bf5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf5e:	f003 0301 	and.w	r3, r3, #1
    bf62:	2b00      	cmp	r3, #0
    bf64:	d106      	bne.n	bf74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    bf66:	4a05      	ldr	r2, [pc, #20]	; (bf7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    bf68:	9b01      	ldr	r3, [sp, #4]
    bf6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf6e:	2b00      	cmp	r3, #0
    bf70:	d100      	bne.n	bf74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bf72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bf74:	bf00      	nop
    bf76:	b003      	add	sp, #12
    bf78:	f85d fb04 	ldr.w	pc, [sp], #4
    bf7c:	1fff8ea4 	.word	0x1fff8ea4
    bf80:	1fff8ea0 	.word	0x1fff8ea0

0000bf84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    bf84:	b500      	push	{lr}
    bf86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf88:	f7f4 fe44 	bl	c14 <Sys_GetCoreID>
    bf8c:	4603      	mov	r3, r0
    bf8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
    bf90:	4a10      	ldr	r2, [pc, #64]	; (bfd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    bf92:	9b01      	ldr	r3, [sp, #4]
    bf94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf98:	2b00      	cmp	r3, #0
    bf9a:	d10d      	bne.n	bfb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bf9c:	f7f4 fd58 	bl	a50 <Adc_schm_read_msr>
    bfa0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bfa2:	9b00      	ldr	r3, [sp, #0]
    bfa4:	f003 0301 	and.w	r3, r3, #1
    bfa8:	2b00      	cmp	r3, #0
    bfaa:	d100      	bne.n	bfae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bfac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
    bfae:	490a      	ldr	r1, [pc, #40]	; (bfd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
    bfb0:	9b01      	ldr	r3, [sp, #4]
    bfb2:	9a00      	ldr	r2, [sp, #0]
    bfb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
    bfb8:	4a06      	ldr	r2, [pc, #24]	; (bfd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    bfba:	9b01      	ldr	r3, [sp, #4]
    bfbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfc0:	1c5a      	adds	r2, r3, #1
    bfc2:	4904      	ldr	r1, [pc, #16]	; (bfd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    bfc4:	9b01      	ldr	r3, [sp, #4]
    bfc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bfca:	bf00      	nop
    bfcc:	b003      	add	sp, #12
    bfce:	f85d fb04 	ldr.w	pc, [sp], #4
    bfd2:	bf00      	nop
    bfd4:	1fff8eac 	.word	0x1fff8eac
    bfd8:	1fff8ea8 	.word	0x1fff8ea8

0000bfdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    bfdc:	b500      	push	{lr}
    bfde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bfe0:	f7f4 fe18 	bl	c14 <Sys_GetCoreID>
    bfe4:	4603      	mov	r3, r0
    bfe6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
    bfe8:	4a0d      	ldr	r2, [pc, #52]	; (c020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    bfea:	9b01      	ldr	r3, [sp, #4]
    bfec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bff0:	1e5a      	subs	r2, r3, #1
    bff2:	490b      	ldr	r1, [pc, #44]	; (c020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    bff4:	9b01      	ldr	r3, [sp, #4]
    bff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
    bffa:	4a0a      	ldr	r2, [pc, #40]	; (c024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
    bffc:	9b01      	ldr	r3, [sp, #4]
    bffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c002:	f003 0301 	and.w	r3, r3, #1
    c006:	2b00      	cmp	r3, #0
    c008:	d106      	bne.n	c018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    c00a:	4a05      	ldr	r2, [pc, #20]	; (c020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    c00c:	9b01      	ldr	r3, [sp, #4]
    c00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c012:	2b00      	cmp	r3, #0
    c014:	d100      	bne.n	c018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c016:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c018:	bf00      	nop
    c01a:	b003      	add	sp, #12
    c01c:	f85d fb04 	ldr.w	pc, [sp], #4
    c020:	1fff8eac 	.word	0x1fff8eac
    c024:	1fff8ea8 	.word	0x1fff8ea8

0000c028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    c028:	b500      	push	{lr}
    c02a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c02c:	f7f4 fdf2 	bl	c14 <Sys_GetCoreID>
    c030:	4603      	mov	r3, r0
    c032:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
    c034:	4a10      	ldr	r2, [pc, #64]	; (c078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c036:	9b01      	ldr	r3, [sp, #4]
    c038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c03c:	2b00      	cmp	r3, #0
    c03e:	d10d      	bne.n	c05c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c040:	f7f4 fd06 	bl	a50 <Adc_schm_read_msr>
    c044:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c046:	9b00      	ldr	r3, [sp, #0]
    c048:	f003 0301 	and.w	r3, r3, #1
    c04c:	2b00      	cmp	r3, #0
    c04e:	d100      	bne.n	c052 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c050:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
    c052:	490a      	ldr	r1, [pc, #40]	; (c07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
    c054:	9b01      	ldr	r3, [sp, #4]
    c056:	9a00      	ldr	r2, [sp, #0]
    c058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
    c05c:	4a06      	ldr	r2, [pc, #24]	; (c078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c05e:	9b01      	ldr	r3, [sp, #4]
    c060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c064:	1c5a      	adds	r2, r3, #1
    c066:	4904      	ldr	r1, [pc, #16]	; (c078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c068:	9b01      	ldr	r3, [sp, #4]
    c06a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c06e:	bf00      	nop
    c070:	b003      	add	sp, #12
    c072:	f85d fb04 	ldr.w	pc, [sp], #4
    c076:	bf00      	nop
    c078:	1fff8eb4 	.word	0x1fff8eb4
    c07c:	1fff8eb0 	.word	0x1fff8eb0

0000c080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    c080:	b500      	push	{lr}
    c082:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c084:	f7f4 fdc6 	bl	c14 <Sys_GetCoreID>
    c088:	4603      	mov	r3, r0
    c08a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
    c08c:	4a0d      	ldr	r2, [pc, #52]	; (c0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c08e:	9b01      	ldr	r3, [sp, #4]
    c090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c094:	1e5a      	subs	r2, r3, #1
    c096:	490b      	ldr	r1, [pc, #44]	; (c0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c098:	9b01      	ldr	r3, [sp, #4]
    c09a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
    c09e:	4a0a      	ldr	r2, [pc, #40]	; (c0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
    c0a0:	9b01      	ldr	r3, [sp, #4]
    c0a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0a6:	f003 0301 	and.w	r3, r3, #1
    c0aa:	2b00      	cmp	r3, #0
    c0ac:	d106      	bne.n	c0bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    c0ae:	4a05      	ldr	r2, [pc, #20]	; (c0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c0b0:	9b01      	ldr	r3, [sp, #4]
    c0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0b6:	2b00      	cmp	r3, #0
    c0b8:	d100      	bne.n	c0bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c0ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c0bc:	bf00      	nop
    c0be:	b003      	add	sp, #12
    c0c0:	f85d fb04 	ldr.w	pc, [sp], #4
    c0c4:	1fff8eb4 	.word	0x1fff8eb4
    c0c8:	1fff8eb0 	.word	0x1fff8eb0

0000c0cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    c0cc:	b500      	push	{lr}
    c0ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c0d0:	f7f4 fda0 	bl	c14 <Sys_GetCoreID>
    c0d4:	4603      	mov	r3, r0
    c0d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
    c0d8:	4a10      	ldr	r2, [pc, #64]	; (c11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c0da:	9b01      	ldr	r3, [sp, #4]
    c0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0e0:	2b00      	cmp	r3, #0
    c0e2:	d10d      	bne.n	c100 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c0e4:	f7f4 fcb4 	bl	a50 <Adc_schm_read_msr>
    c0e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c0ea:	9b00      	ldr	r3, [sp, #0]
    c0ec:	f003 0301 	and.w	r3, r3, #1
    c0f0:	2b00      	cmp	r3, #0
    c0f2:	d100      	bne.n	c0f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c0f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
    c0f6:	490a      	ldr	r1, [pc, #40]	; (c120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
    c0f8:	9b01      	ldr	r3, [sp, #4]
    c0fa:	9a00      	ldr	r2, [sp, #0]
    c0fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
    c100:	4a06      	ldr	r2, [pc, #24]	; (c11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c102:	9b01      	ldr	r3, [sp, #4]
    c104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c108:	1c5a      	adds	r2, r3, #1
    c10a:	4904      	ldr	r1, [pc, #16]	; (c11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c10c:	9b01      	ldr	r3, [sp, #4]
    c10e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c112:	bf00      	nop
    c114:	b003      	add	sp, #12
    c116:	f85d fb04 	ldr.w	pc, [sp], #4
    c11a:	bf00      	nop
    c11c:	1fff8ebc 	.word	0x1fff8ebc
    c120:	1fff8eb8 	.word	0x1fff8eb8

0000c124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    c124:	b500      	push	{lr}
    c126:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c128:	f7f4 fd74 	bl	c14 <Sys_GetCoreID>
    c12c:	4603      	mov	r3, r0
    c12e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
    c130:	4a0d      	ldr	r2, [pc, #52]	; (c168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c132:	9b01      	ldr	r3, [sp, #4]
    c134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c138:	1e5a      	subs	r2, r3, #1
    c13a:	490b      	ldr	r1, [pc, #44]	; (c168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c13c:	9b01      	ldr	r3, [sp, #4]
    c13e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
    c142:	4a0a      	ldr	r2, [pc, #40]	; (c16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
    c144:	9b01      	ldr	r3, [sp, #4]
    c146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c14a:	f003 0301 	and.w	r3, r3, #1
    c14e:	2b00      	cmp	r3, #0
    c150:	d106      	bne.n	c160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    c152:	4a05      	ldr	r2, [pc, #20]	; (c168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c154:	9b01      	ldr	r3, [sp, #4]
    c156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c15a:	2b00      	cmp	r3, #0
    c15c:	d100      	bne.n	c160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c15e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c160:	bf00      	nop
    c162:	b003      	add	sp, #12
    c164:	f85d fb04 	ldr.w	pc, [sp], #4
    c168:	1fff8ebc 	.word	0x1fff8ebc
    c16c:	1fff8eb8 	.word	0x1fff8eb8

0000c170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    c170:	b500      	push	{lr}
    c172:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c174:	f7f4 fd4e 	bl	c14 <Sys_GetCoreID>
    c178:	4603      	mov	r3, r0
    c17a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
    c17c:	4a10      	ldr	r2, [pc, #64]	; (c1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c17e:	9b01      	ldr	r3, [sp, #4]
    c180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c184:	2b00      	cmp	r3, #0
    c186:	d10d      	bne.n	c1a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c188:	f7f4 fc62 	bl	a50 <Adc_schm_read_msr>
    c18c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c18e:	9b00      	ldr	r3, [sp, #0]
    c190:	f003 0301 	and.w	r3, r3, #1
    c194:	2b00      	cmp	r3, #0
    c196:	d100      	bne.n	c19a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c198:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
    c19a:	490a      	ldr	r1, [pc, #40]	; (c1c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
    c19c:	9b01      	ldr	r3, [sp, #4]
    c19e:	9a00      	ldr	r2, [sp, #0]
    c1a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
    c1a4:	4a06      	ldr	r2, [pc, #24]	; (c1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c1a6:	9b01      	ldr	r3, [sp, #4]
    c1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1ac:	1c5a      	adds	r2, r3, #1
    c1ae:	4904      	ldr	r1, [pc, #16]	; (c1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c1b0:	9b01      	ldr	r3, [sp, #4]
    c1b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c1b6:	bf00      	nop
    c1b8:	b003      	add	sp, #12
    c1ba:	f85d fb04 	ldr.w	pc, [sp], #4
    c1be:	bf00      	nop
    c1c0:	1fff8ec4 	.word	0x1fff8ec4
    c1c4:	1fff8ec0 	.word	0x1fff8ec0

0000c1c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    c1c8:	b500      	push	{lr}
    c1ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c1cc:	f7f4 fd22 	bl	c14 <Sys_GetCoreID>
    c1d0:	4603      	mov	r3, r0
    c1d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
    c1d4:	4a0d      	ldr	r2, [pc, #52]	; (c20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c1d6:	9b01      	ldr	r3, [sp, #4]
    c1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1dc:	1e5a      	subs	r2, r3, #1
    c1de:	490b      	ldr	r1, [pc, #44]	; (c20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c1e0:	9b01      	ldr	r3, [sp, #4]
    c1e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
    c1e6:	4a0a      	ldr	r2, [pc, #40]	; (c210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
    c1e8:	9b01      	ldr	r3, [sp, #4]
    c1ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1ee:	f003 0301 	and.w	r3, r3, #1
    c1f2:	2b00      	cmp	r3, #0
    c1f4:	d106      	bne.n	c204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    c1f6:	4a05      	ldr	r2, [pc, #20]	; (c20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c1f8:	9b01      	ldr	r3, [sp, #4]
    c1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1fe:	2b00      	cmp	r3, #0
    c200:	d100      	bne.n	c204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c202:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c204:	bf00      	nop
    c206:	b003      	add	sp, #12
    c208:	f85d fb04 	ldr.w	pc, [sp], #4
    c20c:	1fff8ec4 	.word	0x1fff8ec4
    c210:	1fff8ec0 	.word	0x1fff8ec0

0000c214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    c214:	b500      	push	{lr}
    c216:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c218:	f7f4 fcfc 	bl	c14 <Sys_GetCoreID>
    c21c:	4603      	mov	r3, r0
    c21e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
    c220:	4a10      	ldr	r2, [pc, #64]	; (c264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c222:	9b01      	ldr	r3, [sp, #4]
    c224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c228:	2b00      	cmp	r3, #0
    c22a:	d10d      	bne.n	c248 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c22c:	f7f4 fc10 	bl	a50 <Adc_schm_read_msr>
    c230:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c232:	9b00      	ldr	r3, [sp, #0]
    c234:	f003 0301 	and.w	r3, r3, #1
    c238:	2b00      	cmp	r3, #0
    c23a:	d100      	bne.n	c23e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c23c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
    c23e:	490a      	ldr	r1, [pc, #40]	; (c268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
    c240:	9b01      	ldr	r3, [sp, #4]
    c242:	9a00      	ldr	r2, [sp, #0]
    c244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
    c248:	4a06      	ldr	r2, [pc, #24]	; (c264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c24a:	9b01      	ldr	r3, [sp, #4]
    c24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c250:	1c5a      	adds	r2, r3, #1
    c252:	4904      	ldr	r1, [pc, #16]	; (c264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c254:	9b01      	ldr	r3, [sp, #4]
    c256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c25a:	bf00      	nop
    c25c:	b003      	add	sp, #12
    c25e:	f85d fb04 	ldr.w	pc, [sp], #4
    c262:	bf00      	nop
    c264:	1fff8ecc 	.word	0x1fff8ecc
    c268:	1fff8ec8 	.word	0x1fff8ec8

0000c26c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    c26c:	b500      	push	{lr}
    c26e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c270:	f7f4 fcd0 	bl	c14 <Sys_GetCoreID>
    c274:	4603      	mov	r3, r0
    c276:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
    c278:	4a0d      	ldr	r2, [pc, #52]	; (c2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c27a:	9b01      	ldr	r3, [sp, #4]
    c27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c280:	1e5a      	subs	r2, r3, #1
    c282:	490b      	ldr	r1, [pc, #44]	; (c2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c284:	9b01      	ldr	r3, [sp, #4]
    c286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
    c28a:	4a0a      	ldr	r2, [pc, #40]	; (c2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
    c28c:	9b01      	ldr	r3, [sp, #4]
    c28e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c292:	f003 0301 	and.w	r3, r3, #1
    c296:	2b00      	cmp	r3, #0
    c298:	d106      	bne.n	c2a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    c29a:	4a05      	ldr	r2, [pc, #20]	; (c2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c29c:	9b01      	ldr	r3, [sp, #4]
    c29e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2a2:	2b00      	cmp	r3, #0
    c2a4:	d100      	bne.n	c2a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c2a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c2a8:	bf00      	nop
    c2aa:	b003      	add	sp, #12
    c2ac:	f85d fb04 	ldr.w	pc, [sp], #4
    c2b0:	1fff8ecc 	.word	0x1fff8ecc
    c2b4:	1fff8ec8 	.word	0x1fff8ec8

0000c2b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    c2b8:	b500      	push	{lr}
    c2ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c2bc:	f7f4 fcaa 	bl	c14 <Sys_GetCoreID>
    c2c0:	4603      	mov	r3, r0
    c2c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
    c2c4:	4a10      	ldr	r2, [pc, #64]	; (c308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c2c6:	9b01      	ldr	r3, [sp, #4]
    c2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2cc:	2b00      	cmp	r3, #0
    c2ce:	d10d      	bne.n	c2ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c2d0:	f7f4 fbbe 	bl	a50 <Adc_schm_read_msr>
    c2d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c2d6:	9b00      	ldr	r3, [sp, #0]
    c2d8:	f003 0301 	and.w	r3, r3, #1
    c2dc:	2b00      	cmp	r3, #0
    c2de:	d100      	bne.n	c2e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c2e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
    c2e2:	490a      	ldr	r1, [pc, #40]	; (c30c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
    c2e4:	9b01      	ldr	r3, [sp, #4]
    c2e6:	9a00      	ldr	r2, [sp, #0]
    c2e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
    c2ec:	4a06      	ldr	r2, [pc, #24]	; (c308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c2ee:	9b01      	ldr	r3, [sp, #4]
    c2f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2f4:	1c5a      	adds	r2, r3, #1
    c2f6:	4904      	ldr	r1, [pc, #16]	; (c308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c2f8:	9b01      	ldr	r3, [sp, #4]
    c2fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c2fe:	bf00      	nop
    c300:	b003      	add	sp, #12
    c302:	f85d fb04 	ldr.w	pc, [sp], #4
    c306:	bf00      	nop
    c308:	1fff8ed4 	.word	0x1fff8ed4
    c30c:	1fff8ed0 	.word	0x1fff8ed0

0000c310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    c310:	b500      	push	{lr}
    c312:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c314:	f7f4 fc7e 	bl	c14 <Sys_GetCoreID>
    c318:	4603      	mov	r3, r0
    c31a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
    c31c:	4a0d      	ldr	r2, [pc, #52]	; (c354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c31e:	9b01      	ldr	r3, [sp, #4]
    c320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c324:	1e5a      	subs	r2, r3, #1
    c326:	490b      	ldr	r1, [pc, #44]	; (c354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c328:	9b01      	ldr	r3, [sp, #4]
    c32a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
    c32e:	4a0a      	ldr	r2, [pc, #40]	; (c358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
    c330:	9b01      	ldr	r3, [sp, #4]
    c332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c336:	f003 0301 	and.w	r3, r3, #1
    c33a:	2b00      	cmp	r3, #0
    c33c:	d106      	bne.n	c34c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    c33e:	4a05      	ldr	r2, [pc, #20]	; (c354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c340:	9b01      	ldr	r3, [sp, #4]
    c342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c346:	2b00      	cmp	r3, #0
    c348:	d100      	bne.n	c34c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c34a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c34c:	bf00      	nop
    c34e:	b003      	add	sp, #12
    c350:	f85d fb04 	ldr.w	pc, [sp], #4
    c354:	1fff8ed4 	.word	0x1fff8ed4
    c358:	1fff8ed0 	.word	0x1fff8ed0

0000c35c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    c35c:	b500      	push	{lr}
    c35e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c360:	f7f4 fc58 	bl	c14 <Sys_GetCoreID>
    c364:	4603      	mov	r3, r0
    c366:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
    c368:	4a10      	ldr	r2, [pc, #64]	; (c3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c36a:	9b01      	ldr	r3, [sp, #4]
    c36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c370:	2b00      	cmp	r3, #0
    c372:	d10d      	bne.n	c390 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c374:	f7f4 fb6c 	bl	a50 <Adc_schm_read_msr>
    c378:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c37a:	9b00      	ldr	r3, [sp, #0]
    c37c:	f003 0301 	and.w	r3, r3, #1
    c380:	2b00      	cmp	r3, #0
    c382:	d100      	bne.n	c386 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c384:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
    c386:	490a      	ldr	r1, [pc, #40]	; (c3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
    c388:	9b01      	ldr	r3, [sp, #4]
    c38a:	9a00      	ldr	r2, [sp, #0]
    c38c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
    c390:	4a06      	ldr	r2, [pc, #24]	; (c3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c392:	9b01      	ldr	r3, [sp, #4]
    c394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c398:	1c5a      	adds	r2, r3, #1
    c39a:	4904      	ldr	r1, [pc, #16]	; (c3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c39c:	9b01      	ldr	r3, [sp, #4]
    c39e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c3a2:	bf00      	nop
    c3a4:	b003      	add	sp, #12
    c3a6:	f85d fb04 	ldr.w	pc, [sp], #4
    c3aa:	bf00      	nop
    c3ac:	1fff8edc 	.word	0x1fff8edc
    c3b0:	1fff8ed8 	.word	0x1fff8ed8

0000c3b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    c3b4:	b500      	push	{lr}
    c3b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c3b8:	f7f4 fc2c 	bl	c14 <Sys_GetCoreID>
    c3bc:	4603      	mov	r3, r0
    c3be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
    c3c0:	4a0d      	ldr	r2, [pc, #52]	; (c3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c3c2:	9b01      	ldr	r3, [sp, #4]
    c3c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3c8:	1e5a      	subs	r2, r3, #1
    c3ca:	490b      	ldr	r1, [pc, #44]	; (c3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c3cc:	9b01      	ldr	r3, [sp, #4]
    c3ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
    c3d2:	4a0a      	ldr	r2, [pc, #40]	; (c3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
    c3d4:	9b01      	ldr	r3, [sp, #4]
    c3d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3da:	f003 0301 	and.w	r3, r3, #1
    c3de:	2b00      	cmp	r3, #0
    c3e0:	d106      	bne.n	c3f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    c3e2:	4a05      	ldr	r2, [pc, #20]	; (c3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c3e4:	9b01      	ldr	r3, [sp, #4]
    c3e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3ea:	2b00      	cmp	r3, #0
    c3ec:	d100      	bne.n	c3f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c3ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c3f0:	bf00      	nop
    c3f2:	b003      	add	sp, #12
    c3f4:	f85d fb04 	ldr.w	pc, [sp], #4
    c3f8:	1fff8edc 	.word	0x1fff8edc
    c3fc:	1fff8ed8 	.word	0x1fff8ed8

0000c400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    c400:	b500      	push	{lr}
    c402:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c404:	f7f4 fc06 	bl	c14 <Sys_GetCoreID>
    c408:	4603      	mov	r3, r0
    c40a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
    c40c:	4a10      	ldr	r2, [pc, #64]	; (c450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    c40e:	9b01      	ldr	r3, [sp, #4]
    c410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c414:	2b00      	cmp	r3, #0
    c416:	d10d      	bne.n	c434 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c418:	f7f4 fb1a 	bl	a50 <Adc_schm_read_msr>
    c41c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c41e:	9b00      	ldr	r3, [sp, #0]
    c420:	f003 0301 	and.w	r3, r3, #1
    c424:	2b00      	cmp	r3, #0
    c426:	d100      	bne.n	c42a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c428:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
    c42a:	490a      	ldr	r1, [pc, #40]	; (c454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
    c42c:	9b01      	ldr	r3, [sp, #4]
    c42e:	9a00      	ldr	r2, [sp, #0]
    c430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
    c434:	4a06      	ldr	r2, [pc, #24]	; (c450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    c436:	9b01      	ldr	r3, [sp, #4]
    c438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c43c:	1c5a      	adds	r2, r3, #1
    c43e:	4904      	ldr	r1, [pc, #16]	; (c450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    c440:	9b01      	ldr	r3, [sp, #4]
    c442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c446:	bf00      	nop
    c448:	b003      	add	sp, #12
    c44a:	f85d fb04 	ldr.w	pc, [sp], #4
    c44e:	bf00      	nop
    c450:	1fff8ee4 	.word	0x1fff8ee4
    c454:	1fff8ee0 	.word	0x1fff8ee0

0000c458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    c458:	b500      	push	{lr}
    c45a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c45c:	f7f4 fbda 	bl	c14 <Sys_GetCoreID>
    c460:	4603      	mov	r3, r0
    c462:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
    c464:	4a0d      	ldr	r2, [pc, #52]	; (c49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    c466:	9b01      	ldr	r3, [sp, #4]
    c468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c46c:	1e5a      	subs	r2, r3, #1
    c46e:	490b      	ldr	r1, [pc, #44]	; (c49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    c470:	9b01      	ldr	r3, [sp, #4]
    c472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
    c476:	4a0a      	ldr	r2, [pc, #40]	; (c4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
    c478:	9b01      	ldr	r3, [sp, #4]
    c47a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c47e:	f003 0301 	and.w	r3, r3, #1
    c482:	2b00      	cmp	r3, #0
    c484:	d106      	bne.n	c494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    c486:	4a05      	ldr	r2, [pc, #20]	; (c49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    c488:	9b01      	ldr	r3, [sp, #4]
    c48a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c48e:	2b00      	cmp	r3, #0
    c490:	d100      	bne.n	c494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c492:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c494:	bf00      	nop
    c496:	b003      	add	sp, #12
    c498:	f85d fb04 	ldr.w	pc, [sp], #4
    c49c:	1fff8ee4 	.word	0x1fff8ee4
    c4a0:	1fff8ee0 	.word	0x1fff8ee0

0000c4a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    c4a4:	b500      	push	{lr}
    c4a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c4a8:	f7f4 fbb4 	bl	c14 <Sys_GetCoreID>
    c4ac:	4603      	mov	r3, r0
    c4ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
    c4b0:	4a10      	ldr	r2, [pc, #64]	; (c4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    c4b2:	9b01      	ldr	r3, [sp, #4]
    c4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4b8:	2b00      	cmp	r3, #0
    c4ba:	d10d      	bne.n	c4d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c4bc:	f7f4 fac8 	bl	a50 <Adc_schm_read_msr>
    c4c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c4c2:	9b00      	ldr	r3, [sp, #0]
    c4c4:	f003 0301 	and.w	r3, r3, #1
    c4c8:	2b00      	cmp	r3, #0
    c4ca:	d100      	bne.n	c4ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c4cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
    c4ce:	490a      	ldr	r1, [pc, #40]	; (c4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
    c4d0:	9b01      	ldr	r3, [sp, #4]
    c4d2:	9a00      	ldr	r2, [sp, #0]
    c4d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
    c4d8:	4a06      	ldr	r2, [pc, #24]	; (c4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    c4da:	9b01      	ldr	r3, [sp, #4]
    c4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4e0:	1c5a      	adds	r2, r3, #1
    c4e2:	4904      	ldr	r1, [pc, #16]	; (c4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    c4e4:	9b01      	ldr	r3, [sp, #4]
    c4e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c4ea:	bf00      	nop
    c4ec:	b003      	add	sp, #12
    c4ee:	f85d fb04 	ldr.w	pc, [sp], #4
    c4f2:	bf00      	nop
    c4f4:	1fff8eec 	.word	0x1fff8eec
    c4f8:	1fff8ee8 	.word	0x1fff8ee8

0000c4fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    c4fc:	b500      	push	{lr}
    c4fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c500:	f7f4 fb88 	bl	c14 <Sys_GetCoreID>
    c504:	4603      	mov	r3, r0
    c506:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
    c508:	4a0d      	ldr	r2, [pc, #52]	; (c540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    c50a:	9b01      	ldr	r3, [sp, #4]
    c50c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c510:	1e5a      	subs	r2, r3, #1
    c512:	490b      	ldr	r1, [pc, #44]	; (c540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    c514:	9b01      	ldr	r3, [sp, #4]
    c516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
    c51a:	4a0a      	ldr	r2, [pc, #40]	; (c544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
    c51c:	9b01      	ldr	r3, [sp, #4]
    c51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c522:	f003 0301 	and.w	r3, r3, #1
    c526:	2b00      	cmp	r3, #0
    c528:	d106      	bne.n	c538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    c52a:	4a05      	ldr	r2, [pc, #20]	; (c540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    c52c:	9b01      	ldr	r3, [sp, #4]
    c52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c532:	2b00      	cmp	r3, #0
    c534:	d100      	bne.n	c538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c536:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c538:	bf00      	nop
    c53a:	b003      	add	sp, #12
    c53c:	f85d fb04 	ldr.w	pc, [sp], #4
    c540:	1fff8eec 	.word	0x1fff8eec
    c544:	1fff8ee8 	.word	0x1fff8ee8

0000c548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    c548:	b500      	push	{lr}
    c54a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c54c:	f7f4 fb62 	bl	c14 <Sys_GetCoreID>
    c550:	4603      	mov	r3, r0
    c552:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
    c554:	4a10      	ldr	r2, [pc, #64]	; (c598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    c556:	9b01      	ldr	r3, [sp, #4]
    c558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c55c:	2b00      	cmp	r3, #0
    c55e:	d10d      	bne.n	c57c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c560:	f7f4 fa76 	bl	a50 <Adc_schm_read_msr>
    c564:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c566:	9b00      	ldr	r3, [sp, #0]
    c568:	f003 0301 	and.w	r3, r3, #1
    c56c:	2b00      	cmp	r3, #0
    c56e:	d100      	bne.n	c572 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c570:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
    c572:	490a      	ldr	r1, [pc, #40]	; (c59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
    c574:	9b01      	ldr	r3, [sp, #4]
    c576:	9a00      	ldr	r2, [sp, #0]
    c578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
    c57c:	4a06      	ldr	r2, [pc, #24]	; (c598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    c57e:	9b01      	ldr	r3, [sp, #4]
    c580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c584:	1c5a      	adds	r2, r3, #1
    c586:	4904      	ldr	r1, [pc, #16]	; (c598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    c588:	9b01      	ldr	r3, [sp, #4]
    c58a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c58e:	bf00      	nop
    c590:	b003      	add	sp, #12
    c592:	f85d fb04 	ldr.w	pc, [sp], #4
    c596:	bf00      	nop
    c598:	1fff8ef4 	.word	0x1fff8ef4
    c59c:	1fff8ef0 	.word	0x1fff8ef0

0000c5a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    c5a0:	b500      	push	{lr}
    c5a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c5a4:	f7f4 fb36 	bl	c14 <Sys_GetCoreID>
    c5a8:	4603      	mov	r3, r0
    c5aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
    c5ac:	4a0d      	ldr	r2, [pc, #52]	; (c5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    c5ae:	9b01      	ldr	r3, [sp, #4]
    c5b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5b4:	1e5a      	subs	r2, r3, #1
    c5b6:	490b      	ldr	r1, [pc, #44]	; (c5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    c5b8:	9b01      	ldr	r3, [sp, #4]
    c5ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
    c5be:	4a0a      	ldr	r2, [pc, #40]	; (c5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
    c5c0:	9b01      	ldr	r3, [sp, #4]
    c5c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5c6:	f003 0301 	and.w	r3, r3, #1
    c5ca:	2b00      	cmp	r3, #0
    c5cc:	d106      	bne.n	c5dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    c5ce:	4a05      	ldr	r2, [pc, #20]	; (c5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    c5d0:	9b01      	ldr	r3, [sp, #4]
    c5d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5d6:	2b00      	cmp	r3, #0
    c5d8:	d100      	bne.n	c5dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c5da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c5dc:	bf00      	nop
    c5de:	b003      	add	sp, #12
    c5e0:	f85d fb04 	ldr.w	pc, [sp], #4
    c5e4:	1fff8ef4 	.word	0x1fff8ef4
    c5e8:	1fff8ef0 	.word	0x1fff8ef0

0000c5ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    c5ec:	b500      	push	{lr}
    c5ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c5f0:	f7f4 fb10 	bl	c14 <Sys_GetCoreID>
    c5f4:	4603      	mov	r3, r0
    c5f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
    c5f8:	4a10      	ldr	r2, [pc, #64]	; (c63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    c5fa:	9b01      	ldr	r3, [sp, #4]
    c5fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c600:	2b00      	cmp	r3, #0
    c602:	d10d      	bne.n	c620 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c604:	f7f4 fa24 	bl	a50 <Adc_schm_read_msr>
    c608:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c60a:	9b00      	ldr	r3, [sp, #0]
    c60c:	f003 0301 	and.w	r3, r3, #1
    c610:	2b00      	cmp	r3, #0
    c612:	d100      	bne.n	c616 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c614:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
    c616:	490a      	ldr	r1, [pc, #40]	; (c640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
    c618:	9b01      	ldr	r3, [sp, #4]
    c61a:	9a00      	ldr	r2, [sp, #0]
    c61c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
    c620:	4a06      	ldr	r2, [pc, #24]	; (c63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    c622:	9b01      	ldr	r3, [sp, #4]
    c624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c628:	1c5a      	adds	r2, r3, #1
    c62a:	4904      	ldr	r1, [pc, #16]	; (c63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    c62c:	9b01      	ldr	r3, [sp, #4]
    c62e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c632:	bf00      	nop
    c634:	b003      	add	sp, #12
    c636:	f85d fb04 	ldr.w	pc, [sp], #4
    c63a:	bf00      	nop
    c63c:	1fff8efc 	.word	0x1fff8efc
    c640:	1fff8ef8 	.word	0x1fff8ef8

0000c644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    c644:	b500      	push	{lr}
    c646:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c648:	f7f4 fae4 	bl	c14 <Sys_GetCoreID>
    c64c:	4603      	mov	r3, r0
    c64e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
    c650:	4a0d      	ldr	r2, [pc, #52]	; (c688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    c652:	9b01      	ldr	r3, [sp, #4]
    c654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c658:	1e5a      	subs	r2, r3, #1
    c65a:	490b      	ldr	r1, [pc, #44]	; (c688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    c65c:	9b01      	ldr	r3, [sp, #4]
    c65e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
    c662:	4a0a      	ldr	r2, [pc, #40]	; (c68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
    c664:	9b01      	ldr	r3, [sp, #4]
    c666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c66a:	f003 0301 	and.w	r3, r3, #1
    c66e:	2b00      	cmp	r3, #0
    c670:	d106      	bne.n	c680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    c672:	4a05      	ldr	r2, [pc, #20]	; (c688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    c674:	9b01      	ldr	r3, [sp, #4]
    c676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c67a:	2b00      	cmp	r3, #0
    c67c:	d100      	bne.n	c680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c67e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c680:	bf00      	nop
    c682:	b003      	add	sp, #12
    c684:	f85d fb04 	ldr.w	pc, [sp], #4
    c688:	1fff8efc 	.word	0x1fff8efc
    c68c:	1fff8ef8 	.word	0x1fff8ef8

0000c690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    c690:	b500      	push	{lr}
    c692:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c694:	f7f4 fabe 	bl	c14 <Sys_GetCoreID>
    c698:	4603      	mov	r3, r0
    c69a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
    c69c:	4a10      	ldr	r2, [pc, #64]	; (c6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    c69e:	9b01      	ldr	r3, [sp, #4]
    c6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6a4:	2b00      	cmp	r3, #0
    c6a6:	d10d      	bne.n	c6c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c6a8:	f7f4 f9d2 	bl	a50 <Adc_schm_read_msr>
    c6ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c6ae:	9b00      	ldr	r3, [sp, #0]
    c6b0:	f003 0301 	and.w	r3, r3, #1
    c6b4:	2b00      	cmp	r3, #0
    c6b6:	d100      	bne.n	c6ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c6b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
    c6ba:	490a      	ldr	r1, [pc, #40]	; (c6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
    c6bc:	9b01      	ldr	r3, [sp, #4]
    c6be:	9a00      	ldr	r2, [sp, #0]
    c6c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
    c6c4:	4a06      	ldr	r2, [pc, #24]	; (c6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    c6c6:	9b01      	ldr	r3, [sp, #4]
    c6c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6cc:	1c5a      	adds	r2, r3, #1
    c6ce:	4904      	ldr	r1, [pc, #16]	; (c6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    c6d0:	9b01      	ldr	r3, [sp, #4]
    c6d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c6d6:	bf00      	nop
    c6d8:	b003      	add	sp, #12
    c6da:	f85d fb04 	ldr.w	pc, [sp], #4
    c6de:	bf00      	nop
    c6e0:	1fff8f04 	.word	0x1fff8f04
    c6e4:	1fff8f00 	.word	0x1fff8f00

0000c6e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    c6e8:	b500      	push	{lr}
    c6ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c6ec:	f7f4 fa92 	bl	c14 <Sys_GetCoreID>
    c6f0:	4603      	mov	r3, r0
    c6f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
    c6f4:	4a0d      	ldr	r2, [pc, #52]	; (c72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    c6f6:	9b01      	ldr	r3, [sp, #4]
    c6f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6fc:	1e5a      	subs	r2, r3, #1
    c6fe:	490b      	ldr	r1, [pc, #44]	; (c72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    c700:	9b01      	ldr	r3, [sp, #4]
    c702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
    c706:	4a0a      	ldr	r2, [pc, #40]	; (c730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
    c708:	9b01      	ldr	r3, [sp, #4]
    c70a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c70e:	f003 0301 	and.w	r3, r3, #1
    c712:	2b00      	cmp	r3, #0
    c714:	d106      	bne.n	c724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    c716:	4a05      	ldr	r2, [pc, #20]	; (c72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    c718:	9b01      	ldr	r3, [sp, #4]
    c71a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c71e:	2b00      	cmp	r3, #0
    c720:	d100      	bne.n	c724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c722:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c724:	bf00      	nop
    c726:	b003      	add	sp, #12
    c728:	f85d fb04 	ldr.w	pc, [sp], #4
    c72c:	1fff8f04 	.word	0x1fff8f04
    c730:	1fff8f00 	.word	0x1fff8f00

0000c734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    c734:	b500      	push	{lr}
    c736:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c738:	f7f4 fa6c 	bl	c14 <Sys_GetCoreID>
    c73c:	4603      	mov	r3, r0
    c73e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
    c740:	4a10      	ldr	r2, [pc, #64]	; (c784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    c742:	9b01      	ldr	r3, [sp, #4]
    c744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c748:	2b00      	cmp	r3, #0
    c74a:	d10d      	bne.n	c768 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c74c:	f7f4 f980 	bl	a50 <Adc_schm_read_msr>
    c750:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c752:	9b00      	ldr	r3, [sp, #0]
    c754:	f003 0301 	and.w	r3, r3, #1
    c758:	2b00      	cmp	r3, #0
    c75a:	d100      	bne.n	c75e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c75c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
    c75e:	490a      	ldr	r1, [pc, #40]	; (c788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
    c760:	9b01      	ldr	r3, [sp, #4]
    c762:	9a00      	ldr	r2, [sp, #0]
    c764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
    c768:	4a06      	ldr	r2, [pc, #24]	; (c784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    c76a:	9b01      	ldr	r3, [sp, #4]
    c76c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c770:	1c5a      	adds	r2, r3, #1
    c772:	4904      	ldr	r1, [pc, #16]	; (c784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    c774:	9b01      	ldr	r3, [sp, #4]
    c776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c77a:	bf00      	nop
    c77c:	b003      	add	sp, #12
    c77e:	f85d fb04 	ldr.w	pc, [sp], #4
    c782:	bf00      	nop
    c784:	1fff8f0c 	.word	0x1fff8f0c
    c788:	1fff8f08 	.word	0x1fff8f08

0000c78c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    c78c:	b500      	push	{lr}
    c78e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c790:	f7f4 fa40 	bl	c14 <Sys_GetCoreID>
    c794:	4603      	mov	r3, r0
    c796:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
    c798:	4a0d      	ldr	r2, [pc, #52]	; (c7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    c79a:	9b01      	ldr	r3, [sp, #4]
    c79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7a0:	1e5a      	subs	r2, r3, #1
    c7a2:	490b      	ldr	r1, [pc, #44]	; (c7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    c7a4:	9b01      	ldr	r3, [sp, #4]
    c7a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
    c7aa:	4a0a      	ldr	r2, [pc, #40]	; (c7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
    c7ac:	9b01      	ldr	r3, [sp, #4]
    c7ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7b2:	f003 0301 	and.w	r3, r3, #1
    c7b6:	2b00      	cmp	r3, #0
    c7b8:	d106      	bne.n	c7c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    c7ba:	4a05      	ldr	r2, [pc, #20]	; (c7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    c7bc:	9b01      	ldr	r3, [sp, #4]
    c7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7c2:	2b00      	cmp	r3, #0
    c7c4:	d100      	bne.n	c7c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c7c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c7c8:	bf00      	nop
    c7ca:	b003      	add	sp, #12
    c7cc:	f85d fb04 	ldr.w	pc, [sp], #4
    c7d0:	1fff8f0c 	.word	0x1fff8f0c
    c7d4:	1fff8f08 	.word	0x1fff8f08

0000c7d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    c7d8:	b500      	push	{lr}
    c7da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c7dc:	f7f4 fa1a 	bl	c14 <Sys_GetCoreID>
    c7e0:	4603      	mov	r3, r0
    c7e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
    c7e4:	4a10      	ldr	r2, [pc, #64]	; (c828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    c7e6:	9b01      	ldr	r3, [sp, #4]
    c7e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7ec:	2b00      	cmp	r3, #0
    c7ee:	d10d      	bne.n	c80c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c7f0:	f7f4 f92e 	bl	a50 <Adc_schm_read_msr>
    c7f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c7f6:	9b00      	ldr	r3, [sp, #0]
    c7f8:	f003 0301 	and.w	r3, r3, #1
    c7fc:	2b00      	cmp	r3, #0
    c7fe:	d100      	bne.n	c802 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c800:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
    c802:	490a      	ldr	r1, [pc, #40]	; (c82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
    c804:	9b01      	ldr	r3, [sp, #4]
    c806:	9a00      	ldr	r2, [sp, #0]
    c808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
    c80c:	4a06      	ldr	r2, [pc, #24]	; (c828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    c80e:	9b01      	ldr	r3, [sp, #4]
    c810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c814:	1c5a      	adds	r2, r3, #1
    c816:	4904      	ldr	r1, [pc, #16]	; (c828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    c818:	9b01      	ldr	r3, [sp, #4]
    c81a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c81e:	bf00      	nop
    c820:	b003      	add	sp, #12
    c822:	f85d fb04 	ldr.w	pc, [sp], #4
    c826:	bf00      	nop
    c828:	1fff8f14 	.word	0x1fff8f14
    c82c:	1fff8f10 	.word	0x1fff8f10

0000c830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    c830:	b500      	push	{lr}
    c832:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c834:	f7f4 f9ee 	bl	c14 <Sys_GetCoreID>
    c838:	4603      	mov	r3, r0
    c83a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
    c83c:	4a0d      	ldr	r2, [pc, #52]	; (c874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    c83e:	9b01      	ldr	r3, [sp, #4]
    c840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c844:	1e5a      	subs	r2, r3, #1
    c846:	490b      	ldr	r1, [pc, #44]	; (c874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    c848:	9b01      	ldr	r3, [sp, #4]
    c84a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
    c84e:	4a0a      	ldr	r2, [pc, #40]	; (c878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
    c850:	9b01      	ldr	r3, [sp, #4]
    c852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c856:	f003 0301 	and.w	r3, r3, #1
    c85a:	2b00      	cmp	r3, #0
    c85c:	d106      	bne.n	c86c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    c85e:	4a05      	ldr	r2, [pc, #20]	; (c874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    c860:	9b01      	ldr	r3, [sp, #4]
    c862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c866:	2b00      	cmp	r3, #0
    c868:	d100      	bne.n	c86c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c86a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c86c:	bf00      	nop
    c86e:	b003      	add	sp, #12
    c870:	f85d fb04 	ldr.w	pc, [sp], #4
    c874:	1fff8f14 	.word	0x1fff8f14
    c878:	1fff8f10 	.word	0x1fff8f10

0000c87c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    c87c:	b500      	push	{lr}
    c87e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c880:	f7f4 f9c8 	bl	c14 <Sys_GetCoreID>
    c884:	4603      	mov	r3, r0
    c886:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
    c888:	4a10      	ldr	r2, [pc, #64]	; (c8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    c88a:	9b01      	ldr	r3, [sp, #4]
    c88c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c890:	2b00      	cmp	r3, #0
    c892:	d10d      	bne.n	c8b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c894:	f7f4 f8dc 	bl	a50 <Adc_schm_read_msr>
    c898:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c89a:	9b00      	ldr	r3, [sp, #0]
    c89c:	f003 0301 	and.w	r3, r3, #1
    c8a0:	2b00      	cmp	r3, #0
    c8a2:	d100      	bne.n	c8a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c8a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
    c8a6:	490a      	ldr	r1, [pc, #40]	; (c8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
    c8a8:	9b01      	ldr	r3, [sp, #4]
    c8aa:	9a00      	ldr	r2, [sp, #0]
    c8ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
    c8b0:	4a06      	ldr	r2, [pc, #24]	; (c8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    c8b2:	9b01      	ldr	r3, [sp, #4]
    c8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8b8:	1c5a      	adds	r2, r3, #1
    c8ba:	4904      	ldr	r1, [pc, #16]	; (c8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    c8bc:	9b01      	ldr	r3, [sp, #4]
    c8be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c8c2:	bf00      	nop
    c8c4:	b003      	add	sp, #12
    c8c6:	f85d fb04 	ldr.w	pc, [sp], #4
    c8ca:	bf00      	nop
    c8cc:	1fff8f1c 	.word	0x1fff8f1c
    c8d0:	1fff8f18 	.word	0x1fff8f18

0000c8d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    c8d4:	b500      	push	{lr}
    c8d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c8d8:	f7f4 f99c 	bl	c14 <Sys_GetCoreID>
    c8dc:	4603      	mov	r3, r0
    c8de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
    c8e0:	4a0d      	ldr	r2, [pc, #52]	; (c918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    c8e2:	9b01      	ldr	r3, [sp, #4]
    c8e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8e8:	1e5a      	subs	r2, r3, #1
    c8ea:	490b      	ldr	r1, [pc, #44]	; (c918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    c8ec:	9b01      	ldr	r3, [sp, #4]
    c8ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
    c8f2:	4a0a      	ldr	r2, [pc, #40]	; (c91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
    c8f4:	9b01      	ldr	r3, [sp, #4]
    c8f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8fa:	f003 0301 	and.w	r3, r3, #1
    c8fe:	2b00      	cmp	r3, #0
    c900:	d106      	bne.n	c910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    c902:	4a05      	ldr	r2, [pc, #20]	; (c918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    c904:	9b01      	ldr	r3, [sp, #4]
    c906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c90a:	2b00      	cmp	r3, #0
    c90c:	d100      	bne.n	c910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c90e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c910:	bf00      	nop
    c912:	b003      	add	sp, #12
    c914:	f85d fb04 	ldr.w	pc, [sp], #4
    c918:	1fff8f1c 	.word	0x1fff8f1c
    c91c:	1fff8f18 	.word	0x1fff8f18

0000c920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    c920:	b500      	push	{lr}
    c922:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c924:	f7f4 f976 	bl	c14 <Sys_GetCoreID>
    c928:	4603      	mov	r3, r0
    c92a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
    c92c:	4a10      	ldr	r2, [pc, #64]	; (c970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    c92e:	9b01      	ldr	r3, [sp, #4]
    c930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c934:	2b00      	cmp	r3, #0
    c936:	d10d      	bne.n	c954 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c938:	f7f4 f88a 	bl	a50 <Adc_schm_read_msr>
    c93c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c93e:	9b00      	ldr	r3, [sp, #0]
    c940:	f003 0301 	and.w	r3, r3, #1
    c944:	2b00      	cmp	r3, #0
    c946:	d100      	bne.n	c94a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c948:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
    c94a:	490a      	ldr	r1, [pc, #40]	; (c974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
    c94c:	9b01      	ldr	r3, [sp, #4]
    c94e:	9a00      	ldr	r2, [sp, #0]
    c950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
    c954:	4a06      	ldr	r2, [pc, #24]	; (c970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    c956:	9b01      	ldr	r3, [sp, #4]
    c958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c95c:	1c5a      	adds	r2, r3, #1
    c95e:	4904      	ldr	r1, [pc, #16]	; (c970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    c960:	9b01      	ldr	r3, [sp, #4]
    c962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c966:	bf00      	nop
    c968:	b003      	add	sp, #12
    c96a:	f85d fb04 	ldr.w	pc, [sp], #4
    c96e:	bf00      	nop
    c970:	1fff8f24 	.word	0x1fff8f24
    c974:	1fff8f20 	.word	0x1fff8f20

0000c978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    c978:	b500      	push	{lr}
    c97a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c97c:	f7f4 f94a 	bl	c14 <Sys_GetCoreID>
    c980:	4603      	mov	r3, r0
    c982:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
    c984:	4a0d      	ldr	r2, [pc, #52]	; (c9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    c986:	9b01      	ldr	r3, [sp, #4]
    c988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c98c:	1e5a      	subs	r2, r3, #1
    c98e:	490b      	ldr	r1, [pc, #44]	; (c9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    c990:	9b01      	ldr	r3, [sp, #4]
    c992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
    c996:	4a0a      	ldr	r2, [pc, #40]	; (c9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
    c998:	9b01      	ldr	r3, [sp, #4]
    c99a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c99e:	f003 0301 	and.w	r3, r3, #1
    c9a2:	2b00      	cmp	r3, #0
    c9a4:	d106      	bne.n	c9b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    c9a6:	4a05      	ldr	r2, [pc, #20]	; (c9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    c9a8:	9b01      	ldr	r3, [sp, #4]
    c9aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9ae:	2b00      	cmp	r3, #0
    c9b0:	d100      	bne.n	c9b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c9b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c9b4:	bf00      	nop
    c9b6:	b003      	add	sp, #12
    c9b8:	f85d fb04 	ldr.w	pc, [sp], #4
    c9bc:	1fff8f24 	.word	0x1fff8f24
    c9c0:	1fff8f20 	.word	0x1fff8f20

0000c9c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    c9c4:	b500      	push	{lr}
    c9c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c9c8:	f7f4 f924 	bl	c14 <Sys_GetCoreID>
    c9cc:	4603      	mov	r3, r0
    c9ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
    c9d0:	4a10      	ldr	r2, [pc, #64]	; (ca14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    c9d2:	9b01      	ldr	r3, [sp, #4]
    c9d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9d8:	2b00      	cmp	r3, #0
    c9da:	d10d      	bne.n	c9f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c9dc:	f7f4 f838 	bl	a50 <Adc_schm_read_msr>
    c9e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c9e2:	9b00      	ldr	r3, [sp, #0]
    c9e4:	f003 0301 	and.w	r3, r3, #1
    c9e8:	2b00      	cmp	r3, #0
    c9ea:	d100      	bne.n	c9ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c9ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
    c9ee:	490a      	ldr	r1, [pc, #40]	; (ca18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
    c9f0:	9b01      	ldr	r3, [sp, #4]
    c9f2:	9a00      	ldr	r2, [sp, #0]
    c9f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
    c9f8:	4a06      	ldr	r2, [pc, #24]	; (ca14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    c9fa:	9b01      	ldr	r3, [sp, #4]
    c9fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca00:	1c5a      	adds	r2, r3, #1
    ca02:	4904      	ldr	r1, [pc, #16]	; (ca14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    ca04:	9b01      	ldr	r3, [sp, #4]
    ca06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ca0a:	bf00      	nop
    ca0c:	b003      	add	sp, #12
    ca0e:	f85d fb04 	ldr.w	pc, [sp], #4
    ca12:	bf00      	nop
    ca14:	1fff8f2c 	.word	0x1fff8f2c
    ca18:	1fff8f28 	.word	0x1fff8f28

0000ca1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    ca1c:	b500      	push	{lr}
    ca1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca20:	f7f4 f8f8 	bl	c14 <Sys_GetCoreID>
    ca24:	4603      	mov	r3, r0
    ca26:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
    ca28:	4a0d      	ldr	r2, [pc, #52]	; (ca60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    ca2a:	9b01      	ldr	r3, [sp, #4]
    ca2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca30:	1e5a      	subs	r2, r3, #1
    ca32:	490b      	ldr	r1, [pc, #44]	; (ca60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    ca34:	9b01      	ldr	r3, [sp, #4]
    ca36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
    ca3a:	4a0a      	ldr	r2, [pc, #40]	; (ca64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
    ca3c:	9b01      	ldr	r3, [sp, #4]
    ca3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca42:	f003 0301 	and.w	r3, r3, #1
    ca46:	2b00      	cmp	r3, #0
    ca48:	d106      	bne.n	ca58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    ca4a:	4a05      	ldr	r2, [pc, #20]	; (ca60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    ca4c:	9b01      	ldr	r3, [sp, #4]
    ca4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca52:	2b00      	cmp	r3, #0
    ca54:	d100      	bne.n	ca58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ca56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ca58:	bf00      	nop
    ca5a:	b003      	add	sp, #12
    ca5c:	f85d fb04 	ldr.w	pc, [sp], #4
    ca60:	1fff8f2c 	.word	0x1fff8f2c
    ca64:	1fff8f28 	.word	0x1fff8f28

0000ca68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    ca68:	b500      	push	{lr}
    ca6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca6c:	f7f4 f8d2 	bl	c14 <Sys_GetCoreID>
    ca70:	4603      	mov	r3, r0
    ca72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
    ca74:	4a10      	ldr	r2, [pc, #64]	; (cab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    ca76:	9b01      	ldr	r3, [sp, #4]
    ca78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca7c:	2b00      	cmp	r3, #0
    ca7e:	d10d      	bne.n	ca9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ca80:	f7f3 ffe6 	bl	a50 <Adc_schm_read_msr>
    ca84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ca86:	9b00      	ldr	r3, [sp, #0]
    ca88:	f003 0301 	and.w	r3, r3, #1
    ca8c:	2b00      	cmp	r3, #0
    ca8e:	d100      	bne.n	ca92 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ca90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
    ca92:	490a      	ldr	r1, [pc, #40]	; (cabc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
    ca94:	9b01      	ldr	r3, [sp, #4]
    ca96:	9a00      	ldr	r2, [sp, #0]
    ca98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
    ca9c:	4a06      	ldr	r2, [pc, #24]	; (cab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    ca9e:	9b01      	ldr	r3, [sp, #4]
    caa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caa4:	1c5a      	adds	r2, r3, #1
    caa6:	4904      	ldr	r1, [pc, #16]	; (cab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    caa8:	9b01      	ldr	r3, [sp, #4]
    caaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    caae:	bf00      	nop
    cab0:	b003      	add	sp, #12
    cab2:	f85d fb04 	ldr.w	pc, [sp], #4
    cab6:	bf00      	nop
    cab8:	1fff8f34 	.word	0x1fff8f34
    cabc:	1fff8f30 	.word	0x1fff8f30

0000cac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    cac0:	b500      	push	{lr}
    cac2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cac4:	f7f4 f8a6 	bl	c14 <Sys_GetCoreID>
    cac8:	4603      	mov	r3, r0
    caca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
    cacc:	4a0d      	ldr	r2, [pc, #52]	; (cb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    cace:	9b01      	ldr	r3, [sp, #4]
    cad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cad4:	1e5a      	subs	r2, r3, #1
    cad6:	490b      	ldr	r1, [pc, #44]	; (cb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    cad8:	9b01      	ldr	r3, [sp, #4]
    cada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
    cade:	4a0a      	ldr	r2, [pc, #40]	; (cb08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
    cae0:	9b01      	ldr	r3, [sp, #4]
    cae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cae6:	f003 0301 	and.w	r3, r3, #1
    caea:	2b00      	cmp	r3, #0
    caec:	d106      	bne.n	cafc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    caee:	4a05      	ldr	r2, [pc, #20]	; (cb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    caf0:	9b01      	ldr	r3, [sp, #4]
    caf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caf6:	2b00      	cmp	r3, #0
    caf8:	d100      	bne.n	cafc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cafa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cafc:	bf00      	nop
    cafe:	b003      	add	sp, #12
    cb00:	f85d fb04 	ldr.w	pc, [sp], #4
    cb04:	1fff8f34 	.word	0x1fff8f34
    cb08:	1fff8f30 	.word	0x1fff8f30

0000cb0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    cb0c:	b500      	push	{lr}
    cb0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb10:	f7f4 f880 	bl	c14 <Sys_GetCoreID>
    cb14:	4603      	mov	r3, r0
    cb16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
    cb18:	4a10      	ldr	r2, [pc, #64]	; (cb5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    cb1a:	9b01      	ldr	r3, [sp, #4]
    cb1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb20:	2b00      	cmp	r3, #0
    cb22:	d10d      	bne.n	cb40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cb24:	f7f3 ff94 	bl	a50 <Adc_schm_read_msr>
    cb28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cb2a:	9b00      	ldr	r3, [sp, #0]
    cb2c:	f003 0301 	and.w	r3, r3, #1
    cb30:	2b00      	cmp	r3, #0
    cb32:	d100      	bne.n	cb36 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cb34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
    cb36:	490a      	ldr	r1, [pc, #40]	; (cb60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
    cb38:	9b01      	ldr	r3, [sp, #4]
    cb3a:	9a00      	ldr	r2, [sp, #0]
    cb3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
    cb40:	4a06      	ldr	r2, [pc, #24]	; (cb5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    cb42:	9b01      	ldr	r3, [sp, #4]
    cb44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb48:	1c5a      	adds	r2, r3, #1
    cb4a:	4904      	ldr	r1, [pc, #16]	; (cb5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    cb4c:	9b01      	ldr	r3, [sp, #4]
    cb4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cb52:	bf00      	nop
    cb54:	b003      	add	sp, #12
    cb56:	f85d fb04 	ldr.w	pc, [sp], #4
    cb5a:	bf00      	nop
    cb5c:	1fff8f3c 	.word	0x1fff8f3c
    cb60:	1fff8f38 	.word	0x1fff8f38

0000cb64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    cb64:	b500      	push	{lr}
    cb66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb68:	f7f4 f854 	bl	c14 <Sys_GetCoreID>
    cb6c:	4603      	mov	r3, r0
    cb6e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
    cb70:	4a0d      	ldr	r2, [pc, #52]	; (cba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    cb72:	9b01      	ldr	r3, [sp, #4]
    cb74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb78:	1e5a      	subs	r2, r3, #1
    cb7a:	490b      	ldr	r1, [pc, #44]	; (cba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    cb7c:	9b01      	ldr	r3, [sp, #4]
    cb7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
    cb82:	4a0a      	ldr	r2, [pc, #40]	; (cbac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
    cb84:	9b01      	ldr	r3, [sp, #4]
    cb86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb8a:	f003 0301 	and.w	r3, r3, #1
    cb8e:	2b00      	cmp	r3, #0
    cb90:	d106      	bne.n	cba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    cb92:	4a05      	ldr	r2, [pc, #20]	; (cba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    cb94:	9b01      	ldr	r3, [sp, #4]
    cb96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb9a:	2b00      	cmp	r3, #0
    cb9c:	d100      	bne.n	cba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cb9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cba0:	bf00      	nop
    cba2:	b003      	add	sp, #12
    cba4:	f85d fb04 	ldr.w	pc, [sp], #4
    cba8:	1fff8f3c 	.word	0x1fff8f3c
    cbac:	1fff8f38 	.word	0x1fff8f38

0000cbb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    cbb0:	b500      	push	{lr}
    cbb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cbb4:	f7f4 f82e 	bl	c14 <Sys_GetCoreID>
    cbb8:	4603      	mov	r3, r0
    cbba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
    cbbc:	4a10      	ldr	r2, [pc, #64]	; (cc00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    cbbe:	9b01      	ldr	r3, [sp, #4]
    cbc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbc4:	2b00      	cmp	r3, #0
    cbc6:	d10d      	bne.n	cbe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cbc8:	f7f3 ff42 	bl	a50 <Adc_schm_read_msr>
    cbcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cbce:	9b00      	ldr	r3, [sp, #0]
    cbd0:	f003 0301 	and.w	r3, r3, #1
    cbd4:	2b00      	cmp	r3, #0
    cbd6:	d100      	bne.n	cbda <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cbd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
    cbda:	490a      	ldr	r1, [pc, #40]	; (cc04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
    cbdc:	9b01      	ldr	r3, [sp, #4]
    cbde:	9a00      	ldr	r2, [sp, #0]
    cbe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
    cbe4:	4a06      	ldr	r2, [pc, #24]	; (cc00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    cbe6:	9b01      	ldr	r3, [sp, #4]
    cbe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbec:	1c5a      	adds	r2, r3, #1
    cbee:	4904      	ldr	r1, [pc, #16]	; (cc00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    cbf0:	9b01      	ldr	r3, [sp, #4]
    cbf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cbf6:	bf00      	nop
    cbf8:	b003      	add	sp, #12
    cbfa:	f85d fb04 	ldr.w	pc, [sp], #4
    cbfe:	bf00      	nop
    cc00:	1fff8f44 	.word	0x1fff8f44
    cc04:	1fff8f40 	.word	0x1fff8f40

0000cc08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    cc08:	b500      	push	{lr}
    cc0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc0c:	f7f4 f802 	bl	c14 <Sys_GetCoreID>
    cc10:	4603      	mov	r3, r0
    cc12:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
    cc14:	4a0d      	ldr	r2, [pc, #52]	; (cc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    cc16:	9b01      	ldr	r3, [sp, #4]
    cc18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc1c:	1e5a      	subs	r2, r3, #1
    cc1e:	490b      	ldr	r1, [pc, #44]	; (cc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    cc20:	9b01      	ldr	r3, [sp, #4]
    cc22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
    cc26:	4a0a      	ldr	r2, [pc, #40]	; (cc50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
    cc28:	9b01      	ldr	r3, [sp, #4]
    cc2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc2e:	f003 0301 	and.w	r3, r3, #1
    cc32:	2b00      	cmp	r3, #0
    cc34:	d106      	bne.n	cc44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    cc36:	4a05      	ldr	r2, [pc, #20]	; (cc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    cc38:	9b01      	ldr	r3, [sp, #4]
    cc3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc3e:	2b00      	cmp	r3, #0
    cc40:	d100      	bne.n	cc44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cc42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cc44:	bf00      	nop
    cc46:	b003      	add	sp, #12
    cc48:	f85d fb04 	ldr.w	pc, [sp], #4
    cc4c:	1fff8f44 	.word	0x1fff8f44
    cc50:	1fff8f40 	.word	0x1fff8f40

0000cc54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    cc54:	b500      	push	{lr}
    cc56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc58:	f7f3 ffdc 	bl	c14 <Sys_GetCoreID>
    cc5c:	4603      	mov	r3, r0
    cc5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
    cc60:	4a10      	ldr	r2, [pc, #64]	; (cca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    cc62:	9b01      	ldr	r3, [sp, #4]
    cc64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc68:	2b00      	cmp	r3, #0
    cc6a:	d10d      	bne.n	cc88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cc6c:	f7f3 fef0 	bl	a50 <Adc_schm_read_msr>
    cc70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cc72:	9b00      	ldr	r3, [sp, #0]
    cc74:	f003 0301 	and.w	r3, r3, #1
    cc78:	2b00      	cmp	r3, #0
    cc7a:	d100      	bne.n	cc7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cc7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
    cc7e:	490a      	ldr	r1, [pc, #40]	; (cca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
    cc80:	9b01      	ldr	r3, [sp, #4]
    cc82:	9a00      	ldr	r2, [sp, #0]
    cc84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
    cc88:	4a06      	ldr	r2, [pc, #24]	; (cca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    cc8a:	9b01      	ldr	r3, [sp, #4]
    cc8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc90:	1c5a      	adds	r2, r3, #1
    cc92:	4904      	ldr	r1, [pc, #16]	; (cca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    cc94:	9b01      	ldr	r3, [sp, #4]
    cc96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cc9a:	bf00      	nop
    cc9c:	b003      	add	sp, #12
    cc9e:	f85d fb04 	ldr.w	pc, [sp], #4
    cca2:	bf00      	nop
    cca4:	1fff8f4c 	.word	0x1fff8f4c
    cca8:	1fff8f48 	.word	0x1fff8f48

0000ccac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    ccac:	b500      	push	{lr}
    ccae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ccb0:	f7f3 ffb0 	bl	c14 <Sys_GetCoreID>
    ccb4:	4603      	mov	r3, r0
    ccb6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
    ccb8:	4a0d      	ldr	r2, [pc, #52]	; (ccf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    ccba:	9b01      	ldr	r3, [sp, #4]
    ccbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccc0:	1e5a      	subs	r2, r3, #1
    ccc2:	490b      	ldr	r1, [pc, #44]	; (ccf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    ccc4:	9b01      	ldr	r3, [sp, #4]
    ccc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
    ccca:	4a0a      	ldr	r2, [pc, #40]	; (ccf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
    cccc:	9b01      	ldr	r3, [sp, #4]
    ccce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccd2:	f003 0301 	and.w	r3, r3, #1
    ccd6:	2b00      	cmp	r3, #0
    ccd8:	d106      	bne.n	cce8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    ccda:	4a05      	ldr	r2, [pc, #20]	; (ccf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    ccdc:	9b01      	ldr	r3, [sp, #4]
    ccde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cce2:	2b00      	cmp	r3, #0
    cce4:	d100      	bne.n	cce8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cce6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cce8:	bf00      	nop
    ccea:	b003      	add	sp, #12
    ccec:	f85d fb04 	ldr.w	pc, [sp], #4
    ccf0:	1fff8f4c 	.word	0x1fff8f4c
    ccf4:	1fff8f48 	.word	0x1fff8f48

0000ccf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    ccf8:	b500      	push	{lr}
    ccfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ccfc:	f7f3 ff8a 	bl	c14 <Sys_GetCoreID>
    cd00:	4603      	mov	r3, r0
    cd02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
    cd04:	4a10      	ldr	r2, [pc, #64]	; (cd48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    cd06:	9b01      	ldr	r3, [sp, #4]
    cd08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd0c:	2b00      	cmp	r3, #0
    cd0e:	d10d      	bne.n	cd2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cd10:	f7f3 fe9e 	bl	a50 <Adc_schm_read_msr>
    cd14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cd16:	9b00      	ldr	r3, [sp, #0]
    cd18:	f003 0301 	and.w	r3, r3, #1
    cd1c:	2b00      	cmp	r3, #0
    cd1e:	d100      	bne.n	cd22 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cd20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
    cd22:	490a      	ldr	r1, [pc, #40]	; (cd4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
    cd24:	9b01      	ldr	r3, [sp, #4]
    cd26:	9a00      	ldr	r2, [sp, #0]
    cd28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
    cd2c:	4a06      	ldr	r2, [pc, #24]	; (cd48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    cd2e:	9b01      	ldr	r3, [sp, #4]
    cd30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd34:	1c5a      	adds	r2, r3, #1
    cd36:	4904      	ldr	r1, [pc, #16]	; (cd48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    cd38:	9b01      	ldr	r3, [sp, #4]
    cd3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cd3e:	bf00      	nop
    cd40:	b003      	add	sp, #12
    cd42:	f85d fb04 	ldr.w	pc, [sp], #4
    cd46:	bf00      	nop
    cd48:	1fff8f54 	.word	0x1fff8f54
    cd4c:	1fff8f50 	.word	0x1fff8f50

0000cd50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    cd50:	b500      	push	{lr}
    cd52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd54:	f7f3 ff5e 	bl	c14 <Sys_GetCoreID>
    cd58:	4603      	mov	r3, r0
    cd5a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
    cd5c:	4a0d      	ldr	r2, [pc, #52]	; (cd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    cd5e:	9b01      	ldr	r3, [sp, #4]
    cd60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd64:	1e5a      	subs	r2, r3, #1
    cd66:	490b      	ldr	r1, [pc, #44]	; (cd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    cd68:	9b01      	ldr	r3, [sp, #4]
    cd6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
    cd6e:	4a0a      	ldr	r2, [pc, #40]	; (cd98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
    cd70:	9b01      	ldr	r3, [sp, #4]
    cd72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd76:	f003 0301 	and.w	r3, r3, #1
    cd7a:	2b00      	cmp	r3, #0
    cd7c:	d106      	bne.n	cd8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    cd7e:	4a05      	ldr	r2, [pc, #20]	; (cd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    cd80:	9b01      	ldr	r3, [sp, #4]
    cd82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd86:	2b00      	cmp	r3, #0
    cd88:	d100      	bne.n	cd8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cd8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cd8c:	bf00      	nop
    cd8e:	b003      	add	sp, #12
    cd90:	f85d fb04 	ldr.w	pc, [sp], #4
    cd94:	1fff8f54 	.word	0x1fff8f54
    cd98:	1fff8f50 	.word	0x1fff8f50

0000cd9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
    cd9c:	b500      	push	{lr}
    cd9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cda0:	f7f3 ff38 	bl	c14 <Sys_GetCoreID>
    cda4:	4603      	mov	r3, r0
    cda6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
    cda8:	4a10      	ldr	r2, [pc, #64]	; (cdec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    cdaa:	9b01      	ldr	r3, [sp, #4]
    cdac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdb0:	2b00      	cmp	r3, #0
    cdb2:	d10d      	bne.n	cdd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cdb4:	f7f3 fe4c 	bl	a50 <Adc_schm_read_msr>
    cdb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cdba:	9b00      	ldr	r3, [sp, #0]
    cdbc:	f003 0301 	and.w	r3, r3, #1
    cdc0:	2b00      	cmp	r3, #0
    cdc2:	d100      	bne.n	cdc6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cdc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
    cdc6:	490a      	ldr	r1, [pc, #40]	; (cdf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
    cdc8:	9b01      	ldr	r3, [sp, #4]
    cdca:	9a00      	ldr	r2, [sp, #0]
    cdcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
    cdd0:	4a06      	ldr	r2, [pc, #24]	; (cdec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    cdd2:	9b01      	ldr	r3, [sp, #4]
    cdd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdd8:	1c5a      	adds	r2, r3, #1
    cdda:	4904      	ldr	r1, [pc, #16]	; (cdec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    cddc:	9b01      	ldr	r3, [sp, #4]
    cdde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cde2:	bf00      	nop
    cde4:	b003      	add	sp, #12
    cde6:	f85d fb04 	ldr.w	pc, [sp], #4
    cdea:	bf00      	nop
    cdec:	1fff8f5c 	.word	0x1fff8f5c
    cdf0:	1fff8f58 	.word	0x1fff8f58

0000cdf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
    cdf4:	b500      	push	{lr}
    cdf6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cdf8:	f7f3 ff0c 	bl	c14 <Sys_GetCoreID>
    cdfc:	4603      	mov	r3, r0
    cdfe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
    ce00:	4a0d      	ldr	r2, [pc, #52]	; (ce38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    ce02:	9b01      	ldr	r3, [sp, #4]
    ce04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce08:	1e5a      	subs	r2, r3, #1
    ce0a:	490b      	ldr	r1, [pc, #44]	; (ce38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    ce0c:	9b01      	ldr	r3, [sp, #4]
    ce0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
    ce12:	4a0a      	ldr	r2, [pc, #40]	; (ce3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
    ce14:	9b01      	ldr	r3, [sp, #4]
    ce16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce1a:	f003 0301 	and.w	r3, r3, #1
    ce1e:	2b00      	cmp	r3, #0
    ce20:	d106      	bne.n	ce30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    ce22:	4a05      	ldr	r2, [pc, #20]	; (ce38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    ce24:	9b01      	ldr	r3, [sp, #4]
    ce26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce2a:	2b00      	cmp	r3, #0
    ce2c:	d100      	bne.n	ce30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ce2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ce30:	bf00      	nop
    ce32:	b003      	add	sp, #12
    ce34:	f85d fb04 	ldr.w	pc, [sp], #4
    ce38:	1fff8f5c 	.word	0x1fff8f5c
    ce3c:	1fff8f58 	.word	0x1fff8f58

0000ce40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
    ce40:	b500      	push	{lr}
    ce42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce44:	f7f3 fee6 	bl	c14 <Sys_GetCoreID>
    ce48:	4603      	mov	r3, r0
    ce4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
    ce4c:	4a10      	ldr	r2, [pc, #64]	; (ce90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    ce4e:	9b01      	ldr	r3, [sp, #4]
    ce50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce54:	2b00      	cmp	r3, #0
    ce56:	d10d      	bne.n	ce74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ce58:	f7f3 fdfa 	bl	a50 <Adc_schm_read_msr>
    ce5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ce5e:	9b00      	ldr	r3, [sp, #0]
    ce60:	f003 0301 	and.w	r3, r3, #1
    ce64:	2b00      	cmp	r3, #0
    ce66:	d100      	bne.n	ce6a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ce68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
    ce6a:	490a      	ldr	r1, [pc, #40]	; (ce94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
    ce6c:	9b01      	ldr	r3, [sp, #4]
    ce6e:	9a00      	ldr	r2, [sp, #0]
    ce70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
    ce74:	4a06      	ldr	r2, [pc, #24]	; (ce90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    ce76:	9b01      	ldr	r3, [sp, #4]
    ce78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce7c:	1c5a      	adds	r2, r3, #1
    ce7e:	4904      	ldr	r1, [pc, #16]	; (ce90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    ce80:	9b01      	ldr	r3, [sp, #4]
    ce82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ce86:	bf00      	nop
    ce88:	b003      	add	sp, #12
    ce8a:	f85d fb04 	ldr.w	pc, [sp], #4
    ce8e:	bf00      	nop
    ce90:	1fff8f64 	.word	0x1fff8f64
    ce94:	1fff8f60 	.word	0x1fff8f60

0000ce98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
    ce98:	b500      	push	{lr}
    ce9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce9c:	f7f3 feba 	bl	c14 <Sys_GetCoreID>
    cea0:	4603      	mov	r3, r0
    cea2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
    cea4:	4a0d      	ldr	r2, [pc, #52]	; (cedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    cea6:	9b01      	ldr	r3, [sp, #4]
    cea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ceac:	1e5a      	subs	r2, r3, #1
    ceae:	490b      	ldr	r1, [pc, #44]	; (cedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    ceb0:	9b01      	ldr	r3, [sp, #4]
    ceb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
    ceb6:	4a0a      	ldr	r2, [pc, #40]	; (cee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
    ceb8:	9b01      	ldr	r3, [sp, #4]
    ceba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cebe:	f003 0301 	and.w	r3, r3, #1
    cec2:	2b00      	cmp	r3, #0
    cec4:	d106      	bne.n	ced4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    cec6:	4a05      	ldr	r2, [pc, #20]	; (cedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    cec8:	9b01      	ldr	r3, [sp, #4]
    ceca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cece:	2b00      	cmp	r3, #0
    ced0:	d100      	bne.n	ced4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ced2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ced4:	bf00      	nop
    ced6:	b003      	add	sp, #12
    ced8:	f85d fb04 	ldr.w	pc, [sp], #4
    cedc:	1fff8f64 	.word	0x1fff8f64
    cee0:	1fff8f60 	.word	0x1fff8f60

0000cee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
    cee4:	b500      	push	{lr}
    cee6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cee8:	f7f3 fe94 	bl	c14 <Sys_GetCoreID>
    ceec:	4603      	mov	r3, r0
    ceee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
    cef0:	4a10      	ldr	r2, [pc, #64]	; (cf34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    cef2:	9b01      	ldr	r3, [sp, #4]
    cef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cef8:	2b00      	cmp	r3, #0
    cefa:	d10d      	bne.n	cf18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cefc:	f7f3 fda8 	bl	a50 <Adc_schm_read_msr>
    cf00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cf02:	9b00      	ldr	r3, [sp, #0]
    cf04:	f003 0301 	and.w	r3, r3, #1
    cf08:	2b00      	cmp	r3, #0
    cf0a:	d100      	bne.n	cf0e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cf0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
    cf0e:	490a      	ldr	r1, [pc, #40]	; (cf38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
    cf10:	9b01      	ldr	r3, [sp, #4]
    cf12:	9a00      	ldr	r2, [sp, #0]
    cf14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
    cf18:	4a06      	ldr	r2, [pc, #24]	; (cf34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    cf1a:	9b01      	ldr	r3, [sp, #4]
    cf1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf20:	1c5a      	adds	r2, r3, #1
    cf22:	4904      	ldr	r1, [pc, #16]	; (cf34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    cf24:	9b01      	ldr	r3, [sp, #4]
    cf26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cf2a:	bf00      	nop
    cf2c:	b003      	add	sp, #12
    cf2e:	f85d fb04 	ldr.w	pc, [sp], #4
    cf32:	bf00      	nop
    cf34:	1fff8f6c 	.word	0x1fff8f6c
    cf38:	1fff8f68 	.word	0x1fff8f68

0000cf3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
    cf3c:	b500      	push	{lr}
    cf3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf40:	f7f3 fe68 	bl	c14 <Sys_GetCoreID>
    cf44:	4603      	mov	r3, r0
    cf46:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
    cf48:	4a0d      	ldr	r2, [pc, #52]	; (cf80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    cf4a:	9b01      	ldr	r3, [sp, #4]
    cf4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf50:	1e5a      	subs	r2, r3, #1
    cf52:	490b      	ldr	r1, [pc, #44]	; (cf80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    cf54:	9b01      	ldr	r3, [sp, #4]
    cf56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
    cf5a:	4a0a      	ldr	r2, [pc, #40]	; (cf84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
    cf5c:	9b01      	ldr	r3, [sp, #4]
    cf5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf62:	f003 0301 	and.w	r3, r3, #1
    cf66:	2b00      	cmp	r3, #0
    cf68:	d106      	bne.n	cf78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    cf6a:	4a05      	ldr	r2, [pc, #20]	; (cf80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    cf6c:	9b01      	ldr	r3, [sp, #4]
    cf6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf72:	2b00      	cmp	r3, #0
    cf74:	d100      	bne.n	cf78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cf76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cf78:	bf00      	nop
    cf7a:	b003      	add	sp, #12
    cf7c:	f85d fb04 	ldr.w	pc, [sp], #4
    cf80:	1fff8f6c 	.word	0x1fff8f6c
    cf84:	1fff8f68 	.word	0x1fff8f68

0000cf88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
    cf88:	b500      	push	{lr}
    cf8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf8c:	f7f3 fe42 	bl	c14 <Sys_GetCoreID>
    cf90:	4603      	mov	r3, r0
    cf92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
    cf94:	4a10      	ldr	r2, [pc, #64]	; (cfd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    cf96:	9b01      	ldr	r3, [sp, #4]
    cf98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf9c:	2b00      	cmp	r3, #0
    cf9e:	d10d      	bne.n	cfbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cfa0:	f7f3 fd56 	bl	a50 <Adc_schm_read_msr>
    cfa4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cfa6:	9b00      	ldr	r3, [sp, #0]
    cfa8:	f003 0301 	and.w	r3, r3, #1
    cfac:	2b00      	cmp	r3, #0
    cfae:	d100      	bne.n	cfb2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cfb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
    cfb2:	490a      	ldr	r1, [pc, #40]	; (cfdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
    cfb4:	9b01      	ldr	r3, [sp, #4]
    cfb6:	9a00      	ldr	r2, [sp, #0]
    cfb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
    cfbc:	4a06      	ldr	r2, [pc, #24]	; (cfd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    cfbe:	9b01      	ldr	r3, [sp, #4]
    cfc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfc4:	1c5a      	adds	r2, r3, #1
    cfc6:	4904      	ldr	r1, [pc, #16]	; (cfd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    cfc8:	9b01      	ldr	r3, [sp, #4]
    cfca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cfce:	bf00      	nop
    cfd0:	b003      	add	sp, #12
    cfd2:	f85d fb04 	ldr.w	pc, [sp], #4
    cfd6:	bf00      	nop
    cfd8:	1fff8f74 	.word	0x1fff8f74
    cfdc:	1fff8f70 	.word	0x1fff8f70

0000cfe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
    cfe0:	b500      	push	{lr}
    cfe2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cfe4:	f7f3 fe16 	bl	c14 <Sys_GetCoreID>
    cfe8:	4603      	mov	r3, r0
    cfea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
    cfec:	4a0d      	ldr	r2, [pc, #52]	; (d024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    cfee:	9b01      	ldr	r3, [sp, #4]
    cff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cff4:	1e5a      	subs	r2, r3, #1
    cff6:	490b      	ldr	r1, [pc, #44]	; (d024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    cff8:	9b01      	ldr	r3, [sp, #4]
    cffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
    cffe:	4a0a      	ldr	r2, [pc, #40]	; (d028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
    d000:	9b01      	ldr	r3, [sp, #4]
    d002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d006:	f003 0301 	and.w	r3, r3, #1
    d00a:	2b00      	cmp	r3, #0
    d00c:	d106      	bne.n	d01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    d00e:	4a05      	ldr	r2, [pc, #20]	; (d024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    d010:	9b01      	ldr	r3, [sp, #4]
    d012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d016:	2b00      	cmp	r3, #0
    d018:	d100      	bne.n	d01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d01a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d01c:	bf00      	nop
    d01e:	b003      	add	sp, #12
    d020:	f85d fb04 	ldr.w	pc, [sp], #4
    d024:	1fff8f74 	.word	0x1fff8f74
    d028:	1fff8f70 	.word	0x1fff8f70

0000d02c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
    d02c:	b500      	push	{lr}
    d02e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d030:	f7f3 fdf0 	bl	c14 <Sys_GetCoreID>
    d034:	4603      	mov	r3, r0
    d036:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
    d038:	4a10      	ldr	r2, [pc, #64]	; (d07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d03a:	9b01      	ldr	r3, [sp, #4]
    d03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d040:	2b00      	cmp	r3, #0
    d042:	d10d      	bne.n	d060 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d044:	f7f3 fd04 	bl	a50 <Adc_schm_read_msr>
    d048:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d04a:	9b00      	ldr	r3, [sp, #0]
    d04c:	f003 0301 	and.w	r3, r3, #1
    d050:	2b00      	cmp	r3, #0
    d052:	d100      	bne.n	d056 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d054:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
    d056:	490a      	ldr	r1, [pc, #40]	; (d080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
    d058:	9b01      	ldr	r3, [sp, #4]
    d05a:	9a00      	ldr	r2, [sp, #0]
    d05c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
    d060:	4a06      	ldr	r2, [pc, #24]	; (d07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d062:	9b01      	ldr	r3, [sp, #4]
    d064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d068:	1c5a      	adds	r2, r3, #1
    d06a:	4904      	ldr	r1, [pc, #16]	; (d07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d06c:	9b01      	ldr	r3, [sp, #4]
    d06e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d072:	bf00      	nop
    d074:	b003      	add	sp, #12
    d076:	f85d fb04 	ldr.w	pc, [sp], #4
    d07a:	bf00      	nop
    d07c:	1fff8f7c 	.word	0x1fff8f7c
    d080:	1fff8f78 	.word	0x1fff8f78

0000d084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
    d084:	b500      	push	{lr}
    d086:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d088:	f7f3 fdc4 	bl	c14 <Sys_GetCoreID>
    d08c:	4603      	mov	r3, r0
    d08e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
    d090:	4a0d      	ldr	r2, [pc, #52]	; (d0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d092:	9b01      	ldr	r3, [sp, #4]
    d094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d098:	1e5a      	subs	r2, r3, #1
    d09a:	490b      	ldr	r1, [pc, #44]	; (d0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d09c:	9b01      	ldr	r3, [sp, #4]
    d09e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
    d0a2:	4a0a      	ldr	r2, [pc, #40]	; (d0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
    d0a4:	9b01      	ldr	r3, [sp, #4]
    d0a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0aa:	f003 0301 	and.w	r3, r3, #1
    d0ae:	2b00      	cmp	r3, #0
    d0b0:	d106      	bne.n	d0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    d0b2:	4a05      	ldr	r2, [pc, #20]	; (d0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d0b4:	9b01      	ldr	r3, [sp, #4]
    d0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0ba:	2b00      	cmp	r3, #0
    d0bc:	d100      	bne.n	d0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d0be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d0c0:	bf00      	nop
    d0c2:	b003      	add	sp, #12
    d0c4:	f85d fb04 	ldr.w	pc, [sp], #4
    d0c8:	1fff8f7c 	.word	0x1fff8f7c
    d0cc:	1fff8f78 	.word	0x1fff8f78

0000d0d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
    d0d0:	b500      	push	{lr}
    d0d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d0d4:	f7f3 fd9e 	bl	c14 <Sys_GetCoreID>
    d0d8:	4603      	mov	r3, r0
    d0da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
    d0dc:	4a10      	ldr	r2, [pc, #64]	; (d120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d0de:	9b01      	ldr	r3, [sp, #4]
    d0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0e4:	2b00      	cmp	r3, #0
    d0e6:	d10d      	bne.n	d104 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d0e8:	f7f3 fcb2 	bl	a50 <Adc_schm_read_msr>
    d0ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d0ee:	9b00      	ldr	r3, [sp, #0]
    d0f0:	f003 0301 	and.w	r3, r3, #1
    d0f4:	2b00      	cmp	r3, #0
    d0f6:	d100      	bne.n	d0fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d0f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
    d0fa:	490a      	ldr	r1, [pc, #40]	; (d124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
    d0fc:	9b01      	ldr	r3, [sp, #4]
    d0fe:	9a00      	ldr	r2, [sp, #0]
    d100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
    d104:	4a06      	ldr	r2, [pc, #24]	; (d120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d106:	9b01      	ldr	r3, [sp, #4]
    d108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d10c:	1c5a      	adds	r2, r3, #1
    d10e:	4904      	ldr	r1, [pc, #16]	; (d120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d110:	9b01      	ldr	r3, [sp, #4]
    d112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d116:	bf00      	nop
    d118:	b003      	add	sp, #12
    d11a:	f85d fb04 	ldr.w	pc, [sp], #4
    d11e:	bf00      	nop
    d120:	1fff8f84 	.word	0x1fff8f84
    d124:	1fff8f80 	.word	0x1fff8f80

0000d128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
    d128:	b500      	push	{lr}
    d12a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d12c:	f7f3 fd72 	bl	c14 <Sys_GetCoreID>
    d130:	4603      	mov	r3, r0
    d132:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
    d134:	4a0d      	ldr	r2, [pc, #52]	; (d16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d136:	9b01      	ldr	r3, [sp, #4]
    d138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d13c:	1e5a      	subs	r2, r3, #1
    d13e:	490b      	ldr	r1, [pc, #44]	; (d16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d140:	9b01      	ldr	r3, [sp, #4]
    d142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
    d146:	4a0a      	ldr	r2, [pc, #40]	; (d170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
    d148:	9b01      	ldr	r3, [sp, #4]
    d14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d14e:	f003 0301 	and.w	r3, r3, #1
    d152:	2b00      	cmp	r3, #0
    d154:	d106      	bne.n	d164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    d156:	4a05      	ldr	r2, [pc, #20]	; (d16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d158:	9b01      	ldr	r3, [sp, #4]
    d15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d15e:	2b00      	cmp	r3, #0
    d160:	d100      	bne.n	d164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d162:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d164:	bf00      	nop
    d166:	b003      	add	sp, #12
    d168:	f85d fb04 	ldr.w	pc, [sp], #4
    d16c:	1fff8f84 	.word	0x1fff8f84
    d170:	1fff8f80 	.word	0x1fff8f80

0000d174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
    d174:	b500      	push	{lr}
    d176:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d178:	f7f3 fd4c 	bl	c14 <Sys_GetCoreID>
    d17c:	4603      	mov	r3, r0
    d17e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
    d180:	4a10      	ldr	r2, [pc, #64]	; (d1c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d182:	9b01      	ldr	r3, [sp, #4]
    d184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d188:	2b00      	cmp	r3, #0
    d18a:	d10d      	bne.n	d1a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d18c:	f7f3 fc60 	bl	a50 <Adc_schm_read_msr>
    d190:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d192:	9b00      	ldr	r3, [sp, #0]
    d194:	f003 0301 	and.w	r3, r3, #1
    d198:	2b00      	cmp	r3, #0
    d19a:	d100      	bne.n	d19e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d19c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
    d19e:	490a      	ldr	r1, [pc, #40]	; (d1c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
    d1a0:	9b01      	ldr	r3, [sp, #4]
    d1a2:	9a00      	ldr	r2, [sp, #0]
    d1a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
    d1a8:	4a06      	ldr	r2, [pc, #24]	; (d1c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d1aa:	9b01      	ldr	r3, [sp, #4]
    d1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1b0:	1c5a      	adds	r2, r3, #1
    d1b2:	4904      	ldr	r1, [pc, #16]	; (d1c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d1b4:	9b01      	ldr	r3, [sp, #4]
    d1b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d1ba:	bf00      	nop
    d1bc:	b003      	add	sp, #12
    d1be:	f85d fb04 	ldr.w	pc, [sp], #4
    d1c2:	bf00      	nop
    d1c4:	1fff8f8c 	.word	0x1fff8f8c
    d1c8:	1fff8f88 	.word	0x1fff8f88

0000d1cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
    d1cc:	b500      	push	{lr}
    d1ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d1d0:	f7f3 fd20 	bl	c14 <Sys_GetCoreID>
    d1d4:	4603      	mov	r3, r0
    d1d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
    d1d8:	4a0d      	ldr	r2, [pc, #52]	; (d210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d1da:	9b01      	ldr	r3, [sp, #4]
    d1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1e0:	1e5a      	subs	r2, r3, #1
    d1e2:	490b      	ldr	r1, [pc, #44]	; (d210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d1e4:	9b01      	ldr	r3, [sp, #4]
    d1e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
    d1ea:	4a0a      	ldr	r2, [pc, #40]	; (d214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
    d1ec:	9b01      	ldr	r3, [sp, #4]
    d1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1f2:	f003 0301 	and.w	r3, r3, #1
    d1f6:	2b00      	cmp	r3, #0
    d1f8:	d106      	bne.n	d208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    d1fa:	4a05      	ldr	r2, [pc, #20]	; (d210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d1fc:	9b01      	ldr	r3, [sp, #4]
    d1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d202:	2b00      	cmp	r3, #0
    d204:	d100      	bne.n	d208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d206:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d208:	bf00      	nop
    d20a:	b003      	add	sp, #12
    d20c:	f85d fb04 	ldr.w	pc, [sp], #4
    d210:	1fff8f8c 	.word	0x1fff8f8c
    d214:	1fff8f88 	.word	0x1fff8f88

0000d218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
    d218:	b500      	push	{lr}
    d21a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d21c:	f7f3 fcfa 	bl	c14 <Sys_GetCoreID>
    d220:	4603      	mov	r3, r0
    d222:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
    d224:	4a10      	ldr	r2, [pc, #64]	; (d268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d226:	9b01      	ldr	r3, [sp, #4]
    d228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d22c:	2b00      	cmp	r3, #0
    d22e:	d10d      	bne.n	d24c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d230:	f7f3 fc0e 	bl	a50 <Adc_schm_read_msr>
    d234:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d236:	9b00      	ldr	r3, [sp, #0]
    d238:	f003 0301 	and.w	r3, r3, #1
    d23c:	2b00      	cmp	r3, #0
    d23e:	d100      	bne.n	d242 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d240:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
    d242:	490a      	ldr	r1, [pc, #40]	; (d26c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
    d244:	9b01      	ldr	r3, [sp, #4]
    d246:	9a00      	ldr	r2, [sp, #0]
    d248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
    d24c:	4a06      	ldr	r2, [pc, #24]	; (d268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d24e:	9b01      	ldr	r3, [sp, #4]
    d250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d254:	1c5a      	adds	r2, r3, #1
    d256:	4904      	ldr	r1, [pc, #16]	; (d268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d258:	9b01      	ldr	r3, [sp, #4]
    d25a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d25e:	bf00      	nop
    d260:	b003      	add	sp, #12
    d262:	f85d fb04 	ldr.w	pc, [sp], #4
    d266:	bf00      	nop
    d268:	1fff8f94 	.word	0x1fff8f94
    d26c:	1fff8f90 	.word	0x1fff8f90

0000d270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
    d270:	b500      	push	{lr}
    d272:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d274:	f7f3 fcce 	bl	c14 <Sys_GetCoreID>
    d278:	4603      	mov	r3, r0
    d27a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
    d27c:	4a0d      	ldr	r2, [pc, #52]	; (d2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d27e:	9b01      	ldr	r3, [sp, #4]
    d280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d284:	1e5a      	subs	r2, r3, #1
    d286:	490b      	ldr	r1, [pc, #44]	; (d2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d288:	9b01      	ldr	r3, [sp, #4]
    d28a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
    d28e:	4a0a      	ldr	r2, [pc, #40]	; (d2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
    d290:	9b01      	ldr	r3, [sp, #4]
    d292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d296:	f003 0301 	and.w	r3, r3, #1
    d29a:	2b00      	cmp	r3, #0
    d29c:	d106      	bne.n	d2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    d29e:	4a05      	ldr	r2, [pc, #20]	; (d2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d2a0:	9b01      	ldr	r3, [sp, #4]
    d2a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2a6:	2b00      	cmp	r3, #0
    d2a8:	d100      	bne.n	d2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d2aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d2ac:	bf00      	nop
    d2ae:	b003      	add	sp, #12
    d2b0:	f85d fb04 	ldr.w	pc, [sp], #4
    d2b4:	1fff8f94 	.word	0x1fff8f94
    d2b8:	1fff8f90 	.word	0x1fff8f90

0000d2bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
    d2bc:	b500      	push	{lr}
    d2be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d2c0:	f7f3 fca8 	bl	c14 <Sys_GetCoreID>
    d2c4:	4603      	mov	r3, r0
    d2c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
    d2c8:	4a10      	ldr	r2, [pc, #64]	; (d30c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d2ca:	9b01      	ldr	r3, [sp, #4]
    d2cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2d0:	2b00      	cmp	r3, #0
    d2d2:	d10d      	bne.n	d2f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d2d4:	f7f3 fbbc 	bl	a50 <Adc_schm_read_msr>
    d2d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d2da:	9b00      	ldr	r3, [sp, #0]
    d2dc:	f003 0301 	and.w	r3, r3, #1
    d2e0:	2b00      	cmp	r3, #0
    d2e2:	d100      	bne.n	d2e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d2e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
    d2e6:	490a      	ldr	r1, [pc, #40]	; (d310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
    d2e8:	9b01      	ldr	r3, [sp, #4]
    d2ea:	9a00      	ldr	r2, [sp, #0]
    d2ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
    d2f0:	4a06      	ldr	r2, [pc, #24]	; (d30c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d2f2:	9b01      	ldr	r3, [sp, #4]
    d2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2f8:	1c5a      	adds	r2, r3, #1
    d2fa:	4904      	ldr	r1, [pc, #16]	; (d30c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d2fc:	9b01      	ldr	r3, [sp, #4]
    d2fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d302:	bf00      	nop
    d304:	b003      	add	sp, #12
    d306:	f85d fb04 	ldr.w	pc, [sp], #4
    d30a:	bf00      	nop
    d30c:	1fff8f9c 	.word	0x1fff8f9c
    d310:	1fff8f98 	.word	0x1fff8f98

0000d314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
    d314:	b500      	push	{lr}
    d316:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d318:	f7f3 fc7c 	bl	c14 <Sys_GetCoreID>
    d31c:	4603      	mov	r3, r0
    d31e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
    d320:	4a0d      	ldr	r2, [pc, #52]	; (d358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d322:	9b01      	ldr	r3, [sp, #4]
    d324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d328:	1e5a      	subs	r2, r3, #1
    d32a:	490b      	ldr	r1, [pc, #44]	; (d358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d32c:	9b01      	ldr	r3, [sp, #4]
    d32e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
    d332:	4a0a      	ldr	r2, [pc, #40]	; (d35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
    d334:	9b01      	ldr	r3, [sp, #4]
    d336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d33a:	f003 0301 	and.w	r3, r3, #1
    d33e:	2b00      	cmp	r3, #0
    d340:	d106      	bne.n	d350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    d342:	4a05      	ldr	r2, [pc, #20]	; (d358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d344:	9b01      	ldr	r3, [sp, #4]
    d346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d34a:	2b00      	cmp	r3, #0
    d34c:	d100      	bne.n	d350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d34e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d350:	bf00      	nop
    d352:	b003      	add	sp, #12
    d354:	f85d fb04 	ldr.w	pc, [sp], #4
    d358:	1fff8f9c 	.word	0x1fff8f9c
    d35c:	1fff8f98 	.word	0x1fff8f98

0000d360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
    d360:	b500      	push	{lr}
    d362:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d364:	f7f3 fc56 	bl	c14 <Sys_GetCoreID>
    d368:	4603      	mov	r3, r0
    d36a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
    d36c:	4a10      	ldr	r2, [pc, #64]	; (d3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d36e:	9b01      	ldr	r3, [sp, #4]
    d370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d374:	2b00      	cmp	r3, #0
    d376:	d10d      	bne.n	d394 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d378:	f7f3 fb6a 	bl	a50 <Adc_schm_read_msr>
    d37c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d37e:	9b00      	ldr	r3, [sp, #0]
    d380:	f003 0301 	and.w	r3, r3, #1
    d384:	2b00      	cmp	r3, #0
    d386:	d100      	bne.n	d38a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d388:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
    d38a:	490a      	ldr	r1, [pc, #40]	; (d3b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
    d38c:	9b01      	ldr	r3, [sp, #4]
    d38e:	9a00      	ldr	r2, [sp, #0]
    d390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
    d394:	4a06      	ldr	r2, [pc, #24]	; (d3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d396:	9b01      	ldr	r3, [sp, #4]
    d398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d39c:	1c5a      	adds	r2, r3, #1
    d39e:	4904      	ldr	r1, [pc, #16]	; (d3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d3a0:	9b01      	ldr	r3, [sp, #4]
    d3a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d3a6:	bf00      	nop
    d3a8:	b003      	add	sp, #12
    d3aa:	f85d fb04 	ldr.w	pc, [sp], #4
    d3ae:	bf00      	nop
    d3b0:	1fff8fa4 	.word	0x1fff8fa4
    d3b4:	1fff8fa0 	.word	0x1fff8fa0

0000d3b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
    d3b8:	b500      	push	{lr}
    d3ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d3bc:	f7f3 fc2a 	bl	c14 <Sys_GetCoreID>
    d3c0:	4603      	mov	r3, r0
    d3c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
    d3c4:	4a0d      	ldr	r2, [pc, #52]	; (d3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d3c6:	9b01      	ldr	r3, [sp, #4]
    d3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3cc:	1e5a      	subs	r2, r3, #1
    d3ce:	490b      	ldr	r1, [pc, #44]	; (d3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d3d0:	9b01      	ldr	r3, [sp, #4]
    d3d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
    d3d6:	4a0a      	ldr	r2, [pc, #40]	; (d400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
    d3d8:	9b01      	ldr	r3, [sp, #4]
    d3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3de:	f003 0301 	and.w	r3, r3, #1
    d3e2:	2b00      	cmp	r3, #0
    d3e4:	d106      	bne.n	d3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    d3e6:	4a05      	ldr	r2, [pc, #20]	; (d3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d3e8:	9b01      	ldr	r3, [sp, #4]
    d3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3ee:	2b00      	cmp	r3, #0
    d3f0:	d100      	bne.n	d3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d3f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d3f4:	bf00      	nop
    d3f6:	b003      	add	sp, #12
    d3f8:	f85d fb04 	ldr.w	pc, [sp], #4
    d3fc:	1fff8fa4 	.word	0x1fff8fa4
    d400:	1fff8fa0 	.word	0x1fff8fa0

0000d404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
    d404:	b500      	push	{lr}
    d406:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d408:	f7f3 fc04 	bl	c14 <Sys_GetCoreID>
    d40c:	4603      	mov	r3, r0
    d40e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
    d410:	4a10      	ldr	r2, [pc, #64]	; (d454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    d412:	9b01      	ldr	r3, [sp, #4]
    d414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d418:	2b00      	cmp	r3, #0
    d41a:	d10d      	bne.n	d438 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d41c:	f7f3 fb18 	bl	a50 <Adc_schm_read_msr>
    d420:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d422:	9b00      	ldr	r3, [sp, #0]
    d424:	f003 0301 	and.w	r3, r3, #1
    d428:	2b00      	cmp	r3, #0
    d42a:	d100      	bne.n	d42e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d42c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
    d42e:	490a      	ldr	r1, [pc, #40]	; (d458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
    d430:	9b01      	ldr	r3, [sp, #4]
    d432:	9a00      	ldr	r2, [sp, #0]
    d434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
    d438:	4a06      	ldr	r2, [pc, #24]	; (d454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    d43a:	9b01      	ldr	r3, [sp, #4]
    d43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d440:	1c5a      	adds	r2, r3, #1
    d442:	4904      	ldr	r1, [pc, #16]	; (d454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    d444:	9b01      	ldr	r3, [sp, #4]
    d446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d44a:	bf00      	nop
    d44c:	b003      	add	sp, #12
    d44e:	f85d fb04 	ldr.w	pc, [sp], #4
    d452:	bf00      	nop
    d454:	1fff8fac 	.word	0x1fff8fac
    d458:	1fff8fa8 	.word	0x1fff8fa8

0000d45c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
    d45c:	b500      	push	{lr}
    d45e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d460:	f7f3 fbd8 	bl	c14 <Sys_GetCoreID>
    d464:	4603      	mov	r3, r0
    d466:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
    d468:	4a0d      	ldr	r2, [pc, #52]	; (d4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    d46a:	9b01      	ldr	r3, [sp, #4]
    d46c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d470:	1e5a      	subs	r2, r3, #1
    d472:	490b      	ldr	r1, [pc, #44]	; (d4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    d474:	9b01      	ldr	r3, [sp, #4]
    d476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
    d47a:	4a0a      	ldr	r2, [pc, #40]	; (d4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
    d47c:	9b01      	ldr	r3, [sp, #4]
    d47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d482:	f003 0301 	and.w	r3, r3, #1
    d486:	2b00      	cmp	r3, #0
    d488:	d106      	bne.n	d498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    d48a:	4a05      	ldr	r2, [pc, #20]	; (d4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    d48c:	9b01      	ldr	r3, [sp, #4]
    d48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d492:	2b00      	cmp	r3, #0
    d494:	d100      	bne.n	d498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d496:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d498:	bf00      	nop
    d49a:	b003      	add	sp, #12
    d49c:	f85d fb04 	ldr.w	pc, [sp], #4
    d4a0:	1fff8fac 	.word	0x1fff8fac
    d4a4:	1fff8fa8 	.word	0x1fff8fa8

0000d4a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
    d4a8:	b500      	push	{lr}
    d4aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4ac:	f7f3 fbb2 	bl	c14 <Sys_GetCoreID>
    d4b0:	4603      	mov	r3, r0
    d4b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
    d4b4:	4a10      	ldr	r2, [pc, #64]	; (d4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    d4b6:	9b01      	ldr	r3, [sp, #4]
    d4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4bc:	2b00      	cmp	r3, #0
    d4be:	d10d      	bne.n	d4dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d4c0:	f7f3 fac6 	bl	a50 <Adc_schm_read_msr>
    d4c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d4c6:	9b00      	ldr	r3, [sp, #0]
    d4c8:	f003 0301 	and.w	r3, r3, #1
    d4cc:	2b00      	cmp	r3, #0
    d4ce:	d100      	bne.n	d4d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d4d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
    d4d2:	490a      	ldr	r1, [pc, #40]	; (d4fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
    d4d4:	9b01      	ldr	r3, [sp, #4]
    d4d6:	9a00      	ldr	r2, [sp, #0]
    d4d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
    d4dc:	4a06      	ldr	r2, [pc, #24]	; (d4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    d4de:	9b01      	ldr	r3, [sp, #4]
    d4e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4e4:	1c5a      	adds	r2, r3, #1
    d4e6:	4904      	ldr	r1, [pc, #16]	; (d4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    d4e8:	9b01      	ldr	r3, [sp, #4]
    d4ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d4ee:	bf00      	nop
    d4f0:	b003      	add	sp, #12
    d4f2:	f85d fb04 	ldr.w	pc, [sp], #4
    d4f6:	bf00      	nop
    d4f8:	1fff8fb4 	.word	0x1fff8fb4
    d4fc:	1fff8fb0 	.word	0x1fff8fb0

0000d500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
    d500:	b500      	push	{lr}
    d502:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d504:	f7f3 fb86 	bl	c14 <Sys_GetCoreID>
    d508:	4603      	mov	r3, r0
    d50a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
    d50c:	4a0d      	ldr	r2, [pc, #52]	; (d544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    d50e:	9b01      	ldr	r3, [sp, #4]
    d510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d514:	1e5a      	subs	r2, r3, #1
    d516:	490b      	ldr	r1, [pc, #44]	; (d544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    d518:	9b01      	ldr	r3, [sp, #4]
    d51a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
    d51e:	4a0a      	ldr	r2, [pc, #40]	; (d548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
    d520:	9b01      	ldr	r3, [sp, #4]
    d522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d526:	f003 0301 	and.w	r3, r3, #1
    d52a:	2b00      	cmp	r3, #0
    d52c:	d106      	bne.n	d53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    d52e:	4a05      	ldr	r2, [pc, #20]	; (d544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    d530:	9b01      	ldr	r3, [sp, #4]
    d532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d536:	2b00      	cmp	r3, #0
    d538:	d100      	bne.n	d53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d53a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d53c:	bf00      	nop
    d53e:	b003      	add	sp, #12
    d540:	f85d fb04 	ldr.w	pc, [sp], #4
    d544:	1fff8fb4 	.word	0x1fff8fb4
    d548:	1fff8fb0 	.word	0x1fff8fb0

0000d54c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
    d54c:	b500      	push	{lr}
    d54e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d550:	f7f3 fb60 	bl	c14 <Sys_GetCoreID>
    d554:	4603      	mov	r3, r0
    d556:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
    d558:	4a10      	ldr	r2, [pc, #64]	; (d59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    d55a:	9b01      	ldr	r3, [sp, #4]
    d55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d560:	2b00      	cmp	r3, #0
    d562:	d10d      	bne.n	d580 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d564:	f7f3 fa74 	bl	a50 <Adc_schm_read_msr>
    d568:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d56a:	9b00      	ldr	r3, [sp, #0]
    d56c:	f003 0301 	and.w	r3, r3, #1
    d570:	2b00      	cmp	r3, #0
    d572:	d100      	bne.n	d576 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d574:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
    d576:	490a      	ldr	r1, [pc, #40]	; (d5a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
    d578:	9b01      	ldr	r3, [sp, #4]
    d57a:	9a00      	ldr	r2, [sp, #0]
    d57c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
    d580:	4a06      	ldr	r2, [pc, #24]	; (d59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    d582:	9b01      	ldr	r3, [sp, #4]
    d584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d588:	1c5a      	adds	r2, r3, #1
    d58a:	4904      	ldr	r1, [pc, #16]	; (d59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    d58c:	9b01      	ldr	r3, [sp, #4]
    d58e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d592:	bf00      	nop
    d594:	b003      	add	sp, #12
    d596:	f85d fb04 	ldr.w	pc, [sp], #4
    d59a:	bf00      	nop
    d59c:	1fff8fbc 	.word	0x1fff8fbc
    d5a0:	1fff8fb8 	.word	0x1fff8fb8

0000d5a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
    d5a4:	b500      	push	{lr}
    d5a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5a8:	f7f3 fb34 	bl	c14 <Sys_GetCoreID>
    d5ac:	4603      	mov	r3, r0
    d5ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
    d5b0:	4a0d      	ldr	r2, [pc, #52]	; (d5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    d5b2:	9b01      	ldr	r3, [sp, #4]
    d5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5b8:	1e5a      	subs	r2, r3, #1
    d5ba:	490b      	ldr	r1, [pc, #44]	; (d5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    d5bc:	9b01      	ldr	r3, [sp, #4]
    d5be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
    d5c2:	4a0a      	ldr	r2, [pc, #40]	; (d5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
    d5c4:	9b01      	ldr	r3, [sp, #4]
    d5c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5ca:	f003 0301 	and.w	r3, r3, #1
    d5ce:	2b00      	cmp	r3, #0
    d5d0:	d106      	bne.n	d5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    d5d2:	4a05      	ldr	r2, [pc, #20]	; (d5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    d5d4:	9b01      	ldr	r3, [sp, #4]
    d5d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5da:	2b00      	cmp	r3, #0
    d5dc:	d100      	bne.n	d5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d5de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d5e0:	bf00      	nop
    d5e2:	b003      	add	sp, #12
    d5e4:	f85d fb04 	ldr.w	pc, [sp], #4
    d5e8:	1fff8fbc 	.word	0x1fff8fbc
    d5ec:	1fff8fb8 	.word	0x1fff8fb8

0000d5f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
    d5f0:	b500      	push	{lr}
    d5f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5f4:	f7f3 fb0e 	bl	c14 <Sys_GetCoreID>
    d5f8:	4603      	mov	r3, r0
    d5fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
    d5fc:	4a10      	ldr	r2, [pc, #64]	; (d640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    d5fe:	9b01      	ldr	r3, [sp, #4]
    d600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d604:	2b00      	cmp	r3, #0
    d606:	d10d      	bne.n	d624 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d608:	f7f3 fa22 	bl	a50 <Adc_schm_read_msr>
    d60c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d60e:	9b00      	ldr	r3, [sp, #0]
    d610:	f003 0301 	and.w	r3, r3, #1
    d614:	2b00      	cmp	r3, #0
    d616:	d100      	bne.n	d61a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d618:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
    d61a:	490a      	ldr	r1, [pc, #40]	; (d644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
    d61c:	9b01      	ldr	r3, [sp, #4]
    d61e:	9a00      	ldr	r2, [sp, #0]
    d620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
    d624:	4a06      	ldr	r2, [pc, #24]	; (d640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    d626:	9b01      	ldr	r3, [sp, #4]
    d628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d62c:	1c5a      	adds	r2, r3, #1
    d62e:	4904      	ldr	r1, [pc, #16]	; (d640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    d630:	9b01      	ldr	r3, [sp, #4]
    d632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d636:	bf00      	nop
    d638:	b003      	add	sp, #12
    d63a:	f85d fb04 	ldr.w	pc, [sp], #4
    d63e:	bf00      	nop
    d640:	1fff8fc4 	.word	0x1fff8fc4
    d644:	1fff8fc0 	.word	0x1fff8fc0

0000d648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
    d648:	b500      	push	{lr}
    d64a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d64c:	f7f3 fae2 	bl	c14 <Sys_GetCoreID>
    d650:	4603      	mov	r3, r0
    d652:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
    d654:	4a0d      	ldr	r2, [pc, #52]	; (d68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    d656:	9b01      	ldr	r3, [sp, #4]
    d658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d65c:	1e5a      	subs	r2, r3, #1
    d65e:	490b      	ldr	r1, [pc, #44]	; (d68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    d660:	9b01      	ldr	r3, [sp, #4]
    d662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
    d666:	4a0a      	ldr	r2, [pc, #40]	; (d690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
    d668:	9b01      	ldr	r3, [sp, #4]
    d66a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d66e:	f003 0301 	and.w	r3, r3, #1
    d672:	2b00      	cmp	r3, #0
    d674:	d106      	bne.n	d684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    d676:	4a05      	ldr	r2, [pc, #20]	; (d68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    d678:	9b01      	ldr	r3, [sp, #4]
    d67a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d67e:	2b00      	cmp	r3, #0
    d680:	d100      	bne.n	d684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d682:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d684:	bf00      	nop
    d686:	b003      	add	sp, #12
    d688:	f85d fb04 	ldr.w	pc, [sp], #4
    d68c:	1fff8fc4 	.word	0x1fff8fc4
    d690:	1fff8fc0 	.word	0x1fff8fc0

0000d694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
    d694:	b500      	push	{lr}
    d696:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d698:	f7f3 fabc 	bl	c14 <Sys_GetCoreID>
    d69c:	4603      	mov	r3, r0
    d69e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
    d6a0:	4a10      	ldr	r2, [pc, #64]	; (d6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    d6a2:	9b01      	ldr	r3, [sp, #4]
    d6a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6a8:	2b00      	cmp	r3, #0
    d6aa:	d10d      	bne.n	d6c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d6ac:	f7f3 f9d0 	bl	a50 <Adc_schm_read_msr>
    d6b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d6b2:	9b00      	ldr	r3, [sp, #0]
    d6b4:	f003 0301 	and.w	r3, r3, #1
    d6b8:	2b00      	cmp	r3, #0
    d6ba:	d100      	bne.n	d6be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d6bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
    d6be:	490a      	ldr	r1, [pc, #40]	; (d6e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
    d6c0:	9b01      	ldr	r3, [sp, #4]
    d6c2:	9a00      	ldr	r2, [sp, #0]
    d6c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
    d6c8:	4a06      	ldr	r2, [pc, #24]	; (d6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    d6ca:	9b01      	ldr	r3, [sp, #4]
    d6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6d0:	1c5a      	adds	r2, r3, #1
    d6d2:	4904      	ldr	r1, [pc, #16]	; (d6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    d6d4:	9b01      	ldr	r3, [sp, #4]
    d6d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d6da:	bf00      	nop
    d6dc:	b003      	add	sp, #12
    d6de:	f85d fb04 	ldr.w	pc, [sp], #4
    d6e2:	bf00      	nop
    d6e4:	1fff8fcc 	.word	0x1fff8fcc
    d6e8:	1fff8fc8 	.word	0x1fff8fc8

0000d6ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
    d6ec:	b500      	push	{lr}
    d6ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6f0:	f7f3 fa90 	bl	c14 <Sys_GetCoreID>
    d6f4:	4603      	mov	r3, r0
    d6f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
    d6f8:	4a0d      	ldr	r2, [pc, #52]	; (d730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    d6fa:	9b01      	ldr	r3, [sp, #4]
    d6fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d700:	1e5a      	subs	r2, r3, #1
    d702:	490b      	ldr	r1, [pc, #44]	; (d730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    d704:	9b01      	ldr	r3, [sp, #4]
    d706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
    d70a:	4a0a      	ldr	r2, [pc, #40]	; (d734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
    d70c:	9b01      	ldr	r3, [sp, #4]
    d70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d712:	f003 0301 	and.w	r3, r3, #1
    d716:	2b00      	cmp	r3, #0
    d718:	d106      	bne.n	d728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    d71a:	4a05      	ldr	r2, [pc, #20]	; (d730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    d71c:	9b01      	ldr	r3, [sp, #4]
    d71e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d722:	2b00      	cmp	r3, #0
    d724:	d100      	bne.n	d728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d726:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d728:	bf00      	nop
    d72a:	b003      	add	sp, #12
    d72c:	f85d fb04 	ldr.w	pc, [sp], #4
    d730:	1fff8fcc 	.word	0x1fff8fcc
    d734:	1fff8fc8 	.word	0x1fff8fc8

0000d738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
    d738:	b500      	push	{lr}
    d73a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d73c:	f7f3 fa6a 	bl	c14 <Sys_GetCoreID>
    d740:	4603      	mov	r3, r0
    d742:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
    d744:	4a10      	ldr	r2, [pc, #64]	; (d788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    d746:	9b01      	ldr	r3, [sp, #4]
    d748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d74c:	2b00      	cmp	r3, #0
    d74e:	d10d      	bne.n	d76c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d750:	f7f3 f97e 	bl	a50 <Adc_schm_read_msr>
    d754:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d756:	9b00      	ldr	r3, [sp, #0]
    d758:	f003 0301 	and.w	r3, r3, #1
    d75c:	2b00      	cmp	r3, #0
    d75e:	d100      	bne.n	d762 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d760:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
    d762:	490a      	ldr	r1, [pc, #40]	; (d78c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
    d764:	9b01      	ldr	r3, [sp, #4]
    d766:	9a00      	ldr	r2, [sp, #0]
    d768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
    d76c:	4a06      	ldr	r2, [pc, #24]	; (d788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    d76e:	9b01      	ldr	r3, [sp, #4]
    d770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d774:	1c5a      	adds	r2, r3, #1
    d776:	4904      	ldr	r1, [pc, #16]	; (d788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    d778:	9b01      	ldr	r3, [sp, #4]
    d77a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d77e:	bf00      	nop
    d780:	b003      	add	sp, #12
    d782:	f85d fb04 	ldr.w	pc, [sp], #4
    d786:	bf00      	nop
    d788:	1fff8fd4 	.word	0x1fff8fd4
    d78c:	1fff8fd0 	.word	0x1fff8fd0

0000d790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
    d790:	b500      	push	{lr}
    d792:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d794:	f7f3 fa3e 	bl	c14 <Sys_GetCoreID>
    d798:	4603      	mov	r3, r0
    d79a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
    d79c:	4a0d      	ldr	r2, [pc, #52]	; (d7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    d79e:	9b01      	ldr	r3, [sp, #4]
    d7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7a4:	1e5a      	subs	r2, r3, #1
    d7a6:	490b      	ldr	r1, [pc, #44]	; (d7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    d7a8:	9b01      	ldr	r3, [sp, #4]
    d7aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
    d7ae:	4a0a      	ldr	r2, [pc, #40]	; (d7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
    d7b0:	9b01      	ldr	r3, [sp, #4]
    d7b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7b6:	f003 0301 	and.w	r3, r3, #1
    d7ba:	2b00      	cmp	r3, #0
    d7bc:	d106      	bne.n	d7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    d7be:	4a05      	ldr	r2, [pc, #20]	; (d7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    d7c0:	9b01      	ldr	r3, [sp, #4]
    d7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7c6:	2b00      	cmp	r3, #0
    d7c8:	d100      	bne.n	d7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d7ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d7cc:	bf00      	nop
    d7ce:	b003      	add	sp, #12
    d7d0:	f85d fb04 	ldr.w	pc, [sp], #4
    d7d4:	1fff8fd4 	.word	0x1fff8fd4
    d7d8:	1fff8fd0 	.word	0x1fff8fd0

0000d7dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
    d7dc:	b500      	push	{lr}
    d7de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7e0:	f7f3 fa18 	bl	c14 <Sys_GetCoreID>
    d7e4:	4603      	mov	r3, r0
    d7e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
    d7e8:	4a10      	ldr	r2, [pc, #64]	; (d82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    d7ea:	9b01      	ldr	r3, [sp, #4]
    d7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7f0:	2b00      	cmp	r3, #0
    d7f2:	d10d      	bne.n	d810 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d7f4:	f7f3 f92c 	bl	a50 <Adc_schm_read_msr>
    d7f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d7fa:	9b00      	ldr	r3, [sp, #0]
    d7fc:	f003 0301 	and.w	r3, r3, #1
    d800:	2b00      	cmp	r3, #0
    d802:	d100      	bne.n	d806 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d804:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
    d806:	490a      	ldr	r1, [pc, #40]	; (d830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
    d808:	9b01      	ldr	r3, [sp, #4]
    d80a:	9a00      	ldr	r2, [sp, #0]
    d80c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
    d810:	4a06      	ldr	r2, [pc, #24]	; (d82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    d812:	9b01      	ldr	r3, [sp, #4]
    d814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d818:	1c5a      	adds	r2, r3, #1
    d81a:	4904      	ldr	r1, [pc, #16]	; (d82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    d81c:	9b01      	ldr	r3, [sp, #4]
    d81e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d822:	bf00      	nop
    d824:	b003      	add	sp, #12
    d826:	f85d fb04 	ldr.w	pc, [sp], #4
    d82a:	bf00      	nop
    d82c:	1fff8fdc 	.word	0x1fff8fdc
    d830:	1fff8fd8 	.word	0x1fff8fd8

0000d834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
    d834:	b500      	push	{lr}
    d836:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d838:	f7f3 f9ec 	bl	c14 <Sys_GetCoreID>
    d83c:	4603      	mov	r3, r0
    d83e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
    d840:	4a0d      	ldr	r2, [pc, #52]	; (d878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    d842:	9b01      	ldr	r3, [sp, #4]
    d844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d848:	1e5a      	subs	r2, r3, #1
    d84a:	490b      	ldr	r1, [pc, #44]	; (d878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    d84c:	9b01      	ldr	r3, [sp, #4]
    d84e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
    d852:	4a0a      	ldr	r2, [pc, #40]	; (d87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
    d854:	9b01      	ldr	r3, [sp, #4]
    d856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d85a:	f003 0301 	and.w	r3, r3, #1
    d85e:	2b00      	cmp	r3, #0
    d860:	d106      	bne.n	d870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    d862:	4a05      	ldr	r2, [pc, #20]	; (d878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    d864:	9b01      	ldr	r3, [sp, #4]
    d866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d86a:	2b00      	cmp	r3, #0
    d86c:	d100      	bne.n	d870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d86e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d870:	bf00      	nop
    d872:	b003      	add	sp, #12
    d874:	f85d fb04 	ldr.w	pc, [sp], #4
    d878:	1fff8fdc 	.word	0x1fff8fdc
    d87c:	1fff8fd8 	.word	0x1fff8fd8

0000d880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
    d880:	b500      	push	{lr}
    d882:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d884:	f7f3 f9c6 	bl	c14 <Sys_GetCoreID>
    d888:	4603      	mov	r3, r0
    d88a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
    d88c:	4a10      	ldr	r2, [pc, #64]	; (d8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    d88e:	9b01      	ldr	r3, [sp, #4]
    d890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d894:	2b00      	cmp	r3, #0
    d896:	d10d      	bne.n	d8b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d898:	f7f3 f8da 	bl	a50 <Adc_schm_read_msr>
    d89c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d89e:	9b00      	ldr	r3, [sp, #0]
    d8a0:	f003 0301 	and.w	r3, r3, #1
    d8a4:	2b00      	cmp	r3, #0
    d8a6:	d100      	bne.n	d8aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d8a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
    d8aa:	490a      	ldr	r1, [pc, #40]	; (d8d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
    d8ac:	9b01      	ldr	r3, [sp, #4]
    d8ae:	9a00      	ldr	r2, [sp, #0]
    d8b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
    d8b4:	4a06      	ldr	r2, [pc, #24]	; (d8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    d8b6:	9b01      	ldr	r3, [sp, #4]
    d8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8bc:	1c5a      	adds	r2, r3, #1
    d8be:	4904      	ldr	r1, [pc, #16]	; (d8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    d8c0:	9b01      	ldr	r3, [sp, #4]
    d8c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d8c6:	bf00      	nop
    d8c8:	b003      	add	sp, #12
    d8ca:	f85d fb04 	ldr.w	pc, [sp], #4
    d8ce:	bf00      	nop
    d8d0:	1fff8fe4 	.word	0x1fff8fe4
    d8d4:	1fff8fe0 	.word	0x1fff8fe0

0000d8d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
    d8d8:	b500      	push	{lr}
    d8da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d8dc:	f7f3 f99a 	bl	c14 <Sys_GetCoreID>
    d8e0:	4603      	mov	r3, r0
    d8e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
    d8e4:	4a0d      	ldr	r2, [pc, #52]	; (d91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    d8e6:	9b01      	ldr	r3, [sp, #4]
    d8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8ec:	1e5a      	subs	r2, r3, #1
    d8ee:	490b      	ldr	r1, [pc, #44]	; (d91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    d8f0:	9b01      	ldr	r3, [sp, #4]
    d8f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
    d8f6:	4a0a      	ldr	r2, [pc, #40]	; (d920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
    d8f8:	9b01      	ldr	r3, [sp, #4]
    d8fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8fe:	f003 0301 	and.w	r3, r3, #1
    d902:	2b00      	cmp	r3, #0
    d904:	d106      	bne.n	d914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    d906:	4a05      	ldr	r2, [pc, #20]	; (d91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    d908:	9b01      	ldr	r3, [sp, #4]
    d90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d90e:	2b00      	cmp	r3, #0
    d910:	d100      	bne.n	d914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d912:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d914:	bf00      	nop
    d916:	b003      	add	sp, #12
    d918:	f85d fb04 	ldr.w	pc, [sp], #4
    d91c:	1fff8fe4 	.word	0x1fff8fe4
    d920:	1fff8fe0 	.word	0x1fff8fe0

0000d924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
    d924:	b500      	push	{lr}
    d926:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d928:	f7f3 f974 	bl	c14 <Sys_GetCoreID>
    d92c:	4603      	mov	r3, r0
    d92e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
    d930:	4a10      	ldr	r2, [pc, #64]	; (d974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    d932:	9b01      	ldr	r3, [sp, #4]
    d934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d938:	2b00      	cmp	r3, #0
    d93a:	d10d      	bne.n	d958 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d93c:	f7f3 f888 	bl	a50 <Adc_schm_read_msr>
    d940:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d942:	9b00      	ldr	r3, [sp, #0]
    d944:	f003 0301 	and.w	r3, r3, #1
    d948:	2b00      	cmp	r3, #0
    d94a:	d100      	bne.n	d94e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d94c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
    d94e:	490a      	ldr	r1, [pc, #40]	; (d978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
    d950:	9b01      	ldr	r3, [sp, #4]
    d952:	9a00      	ldr	r2, [sp, #0]
    d954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
    d958:	4a06      	ldr	r2, [pc, #24]	; (d974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    d95a:	9b01      	ldr	r3, [sp, #4]
    d95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d960:	1c5a      	adds	r2, r3, #1
    d962:	4904      	ldr	r1, [pc, #16]	; (d974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    d964:	9b01      	ldr	r3, [sp, #4]
    d966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d96a:	bf00      	nop
    d96c:	b003      	add	sp, #12
    d96e:	f85d fb04 	ldr.w	pc, [sp], #4
    d972:	bf00      	nop
    d974:	1fff8fec 	.word	0x1fff8fec
    d978:	1fff8fe8 	.word	0x1fff8fe8

0000d97c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
    d97c:	b500      	push	{lr}
    d97e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d980:	f7f3 f948 	bl	c14 <Sys_GetCoreID>
    d984:	4603      	mov	r3, r0
    d986:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
    d988:	4a0d      	ldr	r2, [pc, #52]	; (d9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    d98a:	9b01      	ldr	r3, [sp, #4]
    d98c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d990:	1e5a      	subs	r2, r3, #1
    d992:	490b      	ldr	r1, [pc, #44]	; (d9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    d994:	9b01      	ldr	r3, [sp, #4]
    d996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
    d99a:	4a0a      	ldr	r2, [pc, #40]	; (d9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
    d99c:	9b01      	ldr	r3, [sp, #4]
    d99e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9a2:	f003 0301 	and.w	r3, r3, #1
    d9a6:	2b00      	cmp	r3, #0
    d9a8:	d106      	bne.n	d9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    d9aa:	4a05      	ldr	r2, [pc, #20]	; (d9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    d9ac:	9b01      	ldr	r3, [sp, #4]
    d9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9b2:	2b00      	cmp	r3, #0
    d9b4:	d100      	bne.n	d9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d9b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d9b8:	bf00      	nop
    d9ba:	b003      	add	sp, #12
    d9bc:	f85d fb04 	ldr.w	pc, [sp], #4
    d9c0:	1fff8fec 	.word	0x1fff8fec
    d9c4:	1fff8fe8 	.word	0x1fff8fe8

0000d9c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
    d9c8:	b500      	push	{lr}
    d9ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d9cc:	f7f3 f922 	bl	c14 <Sys_GetCoreID>
    d9d0:	4603      	mov	r3, r0
    d9d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
    d9d4:	4a10      	ldr	r2, [pc, #64]	; (da18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    d9d6:	9b01      	ldr	r3, [sp, #4]
    d9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9dc:	2b00      	cmp	r3, #0
    d9de:	d10d      	bne.n	d9fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d9e0:	f7f3 f836 	bl	a50 <Adc_schm_read_msr>
    d9e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d9e6:	9b00      	ldr	r3, [sp, #0]
    d9e8:	f003 0301 	and.w	r3, r3, #1
    d9ec:	2b00      	cmp	r3, #0
    d9ee:	d100      	bne.n	d9f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d9f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
    d9f2:	490a      	ldr	r1, [pc, #40]	; (da1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
    d9f4:	9b01      	ldr	r3, [sp, #4]
    d9f6:	9a00      	ldr	r2, [sp, #0]
    d9f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
    d9fc:	4a06      	ldr	r2, [pc, #24]	; (da18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    d9fe:	9b01      	ldr	r3, [sp, #4]
    da00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da04:	1c5a      	adds	r2, r3, #1
    da06:	4904      	ldr	r1, [pc, #16]	; (da18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    da08:	9b01      	ldr	r3, [sp, #4]
    da0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    da0e:	bf00      	nop
    da10:	b003      	add	sp, #12
    da12:	f85d fb04 	ldr.w	pc, [sp], #4
    da16:	bf00      	nop
    da18:	1fff8ff4 	.word	0x1fff8ff4
    da1c:	1fff8ff0 	.word	0x1fff8ff0

0000da20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
    da20:	b500      	push	{lr}
    da22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da24:	f7f3 f8f6 	bl	c14 <Sys_GetCoreID>
    da28:	4603      	mov	r3, r0
    da2a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
    da2c:	4a0d      	ldr	r2, [pc, #52]	; (da64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    da2e:	9b01      	ldr	r3, [sp, #4]
    da30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da34:	1e5a      	subs	r2, r3, #1
    da36:	490b      	ldr	r1, [pc, #44]	; (da64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    da38:	9b01      	ldr	r3, [sp, #4]
    da3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
    da3e:	4a0a      	ldr	r2, [pc, #40]	; (da68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
    da40:	9b01      	ldr	r3, [sp, #4]
    da42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da46:	f003 0301 	and.w	r3, r3, #1
    da4a:	2b00      	cmp	r3, #0
    da4c:	d106      	bne.n	da5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    da4e:	4a05      	ldr	r2, [pc, #20]	; (da64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    da50:	9b01      	ldr	r3, [sp, #4]
    da52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da56:	2b00      	cmp	r3, #0
    da58:	d100      	bne.n	da5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    da5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    da5c:	bf00      	nop
    da5e:	b003      	add	sp, #12
    da60:	f85d fb04 	ldr.w	pc, [sp], #4
    da64:	1fff8ff4 	.word	0x1fff8ff4
    da68:	1fff8ff0 	.word	0x1fff8ff0

0000da6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
    da6c:	b500      	push	{lr}
    da6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da70:	f7f3 f8d0 	bl	c14 <Sys_GetCoreID>
    da74:	4603      	mov	r3, r0
    da76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
    da78:	4a10      	ldr	r2, [pc, #64]	; (dabc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    da7a:	9b01      	ldr	r3, [sp, #4]
    da7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da80:	2b00      	cmp	r3, #0
    da82:	d10d      	bne.n	daa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    da84:	f7f2 ffe4 	bl	a50 <Adc_schm_read_msr>
    da88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    da8a:	9b00      	ldr	r3, [sp, #0]
    da8c:	f003 0301 	and.w	r3, r3, #1
    da90:	2b00      	cmp	r3, #0
    da92:	d100      	bne.n	da96 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    da94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
    da96:	490a      	ldr	r1, [pc, #40]	; (dac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
    da98:	9b01      	ldr	r3, [sp, #4]
    da9a:	9a00      	ldr	r2, [sp, #0]
    da9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
    daa0:	4a06      	ldr	r2, [pc, #24]	; (dabc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    daa2:	9b01      	ldr	r3, [sp, #4]
    daa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daa8:	1c5a      	adds	r2, r3, #1
    daaa:	4904      	ldr	r1, [pc, #16]	; (dabc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    daac:	9b01      	ldr	r3, [sp, #4]
    daae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dab2:	bf00      	nop
    dab4:	b003      	add	sp, #12
    dab6:	f85d fb04 	ldr.w	pc, [sp], #4
    daba:	bf00      	nop
    dabc:	1fff8ffc 	.word	0x1fff8ffc
    dac0:	1fff8ff8 	.word	0x1fff8ff8

0000dac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
    dac4:	b500      	push	{lr}
    dac6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dac8:	f7f3 f8a4 	bl	c14 <Sys_GetCoreID>
    dacc:	4603      	mov	r3, r0
    dace:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
    dad0:	4a0d      	ldr	r2, [pc, #52]	; (db08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    dad2:	9b01      	ldr	r3, [sp, #4]
    dad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dad8:	1e5a      	subs	r2, r3, #1
    dada:	490b      	ldr	r1, [pc, #44]	; (db08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    dadc:	9b01      	ldr	r3, [sp, #4]
    dade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
    dae2:	4a0a      	ldr	r2, [pc, #40]	; (db0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
    dae4:	9b01      	ldr	r3, [sp, #4]
    dae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daea:	f003 0301 	and.w	r3, r3, #1
    daee:	2b00      	cmp	r3, #0
    daf0:	d106      	bne.n	db00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    daf2:	4a05      	ldr	r2, [pc, #20]	; (db08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    daf4:	9b01      	ldr	r3, [sp, #4]
    daf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dafa:	2b00      	cmp	r3, #0
    dafc:	d100      	bne.n	db00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dafe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    db00:	bf00      	nop
    db02:	b003      	add	sp, #12
    db04:	f85d fb04 	ldr.w	pc, [sp], #4
    db08:	1fff8ffc 	.word	0x1fff8ffc
    db0c:	1fff8ff8 	.word	0x1fff8ff8

0000db10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
    db10:	b500      	push	{lr}
    db12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db14:	f7f3 f87e 	bl	c14 <Sys_GetCoreID>
    db18:	4603      	mov	r3, r0
    db1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
    db1c:	4a10      	ldr	r2, [pc, #64]	; (db60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    db1e:	9b01      	ldr	r3, [sp, #4]
    db20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db24:	2b00      	cmp	r3, #0
    db26:	d10d      	bne.n	db44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    db28:	f7f2 ff92 	bl	a50 <Adc_schm_read_msr>
    db2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    db2e:	9b00      	ldr	r3, [sp, #0]
    db30:	f003 0301 	and.w	r3, r3, #1
    db34:	2b00      	cmp	r3, #0
    db36:	d100      	bne.n	db3a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    db38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
    db3a:	490a      	ldr	r1, [pc, #40]	; (db64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
    db3c:	9b01      	ldr	r3, [sp, #4]
    db3e:	9a00      	ldr	r2, [sp, #0]
    db40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
    db44:	4a06      	ldr	r2, [pc, #24]	; (db60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    db46:	9b01      	ldr	r3, [sp, #4]
    db48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db4c:	1c5a      	adds	r2, r3, #1
    db4e:	4904      	ldr	r1, [pc, #16]	; (db60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    db50:	9b01      	ldr	r3, [sp, #4]
    db52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    db56:	bf00      	nop
    db58:	b003      	add	sp, #12
    db5a:	f85d fb04 	ldr.w	pc, [sp], #4
    db5e:	bf00      	nop
    db60:	1fff9004 	.word	0x1fff9004
    db64:	1fff9000 	.word	0x1fff9000

0000db68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
    db68:	b500      	push	{lr}
    db6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db6c:	f7f3 f852 	bl	c14 <Sys_GetCoreID>
    db70:	4603      	mov	r3, r0
    db72:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
    db74:	4a0d      	ldr	r2, [pc, #52]	; (dbac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    db76:	9b01      	ldr	r3, [sp, #4]
    db78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db7c:	1e5a      	subs	r2, r3, #1
    db7e:	490b      	ldr	r1, [pc, #44]	; (dbac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    db80:	9b01      	ldr	r3, [sp, #4]
    db82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
    db86:	4a0a      	ldr	r2, [pc, #40]	; (dbb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
    db88:	9b01      	ldr	r3, [sp, #4]
    db8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db8e:	f003 0301 	and.w	r3, r3, #1
    db92:	2b00      	cmp	r3, #0
    db94:	d106      	bne.n	dba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    db96:	4a05      	ldr	r2, [pc, #20]	; (dbac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    db98:	9b01      	ldr	r3, [sp, #4]
    db9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db9e:	2b00      	cmp	r3, #0
    dba0:	d100      	bne.n	dba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dba2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dba4:	bf00      	nop
    dba6:	b003      	add	sp, #12
    dba8:	f85d fb04 	ldr.w	pc, [sp], #4
    dbac:	1fff9004 	.word	0x1fff9004
    dbb0:	1fff9000 	.word	0x1fff9000

0000dbb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
    dbb4:	b500      	push	{lr}
    dbb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dbb8:	f7f3 f82c 	bl	c14 <Sys_GetCoreID>
    dbbc:	4603      	mov	r3, r0
    dbbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
    dbc0:	4a10      	ldr	r2, [pc, #64]	; (dc04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    dbc2:	9b01      	ldr	r3, [sp, #4]
    dbc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbc8:	2b00      	cmp	r3, #0
    dbca:	d10d      	bne.n	dbe8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dbcc:	f7f2 ff40 	bl	a50 <Adc_schm_read_msr>
    dbd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dbd2:	9b00      	ldr	r3, [sp, #0]
    dbd4:	f003 0301 	and.w	r3, r3, #1
    dbd8:	2b00      	cmp	r3, #0
    dbda:	d100      	bne.n	dbde <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dbdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
    dbde:	490a      	ldr	r1, [pc, #40]	; (dc08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
    dbe0:	9b01      	ldr	r3, [sp, #4]
    dbe2:	9a00      	ldr	r2, [sp, #0]
    dbe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
    dbe8:	4a06      	ldr	r2, [pc, #24]	; (dc04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    dbea:	9b01      	ldr	r3, [sp, #4]
    dbec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbf0:	1c5a      	adds	r2, r3, #1
    dbf2:	4904      	ldr	r1, [pc, #16]	; (dc04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    dbf4:	9b01      	ldr	r3, [sp, #4]
    dbf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dbfa:	bf00      	nop
    dbfc:	b003      	add	sp, #12
    dbfe:	f85d fb04 	ldr.w	pc, [sp], #4
    dc02:	bf00      	nop
    dc04:	1fff900c 	.word	0x1fff900c
    dc08:	1fff9008 	.word	0x1fff9008

0000dc0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
    dc0c:	b500      	push	{lr}
    dc0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc10:	f7f3 f800 	bl	c14 <Sys_GetCoreID>
    dc14:	4603      	mov	r3, r0
    dc16:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
    dc18:	4a0d      	ldr	r2, [pc, #52]	; (dc50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    dc1a:	9b01      	ldr	r3, [sp, #4]
    dc1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc20:	1e5a      	subs	r2, r3, #1
    dc22:	490b      	ldr	r1, [pc, #44]	; (dc50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    dc24:	9b01      	ldr	r3, [sp, #4]
    dc26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
    dc2a:	4a0a      	ldr	r2, [pc, #40]	; (dc54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
    dc2c:	9b01      	ldr	r3, [sp, #4]
    dc2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc32:	f003 0301 	and.w	r3, r3, #1
    dc36:	2b00      	cmp	r3, #0
    dc38:	d106      	bne.n	dc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    dc3a:	4a05      	ldr	r2, [pc, #20]	; (dc50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    dc3c:	9b01      	ldr	r3, [sp, #4]
    dc3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc42:	2b00      	cmp	r3, #0
    dc44:	d100      	bne.n	dc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dc46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dc48:	bf00      	nop
    dc4a:	b003      	add	sp, #12
    dc4c:	f85d fb04 	ldr.w	pc, [sp], #4
    dc50:	1fff900c 	.word	0x1fff900c
    dc54:	1fff9008 	.word	0x1fff9008

0000dc58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
    dc58:	b500      	push	{lr}
    dc5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc5c:	f7f2 ffda 	bl	c14 <Sys_GetCoreID>
    dc60:	4603      	mov	r3, r0
    dc62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
    dc64:	4a10      	ldr	r2, [pc, #64]	; (dca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    dc66:	9b01      	ldr	r3, [sp, #4]
    dc68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc6c:	2b00      	cmp	r3, #0
    dc6e:	d10d      	bne.n	dc8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dc70:	f7f2 feee 	bl	a50 <Adc_schm_read_msr>
    dc74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dc76:	9b00      	ldr	r3, [sp, #0]
    dc78:	f003 0301 	and.w	r3, r3, #1
    dc7c:	2b00      	cmp	r3, #0
    dc7e:	d100      	bne.n	dc82 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dc80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
    dc82:	490a      	ldr	r1, [pc, #40]	; (dcac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
    dc84:	9b01      	ldr	r3, [sp, #4]
    dc86:	9a00      	ldr	r2, [sp, #0]
    dc88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
    dc8c:	4a06      	ldr	r2, [pc, #24]	; (dca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    dc8e:	9b01      	ldr	r3, [sp, #4]
    dc90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc94:	1c5a      	adds	r2, r3, #1
    dc96:	4904      	ldr	r1, [pc, #16]	; (dca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    dc98:	9b01      	ldr	r3, [sp, #4]
    dc9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dc9e:	bf00      	nop
    dca0:	b003      	add	sp, #12
    dca2:	f85d fb04 	ldr.w	pc, [sp], #4
    dca6:	bf00      	nop
    dca8:	1fff9014 	.word	0x1fff9014
    dcac:	1fff9010 	.word	0x1fff9010

0000dcb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
    dcb0:	b500      	push	{lr}
    dcb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcb4:	f7f2 ffae 	bl	c14 <Sys_GetCoreID>
    dcb8:	4603      	mov	r3, r0
    dcba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
    dcbc:	4a0d      	ldr	r2, [pc, #52]	; (dcf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    dcbe:	9b01      	ldr	r3, [sp, #4]
    dcc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcc4:	1e5a      	subs	r2, r3, #1
    dcc6:	490b      	ldr	r1, [pc, #44]	; (dcf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    dcc8:	9b01      	ldr	r3, [sp, #4]
    dcca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
    dcce:	4a0a      	ldr	r2, [pc, #40]	; (dcf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
    dcd0:	9b01      	ldr	r3, [sp, #4]
    dcd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcd6:	f003 0301 	and.w	r3, r3, #1
    dcda:	2b00      	cmp	r3, #0
    dcdc:	d106      	bne.n	dcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    dcde:	4a05      	ldr	r2, [pc, #20]	; (dcf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    dce0:	9b01      	ldr	r3, [sp, #4]
    dce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dce6:	2b00      	cmp	r3, #0
    dce8:	d100      	bne.n	dcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dcea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dcec:	bf00      	nop
    dcee:	b003      	add	sp, #12
    dcf0:	f85d fb04 	ldr.w	pc, [sp], #4
    dcf4:	1fff9014 	.word	0x1fff9014
    dcf8:	1fff9010 	.word	0x1fff9010

0000dcfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
    dcfc:	b500      	push	{lr}
    dcfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd00:	f7f2 ff88 	bl	c14 <Sys_GetCoreID>
    dd04:	4603      	mov	r3, r0
    dd06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
    dd08:	4a10      	ldr	r2, [pc, #64]	; (dd4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    dd0a:	9b01      	ldr	r3, [sp, #4]
    dd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd10:	2b00      	cmp	r3, #0
    dd12:	d10d      	bne.n	dd30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dd14:	f7f2 fe9c 	bl	a50 <Adc_schm_read_msr>
    dd18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dd1a:	9b00      	ldr	r3, [sp, #0]
    dd1c:	f003 0301 	and.w	r3, r3, #1
    dd20:	2b00      	cmp	r3, #0
    dd22:	d100      	bne.n	dd26 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dd24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
    dd26:	490a      	ldr	r1, [pc, #40]	; (dd50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
    dd28:	9b01      	ldr	r3, [sp, #4]
    dd2a:	9a00      	ldr	r2, [sp, #0]
    dd2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
    dd30:	4a06      	ldr	r2, [pc, #24]	; (dd4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    dd32:	9b01      	ldr	r3, [sp, #4]
    dd34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd38:	1c5a      	adds	r2, r3, #1
    dd3a:	4904      	ldr	r1, [pc, #16]	; (dd4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    dd3c:	9b01      	ldr	r3, [sp, #4]
    dd3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dd42:	bf00      	nop
    dd44:	b003      	add	sp, #12
    dd46:	f85d fb04 	ldr.w	pc, [sp], #4
    dd4a:	bf00      	nop
    dd4c:	1fff901c 	.word	0x1fff901c
    dd50:	1fff9018 	.word	0x1fff9018

0000dd54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
    dd54:	b500      	push	{lr}
    dd56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd58:	f7f2 ff5c 	bl	c14 <Sys_GetCoreID>
    dd5c:	4603      	mov	r3, r0
    dd5e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
    dd60:	4a0d      	ldr	r2, [pc, #52]	; (dd98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    dd62:	9b01      	ldr	r3, [sp, #4]
    dd64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd68:	1e5a      	subs	r2, r3, #1
    dd6a:	490b      	ldr	r1, [pc, #44]	; (dd98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    dd6c:	9b01      	ldr	r3, [sp, #4]
    dd6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
    dd72:	4a0a      	ldr	r2, [pc, #40]	; (dd9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
    dd74:	9b01      	ldr	r3, [sp, #4]
    dd76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd7a:	f003 0301 	and.w	r3, r3, #1
    dd7e:	2b00      	cmp	r3, #0
    dd80:	d106      	bne.n	dd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    dd82:	4a05      	ldr	r2, [pc, #20]	; (dd98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    dd84:	9b01      	ldr	r3, [sp, #4]
    dd86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd8a:	2b00      	cmp	r3, #0
    dd8c:	d100      	bne.n	dd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dd8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dd90:	bf00      	nop
    dd92:	b003      	add	sp, #12
    dd94:	f85d fb04 	ldr.w	pc, [sp], #4
    dd98:	1fff901c 	.word	0x1fff901c
    dd9c:	1fff9018 	.word	0x1fff9018

0000dda0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
    dda0:	b500      	push	{lr}
    dda2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dda4:	f7f2 ff36 	bl	c14 <Sys_GetCoreID>
    dda8:	4603      	mov	r3, r0
    ddaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
    ddac:	4a10      	ldr	r2, [pc, #64]	; (ddf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    ddae:	9b01      	ldr	r3, [sp, #4]
    ddb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddb4:	2b00      	cmp	r3, #0
    ddb6:	d10d      	bne.n	ddd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ddb8:	f7f2 fe4a 	bl	a50 <Adc_schm_read_msr>
    ddbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ddbe:	9b00      	ldr	r3, [sp, #0]
    ddc0:	f003 0301 	and.w	r3, r3, #1
    ddc4:	2b00      	cmp	r3, #0
    ddc6:	d100      	bne.n	ddca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ddc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
    ddca:	490a      	ldr	r1, [pc, #40]	; (ddf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
    ddcc:	9b01      	ldr	r3, [sp, #4]
    ddce:	9a00      	ldr	r2, [sp, #0]
    ddd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
    ddd4:	4a06      	ldr	r2, [pc, #24]	; (ddf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    ddd6:	9b01      	ldr	r3, [sp, #4]
    ddd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dddc:	1c5a      	adds	r2, r3, #1
    ddde:	4904      	ldr	r1, [pc, #16]	; (ddf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    dde0:	9b01      	ldr	r3, [sp, #4]
    dde2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dde6:	bf00      	nop
    dde8:	b003      	add	sp, #12
    ddea:	f85d fb04 	ldr.w	pc, [sp], #4
    ddee:	bf00      	nop
    ddf0:	1fff9024 	.word	0x1fff9024
    ddf4:	1fff9020 	.word	0x1fff9020

0000ddf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
    ddf8:	b500      	push	{lr}
    ddfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ddfc:	f7f2 ff0a 	bl	c14 <Sys_GetCoreID>
    de00:	4603      	mov	r3, r0
    de02:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
    de04:	4a0d      	ldr	r2, [pc, #52]	; (de3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    de06:	9b01      	ldr	r3, [sp, #4]
    de08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de0c:	1e5a      	subs	r2, r3, #1
    de0e:	490b      	ldr	r1, [pc, #44]	; (de3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    de10:	9b01      	ldr	r3, [sp, #4]
    de12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
    de16:	4a0a      	ldr	r2, [pc, #40]	; (de40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
    de18:	9b01      	ldr	r3, [sp, #4]
    de1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de1e:	f003 0301 	and.w	r3, r3, #1
    de22:	2b00      	cmp	r3, #0
    de24:	d106      	bne.n	de34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    de26:	4a05      	ldr	r2, [pc, #20]	; (de3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    de28:	9b01      	ldr	r3, [sp, #4]
    de2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de2e:	2b00      	cmp	r3, #0
    de30:	d100      	bne.n	de34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    de32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    de34:	bf00      	nop
    de36:	b003      	add	sp, #12
    de38:	f85d fb04 	ldr.w	pc, [sp], #4
    de3c:	1fff9024 	.word	0x1fff9024
    de40:	1fff9020 	.word	0x1fff9020

0000de44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
    de44:	b500      	push	{lr}
    de46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de48:	f7f2 fee4 	bl	c14 <Sys_GetCoreID>
    de4c:	4603      	mov	r3, r0
    de4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
    de50:	4a10      	ldr	r2, [pc, #64]	; (de94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    de52:	9b01      	ldr	r3, [sp, #4]
    de54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de58:	2b00      	cmp	r3, #0
    de5a:	d10d      	bne.n	de78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    de5c:	f7f2 fdf8 	bl	a50 <Adc_schm_read_msr>
    de60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    de62:	9b00      	ldr	r3, [sp, #0]
    de64:	f003 0301 	and.w	r3, r3, #1
    de68:	2b00      	cmp	r3, #0
    de6a:	d100      	bne.n	de6e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    de6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
    de6e:	490a      	ldr	r1, [pc, #40]	; (de98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
    de70:	9b01      	ldr	r3, [sp, #4]
    de72:	9a00      	ldr	r2, [sp, #0]
    de74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
    de78:	4a06      	ldr	r2, [pc, #24]	; (de94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    de7a:	9b01      	ldr	r3, [sp, #4]
    de7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de80:	1c5a      	adds	r2, r3, #1
    de82:	4904      	ldr	r1, [pc, #16]	; (de94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    de84:	9b01      	ldr	r3, [sp, #4]
    de86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    de8a:	bf00      	nop
    de8c:	b003      	add	sp, #12
    de8e:	f85d fb04 	ldr.w	pc, [sp], #4
    de92:	bf00      	nop
    de94:	1fff902c 	.word	0x1fff902c
    de98:	1fff9028 	.word	0x1fff9028

0000de9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
    de9c:	b500      	push	{lr}
    de9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dea0:	f7f2 feb8 	bl	c14 <Sys_GetCoreID>
    dea4:	4603      	mov	r3, r0
    dea6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
    dea8:	4a0d      	ldr	r2, [pc, #52]	; (dee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    deaa:	9b01      	ldr	r3, [sp, #4]
    deac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    deb0:	1e5a      	subs	r2, r3, #1
    deb2:	490b      	ldr	r1, [pc, #44]	; (dee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    deb4:	9b01      	ldr	r3, [sp, #4]
    deb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
    deba:	4a0a      	ldr	r2, [pc, #40]	; (dee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
    debc:	9b01      	ldr	r3, [sp, #4]
    debe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dec2:	f003 0301 	and.w	r3, r3, #1
    dec6:	2b00      	cmp	r3, #0
    dec8:	d106      	bne.n	ded8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    deca:	4a05      	ldr	r2, [pc, #20]	; (dee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    decc:	9b01      	ldr	r3, [sp, #4]
    dece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ded2:	2b00      	cmp	r3, #0
    ded4:	d100      	bne.n	ded8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ded6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ded8:	bf00      	nop
    deda:	b003      	add	sp, #12
    dedc:	f85d fb04 	ldr.w	pc, [sp], #4
    dee0:	1fff902c 	.word	0x1fff902c
    dee4:	1fff9028 	.word	0x1fff9028

0000dee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
    dee8:	b500      	push	{lr}
    deea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    deec:	f7f2 fe92 	bl	c14 <Sys_GetCoreID>
    def0:	4603      	mov	r3, r0
    def2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
    def4:	4a10      	ldr	r2, [pc, #64]	; (df38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    def6:	9b01      	ldr	r3, [sp, #4]
    def8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    defc:	2b00      	cmp	r3, #0
    defe:	d10d      	bne.n	df1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    df00:	f7f2 fda6 	bl	a50 <Adc_schm_read_msr>
    df04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    df06:	9b00      	ldr	r3, [sp, #0]
    df08:	f003 0301 	and.w	r3, r3, #1
    df0c:	2b00      	cmp	r3, #0
    df0e:	d100      	bne.n	df12 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    df10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
    df12:	490a      	ldr	r1, [pc, #40]	; (df3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
    df14:	9b01      	ldr	r3, [sp, #4]
    df16:	9a00      	ldr	r2, [sp, #0]
    df18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
    df1c:	4a06      	ldr	r2, [pc, #24]	; (df38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    df1e:	9b01      	ldr	r3, [sp, #4]
    df20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df24:	1c5a      	adds	r2, r3, #1
    df26:	4904      	ldr	r1, [pc, #16]	; (df38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    df28:	9b01      	ldr	r3, [sp, #4]
    df2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    df2e:	bf00      	nop
    df30:	b003      	add	sp, #12
    df32:	f85d fb04 	ldr.w	pc, [sp], #4
    df36:	bf00      	nop
    df38:	1fff9034 	.word	0x1fff9034
    df3c:	1fff9030 	.word	0x1fff9030

0000df40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
    df40:	b500      	push	{lr}
    df42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df44:	f7f2 fe66 	bl	c14 <Sys_GetCoreID>
    df48:	4603      	mov	r3, r0
    df4a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
    df4c:	4a0d      	ldr	r2, [pc, #52]	; (df84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    df4e:	9b01      	ldr	r3, [sp, #4]
    df50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df54:	1e5a      	subs	r2, r3, #1
    df56:	490b      	ldr	r1, [pc, #44]	; (df84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    df58:	9b01      	ldr	r3, [sp, #4]
    df5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
    df5e:	4a0a      	ldr	r2, [pc, #40]	; (df88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
    df60:	9b01      	ldr	r3, [sp, #4]
    df62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df66:	f003 0301 	and.w	r3, r3, #1
    df6a:	2b00      	cmp	r3, #0
    df6c:	d106      	bne.n	df7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    df6e:	4a05      	ldr	r2, [pc, #20]	; (df84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    df70:	9b01      	ldr	r3, [sp, #4]
    df72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df76:	2b00      	cmp	r3, #0
    df78:	d100      	bne.n	df7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    df7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    df7c:	bf00      	nop
    df7e:	b003      	add	sp, #12
    df80:	f85d fb04 	ldr.w	pc, [sp], #4
    df84:	1fff9034 	.word	0x1fff9034
    df88:	1fff9030 	.word	0x1fff9030

0000df8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
    df8c:	b500      	push	{lr}
    df8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df90:	f7f2 fe40 	bl	c14 <Sys_GetCoreID>
    df94:	4603      	mov	r3, r0
    df96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
    df98:	4a10      	ldr	r2, [pc, #64]	; (dfdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    df9a:	9b01      	ldr	r3, [sp, #4]
    df9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfa0:	2b00      	cmp	r3, #0
    dfa2:	d10d      	bne.n	dfc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dfa4:	f7f2 fd54 	bl	a50 <Adc_schm_read_msr>
    dfa8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dfaa:	9b00      	ldr	r3, [sp, #0]
    dfac:	f003 0301 	and.w	r3, r3, #1
    dfb0:	2b00      	cmp	r3, #0
    dfb2:	d100      	bne.n	dfb6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dfb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
    dfb6:	490a      	ldr	r1, [pc, #40]	; (dfe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
    dfb8:	9b01      	ldr	r3, [sp, #4]
    dfba:	9a00      	ldr	r2, [sp, #0]
    dfbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
    dfc0:	4a06      	ldr	r2, [pc, #24]	; (dfdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    dfc2:	9b01      	ldr	r3, [sp, #4]
    dfc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfc8:	1c5a      	adds	r2, r3, #1
    dfca:	4904      	ldr	r1, [pc, #16]	; (dfdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    dfcc:	9b01      	ldr	r3, [sp, #4]
    dfce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dfd2:	bf00      	nop
    dfd4:	b003      	add	sp, #12
    dfd6:	f85d fb04 	ldr.w	pc, [sp], #4
    dfda:	bf00      	nop
    dfdc:	1fff903c 	.word	0x1fff903c
    dfe0:	1fff9038 	.word	0x1fff9038

0000dfe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
    dfe4:	b500      	push	{lr}
    dfe6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dfe8:	f7f2 fe14 	bl	c14 <Sys_GetCoreID>
    dfec:	4603      	mov	r3, r0
    dfee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
    dff0:	4a0d      	ldr	r2, [pc, #52]	; (e028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    dff2:	9b01      	ldr	r3, [sp, #4]
    dff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dff8:	1e5a      	subs	r2, r3, #1
    dffa:	490b      	ldr	r1, [pc, #44]	; (e028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    dffc:	9b01      	ldr	r3, [sp, #4]
    dffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
    e002:	4a0a      	ldr	r2, [pc, #40]	; (e02c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
    e004:	9b01      	ldr	r3, [sp, #4]
    e006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e00a:	f003 0301 	and.w	r3, r3, #1
    e00e:	2b00      	cmp	r3, #0
    e010:	d106      	bne.n	e020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    e012:	4a05      	ldr	r2, [pc, #20]	; (e028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    e014:	9b01      	ldr	r3, [sp, #4]
    e016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e01a:	2b00      	cmp	r3, #0
    e01c:	d100      	bne.n	e020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e01e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e020:	bf00      	nop
    e022:	b003      	add	sp, #12
    e024:	f85d fb04 	ldr.w	pc, [sp], #4
    e028:	1fff903c 	.word	0x1fff903c
    e02c:	1fff9038 	.word	0x1fff9038

0000e030 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
    e030:	b500      	push	{lr}
    e032:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e034:	f7f2 fdee 	bl	c14 <Sys_GetCoreID>
    e038:	4603      	mov	r3, r0
    e03a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
    e03c:	4a10      	ldr	r2, [pc, #64]	; (e080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e03e:	9b01      	ldr	r3, [sp, #4]
    e040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e044:	2b00      	cmp	r3, #0
    e046:	d10d      	bne.n	e064 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e048:	f7f2 fd02 	bl	a50 <Adc_schm_read_msr>
    e04c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e04e:	9b00      	ldr	r3, [sp, #0]
    e050:	f003 0301 	and.w	r3, r3, #1
    e054:	2b00      	cmp	r3, #0
    e056:	d100      	bne.n	e05a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e058:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
    e05a:	490a      	ldr	r1, [pc, #40]	; (e084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
    e05c:	9b01      	ldr	r3, [sp, #4]
    e05e:	9a00      	ldr	r2, [sp, #0]
    e060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
    e064:	4a06      	ldr	r2, [pc, #24]	; (e080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e066:	9b01      	ldr	r3, [sp, #4]
    e068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e06c:	1c5a      	adds	r2, r3, #1
    e06e:	4904      	ldr	r1, [pc, #16]	; (e080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e070:	9b01      	ldr	r3, [sp, #4]
    e072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e076:	bf00      	nop
    e078:	b003      	add	sp, #12
    e07a:	f85d fb04 	ldr.w	pc, [sp], #4
    e07e:	bf00      	nop
    e080:	1fff9044 	.word	0x1fff9044
    e084:	1fff9040 	.word	0x1fff9040

0000e088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
    e088:	b500      	push	{lr}
    e08a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e08c:	f7f2 fdc2 	bl	c14 <Sys_GetCoreID>
    e090:	4603      	mov	r3, r0
    e092:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
    e094:	4a0d      	ldr	r2, [pc, #52]	; (e0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e096:	9b01      	ldr	r3, [sp, #4]
    e098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e09c:	1e5a      	subs	r2, r3, #1
    e09e:	490b      	ldr	r1, [pc, #44]	; (e0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e0a0:	9b01      	ldr	r3, [sp, #4]
    e0a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
    e0a6:	4a0a      	ldr	r2, [pc, #40]	; (e0d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
    e0a8:	9b01      	ldr	r3, [sp, #4]
    e0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0ae:	f003 0301 	and.w	r3, r3, #1
    e0b2:	2b00      	cmp	r3, #0
    e0b4:	d106      	bne.n	e0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    e0b6:	4a05      	ldr	r2, [pc, #20]	; (e0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e0b8:	9b01      	ldr	r3, [sp, #4]
    e0ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0be:	2b00      	cmp	r3, #0
    e0c0:	d100      	bne.n	e0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e0c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e0c4:	bf00      	nop
    e0c6:	b003      	add	sp, #12
    e0c8:	f85d fb04 	ldr.w	pc, [sp], #4
    e0cc:	1fff9044 	.word	0x1fff9044
    e0d0:	1fff9040 	.word	0x1fff9040

0000e0d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
    e0d4:	b500      	push	{lr}
    e0d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e0d8:	f7f2 fd9c 	bl	c14 <Sys_GetCoreID>
    e0dc:	4603      	mov	r3, r0
    e0de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
    e0e0:	4a10      	ldr	r2, [pc, #64]	; (e124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e0e2:	9b01      	ldr	r3, [sp, #4]
    e0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0e8:	2b00      	cmp	r3, #0
    e0ea:	d10d      	bne.n	e108 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e0ec:	f7f2 fcb0 	bl	a50 <Adc_schm_read_msr>
    e0f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e0f2:	9b00      	ldr	r3, [sp, #0]
    e0f4:	f003 0301 	and.w	r3, r3, #1
    e0f8:	2b00      	cmp	r3, #0
    e0fa:	d100      	bne.n	e0fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e0fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
    e0fe:	490a      	ldr	r1, [pc, #40]	; (e128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
    e100:	9b01      	ldr	r3, [sp, #4]
    e102:	9a00      	ldr	r2, [sp, #0]
    e104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
    e108:	4a06      	ldr	r2, [pc, #24]	; (e124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e10a:	9b01      	ldr	r3, [sp, #4]
    e10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e110:	1c5a      	adds	r2, r3, #1
    e112:	4904      	ldr	r1, [pc, #16]	; (e124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e114:	9b01      	ldr	r3, [sp, #4]
    e116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e11a:	bf00      	nop
    e11c:	b003      	add	sp, #12
    e11e:	f85d fb04 	ldr.w	pc, [sp], #4
    e122:	bf00      	nop
    e124:	1fff904c 	.word	0x1fff904c
    e128:	1fff9048 	.word	0x1fff9048

0000e12c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
    e12c:	b500      	push	{lr}
    e12e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e130:	f7f2 fd70 	bl	c14 <Sys_GetCoreID>
    e134:	4603      	mov	r3, r0
    e136:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
    e138:	4a0d      	ldr	r2, [pc, #52]	; (e170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e13a:	9b01      	ldr	r3, [sp, #4]
    e13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e140:	1e5a      	subs	r2, r3, #1
    e142:	490b      	ldr	r1, [pc, #44]	; (e170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e144:	9b01      	ldr	r3, [sp, #4]
    e146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
    e14a:	4a0a      	ldr	r2, [pc, #40]	; (e174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
    e14c:	9b01      	ldr	r3, [sp, #4]
    e14e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e152:	f003 0301 	and.w	r3, r3, #1
    e156:	2b00      	cmp	r3, #0
    e158:	d106      	bne.n	e168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    e15a:	4a05      	ldr	r2, [pc, #20]	; (e170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e15c:	9b01      	ldr	r3, [sp, #4]
    e15e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e162:	2b00      	cmp	r3, #0
    e164:	d100      	bne.n	e168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e166:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e168:	bf00      	nop
    e16a:	b003      	add	sp, #12
    e16c:	f85d fb04 	ldr.w	pc, [sp], #4
    e170:	1fff904c 	.word	0x1fff904c
    e174:	1fff9048 	.word	0x1fff9048

0000e178 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
    e178:	b500      	push	{lr}
    e17a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e17c:	f7f2 fd4a 	bl	c14 <Sys_GetCoreID>
    e180:	4603      	mov	r3, r0
    e182:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
    e184:	4a10      	ldr	r2, [pc, #64]	; (e1c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e186:	9b01      	ldr	r3, [sp, #4]
    e188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e18c:	2b00      	cmp	r3, #0
    e18e:	d10d      	bne.n	e1ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e190:	f7f2 fc5e 	bl	a50 <Adc_schm_read_msr>
    e194:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e196:	9b00      	ldr	r3, [sp, #0]
    e198:	f003 0301 	and.w	r3, r3, #1
    e19c:	2b00      	cmp	r3, #0
    e19e:	d100      	bne.n	e1a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e1a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
    e1a2:	490a      	ldr	r1, [pc, #40]	; (e1cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
    e1a4:	9b01      	ldr	r3, [sp, #4]
    e1a6:	9a00      	ldr	r2, [sp, #0]
    e1a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
    e1ac:	4a06      	ldr	r2, [pc, #24]	; (e1c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e1ae:	9b01      	ldr	r3, [sp, #4]
    e1b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1b4:	1c5a      	adds	r2, r3, #1
    e1b6:	4904      	ldr	r1, [pc, #16]	; (e1c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e1b8:	9b01      	ldr	r3, [sp, #4]
    e1ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e1be:	bf00      	nop
    e1c0:	b003      	add	sp, #12
    e1c2:	f85d fb04 	ldr.w	pc, [sp], #4
    e1c6:	bf00      	nop
    e1c8:	1fff9054 	.word	0x1fff9054
    e1cc:	1fff9050 	.word	0x1fff9050

0000e1d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
    e1d0:	b500      	push	{lr}
    e1d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e1d4:	f7f2 fd1e 	bl	c14 <Sys_GetCoreID>
    e1d8:	4603      	mov	r3, r0
    e1da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
    e1dc:	4a0d      	ldr	r2, [pc, #52]	; (e214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e1de:	9b01      	ldr	r3, [sp, #4]
    e1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1e4:	1e5a      	subs	r2, r3, #1
    e1e6:	490b      	ldr	r1, [pc, #44]	; (e214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e1e8:	9b01      	ldr	r3, [sp, #4]
    e1ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
    e1ee:	4a0a      	ldr	r2, [pc, #40]	; (e218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
    e1f0:	9b01      	ldr	r3, [sp, #4]
    e1f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1f6:	f003 0301 	and.w	r3, r3, #1
    e1fa:	2b00      	cmp	r3, #0
    e1fc:	d106      	bne.n	e20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    e1fe:	4a05      	ldr	r2, [pc, #20]	; (e214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e200:	9b01      	ldr	r3, [sp, #4]
    e202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e206:	2b00      	cmp	r3, #0
    e208:	d100      	bne.n	e20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e20a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e20c:	bf00      	nop
    e20e:	b003      	add	sp, #12
    e210:	f85d fb04 	ldr.w	pc, [sp], #4
    e214:	1fff9054 	.word	0x1fff9054
    e218:	1fff9050 	.word	0x1fff9050

0000e21c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
    e21c:	b500      	push	{lr}
    e21e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e220:	f7f2 fcf8 	bl	c14 <Sys_GetCoreID>
    e224:	4603      	mov	r3, r0
    e226:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
    e228:	4a10      	ldr	r2, [pc, #64]	; (e26c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e22a:	9b01      	ldr	r3, [sp, #4]
    e22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e230:	2b00      	cmp	r3, #0
    e232:	d10d      	bne.n	e250 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e234:	f7f2 fc0c 	bl	a50 <Adc_schm_read_msr>
    e238:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e23a:	9b00      	ldr	r3, [sp, #0]
    e23c:	f003 0301 	and.w	r3, r3, #1
    e240:	2b00      	cmp	r3, #0
    e242:	d100      	bne.n	e246 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e244:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
    e246:	490a      	ldr	r1, [pc, #40]	; (e270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
    e248:	9b01      	ldr	r3, [sp, #4]
    e24a:	9a00      	ldr	r2, [sp, #0]
    e24c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
    e250:	4a06      	ldr	r2, [pc, #24]	; (e26c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e252:	9b01      	ldr	r3, [sp, #4]
    e254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e258:	1c5a      	adds	r2, r3, #1
    e25a:	4904      	ldr	r1, [pc, #16]	; (e26c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e25c:	9b01      	ldr	r3, [sp, #4]
    e25e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e262:	bf00      	nop
    e264:	b003      	add	sp, #12
    e266:	f85d fb04 	ldr.w	pc, [sp], #4
    e26a:	bf00      	nop
    e26c:	1fff905c 	.word	0x1fff905c
    e270:	1fff9058 	.word	0x1fff9058

0000e274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
    e274:	b500      	push	{lr}
    e276:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e278:	f7f2 fccc 	bl	c14 <Sys_GetCoreID>
    e27c:	4603      	mov	r3, r0
    e27e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
    e280:	4a0d      	ldr	r2, [pc, #52]	; (e2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e282:	9b01      	ldr	r3, [sp, #4]
    e284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e288:	1e5a      	subs	r2, r3, #1
    e28a:	490b      	ldr	r1, [pc, #44]	; (e2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e28c:	9b01      	ldr	r3, [sp, #4]
    e28e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
    e292:	4a0a      	ldr	r2, [pc, #40]	; (e2bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
    e294:	9b01      	ldr	r3, [sp, #4]
    e296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e29a:	f003 0301 	and.w	r3, r3, #1
    e29e:	2b00      	cmp	r3, #0
    e2a0:	d106      	bne.n	e2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    e2a2:	4a05      	ldr	r2, [pc, #20]	; (e2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e2a4:	9b01      	ldr	r3, [sp, #4]
    e2a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2aa:	2b00      	cmp	r3, #0
    e2ac:	d100      	bne.n	e2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e2ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e2b0:	bf00      	nop
    e2b2:	b003      	add	sp, #12
    e2b4:	f85d fb04 	ldr.w	pc, [sp], #4
    e2b8:	1fff905c 	.word	0x1fff905c
    e2bc:	1fff9058 	.word	0x1fff9058

0000e2c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
    e2c0:	b500      	push	{lr}
    e2c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e2c4:	f7f2 fca6 	bl	c14 <Sys_GetCoreID>
    e2c8:	4603      	mov	r3, r0
    e2ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
    e2cc:	4a10      	ldr	r2, [pc, #64]	; (e310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e2ce:	9b01      	ldr	r3, [sp, #4]
    e2d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2d4:	2b00      	cmp	r3, #0
    e2d6:	d10d      	bne.n	e2f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e2d8:	f7f2 fbba 	bl	a50 <Adc_schm_read_msr>
    e2dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e2de:	9b00      	ldr	r3, [sp, #0]
    e2e0:	f003 0301 	and.w	r3, r3, #1
    e2e4:	2b00      	cmp	r3, #0
    e2e6:	d100      	bne.n	e2ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e2e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
    e2ea:	490a      	ldr	r1, [pc, #40]	; (e314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
    e2ec:	9b01      	ldr	r3, [sp, #4]
    e2ee:	9a00      	ldr	r2, [sp, #0]
    e2f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
    e2f4:	4a06      	ldr	r2, [pc, #24]	; (e310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e2f6:	9b01      	ldr	r3, [sp, #4]
    e2f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2fc:	1c5a      	adds	r2, r3, #1
    e2fe:	4904      	ldr	r1, [pc, #16]	; (e310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e300:	9b01      	ldr	r3, [sp, #4]
    e302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e306:	bf00      	nop
    e308:	b003      	add	sp, #12
    e30a:	f85d fb04 	ldr.w	pc, [sp], #4
    e30e:	bf00      	nop
    e310:	1fff9064 	.word	0x1fff9064
    e314:	1fff9060 	.word	0x1fff9060

0000e318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
    e318:	b500      	push	{lr}
    e31a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e31c:	f7f2 fc7a 	bl	c14 <Sys_GetCoreID>
    e320:	4603      	mov	r3, r0
    e322:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
    e324:	4a0d      	ldr	r2, [pc, #52]	; (e35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e326:	9b01      	ldr	r3, [sp, #4]
    e328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e32c:	1e5a      	subs	r2, r3, #1
    e32e:	490b      	ldr	r1, [pc, #44]	; (e35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e330:	9b01      	ldr	r3, [sp, #4]
    e332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
    e336:	4a0a      	ldr	r2, [pc, #40]	; (e360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
    e338:	9b01      	ldr	r3, [sp, #4]
    e33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e33e:	f003 0301 	and.w	r3, r3, #1
    e342:	2b00      	cmp	r3, #0
    e344:	d106      	bne.n	e354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    e346:	4a05      	ldr	r2, [pc, #20]	; (e35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e348:	9b01      	ldr	r3, [sp, #4]
    e34a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e34e:	2b00      	cmp	r3, #0
    e350:	d100      	bne.n	e354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e352:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e354:	bf00      	nop
    e356:	b003      	add	sp, #12
    e358:	f85d fb04 	ldr.w	pc, [sp], #4
    e35c:	1fff9064 	.word	0x1fff9064
    e360:	1fff9060 	.word	0x1fff9060

0000e364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
    e364:	b500      	push	{lr}
    e366:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e368:	f7f2 fc54 	bl	c14 <Sys_GetCoreID>
    e36c:	4603      	mov	r3, r0
    e36e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
    e370:	4a10      	ldr	r2, [pc, #64]	; (e3b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e372:	9b01      	ldr	r3, [sp, #4]
    e374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e378:	2b00      	cmp	r3, #0
    e37a:	d10d      	bne.n	e398 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e37c:	f7f2 fb68 	bl	a50 <Adc_schm_read_msr>
    e380:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e382:	9b00      	ldr	r3, [sp, #0]
    e384:	f003 0301 	and.w	r3, r3, #1
    e388:	2b00      	cmp	r3, #0
    e38a:	d100      	bne.n	e38e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e38c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
    e38e:	490a      	ldr	r1, [pc, #40]	; (e3b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
    e390:	9b01      	ldr	r3, [sp, #4]
    e392:	9a00      	ldr	r2, [sp, #0]
    e394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
    e398:	4a06      	ldr	r2, [pc, #24]	; (e3b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e39a:	9b01      	ldr	r3, [sp, #4]
    e39c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3a0:	1c5a      	adds	r2, r3, #1
    e3a2:	4904      	ldr	r1, [pc, #16]	; (e3b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e3a4:	9b01      	ldr	r3, [sp, #4]
    e3a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e3aa:	bf00      	nop
    e3ac:	b003      	add	sp, #12
    e3ae:	f85d fb04 	ldr.w	pc, [sp], #4
    e3b2:	bf00      	nop
    e3b4:	1fff906c 	.word	0x1fff906c
    e3b8:	1fff9068 	.word	0x1fff9068

0000e3bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
    e3bc:	b500      	push	{lr}
    e3be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e3c0:	f7f2 fc28 	bl	c14 <Sys_GetCoreID>
    e3c4:	4603      	mov	r3, r0
    e3c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
    e3c8:	4a0d      	ldr	r2, [pc, #52]	; (e400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e3ca:	9b01      	ldr	r3, [sp, #4]
    e3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3d0:	1e5a      	subs	r2, r3, #1
    e3d2:	490b      	ldr	r1, [pc, #44]	; (e400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e3d4:	9b01      	ldr	r3, [sp, #4]
    e3d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
    e3da:	4a0a      	ldr	r2, [pc, #40]	; (e404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
    e3dc:	9b01      	ldr	r3, [sp, #4]
    e3de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3e2:	f003 0301 	and.w	r3, r3, #1
    e3e6:	2b00      	cmp	r3, #0
    e3e8:	d106      	bne.n	e3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    e3ea:	4a05      	ldr	r2, [pc, #20]	; (e400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e3ec:	9b01      	ldr	r3, [sp, #4]
    e3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3f2:	2b00      	cmp	r3, #0
    e3f4:	d100      	bne.n	e3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e3f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e3f8:	bf00      	nop
    e3fa:	b003      	add	sp, #12
    e3fc:	f85d fb04 	ldr.w	pc, [sp], #4
    e400:	1fff906c 	.word	0x1fff906c
    e404:	1fff9068 	.word	0x1fff9068

0000e408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
    e408:	b500      	push	{lr}
    e40a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e40c:	f7f2 fc02 	bl	c14 <Sys_GetCoreID>
    e410:	4603      	mov	r3, r0
    e412:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
    e414:	4a10      	ldr	r2, [pc, #64]	; (e458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    e416:	9b01      	ldr	r3, [sp, #4]
    e418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e41c:	2b00      	cmp	r3, #0
    e41e:	d10d      	bne.n	e43c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e420:	f7f2 fb16 	bl	a50 <Adc_schm_read_msr>
    e424:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e426:	9b00      	ldr	r3, [sp, #0]
    e428:	f003 0301 	and.w	r3, r3, #1
    e42c:	2b00      	cmp	r3, #0
    e42e:	d100      	bne.n	e432 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e430:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
    e432:	490a      	ldr	r1, [pc, #40]	; (e45c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
    e434:	9b01      	ldr	r3, [sp, #4]
    e436:	9a00      	ldr	r2, [sp, #0]
    e438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
    e43c:	4a06      	ldr	r2, [pc, #24]	; (e458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    e43e:	9b01      	ldr	r3, [sp, #4]
    e440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e444:	1c5a      	adds	r2, r3, #1
    e446:	4904      	ldr	r1, [pc, #16]	; (e458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    e448:	9b01      	ldr	r3, [sp, #4]
    e44a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e44e:	bf00      	nop
    e450:	b003      	add	sp, #12
    e452:	f85d fb04 	ldr.w	pc, [sp], #4
    e456:	bf00      	nop
    e458:	1fff9074 	.word	0x1fff9074
    e45c:	1fff9070 	.word	0x1fff9070

0000e460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
    e460:	b500      	push	{lr}
    e462:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e464:	f7f2 fbd6 	bl	c14 <Sys_GetCoreID>
    e468:	4603      	mov	r3, r0
    e46a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
    e46c:	4a0d      	ldr	r2, [pc, #52]	; (e4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    e46e:	9b01      	ldr	r3, [sp, #4]
    e470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e474:	1e5a      	subs	r2, r3, #1
    e476:	490b      	ldr	r1, [pc, #44]	; (e4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    e478:	9b01      	ldr	r3, [sp, #4]
    e47a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
    e47e:	4a0a      	ldr	r2, [pc, #40]	; (e4a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
    e480:	9b01      	ldr	r3, [sp, #4]
    e482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e486:	f003 0301 	and.w	r3, r3, #1
    e48a:	2b00      	cmp	r3, #0
    e48c:	d106      	bne.n	e49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    e48e:	4a05      	ldr	r2, [pc, #20]	; (e4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    e490:	9b01      	ldr	r3, [sp, #4]
    e492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e496:	2b00      	cmp	r3, #0
    e498:	d100      	bne.n	e49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e49a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e49c:	bf00      	nop
    e49e:	b003      	add	sp, #12
    e4a0:	f85d fb04 	ldr.w	pc, [sp], #4
    e4a4:	1fff9074 	.word	0x1fff9074
    e4a8:	1fff9070 	.word	0x1fff9070

0000e4ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
    e4ac:	b500      	push	{lr}
    e4ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e4b0:	f7f2 fbb0 	bl	c14 <Sys_GetCoreID>
    e4b4:	4603      	mov	r3, r0
    e4b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
    e4b8:	4a10      	ldr	r2, [pc, #64]	; (e4fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    e4ba:	9b01      	ldr	r3, [sp, #4]
    e4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4c0:	2b00      	cmp	r3, #0
    e4c2:	d10d      	bne.n	e4e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e4c4:	f7f2 fac4 	bl	a50 <Adc_schm_read_msr>
    e4c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e4ca:	9b00      	ldr	r3, [sp, #0]
    e4cc:	f003 0301 	and.w	r3, r3, #1
    e4d0:	2b00      	cmp	r3, #0
    e4d2:	d100      	bne.n	e4d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e4d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
    e4d6:	490a      	ldr	r1, [pc, #40]	; (e500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
    e4d8:	9b01      	ldr	r3, [sp, #4]
    e4da:	9a00      	ldr	r2, [sp, #0]
    e4dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
    e4e0:	4a06      	ldr	r2, [pc, #24]	; (e4fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    e4e2:	9b01      	ldr	r3, [sp, #4]
    e4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4e8:	1c5a      	adds	r2, r3, #1
    e4ea:	4904      	ldr	r1, [pc, #16]	; (e4fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    e4ec:	9b01      	ldr	r3, [sp, #4]
    e4ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e4f2:	bf00      	nop
    e4f4:	b003      	add	sp, #12
    e4f6:	f85d fb04 	ldr.w	pc, [sp], #4
    e4fa:	bf00      	nop
    e4fc:	1fff907c 	.word	0x1fff907c
    e500:	1fff9078 	.word	0x1fff9078

0000e504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
    e504:	b500      	push	{lr}
    e506:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e508:	f7f2 fb84 	bl	c14 <Sys_GetCoreID>
    e50c:	4603      	mov	r3, r0
    e50e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
    e510:	4a0d      	ldr	r2, [pc, #52]	; (e548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    e512:	9b01      	ldr	r3, [sp, #4]
    e514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e518:	1e5a      	subs	r2, r3, #1
    e51a:	490b      	ldr	r1, [pc, #44]	; (e548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    e51c:	9b01      	ldr	r3, [sp, #4]
    e51e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
    e522:	4a0a      	ldr	r2, [pc, #40]	; (e54c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
    e524:	9b01      	ldr	r3, [sp, #4]
    e526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e52a:	f003 0301 	and.w	r3, r3, #1
    e52e:	2b00      	cmp	r3, #0
    e530:	d106      	bne.n	e540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    e532:	4a05      	ldr	r2, [pc, #20]	; (e548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    e534:	9b01      	ldr	r3, [sp, #4]
    e536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e53a:	2b00      	cmp	r3, #0
    e53c:	d100      	bne.n	e540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e53e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e540:	bf00      	nop
    e542:	b003      	add	sp, #12
    e544:	f85d fb04 	ldr.w	pc, [sp], #4
    e548:	1fff907c 	.word	0x1fff907c
    e54c:	1fff9078 	.word	0x1fff9078

0000e550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
    e550:	b500      	push	{lr}
    e552:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e554:	f7f2 fb5e 	bl	c14 <Sys_GetCoreID>
    e558:	4603      	mov	r3, r0
    e55a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
    e55c:	4a10      	ldr	r2, [pc, #64]	; (e5a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    e55e:	9b01      	ldr	r3, [sp, #4]
    e560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e564:	2b00      	cmp	r3, #0
    e566:	d10d      	bne.n	e584 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e568:	f7f2 fa72 	bl	a50 <Adc_schm_read_msr>
    e56c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e56e:	9b00      	ldr	r3, [sp, #0]
    e570:	f003 0301 	and.w	r3, r3, #1
    e574:	2b00      	cmp	r3, #0
    e576:	d100      	bne.n	e57a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e578:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
    e57a:	490a      	ldr	r1, [pc, #40]	; (e5a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
    e57c:	9b01      	ldr	r3, [sp, #4]
    e57e:	9a00      	ldr	r2, [sp, #0]
    e580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
    e584:	4a06      	ldr	r2, [pc, #24]	; (e5a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    e586:	9b01      	ldr	r3, [sp, #4]
    e588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e58c:	1c5a      	adds	r2, r3, #1
    e58e:	4904      	ldr	r1, [pc, #16]	; (e5a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    e590:	9b01      	ldr	r3, [sp, #4]
    e592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e596:	bf00      	nop
    e598:	b003      	add	sp, #12
    e59a:	f85d fb04 	ldr.w	pc, [sp], #4
    e59e:	bf00      	nop
    e5a0:	1fff9084 	.word	0x1fff9084
    e5a4:	1fff9080 	.word	0x1fff9080

0000e5a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
    e5a8:	b500      	push	{lr}
    e5aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5ac:	f7f2 fb32 	bl	c14 <Sys_GetCoreID>
    e5b0:	4603      	mov	r3, r0
    e5b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
    e5b4:	4a0d      	ldr	r2, [pc, #52]	; (e5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    e5b6:	9b01      	ldr	r3, [sp, #4]
    e5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5bc:	1e5a      	subs	r2, r3, #1
    e5be:	490b      	ldr	r1, [pc, #44]	; (e5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    e5c0:	9b01      	ldr	r3, [sp, #4]
    e5c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
    e5c6:	4a0a      	ldr	r2, [pc, #40]	; (e5f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
    e5c8:	9b01      	ldr	r3, [sp, #4]
    e5ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5ce:	f003 0301 	and.w	r3, r3, #1
    e5d2:	2b00      	cmp	r3, #0
    e5d4:	d106      	bne.n	e5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    e5d6:	4a05      	ldr	r2, [pc, #20]	; (e5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    e5d8:	9b01      	ldr	r3, [sp, #4]
    e5da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5de:	2b00      	cmp	r3, #0
    e5e0:	d100      	bne.n	e5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e5e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e5e4:	bf00      	nop
    e5e6:	b003      	add	sp, #12
    e5e8:	f85d fb04 	ldr.w	pc, [sp], #4
    e5ec:	1fff9084 	.word	0x1fff9084
    e5f0:	1fff9080 	.word	0x1fff9080

0000e5f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
    e5f4:	b500      	push	{lr}
    e5f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5f8:	f7f2 fb0c 	bl	c14 <Sys_GetCoreID>
    e5fc:	4603      	mov	r3, r0
    e5fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
    e600:	4a10      	ldr	r2, [pc, #64]	; (e644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    e602:	9b01      	ldr	r3, [sp, #4]
    e604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e608:	2b00      	cmp	r3, #0
    e60a:	d10d      	bne.n	e628 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e60c:	f7f2 fa20 	bl	a50 <Adc_schm_read_msr>
    e610:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e612:	9b00      	ldr	r3, [sp, #0]
    e614:	f003 0301 	and.w	r3, r3, #1
    e618:	2b00      	cmp	r3, #0
    e61a:	d100      	bne.n	e61e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e61c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
    e61e:	490a      	ldr	r1, [pc, #40]	; (e648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
    e620:	9b01      	ldr	r3, [sp, #4]
    e622:	9a00      	ldr	r2, [sp, #0]
    e624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
    e628:	4a06      	ldr	r2, [pc, #24]	; (e644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    e62a:	9b01      	ldr	r3, [sp, #4]
    e62c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e630:	1c5a      	adds	r2, r3, #1
    e632:	4904      	ldr	r1, [pc, #16]	; (e644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    e634:	9b01      	ldr	r3, [sp, #4]
    e636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e63a:	bf00      	nop
    e63c:	b003      	add	sp, #12
    e63e:	f85d fb04 	ldr.w	pc, [sp], #4
    e642:	bf00      	nop
    e644:	1fff908c 	.word	0x1fff908c
    e648:	1fff9088 	.word	0x1fff9088

0000e64c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
    e64c:	b500      	push	{lr}
    e64e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e650:	f7f2 fae0 	bl	c14 <Sys_GetCoreID>
    e654:	4603      	mov	r3, r0
    e656:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
    e658:	4a0d      	ldr	r2, [pc, #52]	; (e690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    e65a:	9b01      	ldr	r3, [sp, #4]
    e65c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e660:	1e5a      	subs	r2, r3, #1
    e662:	490b      	ldr	r1, [pc, #44]	; (e690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    e664:	9b01      	ldr	r3, [sp, #4]
    e666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
    e66a:	4a0a      	ldr	r2, [pc, #40]	; (e694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
    e66c:	9b01      	ldr	r3, [sp, #4]
    e66e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e672:	f003 0301 	and.w	r3, r3, #1
    e676:	2b00      	cmp	r3, #0
    e678:	d106      	bne.n	e688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    e67a:	4a05      	ldr	r2, [pc, #20]	; (e690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    e67c:	9b01      	ldr	r3, [sp, #4]
    e67e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e682:	2b00      	cmp	r3, #0
    e684:	d100      	bne.n	e688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e686:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e688:	bf00      	nop
    e68a:	b003      	add	sp, #12
    e68c:	f85d fb04 	ldr.w	pc, [sp], #4
    e690:	1fff908c 	.word	0x1fff908c
    e694:	1fff9088 	.word	0x1fff9088

0000e698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
    e698:	b500      	push	{lr}
    e69a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e69c:	f7f2 faba 	bl	c14 <Sys_GetCoreID>
    e6a0:	4603      	mov	r3, r0
    e6a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
    e6a4:	4a10      	ldr	r2, [pc, #64]	; (e6e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    e6a6:	9b01      	ldr	r3, [sp, #4]
    e6a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6ac:	2b00      	cmp	r3, #0
    e6ae:	d10d      	bne.n	e6cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e6b0:	f7f2 f9ce 	bl	a50 <Adc_schm_read_msr>
    e6b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e6b6:	9b00      	ldr	r3, [sp, #0]
    e6b8:	f003 0301 	and.w	r3, r3, #1
    e6bc:	2b00      	cmp	r3, #0
    e6be:	d100      	bne.n	e6c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e6c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
    e6c2:	490a      	ldr	r1, [pc, #40]	; (e6ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
    e6c4:	9b01      	ldr	r3, [sp, #4]
    e6c6:	9a00      	ldr	r2, [sp, #0]
    e6c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
    e6cc:	4a06      	ldr	r2, [pc, #24]	; (e6e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    e6ce:	9b01      	ldr	r3, [sp, #4]
    e6d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6d4:	1c5a      	adds	r2, r3, #1
    e6d6:	4904      	ldr	r1, [pc, #16]	; (e6e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    e6d8:	9b01      	ldr	r3, [sp, #4]
    e6da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e6de:	bf00      	nop
    e6e0:	b003      	add	sp, #12
    e6e2:	f85d fb04 	ldr.w	pc, [sp], #4
    e6e6:	bf00      	nop
    e6e8:	1fff9094 	.word	0x1fff9094
    e6ec:	1fff9090 	.word	0x1fff9090

0000e6f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
    e6f0:	b500      	push	{lr}
    e6f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6f4:	f7f2 fa8e 	bl	c14 <Sys_GetCoreID>
    e6f8:	4603      	mov	r3, r0
    e6fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
    e6fc:	4a0d      	ldr	r2, [pc, #52]	; (e734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    e6fe:	9b01      	ldr	r3, [sp, #4]
    e700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e704:	1e5a      	subs	r2, r3, #1
    e706:	490b      	ldr	r1, [pc, #44]	; (e734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    e708:	9b01      	ldr	r3, [sp, #4]
    e70a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
    e70e:	4a0a      	ldr	r2, [pc, #40]	; (e738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
    e710:	9b01      	ldr	r3, [sp, #4]
    e712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e716:	f003 0301 	and.w	r3, r3, #1
    e71a:	2b00      	cmp	r3, #0
    e71c:	d106      	bne.n	e72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    e71e:	4a05      	ldr	r2, [pc, #20]	; (e734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    e720:	9b01      	ldr	r3, [sp, #4]
    e722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e726:	2b00      	cmp	r3, #0
    e728:	d100      	bne.n	e72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e72a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e72c:	bf00      	nop
    e72e:	b003      	add	sp, #12
    e730:	f85d fb04 	ldr.w	pc, [sp], #4
    e734:	1fff9094 	.word	0x1fff9094
    e738:	1fff9090 	.word	0x1fff9090

0000e73c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
    e73c:	b500      	push	{lr}
    e73e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e740:	f7f2 fa68 	bl	c14 <Sys_GetCoreID>
    e744:	4603      	mov	r3, r0
    e746:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
    e748:	4a10      	ldr	r2, [pc, #64]	; (e78c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    e74a:	9b01      	ldr	r3, [sp, #4]
    e74c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e750:	2b00      	cmp	r3, #0
    e752:	d10d      	bne.n	e770 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e754:	f7f2 f97c 	bl	a50 <Adc_schm_read_msr>
    e758:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e75a:	9b00      	ldr	r3, [sp, #0]
    e75c:	f003 0301 	and.w	r3, r3, #1
    e760:	2b00      	cmp	r3, #0
    e762:	d100      	bne.n	e766 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e764:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
    e766:	490a      	ldr	r1, [pc, #40]	; (e790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
    e768:	9b01      	ldr	r3, [sp, #4]
    e76a:	9a00      	ldr	r2, [sp, #0]
    e76c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
    e770:	4a06      	ldr	r2, [pc, #24]	; (e78c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    e772:	9b01      	ldr	r3, [sp, #4]
    e774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e778:	1c5a      	adds	r2, r3, #1
    e77a:	4904      	ldr	r1, [pc, #16]	; (e78c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    e77c:	9b01      	ldr	r3, [sp, #4]
    e77e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e782:	bf00      	nop
    e784:	b003      	add	sp, #12
    e786:	f85d fb04 	ldr.w	pc, [sp], #4
    e78a:	bf00      	nop
    e78c:	1fff909c 	.word	0x1fff909c
    e790:	1fff9098 	.word	0x1fff9098

0000e794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
    e794:	b500      	push	{lr}
    e796:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e798:	f7f2 fa3c 	bl	c14 <Sys_GetCoreID>
    e79c:	4603      	mov	r3, r0
    e79e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
    e7a0:	4a0d      	ldr	r2, [pc, #52]	; (e7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    e7a2:	9b01      	ldr	r3, [sp, #4]
    e7a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7a8:	1e5a      	subs	r2, r3, #1
    e7aa:	490b      	ldr	r1, [pc, #44]	; (e7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    e7ac:	9b01      	ldr	r3, [sp, #4]
    e7ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
    e7b2:	4a0a      	ldr	r2, [pc, #40]	; (e7dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
    e7b4:	9b01      	ldr	r3, [sp, #4]
    e7b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7ba:	f003 0301 	and.w	r3, r3, #1
    e7be:	2b00      	cmp	r3, #0
    e7c0:	d106      	bne.n	e7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    e7c2:	4a05      	ldr	r2, [pc, #20]	; (e7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    e7c4:	9b01      	ldr	r3, [sp, #4]
    e7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7ca:	2b00      	cmp	r3, #0
    e7cc:	d100      	bne.n	e7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e7ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e7d0:	bf00      	nop
    e7d2:	b003      	add	sp, #12
    e7d4:	f85d fb04 	ldr.w	pc, [sp], #4
    e7d8:	1fff909c 	.word	0x1fff909c
    e7dc:	1fff9098 	.word	0x1fff9098

0000e7e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
    e7e0:	b500      	push	{lr}
    e7e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7e4:	f7f2 fa16 	bl	c14 <Sys_GetCoreID>
    e7e8:	4603      	mov	r3, r0
    e7ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
    e7ec:	4a10      	ldr	r2, [pc, #64]	; (e830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    e7ee:	9b01      	ldr	r3, [sp, #4]
    e7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7f4:	2b00      	cmp	r3, #0
    e7f6:	d10d      	bne.n	e814 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e7f8:	f7f2 f92a 	bl	a50 <Adc_schm_read_msr>
    e7fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e7fe:	9b00      	ldr	r3, [sp, #0]
    e800:	f003 0301 	and.w	r3, r3, #1
    e804:	2b00      	cmp	r3, #0
    e806:	d100      	bne.n	e80a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e808:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
    e80a:	490a      	ldr	r1, [pc, #40]	; (e834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
    e80c:	9b01      	ldr	r3, [sp, #4]
    e80e:	9a00      	ldr	r2, [sp, #0]
    e810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
    e814:	4a06      	ldr	r2, [pc, #24]	; (e830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    e816:	9b01      	ldr	r3, [sp, #4]
    e818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e81c:	1c5a      	adds	r2, r3, #1
    e81e:	4904      	ldr	r1, [pc, #16]	; (e830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    e820:	9b01      	ldr	r3, [sp, #4]
    e822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e826:	bf00      	nop
    e828:	b003      	add	sp, #12
    e82a:	f85d fb04 	ldr.w	pc, [sp], #4
    e82e:	bf00      	nop
    e830:	1fff90a4 	.word	0x1fff90a4
    e834:	1fff90a0 	.word	0x1fff90a0

0000e838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
    e838:	b500      	push	{lr}
    e83a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e83c:	f7f2 f9ea 	bl	c14 <Sys_GetCoreID>
    e840:	4603      	mov	r3, r0
    e842:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
    e844:	4a0d      	ldr	r2, [pc, #52]	; (e87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    e846:	9b01      	ldr	r3, [sp, #4]
    e848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e84c:	1e5a      	subs	r2, r3, #1
    e84e:	490b      	ldr	r1, [pc, #44]	; (e87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    e850:	9b01      	ldr	r3, [sp, #4]
    e852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
    e856:	4a0a      	ldr	r2, [pc, #40]	; (e880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
    e858:	9b01      	ldr	r3, [sp, #4]
    e85a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e85e:	f003 0301 	and.w	r3, r3, #1
    e862:	2b00      	cmp	r3, #0
    e864:	d106      	bne.n	e874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    e866:	4a05      	ldr	r2, [pc, #20]	; (e87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    e868:	9b01      	ldr	r3, [sp, #4]
    e86a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e86e:	2b00      	cmp	r3, #0
    e870:	d100      	bne.n	e874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e872:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e874:	bf00      	nop
    e876:	b003      	add	sp, #12
    e878:	f85d fb04 	ldr.w	pc, [sp], #4
    e87c:	1fff90a4 	.word	0x1fff90a4
    e880:	1fff90a0 	.word	0x1fff90a0

0000e884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
    e884:	b500      	push	{lr}
    e886:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e888:	f7f2 f9c4 	bl	c14 <Sys_GetCoreID>
    e88c:	4603      	mov	r3, r0
    e88e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
    e890:	4a10      	ldr	r2, [pc, #64]	; (e8d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    e892:	9b01      	ldr	r3, [sp, #4]
    e894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e898:	2b00      	cmp	r3, #0
    e89a:	d10d      	bne.n	e8b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e89c:	f7f2 f8d8 	bl	a50 <Adc_schm_read_msr>
    e8a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e8a2:	9b00      	ldr	r3, [sp, #0]
    e8a4:	f003 0301 	and.w	r3, r3, #1
    e8a8:	2b00      	cmp	r3, #0
    e8aa:	d100      	bne.n	e8ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e8ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
    e8ae:	490a      	ldr	r1, [pc, #40]	; (e8d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
    e8b0:	9b01      	ldr	r3, [sp, #4]
    e8b2:	9a00      	ldr	r2, [sp, #0]
    e8b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
    e8b8:	4a06      	ldr	r2, [pc, #24]	; (e8d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    e8ba:	9b01      	ldr	r3, [sp, #4]
    e8bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8c0:	1c5a      	adds	r2, r3, #1
    e8c2:	4904      	ldr	r1, [pc, #16]	; (e8d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    e8c4:	9b01      	ldr	r3, [sp, #4]
    e8c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e8ca:	bf00      	nop
    e8cc:	b003      	add	sp, #12
    e8ce:	f85d fb04 	ldr.w	pc, [sp], #4
    e8d2:	bf00      	nop
    e8d4:	1fff90ac 	.word	0x1fff90ac
    e8d8:	1fff90a8 	.word	0x1fff90a8

0000e8dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
    e8dc:	b500      	push	{lr}
    e8de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8e0:	f7f2 f998 	bl	c14 <Sys_GetCoreID>
    e8e4:	4603      	mov	r3, r0
    e8e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
    e8e8:	4a0d      	ldr	r2, [pc, #52]	; (e920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    e8ea:	9b01      	ldr	r3, [sp, #4]
    e8ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8f0:	1e5a      	subs	r2, r3, #1
    e8f2:	490b      	ldr	r1, [pc, #44]	; (e920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    e8f4:	9b01      	ldr	r3, [sp, #4]
    e8f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
    e8fa:	4a0a      	ldr	r2, [pc, #40]	; (e924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
    e8fc:	9b01      	ldr	r3, [sp, #4]
    e8fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e902:	f003 0301 	and.w	r3, r3, #1
    e906:	2b00      	cmp	r3, #0
    e908:	d106      	bne.n	e918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    e90a:	4a05      	ldr	r2, [pc, #20]	; (e920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    e90c:	9b01      	ldr	r3, [sp, #4]
    e90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e912:	2b00      	cmp	r3, #0
    e914:	d100      	bne.n	e918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e916:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e918:	bf00      	nop
    e91a:	b003      	add	sp, #12
    e91c:	f85d fb04 	ldr.w	pc, [sp], #4
    e920:	1fff90ac 	.word	0x1fff90ac
    e924:	1fff90a8 	.word	0x1fff90a8

0000e928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
    e928:	b500      	push	{lr}
    e92a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e92c:	f7f2 f972 	bl	c14 <Sys_GetCoreID>
    e930:	4603      	mov	r3, r0
    e932:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
    e934:	4a10      	ldr	r2, [pc, #64]	; (e978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    e936:	9b01      	ldr	r3, [sp, #4]
    e938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e93c:	2b00      	cmp	r3, #0
    e93e:	d10d      	bne.n	e95c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e940:	f7f2 f886 	bl	a50 <Adc_schm_read_msr>
    e944:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e946:	9b00      	ldr	r3, [sp, #0]
    e948:	f003 0301 	and.w	r3, r3, #1
    e94c:	2b00      	cmp	r3, #0
    e94e:	d100      	bne.n	e952 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e950:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
    e952:	490a      	ldr	r1, [pc, #40]	; (e97c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
    e954:	9b01      	ldr	r3, [sp, #4]
    e956:	9a00      	ldr	r2, [sp, #0]
    e958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
    e95c:	4a06      	ldr	r2, [pc, #24]	; (e978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    e95e:	9b01      	ldr	r3, [sp, #4]
    e960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e964:	1c5a      	adds	r2, r3, #1
    e966:	4904      	ldr	r1, [pc, #16]	; (e978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    e968:	9b01      	ldr	r3, [sp, #4]
    e96a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e96e:	bf00      	nop
    e970:	b003      	add	sp, #12
    e972:	f85d fb04 	ldr.w	pc, [sp], #4
    e976:	bf00      	nop
    e978:	1fff90b4 	.word	0x1fff90b4
    e97c:	1fff90b0 	.word	0x1fff90b0

0000e980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
    e980:	b500      	push	{lr}
    e982:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e984:	f7f2 f946 	bl	c14 <Sys_GetCoreID>
    e988:	4603      	mov	r3, r0
    e98a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
    e98c:	4a0d      	ldr	r2, [pc, #52]	; (e9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    e98e:	9b01      	ldr	r3, [sp, #4]
    e990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e994:	1e5a      	subs	r2, r3, #1
    e996:	490b      	ldr	r1, [pc, #44]	; (e9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    e998:	9b01      	ldr	r3, [sp, #4]
    e99a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
    e99e:	4a0a      	ldr	r2, [pc, #40]	; (e9c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
    e9a0:	9b01      	ldr	r3, [sp, #4]
    e9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9a6:	f003 0301 	and.w	r3, r3, #1
    e9aa:	2b00      	cmp	r3, #0
    e9ac:	d106      	bne.n	e9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    e9ae:	4a05      	ldr	r2, [pc, #20]	; (e9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    e9b0:	9b01      	ldr	r3, [sp, #4]
    e9b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9b6:	2b00      	cmp	r3, #0
    e9b8:	d100      	bne.n	e9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e9ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e9bc:	bf00      	nop
    e9be:	b003      	add	sp, #12
    e9c0:	f85d fb04 	ldr.w	pc, [sp], #4
    e9c4:	1fff90b4 	.word	0x1fff90b4
    e9c8:	1fff90b0 	.word	0x1fff90b0

0000e9cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
    e9cc:	b500      	push	{lr}
    e9ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9d0:	f7f2 f920 	bl	c14 <Sys_GetCoreID>
    e9d4:	4603      	mov	r3, r0
    e9d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
    e9d8:	4a10      	ldr	r2, [pc, #64]	; (ea1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    e9da:	9b01      	ldr	r3, [sp, #4]
    e9dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9e0:	2b00      	cmp	r3, #0
    e9e2:	d10d      	bne.n	ea00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e9e4:	f7f2 f834 	bl	a50 <Adc_schm_read_msr>
    e9e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e9ea:	9b00      	ldr	r3, [sp, #0]
    e9ec:	f003 0301 	and.w	r3, r3, #1
    e9f0:	2b00      	cmp	r3, #0
    e9f2:	d100      	bne.n	e9f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e9f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
    e9f6:	490a      	ldr	r1, [pc, #40]	; (ea20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
    e9f8:	9b01      	ldr	r3, [sp, #4]
    e9fa:	9a00      	ldr	r2, [sp, #0]
    e9fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
    ea00:	4a06      	ldr	r2, [pc, #24]	; (ea1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    ea02:	9b01      	ldr	r3, [sp, #4]
    ea04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea08:	1c5a      	adds	r2, r3, #1
    ea0a:	4904      	ldr	r1, [pc, #16]	; (ea1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    ea0c:	9b01      	ldr	r3, [sp, #4]
    ea0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ea12:	bf00      	nop
    ea14:	b003      	add	sp, #12
    ea16:	f85d fb04 	ldr.w	pc, [sp], #4
    ea1a:	bf00      	nop
    ea1c:	1fff90bc 	.word	0x1fff90bc
    ea20:	1fff90b8 	.word	0x1fff90b8

0000ea24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
    ea24:	b500      	push	{lr}
    ea26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea28:	f7f2 f8f4 	bl	c14 <Sys_GetCoreID>
    ea2c:	4603      	mov	r3, r0
    ea2e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
    ea30:	4a0d      	ldr	r2, [pc, #52]	; (ea68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    ea32:	9b01      	ldr	r3, [sp, #4]
    ea34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea38:	1e5a      	subs	r2, r3, #1
    ea3a:	490b      	ldr	r1, [pc, #44]	; (ea68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    ea3c:	9b01      	ldr	r3, [sp, #4]
    ea3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
    ea42:	4a0a      	ldr	r2, [pc, #40]	; (ea6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
    ea44:	9b01      	ldr	r3, [sp, #4]
    ea46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea4a:	f003 0301 	and.w	r3, r3, #1
    ea4e:	2b00      	cmp	r3, #0
    ea50:	d106      	bne.n	ea60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    ea52:	4a05      	ldr	r2, [pc, #20]	; (ea68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    ea54:	9b01      	ldr	r3, [sp, #4]
    ea56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea5a:	2b00      	cmp	r3, #0
    ea5c:	d100      	bne.n	ea60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ea5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ea60:	bf00      	nop
    ea62:	b003      	add	sp, #12
    ea64:	f85d fb04 	ldr.w	pc, [sp], #4
    ea68:	1fff90bc 	.word	0x1fff90bc
    ea6c:	1fff90b8 	.word	0x1fff90b8

0000ea70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
    ea70:	b500      	push	{lr}
    ea72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea74:	f7f2 f8ce 	bl	c14 <Sys_GetCoreID>
    ea78:	4603      	mov	r3, r0
    ea7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
    ea7c:	4a10      	ldr	r2, [pc, #64]	; (eac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    ea7e:	9b01      	ldr	r3, [sp, #4]
    ea80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea84:	2b00      	cmp	r3, #0
    ea86:	d10d      	bne.n	eaa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ea88:	f7f1 ffe2 	bl	a50 <Adc_schm_read_msr>
    ea8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ea8e:	9b00      	ldr	r3, [sp, #0]
    ea90:	f003 0301 	and.w	r3, r3, #1
    ea94:	2b00      	cmp	r3, #0
    ea96:	d100      	bne.n	ea9a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ea98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
    ea9a:	490a      	ldr	r1, [pc, #40]	; (eac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
    ea9c:	9b01      	ldr	r3, [sp, #4]
    ea9e:	9a00      	ldr	r2, [sp, #0]
    eaa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
    eaa4:	4a06      	ldr	r2, [pc, #24]	; (eac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    eaa6:	9b01      	ldr	r3, [sp, #4]
    eaa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaac:	1c5a      	adds	r2, r3, #1
    eaae:	4904      	ldr	r1, [pc, #16]	; (eac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    eab0:	9b01      	ldr	r3, [sp, #4]
    eab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eab6:	bf00      	nop
    eab8:	b003      	add	sp, #12
    eaba:	f85d fb04 	ldr.w	pc, [sp], #4
    eabe:	bf00      	nop
    eac0:	1fff90c4 	.word	0x1fff90c4
    eac4:	1fff90c0 	.word	0x1fff90c0

0000eac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
    eac8:	b500      	push	{lr}
    eaca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eacc:	f7f2 f8a2 	bl	c14 <Sys_GetCoreID>
    ead0:	4603      	mov	r3, r0
    ead2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
    ead4:	4a0d      	ldr	r2, [pc, #52]	; (eb0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    ead6:	9b01      	ldr	r3, [sp, #4]
    ead8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eadc:	1e5a      	subs	r2, r3, #1
    eade:	490b      	ldr	r1, [pc, #44]	; (eb0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    eae0:	9b01      	ldr	r3, [sp, #4]
    eae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
    eae6:	4a0a      	ldr	r2, [pc, #40]	; (eb10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
    eae8:	9b01      	ldr	r3, [sp, #4]
    eaea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaee:	f003 0301 	and.w	r3, r3, #1
    eaf2:	2b00      	cmp	r3, #0
    eaf4:	d106      	bne.n	eb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    eaf6:	4a05      	ldr	r2, [pc, #20]	; (eb0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    eaf8:	9b01      	ldr	r3, [sp, #4]
    eafa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eafe:	2b00      	cmp	r3, #0
    eb00:	d100      	bne.n	eb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eb02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eb04:	bf00      	nop
    eb06:	b003      	add	sp, #12
    eb08:	f85d fb04 	ldr.w	pc, [sp], #4
    eb0c:	1fff90c4 	.word	0x1fff90c4
    eb10:	1fff90c0 	.word	0x1fff90c0

0000eb14 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    eb14:	b500      	push	{lr}
    eb16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb18:	f7f2 f87c 	bl	c14 <Sys_GetCoreID>
    eb1c:	4603      	mov	r3, r0
    eb1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    eb20:	4a10      	ldr	r2, [pc, #64]	; (eb64 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    eb22:	9b01      	ldr	r3, [sp, #4]
    eb24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb28:	2b00      	cmp	r3, #0
    eb2a:	d10d      	bne.n	eb48 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eb2c:	f7f1 ff99 	bl	a62 <Mcu_schm_read_msr>
    eb30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eb32:	9b00      	ldr	r3, [sp, #0]
    eb34:	f003 0301 	and.w	r3, r3, #1
    eb38:	2b00      	cmp	r3, #0
    eb3a:	d100      	bne.n	eb3e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eb3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    eb3e:	490a      	ldr	r1, [pc, #40]	; (eb68 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    eb40:	9b01      	ldr	r3, [sp, #4]
    eb42:	9a00      	ldr	r2, [sp, #0]
    eb44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    eb48:	4a06      	ldr	r2, [pc, #24]	; (eb64 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    eb4a:	9b01      	ldr	r3, [sp, #4]
    eb4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb50:	1c5a      	adds	r2, r3, #1
    eb52:	4904      	ldr	r1, [pc, #16]	; (eb64 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    eb54:	9b01      	ldr	r3, [sp, #4]
    eb56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eb5a:	bf00      	nop
    eb5c:	b003      	add	sp, #12
    eb5e:	f85d fb04 	ldr.w	pc, [sp], #4
    eb62:	bf00      	nop
    eb64:	1fff90cc 	.word	0x1fff90cc
    eb68:	1fff90c8 	.word	0x1fff90c8

0000eb6c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    eb6c:	b500      	push	{lr}
    eb6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb70:	f7f2 f850 	bl	c14 <Sys_GetCoreID>
    eb74:	4603      	mov	r3, r0
    eb76:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    eb78:	4a0d      	ldr	r2, [pc, #52]	; (ebb0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    eb7a:	9b01      	ldr	r3, [sp, #4]
    eb7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb80:	1e5a      	subs	r2, r3, #1
    eb82:	490b      	ldr	r1, [pc, #44]	; (ebb0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    eb84:	9b01      	ldr	r3, [sp, #4]
    eb86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    eb8a:	4a0a      	ldr	r2, [pc, #40]	; (ebb4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    eb8c:	9b01      	ldr	r3, [sp, #4]
    eb8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb92:	f003 0301 	and.w	r3, r3, #1
    eb96:	2b00      	cmp	r3, #0
    eb98:	d106      	bne.n	eba8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    eb9a:	4a05      	ldr	r2, [pc, #20]	; (ebb0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    eb9c:	9b01      	ldr	r3, [sp, #4]
    eb9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eba2:	2b00      	cmp	r3, #0
    eba4:	d100      	bne.n	eba8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eba6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eba8:	bf00      	nop
    ebaa:	b003      	add	sp, #12
    ebac:	f85d fb04 	ldr.w	pc, [sp], #4
    ebb0:	1fff90cc 	.word	0x1fff90cc
    ebb4:	1fff90c8 	.word	0x1fff90c8

0000ebb8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    ebb8:	b500      	push	{lr}
    ebba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ebbc:	f7f2 f82a 	bl	c14 <Sys_GetCoreID>
    ebc0:	4603      	mov	r3, r0
    ebc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    ebc4:	4a10      	ldr	r2, [pc, #64]	; (ec08 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    ebc6:	9b01      	ldr	r3, [sp, #4]
    ebc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebcc:	2b00      	cmp	r3, #0
    ebce:	d10d      	bne.n	ebec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ebd0:	f7f1 ff47 	bl	a62 <Mcu_schm_read_msr>
    ebd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ebd6:	9b00      	ldr	r3, [sp, #0]
    ebd8:	f003 0301 	and.w	r3, r3, #1
    ebdc:	2b00      	cmp	r3, #0
    ebde:	d100      	bne.n	ebe2 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ebe0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ebe2:	490a      	ldr	r1, [pc, #40]	; (ec0c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    ebe4:	9b01      	ldr	r3, [sp, #4]
    ebe6:	9a00      	ldr	r2, [sp, #0]
    ebe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    ebec:	4a06      	ldr	r2, [pc, #24]	; (ec08 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    ebee:	9b01      	ldr	r3, [sp, #4]
    ebf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebf4:	1c5a      	adds	r2, r3, #1
    ebf6:	4904      	ldr	r1, [pc, #16]	; (ec08 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    ebf8:	9b01      	ldr	r3, [sp, #4]
    ebfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ebfe:	bf00      	nop
    ec00:	b003      	add	sp, #12
    ec02:	f85d fb04 	ldr.w	pc, [sp], #4
    ec06:	bf00      	nop
    ec08:	1fff90d4 	.word	0x1fff90d4
    ec0c:	1fff90d0 	.word	0x1fff90d0

0000ec10 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    ec10:	b500      	push	{lr}
    ec12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec14:	f7f1 fffe 	bl	c14 <Sys_GetCoreID>
    ec18:	4603      	mov	r3, r0
    ec1a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    ec1c:	4a0d      	ldr	r2, [pc, #52]	; (ec54 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    ec1e:	9b01      	ldr	r3, [sp, #4]
    ec20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec24:	1e5a      	subs	r2, r3, #1
    ec26:	490b      	ldr	r1, [pc, #44]	; (ec54 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    ec28:	9b01      	ldr	r3, [sp, #4]
    ec2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    ec2e:	4a0a      	ldr	r2, [pc, #40]	; (ec58 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    ec30:	9b01      	ldr	r3, [sp, #4]
    ec32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec36:	f003 0301 	and.w	r3, r3, #1
    ec3a:	2b00      	cmp	r3, #0
    ec3c:	d106      	bne.n	ec4c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    ec3e:	4a05      	ldr	r2, [pc, #20]	; (ec54 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    ec40:	9b01      	ldr	r3, [sp, #4]
    ec42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec46:	2b00      	cmp	r3, #0
    ec48:	d100      	bne.n	ec4c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ec4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ec4c:	bf00      	nop
    ec4e:	b003      	add	sp, #12
    ec50:	f85d fb04 	ldr.w	pc, [sp], #4
    ec54:	1fff90d4 	.word	0x1fff90d4
    ec58:	1fff90d0 	.word	0x1fff90d0

0000ec5c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    ec5c:	b500      	push	{lr}
    ec5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec60:	f7f1 ffd8 	bl	c14 <Sys_GetCoreID>
    ec64:	4603      	mov	r3, r0
    ec66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    ec68:	4a10      	ldr	r2, [pc, #64]	; (ecac <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    ec6a:	9b01      	ldr	r3, [sp, #4]
    ec6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec70:	2b00      	cmp	r3, #0
    ec72:	d10d      	bne.n	ec90 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ec74:	f7f1 fef5 	bl	a62 <Mcu_schm_read_msr>
    ec78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ec7a:	9b00      	ldr	r3, [sp, #0]
    ec7c:	f003 0301 	and.w	r3, r3, #1
    ec80:	2b00      	cmp	r3, #0
    ec82:	d100      	bne.n	ec86 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ec84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    ec86:	490a      	ldr	r1, [pc, #40]	; (ecb0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    ec88:	9b01      	ldr	r3, [sp, #4]
    ec8a:	9a00      	ldr	r2, [sp, #0]
    ec8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    ec90:	4a06      	ldr	r2, [pc, #24]	; (ecac <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    ec92:	9b01      	ldr	r3, [sp, #4]
    ec94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec98:	1c5a      	adds	r2, r3, #1
    ec9a:	4904      	ldr	r1, [pc, #16]	; (ecac <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    ec9c:	9b01      	ldr	r3, [sp, #4]
    ec9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eca2:	bf00      	nop
    eca4:	b003      	add	sp, #12
    eca6:	f85d fb04 	ldr.w	pc, [sp], #4
    ecaa:	bf00      	nop
    ecac:	1fff90dc 	.word	0x1fff90dc
    ecb0:	1fff90d8 	.word	0x1fff90d8

0000ecb4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    ecb4:	b500      	push	{lr}
    ecb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ecb8:	f7f1 ffac 	bl	c14 <Sys_GetCoreID>
    ecbc:	4603      	mov	r3, r0
    ecbe:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    ecc0:	4a0d      	ldr	r2, [pc, #52]	; (ecf8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    ecc2:	9b01      	ldr	r3, [sp, #4]
    ecc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecc8:	1e5a      	subs	r2, r3, #1
    ecca:	490b      	ldr	r1, [pc, #44]	; (ecf8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    eccc:	9b01      	ldr	r3, [sp, #4]
    ecce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    ecd2:	4a0a      	ldr	r2, [pc, #40]	; (ecfc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    ecd4:	9b01      	ldr	r3, [sp, #4]
    ecd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecda:	f003 0301 	and.w	r3, r3, #1
    ecde:	2b00      	cmp	r3, #0
    ece0:	d106      	bne.n	ecf0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    ece2:	4a05      	ldr	r2, [pc, #20]	; (ecf8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    ece4:	9b01      	ldr	r3, [sp, #4]
    ece6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecea:	2b00      	cmp	r3, #0
    ecec:	d100      	bne.n	ecf0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ecee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ecf0:	bf00      	nop
    ecf2:	b003      	add	sp, #12
    ecf4:	f85d fb04 	ldr.w	pc, [sp], #4
    ecf8:	1fff90dc 	.word	0x1fff90dc
    ecfc:	1fff90d8 	.word	0x1fff90d8

0000ed00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    ed00:	b500      	push	{lr}
    ed02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed04:	f7f1 ff86 	bl	c14 <Sys_GetCoreID>
    ed08:	4603      	mov	r3, r0
    ed0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    ed0c:	4a10      	ldr	r2, [pc, #64]	; (ed50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    ed0e:	9b01      	ldr	r3, [sp, #4]
    ed10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed14:	2b00      	cmp	r3, #0
    ed16:	d10d      	bne.n	ed34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ed18:	f7f1 feac 	bl	a74 <Port_schm_read_msr>
    ed1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ed1e:	9b00      	ldr	r3, [sp, #0]
    ed20:	f003 0301 	and.w	r3, r3, #1
    ed24:	2b00      	cmp	r3, #0
    ed26:	d100      	bne.n	ed2a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ed28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    ed2a:	490a      	ldr	r1, [pc, #40]	; (ed54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    ed2c:	9b01      	ldr	r3, [sp, #4]
    ed2e:	9a00      	ldr	r2, [sp, #0]
    ed30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    ed34:	4a06      	ldr	r2, [pc, #24]	; (ed50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    ed36:	9b01      	ldr	r3, [sp, #4]
    ed38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed3c:	1c5a      	adds	r2, r3, #1
    ed3e:	4904      	ldr	r1, [pc, #16]	; (ed50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    ed40:	9b01      	ldr	r3, [sp, #4]
    ed42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ed46:	bf00      	nop
    ed48:	b003      	add	sp, #12
    ed4a:	f85d fb04 	ldr.w	pc, [sp], #4
    ed4e:	bf00      	nop
    ed50:	1fff90e4 	.word	0x1fff90e4
    ed54:	1fff90e0 	.word	0x1fff90e0

0000ed58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    ed58:	b500      	push	{lr}
    ed5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed5c:	f7f1 ff5a 	bl	c14 <Sys_GetCoreID>
    ed60:	4603      	mov	r3, r0
    ed62:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    ed64:	4a0d      	ldr	r2, [pc, #52]	; (ed9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    ed66:	9b01      	ldr	r3, [sp, #4]
    ed68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed6c:	1e5a      	subs	r2, r3, #1
    ed6e:	490b      	ldr	r1, [pc, #44]	; (ed9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    ed70:	9b01      	ldr	r3, [sp, #4]
    ed72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    ed76:	4a0a      	ldr	r2, [pc, #40]	; (eda0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    ed78:	9b01      	ldr	r3, [sp, #4]
    ed7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed7e:	f003 0301 	and.w	r3, r3, #1
    ed82:	2b00      	cmp	r3, #0
    ed84:	d106      	bne.n	ed94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    ed86:	4a05      	ldr	r2, [pc, #20]	; (ed9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    ed88:	9b01      	ldr	r3, [sp, #4]
    ed8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed8e:	2b00      	cmp	r3, #0
    ed90:	d100      	bne.n	ed94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ed92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ed94:	bf00      	nop
    ed96:	b003      	add	sp, #12
    ed98:	f85d fb04 	ldr.w	pc, [sp], #4
    ed9c:	1fff90e4 	.word	0x1fff90e4
    eda0:	1fff90e0 	.word	0x1fff90e0

0000eda4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    eda4:	b500      	push	{lr}
    eda6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eda8:	f7f1 ff34 	bl	c14 <Sys_GetCoreID>
    edac:	4603      	mov	r3, r0
    edae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    edb0:	4a10      	ldr	r2, [pc, #64]	; (edf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    edb2:	9b01      	ldr	r3, [sp, #4]
    edb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edb8:	2b00      	cmp	r3, #0
    edba:	d10d      	bne.n	edd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    edbc:	f7f1 fe5a 	bl	a74 <Port_schm_read_msr>
    edc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    edc2:	9b00      	ldr	r3, [sp, #0]
    edc4:	f003 0301 	and.w	r3, r3, #1
    edc8:	2b00      	cmp	r3, #0
    edca:	d100      	bne.n	edce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    edcc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    edce:	490a      	ldr	r1, [pc, #40]	; (edf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    edd0:	9b01      	ldr	r3, [sp, #4]
    edd2:	9a00      	ldr	r2, [sp, #0]
    edd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    edd8:	4a06      	ldr	r2, [pc, #24]	; (edf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    edda:	9b01      	ldr	r3, [sp, #4]
    eddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ede0:	1c5a      	adds	r2, r3, #1
    ede2:	4904      	ldr	r1, [pc, #16]	; (edf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    ede4:	9b01      	ldr	r3, [sp, #4]
    ede6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    edea:	bf00      	nop
    edec:	b003      	add	sp, #12
    edee:	f85d fb04 	ldr.w	pc, [sp], #4
    edf2:	bf00      	nop
    edf4:	1fff90ec 	.word	0x1fff90ec
    edf8:	1fff90e8 	.word	0x1fff90e8

0000edfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    edfc:	b500      	push	{lr}
    edfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee00:	f7f1 ff08 	bl	c14 <Sys_GetCoreID>
    ee04:	4603      	mov	r3, r0
    ee06:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    ee08:	4a0d      	ldr	r2, [pc, #52]	; (ee40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    ee0a:	9b01      	ldr	r3, [sp, #4]
    ee0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee10:	1e5a      	subs	r2, r3, #1
    ee12:	490b      	ldr	r1, [pc, #44]	; (ee40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    ee14:	9b01      	ldr	r3, [sp, #4]
    ee16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    ee1a:	4a0a      	ldr	r2, [pc, #40]	; (ee44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    ee1c:	9b01      	ldr	r3, [sp, #4]
    ee1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee22:	f003 0301 	and.w	r3, r3, #1
    ee26:	2b00      	cmp	r3, #0
    ee28:	d106      	bne.n	ee38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    ee2a:	4a05      	ldr	r2, [pc, #20]	; (ee40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    ee2c:	9b01      	ldr	r3, [sp, #4]
    ee2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee32:	2b00      	cmp	r3, #0
    ee34:	d100      	bne.n	ee38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ee36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ee38:	bf00      	nop
    ee3a:	b003      	add	sp, #12
    ee3c:	f85d fb04 	ldr.w	pc, [sp], #4
    ee40:	1fff90ec 	.word	0x1fff90ec
    ee44:	1fff90e8 	.word	0x1fff90e8

0000ee48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    ee48:	b500      	push	{lr}
    ee4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee4c:	f7f1 fee2 	bl	c14 <Sys_GetCoreID>
    ee50:	4603      	mov	r3, r0
    ee52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    ee54:	4a10      	ldr	r2, [pc, #64]	; (ee98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    ee56:	9b01      	ldr	r3, [sp, #4]
    ee58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee5c:	2b00      	cmp	r3, #0
    ee5e:	d10d      	bne.n	ee7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ee60:	f7f1 fe08 	bl	a74 <Port_schm_read_msr>
    ee64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ee66:	9b00      	ldr	r3, [sp, #0]
    ee68:	f003 0301 	and.w	r3, r3, #1
    ee6c:	2b00      	cmp	r3, #0
    ee6e:	d100      	bne.n	ee72 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ee70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    ee72:	490a      	ldr	r1, [pc, #40]	; (ee9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    ee74:	9b01      	ldr	r3, [sp, #4]
    ee76:	9a00      	ldr	r2, [sp, #0]
    ee78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    ee7c:	4a06      	ldr	r2, [pc, #24]	; (ee98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    ee7e:	9b01      	ldr	r3, [sp, #4]
    ee80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee84:	1c5a      	adds	r2, r3, #1
    ee86:	4904      	ldr	r1, [pc, #16]	; (ee98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    ee88:	9b01      	ldr	r3, [sp, #4]
    ee8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ee8e:	bf00      	nop
    ee90:	b003      	add	sp, #12
    ee92:	f85d fb04 	ldr.w	pc, [sp], #4
    ee96:	bf00      	nop
    ee98:	1fff90f4 	.word	0x1fff90f4
    ee9c:	1fff90f0 	.word	0x1fff90f0

0000eea0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    eea0:	b500      	push	{lr}
    eea2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eea4:	f7f1 feb6 	bl	c14 <Sys_GetCoreID>
    eea8:	4603      	mov	r3, r0
    eeaa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    eeac:	4a0d      	ldr	r2, [pc, #52]	; (eee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    eeae:	9b01      	ldr	r3, [sp, #4]
    eeb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eeb4:	1e5a      	subs	r2, r3, #1
    eeb6:	490b      	ldr	r1, [pc, #44]	; (eee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    eeb8:	9b01      	ldr	r3, [sp, #4]
    eeba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    eebe:	4a0a      	ldr	r2, [pc, #40]	; (eee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    eec0:	9b01      	ldr	r3, [sp, #4]
    eec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eec6:	f003 0301 	and.w	r3, r3, #1
    eeca:	2b00      	cmp	r3, #0
    eecc:	d106      	bne.n	eedc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    eece:	4a05      	ldr	r2, [pc, #20]	; (eee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    eed0:	9b01      	ldr	r3, [sp, #4]
    eed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eed6:	2b00      	cmp	r3, #0
    eed8:	d100      	bne.n	eedc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eeda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eedc:	bf00      	nop
    eede:	b003      	add	sp, #12
    eee0:	f85d fb04 	ldr.w	pc, [sp], #4
    eee4:	1fff90f4 	.word	0x1fff90f4
    eee8:	1fff90f0 	.word	0x1fff90f0

0000eeec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    eeec:	b500      	push	{lr}
    eeee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eef0:	f7f1 fe90 	bl	c14 <Sys_GetCoreID>
    eef4:	4603      	mov	r3, r0
    eef6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    eef8:	4a10      	ldr	r2, [pc, #64]	; (ef3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    eefa:	9b01      	ldr	r3, [sp, #4]
    eefc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef00:	2b00      	cmp	r3, #0
    ef02:	d10d      	bne.n	ef20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ef04:	f7f1 fdb6 	bl	a74 <Port_schm_read_msr>
    ef08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ef0a:	9b00      	ldr	r3, [sp, #0]
    ef0c:	f003 0301 	and.w	r3, r3, #1
    ef10:	2b00      	cmp	r3, #0
    ef12:	d100      	bne.n	ef16 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ef14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    ef16:	490a      	ldr	r1, [pc, #40]	; (ef40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    ef18:	9b01      	ldr	r3, [sp, #4]
    ef1a:	9a00      	ldr	r2, [sp, #0]
    ef1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    ef20:	4a06      	ldr	r2, [pc, #24]	; (ef3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    ef22:	9b01      	ldr	r3, [sp, #4]
    ef24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef28:	1c5a      	adds	r2, r3, #1
    ef2a:	4904      	ldr	r1, [pc, #16]	; (ef3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    ef2c:	9b01      	ldr	r3, [sp, #4]
    ef2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ef32:	bf00      	nop
    ef34:	b003      	add	sp, #12
    ef36:	f85d fb04 	ldr.w	pc, [sp], #4
    ef3a:	bf00      	nop
    ef3c:	1fff90fc 	.word	0x1fff90fc
    ef40:	1fff90f8 	.word	0x1fff90f8

0000ef44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    ef44:	b500      	push	{lr}
    ef46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef48:	f7f1 fe64 	bl	c14 <Sys_GetCoreID>
    ef4c:	4603      	mov	r3, r0
    ef4e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    ef50:	4a0d      	ldr	r2, [pc, #52]	; (ef88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    ef52:	9b01      	ldr	r3, [sp, #4]
    ef54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef58:	1e5a      	subs	r2, r3, #1
    ef5a:	490b      	ldr	r1, [pc, #44]	; (ef88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    ef5c:	9b01      	ldr	r3, [sp, #4]
    ef5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    ef62:	4a0a      	ldr	r2, [pc, #40]	; (ef8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    ef64:	9b01      	ldr	r3, [sp, #4]
    ef66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef6a:	f003 0301 	and.w	r3, r3, #1
    ef6e:	2b00      	cmp	r3, #0
    ef70:	d106      	bne.n	ef80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    ef72:	4a05      	ldr	r2, [pc, #20]	; (ef88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    ef74:	9b01      	ldr	r3, [sp, #4]
    ef76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef7a:	2b00      	cmp	r3, #0
    ef7c:	d100      	bne.n	ef80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ef7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ef80:	bf00      	nop
    ef82:	b003      	add	sp, #12
    ef84:	f85d fb04 	ldr.w	pc, [sp], #4
    ef88:	1fff90fc 	.word	0x1fff90fc
    ef8c:	1fff90f8 	.word	0x1fff90f8

0000ef90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    ef90:	b500      	push	{lr}
    ef92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef94:	f7f1 fe3e 	bl	c14 <Sys_GetCoreID>
    ef98:	4603      	mov	r3, r0
    ef9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    ef9c:	4a10      	ldr	r2, [pc, #64]	; (efe0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    ef9e:	9b01      	ldr	r3, [sp, #4]
    efa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efa4:	2b00      	cmp	r3, #0
    efa6:	d10d      	bne.n	efc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    efa8:	f7f1 fd64 	bl	a74 <Port_schm_read_msr>
    efac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    efae:	9b00      	ldr	r3, [sp, #0]
    efb0:	f003 0301 	and.w	r3, r3, #1
    efb4:	2b00      	cmp	r3, #0
    efb6:	d100      	bne.n	efba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    efb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    efba:	490a      	ldr	r1, [pc, #40]	; (efe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    efbc:	9b01      	ldr	r3, [sp, #4]
    efbe:	9a00      	ldr	r2, [sp, #0]
    efc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    efc4:	4a06      	ldr	r2, [pc, #24]	; (efe0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    efc6:	9b01      	ldr	r3, [sp, #4]
    efc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efcc:	1c5a      	adds	r2, r3, #1
    efce:	4904      	ldr	r1, [pc, #16]	; (efe0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    efd0:	9b01      	ldr	r3, [sp, #4]
    efd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    efd6:	bf00      	nop
    efd8:	b003      	add	sp, #12
    efda:	f85d fb04 	ldr.w	pc, [sp], #4
    efde:	bf00      	nop
    efe0:	1fff9104 	.word	0x1fff9104
    efe4:	1fff9100 	.word	0x1fff9100

0000efe8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    efe8:	b500      	push	{lr}
    efea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    efec:	f7f1 fe12 	bl	c14 <Sys_GetCoreID>
    eff0:	4603      	mov	r3, r0
    eff2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    eff4:	4a0d      	ldr	r2, [pc, #52]	; (f02c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    eff6:	9b01      	ldr	r3, [sp, #4]
    eff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    effc:	1e5a      	subs	r2, r3, #1
    effe:	490b      	ldr	r1, [pc, #44]	; (f02c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f000:	9b01      	ldr	r3, [sp, #4]
    f002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    f006:	4a0a      	ldr	r2, [pc, #40]	; (f030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    f008:	9b01      	ldr	r3, [sp, #4]
    f00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f00e:	f003 0301 	and.w	r3, r3, #1
    f012:	2b00      	cmp	r3, #0
    f014:	d106      	bne.n	f024 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    f016:	4a05      	ldr	r2, [pc, #20]	; (f02c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f018:	9b01      	ldr	r3, [sp, #4]
    f01a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f01e:	2b00      	cmp	r3, #0
    f020:	d100      	bne.n	f024 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f022:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f024:	bf00      	nop
    f026:	b003      	add	sp, #12
    f028:	f85d fb04 	ldr.w	pc, [sp], #4
    f02c:	1fff9104 	.word	0x1fff9104
    f030:	1fff9100 	.word	0x1fff9100

0000f034 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    f034:	b500      	push	{lr}
    f036:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f038:	f7f1 fdec 	bl	c14 <Sys_GetCoreID>
    f03c:	4603      	mov	r3, r0
    f03e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    f040:	4a10      	ldr	r2, [pc, #64]	; (f084 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f042:	9b01      	ldr	r3, [sp, #4]
    f044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f048:	2b00      	cmp	r3, #0
    f04a:	d10d      	bne.n	f068 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f04c:	f7f1 fd12 	bl	a74 <Port_schm_read_msr>
    f050:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f052:	9b00      	ldr	r3, [sp, #0]
    f054:	f003 0301 	and.w	r3, r3, #1
    f058:	2b00      	cmp	r3, #0
    f05a:	d100      	bne.n	f05e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f05c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    f05e:	490a      	ldr	r1, [pc, #40]	; (f088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    f060:	9b01      	ldr	r3, [sp, #4]
    f062:	9a00      	ldr	r2, [sp, #0]
    f064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    f068:	4a06      	ldr	r2, [pc, #24]	; (f084 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f06a:	9b01      	ldr	r3, [sp, #4]
    f06c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f070:	1c5a      	adds	r2, r3, #1
    f072:	4904      	ldr	r1, [pc, #16]	; (f084 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f074:	9b01      	ldr	r3, [sp, #4]
    f076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f07a:	bf00      	nop
    f07c:	b003      	add	sp, #12
    f07e:	f85d fb04 	ldr.w	pc, [sp], #4
    f082:	bf00      	nop
    f084:	1fff910c 	.word	0x1fff910c
    f088:	1fff9108 	.word	0x1fff9108

0000f08c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    f08c:	b500      	push	{lr}
    f08e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f090:	f7f1 fdc0 	bl	c14 <Sys_GetCoreID>
    f094:	4603      	mov	r3, r0
    f096:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    f098:	4a0d      	ldr	r2, [pc, #52]	; (f0d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f09a:	9b01      	ldr	r3, [sp, #4]
    f09c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0a0:	1e5a      	subs	r2, r3, #1
    f0a2:	490b      	ldr	r1, [pc, #44]	; (f0d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f0a4:	9b01      	ldr	r3, [sp, #4]
    f0a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    f0aa:	4a0a      	ldr	r2, [pc, #40]	; (f0d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    f0ac:	9b01      	ldr	r3, [sp, #4]
    f0ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0b2:	f003 0301 	and.w	r3, r3, #1
    f0b6:	2b00      	cmp	r3, #0
    f0b8:	d106      	bne.n	f0c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    f0ba:	4a05      	ldr	r2, [pc, #20]	; (f0d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f0bc:	9b01      	ldr	r3, [sp, #4]
    f0be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0c2:	2b00      	cmp	r3, #0
    f0c4:	d100      	bne.n	f0c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f0c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f0c8:	bf00      	nop
    f0ca:	b003      	add	sp, #12
    f0cc:	f85d fb04 	ldr.w	pc, [sp], #4
    f0d0:	1fff910c 	.word	0x1fff910c
    f0d4:	1fff9108 	.word	0x1fff9108

0000f0d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    f0d8:	b500      	push	{lr}
    f0da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0dc:	f7f1 fd9a 	bl	c14 <Sys_GetCoreID>
    f0e0:	4603      	mov	r3, r0
    f0e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    f0e4:	4a10      	ldr	r2, [pc, #64]	; (f128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f0e6:	9b01      	ldr	r3, [sp, #4]
    f0e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0ec:	2b00      	cmp	r3, #0
    f0ee:	d10d      	bne.n	f10c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f0f0:	f7f1 fcc0 	bl	a74 <Port_schm_read_msr>
    f0f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f0f6:	9b00      	ldr	r3, [sp, #0]
    f0f8:	f003 0301 	and.w	r3, r3, #1
    f0fc:	2b00      	cmp	r3, #0
    f0fe:	d100      	bne.n	f102 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f100:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    f102:	490a      	ldr	r1, [pc, #40]	; (f12c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    f104:	9b01      	ldr	r3, [sp, #4]
    f106:	9a00      	ldr	r2, [sp, #0]
    f108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    f10c:	4a06      	ldr	r2, [pc, #24]	; (f128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f10e:	9b01      	ldr	r3, [sp, #4]
    f110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f114:	1c5a      	adds	r2, r3, #1
    f116:	4904      	ldr	r1, [pc, #16]	; (f128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f118:	9b01      	ldr	r3, [sp, #4]
    f11a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f11e:	bf00      	nop
    f120:	b003      	add	sp, #12
    f122:	f85d fb04 	ldr.w	pc, [sp], #4
    f126:	bf00      	nop
    f128:	1fff9114 	.word	0x1fff9114
    f12c:	1fff9110 	.word	0x1fff9110

0000f130 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    f130:	b500      	push	{lr}
    f132:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f134:	f7f1 fd6e 	bl	c14 <Sys_GetCoreID>
    f138:	4603      	mov	r3, r0
    f13a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    f13c:	4a0d      	ldr	r2, [pc, #52]	; (f174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f13e:	9b01      	ldr	r3, [sp, #4]
    f140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f144:	1e5a      	subs	r2, r3, #1
    f146:	490b      	ldr	r1, [pc, #44]	; (f174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f148:	9b01      	ldr	r3, [sp, #4]
    f14a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    f14e:	4a0a      	ldr	r2, [pc, #40]	; (f178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    f150:	9b01      	ldr	r3, [sp, #4]
    f152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f156:	f003 0301 	and.w	r3, r3, #1
    f15a:	2b00      	cmp	r3, #0
    f15c:	d106      	bne.n	f16c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    f15e:	4a05      	ldr	r2, [pc, #20]	; (f174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f160:	9b01      	ldr	r3, [sp, #4]
    f162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f166:	2b00      	cmp	r3, #0
    f168:	d100      	bne.n	f16c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f16a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f16c:	bf00      	nop
    f16e:	b003      	add	sp, #12
    f170:	f85d fb04 	ldr.w	pc, [sp], #4
    f174:	1fff9114 	.word	0x1fff9114
    f178:	1fff9110 	.word	0x1fff9110

0000f17c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    f17c:	b500      	push	{lr}
    f17e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f180:	f7f1 fd48 	bl	c14 <Sys_GetCoreID>
    f184:	4603      	mov	r3, r0
    f186:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    f188:	4a10      	ldr	r2, [pc, #64]	; (f1cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f18a:	9b01      	ldr	r3, [sp, #4]
    f18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f190:	2b00      	cmp	r3, #0
    f192:	d10d      	bne.n	f1b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f194:	f7f1 fc6e 	bl	a74 <Port_schm_read_msr>
    f198:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f19a:	9b00      	ldr	r3, [sp, #0]
    f19c:	f003 0301 	and.w	r3, r3, #1
    f1a0:	2b00      	cmp	r3, #0
    f1a2:	d100      	bne.n	f1a6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f1a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    f1a6:	490a      	ldr	r1, [pc, #40]	; (f1d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    f1a8:	9b01      	ldr	r3, [sp, #4]
    f1aa:	9a00      	ldr	r2, [sp, #0]
    f1ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    f1b0:	4a06      	ldr	r2, [pc, #24]	; (f1cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f1b2:	9b01      	ldr	r3, [sp, #4]
    f1b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1b8:	1c5a      	adds	r2, r3, #1
    f1ba:	4904      	ldr	r1, [pc, #16]	; (f1cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f1bc:	9b01      	ldr	r3, [sp, #4]
    f1be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f1c2:	bf00      	nop
    f1c4:	b003      	add	sp, #12
    f1c6:	f85d fb04 	ldr.w	pc, [sp], #4
    f1ca:	bf00      	nop
    f1cc:	1fff911c 	.word	0x1fff911c
    f1d0:	1fff9118 	.word	0x1fff9118

0000f1d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    f1d4:	b500      	push	{lr}
    f1d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1d8:	f7f1 fd1c 	bl	c14 <Sys_GetCoreID>
    f1dc:	4603      	mov	r3, r0
    f1de:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    f1e0:	4a0d      	ldr	r2, [pc, #52]	; (f218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f1e2:	9b01      	ldr	r3, [sp, #4]
    f1e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1e8:	1e5a      	subs	r2, r3, #1
    f1ea:	490b      	ldr	r1, [pc, #44]	; (f218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f1ec:	9b01      	ldr	r3, [sp, #4]
    f1ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    f1f2:	4a0a      	ldr	r2, [pc, #40]	; (f21c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    f1f4:	9b01      	ldr	r3, [sp, #4]
    f1f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1fa:	f003 0301 	and.w	r3, r3, #1
    f1fe:	2b00      	cmp	r3, #0
    f200:	d106      	bne.n	f210 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    f202:	4a05      	ldr	r2, [pc, #20]	; (f218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f204:	9b01      	ldr	r3, [sp, #4]
    f206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f20a:	2b00      	cmp	r3, #0
    f20c:	d100      	bne.n	f210 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f20e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f210:	bf00      	nop
    f212:	b003      	add	sp, #12
    f214:	f85d fb04 	ldr.w	pc, [sp], #4
    f218:	1fff911c 	.word	0x1fff911c
    f21c:	1fff9118 	.word	0x1fff9118

0000f220 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    f220:	b500      	push	{lr}
    f222:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f224:	f7f1 fcf6 	bl	c14 <Sys_GetCoreID>
    f228:	4603      	mov	r3, r0
    f22a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    f22c:	4a10      	ldr	r2, [pc, #64]	; (f270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f22e:	9b01      	ldr	r3, [sp, #4]
    f230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f234:	2b00      	cmp	r3, #0
    f236:	d10d      	bne.n	f254 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f238:	f7f1 fc1c 	bl	a74 <Port_schm_read_msr>
    f23c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f23e:	9b00      	ldr	r3, [sp, #0]
    f240:	f003 0301 	and.w	r3, r3, #1
    f244:	2b00      	cmp	r3, #0
    f246:	d100      	bne.n	f24a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f248:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    f24a:	490a      	ldr	r1, [pc, #40]	; (f274 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    f24c:	9b01      	ldr	r3, [sp, #4]
    f24e:	9a00      	ldr	r2, [sp, #0]
    f250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    f254:	4a06      	ldr	r2, [pc, #24]	; (f270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f256:	9b01      	ldr	r3, [sp, #4]
    f258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f25c:	1c5a      	adds	r2, r3, #1
    f25e:	4904      	ldr	r1, [pc, #16]	; (f270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f260:	9b01      	ldr	r3, [sp, #4]
    f262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f266:	bf00      	nop
    f268:	b003      	add	sp, #12
    f26a:	f85d fb04 	ldr.w	pc, [sp], #4
    f26e:	bf00      	nop
    f270:	1fff9124 	.word	0x1fff9124
    f274:	1fff9120 	.word	0x1fff9120

0000f278 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    f278:	b500      	push	{lr}
    f27a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f27c:	f7f1 fcca 	bl	c14 <Sys_GetCoreID>
    f280:	4603      	mov	r3, r0
    f282:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    f284:	4a0d      	ldr	r2, [pc, #52]	; (f2bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f286:	9b01      	ldr	r3, [sp, #4]
    f288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f28c:	1e5a      	subs	r2, r3, #1
    f28e:	490b      	ldr	r1, [pc, #44]	; (f2bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f290:	9b01      	ldr	r3, [sp, #4]
    f292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    f296:	4a0a      	ldr	r2, [pc, #40]	; (f2c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    f298:	9b01      	ldr	r3, [sp, #4]
    f29a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f29e:	f003 0301 	and.w	r3, r3, #1
    f2a2:	2b00      	cmp	r3, #0
    f2a4:	d106      	bne.n	f2b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    f2a6:	4a05      	ldr	r2, [pc, #20]	; (f2bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f2a8:	9b01      	ldr	r3, [sp, #4]
    f2aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2ae:	2b00      	cmp	r3, #0
    f2b0:	d100      	bne.n	f2b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f2b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f2b4:	bf00      	nop
    f2b6:	b003      	add	sp, #12
    f2b8:	f85d fb04 	ldr.w	pc, [sp], #4
    f2bc:	1fff9124 	.word	0x1fff9124
    f2c0:	1fff9120 	.word	0x1fff9120

0000f2c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    f2c4:	b500      	push	{lr}
    f2c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2c8:	f7f1 fca4 	bl	c14 <Sys_GetCoreID>
    f2cc:	4603      	mov	r3, r0
    f2ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    f2d0:	4a10      	ldr	r2, [pc, #64]	; (f314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f2d2:	9b01      	ldr	r3, [sp, #4]
    f2d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2d8:	2b00      	cmp	r3, #0
    f2da:	d10d      	bne.n	f2f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f2dc:	f7f1 fbca 	bl	a74 <Port_schm_read_msr>
    f2e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f2e2:	9b00      	ldr	r3, [sp, #0]
    f2e4:	f003 0301 	and.w	r3, r3, #1
    f2e8:	2b00      	cmp	r3, #0
    f2ea:	d100      	bne.n	f2ee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f2ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    f2ee:	490a      	ldr	r1, [pc, #40]	; (f318 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    f2f0:	9b01      	ldr	r3, [sp, #4]
    f2f2:	9a00      	ldr	r2, [sp, #0]
    f2f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    f2f8:	4a06      	ldr	r2, [pc, #24]	; (f314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f2fa:	9b01      	ldr	r3, [sp, #4]
    f2fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f300:	1c5a      	adds	r2, r3, #1
    f302:	4904      	ldr	r1, [pc, #16]	; (f314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f304:	9b01      	ldr	r3, [sp, #4]
    f306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f30a:	bf00      	nop
    f30c:	b003      	add	sp, #12
    f30e:	f85d fb04 	ldr.w	pc, [sp], #4
    f312:	bf00      	nop
    f314:	1fff912c 	.word	0x1fff912c
    f318:	1fff9128 	.word	0x1fff9128

0000f31c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    f31c:	b500      	push	{lr}
    f31e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f320:	f7f1 fc78 	bl	c14 <Sys_GetCoreID>
    f324:	4603      	mov	r3, r0
    f326:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    f328:	4a0d      	ldr	r2, [pc, #52]	; (f360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f32a:	9b01      	ldr	r3, [sp, #4]
    f32c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f330:	1e5a      	subs	r2, r3, #1
    f332:	490b      	ldr	r1, [pc, #44]	; (f360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f334:	9b01      	ldr	r3, [sp, #4]
    f336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    f33a:	4a0a      	ldr	r2, [pc, #40]	; (f364 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    f33c:	9b01      	ldr	r3, [sp, #4]
    f33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f342:	f003 0301 	and.w	r3, r3, #1
    f346:	2b00      	cmp	r3, #0
    f348:	d106      	bne.n	f358 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    f34a:	4a05      	ldr	r2, [pc, #20]	; (f360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f34c:	9b01      	ldr	r3, [sp, #4]
    f34e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f352:	2b00      	cmp	r3, #0
    f354:	d100      	bne.n	f358 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f356:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f358:	bf00      	nop
    f35a:	b003      	add	sp, #12
    f35c:	f85d fb04 	ldr.w	pc, [sp], #4
    f360:	1fff912c 	.word	0x1fff912c
    f364:	1fff9128 	.word	0x1fff9128

0000f368 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    f368:	b500      	push	{lr}
    f36a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f36c:	f7f1 fc52 	bl	c14 <Sys_GetCoreID>
    f370:	4603      	mov	r3, r0
    f372:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    f374:	4a10      	ldr	r2, [pc, #64]	; (f3b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f376:	9b01      	ldr	r3, [sp, #4]
    f378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f37c:	2b00      	cmp	r3, #0
    f37e:	d10d      	bne.n	f39c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f380:	f7f1 fb78 	bl	a74 <Port_schm_read_msr>
    f384:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f386:	9b00      	ldr	r3, [sp, #0]
    f388:	f003 0301 	and.w	r3, r3, #1
    f38c:	2b00      	cmp	r3, #0
    f38e:	d100      	bne.n	f392 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f390:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    f392:	490a      	ldr	r1, [pc, #40]	; (f3bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    f394:	9b01      	ldr	r3, [sp, #4]
    f396:	9a00      	ldr	r2, [sp, #0]
    f398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    f39c:	4a06      	ldr	r2, [pc, #24]	; (f3b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f39e:	9b01      	ldr	r3, [sp, #4]
    f3a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3a4:	1c5a      	adds	r2, r3, #1
    f3a6:	4904      	ldr	r1, [pc, #16]	; (f3b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f3a8:	9b01      	ldr	r3, [sp, #4]
    f3aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f3ae:	bf00      	nop
    f3b0:	b003      	add	sp, #12
    f3b2:	f85d fb04 	ldr.w	pc, [sp], #4
    f3b6:	bf00      	nop
    f3b8:	1fff9134 	.word	0x1fff9134
    f3bc:	1fff9130 	.word	0x1fff9130

0000f3c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    f3c0:	b500      	push	{lr}
    f3c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f3c4:	f7f1 fc26 	bl	c14 <Sys_GetCoreID>
    f3c8:	4603      	mov	r3, r0
    f3ca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    f3cc:	4a0d      	ldr	r2, [pc, #52]	; (f404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    f3ce:	9b01      	ldr	r3, [sp, #4]
    f3d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3d4:	1e5a      	subs	r2, r3, #1
    f3d6:	490b      	ldr	r1, [pc, #44]	; (f404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    f3d8:	9b01      	ldr	r3, [sp, #4]
    f3da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    f3de:	4a0a      	ldr	r2, [pc, #40]	; (f408 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    f3e0:	9b01      	ldr	r3, [sp, #4]
    f3e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3e6:	f003 0301 	and.w	r3, r3, #1
    f3ea:	2b00      	cmp	r3, #0
    f3ec:	d106      	bne.n	f3fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    f3ee:	4a05      	ldr	r2, [pc, #20]	; (f404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    f3f0:	9b01      	ldr	r3, [sp, #4]
    f3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3f6:	2b00      	cmp	r3, #0
    f3f8:	d100      	bne.n	f3fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f3fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f3fc:	bf00      	nop
    f3fe:	b003      	add	sp, #12
    f400:	f85d fb04 	ldr.w	pc, [sp], #4
    f404:	1fff9134 	.word	0x1fff9134
    f408:	1fff9130 	.word	0x1fff9130

0000f40c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    f40c:	b500      	push	{lr}
    f40e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f410:	f7f1 fc00 	bl	c14 <Sys_GetCoreID>
    f414:	4603      	mov	r3, r0
    f416:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    f418:	4a10      	ldr	r2, [pc, #64]	; (f45c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    f41a:	9b01      	ldr	r3, [sp, #4]
    f41c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f420:	2b00      	cmp	r3, #0
    f422:	d10d      	bne.n	f440 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f424:	f7f1 fb26 	bl	a74 <Port_schm_read_msr>
    f428:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f42a:	9b00      	ldr	r3, [sp, #0]
    f42c:	f003 0301 	and.w	r3, r3, #1
    f430:	2b00      	cmp	r3, #0
    f432:	d100      	bne.n	f436 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f434:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    f436:	490a      	ldr	r1, [pc, #40]	; (f460 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    f438:	9b01      	ldr	r3, [sp, #4]
    f43a:	9a00      	ldr	r2, [sp, #0]
    f43c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    f440:	4a06      	ldr	r2, [pc, #24]	; (f45c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    f442:	9b01      	ldr	r3, [sp, #4]
    f444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f448:	1c5a      	adds	r2, r3, #1
    f44a:	4904      	ldr	r1, [pc, #16]	; (f45c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    f44c:	9b01      	ldr	r3, [sp, #4]
    f44e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f452:	bf00      	nop
    f454:	b003      	add	sp, #12
    f456:	f85d fb04 	ldr.w	pc, [sp], #4
    f45a:	bf00      	nop
    f45c:	1fff913c 	.word	0x1fff913c
    f460:	1fff9138 	.word	0x1fff9138

0000f464 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    f464:	b500      	push	{lr}
    f466:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f468:	f7f1 fbd4 	bl	c14 <Sys_GetCoreID>
    f46c:	4603      	mov	r3, r0
    f46e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    f470:	4a0d      	ldr	r2, [pc, #52]	; (f4a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    f472:	9b01      	ldr	r3, [sp, #4]
    f474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f478:	1e5a      	subs	r2, r3, #1
    f47a:	490b      	ldr	r1, [pc, #44]	; (f4a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    f47c:	9b01      	ldr	r3, [sp, #4]
    f47e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    f482:	4a0a      	ldr	r2, [pc, #40]	; (f4ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    f484:	9b01      	ldr	r3, [sp, #4]
    f486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f48a:	f003 0301 	and.w	r3, r3, #1
    f48e:	2b00      	cmp	r3, #0
    f490:	d106      	bne.n	f4a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    f492:	4a05      	ldr	r2, [pc, #20]	; (f4a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    f494:	9b01      	ldr	r3, [sp, #4]
    f496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f49a:	2b00      	cmp	r3, #0
    f49c:	d100      	bne.n	f4a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f49e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f4a0:	bf00      	nop
    f4a2:	b003      	add	sp, #12
    f4a4:	f85d fb04 	ldr.w	pc, [sp], #4
    f4a8:	1fff913c 	.word	0x1fff913c
    f4ac:	1fff9138 	.word	0x1fff9138

0000f4b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    f4b0:	b500      	push	{lr}
    f4b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4b4:	f7f1 fbae 	bl	c14 <Sys_GetCoreID>
    f4b8:	4603      	mov	r3, r0
    f4ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    f4bc:	4a10      	ldr	r2, [pc, #64]	; (f500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    f4be:	9b01      	ldr	r3, [sp, #4]
    f4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4c4:	2b00      	cmp	r3, #0
    f4c6:	d10d      	bne.n	f4e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f4c8:	f7f1 fad4 	bl	a74 <Port_schm_read_msr>
    f4cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f4ce:	9b00      	ldr	r3, [sp, #0]
    f4d0:	f003 0301 	and.w	r3, r3, #1
    f4d4:	2b00      	cmp	r3, #0
    f4d6:	d100      	bne.n	f4da <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f4d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    f4da:	490a      	ldr	r1, [pc, #40]	; (f504 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    f4dc:	9b01      	ldr	r3, [sp, #4]
    f4de:	9a00      	ldr	r2, [sp, #0]
    f4e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    f4e4:	4a06      	ldr	r2, [pc, #24]	; (f500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    f4e6:	9b01      	ldr	r3, [sp, #4]
    f4e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4ec:	1c5a      	adds	r2, r3, #1
    f4ee:	4904      	ldr	r1, [pc, #16]	; (f500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    f4f0:	9b01      	ldr	r3, [sp, #4]
    f4f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f4f6:	bf00      	nop
    f4f8:	b003      	add	sp, #12
    f4fa:	f85d fb04 	ldr.w	pc, [sp], #4
    f4fe:	bf00      	nop
    f500:	1fff9144 	.word	0x1fff9144
    f504:	1fff9140 	.word	0x1fff9140

0000f508 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    f508:	b500      	push	{lr}
    f50a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f50c:	f7f1 fb82 	bl	c14 <Sys_GetCoreID>
    f510:	4603      	mov	r3, r0
    f512:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    f514:	4a0d      	ldr	r2, [pc, #52]	; (f54c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    f516:	9b01      	ldr	r3, [sp, #4]
    f518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f51c:	1e5a      	subs	r2, r3, #1
    f51e:	490b      	ldr	r1, [pc, #44]	; (f54c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    f520:	9b01      	ldr	r3, [sp, #4]
    f522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    f526:	4a0a      	ldr	r2, [pc, #40]	; (f550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    f528:	9b01      	ldr	r3, [sp, #4]
    f52a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f52e:	f003 0301 	and.w	r3, r3, #1
    f532:	2b00      	cmp	r3, #0
    f534:	d106      	bne.n	f544 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    f536:	4a05      	ldr	r2, [pc, #20]	; (f54c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    f538:	9b01      	ldr	r3, [sp, #4]
    f53a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f53e:	2b00      	cmp	r3, #0
    f540:	d100      	bne.n	f544 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f542:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f544:	bf00      	nop
    f546:	b003      	add	sp, #12
    f548:	f85d fb04 	ldr.w	pc, [sp], #4
    f54c:	1fff9144 	.word	0x1fff9144
    f550:	1fff9140 	.word	0x1fff9140

0000f554 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    f554:	b500      	push	{lr}
    f556:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f558:	f7f1 fb5c 	bl	c14 <Sys_GetCoreID>
    f55c:	4603      	mov	r3, r0
    f55e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    f560:	4a10      	ldr	r2, [pc, #64]	; (f5a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    f562:	9b01      	ldr	r3, [sp, #4]
    f564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f568:	2b00      	cmp	r3, #0
    f56a:	d10d      	bne.n	f588 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f56c:	f7f1 fa82 	bl	a74 <Port_schm_read_msr>
    f570:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f572:	9b00      	ldr	r3, [sp, #0]
    f574:	f003 0301 	and.w	r3, r3, #1
    f578:	2b00      	cmp	r3, #0
    f57a:	d100      	bne.n	f57e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f57c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    f57e:	490a      	ldr	r1, [pc, #40]	; (f5a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    f580:	9b01      	ldr	r3, [sp, #4]
    f582:	9a00      	ldr	r2, [sp, #0]
    f584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    f588:	4a06      	ldr	r2, [pc, #24]	; (f5a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    f58a:	9b01      	ldr	r3, [sp, #4]
    f58c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f590:	1c5a      	adds	r2, r3, #1
    f592:	4904      	ldr	r1, [pc, #16]	; (f5a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    f594:	9b01      	ldr	r3, [sp, #4]
    f596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f59a:	bf00      	nop
    f59c:	b003      	add	sp, #12
    f59e:	f85d fb04 	ldr.w	pc, [sp], #4
    f5a2:	bf00      	nop
    f5a4:	1fff914c 	.word	0x1fff914c
    f5a8:	1fff9148 	.word	0x1fff9148

0000f5ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    f5ac:	b500      	push	{lr}
    f5ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5b0:	f7f1 fb30 	bl	c14 <Sys_GetCoreID>
    f5b4:	4603      	mov	r3, r0
    f5b6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    f5b8:	4a0d      	ldr	r2, [pc, #52]	; (f5f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    f5ba:	9b01      	ldr	r3, [sp, #4]
    f5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5c0:	1e5a      	subs	r2, r3, #1
    f5c2:	490b      	ldr	r1, [pc, #44]	; (f5f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    f5c4:	9b01      	ldr	r3, [sp, #4]
    f5c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    f5ca:	4a0a      	ldr	r2, [pc, #40]	; (f5f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    f5cc:	9b01      	ldr	r3, [sp, #4]
    f5ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5d2:	f003 0301 	and.w	r3, r3, #1
    f5d6:	2b00      	cmp	r3, #0
    f5d8:	d106      	bne.n	f5e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    f5da:	4a05      	ldr	r2, [pc, #20]	; (f5f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    f5dc:	9b01      	ldr	r3, [sp, #4]
    f5de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5e2:	2b00      	cmp	r3, #0
    f5e4:	d100      	bne.n	f5e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f5e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f5e8:	bf00      	nop
    f5ea:	b003      	add	sp, #12
    f5ec:	f85d fb04 	ldr.w	pc, [sp], #4
    f5f0:	1fff914c 	.word	0x1fff914c
    f5f4:	1fff9148 	.word	0x1fff9148

0000f5f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    f5f8:	b500      	push	{lr}
    f5fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5fc:	f7f1 fb0a 	bl	c14 <Sys_GetCoreID>
    f600:	4603      	mov	r3, r0
    f602:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    f604:	4a10      	ldr	r2, [pc, #64]	; (f648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    f606:	9b01      	ldr	r3, [sp, #4]
    f608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f60c:	2b00      	cmp	r3, #0
    f60e:	d10d      	bne.n	f62c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f610:	f7f1 fa30 	bl	a74 <Port_schm_read_msr>
    f614:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f616:	9b00      	ldr	r3, [sp, #0]
    f618:	f003 0301 	and.w	r3, r3, #1
    f61c:	2b00      	cmp	r3, #0
    f61e:	d100      	bne.n	f622 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f620:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    f622:	490a      	ldr	r1, [pc, #40]	; (f64c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    f624:	9b01      	ldr	r3, [sp, #4]
    f626:	9a00      	ldr	r2, [sp, #0]
    f628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    f62c:	4a06      	ldr	r2, [pc, #24]	; (f648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    f62e:	9b01      	ldr	r3, [sp, #4]
    f630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f634:	1c5a      	adds	r2, r3, #1
    f636:	4904      	ldr	r1, [pc, #16]	; (f648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    f638:	9b01      	ldr	r3, [sp, #4]
    f63a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f63e:	bf00      	nop
    f640:	b003      	add	sp, #12
    f642:	f85d fb04 	ldr.w	pc, [sp], #4
    f646:	bf00      	nop
    f648:	1fff9154 	.word	0x1fff9154
    f64c:	1fff9150 	.word	0x1fff9150

0000f650 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    f650:	b500      	push	{lr}
    f652:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f654:	f7f1 fade 	bl	c14 <Sys_GetCoreID>
    f658:	4603      	mov	r3, r0
    f65a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    f65c:	4a0d      	ldr	r2, [pc, #52]	; (f694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    f65e:	9b01      	ldr	r3, [sp, #4]
    f660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f664:	1e5a      	subs	r2, r3, #1
    f666:	490b      	ldr	r1, [pc, #44]	; (f694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    f668:	9b01      	ldr	r3, [sp, #4]
    f66a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    f66e:	4a0a      	ldr	r2, [pc, #40]	; (f698 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    f670:	9b01      	ldr	r3, [sp, #4]
    f672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f676:	f003 0301 	and.w	r3, r3, #1
    f67a:	2b00      	cmp	r3, #0
    f67c:	d106      	bne.n	f68c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    f67e:	4a05      	ldr	r2, [pc, #20]	; (f694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    f680:	9b01      	ldr	r3, [sp, #4]
    f682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f686:	2b00      	cmp	r3, #0
    f688:	d100      	bne.n	f68c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f68a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f68c:	bf00      	nop
    f68e:	b003      	add	sp, #12
    f690:	f85d fb04 	ldr.w	pc, [sp], #4
    f694:	1fff9154 	.word	0x1fff9154
    f698:	1fff9150 	.word	0x1fff9150

0000f69c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    f69c:	b500      	push	{lr}
    f69e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6a0:	f7f1 fab8 	bl	c14 <Sys_GetCoreID>
    f6a4:	4603      	mov	r3, r0
    f6a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    f6a8:	4a10      	ldr	r2, [pc, #64]	; (f6ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    f6aa:	9b01      	ldr	r3, [sp, #4]
    f6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6b0:	2b00      	cmp	r3, #0
    f6b2:	d10d      	bne.n	f6d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f6b4:	f7f1 f9de 	bl	a74 <Port_schm_read_msr>
    f6b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f6ba:	9b00      	ldr	r3, [sp, #0]
    f6bc:	f003 0301 	and.w	r3, r3, #1
    f6c0:	2b00      	cmp	r3, #0
    f6c2:	d100      	bne.n	f6c6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f6c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    f6c6:	490a      	ldr	r1, [pc, #40]	; (f6f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    f6c8:	9b01      	ldr	r3, [sp, #4]
    f6ca:	9a00      	ldr	r2, [sp, #0]
    f6cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    f6d0:	4a06      	ldr	r2, [pc, #24]	; (f6ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    f6d2:	9b01      	ldr	r3, [sp, #4]
    f6d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6d8:	1c5a      	adds	r2, r3, #1
    f6da:	4904      	ldr	r1, [pc, #16]	; (f6ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    f6dc:	9b01      	ldr	r3, [sp, #4]
    f6de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f6e2:	bf00      	nop
    f6e4:	b003      	add	sp, #12
    f6e6:	f85d fb04 	ldr.w	pc, [sp], #4
    f6ea:	bf00      	nop
    f6ec:	1fff915c 	.word	0x1fff915c
    f6f0:	1fff9158 	.word	0x1fff9158

0000f6f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    f6f4:	b500      	push	{lr}
    f6f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6f8:	f7f1 fa8c 	bl	c14 <Sys_GetCoreID>
    f6fc:	4603      	mov	r3, r0
    f6fe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    f700:	4a0d      	ldr	r2, [pc, #52]	; (f738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    f702:	9b01      	ldr	r3, [sp, #4]
    f704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f708:	1e5a      	subs	r2, r3, #1
    f70a:	490b      	ldr	r1, [pc, #44]	; (f738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    f70c:	9b01      	ldr	r3, [sp, #4]
    f70e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    f712:	4a0a      	ldr	r2, [pc, #40]	; (f73c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    f714:	9b01      	ldr	r3, [sp, #4]
    f716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f71a:	f003 0301 	and.w	r3, r3, #1
    f71e:	2b00      	cmp	r3, #0
    f720:	d106      	bne.n	f730 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    f722:	4a05      	ldr	r2, [pc, #20]	; (f738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    f724:	9b01      	ldr	r3, [sp, #4]
    f726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f72a:	2b00      	cmp	r3, #0
    f72c:	d100      	bne.n	f730 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f72e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f730:	bf00      	nop
    f732:	b003      	add	sp, #12
    f734:	f85d fb04 	ldr.w	pc, [sp], #4
    f738:	1fff915c 	.word	0x1fff915c
    f73c:	1fff9158 	.word	0x1fff9158

0000f740 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    f740:	b500      	push	{lr}
    f742:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f744:	f7f1 fa66 	bl	c14 <Sys_GetCoreID>
    f748:	4603      	mov	r3, r0
    f74a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    f74c:	4a10      	ldr	r2, [pc, #64]	; (f790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    f74e:	9b01      	ldr	r3, [sp, #4]
    f750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f754:	2b00      	cmp	r3, #0
    f756:	d10d      	bne.n	f774 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f758:	f7f1 f98c 	bl	a74 <Port_schm_read_msr>
    f75c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f75e:	9b00      	ldr	r3, [sp, #0]
    f760:	f003 0301 	and.w	r3, r3, #1
    f764:	2b00      	cmp	r3, #0
    f766:	d100      	bne.n	f76a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f768:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    f76a:	490a      	ldr	r1, [pc, #40]	; (f794 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    f76c:	9b01      	ldr	r3, [sp, #4]
    f76e:	9a00      	ldr	r2, [sp, #0]
    f770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    f774:	4a06      	ldr	r2, [pc, #24]	; (f790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    f776:	9b01      	ldr	r3, [sp, #4]
    f778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f77c:	1c5a      	adds	r2, r3, #1
    f77e:	4904      	ldr	r1, [pc, #16]	; (f790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    f780:	9b01      	ldr	r3, [sp, #4]
    f782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f786:	bf00      	nop
    f788:	b003      	add	sp, #12
    f78a:	f85d fb04 	ldr.w	pc, [sp], #4
    f78e:	bf00      	nop
    f790:	1fff9164 	.word	0x1fff9164
    f794:	1fff9160 	.word	0x1fff9160

0000f798 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    f798:	b500      	push	{lr}
    f79a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f79c:	f7f1 fa3a 	bl	c14 <Sys_GetCoreID>
    f7a0:	4603      	mov	r3, r0
    f7a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    f7a4:	4a0d      	ldr	r2, [pc, #52]	; (f7dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    f7a6:	9b01      	ldr	r3, [sp, #4]
    f7a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7ac:	1e5a      	subs	r2, r3, #1
    f7ae:	490b      	ldr	r1, [pc, #44]	; (f7dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    f7b0:	9b01      	ldr	r3, [sp, #4]
    f7b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    f7b6:	4a0a      	ldr	r2, [pc, #40]	; (f7e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    f7b8:	9b01      	ldr	r3, [sp, #4]
    f7ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7be:	f003 0301 	and.w	r3, r3, #1
    f7c2:	2b00      	cmp	r3, #0
    f7c4:	d106      	bne.n	f7d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    f7c6:	4a05      	ldr	r2, [pc, #20]	; (f7dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    f7c8:	9b01      	ldr	r3, [sp, #4]
    f7ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7ce:	2b00      	cmp	r3, #0
    f7d0:	d100      	bne.n	f7d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f7d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f7d4:	bf00      	nop
    f7d6:	b003      	add	sp, #12
    f7d8:	f85d fb04 	ldr.w	pc, [sp], #4
    f7dc:	1fff9164 	.word	0x1fff9164
    f7e0:	1fff9160 	.word	0x1fff9160

0000f7e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    f7e4:	b500      	push	{lr}
    f7e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f7e8:	f7f1 fa14 	bl	c14 <Sys_GetCoreID>
    f7ec:	4603      	mov	r3, r0
    f7ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    f7f0:	4a10      	ldr	r2, [pc, #64]	; (f834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    f7f2:	9b01      	ldr	r3, [sp, #4]
    f7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7f8:	2b00      	cmp	r3, #0
    f7fa:	d10d      	bne.n	f818 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f7fc:	f7f1 f93a 	bl	a74 <Port_schm_read_msr>
    f800:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f802:	9b00      	ldr	r3, [sp, #0]
    f804:	f003 0301 	and.w	r3, r3, #1
    f808:	2b00      	cmp	r3, #0
    f80a:	d100      	bne.n	f80e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f80c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    f80e:	490a      	ldr	r1, [pc, #40]	; (f838 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    f810:	9b01      	ldr	r3, [sp, #4]
    f812:	9a00      	ldr	r2, [sp, #0]
    f814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    f818:	4a06      	ldr	r2, [pc, #24]	; (f834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    f81a:	9b01      	ldr	r3, [sp, #4]
    f81c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f820:	1c5a      	adds	r2, r3, #1
    f822:	4904      	ldr	r1, [pc, #16]	; (f834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    f824:	9b01      	ldr	r3, [sp, #4]
    f826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f82a:	bf00      	nop
    f82c:	b003      	add	sp, #12
    f82e:	f85d fb04 	ldr.w	pc, [sp], #4
    f832:	bf00      	nop
    f834:	1fff916c 	.word	0x1fff916c
    f838:	1fff9168 	.word	0x1fff9168

0000f83c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    f83c:	b500      	push	{lr}
    f83e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f840:	f7f1 f9e8 	bl	c14 <Sys_GetCoreID>
    f844:	4603      	mov	r3, r0
    f846:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    f848:	4a0d      	ldr	r2, [pc, #52]	; (f880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    f84a:	9b01      	ldr	r3, [sp, #4]
    f84c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f850:	1e5a      	subs	r2, r3, #1
    f852:	490b      	ldr	r1, [pc, #44]	; (f880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    f854:	9b01      	ldr	r3, [sp, #4]
    f856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    f85a:	4a0a      	ldr	r2, [pc, #40]	; (f884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    f85c:	9b01      	ldr	r3, [sp, #4]
    f85e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f862:	f003 0301 	and.w	r3, r3, #1
    f866:	2b00      	cmp	r3, #0
    f868:	d106      	bne.n	f878 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    f86a:	4a05      	ldr	r2, [pc, #20]	; (f880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    f86c:	9b01      	ldr	r3, [sp, #4]
    f86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f872:	2b00      	cmp	r3, #0
    f874:	d100      	bne.n	f878 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f876:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f878:	bf00      	nop
    f87a:	b003      	add	sp, #12
    f87c:	f85d fb04 	ldr.w	pc, [sp], #4
    f880:	1fff916c 	.word	0x1fff916c
    f884:	1fff9168 	.word	0x1fff9168

0000f888 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    f888:	b500      	push	{lr}
    f88a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f88c:	f7f1 f9c2 	bl	c14 <Sys_GetCoreID>
    f890:	4603      	mov	r3, r0
    f892:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    f894:	4a10      	ldr	r2, [pc, #64]	; (f8d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    f896:	9b01      	ldr	r3, [sp, #4]
    f898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f89c:	2b00      	cmp	r3, #0
    f89e:	d10d      	bne.n	f8bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f8a0:	f7f1 f8e8 	bl	a74 <Port_schm_read_msr>
    f8a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f8a6:	9b00      	ldr	r3, [sp, #0]
    f8a8:	f003 0301 	and.w	r3, r3, #1
    f8ac:	2b00      	cmp	r3, #0
    f8ae:	d100      	bne.n	f8b2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f8b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    f8b2:	490a      	ldr	r1, [pc, #40]	; (f8dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    f8b4:	9b01      	ldr	r3, [sp, #4]
    f8b6:	9a00      	ldr	r2, [sp, #0]
    f8b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    f8bc:	4a06      	ldr	r2, [pc, #24]	; (f8d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    f8be:	9b01      	ldr	r3, [sp, #4]
    f8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8c4:	1c5a      	adds	r2, r3, #1
    f8c6:	4904      	ldr	r1, [pc, #16]	; (f8d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    f8c8:	9b01      	ldr	r3, [sp, #4]
    f8ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f8ce:	bf00      	nop
    f8d0:	b003      	add	sp, #12
    f8d2:	f85d fb04 	ldr.w	pc, [sp], #4
    f8d6:	bf00      	nop
    f8d8:	1fff9174 	.word	0x1fff9174
    f8dc:	1fff9170 	.word	0x1fff9170

0000f8e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    f8e0:	b500      	push	{lr}
    f8e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f8e4:	f7f1 f996 	bl	c14 <Sys_GetCoreID>
    f8e8:	4603      	mov	r3, r0
    f8ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    f8ec:	4a0d      	ldr	r2, [pc, #52]	; (f924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    f8ee:	9b01      	ldr	r3, [sp, #4]
    f8f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8f4:	1e5a      	subs	r2, r3, #1
    f8f6:	490b      	ldr	r1, [pc, #44]	; (f924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    f8f8:	9b01      	ldr	r3, [sp, #4]
    f8fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    f8fe:	4a0a      	ldr	r2, [pc, #40]	; (f928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    f900:	9b01      	ldr	r3, [sp, #4]
    f902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f906:	f003 0301 	and.w	r3, r3, #1
    f90a:	2b00      	cmp	r3, #0
    f90c:	d106      	bne.n	f91c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    f90e:	4a05      	ldr	r2, [pc, #20]	; (f924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    f910:	9b01      	ldr	r3, [sp, #4]
    f912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f916:	2b00      	cmp	r3, #0
    f918:	d100      	bne.n	f91c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f91a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f91c:	bf00      	nop
    f91e:	b003      	add	sp, #12
    f920:	f85d fb04 	ldr.w	pc, [sp], #4
    f924:	1fff9174 	.word	0x1fff9174
    f928:	1fff9170 	.word	0x1fff9170

0000f92c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    f92c:	b500      	push	{lr}
    f92e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f930:	f7f1 f970 	bl	c14 <Sys_GetCoreID>
    f934:	4603      	mov	r3, r0
    f936:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    f938:	4a10      	ldr	r2, [pc, #64]	; (f97c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    f93a:	9b01      	ldr	r3, [sp, #4]
    f93c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f940:	2b00      	cmp	r3, #0
    f942:	d10d      	bne.n	f960 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f944:	f7f1 f896 	bl	a74 <Port_schm_read_msr>
    f948:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f94a:	9b00      	ldr	r3, [sp, #0]
    f94c:	f003 0301 	and.w	r3, r3, #1
    f950:	2b00      	cmp	r3, #0
    f952:	d100      	bne.n	f956 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f954:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    f956:	490a      	ldr	r1, [pc, #40]	; (f980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    f958:	9b01      	ldr	r3, [sp, #4]
    f95a:	9a00      	ldr	r2, [sp, #0]
    f95c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    f960:	4a06      	ldr	r2, [pc, #24]	; (f97c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    f962:	9b01      	ldr	r3, [sp, #4]
    f964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f968:	1c5a      	adds	r2, r3, #1
    f96a:	4904      	ldr	r1, [pc, #16]	; (f97c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    f96c:	9b01      	ldr	r3, [sp, #4]
    f96e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f972:	bf00      	nop
    f974:	b003      	add	sp, #12
    f976:	f85d fb04 	ldr.w	pc, [sp], #4
    f97a:	bf00      	nop
    f97c:	1fff917c 	.word	0x1fff917c
    f980:	1fff9178 	.word	0x1fff9178

0000f984 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    f984:	b500      	push	{lr}
    f986:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f988:	f7f1 f944 	bl	c14 <Sys_GetCoreID>
    f98c:	4603      	mov	r3, r0
    f98e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    f990:	4a0d      	ldr	r2, [pc, #52]	; (f9c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    f992:	9b01      	ldr	r3, [sp, #4]
    f994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f998:	1e5a      	subs	r2, r3, #1
    f99a:	490b      	ldr	r1, [pc, #44]	; (f9c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    f99c:	9b01      	ldr	r3, [sp, #4]
    f99e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    f9a2:	4a0a      	ldr	r2, [pc, #40]	; (f9cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    f9a4:	9b01      	ldr	r3, [sp, #4]
    f9a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9aa:	f003 0301 	and.w	r3, r3, #1
    f9ae:	2b00      	cmp	r3, #0
    f9b0:	d106      	bne.n	f9c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    f9b2:	4a05      	ldr	r2, [pc, #20]	; (f9c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    f9b4:	9b01      	ldr	r3, [sp, #4]
    f9b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9ba:	2b00      	cmp	r3, #0
    f9bc:	d100      	bne.n	f9c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f9be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f9c0:	bf00      	nop
    f9c2:	b003      	add	sp, #12
    f9c4:	f85d fb04 	ldr.w	pc, [sp], #4
    f9c8:	1fff917c 	.word	0x1fff917c
    f9cc:	1fff9178 	.word	0x1fff9178

0000f9d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    f9d0:	b500      	push	{lr}
    f9d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f9d4:	f7f1 f91e 	bl	c14 <Sys_GetCoreID>
    f9d8:	4603      	mov	r3, r0
    f9da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    f9dc:	4a10      	ldr	r2, [pc, #64]	; (fa20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    f9de:	9b01      	ldr	r3, [sp, #4]
    f9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9e4:	2b00      	cmp	r3, #0
    f9e6:	d10d      	bne.n	fa04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f9e8:	f7f1 f844 	bl	a74 <Port_schm_read_msr>
    f9ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f9ee:	9b00      	ldr	r3, [sp, #0]
    f9f0:	f003 0301 	and.w	r3, r3, #1
    f9f4:	2b00      	cmp	r3, #0
    f9f6:	d100      	bne.n	f9fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f9f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    f9fa:	490a      	ldr	r1, [pc, #40]	; (fa24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    f9fc:	9b01      	ldr	r3, [sp, #4]
    f9fe:	9a00      	ldr	r2, [sp, #0]
    fa00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    fa04:	4a06      	ldr	r2, [pc, #24]	; (fa20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    fa06:	9b01      	ldr	r3, [sp, #4]
    fa08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa0c:	1c5a      	adds	r2, r3, #1
    fa0e:	4904      	ldr	r1, [pc, #16]	; (fa20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    fa10:	9b01      	ldr	r3, [sp, #4]
    fa12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fa16:	bf00      	nop
    fa18:	b003      	add	sp, #12
    fa1a:	f85d fb04 	ldr.w	pc, [sp], #4
    fa1e:	bf00      	nop
    fa20:	1fff9184 	.word	0x1fff9184
    fa24:	1fff9180 	.word	0x1fff9180

0000fa28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    fa28:	b500      	push	{lr}
    fa2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa2c:	f7f1 f8f2 	bl	c14 <Sys_GetCoreID>
    fa30:	4603      	mov	r3, r0
    fa32:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    fa34:	4a0d      	ldr	r2, [pc, #52]	; (fa6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    fa36:	9b01      	ldr	r3, [sp, #4]
    fa38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa3c:	1e5a      	subs	r2, r3, #1
    fa3e:	490b      	ldr	r1, [pc, #44]	; (fa6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    fa40:	9b01      	ldr	r3, [sp, #4]
    fa42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    fa46:	4a0a      	ldr	r2, [pc, #40]	; (fa70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    fa48:	9b01      	ldr	r3, [sp, #4]
    fa4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa4e:	f003 0301 	and.w	r3, r3, #1
    fa52:	2b00      	cmp	r3, #0
    fa54:	d106      	bne.n	fa64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    fa56:	4a05      	ldr	r2, [pc, #20]	; (fa6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    fa58:	9b01      	ldr	r3, [sp, #4]
    fa5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa5e:	2b00      	cmp	r3, #0
    fa60:	d100      	bne.n	fa64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fa62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fa64:	bf00      	nop
    fa66:	b003      	add	sp, #12
    fa68:	f85d fb04 	ldr.w	pc, [sp], #4
    fa6c:	1fff9184 	.word	0x1fff9184
    fa70:	1fff9180 	.word	0x1fff9180

0000fa74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    fa74:	b500      	push	{lr}
    fa76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa78:	f7f1 f8cc 	bl	c14 <Sys_GetCoreID>
    fa7c:	4603      	mov	r3, r0
    fa7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    fa80:	4a10      	ldr	r2, [pc, #64]	; (fac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    fa82:	9b01      	ldr	r3, [sp, #4]
    fa84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa88:	2b00      	cmp	r3, #0
    fa8a:	d10d      	bne.n	faa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fa8c:	f7f0 fff2 	bl	a74 <Port_schm_read_msr>
    fa90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fa92:	9b00      	ldr	r3, [sp, #0]
    fa94:	f003 0301 	and.w	r3, r3, #1
    fa98:	2b00      	cmp	r3, #0
    fa9a:	d100      	bne.n	fa9e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fa9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    fa9e:	490a      	ldr	r1, [pc, #40]	; (fac8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    faa0:	9b01      	ldr	r3, [sp, #4]
    faa2:	9a00      	ldr	r2, [sp, #0]
    faa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    faa8:	4a06      	ldr	r2, [pc, #24]	; (fac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    faaa:	9b01      	ldr	r3, [sp, #4]
    faac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fab0:	1c5a      	adds	r2, r3, #1
    fab2:	4904      	ldr	r1, [pc, #16]	; (fac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    fab4:	9b01      	ldr	r3, [sp, #4]
    fab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    faba:	bf00      	nop
    fabc:	b003      	add	sp, #12
    fabe:	f85d fb04 	ldr.w	pc, [sp], #4
    fac2:	bf00      	nop
    fac4:	1fff918c 	.word	0x1fff918c
    fac8:	1fff9188 	.word	0x1fff9188

0000facc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    facc:	b500      	push	{lr}
    face:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fad0:	f7f1 f8a0 	bl	c14 <Sys_GetCoreID>
    fad4:	4603      	mov	r3, r0
    fad6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    fad8:	4a0d      	ldr	r2, [pc, #52]	; (fb10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    fada:	9b01      	ldr	r3, [sp, #4]
    fadc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fae0:	1e5a      	subs	r2, r3, #1
    fae2:	490b      	ldr	r1, [pc, #44]	; (fb10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    fae4:	9b01      	ldr	r3, [sp, #4]
    fae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    faea:	4a0a      	ldr	r2, [pc, #40]	; (fb14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    faec:	9b01      	ldr	r3, [sp, #4]
    faee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    faf2:	f003 0301 	and.w	r3, r3, #1
    faf6:	2b00      	cmp	r3, #0
    faf8:	d106      	bne.n	fb08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    fafa:	4a05      	ldr	r2, [pc, #20]	; (fb10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    fafc:	9b01      	ldr	r3, [sp, #4]
    fafe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb02:	2b00      	cmp	r3, #0
    fb04:	d100      	bne.n	fb08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fb06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fb08:	bf00      	nop
    fb0a:	b003      	add	sp, #12
    fb0c:	f85d fb04 	ldr.w	pc, [sp], #4
    fb10:	1fff918c 	.word	0x1fff918c
    fb14:	1fff9188 	.word	0x1fff9188

0000fb18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    fb18:	b500      	push	{lr}
    fb1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb1c:	f7f1 f87a 	bl	c14 <Sys_GetCoreID>
    fb20:	4603      	mov	r3, r0
    fb22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    fb24:	4a10      	ldr	r2, [pc, #64]	; (fb68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    fb26:	9b01      	ldr	r3, [sp, #4]
    fb28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb2c:	2b00      	cmp	r3, #0
    fb2e:	d10d      	bne.n	fb4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fb30:	f7f0 ffa0 	bl	a74 <Port_schm_read_msr>
    fb34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fb36:	9b00      	ldr	r3, [sp, #0]
    fb38:	f003 0301 	and.w	r3, r3, #1
    fb3c:	2b00      	cmp	r3, #0
    fb3e:	d100      	bne.n	fb42 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fb40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    fb42:	490a      	ldr	r1, [pc, #40]	; (fb6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    fb44:	9b01      	ldr	r3, [sp, #4]
    fb46:	9a00      	ldr	r2, [sp, #0]
    fb48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    fb4c:	4a06      	ldr	r2, [pc, #24]	; (fb68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    fb4e:	9b01      	ldr	r3, [sp, #4]
    fb50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb54:	1c5a      	adds	r2, r3, #1
    fb56:	4904      	ldr	r1, [pc, #16]	; (fb68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    fb58:	9b01      	ldr	r3, [sp, #4]
    fb5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fb5e:	bf00      	nop
    fb60:	b003      	add	sp, #12
    fb62:	f85d fb04 	ldr.w	pc, [sp], #4
    fb66:	bf00      	nop
    fb68:	1fff9194 	.word	0x1fff9194
    fb6c:	1fff9190 	.word	0x1fff9190

0000fb70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    fb70:	b500      	push	{lr}
    fb72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb74:	f7f1 f84e 	bl	c14 <Sys_GetCoreID>
    fb78:	4603      	mov	r3, r0
    fb7a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    fb7c:	4a0d      	ldr	r2, [pc, #52]	; (fbb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    fb7e:	9b01      	ldr	r3, [sp, #4]
    fb80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb84:	1e5a      	subs	r2, r3, #1
    fb86:	490b      	ldr	r1, [pc, #44]	; (fbb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    fb88:	9b01      	ldr	r3, [sp, #4]
    fb8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    fb8e:	4a0a      	ldr	r2, [pc, #40]	; (fbb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    fb90:	9b01      	ldr	r3, [sp, #4]
    fb92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb96:	f003 0301 	and.w	r3, r3, #1
    fb9a:	2b00      	cmp	r3, #0
    fb9c:	d106      	bne.n	fbac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    fb9e:	4a05      	ldr	r2, [pc, #20]	; (fbb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    fba0:	9b01      	ldr	r3, [sp, #4]
    fba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fba6:	2b00      	cmp	r3, #0
    fba8:	d100      	bne.n	fbac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fbaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fbac:	bf00      	nop
    fbae:	b003      	add	sp, #12
    fbb0:	f85d fb04 	ldr.w	pc, [sp], #4
    fbb4:	1fff9194 	.word	0x1fff9194
    fbb8:	1fff9190 	.word	0x1fff9190

0000fbbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    fbbc:	b500      	push	{lr}
    fbbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fbc0:	f7f1 f828 	bl	c14 <Sys_GetCoreID>
    fbc4:	4603      	mov	r3, r0
    fbc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    fbc8:	4a10      	ldr	r2, [pc, #64]	; (fc0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    fbca:	9b01      	ldr	r3, [sp, #4]
    fbcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbd0:	2b00      	cmp	r3, #0
    fbd2:	d10d      	bne.n	fbf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fbd4:	f7f0 ff4e 	bl	a74 <Port_schm_read_msr>
    fbd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fbda:	9b00      	ldr	r3, [sp, #0]
    fbdc:	f003 0301 	and.w	r3, r3, #1
    fbe0:	2b00      	cmp	r3, #0
    fbe2:	d100      	bne.n	fbe6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fbe4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    fbe6:	490a      	ldr	r1, [pc, #40]	; (fc10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    fbe8:	9b01      	ldr	r3, [sp, #4]
    fbea:	9a00      	ldr	r2, [sp, #0]
    fbec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    fbf0:	4a06      	ldr	r2, [pc, #24]	; (fc0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    fbf2:	9b01      	ldr	r3, [sp, #4]
    fbf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbf8:	1c5a      	adds	r2, r3, #1
    fbfa:	4904      	ldr	r1, [pc, #16]	; (fc0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    fbfc:	9b01      	ldr	r3, [sp, #4]
    fbfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fc02:	bf00      	nop
    fc04:	b003      	add	sp, #12
    fc06:	f85d fb04 	ldr.w	pc, [sp], #4
    fc0a:	bf00      	nop
    fc0c:	1fff919c 	.word	0x1fff919c
    fc10:	1fff9198 	.word	0x1fff9198

0000fc14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    fc14:	b500      	push	{lr}
    fc16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc18:	f7f0 fffc 	bl	c14 <Sys_GetCoreID>
    fc1c:	4603      	mov	r3, r0
    fc1e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    fc20:	4a0d      	ldr	r2, [pc, #52]	; (fc58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    fc22:	9b01      	ldr	r3, [sp, #4]
    fc24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc28:	1e5a      	subs	r2, r3, #1
    fc2a:	490b      	ldr	r1, [pc, #44]	; (fc58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    fc2c:	9b01      	ldr	r3, [sp, #4]
    fc2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    fc32:	4a0a      	ldr	r2, [pc, #40]	; (fc5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    fc34:	9b01      	ldr	r3, [sp, #4]
    fc36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc3a:	f003 0301 	and.w	r3, r3, #1
    fc3e:	2b00      	cmp	r3, #0
    fc40:	d106      	bne.n	fc50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    fc42:	4a05      	ldr	r2, [pc, #20]	; (fc58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    fc44:	9b01      	ldr	r3, [sp, #4]
    fc46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc4a:	2b00      	cmp	r3, #0
    fc4c:	d100      	bne.n	fc50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fc4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fc50:	bf00      	nop
    fc52:	b003      	add	sp, #12
    fc54:	f85d fb04 	ldr.w	pc, [sp], #4
    fc58:	1fff919c 	.word	0x1fff919c
    fc5c:	1fff9198 	.word	0x1fff9198

0000fc60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    fc60:	b500      	push	{lr}
    fc62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc64:	f7f0 ffd6 	bl	c14 <Sys_GetCoreID>
    fc68:	4603      	mov	r3, r0
    fc6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    fc6c:	4a10      	ldr	r2, [pc, #64]	; (fcb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    fc6e:	9b01      	ldr	r3, [sp, #4]
    fc70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc74:	2b00      	cmp	r3, #0
    fc76:	d10d      	bne.n	fc94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fc78:	f7f0 fefc 	bl	a74 <Port_schm_read_msr>
    fc7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fc7e:	9b00      	ldr	r3, [sp, #0]
    fc80:	f003 0301 	and.w	r3, r3, #1
    fc84:	2b00      	cmp	r3, #0
    fc86:	d100      	bne.n	fc8a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fc88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    fc8a:	490a      	ldr	r1, [pc, #40]	; (fcb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    fc8c:	9b01      	ldr	r3, [sp, #4]
    fc8e:	9a00      	ldr	r2, [sp, #0]
    fc90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    fc94:	4a06      	ldr	r2, [pc, #24]	; (fcb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    fc96:	9b01      	ldr	r3, [sp, #4]
    fc98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc9c:	1c5a      	adds	r2, r3, #1
    fc9e:	4904      	ldr	r1, [pc, #16]	; (fcb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    fca0:	9b01      	ldr	r3, [sp, #4]
    fca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fca6:	bf00      	nop
    fca8:	b003      	add	sp, #12
    fcaa:	f85d fb04 	ldr.w	pc, [sp], #4
    fcae:	bf00      	nop
    fcb0:	1fff91a4 	.word	0x1fff91a4
    fcb4:	1fff91a0 	.word	0x1fff91a0

0000fcb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    fcb8:	b500      	push	{lr}
    fcba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fcbc:	f7f0 ffaa 	bl	c14 <Sys_GetCoreID>
    fcc0:	4603      	mov	r3, r0
    fcc2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    fcc4:	4a0d      	ldr	r2, [pc, #52]	; (fcfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    fcc6:	9b01      	ldr	r3, [sp, #4]
    fcc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fccc:	1e5a      	subs	r2, r3, #1
    fcce:	490b      	ldr	r1, [pc, #44]	; (fcfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    fcd0:	9b01      	ldr	r3, [sp, #4]
    fcd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    fcd6:	4a0a      	ldr	r2, [pc, #40]	; (fd00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    fcd8:	9b01      	ldr	r3, [sp, #4]
    fcda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcde:	f003 0301 	and.w	r3, r3, #1
    fce2:	2b00      	cmp	r3, #0
    fce4:	d106      	bne.n	fcf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    fce6:	4a05      	ldr	r2, [pc, #20]	; (fcfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    fce8:	9b01      	ldr	r3, [sp, #4]
    fcea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcee:	2b00      	cmp	r3, #0
    fcf0:	d100      	bne.n	fcf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fcf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fcf4:	bf00      	nop
    fcf6:	b003      	add	sp, #12
    fcf8:	f85d fb04 	ldr.w	pc, [sp], #4
    fcfc:	1fff91a4 	.word	0x1fff91a4
    fd00:	1fff91a0 	.word	0x1fff91a0

0000fd04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    fd04:	b500      	push	{lr}
    fd06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd08:	f7f0 ff84 	bl	c14 <Sys_GetCoreID>
    fd0c:	4603      	mov	r3, r0
    fd0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    fd10:	4a10      	ldr	r2, [pc, #64]	; (fd54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    fd12:	9b01      	ldr	r3, [sp, #4]
    fd14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd18:	2b00      	cmp	r3, #0
    fd1a:	d10d      	bne.n	fd38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fd1c:	f7f0 feaa 	bl	a74 <Port_schm_read_msr>
    fd20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fd22:	9b00      	ldr	r3, [sp, #0]
    fd24:	f003 0301 	and.w	r3, r3, #1
    fd28:	2b00      	cmp	r3, #0
    fd2a:	d100      	bne.n	fd2e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fd2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    fd2e:	490a      	ldr	r1, [pc, #40]	; (fd58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    fd30:	9b01      	ldr	r3, [sp, #4]
    fd32:	9a00      	ldr	r2, [sp, #0]
    fd34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    fd38:	4a06      	ldr	r2, [pc, #24]	; (fd54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    fd3a:	9b01      	ldr	r3, [sp, #4]
    fd3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd40:	1c5a      	adds	r2, r3, #1
    fd42:	4904      	ldr	r1, [pc, #16]	; (fd54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    fd44:	9b01      	ldr	r3, [sp, #4]
    fd46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fd4a:	bf00      	nop
    fd4c:	b003      	add	sp, #12
    fd4e:	f85d fb04 	ldr.w	pc, [sp], #4
    fd52:	bf00      	nop
    fd54:	1fff91ac 	.word	0x1fff91ac
    fd58:	1fff91a8 	.word	0x1fff91a8

0000fd5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    fd5c:	b500      	push	{lr}
    fd5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd60:	f7f0 ff58 	bl	c14 <Sys_GetCoreID>
    fd64:	4603      	mov	r3, r0
    fd66:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    fd68:	4a0d      	ldr	r2, [pc, #52]	; (fda0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    fd6a:	9b01      	ldr	r3, [sp, #4]
    fd6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd70:	1e5a      	subs	r2, r3, #1
    fd72:	490b      	ldr	r1, [pc, #44]	; (fda0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    fd74:	9b01      	ldr	r3, [sp, #4]
    fd76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    fd7a:	4a0a      	ldr	r2, [pc, #40]	; (fda4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    fd7c:	9b01      	ldr	r3, [sp, #4]
    fd7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd82:	f003 0301 	and.w	r3, r3, #1
    fd86:	2b00      	cmp	r3, #0
    fd88:	d106      	bne.n	fd98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    fd8a:	4a05      	ldr	r2, [pc, #20]	; (fda0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    fd8c:	9b01      	ldr	r3, [sp, #4]
    fd8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd92:	2b00      	cmp	r3, #0
    fd94:	d100      	bne.n	fd98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fd96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fd98:	bf00      	nop
    fd9a:	b003      	add	sp, #12
    fd9c:	f85d fb04 	ldr.w	pc, [sp], #4
    fda0:	1fff91ac 	.word	0x1fff91ac
    fda4:	1fff91a8 	.word	0x1fff91a8

0000fda8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    fda8:	b500      	push	{lr}
    fdaa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fdac:	f7f0 ff32 	bl	c14 <Sys_GetCoreID>
    fdb0:	4603      	mov	r3, r0
    fdb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    fdb4:	4a10      	ldr	r2, [pc, #64]	; (fdf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    fdb6:	9b01      	ldr	r3, [sp, #4]
    fdb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdbc:	2b00      	cmp	r3, #0
    fdbe:	d10d      	bne.n	fddc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fdc0:	f7f0 fe58 	bl	a74 <Port_schm_read_msr>
    fdc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fdc6:	9b00      	ldr	r3, [sp, #0]
    fdc8:	f003 0301 	and.w	r3, r3, #1
    fdcc:	2b00      	cmp	r3, #0
    fdce:	d100      	bne.n	fdd2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fdd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    fdd2:	490a      	ldr	r1, [pc, #40]	; (fdfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    fdd4:	9b01      	ldr	r3, [sp, #4]
    fdd6:	9a00      	ldr	r2, [sp, #0]
    fdd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    fddc:	4a06      	ldr	r2, [pc, #24]	; (fdf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    fdde:	9b01      	ldr	r3, [sp, #4]
    fde0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fde4:	1c5a      	adds	r2, r3, #1
    fde6:	4904      	ldr	r1, [pc, #16]	; (fdf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    fde8:	9b01      	ldr	r3, [sp, #4]
    fdea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fdee:	bf00      	nop
    fdf0:	b003      	add	sp, #12
    fdf2:	f85d fb04 	ldr.w	pc, [sp], #4
    fdf6:	bf00      	nop
    fdf8:	1fff91b4 	.word	0x1fff91b4
    fdfc:	1fff91b0 	.word	0x1fff91b0

0000fe00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    fe00:	b500      	push	{lr}
    fe02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe04:	f7f0 ff06 	bl	c14 <Sys_GetCoreID>
    fe08:	4603      	mov	r3, r0
    fe0a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    fe0c:	4a0d      	ldr	r2, [pc, #52]	; (fe44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    fe0e:	9b01      	ldr	r3, [sp, #4]
    fe10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe14:	1e5a      	subs	r2, r3, #1
    fe16:	490b      	ldr	r1, [pc, #44]	; (fe44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    fe18:	9b01      	ldr	r3, [sp, #4]
    fe1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    fe1e:	4a0a      	ldr	r2, [pc, #40]	; (fe48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    fe20:	9b01      	ldr	r3, [sp, #4]
    fe22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe26:	f003 0301 	and.w	r3, r3, #1
    fe2a:	2b00      	cmp	r3, #0
    fe2c:	d106      	bne.n	fe3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    fe2e:	4a05      	ldr	r2, [pc, #20]	; (fe44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    fe30:	9b01      	ldr	r3, [sp, #4]
    fe32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe36:	2b00      	cmp	r3, #0
    fe38:	d100      	bne.n	fe3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fe3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe3c:	bf00      	nop
    fe3e:	b003      	add	sp, #12
    fe40:	f85d fb04 	ldr.w	pc, [sp], #4
    fe44:	1fff91b4 	.word	0x1fff91b4
    fe48:	1fff91b0 	.word	0x1fff91b0

0000fe4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    fe4c:	b500      	push	{lr}
    fe4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe50:	f7f0 fee0 	bl	c14 <Sys_GetCoreID>
    fe54:	4603      	mov	r3, r0
    fe56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    fe58:	4a10      	ldr	r2, [pc, #64]	; (fe9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    fe5a:	9b01      	ldr	r3, [sp, #4]
    fe5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe60:	2b00      	cmp	r3, #0
    fe62:	d10d      	bne.n	fe80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe64:	f7f0 fe06 	bl	a74 <Port_schm_read_msr>
    fe68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fe6a:	9b00      	ldr	r3, [sp, #0]
    fe6c:	f003 0301 	and.w	r3, r3, #1
    fe70:	2b00      	cmp	r3, #0
    fe72:	d100      	bne.n	fe76 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    fe76:	490a      	ldr	r1, [pc, #40]	; (fea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    fe78:	9b01      	ldr	r3, [sp, #4]
    fe7a:	9a00      	ldr	r2, [sp, #0]
    fe7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    fe80:	4a06      	ldr	r2, [pc, #24]	; (fe9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    fe82:	9b01      	ldr	r3, [sp, #4]
    fe84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe88:	1c5a      	adds	r2, r3, #1
    fe8a:	4904      	ldr	r1, [pc, #16]	; (fe9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    fe8c:	9b01      	ldr	r3, [sp, #4]
    fe8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fe92:	bf00      	nop
    fe94:	b003      	add	sp, #12
    fe96:	f85d fb04 	ldr.w	pc, [sp], #4
    fe9a:	bf00      	nop
    fe9c:	1fff91bc 	.word	0x1fff91bc
    fea0:	1fff91b8 	.word	0x1fff91b8

0000fea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    fea4:	b500      	push	{lr}
    fea6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fea8:	f7f0 feb4 	bl	c14 <Sys_GetCoreID>
    feac:	4603      	mov	r3, r0
    feae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    feb0:	4a0d      	ldr	r2, [pc, #52]	; (fee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    feb2:	9b01      	ldr	r3, [sp, #4]
    feb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    feb8:	1e5a      	subs	r2, r3, #1
    feba:	490b      	ldr	r1, [pc, #44]	; (fee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    febc:	9b01      	ldr	r3, [sp, #4]
    febe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    fec2:	4a0a      	ldr	r2, [pc, #40]	; (feec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    fec4:	9b01      	ldr	r3, [sp, #4]
    fec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    feca:	f003 0301 	and.w	r3, r3, #1
    fece:	2b00      	cmp	r3, #0
    fed0:	d106      	bne.n	fee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    fed2:	4a05      	ldr	r2, [pc, #20]	; (fee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    fed4:	9b01      	ldr	r3, [sp, #4]
    fed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    feda:	2b00      	cmp	r3, #0
    fedc:	d100      	bne.n	fee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fede:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fee0:	bf00      	nop
    fee2:	b003      	add	sp, #12
    fee4:	f85d fb04 	ldr.w	pc, [sp], #4
    fee8:	1fff91bc 	.word	0x1fff91bc
    feec:	1fff91b8 	.word	0x1fff91b8

0000fef0 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    fef0:	bf00      	nop
    fef2:	4770      	bx	lr

0000fef4 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    fef4:	b510      	push	{r4, lr}
    fef6:	b084      	sub	sp, #16
    fef8:	4604      	mov	r4, r0
    fefa:	4608      	mov	r0, r1
    fefc:	4611      	mov	r1, r2
    fefe:	461a      	mov	r2, r3
    ff00:	4623      	mov	r3, r4
    ff02:	f8ad 3006 	strh.w	r3, [sp, #6]
    ff06:	4603      	mov	r3, r0
    ff08:	f88d 3005 	strb.w	r3, [sp, #5]
    ff0c:	460b      	mov	r3, r1
    ff0e:	f88d 3004 	strb.w	r3, [sp, #4]
    ff12:	4613      	mov	r3, r2
    ff14:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff18:	f7f0 fe7c 	bl	c14 <Sys_GetCoreID>
    ff1c:	4603      	mov	r3, r0
    ff1e:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    ff20:	490d      	ldr	r1, [pc, #52]	; (ff58 <Det_ReportError+0x64>)
    ff22:	9b03      	ldr	r3, [sp, #12]
    ff24:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ff28:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    ff2c:	4a0b      	ldr	r2, [pc, #44]	; (ff5c <Det_ReportError+0x68>)
    ff2e:	9b03      	ldr	r3, [sp, #12]
    ff30:	4413      	add	r3, r2
    ff32:	f89d 2005 	ldrb.w	r2, [sp, #5]
    ff36:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    ff38:	4a09      	ldr	r2, [pc, #36]	; (ff60 <Det_ReportError+0x6c>)
    ff3a:	9b03      	ldr	r3, [sp, #12]
    ff3c:	4413      	add	r3, r2
    ff3e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    ff42:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    ff44:	4a07      	ldr	r2, [pc, #28]	; (ff64 <Det_ReportError+0x70>)
    ff46:	9b03      	ldr	r3, [sp, #12]
    ff48:	4413      	add	r3, r2
    ff4a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ff4e:	701a      	strb	r2, [r3, #0]

    return E_OK;
    ff50:	2300      	movs	r3, #0
}
    ff52:	4618      	mov	r0, r3
    ff54:	b004      	add	sp, #16
    ff56:	bd10      	pop	{r4, pc}
    ff58:	1fff91e8 	.word	0x1fff91e8
    ff5c:	1fff91c0 	.word	0x1fff91c0
    ff60:	1fff91c4 	.word	0x1fff91c4
    ff64:	1fff91c8 	.word	0x1fff91c8

0000ff68 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    ff68:	b510      	push	{r4, lr}
    ff6a:	b084      	sub	sp, #16
    ff6c:	4604      	mov	r4, r0
    ff6e:	4608      	mov	r0, r1
    ff70:	4611      	mov	r1, r2
    ff72:	461a      	mov	r2, r3
    ff74:	4623      	mov	r3, r4
    ff76:	f8ad 3006 	strh.w	r3, [sp, #6]
    ff7a:	4603      	mov	r3, r0
    ff7c:	f88d 3005 	strb.w	r3, [sp, #5]
    ff80:	460b      	mov	r3, r1
    ff82:	f88d 3004 	strb.w	r3, [sp, #4]
    ff86:	4613      	mov	r3, r2
    ff88:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff8c:	f7f0 fe42 	bl	c14 <Sys_GetCoreID>
    ff90:	4603      	mov	r3, r0
    ff92:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    ff94:	490d      	ldr	r1, [pc, #52]	; (ffcc <Det_ReportRuntimeError+0x64>)
    ff96:	9b03      	ldr	r3, [sp, #12]
    ff98:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ff9c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    ffa0:	4a0b      	ldr	r2, [pc, #44]	; (ffd0 <Det_ReportRuntimeError+0x68>)
    ffa2:	9b03      	ldr	r3, [sp, #12]
    ffa4:	4413      	add	r3, r2
    ffa6:	f89d 2005 	ldrb.w	r2, [sp, #5]
    ffaa:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    ffac:	4a09      	ldr	r2, [pc, #36]	; (ffd4 <Det_ReportRuntimeError+0x6c>)
    ffae:	9b03      	ldr	r3, [sp, #12]
    ffb0:	4413      	add	r3, r2
    ffb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
    ffb6:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    ffb8:	4a07      	ldr	r2, [pc, #28]	; (ffd8 <Det_ReportRuntimeError+0x70>)
    ffba:	9b03      	ldr	r3, [sp, #12]
    ffbc:	4413      	add	r3, r2
    ffbe:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ffc2:	701a      	strb	r2, [r3, #0]

    return E_OK;
    ffc4:	2300      	movs	r3, #0
}
    ffc6:	4618      	mov	r0, r3
    ffc8:	b004      	add	sp, #16
    ffca:	bd10      	pop	{r4, pc}
    ffcc:	1fff91ec 	.word	0x1fff91ec
    ffd0:	1fff91cc 	.word	0x1fff91cc
    ffd4:	1fff91d0 	.word	0x1fff91d0
    ffd8:	1fff91d4 	.word	0x1fff91d4

0000ffdc <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    ffdc:	b510      	push	{r4, lr}
    ffde:	b084      	sub	sp, #16
    ffe0:	4604      	mov	r4, r0
    ffe2:	4608      	mov	r0, r1
    ffe4:	4611      	mov	r1, r2
    ffe6:	461a      	mov	r2, r3
    ffe8:	4623      	mov	r3, r4
    ffea:	f8ad 3006 	strh.w	r3, [sp, #6]
    ffee:	4603      	mov	r3, r0
    fff0:	f88d 3005 	strb.w	r3, [sp, #5]
    fff4:	460b      	mov	r3, r1
    fff6:	f88d 3004 	strb.w	r3, [sp, #4]
    fffa:	4613      	mov	r3, r2
    fffc:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10000:	f7f0 fe08 	bl	c14 <Sys_GetCoreID>
   10004:	4603      	mov	r3, r0
   10006:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   10008:	490d      	ldr	r1, [pc, #52]	; (10040 <Det_ReportTransientFault+0x64>)
   1000a:	9b03      	ldr	r3, [sp, #12]
   1000c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   10010:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   10014:	4a0b      	ldr	r2, [pc, #44]	; (10044 <Det_ReportTransientFault+0x68>)
   10016:	9b03      	ldr	r3, [sp, #12]
   10018:	4413      	add	r3, r2
   1001a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1001e:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   10020:	4a09      	ldr	r2, [pc, #36]	; (10048 <Det_ReportTransientFault+0x6c>)
   10022:	9b03      	ldr	r3, [sp, #12]
   10024:	4413      	add	r3, r2
   10026:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1002a:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   1002c:	4a07      	ldr	r2, [pc, #28]	; (1004c <Det_ReportTransientFault+0x70>)
   1002e:	9b03      	ldr	r3, [sp, #12]
   10030:	4413      	add	r3, r2
   10032:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10036:	701a      	strb	r2, [r3, #0]

    return E_OK;
   10038:	2300      	movs	r3, #0
}
   1003a:	4618      	mov	r0, r3
   1003c:	b004      	add	sp, #16
   1003e:	bd10      	pop	{r4, pc}
   10040:	1fff91e4 	.word	0x1fff91e4
   10044:	1fff91d8 	.word	0x1fff91d8
   10048:	1fff91dc 	.word	0x1fff91dc
   1004c:	1fff91e0 	.word	0x1fff91e0

00010050 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   10050:	bf00      	nop
   10052:	4770      	bx	lr

00010054 <Fls_ACEraseRomEnd>:
   10054:	31434441 	.word	0x31434441
   10058:	65766120 	.word	0x65766120
   1005c:	65676172 	.word	0x65676172
   10060:	6c617620 	.word	0x6c617620
   10064:	203a6575 	.word	0x203a6575
   10068:	202c6425 	.word	0x202c6425
   1006c:	32434441 	.word	0x32434441
   10070:	65766120 	.word	0x65766120
   10074:	65676172 	.word	0x65676172
   10078:	6c617620 	.word	0x6c617620
   1007c:	203a6575 	.word	0x203a6575
   10080:	000a6425 	.word	0x000a6425
   10084:	6d726554 	.word	0x6d726554
   10088:	6c616e69 	.word	0x6c616e69
   1008c:	00000000 	.word	0x00000000
   10090:	4c554e28 	.word	0x4c554e28
   10094:	0000294c 	.word	0x0000294c

00010098 <Clock_Ip_au8DividerCallbackIndex>:
   10098:	0e0d0c00 06030201 0a070409 000b0805     ................

000100a8 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

000100b8 <Clock_Ip_au8XoscCallbackIndex>:
   100b8:	00000100 00000000 00000000 00000000     ................

000100c8 <Clock_Ip_au8IrcoscCallbackIndex>:
   100c8:	03020100 00000004 00000000 00000000     ................

000100d8 <Clock_Ip_au8GateCallbackIndex>:
   100d8:	06010200 01040301 00000500 00000000     ................

000100e8 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

000100f8 <Clock_Ip_au8PllCallbackIndex>:
   100f8:	00000100 00000000 00000000 00000000     ................

00010108 <Clock_Ip_au8SelectorCallbackIndex>:
   10108:	0a090800 03020109 07060504 00000000     ................

00010118 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00010128 <Clock_Ip_au8CmuCallbackIndex>:
	...

00010138 <Clock_Ip_au8ClockFeatures>:
	...
   10148:	01000000 00000000 00000000 00000002     ................
   10158:	00000000 00000300 00000000 00040000     ................
   10168:	00000000 05000000 00000000 00000000     ................
   10178:	00000006 00000000 00000100 00000000     ................
   10188:	00010000 00000000 04000000 00000000     ................
   10198:	00000000 00000005 00000001 00000401     ................
   101a8:	00000200 00050100 00030000 04020000     ................
   101b8:	04000000 02000000 00000005 00000005     ................
   101c8:	00000403 00000600 00050300 00070000     ................
   101d8:	05000000 00000000 00000000 00000006     ................
	...
   10218:	00050000 00000000 06000000 00000100     ................
   10228:	00000000 00030007 00000000 00000000     ................
   10238:	00000000 00060000 00000000 07000000     ................
   10248:	00000100 00000000 00030008 00000000     ................
	...
   10260:	00090000 00000000 0a000000 00000100     ................
   10270:	00000000 0003000b 00000000 00000000     ................
   10280:	00000000 000c0000 00000000 0d000000     ................
   10290:	00000100 00000000 0003000e 00000000     ................
   102a0:	00000800 00000000 00090000 00000000     ................
   102b0:	0a000000 00000000 00000000 0000000b     ................
   102c0:	00000000 00000b01 00000000 000b0200     ................
   102d0:	00000000 0b030000 00000000 00000000     ................
	...
   102e8:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   102f8:	01000000 00000000 00000000 00000007     ................
   10308:	00007300 00000700 00320000 00090000     .s........2.....
   10318:	02000000 07000000 00000000 00000021     ............!...
   10328:	00000009 00000400 00000900 00030000     ................
   10338:	00070000 61000000 07000000 00000000     .......a........
   10348:	00000024 00000007 00002500 00000700     $........%......
   10358:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   10368:	00000000 00000020 38000004 00003800     .... ......8.8..
   10378:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   10388:	04000000 00260000 00000026 66000004     ......&.&......f
   10398:	00006600 00000400 00370037 00040000     .f......7.7.....
   103a8:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   103b8:	2e000004 00002e00 00000200 00404040     ............@@@.
   103c8:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   103d8:	0000006b 6c000004 00006c00 00000900     k......l.l......
   103e8:	00010000 00090000 00000000 07000000     ................
   103f8:	00000000 00000036 00000007 00003100     ....6........1..
   10408:	00000700 00490000 00070000 4a000000     ......I........J
   10418:	07000000 00000000 0000004b 00000007     ........K.......
   10428:	00004c00 00000700 004d0000 00070000     .L........M.....
   10438:	3d000000 03000000 00000000 00000000     ...=............

00010448 <Clock_Ip_au16SelectorEntryHardwareValue>:
   10448:	01010a03 01010001 04040002 02000603     ................
   10458:	00010810 02020100 00000000 00000007     ................
   10468:	00000009 00000000 00000c0e 00000000     ................
	...

000104a0 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   104a0:	00020000 00000300 00000601 00000000     ................
	...

000104d0 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   104d0:	00000700 00000000 02020000 01010303     ................
   104e0:	03020606 00000000 00000000 00000000     ................
	...

00010500 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   10500:	00000001 00000000 02020000 01010303     ................
   10510:	03020606 00000000 00000000 00000000     ................
	...

00010530 <Clock_Ip_au8DividerValueHardwareValue>:
   10530:	00020100 00000003 00000004 00000000     ................
   10540:	00000005 00000000 00000000 00000000     ................
   10550:	00000006 00000000 00000000 00000000     ................
	...
   10570:	00000007                                ....

00010574 <Clock_Ip_apxScgPeriphAsyncDivs>:
   10574:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00010584 <Clock_Ip_aeSourceTypeClockName>:
   10584:	00000000 00000001 00000001 00000001     ................
   10594:	00000001 00000001 00000001 00000001     ................
   105a4:	00000002 00000003 00000001 00000001     ................
   105b4:	00000001 00000001 00000002 00000002     ................
   105c4:	00000003 00000003 00000001 00000001     ................
   105d4:	00000004 00000004 00000004 00000004     ................
	...

00010640 <Clock_Ip_aeHwPllName>:
   10640:	00000009                                ....

00010644 <Clock_Ip_aeHwDfsName>:
   10644:	00000057                                W...

00010648 <Clock_Ip_axDividerCallbacks>:
   10648:	00002c55 00002c5f 00002c79 00002c93     U,.._,..y,...,..
   10658:	00002cad 00002cc7 00002ce1 00002cfb     .,...,...,...,..
   10668:	00002d15 00002d2f 00002d49 00002d63     .-../-..I-..c-..
   10678:	00002d7d 00002d97 00002db1              }-...-...-..

00010684 <Clock_Ip_axDividerTriggerCallbacks>:
   10684:	00003125 00003125                       %1..%1..

0001068c <Clock_Ip_axExtOscCallbacks>:
   1068c:	00003131 00003131 00003131 0000313b     11..11..11..;1..
   1069c:	00003131 00003145 0000315f 00003179     11..E1.._1..y1..
   106ac:	000031fd 00003211                       .1...2..

000106b4 <Clock_Ip_axFracDivCallbacks>:
   106b4:	000033d1 000033d1 000033db              .3...3...3..

000106c0 <Clock_Ip_axGateCallbacks>:
   106c0:	000033f5 000033ff 000034ff 00003519     .3...3...4...5..
   106d0:	000034af 000034c9 0000345f 00003479     .4...4.._4..y4..
   106e0:	0000340f 00003429 0000354f 00003569     .4..)4..O5..i5..
   106f0:	0000359f 000035b9                       .5...5..

000106f8 <Clock_Ip_axIntOscCallbacks>:
   106f8:	00003765 00003765 0000376f 00003779     e7..e7..o7..y7..
   10708:	00003793 000037ad 000037c1 000037db     .7...7...7...7..
   10718:	000037f5 00003809 00003823 0000383d     .7...8..#8..=8..
   10728:	000038e5 000038ff 00003919              .8...8...9..

00010734 <Clock_Ip_axCmuCallbacks>:
   10734:	00003eb5 00003ebf 00003ecb 00003eb5     .>...>...>...>..

00010744 <Clock_Ip_axPllCallbacks>:
   10744:	00003ed5 00003ed5 00003edf 00003ed5     .>...>...>...>..
   10754:	00003eeb 00003ef5 00003f0f 00003f29     .>...>...?..)?..
   10764:	00003fcd 00003fb9                       .?...?..

0001076c <Clock_Ip_axPcfsCallbacks>:
   1076c:	00004129                                )A..

00010770 <Clock_Ip_axSelectorCallbacks>:
   10770:	00004135 00004135 0000413f 00004159     5A..5A..?A..YA..
   10780:	00004135 00004173 0000418d 000041a7     5A..sA...A...A..
   10790:	000041c1 000041db 000041f5 0000420f     .A...A...A...B..
   107a0:	00004229 00004243 0000425d 00004277     )B..CB..]B..wB..
   107b0:	00004291 000042ab 000042c5 000042df     .B...B...B...B..
   107c0:	000042f9 00004313                       .B...C..

000107c8 <ClockSource>:
   107c8:	00000000 00000008 00000002 00000005     ................
	...
   107e0:	00000009                                ....

000107e4 <ResetReasonArray>:
   107e4:	00000000 00000001 00000002 00000003     ................
   107f4:	00000004 00000005 00000006 00000007     ................
   10804:	00000008 00000009 0000000a 0000000b     ................
   10814:	0000000c 0000000d 0000000e              ............

00010820 <Port_au32PortCiPortBaseAddr>:
   10820:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   10830:	4004d000                                ...@

00010834 <Port_au32PortCiGpioBaseAddr>:
   10834:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   10844:	400ff100                                ...@

00010848 <Adc_Ip_apxBase>:
   10848:	4003b000 40027000                       ...@.p.@

00010850 <Pdb_Adc_Ip_apxBase>:
   10850:	40036000 40031000                       .`.@...@

00010858 <AdcIpChansConfig_0>:
   10858:	00000000 00000005 00000000 00000001     ................
   10868:	00000008 00000000                       ........

00010870 <AdcIpConfig_0>:
   10870:	00000000 00000003 00000000 0000000c     ................
	...
   10888:	00000001 00000000 00000000 00000000     ................
   10898:	00ff0000 00000000 00000000 00010858     ............X...
   108a8:	0000a285                                ....

000108ac <AdcIpwCfg>:
   108ac:	00010870 00000000 00010d74 00000000     p.......t.......
   108bc:	ff01ff00 00000001 00000002 0001ffff     ................
   108cc:	0000ff00                                ....

000108d0 <AdcIpwGroupConfig_0>:
	...
   108d8:	000000c8 00010000 00000000              ............

000108e4 <Adc_Group0_Assignment_0>:
   108e4:	00010000                                ....

000108e8 <Adc_GroupsCfg>:
	...
   10904:	00000001 000108e4 00080002 00000005     ................
   10914:	00000000 000108d0                       ........

0001091c <Adc_au16GroupIdToIndexMap>:
   1091c:	00000000                                ....

00010920 <Adc_Partition_Assignment>:
   10920:	00000000                                ....

00010924 <Adc_Config>:
   10924:	000108ac 000108e8 00000001 0001091c     ................
   10934:	00000000 00010920 00000001              .... .......

00010940 <Mcu_aClockConfigPB>:
	...
   10948:	1c000101 04000010 01000029 00000005     ........).......
   10958:	00000001 00000000 00000057 00000000     ........W.......
   10968:	00000000 00000008 007a1200 00000001     ..........z.....
   10978:	00000001 00000000 00000057 00000000     ........W.......
   10988:	00000057 00000000 00000000 00000000     W...............
	...
   109a8:	00000019 00000005 0000001a 00000002     ................
   109b8:	0000001b 00000005 0000002a 00000005     ........*.......
   109c8:	00000028 0000000e 00000029 00000001     (.......).......
   109d8:	00000056 0000001c 00000032 0000002a     V.......2...*...
   109e8:	0000002b 00000014 0000002c 00000014     +.......,.......
   109f8:	0000002d 00000014 0000002e 00000014     -...............
   10a08:	0000003f 00000000 00000040 00000000     ?.......@.......
   10a18:	00000041 00000000 00000042 00000000     A.......B.......
   10a28:	00000031 00000000 00000045 00000000     1.......E.......
   10a38:	00000046 00000000 00000047 00000000     F.......G.......
   10a48:	00000044 00000000 00000030 0000000d     D.......0.......
   10a58:	0000003d 00000000 00000043 00000000     =.......C.......
   10a68:	00000049 00000000 0000004a 00000000     I.......J.......
   10a78:	0000004b 00000000 00000048 00000000     K.......H.......
   10a88:	0000000c 00000001 00000000 0000000d     ................
   10a98:	00000002 00000000 0000000e 00000001     ................
   10aa8:	00000000 0000000f 00000001 00000000     ................
   10ab8:	0000001d 00000001 00000000 0000001e     ................
   10ac8:	00000008 00000000 0000001f 00000001     ................
   10ad8:	00000000 00000021 00000001 00000000     ....!...........
   10ae8:	00000022 00000002 00000000 00000023     "...........#...
   10af8:	00000001 00000000 00000025 00000003     ........%.......
   10b08:	00000000 00000026 00000004 00000000     ....&...........
   10b18:	00000027 00000002 00000000 00000032     '...........2...
   10b28:	00000001 00000000 00000048 00000001     ........H.......
   10b38:	00000001 00000056 00000001 00000001     ....V...........
   10b48:	00000057 00000000 00000000 00000057     W...........W...
	...
   10b60:	00000057 00000000 00000000 00000057     W...........W...
	...
   10b78:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   10b94:	00000014 00007d00 00000015 00007d00     .....}.......}..
   10ba4:	00000016 00007d00 00000017 00008000     .....}..........
   10bb4:	00000012 00000001 00000013 00000001     ................
   10bc4:	00000030 00000001 00000031 00000000     0.......1.......
   10bd4:	00000032 00000000 00000033 00000000     2.......3.......
   10be4:	00000034 00000000 00000035 00000001     4.......5.......
   10bf4:	00000036 00000000 00000037 00000001     6.......7.......
   10c04:	00000038 00000001 00000039 00000000     8.......9.......
   10c14:	0000003a 00000000 0000003b 00000000     :.......;.......
   10c24:	0000003c 00000000 0000003d 00000000     <.......=.......
   10c34:	0000003e 00000000 0000003f 00000000     >.......?.......
   10c44:	00000040 00000000 00000041 00000000     @.......A.......
   10c54:	00000042 00000000 00000043 00000000     B.......C.......
   10c64:	00000044 00000000 00000045 00000000     D.......E.......
   10c74:	00000046 00000000 00000047 00000000     F.......G.......
   10c84:	00000048 00000000 00000049 00000000     H.......I.......
   10c94:	0000004a 00000000 0000004b 00000000     J.......K.......
   10ca4:	0000004c 00000001 0000004d 00000001     L.......M.......
   10cb4:	0000004e 00000001 0000004f 00000000     N.......O.......
   10cc4:	00000050 00000001 00000051 00000001     P.......Q.......
   10cd4:	00000052 00000001 00000053 00000001     R.......S.......
   10ce4:	00000054 00000001 00000055 00000000     T.......U.......
   10cf4:	00000056 00000001 00000057 00000000     V.......W.......
   10d04:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00010d38 <aIrqConfiguration>:
   10d38:	00000027 00000f01 00008bc9              '...........

00010d44 <intCtrlConfig>:
   10d44:	00000001 00010d38                       ....8...

00010d4c <Mcu_Config>:
   10d4c:	0000005a 00000000 00000001 00000001     Z...............
   10d5c:	00010f0c 00010940 00010f18              ....@.......

00010d68 <OsIf_xPredefinedConfig>:
   10d68:	00000000 02dc6c00                       .....l..

00010d70 <OsIf_apxPredefinedConfig>:
   10d70:	00010d68                                h...

00010d74 <PdbAdcIpConfig_0>:
	...
   10d80:	0000000f ffff0000 00000000 00000000     ................
   10d90:	00000000                                ....

00010d94 <Platform_uConfiguration>:
   10d94:	00010d9c                                ....

00010d98 <Platform_Config>:
   10d98:	00010d94                                ....

00010d9c <ipwConfig>:
   10d9c:	00010d44 00000000                       D.......

00010da4 <g_pin_mux_InitConfigArr>:
   10da4:	4004a000 00000000 00000001 00000002     ...@............
   10db4:	00000000 00000002 00000000 00000000     ................
	...
   10dcc:	4004a000 00000000 0000000d 00000002     ...@............
   10ddc:	00000000 00000002 00000000 00000000     ................
	...

00010df4 <au8Port_PartitionList>:
   10df4:	00000001                                ....

00010df8 <au32Port_PinToPartitionMap>:
   10df8:	00000001 00000001                       ........

00010e00 <Port_au16NoUnUsedPadsArrayDefault>:
   10e00:	00010000 00030002 00070006 00090008     ................
   10e10:	000c000b 000e000d 0010000f 00200011     .............. .
   10e20:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
   10e30:	002b002a 002e002c 0030002f 00400031     *.+.,.../.0.1.@.
   10e40:	00420041 00460043 00480047 004a0049     A.B.C.F.G.H.I.J.
   10e50:	004c004b 004e004d 0050004f 00600051     K.L.M.N.O.P.Q.`.
   10e60:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   10e70:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   10e80:	00800071 00820081 00840083 00860085     q...............
   10e90:	00880087 008a0089 008c008b 008e008d     ................
   10ea0:	0090008f                                ....

00010ea4 <Port_UnUsedPin>:
   10ea4:	00000100 00000001 00000000              ............

00010eb0 <Port_aPinConfigDefault>:
   10eb0:	00000021 00000000 00000002 00000000     !...............
   10ec0:	00010000 0000002d 00000000 00000002     ....-...........
   10ed0:	00000000 00010000                       ........

00010ed8 <Port_Config>:
   10ed8:	00520002 00010e00 00010ea4 00010eb0     ..R.............
	...
   10ef0:	00010df8 00010df4 00010da4              ............

00010efc <Power_Ip_RCM_ConfigPB>:
	...

00010f04 <Power_Ip_PMC_ConfigPB>:
   10f04:	00000000                                ....

00010f08 <Power_Ip_SMC_ConfigPB>:
   10f08:	00000000                                ....

00010f0c <Power_Ip_aModeConfigPB>:
	...

00010f18 <Power_Ip_HwIPsConfigPB>:
   10f18:	00010efc 00010f04 00010f08              ............

00010f24 <_aInitStr.0>:
   10f24:	00000000 54540000 45522052 53454747     ......TTR REGGES
   10f34:	00000000                                ....

00010f38 <_aV2C.0>:
   10f38:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00010f48 <__INIT_TABLE>:
   10f48:	00000002 	.word	0x00000002
   10f4c:	1fff8b10 	.word	0x1fff8b10
   10f50:	00010f70 	.word	0x00010f70
   10f54:	00010f84 	.word	0x00010f84
   10f58:	1fff8800 	.word	0x1fff8800
   10f5c:	00000000 	.word	0x00000000
   10f60:	00000310 	.word	0x00000310

00010f64 <__ZERO_TABLE>:
   10f64:	00000001 	.word	0x00000001
   10f68:	1fff8b30 	.word	0x1fff8b30
   10f6c:	1fff96b0 	.word	0x1fff96b0
