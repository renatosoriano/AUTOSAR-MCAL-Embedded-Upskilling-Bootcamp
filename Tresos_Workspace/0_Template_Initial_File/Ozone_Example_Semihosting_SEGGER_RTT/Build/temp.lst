
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000adb 	.word	0x00000adb
  10:	00000add 	.word	0x00000add
  14:	00000adf 	.word	0x00000adf
  18:	00000ae1 	.word	0x00000ae1
	...
  2c:	00000ae3 	.word	0x00000ae3
  30:	00000ae5 	.word	0x00000ae5
  34:	00000000 	.word	0x00000000
  38:	00000ae7 	.word	0x00000ae7
  3c:	00000ae9 	.word	0x00000ae9
  40:	00000aeb 	.word	0x00000aeb
  44:	00000aeb 	.word	0x00000aeb
  48:	00000aeb 	.word	0x00000aeb
  4c:	00000aeb 	.word	0x00000aeb
  50:	00000aeb 	.word	0x00000aeb
  54:	00000aeb 	.word	0x00000aeb
  58:	00000aeb 	.word	0x00000aeb
  5c:	00000aeb 	.word	0x00000aeb
  60:	00000aeb 	.word	0x00000aeb
  64:	00000aeb 	.word	0x00000aeb
  68:	00000aeb 	.word	0x00000aeb
  6c:	00000aeb 	.word	0x00000aeb
  70:	00000aeb 	.word	0x00000aeb
  74:	00000aeb 	.word	0x00000aeb
  78:	00000aeb 	.word	0x00000aeb
  7c:	00000aeb 	.word	0x00000aeb
  80:	00000aeb 	.word	0x00000aeb
  84:	00000aeb 	.word	0x00000aeb
  88:	00000aeb 	.word	0x00000aeb
  8c:	00000aeb 	.word	0x00000aeb
  90:	00000aeb 	.word	0x00000aeb
  94:	00000aeb 	.word	0x00000aeb
  98:	00000aeb 	.word	0x00000aeb
  9c:	00000aeb 	.word	0x00000aeb
  a0:	00000aeb 	.word	0x00000aeb
  a4:	00000aeb 	.word	0x00000aeb
  a8:	00000aeb 	.word	0x00000aeb
  ac:	00000aeb 	.word	0x00000aeb
  b0:	00000aeb 	.word	0x00000aeb
  b4:	00000aeb 	.word	0x00000aeb
  b8:	00000aeb 	.word	0x00000aeb
  bc:	00000aeb 	.word	0x00000aeb
  c0:	00000aeb 	.word	0x00000aeb
  c4:	00000aeb 	.word	0x00000aeb
  c8:	00000aeb 	.word	0x00000aeb
  cc:	00000aeb 	.word	0x00000aeb
  d0:	00000aeb 	.word	0x00000aeb
  d4:	00000aeb 	.word	0x00000aeb
  d8:	00000aeb 	.word	0x00000aeb
  dc:	00000aeb 	.word	0x00000aeb
  e0:	00000aeb 	.word	0x00000aeb
  e4:	00000aeb 	.word	0x00000aeb
  e8:	00000aeb 	.word	0x00000aeb
  ec:	00000aeb 	.word	0x00000aeb
  f0:	00000aeb 	.word	0x00000aeb
  f4:	00000aeb 	.word	0x00000aeb
  f8:	00000aeb 	.word	0x00000aeb
  fc:	00000aeb 	.word	0x00000aeb
 100:	00000aeb 	.word	0x00000aeb
 104:	00000aeb 	.word	0x00000aeb
 108:	00000aeb 	.word	0x00000aeb
 10c:	00000aeb 	.word	0x00000aeb
 110:	00000aeb 	.word	0x00000aeb
 114:	00000aeb 	.word	0x00000aeb
 118:	00000aeb 	.word	0x00000aeb
 11c:	00000aeb 	.word	0x00000aeb
 120:	00000aeb 	.word	0x00000aeb
 124:	00000aeb 	.word	0x00000aeb
 128:	00000aeb 	.word	0x00000aeb
 12c:	00000aeb 	.word	0x00000aeb
 130:	00000aeb 	.word	0x00000aeb
 134:	00000aeb 	.word	0x00000aeb
 138:	00000aeb 	.word	0x00000aeb
 13c:	00000aeb 	.word	0x00000aeb
 140:	00000aeb 	.word	0x00000aeb
 144:	00000aeb 	.word	0x00000aeb
 148:	00000aeb 	.word	0x00000aeb
 14c:	00000aeb 	.word	0x00000aeb
 150:	00000aeb 	.word	0x00000aeb
 154:	00000aeb 	.word	0x00000aeb
 158:	00000aeb 	.word	0x00000aeb
 15c:	00000aeb 	.word	0x00000aeb
 160:	00000aeb 	.word	0x00000aeb
 164:	00000aeb 	.word	0x00000aeb
 168:	00000aeb 	.word	0x00000aeb
 16c:	00000aeb 	.word	0x00000aeb
 170:	00000aeb 	.word	0x00000aeb
 174:	00000aeb 	.word	0x00000aeb
 178:	00000aeb 	.word	0x00000aeb
 17c:	00000aeb 	.word	0x00000aeb
 180:	00000aeb 	.word	0x00000aeb
 184:	00000aeb 	.word	0x00000aeb
 188:	00000aeb 	.word	0x00000aeb
 18c:	00000aeb 	.word	0x00000aeb
 190:	00000aeb 	.word	0x00000aeb
 194:	00000aeb 	.word	0x00000aeb
 198:	00000aeb 	.word	0x00000aeb
 19c:	00000aeb 	.word	0x00000aeb
 1a0:	00000aeb 	.word	0x00000aeb
 1a4:	00000aeb 	.word	0x00000aeb
 1a8:	00000aeb 	.word	0x00000aeb
 1ac:	00000aeb 	.word	0x00000aeb
 1b0:	00000aeb 	.word	0x00000aeb
 1b4:	00000aeb 	.word	0x00000aeb
 1b8:	00000aeb 	.word	0x00000aeb
 1bc:	00000aeb 	.word	0x00000aeb
 1c0:	00000aeb 	.word	0x00000aeb
 1c4:	00000aeb 	.word	0x00000aeb
 1c8:	00000aeb 	.word	0x00000aeb
 1cc:	00000aeb 	.word	0x00000aeb
 1d0:	00000aeb 	.word	0x00000aeb
 1d4:	00000aeb 	.word	0x00000aeb
 1d8:	00000aeb 	.word	0x00000aeb
 1dc:	00000aeb 	.word	0x00000aeb
 1e0:	00000aeb 	.word	0x00000aeb
 1e4:	00000aeb 	.word	0x00000aeb
 1e8:	00000aeb 	.word	0x00000aeb
 1ec:	00000aeb 	.word	0x00000aeb
 1f0:	00000aeb 	.word	0x00000aeb
 1f4:	00000aeb 	.word	0x00000aeb
 1f8:	00000aeb 	.word	0x00000aeb
 1fc:	00000aeb 	.word	0x00000aeb
 200:	00000aeb 	.word	0x00000aeb
 204:	00000aeb 	.word	0x00000aeb
 208:	00000aeb 	.word	0x00000aeb
 20c:	00000aeb 	.word	0x00000aeb
 210:	00000aeb 	.word	0x00000aeb
 214:	00000aeb 	.word	0x00000aeb
 218:	00000aeb 	.word	0x00000aeb
 21c:	00000aeb 	.word	0x00000aeb
 220:	00000aeb 	.word	0x00000aeb
 224:	00000aeb 	.word	0x00000aeb
 228:	00000aeb 	.word	0x00000aeb
 22c:	00000aeb 	.word	0x00000aeb
 230:	00000aeb 	.word	0x00000aeb
 234:	00000aeb 	.word	0x00000aeb
 238:	00000aeb 	.word	0x00000aeb
 23c:	00000aeb 	.word	0x00000aeb
 240:	00000aeb 	.word	0x00000aeb
 244:	00000aeb 	.word	0x00000aeb
 248:	00000aeb 	.word	0x00000aeb
 24c:	00000aeb 	.word	0x00000aeb
 250:	00000aeb 	.word	0x00000aeb
 254:	00000aeb 	.word	0x00000aeb
 258:	00000aeb 	.word	0x00000aeb
 25c:	00000aeb 	.word	0x00000aeb
 260:	00000aeb 	.word	0x00000aeb
 264:	00000aeb 	.word	0x00000aeb
 268:	00000aeb 	.word	0x00000aeb
 26c:	00000aeb 	.word	0x00000aeb
 270:	00000aeb 	.word	0x00000aeb
 274:	00000aeb 	.word	0x00000aeb
 278:	00000aeb 	.word	0x00000aeb
 27c:	00000aeb 	.word	0x00000aeb
 280:	00000aeb 	.word	0x00000aeb
 284:	00000aeb 	.word	0x00000aeb
 288:	00000aeb 	.word	0x00000aeb
 28c:	00000aeb 	.word	0x00000aeb
 290:	00000aeb 	.word	0x00000aeb
 294:	00000aeb 	.word	0x00000aeb
 298:	00000aeb 	.word	0x00000aeb
 29c:	00000aeb 	.word	0x00000aeb
 2a0:	00000aeb 	.word	0x00000aeb
 2a4:	00000aeb 	.word	0x00000aeb
 2a8:	00000aeb 	.word	0x00000aeb
 2ac:	00000aeb 	.word	0x00000aeb
 2b0:	00000aeb 	.word	0x00000aeb
 2b4:	00000aeb 	.word	0x00000aeb
 2b8:	00000aeb 	.word	0x00000aeb
 2bc:	00000aeb 	.word	0x00000aeb
 2c0:	00000aeb 	.word	0x00000aeb
 2c4:	00000aeb 	.word	0x00000aeb
 2c8:	00000aeb 	.word	0x00000aeb
 2cc:	00000aeb 	.word	0x00000aeb
 2d0:	00000aeb 	.word	0x00000aeb
 2d4:	00000aeb 	.word	0x00000aeb
 2d8:	00000aeb 	.word	0x00000aeb
 2dc:	00000aeb 	.word	0x00000aeb
 2e0:	00000aeb 	.word	0x00000aeb
 2e4:	00000aeb 	.word	0x00000aeb
 2e8:	00000aeb 	.word	0x00000aeb
 2ec:	00000aeb 	.word	0x00000aeb
 2f0:	00000aeb 	.word	0x00000aeb
 2f4:	00000aeb 	.word	0x00000aeb
 2f8:	00000aeb 	.word	0x00000aeb
 2fc:	00000aeb 	.word	0x00000aeb
 300:	00000aeb 	.word	0x00000aeb
 304:	00000aeb 	.word	0x00000aeb
 308:	00000aeb 	.word	0x00000aeb
 30c:	00000aeb 	.word	0x00000aeb

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fa61 	bl	948 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb20 	bl	ad0 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff8e00 	.word	0x1fff8e00

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fa6b 	bl	a74 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__BSS_SRAM_SIZE+0xec>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__BSS_SRAM_SIZE+0xec>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__BSS_SRAM_SIZE+0xf0>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__BSS_SRAM_SIZE+0xf0>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__BSS_SRAM_SIZE+0xe6>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0x124>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__BSS_SRAM_SIZE+0x64>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0x11c>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0x116>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__BSS_SRAM_SIZE+0x8>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0x112>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0x112>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__BSS_SRAM_SIZE+0x30>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__BSS_SRAM_SIZE+0x10a>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__BSS_SRAM_SIZE+0x10a>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__BSS_SRAM_SIZE+0xf8>
     7c4:	d056      	beq.n	874 <__BSS_SRAM_SIZE+0xf4>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0x128>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__BSS_SRAM_SIZE+0xb0>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__BSS_SRAM_SIZE+0x10e>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__BSS_SRAM_SIZE+0x10e>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__BSS_SRAM_SIZE+0xde>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__BSS_SRAM_SIZE+0x106>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__BSS_SRAM_SIZE+0x106>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__BSS_SRAM_SIZE+0x46>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__BSS_SRAM_SIZE+0x46>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__BSS_SRAM_SIZE+0xde>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__BSS_SRAM_SIZE+0x30>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__BSS_SRAM_SIZE+0xb0>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__BSS_SRAM_SIZE+0x8>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b500      	push	{lr}
     8b2:	b083      	sub	sp, #12
    EcuM_Init();
     8b4:	f000 f818 	bl	8e8 <EcuM_Init>

    /* Intiliaze RTT library*/
    SEGGER_RTT_Init();
     8b8:	f000 faaa 	bl	e10 <SEGGER_RTT_Init>

    while( 1u )
    {
        Dio_FlipChannel( DioConf_DioChannel_DioChannel_0 );
     8bc:	2060      	movs	r0, #96	; 0x60
     8be:	f005 fd24 	bl	630a <Dio_FlipChannel>
        /* Send a message to Ozone using the Jlink debugger */
        SEGGER_RTT_printf( 0, "Hello World\n" );
     8c2:	4907      	ldr	r1, [pc, #28]	; (8e0 <main+0x30>)
     8c4:	2000      	movs	r0, #0
     8c6:	f000 fe0b 	bl	14e0 <SEGGER_RTT_printf>
        /*dummy delay*/
        for( uint32 i = 0u ; i < 1000000u ; i++ );
     8ca:	2300      	movs	r3, #0
     8cc:	9301      	str	r3, [sp, #4]
     8ce:	e002      	b.n	8d6 <main+0x26>
     8d0:	9b01      	ldr	r3, [sp, #4]
     8d2:	3301      	adds	r3, #1
     8d4:	9301      	str	r3, [sp, #4]
     8d6:	9b01      	ldr	r3, [sp, #4]
     8d8:	4a02      	ldr	r2, [pc, #8]	; (8e4 <main+0x34>)
     8da:	4293      	cmp	r3, r2
     8dc:	d9f8      	bls.n	8d0 <main+0x20>
        Dio_FlipChannel( DioConf_DioChannel_DioChannel_0 );
     8de:	e7ed      	b.n	8bc <main+0xc>
     8e0:	00007bb8 	.word	0x00007bb8
     8e4:	000f423f 	.word	0x000f423f

000008e8 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     8e8:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     8ea:	4807      	ldr	r0, [pc, #28]	; (908 <EcuM_Init+0x20>)
     8ec:	f004 fbcc 	bl	5088 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     8f0:	2000      	movs	r0, #0
     8f2:	f004 fc1d 	bl	5130 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     8f6:	2000      	movs	r0, #0
     8f8:	f004 fc3e 	bl	5178 <Mcu_SetMode>
    /*Apply all the Pin Port microcontroller configuration, for this case
    only Port Pin 122  (D16) is configured as output*/
    Port_Init( &Port_Config );
     8fc:	4803      	ldr	r0, [pc, #12]	; (90c <EcuM_Init+0x24>)
     8fe:	f004 ffc5 	bl	588c <Port_Init>
}
     902:	bf00      	nop
     904:	bd08      	pop	{r3, pc}
     906:	bf00      	nop
     908:	00008784 	.word	0x00008784
     90c:	000088a4 	.word	0x000088a4

00000910 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     910:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     912:	f3ef 8310 	mrs	r3, PRIMASK
     916:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     918:	4623      	mov	r3, r4
}
     91a:	4618      	mov	r0, r3
     91c:	f85d 4b04 	ldr.w	r4, [sp], #4
     920:	4770      	bx	lr

00000922 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     922:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     924:	f3ef 8310 	mrs	r3, PRIMASK
     928:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     92a:	4623      	mov	r3, r4
}
     92c:	4618      	mov	r0, r3
     92e:	f85d 4b04 	ldr.w	r4, [sp], #4
     932:	4770      	bx	lr

00000934 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     934:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     936:	f3ef 8310 	mrs	r3, PRIMASK
     93a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     93c:	4623      	mov	r3, r4
}
     93e:	4618      	mov	r0, r3
     940:	f85d 4b04 	ldr.w	r4, [sp], #4
     944:	4770      	bx	lr
	...

00000948 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     948:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     94a:	2300      	movs	r3, #0
     94c:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     94e:	2300      	movs	r3, #0
     950:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     952:	2300      	movs	r3, #0
     954:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     956:	2300      	movs	r3, #0
     958:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     95a:	4b44      	ldr	r3, [pc, #272]	; (a6c <init_data_bss+0x124>)
     95c:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     95e:	4b44      	ldr	r3, [pc, #272]	; (a70 <init_data_bss+0x128>)
     960:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     962:	9b05      	ldr	r3, [sp, #20]
     964:	681b      	ldr	r3, [r3, #0]
     966:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     968:	9b05      	ldr	r3, [sp, #20]
     96a:	3304      	adds	r3, #4
     96c:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     96e:	9b05      	ldr	r3, [sp, #20]
     970:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     972:	2300      	movs	r3, #0
     974:	9309      	str	r3, [sp, #36]	; 0x24
     976:	e03d      	b.n	9f4 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     978:	9a09      	ldr	r2, [sp, #36]	; 0x24
     97a:	4613      	mov	r3, r2
     97c:	005b      	lsls	r3, r3, #1
     97e:	4413      	add	r3, r2
     980:	009b      	lsls	r3, r3, #2
     982:	461a      	mov	r2, r3
     984:	9b03      	ldr	r3, [sp, #12]
     986:	4413      	add	r3, r2
     988:	685b      	ldr	r3, [r3, #4]
     98a:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     98c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     98e:	4613      	mov	r3, r2
     990:	005b      	lsls	r3, r3, #1
     992:	4413      	add	r3, r2
     994:	009b      	lsls	r3, r3, #2
     996:	461a      	mov	r2, r3
     998:	9b03      	ldr	r3, [sp, #12]
     99a:	4413      	add	r3, r2
     99c:	681b      	ldr	r3, [r3, #0]
     99e:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     9a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9a2:	4613      	mov	r3, r2
     9a4:	005b      	lsls	r3, r3, #1
     9a6:	4413      	add	r3, r2
     9a8:	009b      	lsls	r3, r3, #2
     9aa:	461a      	mov	r2, r3
     9ac:	9b03      	ldr	r3, [sp, #12]
     9ae:	4413      	add	r3, r2
     9b0:	689b      	ldr	r3, [r3, #8]
     9b2:	4619      	mov	r1, r3
     9b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9b6:	4613      	mov	r3, r2
     9b8:	005b      	lsls	r3, r3, #1
     9ba:	4413      	add	r3, r2
     9bc:	009b      	lsls	r3, r3, #2
     9be:	461a      	mov	r2, r3
     9c0:	9b03      	ldr	r3, [sp, #12]
     9c2:	4413      	add	r3, r2
     9c4:	685b      	ldr	r3, [r3, #4]
     9c6:	1acb      	subs	r3, r1, r3
     9c8:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     9ca:	2300      	movs	r3, #0
     9cc:	9308      	str	r3, [sp, #32]
     9ce:	e00a      	b.n	9e6 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     9d0:	9a00      	ldr	r2, [sp, #0]
     9d2:	9b08      	ldr	r3, [sp, #32]
     9d4:	441a      	add	r2, r3
     9d6:	9901      	ldr	r1, [sp, #4]
     9d8:	9b08      	ldr	r3, [sp, #32]
     9da:	440b      	add	r3, r1
     9dc:	7812      	ldrb	r2, [r2, #0]
     9de:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     9e0:	9b08      	ldr	r3, [sp, #32]
     9e2:	3301      	adds	r3, #1
     9e4:	9308      	str	r3, [sp, #32]
     9e6:	9a08      	ldr	r2, [sp, #32]
     9e8:	9b06      	ldr	r3, [sp, #24]
     9ea:	429a      	cmp	r2, r3
     9ec:	d3f0      	bcc.n	9d0 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     9ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
     9f0:	3301      	adds	r3, #1
     9f2:	9309      	str	r3, [sp, #36]	; 0x24
     9f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9f6:	9b07      	ldr	r3, [sp, #28]
     9f8:	429a      	cmp	r2, r3
     9fa:	d3bd      	bcc.n	978 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     9fc:	9b04      	ldr	r3, [sp, #16]
     9fe:	681b      	ldr	r3, [r3, #0]
     a00:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     a02:	9b04      	ldr	r3, [sp, #16]
     a04:	3304      	adds	r3, #4
     a06:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     a08:	9b04      	ldr	r3, [sp, #16]
     a0a:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     a0c:	2300      	movs	r3, #0
     a0e:	9309      	str	r3, [sp, #36]	; 0x24
     a10:	e024      	b.n	a5c <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a14:	00db      	lsls	r3, r3, #3
     a16:	9a02      	ldr	r2, [sp, #8]
     a18:	4413      	add	r3, r2
     a1a:	681b      	ldr	r3, [r3, #0]
     a1c:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a20:	00db      	lsls	r3, r3, #3
     a22:	9a02      	ldr	r2, [sp, #8]
     a24:	4413      	add	r3, r2
     a26:	685b      	ldr	r3, [r3, #4]
     a28:	4619      	mov	r1, r3
     a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a2c:	00db      	lsls	r3, r3, #3
     a2e:	9a02      	ldr	r2, [sp, #8]
     a30:	4413      	add	r3, r2
     a32:	681b      	ldr	r3, [r3, #0]
     a34:	1acb      	subs	r3, r1, r3
     a36:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     a38:	2300      	movs	r3, #0
     a3a:	9308      	str	r3, [sp, #32]
     a3c:	e007      	b.n	a4e <init_data_bss+0x106>
        {
            ram[j] = 0U;
     a3e:	9a01      	ldr	r2, [sp, #4]
     a40:	9b08      	ldr	r3, [sp, #32]
     a42:	4413      	add	r3, r2
     a44:	2200      	movs	r2, #0
     a46:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     a48:	9b08      	ldr	r3, [sp, #32]
     a4a:	3301      	adds	r3, #1
     a4c:	9308      	str	r3, [sp, #32]
     a4e:	9a08      	ldr	r2, [sp, #32]
     a50:	9b06      	ldr	r3, [sp, #24]
     a52:	429a      	cmp	r2, r3
     a54:	d3f3      	bcc.n	a3e <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a58:	3301      	adds	r3, #1
     a5a:	9309      	str	r3, [sp, #36]	; 0x24
     a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a5e:	9b07      	ldr	r3, [sp, #28]
     a60:	429a      	cmp	r2, r3
     a62:	d3d6      	bcc.n	a12 <init_data_bss+0xca>
        }
    }
}
     a64:	bf00      	nop
     a66:	bf00      	nop
     a68:	b00a      	add	sp, #40	; 0x28
     a6a:	4770      	bx	lr
     a6c:	00008914 	.word	0x00008914
     a70:	00008930 	.word	0x00008930

00000a74 <sys_m4_cache_init>:
{
     a74:	b084      	sub	sp, #16
     a76:	4603      	mov	r3, r0
     a78:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     a7c:	2300      	movs	r3, #0
     a7e:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     a82:	f89d 3007 	ldrb.w	r3, [sp, #7]
     a86:	2b00      	cmp	r3, #0
     a88:	d118      	bne.n	abc <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     a8a:	4b10      	ldr	r3, [pc, #64]	; (acc <sys_m4_cache_init+0x58>)
     a8c:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     a90:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     a92:	4b0e      	ldr	r3, [pc, #56]	; (acc <sys_m4_cache_init+0x58>)
     a94:	681b      	ldr	r3, [r3, #0]
     a96:	4a0d      	ldr	r2, [pc, #52]	; (acc <sys_m4_cache_init+0x58>)
     a98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a9c:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     a9e:	bf00      	nop
     aa0:	4b0a      	ldr	r3, [pc, #40]	; (acc <sys_m4_cache_init+0x58>)
     aa2:	681b      	ldr	r3, [r3, #0]
     aa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     aac:	d0f8      	beq.n	aa0 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     aae:	4b07      	ldr	r3, [pc, #28]	; (acc <sys_m4_cache_init+0x58>)
     ab0:	681b      	ldr	r3, [r3, #0]
     ab2:	4a06      	ldr	r2, [pc, #24]	; (acc <sys_m4_cache_init+0x58>)
     ab4:	f043 0301 	orr.w	r3, r3, #1
     ab8:	6013      	str	r3, [r2, #0]
     aba:	e002      	b.n	ac2 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     abc:	2301      	movs	r3, #1
     abe:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     ac2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     ac6:	4618      	mov	r0, r3
     ac8:	b004      	add	sp, #16
     aca:	4770      	bx	lr
     acc:	e0082000 	.word	0xe0082000

00000ad0 <startup_go_to_user_mode>:
}
     ad0:	bf00      	nop
     ad2:	4770      	bx	lr

00000ad4 <Sys_GetCoreID>:
    return 0U;
     ad4:	2300      	movs	r3, #0
}
     ad6:	4618      	mov	r0, r3
     ad8:	4770      	bx	lr

00000ada <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     ada:	e7fe      	b.n	ada <HardFault_Handler>

00000adc <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     adc:	e7fe      	b.n	adc <MemManage_Handler>

00000ade <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     ade:	e7fe      	b.n	ade <BusFault_Handler>

00000ae0 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     ae0:	e7fe      	b.n	ae0 <UsageFault_Handler>

00000ae2 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     ae2:	e7fe      	b.n	ae2 <SVC_Handler>

00000ae4 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     ae4:	e7fe      	b.n	ae4 <DebugMon_Handler>

00000ae6 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     ae6:	e7fe      	b.n	ae6 <PendSV_Handler>

00000ae8 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     ae8:	e7fe      	b.n	ae8 <SysTick_Handler>

00000aea <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     aea:	e7fe      	b.n	aea <undefined_handler>

00000aec <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     aec:	b500      	push	{lr}
     aee:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     af0:	4b26      	ldr	r3, [pc, #152]	; (b8c <_DoInit+0xa0>)
     af2:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     af4:	22a8      	movs	r2, #168	; 0xa8
     af6:	2100      	movs	r1, #0
     af8:	9800      	ldr	r0, [sp, #0]
     afa:	f000 fd13 	bl	1524 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     afe:	9b00      	ldr	r3, [sp, #0]
     b00:	2203      	movs	r2, #3
     b02:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     b04:	9b00      	ldr	r3, [sp, #0]
     b06:	2203      	movs	r2, #3
     b08:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     b0a:	9b00      	ldr	r3, [sp, #0]
     b0c:	4a20      	ldr	r2, [pc, #128]	; (b90 <_DoInit+0xa4>)
     b0e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     b10:	9b00      	ldr	r3, [sp, #0]
     b12:	4a20      	ldr	r2, [pc, #128]	; (b94 <_DoInit+0xa8>)
     b14:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     b16:	9b00      	ldr	r3, [sp, #0]
     b18:	f44f 6280 	mov.w	r2, #1024	; 0x400
     b1c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     b1e:	9b00      	ldr	r3, [sp, #0]
     b20:	2200      	movs	r2, #0
     b22:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     b24:	9b00      	ldr	r3, [sp, #0]
     b26:	2200      	movs	r2, #0
     b28:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     b2a:	9b00      	ldr	r3, [sp, #0]
     b2c:	2200      	movs	r2, #0
     b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     b30:	9b00      	ldr	r3, [sp, #0]
     b32:	4a17      	ldr	r2, [pc, #92]	; (b90 <_DoInit+0xa4>)
     b34:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     b36:	9b00      	ldr	r3, [sp, #0]
     b38:	4a17      	ldr	r2, [pc, #92]	; (b98 <_DoInit+0xac>)
     b3a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     b3c:	9b00      	ldr	r3, [sp, #0]
     b3e:	2210      	movs	r2, #16
     b40:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     b42:	9b00      	ldr	r3, [sp, #0]
     b44:	2200      	movs	r2, #0
     b46:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     b48:	9b00      	ldr	r3, [sp, #0]
     b4a:	2200      	movs	r2, #0
     b4c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     b4e:	9b00      	ldr	r3, [sp, #0]
     b50:	2200      	movs	r2, #0
     b52:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     b54:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     b58:	2300      	movs	r3, #0
     b5a:	9301      	str	r3, [sp, #4]
     b5c:	e00c      	b.n	b78 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     b5e:	9b01      	ldr	r3, [sp, #4]
     b60:	f1c3 030f 	rsb	r3, r3, #15
     b64:	4a0d      	ldr	r2, [pc, #52]	; (b9c <_DoInit+0xb0>)
     b66:	5cd1      	ldrb	r1, [r2, r3]
     b68:	9a00      	ldr	r2, [sp, #0]
     b6a:	9b01      	ldr	r3, [sp, #4]
     b6c:	4413      	add	r3, r2
     b6e:	460a      	mov	r2, r1
     b70:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     b72:	9b01      	ldr	r3, [sp, #4]
     b74:	3301      	adds	r3, #1
     b76:	9301      	str	r3, [sp, #4]
     b78:	9b01      	ldr	r3, [sp, #4]
     b7a:	2b0f      	cmp	r3, #15
     b7c:	d9ef      	bls.n	b5e <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     b7e:	f3bf 8f5f 	dmb	sy
}
     b82:	bf00      	nop
     b84:	b003      	add	sp, #12
     b86:	f85d fb04 	ldr.w	pc, [sp], #4
     b8a:	bf00      	nop
     b8c:	1fff8e04 	.word	0x1fff8e04
     b90:	00007bc8 	.word	0x00007bc8
     b94:	1fff8eac 	.word	0x1fff8eac
     b98:	1fff92ac 	.word	0x1fff92ac
     b9c:	000088f0 	.word	0x000088f0

00000ba0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     ba0:	b500      	push	{lr}
     ba2:	b08b      	sub	sp, #44	; 0x2c
     ba4:	9003      	str	r0, [sp, #12]
     ba6:	9102      	str	r1, [sp, #8]
     ba8:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     baa:	2300      	movs	r3, #0
     bac:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     bae:	9b03      	ldr	r3, [sp, #12]
     bb0:	68db      	ldr	r3, [r3, #12]
     bb2:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     bb4:	9b03      	ldr	r3, [sp, #12]
     bb6:	691b      	ldr	r3, [r3, #16]
     bb8:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     bba:	9a06      	ldr	r2, [sp, #24]
     bbc:	9b07      	ldr	r3, [sp, #28]
     bbe:	429a      	cmp	r2, r3
     bc0:	d905      	bls.n	bce <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     bc2:	9a06      	ldr	r2, [sp, #24]
     bc4:	9b07      	ldr	r3, [sp, #28]
     bc6:	1ad3      	subs	r3, r2, r3
     bc8:	3b01      	subs	r3, #1
     bca:	9309      	str	r3, [sp, #36]	; 0x24
     bcc:	e007      	b.n	bde <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     bce:	9b03      	ldr	r3, [sp, #12]
     bd0:	689a      	ldr	r2, [r3, #8]
     bd2:	9906      	ldr	r1, [sp, #24]
     bd4:	9b07      	ldr	r3, [sp, #28]
     bd6:	1acb      	subs	r3, r1, r3
     bd8:	4413      	add	r3, r2
     bda:	3b01      	subs	r3, #1
     bdc:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     bde:	9b03      	ldr	r3, [sp, #12]
     be0:	689a      	ldr	r2, [r3, #8]
     be2:	9b07      	ldr	r3, [sp, #28]
     be4:	1ad3      	subs	r3, r2, r3
     be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
     be8:	4293      	cmp	r3, r2
     bea:	bf28      	it	cs
     bec:	4613      	movcs	r3, r2
     bee:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     bf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     bf2:	9b01      	ldr	r3, [sp, #4]
     bf4:	4293      	cmp	r3, r2
     bf6:	bf28      	it	cs
     bf8:	4613      	movcs	r3, r2
     bfa:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     bfc:	9b03      	ldr	r3, [sp, #12]
     bfe:	685a      	ldr	r2, [r3, #4]
     c00:	9b07      	ldr	r3, [sp, #28]
     c02:	4413      	add	r3, r2
     c04:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
     c08:	9902      	ldr	r1, [sp, #8]
     c0a:	9805      	ldr	r0, [sp, #20]
     c0c:	f000 fc7c 	bl	1508 <memcpy>
    NumBytesWritten += NumBytesToWrite;
     c10:	9a08      	ldr	r2, [sp, #32]
     c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c14:	4413      	add	r3, r2
     c16:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     c18:	9a02      	ldr	r2, [sp, #8]
     c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c1c:	4413      	add	r3, r2
     c1e:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     c20:	9a01      	ldr	r2, [sp, #4]
     c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c24:	1ad3      	subs	r3, r2, r3
     c26:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     c28:	9a07      	ldr	r2, [sp, #28]
     c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c2c:	4413      	add	r3, r2
     c2e:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     c30:	9b03      	ldr	r3, [sp, #12]
     c32:	689b      	ldr	r3, [r3, #8]
     c34:	9a07      	ldr	r2, [sp, #28]
     c36:	429a      	cmp	r2, r3
     c38:	d101      	bne.n	c3e <_WriteBlocking+0x9e>
      WrOff = 0u;
     c3a:	2300      	movs	r3, #0
     c3c:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     c3e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     c42:	9b03      	ldr	r3, [sp, #12]
     c44:	9a07      	ldr	r2, [sp, #28]
     c46:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     c48:	9b01      	ldr	r3, [sp, #4]
     c4a:	2b00      	cmp	r3, #0
     c4c:	d1b2      	bne.n	bb4 <_WriteBlocking+0x14>
  return NumBytesWritten;
     c4e:	9b08      	ldr	r3, [sp, #32]
}
     c50:	4618      	mov	r0, r3
     c52:	b00b      	add	sp, #44	; 0x2c
     c54:	f85d fb04 	ldr.w	pc, [sp], #4

00000c58 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     c58:	b500      	push	{lr}
     c5a:	b089      	sub	sp, #36	; 0x24
     c5c:	9003      	str	r0, [sp, #12]
     c5e:	9102      	str	r1, [sp, #8]
     c60:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     c62:	9b03      	ldr	r3, [sp, #12]
     c64:	68db      	ldr	r3, [r3, #12]
     c66:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     c68:	9b03      	ldr	r3, [sp, #12]
     c6a:	689a      	ldr	r2, [r3, #8]
     c6c:	9b07      	ldr	r3, [sp, #28]
     c6e:	1ad3      	subs	r3, r2, r3
     c70:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     c72:	9a06      	ldr	r2, [sp, #24]
     c74:	9b01      	ldr	r3, [sp, #4]
     c76:	429a      	cmp	r2, r3
     c78:	d911      	bls.n	c9e <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     c7a:	9b03      	ldr	r3, [sp, #12]
     c7c:	685a      	ldr	r2, [r3, #4]
     c7e:	9b07      	ldr	r3, [sp, #28]
     c80:	4413      	add	r3, r2
     c82:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     c84:	9a01      	ldr	r2, [sp, #4]
     c86:	9902      	ldr	r1, [sp, #8]
     c88:	9804      	ldr	r0, [sp, #16]
     c8a:	f000 fc3d 	bl	1508 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     c8e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     c92:	9a07      	ldr	r2, [sp, #28]
     c94:	9b01      	ldr	r3, [sp, #4]
     c96:	441a      	add	r2, r3
     c98:	9b03      	ldr	r3, [sp, #12]
     c9a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     c9c:	e01f      	b.n	cde <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     c9e:	9b06      	ldr	r3, [sp, #24]
     ca0:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     ca2:	9b03      	ldr	r3, [sp, #12]
     ca4:	685a      	ldr	r2, [r3, #4]
     ca6:	9b07      	ldr	r3, [sp, #28]
     ca8:	4413      	add	r3, r2
     caa:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     cac:	9a05      	ldr	r2, [sp, #20]
     cae:	9902      	ldr	r1, [sp, #8]
     cb0:	9804      	ldr	r0, [sp, #16]
     cb2:	f000 fc29 	bl	1508 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     cb6:	9a01      	ldr	r2, [sp, #4]
     cb8:	9b06      	ldr	r3, [sp, #24]
     cba:	1ad3      	subs	r3, r2, r3
     cbc:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     cbe:	9b03      	ldr	r3, [sp, #12]
     cc0:	685b      	ldr	r3, [r3, #4]
     cc2:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     cc4:	9a02      	ldr	r2, [sp, #8]
     cc6:	9b06      	ldr	r3, [sp, #24]
     cc8:	4413      	add	r3, r2
     cca:	9a05      	ldr	r2, [sp, #20]
     ccc:	4619      	mov	r1, r3
     cce:	9804      	ldr	r0, [sp, #16]
     cd0:	f000 fc1a 	bl	1508 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     cd4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     cd8:	9b03      	ldr	r3, [sp, #12]
     cda:	9a05      	ldr	r2, [sp, #20]
     cdc:	60da      	str	r2, [r3, #12]
}
     cde:	bf00      	nop
     ce0:	b009      	add	sp, #36	; 0x24
     ce2:	f85d fb04 	ldr.w	pc, [sp], #4

00000ce6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     ce6:	b086      	sub	sp, #24
     ce8:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     cea:	9b01      	ldr	r3, [sp, #4]
     cec:	691b      	ldr	r3, [r3, #16]
     cee:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     cf0:	9b01      	ldr	r3, [sp, #4]
     cf2:	68db      	ldr	r3, [r3, #12]
     cf4:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     cf6:	9a04      	ldr	r2, [sp, #16]
     cf8:	9b03      	ldr	r3, [sp, #12]
     cfa:	429a      	cmp	r2, r3
     cfc:	d808      	bhi.n	d10 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     cfe:	9b01      	ldr	r3, [sp, #4]
     d00:	689a      	ldr	r2, [r3, #8]
     d02:	9b03      	ldr	r3, [sp, #12]
     d04:	1ad2      	subs	r2, r2, r3
     d06:	9b04      	ldr	r3, [sp, #16]
     d08:	4413      	add	r3, r2
     d0a:	3b01      	subs	r3, #1
     d0c:	9305      	str	r3, [sp, #20]
     d0e:	e004      	b.n	d1a <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     d10:	9a04      	ldr	r2, [sp, #16]
     d12:	9b03      	ldr	r3, [sp, #12]
     d14:	1ad3      	subs	r3, r2, r3
     d16:	3b01      	subs	r3, #1
     d18:	9305      	str	r3, [sp, #20]
  }
  return r;
     d1a:	9b05      	ldr	r3, [sp, #20]
}
     d1c:	4618      	mov	r0, r3
     d1e:	b006      	add	sp, #24
     d20:	4770      	bx	lr
	...

00000d24 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     d24:	b500      	push	{lr}
     d26:	b089      	sub	sp, #36	; 0x24
     d28:	9003      	str	r0, [sp, #12]
     d2a:	9102      	str	r1, [sp, #8]
     d2c:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     d2e:	9b02      	ldr	r3, [sp, #8]
     d30:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     d32:	9b03      	ldr	r3, [sp, #12]
     d34:	1c5a      	adds	r2, r3, #1
     d36:	4613      	mov	r3, r2
     d38:	005b      	lsls	r3, r3, #1
     d3a:	4413      	add	r3, r2
     d3c:	00db      	lsls	r3, r3, #3
     d3e:	4a20      	ldr	r2, [pc, #128]	; (dc0 <SEGGER_RTT_WriteNoLock+0x9c>)
     d40:	4413      	add	r3, r2
     d42:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     d44:	9b05      	ldr	r3, [sp, #20]
     d46:	695b      	ldr	r3, [r3, #20]
     d48:	2b02      	cmp	r3, #2
     d4a:	d029      	beq.n	da0 <SEGGER_RTT_WriteNoLock+0x7c>
     d4c:	2b02      	cmp	r3, #2
     d4e:	d82e      	bhi.n	dae <SEGGER_RTT_WriteNoLock+0x8a>
     d50:	2b00      	cmp	r3, #0
     d52:	d002      	beq.n	d5a <SEGGER_RTT_WriteNoLock+0x36>
     d54:	2b01      	cmp	r3, #1
     d56:	d013      	beq.n	d80 <SEGGER_RTT_WriteNoLock+0x5c>
     d58:	e029      	b.n	dae <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     d5a:	9805      	ldr	r0, [sp, #20]
     d5c:	f7ff ffc3 	bl	ce6 <_GetAvailWriteSpace>
     d60:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     d62:	9a04      	ldr	r2, [sp, #16]
     d64:	9b01      	ldr	r3, [sp, #4]
     d66:	429a      	cmp	r2, r3
     d68:	d202      	bcs.n	d70 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     d6a:	2300      	movs	r3, #0
     d6c:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     d6e:	e021      	b.n	db4 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     d70:	9b01      	ldr	r3, [sp, #4]
     d72:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     d74:	9a01      	ldr	r2, [sp, #4]
     d76:	9906      	ldr	r1, [sp, #24]
     d78:	9805      	ldr	r0, [sp, #20]
     d7a:	f7ff ff6d 	bl	c58 <_WriteNoCheck>
    break;
     d7e:	e019      	b.n	db4 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     d80:	9805      	ldr	r0, [sp, #20]
     d82:	f7ff ffb0 	bl	ce6 <_GetAvailWriteSpace>
     d86:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     d88:	9a01      	ldr	r2, [sp, #4]
     d8a:	9b04      	ldr	r3, [sp, #16]
     d8c:	4293      	cmp	r3, r2
     d8e:	bf28      	it	cs
     d90:	4613      	movcs	r3, r2
     d92:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     d94:	9a07      	ldr	r2, [sp, #28]
     d96:	9906      	ldr	r1, [sp, #24]
     d98:	9805      	ldr	r0, [sp, #20]
     d9a:	f7ff ff5d 	bl	c58 <_WriteNoCheck>
    break;
     d9e:	e009      	b.n	db4 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     da0:	9a01      	ldr	r2, [sp, #4]
     da2:	9906      	ldr	r1, [sp, #24]
     da4:	9805      	ldr	r0, [sp, #20]
     da6:	f7ff fefb 	bl	ba0 <_WriteBlocking>
     daa:	9007      	str	r0, [sp, #28]
    break;
     dac:	e002      	b.n	db4 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     dae:	2300      	movs	r3, #0
     db0:	9307      	str	r3, [sp, #28]
    break;
     db2:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     db4:	9b07      	ldr	r3, [sp, #28]
}
     db6:	4618      	mov	r0, r3
     db8:	b009      	add	sp, #36	; 0x24
     dba:	f85d fb04 	ldr.w	pc, [sp], #4
     dbe:	bf00      	nop
     dc0:	1fff8e04 	.word	0x1fff8e04

00000dc4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     dc4:	b500      	push	{lr}
     dc6:	b089      	sub	sp, #36	; 0x24
     dc8:	9003      	str	r0, [sp, #12]
     dca:	9102      	str	r1, [sp, #8]
     dcc:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     dce:	4b0f      	ldr	r3, [pc, #60]	; (e0c <SEGGER_RTT_Write+0x48>)
     dd0:	9307      	str	r3, [sp, #28]
     dd2:	9b07      	ldr	r3, [sp, #28]
     dd4:	781b      	ldrb	r3, [r3, #0]
     dd6:	b2db      	uxtb	r3, r3
     dd8:	2b53      	cmp	r3, #83	; 0x53
     dda:	d001      	beq.n	de0 <SEGGER_RTT_Write+0x1c>
     ddc:	f7ff fe86 	bl	aec <_DoInit>
  SEGGER_RTT_LOCK();
     de0:	f3ef 8311 	mrs	r3, BASEPRI
     de4:	f04f 0120 	mov.w	r1, #32
     de8:	f381 8811 	msr	BASEPRI, r1
     dec:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     dee:	9a01      	ldr	r2, [sp, #4]
     df0:	9902      	ldr	r1, [sp, #8]
     df2:	9803      	ldr	r0, [sp, #12]
     df4:	f7ff ff96 	bl	d24 <SEGGER_RTT_WriteNoLock>
     df8:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     dfa:	9b06      	ldr	r3, [sp, #24]
     dfc:	f383 8811 	msr	BASEPRI, r3
  return Status;
     e00:	9b05      	ldr	r3, [sp, #20]
}
     e02:	4618      	mov	r0, r3
     e04:	b009      	add	sp, #36	; 0x24
     e06:	f85d fb04 	ldr.w	pc, [sp], #4
     e0a:	bf00      	nop
     e0c:	1fff8e04 	.word	0x1fff8e04

00000e10 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
     e10:	b508      	push	{r3, lr}
  _DoInit();
     e12:	f7ff fe6b 	bl	aec <_DoInit>
}
     e16:	bf00      	nop
     e18:	bd08      	pop	{r3, pc}

00000e1a <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     e1a:	b500      	push	{lr}
     e1c:	b085      	sub	sp, #20
     e1e:	9001      	str	r0, [sp, #4]
     e20:	460b      	mov	r3, r1
     e22:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
     e26:	9b01      	ldr	r3, [sp, #4]
     e28:	689b      	ldr	r3, [r3, #8]
     e2a:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
     e2c:	9b03      	ldr	r3, [sp, #12]
     e2e:	1c5a      	adds	r2, r3, #1
     e30:	9b01      	ldr	r3, [sp, #4]
     e32:	685b      	ldr	r3, [r3, #4]
     e34:	429a      	cmp	r2, r3
     e36:	d80f      	bhi.n	e58 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
     e38:	9b01      	ldr	r3, [sp, #4]
     e3a:	681a      	ldr	r2, [r3, #0]
     e3c:	9b03      	ldr	r3, [sp, #12]
     e3e:	4413      	add	r3, r2
     e40:	f89d 2003 	ldrb.w	r2, [sp, #3]
     e44:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
     e46:	9b03      	ldr	r3, [sp, #12]
     e48:	1c5a      	adds	r2, r3, #1
     e4a:	9b01      	ldr	r3, [sp, #4]
     e4c:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
     e4e:	9b01      	ldr	r3, [sp, #4]
     e50:	68db      	ldr	r3, [r3, #12]
     e52:	1c5a      	adds	r2, r3, #1
     e54:	9b01      	ldr	r3, [sp, #4]
     e56:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
     e58:	9b01      	ldr	r3, [sp, #4]
     e5a:	689a      	ldr	r2, [r3, #8]
     e5c:	9b01      	ldr	r3, [sp, #4]
     e5e:	685b      	ldr	r3, [r3, #4]
     e60:	429a      	cmp	r2, r3
     e62:	d115      	bne.n	e90 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
     e64:	9b01      	ldr	r3, [sp, #4]
     e66:	6918      	ldr	r0, [r3, #16]
     e68:	9b01      	ldr	r3, [sp, #4]
     e6a:	6819      	ldr	r1, [r3, #0]
     e6c:	9b01      	ldr	r3, [sp, #4]
     e6e:	689b      	ldr	r3, [r3, #8]
     e70:	461a      	mov	r2, r3
     e72:	f7ff ffa7 	bl	dc4 <SEGGER_RTT_Write>
     e76:	4602      	mov	r2, r0
     e78:	9b01      	ldr	r3, [sp, #4]
     e7a:	689b      	ldr	r3, [r3, #8]
     e7c:	429a      	cmp	r2, r3
     e7e:	d004      	beq.n	e8a <_StoreChar+0x70>
      p->ReturnValue = -1;
     e80:	9b01      	ldr	r3, [sp, #4]
     e82:	f04f 32ff 	mov.w	r2, #4294967295
     e86:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
     e88:	e002      	b.n	e90 <_StoreChar+0x76>
      p->Cnt = 0u;
     e8a:	9b01      	ldr	r3, [sp, #4]
     e8c:	2200      	movs	r2, #0
     e8e:	609a      	str	r2, [r3, #8]
}
     e90:	bf00      	nop
     e92:	b005      	add	sp, #20
     e94:	f85d fb04 	ldr.w	pc, [sp], #4

00000e98 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
     e98:	b500      	push	{lr}
     e9a:	b08b      	sub	sp, #44	; 0x2c
     e9c:	9003      	str	r0, [sp, #12]
     e9e:	9102      	str	r1, [sp, #8]
     ea0:	9201      	str	r2, [sp, #4]
     ea2:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
     ea4:	9b02      	ldr	r3, [sp, #8]
     ea6:	9308      	str	r3, [sp, #32]
  Digit = 1u;
     ea8:	2301      	movs	r3, #1
     eaa:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
     eac:	2301      	movs	r3, #1
     eae:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     eb0:	e007      	b.n	ec2 <_PrintUnsigned+0x2a>
    Number = (Number / Base);
     eb2:	9a08      	ldr	r2, [sp, #32]
     eb4:	9b01      	ldr	r3, [sp, #4]
     eb6:	fbb2 f3f3 	udiv	r3, r2, r3
     eba:	9308      	str	r3, [sp, #32]
    Width++;
     ebc:	9b07      	ldr	r3, [sp, #28]
     ebe:	3301      	adds	r3, #1
     ec0:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     ec2:	9a08      	ldr	r2, [sp, #32]
     ec4:	9b01      	ldr	r3, [sp, #4]
     ec6:	429a      	cmp	r2, r3
     ec8:	d2f3      	bcs.n	eb2 <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
     eca:	9a00      	ldr	r2, [sp, #0]
     ecc:	9b07      	ldr	r3, [sp, #28]
     ece:	429a      	cmp	r2, r3
     ed0:	d901      	bls.n	ed6 <_PrintUnsigned+0x3e>
    Width = NumDigits;
     ed2:	9b00      	ldr	r3, [sp, #0]
     ed4:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
     ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     ed8:	f003 0301 	and.w	r3, r3, #1
     edc:	2b00      	cmp	r3, #0
     ede:	d128      	bne.n	f32 <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
     ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     ee2:	2b00      	cmp	r3, #0
     ee4:	d025      	beq.n	f32 <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
     ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     ee8:	f003 0302 	and.w	r3, r3, #2
     eec:	2b00      	cmp	r3, #0
     eee:	d006      	beq.n	efe <_PrintUnsigned+0x66>
     ef0:	9b00      	ldr	r3, [sp, #0]
     ef2:	2b00      	cmp	r3, #0
     ef4:	d103      	bne.n	efe <_PrintUnsigned+0x66>
        c = '0';
     ef6:	2330      	movs	r3, #48	; 0x30
     ef8:	f88d 301b 	strb.w	r3, [sp, #27]
     efc:	e002      	b.n	f04 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
     efe:	2320      	movs	r3, #32
     f00:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     f04:	e00c      	b.n	f20 <_PrintUnsigned+0x88>
        FieldWidth--;
     f06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     f08:	3b01      	subs	r3, #1
     f0a:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
     f0c:	f89d 301b 	ldrb.w	r3, [sp, #27]
     f10:	4619      	mov	r1, r3
     f12:	9803      	ldr	r0, [sp, #12]
     f14:	f7ff ff81 	bl	e1a <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
     f18:	9b03      	ldr	r3, [sp, #12]
     f1a:	68db      	ldr	r3, [r3, #12]
     f1c:	2b00      	cmp	r3, #0
     f1e:	db07      	blt.n	f30 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     f20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     f22:	2b00      	cmp	r3, #0
     f24:	d005      	beq.n	f32 <_PrintUnsigned+0x9a>
     f26:	9a07      	ldr	r2, [sp, #28]
     f28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     f2a:	429a      	cmp	r2, r3
     f2c:	d3eb      	bcc.n	f06 <_PrintUnsigned+0x6e>
     f2e:	e000      	b.n	f32 <_PrintUnsigned+0x9a>
          break;
     f30:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
     f32:	9b03      	ldr	r3, [sp, #12]
     f34:	68db      	ldr	r3, [r3, #12]
     f36:	2b00      	cmp	r3, #0
     f38:	db55      	blt.n	fe6 <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
     f3a:	9b00      	ldr	r3, [sp, #0]
     f3c:	2b01      	cmp	r3, #1
     f3e:	d903      	bls.n	f48 <_PrintUnsigned+0xb0>
        NumDigits--;
     f40:	9b00      	ldr	r3, [sp, #0]
     f42:	3b01      	subs	r3, #1
     f44:	9300      	str	r3, [sp, #0]
     f46:	e009      	b.n	f5c <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
     f48:	9a02      	ldr	r2, [sp, #8]
     f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f4c:	fbb2 f3f3 	udiv	r3, r2, r3
     f50:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
     f52:	9a05      	ldr	r2, [sp, #20]
     f54:	9b01      	ldr	r3, [sp, #4]
     f56:	429a      	cmp	r2, r3
     f58:	d200      	bcs.n	f5c <_PrintUnsigned+0xc4>
          break;
     f5a:	e005      	b.n	f68 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
     f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f5e:	9a01      	ldr	r2, [sp, #4]
     f60:	fb02 f303 	mul.w	r3, r2, r3
     f64:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
     f66:	e7e8      	b.n	f3a <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
     f68:	9a02      	ldr	r2, [sp, #8]
     f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f6c:	fbb2 f3f3 	udiv	r3, r2, r3
     f70:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
     f72:	9b05      	ldr	r3, [sp, #20]
     f74:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f76:	fb02 f303 	mul.w	r3, r2, r3
     f7a:	9a02      	ldr	r2, [sp, #8]
     f7c:	1ad3      	subs	r3, r2, r3
     f7e:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
     f80:	4a1b      	ldr	r2, [pc, #108]	; (ff0 <_PrintUnsigned+0x158>)
     f82:	9b05      	ldr	r3, [sp, #20]
     f84:	4413      	add	r3, r2
     f86:	781b      	ldrb	r3, [r3, #0]
     f88:	4619      	mov	r1, r3
     f8a:	9803      	ldr	r0, [sp, #12]
     f8c:	f7ff ff45 	bl	e1a <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
     f90:	9b03      	ldr	r3, [sp, #12]
     f92:	68db      	ldr	r3, [r3, #12]
     f94:	2b00      	cmp	r3, #0
     f96:	db08      	blt.n	faa <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
     f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f9a:	9b01      	ldr	r3, [sp, #4]
     f9c:	fbb2 f3f3 	udiv	r3, r2, r3
     fa0:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
     fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fa4:	2b00      	cmp	r3, #0
     fa6:	d1df      	bne.n	f68 <_PrintUnsigned+0xd0>
     fa8:	e000      	b.n	fac <_PrintUnsigned+0x114>
        break;
     faa:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
     fac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     fae:	f003 0301 	and.w	r3, r3, #1
     fb2:	2b00      	cmp	r3, #0
     fb4:	d017      	beq.n	fe6 <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
     fb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     fb8:	2b00      	cmp	r3, #0
     fba:	d014      	beq.n	fe6 <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     fbc:	e00a      	b.n	fd4 <_PrintUnsigned+0x13c>
          FieldWidth--;
     fbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     fc0:	3b01      	subs	r3, #1
     fc2:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
     fc4:	2120      	movs	r1, #32
     fc6:	9803      	ldr	r0, [sp, #12]
     fc8:	f7ff ff27 	bl	e1a <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
     fcc:	9b03      	ldr	r3, [sp, #12]
     fce:	68db      	ldr	r3, [r3, #12]
     fd0:	2b00      	cmp	r3, #0
     fd2:	db07      	blt.n	fe4 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     fd6:	2b00      	cmp	r3, #0
     fd8:	d005      	beq.n	fe6 <_PrintUnsigned+0x14e>
     fda:	9a07      	ldr	r2, [sp, #28]
     fdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     fde:	429a      	cmp	r2, r3
     fe0:	d3ed      	bcc.n	fbe <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
     fe2:	e000      	b.n	fe6 <_PrintUnsigned+0x14e>
            break;
     fe4:	bf00      	nop
}
     fe6:	bf00      	nop
     fe8:	b00b      	add	sp, #44	; 0x2c
     fea:	f85d fb04 	ldr.w	pc, [sp], #4
     fee:	bf00      	nop
     ff0:	00008904 	.word	0x00008904

00000ff4 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
     ff4:	b500      	push	{lr}
     ff6:	b089      	sub	sp, #36	; 0x24
     ff8:	9005      	str	r0, [sp, #20]
     ffa:	9104      	str	r1, [sp, #16]
     ffc:	9203      	str	r2, [sp, #12]
     ffe:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1000:	9b04      	ldr	r3, [sp, #16]
    1002:	2b00      	cmp	r3, #0
    1004:	bfb8      	it	lt
    1006:	425b      	neglt	r3, r3
    1008:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    100a:	2301      	movs	r3, #1
    100c:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    100e:	e007      	b.n	1020 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1010:	9b03      	ldr	r3, [sp, #12]
    1012:	9a06      	ldr	r2, [sp, #24]
    1014:	fb92 f3f3 	sdiv	r3, r2, r3
    1018:	9306      	str	r3, [sp, #24]
    Width++;
    101a:	9b07      	ldr	r3, [sp, #28]
    101c:	3301      	adds	r3, #1
    101e:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1020:	9b03      	ldr	r3, [sp, #12]
    1022:	9a06      	ldr	r2, [sp, #24]
    1024:	429a      	cmp	r2, r3
    1026:	daf3      	bge.n	1010 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1028:	9a02      	ldr	r2, [sp, #8]
    102a:	9b07      	ldr	r3, [sp, #28]
    102c:	429a      	cmp	r2, r3
    102e:	d901      	bls.n	1034 <_PrintInt+0x40>
    Width = NumDigits;
    1030:	9b02      	ldr	r3, [sp, #8]
    1032:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1036:	2b00      	cmp	r3, #0
    1038:	d00a      	beq.n	1050 <_PrintInt+0x5c>
    103a:	9b04      	ldr	r3, [sp, #16]
    103c:	2b00      	cmp	r3, #0
    103e:	db04      	blt.n	104a <_PrintInt+0x56>
    1040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1042:	f003 0304 	and.w	r3, r3, #4
    1046:	2b00      	cmp	r3, #0
    1048:	d002      	beq.n	1050 <_PrintInt+0x5c>
    FieldWidth--;
    104a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    104c:	3b01      	subs	r3, #1
    104e:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1052:	f003 0302 	and.w	r3, r3, #2
    1056:	2b00      	cmp	r3, #0
    1058:	d002      	beq.n	1060 <_PrintInt+0x6c>
    105a:	9b02      	ldr	r3, [sp, #8]
    105c:	2b00      	cmp	r3, #0
    105e:	d01c      	beq.n	109a <_PrintInt+0xa6>
    1060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1062:	f003 0301 	and.w	r3, r3, #1
    1066:	2b00      	cmp	r3, #0
    1068:	d117      	bne.n	109a <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    106a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    106c:	2b00      	cmp	r3, #0
    106e:	d014      	beq.n	109a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1070:	e00a      	b.n	1088 <_PrintInt+0x94>
        FieldWidth--;
    1072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1074:	3b01      	subs	r3, #1
    1076:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1078:	2120      	movs	r1, #32
    107a:	9805      	ldr	r0, [sp, #20]
    107c:	f7ff fecd 	bl	e1a <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1080:	9b05      	ldr	r3, [sp, #20]
    1082:	68db      	ldr	r3, [r3, #12]
    1084:	2b00      	cmp	r3, #0
    1086:	db07      	blt.n	1098 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    108a:	2b00      	cmp	r3, #0
    108c:	d005      	beq.n	109a <_PrintInt+0xa6>
    108e:	9a07      	ldr	r2, [sp, #28]
    1090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1092:	429a      	cmp	r2, r3
    1094:	d3ed      	bcc.n	1072 <_PrintInt+0x7e>
    1096:	e000      	b.n	109a <_PrintInt+0xa6>
          break;
    1098:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    109a:	9b05      	ldr	r3, [sp, #20]
    109c:	68db      	ldr	r3, [r3, #12]
    109e:	2b00      	cmp	r3, #0
    10a0:	db4a      	blt.n	1138 <_PrintInt+0x144>
    if (v < 0) {
    10a2:	9b04      	ldr	r3, [sp, #16]
    10a4:	2b00      	cmp	r3, #0
    10a6:	da07      	bge.n	10b8 <_PrintInt+0xc4>
      v = -v;
    10a8:	9b04      	ldr	r3, [sp, #16]
    10aa:	425b      	negs	r3, r3
    10ac:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    10ae:	212d      	movs	r1, #45	; 0x2d
    10b0:	9805      	ldr	r0, [sp, #20]
    10b2:	f7ff feb2 	bl	e1a <_StoreChar>
    10b6:	e008      	b.n	10ca <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    10b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    10ba:	f003 0304 	and.w	r3, r3, #4
    10be:	2b00      	cmp	r3, #0
    10c0:	d003      	beq.n	10ca <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    10c2:	212b      	movs	r1, #43	; 0x2b
    10c4:	9805      	ldr	r0, [sp, #20]
    10c6:	f7ff fea8 	bl	e1a <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    10ca:	9b05      	ldr	r3, [sp, #20]
    10cc:	68db      	ldr	r3, [r3, #12]
    10ce:	2b00      	cmp	r3, #0
    10d0:	db32      	blt.n	1138 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    10d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    10d4:	f003 0302 	and.w	r3, r3, #2
    10d8:	2b00      	cmp	r3, #0
    10da:	d01f      	beq.n	111c <_PrintInt+0x128>
    10dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    10de:	f003 0301 	and.w	r3, r3, #1
    10e2:	2b00      	cmp	r3, #0
    10e4:	d11a      	bne.n	111c <_PrintInt+0x128>
    10e6:	9b02      	ldr	r3, [sp, #8]
    10e8:	2b00      	cmp	r3, #0
    10ea:	d117      	bne.n	111c <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    10ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10ee:	2b00      	cmp	r3, #0
    10f0:	d014      	beq.n	111c <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    10f2:	e00a      	b.n	110a <_PrintInt+0x116>
            FieldWidth--;
    10f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10f6:	3b01      	subs	r3, #1
    10f8:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    10fa:	2130      	movs	r1, #48	; 0x30
    10fc:	9805      	ldr	r0, [sp, #20]
    10fe:	f7ff fe8c 	bl	e1a <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    1102:	9b05      	ldr	r3, [sp, #20]
    1104:	68db      	ldr	r3, [r3, #12]
    1106:	2b00      	cmp	r3, #0
    1108:	db07      	blt.n	111a <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    110a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    110c:	2b00      	cmp	r3, #0
    110e:	d005      	beq.n	111c <_PrintInt+0x128>
    1110:	9a07      	ldr	r2, [sp, #28]
    1112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1114:	429a      	cmp	r2, r3
    1116:	d3ed      	bcc.n	10f4 <_PrintInt+0x100>
    1118:	e000      	b.n	111c <_PrintInt+0x128>
              break;
    111a:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    111c:	9b05      	ldr	r3, [sp, #20]
    111e:	68db      	ldr	r3, [r3, #12]
    1120:	2b00      	cmp	r3, #0
    1122:	db09      	blt.n	1138 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    1124:	9904      	ldr	r1, [sp, #16]
    1126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1128:	9301      	str	r3, [sp, #4]
    112a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    112c:	9300      	str	r3, [sp, #0]
    112e:	9b02      	ldr	r3, [sp, #8]
    1130:	9a03      	ldr	r2, [sp, #12]
    1132:	9805      	ldr	r0, [sp, #20]
    1134:	f7ff feb0 	bl	e98 <_PrintUnsigned>
      }
    }
  }
}
    1138:	bf00      	nop
    113a:	b009      	add	sp, #36	; 0x24
    113c:	f85d fb04 	ldr.w	pc, [sp], #4

00001140 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1140:	b500      	push	{lr}
    1142:	b0a3      	sub	sp, #140	; 0x8c
    1144:	9005      	str	r0, [sp, #20]
    1146:	9104      	str	r1, [sp, #16]
    1148:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    114a:	ab06      	add	r3, sp, #24
    114c:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    114e:	2340      	movs	r3, #64	; 0x40
    1150:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    1152:	2300      	movs	r3, #0
    1154:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    1156:	9b05      	ldr	r3, [sp, #20]
    1158:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    115a:	2300      	movs	r3, #0
    115c:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    115e:	9b04      	ldr	r3, [sp, #16]
    1160:	781b      	ldrb	r3, [r3, #0]
    1162:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    1166:	9b04      	ldr	r3, [sp, #16]
    1168:	3301      	adds	r3, #1
    116a:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    116c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1170:	2b00      	cmp	r3, #0
    1172:	f000 819c 	beq.w	14ae <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    1176:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    117a:	2b25      	cmp	r3, #37	; 0x25
    117c:	f040 818b 	bne.w	1496 <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1180:	2300      	movs	r3, #0
    1182:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1184:	2301      	movs	r3, #1
    1186:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1188:	9b04      	ldr	r3, [sp, #16]
    118a:	781b      	ldrb	r3, [r3, #0]
    118c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1190:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1194:	3b23      	subs	r3, #35	; 0x23
    1196:	2b0d      	cmp	r3, #13
    1198:	d83e      	bhi.n	1218 <SEGGER_RTT_vprintf+0xd8>
    119a:	a201      	add	r2, pc, #4	; (adr r2, 11a0 <SEGGER_RTT_vprintf+0x60>)
    119c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    11a0:	00001209 	.word	0x00001209
    11a4:	00001219 	.word	0x00001219
    11a8:	00001219 	.word	0x00001219
    11ac:	00001219 	.word	0x00001219
    11b0:	00001219 	.word	0x00001219
    11b4:	00001219 	.word	0x00001219
    11b8:	00001219 	.word	0x00001219
    11bc:	00001219 	.word	0x00001219
    11c0:	000011f9 	.word	0x000011f9
    11c4:	00001219 	.word	0x00001219
    11c8:	000011d9 	.word	0x000011d9
    11cc:	00001219 	.word	0x00001219
    11d0:	00001219 	.word	0x00001219
    11d4:	000011e9 	.word	0x000011e9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    11d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    11da:	f043 0301 	orr.w	r3, r3, #1
    11de:	931e      	str	r3, [sp, #120]	; 0x78
    11e0:	9b04      	ldr	r3, [sp, #16]
    11e2:	3301      	adds	r3, #1
    11e4:	9304      	str	r3, [sp, #16]
    11e6:	e01a      	b.n	121e <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    11e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    11ea:	f043 0302 	orr.w	r3, r3, #2
    11ee:	931e      	str	r3, [sp, #120]	; 0x78
    11f0:	9b04      	ldr	r3, [sp, #16]
    11f2:	3301      	adds	r3, #1
    11f4:	9304      	str	r3, [sp, #16]
    11f6:	e012      	b.n	121e <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    11f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    11fa:	f043 0304 	orr.w	r3, r3, #4
    11fe:	931e      	str	r3, [sp, #120]	; 0x78
    1200:	9b04      	ldr	r3, [sp, #16]
    1202:	3301      	adds	r3, #1
    1204:	9304      	str	r3, [sp, #16]
    1206:	e00a      	b.n	121e <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1208:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    120a:	f043 0308 	orr.w	r3, r3, #8
    120e:	931e      	str	r3, [sp, #120]	; 0x78
    1210:	9b04      	ldr	r3, [sp, #16]
    1212:	3301      	adds	r3, #1
    1214:	9304      	str	r3, [sp, #16]
    1216:	e002      	b.n	121e <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1218:	2300      	movs	r3, #0
    121a:	9320      	str	r3, [sp, #128]	; 0x80
    121c:	bf00      	nop
        }
      } while (v);
    121e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1220:	2b00      	cmp	r3, #0
    1222:	d1b1      	bne.n	1188 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    1224:	2300      	movs	r3, #0
    1226:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1228:	9b04      	ldr	r3, [sp, #16]
    122a:	781b      	ldrb	r3, [r3, #0]
    122c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1230:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1234:	2b2f      	cmp	r3, #47	; 0x2f
    1236:	d912      	bls.n	125e <SEGGER_RTT_vprintf+0x11e>
    1238:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    123c:	2b39      	cmp	r3, #57	; 0x39
    123e:	d80e      	bhi.n	125e <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1240:	9b04      	ldr	r3, [sp, #16]
    1242:	3301      	adds	r3, #1
    1244:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    1246:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1248:	4613      	mov	r3, r2
    124a:	009b      	lsls	r3, r3, #2
    124c:	4413      	add	r3, r2
    124e:	005b      	lsls	r3, r3, #1
    1250:	461a      	mov	r2, r3
    1252:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1256:	4413      	add	r3, r2
    1258:	3b30      	subs	r3, #48	; 0x30
    125a:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    125c:	e7e4      	b.n	1228 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    125e:	2300      	movs	r3, #0
    1260:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    1262:	9b04      	ldr	r3, [sp, #16]
    1264:	781b      	ldrb	r3, [r3, #0]
    1266:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    126a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    126e:	2b2e      	cmp	r3, #46	; 0x2e
    1270:	d11d      	bne.n	12ae <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    1272:	9b04      	ldr	r3, [sp, #16]
    1274:	3301      	adds	r3, #1
    1276:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1278:	9b04      	ldr	r3, [sp, #16]
    127a:	781b      	ldrb	r3, [r3, #0]
    127c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1280:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1284:	2b2f      	cmp	r3, #47	; 0x2f
    1286:	d912      	bls.n	12ae <SEGGER_RTT_vprintf+0x16e>
    1288:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    128c:	2b39      	cmp	r3, #57	; 0x39
    128e:	d80e      	bhi.n	12ae <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1290:	9b04      	ldr	r3, [sp, #16]
    1292:	3301      	adds	r3, #1
    1294:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    1296:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1298:	4613      	mov	r3, r2
    129a:	009b      	lsls	r3, r3, #2
    129c:	4413      	add	r3, r2
    129e:	005b      	lsls	r3, r3, #1
    12a0:	461a      	mov	r2, r3
    12a2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12a6:	4413      	add	r3, r2
    12a8:	3b30      	subs	r3, #48	; 0x30
    12aa:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    12ac:	e7e4      	b.n	1278 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    12ae:	9b04      	ldr	r3, [sp, #16]
    12b0:	781b      	ldrb	r3, [r3, #0]
    12b2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    12b6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12ba:	2b6c      	cmp	r3, #108	; 0x6c
    12bc:	d003      	beq.n	12c6 <SEGGER_RTT_vprintf+0x186>
    12be:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12c2:	2b68      	cmp	r3, #104	; 0x68
    12c4:	d107      	bne.n	12d6 <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    12c6:	9b04      	ldr	r3, [sp, #16]
    12c8:	3301      	adds	r3, #1
    12ca:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    12cc:	9b04      	ldr	r3, [sp, #16]
    12ce:	781b      	ldrb	r3, [r3, #0]
    12d0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    12d4:	e7ef      	b.n	12b6 <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    12d6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12da:	2b25      	cmp	r3, #37	; 0x25
    12dc:	f000 80d0 	beq.w	1480 <SEGGER_RTT_vprintf+0x340>
    12e0:	2b25      	cmp	r3, #37	; 0x25
    12e2:	f2c0 80d3 	blt.w	148c <SEGGER_RTT_vprintf+0x34c>
    12e6:	2b78      	cmp	r3, #120	; 0x78
    12e8:	f300 80d0 	bgt.w	148c <SEGGER_RTT_vprintf+0x34c>
    12ec:	2b58      	cmp	r3, #88	; 0x58
    12ee:	f2c0 80cd 	blt.w	148c <SEGGER_RTT_vprintf+0x34c>
    12f2:	3b58      	subs	r3, #88	; 0x58
    12f4:	2b20      	cmp	r3, #32
    12f6:	f200 80c9 	bhi.w	148c <SEGGER_RTT_vprintf+0x34c>
    12fa:	a201      	add	r2, pc, #4	; (adr r2, 1300 <SEGGER_RTT_vprintf+0x1c0>)
    12fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1300:	000013f1 	.word	0x000013f1
    1304:	0000148d 	.word	0x0000148d
    1308:	0000148d 	.word	0x0000148d
    130c:	0000148d 	.word	0x0000148d
    1310:	0000148d 	.word	0x0000148d
    1314:	0000148d 	.word	0x0000148d
    1318:	0000148d 	.word	0x0000148d
    131c:	0000148d 	.word	0x0000148d
    1320:	0000148d 	.word	0x0000148d
    1324:	0000148d 	.word	0x0000148d
    1328:	0000148d 	.word	0x0000148d
    132c:	00001385 	.word	0x00001385
    1330:	000013a9 	.word	0x000013a9
    1334:	0000148d 	.word	0x0000148d
    1338:	0000148d 	.word	0x0000148d
    133c:	0000148d 	.word	0x0000148d
    1340:	0000148d 	.word	0x0000148d
    1344:	0000148d 	.word	0x0000148d
    1348:	0000148d 	.word	0x0000148d
    134c:	0000148d 	.word	0x0000148d
    1350:	0000148d 	.word	0x0000148d
    1354:	0000148d 	.word	0x0000148d
    1358:	0000148d 	.word	0x0000148d
    135c:	0000148d 	.word	0x0000148d
    1360:	0000145d 	.word	0x0000145d
    1364:	0000148d 	.word	0x0000148d
    1368:	0000148d 	.word	0x0000148d
    136c:	00001415 	.word	0x00001415
    1370:	0000148d 	.word	0x0000148d
    1374:	000013cd 	.word	0x000013cd
    1378:	0000148d 	.word	0x0000148d
    137c:	0000148d 	.word	0x0000148d
    1380:	000013f1 	.word	0x000013f1
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    1384:	9b03      	ldr	r3, [sp, #12]
    1386:	681b      	ldr	r3, [r3, #0]
    1388:	1d19      	adds	r1, r3, #4
    138a:	9a03      	ldr	r2, [sp, #12]
    138c:	6011      	str	r1, [r2, #0]
    138e:	681b      	ldr	r3, [r3, #0]
    1390:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    1392:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1394:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    1398:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    139c:	ab16      	add	r3, sp, #88	; 0x58
    139e:	4611      	mov	r1, r2
    13a0:	4618      	mov	r0, r3
    13a2:	f7ff fd3a 	bl	e1a <_StoreChar>
        break;
    13a6:	e072      	b.n	148e <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    13a8:	9b03      	ldr	r3, [sp, #12]
    13aa:	681b      	ldr	r3, [r3, #0]
    13ac:	1d19      	adds	r1, r3, #4
    13ae:	9a03      	ldr	r2, [sp, #12]
    13b0:	6011      	str	r1, [r2, #0]
    13b2:	681b      	ldr	r3, [r3, #0]
    13b4:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    13b6:	a816      	add	r0, sp, #88	; 0x58
    13b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    13ba:	9301      	str	r3, [sp, #4]
    13bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    13be:	9300      	str	r3, [sp, #0]
    13c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    13c2:	220a      	movs	r2, #10
    13c4:	9920      	ldr	r1, [sp, #128]	; 0x80
    13c6:	f7ff fe15 	bl	ff4 <_PrintInt>
        break;
    13ca:	e060      	b.n	148e <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    13cc:	9b03      	ldr	r3, [sp, #12]
    13ce:	681b      	ldr	r3, [r3, #0]
    13d0:	1d19      	adds	r1, r3, #4
    13d2:	9a03      	ldr	r2, [sp, #12]
    13d4:	6011      	str	r1, [r2, #0]
    13d6:	681b      	ldr	r3, [r3, #0]
    13d8:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    13da:	9920      	ldr	r1, [sp, #128]	; 0x80
    13dc:	a816      	add	r0, sp, #88	; 0x58
    13de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    13e0:	9301      	str	r3, [sp, #4]
    13e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    13e4:	9300      	str	r3, [sp, #0]
    13e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    13e8:	220a      	movs	r2, #10
    13ea:	f7ff fd55 	bl	e98 <_PrintUnsigned>
        break;
    13ee:	e04e      	b.n	148e <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    13f0:	9b03      	ldr	r3, [sp, #12]
    13f2:	681b      	ldr	r3, [r3, #0]
    13f4:	1d19      	adds	r1, r3, #4
    13f6:	9a03      	ldr	r2, [sp, #12]
    13f8:	6011      	str	r1, [r2, #0]
    13fa:	681b      	ldr	r3, [r3, #0]
    13fc:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    13fe:	9920      	ldr	r1, [sp, #128]	; 0x80
    1400:	a816      	add	r0, sp, #88	; 0x58
    1402:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1404:	9301      	str	r3, [sp, #4]
    1406:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1408:	9300      	str	r3, [sp, #0]
    140a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    140c:	2210      	movs	r2, #16
    140e:	f7ff fd43 	bl	e98 <_PrintUnsigned>
        break;
    1412:	e03c      	b.n	148e <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    1414:	9b03      	ldr	r3, [sp, #12]
    1416:	681b      	ldr	r3, [r3, #0]
    1418:	1d19      	adds	r1, r3, #4
    141a:	9a03      	ldr	r2, [sp, #12]
    141c:	6011      	str	r1, [r2, #0]
    141e:	681b      	ldr	r3, [r3, #0]
    1420:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    1422:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1424:	2b00      	cmp	r3, #0
    1426:	d101      	bne.n	142c <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    1428:	4b2c      	ldr	r3, [pc, #176]	; (14dc <SEGGER_RTT_vprintf+0x39c>)
    142a:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    142c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    142e:	781b      	ldrb	r3, [r3, #0]
    1430:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    1434:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1436:	3301      	adds	r3, #1
    1438:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    143a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    143e:	2b00      	cmp	r3, #0
    1440:	d00a      	beq.n	1458 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    1442:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1446:	ab16      	add	r3, sp, #88	; 0x58
    1448:	4611      	mov	r1, r2
    144a:	4618      	mov	r0, r3
    144c:	f7ff fce5 	bl	e1a <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1450:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1452:	2b00      	cmp	r3, #0
    1454:	daea      	bge.n	142c <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    1456:	e01a      	b.n	148e <SEGGER_RTT_vprintf+0x34e>
              break;
    1458:	bf00      	nop
        break;
    145a:	e018      	b.n	148e <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    145c:	9b03      	ldr	r3, [sp, #12]
    145e:	681b      	ldr	r3, [r3, #0]
    1460:	1d19      	adds	r1, r3, #4
    1462:	9a03      	ldr	r2, [sp, #12]
    1464:	6011      	str	r1, [r2, #0]
    1466:	681b      	ldr	r3, [r3, #0]
    1468:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    146a:	9920      	ldr	r1, [sp, #128]	; 0x80
    146c:	a816      	add	r0, sp, #88	; 0x58
    146e:	2300      	movs	r3, #0
    1470:	9301      	str	r3, [sp, #4]
    1472:	2308      	movs	r3, #8
    1474:	9300      	str	r3, [sp, #0]
    1476:	2308      	movs	r3, #8
    1478:	2210      	movs	r2, #16
    147a:	f7ff fd0d 	bl	e98 <_PrintUnsigned>
        break;
    147e:	e006      	b.n	148e <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1480:	ab16      	add	r3, sp, #88	; 0x58
    1482:	2125      	movs	r1, #37	; 0x25
    1484:	4618      	mov	r0, r3
    1486:	f7ff fcc8 	bl	e1a <_StoreChar>
        break;
    148a:	e000      	b.n	148e <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    148c:	bf00      	nop
      }
      sFormat++;
    148e:	9b04      	ldr	r3, [sp, #16]
    1490:	3301      	adds	r3, #1
    1492:	9304      	str	r3, [sp, #16]
    1494:	e006      	b.n	14a4 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    1496:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    149a:	ab16      	add	r3, sp, #88	; 0x58
    149c:	4611      	mov	r1, r2
    149e:	4618      	mov	r0, r3
    14a0:	f7ff fcbb 	bl	e1a <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    14a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    14a6:	2b00      	cmp	r3, #0
    14a8:	f6bf ae59 	bge.w	115e <SEGGER_RTT_vprintf+0x1e>
    14ac:	e000      	b.n	14b0 <SEGGER_RTT_vprintf+0x370>
      break;
    14ae:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    14b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    14b2:	2b00      	cmp	r3, #0
    14b4:	dd0c      	ble.n	14d0 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    14b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    14b8:	2b00      	cmp	r3, #0
    14ba:	d005      	beq.n	14c8 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    14bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    14be:	ab06      	add	r3, sp, #24
    14c0:	4619      	mov	r1, r3
    14c2:	9805      	ldr	r0, [sp, #20]
    14c4:	f7ff fc7e 	bl	dc4 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    14c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    14ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
    14cc:	4413      	add	r3, r2
    14ce:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    14d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    14d2:	4618      	mov	r0, r3
    14d4:	b023      	add	sp, #140	; 0x8c
    14d6:	f85d fb04 	ldr.w	pc, [sp], #4
    14da:	bf00      	nop
    14dc:	00007bd4 	.word	0x00007bd4

000014e0 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    14e0:	b40e      	push	{r1, r2, r3}
    14e2:	b500      	push	{lr}
    14e4:	b084      	sub	sp, #16
    14e6:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    14e8:	ab06      	add	r3, sp, #24
    14ea:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    14ec:	ab02      	add	r3, sp, #8
    14ee:	461a      	mov	r2, r3
    14f0:	9905      	ldr	r1, [sp, #20]
    14f2:	9801      	ldr	r0, [sp, #4]
    14f4:	f7ff fe24 	bl	1140 <SEGGER_RTT_vprintf>
    14f8:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    14fa:	9b03      	ldr	r3, [sp, #12]
}
    14fc:	4618      	mov	r0, r3
    14fe:	b004      	add	sp, #16
    1500:	f85d eb04 	ldr.w	lr, [sp], #4
    1504:	b003      	add	sp, #12
    1506:	4770      	bx	lr

00001508 <memcpy>:
    1508:	440a      	add	r2, r1
    150a:	4291      	cmp	r1, r2
    150c:	f100 33ff 	add.w	r3, r0, #4294967295
    1510:	d100      	bne.n	1514 <memcpy+0xc>
    1512:	4770      	bx	lr
    1514:	b510      	push	{r4, lr}
    1516:	f811 4b01 	ldrb.w	r4, [r1], #1
    151a:	f803 4f01 	strb.w	r4, [r3, #1]!
    151e:	4291      	cmp	r1, r2
    1520:	d1f9      	bne.n	1516 <memcpy+0xe>
    1522:	bd10      	pop	{r4, pc}

00001524 <memset>:
    1524:	4402      	add	r2, r0
    1526:	4603      	mov	r3, r0
    1528:	4293      	cmp	r3, r2
    152a:	d100      	bne.n	152e <memset+0xa>
    152c:	4770      	bx	lr
    152e:	f803 1b01 	strb.w	r1, [r3], #1
    1532:	e7f9      	b.n	1528 <memset+0x4>

00001534 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1534:	2300      	movs	r3, #0
}
    1536:	4618      	mov	r0, r3
    1538:	4770      	bx	lr

0000153a <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    153a:	b082      	sub	sp, #8
    153c:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    153e:	2301      	movs	r3, #1
}
    1540:	4618      	mov	r0, r3
    1542:	b002      	add	sp, #8
    1544:	4770      	bx	lr

00001546 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1546:	b082      	sub	sp, #8
    1548:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    154a:	bf00      	nop
    154c:	b002      	add	sp, #8
    154e:	4770      	bx	lr

00001550 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1550:	b082      	sub	sp, #8
    1552:	9001      	str	r0, [sp, #4]
    return Micros;
    1554:	9b01      	ldr	r3, [sp, #4]
}
    1556:	4618      	mov	r0, r3
    1558:	b002      	add	sp, #8
    155a:	4770      	bx	lr

0000155c <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    155c:	b500      	push	{lr}
    155e:	b083      	sub	sp, #12
    1560:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1562:	f000 f86d 	bl	1640 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1566:	bf00      	nop
    1568:	b003      	add	sp, #12
    156a:	f85d fb04 	ldr.w	pc, [sp], #4

0000156e <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    156e:	b500      	push	{lr}
    1570:	b085      	sub	sp, #20
    1572:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1574:	2300      	movs	r3, #0
    1576:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1578:	9b01      	ldr	r3, [sp, #4]
    157a:	2b00      	cmp	r3, #0
    157c:	d003      	beq.n	1586 <OsIf_GetCounter+0x18>
    157e:	9b01      	ldr	r3, [sp, #4]
    1580:	2b01      	cmp	r3, #1
    1582:	d004      	beq.n	158e <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1584:	e007      	b.n	1596 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1586:	f7ff ffd5 	bl	1534 <OsIf_Timer_Dummy_GetCounter>
    158a:	9003      	str	r0, [sp, #12]
            break;
    158c:	e003      	b.n	1596 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    158e:	f000 f873 	bl	1678 <OsIf_Timer_System_GetCounter>
    1592:	9003      	str	r0, [sp, #12]
            break;
    1594:	bf00      	nop
    }

    return Value;
    1596:	9b03      	ldr	r3, [sp, #12]
}
    1598:	4618      	mov	r0, r3
    159a:	b005      	add	sp, #20
    159c:	f85d fb04 	ldr.w	pc, [sp], #4

000015a0 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    15a0:	b500      	push	{lr}
    15a2:	b085      	sub	sp, #20
    15a4:	9001      	str	r0, [sp, #4]
    15a6:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    15a8:	2300      	movs	r3, #0
    15aa:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    15ac:	9b00      	ldr	r3, [sp, #0]
    15ae:	2b00      	cmp	r3, #0
    15b0:	d003      	beq.n	15ba <OsIf_GetElapsed+0x1a>
    15b2:	9b00      	ldr	r3, [sp, #0]
    15b4:	2b01      	cmp	r3, #1
    15b6:	d005      	beq.n	15c4 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    15b8:	e009      	b.n	15ce <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    15ba:	9801      	ldr	r0, [sp, #4]
    15bc:	f7ff ffbd 	bl	153a <OsIf_Timer_Dummy_GetElapsed>
    15c0:	9003      	str	r0, [sp, #12]
            break;
    15c2:	e004      	b.n	15ce <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    15c4:	9801      	ldr	r0, [sp, #4]
    15c6:	f000 f865 	bl	1694 <OsIf_Timer_System_GetElapsed>
    15ca:	9003      	str	r0, [sp, #12]
            break;
    15cc:	bf00      	nop
    }

    return Value;
    15ce:	9b03      	ldr	r3, [sp, #12]
}
    15d0:	4618      	mov	r0, r3
    15d2:	b005      	add	sp, #20
    15d4:	f85d fb04 	ldr.w	pc, [sp], #4

000015d8 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    15d8:	b500      	push	{lr}
    15da:	b083      	sub	sp, #12
    15dc:	9001      	str	r0, [sp, #4]
    15de:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    15e0:	9b00      	ldr	r3, [sp, #0]
    15e2:	2b00      	cmp	r3, #0
    15e4:	d003      	beq.n	15ee <OsIf_SetTimerFrequency+0x16>
    15e6:	9b00      	ldr	r3, [sp, #0]
    15e8:	2b01      	cmp	r3, #1
    15ea:	d004      	beq.n	15f6 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    15ec:	e007      	b.n	15fe <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    15ee:	9801      	ldr	r0, [sp, #4]
    15f0:	f7ff ffa9 	bl	1546 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    15f4:	e003      	b.n	15fe <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    15f6:	9801      	ldr	r0, [sp, #4]
    15f8:	f000 f85c 	bl	16b4 <OsIf_Timer_System_SetTimerFrequency>
            break;
    15fc:	bf00      	nop
    }
}
    15fe:	bf00      	nop
    1600:	b003      	add	sp, #12
    1602:	f85d fb04 	ldr.w	pc, [sp], #4

00001606 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1606:	b500      	push	{lr}
    1608:	b085      	sub	sp, #20
    160a:	9001      	str	r0, [sp, #4]
    160c:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    160e:	2300      	movs	r3, #0
    1610:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1612:	9b00      	ldr	r3, [sp, #0]
    1614:	2b00      	cmp	r3, #0
    1616:	d003      	beq.n	1620 <OsIf_MicrosToTicks+0x1a>
    1618:	9b00      	ldr	r3, [sp, #0]
    161a:	2b01      	cmp	r3, #1
    161c:	d005      	beq.n	162a <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    161e:	e009      	b.n	1634 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1620:	9801      	ldr	r0, [sp, #4]
    1622:	f7ff ff95 	bl	1550 <OsIf_Timer_Dummy_MicrosToTicks>
    1626:	9003      	str	r0, [sp, #12]
            break;
    1628:	e004      	b.n	1634 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    162a:	9801      	ldr	r0, [sp, #4]
    162c:	f000 f850 	bl	16d0 <OsIf_Timer_System_MicrosToTicks>
    1630:	9003      	str	r0, [sp, #12]
            break;
    1632:	bf00      	nop
    }

    return Value;
    1634:	9b03      	ldr	r3, [sp, #12]
}
    1636:	4618      	mov	r0, r3
    1638:	b005      	add	sp, #20
    163a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00001640 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1640:	b500      	push	{lr}
    1642:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1644:	2300      	movs	r3, #0
    1646:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1648:	4a09      	ldr	r2, [pc, #36]	; (1670 <OsIf_Timer_System_Init+0x30>)
    164a:	9b01      	ldr	r3, [sp, #4]
    164c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1650:	685a      	ldr	r2, [r3, #4]
    1652:	4908      	ldr	r1, [pc, #32]	; (1674 <OsIf_Timer_System_Init+0x34>)
    1654:	9b01      	ldr	r3, [sp, #4]
    1656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    165a:	4a06      	ldr	r2, [pc, #24]	; (1674 <OsIf_Timer_System_Init+0x34>)
    165c:	9b01      	ldr	r3, [sp, #4]
    165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1662:	4618      	mov	r0, r3
    1664:	f000 f868 	bl	1738 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1668:	bf00      	nop
    166a:	b003      	add	sp, #12
    166c:	f85d fb04 	ldr.w	pc, [sp], #4
    1670:	000087a8 	.word	0x000087a8
    1674:	1fff8b40 	.word	0x1fff8b40

00001678 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1678:	b500      	push	{lr}
    167a:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    167c:	2300      	movs	r3, #0
    167e:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1680:	2300      	movs	r3, #0
    1682:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1684:	f000 f86c 	bl	1760 <OsIf_Timer_System_Internal_GetCounter>
    1688:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    168a:	9b01      	ldr	r3, [sp, #4]
}
    168c:	4618      	mov	r0, r3
    168e:	b003      	add	sp, #12
    1690:	f85d fb04 	ldr.w	pc, [sp], #4

00001694 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1694:	b500      	push	{lr}
    1696:	b085      	sub	sp, #20
    1698:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    169a:	2300      	movs	r3, #0
    169c:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    169e:	2300      	movs	r3, #0
    16a0:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    16a2:	9801      	ldr	r0, [sp, #4]
    16a4:	f000 f864 	bl	1770 <OsIf_Timer_System_Internal_GetElapsed>
    16a8:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    16aa:	9b03      	ldr	r3, [sp, #12]
}
    16ac:	4618      	mov	r0, r3
    16ae:	b005      	add	sp, #20
    16b0:	f85d fb04 	ldr.w	pc, [sp], #4

000016b4 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    16b4:	b084      	sub	sp, #16
    16b6:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    16b8:	2300      	movs	r3, #0
    16ba:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    16bc:	4903      	ldr	r1, [pc, #12]	; (16cc <OsIf_Timer_System_SetTimerFrequency+0x18>)
    16be:	9b03      	ldr	r3, [sp, #12]
    16c0:	9a01      	ldr	r2, [sp, #4]
    16c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    16c6:	bf00      	nop
    16c8:	b004      	add	sp, #16
    16ca:	4770      	bx	lr
    16cc:	1fff8b40 	.word	0x1fff8b40

000016d0 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    16d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    16d2:	b087      	sub	sp, #28
    16d4:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    16d6:	2100      	movs	r1, #0
    16d8:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    16da:	2100      	movs	r1, #0
    16dc:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    16de:	9901      	ldr	r1, [sp, #4]
    16e0:	2000      	movs	r0, #0
    16e2:	460e      	mov	r6, r1
    16e4:	4607      	mov	r7, r0
    16e6:	4812      	ldr	r0, [pc, #72]	; (1730 <OsIf_Timer_System_MicrosToTicks+0x60>)
    16e8:	9904      	ldr	r1, [sp, #16]
    16ea:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    16ee:	2000      	movs	r0, #0
    16f0:	460c      	mov	r4, r1
    16f2:	4605      	mov	r5, r0
    16f4:	fb04 f007 	mul.w	r0, r4, r7
    16f8:	fb06 f105 	mul.w	r1, r6, r5
    16fc:	4401      	add	r1, r0
    16fe:	fba6 2304 	umull	r2, r3, r6, r4
    1702:	4419      	add	r1, r3
    1704:	460b      	mov	r3, r1
    1706:	e9cd 2302 	strd	r2, r3, [sp, #8]
    170a:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    170e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1712:	4a08      	ldr	r2, [pc, #32]	; (1734 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1714:	f04f 0300 	mov.w	r3, #0
    1718:	f7fe ff44 	bl	5a4 <__aeabi_uldivmod>
    171c:	4602      	mov	r2, r0
    171e:	460b      	mov	r3, r1
    1720:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1724:	9b02      	ldr	r3, [sp, #8]
    1726:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1728:	9b05      	ldr	r3, [sp, #20]
}
    172a:	4618      	mov	r0, r3
    172c:	b007      	add	sp, #28
    172e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1730:	1fff8b40 	.word	0x1fff8b40
    1734:	000f4240 	.word	0x000f4240

00001738 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1738:	b082      	sub	sp, #8
    173a:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    173c:	4b07      	ldr	r3, [pc, #28]	; (175c <OsIf_Timer_System_Internal_Init+0x24>)
    173e:	2200      	movs	r2, #0
    1740:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1742:	4b06      	ldr	r3, [pc, #24]	; (175c <OsIf_Timer_System_Internal_Init+0x24>)
    1744:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1748:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    174a:	4b04      	ldr	r3, [pc, #16]	; (175c <OsIf_Timer_System_Internal_Init+0x24>)
    174c:	2200      	movs	r2, #0
    174e:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1750:	4b02      	ldr	r3, [pc, #8]	; (175c <OsIf_Timer_System_Internal_Init+0x24>)
    1752:	2205      	movs	r2, #5
    1754:	601a      	str	r2, [r3, #0]
}
    1756:	bf00      	nop
    1758:	b002      	add	sp, #8
    175a:	4770      	bx	lr
    175c:	e000e010 	.word	0xe000e010

00001760 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1760:	4b02      	ldr	r3, [pc, #8]	; (176c <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1762:	689b      	ldr	r3, [r3, #8]
    1764:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1768:	4618      	mov	r0, r3
    176a:	4770      	bx	lr
    176c:	e000e010 	.word	0xe000e010

00001770 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1770:	b084      	sub	sp, #16
    1772:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1774:	4b10      	ldr	r3, [pc, #64]	; (17b8 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1776:	689b      	ldr	r3, [r3, #8]
    1778:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    177c:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    177e:	2300      	movs	r3, #0
    1780:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1782:	9b01      	ldr	r3, [sp, #4]
    1784:	681b      	ldr	r3, [r3, #0]
    1786:	9a02      	ldr	r2, [sp, #8]
    1788:	429a      	cmp	r2, r3
    178a:	d909      	bls.n	17a0 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    178c:	9b01      	ldr	r3, [sp, #4]
    178e:	681a      	ldr	r2, [r3, #0]
    1790:	9b02      	ldr	r3, [sp, #8]
    1792:	1ad3      	subs	r3, r2, r3
    1794:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1798:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    179c:	9303      	str	r3, [sp, #12]
    179e:	e004      	b.n	17aa <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    17a0:	9b01      	ldr	r3, [sp, #4]
    17a2:	681a      	ldr	r2, [r3, #0]
    17a4:	9b02      	ldr	r3, [sp, #8]
    17a6:	1ad3      	subs	r3, r2, r3
    17a8:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    17aa:	9b01      	ldr	r3, [sp, #4]
    17ac:	9a02      	ldr	r2, [sp, #8]
    17ae:	601a      	str	r2, [r3, #0]

    return dif;
    17b0:	9b03      	ldr	r3, [sp, #12]
}
    17b2:	4618      	mov	r0, r3
    17b4:	b004      	add	sp, #16
    17b6:	4770      	bx	lr
    17b8:	e000e010 	.word	0xe000e010

000017bc <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    17bc:	b082      	sub	sp, #8
    17be:	9001      	str	r0, [sp, #4]
    17c0:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    17c2:	bf00      	nop
    17c4:	b002      	add	sp, #8
    17c6:	4770      	bx	lr

000017c8 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    17c8:	b500      	push	{lr}
    17ca:	b085      	sub	sp, #20
    17cc:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    17ce:	4b24      	ldr	r3, [pc, #144]	; (1860 <Clock_Ip_UpdateDriverContext+0x98>)
    17d0:	2201      	movs	r2, #1
    17d2:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    17d4:	4b23      	ldr	r3, [pc, #140]	; (1864 <Clock_Ip_UpdateDriverContext+0x9c>)
    17d6:	681b      	ldr	r3, [r3, #0]
    17d8:	2102      	movs	r1, #2
    17da:	4618      	mov	r0, r3
    17dc:	f003 fc32 	bl	5044 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    17e0:	2300      	movs	r3, #0
    17e2:	f88d 300f 	strb.w	r3, [sp, #15]
    17e6:	e015      	b.n	1814 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    17e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    17ec:	9a01      	ldr	r2, [sp, #4]
    17ee:	334a      	adds	r3, #74	; 0x4a
    17f0:	00db      	lsls	r3, r3, #3
    17f2:	4413      	add	r3, r2
    17f4:	6858      	ldr	r0, [r3, #4]
    17f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    17fa:	9a01      	ldr	r2, [sp, #4]
    17fc:	334a      	adds	r3, #74	; 0x4a
    17fe:	00db      	lsls	r3, r3, #3
    1800:	4413      	add	r3, r2
    1802:	689b      	ldr	r3, [r3, #8]
    1804:	4619      	mov	r1, r3
    1806:	f001 fadc 	bl	2dc2 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    180a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    180e:	3301      	adds	r3, #1
    1810:	f88d 300f 	strb.w	r3, [sp, #15]
    1814:	9b01      	ldr	r3, [sp, #4]
    1816:	7bdb      	ldrb	r3, [r3, #15]
    1818:	f89d 200f 	ldrb.w	r2, [sp, #15]
    181c:	429a      	cmp	r2, r3
    181e:	d3e3      	bcc.n	17e8 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1820:	f000 f824 	bl	186c <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1824:	2301      	movs	r3, #1
    1826:	f88d 300f 	strb.w	r3, [sp, #15]
    182a:	e00e      	b.n	184a <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    182c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1830:	9b01      	ldr	r3, [sp, #4]
    1832:	327e      	adds	r2, #126	; 0x7e
    1834:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1838:	490b      	ldr	r1, [pc, #44]	; (1868 <Clock_Ip_UpdateDriverContext+0xa0>)
    183a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    183e:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1840:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1844:	3301      	adds	r3, #1
    1846:	f88d 300f 	strb.w	r3, [sp, #15]
    184a:	9b01      	ldr	r3, [sp, #4]
    184c:	7cdb      	ldrb	r3, [r3, #19]
    184e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1852:	429a      	cmp	r2, r3
    1854:	d3ea      	bcc.n	182c <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1856:	bf00      	nop
    1858:	bf00      	nop
    185a:	b005      	add	sp, #20
    185c:	f85d fb04 	ldr.w	pc, [sp], #4
    1860:	1fff8b10 	.word	0x1fff8b10
    1864:	1fff8b44 	.word	0x1fff8b44
    1868:	1fff8b50 	.word	0x1fff8b50

0000186c <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    186c:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    186e:	4b23      	ldr	r3, [pc, #140]	; (18fc <Clock_Ip_CallEmptyCallbacks+0x90>)
    1870:	781b      	ldrb	r3, [r3, #0]
    1872:	f083 0301 	eor.w	r3, r3, #1
    1876:	b2db      	uxtb	r3, r3
    1878:	2b00      	cmp	r3, #0
    187a:	d03d      	beq.n	18f8 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    187c:	4b1f      	ldr	r3, [pc, #124]	; (18fc <Clock_Ip_CallEmptyCallbacks+0x90>)
    187e:	2201      	movs	r2, #1
    1880:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1882:	4b1f      	ldr	r3, [pc, #124]	; (1900 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1884:	685b      	ldr	r3, [r3, #4]
    1886:	2100      	movs	r1, #0
    1888:	2000      	movs	r0, #0
    188a:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    188c:	4b1c      	ldr	r3, [pc, #112]	; (1900 <Clock_Ip_CallEmptyCallbacks+0x94>)
    188e:	689b      	ldr	r3, [r3, #8]
    1890:	2057      	movs	r0, #87	; 0x57
    1892:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1894:	4b1b      	ldr	r3, [pc, #108]	; (1904 <Clock_Ip_CallEmptyCallbacks+0x98>)
    1896:	681b      	ldr	r3, [r3, #0]
    1898:	2000      	movs	r0, #0
    189a:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    189c:	4b1a      	ldr	r3, [pc, #104]	; (1908 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    189e:	681b      	ldr	r3, [r3, #0]
    18a0:	2000      	movs	r0, #0
    18a2:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    18a4:	4b19      	ldr	r3, [pc, #100]	; (190c <Clock_Ip_CallEmptyCallbacks+0xa0>)
    18a6:	681b      	ldr	r3, [r3, #0]
    18a8:	2000      	movs	r0, #0
    18aa:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    18ac:	4b18      	ldr	r3, [pc, #96]	; (1910 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    18ae:	685b      	ldr	r3, [r3, #4]
    18b0:	2000      	movs	r0, #0
    18b2:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    18b4:	4b16      	ldr	r3, [pc, #88]	; (1910 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    18b6:	689b      	ldr	r3, [r3, #8]
    18b8:	2057      	movs	r0, #87	; 0x57
    18ba:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    18bc:	4b15      	ldr	r3, [pc, #84]	; (1914 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    18be:	681b      	ldr	r3, [r3, #0]
    18c0:	2000      	movs	r0, #0
    18c2:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    18c4:	4b13      	ldr	r3, [pc, #76]	; (1914 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    18c6:	685b      	ldr	r3, [r3, #4]
    18c8:	2100      	movs	r1, #0
    18ca:	2057      	movs	r0, #87	; 0x57
    18cc:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    18ce:	4b12      	ldr	r3, [pc, #72]	; (1918 <Clock_Ip_CallEmptyCallbacks+0xac>)
    18d0:	681b      	ldr	r3, [r3, #0]
    18d2:	2000      	movs	r0, #0
    18d4:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    18d6:	4b11      	ldr	r3, [pc, #68]	; (191c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    18d8:	685b      	ldr	r3, [r3, #4]
    18da:	2000      	movs	r0, #0
    18dc:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    18de:	4b0f      	ldr	r3, [pc, #60]	; (191c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    18e0:	689b      	ldr	r3, [r3, #8]
    18e2:	2057      	movs	r0, #87	; 0x57
    18e4:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    18e6:	4b0e      	ldr	r3, [pc, #56]	; (1920 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    18e8:	685b      	ldr	r3, [r3, #4]
    18ea:	2000      	movs	r0, #0
    18ec:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    18ee:	4b0d      	ldr	r3, [pc, #52]	; (1924 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    18f0:	681b      	ldr	r3, [r3, #0]
    18f2:	2100      	movs	r1, #0
    18f4:	2000      	movs	r0, #0
    18f6:	4798      	blx	r3
    }
}
    18f8:	bf00      	nop
    18fa:	bd08      	pop	{r3, pc}
    18fc:	1fff8b48 	.word	0x1fff8b48
    1900:	00008278 	.word	0x00008278
    1904:	0000818c 	.word	0x0000818c
    1908:	000081c8 	.word	0x000081c8
    190c:	000081d0 	.word	0x000081d0
    1910:	000081f8 	.word	0x000081f8
    1914:	00008204 	.word	0x00008204
    1918:	0000823c 	.word	0x0000823c
    191c:	00008288 	.word	0x00008288
    1920:	000082b4 	.word	0x000082b4
    1924:	000082b0 	.word	0x000082b0

00001928 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1928:	b500      	push	{lr}
    192a:	b085      	sub	sp, #20
    192c:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    192e:	9b01      	ldr	r3, [sp, #4]
    1930:	7adb      	ldrb	r3, [r3, #11]
    1932:	9303      	str	r3, [sp, #12]
    1934:	e01f      	b.n	1976 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1936:	9b03      	ldr	r3, [sp, #12]
    1938:	1e5a      	subs	r2, r3, #1
    193a:	9b01      	ldr	r3, [sp, #4]
    193c:	320d      	adds	r2, #13
    193e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1942:	495a      	ldr	r1, [pc, #360]	; (1aac <Clock_Ip_ResetClockConfiguration+0x184>)
    1944:	4613      	mov	r3, r2
    1946:	00db      	lsls	r3, r3, #3
    1948:	4413      	add	r3, r2
    194a:	440b      	add	r3, r1
    194c:	3301      	adds	r3, #1
    194e:	781b      	ldrb	r3, [r3, #0]
    1950:	461a      	mov	r2, r3
    1952:	4b57      	ldr	r3, [pc, #348]	; (1ab0 <Clock_Ip_ResetClockConfiguration+0x188>)
    1954:	5c9b      	ldrb	r3, [r3, r2]
    1956:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1958:	4a56      	ldr	r2, [pc, #344]	; (1ab4 <Clock_Ip_ResetClockConfiguration+0x18c>)
    195a:	9b02      	ldr	r3, [sp, #8]
    195c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1960:	9a03      	ldr	r2, [sp, #12]
    1962:	3a01      	subs	r2, #1
    1964:	320d      	adds	r2, #13
    1966:	00d2      	lsls	r2, r2, #3
    1968:	9901      	ldr	r1, [sp, #4]
    196a:	440a      	add	r2, r1
    196c:	4610      	mov	r0, r2
    196e:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1970:	9b03      	ldr	r3, [sp, #12]
    1972:	3b01      	subs	r3, #1
    1974:	9303      	str	r3, [sp, #12]
    1976:	9b03      	ldr	r3, [sp, #12]
    1978:	2b00      	cmp	r3, #0
    197a:	d1dc      	bne.n	1936 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    197c:	9b01      	ldr	r3, [sp, #4]
    197e:	7b9b      	ldrb	r3, [r3, #14]
    1980:	9303      	str	r3, [sp, #12]
    1982:	e026      	b.n	19d2 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1984:	9b03      	ldr	r3, [sp, #12]
    1986:	3b01      	subs	r3, #1
    1988:	9a01      	ldr	r2, [sp, #4]
    198a:	3324      	adds	r3, #36	; 0x24
    198c:	011b      	lsls	r3, r3, #4
    198e:	4413      	add	r3, r2
    1990:	3304      	adds	r3, #4
    1992:	681a      	ldr	r2, [r3, #0]
    1994:	4945      	ldr	r1, [pc, #276]	; (1aac <Clock_Ip_ResetClockConfiguration+0x184>)
    1996:	4613      	mov	r3, r2
    1998:	00db      	lsls	r3, r3, #3
    199a:	4413      	add	r3, r2
    199c:	440b      	add	r3, r1
    199e:	3301      	adds	r3, #1
    19a0:	781b      	ldrb	r3, [r3, #0]
    19a2:	461a      	mov	r2, r3
    19a4:	4b44      	ldr	r3, [pc, #272]	; (1ab8 <Clock_Ip_ResetClockConfiguration+0x190>)
    19a6:	5c9b      	ldrb	r3, [r3, r2]
    19a8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    19aa:	4944      	ldr	r1, [pc, #272]	; (1abc <Clock_Ip_ResetClockConfiguration+0x194>)
    19ac:	9a02      	ldr	r2, [sp, #8]
    19ae:	4613      	mov	r3, r2
    19b0:	005b      	lsls	r3, r3, #1
    19b2:	4413      	add	r3, r2
    19b4:	009b      	lsls	r3, r3, #2
    19b6:	440b      	add	r3, r1
    19b8:	681b      	ldr	r3, [r3, #0]
    19ba:	9a03      	ldr	r2, [sp, #12]
    19bc:	3a01      	subs	r2, #1
    19be:	3224      	adds	r2, #36	; 0x24
    19c0:	0112      	lsls	r2, r2, #4
    19c2:	9901      	ldr	r1, [sp, #4]
    19c4:	440a      	add	r2, r1
    19c6:	3204      	adds	r2, #4
    19c8:	4610      	mov	r0, r2
    19ca:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    19cc:	9b03      	ldr	r3, [sp, #12]
    19ce:	3b01      	subs	r3, #1
    19d0:	9303      	str	r3, [sp, #12]
    19d2:	9b03      	ldr	r3, [sp, #12]
    19d4:	2b00      	cmp	r3, #0
    19d6:	d1d5      	bne.n	1984 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    19d8:	9b01      	ldr	r3, [sp, #4]
    19da:	7a9b      	ldrb	r3, [r3, #10]
    19dc:	9303      	str	r3, [sp, #12]
    19de:	e02a      	b.n	1a36 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    19e0:	9b03      	ldr	r3, [sp, #12]
    19e2:	1e5a      	subs	r2, r3, #1
    19e4:	9901      	ldr	r1, [sp, #4]
    19e6:	4613      	mov	r3, r2
    19e8:	009b      	lsls	r3, r3, #2
    19ea:	4413      	add	r3, r2
    19ec:	00db      	lsls	r3, r3, #3
    19ee:	440b      	add	r3, r1
    19f0:	3340      	adds	r3, #64	; 0x40
    19f2:	681a      	ldr	r2, [r3, #0]
    19f4:	492d      	ldr	r1, [pc, #180]	; (1aac <Clock_Ip_ResetClockConfiguration+0x184>)
    19f6:	4613      	mov	r3, r2
    19f8:	00db      	lsls	r3, r3, #3
    19fa:	4413      	add	r3, r2
    19fc:	440b      	add	r3, r1
    19fe:	3301      	adds	r3, #1
    1a00:	781b      	ldrb	r3, [r3, #0]
    1a02:	461a      	mov	r2, r3
    1a04:	4b2e      	ldr	r3, [pc, #184]	; (1ac0 <Clock_Ip_ResetClockConfiguration+0x198>)
    1a06:	5c9b      	ldrb	r3, [r3, r2]
    1a08:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    1a0a:	492e      	ldr	r1, [pc, #184]	; (1ac4 <Clock_Ip_ResetClockConfiguration+0x19c>)
    1a0c:	9a02      	ldr	r2, [sp, #8]
    1a0e:	4613      	mov	r3, r2
    1a10:	009b      	lsls	r3, r3, #2
    1a12:	4413      	add	r3, r2
    1a14:	009b      	lsls	r3, r3, #2
    1a16:	440b      	add	r3, r1
    1a18:	6819      	ldr	r1, [r3, #0]
    1a1a:	9b03      	ldr	r3, [sp, #12]
    1a1c:	1e5a      	subs	r2, r3, #1
    1a1e:	4613      	mov	r3, r2
    1a20:	009b      	lsls	r3, r3, #2
    1a22:	4413      	add	r3, r2
    1a24:	00db      	lsls	r3, r3, #3
    1a26:	3340      	adds	r3, #64	; 0x40
    1a28:	9a01      	ldr	r2, [sp, #4]
    1a2a:	4413      	add	r3, r2
    1a2c:	4618      	mov	r0, r3
    1a2e:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1a30:	9b03      	ldr	r3, [sp, #12]
    1a32:	3b01      	subs	r3, #1
    1a34:	9303      	str	r3, [sp, #12]
    1a36:	9b03      	ldr	r3, [sp, #12]
    1a38:	2b00      	cmp	r3, #0
    1a3a:	d1d1      	bne.n	19e0 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1a3c:	9b01      	ldr	r3, [sp, #4]
    1a3e:	7a5b      	ldrb	r3, [r3, #9]
    1a40:	9303      	str	r3, [sp, #12]
    1a42:	e02b      	b.n	1a9c <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1a44:	9b03      	ldr	r3, [sp, #12]
    1a46:	1e5a      	subs	r2, r3, #1
    1a48:	9901      	ldr	r1, [sp, #4]
    1a4a:	4613      	mov	r3, r2
    1a4c:	009b      	lsls	r3, r3, #2
    1a4e:	4413      	add	r3, r2
    1a50:	009b      	lsls	r3, r3, #2
    1a52:	440b      	add	r3, r1
    1a54:	332c      	adds	r3, #44	; 0x2c
    1a56:	681a      	ldr	r2, [r3, #0]
    1a58:	4914      	ldr	r1, [pc, #80]	; (1aac <Clock_Ip_ResetClockConfiguration+0x184>)
    1a5a:	4613      	mov	r3, r2
    1a5c:	00db      	lsls	r3, r3, #3
    1a5e:	4413      	add	r3, r2
    1a60:	440b      	add	r3, r1
    1a62:	3301      	adds	r3, #1
    1a64:	781b      	ldrb	r3, [r3, #0]
    1a66:	461a      	mov	r2, r3
    1a68:	4b17      	ldr	r3, [pc, #92]	; (1ac8 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    1a6a:	5c9b      	ldrb	r3, [r3, r2]
    1a6c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1a6e:	4917      	ldr	r1, [pc, #92]	; (1acc <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1a70:	9a02      	ldr	r2, [sp, #8]
    1a72:	4613      	mov	r3, r2
    1a74:	009b      	lsls	r3, r3, #2
    1a76:	4413      	add	r3, r2
    1a78:	009b      	lsls	r3, r3, #2
    1a7a:	440b      	add	r3, r1
    1a7c:	6819      	ldr	r1, [r3, #0]
    1a7e:	9b03      	ldr	r3, [sp, #12]
    1a80:	1e5a      	subs	r2, r3, #1
    1a82:	4613      	mov	r3, r2
    1a84:	009b      	lsls	r3, r3, #2
    1a86:	4413      	add	r3, r2
    1a88:	009b      	lsls	r3, r3, #2
    1a8a:	3328      	adds	r3, #40	; 0x28
    1a8c:	9a01      	ldr	r2, [sp, #4]
    1a8e:	4413      	add	r3, r2
    1a90:	3304      	adds	r3, #4
    1a92:	4618      	mov	r0, r3
    1a94:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1a96:	9b03      	ldr	r3, [sp, #12]
    1a98:	3b01      	subs	r3, #1
    1a9a:	9303      	str	r3, [sp, #12]
    1a9c:	9b03      	ldr	r3, [sp, #12]
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	d1d0      	bne.n	1a44 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    1aa2:	bf00      	nop
    1aa4:	bf00      	nop
    1aa6:	b005      	add	sp, #20
    1aa8:	f85d fb04 	ldr.w	pc, [sp], #4
    1aac:	00007c7c 	.word	0x00007c7c
    1ab0:	00007c4c 	.word	0x00007c4c
    1ab4:	000082b4 	.word	0x000082b4
    1ab8:	00007c2c 	.word	0x00007c2c
    1abc:	000081f8 	.word	0x000081f8
    1ac0:	00007c3c 	.word	0x00007c3c
    1ac4:	00008288 	.word	0x00008288
    1ac8:	00007bfc 	.word	0x00007bfc
    1acc:	000081d0 	.word	0x000081d0

00001ad0 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    1ad0:	b500      	push	{lr}
    1ad2:	b085      	sub	sp, #20
    1ad4:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    1ad6:	2301      	movs	r3, #1
    1ad8:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    1ada:	9801      	ldr	r0, [sp, #4]
    1adc:	f000 f818 	bl	1b10 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    1ae0:	4b0a      	ldr	r3, [pc, #40]	; (1b0c <Clock_Ip_Init+0x3c>)
    1ae2:	781b      	ldrb	r3, [r3, #0]
    1ae4:	2b00      	cmp	r3, #0
    1ae6:	d00a      	beq.n	1afe <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    1ae8:	f000 fb74 	bl	21d4 <Clock_Ip_GetPllStatus>
    1aec:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    1aee:	9b02      	ldr	r3, [sp, #8]
    1af0:	2b00      	cmp	r3, #0
    1af2:	d106      	bne.n	1b02 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    1af4:	f000 fbf2 	bl	22dc <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    1af8:	2300      	movs	r3, #0
    1afa:	9303      	str	r3, [sp, #12]
    1afc:	e001      	b.n	1b02 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    1afe:	2300      	movs	r3, #0
    1b00:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    1b02:	9b03      	ldr	r3, [sp, #12]
}
    1b04:	4618      	mov	r0, r3
    1b06:	b005      	add	sp, #20
    1b08:	f85d fb04 	ldr.w	pc, [sp], #4
    1b0c:	1fff8b4c 	.word	0x1fff8b4c

00001b10 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    1b10:	b510      	push	{r4, lr}
    1b12:	b084      	sub	sp, #16
    1b14:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    1b16:	4a9f      	ldr	r2, [pc, #636]	; (1d94 <Clock_Ip_InitClock+0x284>)
    1b18:	9b01      	ldr	r3, [sp, #4]
    1b1a:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    1b1c:	2101      	movs	r1, #1
    1b1e:	9801      	ldr	r0, [sp, #4]
    1b20:	f003 fa90 	bl	5044 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1b24:	4b9b      	ldr	r3, [pc, #620]	; (1d94 <Clock_Ip_InitClock+0x284>)
    1b26:	681b      	ldr	r3, [r3, #0]
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d030      	beq.n	1b8e <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1b2c:	2300      	movs	r3, #0
    1b2e:	9303      	str	r3, [sp, #12]
    1b30:	e027      	b.n	1b82 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1b32:	9901      	ldr	r1, [sp, #4]
    1b34:	9a03      	ldr	r2, [sp, #12]
    1b36:	4613      	mov	r3, r2
    1b38:	009b      	lsls	r3, r3, #2
    1b3a:	4413      	add	r3, r2
    1b3c:	009b      	lsls	r3, r3, #2
    1b3e:	440b      	add	r3, r1
    1b40:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1b44:	681a      	ldr	r2, [r3, #0]
    1b46:	4994      	ldr	r1, [pc, #592]	; (1d98 <Clock_Ip_InitClock+0x288>)
    1b48:	4613      	mov	r3, r2
    1b4a:	00db      	lsls	r3, r3, #3
    1b4c:	4413      	add	r3, r2
    1b4e:	440b      	add	r3, r1
    1b50:	3301      	adds	r3, #1
    1b52:	781b      	ldrb	r3, [r3, #0]
    1b54:	461a      	mov	r2, r3
    1b56:	4b91      	ldr	r3, [pc, #580]	; (1d9c <Clock_Ip_InitClock+0x28c>)
    1b58:	5c9b      	ldrb	r3, [r3, r2]
    1b5a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    1b5c:	4a90      	ldr	r2, [pc, #576]	; (1da0 <Clock_Ip_InitClock+0x290>)
    1b5e:	9b02      	ldr	r3, [sp, #8]
    1b60:	011b      	lsls	r3, r3, #4
    1b62:	4413      	add	r3, r2
    1b64:	6819      	ldr	r1, [r3, #0]
    1b66:	9a03      	ldr	r2, [sp, #12]
    1b68:	4613      	mov	r3, r2
    1b6a:	009b      	lsls	r3, r3, #2
    1b6c:	4413      	add	r3, r2
    1b6e:	009b      	lsls	r3, r3, #2
    1b70:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1b74:	9a01      	ldr	r2, [sp, #4]
    1b76:	4413      	add	r3, r2
    1b78:	4618      	mov	r0, r3
    1b7a:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1b7c:	9b03      	ldr	r3, [sp, #12]
    1b7e:	3301      	adds	r3, #1
    1b80:	9303      	str	r3, [sp, #12]
    1b82:	9b01      	ldr	r3, [sp, #4]
    1b84:	7c9b      	ldrb	r3, [r3, #18]
    1b86:	461a      	mov	r2, r3
    1b88:	9b03      	ldr	r3, [sp, #12]
    1b8a:	4293      	cmp	r3, r2
    1b8c:	d3d1      	bcc.n	1b32 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    1b8e:	9801      	ldr	r0, [sp, #4]
    1b90:	f7ff feca 	bl	1928 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1b94:	2300      	movs	r3, #0
    1b96:	9303      	str	r3, [sp, #12]
    1b98:	e029      	b.n	1bee <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1b9a:	9901      	ldr	r1, [sp, #4]
    1b9c:	9a03      	ldr	r2, [sp, #12]
    1b9e:	4613      	mov	r3, r2
    1ba0:	005b      	lsls	r3, r3, #1
    1ba2:	4413      	add	r3, r2
    1ba4:	009b      	lsls	r3, r3, #2
    1ba6:	440b      	add	r3, r1
    1ba8:	3314      	adds	r3, #20
    1baa:	681a      	ldr	r2, [r3, #0]
    1bac:	497a      	ldr	r1, [pc, #488]	; (1d98 <Clock_Ip_InitClock+0x288>)
    1bae:	4613      	mov	r3, r2
    1bb0:	00db      	lsls	r3, r3, #3
    1bb2:	4413      	add	r3, r2
    1bb4:	440b      	add	r3, r1
    1bb6:	3301      	adds	r3, #1
    1bb8:	781b      	ldrb	r3, [r3, #0]
    1bba:	461a      	mov	r2, r3
    1bbc:	4b79      	ldr	r3, [pc, #484]	; (1da4 <Clock_Ip_InitClock+0x294>)
    1bbe:	5c9b      	ldrb	r3, [r3, r2]
    1bc0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    1bc2:	4979      	ldr	r1, [pc, #484]	; (1da8 <Clock_Ip_InitClock+0x298>)
    1bc4:	9a02      	ldr	r2, [sp, #8]
    1bc6:	4613      	mov	r3, r2
    1bc8:	005b      	lsls	r3, r3, #1
    1bca:	4413      	add	r3, r2
    1bcc:	009b      	lsls	r3, r3, #2
    1bce:	440b      	add	r3, r1
    1bd0:	6819      	ldr	r1, [r3, #0]
    1bd2:	9a03      	ldr	r2, [sp, #12]
    1bd4:	4613      	mov	r3, r2
    1bd6:	005b      	lsls	r3, r3, #1
    1bd8:	4413      	add	r3, r2
    1bda:	009b      	lsls	r3, r3, #2
    1bdc:	3310      	adds	r3, #16
    1bde:	9a01      	ldr	r2, [sp, #4]
    1be0:	4413      	add	r3, r2
    1be2:	3304      	adds	r3, #4
    1be4:	4618      	mov	r0, r3
    1be6:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1be8:	9b03      	ldr	r3, [sp, #12]
    1bea:	3301      	adds	r3, #1
    1bec:	9303      	str	r3, [sp, #12]
    1bee:	9b01      	ldr	r3, [sp, #4]
    1bf0:	7a1b      	ldrb	r3, [r3, #8]
    1bf2:	461a      	mov	r2, r3
    1bf4:	9b03      	ldr	r3, [sp, #12]
    1bf6:	4293      	cmp	r3, r2
    1bf8:	d3cf      	bcc.n	1b9a <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1bfa:	2300      	movs	r3, #0
    1bfc:	9303      	str	r3, [sp, #12]
    1bfe:	e02a      	b.n	1c56 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1c00:	9901      	ldr	r1, [sp, #4]
    1c02:	9a03      	ldr	r2, [sp, #12]
    1c04:	4613      	mov	r3, r2
    1c06:	009b      	lsls	r3, r3, #2
    1c08:	4413      	add	r3, r2
    1c0a:	009b      	lsls	r3, r3, #2
    1c0c:	440b      	add	r3, r1
    1c0e:	332c      	adds	r3, #44	; 0x2c
    1c10:	681a      	ldr	r2, [r3, #0]
    1c12:	4961      	ldr	r1, [pc, #388]	; (1d98 <Clock_Ip_InitClock+0x288>)
    1c14:	4613      	mov	r3, r2
    1c16:	00db      	lsls	r3, r3, #3
    1c18:	4413      	add	r3, r2
    1c1a:	440b      	add	r3, r1
    1c1c:	3301      	adds	r3, #1
    1c1e:	781b      	ldrb	r3, [r3, #0]
    1c20:	461a      	mov	r2, r3
    1c22:	4b62      	ldr	r3, [pc, #392]	; (1dac <Clock_Ip_InitClock+0x29c>)
    1c24:	5c9b      	ldrb	r3, [r3, r2]
    1c26:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    1c28:	4961      	ldr	r1, [pc, #388]	; (1db0 <Clock_Ip_InitClock+0x2a0>)
    1c2a:	9a02      	ldr	r2, [sp, #8]
    1c2c:	4613      	mov	r3, r2
    1c2e:	009b      	lsls	r3, r3, #2
    1c30:	4413      	add	r3, r2
    1c32:	009b      	lsls	r3, r3, #2
    1c34:	440b      	add	r3, r1
    1c36:	3304      	adds	r3, #4
    1c38:	6819      	ldr	r1, [r3, #0]
    1c3a:	9a03      	ldr	r2, [sp, #12]
    1c3c:	4613      	mov	r3, r2
    1c3e:	009b      	lsls	r3, r3, #2
    1c40:	4413      	add	r3, r2
    1c42:	009b      	lsls	r3, r3, #2
    1c44:	3328      	adds	r3, #40	; 0x28
    1c46:	9a01      	ldr	r2, [sp, #4]
    1c48:	4413      	add	r3, r2
    1c4a:	3304      	adds	r3, #4
    1c4c:	4618      	mov	r0, r3
    1c4e:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1c50:	9b03      	ldr	r3, [sp, #12]
    1c52:	3301      	adds	r3, #1
    1c54:	9303      	str	r3, [sp, #12]
    1c56:	9b01      	ldr	r3, [sp, #4]
    1c58:	7a5b      	ldrb	r3, [r3, #9]
    1c5a:	461a      	mov	r2, r3
    1c5c:	9b03      	ldr	r3, [sp, #12]
    1c5e:	4293      	cmp	r3, r2
    1c60:	d3ce      	bcc.n	1c00 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    1c62:	9801      	ldr	r0, [sp, #4]
    1c64:	f7ff fdb0 	bl	17c8 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1c68:	2300      	movs	r3, #0
    1c6a:	9303      	str	r3, [sp, #12]
    1c6c:	e028      	b.n	1cc0 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    1c6e:	9901      	ldr	r1, [sp, #4]
    1c70:	9a03      	ldr	r2, [sp, #12]
    1c72:	4613      	mov	r3, r2
    1c74:	009b      	lsls	r3, r3, #2
    1c76:	4413      	add	r3, r2
    1c78:	009b      	lsls	r3, r3, #2
    1c7a:	440b      	add	r3, r1
    1c7c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1c80:	681a      	ldr	r2, [r3, #0]
    1c82:	4945      	ldr	r1, [pc, #276]	; (1d98 <Clock_Ip_InitClock+0x288>)
    1c84:	4613      	mov	r3, r2
    1c86:	00db      	lsls	r3, r3, #3
    1c88:	4413      	add	r3, r2
    1c8a:	440b      	add	r3, r1
    1c8c:	3301      	adds	r3, #1
    1c8e:	781b      	ldrb	r3, [r3, #0]
    1c90:	461a      	mov	r2, r3
    1c92:	4b48      	ldr	r3, [pc, #288]	; (1db4 <Clock_Ip_InitClock+0x2a4>)
    1c94:	5c9b      	ldrb	r3, [r3, r2]
    1c96:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    1c98:	4a47      	ldr	r2, [pc, #284]	; (1db8 <Clock_Ip_InitClock+0x2a8>)
    1c9a:	9b02      	ldr	r3, [sp, #8]
    1c9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1ca0:	9a03      	ldr	r2, [sp, #12]
    1ca2:	4613      	mov	r3, r2
    1ca4:	009b      	lsls	r3, r3, #2
    1ca6:	4413      	add	r3, r2
    1ca8:	009b      	lsls	r3, r3, #2
    1caa:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    1cae:	9a01      	ldr	r2, [sp, #4]
    1cb0:	4413      	add	r3, r2
    1cb2:	3304      	adds	r3, #4
    1cb4:	9903      	ldr	r1, [sp, #12]
    1cb6:	4618      	mov	r0, r3
    1cb8:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1cba:	9b03      	ldr	r3, [sp, #12]
    1cbc:	3301      	adds	r3, #1
    1cbe:	9303      	str	r3, [sp, #12]
    1cc0:	9b01      	ldr	r3, [sp, #4]
    1cc2:	7c5b      	ldrb	r3, [r3, #17]
    1cc4:	461a      	mov	r2, r3
    1cc6:	9b03      	ldr	r3, [sp, #12]
    1cc8:	4293      	cmp	r3, r2
    1cca:	d3d0      	bcc.n	1c6e <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1ccc:	2300      	movs	r3, #0
    1cce:	9303      	str	r3, [sp, #12]
    1cd0:	e026      	b.n	1d20 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1cd2:	9901      	ldr	r1, [sp, #4]
    1cd4:	9a03      	ldr	r2, [sp, #12]
    1cd6:	4613      	mov	r3, r2
    1cd8:	005b      	lsls	r3, r3, #1
    1cda:	4413      	add	r3, r2
    1cdc:	009b      	lsls	r3, r3, #2
    1cde:	440b      	add	r3, r1
    1ce0:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1ce4:	681a      	ldr	r2, [r3, #0]
    1ce6:	492c      	ldr	r1, [pc, #176]	; (1d98 <Clock_Ip_InitClock+0x288>)
    1ce8:	4613      	mov	r3, r2
    1cea:	00db      	lsls	r3, r3, #3
    1cec:	4413      	add	r3, r2
    1cee:	440b      	add	r3, r1
    1cf0:	3301      	adds	r3, #1
    1cf2:	781b      	ldrb	r3, [r3, #0]
    1cf4:	461a      	mov	r2, r3
    1cf6:	4b31      	ldr	r3, [pc, #196]	; (1dbc <Clock_Ip_InitClock+0x2ac>)
    1cf8:	5c9b      	ldrb	r3, [r3, r2]
    1cfa:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    1cfc:	4a30      	ldr	r2, [pc, #192]	; (1dc0 <Clock_Ip_InitClock+0x2b0>)
    1cfe:	9b02      	ldr	r3, [sp, #8]
    1d00:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    1d04:	9a03      	ldr	r2, [sp, #12]
    1d06:	4613      	mov	r3, r2
    1d08:	005b      	lsls	r3, r3, #1
    1d0a:	4413      	add	r3, r2
    1d0c:	009b      	lsls	r3, r3, #2
    1d0e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1d12:	9a01      	ldr	r2, [sp, #4]
    1d14:	4413      	add	r3, r2
    1d16:	4618      	mov	r0, r3
    1d18:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1d1a:	9b03      	ldr	r3, [sp, #12]
    1d1c:	3301      	adds	r3, #1
    1d1e:	9303      	str	r3, [sp, #12]
    1d20:	9b01      	ldr	r3, [sp, #4]
    1d22:	7b5b      	ldrb	r3, [r3, #13]
    1d24:	461a      	mov	r2, r3
    1d26:	9b03      	ldr	r3, [sp, #12]
    1d28:	4293      	cmp	r3, r2
    1d2a:	d3d2      	bcc.n	1cd2 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1d2c:	2300      	movs	r3, #0
    1d2e:	9303      	str	r3, [sp, #12]
    1d30:	e026      	b.n	1d80 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    1d32:	9901      	ldr	r1, [sp, #4]
    1d34:	9a03      	ldr	r2, [sp, #12]
    1d36:	4613      	mov	r3, r2
    1d38:	005b      	lsls	r3, r3, #1
    1d3a:	4413      	add	r3, r2
    1d3c:	009b      	lsls	r3, r3, #2
    1d3e:	440b      	add	r3, r1
    1d40:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1d44:	681a      	ldr	r2, [r3, #0]
    1d46:	4914      	ldr	r1, [pc, #80]	; (1d98 <Clock_Ip_InitClock+0x288>)
    1d48:	4613      	mov	r3, r2
    1d4a:	00db      	lsls	r3, r3, #3
    1d4c:	4413      	add	r3, r2
    1d4e:	440b      	add	r3, r1
    1d50:	3301      	adds	r3, #1
    1d52:	781b      	ldrb	r3, [r3, #0]
    1d54:	461a      	mov	r2, r3
    1d56:	4b1b      	ldr	r3, [pc, #108]	; (1dc4 <Clock_Ip_InitClock+0x2b4>)
    1d58:	5c9b      	ldrb	r3, [r3, r2]
    1d5a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    1d5c:	4a1a      	ldr	r2, [pc, #104]	; (1dc8 <Clock_Ip_InitClock+0x2b8>)
    1d5e:	9b02      	ldr	r3, [sp, #8]
    1d60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    1d64:	9a03      	ldr	r2, [sp, #12]
    1d66:	4613      	mov	r3, r2
    1d68:	005b      	lsls	r3, r3, #1
    1d6a:	4413      	add	r3, r2
    1d6c:	009b      	lsls	r3, r3, #2
    1d6e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1d72:	9a01      	ldr	r2, [sp, #4]
    1d74:	4413      	add	r3, r2
    1d76:	4618      	mov	r0, r3
    1d78:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1d7a:	9b03      	ldr	r3, [sp, #12]
    1d7c:	3301      	adds	r3, #1
    1d7e:	9303      	str	r3, [sp, #12]
    1d80:	9b01      	ldr	r3, [sp, #4]
    1d82:	7b1b      	ldrb	r3, [r3, #12]
    1d84:	461a      	mov	r2, r3
    1d86:	9b03      	ldr	r3, [sp, #12]
    1d88:	4293      	cmp	r3, r2
    1d8a:	d3d2      	bcc.n	1d32 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1d8c:	2300      	movs	r3, #0
    1d8e:	9303      	str	r3, [sp, #12]
    1d90:	e044      	b.n	1e1c <Clock_Ip_InitClock+0x30c>
    1d92:	bf00      	nop
    1d94:	1fff8b44 	.word	0x1fff8b44
    1d98:	00007c7c 	.word	0x00007c7c
    1d9c:	00007c6c 	.word	0x00007c6c
    1da0:	00008278 	.word	0x00008278
    1da4:	00007c0c 	.word	0x00007c0c
    1da8:	0000823c 	.word	0x0000823c
    1dac:	00007bfc 	.word	0x00007bfc
    1db0:	000081d0 	.word	0x000081d0
    1db4:	00007c5c 	.word	0x00007c5c
    1db8:	000082b0 	.word	0x000082b0
    1dbc:	00007bec 	.word	0x00007bec
    1dc0:	000081c8 	.word	0x000081c8
    1dc4:	00007bdc 	.word	0x00007bdc
    1dc8:	0000818c 	.word	0x0000818c
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1dcc:	9901      	ldr	r1, [sp, #4]
    1dce:	9a03      	ldr	r2, [sp, #12]
    1dd0:	4613      	mov	r3, r2
    1dd2:	005b      	lsls	r3, r3, #1
    1dd4:	4413      	add	r3, r2
    1dd6:	009b      	lsls	r3, r3, #2
    1dd8:	440b      	add	r3, r1
    1dda:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1dde:	681a      	ldr	r2, [r3, #0]
    1de0:	49ac      	ldr	r1, [pc, #688]	; (2094 <Clock_Ip_InitClock+0x584>)
    1de2:	4613      	mov	r3, r2
    1de4:	00db      	lsls	r3, r3, #3
    1de6:	4413      	add	r3, r2
    1de8:	440b      	add	r3, r1
    1dea:	3301      	adds	r3, #1
    1dec:	781b      	ldrb	r3, [r3, #0]
    1dee:	461a      	mov	r2, r3
    1df0:	4ba9      	ldr	r3, [pc, #676]	; (2098 <Clock_Ip_InitClock+0x588>)
    1df2:	5c9b      	ldrb	r3, [r3, r2]
    1df4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    1df6:	4aa9      	ldr	r2, [pc, #676]	; (209c <Clock_Ip_InitClock+0x58c>)
    1df8:	9b02      	ldr	r3, [sp, #8]
    1dfa:	00db      	lsls	r3, r3, #3
    1dfc:	4413      	add	r3, r2
    1dfe:	6859      	ldr	r1, [r3, #4]
    1e00:	9a03      	ldr	r2, [sp, #12]
    1e02:	4613      	mov	r3, r2
    1e04:	005b      	lsls	r3, r3, #1
    1e06:	4413      	add	r3, r2
    1e08:	009b      	lsls	r3, r3, #2
    1e0a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1e0e:	9a01      	ldr	r2, [sp, #4]
    1e10:	4413      	add	r3, r2
    1e12:	4618      	mov	r0, r3
    1e14:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1e16:	9b03      	ldr	r3, [sp, #12]
    1e18:	3301      	adds	r3, #1
    1e1a:	9303      	str	r3, [sp, #12]
    1e1c:	9b01      	ldr	r3, [sp, #4]
    1e1e:	7b5b      	ldrb	r3, [r3, #13]
    1e20:	461a      	mov	r2, r3
    1e22:	9b03      	ldr	r3, [sp, #12]
    1e24:	4293      	cmp	r3, r2
    1e26:	d3d1      	bcc.n	1dcc <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1e28:	2300      	movs	r3, #0
    1e2a:	9303      	str	r3, [sp, #12]
    1e2c:	e029      	b.n	1e82 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1e2e:	9901      	ldr	r1, [sp, #4]
    1e30:	9a03      	ldr	r2, [sp, #12]
    1e32:	4613      	mov	r3, r2
    1e34:	009b      	lsls	r3, r3, #2
    1e36:	4413      	add	r3, r2
    1e38:	00db      	lsls	r3, r3, #3
    1e3a:	440b      	add	r3, r1
    1e3c:	3340      	adds	r3, #64	; 0x40
    1e3e:	681a      	ldr	r2, [r3, #0]
    1e40:	4994      	ldr	r1, [pc, #592]	; (2094 <Clock_Ip_InitClock+0x584>)
    1e42:	4613      	mov	r3, r2
    1e44:	00db      	lsls	r3, r3, #3
    1e46:	4413      	add	r3, r2
    1e48:	440b      	add	r3, r1
    1e4a:	3301      	adds	r3, #1
    1e4c:	781b      	ldrb	r3, [r3, #0]
    1e4e:	461a      	mov	r2, r3
    1e50:	4b93      	ldr	r3, [pc, #588]	; (20a0 <Clock_Ip_InitClock+0x590>)
    1e52:	5c9b      	ldrb	r3, [r3, r2]
    1e54:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    1e56:	4993      	ldr	r1, [pc, #588]	; (20a4 <Clock_Ip_InitClock+0x594>)
    1e58:	9a02      	ldr	r2, [sp, #8]
    1e5a:	4613      	mov	r3, r2
    1e5c:	009b      	lsls	r3, r3, #2
    1e5e:	4413      	add	r3, r2
    1e60:	009b      	lsls	r3, r3, #2
    1e62:	440b      	add	r3, r1
    1e64:	3304      	adds	r3, #4
    1e66:	6819      	ldr	r1, [r3, #0]
    1e68:	9a03      	ldr	r2, [sp, #12]
    1e6a:	4613      	mov	r3, r2
    1e6c:	009b      	lsls	r3, r3, #2
    1e6e:	4413      	add	r3, r2
    1e70:	00db      	lsls	r3, r3, #3
    1e72:	3340      	adds	r3, #64	; 0x40
    1e74:	9a01      	ldr	r2, [sp, #4]
    1e76:	4413      	add	r3, r2
    1e78:	4618      	mov	r0, r3
    1e7a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1e7c:	9b03      	ldr	r3, [sp, #12]
    1e7e:	3301      	adds	r3, #1
    1e80:	9303      	str	r3, [sp, #12]
    1e82:	9b01      	ldr	r3, [sp, #4]
    1e84:	7a9b      	ldrb	r3, [r3, #10]
    1e86:	461a      	mov	r2, r3
    1e88:	9b03      	ldr	r3, [sp, #12]
    1e8a:	4293      	cmp	r3, r2
    1e8c:	d3cf      	bcc.n	1e2e <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1e8e:	2300      	movs	r3, #0
    1e90:	9303      	str	r3, [sp, #12]
    1e92:	e029      	b.n	1ee8 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1e94:	9901      	ldr	r1, [sp, #4]
    1e96:	9a03      	ldr	r2, [sp, #12]
    1e98:	4613      	mov	r3, r2
    1e9a:	009b      	lsls	r3, r3, #2
    1e9c:	4413      	add	r3, r2
    1e9e:	009b      	lsls	r3, r3, #2
    1ea0:	440b      	add	r3, r1
    1ea2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1ea6:	681a      	ldr	r2, [r3, #0]
    1ea8:	497a      	ldr	r1, [pc, #488]	; (2094 <Clock_Ip_InitClock+0x584>)
    1eaa:	4613      	mov	r3, r2
    1eac:	00db      	lsls	r3, r3, #3
    1eae:	4413      	add	r3, r2
    1eb0:	440b      	add	r3, r1
    1eb2:	3301      	adds	r3, #1
    1eb4:	781b      	ldrb	r3, [r3, #0]
    1eb6:	461a      	mov	r2, r3
    1eb8:	4b7b      	ldr	r3, [pc, #492]	; (20a8 <Clock_Ip_InitClock+0x598>)
    1eba:	5c9b      	ldrb	r3, [r3, r2]
    1ebc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    1ebe:	4a7b      	ldr	r2, [pc, #492]	; (20ac <Clock_Ip_InitClock+0x59c>)
    1ec0:	9b02      	ldr	r3, [sp, #8]
    1ec2:	011b      	lsls	r3, r3, #4
    1ec4:	4413      	add	r3, r2
    1ec6:	3304      	adds	r3, #4
    1ec8:	681c      	ldr	r4, [r3, #0]
    1eca:	9a03      	ldr	r2, [sp, #12]
    1ecc:	4613      	mov	r3, r2
    1ece:	009b      	lsls	r3, r3, #2
    1ed0:	4413      	add	r3, r2
    1ed2:	009b      	lsls	r3, r3, #2
    1ed4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1ed8:	9a01      	ldr	r2, [sp, #4]
    1eda:	4413      	add	r3, r2
    1edc:	9903      	ldr	r1, [sp, #12]
    1ede:	4618      	mov	r0, r3
    1ee0:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1ee2:	9b03      	ldr	r3, [sp, #12]
    1ee4:	3301      	adds	r3, #1
    1ee6:	9303      	str	r3, [sp, #12]
    1ee8:	9b01      	ldr	r3, [sp, #4]
    1eea:	7c9b      	ldrb	r3, [r3, #18]
    1eec:	461a      	mov	r2, r3
    1eee:	9b03      	ldr	r3, [sp, #12]
    1ef0:	4293      	cmp	r3, r2
    1ef2:	d3cf      	bcc.n	1e94 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1ef4:	2300      	movs	r3, #0
    1ef6:	9303      	str	r3, [sp, #12]
    1ef8:	e02a      	b.n	1f50 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1efa:	9901      	ldr	r1, [sp, #4]
    1efc:	9a03      	ldr	r2, [sp, #12]
    1efe:	4613      	mov	r3, r2
    1f00:	009b      	lsls	r3, r3, #2
    1f02:	4413      	add	r3, r2
    1f04:	009b      	lsls	r3, r3, #2
    1f06:	440b      	add	r3, r1
    1f08:	332c      	adds	r3, #44	; 0x2c
    1f0a:	681a      	ldr	r2, [r3, #0]
    1f0c:	4961      	ldr	r1, [pc, #388]	; (2094 <Clock_Ip_InitClock+0x584>)
    1f0e:	4613      	mov	r3, r2
    1f10:	00db      	lsls	r3, r3, #3
    1f12:	4413      	add	r3, r2
    1f14:	440b      	add	r3, r1
    1f16:	3301      	adds	r3, #1
    1f18:	781b      	ldrb	r3, [r3, #0]
    1f1a:	461a      	mov	r2, r3
    1f1c:	4b64      	ldr	r3, [pc, #400]	; (20b0 <Clock_Ip_InitClock+0x5a0>)
    1f1e:	5c9b      	ldrb	r3, [r3, r2]
    1f20:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    1f22:	4964      	ldr	r1, [pc, #400]	; (20b4 <Clock_Ip_InitClock+0x5a4>)
    1f24:	9a02      	ldr	r2, [sp, #8]
    1f26:	4613      	mov	r3, r2
    1f28:	009b      	lsls	r3, r3, #2
    1f2a:	4413      	add	r3, r2
    1f2c:	009b      	lsls	r3, r3, #2
    1f2e:	440b      	add	r3, r1
    1f30:	3308      	adds	r3, #8
    1f32:	6819      	ldr	r1, [r3, #0]
    1f34:	9a03      	ldr	r2, [sp, #12]
    1f36:	4613      	mov	r3, r2
    1f38:	009b      	lsls	r3, r3, #2
    1f3a:	4413      	add	r3, r2
    1f3c:	009b      	lsls	r3, r3, #2
    1f3e:	3328      	adds	r3, #40	; 0x28
    1f40:	9a01      	ldr	r2, [sp, #4]
    1f42:	4413      	add	r3, r2
    1f44:	3304      	adds	r3, #4
    1f46:	4618      	mov	r0, r3
    1f48:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1f4a:	9b03      	ldr	r3, [sp, #12]
    1f4c:	3301      	adds	r3, #1
    1f4e:	9303      	str	r3, [sp, #12]
    1f50:	9b01      	ldr	r3, [sp, #4]
    1f52:	7a5b      	ldrb	r3, [r3, #9]
    1f54:	461a      	mov	r2, r3
    1f56:	9b03      	ldr	r3, [sp, #12]
    1f58:	4293      	cmp	r3, r2
    1f5a:	d3ce      	bcc.n	1efa <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1f5c:	2300      	movs	r3, #0
    1f5e:	9303      	str	r3, [sp, #12]
    1f60:	e029      	b.n	1fb6 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1f62:	9901      	ldr	r1, [sp, #4]
    1f64:	9a03      	ldr	r2, [sp, #12]
    1f66:	4613      	mov	r3, r2
    1f68:	009b      	lsls	r3, r3, #2
    1f6a:	4413      	add	r3, r2
    1f6c:	00db      	lsls	r3, r3, #3
    1f6e:	440b      	add	r3, r1
    1f70:	3340      	adds	r3, #64	; 0x40
    1f72:	681a      	ldr	r2, [r3, #0]
    1f74:	4947      	ldr	r1, [pc, #284]	; (2094 <Clock_Ip_InitClock+0x584>)
    1f76:	4613      	mov	r3, r2
    1f78:	00db      	lsls	r3, r3, #3
    1f7a:	4413      	add	r3, r2
    1f7c:	440b      	add	r3, r1
    1f7e:	3301      	adds	r3, #1
    1f80:	781b      	ldrb	r3, [r3, #0]
    1f82:	461a      	mov	r2, r3
    1f84:	4b46      	ldr	r3, [pc, #280]	; (20a0 <Clock_Ip_InitClock+0x590>)
    1f86:	5c9b      	ldrb	r3, [r3, r2]
    1f88:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    1f8a:	4946      	ldr	r1, [pc, #280]	; (20a4 <Clock_Ip_InitClock+0x594>)
    1f8c:	9a02      	ldr	r2, [sp, #8]
    1f8e:	4613      	mov	r3, r2
    1f90:	009b      	lsls	r3, r3, #2
    1f92:	4413      	add	r3, r2
    1f94:	009b      	lsls	r3, r3, #2
    1f96:	440b      	add	r3, r1
    1f98:	330c      	adds	r3, #12
    1f9a:	6819      	ldr	r1, [r3, #0]
    1f9c:	9a03      	ldr	r2, [sp, #12]
    1f9e:	4613      	mov	r3, r2
    1fa0:	009b      	lsls	r3, r3, #2
    1fa2:	4413      	add	r3, r2
    1fa4:	00db      	lsls	r3, r3, #3
    1fa6:	3340      	adds	r3, #64	; 0x40
    1fa8:	9a01      	ldr	r2, [sp, #4]
    1faa:	4413      	add	r3, r2
    1fac:	4618      	mov	r0, r3
    1fae:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1fb0:	9b03      	ldr	r3, [sp, #12]
    1fb2:	3301      	adds	r3, #1
    1fb4:	9303      	str	r3, [sp, #12]
    1fb6:	9b01      	ldr	r3, [sp, #4]
    1fb8:	7a9b      	ldrb	r3, [r3, #10]
    1fba:	461a      	mov	r2, r3
    1fbc:	9b03      	ldr	r3, [sp, #12]
    1fbe:	4293      	cmp	r3, r2
    1fc0:	d3cf      	bcc.n	1f62 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1fc2:	2300      	movs	r3, #0
    1fc4:	9303      	str	r3, [sp, #12]
    1fc6:	e025      	b.n	2014 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    1fc8:	9a01      	ldr	r2, [sp, #4]
    1fca:	9b03      	ldr	r3, [sp, #12]
    1fcc:	3324      	adds	r3, #36	; 0x24
    1fce:	011b      	lsls	r3, r3, #4
    1fd0:	4413      	add	r3, r2
    1fd2:	3304      	adds	r3, #4
    1fd4:	681a      	ldr	r2, [r3, #0]
    1fd6:	492f      	ldr	r1, [pc, #188]	; (2094 <Clock_Ip_InitClock+0x584>)
    1fd8:	4613      	mov	r3, r2
    1fda:	00db      	lsls	r3, r3, #3
    1fdc:	4413      	add	r3, r2
    1fde:	440b      	add	r3, r1
    1fe0:	3301      	adds	r3, #1
    1fe2:	781b      	ldrb	r3, [r3, #0]
    1fe4:	461a      	mov	r2, r3
    1fe6:	4b34      	ldr	r3, [pc, #208]	; (20b8 <Clock_Ip_InitClock+0x5a8>)
    1fe8:	5c9b      	ldrb	r3, [r3, r2]
    1fea:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    1fec:	4933      	ldr	r1, [pc, #204]	; (20bc <Clock_Ip_InitClock+0x5ac>)
    1fee:	9a02      	ldr	r2, [sp, #8]
    1ff0:	4613      	mov	r3, r2
    1ff2:	005b      	lsls	r3, r3, #1
    1ff4:	4413      	add	r3, r2
    1ff6:	009b      	lsls	r3, r3, #2
    1ff8:	440b      	add	r3, r1
    1ffa:	3304      	adds	r3, #4
    1ffc:	681b      	ldr	r3, [r3, #0]
    1ffe:	9a03      	ldr	r2, [sp, #12]
    2000:	3224      	adds	r2, #36	; 0x24
    2002:	0112      	lsls	r2, r2, #4
    2004:	9901      	ldr	r1, [sp, #4]
    2006:	440a      	add	r2, r1
    2008:	3204      	adds	r2, #4
    200a:	4610      	mov	r0, r2
    200c:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    200e:	9b03      	ldr	r3, [sp, #12]
    2010:	3301      	adds	r3, #1
    2012:	9303      	str	r3, [sp, #12]
    2014:	9b01      	ldr	r3, [sp, #4]
    2016:	7b9b      	ldrb	r3, [r3, #14]
    2018:	461a      	mov	r2, r3
    201a:	9b03      	ldr	r3, [sp, #12]
    201c:	4293      	cmp	r3, r2
    201e:	d3d3      	bcc.n	1fc8 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2020:	4b27      	ldr	r3, [pc, #156]	; (20c0 <Clock_Ip_InitClock+0x5b0>)
    2022:	2200      	movs	r2, #0
    2024:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    2026:	4b26      	ldr	r3, [pc, #152]	; (20c0 <Clock_Ip_InitClock+0x5b0>)
    2028:	2200      	movs	r2, #0
    202a:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    202c:	4b24      	ldr	r3, [pc, #144]	; (20c0 <Clock_Ip_InitClock+0x5b0>)
    202e:	2201      	movs	r2, #1
    2030:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    2032:	4b23      	ldr	r3, [pc, #140]	; (20c0 <Clock_Ip_InitClock+0x5b0>)
    2034:	2200      	movs	r2, #0
    2036:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    2038:	f000 fa9c 	bl	2574 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    203c:	2300      	movs	r3, #0
    203e:	9303      	str	r3, [sp, #12]
    2040:	e04c      	b.n	20dc <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    2042:	9a01      	ldr	r2, [sp, #4]
    2044:	9b03      	ldr	r3, [sp, #12]
    2046:	330d      	adds	r3, #13
    2048:	00db      	lsls	r3, r3, #3
    204a:	4413      	add	r3, r2
    204c:	685b      	ldr	r3, [r3, #4]
    204e:	4a1d      	ldr	r2, [pc, #116]	; (20c4 <Clock_Ip_InitClock+0x5b4>)
    2050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2054:	2b03      	cmp	r3, #3
    2056:	d03b      	beq.n	20d0 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2058:	9b01      	ldr	r3, [sp, #4]
    205a:	9a03      	ldr	r2, [sp, #12]
    205c:	320d      	adds	r2, #13
    205e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2062:	490c      	ldr	r1, [pc, #48]	; (2094 <Clock_Ip_InitClock+0x584>)
    2064:	4613      	mov	r3, r2
    2066:	00db      	lsls	r3, r3, #3
    2068:	4413      	add	r3, r2
    206a:	440b      	add	r3, r1
    206c:	3301      	adds	r3, #1
    206e:	781b      	ldrb	r3, [r3, #0]
    2070:	461a      	mov	r2, r3
    2072:	4b15      	ldr	r3, [pc, #84]	; (20c8 <Clock_Ip_InitClock+0x5b8>)
    2074:	5c9b      	ldrb	r3, [r3, r2]
    2076:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    2078:	4a14      	ldr	r2, [pc, #80]	; (20cc <Clock_Ip_InitClock+0x5bc>)
    207a:	9b02      	ldr	r3, [sp, #8]
    207c:	00db      	lsls	r3, r3, #3
    207e:	4413      	add	r3, r2
    2080:	685b      	ldr	r3, [r3, #4]
    2082:	9a03      	ldr	r2, [sp, #12]
    2084:	320d      	adds	r2, #13
    2086:	00d2      	lsls	r2, r2, #3
    2088:	9901      	ldr	r1, [sp, #4]
    208a:	440a      	add	r2, r1
    208c:	4610      	mov	r0, r2
    208e:	4798      	blx	r3
    2090:	e021      	b.n	20d6 <Clock_Ip_InitClock+0x5c6>
    2092:	bf00      	nop
    2094:	00007c7c 	.word	0x00007c7c
    2098:	00007bec 	.word	0x00007bec
    209c:	000081c8 	.word	0x000081c8
    20a0:	00007c3c 	.word	0x00007c3c
    20a4:	00008288 	.word	0x00008288
    20a8:	00007c6c 	.word	0x00007c6c
    20ac:	00008278 	.word	0x00008278
    20b0:	00007bfc 	.word	0x00007bfc
    20b4:	000081d0 	.word	0x000081d0
    20b8:	00007c2c 	.word	0x00007c2c
    20bc:	000081f8 	.word	0x000081f8
    20c0:	1fff8b4c 	.word	0x1fff8b4c
    20c4:	000080c8 	.word	0x000080c8
    20c8:	00007c4c 	.word	0x00007c4c
    20cc:	000082b4 	.word	0x000082b4
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    20d0:	4b3a      	ldr	r3, [pc, #232]	; (21bc <Clock_Ip_InitClock+0x6ac>)
    20d2:	2201      	movs	r2, #1
    20d4:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    20d6:	9b03      	ldr	r3, [sp, #12]
    20d8:	3301      	adds	r3, #1
    20da:	9303      	str	r3, [sp, #12]
    20dc:	9b01      	ldr	r3, [sp, #4]
    20de:	7adb      	ldrb	r3, [r3, #11]
    20e0:	461a      	mov	r2, r3
    20e2:	9b03      	ldr	r3, [sp, #12]
    20e4:	4293      	cmp	r3, r2
    20e6:	d3ac      	bcc.n	2042 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    20e8:	4b34      	ldr	r3, [pc, #208]	; (21bc <Clock_Ip_InitClock+0x6ac>)
    20ea:	781b      	ldrb	r3, [r3, #0]
    20ec:	f083 0301 	eor.w	r3, r3, #1
    20f0:	b2db      	uxtb	r3, r3
    20f2:	2b00      	cmp	r3, #0
    20f4:	d05e      	beq.n	21b4 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    20f6:	2300      	movs	r3, #0
    20f8:	9303      	str	r3, [sp, #12]
    20fa:	e01f      	b.n	213c <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    20fc:	9a01      	ldr	r2, [sp, #4]
    20fe:	9b03      	ldr	r3, [sp, #12]
    2100:	334e      	adds	r3, #78	; 0x4e
    2102:	00db      	lsls	r3, r3, #3
    2104:	4413      	add	r3, r2
    2106:	685a      	ldr	r2, [r3, #4]
    2108:	492d      	ldr	r1, [pc, #180]	; (21c0 <Clock_Ip_InitClock+0x6b0>)
    210a:	4613      	mov	r3, r2
    210c:	00db      	lsls	r3, r3, #3
    210e:	4413      	add	r3, r2
    2110:	440b      	add	r3, r1
    2112:	3301      	adds	r3, #1
    2114:	781b      	ldrb	r3, [r3, #0]
    2116:	461a      	mov	r2, r3
    2118:	4b2a      	ldr	r3, [pc, #168]	; (21c4 <Clock_Ip_InitClock+0x6b4>)
    211a:	5c9b      	ldrb	r3, [r3, r2]
    211c:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    211e:	4a2a      	ldr	r2, [pc, #168]	; (21c8 <Clock_Ip_InitClock+0x6b8>)
    2120:	9b02      	ldr	r3, [sp, #8]
    2122:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2126:	9a03      	ldr	r2, [sp, #12]
    2128:	324e      	adds	r2, #78	; 0x4e
    212a:	00d2      	lsls	r2, r2, #3
    212c:	9901      	ldr	r1, [sp, #4]
    212e:	440a      	add	r2, r1
    2130:	3204      	adds	r2, #4
    2132:	4610      	mov	r0, r2
    2134:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2136:	9b03      	ldr	r3, [sp, #12]
    2138:	3301      	adds	r3, #1
    213a:	9303      	str	r3, [sp, #12]
    213c:	9b01      	ldr	r3, [sp, #4]
    213e:	7c1b      	ldrb	r3, [r3, #16]
    2140:	461a      	mov	r2, r3
    2142:	9b03      	ldr	r3, [sp, #12]
    2144:	4293      	cmp	r3, r2
    2146:	d3d9      	bcc.n	20fc <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2148:	2300      	movs	r3, #0
    214a:	9303      	str	r3, [sp, #12]
    214c:	e028      	b.n	21a0 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    214e:	9901      	ldr	r1, [sp, #4]
    2150:	9a03      	ldr	r2, [sp, #12]
    2152:	4613      	mov	r3, r2
    2154:	009b      	lsls	r3, r3, #2
    2156:	4413      	add	r3, r2
    2158:	009b      	lsls	r3, r3, #2
    215a:	440b      	add	r3, r1
    215c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2160:	681a      	ldr	r2, [r3, #0]
    2162:	4917      	ldr	r1, [pc, #92]	; (21c0 <Clock_Ip_InitClock+0x6b0>)
    2164:	4613      	mov	r3, r2
    2166:	00db      	lsls	r3, r3, #3
    2168:	4413      	add	r3, r2
    216a:	440b      	add	r3, r1
    216c:	3301      	adds	r3, #1
    216e:	781b      	ldrb	r3, [r3, #0]
    2170:	461a      	mov	r2, r3
    2172:	4b16      	ldr	r3, [pc, #88]	; (21cc <Clock_Ip_InitClock+0x6bc>)
    2174:	5c9b      	ldrb	r3, [r3, r2]
    2176:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2178:	4a15      	ldr	r2, [pc, #84]	; (21d0 <Clock_Ip_InitClock+0x6c0>)
    217a:	9b02      	ldr	r3, [sp, #8]
    217c:	011b      	lsls	r3, r3, #4
    217e:	4413      	add	r3, r2
    2180:	330c      	adds	r3, #12
    2182:	6819      	ldr	r1, [r3, #0]
    2184:	9a03      	ldr	r2, [sp, #12]
    2186:	4613      	mov	r3, r2
    2188:	009b      	lsls	r3, r3, #2
    218a:	4413      	add	r3, r2
    218c:	009b      	lsls	r3, r3, #2
    218e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2192:	9a01      	ldr	r2, [sp, #4]
    2194:	4413      	add	r3, r2
    2196:	4618      	mov	r0, r3
    2198:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    219a:	9b03      	ldr	r3, [sp, #12]
    219c:	3301      	adds	r3, #1
    219e:	9303      	str	r3, [sp, #12]
    21a0:	9b01      	ldr	r3, [sp, #4]
    21a2:	7c9b      	ldrb	r3, [r3, #18]
    21a4:	461a      	mov	r2, r3
    21a6:	9b03      	ldr	r3, [sp, #12]
    21a8:	4293      	cmp	r3, r2
    21aa:	d3d0      	bcc.n	214e <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    21ac:	2104      	movs	r1, #4
    21ae:	9801      	ldr	r0, [sp, #4]
    21b0:	f002 ff48 	bl	5044 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    21b4:	bf00      	nop
    21b6:	b004      	add	sp, #16
    21b8:	bd10      	pop	{r4, pc}
    21ba:	bf00      	nop
    21bc:	1fff8b4c 	.word	0x1fff8b4c
    21c0:	00007c7c 	.word	0x00007c7c
    21c4:	00007c1c 	.word	0x00007c1c
    21c8:	00008204 	.word	0x00008204
    21cc:	00007c6c 	.word	0x00007c6c
    21d0:	00008278 	.word	0x00008278

000021d4 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    21d4:	b500      	push	{lr}
    21d6:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    21d8:	2302      	movs	r3, #2
    21da:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    21dc:	2300      	movs	r3, #0
    21de:	9304      	str	r3, [sp, #16]
    21e0:	e02c      	b.n	223c <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    21e2:	4a36      	ldr	r2, [pc, #216]	; (22bc <Clock_Ip_GetPllStatus+0xe8>)
    21e4:	9b04      	ldr	r3, [sp, #16]
    21e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    21ea:	4935      	ldr	r1, [pc, #212]	; (22c0 <Clock_Ip_GetPllStatus+0xec>)
    21ec:	4613      	mov	r3, r2
    21ee:	00db      	lsls	r3, r3, #3
    21f0:	4413      	add	r3, r2
    21f2:	440b      	add	r3, r1
    21f4:	3301      	adds	r3, #1
    21f6:	781b      	ldrb	r3, [r3, #0]
    21f8:	461a      	mov	r2, r3
    21fa:	4b32      	ldr	r3, [pc, #200]	; (22c4 <Clock_Ip_GetPllStatus+0xf0>)
    21fc:	5c9b      	ldrb	r3, [r3, r2]
    21fe:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2200:	4931      	ldr	r1, [pc, #196]	; (22c8 <Clock_Ip_GetPllStatus+0xf4>)
    2202:	9a03      	ldr	r2, [sp, #12]
    2204:	4613      	mov	r3, r2
    2206:	009b      	lsls	r3, r3, #2
    2208:	4413      	add	r3, r2
    220a:	009b      	lsls	r3, r3, #2
    220c:	440b      	add	r3, r1
    220e:	3308      	adds	r3, #8
    2210:	681b      	ldr	r3, [r3, #0]
    2212:	492a      	ldr	r1, [pc, #168]	; (22bc <Clock_Ip_GetPllStatus+0xe8>)
    2214:	9a04      	ldr	r2, [sp, #16]
    2216:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    221a:	4610      	mov	r0, r2
    221c:	4798      	blx	r3
    221e:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2220:	9b02      	ldr	r3, [sp, #8]
    2222:	2b01      	cmp	r3, #1
    2224:	d102      	bne.n	222c <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2226:	2301      	movs	r3, #1
    2228:	9305      	str	r3, [sp, #20]
            break;
    222a:	e00d      	b.n	2248 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    222c:	9b02      	ldr	r3, [sp, #8]
    222e:	2b02      	cmp	r3, #2
    2230:	d101      	bne.n	2236 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2232:	2300      	movs	r3, #0
    2234:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2236:	9b04      	ldr	r3, [sp, #16]
    2238:	3301      	adds	r3, #1
    223a:	9304      	str	r3, [sp, #16]
    223c:	4b23      	ldr	r3, [pc, #140]	; (22cc <Clock_Ip_GetPllStatus+0xf8>)
    223e:	789b      	ldrb	r3, [r3, #2]
    2240:	461a      	mov	r2, r3
    2242:	9b04      	ldr	r3, [sp, #16]
    2244:	4293      	cmp	r3, r2
    2246:	d3cc      	bcc.n	21e2 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2248:	9b05      	ldr	r3, [sp, #20]
    224a:	2b00      	cmp	r3, #0
    224c:	d130      	bne.n	22b0 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    224e:	2300      	movs	r3, #0
    2250:	9304      	str	r3, [sp, #16]
    2252:	e027      	b.n	22a4 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2254:	4a1e      	ldr	r2, [pc, #120]	; (22d0 <Clock_Ip_GetPllStatus+0xfc>)
    2256:	9b04      	ldr	r3, [sp, #16]
    2258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    225c:	4918      	ldr	r1, [pc, #96]	; (22c0 <Clock_Ip_GetPllStatus+0xec>)
    225e:	4613      	mov	r3, r2
    2260:	00db      	lsls	r3, r3, #3
    2262:	4413      	add	r3, r2
    2264:	440b      	add	r3, r1
    2266:	3301      	adds	r3, #1
    2268:	781b      	ldrb	r3, [r3, #0]
    226a:	461a      	mov	r2, r3
    226c:	4b19      	ldr	r3, [pc, #100]	; (22d4 <Clock_Ip_GetPllStatus+0x100>)
    226e:	5c9b      	ldrb	r3, [r3, r2]
    2270:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2272:	4919      	ldr	r1, [pc, #100]	; (22d8 <Clock_Ip_GetPllStatus+0x104>)
    2274:	9a03      	ldr	r2, [sp, #12]
    2276:	4613      	mov	r3, r2
    2278:	005b      	lsls	r3, r3, #1
    227a:	4413      	add	r3, r2
    227c:	009b      	lsls	r3, r3, #2
    227e:	440b      	add	r3, r1
    2280:	3308      	adds	r3, #8
    2282:	681b      	ldr	r3, [r3, #0]
    2284:	4912      	ldr	r1, [pc, #72]	; (22d0 <Clock_Ip_GetPllStatus+0xfc>)
    2286:	9a04      	ldr	r2, [sp, #16]
    2288:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    228c:	4610      	mov	r0, r2
    228e:	4798      	blx	r3
    2290:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    2292:	9b01      	ldr	r3, [sp, #4]
    2294:	2b01      	cmp	r3, #1
    2296:	d102      	bne.n	229e <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2298:	2301      	movs	r3, #1
    229a:	9305      	str	r3, [sp, #20]
                break;
    229c:	e008      	b.n	22b0 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    229e:	9b04      	ldr	r3, [sp, #16]
    22a0:	3301      	adds	r3, #1
    22a2:	9304      	str	r3, [sp, #16]
    22a4:	4b09      	ldr	r3, [pc, #36]	; (22cc <Clock_Ip_GetPllStatus+0xf8>)
    22a6:	78db      	ldrb	r3, [r3, #3]
    22a8:	461a      	mov	r2, r3
    22aa:	9b04      	ldr	r3, [sp, #16]
    22ac:	4293      	cmp	r3, r2
    22ae:	d3d1      	bcc.n	2254 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    22b0:	9b05      	ldr	r3, [sp, #20]
}
    22b2:	4618      	mov	r0, r3
    22b4:	b007      	add	sp, #28
    22b6:	f85d fb04 	ldr.w	pc, [sp], #4
    22ba:	bf00      	nop
    22bc:	00008184 	.word	0x00008184
    22c0:	00007c7c 	.word	0x00007c7c
    22c4:	00007c3c 	.word	0x00007c3c
    22c8:	00008288 	.word	0x00008288
    22cc:	1fff8b4c 	.word	0x1fff8b4c
    22d0:	00008188 	.word	0x00008188
    22d4:	00007c2c 	.word	0x00007c2c
    22d8:	000081f8 	.word	0x000081f8

000022dc <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    22dc:	b500      	push	{lr}
    22de:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    22e0:	4b55      	ldr	r3, [pc, #340]	; (2438 <Clock_Ip_DistributePll+0x15c>)
    22e2:	681b      	ldr	r3, [r3, #0]
    22e4:	2b00      	cmp	r3, #0
    22e6:	f000 80a2 	beq.w	242e <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    22ea:	2300      	movs	r3, #0
    22ec:	9301      	str	r3, [sp, #4]
    22ee:	e02c      	b.n	234a <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    22f0:	4b51      	ldr	r3, [pc, #324]	; (2438 <Clock_Ip_DistributePll+0x15c>)
    22f2:	681a      	ldr	r2, [r3, #0]
    22f4:	9b01      	ldr	r3, [sp, #4]
    22f6:	330d      	adds	r3, #13
    22f8:	00db      	lsls	r3, r3, #3
    22fa:	4413      	add	r3, r2
    22fc:	685b      	ldr	r3, [r3, #4]
    22fe:	4a4f      	ldr	r2, [pc, #316]	; (243c <Clock_Ip_DistributePll+0x160>)
    2300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2304:	2b03      	cmp	r3, #3
    2306:	d11d      	bne.n	2344 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2308:	4b4b      	ldr	r3, [pc, #300]	; (2438 <Clock_Ip_DistributePll+0x15c>)
    230a:	681b      	ldr	r3, [r3, #0]
    230c:	9a01      	ldr	r2, [sp, #4]
    230e:	320d      	adds	r2, #13
    2310:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2314:	494a      	ldr	r1, [pc, #296]	; (2440 <Clock_Ip_DistributePll+0x164>)
    2316:	4613      	mov	r3, r2
    2318:	00db      	lsls	r3, r3, #3
    231a:	4413      	add	r3, r2
    231c:	440b      	add	r3, r1
    231e:	3301      	adds	r3, #1
    2320:	781b      	ldrb	r3, [r3, #0]
    2322:	461a      	mov	r2, r3
    2324:	4b47      	ldr	r3, [pc, #284]	; (2444 <Clock_Ip_DistributePll+0x168>)
    2326:	5c9b      	ldrb	r3, [r3, r2]
    2328:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    232a:	4a47      	ldr	r2, [pc, #284]	; (2448 <Clock_Ip_DistributePll+0x16c>)
    232c:	9b00      	ldr	r3, [sp, #0]
    232e:	00db      	lsls	r3, r3, #3
    2330:	4413      	add	r3, r2
    2332:	685b      	ldr	r3, [r3, #4]
    2334:	4a40      	ldr	r2, [pc, #256]	; (2438 <Clock_Ip_DistributePll+0x15c>)
    2336:	6811      	ldr	r1, [r2, #0]
    2338:	9a01      	ldr	r2, [sp, #4]
    233a:	320d      	adds	r2, #13
    233c:	00d2      	lsls	r2, r2, #3
    233e:	440a      	add	r2, r1
    2340:	4610      	mov	r0, r2
    2342:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2344:	9b01      	ldr	r3, [sp, #4]
    2346:	3301      	adds	r3, #1
    2348:	9301      	str	r3, [sp, #4]
    234a:	4b3b      	ldr	r3, [pc, #236]	; (2438 <Clock_Ip_DistributePll+0x15c>)
    234c:	681b      	ldr	r3, [r3, #0]
    234e:	7adb      	ldrb	r3, [r3, #11]
    2350:	461a      	mov	r2, r3
    2352:	9b01      	ldr	r3, [sp, #4]
    2354:	4293      	cmp	r3, r2
    2356:	d3cb      	bcc.n	22f0 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2358:	4b3c      	ldr	r3, [pc, #240]	; (244c <Clock_Ip_DistributePll+0x170>)
    235a:	781b      	ldrb	r3, [r3, #0]
    235c:	2b00      	cmp	r3, #0
    235e:	d066      	beq.n	242e <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2360:	2300      	movs	r3, #0
    2362:	9301      	str	r3, [sp, #4]
    2364:	e021      	b.n	23aa <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2366:	4b34      	ldr	r3, [pc, #208]	; (2438 <Clock_Ip_DistributePll+0x15c>)
    2368:	681a      	ldr	r2, [r3, #0]
    236a:	9b01      	ldr	r3, [sp, #4]
    236c:	334e      	adds	r3, #78	; 0x4e
    236e:	00db      	lsls	r3, r3, #3
    2370:	4413      	add	r3, r2
    2372:	685a      	ldr	r2, [r3, #4]
    2374:	4932      	ldr	r1, [pc, #200]	; (2440 <Clock_Ip_DistributePll+0x164>)
    2376:	4613      	mov	r3, r2
    2378:	00db      	lsls	r3, r3, #3
    237a:	4413      	add	r3, r2
    237c:	440b      	add	r3, r1
    237e:	3301      	adds	r3, #1
    2380:	781b      	ldrb	r3, [r3, #0]
    2382:	461a      	mov	r2, r3
    2384:	4b32      	ldr	r3, [pc, #200]	; (2450 <Clock_Ip_DistributePll+0x174>)
    2386:	5c9b      	ldrb	r3, [r3, r2]
    2388:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    238a:	4a32      	ldr	r2, [pc, #200]	; (2454 <Clock_Ip_DistributePll+0x178>)
    238c:	9b00      	ldr	r3, [sp, #0]
    238e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2392:	4a29      	ldr	r2, [pc, #164]	; (2438 <Clock_Ip_DistributePll+0x15c>)
    2394:	6811      	ldr	r1, [r2, #0]
    2396:	9a01      	ldr	r2, [sp, #4]
    2398:	324e      	adds	r2, #78	; 0x4e
    239a:	00d2      	lsls	r2, r2, #3
    239c:	440a      	add	r2, r1
    239e:	3204      	adds	r2, #4
    23a0:	4610      	mov	r0, r2
    23a2:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    23a4:	9b01      	ldr	r3, [sp, #4]
    23a6:	3301      	adds	r3, #1
    23a8:	9301      	str	r3, [sp, #4]
    23aa:	4b23      	ldr	r3, [pc, #140]	; (2438 <Clock_Ip_DistributePll+0x15c>)
    23ac:	681b      	ldr	r3, [r3, #0]
    23ae:	7c1b      	ldrb	r3, [r3, #16]
    23b0:	461a      	mov	r2, r3
    23b2:	9b01      	ldr	r3, [sp, #4]
    23b4:	4293      	cmp	r3, r2
    23b6:	d3d6      	bcc.n	2366 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    23b8:	2300      	movs	r3, #0
    23ba:	9301      	str	r3, [sp, #4]
    23bc:	e02a      	b.n	2414 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    23be:	4b1e      	ldr	r3, [pc, #120]	; (2438 <Clock_Ip_DistributePll+0x15c>)
    23c0:	6819      	ldr	r1, [r3, #0]
    23c2:	9a01      	ldr	r2, [sp, #4]
    23c4:	4613      	mov	r3, r2
    23c6:	009b      	lsls	r3, r3, #2
    23c8:	4413      	add	r3, r2
    23ca:	009b      	lsls	r3, r3, #2
    23cc:	440b      	add	r3, r1
    23ce:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    23d2:	681a      	ldr	r2, [r3, #0]
    23d4:	491a      	ldr	r1, [pc, #104]	; (2440 <Clock_Ip_DistributePll+0x164>)
    23d6:	4613      	mov	r3, r2
    23d8:	00db      	lsls	r3, r3, #3
    23da:	4413      	add	r3, r2
    23dc:	440b      	add	r3, r1
    23de:	3301      	adds	r3, #1
    23e0:	781b      	ldrb	r3, [r3, #0]
    23e2:	461a      	mov	r2, r3
    23e4:	4b1c      	ldr	r3, [pc, #112]	; (2458 <Clock_Ip_DistributePll+0x17c>)
    23e6:	5c9b      	ldrb	r3, [r3, r2]
    23e8:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    23ea:	4a1c      	ldr	r2, [pc, #112]	; (245c <Clock_Ip_DistributePll+0x180>)
    23ec:	9b00      	ldr	r3, [sp, #0]
    23ee:	011b      	lsls	r3, r3, #4
    23f0:	4413      	add	r3, r2
    23f2:	330c      	adds	r3, #12
    23f4:	6819      	ldr	r1, [r3, #0]
    23f6:	4b10      	ldr	r3, [pc, #64]	; (2438 <Clock_Ip_DistributePll+0x15c>)
    23f8:	6818      	ldr	r0, [r3, #0]
    23fa:	9a01      	ldr	r2, [sp, #4]
    23fc:	4613      	mov	r3, r2
    23fe:	009b      	lsls	r3, r3, #2
    2400:	4413      	add	r3, r2
    2402:	009b      	lsls	r3, r3, #2
    2404:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2408:	4403      	add	r3, r0
    240a:	4618      	mov	r0, r3
    240c:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    240e:	9b01      	ldr	r3, [sp, #4]
    2410:	3301      	adds	r3, #1
    2412:	9301      	str	r3, [sp, #4]
    2414:	4b08      	ldr	r3, [pc, #32]	; (2438 <Clock_Ip_DistributePll+0x15c>)
    2416:	681b      	ldr	r3, [r3, #0]
    2418:	7c9b      	ldrb	r3, [r3, #18]
    241a:	461a      	mov	r2, r3
    241c:	9b01      	ldr	r3, [sp, #4]
    241e:	4293      	cmp	r3, r2
    2420:	d3cd      	bcc.n	23be <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2422:	4b05      	ldr	r3, [pc, #20]	; (2438 <Clock_Ip_DistributePll+0x15c>)
    2424:	681b      	ldr	r3, [r3, #0]
    2426:	2104      	movs	r1, #4
    2428:	4618      	mov	r0, r3
    242a:	f002 fe0b 	bl	5044 <Clock_Ip_Command>
        }
    }
}
    242e:	bf00      	nop
    2430:	b003      	add	sp, #12
    2432:	f85d fb04 	ldr.w	pc, [sp], #4
    2436:	bf00      	nop
    2438:	1fff8b44 	.word	0x1fff8b44
    243c:	000080c8 	.word	0x000080c8
    2440:	00007c7c 	.word	0x00007c7c
    2444:	00007c4c 	.word	0x00007c4c
    2448:	000082b4 	.word	0x000082b4
    244c:	1fff8b4c 	.word	0x1fff8b4c
    2450:	00007c1c 	.word	0x00007c1c
    2454:	00008204 	.word	0x00008204
    2458:	00007c6c 	.word	0x00007c6c
    245c:	00008278 	.word	0x00008278

00002460 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2460:	b500      	push	{lr}
    2462:	b085      	sub	sp, #20
    2464:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2466:	490c      	ldr	r1, [pc, #48]	; (2498 <Clock_Ip_DisableClockMonitor+0x38>)
    2468:	9a01      	ldr	r2, [sp, #4]
    246a:	4613      	mov	r3, r2
    246c:	00db      	lsls	r3, r3, #3
    246e:	4413      	add	r3, r2
    2470:	440b      	add	r3, r1
    2472:	3301      	adds	r3, #1
    2474:	781b      	ldrb	r3, [r3, #0]
    2476:	461a      	mov	r2, r3
    2478:	4b08      	ldr	r3, [pc, #32]	; (249c <Clock_Ip_DisableClockMonitor+0x3c>)
    247a:	5c9b      	ldrb	r3, [r3, r2]
    247c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    247e:	4a08      	ldr	r2, [pc, #32]	; (24a0 <Clock_Ip_DisableClockMonitor+0x40>)
    2480:	9b03      	ldr	r3, [sp, #12]
    2482:	011b      	lsls	r3, r3, #4
    2484:	4413      	add	r3, r2
    2486:	3308      	adds	r3, #8
    2488:	681b      	ldr	r3, [r3, #0]
    248a:	9801      	ldr	r0, [sp, #4]
    248c:	4798      	blx	r3
}
    248e:	bf00      	nop
    2490:	b005      	add	sp, #20
    2492:	f85d fb04 	ldr.w	pc, [sp], #4
    2496:	bf00      	nop
    2498:	00007c7c 	.word	0x00007c7c
    249c:	00007c6c 	.word	0x00007c6c
    24a0:	00008278 	.word	0x00008278

000024a4 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    24a4:	b082      	sub	sp, #8
    24a6:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    24a8:	4a02      	ldr	r2, [pc, #8]	; (24b4 <Clock_Ip_InstallNotificationsCallback+0x10>)
    24aa:	9b01      	ldr	r3, [sp, #4]
    24ac:	6013      	str	r3, [r2, #0]
}
    24ae:	bf00      	nop
    24b0:	b002      	add	sp, #8
    24b2:	4770      	bx	lr
    24b4:	1fff8b14 	.word	0x1fff8b14

000024b8 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    24b8:	b500      	push	{lr}
    24ba:	b085      	sub	sp, #20
    24bc:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    24be:	490c      	ldr	r1, [pc, #48]	; (24f0 <Clock_Ip_DisableModuleClock+0x38>)
    24c0:	9a01      	ldr	r2, [sp, #4]
    24c2:	4613      	mov	r3, r2
    24c4:	00db      	lsls	r3, r3, #3
    24c6:	4413      	add	r3, r2
    24c8:	440b      	add	r3, r1
    24ca:	3301      	adds	r3, #1
    24cc:	781b      	ldrb	r3, [r3, #0]
    24ce:	461a      	mov	r2, r3
    24d0:	4b08      	ldr	r3, [pc, #32]	; (24f4 <Clock_Ip_DisableModuleClock+0x3c>)
    24d2:	5c9b      	ldrb	r3, [r3, r2]
    24d4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    24d6:	4a08      	ldr	r2, [pc, #32]	; (24f8 <Clock_Ip_DisableModuleClock+0x40>)
    24d8:	9b03      	ldr	r3, [sp, #12]
    24da:	00db      	lsls	r3, r3, #3
    24dc:	4413      	add	r3, r2
    24de:	685b      	ldr	r3, [r3, #4]
    24e0:	2101      	movs	r1, #1
    24e2:	9801      	ldr	r0, [sp, #4]
    24e4:	4798      	blx	r3
}
    24e6:	bf00      	nop
    24e8:	b005      	add	sp, #20
    24ea:	f85d fb04 	ldr.w	pc, [sp], #4
    24ee:	bf00      	nop
    24f0:	00007c7c 	.word	0x00007c7c
    24f4:	00007c1c 	.word	0x00007c1c
    24f8:	00008204 	.word	0x00008204

000024fc <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    24fc:	b500      	push	{lr}
    24fe:	b085      	sub	sp, #20
    2500:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2502:	490c      	ldr	r1, [pc, #48]	; (2534 <Clock_Ip_EnableModuleClock+0x38>)
    2504:	9a01      	ldr	r2, [sp, #4]
    2506:	4613      	mov	r3, r2
    2508:	00db      	lsls	r3, r3, #3
    250a:	4413      	add	r3, r2
    250c:	440b      	add	r3, r1
    250e:	3301      	adds	r3, #1
    2510:	781b      	ldrb	r3, [r3, #0]
    2512:	461a      	mov	r2, r3
    2514:	4b08      	ldr	r3, [pc, #32]	; (2538 <Clock_Ip_EnableModuleClock+0x3c>)
    2516:	5c9b      	ldrb	r3, [r3, r2]
    2518:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    251a:	4a08      	ldr	r2, [pc, #32]	; (253c <Clock_Ip_EnableModuleClock+0x40>)
    251c:	9b03      	ldr	r3, [sp, #12]
    251e:	00db      	lsls	r3, r3, #3
    2520:	4413      	add	r3, r2
    2522:	685b      	ldr	r3, [r3, #4]
    2524:	2100      	movs	r1, #0
    2526:	9801      	ldr	r0, [sp, #4]
    2528:	4798      	blx	r3
}
    252a:	bf00      	nop
    252c:	b005      	add	sp, #20
    252e:	f85d fb04 	ldr.w	pc, [sp], #4
    2532:	bf00      	nop
    2534:	00007c7c 	.word	0x00007c7c
    2538:	00007c1c 	.word	0x00007c1c
    253c:	00008204 	.word	0x00008204

00002540 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2540:	b500      	push	{lr}
    2542:	b083      	sub	sp, #12
    2544:	9001      	str	r0, [sp, #4]
    2546:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2548:	4b08      	ldr	r3, [pc, #32]	; (256c <Clock_Ip_PowerModeChangeNotification+0x2c>)
    254a:	2200      	movs	r2, #0
    254c:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    254e:	4b08      	ldr	r3, [pc, #32]	; (2570 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2550:	681b      	ldr	r3, [r3, #0]
    2552:	2102      	movs	r1, #2
    2554:	4618      	mov	r0, r3
    2556:	f002 fd75 	bl	5044 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    255a:	9900      	ldr	r1, [sp, #0]
    255c:	9801      	ldr	r0, [sp, #4]
    255e:	f002 fc51 	bl	4e04 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2562:	bf00      	nop
    2564:	b003      	add	sp, #12
    2566:	f85d fb04 	ldr.w	pc, [sp], #4
    256a:	bf00      	nop
    256c:	1fff8b10 	.word	0x1fff8b10
    2570:	1fff8b44 	.word	0x1fff8b44

00002574 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2574:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2576:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    257a:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    257c:	4b06      	ldr	r3, [pc, #24]	; (2598 <Clock_Ip_SetWaitStates+0x24>)
    257e:	785b      	ldrb	r3, [r3, #1]
    2580:	2b00      	cmp	r3, #0
    2582:	d005      	beq.n	2590 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2584:	9b01      	ldr	r3, [sp, #4]
    2586:	3b01      	subs	r3, #1
    2588:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    258a:	9b01      	ldr	r3, [sp, #4]
    258c:	2b00      	cmp	r3, #0
    258e:	d1f9      	bne.n	2584 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2590:	bf00      	nop
    2592:	b002      	add	sp, #8
    2594:	4770      	bx	lr
    2596:	bf00      	nop
    2598:	1fff8b4c 	.word	0x1fff8b4c

0000259c <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    259c:	b500      	push	{lr}
    259e:	b083      	sub	sp, #12
    25a0:	9001      	str	r0, [sp, #4]
    25a2:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    25a4:	4b04      	ldr	r3, [pc, #16]	; (25b8 <Clock_Ip_ReportClockErrors+0x1c>)
    25a6:	681b      	ldr	r3, [r3, #0]
    25a8:	9900      	ldr	r1, [sp, #0]
    25aa:	9801      	ldr	r0, [sp, #4]
    25ac:	4798      	blx	r3
}
    25ae:	bf00      	nop
    25b0:	b003      	add	sp, #12
    25b2:	f85d fb04 	ldr.w	pc, [sp], #4
    25b6:	bf00      	nop
    25b8:	1fff8b14 	.word	0x1fff8b14

000025bc <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    25bc:	b500      	push	{lr}
    25be:	b085      	sub	sp, #20
    25c0:	9003      	str	r0, [sp, #12]
    25c2:	9102      	str	r1, [sp, #8]
    25c4:	9201      	str	r2, [sp, #4]
    25c6:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    25c8:	2000      	movs	r0, #0
    25ca:	f7fe ffd0 	bl	156e <OsIf_GetCounter>
    25ce:	4602      	mov	r2, r0
    25d0:	9b03      	ldr	r3, [sp, #12]
    25d2:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    25d4:	9b02      	ldr	r3, [sp, #8]
    25d6:	2200      	movs	r2, #0
    25d8:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    25da:	2100      	movs	r1, #0
    25dc:	9800      	ldr	r0, [sp, #0]
    25de:	f7ff f812 	bl	1606 <OsIf_MicrosToTicks>
    25e2:	4602      	mov	r2, r0
    25e4:	9b01      	ldr	r3, [sp, #4]
    25e6:	601a      	str	r2, [r3, #0]
}
    25e8:	bf00      	nop
    25ea:	b005      	add	sp, #20
    25ec:	f85d fb04 	ldr.w	pc, [sp], #4

000025f0 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    25f0:	b500      	push	{lr}
    25f2:	b087      	sub	sp, #28
    25f4:	9003      	str	r0, [sp, #12]
    25f6:	9102      	str	r1, [sp, #8]
    25f8:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    25fa:	2300      	movs	r3, #0
    25fc:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2600:	2100      	movs	r1, #0
    2602:	9803      	ldr	r0, [sp, #12]
    2604:	f7fe ffcc 	bl	15a0 <OsIf_GetElapsed>
    2608:	4602      	mov	r2, r0
    260a:	9b02      	ldr	r3, [sp, #8]
    260c:	681b      	ldr	r3, [r3, #0]
    260e:	441a      	add	r2, r3
    2610:	9b02      	ldr	r3, [sp, #8]
    2612:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2614:	9b02      	ldr	r3, [sp, #8]
    2616:	681b      	ldr	r3, [r3, #0]
    2618:	9a01      	ldr	r2, [sp, #4]
    261a:	429a      	cmp	r2, r3
    261c:	d802      	bhi.n	2624 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    261e:	2301      	movs	r3, #1
    2620:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2624:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2628:	4618      	mov	r0, r3
    262a:	b007      	add	sp, #28
    262c:	f85d fb04 	ldr.w	pc, [sp], #4

00002630 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2630:	b082      	sub	sp, #8
    2632:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2634:	bf00      	nop
    2636:	b002      	add	sp, #8
    2638:	4770      	bx	lr

0000263a <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    263a:	b500      	push	{lr}
    263c:	b083      	sub	sp, #12
    263e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2640:	9b01      	ldr	r3, [sp, #4]
    2642:	2b00      	cmp	r3, #0
    2644:	d002      	beq.n	264c <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2646:	9801      	ldr	r0, [sp, #4]
    2648:	f000 f8ad 	bl	27a6 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    264c:	bf00      	nop
    264e:	b003      	add	sp, #12
    2650:	f85d fb04 	ldr.w	pc, [sp], #4

00002654 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2654:	b500      	push	{lr}
    2656:	b083      	sub	sp, #12
    2658:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    265a:	9b01      	ldr	r3, [sp, #4]
    265c:	2b00      	cmp	r3, #0
    265e:	d002      	beq.n	2666 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2660:	9801      	ldr	r0, [sp, #4]
    2662:	f000 f8cd 	bl	2800 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2666:	bf00      	nop
    2668:	b003      	add	sp, #12
    266a:	f85d fb04 	ldr.w	pc, [sp], #4

0000266e <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    266e:	b500      	push	{lr}
    2670:	b083      	sub	sp, #12
    2672:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2674:	9b01      	ldr	r3, [sp, #4]
    2676:	2b00      	cmp	r3, #0
    2678:	d002      	beq.n	2680 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    267a:	9801      	ldr	r0, [sp, #4]
    267c:	f000 f8ee 	bl	285c <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2680:	bf00      	nop
    2682:	b003      	add	sp, #12
    2684:	f85d fb04 	ldr.w	pc, [sp], #4

00002688 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2688:	b500      	push	{lr}
    268a:	b083      	sub	sp, #12
    268c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    268e:	9b01      	ldr	r3, [sp, #4]
    2690:	2b00      	cmp	r3, #0
    2692:	d002      	beq.n	269a <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2694:	9801      	ldr	r0, [sp, #4]
    2696:	f000 f8f9 	bl	288c <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    269a:	bf00      	nop
    269c:	b003      	add	sp, #12
    269e:	f85d fb04 	ldr.w	pc, [sp], #4

000026a2 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    26a2:	b500      	push	{lr}
    26a4:	b083      	sub	sp, #12
    26a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26a8:	9b01      	ldr	r3, [sp, #4]
    26aa:	2b00      	cmp	r3, #0
    26ac:	d002      	beq.n	26b4 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    26ae:	9801      	ldr	r0, [sp, #4]
    26b0:	f000 f904 	bl	28bc <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    26b4:	bf00      	nop
    26b6:	b003      	add	sp, #12
    26b8:	f85d fb04 	ldr.w	pc, [sp], #4

000026bc <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    26bc:	b500      	push	{lr}
    26be:	b083      	sub	sp, #12
    26c0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26c2:	9b01      	ldr	r3, [sp, #4]
    26c4:	2b00      	cmp	r3, #0
    26c6:	d002      	beq.n	26ce <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    26c8:	9801      	ldr	r0, [sp, #4]
    26ca:	f000 f90f 	bl	28ec <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    26ce:	bf00      	nop
    26d0:	b003      	add	sp, #12
    26d2:	f85d fb04 	ldr.w	pc, [sp], #4

000026d6 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    26d6:	b500      	push	{lr}
    26d8:	b083      	sub	sp, #12
    26da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26dc:	9b01      	ldr	r3, [sp, #4]
    26de:	2b00      	cmp	r3, #0
    26e0:	d002      	beq.n	26e8 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    26e2:	9801      	ldr	r0, [sp, #4]
    26e4:	f000 f91a 	bl	291c <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    26e8:	bf00      	nop
    26ea:	b003      	add	sp, #12
    26ec:	f85d fb04 	ldr.w	pc, [sp], #4

000026f0 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    26f0:	b500      	push	{lr}
    26f2:	b083      	sub	sp, #12
    26f4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26f6:	9b01      	ldr	r3, [sp, #4]
    26f8:	2b00      	cmp	r3, #0
    26fa:	d002      	beq.n	2702 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    26fc:	9801      	ldr	r0, [sp, #4]
    26fe:	f000 f925 	bl	294c <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2702:	bf00      	nop
    2704:	b003      	add	sp, #12
    2706:	f85d fb04 	ldr.w	pc, [sp], #4

0000270a <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    270a:	b500      	push	{lr}
    270c:	b083      	sub	sp, #12
    270e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2710:	9b01      	ldr	r3, [sp, #4]
    2712:	2b00      	cmp	r3, #0
    2714:	d002      	beq.n	271c <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2716:	9801      	ldr	r0, [sp, #4]
    2718:	f000 f930 	bl	297c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    271c:	bf00      	nop
    271e:	b003      	add	sp, #12
    2720:	f85d fb04 	ldr.w	pc, [sp], #4

00002724 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2724:	b500      	push	{lr}
    2726:	b083      	sub	sp, #12
    2728:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    272a:	9b01      	ldr	r3, [sp, #4]
    272c:	2b00      	cmp	r3, #0
    272e:	d002      	beq.n	2736 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2730:	9801      	ldr	r0, [sp, #4]
    2732:	f000 f93b 	bl	29ac <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2736:	bf00      	nop
    2738:	b003      	add	sp, #12
    273a:	f85d fb04 	ldr.w	pc, [sp], #4

0000273e <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    273e:	b500      	push	{lr}
    2740:	b083      	sub	sp, #12
    2742:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2744:	9b01      	ldr	r3, [sp, #4]
    2746:	2b00      	cmp	r3, #0
    2748:	d002      	beq.n	2750 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    274a:	9801      	ldr	r0, [sp, #4]
    274c:	f000 f946 	bl	29dc <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2750:	bf00      	nop
    2752:	b003      	add	sp, #12
    2754:	f85d fb04 	ldr.w	pc, [sp], #4

00002758 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2758:	b500      	push	{lr}
    275a:	b083      	sub	sp, #12
    275c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    275e:	9b01      	ldr	r3, [sp, #4]
    2760:	2b00      	cmp	r3, #0
    2762:	d002      	beq.n	276a <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2764:	9801      	ldr	r0, [sp, #4]
    2766:	f000 f951 	bl	2a0c <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    276a:	bf00      	nop
    276c:	b003      	add	sp, #12
    276e:	f85d fb04 	ldr.w	pc, [sp], #4

00002772 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2772:	b500      	push	{lr}
    2774:	b083      	sub	sp, #12
    2776:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2778:	9b01      	ldr	r3, [sp, #4]
    277a:	2b00      	cmp	r3, #0
    277c:	d002      	beq.n	2784 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    277e:	9801      	ldr	r0, [sp, #4]
    2780:	f000 f95e 	bl	2a40 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2784:	bf00      	nop
    2786:	b003      	add	sp, #12
    2788:	f85d fb04 	ldr.w	pc, [sp], #4

0000278c <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    278c:	b500      	push	{lr}
    278e:	b083      	sub	sp, #12
    2790:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2792:	9b01      	ldr	r3, [sp, #4]
    2794:	2b00      	cmp	r3, #0
    2796:	d002      	beq.n	279e <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2798:	9801      	ldr	r0, [sp, #4]
    279a:	f000 f98b 	bl	2ab4 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    279e:	bf00      	nop
    27a0:	b003      	add	sp, #12
    27a2:	f85d fb04 	ldr.w	pc, [sp], #4

000027a6 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    27a6:	b086      	sub	sp, #24
    27a8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    27aa:	9b01      	ldr	r3, [sp, #4]
    27ac:	681a      	ldr	r2, [r3, #0]
    27ae:	4911      	ldr	r1, [pc, #68]	; (27f4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    27b0:	4613      	mov	r3, r2
    27b2:	00db      	lsls	r3, r3, #3
    27b4:	4413      	add	r3, r2
    27b6:	440b      	add	r3, r1
    27b8:	781b      	ldrb	r3, [r3, #0]
    27ba:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    27bc:	9b01      	ldr	r3, [sp, #4]
    27be:	685b      	ldr	r3, [r3, #4]
    27c0:	4a0d      	ldr	r2, [pc, #52]	; (27f8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    27c2:	5cd3      	ldrb	r3, [r2, r3]
    27c4:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    27c6:	4a0d      	ldr	r2, [pc, #52]	; (27fc <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    27c8:	9b05      	ldr	r3, [sp, #20]
    27ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    27ce:	681b      	ldr	r3, [r3, #0]
    27d0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    27d2:	9b03      	ldr	r3, [sp, #12]
    27d4:	f023 0307 	bic.w	r3, r3, #7
    27d8:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    27da:	9a03      	ldr	r2, [sp, #12]
    27dc:	9b04      	ldr	r3, [sp, #16]
    27de:	4313      	orrs	r3, r2
    27e0:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    27e2:	4a06      	ldr	r2, [pc, #24]	; (27fc <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    27e4:	9b05      	ldr	r3, [sp, #20]
    27e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    27ea:	9a03      	ldr	r2, [sp, #12]
    27ec:	601a      	str	r2, [r3, #0]
}
    27ee:	bf00      	nop
    27f0:	b006      	add	sp, #24
    27f2:	4770      	bx	lr
    27f4:	00007c7c 	.word	0x00007c7c
    27f8:	00008074 	.word	0x00008074
    27fc:	000080b8 	.word	0x000080b8

00002800 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2800:	b086      	sub	sp, #24
    2802:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2804:	9b01      	ldr	r3, [sp, #4]
    2806:	681a      	ldr	r2, [r3, #0]
    2808:	4911      	ldr	r1, [pc, #68]	; (2850 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    280a:	4613      	mov	r3, r2
    280c:	00db      	lsls	r3, r3, #3
    280e:	4413      	add	r3, r2
    2810:	440b      	add	r3, r1
    2812:	781b      	ldrb	r3, [r3, #0]
    2814:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2816:	9b01      	ldr	r3, [sp, #4]
    2818:	685b      	ldr	r3, [r3, #4]
    281a:	4a0e      	ldr	r2, [pc, #56]	; (2854 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    281c:	5cd3      	ldrb	r3, [r2, r3]
    281e:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2820:	4a0d      	ldr	r2, [pc, #52]	; (2858 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2822:	9b05      	ldr	r3, [sp, #20]
    2824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2828:	681b      	ldr	r3, [r3, #0]
    282a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    282c:	9b03      	ldr	r3, [sp, #12]
    282e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2832:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2834:	9b04      	ldr	r3, [sp, #16]
    2836:	021b      	lsls	r3, r3, #8
    2838:	9a03      	ldr	r2, [sp, #12]
    283a:	4313      	orrs	r3, r2
    283c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    283e:	4a06      	ldr	r2, [pc, #24]	; (2858 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2840:	9b05      	ldr	r3, [sp, #20]
    2842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2846:	9a03      	ldr	r2, [sp, #12]
    2848:	601a      	str	r2, [r3, #0]
}
    284a:	bf00      	nop
    284c:	b006      	add	sp, #24
    284e:	4770      	bx	lr
    2850:	00007c7c 	.word	0x00007c7c
    2854:	00008074 	.word	0x00008074
    2858:	000080b8 	.word	0x000080b8

0000285c <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    285c:	b084      	sub	sp, #16
    285e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2860:	4b09      	ldr	r3, [pc, #36]	; (2888 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2862:	695b      	ldr	r3, [r3, #20]
    2864:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2866:	9b03      	ldr	r3, [sp, #12]
    2868:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    286c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    286e:	9b01      	ldr	r3, [sp, #4]
    2870:	685b      	ldr	r3, [r3, #4]
    2872:	3b01      	subs	r3, #1
    2874:	041b      	lsls	r3, r3, #16
    2876:	9a03      	ldr	r2, [sp, #12]
    2878:	4313      	orrs	r3, r2
    287a:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    287c:	4a02      	ldr	r2, [pc, #8]	; (2888 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    287e:	9b03      	ldr	r3, [sp, #12]
    2880:	6153      	str	r3, [r2, #20]
}
    2882:	bf00      	nop
    2884:	b004      	add	sp, #16
    2886:	4770      	bx	lr
    2888:	40064000 	.word	0x40064000

0000288c <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    288c:	b084      	sub	sp, #16
    288e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2890:	4b09      	ldr	r3, [pc, #36]	; (28b8 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2892:	695b      	ldr	r3, [r3, #20]
    2894:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2896:	9b03      	ldr	r3, [sp, #12]
    2898:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    289c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    289e:	9b01      	ldr	r3, [sp, #4]
    28a0:	685b      	ldr	r3, [r3, #4]
    28a2:	3b01      	subs	r3, #1
    28a4:	011b      	lsls	r3, r3, #4
    28a6:	9a03      	ldr	r2, [sp, #12]
    28a8:	4313      	orrs	r3, r2
    28aa:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    28ac:	4a02      	ldr	r2, [pc, #8]	; (28b8 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    28ae:	9b03      	ldr	r3, [sp, #12]
    28b0:	6153      	str	r3, [r2, #20]
}
    28b2:	bf00      	nop
    28b4:	b004      	add	sp, #16
    28b6:	4770      	bx	lr
    28b8:	40064000 	.word	0x40064000

000028bc <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    28bc:	b084      	sub	sp, #16
    28be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    28c0:	4b09      	ldr	r3, [pc, #36]	; (28e8 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    28c2:	695b      	ldr	r3, [r3, #20]
    28c4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    28c6:	9b03      	ldr	r3, [sp, #12]
    28c8:	f023 030f 	bic.w	r3, r3, #15
    28cc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    28ce:	9b01      	ldr	r3, [sp, #4]
    28d0:	685b      	ldr	r3, [r3, #4]
    28d2:	3b01      	subs	r3, #1
    28d4:	9a03      	ldr	r2, [sp, #12]
    28d6:	4313      	orrs	r3, r2
    28d8:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    28da:	4a03      	ldr	r2, [pc, #12]	; (28e8 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    28dc:	9b03      	ldr	r3, [sp, #12]
    28de:	6153      	str	r3, [r2, #20]
}
    28e0:	bf00      	nop
    28e2:	b004      	add	sp, #16
    28e4:	4770      	bx	lr
    28e6:	bf00      	nop
    28e8:	40064000 	.word	0x40064000

000028ec <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    28ec:	b084      	sub	sp, #16
    28ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    28f0:	4b09      	ldr	r3, [pc, #36]	; (2918 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    28f2:	699b      	ldr	r3, [r3, #24]
    28f4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    28f6:	9b03      	ldr	r3, [sp, #12]
    28f8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    28fc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    28fe:	9b01      	ldr	r3, [sp, #4]
    2900:	685b      	ldr	r3, [r3, #4]
    2902:	3b01      	subs	r3, #1
    2904:	041b      	lsls	r3, r3, #16
    2906:	9a03      	ldr	r2, [sp, #12]
    2908:	4313      	orrs	r3, r2
    290a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    290c:	4a02      	ldr	r2, [pc, #8]	; (2918 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    290e:	9b03      	ldr	r3, [sp, #12]
    2910:	6193      	str	r3, [r2, #24]
}
    2912:	bf00      	nop
    2914:	b004      	add	sp, #16
    2916:	4770      	bx	lr
    2918:	40064000 	.word	0x40064000

0000291c <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    291c:	b084      	sub	sp, #16
    291e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2920:	4b09      	ldr	r3, [pc, #36]	; (2948 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2922:	699b      	ldr	r3, [r3, #24]
    2924:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2926:	9b03      	ldr	r3, [sp, #12]
    2928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    292c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    292e:	9b01      	ldr	r3, [sp, #4]
    2930:	685b      	ldr	r3, [r3, #4]
    2932:	3b01      	subs	r3, #1
    2934:	011b      	lsls	r3, r3, #4
    2936:	9a03      	ldr	r2, [sp, #12]
    2938:	4313      	orrs	r3, r2
    293a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    293c:	4a02      	ldr	r2, [pc, #8]	; (2948 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    293e:	9b03      	ldr	r3, [sp, #12]
    2940:	6193      	str	r3, [r2, #24]
}
    2942:	bf00      	nop
    2944:	b004      	add	sp, #16
    2946:	4770      	bx	lr
    2948:	40064000 	.word	0x40064000

0000294c <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    294c:	b084      	sub	sp, #16
    294e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2950:	4b09      	ldr	r3, [pc, #36]	; (2978 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2952:	699b      	ldr	r3, [r3, #24]
    2954:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2956:	9b03      	ldr	r3, [sp, #12]
    2958:	f023 030f 	bic.w	r3, r3, #15
    295c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    295e:	9b01      	ldr	r3, [sp, #4]
    2960:	685b      	ldr	r3, [r3, #4]
    2962:	3b01      	subs	r3, #1
    2964:	9a03      	ldr	r2, [sp, #12]
    2966:	4313      	orrs	r3, r2
    2968:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    296a:	4a03      	ldr	r2, [pc, #12]	; (2978 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    296c:	9b03      	ldr	r3, [sp, #12]
    296e:	6193      	str	r3, [r2, #24]
}
    2970:	bf00      	nop
    2972:	b004      	add	sp, #16
    2974:	4770      	bx	lr
    2976:	bf00      	nop
    2978:	40064000 	.word	0x40064000

0000297c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    297c:	b084      	sub	sp, #16
    297e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2980:	4b09      	ldr	r3, [pc, #36]	; (29a8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2982:	69db      	ldr	r3, [r3, #28]
    2984:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2986:	9b03      	ldr	r3, [sp, #12]
    2988:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    298c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    298e:	9b01      	ldr	r3, [sp, #4]
    2990:	685b      	ldr	r3, [r3, #4]
    2992:	3b01      	subs	r3, #1
    2994:	041b      	lsls	r3, r3, #16
    2996:	9a03      	ldr	r2, [sp, #12]
    2998:	4313      	orrs	r3, r2
    299a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    299c:	4a02      	ldr	r2, [pc, #8]	; (29a8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    299e:	9b03      	ldr	r3, [sp, #12]
    29a0:	61d3      	str	r3, [r2, #28]
}
    29a2:	bf00      	nop
    29a4:	b004      	add	sp, #16
    29a6:	4770      	bx	lr
    29a8:	40064000 	.word	0x40064000

000029ac <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    29ac:	b084      	sub	sp, #16
    29ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    29b0:	4b09      	ldr	r3, [pc, #36]	; (29d8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    29b2:	69db      	ldr	r3, [r3, #28]
    29b4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    29b6:	9b03      	ldr	r3, [sp, #12]
    29b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    29bc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    29be:	9b01      	ldr	r3, [sp, #4]
    29c0:	685b      	ldr	r3, [r3, #4]
    29c2:	3b01      	subs	r3, #1
    29c4:	011b      	lsls	r3, r3, #4
    29c6:	9a03      	ldr	r2, [sp, #12]
    29c8:	4313      	orrs	r3, r2
    29ca:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    29cc:	4a02      	ldr	r2, [pc, #8]	; (29d8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    29ce:	9b03      	ldr	r3, [sp, #12]
    29d0:	61d3      	str	r3, [r2, #28]
}
    29d2:	bf00      	nop
    29d4:	b004      	add	sp, #16
    29d6:	4770      	bx	lr
    29d8:	40064000 	.word	0x40064000

000029dc <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    29dc:	b084      	sub	sp, #16
    29de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    29e0:	4b09      	ldr	r3, [pc, #36]	; (2a08 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    29e2:	69db      	ldr	r3, [r3, #28]
    29e4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    29e6:	9b03      	ldr	r3, [sp, #12]
    29e8:	f023 030f 	bic.w	r3, r3, #15
    29ec:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    29ee:	9b01      	ldr	r3, [sp, #4]
    29f0:	685b      	ldr	r3, [r3, #4]
    29f2:	3b01      	subs	r3, #1
    29f4:	9a03      	ldr	r2, [sp, #12]
    29f6:	4313      	orrs	r3, r2
    29f8:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    29fa:	4a03      	ldr	r2, [pc, #12]	; (2a08 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    29fc:	9b03      	ldr	r3, [sp, #12]
    29fe:	61d3      	str	r3, [r2, #28]
}
    2a00:	bf00      	nop
    2a02:	b004      	add	sp, #16
    2a04:	4770      	bx	lr
    2a06:	bf00      	nop
    2a08:	40064000 	.word	0x40064000

00002a0c <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    2a0c:	b084      	sub	sp, #16
    2a0e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2a10:	4b0a      	ldr	r3, [pc, #40]	; (2a3c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2a12:	685b      	ldr	r3, [r3, #4]
    2a14:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    2a16:	9b03      	ldr	r3, [sp, #12]
    2a18:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2a1c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    2a1e:	9b01      	ldr	r3, [sp, #4]
    2a20:	685b      	ldr	r3, [r3, #4]
    2a22:	3b01      	subs	r3, #1
    2a24:	021b      	lsls	r3, r3, #8
    2a26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2a2a:	9a03      	ldr	r2, [sp, #12]
    2a2c:	4313      	orrs	r3, r2
    2a2e:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2a30:	4a02      	ldr	r2, [pc, #8]	; (2a3c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2a32:	9b03      	ldr	r3, [sp, #12]
    2a34:	6053      	str	r3, [r2, #4]
}
    2a36:	bf00      	nop
    2a38:	b004      	add	sp, #16
    2a3a:	4770      	bx	lr
    2a3c:	40048000 	.word	0x40048000

00002a40 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2a40:	b084      	sub	sp, #16
    2a42:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    2a44:	4919      	ldr	r1, [pc, #100]	; (2aac <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2a46:	9b01      	ldr	r3, [sp, #4]
    2a48:	681a      	ldr	r2, [r3, #0]
    2a4a:	4819      	ldr	r0, [pc, #100]	; (2ab0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2a4c:	4613      	mov	r3, r2
    2a4e:	00db      	lsls	r3, r3, #3
    2a50:	4413      	add	r3, r2
    2a52:	4403      	add	r3, r0
    2a54:	3305      	adds	r3, #5
    2a56:	781b      	ldrb	r3, [r3, #0]
    2a58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2a5c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2a5e:	9b03      	ldr	r3, [sp, #12]
    2a60:	f023 030f 	bic.w	r3, r3, #15
    2a64:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    2a66:	9b01      	ldr	r3, [sp, #4]
    2a68:	685b      	ldr	r3, [r3, #4]
    2a6a:	3b01      	subs	r3, #1
    2a6c:	f003 0307 	and.w	r3, r3, #7
    2a70:	9a03      	ldr	r2, [sp, #12]
    2a72:	4313      	orrs	r3, r2
    2a74:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    2a76:	9b01      	ldr	r3, [sp, #4]
    2a78:	7a1b      	ldrb	r3, [r3, #8]
    2a7a:	3b01      	subs	r3, #1
    2a7c:	00db      	lsls	r3, r3, #3
    2a7e:	f003 0308 	and.w	r3, r3, #8
    2a82:	9a03      	ldr	r2, [sp, #12]
    2a84:	4313      	orrs	r3, r2
    2a86:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    2a88:	4908      	ldr	r1, [pc, #32]	; (2aac <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2a8a:	9b01      	ldr	r3, [sp, #4]
    2a8c:	681a      	ldr	r2, [r3, #0]
    2a8e:	4808      	ldr	r0, [pc, #32]	; (2ab0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2a90:	4613      	mov	r3, r2
    2a92:	00db      	lsls	r3, r3, #3
    2a94:	4413      	add	r3, r2
    2a96:	4403      	add	r3, r0
    2a98:	3305      	adds	r3, #5
    2a9a:	781b      	ldrb	r3, [r3, #0]
    2a9c:	461a      	mov	r2, r3
    2a9e:	9b03      	ldr	r3, [sp, #12]
    2aa0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    2aa4:	bf00      	nop
    2aa6:	b004      	add	sp, #16
    2aa8:	4770      	bx	lr
    2aaa:	bf00      	nop
    2aac:	40065000 	.word	0x40065000
    2ab0:	00007c7c 	.word	0x00007c7c

00002ab4 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ab4:	b084      	sub	sp, #16
    2ab6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2ab8:	4b10      	ldr	r3, [pc, #64]	; (2afc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2abc:	4a0f      	ldr	r2, [pc, #60]	; (2afc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2ac2:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    2ac4:	4b0d      	ldr	r3, [pc, #52]	; (2afc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2ac8:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    2aca:	9b03      	ldr	r3, [sp, #12]
    2acc:	f023 030f 	bic.w	r3, r3, #15
    2ad0:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2ad2:	9b01      	ldr	r3, [sp, #4]
    2ad4:	685b      	ldr	r3, [r3, #4]
    2ad6:	3b01      	subs	r3, #1
    2ad8:	005b      	lsls	r3, r3, #1
    2ada:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    2ade:	9b01      	ldr	r3, [sp, #4]
    2ae0:	7a1b      	ldrb	r3, [r3, #8]
    2ae2:	3b01      	subs	r3, #1
    2ae4:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2ae8:	4313      	orrs	r3, r2
    2aea:	9a03      	ldr	r2, [sp, #12]
    2aec:	4313      	orrs	r3, r2
    2aee:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    2af0:	4a02      	ldr	r2, [pc, #8]	; (2afc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2af2:	9b03      	ldr	r3, [sp, #12]
    2af4:	6693      	str	r3, [r2, #104]	; 0x68
}
    2af6:	bf00      	nop
    2af8:	b004      	add	sp, #16
    2afa:	4770      	bx	lr
    2afc:	40048000 	.word	0x40048000

00002b00 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    2b00:	b082      	sub	sp, #8
    2b02:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2b04:	bf00      	nop
    2b06:	b002      	add	sp, #8
    2b08:	4770      	bx	lr
	...

00002b0c <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    2b0c:	b082      	sub	sp, #8
    2b0e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2b10:	bf00      	nop
    2b12:	b002      	add	sp, #8
    2b14:	4770      	bx	lr

00002b16 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    2b16:	b082      	sub	sp, #8
    2b18:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    2b1a:	bf00      	nop
    2b1c:	b002      	add	sp, #8
    2b1e:	4770      	bx	lr

00002b20 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2b20:	b500      	push	{lr}
    2b22:	b083      	sub	sp, #12
    2b24:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b26:	9b01      	ldr	r3, [sp, #4]
    2b28:	2b00      	cmp	r3, #0
    2b2a:	d002      	beq.n	2b32 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    2b2c:	9801      	ldr	r0, [sp, #4]
    2b2e:	f000 f86a 	bl	2c06 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b32:	bf00      	nop
    2b34:	b003      	add	sp, #12
    2b36:	f85d fb04 	ldr.w	pc, [sp], #4

00002b3a <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2b3a:	b500      	push	{lr}
    2b3c:	b083      	sub	sp, #12
    2b3e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b40:	9b01      	ldr	r3, [sp, #4]
    2b42:	2b00      	cmp	r3, #0
    2b44:	d002      	beq.n	2b4c <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    2b46:	9801      	ldr	r0, [sp, #4]
    2b48:	f000 f884 	bl	2c54 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    2b4c:	bf00      	nop
    2b4e:	b003      	add	sp, #12
    2b50:	f85d fb04 	ldr.w	pc, [sp], #4

00002b54 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2b54:	b500      	push	{lr}
    2b56:	b089      	sub	sp, #36	; 0x24
    2b58:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2b5a:	2300      	movs	r3, #0
    2b5c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    2b60:	9b01      	ldr	r3, [sp, #4]
    2b62:	2b00      	cmp	r3, #0
    2b64:	d031      	beq.n	2bca <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    2b66:	4b1b      	ldr	r3, [pc, #108]	; (2bd4 <Clock_Ip_CompleteSOSC+0x80>)
    2b68:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2b6c:	f003 0301 	and.w	r3, r3, #1
    2b70:	2b00      	cmp	r3, #0
    2b72:	d02a      	beq.n	2bca <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2b74:	aa03      	add	r2, sp, #12
    2b76:	a904      	add	r1, sp, #16
    2b78:	a805      	add	r0, sp, #20
    2b7a:	f24c 3350 	movw	r3, #50000	; 0xc350
    2b7e:	f7ff fd1d 	bl	25bc <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    2b82:	4b14      	ldr	r3, [pc, #80]	; (2bd4 <Clock_Ip_CompleteSOSC+0x80>)
    2b84:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2b88:	0e1b      	lsrs	r3, r3, #24
    2b8a:	f003 0301 	and.w	r3, r3, #1
    2b8e:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2b90:	9a03      	ldr	r2, [sp, #12]
    2b92:	a904      	add	r1, sp, #16
    2b94:	ab05      	add	r3, sp, #20
    2b96:	4618      	mov	r0, r3
    2b98:	f7ff fd2a 	bl	25f0 <Clock_Ip_TimeoutExpired>
    2b9c:	4603      	mov	r3, r0
    2b9e:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    2ba2:	9b06      	ldr	r3, [sp, #24]
    2ba4:	2b00      	cmp	r3, #0
    2ba6:	d106      	bne.n	2bb6 <Clock_Ip_CompleteSOSC+0x62>
    2ba8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2bac:	f083 0301 	eor.w	r3, r3, #1
    2bb0:	b2db      	uxtb	r3, r3
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	d1e5      	bne.n	2b82 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    2bb6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2bba:	2b00      	cmp	r3, #0
    2bbc:	d005      	beq.n	2bca <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2bbe:	9b01      	ldr	r3, [sp, #4]
    2bc0:	681b      	ldr	r3, [r3, #0]
    2bc2:	4619      	mov	r1, r3
    2bc4:	2001      	movs	r0, #1
    2bc6:	f7ff fce9 	bl	259c <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    2bca:	bf00      	nop
    2bcc:	b009      	add	sp, #36	; 0x24
    2bce:	f85d fb04 	ldr.w	pc, [sp], #4
    2bd2:	bf00      	nop
    2bd4:	40064000 	.word	0x40064000

00002bd8 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    2bd8:	b500      	push	{lr}
    2bda:	b083      	sub	sp, #12
    2bdc:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    2bde:	9801      	ldr	r0, [sp, #4]
    2be0:	f000 f8c0 	bl	2d64 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2be4:	bf00      	nop
    2be6:	b003      	add	sp, #12
    2be8:	f85d fb04 	ldr.w	pc, [sp], #4

00002bec <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2bec:	b500      	push	{lr}
    2bee:	b083      	sub	sp, #12
    2bf0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bf2:	9b01      	ldr	r3, [sp, #4]
    2bf4:	2b00      	cmp	r3, #0
    2bf6:	d002      	beq.n	2bfe <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    2bf8:	9801      	ldr	r0, [sp, #4]
    2bfa:	f000 f8c3 	bl	2d84 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bfe:	bf00      	nop
    2c00:	b003      	add	sp, #12
    2c02:	f85d fb04 	ldr.w	pc, [sp], #4

00002c06 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2c06:	b082      	sub	sp, #8
    2c08:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    2c0a:	4b11      	ldr	r3, [pc, #68]	; (2c50 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2c0c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2c10:	4a0f      	ldr	r2, [pc, #60]	; (2c50 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2c12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2c16:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    2c1a:	4b0d      	ldr	r3, [pc, #52]	; (2c50 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2c1c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2c20:	4a0b      	ldr	r2, [pc, #44]	; (2c50 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2c26:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    2c2a:	4b09      	ldr	r3, [pc, #36]	; (2c50 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2c2c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2c30:	4a07      	ldr	r2, [pc, #28]	; (2c50 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2c32:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    2c36:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    2c3a:	4b05      	ldr	r3, [pc, #20]	; (2c50 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2c3c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2c40:	4a03      	ldr	r2, [pc, #12]	; (2c50 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2c42:	f023 0301 	bic.w	r3, r3, #1
    2c46:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2c4a:	bf00      	nop
    2c4c:	b002      	add	sp, #8
    2c4e:	4770      	bx	lr
    2c50:	40064000 	.word	0x40064000

00002c54 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2c54:	b082      	sub	sp, #8
    2c56:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    2c58:	9b01      	ldr	r3, [sp, #4]
    2c5a:	891b      	ldrh	r3, [r3, #8]
    2c5c:	2b01      	cmp	r3, #1
    2c5e:	d174      	bne.n	2d4a <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    2c60:	9b01      	ldr	r3, [sp, #4]
    2c62:	7bdb      	ldrb	r3, [r3, #15]
    2c64:	2b00      	cmp	r3, #0
    2c66:	d002      	beq.n	2c6e <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    2c68:	2b01      	cmp	r3, #1
    2c6a:	d009      	beq.n	2c80 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    2c6c:	e011      	b.n	2c92 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    2c6e:	4b39      	ldr	r3, [pc, #228]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2c70:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2c74:	4a37      	ldr	r2, [pc, #220]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2c76:	f023 0308 	bic.w	r3, r3, #8
    2c7a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2c7e:	e008      	b.n	2c92 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    2c80:	4b34      	ldr	r3, [pc, #208]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2c82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2c86:	4a33      	ldr	r2, [pc, #204]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2c88:	f043 0308 	orr.w	r3, r3, #8
    2c8c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2c90:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    2c92:	4b30      	ldr	r3, [pc, #192]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2c94:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2c98:	4a2e      	ldr	r2, [pc, #184]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2c9a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    2c9e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    2ca2:	9b01      	ldr	r3, [sp, #4]
    2ca4:	685b      	ldr	r3, [r3, #4]
    2ca6:	4a2c      	ldr	r2, [pc, #176]	; (2d58 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    2ca8:	4293      	cmp	r3, r2
    2caa:	d90d      	bls.n	2cc8 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    2cac:	9b01      	ldr	r3, [sp, #4]
    2cae:	685b      	ldr	r3, [r3, #4]
    2cb0:	4a2a      	ldr	r2, [pc, #168]	; (2d5c <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    2cb2:	4293      	cmp	r3, r2
    2cb4:	d208      	bcs.n	2cc8 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    2cb6:	4b27      	ldr	r3, [pc, #156]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2cb8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2cbc:	4a25      	ldr	r2, [pc, #148]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2cbe:	f043 0320 	orr.w	r3, r3, #32
    2cc2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2cc6:	e007      	b.n	2cd8 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    2cc8:	4b22      	ldr	r3, [pc, #136]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2cca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2cce:	4a21      	ldr	r2, [pc, #132]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2cd0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    2cd4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    2cd8:	9b01      	ldr	r3, [sp, #4]
    2cda:	7b1b      	ldrb	r3, [r3, #12]
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d108      	bne.n	2cf2 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    2ce0:	4b1c      	ldr	r3, [pc, #112]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2ce2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2ce6:	4a1b      	ldr	r2, [pc, #108]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2ce8:	f043 0304 	orr.w	r3, r3, #4
    2cec:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2cf0:	e007      	b.n	2d02 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    2cf2:	4b18      	ldr	r3, [pc, #96]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2cf4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2cf8:	4a16      	ldr	r2, [pc, #88]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2cfa:	f023 0304 	bic.w	r3, r3, #4
    2cfe:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    2d02:	9b01      	ldr	r3, [sp, #4]
    2d04:	7c1b      	ldrb	r3, [r3, #16]
    2d06:	2b02      	cmp	r3, #2
    2d08:	d011      	beq.n	2d2e <Clock_Ip_SetSOSC_TrustedCall+0xda>
    2d0a:	2b02      	cmp	r3, #2
    2d0c:	dc14      	bgt.n	2d38 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    2d0e:	2b00      	cmp	r3, #0
    2d10:	d002      	beq.n	2d18 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    2d12:	2b01      	cmp	r3, #1
    2d14:	d005      	beq.n	2d22 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    2d16:	e00f      	b.n	2d38 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2d18:	4b0e      	ldr	r3, [pc, #56]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2d1a:	2201      	movs	r2, #1
    2d1c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2d20:	e014      	b.n	2d4c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2d22:	4b0c      	ldr	r3, [pc, #48]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2d24:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    2d28:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2d2c:	e00e      	b.n	2d4c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2d2e:	4b09      	ldr	r3, [pc, #36]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2d30:	4a0b      	ldr	r2, [pc, #44]	; (2d60 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    2d32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    2d36:	e009      	b.n	2d4c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2d38:	4b06      	ldr	r3, [pc, #24]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2d3a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2d3e:	4a05      	ldr	r2, [pc, #20]	; (2d54 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2d40:	f043 0301 	orr.w	r3, r3, #1
    2d44:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    2d48:	e000      	b.n	2d4c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    2d4a:	bf00      	nop
}
    2d4c:	bf00      	nop
    2d4e:	b002      	add	sp, #8
    2d50:	4770      	bx	lr
    2d52:	bf00      	nop
    2d54:	40064000 	.word	0x40064000
    2d58:	003d08ff 	.word	0x003d08ff
    2d5c:	007a1200 	.word	0x007a1200
    2d60:	00030001 	.word	0x00030001

00002d64 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    2d64:	b082      	sub	sp, #8
    2d66:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    2d68:	4b05      	ldr	r3, [pc, #20]	; (2d80 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2d6a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2d6e:	4a04      	ldr	r2, [pc, #16]	; (2d80 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2d70:	f023 0301 	bic.w	r3, r3, #1
    2d74:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2d78:	bf00      	nop
    2d7a:	b002      	add	sp, #8
    2d7c:	4770      	bx	lr
    2d7e:	bf00      	nop
    2d80:	40064000 	.word	0x40064000

00002d84 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2d84:	b082      	sub	sp, #8
    2d86:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2d88:	9b01      	ldr	r3, [sp, #4]
    2d8a:	891b      	ldrh	r3, [r3, #8]
    2d8c:	2b01      	cmp	r3, #1
    2d8e:	d107      	bne.n	2da0 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2d90:	4b05      	ldr	r3, [pc, #20]	; (2da8 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2d92:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2d96:	4a04      	ldr	r2, [pc, #16]	; (2da8 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2d98:	f043 0301 	orr.w	r3, r3, #1
    2d9c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    2da0:	bf00      	nop
    2da2:	b002      	add	sp, #8
    2da4:	4770      	bx	lr
    2da6:	bf00      	nop
    2da8:	40064000 	.word	0x40064000

00002dac <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    2dac:	b082      	sub	sp, #8
    2dae:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2db0:	bf00      	nop
    2db2:	b002      	add	sp, #8
    2db4:	4770      	bx	lr

00002db6 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    2db6:	b082      	sub	sp, #8
    2db8:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    2dba:	2300      	movs	r3, #0
}
    2dbc:	4618      	mov	r0, r3
    2dbe:	b002      	add	sp, #8
    2dc0:	4770      	bx	lr

00002dc2 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    2dc2:	b082      	sub	sp, #8
    2dc4:	9001      	str	r0, [sp, #4]
    2dc6:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    2dc8:	bf00      	nop
    2dca:	b002      	add	sp, #8
    2dcc:	4770      	bx	lr
	...

00002dd0 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    2dd0:	b082      	sub	sp, #8
    2dd2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2dd4:	bf00      	nop
    2dd6:	b002      	add	sp, #8
    2dd8:	4770      	bx	lr

00002dda <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    2dda:	b082      	sub	sp, #8
    2ddc:	9001      	str	r0, [sp, #4]
    2dde:	460b      	mov	r3, r1
    2de0:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    2de4:	bf00      	nop
    2de6:	b002      	add	sp, #8
    2de8:	4770      	bx	lr

00002dea <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    2dea:	b500      	push	{lr}
    2dec:	b083      	sub	sp, #12
    2dee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2df0:	9b01      	ldr	r3, [sp, #4]
    2df2:	2b00      	cmp	r3, #0
    2df4:	d002      	beq.n	2dfc <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    2df6:	9801      	ldr	r0, [sp, #4]
    2df8:	f000 f8e7 	bl	2fca <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2dfc:	bf00      	nop
    2dfe:	b003      	add	sp, #12
    2e00:	f85d fb04 	ldr.w	pc, [sp], #4

00002e04 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2e04:	b500      	push	{lr}
    2e06:	b085      	sub	sp, #20
    2e08:	9001      	str	r0, [sp, #4]
    2e0a:	460b      	mov	r3, r1
    2e0c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2e10:	9b01      	ldr	r3, [sp, #4]
    2e12:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2e14:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2e18:	2b00      	cmp	r3, #0
    2e1a:	d003      	beq.n	2e24 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    2e1c:	2300      	movs	r3, #0
    2e1e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2e22:	e002      	b.n	2e2a <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2e24:	2301      	movs	r3, #1
    2e26:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    2e2a:	ab02      	add	r3, sp, #8
    2e2c:	4618      	mov	r0, r3
    2e2e:	f7ff ffdc 	bl	2dea <Clock_Ip_ClockSetSimLPO1KEnable>
}
    2e32:	bf00      	nop
    2e34:	b005      	add	sp, #20
    2e36:	f85d fb04 	ldr.w	pc, [sp], #4

00002e3a <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    2e3a:	b500      	push	{lr}
    2e3c:	b083      	sub	sp, #12
    2e3e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e40:	9b01      	ldr	r3, [sp, #4]
    2e42:	2b00      	cmp	r3, #0
    2e44:	d002      	beq.n	2e4c <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    2e46:	9801      	ldr	r0, [sp, #4]
    2e48:	f000 f8d6 	bl	2ff8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e4c:	bf00      	nop
    2e4e:	b003      	add	sp, #12
    2e50:	f85d fb04 	ldr.w	pc, [sp], #4

00002e54 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2e54:	b500      	push	{lr}
    2e56:	b085      	sub	sp, #20
    2e58:	9001      	str	r0, [sp, #4]
    2e5a:	460b      	mov	r3, r1
    2e5c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2e60:	9b01      	ldr	r3, [sp, #4]
    2e62:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2e64:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2e68:	2b00      	cmp	r3, #0
    2e6a:	d003      	beq.n	2e74 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    2e6c:	2300      	movs	r3, #0
    2e6e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2e72:	e002      	b.n	2e7a <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2e74:	2301      	movs	r3, #1
    2e76:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    2e7a:	ab02      	add	r3, sp, #8
    2e7c:	4618      	mov	r0, r3
    2e7e:	f7ff ffdc 	bl	2e3a <Clock_Ip_ClockSetSimLPO32KEnable>
}
    2e82:	bf00      	nop
    2e84:	b005      	add	sp, #20
    2e86:	f85d fb04 	ldr.w	pc, [sp], #4

00002e8a <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    2e8a:	b500      	push	{lr}
    2e8c:	b083      	sub	sp, #12
    2e8e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e90:	9b01      	ldr	r3, [sp, #4]
    2e92:	2b00      	cmp	r3, #0
    2e94:	d002      	beq.n	2e9c <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    2e96:	9801      	ldr	r0, [sp, #4]
    2e98:	f000 f8c6 	bl	3028 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e9c:	bf00      	nop
    2e9e:	b003      	add	sp, #12
    2ea0:	f85d fb04 	ldr.w	pc, [sp], #4

00002ea4 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2ea4:	b500      	push	{lr}
    2ea6:	b085      	sub	sp, #20
    2ea8:	9001      	str	r0, [sp, #4]
    2eaa:	460b      	mov	r3, r1
    2eac:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2eb0:	9b01      	ldr	r3, [sp, #4]
    2eb2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2eb4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2eb8:	2b00      	cmp	r3, #0
    2eba:	d003      	beq.n	2ec4 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    2ebc:	2300      	movs	r3, #0
    2ebe:	f8ad 300c 	strh.w	r3, [sp, #12]
    2ec2:	e002      	b.n	2eca <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2ec4:	2301      	movs	r3, #1
    2ec6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    2eca:	ab02      	add	r3, sp, #8
    2ecc:	4618      	mov	r0, r3
    2ece:	f7ff ffdc 	bl	2e8a <Clock_Ip_ClockSetSimClkoutEnable>
}
    2ed2:	bf00      	nop
    2ed4:	b005      	add	sp, #20
    2ed6:	f85d fb04 	ldr.w	pc, [sp], #4

00002eda <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    2eda:	b500      	push	{lr}
    2edc:	b083      	sub	sp, #12
    2ede:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ee0:	9b01      	ldr	r3, [sp, #4]
    2ee2:	2b00      	cmp	r3, #0
    2ee4:	d002      	beq.n	2eec <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    2ee6:	9801      	ldr	r0, [sp, #4]
    2ee8:	f000 f8b6 	bl	3058 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2eec:	bf00      	nop
    2eee:	b003      	add	sp, #12
    2ef0:	f85d fb04 	ldr.w	pc, [sp], #4

00002ef4 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2ef4:	b500      	push	{lr}
    2ef6:	b085      	sub	sp, #20
    2ef8:	9001      	str	r0, [sp, #4]
    2efa:	460b      	mov	r3, r1
    2efc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2f00:	9b01      	ldr	r3, [sp, #4]
    2f02:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2f04:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2f08:	2b00      	cmp	r3, #0
    2f0a:	d003      	beq.n	2f14 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    2f0c:	2300      	movs	r3, #0
    2f0e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2f12:	e002      	b.n	2f1a <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2f14:	2301      	movs	r3, #1
    2f16:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    2f1a:	ab02      	add	r3, sp, #8
    2f1c:	4618      	mov	r0, r3
    2f1e:	f7ff ffdc 	bl	2eda <Clock_Ip_ClockSetPccCgcEnable>
}
    2f22:	bf00      	nop
    2f24:	b005      	add	sp, #20
    2f26:	f85d fb04 	ldr.w	pc, [sp], #4

00002f2a <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    2f2a:	b500      	push	{lr}
    2f2c:	b083      	sub	sp, #12
    2f2e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f30:	9b01      	ldr	r3, [sp, #4]
    2f32:	2b00      	cmp	r3, #0
    2f34:	d002      	beq.n	2f3c <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    2f36:	9801      	ldr	r0, [sp, #4]
    2f38:	f000 f8bc 	bl	30b4 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f3c:	bf00      	nop
    2f3e:	b003      	add	sp, #12
    2f40:	f85d fb04 	ldr.w	pc, [sp], #4

00002f44 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    2f44:	b500      	push	{lr}
    2f46:	b085      	sub	sp, #20
    2f48:	9001      	str	r0, [sp, #4]
    2f4a:	460b      	mov	r3, r1
    2f4c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2f50:	9b01      	ldr	r3, [sp, #4]
    2f52:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2f54:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2f58:	2b00      	cmp	r3, #0
    2f5a:	d003      	beq.n	2f64 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    2f5c:	2300      	movs	r3, #0
    2f5e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2f62:	e002      	b.n	2f6a <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2f64:	2301      	movs	r3, #1
    2f66:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    2f6a:	ab02      	add	r3, sp, #8
    2f6c:	4618      	mov	r0, r3
    2f6e:	f7ff ffdc 	bl	2f2a <Clock_Ip_ClockSetSimGate>
}
    2f72:	bf00      	nop
    2f74:	b005      	add	sp, #20
    2f76:	f85d fb04 	ldr.w	pc, [sp], #4

00002f7a <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    2f7a:	b500      	push	{lr}
    2f7c:	b083      	sub	sp, #12
    2f7e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f80:	9b01      	ldr	r3, [sp, #4]
    2f82:	2b00      	cmp	r3, #0
    2f84:	d002      	beq.n	2f8c <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    2f86:	9801      	ldr	r0, [sp, #4]
    2f88:	f000 f8c0 	bl	310c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f8c:	bf00      	nop
    2f8e:	b003      	add	sp, #12
    2f90:	f85d fb04 	ldr.w	pc, [sp], #4

00002f94 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2f94:	b500      	push	{lr}
    2f96:	b085      	sub	sp, #20
    2f98:	9001      	str	r0, [sp, #4]
    2f9a:	460b      	mov	r3, r1
    2f9c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2fa0:	9b01      	ldr	r3, [sp, #4]
    2fa2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2fa4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2fa8:	2b00      	cmp	r3, #0
    2faa:	d003      	beq.n	2fb4 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    2fac:	2300      	movs	r3, #0
    2fae:	f8ad 300c 	strh.w	r3, [sp, #12]
    2fb2:	e002      	b.n	2fba <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2fb4:	2301      	movs	r3, #1
    2fb6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    2fba:	ab02      	add	r3, sp, #8
    2fbc:	4618      	mov	r0, r3
    2fbe:	f7ff ffdc 	bl	2f7a <Clock_Ip_ClockSetSimTraceEnable>
}
    2fc2:	bf00      	nop
    2fc4:	b005      	add	sp, #20
    2fc6:	f85d fb04 	ldr.w	pc, [sp], #4

00002fca <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2fca:	b084      	sub	sp, #16
    2fcc:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2fce:	4b09      	ldr	r3, [pc, #36]	; (2ff4 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2fd0:	691b      	ldr	r3, [r3, #16]
    2fd2:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    2fd4:	9b03      	ldr	r3, [sp, #12]
    2fd6:	f023 0301 	bic.w	r3, r3, #1
    2fda:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    2fdc:	9b01      	ldr	r3, [sp, #4]
    2fde:	889b      	ldrh	r3, [r3, #4]
    2fe0:	461a      	mov	r2, r3
    2fe2:	9b03      	ldr	r3, [sp, #12]
    2fe4:	4313      	orrs	r3, r2
    2fe6:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2fe8:	4a02      	ldr	r2, [pc, #8]	; (2ff4 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2fea:	9b03      	ldr	r3, [sp, #12]
    2fec:	6113      	str	r3, [r2, #16]
}
    2fee:	bf00      	nop
    2ff0:	b004      	add	sp, #16
    2ff2:	4770      	bx	lr
    2ff4:	40048000 	.word	0x40048000

00002ff8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2ff8:	b084      	sub	sp, #16
    2ffa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2ffc:	4b09      	ldr	r3, [pc, #36]	; (3024 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2ffe:	691b      	ldr	r3, [r3, #16]
    3000:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    3002:	9b03      	ldr	r3, [sp, #12]
    3004:	f023 0302 	bic.w	r3, r3, #2
    3008:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    300a:	9b01      	ldr	r3, [sp, #4]
    300c:	889b      	ldrh	r3, [r3, #4]
    300e:	005b      	lsls	r3, r3, #1
    3010:	9a03      	ldr	r2, [sp, #12]
    3012:	4313      	orrs	r3, r2
    3014:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3016:	4a03      	ldr	r2, [pc, #12]	; (3024 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3018:	9b03      	ldr	r3, [sp, #12]
    301a:	6113      	str	r3, [r2, #16]
}
    301c:	bf00      	nop
    301e:	b004      	add	sp, #16
    3020:	4770      	bx	lr
    3022:	bf00      	nop
    3024:	40048000 	.word	0x40048000

00003028 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3028:	b084      	sub	sp, #16
    302a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    302c:	4b09      	ldr	r3, [pc, #36]	; (3054 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    302e:	685b      	ldr	r3, [r3, #4]
    3030:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    3032:	9b03      	ldr	r3, [sp, #12]
    3034:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3038:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    303a:	9b01      	ldr	r3, [sp, #4]
    303c:	889b      	ldrh	r3, [r3, #4]
    303e:	02db      	lsls	r3, r3, #11
    3040:	9a03      	ldr	r2, [sp, #12]
    3042:	4313      	orrs	r3, r2
    3044:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3046:	4a03      	ldr	r2, [pc, #12]	; (3054 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3048:	9b03      	ldr	r3, [sp, #12]
    304a:	6053      	str	r3, [r2, #4]
}
    304c:	bf00      	nop
    304e:	b004      	add	sp, #16
    3050:	4770      	bx	lr
    3052:	bf00      	nop
    3054:	40048000 	.word	0x40048000

00003058 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3058:	b084      	sub	sp, #16
    305a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    305c:	4913      	ldr	r1, [pc, #76]	; (30ac <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    305e:	9b01      	ldr	r3, [sp, #4]
    3060:	681a      	ldr	r2, [r3, #0]
    3062:	4813      	ldr	r0, [pc, #76]	; (30b0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3064:	4613      	mov	r3, r2
    3066:	00db      	lsls	r3, r3, #3
    3068:	4413      	add	r3, r2
    306a:	4403      	add	r3, r0
    306c:	3306      	adds	r3, #6
    306e:	781b      	ldrb	r3, [r3, #0]
    3070:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3074:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    3076:	9b03      	ldr	r3, [sp, #12]
    3078:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    307c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    307e:	9b01      	ldr	r3, [sp, #4]
    3080:	889b      	ldrh	r3, [r3, #4]
    3082:	079b      	lsls	r3, r3, #30
    3084:	9a03      	ldr	r2, [sp, #12]
    3086:	4313      	orrs	r3, r2
    3088:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    308a:	4908      	ldr	r1, [pc, #32]	; (30ac <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    308c:	9b01      	ldr	r3, [sp, #4]
    308e:	681a      	ldr	r2, [r3, #0]
    3090:	4807      	ldr	r0, [pc, #28]	; (30b0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3092:	4613      	mov	r3, r2
    3094:	00db      	lsls	r3, r3, #3
    3096:	4413      	add	r3, r2
    3098:	4403      	add	r3, r0
    309a:	3306      	adds	r3, #6
    309c:	781b      	ldrb	r3, [r3, #0]
    309e:	461a      	mov	r2, r3
    30a0:	9b03      	ldr	r3, [sp, #12]
    30a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    30a6:	bf00      	nop
    30a8:	b004      	add	sp, #16
    30aa:	4770      	bx	lr
    30ac:	40065000 	.word	0x40065000
    30b0:	00007c7c 	.word	0x00007c7c

000030b4 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    30b4:	b086      	sub	sp, #24
    30b6:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    30b8:	9b01      	ldr	r3, [sp, #4]
    30ba:	889b      	ldrh	r3, [r3, #4]
    30bc:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    30be:	9b01      	ldr	r3, [sp, #4]
    30c0:	681a      	ldr	r2, [r3, #0]
    30c2:	4910      	ldr	r1, [pc, #64]	; (3104 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    30c4:	4613      	mov	r3, r2
    30c6:	00db      	lsls	r3, r3, #3
    30c8:	4413      	add	r3, r2
    30ca:	440b      	add	r3, r1
    30cc:	3306      	adds	r3, #6
    30ce:	781b      	ldrb	r3, [r3, #0]
    30d0:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    30d2:	4b0d      	ldr	r3, [pc, #52]	; (3108 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    30d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    30d6:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    30d8:	2201      	movs	r2, #1
    30da:	9b04      	ldr	r3, [sp, #16]
    30dc:	fa02 f303 	lsl.w	r3, r2, r3
    30e0:	43db      	mvns	r3, r3
    30e2:	9a03      	ldr	r2, [sp, #12]
    30e4:	4013      	ands	r3, r2
    30e6:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    30e8:	9a05      	ldr	r2, [sp, #20]
    30ea:	9b04      	ldr	r3, [sp, #16]
    30ec:	fa02 f303 	lsl.w	r3, r2, r3
    30f0:	9a03      	ldr	r2, [sp, #12]
    30f2:	4313      	orrs	r3, r2
    30f4:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    30f6:	4a04      	ldr	r2, [pc, #16]	; (3108 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    30f8:	9b03      	ldr	r3, [sp, #12]
    30fa:	6413      	str	r3, [r2, #64]	; 0x40
}
    30fc:	bf00      	nop
    30fe:	b006      	add	sp, #24
    3100:	4770      	bx	lr
    3102:	bf00      	nop
    3104:	00007c7c 	.word	0x00007c7c
    3108:	40048000 	.word	0x40048000

0000310c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    310c:	b084      	sub	sp, #16
    310e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3110:	4b0a      	ldr	r3, [pc, #40]	; (313c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3114:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    3116:	9b01      	ldr	r3, [sp, #4]
    3118:	889b      	ldrh	r3, [r3, #4]
    311a:	2b01      	cmp	r3, #1
    311c:	d104      	bne.n	3128 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    311e:	9b03      	ldr	r3, [sp, #12]
    3120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3124:	9303      	str	r3, [sp, #12]
    3126:	e003      	b.n	3130 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3128:	9b03      	ldr	r3, [sp, #12]
    312a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    312e:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3130:	4a02      	ldr	r2, [pc, #8]	; (313c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3132:	9b03      	ldr	r3, [sp, #12]
    3134:	6693      	str	r3, [r2, #104]	; 0x68
}
    3136:	bf00      	nop
    3138:	b004      	add	sp, #16
    313a:	4770      	bx	lr
    313c:	40048000 	.word	0x40048000

00003140 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3140:	b082      	sub	sp, #8
    3142:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3144:	bf00      	nop
    3146:	b002      	add	sp, #8
    3148:	4770      	bx	lr

0000314a <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    314a:	b082      	sub	sp, #8
    314c:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    314e:	bf00      	nop
    3150:	b002      	add	sp, #8
    3152:	4770      	bx	lr

00003154 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3154:	b500      	push	{lr}
    3156:	b083      	sub	sp, #12
    3158:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    315a:	9b01      	ldr	r3, [sp, #4]
    315c:	2b00      	cmp	r3, #0
    315e:	d002      	beq.n	3166 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    3160:	9801      	ldr	r0, [sp, #4]
    3162:	f000 f8d1 	bl	3308 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3166:	bf00      	nop
    3168:	b003      	add	sp, #12
    316a:	f85d fb04 	ldr.w	pc, [sp], #4

0000316e <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    316e:	b500      	push	{lr}
    3170:	b083      	sub	sp, #12
    3172:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3174:	9b01      	ldr	r3, [sp, #4]
    3176:	2b00      	cmp	r3, #0
    3178:	d002      	beq.n	3180 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    317a:	9801      	ldr	r0, [sp, #4]
    317c:	f000 f950 	bl	3420 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3180:	bf00      	nop
    3182:	b003      	add	sp, #12
    3184:	f85d fb04 	ldr.w	pc, [sp], #4

00003188 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3188:	b500      	push	{lr}
    318a:	b083      	sub	sp, #12
    318c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    318e:	9801      	ldr	r0, [sp, #4]
    3190:	f000 f98e 	bl	34b0 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3194:	bf00      	nop
    3196:	b003      	add	sp, #12
    3198:	f85d fb04 	ldr.w	pc, [sp], #4

0000319c <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    319c:	b500      	push	{lr}
    319e:	b083      	sub	sp, #12
    31a0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31a2:	9b01      	ldr	r3, [sp, #4]
    31a4:	2b00      	cmp	r3, #0
    31a6:	d002      	beq.n	31ae <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    31a8:	9801      	ldr	r0, [sp, #4]
    31aa:	f000 f999 	bl	34e0 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31ae:	bf00      	nop
    31b0:	b003      	add	sp, #12
    31b2:	f85d fb04 	ldr.w	pc, [sp], #4

000031b6 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    31b6:	b500      	push	{lr}
    31b8:	b083      	sub	sp, #12
    31ba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31bc:	9b01      	ldr	r3, [sp, #4]
    31be:	2b00      	cmp	r3, #0
    31c0:	d002      	beq.n	31c8 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    31c2:	9801      	ldr	r0, [sp, #4]
    31c4:	f000 f9b0 	bl	3528 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31c8:	bf00      	nop
    31ca:	b003      	add	sp, #12
    31cc:	f85d fb04 	ldr.w	pc, [sp], #4

000031d0 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    31d0:	b500      	push	{lr}
    31d2:	b083      	sub	sp, #12
    31d4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    31d6:	9801      	ldr	r0, [sp, #4]
    31d8:	f000 f9ba 	bl	3550 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    31dc:	bf00      	nop
    31de:	b003      	add	sp, #12
    31e0:	f85d fb04 	ldr.w	pc, [sp], #4

000031e4 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    31e4:	b500      	push	{lr}
    31e6:	b083      	sub	sp, #12
    31e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31ea:	9b01      	ldr	r3, [sp, #4]
    31ec:	2b00      	cmp	r3, #0
    31ee:	d002      	beq.n	31f6 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    31f0:	9801      	ldr	r0, [sp, #4]
    31f2:	f000 f9bd 	bl	3570 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31f6:	bf00      	nop
    31f8:	b003      	add	sp, #12
    31fa:	f85d fb04 	ldr.w	pc, [sp], #4

000031fe <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    31fe:	b500      	push	{lr}
    3200:	b083      	sub	sp, #12
    3202:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3204:	9b01      	ldr	r3, [sp, #4]
    3206:	2b00      	cmp	r3, #0
    3208:	d002      	beq.n	3210 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    320a:	9801      	ldr	r0, [sp, #4]
    320c:	f000 f9d4 	bl	35b8 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3210:	bf00      	nop
    3212:	b003      	add	sp, #12
    3214:	f85d fb04 	ldr.w	pc, [sp], #4

00003218 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3218:	b500      	push	{lr}
    321a:	b083      	sub	sp, #12
    321c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    321e:	9801      	ldr	r0, [sp, #4]
    3220:	f000 f9de 	bl	35e0 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3224:	bf00      	nop
    3226:	b003      	add	sp, #12
    3228:	f85d fb04 	ldr.w	pc, [sp], #4

0000322c <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    322c:	b500      	push	{lr}
    322e:	b089      	sub	sp, #36	; 0x24
    3230:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3232:	2300      	movs	r3, #0
    3234:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3238:	4b20      	ldr	r3, [pc, #128]	; (32bc <SetInputSouceSytemClock+0x90>)
    323a:	695b      	ldr	r3, [r3, #20]
    323c:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    323e:	9b06      	ldr	r3, [sp, #24]
    3240:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3244:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3246:	9b01      	ldr	r3, [sp, #4]
    3248:	061b      	lsls	r3, r3, #24
    324a:	9a06      	ldr	r2, [sp, #24]
    324c:	4313      	orrs	r3, r2
    324e:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3250:	4a1a      	ldr	r2, [pc, #104]	; (32bc <SetInputSouceSytemClock+0x90>)
    3252:	9b06      	ldr	r3, [sp, #24]
    3254:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3256:	aa02      	add	r2, sp, #8
    3258:	a903      	add	r1, sp, #12
    325a:	a804      	add	r0, sp, #16
    325c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3260:	f7ff f9ac 	bl	25bc <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3264:	4b15      	ldr	r3, [pc, #84]	; (32bc <SetInputSouceSytemClock+0x90>)
    3266:	691b      	ldr	r3, [r3, #16]
    3268:	0e1b      	lsrs	r3, r3, #24
    326a:	f003 030f 	and.w	r3, r3, #15
    326e:	9a01      	ldr	r2, [sp, #4]
    3270:	429a      	cmp	r2, r3
    3272:	bf0c      	ite	eq
    3274:	2301      	moveq	r3, #1
    3276:	2300      	movne	r3, #0
    3278:	b2db      	uxtb	r3, r3
    327a:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    327c:	9a02      	ldr	r2, [sp, #8]
    327e:	a903      	add	r1, sp, #12
    3280:	ab04      	add	r3, sp, #16
    3282:	4618      	mov	r0, r3
    3284:	f7ff f9b4 	bl	25f0 <Clock_Ip_TimeoutExpired>
    3288:	4603      	mov	r3, r0
    328a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    328e:	9b05      	ldr	r3, [sp, #20]
    3290:	2b00      	cmp	r3, #0
    3292:	d106      	bne.n	32a2 <SetInputSouceSytemClock+0x76>
    3294:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3298:	f083 0301 	eor.w	r3, r3, #1
    329c:	b2db      	uxtb	r3, r3
    329e:	2b00      	cmp	r3, #0
    32a0:	d1e0      	bne.n	3264 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    32a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    32a6:	2b00      	cmp	r3, #0
    32a8:	d003      	beq.n	32b2 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    32aa:	2105      	movs	r1, #5
    32ac:	2001      	movs	r0, #1
    32ae:	f7ff f975 	bl	259c <Clock_Ip_ReportClockErrors>
    }
}
    32b2:	bf00      	nop
    32b4:	b009      	add	sp, #36	; 0x24
    32b6:	f85d fb04 	ldr.w	pc, [sp], #4
    32ba:	bf00      	nop
    32bc:	40064000 	.word	0x40064000

000032c0 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    32c0:	b500      	push	{lr}
    32c2:	b083      	sub	sp, #12
    32c4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32c6:	9b01      	ldr	r3, [sp, #4]
    32c8:	2b00      	cmp	r3, #0
    32ca:	d002      	beq.n	32d2 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    32cc:	9801      	ldr	r0, [sp, #4]
    32ce:	f000 f997 	bl	3600 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32d2:	bf00      	nop
    32d4:	b003      	add	sp, #12
    32d6:	f85d fb04 	ldr.w	pc, [sp], #4

000032da <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    32da:	b500      	push	{lr}
    32dc:	b083      	sub	sp, #12
    32de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32e0:	9b01      	ldr	r3, [sp, #4]
    32e2:	2b00      	cmp	r3, #0
    32e4:	d002      	beq.n	32ec <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    32e6:	9801      	ldr	r0, [sp, #4]
    32e8:	f000 fa7e 	bl	37e8 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32ec:	bf00      	nop
    32ee:	b003      	add	sp, #12
    32f0:	f85d fb04 	ldr.w	pc, [sp], #4

000032f4 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    32f4:	b500      	push	{lr}
    32f6:	b083      	sub	sp, #12
    32f8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    32fa:	9801      	ldr	r0, [sp, #4]
    32fc:	f000 fab8 	bl	3870 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3300:	bf00      	nop
    3302:	b003      	add	sp, #12
    3304:	f85d fb04 	ldr.w	pc, [sp], #4

00003308 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3308:	b500      	push	{lr}
    330a:	b08b      	sub	sp, #44	; 0x2c
    330c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    330e:	2300      	movs	r3, #0
    3310:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3314:	9b01      	ldr	r3, [sp, #4]
    3316:	2b00      	cmp	r3, #0
    3318:	d10b      	bne.n	3332 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    331a:	2305      	movs	r3, #5
    331c:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    331e:	2301      	movs	r3, #1
    3320:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3324:	2301      	movs	r3, #1
    3326:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    332a:	2301      	movs	r3, #1
    332c:	f88d 3010 	strb.w	r3, [sp, #16]
    3330:	e00e      	b.n	3350 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3332:	9b01      	ldr	r3, [sp, #4]
    3334:	681b      	ldr	r3, [r3, #0]
    3336:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3338:	9b01      	ldr	r3, [sp, #4]
    333a:	79db      	ldrb	r3, [r3, #7]
    333c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3340:	9b01      	ldr	r3, [sp, #4]
    3342:	889b      	ldrh	r3, [r3, #4]
    3344:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3348:	9b01      	ldr	r3, [sp, #4]
    334a:	7a1b      	ldrb	r3, [r3, #8]
    334c:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3350:	4b32      	ldr	r3, [pc, #200]	; (341c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3352:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3356:	4a31      	ldr	r2, [pc, #196]	; (341c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3358:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    335c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3360:	4b2e      	ldr	r3, [pc, #184]	; (341c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3362:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3366:	4a2d      	ldr	r2, [pc, #180]	; (341c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3368:	f023 0301 	bic.w	r3, r3, #1
    336c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3370:	4b2a      	ldr	r3, [pc, #168]	; (341c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3372:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3376:	4a29      	ldr	r2, [pc, #164]	; (341c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3378:	f023 0304 	bic.w	r3, r3, #4
    337c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3380:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3384:	2b01      	cmp	r3, #1
    3386:	d144      	bne.n	3412 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3388:	f89d 300f 	ldrb.w	r3, [sp, #15]
    338c:	4a23      	ldr	r2, [pc, #140]	; (341c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    338e:	f003 0301 	and.w	r3, r3, #1
    3392:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3396:	4b21      	ldr	r3, [pc, #132]	; (341c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3398:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    339c:	4a1f      	ldr	r2, [pc, #124]	; (341c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    339e:	f043 0301 	orr.w	r3, r3, #1
    33a2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    33a6:	4b1d      	ldr	r3, [pc, #116]	; (341c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    33a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    33ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
    33b0:	009b      	lsls	r3, r3, #2
    33b2:	f003 0304 	and.w	r3, r3, #4
    33b6:	4919      	ldr	r1, [pc, #100]	; (341c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    33b8:	4313      	orrs	r3, r2
    33ba:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    33be:	aa05      	add	r2, sp, #20
    33c0:	a906      	add	r1, sp, #24
    33c2:	a807      	add	r0, sp, #28
    33c4:	f24c 3350 	movw	r3, #50000	; 0xc350
    33c8:	f7ff f8f8 	bl	25bc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    33cc:	4b13      	ldr	r3, [pc, #76]	; (341c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    33ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    33d2:	0e1b      	lsrs	r3, r3, #24
    33d4:	f003 0301 	and.w	r3, r3, #1
    33d8:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    33da:	9a05      	ldr	r2, [sp, #20]
    33dc:	a906      	add	r1, sp, #24
    33de:	ab07      	add	r3, sp, #28
    33e0:	4618      	mov	r0, r3
    33e2:	f7ff f905 	bl	25f0 <Clock_Ip_TimeoutExpired>
    33e6:	4603      	mov	r3, r0
    33e8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    33ec:	9b08      	ldr	r3, [sp, #32]
    33ee:	2b00      	cmp	r3, #0
    33f0:	d106      	bne.n	3400 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    33f2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    33f6:	f083 0301 	eor.w	r3, r3, #1
    33fa:	b2db      	uxtb	r3, r3
    33fc:	2b00      	cmp	r3, #0
    33fe:	d1e5      	bne.n	33cc <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3400:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3404:	2b00      	cmp	r3, #0
    3406:	d004      	beq.n	3412 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3408:	9b02      	ldr	r3, [sp, #8]
    340a:	4619      	mov	r1, r3
    340c:	2001      	movs	r0, #1
    340e:	f7ff f8c5 	bl	259c <Clock_Ip_ReportClockErrors>
        }
    }
}
    3412:	bf00      	nop
    3414:	b00b      	add	sp, #44	; 0x2c
    3416:	f85d fb04 	ldr.w	pc, [sp], #4
    341a:	bf00      	nop
    341c:	40064000 	.word	0x40064000

00003420 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3420:	b500      	push	{lr}
    3422:	b089      	sub	sp, #36	; 0x24
    3424:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3426:	2300      	movs	r3, #0
    3428:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    342c:	4b1f      	ldr	r3, [pc, #124]	; (34ac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    342e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3432:	4a1e      	ldr	r2, [pc, #120]	; (34ac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3434:	f043 0301 	orr.w	r3, r3, #1
    3438:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    343c:	4b1b      	ldr	r3, [pc, #108]	; (34ac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    343e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3442:	4a1a      	ldr	r2, [pc, #104]	; (34ac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3444:	f043 0304 	orr.w	r3, r3, #4
    3448:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    344c:	aa03      	add	r2, sp, #12
    344e:	a904      	add	r1, sp, #16
    3450:	a805      	add	r0, sp, #20
    3452:	f24c 3350 	movw	r3, #50000	; 0xc350
    3456:	f7ff f8b1 	bl	25bc <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    345a:	4b14      	ldr	r3, [pc, #80]	; (34ac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    345c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3460:	0e1b      	lsrs	r3, r3, #24
    3462:	f003 0301 	and.w	r3, r3, #1
    3466:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3468:	9a03      	ldr	r2, [sp, #12]
    346a:	a904      	add	r1, sp, #16
    346c:	ab05      	add	r3, sp, #20
    346e:	4618      	mov	r0, r3
    3470:	f7ff f8be 	bl	25f0 <Clock_Ip_TimeoutExpired>
    3474:	4603      	mov	r3, r0
    3476:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    347a:	9b06      	ldr	r3, [sp, #24]
    347c:	2b00      	cmp	r3, #0
    347e:	d106      	bne.n	348e <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3480:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3484:	f083 0301 	eor.w	r3, r3, #1
    3488:	b2db      	uxtb	r3, r3
    348a:	2b00      	cmp	r3, #0
    348c:	d1e5      	bne.n	345a <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    348e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3492:	2b00      	cmp	r3, #0
    3494:	d005      	beq.n	34a2 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3496:	9b01      	ldr	r3, [sp, #4]
    3498:	681b      	ldr	r3, [r3, #0]
    349a:	4619      	mov	r1, r3
    349c:	2001      	movs	r0, #1
    349e:	f7ff f87d 	bl	259c <Clock_Ip_ReportClockErrors>
    }
}
    34a2:	bf00      	nop
    34a4:	b009      	add	sp, #36	; 0x24
    34a6:	f85d fb04 	ldr.w	pc, [sp], #4
    34aa:	bf00      	nop
    34ac:	40064000 	.word	0x40064000

000034b0 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    34b0:	b082      	sub	sp, #8
    34b2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    34b4:	4b09      	ldr	r3, [pc, #36]	; (34dc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    34b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    34ba:	4a08      	ldr	r2, [pc, #32]	; (34dc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    34bc:	f023 0301 	bic.w	r3, r3, #1
    34c0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    34c4:	4b05      	ldr	r3, [pc, #20]	; (34dc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    34c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    34ca:	4a04      	ldr	r2, [pc, #16]	; (34dc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    34cc:	f023 0304 	bic.w	r3, r3, #4
    34d0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    34d4:	bf00      	nop
    34d6:	b002      	add	sp, #8
    34d8:	4770      	bx	lr
    34da:	bf00      	nop
    34dc:	40064000 	.word	0x40064000

000034e0 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    34e0:	b082      	sub	sp, #8
    34e2:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    34e4:	4b0f      	ldr	r3, [pc, #60]	; (3524 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    34e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    34ea:	4a0e      	ldr	r2, [pc, #56]	; (3524 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    34ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    34f0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    34f4:	4b0b      	ldr	r3, [pc, #44]	; (3524 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    34f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    34fa:	4a0a      	ldr	r2, [pc, #40]	; (3524 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    34fc:	f023 0304 	bic.w	r3, r3, #4
    3500:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3504:	4b07      	ldr	r3, [pc, #28]	; (3524 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3506:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    350a:	9b01      	ldr	r3, [sp, #4]
    350c:	7a1b      	ldrb	r3, [r3, #8]
    350e:	009b      	lsls	r3, r3, #2
    3510:	f003 0304 	and.w	r3, r3, #4
    3514:	4903      	ldr	r1, [pc, #12]	; (3524 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3516:	4313      	orrs	r3, r2
    3518:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    351c:	bf00      	nop
    351e:	b002      	add	sp, #8
    3520:	4770      	bx	lr
    3522:	bf00      	nop
    3524:	40064000 	.word	0x40064000

00003528 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3528:	b082      	sub	sp, #8
    352a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    352c:	9b01      	ldr	r3, [sp, #4]
    352e:	889b      	ldrh	r3, [r3, #4]
    3530:	2b01      	cmp	r3, #1
    3532:	d107      	bne.n	3544 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3534:	4b05      	ldr	r3, [pc, #20]	; (354c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3536:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    353a:	4a04      	ldr	r2, [pc, #16]	; (354c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    353c:	f043 0304 	orr.w	r3, r3, #4
    3540:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3544:	bf00      	nop
    3546:	b002      	add	sp, #8
    3548:	4770      	bx	lr
    354a:	bf00      	nop
    354c:	40064000 	.word	0x40064000

00003550 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3550:	b082      	sub	sp, #8
    3552:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3554:	4b05      	ldr	r3, [pc, #20]	; (356c <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3556:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    355a:	4a04      	ldr	r2, [pc, #16]	; (356c <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    355c:	f023 0304 	bic.w	r3, r3, #4
    3560:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3564:	bf00      	nop
    3566:	b002      	add	sp, #8
    3568:	4770      	bx	lr
    356a:	bf00      	nop
    356c:	40064000 	.word	0x40064000

00003570 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3570:	b082      	sub	sp, #8
    3572:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3574:	4b0f      	ldr	r3, [pc, #60]	; (35b4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3576:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    357a:	4a0e      	ldr	r2, [pc, #56]	; (35b4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    357c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3580:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3584:	4b0b      	ldr	r3, [pc, #44]	; (35b4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3586:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    358a:	4a0a      	ldr	r2, [pc, #40]	; (35b4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    358c:	f023 0302 	bic.w	r3, r3, #2
    3590:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3594:	4b07      	ldr	r3, [pc, #28]	; (35b4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3596:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    359a:	9b01      	ldr	r3, [sp, #4]
    359c:	7a5b      	ldrb	r3, [r3, #9]
    359e:	005b      	lsls	r3, r3, #1
    35a0:	f003 0302 	and.w	r3, r3, #2
    35a4:	4903      	ldr	r1, [pc, #12]	; (35b4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    35a6:	4313      	orrs	r3, r2
    35a8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    35ac:	bf00      	nop
    35ae:	b002      	add	sp, #8
    35b0:	4770      	bx	lr
    35b2:	bf00      	nop
    35b4:	40064000 	.word	0x40064000

000035b8 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    35b8:	b082      	sub	sp, #8
    35ba:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    35bc:	9b01      	ldr	r3, [sp, #4]
    35be:	889b      	ldrh	r3, [r3, #4]
    35c0:	2b01      	cmp	r3, #1
    35c2:	d107      	bne.n	35d4 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    35c4:	4b05      	ldr	r3, [pc, #20]	; (35dc <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    35c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    35ca:	4a04      	ldr	r2, [pc, #16]	; (35dc <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    35cc:	f043 0302 	orr.w	r3, r3, #2
    35d0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    35d4:	bf00      	nop
    35d6:	b002      	add	sp, #8
    35d8:	4770      	bx	lr
    35da:	bf00      	nop
    35dc:	40064000 	.word	0x40064000

000035e0 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    35e0:	b082      	sub	sp, #8
    35e2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    35e4:	4b05      	ldr	r3, [pc, #20]	; (35fc <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    35e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    35ea:	4a04      	ldr	r2, [pc, #16]	; (35fc <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    35ec:	f023 0302 	bic.w	r3, r3, #2
    35f0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    35f4:	bf00      	nop
    35f6:	b002      	add	sp, #8
    35f8:	4770      	bx	lr
    35fa:	bf00      	nop
    35fc:	40064000 	.word	0x40064000

00003600 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3600:	b500      	push	{lr}
    3602:	b08b      	sub	sp, #44	; 0x2c
    3604:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3606:	9b01      	ldr	r3, [sp, #4]
    3608:	681a      	ldr	r2, [r3, #0]
    360a:	4975      	ldr	r1, [pc, #468]	; (37e0 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    360c:	4613      	mov	r3, r2
    360e:	00db      	lsls	r3, r3, #3
    3610:	4413      	add	r3, r2
    3612:	440b      	add	r3, r1
    3614:	781b      	ldrb	r3, [r3, #0]
    3616:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3618:	2300      	movs	r3, #0
    361a:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    361e:	2300      	movs	r3, #0
    3620:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3624:	4b6f      	ldr	r3, [pc, #444]	; (37e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3626:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    362a:	4a6e      	ldr	r2, [pc, #440]	; (37e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    362c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3630:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3634:	4b6b      	ldr	r3, [pc, #428]	; (37e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3636:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    363a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    363e:	2b00      	cmp	r3, #0
    3640:	d07d      	beq.n	373e <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3642:	9b01      	ldr	r3, [sp, #4]
    3644:	79db      	ldrb	r3, [r3, #7]
    3646:	461a      	mov	r2, r3
    3648:	4b66      	ldr	r3, [pc, #408]	; (37e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    364a:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    364e:	f003 0303 	and.w	r3, r3, #3
    3652:	429a      	cmp	r2, r3
    3654:	d10b      	bne.n	366e <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3656:	9b01      	ldr	r3, [sp, #4]
    3658:	799b      	ldrb	r3, [r3, #6]
    365a:	461a      	mov	r2, r3
    365c:	4b61      	ldr	r3, [pc, #388]	; (37e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    365e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3662:	08db      	lsrs	r3, r3, #3
    3664:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3668:	429a      	cmp	r2, r3
    366a:	f000 80b4 	beq.w	37d6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    366e:	4b5d      	ldr	r3, [pc, #372]	; (37e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3670:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3674:	f003 0301 	and.w	r3, r3, #1
    3678:	2b00      	cmp	r3, #0
    367a:	d105      	bne.n	3688 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    367c:	2301      	movs	r3, #1
    367e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3682:	2000      	movs	r0, #0
    3684:	f7ff fd66 	bl	3154 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3688:	2002      	movs	r0, #2
    368a:	f7ff fdcf 	bl	322c <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    368e:	4b55      	ldr	r3, [pc, #340]	; (37e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3690:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3694:	4a53      	ldr	r2, [pc, #332]	; (37e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3696:	f023 0301 	bic.w	r3, r3, #1
    369a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    369e:	9b01      	ldr	r3, [sp, #4]
    36a0:	889b      	ldrh	r3, [r3, #4]
    36a2:	2b01      	cmp	r3, #1
    36a4:	f040 8097 	bne.w	37d6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    36a8:	9b01      	ldr	r3, [sp, #4]
    36aa:	79db      	ldrb	r3, [r3, #7]
    36ac:	4a4d      	ldr	r2, [pc, #308]	; (37e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    36ae:	f003 0303 	and.w	r3, r3, #3
    36b2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    36b6:	4b4b      	ldr	r3, [pc, #300]	; (37e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    36b8:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    36bc:	9b01      	ldr	r3, [sp, #4]
    36be:	799b      	ldrb	r3, [r3, #6]
    36c0:	00db      	lsls	r3, r3, #3
    36c2:	f003 0308 	and.w	r3, r3, #8
    36c6:	4313      	orrs	r3, r2
    36c8:	4a46      	ldr	r2, [pc, #280]	; (37e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    36ca:	f043 0301 	orr.w	r3, r3, #1
    36ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    36d2:	aa03      	add	r2, sp, #12
    36d4:	a904      	add	r1, sp, #16
    36d6:	a805      	add	r0, sp, #20
    36d8:	f24c 3350 	movw	r3, #50000	; 0xc350
    36dc:	f7fe ff6e 	bl	25bc <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    36e0:	4b40      	ldr	r3, [pc, #256]	; (37e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    36e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    36e6:	0e1b      	lsrs	r3, r3, #24
    36e8:	f003 0301 	and.w	r3, r3, #1
    36ec:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    36ee:	9a03      	ldr	r2, [sp, #12]
    36f0:	a904      	add	r1, sp, #16
    36f2:	ab05      	add	r3, sp, #20
    36f4:	4618      	mov	r0, r3
    36f6:	f7fe ff7b 	bl	25f0 <Clock_Ip_TimeoutExpired>
    36fa:	4603      	mov	r3, r0
    36fc:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3700:	9b06      	ldr	r3, [sp, #24]
    3702:	2b00      	cmp	r3, #0
    3704:	d106      	bne.n	3714 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3706:	f89d 301f 	ldrb.w	r3, [sp, #31]
    370a:	f083 0301 	eor.w	r3, r3, #1
    370e:	b2db      	uxtb	r3, r3
    3710:	2b00      	cmp	r3, #0
    3712:	d1e5      	bne.n	36e0 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3714:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3718:	2b00      	cmp	r3, #0
    371a:	d005      	beq.n	3728 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    371c:	9b01      	ldr	r3, [sp, #4]
    371e:	681b      	ldr	r3, [r3, #0]
    3720:	4619      	mov	r1, r3
    3722:	2001      	movs	r0, #1
    3724:	f7fe ff3a 	bl	259c <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3728:	2003      	movs	r0, #3
    372a:	f7ff fd7f 	bl	322c <SetInputSouceSytemClock>

                if (SircWasDisabled)
    372e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3732:	2b00      	cmp	r3, #0
    3734:	d04f      	beq.n	37d6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3736:	2002      	movs	r0, #2
    3738:	f7ff fd26 	bl	3188 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    373c:	e04b      	b.n	37d6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    373e:	4b29      	ldr	r3, [pc, #164]	; (37e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3740:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3744:	4a27      	ldr	r2, [pc, #156]	; (37e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3746:	f023 0301 	bic.w	r3, r3, #1
    374a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    374e:	9b01      	ldr	r3, [sp, #4]
    3750:	889b      	ldrh	r3, [r3, #4]
    3752:	2b01      	cmp	r3, #1
    3754:	d13f      	bne.n	37d6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3756:	9b01      	ldr	r3, [sp, #4]
    3758:	79db      	ldrb	r3, [r3, #7]
    375a:	4a22      	ldr	r2, [pc, #136]	; (37e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    375c:	f003 0303 	and.w	r3, r3, #3
    3760:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3764:	4b1f      	ldr	r3, [pc, #124]	; (37e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3766:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    376a:	9b01      	ldr	r3, [sp, #4]
    376c:	799b      	ldrb	r3, [r3, #6]
    376e:	00db      	lsls	r3, r3, #3
    3770:	f003 0308 	and.w	r3, r3, #8
    3774:	4313      	orrs	r3, r2
    3776:	4a1b      	ldr	r2, [pc, #108]	; (37e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3778:	f043 0301 	orr.w	r3, r3, #1
    377c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3780:	aa03      	add	r2, sp, #12
    3782:	a904      	add	r1, sp, #16
    3784:	a805      	add	r0, sp, #20
    3786:	f24c 3350 	movw	r3, #50000	; 0xc350
    378a:	f7fe ff17 	bl	25bc <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    378e:	4b15      	ldr	r3, [pc, #84]	; (37e4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3790:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3794:	0e1b      	lsrs	r3, r3, #24
    3796:	f003 0301 	and.w	r3, r3, #1
    379a:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    379c:	9a03      	ldr	r2, [sp, #12]
    379e:	a904      	add	r1, sp, #16
    37a0:	ab05      	add	r3, sp, #20
    37a2:	4618      	mov	r0, r3
    37a4:	f7fe ff24 	bl	25f0 <Clock_Ip_TimeoutExpired>
    37a8:	4603      	mov	r3, r0
    37aa:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    37ae:	9b06      	ldr	r3, [sp, #24]
    37b0:	2b00      	cmp	r3, #0
    37b2:	d106      	bne.n	37c2 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    37b4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    37b8:	f083 0301 	eor.w	r3, r3, #1
    37bc:	b2db      	uxtb	r3, r3
    37be:	2b00      	cmp	r3, #0
    37c0:	d1e5      	bne.n	378e <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    37c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    37c6:	2b00      	cmp	r3, #0
    37c8:	d005      	beq.n	37d6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    37ca:	9b01      	ldr	r3, [sp, #4]
    37cc:	681b      	ldr	r3, [r3, #0]
    37ce:	4619      	mov	r1, r3
    37d0:	2001      	movs	r0, #1
    37d2:	f7fe fee3 	bl	259c <Clock_Ip_ReportClockErrors>
}
    37d6:	bf00      	nop
    37d8:	b00b      	add	sp, #44	; 0x2c
    37da:	f85d fb04 	ldr.w	pc, [sp], #4
    37de:	bf00      	nop
    37e0:	00007c7c 	.word	0x00007c7c
    37e4:	40064000 	.word	0x40064000

000037e8 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    37e8:	b500      	push	{lr}
    37ea:	b089      	sub	sp, #36	; 0x24
    37ec:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    37ee:	2300      	movs	r3, #0
    37f0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    37f4:	9b01      	ldr	r3, [sp, #4]
    37f6:	889b      	ldrh	r3, [r3, #4]
    37f8:	2b01      	cmp	r3, #1
    37fa:	d132      	bne.n	3862 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    37fc:	4b1b      	ldr	r3, [pc, #108]	; (386c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    37fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3802:	4a1a      	ldr	r2, [pc, #104]	; (386c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3804:	f043 0301 	orr.w	r3, r3, #1
    3808:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    380c:	aa03      	add	r2, sp, #12
    380e:	a904      	add	r1, sp, #16
    3810:	a805      	add	r0, sp, #20
    3812:	f24c 3350 	movw	r3, #50000	; 0xc350
    3816:	f7fe fed1 	bl	25bc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    381a:	4b14      	ldr	r3, [pc, #80]	; (386c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    381c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3820:	0e1b      	lsrs	r3, r3, #24
    3822:	f003 0301 	and.w	r3, r3, #1
    3826:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3828:	9a03      	ldr	r2, [sp, #12]
    382a:	a904      	add	r1, sp, #16
    382c:	ab05      	add	r3, sp, #20
    382e:	4618      	mov	r0, r3
    3830:	f7fe fede 	bl	25f0 <Clock_Ip_TimeoutExpired>
    3834:	4603      	mov	r3, r0
    3836:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    383a:	9b06      	ldr	r3, [sp, #24]
    383c:	2b00      	cmp	r3, #0
    383e:	d106      	bne.n	384e <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3840:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3844:	f083 0301 	eor.w	r3, r3, #1
    3848:	b2db      	uxtb	r3, r3
    384a:	2b00      	cmp	r3, #0
    384c:	d1e5      	bne.n	381a <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    384e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3852:	2b00      	cmp	r3, #0
    3854:	d005      	beq.n	3862 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3856:	9b01      	ldr	r3, [sp, #4]
    3858:	681b      	ldr	r3, [r3, #0]
    385a:	4619      	mov	r1, r3
    385c:	2001      	movs	r0, #1
    385e:	f7fe fe9d 	bl	259c <Clock_Ip_ReportClockErrors>
        }
    }
}
    3862:	bf00      	nop
    3864:	b009      	add	sp, #36	; 0x24
    3866:	f85d fb04 	ldr.w	pc, [sp], #4
    386a:	bf00      	nop
    386c:	40064000 	.word	0x40064000

00003870 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3870:	b082      	sub	sp, #8
    3872:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3874:	4b05      	ldr	r3, [pc, #20]	; (388c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3876:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    387a:	4a04      	ldr	r2, [pc, #16]	; (388c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    387c:	f023 0301 	bic.w	r3, r3, #1
    3880:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3884:	bf00      	nop
    3886:	b002      	add	sp, #8
    3888:	4770      	bx	lr
    388a:	bf00      	nop
    388c:	40064000 	.word	0x40064000

00003890 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3890:	b082      	sub	sp, #8
    3892:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3894:	bf00      	nop
    3896:	b002      	add	sp, #8
    3898:	4770      	bx	lr

0000389a <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    389a:	b082      	sub	sp, #8
    389c:	9001      	str	r0, [sp, #4]
    389e:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    38a0:	bf00      	nop
    38a2:	b002      	add	sp, #8
    38a4:	4770      	bx	lr

000038a6 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    38a6:	b082      	sub	sp, #8
    38a8:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    38aa:	bf00      	nop
    38ac:	b002      	add	sp, #8
    38ae:	4770      	bx	lr

000038b0 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    38b0:	b082      	sub	sp, #8
    38b2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    38b4:	bf00      	nop
    38b6:	b002      	add	sp, #8
    38b8:	4770      	bx	lr

000038ba <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    38ba:	b082      	sub	sp, #8
    38bc:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    38be:	2302      	movs	r3, #2
}
    38c0:	4618      	mov	r0, r3
    38c2:	b002      	add	sp, #8
    38c4:	4770      	bx	lr

000038c6 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    38c6:	b082      	sub	sp, #8
    38c8:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    38ca:	bf00      	nop
    38cc:	b002      	add	sp, #8
    38ce:	4770      	bx	lr

000038d0 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    38d0:	b500      	push	{lr}
    38d2:	b083      	sub	sp, #12
    38d4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38d6:	9b01      	ldr	r3, [sp, #4]
    38d8:	2b00      	cmp	r3, #0
    38da:	d002      	beq.n	38e2 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    38dc:	9801      	ldr	r0, [sp, #4]
    38de:	f000 f870 	bl	39c2 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38e2:	bf00      	nop
    38e4:	b003      	add	sp, #12
    38e6:	f85d fb04 	ldr.w	pc, [sp], #4

000038ea <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    38ea:	b500      	push	{lr}
    38ec:	b083      	sub	sp, #12
    38ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38f0:	9b01      	ldr	r3, [sp, #4]
    38f2:	2b00      	cmp	r3, #0
    38f4:	d002      	beq.n	38fc <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    38f6:	9801      	ldr	r0, [sp, #4]
    38f8:	f000 f89a 	bl	3a30 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38fc:	bf00      	nop
    38fe:	b003      	add	sp, #12
    3900:	f85d fb04 	ldr.w	pc, [sp], #4

00003904 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3904:	b500      	push	{lr}
    3906:	b089      	sub	sp, #36	; 0x24
    3908:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    390a:	2301      	movs	r3, #1
    390c:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    390e:	2300      	movs	r3, #0
    3910:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3914:	4b1e      	ldr	r3, [pc, #120]	; (3990 <Clock_Ip_CompleteSpll+0x8c>)
    3916:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    391a:	f003 0301 	and.w	r3, r3, #1
    391e:	2b00      	cmp	r3, #0
    3920:	d02f      	beq.n	3982 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3922:	aa02      	add	r2, sp, #8
    3924:	a903      	add	r1, sp, #12
    3926:	a804      	add	r0, sp, #16
    3928:	f24c 3350 	movw	r3, #50000	; 0xc350
    392c:	f7fe fe46 	bl	25bc <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3930:	4b17      	ldr	r3, [pc, #92]	; (3990 <Clock_Ip_CompleteSpll+0x8c>)
    3932:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3936:	0e1b      	lsrs	r3, r3, #24
    3938:	f003 0301 	and.w	r3, r3, #1
    393c:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    393e:	9a02      	ldr	r2, [sp, #8]
    3940:	a903      	add	r1, sp, #12
    3942:	ab04      	add	r3, sp, #16
    3944:	4618      	mov	r0, r3
    3946:	f7fe fe53 	bl	25f0 <Clock_Ip_TimeoutExpired>
    394a:	4603      	mov	r3, r0
    394c:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3950:	9b05      	ldr	r3, [sp, #20]
    3952:	2b00      	cmp	r3, #0
    3954:	d106      	bne.n	3964 <Clock_Ip_CompleteSpll+0x60>
    3956:	f89d 301b 	ldrb.w	r3, [sp, #27]
    395a:	f083 0301 	eor.w	r3, r3, #1
    395e:	b2db      	uxtb	r3, r3
    3960:	2b00      	cmp	r3, #0
    3962:	d1e5      	bne.n	3930 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3964:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3968:	f083 0301 	eor.w	r3, r3, #1
    396c:	b2db      	uxtb	r3, r3
    396e:	2b00      	cmp	r3, #0
    3970:	d002      	beq.n	3978 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3972:	2302      	movs	r3, #2
    3974:	9307      	str	r3, [sp, #28]
    3976:	e006      	b.n	3986 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3978:	9901      	ldr	r1, [sp, #4]
    397a:	2001      	movs	r0, #1
    397c:	f7fe fe0e 	bl	259c <Clock_Ip_ReportClockErrors>
    3980:	e001      	b.n	3986 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3982:	2300      	movs	r3, #0
    3984:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3986:	9b07      	ldr	r3, [sp, #28]
}
    3988:	4618      	mov	r0, r3
    398a:	b009      	add	sp, #36	; 0x24
    398c:	f85d fb04 	ldr.w	pc, [sp], #4
    3990:	40064000 	.word	0x40064000

00003994 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3994:	b500      	push	{lr}
    3996:	b083      	sub	sp, #12
    3998:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    399a:	9801      	ldr	r0, [sp, #4]
    399c:	f000 f886 	bl	3aac <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    39a0:	bf00      	nop
    39a2:	b003      	add	sp, #12
    39a4:	f85d fb04 	ldr.w	pc, [sp], #4

000039a8 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    39a8:	b500      	push	{lr}
    39aa:	b083      	sub	sp, #12
    39ac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39ae:	9b01      	ldr	r3, [sp, #4]
    39b0:	2b00      	cmp	r3, #0
    39b2:	d002      	beq.n	39ba <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    39b4:	9801      	ldr	r0, [sp, #4]
    39b6:	f000 f891 	bl	3adc <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39ba:	bf00      	nop
    39bc:	b003      	add	sp, #12
    39be:	f85d fb04 	ldr.w	pc, [sp], #4

000039c2 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    39c2:	b082      	sub	sp, #8
    39c4:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    39c6:	4b19      	ldr	r3, [pc, #100]	; (3a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    39c8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    39cc:	4a17      	ldr	r2, [pc, #92]	; (3a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    39ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    39d2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    39d6:	4b15      	ldr	r3, [pc, #84]	; (3a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    39d8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    39dc:	4a13      	ldr	r2, [pc, #76]	; (3a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    39de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    39e2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    39e6:	4b11      	ldr	r3, [pc, #68]	; (3a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    39e8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    39ec:	4a0f      	ldr	r2, [pc, #60]	; (3a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    39ee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    39f2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    39f6:	4b0d      	ldr	r3, [pc, #52]	; (3a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    39f8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    39fc:	4a0b      	ldr	r2, [pc, #44]	; (3a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    39fe:	f023 0301 	bic.w	r3, r3, #1
    3a02:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    3a06:	4b09      	ldr	r3, [pc, #36]	; (3a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3a08:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3a0c:	4a07      	ldr	r2, [pc, #28]	; (3a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3a0e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3a12:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    3a16:	4b05      	ldr	r3, [pc, #20]	; (3a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3a18:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3a1c:	4a03      	ldr	r2, [pc, #12]	; (3a2c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3a1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    3a22:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    3a26:	bf00      	nop
    3a28:	b002      	add	sp, #8
    3a2a:	4770      	bx	lr
    3a2c:	40064000 	.word	0x40064000

00003a30 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3a30:	b082      	sub	sp, #8
    3a32:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3a34:	9b01      	ldr	r3, [sp, #4]
    3a36:	889b      	ldrh	r3, [r3, #4]
    3a38:	2b01      	cmp	r3, #1
    3a3a:	d12f      	bne.n	3a9c <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3a3c:	4b1a      	ldr	r3, [pc, #104]	; (3aa8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3a3e:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    3a42:	9b01      	ldr	r3, [sp, #4]
    3a44:	7b5b      	ldrb	r3, [r3, #13]
    3a46:	3b01      	subs	r3, #1
    3a48:	021b      	lsls	r3, r3, #8
    3a4a:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    3a4e:	9b01      	ldr	r3, [sp, #4]
    3a50:	7d1b      	ldrb	r3, [r3, #20]
    3a52:	3b10      	subs	r3, #16
    3a54:	041b      	lsls	r3, r3, #16
    3a56:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3a5a:	430b      	orrs	r3, r1
    3a5c:	4912      	ldr	r1, [pc, #72]	; (3aa8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3a5e:	4313      	orrs	r3, r2
    3a60:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3a64:	9b01      	ldr	r3, [sp, #4]
    3a66:	7fdb      	ldrb	r3, [r3, #31]
    3a68:	2b02      	cmp	r3, #2
    3a6a:	d011      	beq.n	3a90 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3a6c:	2b02      	cmp	r3, #2
    3a6e:	dc17      	bgt.n	3aa0 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3a70:	2b00      	cmp	r3, #0
    3a72:	d002      	beq.n	3a7a <Clock_Ip_SetSpll_TrustedCall+0x4a>
    3a74:	2b01      	cmp	r3, #1
    3a76:	d005      	beq.n	3a84 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3a78:	e012      	b.n	3aa0 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    3a7a:	4b0b      	ldr	r3, [pc, #44]	; (3aa8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3a7c:	2200      	movs	r2, #0
    3a7e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3a82:	e00e      	b.n	3aa2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3a84:	4b08      	ldr	r3, [pc, #32]	; (3aa8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3a86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3a8a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3a8e:	e008      	b.n	3aa2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3a90:	4b05      	ldr	r3, [pc, #20]	; (3aa8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3a92:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    3a96:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3a9a:	e002      	b.n	3aa2 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    3a9c:	bf00      	nop
    3a9e:	e000      	b.n	3aa2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3aa0:	bf00      	nop
}
    3aa2:	bf00      	nop
    3aa4:	b002      	add	sp, #8
    3aa6:	4770      	bx	lr
    3aa8:	40064000 	.word	0x40064000

00003aac <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    3aac:	b082      	sub	sp, #8
    3aae:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3ab0:	4b09      	ldr	r3, [pc, #36]	; (3ad8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3ab2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ab6:	4a08      	ldr	r2, [pc, #32]	; (3ad8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3ab8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3abc:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3ac0:	4b05      	ldr	r3, [pc, #20]	; (3ad8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3ac2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ac6:	4a04      	ldr	r2, [pc, #16]	; (3ad8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3ac8:	f023 0301 	bic.w	r3, r3, #1
    3acc:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    3ad0:	bf00      	nop
    3ad2:	b002      	add	sp, #8
    3ad4:	4770      	bx	lr
    3ad6:	bf00      	nop
    3ad8:	40064000 	.word	0x40064000

00003adc <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3adc:	b082      	sub	sp, #8
    3ade:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3ae0:	9b01      	ldr	r3, [sp, #4]
    3ae2:	889b      	ldrh	r3, [r3, #4]
    3ae4:	2b01      	cmp	r3, #1
    3ae6:	d107      	bne.n	3af8 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    3ae8:	4b05      	ldr	r3, [pc, #20]	; (3b00 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3aea:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3aee:	4a04      	ldr	r2, [pc, #16]	; (3b00 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3af0:	f043 0301 	orr.w	r3, r3, #1
    3af4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    3af8:	bf00      	nop
    3afa:	b002      	add	sp, #8
    3afc:	4770      	bx	lr
    3afe:	bf00      	nop
    3b00:	40064000 	.word	0x40064000

00003b04 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    3b04:	b082      	sub	sp, #8
    3b06:	9001      	str	r0, [sp, #4]
    3b08:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3b0a:	bf00      	nop
    3b0c:	b002      	add	sp, #8
    3b0e:	4770      	bx	lr

00003b10 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    3b10:	b082      	sub	sp, #8
    3b12:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3b14:	bf00      	nop
    3b16:	b002      	add	sp, #8
    3b18:	4770      	bx	lr

00003b1a <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3b1a:	b500      	push	{lr}
    3b1c:	b083      	sub	sp, #12
    3b1e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b20:	9b01      	ldr	r3, [sp, #4]
    3b22:	2b00      	cmp	r3, #0
    3b24:	d002      	beq.n	3b2c <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    3b26:	9801      	ldr	r0, [sp, #4]
    3b28:	f000 f8ee 	bl	3d08 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b2c:	bf00      	nop
    3b2e:	b003      	add	sp, #12
    3b30:	f85d fb04 	ldr.w	pc, [sp], #4

00003b34 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3b34:	b500      	push	{lr}
    3b36:	b083      	sub	sp, #12
    3b38:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b3a:	9b01      	ldr	r3, [sp, #4]
    3b3c:	2b00      	cmp	r3, #0
    3b3e:	d002      	beq.n	3b46 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    3b40:	9801      	ldr	r0, [sp, #4]
    3b42:	f000 f8ff 	bl	3d44 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b46:	bf00      	nop
    3b48:	b003      	add	sp, #12
    3b4a:	f85d fb04 	ldr.w	pc, [sp], #4

00003b4e <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    3b4e:	b500      	push	{lr}
    3b50:	b083      	sub	sp, #12
    3b52:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b54:	9b01      	ldr	r3, [sp, #4]
    3b56:	2b00      	cmp	r3, #0
    3b58:	d002      	beq.n	3b60 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    3b5a:	9801      	ldr	r0, [sp, #4]
    3b5c:	f000 f912 	bl	3d84 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b60:	bf00      	nop
    3b62:	b003      	add	sp, #12
    3b64:	f85d fb04 	ldr.w	pc, [sp], #4

00003b68 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3b68:	b500      	push	{lr}
    3b6a:	b083      	sub	sp, #12
    3b6c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b6e:	9b01      	ldr	r3, [sp, #4]
    3b70:	2b00      	cmp	r3, #0
    3b72:	d002      	beq.n	3b7a <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    3b74:	9801      	ldr	r0, [sp, #4]
    3b76:	f000 f925 	bl	3dc4 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b7a:	bf00      	nop
    3b7c:	b003      	add	sp, #12
    3b7e:	f85d fb04 	ldr.w	pc, [sp], #4

00003b82 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3b82:	b500      	push	{lr}
    3b84:	b083      	sub	sp, #12
    3b86:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b88:	9b01      	ldr	r3, [sp, #4]
    3b8a:	2b00      	cmp	r3, #0
    3b8c:	d002      	beq.n	3b94 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    3b8e:	9801      	ldr	r0, [sp, #4]
    3b90:	f000 f936 	bl	3e00 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b94:	bf00      	nop
    3b96:	b003      	add	sp, #12
    3b98:	f85d fb04 	ldr.w	pc, [sp], #4

00003b9c <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3b9c:	b500      	push	{lr}
    3b9e:	b083      	sub	sp, #12
    3ba0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ba2:	9b01      	ldr	r3, [sp, #4]
    3ba4:	2b00      	cmp	r3, #0
    3ba6:	d002      	beq.n	3bae <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    3ba8:	9801      	ldr	r0, [sp, #4]
    3baa:	f000 f949 	bl	3e40 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bae:	bf00      	nop
    3bb0:	b003      	add	sp, #12
    3bb2:	f85d fb04 	ldr.w	pc, [sp], #4

00003bb6 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3bb6:	b500      	push	{lr}
    3bb8:	b083      	sub	sp, #12
    3bba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bbc:	9b01      	ldr	r3, [sp, #4]
    3bbe:	2b00      	cmp	r3, #0
    3bc0:	d002      	beq.n	3bc8 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    3bc2:	9801      	ldr	r0, [sp, #4]
    3bc4:	f000 f958 	bl	3e78 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bc8:	bf00      	nop
    3bca:	b003      	add	sp, #12
    3bcc:	f85d fb04 	ldr.w	pc, [sp], #4

00003bd0 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3bd0:	b500      	push	{lr}
    3bd2:	b083      	sub	sp, #12
    3bd4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bd6:	9b01      	ldr	r3, [sp, #4]
    3bd8:	2b00      	cmp	r3, #0
    3bda:	d002      	beq.n	3be2 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    3bdc:	9801      	ldr	r0, [sp, #4]
    3bde:	f000 f969 	bl	3eb4 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3be2:	bf00      	nop
    3be4:	b003      	add	sp, #12
    3be6:	f85d fb04 	ldr.w	pc, [sp], #4

00003bea <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3bea:	b500      	push	{lr}
    3bec:	b083      	sub	sp, #12
    3bee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bf0:	9b01      	ldr	r3, [sp, #4]
    3bf2:	2b00      	cmp	r3, #0
    3bf4:	d002      	beq.n	3bfc <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    3bf6:	9801      	ldr	r0, [sp, #4]
    3bf8:	f000 f978 	bl	3eec <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bfc:	bf00      	nop
    3bfe:	b003      	add	sp, #12
    3c00:	f85d fb04 	ldr.w	pc, [sp], #4

00003c04 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3c04:	b500      	push	{lr}
    3c06:	b083      	sub	sp, #12
    3c08:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c0a:	9b01      	ldr	r3, [sp, #4]
    3c0c:	2b00      	cmp	r3, #0
    3c0e:	d002      	beq.n	3c16 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    3c10:	9801      	ldr	r0, [sp, #4]
    3c12:	f000 f989 	bl	3f28 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c16:	bf00      	nop
    3c18:	b003      	add	sp, #12
    3c1a:	f85d fb04 	ldr.w	pc, [sp], #4

00003c1e <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3c1e:	b500      	push	{lr}
    3c20:	b083      	sub	sp, #12
    3c22:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c24:	9b01      	ldr	r3, [sp, #4]
    3c26:	2b00      	cmp	r3, #0
    3c28:	d002      	beq.n	3c30 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    3c2a:	9801      	ldr	r0, [sp, #4]
    3c2c:	f000 f998 	bl	3f60 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c30:	bf00      	nop
    3c32:	b003      	add	sp, #12
    3c34:	f85d fb04 	ldr.w	pc, [sp], #4

00003c38 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    3c38:	b500      	push	{lr}
    3c3a:	b083      	sub	sp, #12
    3c3c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c3e:	9b01      	ldr	r3, [sp, #4]
    3c40:	2b00      	cmp	r3, #0
    3c42:	d002      	beq.n	3c4a <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    3c44:	9801      	ldr	r0, [sp, #4]
    3c46:	f000 f9a9 	bl	3f9c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c4a:	bf00      	nop
    3c4c:	b003      	add	sp, #12
    3c4e:	f85d fb04 	ldr.w	pc, [sp], #4

00003c52 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    3c52:	b500      	push	{lr}
    3c54:	b083      	sub	sp, #12
    3c56:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c58:	9b01      	ldr	r3, [sp, #4]
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	d002      	beq.n	3c64 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    3c5e:	9801      	ldr	r0, [sp, #4]
    3c60:	f000 f9e6 	bl	4030 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c64:	bf00      	nop
    3c66:	b003      	add	sp, #12
    3c68:	f85d fb04 	ldr.w	pc, [sp], #4

00003c6c <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3c6c:	b500      	push	{lr}
    3c6e:	b083      	sub	sp, #12
    3c70:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c72:	9b01      	ldr	r3, [sp, #4]
    3c74:	2b00      	cmp	r3, #0
    3c76:	d002      	beq.n	3c7e <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    3c78:	9801      	ldr	r0, [sp, #4]
    3c7a:	f000 fa25 	bl	40c8 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c7e:	bf00      	nop
    3c80:	b003      	add	sp, #12
    3c82:	f85d fb04 	ldr.w	pc, [sp], #4

00003c86 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3c86:	b500      	push	{lr}
    3c88:	b083      	sub	sp, #12
    3c8a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c8c:	9b01      	ldr	r3, [sp, #4]
    3c8e:	2b00      	cmp	r3, #0
    3c90:	d002      	beq.n	3c98 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    3c92:	9801      	ldr	r0, [sp, #4]
    3c94:	f000 fa2a 	bl	40ec <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c98:	bf00      	nop
    3c9a:	b003      	add	sp, #12
    3c9c:	f85d fb04 	ldr.w	pc, [sp], #4

00003ca0 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3ca0:	b500      	push	{lr}
    3ca2:	b083      	sub	sp, #12
    3ca4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ca6:	9b01      	ldr	r3, [sp, #4]
    3ca8:	2b00      	cmp	r3, #0
    3caa:	d002      	beq.n	3cb2 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    3cac:	9801      	ldr	r0, [sp, #4]
    3cae:	f000 fa3b 	bl	4128 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3cb2:	bf00      	nop
    3cb4:	b003      	add	sp, #12
    3cb6:	f85d fb04 	ldr.w	pc, [sp], #4

00003cba <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3cba:	b500      	push	{lr}
    3cbc:	b083      	sub	sp, #12
    3cbe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3cc0:	9b01      	ldr	r3, [sp, #4]
    3cc2:	2b00      	cmp	r3, #0
    3cc4:	d002      	beq.n	3ccc <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    3cc6:	9801      	ldr	r0, [sp, #4]
    3cc8:	f000 fa56 	bl	4178 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ccc:	bf00      	nop
    3cce:	b003      	add	sp, #12
    3cd0:	f85d fb04 	ldr.w	pc, [sp], #4

00003cd4 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3cd4:	b500      	push	{lr}
    3cd6:	b083      	sub	sp, #12
    3cd8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3cda:	9b01      	ldr	r3, [sp, #4]
    3cdc:	2b00      	cmp	r3, #0
    3cde:	d002      	beq.n	3ce6 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    3ce0:	9801      	ldr	r0, [sp, #4]
    3ce2:	f000 fa79 	bl	41d8 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ce6:	bf00      	nop
    3ce8:	b003      	add	sp, #12
    3cea:	f85d fb04 	ldr.w	pc, [sp], #4

00003cee <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3cee:	b500      	push	{lr}
    3cf0:	b083      	sub	sp, #12
    3cf2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3cf4:	9b01      	ldr	r3, [sp, #4]
    3cf6:	2b00      	cmp	r3, #0
    3cf8:	d002      	beq.n	3d00 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    3cfa:	9801      	ldr	r0, [sp, #4]
    3cfc:	f000 fa8a 	bl	4214 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d00:	bf00      	nop
    3d02:	b003      	add	sp, #12
    3d04:	f85d fb04 	ldr.w	pc, [sp], #4

00003d08 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d08:	b084      	sub	sp, #16
    3d0a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d0c:	4b0b      	ldr	r3, [pc, #44]	; (3d3c <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    3d0e:	795b      	ldrb	r3, [r3, #5]
    3d10:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    3d12:	4b0b      	ldr	r3, [pc, #44]	; (3d40 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    3d14:	695b      	ldr	r3, [r3, #20]
    3d16:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3d18:	9b02      	ldr	r3, [sp, #8]
    3d1a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3d1e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3d20:	9b03      	ldr	r3, [sp, #12]
    3d22:	061b      	lsls	r3, r3, #24
    3d24:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3d28:	9a02      	ldr	r2, [sp, #8]
    3d2a:	4313      	orrs	r3, r2
    3d2c:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3d2e:	4a04      	ldr	r2, [pc, #16]	; (3d40 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    3d30:	9b02      	ldr	r3, [sp, #8]
    3d32:	6153      	str	r3, [r2, #20]
}
    3d34:	bf00      	nop
    3d36:	b004      	add	sp, #16
    3d38:	4770      	bx	lr
    3d3a:	bf00      	nop
    3d3c:	00007fe4 	.word	0x00007fe4
    3d40:	40064000 	.word	0x40064000

00003d44 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d44:	b084      	sub	sp, #16
    3d46:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d48:	9b01      	ldr	r3, [sp, #4]
    3d4a:	685b      	ldr	r3, [r3, #4]
    3d4c:	4a0b      	ldr	r2, [pc, #44]	; (3d7c <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    3d4e:	5cd3      	ldrb	r3, [r2, r3]
    3d50:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    3d52:	4b0b      	ldr	r3, [pc, #44]	; (3d80 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3d54:	695b      	ldr	r3, [r3, #20]
    3d56:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3d58:	9b02      	ldr	r3, [sp, #8]
    3d5a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3d5e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3d60:	9b03      	ldr	r3, [sp, #12]
    3d62:	061b      	lsls	r3, r3, #24
    3d64:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3d68:	9a02      	ldr	r2, [sp, #8]
    3d6a:	4313      	orrs	r3, r2
    3d6c:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3d6e:	4a04      	ldr	r2, [pc, #16]	; (3d80 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3d70:	9b02      	ldr	r3, [sp, #8]
    3d72:	6153      	str	r3, [r2, #20]
}
    3d74:	bf00      	nop
    3d76:	b004      	add	sp, #16
    3d78:	4770      	bx	lr
    3d7a:	bf00      	nop
    3d7c:	00007fe4 	.word	0x00007fe4
    3d80:	40064000 	.word	0x40064000

00003d84 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d84:	b084      	sub	sp, #16
    3d86:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d88:	9b01      	ldr	r3, [sp, #4]
    3d8a:	685b      	ldr	r3, [r3, #4]
    3d8c:	4a0b      	ldr	r2, [pc, #44]	; (3dbc <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    3d8e:	5cd3      	ldrb	r3, [r2, r3]
    3d90:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    3d92:	4b0b      	ldr	r3, [pc, #44]	; (3dc0 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3d94:	699b      	ldr	r3, [r3, #24]
    3d96:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    3d98:	9b02      	ldr	r3, [sp, #8]
    3d9a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3d9e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    3da0:	9b03      	ldr	r3, [sp, #12]
    3da2:	061b      	lsls	r3, r3, #24
    3da4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3da8:	9a02      	ldr	r2, [sp, #8]
    3daa:	4313      	orrs	r3, r2
    3dac:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    3dae:	4a04      	ldr	r2, [pc, #16]	; (3dc0 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3db0:	9b02      	ldr	r3, [sp, #8]
    3db2:	6193      	str	r3, [r2, #24]
}
    3db4:	bf00      	nop
    3db6:	b004      	add	sp, #16
    3db8:	4770      	bx	lr
    3dba:	bf00      	nop
    3dbc:	00007fe4 	.word	0x00007fe4
    3dc0:	40064000 	.word	0x40064000

00003dc4 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3dc4:	b084      	sub	sp, #16
    3dc6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3dc8:	4b0b      	ldr	r3, [pc, #44]	; (3df8 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    3dca:	795b      	ldrb	r3, [r3, #5]
    3dcc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    3dce:	4b0b      	ldr	r3, [pc, #44]	; (3dfc <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3dd0:	69db      	ldr	r3, [r3, #28]
    3dd2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3dd4:	9b02      	ldr	r3, [sp, #8]
    3dd6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3dda:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3ddc:	9b03      	ldr	r3, [sp, #12]
    3dde:	061b      	lsls	r3, r3, #24
    3de0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3de4:	9a02      	ldr	r2, [sp, #8]
    3de6:	4313      	orrs	r3, r2
    3de8:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3dea:	4a04      	ldr	r2, [pc, #16]	; (3dfc <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3dec:	9b02      	ldr	r3, [sp, #8]
    3dee:	61d3      	str	r3, [r2, #28]
}
    3df0:	bf00      	nop
    3df2:	b004      	add	sp, #16
    3df4:	4770      	bx	lr
    3df6:	bf00      	nop
    3df8:	00007fe4 	.word	0x00007fe4
    3dfc:	40064000 	.word	0x40064000

00003e00 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3e00:	b084      	sub	sp, #16
    3e02:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3e04:	9b01      	ldr	r3, [sp, #4]
    3e06:	685b      	ldr	r3, [r3, #4]
    3e08:	4a0b      	ldr	r2, [pc, #44]	; (3e38 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    3e0a:	5cd3      	ldrb	r3, [r2, r3]
    3e0c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    3e0e:	4b0b      	ldr	r3, [pc, #44]	; (3e3c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3e10:	69db      	ldr	r3, [r3, #28]
    3e12:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3e14:	9b02      	ldr	r3, [sp, #8]
    3e16:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3e1a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3e1c:	9b03      	ldr	r3, [sp, #12]
    3e1e:	061b      	lsls	r3, r3, #24
    3e20:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3e24:	9a02      	ldr	r2, [sp, #8]
    3e26:	4313      	orrs	r3, r2
    3e28:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3e2a:	4a04      	ldr	r2, [pc, #16]	; (3e3c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3e2c:	9b02      	ldr	r3, [sp, #8]
    3e2e:	61d3      	str	r3, [r2, #28]
}
    3e30:	bf00      	nop
    3e32:	b004      	add	sp, #16
    3e34:	4770      	bx	lr
    3e36:	bf00      	nop
    3e38:	00007fe4 	.word	0x00007fe4
    3e3c:	40064000 	.word	0x40064000

00003e40 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3e40:	b084      	sub	sp, #16
    3e42:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3e44:	4b0a      	ldr	r3, [pc, #40]	; (3e70 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    3e46:	7b9b      	ldrb	r3, [r3, #14]
    3e48:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3e4a:	4b0a      	ldr	r3, [pc, #40]	; (3e74 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3e4c:	691b      	ldr	r3, [r3, #16]
    3e4e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3e50:	9b02      	ldr	r3, [sp, #8]
    3e52:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3e56:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3e58:	9b03      	ldr	r3, [sp, #12]
    3e5a:	011b      	lsls	r3, r3, #4
    3e5c:	9a02      	ldr	r2, [sp, #8]
    3e5e:	4313      	orrs	r3, r2
    3e60:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3e62:	4a04      	ldr	r2, [pc, #16]	; (3e74 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3e64:	9b02      	ldr	r3, [sp, #8]
    3e66:	6113      	str	r3, [r2, #16]
}
    3e68:	bf00      	nop
    3e6a:	b004      	add	sp, #16
    3e6c:	4770      	bx	lr
    3e6e:	bf00      	nop
    3e70:	00007f8c 	.word	0x00007f8c
    3e74:	40048000 	.word	0x40048000

00003e78 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3e78:	b084      	sub	sp, #16
    3e7a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3e7c:	9b01      	ldr	r3, [sp, #4]
    3e7e:	685b      	ldr	r3, [r3, #4]
    3e80:	4a0a      	ldr	r2, [pc, #40]	; (3eac <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    3e82:	5cd3      	ldrb	r3, [r2, r3]
    3e84:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    3e86:	4b0a      	ldr	r3, [pc, #40]	; (3eb0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3e88:	691b      	ldr	r3, [r3, #16]
    3e8a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3e8c:	9b02      	ldr	r3, [sp, #8]
    3e8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3e92:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3e94:	9b03      	ldr	r3, [sp, #12]
    3e96:	011b      	lsls	r3, r3, #4
    3e98:	9a02      	ldr	r2, [sp, #8]
    3e9a:	4313      	orrs	r3, r2
    3e9c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3e9e:	4a04      	ldr	r2, [pc, #16]	; (3eb0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3ea0:	9b02      	ldr	r3, [sp, #8]
    3ea2:	6113      	str	r3, [r2, #16]
}
    3ea4:	bf00      	nop
    3ea6:	b004      	add	sp, #16
    3ea8:	4770      	bx	lr
    3eaa:	bf00      	nop
    3eac:	00007f8c 	.word	0x00007f8c
    3eb0:	40048000 	.word	0x40048000

00003eb4 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3eb4:	b084      	sub	sp, #16
    3eb6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3eb8:	4b0a      	ldr	r3, [pc, #40]	; (3ee4 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    3eba:	785b      	ldrb	r3, [r3, #1]
    3ebc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3ebe:	4b0a      	ldr	r3, [pc, #40]	; (3ee8 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3ec0:	691b      	ldr	r3, [r3, #16]
    3ec2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3ec4:	9b02      	ldr	r3, [sp, #8]
    3ec6:	f023 030c 	bic.w	r3, r3, #12
    3eca:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3ecc:	9b03      	ldr	r3, [sp, #12]
    3ece:	009b      	lsls	r3, r3, #2
    3ed0:	9a02      	ldr	r2, [sp, #8]
    3ed2:	4313      	orrs	r3, r2
    3ed4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3ed6:	4a04      	ldr	r2, [pc, #16]	; (3ee8 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3ed8:	9b02      	ldr	r3, [sp, #8]
    3eda:	6113      	str	r3, [r2, #16]
}
    3edc:	bf00      	nop
    3ede:	b004      	add	sp, #16
    3ee0:	4770      	bx	lr
    3ee2:	bf00      	nop
    3ee4:	00008044 	.word	0x00008044
    3ee8:	40048000 	.word	0x40048000

00003eec <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3eec:	b084      	sub	sp, #16
    3eee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ef0:	9b01      	ldr	r3, [sp, #4]
    3ef2:	685b      	ldr	r3, [r3, #4]
    3ef4:	4a0a      	ldr	r2, [pc, #40]	; (3f20 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    3ef6:	5cd3      	ldrb	r3, [r2, r3]
    3ef8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3efa:	4b0a      	ldr	r3, [pc, #40]	; (3f24 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3efc:	691b      	ldr	r3, [r3, #16]
    3efe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3f00:	9b02      	ldr	r3, [sp, #8]
    3f02:	f023 030c 	bic.w	r3, r3, #12
    3f06:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3f08:	9b03      	ldr	r3, [sp, #12]
    3f0a:	009b      	lsls	r3, r3, #2
    3f0c:	9a02      	ldr	r2, [sp, #8]
    3f0e:	4313      	orrs	r3, r2
    3f10:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3f12:	4a04      	ldr	r2, [pc, #16]	; (3f24 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3f14:	9b02      	ldr	r3, [sp, #8]
    3f16:	6113      	str	r3, [r2, #16]
}
    3f18:	bf00      	nop
    3f1a:	b004      	add	sp, #16
    3f1c:	4770      	bx	lr
    3f1e:	bf00      	nop
    3f20:	00008044 	.word	0x00008044
    3f24:	40048000 	.word	0x40048000

00003f28 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3f28:	b084      	sub	sp, #16
    3f2a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3f2c:	4b0a      	ldr	r3, [pc, #40]	; (3f58 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    3f2e:	795b      	ldrb	r3, [r3, #5]
    3f30:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    3f32:	4b0a      	ldr	r3, [pc, #40]	; (3f5c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3f34:	6a1b      	ldr	r3, [r3, #32]
    3f36:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3f38:	9b02      	ldr	r3, [sp, #8]
    3f3a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3f3e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3f40:	9b03      	ldr	r3, [sp, #12]
    3f42:	061b      	lsls	r3, r3, #24
    3f44:	9a02      	ldr	r2, [sp, #8]
    3f46:	4313      	orrs	r3, r2
    3f48:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3f4a:	4a04      	ldr	r2, [pc, #16]	; (3f5c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3f4c:	9b02      	ldr	r3, [sp, #8]
    3f4e:	6213      	str	r3, [r2, #32]
}
    3f50:	bf00      	nop
    3f52:	b004      	add	sp, #16
    3f54:	4770      	bx	lr
    3f56:	bf00      	nop
    3f58:	00007fe4 	.word	0x00007fe4
    3f5c:	40064000 	.word	0x40064000

00003f60 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3f60:	b084      	sub	sp, #16
    3f62:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3f64:	9b01      	ldr	r3, [sp, #4]
    3f66:	685b      	ldr	r3, [r3, #4]
    3f68:	4a0a      	ldr	r2, [pc, #40]	; (3f94 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    3f6a:	5cd3      	ldrb	r3, [r2, r3]
    3f6c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    3f6e:	4b0a      	ldr	r3, [pc, #40]	; (3f98 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3f70:	6a1b      	ldr	r3, [r3, #32]
    3f72:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3f74:	9b02      	ldr	r3, [sp, #8]
    3f76:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3f7a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3f7c:	9b03      	ldr	r3, [sp, #12]
    3f7e:	061b      	lsls	r3, r3, #24
    3f80:	9a02      	ldr	r2, [sp, #8]
    3f82:	4313      	orrs	r3, r2
    3f84:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3f86:	4a04      	ldr	r2, [pc, #16]	; (3f98 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3f88:	9b02      	ldr	r3, [sp, #8]
    3f8a:	6213      	str	r3, [r2, #32]
}
    3f8c:	bf00      	nop
    3f8e:	b004      	add	sp, #16
    3f90:	4770      	bx	lr
    3f92:	bf00      	nop
    3f94:	00007fe4 	.word	0x00007fe4
    3f98:	40064000 	.word	0x40064000

00003f9c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3f9c:	b086      	sub	sp, #24
    3f9e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3fa0:	4b20      	ldr	r3, [pc, #128]	; (4024 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    3fa2:	795b      	ldrb	r3, [r3, #5]
    3fa4:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3fa6:	9b01      	ldr	r3, [sp, #4]
    3fa8:	681a      	ldr	r2, [r3, #0]
    3faa:	491f      	ldr	r1, [pc, #124]	; (4028 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3fac:	4613      	mov	r3, r2
    3fae:	00db      	lsls	r3, r3, #3
    3fb0:	4413      	add	r3, r2
    3fb2:	440b      	add	r3, r1
    3fb4:	781b      	ldrb	r3, [r3, #0]
    3fb6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3fb8:	4b1c      	ldr	r3, [pc, #112]	; (402c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3fba:	68db      	ldr	r3, [r3, #12]
    3fbc:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3fbe:	9b03      	ldr	r3, [sp, #12]
    3fc0:	2b03      	cmp	r3, #3
    3fc2:	d813      	bhi.n	3fec <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3fc4:	9b03      	ldr	r3, [sp, #12]
    3fc6:	005b      	lsls	r3, r3, #1
    3fc8:	3318      	adds	r3, #24
    3fca:	2203      	movs	r2, #3
    3fcc:	fa02 f303 	lsl.w	r3, r2, r3
    3fd0:	43db      	mvns	r3, r3
    3fd2:	9a05      	ldr	r2, [sp, #20]
    3fd4:	4013      	ands	r3, r2
    3fd6:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3fd8:	9b03      	ldr	r3, [sp, #12]
    3fda:	005b      	lsls	r3, r3, #1
    3fdc:	3318      	adds	r3, #24
    3fde:	9a04      	ldr	r2, [sp, #16]
    3fe0:	fa02 f303 	lsl.w	r3, r2, r3
    3fe4:	9a05      	ldr	r2, [sp, #20]
    3fe6:	4313      	orrs	r3, r2
    3fe8:	9305      	str	r3, [sp, #20]
    3fea:	e014      	b.n	4016 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3fec:	9b03      	ldr	r3, [sp, #12]
    3fee:	3b04      	subs	r3, #4
    3ff0:	005b      	lsls	r3, r3, #1
    3ff2:	3310      	adds	r3, #16
    3ff4:	2203      	movs	r2, #3
    3ff6:	fa02 f303 	lsl.w	r3, r2, r3
    3ffa:	43db      	mvns	r3, r3
    3ffc:	9a05      	ldr	r2, [sp, #20]
    3ffe:	4013      	ands	r3, r2
    4000:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4002:	9b03      	ldr	r3, [sp, #12]
    4004:	3b04      	subs	r3, #4
    4006:	005b      	lsls	r3, r3, #1
    4008:	3310      	adds	r3, #16
    400a:	9a04      	ldr	r2, [sp, #16]
    400c:	fa02 f303 	lsl.w	r3, r2, r3
    4010:	9a05      	ldr	r2, [sp, #20]
    4012:	4313      	orrs	r3, r2
    4014:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4016:	4a05      	ldr	r2, [pc, #20]	; (402c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4018:	9b05      	ldr	r3, [sp, #20]
    401a:	60d3      	str	r3, [r2, #12]
}
    401c:	bf00      	nop
    401e:	b006      	add	sp, #24
    4020:	4770      	bx	lr
    4022:	bf00      	nop
    4024:	00007f8c 	.word	0x00007f8c
    4028:	00007c7c 	.word	0x00007c7c
    402c:	40048000 	.word	0x40048000

00004030 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4030:	b086      	sub	sp, #24
    4032:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4034:	9b01      	ldr	r3, [sp, #4]
    4036:	685b      	ldr	r3, [r3, #4]
    4038:	4a20      	ldr	r2, [pc, #128]	; (40bc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    403a:	5cd3      	ldrb	r3, [r2, r3]
    403c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    403e:	9b01      	ldr	r3, [sp, #4]
    4040:	681a      	ldr	r2, [r3, #0]
    4042:	491f      	ldr	r1, [pc, #124]	; (40c0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    4044:	4613      	mov	r3, r2
    4046:	00db      	lsls	r3, r3, #3
    4048:	4413      	add	r3, r2
    404a:	440b      	add	r3, r1
    404c:	781b      	ldrb	r3, [r3, #0]
    404e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4050:	4b1c      	ldr	r3, [pc, #112]	; (40c4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4052:	68db      	ldr	r3, [r3, #12]
    4054:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4056:	9b03      	ldr	r3, [sp, #12]
    4058:	2b03      	cmp	r3, #3
    405a:	d813      	bhi.n	4084 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    405c:	9b03      	ldr	r3, [sp, #12]
    405e:	005b      	lsls	r3, r3, #1
    4060:	3318      	adds	r3, #24
    4062:	2203      	movs	r2, #3
    4064:	fa02 f303 	lsl.w	r3, r2, r3
    4068:	43db      	mvns	r3, r3
    406a:	9a05      	ldr	r2, [sp, #20]
    406c:	4013      	ands	r3, r2
    406e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4070:	9b03      	ldr	r3, [sp, #12]
    4072:	005b      	lsls	r3, r3, #1
    4074:	3318      	adds	r3, #24
    4076:	9a04      	ldr	r2, [sp, #16]
    4078:	fa02 f303 	lsl.w	r3, r2, r3
    407c:	9a05      	ldr	r2, [sp, #20]
    407e:	4313      	orrs	r3, r2
    4080:	9305      	str	r3, [sp, #20]
    4082:	e014      	b.n	40ae <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4084:	9b03      	ldr	r3, [sp, #12]
    4086:	3b04      	subs	r3, #4
    4088:	005b      	lsls	r3, r3, #1
    408a:	3310      	adds	r3, #16
    408c:	2203      	movs	r2, #3
    408e:	fa02 f303 	lsl.w	r3, r2, r3
    4092:	43db      	mvns	r3, r3
    4094:	9a05      	ldr	r2, [sp, #20]
    4096:	4013      	ands	r3, r2
    4098:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    409a:	9b03      	ldr	r3, [sp, #12]
    409c:	3b04      	subs	r3, #4
    409e:	005b      	lsls	r3, r3, #1
    40a0:	3310      	adds	r3, #16
    40a2:	9a04      	ldr	r2, [sp, #16]
    40a4:	fa02 f303 	lsl.w	r3, r2, r3
    40a8:	9a05      	ldr	r2, [sp, #20]
    40aa:	4313      	orrs	r3, r2
    40ac:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    40ae:	4a05      	ldr	r2, [pc, #20]	; (40c4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    40b0:	9b05      	ldr	r3, [sp, #20]
    40b2:	60d3      	str	r3, [r2, #12]
}
    40b4:	bf00      	nop
    40b6:	b006      	add	sp, #24
    40b8:	4770      	bx	lr
    40ba:	bf00      	nop
    40bc:	00007f8c 	.word	0x00007f8c
    40c0:	00007c7c 	.word	0x00007c7c
    40c4:	40048000 	.word	0x40048000

000040c8 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    40c8:	b084      	sub	sp, #16
    40ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    40cc:	4b06      	ldr	r3, [pc, #24]	; (40e8 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    40ce:	685b      	ldr	r3, [r3, #4]
    40d0:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    40d2:	9b03      	ldr	r3, [sp, #12]
    40d4:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    40d8:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    40da:	4a03      	ldr	r2, [pc, #12]	; (40e8 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    40dc:	9b03      	ldr	r3, [sp, #12]
    40de:	6053      	str	r3, [r2, #4]
}
    40e0:	bf00      	nop
    40e2:	b004      	add	sp, #16
    40e4:	4770      	bx	lr
    40e6:	bf00      	nop
    40e8:	40048000 	.word	0x40048000

000040ec <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    40ec:	b084      	sub	sp, #16
    40ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    40f0:	9b01      	ldr	r3, [sp, #4]
    40f2:	685b      	ldr	r3, [r3, #4]
    40f4:	4a0a      	ldr	r2, [pc, #40]	; (4120 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    40f6:	5cd3      	ldrb	r3, [r2, r3]
    40f8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    40fa:	4b0a      	ldr	r3, [pc, #40]	; (4124 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    40fc:	685b      	ldr	r3, [r3, #4]
    40fe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4100:	9b02      	ldr	r3, [sp, #8]
    4102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4106:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4108:	9b03      	ldr	r3, [sp, #12]
    410a:	011b      	lsls	r3, r3, #4
    410c:	9a02      	ldr	r2, [sp, #8]
    410e:	4313      	orrs	r3, r2
    4110:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    4112:	4a04      	ldr	r2, [pc, #16]	; (4124 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4114:	9b02      	ldr	r3, [sp, #8]
    4116:	6053      	str	r3, [r2, #4]
}
    4118:	bf00      	nop
    411a:	b004      	add	sp, #16
    411c:	4770      	bx	lr
    411e:	bf00      	nop
    4120:	00007f8c 	.word	0x00007f8c
    4124:	40048000 	.word	0x40048000

00004128 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4128:	b084      	sub	sp, #16
    412a:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    412c:	9b01      	ldr	r3, [sp, #4]
    412e:	681a      	ldr	r2, [r3, #0]
    4130:	490f      	ldr	r1, [pc, #60]	; (4170 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    4132:	4613      	mov	r3, r2
    4134:	00db      	lsls	r3, r3, #3
    4136:	4413      	add	r3, r2
    4138:	440b      	add	r3, r1
    413a:	3304      	adds	r3, #4
    413c:	781b      	ldrb	r3, [r3, #0]
    413e:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4140:	4a0c      	ldr	r2, [pc, #48]	; (4174 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4142:	9b03      	ldr	r3, [sp, #12]
    4144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4148:	490a      	ldr	r1, [pc, #40]	; (4174 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    414a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    414e:	9b03      	ldr	r3, [sp, #12]
    4150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4154:	4a07      	ldr	r2, [pc, #28]	; (4174 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4156:	9b03      	ldr	r3, [sp, #12]
    4158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    415c:	4905      	ldr	r1, [pc, #20]	; (4174 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    415e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    4162:	9b03      	ldr	r3, [sp, #12]
    4164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4168:	bf00      	nop
    416a:	b004      	add	sp, #16
    416c:	4770      	bx	lr
    416e:	bf00      	nop
    4170:	00007c7c 	.word	0x00007c7c
    4174:	40065000 	.word	0x40065000

00004178 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4178:	b086      	sub	sp, #24
    417a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    417c:	9b01      	ldr	r3, [sp, #4]
    417e:	681a      	ldr	r2, [r3, #0]
    4180:	4912      	ldr	r1, [pc, #72]	; (41cc <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    4182:	4613      	mov	r3, r2
    4184:	00db      	lsls	r3, r3, #3
    4186:	4413      	add	r3, r2
    4188:	440b      	add	r3, r1
    418a:	3304      	adds	r3, #4
    418c:	781b      	ldrb	r3, [r3, #0]
    418e:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4190:	9b01      	ldr	r3, [sp, #4]
    4192:	685b      	ldr	r3, [r3, #4]
    4194:	4a0e      	ldr	r2, [pc, #56]	; (41d0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    4196:	5cd3      	ldrb	r3, [r2, r3]
    4198:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    419a:	4a0e      	ldr	r2, [pc, #56]	; (41d4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    419c:	9b05      	ldr	r3, [sp, #20]
    419e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    41a2:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    41a4:	9b03      	ldr	r3, [sp, #12]
    41a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    41aa:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    41ac:	9b04      	ldr	r3, [sp, #16]
    41ae:	061b      	lsls	r3, r3, #24
    41b0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    41b4:	9a03      	ldr	r2, [sp, #12]
    41b6:	4313      	orrs	r3, r2
    41b8:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    41ba:	4906      	ldr	r1, [pc, #24]	; (41d4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    41bc:	9b05      	ldr	r3, [sp, #20]
    41be:	9a03      	ldr	r2, [sp, #12]
    41c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    41c4:	bf00      	nop
    41c6:	b006      	add	sp, #24
    41c8:	4770      	bx	lr
    41ca:	bf00      	nop
    41cc:	00007c7c 	.word	0x00007c7c
    41d0:	00008014 	.word	0x00008014
    41d4:	40065000 	.word	0x40065000

000041d8 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    41d8:	b084      	sub	sp, #16
    41da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    41dc:	4b0b      	ldr	r3, [pc, #44]	; (420c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    41de:	7f1b      	ldrb	r3, [r3, #28]
    41e0:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    41e2:	4b0b      	ldr	r3, [pc, #44]	; (4210 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    41e4:	685b      	ldr	r3, [r3, #4]
    41e6:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    41e8:	9b02      	ldr	r3, [sp, #8]
    41ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    41ee:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    41f0:	9b03      	ldr	r3, [sp, #12]
    41f2:	031b      	lsls	r3, r3, #12
    41f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    41f8:	9a02      	ldr	r2, [sp, #8]
    41fa:	4313      	orrs	r3, r2
    41fc:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    41fe:	4a04      	ldr	r2, [pc, #16]	; (4210 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4200:	9b02      	ldr	r3, [sp, #8]
    4202:	6053      	str	r3, [r2, #4]
}
    4204:	bf00      	nop
    4206:	b004      	add	sp, #16
    4208:	4770      	bx	lr
    420a:	bf00      	nop
    420c:	00007f8c 	.word	0x00007f8c
    4210:	40048000 	.word	0x40048000

00004214 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4214:	b084      	sub	sp, #16
    4216:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4218:	9b01      	ldr	r3, [sp, #4]
    421a:	685b      	ldr	r3, [r3, #4]
    421c:	4a0b      	ldr	r2, [pc, #44]	; (424c <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    421e:	5cd3      	ldrb	r3, [r2, r3]
    4220:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4222:	4b0b      	ldr	r3, [pc, #44]	; (4250 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4224:	685b      	ldr	r3, [r3, #4]
    4226:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4228:	9b02      	ldr	r3, [sp, #8]
    422a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    422e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4230:	9b03      	ldr	r3, [sp, #12]
    4232:	031b      	lsls	r3, r3, #12
    4234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4238:	9a02      	ldr	r2, [sp, #8]
    423a:	4313      	orrs	r3, r2
    423c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    423e:	4a04      	ldr	r2, [pc, #16]	; (4250 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4240:	9b02      	ldr	r3, [sp, #8]
    4242:	6053      	str	r3, [r2, #4]
}
    4244:	bf00      	nop
    4246:	b004      	add	sp, #16
    4248:	4770      	bx	lr
    424a:	bf00      	nop
    424c:	00007f8c 	.word	0x00007f8c
    4250:	40048000 	.word	0x40048000

00004254 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4254:	b500      	push	{lr}
    4256:	b085      	sub	sp, #20
    4258:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    425a:	2300      	movs	r3, #0
    425c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4260:	9b01      	ldr	r3, [sp, #4]
    4262:	2b00      	cmp	r3, #0
    4264:	d037      	beq.n	42d6 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4266:	2300      	movs	r3, #0
    4268:	9303      	str	r3, [sp, #12]
    426a:	e02b      	b.n	42c4 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    426c:	4b29      	ldr	r3, [pc, #164]	; (4314 <DisableSafeClock+0xc0>)
    426e:	6819      	ldr	r1, [r3, #0]
    4270:	9a03      	ldr	r2, [sp, #12]
    4272:	4613      	mov	r3, r2
    4274:	005b      	lsls	r3, r3, #1
    4276:	4413      	add	r3, r2
    4278:	009b      	lsls	r3, r3, #2
    427a:	440b      	add	r3, r1
    427c:	3314      	adds	r3, #20
    427e:	681b      	ldr	r3, [r3, #0]
    4280:	2b05      	cmp	r3, #5
    4282:	d11c      	bne.n	42be <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4284:	2301      	movs	r3, #1
    4286:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    428a:	4b22      	ldr	r3, [pc, #136]	; (4314 <DisableSafeClock+0xc0>)
    428c:	6819      	ldr	r1, [r3, #0]
    428e:	9a03      	ldr	r2, [sp, #12]
    4290:	4613      	mov	r3, r2
    4292:	005b      	lsls	r3, r3, #1
    4294:	4413      	add	r3, r2
    4296:	009b      	lsls	r3, r3, #2
    4298:	440b      	add	r3, r1
    429a:	3318      	adds	r3, #24
    429c:	881b      	ldrh	r3, [r3, #0]
    429e:	2b00      	cmp	r3, #0
    42a0:	d118      	bne.n	42d4 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    42a2:	4b1d      	ldr	r3, [pc, #116]	; (4318 <DisableSafeClock+0xc4>)
    42a4:	791b      	ldrb	r3, [r3, #4]
    42a6:	4619      	mov	r1, r3
    42a8:	4a1c      	ldr	r2, [pc, #112]	; (431c <DisableSafeClock+0xc8>)
    42aa:	460b      	mov	r3, r1
    42ac:	005b      	lsls	r3, r3, #1
    42ae:	440b      	add	r3, r1
    42b0:	009b      	lsls	r3, r3, #2
    42b2:	4413      	add	r3, r2
    42b4:	3308      	adds	r3, #8
    42b6:	681b      	ldr	r3, [r3, #0]
    42b8:	2005      	movs	r0, #5
    42ba:	4798      	blx	r3
                }
                break;
    42bc:	e00a      	b.n	42d4 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    42be:	9b03      	ldr	r3, [sp, #12]
    42c0:	3301      	adds	r3, #1
    42c2:	9303      	str	r3, [sp, #12]
    42c4:	4b13      	ldr	r3, [pc, #76]	; (4314 <DisableSafeClock+0xc0>)
    42c6:	681b      	ldr	r3, [r3, #0]
    42c8:	7a1b      	ldrb	r3, [r3, #8]
    42ca:	461a      	mov	r2, r3
    42cc:	9b03      	ldr	r3, [sp, #12]
    42ce:	4293      	cmp	r3, r2
    42d0:	d3cc      	bcc.n	426c <DisableSafeClock+0x18>
    42d2:	e000      	b.n	42d6 <DisableSafeClock+0x82>
                break;
    42d4:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    42d6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    42da:	f083 0301 	eor.w	r3, r3, #1
    42de:	b2db      	uxtb	r3, r3
    42e0:	2b00      	cmp	r3, #0
    42e2:	d013      	beq.n	430c <DisableSafeClock+0xb8>
    42e4:	4b0e      	ldr	r3, [pc, #56]	; (4320 <DisableSafeClock+0xcc>)
    42e6:	781b      	ldrb	r3, [r3, #0]
    42e8:	f083 0301 	eor.w	r3, r3, #1
    42ec:	b2db      	uxtb	r3, r3
    42ee:	2b00      	cmp	r3, #0
    42f0:	d00c      	beq.n	430c <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    42f2:	4b09      	ldr	r3, [pc, #36]	; (4318 <DisableSafeClock+0xc4>)
    42f4:	791b      	ldrb	r3, [r3, #4]
    42f6:	4619      	mov	r1, r3
    42f8:	4a08      	ldr	r2, [pc, #32]	; (431c <DisableSafeClock+0xc8>)
    42fa:	460b      	mov	r3, r1
    42fc:	005b      	lsls	r3, r3, #1
    42fe:	440b      	add	r3, r1
    4300:	009b      	lsls	r3, r3, #2
    4302:	4413      	add	r3, r2
    4304:	3308      	adds	r3, #8
    4306:	681b      	ldr	r3, [r3, #0]
    4308:	2005      	movs	r0, #5
    430a:	4798      	blx	r3
    }
}
    430c:	bf00      	nop
    430e:	b005      	add	sp, #20
    4310:	f85d fb04 	ldr.w	pc, [sp], #4
    4314:	1fff8ba8 	.word	0x1fff8ba8
    4318:	00007c0c 	.word	0x00007c0c
    431c:	0000823c 	.word	0x0000823c
    4320:	1fff8b18 	.word	0x1fff8b18

00004324 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4324:	4b06      	ldr	r3, [pc, #24]	; (4340 <SetFircToResetValue_TrustedCall+0x1c>)
    4326:	2200      	movs	r2, #0
    4328:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    432c:	4b04      	ldr	r3, [pc, #16]	; (4340 <SetFircToResetValue_TrustedCall+0x1c>)
    432e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4332:	4a03      	ldr	r2, [pc, #12]	; (4340 <SetFircToResetValue_TrustedCall+0x1c>)
    4334:	f043 0301 	orr.w	r3, r3, #1
    4338:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    433c:	bf00      	nop
    433e:	4770      	bx	lr
    4340:	40064000 	.word	0x40064000

00004344 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4344:	b084      	sub	sp, #16
    4346:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4348:	2303      	movs	r3, #3
    434a:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    434c:	2300      	movs	r3, #0
    434e:	9302      	str	r3, [sp, #8]
    4350:	e028      	b.n	43a4 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4352:	9b01      	ldr	r3, [sp, #4]
    4354:	9a02      	ldr	r2, [sp, #8]
    4356:	320d      	adds	r2, #13
    4358:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    435c:	2b28      	cmp	r3, #40	; 0x28
    435e:	d10b      	bne.n	4378 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4360:	9a01      	ldr	r2, [sp, #4]
    4362:	9b02      	ldr	r3, [sp, #8]
    4364:	330d      	adds	r3, #13
    4366:	00db      	lsls	r3, r3, #3
    4368:	4413      	add	r3, r2
    436a:	685b      	ldr	r3, [r3, #4]
    436c:	4a2b      	ldr	r2, [pc, #172]	; (441c <SetSimLpoclksRegister_TrustedCall+0xd8>)
    436e:	5cd3      	ldrb	r3, [r2, r3]
    4370:	011b      	lsls	r3, r3, #4
    4372:	9a03      	ldr	r2, [sp, #12]
    4374:	4313      	orrs	r3, r2
    4376:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4378:	9b01      	ldr	r3, [sp, #4]
    437a:	9a02      	ldr	r2, [sp, #8]
    437c:	320d      	adds	r2, #13
    437e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4382:	2b29      	cmp	r3, #41	; 0x29
    4384:	d10b      	bne.n	439e <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4386:	9a01      	ldr	r2, [sp, #4]
    4388:	9b02      	ldr	r3, [sp, #8]
    438a:	330d      	adds	r3, #13
    438c:	00db      	lsls	r3, r3, #3
    438e:	4413      	add	r3, r2
    4390:	685b      	ldr	r3, [r3, #4]
    4392:	4a23      	ldr	r2, [pc, #140]	; (4420 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4394:	5cd3      	ldrb	r3, [r2, r3]
    4396:	009b      	lsls	r3, r3, #2
    4398:	9a03      	ldr	r2, [sp, #12]
    439a:	4313      	orrs	r3, r2
    439c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    439e:	9b02      	ldr	r3, [sp, #8]
    43a0:	3301      	adds	r3, #1
    43a2:	9302      	str	r3, [sp, #8]
    43a4:	9b01      	ldr	r3, [sp, #4]
    43a6:	7adb      	ldrb	r3, [r3, #11]
    43a8:	461a      	mov	r2, r3
    43aa:	9b02      	ldr	r3, [sp, #8]
    43ac:	4293      	cmp	r3, r2
    43ae:	d3d0      	bcc.n	4352 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    43b0:	2300      	movs	r3, #0
    43b2:	9302      	str	r3, [sp, #8]
    43b4:	e026      	b.n	4404 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    43b6:	9a01      	ldr	r2, [sp, #4]
    43b8:	9b02      	ldr	r3, [sp, #8]
    43ba:	334e      	adds	r3, #78	; 0x4e
    43bc:	00db      	lsls	r3, r3, #3
    43be:	4413      	add	r3, r2
    43c0:	685b      	ldr	r3, [r3, #4]
    43c2:	2b12      	cmp	r3, #18
    43c4:	d109      	bne.n	43da <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    43c6:	9a01      	ldr	r2, [sp, #4]
    43c8:	9b02      	ldr	r3, [sp, #8]
    43ca:	334e      	adds	r3, #78	; 0x4e
    43cc:	00db      	lsls	r3, r3, #3
    43ce:	4413      	add	r3, r2
    43d0:	891b      	ldrh	r3, [r3, #8]
    43d2:	005b      	lsls	r3, r3, #1
    43d4:	9a03      	ldr	r2, [sp, #12]
    43d6:	4313      	orrs	r3, r2
    43d8:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    43da:	9a01      	ldr	r2, [sp, #4]
    43dc:	9b02      	ldr	r3, [sp, #8]
    43de:	334e      	adds	r3, #78	; 0x4e
    43e0:	00db      	lsls	r3, r3, #3
    43e2:	4413      	add	r3, r2
    43e4:	685b      	ldr	r3, [r3, #4]
    43e6:	2b13      	cmp	r3, #19
    43e8:	d109      	bne.n	43fe <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    43ea:	9a01      	ldr	r2, [sp, #4]
    43ec:	9b02      	ldr	r3, [sp, #8]
    43ee:	334e      	adds	r3, #78	; 0x4e
    43f0:	00db      	lsls	r3, r3, #3
    43f2:	4413      	add	r3, r2
    43f4:	891b      	ldrh	r3, [r3, #8]
    43f6:	461a      	mov	r2, r3
    43f8:	9b03      	ldr	r3, [sp, #12]
    43fa:	4313      	orrs	r3, r2
    43fc:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    43fe:	9b02      	ldr	r3, [sp, #8]
    4400:	3301      	adds	r3, #1
    4402:	9302      	str	r3, [sp, #8]
    4404:	9b01      	ldr	r3, [sp, #4]
    4406:	7c1b      	ldrb	r3, [r3, #16]
    4408:	461a      	mov	r2, r3
    440a:	9b02      	ldr	r3, [sp, #8]
    440c:	4293      	cmp	r3, r2
    440e:	d3d2      	bcc.n	43b6 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4410:	4a04      	ldr	r2, [pc, #16]	; (4424 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4412:	9b03      	ldr	r3, [sp, #12]
    4414:	6113      	str	r3, [r2, #16]
}
    4416:	bf00      	nop
    4418:	b004      	add	sp, #16
    441a:	4770      	bx	lr
    441c:	00007f8c 	.word	0x00007f8c
    4420:	00008044 	.word	0x00008044
    4424:	40048000 	.word	0x40048000

00004428 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4428:	b500      	push	{lr}
    442a:	b089      	sub	sp, #36	; 0x24
    442c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    442e:	2300      	movs	r3, #0
    4430:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4434:	4a21      	ldr	r2, [pc, #132]	; (44bc <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4436:	9b01      	ldr	r3, [sp, #4]
    4438:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    443a:	4b21      	ldr	r3, [pc, #132]	; (44c0 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    443c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4440:	f003 0301 	and.w	r3, r3, #1
    4444:	2b00      	cmp	r3, #0
    4446:	d12e      	bne.n	44a6 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4448:	4b1e      	ldr	r3, [pc, #120]	; (44c4 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    444a:	2200      	movs	r2, #0
    444c:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    444e:	f7ff ff69 	bl	4324 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4452:	aa03      	add	r2, sp, #12
    4454:	a904      	add	r1, sp, #16
    4456:	a805      	add	r0, sp, #20
    4458:	f24c 3350 	movw	r3, #50000	; 0xc350
    445c:	f7fe f8ae 	bl	25bc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4460:	4b17      	ldr	r3, [pc, #92]	; (44c0 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4462:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4466:	0e1b      	lsrs	r3, r3, #24
    4468:	f003 0301 	and.w	r3, r3, #1
    446c:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    446e:	9a03      	ldr	r2, [sp, #12]
    4470:	a904      	add	r1, sp, #16
    4472:	ab05      	add	r3, sp, #20
    4474:	4618      	mov	r0, r3
    4476:	f7fe f8bb 	bl	25f0 <Clock_Ip_TimeoutExpired>
    447a:	4603      	mov	r3, r0
    447c:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4480:	9b06      	ldr	r3, [sp, #24]
    4482:	2b00      	cmp	r3, #0
    4484:	d106      	bne.n	4494 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4486:	f89d 301f 	ldrb.w	r3, [sp, #31]
    448a:	f083 0301 	eor.w	r3, r3, #1
    448e:	b2db      	uxtb	r3, r3
    4490:	2b00      	cmp	r3, #0
    4492:	d1e5      	bne.n	4460 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4494:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4498:	2b00      	cmp	r3, #0
    449a:	d007      	beq.n	44ac <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    449c:	2105      	movs	r1, #5
    449e:	2001      	movs	r0, #1
    44a0:	f7fe f87c 	bl	259c <Clock_Ip_ReportClockErrors>
    44a4:	e002      	b.n	44ac <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    44a6:	4b07      	ldr	r3, [pc, #28]	; (44c4 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    44a8:	2201      	movs	r2, #1
    44aa:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    44ac:	9801      	ldr	r0, [sp, #4]
    44ae:	f7ff ff49 	bl	4344 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    44b2:	bf00      	nop
    44b4:	b009      	add	sp, #36	; 0x24
    44b6:	f85d fb04 	ldr.w	pc, [sp], #4
    44ba:	bf00      	nop
    44bc:	1fff8ba8 	.word	0x1fff8ba8
    44c0:	40064000 	.word	0x40064000
    44c4:	1fff8b18 	.word	0x1fff8b18

000044c8 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    44c8:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    44ca:	2300      	movs	r3, #0
    44cc:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    44ce:	4b29      	ldr	r3, [pc, #164]	; (4574 <getFircConfig+0xac>)
    44d0:	681b      	ldr	r3, [r3, #0]
    44d2:	2b00      	cmp	r3, #0
    44d4:	d024      	beq.n	4520 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    44d6:	2300      	movs	r3, #0
    44d8:	9301      	str	r3, [sp, #4]
    44da:	e01a      	b.n	4512 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    44dc:	4b25      	ldr	r3, [pc, #148]	; (4574 <getFircConfig+0xac>)
    44de:	6819      	ldr	r1, [r3, #0]
    44e0:	9a01      	ldr	r2, [sp, #4]
    44e2:	4613      	mov	r3, r2
    44e4:	005b      	lsls	r3, r3, #1
    44e6:	4413      	add	r3, r2
    44e8:	009b      	lsls	r3, r3, #2
    44ea:	440b      	add	r3, r1
    44ec:	3314      	adds	r3, #20
    44ee:	681b      	ldr	r3, [r3, #0]
    44f0:	2b05      	cmp	r3, #5
    44f2:	d10b      	bne.n	450c <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    44f4:	4b1f      	ldr	r3, [pc, #124]	; (4574 <getFircConfig+0xac>)
    44f6:	6819      	ldr	r1, [r3, #0]
    44f8:	9a01      	ldr	r2, [sp, #4]
    44fa:	4613      	mov	r3, r2
    44fc:	005b      	lsls	r3, r3, #1
    44fe:	4413      	add	r3, r2
    4500:	009b      	lsls	r3, r3, #2
    4502:	3310      	adds	r3, #16
    4504:	440b      	add	r3, r1
    4506:	3304      	adds	r3, #4
    4508:	9300      	str	r3, [sp, #0]
                break;
    450a:	e009      	b.n	4520 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    450c:	9b01      	ldr	r3, [sp, #4]
    450e:	3301      	adds	r3, #1
    4510:	9301      	str	r3, [sp, #4]
    4512:	4b18      	ldr	r3, [pc, #96]	; (4574 <getFircConfig+0xac>)
    4514:	681b      	ldr	r3, [r3, #0]
    4516:	7a1b      	ldrb	r3, [r3, #8]
    4518:	461a      	mov	r2, r3
    451a:	9b01      	ldr	r3, [sp, #4]
    451c:	4293      	cmp	r3, r2
    451e:	d3dd      	bcc.n	44dc <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4520:	9b00      	ldr	r3, [sp, #0]
    4522:	2b00      	cmp	r3, #0
    4524:	d121      	bne.n	456a <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4526:	4b14      	ldr	r3, [pc, #80]	; (4578 <getFircConfig+0xb0>)
    4528:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    452a:	4b13      	ldr	r3, [pc, #76]	; (4578 <getFircConfig+0xb0>)
    452c:	2205      	movs	r2, #5
    452e:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4530:	4b12      	ldr	r3, [pc, #72]	; (457c <getFircConfig+0xb4>)
    4532:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4536:	b29b      	uxth	r3, r3
    4538:	f003 0301 	and.w	r3, r3, #1
    453c:	b29a      	uxth	r2, r3
    453e:	4b0e      	ldr	r3, [pc, #56]	; (4578 <getFircConfig+0xb0>)
    4540:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4542:	4b0e      	ldr	r3, [pc, #56]	; (457c <getFircConfig+0xb4>)
    4544:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4548:	b2db      	uxtb	r3, r3
    454a:	f003 0303 	and.w	r3, r3, #3
    454e:	b2da      	uxtb	r2, r3
    4550:	4b09      	ldr	r3, [pc, #36]	; (4578 <getFircConfig+0xb0>)
    4552:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4554:	4b09      	ldr	r3, [pc, #36]	; (457c <getFircConfig+0xb4>)
    4556:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    455a:	b2db      	uxtb	r3, r3
    455c:	10db      	asrs	r3, r3, #3
    455e:	b2db      	uxtb	r3, r3
    4560:	f003 0301 	and.w	r3, r3, #1
    4564:	b2da      	uxtb	r2, r3
    4566:	4b04      	ldr	r3, [pc, #16]	; (4578 <getFircConfig+0xb0>)
    4568:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    456a:	9b00      	ldr	r3, [sp, #0]
}
    456c:	4618      	mov	r0, r3
    456e:	b002      	add	sp, #8
    4570:	4770      	bx	lr
    4572:	bf00      	nop
    4574:	1fff8ba8 	.word	0x1fff8ba8
    4578:	1fff8c14 	.word	0x1fff8c14
    457c:	40064000 	.word	0x40064000

00004580 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4580:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4582:	2300      	movs	r3, #0
    4584:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4586:	4b20      	ldr	r3, [pc, #128]	; (4608 <getSoscConfig+0x88>)
    4588:	681b      	ldr	r3, [r3, #0]
    458a:	2b00      	cmp	r3, #0
    458c:	d024      	beq.n	45d8 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    458e:	2300      	movs	r3, #0
    4590:	9301      	str	r3, [sp, #4]
    4592:	e01a      	b.n	45ca <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4594:	4b1c      	ldr	r3, [pc, #112]	; (4608 <getSoscConfig+0x88>)
    4596:	6819      	ldr	r1, [r3, #0]
    4598:	9a01      	ldr	r2, [sp, #4]
    459a:	4613      	mov	r3, r2
    459c:	009b      	lsls	r3, r3, #2
    459e:	4413      	add	r3, r2
    45a0:	009b      	lsls	r3, r3, #2
    45a2:	440b      	add	r3, r1
    45a4:	332c      	adds	r3, #44	; 0x2c
    45a6:	681b      	ldr	r3, [r3, #0]
    45a8:	2b08      	cmp	r3, #8
    45aa:	d10b      	bne.n	45c4 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    45ac:	4b16      	ldr	r3, [pc, #88]	; (4608 <getSoscConfig+0x88>)
    45ae:	6819      	ldr	r1, [r3, #0]
    45b0:	9a01      	ldr	r2, [sp, #4]
    45b2:	4613      	mov	r3, r2
    45b4:	009b      	lsls	r3, r3, #2
    45b6:	4413      	add	r3, r2
    45b8:	009b      	lsls	r3, r3, #2
    45ba:	3328      	adds	r3, #40	; 0x28
    45bc:	440b      	add	r3, r1
    45be:	3304      	adds	r3, #4
    45c0:	9300      	str	r3, [sp, #0]
                break;
    45c2:	e009      	b.n	45d8 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    45c4:	9b01      	ldr	r3, [sp, #4]
    45c6:	3301      	adds	r3, #1
    45c8:	9301      	str	r3, [sp, #4]
    45ca:	4b0f      	ldr	r3, [pc, #60]	; (4608 <getSoscConfig+0x88>)
    45cc:	681b      	ldr	r3, [r3, #0]
    45ce:	7a5b      	ldrb	r3, [r3, #9]
    45d0:	461a      	mov	r2, r3
    45d2:	9b01      	ldr	r3, [sp, #4]
    45d4:	4293      	cmp	r3, r2
    45d6:	d3dd      	bcc.n	4594 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    45d8:	9b00      	ldr	r3, [sp, #0]
    45da:	2b00      	cmp	r3, #0
    45dc:	d110      	bne.n	4600 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    45de:	4b0b      	ldr	r3, [pc, #44]	; (460c <getSoscConfig+0x8c>)
    45e0:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    45e2:	4b0a      	ldr	r3, [pc, #40]	; (460c <getSoscConfig+0x8c>)
    45e4:	2208      	movs	r2, #8
    45e6:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    45e8:	4b09      	ldr	r3, [pc, #36]	; (4610 <getSoscConfig+0x90>)
    45ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    45ee:	b29b      	uxth	r3, r3
    45f0:	f003 0301 	and.w	r3, r3, #1
    45f4:	b29a      	uxth	r2, r3
    45f6:	4b05      	ldr	r3, [pc, #20]	; (460c <getSoscConfig+0x8c>)
    45f8:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    45fa:	4b04      	ldr	r3, [pc, #16]	; (460c <getSoscConfig+0x8c>)
    45fc:	4a05      	ldr	r2, [pc, #20]	; (4614 <getSoscConfig+0x94>)
    45fe:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4600:	9b00      	ldr	r3, [sp, #0]
}
    4602:	4618      	mov	r0, r3
    4604:	b002      	add	sp, #8
    4606:	4770      	bx	lr
    4608:	1fff8ba8 	.word	0x1fff8ba8
    460c:	1fff8c20 	.word	0x1fff8c20
    4610:	40064000 	.word	0x40064000
    4614:	02625a00 	.word	0x02625a00

00004618 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4618:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    461a:	2300      	movs	r3, #0
    461c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    461e:	4b28      	ldr	r3, [pc, #160]	; (46c0 <getSpllConfig+0xa8>)
    4620:	681b      	ldr	r3, [r3, #0]
    4622:	2b00      	cmp	r3, #0
    4624:	d023      	beq.n	466e <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4626:	2300      	movs	r3, #0
    4628:	9301      	str	r3, [sp, #4]
    462a:	e019      	b.n	4660 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    462c:	4b24      	ldr	r3, [pc, #144]	; (46c0 <getSpllConfig+0xa8>)
    462e:	6819      	ldr	r1, [r3, #0]
    4630:	9a01      	ldr	r2, [sp, #4]
    4632:	4613      	mov	r3, r2
    4634:	009b      	lsls	r3, r3, #2
    4636:	4413      	add	r3, r2
    4638:	00db      	lsls	r3, r3, #3
    463a:	440b      	add	r3, r1
    463c:	3340      	adds	r3, #64	; 0x40
    463e:	681b      	ldr	r3, [r3, #0]
    4640:	2b09      	cmp	r3, #9
    4642:	d10a      	bne.n	465a <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4644:	4b1e      	ldr	r3, [pc, #120]	; (46c0 <getSpllConfig+0xa8>)
    4646:	6819      	ldr	r1, [r3, #0]
    4648:	9a01      	ldr	r2, [sp, #4]
    464a:	4613      	mov	r3, r2
    464c:	009b      	lsls	r3, r3, #2
    464e:	4413      	add	r3, r2
    4650:	00db      	lsls	r3, r3, #3
    4652:	3340      	adds	r3, #64	; 0x40
    4654:	440b      	add	r3, r1
    4656:	9300      	str	r3, [sp, #0]
                break;
    4658:	e009      	b.n	466e <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    465a:	9b01      	ldr	r3, [sp, #4]
    465c:	3301      	adds	r3, #1
    465e:	9301      	str	r3, [sp, #4]
    4660:	4b17      	ldr	r3, [pc, #92]	; (46c0 <getSpllConfig+0xa8>)
    4662:	681b      	ldr	r3, [r3, #0]
    4664:	7a9b      	ldrb	r3, [r3, #10]
    4666:	461a      	mov	r2, r3
    4668:	9b01      	ldr	r3, [sp, #4]
    466a:	4293      	cmp	r3, r2
    466c:	d3de      	bcc.n	462c <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    466e:	9b00      	ldr	r3, [sp, #0]
    4670:	2b00      	cmp	r3, #0
    4672:	d121      	bne.n	46b8 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4674:	4b13      	ldr	r3, [pc, #76]	; (46c4 <getSpllConfig+0xac>)
    4676:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4678:	4b12      	ldr	r3, [pc, #72]	; (46c4 <getSpllConfig+0xac>)
    467a:	2209      	movs	r2, #9
    467c:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    467e:	4b12      	ldr	r3, [pc, #72]	; (46c8 <getSpllConfig+0xb0>)
    4680:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4684:	b29b      	uxth	r3, r3
    4686:	f003 0301 	and.w	r3, r3, #1
    468a:	b29a      	uxth	r2, r3
    468c:	4b0d      	ldr	r3, [pc, #52]	; (46c4 <getSpllConfig+0xac>)
    468e:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4690:	4b0d      	ldr	r3, [pc, #52]	; (46c8 <getSpllConfig+0xb0>)
    4692:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4696:	0a1b      	lsrs	r3, r3, #8
    4698:	b2db      	uxtb	r3, r3
    469a:	f003 0307 	and.w	r3, r3, #7
    469e:	b2da      	uxtb	r2, r3
    46a0:	4b08      	ldr	r3, [pc, #32]	; (46c4 <getSpllConfig+0xac>)
    46a2:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    46a4:	4b08      	ldr	r3, [pc, #32]	; (46c8 <getSpllConfig+0xb0>)
    46a6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    46aa:	0c1b      	lsrs	r3, r3, #16
    46ac:	b2db      	uxtb	r3, r3
    46ae:	f003 031f 	and.w	r3, r3, #31
    46b2:	b2da      	uxtb	r2, r3
    46b4:	4b03      	ldr	r3, [pc, #12]	; (46c4 <getSpllConfig+0xac>)
    46b6:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    46b8:	9b00      	ldr	r3, [sp, #0]
}
    46ba:	4618      	mov	r0, r3
    46bc:	b002      	add	sp, #8
    46be:	4770      	bx	lr
    46c0:	1fff8ba8 	.word	0x1fff8ba8
    46c4:	1fff8c34 	.word	0x1fff8c34
    46c8:	40064000 	.word	0x40064000

000046cc <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    46cc:	b086      	sub	sp, #24
    46ce:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    46d0:	2300      	movs	r3, #0
    46d2:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    46d4:	9b01      	ldr	r3, [sp, #4]
    46d6:	2b1b      	cmp	r3, #27
    46d8:	d00f      	beq.n	46fa <getSelectorConfig+0x2e>
    46da:	9b01      	ldr	r3, [sp, #4]
    46dc:	2b1b      	cmp	r3, #27
    46de:	d80f      	bhi.n	4700 <getSelectorConfig+0x34>
    46e0:	9b01      	ldr	r3, [sp, #4]
    46e2:	2b19      	cmp	r3, #25
    46e4:	d003      	beq.n	46ee <getSelectorConfig+0x22>
    46e6:	9b01      	ldr	r3, [sp, #4]
    46e8:	2b1a      	cmp	r3, #26
    46ea:	d003      	beq.n	46f4 <getSelectorConfig+0x28>
    46ec:	e008      	b.n	4700 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    46ee:	2300      	movs	r3, #0
    46f0:	9304      	str	r3, [sp, #16]
            break;
    46f2:	e008      	b.n	4706 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    46f4:	2301      	movs	r3, #1
    46f6:	9304      	str	r3, [sp, #16]
            break;
    46f8:	e005      	b.n	4706 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    46fa:	2302      	movs	r3, #2
    46fc:	9304      	str	r3, [sp, #16]
            break;
    46fe:	e002      	b.n	4706 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4700:	2300      	movs	r3, #0
    4702:	9304      	str	r3, [sp, #16]
            break;
    4704:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4706:	4b36      	ldr	r3, [pc, #216]	; (47e0 <getSelectorConfig+0x114>)
    4708:	681b      	ldr	r3, [r3, #0]
    470a:	2b00      	cmp	r3, #0
    470c:	d01d      	beq.n	474a <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    470e:	2300      	movs	r3, #0
    4710:	9303      	str	r3, [sp, #12]
    4712:	e013      	b.n	473c <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4714:	4b32      	ldr	r3, [pc, #200]	; (47e0 <getSelectorConfig+0x114>)
    4716:	681b      	ldr	r3, [r3, #0]
    4718:	9a03      	ldr	r2, [sp, #12]
    471a:	320d      	adds	r2, #13
    471c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4720:	9a01      	ldr	r2, [sp, #4]
    4722:	429a      	cmp	r2, r3
    4724:	d107      	bne.n	4736 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4726:	4b2e      	ldr	r3, [pc, #184]	; (47e0 <getSelectorConfig+0x114>)
    4728:	681a      	ldr	r2, [r3, #0]
    472a:	9b03      	ldr	r3, [sp, #12]
    472c:	330d      	adds	r3, #13
    472e:	00db      	lsls	r3, r3, #3
    4730:	4413      	add	r3, r2
    4732:	9305      	str	r3, [sp, #20]
                break;
    4734:	e009      	b.n	474a <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4736:	9b03      	ldr	r3, [sp, #12]
    4738:	3301      	adds	r3, #1
    473a:	9303      	str	r3, [sp, #12]
    473c:	4b28      	ldr	r3, [pc, #160]	; (47e0 <getSelectorConfig+0x114>)
    473e:	681b      	ldr	r3, [r3, #0]
    4740:	7adb      	ldrb	r3, [r3, #11]
    4742:	461a      	mov	r2, r3
    4744:	9b03      	ldr	r3, [sp, #12]
    4746:	4293      	cmp	r3, r2
    4748:	d3e4      	bcc.n	4714 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    474a:	9b05      	ldr	r3, [sp, #20]
    474c:	2b00      	cmp	r3, #0
    474e:	d140      	bne.n	47d2 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4750:	9b04      	ldr	r3, [sp, #16]
    4752:	00db      	lsls	r3, r3, #3
    4754:	4a23      	ldr	r2, [pc, #140]	; (47e4 <getSelectorConfig+0x118>)
    4756:	4413      	add	r3, r2
    4758:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    475a:	4922      	ldr	r1, [pc, #136]	; (47e4 <getSelectorConfig+0x118>)
    475c:	9b04      	ldr	r3, [sp, #16]
    475e:	9a01      	ldr	r2, [sp, #4]
    4760:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4764:	9b01      	ldr	r3, [sp, #4]
    4766:	2b1b      	cmp	r3, #27
    4768:	d025      	beq.n	47b6 <getSelectorConfig+0xea>
    476a:	9b01      	ldr	r3, [sp, #4]
    476c:	2b1b      	cmp	r3, #27
    476e:	d832      	bhi.n	47d6 <getSelectorConfig+0x10a>
    4770:	9b01      	ldr	r3, [sp, #4]
    4772:	2b19      	cmp	r3, #25
    4774:	d003      	beq.n	477e <getSelectorConfig+0xb2>
    4776:	9b01      	ldr	r3, [sp, #4]
    4778:	2b1a      	cmp	r3, #26
    477a:	d00e      	beq.n	479a <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    477c:	e02b      	b.n	47d6 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    477e:	4b1a      	ldr	r3, [pc, #104]	; (47e8 <getSelectorConfig+0x11c>)
    4780:	695b      	ldr	r3, [r3, #20]
    4782:	0e1b      	lsrs	r3, r3, #24
    4784:	f003 030f 	and.w	r3, r3, #15
    4788:	4a18      	ldr	r2, [pc, #96]	; (47ec <getSelectorConfig+0x120>)
    478a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    478e:	4915      	ldr	r1, [pc, #84]	; (47e4 <getSelectorConfig+0x118>)
    4790:	9b04      	ldr	r3, [sp, #16]
    4792:	00db      	lsls	r3, r3, #3
    4794:	440b      	add	r3, r1
    4796:	605a      	str	r2, [r3, #4]
                break;
    4798:	e01e      	b.n	47d8 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    479a:	4b13      	ldr	r3, [pc, #76]	; (47e8 <getSelectorConfig+0x11c>)
    479c:	699b      	ldr	r3, [r3, #24]
    479e:	0e1b      	lsrs	r3, r3, #24
    47a0:	f003 030f 	and.w	r3, r3, #15
    47a4:	4a11      	ldr	r2, [pc, #68]	; (47ec <getSelectorConfig+0x120>)
    47a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    47aa:	490e      	ldr	r1, [pc, #56]	; (47e4 <getSelectorConfig+0x118>)
    47ac:	9b04      	ldr	r3, [sp, #16]
    47ae:	00db      	lsls	r3, r3, #3
    47b0:	440b      	add	r3, r1
    47b2:	605a      	str	r2, [r3, #4]
                break;
    47b4:	e010      	b.n	47d8 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    47b6:	4b0c      	ldr	r3, [pc, #48]	; (47e8 <getSelectorConfig+0x11c>)
    47b8:	69db      	ldr	r3, [r3, #28]
    47ba:	0e1b      	lsrs	r3, r3, #24
    47bc:	f003 030f 	and.w	r3, r3, #15
    47c0:	4a0a      	ldr	r2, [pc, #40]	; (47ec <getSelectorConfig+0x120>)
    47c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    47c6:	4907      	ldr	r1, [pc, #28]	; (47e4 <getSelectorConfig+0x118>)
    47c8:	9b04      	ldr	r3, [sp, #16]
    47ca:	00db      	lsls	r3, r3, #3
    47cc:	440b      	add	r3, r1
    47ce:	605a      	str	r2, [r3, #4]
                break;
    47d0:	e002      	b.n	47d8 <getSelectorConfig+0x10c>
        }
    }
    47d2:	bf00      	nop
    47d4:	e000      	b.n	47d8 <getSelectorConfig+0x10c>
                break;
    47d6:	bf00      	nop

    return ReturnValue;
    47d8:	9b05      	ldr	r3, [sp, #20]
}
    47da:	4618      	mov	r0, r3
    47dc:	b006      	add	sp, #24
    47de:	4770      	bx	lr
    47e0:	1fff8ba8 	.word	0x1fff8ba8
    47e4:	1fff8c5c 	.word	0x1fff8c5c
    47e8:	40064000 	.word	0x40064000
    47ec:	0000830c 	.word	0x0000830c

000047f0 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    47f0:	b086      	sub	sp, #24
    47f2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    47f4:	2300      	movs	r3, #0
    47f6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    47f8:	2300      	movs	r3, #0
    47fa:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    47fc:	9b01      	ldr	r3, [sp, #4]
    47fe:	2b1f      	cmp	r3, #31
    4800:	d00f      	beq.n	4822 <getCoreDividerConfig+0x32>
    4802:	9b01      	ldr	r3, [sp, #4]
    4804:	2b1f      	cmp	r3, #31
    4806:	d80f      	bhi.n	4828 <getCoreDividerConfig+0x38>
    4808:	9b01      	ldr	r3, [sp, #4]
    480a:	2b1d      	cmp	r3, #29
    480c:	d003      	beq.n	4816 <getCoreDividerConfig+0x26>
    480e:	9b01      	ldr	r3, [sp, #4]
    4810:	2b1e      	cmp	r3, #30
    4812:	d003      	beq.n	481c <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4814:	e008      	b.n	4828 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4816:	2300      	movs	r3, #0
    4818:	9304      	str	r3, [sp, #16]
            break;
    481a:	e006      	b.n	482a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    481c:	2301      	movs	r3, #1
    481e:	9304      	str	r3, [sp, #16]
            break;
    4820:	e003      	b.n	482a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4822:	2302      	movs	r3, #2
    4824:	9304      	str	r3, [sp, #16]
            break;
    4826:	e000      	b.n	482a <getCoreDividerConfig+0x3a>
                break;
    4828:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    482a:	4b41      	ldr	r3, [pc, #260]	; (4930 <getCoreDividerConfig+0x140>)
    482c:	681b      	ldr	r3, [r3, #0]
    482e:	2b00      	cmp	r3, #0
    4830:	d026      	beq.n	4880 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4832:	2300      	movs	r3, #0
    4834:	9303      	str	r3, [sp, #12]
    4836:	e01c      	b.n	4872 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4838:	4b3d      	ldr	r3, [pc, #244]	; (4930 <getCoreDividerConfig+0x140>)
    483a:	6819      	ldr	r1, [r3, #0]
    483c:	9a03      	ldr	r2, [sp, #12]
    483e:	4613      	mov	r3, r2
    4840:	005b      	lsls	r3, r3, #1
    4842:	4413      	add	r3, r2
    4844:	009b      	lsls	r3, r3, #2
    4846:	440b      	add	r3, r1
    4848:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    484c:	681b      	ldr	r3, [r3, #0]
    484e:	9a01      	ldr	r2, [sp, #4]
    4850:	429a      	cmp	r2, r3
    4852:	d10b      	bne.n	486c <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4854:	4b36      	ldr	r3, [pc, #216]	; (4930 <getCoreDividerConfig+0x140>)
    4856:	6819      	ldr	r1, [r3, #0]
    4858:	9a03      	ldr	r2, [sp, #12]
    485a:	4613      	mov	r3, r2
    485c:	005b      	lsls	r3, r3, #1
    485e:	4413      	add	r3, r2
    4860:	009b      	lsls	r3, r3, #2
    4862:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4866:	440b      	add	r3, r1
    4868:	9305      	str	r3, [sp, #20]
                break;
    486a:	e009      	b.n	4880 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    486c:	9b03      	ldr	r3, [sp, #12]
    486e:	3301      	adds	r3, #1
    4870:	9303      	str	r3, [sp, #12]
    4872:	4b2f      	ldr	r3, [pc, #188]	; (4930 <getCoreDividerConfig+0x140>)
    4874:	681b      	ldr	r3, [r3, #0]
    4876:	7b1b      	ldrb	r3, [r3, #12]
    4878:	461a      	mov	r2, r3
    487a:	9b03      	ldr	r3, [sp, #12]
    487c:	4293      	cmp	r3, r2
    487e:	d3db      	bcc.n	4838 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4880:	9b05      	ldr	r3, [sp, #20]
    4882:	2b00      	cmp	r3, #0
    4884:	d14d      	bne.n	4922 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4886:	9a04      	ldr	r2, [sp, #16]
    4888:	4613      	mov	r3, r2
    488a:	005b      	lsls	r3, r3, #1
    488c:	4413      	add	r3, r2
    488e:	009b      	lsls	r3, r3, #2
    4890:	4a28      	ldr	r2, [pc, #160]	; (4934 <getCoreDividerConfig+0x144>)
    4892:	4413      	add	r3, r2
    4894:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4896:	4927      	ldr	r1, [pc, #156]	; (4934 <getCoreDividerConfig+0x144>)
    4898:	9a04      	ldr	r2, [sp, #16]
    489a:	4613      	mov	r3, r2
    489c:	005b      	lsls	r3, r3, #1
    489e:	4413      	add	r3, r2
    48a0:	009b      	lsls	r3, r3, #2
    48a2:	440b      	add	r3, r1
    48a4:	9a01      	ldr	r2, [sp, #4]
    48a6:	601a      	str	r2, [r3, #0]
        switch(Name)
    48a8:	9b01      	ldr	r3, [sp, #4]
    48aa:	2b1f      	cmp	r3, #31
    48ac:	d029      	beq.n	4902 <getCoreDividerConfig+0x112>
    48ae:	9b01      	ldr	r3, [sp, #4]
    48b0:	2b1f      	cmp	r3, #31
    48b2:	d838      	bhi.n	4926 <getCoreDividerConfig+0x136>
    48b4:	9b01      	ldr	r3, [sp, #4]
    48b6:	2b1d      	cmp	r3, #29
    48b8:	d003      	beq.n	48c2 <getCoreDividerConfig+0xd2>
    48ba:	9b01      	ldr	r3, [sp, #4]
    48bc:	2b1e      	cmp	r3, #30
    48be:	d010      	beq.n	48e2 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    48c0:	e031      	b.n	4926 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    48c2:	4b1d      	ldr	r3, [pc, #116]	; (4938 <getCoreDividerConfig+0x148>)
    48c4:	695b      	ldr	r3, [r3, #20]
    48c6:	0c1b      	lsrs	r3, r3, #16
    48c8:	f003 030f 	and.w	r3, r3, #15
    48cc:	1c59      	adds	r1, r3, #1
    48ce:	4819      	ldr	r0, [pc, #100]	; (4934 <getCoreDividerConfig+0x144>)
    48d0:	9a04      	ldr	r2, [sp, #16]
    48d2:	4613      	mov	r3, r2
    48d4:	005b      	lsls	r3, r3, #1
    48d6:	4413      	add	r3, r2
    48d8:	009b      	lsls	r3, r3, #2
    48da:	4403      	add	r3, r0
    48dc:	3304      	adds	r3, #4
    48de:	6019      	str	r1, [r3, #0]
                break;
    48e0:	e022      	b.n	4928 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    48e2:	4b15      	ldr	r3, [pc, #84]	; (4938 <getCoreDividerConfig+0x148>)
    48e4:	699b      	ldr	r3, [r3, #24]
    48e6:	0c1b      	lsrs	r3, r3, #16
    48e8:	f003 030f 	and.w	r3, r3, #15
    48ec:	1c59      	adds	r1, r3, #1
    48ee:	4811      	ldr	r0, [pc, #68]	; (4934 <getCoreDividerConfig+0x144>)
    48f0:	9a04      	ldr	r2, [sp, #16]
    48f2:	4613      	mov	r3, r2
    48f4:	005b      	lsls	r3, r3, #1
    48f6:	4413      	add	r3, r2
    48f8:	009b      	lsls	r3, r3, #2
    48fa:	4403      	add	r3, r0
    48fc:	3304      	adds	r3, #4
    48fe:	6019      	str	r1, [r3, #0]
                break;
    4900:	e012      	b.n	4928 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4902:	4b0d      	ldr	r3, [pc, #52]	; (4938 <getCoreDividerConfig+0x148>)
    4904:	69db      	ldr	r3, [r3, #28]
    4906:	0c1b      	lsrs	r3, r3, #16
    4908:	f003 030f 	and.w	r3, r3, #15
    490c:	1c59      	adds	r1, r3, #1
    490e:	4809      	ldr	r0, [pc, #36]	; (4934 <getCoreDividerConfig+0x144>)
    4910:	9a04      	ldr	r2, [sp, #16]
    4912:	4613      	mov	r3, r2
    4914:	005b      	lsls	r3, r3, #1
    4916:	4413      	add	r3, r2
    4918:	009b      	lsls	r3, r3, #2
    491a:	4403      	add	r3, r0
    491c:	3304      	adds	r3, #4
    491e:	6019      	str	r1, [r3, #0]
                break;
    4920:	e002      	b.n	4928 <getCoreDividerConfig+0x138>
        }
    }
    4922:	bf00      	nop
    4924:	e000      	b.n	4928 <getCoreDividerConfig+0x138>
                break;
    4926:	bf00      	nop

    return ReturnValue;
    4928:	9b05      	ldr	r3, [sp, #20]
}
    492a:	4618      	mov	r0, r3
    492c:	b006      	add	sp, #24
    492e:	4770      	bx	lr
    4930:	1fff8ba8 	.word	0x1fff8ba8
    4934:	1fff8c74 	.word	0x1fff8c74
    4938:	40064000 	.word	0x40064000

0000493c <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    493c:	b086      	sub	sp, #24
    493e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4940:	2300      	movs	r3, #0
    4942:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4944:	2300      	movs	r3, #0
    4946:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4948:	9b01      	ldr	r3, [sp, #4]
    494a:	2b23      	cmp	r3, #35	; 0x23
    494c:	d00f      	beq.n	496e <getBusDividerConfig+0x32>
    494e:	9b01      	ldr	r3, [sp, #4]
    4950:	2b23      	cmp	r3, #35	; 0x23
    4952:	d80f      	bhi.n	4974 <getBusDividerConfig+0x38>
    4954:	9b01      	ldr	r3, [sp, #4]
    4956:	2b21      	cmp	r3, #33	; 0x21
    4958:	d003      	beq.n	4962 <getBusDividerConfig+0x26>
    495a:	9b01      	ldr	r3, [sp, #4]
    495c:	2b22      	cmp	r3, #34	; 0x22
    495e:	d003      	beq.n	4968 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4960:	e008      	b.n	4974 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4962:	2300      	movs	r3, #0
    4964:	9304      	str	r3, [sp, #16]
            break;
    4966:	e006      	b.n	4976 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4968:	2301      	movs	r3, #1
    496a:	9304      	str	r3, [sp, #16]
            break;
    496c:	e003      	b.n	4976 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    496e:	2302      	movs	r3, #2
    4970:	9304      	str	r3, [sp, #16]
            break;
    4972:	e000      	b.n	4976 <getBusDividerConfig+0x3a>
                break;
    4974:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4976:	4b41      	ldr	r3, [pc, #260]	; (4a7c <getBusDividerConfig+0x140>)
    4978:	681b      	ldr	r3, [r3, #0]
    497a:	2b00      	cmp	r3, #0
    497c:	d026      	beq.n	49cc <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    497e:	2300      	movs	r3, #0
    4980:	9303      	str	r3, [sp, #12]
    4982:	e01c      	b.n	49be <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4984:	4b3d      	ldr	r3, [pc, #244]	; (4a7c <getBusDividerConfig+0x140>)
    4986:	6819      	ldr	r1, [r3, #0]
    4988:	9a03      	ldr	r2, [sp, #12]
    498a:	4613      	mov	r3, r2
    498c:	005b      	lsls	r3, r3, #1
    498e:	4413      	add	r3, r2
    4990:	009b      	lsls	r3, r3, #2
    4992:	440b      	add	r3, r1
    4994:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4998:	681b      	ldr	r3, [r3, #0]
    499a:	9a01      	ldr	r2, [sp, #4]
    499c:	429a      	cmp	r2, r3
    499e:	d10b      	bne.n	49b8 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    49a0:	4b36      	ldr	r3, [pc, #216]	; (4a7c <getBusDividerConfig+0x140>)
    49a2:	6819      	ldr	r1, [r3, #0]
    49a4:	9a03      	ldr	r2, [sp, #12]
    49a6:	4613      	mov	r3, r2
    49a8:	005b      	lsls	r3, r3, #1
    49aa:	4413      	add	r3, r2
    49ac:	009b      	lsls	r3, r3, #2
    49ae:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    49b2:	440b      	add	r3, r1
    49b4:	9305      	str	r3, [sp, #20]
                break;
    49b6:	e009      	b.n	49cc <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    49b8:	9b03      	ldr	r3, [sp, #12]
    49ba:	3301      	adds	r3, #1
    49bc:	9303      	str	r3, [sp, #12]
    49be:	4b2f      	ldr	r3, [pc, #188]	; (4a7c <getBusDividerConfig+0x140>)
    49c0:	681b      	ldr	r3, [r3, #0]
    49c2:	7b1b      	ldrb	r3, [r3, #12]
    49c4:	461a      	mov	r2, r3
    49c6:	9b03      	ldr	r3, [sp, #12]
    49c8:	4293      	cmp	r3, r2
    49ca:	d3db      	bcc.n	4984 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    49cc:	9b05      	ldr	r3, [sp, #20]
    49ce:	2b00      	cmp	r3, #0
    49d0:	d14d      	bne.n	4a6e <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    49d2:	9a04      	ldr	r2, [sp, #16]
    49d4:	4613      	mov	r3, r2
    49d6:	005b      	lsls	r3, r3, #1
    49d8:	4413      	add	r3, r2
    49da:	009b      	lsls	r3, r3, #2
    49dc:	4a28      	ldr	r2, [pc, #160]	; (4a80 <getBusDividerConfig+0x144>)
    49de:	4413      	add	r3, r2
    49e0:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    49e2:	4927      	ldr	r1, [pc, #156]	; (4a80 <getBusDividerConfig+0x144>)
    49e4:	9a04      	ldr	r2, [sp, #16]
    49e6:	4613      	mov	r3, r2
    49e8:	005b      	lsls	r3, r3, #1
    49ea:	4413      	add	r3, r2
    49ec:	009b      	lsls	r3, r3, #2
    49ee:	440b      	add	r3, r1
    49f0:	9a01      	ldr	r2, [sp, #4]
    49f2:	601a      	str	r2, [r3, #0]
        switch(Name)
    49f4:	9b01      	ldr	r3, [sp, #4]
    49f6:	2b23      	cmp	r3, #35	; 0x23
    49f8:	d029      	beq.n	4a4e <getBusDividerConfig+0x112>
    49fa:	9b01      	ldr	r3, [sp, #4]
    49fc:	2b23      	cmp	r3, #35	; 0x23
    49fe:	d838      	bhi.n	4a72 <getBusDividerConfig+0x136>
    4a00:	9b01      	ldr	r3, [sp, #4]
    4a02:	2b21      	cmp	r3, #33	; 0x21
    4a04:	d003      	beq.n	4a0e <getBusDividerConfig+0xd2>
    4a06:	9b01      	ldr	r3, [sp, #4]
    4a08:	2b22      	cmp	r3, #34	; 0x22
    4a0a:	d010      	beq.n	4a2e <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4a0c:	e031      	b.n	4a72 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    4a0e:	4b1d      	ldr	r3, [pc, #116]	; (4a84 <getBusDividerConfig+0x148>)
    4a10:	695b      	ldr	r3, [r3, #20]
    4a12:	091b      	lsrs	r3, r3, #4
    4a14:	f003 030f 	and.w	r3, r3, #15
    4a18:	1c59      	adds	r1, r3, #1
    4a1a:	4819      	ldr	r0, [pc, #100]	; (4a80 <getBusDividerConfig+0x144>)
    4a1c:	9a04      	ldr	r2, [sp, #16]
    4a1e:	4613      	mov	r3, r2
    4a20:	005b      	lsls	r3, r3, #1
    4a22:	4413      	add	r3, r2
    4a24:	009b      	lsls	r3, r3, #2
    4a26:	4403      	add	r3, r0
    4a28:	3304      	adds	r3, #4
    4a2a:	6019      	str	r1, [r3, #0]
                break;
    4a2c:	e022      	b.n	4a74 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    4a2e:	4b15      	ldr	r3, [pc, #84]	; (4a84 <getBusDividerConfig+0x148>)
    4a30:	699b      	ldr	r3, [r3, #24]
    4a32:	091b      	lsrs	r3, r3, #4
    4a34:	f003 030f 	and.w	r3, r3, #15
    4a38:	1c59      	adds	r1, r3, #1
    4a3a:	4811      	ldr	r0, [pc, #68]	; (4a80 <getBusDividerConfig+0x144>)
    4a3c:	9a04      	ldr	r2, [sp, #16]
    4a3e:	4613      	mov	r3, r2
    4a40:	005b      	lsls	r3, r3, #1
    4a42:	4413      	add	r3, r2
    4a44:	009b      	lsls	r3, r3, #2
    4a46:	4403      	add	r3, r0
    4a48:	3304      	adds	r3, #4
    4a4a:	6019      	str	r1, [r3, #0]
                break;
    4a4c:	e012      	b.n	4a74 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    4a4e:	4b0d      	ldr	r3, [pc, #52]	; (4a84 <getBusDividerConfig+0x148>)
    4a50:	69db      	ldr	r3, [r3, #28]
    4a52:	091b      	lsrs	r3, r3, #4
    4a54:	f003 030f 	and.w	r3, r3, #15
    4a58:	1c59      	adds	r1, r3, #1
    4a5a:	4809      	ldr	r0, [pc, #36]	; (4a80 <getBusDividerConfig+0x144>)
    4a5c:	9a04      	ldr	r2, [sp, #16]
    4a5e:	4613      	mov	r3, r2
    4a60:	005b      	lsls	r3, r3, #1
    4a62:	4413      	add	r3, r2
    4a64:	009b      	lsls	r3, r3, #2
    4a66:	4403      	add	r3, r0
    4a68:	3304      	adds	r3, #4
    4a6a:	6019      	str	r1, [r3, #0]
                break;
    4a6c:	e002      	b.n	4a74 <getBusDividerConfig+0x138>
        }
    }
    4a6e:	bf00      	nop
    4a70:	e000      	b.n	4a74 <getBusDividerConfig+0x138>
                break;
    4a72:	bf00      	nop

    return ReturnValue;
    4a74:	9b05      	ldr	r3, [sp, #20]
}
    4a76:	4618      	mov	r0, r3
    4a78:	b006      	add	sp, #24
    4a7a:	4770      	bx	lr
    4a7c:	1fff8ba8 	.word	0x1fff8ba8
    4a80:	1fff8c98 	.word	0x1fff8c98
    4a84:	40064000 	.word	0x40064000

00004a88 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    4a88:	b086      	sub	sp, #24
    4a8a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4a8c:	2300      	movs	r3, #0
    4a8e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4a90:	2300      	movs	r3, #0
    4a92:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4a94:	9b01      	ldr	r3, [sp, #4]
    4a96:	2b27      	cmp	r3, #39	; 0x27
    4a98:	d00f      	beq.n	4aba <getSlowDividerConfig+0x32>
    4a9a:	9b01      	ldr	r3, [sp, #4]
    4a9c:	2b27      	cmp	r3, #39	; 0x27
    4a9e:	d80f      	bhi.n	4ac0 <getSlowDividerConfig+0x38>
    4aa0:	9b01      	ldr	r3, [sp, #4]
    4aa2:	2b25      	cmp	r3, #37	; 0x25
    4aa4:	d003      	beq.n	4aae <getSlowDividerConfig+0x26>
    4aa6:	9b01      	ldr	r3, [sp, #4]
    4aa8:	2b26      	cmp	r3, #38	; 0x26
    4aaa:	d003      	beq.n	4ab4 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4aac:	e008      	b.n	4ac0 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4aae:	2300      	movs	r3, #0
    4ab0:	9304      	str	r3, [sp, #16]
            break;
    4ab2:	e006      	b.n	4ac2 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4ab4:	2301      	movs	r3, #1
    4ab6:	9304      	str	r3, [sp, #16]
            break;
    4ab8:	e003      	b.n	4ac2 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4aba:	2302      	movs	r3, #2
    4abc:	9304      	str	r3, [sp, #16]
            break;
    4abe:	e000      	b.n	4ac2 <getSlowDividerConfig+0x3a>
                break;
    4ac0:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4ac2:	4b40      	ldr	r3, [pc, #256]	; (4bc4 <getSlowDividerConfig+0x13c>)
    4ac4:	681b      	ldr	r3, [r3, #0]
    4ac6:	2b00      	cmp	r3, #0
    4ac8:	d026      	beq.n	4b18 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4aca:	2300      	movs	r3, #0
    4acc:	9303      	str	r3, [sp, #12]
    4ace:	e01c      	b.n	4b0a <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4ad0:	4b3c      	ldr	r3, [pc, #240]	; (4bc4 <getSlowDividerConfig+0x13c>)
    4ad2:	6819      	ldr	r1, [r3, #0]
    4ad4:	9a03      	ldr	r2, [sp, #12]
    4ad6:	4613      	mov	r3, r2
    4ad8:	005b      	lsls	r3, r3, #1
    4ada:	4413      	add	r3, r2
    4adc:	009b      	lsls	r3, r3, #2
    4ade:	440b      	add	r3, r1
    4ae0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4ae4:	681b      	ldr	r3, [r3, #0]
    4ae6:	9a01      	ldr	r2, [sp, #4]
    4ae8:	429a      	cmp	r2, r3
    4aea:	d10b      	bne.n	4b04 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4aec:	4b35      	ldr	r3, [pc, #212]	; (4bc4 <getSlowDividerConfig+0x13c>)
    4aee:	6819      	ldr	r1, [r3, #0]
    4af0:	9a03      	ldr	r2, [sp, #12]
    4af2:	4613      	mov	r3, r2
    4af4:	005b      	lsls	r3, r3, #1
    4af6:	4413      	add	r3, r2
    4af8:	009b      	lsls	r3, r3, #2
    4afa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4afe:	440b      	add	r3, r1
    4b00:	9305      	str	r3, [sp, #20]
                break;
    4b02:	e009      	b.n	4b18 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4b04:	9b03      	ldr	r3, [sp, #12]
    4b06:	3301      	adds	r3, #1
    4b08:	9303      	str	r3, [sp, #12]
    4b0a:	4b2e      	ldr	r3, [pc, #184]	; (4bc4 <getSlowDividerConfig+0x13c>)
    4b0c:	681b      	ldr	r3, [r3, #0]
    4b0e:	7b1b      	ldrb	r3, [r3, #12]
    4b10:	461a      	mov	r2, r3
    4b12:	9b03      	ldr	r3, [sp, #12]
    4b14:	4293      	cmp	r3, r2
    4b16:	d3db      	bcc.n	4ad0 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4b18:	9b05      	ldr	r3, [sp, #20]
    4b1a:	2b00      	cmp	r3, #0
    4b1c:	d14a      	bne.n	4bb4 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    4b1e:	9a04      	ldr	r2, [sp, #16]
    4b20:	4613      	mov	r3, r2
    4b22:	005b      	lsls	r3, r3, #1
    4b24:	4413      	add	r3, r2
    4b26:	009b      	lsls	r3, r3, #2
    4b28:	4a27      	ldr	r2, [pc, #156]	; (4bc8 <getSlowDividerConfig+0x140>)
    4b2a:	4413      	add	r3, r2
    4b2c:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    4b2e:	4926      	ldr	r1, [pc, #152]	; (4bc8 <getSlowDividerConfig+0x140>)
    4b30:	9a04      	ldr	r2, [sp, #16]
    4b32:	4613      	mov	r3, r2
    4b34:	005b      	lsls	r3, r3, #1
    4b36:	4413      	add	r3, r2
    4b38:	009b      	lsls	r3, r3, #2
    4b3a:	440b      	add	r3, r1
    4b3c:	9a01      	ldr	r2, [sp, #4]
    4b3e:	601a      	str	r2, [r3, #0]
        switch(Name)
    4b40:	9b01      	ldr	r3, [sp, #4]
    4b42:	2b27      	cmp	r3, #39	; 0x27
    4b44:	d027      	beq.n	4b96 <getSlowDividerConfig+0x10e>
    4b46:	9b01      	ldr	r3, [sp, #4]
    4b48:	2b27      	cmp	r3, #39	; 0x27
    4b4a:	d835      	bhi.n	4bb8 <getSlowDividerConfig+0x130>
    4b4c:	9b01      	ldr	r3, [sp, #4]
    4b4e:	2b25      	cmp	r3, #37	; 0x25
    4b50:	d003      	beq.n	4b5a <getSlowDividerConfig+0xd2>
    4b52:	9b01      	ldr	r3, [sp, #4]
    4b54:	2b26      	cmp	r3, #38	; 0x26
    4b56:	d00f      	beq.n	4b78 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4b58:	e02e      	b.n	4bb8 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    4b5a:	4b1c      	ldr	r3, [pc, #112]	; (4bcc <getSlowDividerConfig+0x144>)
    4b5c:	695b      	ldr	r3, [r3, #20]
    4b5e:	f003 030f 	and.w	r3, r3, #15
    4b62:	1c59      	adds	r1, r3, #1
    4b64:	4818      	ldr	r0, [pc, #96]	; (4bc8 <getSlowDividerConfig+0x140>)
    4b66:	9a04      	ldr	r2, [sp, #16]
    4b68:	4613      	mov	r3, r2
    4b6a:	005b      	lsls	r3, r3, #1
    4b6c:	4413      	add	r3, r2
    4b6e:	009b      	lsls	r3, r3, #2
    4b70:	4403      	add	r3, r0
    4b72:	3304      	adds	r3, #4
    4b74:	6019      	str	r1, [r3, #0]
                break;
    4b76:	e020      	b.n	4bba <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    4b78:	4b14      	ldr	r3, [pc, #80]	; (4bcc <getSlowDividerConfig+0x144>)
    4b7a:	699b      	ldr	r3, [r3, #24]
    4b7c:	f003 030f 	and.w	r3, r3, #15
    4b80:	1c59      	adds	r1, r3, #1
    4b82:	4811      	ldr	r0, [pc, #68]	; (4bc8 <getSlowDividerConfig+0x140>)
    4b84:	9a04      	ldr	r2, [sp, #16]
    4b86:	4613      	mov	r3, r2
    4b88:	005b      	lsls	r3, r3, #1
    4b8a:	4413      	add	r3, r2
    4b8c:	009b      	lsls	r3, r3, #2
    4b8e:	4403      	add	r3, r0
    4b90:	3304      	adds	r3, #4
    4b92:	6019      	str	r1, [r3, #0]
                break;
    4b94:	e011      	b.n	4bba <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    4b96:	4b0d      	ldr	r3, [pc, #52]	; (4bcc <getSlowDividerConfig+0x144>)
    4b98:	69db      	ldr	r3, [r3, #28]
    4b9a:	f003 030f 	and.w	r3, r3, #15
    4b9e:	1c59      	adds	r1, r3, #1
    4ba0:	4809      	ldr	r0, [pc, #36]	; (4bc8 <getSlowDividerConfig+0x140>)
    4ba2:	9a04      	ldr	r2, [sp, #16]
    4ba4:	4613      	mov	r3, r2
    4ba6:	005b      	lsls	r3, r3, #1
    4ba8:	4413      	add	r3, r2
    4baa:	009b      	lsls	r3, r3, #2
    4bac:	4403      	add	r3, r0
    4bae:	3304      	adds	r3, #4
    4bb0:	6019      	str	r1, [r3, #0]
                break;
    4bb2:	e002      	b.n	4bba <getSlowDividerConfig+0x132>
        }
    }
    4bb4:	bf00      	nop
    4bb6:	e000      	b.n	4bba <getSlowDividerConfig+0x132>
                break;
    4bb8:	bf00      	nop

    return ReturnValue;
    4bba:	9b05      	ldr	r3, [sp, #20]
}
    4bbc:	4618      	mov	r0, r3
    4bbe:	b006      	add	sp, #24
    4bc0:	4770      	bx	lr
    4bc2:	bf00      	nop
    4bc4:	1fff8ba8 	.word	0x1fff8ba8
    4bc8:	1fff8cbc 	.word	0x1fff8cbc
    4bcc:	40064000 	.word	0x40064000

00004bd0 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    4bd0:	b500      	push	{lr}
    4bd2:	b083      	sub	sp, #12
    4bd4:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    4bd6:	4b64      	ldr	r3, [pc, #400]	; (4d68 <Clock_Ip_ClockInitializeObjects+0x198>)
    4bd8:	781b      	ldrb	r3, [r3, #0]
    4bda:	f083 0301 	eor.w	r3, r3, #1
    4bde:	b2db      	uxtb	r3, r3
    4be0:	2b00      	cmp	r3, #0
    4be2:	d05b      	beq.n	4c9c <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    4be4:	4b60      	ldr	r3, [pc, #384]	; (4d68 <Clock_Ip_ClockInitializeObjects+0x198>)
    4be6:	2201      	movs	r2, #1
    4be8:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    4bea:	4b60      	ldr	r3, [pc, #384]	; (4d6c <Clock_Ip_ClockInitializeObjects+0x19c>)
    4bec:	785b      	ldrb	r3, [r3, #1]
    4bee:	461a      	mov	r2, r3
    4bf0:	4613      	mov	r3, r2
    4bf2:	009b      	lsls	r3, r3, #2
    4bf4:	4413      	add	r3, r2
    4bf6:	009b      	lsls	r3, r3, #2
    4bf8:	4a5d      	ldr	r2, [pc, #372]	; (4d70 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    4bfa:	4413      	add	r3, r2
    4bfc:	4a5d      	ldr	r2, [pc, #372]	; (4d74 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    4bfe:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    4c00:	4b5d      	ldr	r3, [pc, #372]	; (4d78 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    4c02:	785b      	ldrb	r3, [r3, #1]
    4c04:	461a      	mov	r2, r3
    4c06:	4613      	mov	r3, r2
    4c08:	009b      	lsls	r3, r3, #2
    4c0a:	4413      	add	r3, r2
    4c0c:	009b      	lsls	r3, r3, #2
    4c0e:	4a5b      	ldr	r2, [pc, #364]	; (4d7c <Clock_Ip_ClockInitializeObjects+0x1ac>)
    4c10:	4413      	add	r3, r2
    4c12:	4a5b      	ldr	r2, [pc, #364]	; (4d80 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    4c14:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    4c16:	4b5b      	ldr	r3, [pc, #364]	; (4d84 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    4c18:	791b      	ldrb	r3, [r3, #4]
    4c1a:	461a      	mov	r2, r3
    4c1c:	4613      	mov	r3, r2
    4c1e:	005b      	lsls	r3, r3, #1
    4c20:	4413      	add	r3, r2
    4c22:	009b      	lsls	r3, r3, #2
    4c24:	4a58      	ldr	r2, [pc, #352]	; (4d88 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    4c26:	4413      	add	r3, r2
    4c28:	4a58      	ldr	r2, [pc, #352]	; (4d8c <Clock_Ip_ClockInitializeObjects+0x1bc>)
    4c2a:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    4c2c:	4b58      	ldr	r3, [pc, #352]	; (4d90 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4c2e:	795b      	ldrb	r3, [r3, #5]
    4c30:	00db      	lsls	r3, r3, #3
    4c32:	4a58      	ldr	r2, [pc, #352]	; (4d94 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    4c34:	4413      	add	r3, r2
    4c36:	4a58      	ldr	r2, [pc, #352]	; (4d98 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    4c38:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    4c3a:	4b55      	ldr	r3, [pc, #340]	; (4d90 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4c3c:	79db      	ldrb	r3, [r3, #7]
    4c3e:	00db      	lsls	r3, r3, #3
    4c40:	4a54      	ldr	r2, [pc, #336]	; (4d94 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    4c42:	4413      	add	r3, r2
    4c44:	4a55      	ldr	r2, [pc, #340]	; (4d9c <Clock_Ip_ClockInitializeObjects+0x1cc>)
    4c46:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    4c48:	4b55      	ldr	r3, [pc, #340]	; (4da0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4c4a:	799b      	ldrb	r3, [r3, #6]
    4c4c:	009b      	lsls	r3, r3, #2
    4c4e:	4a55      	ldr	r2, [pc, #340]	; (4da4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4c50:	4413      	add	r3, r2
    4c52:	4a55      	ldr	r2, [pc, #340]	; (4da8 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    4c54:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    4c56:	4b52      	ldr	r3, [pc, #328]	; (4da0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4c58:	7a1b      	ldrb	r3, [r3, #8]
    4c5a:	009b      	lsls	r3, r3, #2
    4c5c:	4a51      	ldr	r2, [pc, #324]	; (4da4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4c5e:	4413      	add	r3, r2
    4c60:	4a52      	ldr	r2, [pc, #328]	; (4dac <Clock_Ip_ClockInitializeObjects+0x1dc>)
    4c62:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    4c64:	4b4e      	ldr	r3, [pc, #312]	; (4da0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4c66:	7a5b      	ldrb	r3, [r3, #9]
    4c68:	009b      	lsls	r3, r3, #2
    4c6a:	4a4e      	ldr	r2, [pc, #312]	; (4da4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4c6c:	4413      	add	r3, r2
    4c6e:	4a50      	ldr	r2, [pc, #320]	; (4db0 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4c70:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    4c72:	4b4b      	ldr	r3, [pc, #300]	; (4da0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4c74:	7adb      	ldrb	r3, [r3, #11]
    4c76:	009b      	lsls	r3, r3, #2
    4c78:	4a4a      	ldr	r2, [pc, #296]	; (4da4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4c7a:	4413      	add	r3, r2
    4c7c:	4a4d      	ldr	r2, [pc, #308]	; (4db4 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    4c7e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    4c80:	4b47      	ldr	r3, [pc, #284]	; (4da0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4c82:	7b1b      	ldrb	r3, [r3, #12]
    4c84:	009b      	lsls	r3, r3, #2
    4c86:	4a47      	ldr	r2, [pc, #284]	; (4da4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4c88:	4413      	add	r3, r2
    4c8a:	4a4b      	ldr	r2, [pc, #300]	; (4db8 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    4c8c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    4c8e:	4b44      	ldr	r3, [pc, #272]	; (4da0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4c90:	7b9b      	ldrb	r3, [r3, #14]
    4c92:	009b      	lsls	r3, r3, #2
    4c94:	4a43      	ldr	r2, [pc, #268]	; (4da4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4c96:	4413      	add	r3, r2
    4c98:	4a48      	ldr	r2, [pc, #288]	; (4dbc <Clock_Ip_ClockInitializeObjects+0x1ec>)
    4c9a:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    4c9c:	4b48      	ldr	r3, [pc, #288]	; (4dc0 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    4c9e:	781b      	ldrb	r3, [r3, #0]
    4ca0:	2b00      	cmp	r3, #0
    4ca2:	d002      	beq.n	4caa <Clock_Ip_ClockInitializeObjects+0xda>
    4ca4:	9b01      	ldr	r3, [sp, #4]
    4ca6:	2b00      	cmp	r3, #0
    4ca8:	d003      	beq.n	4cb2 <Clock_Ip_ClockInitializeObjects+0xe2>
    4caa:	4b46      	ldr	r3, [pc, #280]	; (4dc4 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    4cac:	781b      	ldrb	r3, [r3, #0]
    4cae:	2b00      	cmp	r3, #0
    4cb0:	d056      	beq.n	4d60 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    4cb2:	f7ff fc09 	bl	44c8 <getFircConfig>
    4cb6:	4603      	mov	r3, r0
    4cb8:	4a43      	ldr	r2, [pc, #268]	; (4dc8 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    4cba:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    4cbc:	f7ff fc60 	bl	4580 <getSoscConfig>
    4cc0:	4603      	mov	r3, r0
    4cc2:	4a42      	ldr	r2, [pc, #264]	; (4dcc <Clock_Ip_ClockInitializeObjects+0x1fc>)
    4cc4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    4cc6:	f7ff fca7 	bl	4618 <getSpllConfig>
    4cca:	4603      	mov	r3, r0
    4ccc:	4a40      	ldr	r2, [pc, #256]	; (4dd0 <Clock_Ip_ClockInitializeObjects+0x200>)
    4cce:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    4cd0:	2019      	movs	r0, #25
    4cd2:	f7ff fcfb 	bl	46cc <getSelectorConfig>
    4cd6:	4603      	mov	r3, r0
    4cd8:	4a3e      	ldr	r2, [pc, #248]	; (4dd4 <Clock_Ip_ClockInitializeObjects+0x204>)
    4cda:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    4cdc:	201a      	movs	r0, #26
    4cde:	f7ff fcf5 	bl	46cc <getSelectorConfig>
    4ce2:	4603      	mov	r3, r0
    4ce4:	4a3c      	ldr	r2, [pc, #240]	; (4dd8 <Clock_Ip_ClockInitializeObjects+0x208>)
    4ce6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    4ce8:	201b      	movs	r0, #27
    4cea:	f7ff fcef 	bl	46cc <getSelectorConfig>
    4cee:	4603      	mov	r3, r0
    4cf0:	4a3a      	ldr	r2, [pc, #232]	; (4ddc <Clock_Ip_ClockInitializeObjects+0x20c>)
    4cf2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    4cf4:	201d      	movs	r0, #29
    4cf6:	f7ff fd7b 	bl	47f0 <getCoreDividerConfig>
    4cfa:	4603      	mov	r3, r0
    4cfc:	4a38      	ldr	r2, [pc, #224]	; (4de0 <Clock_Ip_ClockInitializeObjects+0x210>)
    4cfe:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    4d00:	201e      	movs	r0, #30
    4d02:	f7ff fd75 	bl	47f0 <getCoreDividerConfig>
    4d06:	4603      	mov	r3, r0
    4d08:	4a36      	ldr	r2, [pc, #216]	; (4de4 <Clock_Ip_ClockInitializeObjects+0x214>)
    4d0a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    4d0c:	201f      	movs	r0, #31
    4d0e:	f7ff fd6f 	bl	47f0 <getCoreDividerConfig>
    4d12:	4603      	mov	r3, r0
    4d14:	4a34      	ldr	r2, [pc, #208]	; (4de8 <Clock_Ip_ClockInitializeObjects+0x218>)
    4d16:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    4d18:	2021      	movs	r0, #33	; 0x21
    4d1a:	f7ff fe0f 	bl	493c <getBusDividerConfig>
    4d1e:	4603      	mov	r3, r0
    4d20:	4a32      	ldr	r2, [pc, #200]	; (4dec <Clock_Ip_ClockInitializeObjects+0x21c>)
    4d22:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    4d24:	2022      	movs	r0, #34	; 0x22
    4d26:	f7ff fe09 	bl	493c <getBusDividerConfig>
    4d2a:	4603      	mov	r3, r0
    4d2c:	4a30      	ldr	r2, [pc, #192]	; (4df0 <Clock_Ip_ClockInitializeObjects+0x220>)
    4d2e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    4d30:	2023      	movs	r0, #35	; 0x23
    4d32:	f7ff fe03 	bl	493c <getBusDividerConfig>
    4d36:	4603      	mov	r3, r0
    4d38:	4a2e      	ldr	r2, [pc, #184]	; (4df4 <Clock_Ip_ClockInitializeObjects+0x224>)
    4d3a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    4d3c:	2025      	movs	r0, #37	; 0x25
    4d3e:	f7ff fea3 	bl	4a88 <getSlowDividerConfig>
    4d42:	4603      	mov	r3, r0
    4d44:	4a2c      	ldr	r2, [pc, #176]	; (4df8 <Clock_Ip_ClockInitializeObjects+0x228>)
    4d46:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    4d48:	2026      	movs	r0, #38	; 0x26
    4d4a:	f7ff fe9d 	bl	4a88 <getSlowDividerConfig>
    4d4e:	4603      	mov	r3, r0
    4d50:	4a2a      	ldr	r2, [pc, #168]	; (4dfc <Clock_Ip_ClockInitializeObjects+0x22c>)
    4d52:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    4d54:	2027      	movs	r0, #39	; 0x27
    4d56:	f7ff fe97 	bl	4a88 <getSlowDividerConfig>
    4d5a:	4603      	mov	r3, r0
    4d5c:	4a28      	ldr	r2, [pc, #160]	; (4e00 <Clock_Ip_ClockInitializeObjects+0x230>)
    4d5e:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    4d60:	bf00      	nop
    4d62:	b003      	add	sp, #12
    4d64:	f85d fb04 	ldr.w	pc, [sp], #4
    4d68:	1fff8ce0 	.word	0x1fff8ce0
    4d6c:	00007c3c 	.word	0x00007c3c
    4d70:	00008288 	.word	0x00008288
    4d74:	1fff8bac 	.word	0x1fff8bac
    4d78:	00007bfc 	.word	0x00007bfc
    4d7c:	000081d0 	.word	0x000081d0
    4d80:	1fff8bb0 	.word	0x1fff8bb0
    4d84:	00007c0c 	.word	0x00007c0c
    4d88:	0000823c 	.word	0x0000823c
    4d8c:	1fff8bb4 	.word	0x1fff8bb4
    4d90:	00007c4c 	.word	0x00007c4c
    4d94:	000082b4 	.word	0x000082b4
    4d98:	1fff8bb8 	.word	0x1fff8bb8
    4d9c:	1fff8bf4 	.word	0x1fff8bf4
    4da0:	00007bdc 	.word	0x00007bdc
    4da4:	0000818c 	.word	0x0000818c
    4da8:	1fff8bbc 	.word	0x1fff8bbc
    4dac:	1fff8bf8 	.word	0x1fff8bf8
    4db0:	1fff8bc0 	.word	0x1fff8bc0
    4db4:	1fff8bfc 	.word	0x1fff8bfc
    4db8:	1fff8bc4 	.word	0x1fff8bc4
    4dbc:	1fff8c00 	.word	0x1fff8c00
    4dc0:	1fff8b19 	.word	0x1fff8b19
    4dc4:	1fff8b10 	.word	0x1fff8b10
    4dc8:	1fff8bc8 	.word	0x1fff8bc8
    4dcc:	1fff8bcc 	.word	0x1fff8bcc
    4dd0:	1fff8bd0 	.word	0x1fff8bd0
    4dd4:	1fff8bd4 	.word	0x1fff8bd4
    4dd8:	1fff8bd8 	.word	0x1fff8bd8
    4ddc:	1fff8c04 	.word	0x1fff8c04
    4de0:	1fff8bdc 	.word	0x1fff8bdc
    4de4:	1fff8be0 	.word	0x1fff8be0
    4de8:	1fff8c08 	.word	0x1fff8c08
    4dec:	1fff8be4 	.word	0x1fff8be4
    4df0:	1fff8be8 	.word	0x1fff8be8
    4df4:	1fff8c0c 	.word	0x1fff8c0c
    4df8:	1fff8bec 	.word	0x1fff8bec
    4dfc:	1fff8bf0 	.word	0x1fff8bf0
    4e00:	1fff8c10 	.word	0x1fff8c10

00004e04 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    4e04:	b500      	push	{lr}
    4e06:	b083      	sub	sp, #12
    4e08:	9001      	str	r0, [sp, #4]
    4e0a:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    4e0c:	9b01      	ldr	r3, [sp, #4]
    4e0e:	2b03      	cmp	r3, #3
    4e10:	f000 8090 	beq.w	4f34 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    4e14:	9b01      	ldr	r3, [sp, #4]
    4e16:	2b03      	cmp	r3, #3
    4e18:	f200 80d3 	bhi.w	4fc2 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    4e1c:	9b01      	ldr	r3, [sp, #4]
    4e1e:	2b00      	cmp	r3, #0
    4e20:	d040      	beq.n	4ea4 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    4e22:	9b01      	ldr	r3, [sp, #4]
    4e24:	3b01      	subs	r3, #1
    4e26:	2b01      	cmp	r3, #1
    4e28:	f200 80cb 	bhi.w	4fc2 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    4e2c:	9b00      	ldr	r3, [sp, #0]
    4e2e:	2b00      	cmp	r3, #0
    4e30:	f040 80c9 	bne.w	4fc6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    4e34:	4b68      	ldr	r3, [pc, #416]	; (4fd8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4e36:	2200      	movs	r2, #0
    4e38:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    4e3a:	4b68      	ldr	r3, [pc, #416]	; (4fdc <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4e3c:	681b      	ldr	r3, [r3, #0]
    4e3e:	685b      	ldr	r3, [r3, #4]
    4e40:	4a67      	ldr	r2, [pc, #412]	; (4fe0 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    4e42:	6812      	ldr	r2, [r2, #0]
    4e44:	4610      	mov	r0, r2
    4e46:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    4e48:	4b66      	ldr	r3, [pc, #408]	; (4fe4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4e4a:	681b      	ldr	r3, [r3, #0]
    4e4c:	681b      	ldr	r3, [r3, #0]
    4e4e:	4a66      	ldr	r2, [pc, #408]	; (4fe8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    4e50:	6812      	ldr	r2, [r2, #0]
    4e52:	4610      	mov	r0, r2
    4e54:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    4e56:	4b65      	ldr	r3, [pc, #404]	; (4fec <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4e58:	681b      	ldr	r3, [r3, #0]
    4e5a:	681b      	ldr	r3, [r3, #0]
    4e5c:	4a64      	ldr	r2, [pc, #400]	; (4ff0 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    4e5e:	6812      	ldr	r2, [r2, #0]
    4e60:	4610      	mov	r0, r2
    4e62:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    4e64:	4b63      	ldr	r3, [pc, #396]	; (4ff4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4e66:	681b      	ldr	r3, [r3, #0]
    4e68:	681b      	ldr	r3, [r3, #0]
    4e6a:	4a63      	ldr	r2, [pc, #396]	; (4ff8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    4e6c:	6812      	ldr	r2, [r2, #0]
    4e6e:	4610      	mov	r0, r2
    4e70:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    4e72:	4b62      	ldr	r3, [pc, #392]	; (4ffc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4e74:	681b      	ldr	r3, [r3, #0]
    4e76:	691b      	ldr	r3, [r3, #16]
    4e78:	4a61      	ldr	r2, [pc, #388]	; (5000 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4e7a:	6812      	ldr	r2, [r2, #0]
    4e7c:	6812      	ldr	r2, [r2, #0]
    4e7e:	4610      	mov	r0, r2
    4e80:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    4e82:	4b60      	ldr	r3, [pc, #384]	; (5004 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4e84:	681b      	ldr	r3, [r3, #0]
    4e86:	68db      	ldr	r3, [r3, #12]
    4e88:	4a5f      	ldr	r2, [pc, #380]	; (5008 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4e8a:	6812      	ldr	r2, [r2, #0]
    4e8c:	6812      	ldr	r2, [r2, #0]
    4e8e:	4610      	mov	r0, r2
    4e90:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    4e92:	4b5e      	ldr	r3, [pc, #376]	; (500c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4e94:	681b      	ldr	r3, [r3, #0]
    4e96:	689b      	ldr	r3, [r3, #8]
    4e98:	4a5d      	ldr	r2, [pc, #372]	; (5010 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4e9a:	6812      	ldr	r2, [r2, #0]
    4e9c:	6812      	ldr	r2, [r2, #0]
    4e9e:	4610      	mov	r0, r2
    4ea0:	4798      	blx	r3
            }
        }
        break;
    4ea2:	e090      	b.n	4fc6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4ea4:	9b00      	ldr	r3, [sp, #0]
    4ea6:	2b02      	cmp	r3, #2
    4ea8:	f040 808f 	bne.w	4fca <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4eac:	4b4a      	ldr	r3, [pc, #296]	; (4fd8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4eae:	2201      	movs	r2, #1
    4eb0:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4eb2:	4b56      	ldr	r3, [pc, #344]	; (500c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4eb4:	681b      	ldr	r3, [r3, #0]
    4eb6:	685b      	ldr	r3, [r3, #4]
    4eb8:	4a55      	ldr	r2, [pc, #340]	; (5010 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4eba:	6812      	ldr	r2, [r2, #0]
    4ebc:	4610      	mov	r0, r2
    4ebe:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4ec0:	4b50      	ldr	r3, [pc, #320]	; (5004 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4ec2:	681b      	ldr	r3, [r3, #0]
    4ec4:	691b      	ldr	r3, [r3, #16]
    4ec6:	4a50      	ldr	r2, [pc, #320]	; (5008 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4ec8:	6812      	ldr	r2, [r2, #0]
    4eca:	4610      	mov	r0, r2
    4ecc:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4ece:	4b4d      	ldr	r3, [pc, #308]	; (5004 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4ed0:	681b      	ldr	r3, [r3, #0]
    4ed2:	689b      	ldr	r3, [r3, #8]
    4ed4:	4a4c      	ldr	r2, [pc, #304]	; (5008 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4ed6:	6812      	ldr	r2, [r2, #0]
    4ed8:	4610      	mov	r0, r2
    4eda:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4edc:	4b47      	ldr	r3, [pc, #284]	; (4ffc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4ede:	681b      	ldr	r3, [r3, #0]
    4ee0:	68db      	ldr	r3, [r3, #12]
    4ee2:	4a47      	ldr	r2, [pc, #284]	; (5000 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4ee4:	6812      	ldr	r2, [r2, #0]
    4ee6:	4610      	mov	r0, r2
    4ee8:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4eea:	4b44      	ldr	r3, [pc, #272]	; (4ffc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4eec:	681b      	ldr	r3, [r3, #0]
    4eee:	689b      	ldr	r3, [r3, #8]
    4ef0:	4a43      	ldr	r2, [pc, #268]	; (5000 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4ef2:	6812      	ldr	r2, [r2, #0]
    4ef4:	6812      	ldr	r2, [r2, #0]
    4ef6:	4610      	mov	r0, r2
    4ef8:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    4efa:	4b38      	ldr	r3, [pc, #224]	; (4fdc <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4efc:	681b      	ldr	r3, [r3, #0]
    4efe:	685b      	ldr	r3, [r3, #4]
    4f00:	4a44      	ldr	r2, [pc, #272]	; (5014 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    4f02:	6812      	ldr	r2, [r2, #0]
    4f04:	4610      	mov	r0, r2
    4f06:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    4f08:	4b36      	ldr	r3, [pc, #216]	; (4fe4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4f0a:	681b      	ldr	r3, [r3, #0]
    4f0c:	681b      	ldr	r3, [r3, #0]
    4f0e:	4a42      	ldr	r2, [pc, #264]	; (5018 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    4f10:	6812      	ldr	r2, [r2, #0]
    4f12:	4610      	mov	r0, r2
    4f14:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    4f16:	4b35      	ldr	r3, [pc, #212]	; (4fec <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4f18:	681b      	ldr	r3, [r3, #0]
    4f1a:	681b      	ldr	r3, [r3, #0]
    4f1c:	4a3f      	ldr	r2, [pc, #252]	; (501c <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    4f1e:	6812      	ldr	r2, [r2, #0]
    4f20:	4610      	mov	r0, r2
    4f22:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    4f24:	4b33      	ldr	r3, [pc, #204]	; (4ff4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4f26:	681b      	ldr	r3, [r3, #0]
    4f28:	681b      	ldr	r3, [r3, #0]
    4f2a:	4a3d      	ldr	r2, [pc, #244]	; (5020 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    4f2c:	6812      	ldr	r2, [r2, #0]
    4f2e:	4610      	mov	r0, r2
    4f30:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4f32:	e04a      	b.n	4fca <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4f34:	9b00      	ldr	r3, [sp, #0]
    4f36:	2b02      	cmp	r3, #2
    4f38:	d149      	bne.n	4fce <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4f3a:	4b27      	ldr	r3, [pc, #156]	; (4fd8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4f3c:	2201      	movs	r2, #1
    4f3e:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4f40:	4b32      	ldr	r3, [pc, #200]	; (500c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4f42:	681b      	ldr	r3, [r3, #0]
    4f44:	685b      	ldr	r3, [r3, #4]
    4f46:	4a32      	ldr	r2, [pc, #200]	; (5010 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4f48:	6812      	ldr	r2, [r2, #0]
    4f4a:	4610      	mov	r0, r2
    4f4c:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4f4e:	4b2d      	ldr	r3, [pc, #180]	; (5004 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4f50:	681b      	ldr	r3, [r3, #0]
    4f52:	691b      	ldr	r3, [r3, #16]
    4f54:	4a2c      	ldr	r2, [pc, #176]	; (5008 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4f56:	6812      	ldr	r2, [r2, #0]
    4f58:	4610      	mov	r0, r2
    4f5a:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4f5c:	4b29      	ldr	r3, [pc, #164]	; (5004 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4f5e:	681b      	ldr	r3, [r3, #0]
    4f60:	689b      	ldr	r3, [r3, #8]
    4f62:	4a29      	ldr	r2, [pc, #164]	; (5008 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4f64:	6812      	ldr	r2, [r2, #0]
    4f66:	4610      	mov	r0, r2
    4f68:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4f6a:	4b24      	ldr	r3, [pc, #144]	; (4ffc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4f6c:	681b      	ldr	r3, [r3, #0]
    4f6e:	68db      	ldr	r3, [r3, #12]
    4f70:	4a23      	ldr	r2, [pc, #140]	; (5000 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4f72:	6812      	ldr	r2, [r2, #0]
    4f74:	4610      	mov	r0, r2
    4f76:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4f78:	4b20      	ldr	r3, [pc, #128]	; (4ffc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4f7a:	681b      	ldr	r3, [r3, #0]
    4f7c:	689b      	ldr	r3, [r3, #8]
    4f7e:	4a20      	ldr	r2, [pc, #128]	; (5000 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4f80:	6812      	ldr	r2, [r2, #0]
    4f82:	6812      	ldr	r2, [r2, #0]
    4f84:	4610      	mov	r0, r2
    4f86:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    4f88:	4b26      	ldr	r3, [pc, #152]	; (5024 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    4f8a:	681b      	ldr	r3, [r3, #0]
    4f8c:	685b      	ldr	r3, [r3, #4]
    4f8e:	4a26      	ldr	r2, [pc, #152]	; (5028 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4f90:	6812      	ldr	r2, [r2, #0]
    4f92:	4610      	mov	r0, r2
    4f94:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    4f96:	4b25      	ldr	r3, [pc, #148]	; (502c <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    4f98:	681b      	ldr	r3, [r3, #0]
    4f9a:	681b      	ldr	r3, [r3, #0]
    4f9c:	4a24      	ldr	r2, [pc, #144]	; (5030 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4f9e:	6812      	ldr	r2, [r2, #0]
    4fa0:	4610      	mov	r0, r2
    4fa2:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    4fa4:	4b23      	ldr	r3, [pc, #140]	; (5034 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    4fa6:	681b      	ldr	r3, [r3, #0]
    4fa8:	681b      	ldr	r3, [r3, #0]
    4faa:	4a23      	ldr	r2, [pc, #140]	; (5038 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4fac:	6812      	ldr	r2, [r2, #0]
    4fae:	4610      	mov	r0, r2
    4fb0:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    4fb2:	4b22      	ldr	r3, [pc, #136]	; (503c <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    4fb4:	681b      	ldr	r3, [r3, #0]
    4fb6:	681b      	ldr	r3, [r3, #0]
    4fb8:	4a21      	ldr	r2, [pc, #132]	; (5040 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    4fba:	6812      	ldr	r2, [r2, #0]
    4fbc:	4610      	mov	r0, r2
    4fbe:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4fc0:	e005      	b.n	4fce <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    4fc2:	bf00      	nop
    4fc4:	e004      	b.n	4fd0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4fc6:	bf00      	nop
    4fc8:	e002      	b.n	4fd0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4fca:	bf00      	nop
    4fcc:	e000      	b.n	4fd0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4fce:	bf00      	nop
    }

}
    4fd0:	bf00      	nop
    4fd2:	b003      	add	sp, #12
    4fd4:	f85d fb04 	ldr.w	pc, [sp], #4
    4fd8:	1fff8b19 	.word	0x1fff8b19
    4fdc:	1fff8bb8 	.word	0x1fff8bb8
    4fe0:	1fff8bd8 	.word	0x1fff8bd8
    4fe4:	1fff8bbc 	.word	0x1fff8bbc
    4fe8:	1fff8be0 	.word	0x1fff8be0
    4fec:	1fff8bc0 	.word	0x1fff8bc0
    4ff0:	1fff8be8 	.word	0x1fff8be8
    4ff4:	1fff8bc4 	.word	0x1fff8bc4
    4ff8:	1fff8bf0 	.word	0x1fff8bf0
    4ffc:	1fff8bac 	.word	0x1fff8bac
    5000:	1fff8bd0 	.word	0x1fff8bd0
    5004:	1fff8bb0 	.word	0x1fff8bb0
    5008:	1fff8bcc 	.word	0x1fff8bcc
    500c:	1fff8bb4 	.word	0x1fff8bb4
    5010:	1fff8bc8 	.word	0x1fff8bc8
    5014:	1fff8bd4 	.word	0x1fff8bd4
    5018:	1fff8bdc 	.word	0x1fff8bdc
    501c:	1fff8be4 	.word	0x1fff8be4
    5020:	1fff8bec 	.word	0x1fff8bec
    5024:	1fff8bf4 	.word	0x1fff8bf4
    5028:	1fff8c04 	.word	0x1fff8c04
    502c:	1fff8bf8 	.word	0x1fff8bf8
    5030:	1fff8c08 	.word	0x1fff8c08
    5034:	1fff8bfc 	.word	0x1fff8bfc
    5038:	1fff8c0c 	.word	0x1fff8c0c
    503c:	1fff8c00 	.word	0x1fff8c00
    5040:	1fff8c10 	.word	0x1fff8c10

00005044 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    5044:	b500      	push	{lr}
    5046:	b083      	sub	sp, #12
    5048:	9001      	str	r0, [sp, #4]
    504a:	9100      	str	r1, [sp, #0]
    switch(Command)
    504c:	9b00      	ldr	r3, [sp, #0]
    504e:	2b04      	cmp	r3, #4
    5050:	d010      	beq.n	5074 <Clock_Ip_Command+0x30>
    5052:	9b00      	ldr	r3, [sp, #0]
    5054:	2b04      	cmp	r3, #4
    5056:	d811      	bhi.n	507c <Clock_Ip_Command+0x38>
    5058:	9b00      	ldr	r3, [sp, #0]
    505a:	2b01      	cmp	r3, #1
    505c:	d006      	beq.n	506c <Clock_Ip_Command+0x28>
    505e:	9b00      	ldr	r3, [sp, #0]
    5060:	2b02      	cmp	r3, #2
    5062:	d10b      	bne.n	507c <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    5064:	9801      	ldr	r0, [sp, #4]
    5066:	f7ff fdb3 	bl	4bd0 <Clock_Ip_ClockInitializeObjects>
            break;
    506a:	e008      	b.n	507e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    506c:	9801      	ldr	r0, [sp, #4]
    506e:	f7ff f9db 	bl	4428 <Clock_Ip_SpecificPlatformInitClock>
            break;
    5072:	e004      	b.n	507e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5074:	9801      	ldr	r0, [sp, #4]
    5076:	f7ff f8ed 	bl	4254 <DisableSafeClock>
            break;
    507a:	e000      	b.n	507e <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    507c:	bf00      	nop
    }
}
    507e:	bf00      	nop
    5080:	b003      	add	sp, #12
    5082:	f85d fb04 	ldr.w	pc, [sp], #4
    5086:	bf00      	nop

00005088 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5088:	b500      	push	{lr}
    508a:	b085      	sub	sp, #20
    508c:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    508e:	4a20      	ldr	r2, [pc, #128]	; (5110 <Mcu_Init+0x88>)
    5090:	9b01      	ldr	r3, [sp, #4]
    5092:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5094:	2300      	movs	r3, #0
    5096:	9303      	str	r3, [sp, #12]
    5098:	e010      	b.n	50bc <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    509a:	4b1d      	ldr	r3, [pc, #116]	; (5110 <Mcu_Init+0x88>)
    509c:	681b      	ldr	r3, [r3, #0]
    509e:	6919      	ldr	r1, [r3, #16]
    50a0:	9a03      	ldr	r2, [sp, #12]
    50a2:	4613      	mov	r3, r2
    50a4:	005b      	lsls	r3, r3, #1
    50a6:	4413      	add	r3, r2
    50a8:	009b      	lsls	r3, r3, #2
    50aa:	440b      	add	r3, r1
    50ac:	681b      	ldr	r3, [r3, #0]
    50ae:	9a03      	ldr	r2, [sp, #12]
    50b0:	b2d1      	uxtb	r1, r2
    50b2:	4a18      	ldr	r2, [pc, #96]	; (5114 <Mcu_Init+0x8c>)
    50b4:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    50b6:	9b03      	ldr	r3, [sp, #12]
    50b8:	3301      	adds	r3, #1
    50ba:	9303      	str	r3, [sp, #12]
    50bc:	4b14      	ldr	r3, [pc, #80]	; (5110 <Mcu_Init+0x88>)
    50be:	681b      	ldr	r3, [r3, #0]
    50c0:	689b      	ldr	r3, [r3, #8]
    50c2:	9a03      	ldr	r2, [sp, #12]
    50c4:	429a      	cmp	r2, r3
    50c6:	d3e8      	bcc.n	509a <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    50c8:	2300      	movs	r3, #0
    50ca:	9303      	str	r3, [sp, #12]
    50cc:	e010      	b.n	50f0 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    50ce:	4b10      	ldr	r3, [pc, #64]	; (5110 <Mcu_Init+0x88>)
    50d0:	681b      	ldr	r3, [r3, #0]
    50d2:	6959      	ldr	r1, [r3, #20]
    50d4:	9a03      	ldr	r2, [sp, #12]
    50d6:	4613      	mov	r3, r2
    50d8:	01db      	lsls	r3, r3, #7
    50da:	1a9b      	subs	r3, r3, r2
    50dc:	00db      	lsls	r3, r3, #3
    50de:	440b      	add	r3, r1
    50e0:	681b      	ldr	r3, [r3, #0]
    50e2:	9a03      	ldr	r2, [sp, #12]
    50e4:	b2d1      	uxtb	r1, r2
    50e6:	4a0c      	ldr	r2, [pc, #48]	; (5118 <Mcu_Init+0x90>)
    50e8:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    50ea:	9b03      	ldr	r3, [sp, #12]
    50ec:	3301      	adds	r3, #1
    50ee:	9303      	str	r3, [sp, #12]
    50f0:	4b07      	ldr	r3, [pc, #28]	; (5110 <Mcu_Init+0x88>)
    50f2:	681b      	ldr	r3, [r3, #0]
    50f4:	68db      	ldr	r3, [r3, #12]
    50f6:	9a03      	ldr	r2, [sp, #12]
    50f8:	429a      	cmp	r2, r3
    50fa:	d3e8      	bcc.n	50ce <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    50fc:	4b04      	ldr	r3, [pc, #16]	; (5110 <Mcu_Init+0x88>)
    50fe:	681b      	ldr	r3, [r3, #0]
    5100:	699b      	ldr	r3, [r3, #24]
    5102:	4618      	mov	r0, r3
    5104:	f000 f88a 	bl	521c <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5108:	bf00      	nop
    510a:	b005      	add	sp, #20
    510c:	f85d fb04 	ldr.w	pc, [sp], #4
    5110:	1fff8cec 	.word	0x1fff8cec
    5114:	1fff8ce8 	.word	0x1fff8ce8
    5118:	1fff8ce4 	.word	0x1fff8ce4

0000511c <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    511c:	b084      	sub	sp, #16
    511e:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5120:	2301      	movs	r3, #1
    5122:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5126:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    512a:	4618      	mov	r0, r3
    512c:	b004      	add	sp, #16
    512e:	4770      	bx	lr

00005130 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5130:	b500      	push	{lr}
    5132:	b085      	sub	sp, #20
    5134:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5136:	4a0e      	ldr	r2, [pc, #56]	; (5170 <Mcu_InitClock+0x40>)
    5138:	9b01      	ldr	r3, [sp, #4]
    513a:	4413      	add	r3, r2
    513c:	781b      	ldrb	r3, [r3, #0]
    513e:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    5142:	4b0c      	ldr	r3, [pc, #48]	; (5174 <Mcu_InitClock+0x44>)
    5144:	681b      	ldr	r3, [r3, #0]
    5146:	6959      	ldr	r1, [r3, #20]
    5148:	f89d 200f 	ldrb.w	r2, [sp, #15]
    514c:	4613      	mov	r3, r2
    514e:	01db      	lsls	r3, r3, #7
    5150:	1a9b      	subs	r3, r3, r2
    5152:	00db      	lsls	r3, r3, #3
    5154:	440b      	add	r3, r1
    5156:	4618      	mov	r0, r3
    5158:	f000 f86a 	bl	5230 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    515c:	2300      	movs	r3, #0
    515e:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    5162:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    5166:	4618      	mov	r0, r3
    5168:	b005      	add	sp, #20
    516a:	f85d fb04 	ldr.w	pc, [sp], #4
    516e:	bf00      	nop
    5170:	1fff8ce4 	.word	0x1fff8ce4
    5174:	1fff8cec 	.word	0x1fff8cec

00005178 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5178:	b500      	push	{lr}
    517a:	b085      	sub	sp, #20
    517c:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    517e:	4a0d      	ldr	r2, [pc, #52]	; (51b4 <Mcu_SetMode+0x3c>)
    5180:	9b01      	ldr	r3, [sp, #4]
    5182:	4413      	add	r3, r2
    5184:	781b      	ldrb	r3, [r3, #0]
    5186:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    518a:	f001 fb27 	bl	67dc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    518e:	4b0a      	ldr	r3, [pc, #40]	; (51b8 <Mcu_SetMode+0x40>)
    5190:	681b      	ldr	r3, [r3, #0]
    5192:	6919      	ldr	r1, [r3, #16]
    5194:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5198:	4613      	mov	r3, r2
    519a:	005b      	lsls	r3, r3, #1
    519c:	4413      	add	r3, r2
    519e:	009b      	lsls	r3, r3, #2
    51a0:	440b      	add	r3, r1
    51a2:	4618      	mov	r0, r3
    51a4:	f000 f84e 	bl	5244 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    51a8:	f001 fb44 	bl	6834 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    51ac:	bf00      	nop
    51ae:	b005      	add	sp, #20
    51b0:	f85d fb04 	ldr.w	pc, [sp], #4
    51b4:	1fff8ce8 	.word	0x1fff8ce8
    51b8:	1fff8cec 	.word	0x1fff8cec

000051bc <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    51bc:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    51be:	2302      	movs	r3, #2
    51c0:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    51c2:	9b01      	ldr	r3, [sp, #4]
}
    51c4:	4618      	mov	r0, r3
    51c6:	b002      	add	sp, #8
    51c8:	4770      	bx	lr

000051ca <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    51ca:	b500      	push	{lr}
    51cc:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    51ce:	f000 f843 	bl	5258 <Mcu_Ipw_GetResetReason>
    51d2:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    51d4:	9b01      	ldr	r3, [sp, #4]
}
    51d6:	4618      	mov	r0, r3
    51d8:	b003      	add	sp, #12
    51da:	f85d fb04 	ldr.w	pc, [sp], #4

000051de <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    51de:	b500      	push	{lr}
    51e0:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    51e2:	f000 f83f 	bl	5264 <Mcu_Ipw_GetResetRawValue>
    51e6:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    51e8:	9b01      	ldr	r3, [sp, #4]
}
    51ea:	4618      	mov	r0, r3
    51ec:	b003      	add	sp, #12
    51ee:	f85d fb04 	ldr.w	pc, [sp], #4

000051f2 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    51f2:	b500      	push	{lr}
    51f4:	b083      	sub	sp, #12
    51f6:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    51f8:	9801      	ldr	r0, [sp, #4]
    51fa:	f000 f839 	bl	5270 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    51fe:	bf00      	nop
    5200:	b003      	add	sp, #12
    5202:	f85d fb04 	ldr.w	pc, [sp], #4

00005206 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5206:	b082      	sub	sp, #8
    5208:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    520a:	4b03      	ldr	r3, [pc, #12]	; (5218 <Mcu_ClkSrcFailureNotification+0x12>)
    520c:	681b      	ldr	r3, [r3, #0]
    520e:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5210:	bf00      	nop
    5212:	b002      	add	sp, #8
    5214:	4770      	bx	lr
    5216:	bf00      	nop
    5218:	1fff8cec 	.word	0x1fff8cec

0000521c <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    521c:	b500      	push	{lr}
    521e:	b083      	sub	sp, #12
    5220:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5222:	9801      	ldr	r0, [sp, #4]
    5224:	f000 f882 	bl	532c <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5228:	bf00      	nop
    522a:	b003      	add	sp, #12
    522c:	f85d fb04 	ldr.w	pc, [sp], #4

00005230 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5230:	b500      	push	{lr}
    5232:	b083      	sub	sp, #12
    5234:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5236:	9801      	ldr	r0, [sp, #4]
    5238:	f7fc fc6a 	bl	1b10 <Clock_Ip_InitClock>
}
    523c:	bf00      	nop
    523e:	b003      	add	sp, #12
    5240:	f85d fb04 	ldr.w	pc, [sp], #4

00005244 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5244:	b500      	push	{lr}
    5246:	b083      	sub	sp, #12
    5248:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    524a:	9801      	ldr	r0, [sp, #4]
    524c:	f000 f820 	bl	5290 <Power_Ip_SetMode>
}
    5250:	bf00      	nop
    5252:	b003      	add	sp, #12
    5254:	f85d fb04 	ldr.w	pc, [sp], #4

00005258 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5258:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    525a:	f000 f84f 	bl	52fc <Power_Ip_GetResetReason>
    525e:	4603      	mov	r3, r0
}
    5260:	4618      	mov	r0, r3
    5262:	bd08      	pop	{r3, pc}

00005264 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5264:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5266:	f000 f857 	bl	5318 <Power_Ip_GetResetRawValue>
    526a:	4603      	mov	r3, r0
}
    526c:	4618      	mov	r0, r3
    526e:	bd08      	pop	{r3, pc}

00005270 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5270:	b500      	push	{lr}
    5272:	b083      	sub	sp, #12
    5274:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5276:	9b01      	ldr	r3, [sp, #4]
    5278:	2b00      	cmp	r3, #0
    527a:	d102      	bne.n	5282 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    527c:	f000 f86c 	bl	5358 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5280:	e001      	b.n	5286 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    5282:	f000 f86e 	bl	5362 <Power_Ip_EnableSleepOnExit>
}
    5286:	bf00      	nop
    5288:	b003      	add	sp, #12
    528a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005290 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5290:	b500      	push	{lr}
    5292:	b085      	sub	sp, #20
    5294:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5296:	9b01      	ldr	r3, [sp, #4]
    5298:	685b      	ldr	r3, [r3, #4]
    529a:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    529c:	9802      	ldr	r0, [sp, #8]
    529e:	f000 f9f5 	bl	568c <Power_Ip_SMC_ModeCheckEntry>
    52a2:	4603      	mov	r3, r0
    52a4:	2b00      	cmp	r3, #0
    52a6:	d002      	beq.n	52ae <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    52a8:	2301      	movs	r3, #1
    52aa:	9303      	str	r3, [sp, #12]
    52ac:	e003      	b.n	52b6 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    52ae:	9801      	ldr	r0, [sp, #4]
    52b0:	f000 fa1e 	bl	56f0 <Power_Ip_SMC_ModeConfig>
    52b4:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    52b6:	9b03      	ldr	r3, [sp, #12]
    52b8:	2b01      	cmp	r3, #1
    52ba:	d103      	bne.n	52c4 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    52bc:	21ff      	movs	r1, #255	; 0xff
    52be:	2003      	movs	r0, #3
    52c0:	f000 f8f4 	bl	54ac <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    52c4:	bf00      	nop
    52c6:	b005      	add	sp, #20
    52c8:	f85d fb04 	ldr.w	pc, [sp], #4

000052cc <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    52cc:	b084      	sub	sp, #16
    52ce:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    52d0:	230c      	movs	r3, #12
    52d2:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    52d4:	4a08      	ldr	r2, [pc, #32]	; (52f8 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    52d6:	9b01      	ldr	r3, [sp, #4]
    52d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    52dc:	2b0e      	cmp	r3, #14
    52de:	d805      	bhi.n	52ec <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    52e0:	4a05      	ldr	r2, [pc, #20]	; (52f8 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    52e2:	9b01      	ldr	r3, [sp, #4]
    52e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    52e8:	9303      	str	r3, [sp, #12]
    52ea:	e001      	b.n	52f0 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    52ec:	230c      	movs	r3, #12
    52ee:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    52f0:	9b03      	ldr	r3, [sp, #12]
}
    52f2:	4618      	mov	r0, r3
    52f4:	b004      	add	sp, #16
    52f6:	4770      	bx	lr
    52f8:	00008328 	.word	0x00008328

000052fc <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    52fc:	b500      	push	{lr}
    52fe:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5300:	f000 f940 	bl	5584 <Power_Ip_RCM_GetResetReason>
    5304:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5306:	9801      	ldr	r0, [sp, #4]
    5308:	f7ff ffe0 	bl	52cc <Power_Ip_ConvertIntergeToResetType>
    530c:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    530e:	9b00      	ldr	r3, [sp, #0]
}
    5310:	4618      	mov	r0, r3
    5312:	b003      	add	sp, #12
    5314:	f85d fb04 	ldr.w	pc, [sp], #4

00005318 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5318:	b500      	push	{lr}
    531a:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    531c:	f000 f98a 	bl	5634 <Power_Ip_RCM_GetResetRawValue>
    5320:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5322:	9b01      	ldr	r3, [sp, #4]
}
    5324:	4618      	mov	r0, r3
    5326:	b003      	add	sp, #12
    5328:	f85d fb04 	ldr.w	pc, [sp], #4

0000532c <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    532c:	b500      	push	{lr}
    532e:	b083      	sub	sp, #12
    5330:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5332:	9b01      	ldr	r3, [sp, #4]
    5334:	681b      	ldr	r3, [r3, #0]
    5336:	4618      	mov	r0, r3
    5338:	f000 f90e 	bl	5558 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    533c:	9b01      	ldr	r3, [sp, #4]
    533e:	685b      	ldr	r3, [r3, #4]
    5340:	4618      	mov	r0, r3
    5342:	f000 f86d 	bl	5420 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5346:	9b01      	ldr	r3, [sp, #4]
    5348:	689b      	ldr	r3, [r3, #8]
    534a:	4618      	mov	r0, r3
    534c:	f000 f990 	bl	5670 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5350:	bf00      	nop
    5352:	b003      	add	sp, #12
    5354:	f85d fb04 	ldr.w	pc, [sp], #4

00005358 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5358:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    535a:	f000 f811 	bl	5380 <Power_Ip_CM4_DisableSleepOnExit>
}
    535e:	bf00      	nop
    5360:	bd08      	pop	{r3, pc}

00005362 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5362:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5364:	f000 f820 	bl	53a8 <Power_Ip_CM4_EnableSleepOnExit>
}
    5368:	bf00      	nop
    536a:	bd08      	pop	{r3, pc}

0000536c <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    536c:	b082      	sub	sp, #8
    536e:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5370:	4a02      	ldr	r2, [pc, #8]	; (537c <Power_Ip_InstallNotificationsCallback+0x10>)
    5372:	9b01      	ldr	r3, [sp, #4]
    5374:	6013      	str	r3, [r2, #0]
}
    5376:	bf00      	nop
    5378:	b002      	add	sp, #8
    537a:	4770      	bx	lr
    537c:	1fff8b1c 	.word	0x1fff8b1c

00005380 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5380:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5382:	2300      	movs	r3, #0
    5384:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5386:	4b07      	ldr	r3, [pc, #28]	; (53a4 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5388:	681b      	ldr	r3, [r3, #0]
    538a:	685b      	ldr	r3, [r3, #4]
    538c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    538e:	9b01      	ldr	r3, [sp, #4]
    5390:	f023 0302 	bic.w	r3, r3, #2
    5394:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5396:	4b03      	ldr	r3, [pc, #12]	; (53a4 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5398:	681b      	ldr	r3, [r3, #0]
    539a:	9a01      	ldr	r2, [sp, #4]
    539c:	605a      	str	r2, [r3, #4]
}
    539e:	bf00      	nop
    53a0:	b002      	add	sp, #8
    53a2:	4770      	bx	lr
    53a4:	1fff8b20 	.word	0x1fff8b20

000053a8 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    53a8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    53aa:	2300      	movs	r3, #0
    53ac:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    53ae:	4b07      	ldr	r3, [pc, #28]	; (53cc <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    53b0:	681b      	ldr	r3, [r3, #0]
    53b2:	685b      	ldr	r3, [r3, #4]
    53b4:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    53b6:	9b01      	ldr	r3, [sp, #4]
    53b8:	f043 0302 	orr.w	r3, r3, #2
    53bc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    53be:	4b03      	ldr	r3, [pc, #12]	; (53cc <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    53c0:	681b      	ldr	r3, [r3, #0]
    53c2:	9a01      	ldr	r2, [sp, #4]
    53c4:	605a      	str	r2, [r3, #4]
}
    53c6:	bf00      	nop
    53c8:	b002      	add	sp, #8
    53ca:	4770      	bx	lr
    53cc:	1fff8b20 	.word	0x1fff8b20

000053d0 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    53d0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    53d2:	2300      	movs	r3, #0
    53d4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    53d6:	4b07      	ldr	r3, [pc, #28]	; (53f4 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    53d8:	681b      	ldr	r3, [r3, #0]
    53da:	685b      	ldr	r3, [r3, #4]
    53dc:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    53de:	9b01      	ldr	r3, [sp, #4]
    53e0:	f043 0304 	orr.w	r3, r3, #4
    53e4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    53e6:	4b03      	ldr	r3, [pc, #12]	; (53f4 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    53e8:	681b      	ldr	r3, [r3, #0]
    53ea:	9a01      	ldr	r2, [sp, #4]
    53ec:	605a      	str	r2, [r3, #4]
}
    53ee:	bf00      	nop
    53f0:	b002      	add	sp, #8
    53f2:	4770      	bx	lr
    53f4:	1fff8b20 	.word	0x1fff8b20

000053f8 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    53f8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    53fa:	2300      	movs	r3, #0
    53fc:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    53fe:	4b07      	ldr	r3, [pc, #28]	; (541c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5400:	681b      	ldr	r3, [r3, #0]
    5402:	685b      	ldr	r3, [r3, #4]
    5404:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5406:	9b01      	ldr	r3, [sp, #4]
    5408:	f023 0304 	bic.w	r3, r3, #4
    540c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    540e:	4b03      	ldr	r3, [pc, #12]	; (541c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5410:	681b      	ldr	r3, [r3, #0]
    5412:	9a01      	ldr	r2, [sp, #4]
    5414:	605a      	str	r2, [r3, #4]
}
    5416:	bf00      	nop
    5418:	b002      	add	sp, #8
    541a:	4770      	bx	lr
    541c:	1fff8b20 	.word	0x1fff8b20

00005420 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5420:	b084      	sub	sp, #16
    5422:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5424:	4b20      	ldr	r3, [pc, #128]	; (54a8 <Power_Ip_PMC_PowerInit+0x88>)
    5426:	781b      	ldrb	r3, [r3, #0]
    5428:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    542c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5430:	f003 030f 	and.w	r3, r3, #15
    5434:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5438:	9b01      	ldr	r3, [sp, #4]
    543a:	781a      	ldrb	r2, [r3, #0]
    543c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5440:	4313      	orrs	r3, r2
    5442:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5446:	4a18      	ldr	r2, [pc, #96]	; (54a8 <Power_Ip_PMC_PowerInit+0x88>)
    5448:	f89d 300f 	ldrb.w	r3, [sp, #15]
    544c:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    544e:	4b16      	ldr	r3, [pc, #88]	; (54a8 <Power_Ip_PMC_PowerInit+0x88>)
    5450:	785b      	ldrb	r3, [r3, #1]
    5452:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5456:	f89d 300f 	ldrb.w	r3, [sp, #15]
    545a:	f003 031f 	and.w	r3, r3, #31
    545e:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5462:	9b01      	ldr	r3, [sp, #4]
    5464:	785a      	ldrb	r2, [r3, #1]
    5466:	f89d 300f 	ldrb.w	r3, [sp, #15]
    546a:	4313      	orrs	r3, r2
    546c:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5470:	4a0d      	ldr	r2, [pc, #52]	; (54a8 <Power_Ip_PMC_PowerInit+0x88>)
    5472:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5476:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5478:	4b0b      	ldr	r3, [pc, #44]	; (54a8 <Power_Ip_PMC_PowerInit+0x88>)
    547a:	789b      	ldrb	r3, [r3, #2]
    547c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5480:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5484:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5488:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    548c:	9b01      	ldr	r3, [sp, #4]
    548e:	789a      	ldrb	r2, [r3, #2]
    5490:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5494:	4313      	orrs	r3, r2
    5496:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    549a:	4a03      	ldr	r2, [pc, #12]	; (54a8 <Power_Ip_PMC_PowerInit+0x88>)
    549c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    54a0:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    54a2:	bf00      	nop
    54a4:	b004      	add	sp, #16
    54a6:	4770      	bx	lr
    54a8:	4007d000 	.word	0x4007d000

000054ac <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    54ac:	b500      	push	{lr}
    54ae:	b083      	sub	sp, #12
    54b0:	9001      	str	r0, [sp, #4]
    54b2:	460b      	mov	r3, r1
    54b4:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    54b8:	4b05      	ldr	r3, [pc, #20]	; (54d0 <Power_Ip_ReportPowerErrors+0x24>)
    54ba:	681b      	ldr	r3, [r3, #0]
    54bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    54c0:	4611      	mov	r1, r2
    54c2:	9801      	ldr	r0, [sp, #4]
    54c4:	4798      	blx	r3
}
    54c6:	bf00      	nop
    54c8:	b003      	add	sp, #12
    54ca:	f85d fb04 	ldr.w	pc, [sp], #4
    54ce:	bf00      	nop
    54d0:	1fff8b1c 	.word	0x1fff8b1c

000054d4 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    54d4:	b082      	sub	sp, #8
    54d6:	9001      	str	r0, [sp, #4]
    54d8:	460b      	mov	r3, r1
    54da:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    54de:	bf00      	nop
    54e0:	b002      	add	sp, #8
    54e2:	4770      	bx	lr

000054e4 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    54e4:	b500      	push	{lr}
    54e6:	b085      	sub	sp, #20
    54e8:	9003      	str	r0, [sp, #12]
    54ea:	9102      	str	r1, [sp, #8]
    54ec:	9201      	str	r2, [sp, #4]
    54ee:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    54f0:	2000      	movs	r0, #0
    54f2:	f7fc f83c 	bl	156e <OsIf_GetCounter>
    54f6:	4602      	mov	r2, r0
    54f8:	9b03      	ldr	r3, [sp, #12]
    54fa:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    54fc:	9b02      	ldr	r3, [sp, #8]
    54fe:	2200      	movs	r2, #0
    5500:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5502:	2100      	movs	r1, #0
    5504:	9800      	ldr	r0, [sp, #0]
    5506:	f7fc f87e 	bl	1606 <OsIf_MicrosToTicks>
    550a:	4602      	mov	r2, r0
    550c:	9b01      	ldr	r3, [sp, #4]
    550e:	601a      	str	r2, [r3, #0]
}
    5510:	bf00      	nop
    5512:	b005      	add	sp, #20
    5514:	f85d fb04 	ldr.w	pc, [sp], #4

00005518 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5518:	b500      	push	{lr}
    551a:	b087      	sub	sp, #28
    551c:	9003      	str	r0, [sp, #12]
    551e:	9102      	str	r1, [sp, #8]
    5520:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5522:	2300      	movs	r3, #0
    5524:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5528:	2100      	movs	r1, #0
    552a:	9803      	ldr	r0, [sp, #12]
    552c:	f7fc f838 	bl	15a0 <OsIf_GetElapsed>
    5530:	4602      	mov	r2, r0
    5532:	9b02      	ldr	r3, [sp, #8]
    5534:	681b      	ldr	r3, [r3, #0]
    5536:	441a      	add	r2, r3
    5538:	9b02      	ldr	r3, [sp, #8]
    553a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    553c:	9b02      	ldr	r3, [sp, #8]
    553e:	681b      	ldr	r3, [r3, #0]
    5540:	9a01      	ldr	r2, [sp, #4]
    5542:	429a      	cmp	r2, r3
    5544:	d802      	bhi.n	554c <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5546:	2301      	movs	r3, #1
    5548:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    554c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5550:	4618      	mov	r0, r3
    5552:	b007      	add	sp, #28
    5554:	f85d fb04 	ldr.w	pc, [sp], #4

00005558 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5558:	b082      	sub	sp, #8
    555a:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    555c:	9b01      	ldr	r3, [sp, #4]
    555e:	681a      	ldr	r2, [r3, #0]
    5560:	4907      	ldr	r1, [pc, #28]	; (5580 <Power_Ip_RCM_ResetInit+0x28>)
    5562:	f641 7307 	movw	r3, #7943	; 0x1f07
    5566:	4013      	ands	r3, r2
    5568:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    556a:	9b01      	ldr	r3, [sp, #4]
    556c:	685a      	ldr	r2, [r3, #4]
    556e:	4904      	ldr	r1, [pc, #16]	; (5580 <Power_Ip_RCM_ResetInit+0x28>)
    5570:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5574:	4013      	ands	r3, r2
    5576:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5578:	bf00      	nop
    557a:	b002      	add	sp, #8
    557c:	4770      	bx	lr
    557e:	bf00      	nop
    5580:	4007f000 	.word	0x4007f000

00005584 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5584:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5586:	230c      	movs	r3, #12
    5588:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    558a:	2300      	movs	r3, #0
    558c:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    558e:	2300      	movs	r3, #0
    5590:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5592:	2300      	movs	r3, #0
    5594:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5596:	4b25      	ldr	r3, [pc, #148]	; (562c <Power_Ip_RCM_GetResetReason+0xa8>)
    5598:	699a      	ldr	r2, [r3, #24]
    559a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    559e:	4013      	ands	r3, r2
    55a0:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    55a2:	9b03      	ldr	r3, [sp, #12]
    55a4:	2b00      	cmp	r3, #0
    55a6:	d008      	beq.n	55ba <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    55a8:	4920      	ldr	r1, [pc, #128]	; (562c <Power_Ip_RCM_GetResetReason+0xa8>)
    55aa:	9a03      	ldr	r2, [sp, #12]
    55ac:	f642 73ee 	movw	r3, #12270	; 0x2fee
    55b0:	4013      	ands	r3, r2
    55b2:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    55b4:	4a1e      	ldr	r2, [pc, #120]	; (5630 <Power_Ip_RCM_GetResetReason+0xac>)
    55b6:	9b03      	ldr	r3, [sp, #12]
    55b8:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    55ba:	4b1d      	ldr	r3, [pc, #116]	; (5630 <Power_Ip_RCM_GetResetReason+0xac>)
    55bc:	681b      	ldr	r3, [r3, #0]
    55be:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    55c0:	9a02      	ldr	r2, [sp, #8]
    55c2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    55c6:	4013      	ands	r3, r2
    55c8:	2b82      	cmp	r3, #130	; 0x82
    55ca:	d102      	bne.n	55d2 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    55cc:	2305      	movs	r3, #5
    55ce:	9307      	str	r3, [sp, #28]
    55d0:	e027      	b.n	5622 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    55d2:	2300      	movs	r3, #0
    55d4:	9306      	str	r3, [sp, #24]
    55d6:	e021      	b.n	561c <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    55d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    55dc:	9b06      	ldr	r3, [sp, #24]
    55de:	fa22 f303 	lsr.w	r3, r2, r3
    55e2:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    55e4:	9a01      	ldr	r2, [sp, #4]
    55e6:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    55ea:	4013      	ands	r3, r2
    55ec:	2b00      	cmp	r3, #0
    55ee:	d012      	beq.n	5616 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    55f0:	9a01      	ldr	r2, [sp, #4]
    55f2:	9b02      	ldr	r3, [sp, #8]
    55f4:	4013      	ands	r3, r2
    55f6:	2b00      	cmp	r3, #0
    55f8:	d00a      	beq.n	5610 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    55fa:	9b05      	ldr	r3, [sp, #20]
    55fc:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    55fe:	9b04      	ldr	r3, [sp, #16]
    5600:	3301      	adds	r3, #1
    5602:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5604:	9b04      	ldr	r3, [sp, #16]
    5606:	2b01      	cmp	r3, #1
    5608:	d902      	bls.n	5610 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    560a:	230d      	movs	r3, #13
    560c:	9307      	str	r3, [sp, #28]
                        break;
    560e:	e008      	b.n	5622 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5610:	9b05      	ldr	r3, [sp, #20]
    5612:	3301      	adds	r3, #1
    5614:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5616:	9b06      	ldr	r3, [sp, #24]
    5618:	3301      	adds	r3, #1
    561a:	9306      	str	r3, [sp, #24]
    561c:	9b06      	ldr	r3, [sp, #24]
    561e:	2b1f      	cmp	r3, #31
    5620:	d9da      	bls.n	55d8 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5622:	9b07      	ldr	r3, [sp, #28]
}
    5624:	4618      	mov	r0, r3
    5626:	b008      	add	sp, #32
    5628:	4770      	bx	lr
    562a:	bf00      	nop
    562c:	4007f000 	.word	0x4007f000
    5630:	1fff8cf0 	.word	0x1fff8cf0

00005634 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5634:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5636:	4b0c      	ldr	r3, [pc, #48]	; (5668 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5638:	699a      	ldr	r2, [r3, #24]
    563a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    563e:	4013      	ands	r3, r2
    5640:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5642:	9b01      	ldr	r3, [sp, #4]
    5644:	2b00      	cmp	r3, #0
    5646:	d008      	beq.n	565a <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5648:	4907      	ldr	r1, [pc, #28]	; (5668 <Power_Ip_RCM_GetResetRawValue+0x34>)
    564a:	9a01      	ldr	r2, [sp, #4]
    564c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5650:	4013      	ands	r3, r2
    5652:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5654:	4a05      	ldr	r2, [pc, #20]	; (566c <Power_Ip_RCM_GetResetRawValue+0x38>)
    5656:	9b01      	ldr	r3, [sp, #4]
    5658:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    565a:	4b04      	ldr	r3, [pc, #16]	; (566c <Power_Ip_RCM_GetResetRawValue+0x38>)
    565c:	681b      	ldr	r3, [r3, #0]
    565e:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5660:	9b00      	ldr	r3, [sp, #0]
}
    5662:	4618      	mov	r0, r3
    5664:	b002      	add	sp, #8
    5666:	4770      	bx	lr
    5668:	4007f000 	.word	0x4007f000
    566c:	1fff8cf0 	.word	0x1fff8cf0

00005670 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5670:	b082      	sub	sp, #8
    5672:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5674:	9b01      	ldr	r3, [sp, #4]
    5676:	681b      	ldr	r3, [r3, #0]
    5678:	4a03      	ldr	r2, [pc, #12]	; (5688 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    567a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    567e:	6093      	str	r3, [r2, #8]
}
    5680:	bf00      	nop
    5682:	b002      	add	sp, #8
    5684:	4770      	bx	lr
    5686:	bf00      	nop
    5688:	4007e000 	.word	0x4007e000

0000568c <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    568c:	b084      	sub	sp, #16
    568e:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5690:	2301      	movs	r3, #1
    5692:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5694:	4b15      	ldr	r3, [pc, #84]	; (56ec <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5696:	695b      	ldr	r3, [r3, #20]
    5698:	b2db      	uxtb	r3, r3
    569a:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    569c:	9b01      	ldr	r3, [sp, #4]
    569e:	2b02      	cmp	r3, #2
    56a0:	d012      	beq.n	56c8 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    56a2:	9b01      	ldr	r3, [sp, #4]
    56a4:	2b02      	cmp	r3, #2
    56a6:	d818      	bhi.n	56da <Power_Ip_SMC_ModeCheckEntry+0x4e>
    56a8:	9b01      	ldr	r3, [sp, #4]
    56aa:	2b00      	cmp	r3, #0
    56ac:	d003      	beq.n	56b6 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    56ae:	9b01      	ldr	r3, [sp, #4]
    56b0:	2b01      	cmp	r3, #1
    56b2:	d003      	beq.n	56bc <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    56b4:	e011      	b.n	56da <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    56b6:	2300      	movs	r3, #0
    56b8:	9303      	str	r3, [sp, #12]
            break;
    56ba:	e013      	b.n	56e4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    56bc:	9b02      	ldr	r3, [sp, #8]
    56be:	2b01      	cmp	r3, #1
    56c0:	d10d      	bne.n	56de <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    56c2:	2300      	movs	r3, #0
    56c4:	9303      	str	r3, [sp, #12]
            break;
    56c6:	e00a      	b.n	56de <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    56c8:	9b02      	ldr	r3, [sp, #8]
    56ca:	2b01      	cmp	r3, #1
    56cc:	d002      	beq.n	56d4 <Power_Ip_SMC_ModeCheckEntry+0x48>
    56ce:	9b02      	ldr	r3, [sp, #8]
    56d0:	2b10      	cmp	r3, #16
    56d2:	d106      	bne.n	56e2 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    56d4:	2300      	movs	r3, #0
    56d6:	9303      	str	r3, [sp, #12]
            break;
    56d8:	e003      	b.n	56e2 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    56da:	bf00      	nop
    56dc:	e002      	b.n	56e4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    56de:	bf00      	nop
    56e0:	e000      	b.n	56e4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    56e2:	bf00      	nop
        }
    }

    return PowerModeCheck;
    56e4:	9b03      	ldr	r3, [sp, #12]
}
    56e6:	4618      	mov	r0, r3
    56e8:	b004      	add	sp, #16
    56ea:	4770      	bx	lr
    56ec:	4007e000 	.word	0x4007e000

000056f0 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    56f0:	b500      	push	{lr}
    56f2:	b08b      	sub	sp, #44	; 0x2c
    56f4:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    56f6:	2300      	movs	r3, #0
    56f8:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    56fa:	2300      	movs	r3, #0
    56fc:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    56fe:	2300      	movs	r3, #0
    5700:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5704:	9b01      	ldr	r3, [sp, #4]
    5706:	685b      	ldr	r3, [r3, #4]
    5708:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    570a:	9b08      	ldr	r3, [sp, #32]
    570c:	2b02      	cmp	r3, #2
    570e:	d076      	beq.n	57fe <Power_Ip_SMC_ModeConfig+0x10e>
    5710:	9b08      	ldr	r3, [sp, #32]
    5712:	2b02      	cmp	r3, #2
    5714:	f200 80ab 	bhi.w	586e <Power_Ip_SMC_ModeConfig+0x17e>
    5718:	9b08      	ldr	r3, [sp, #32]
    571a:	2b00      	cmp	r3, #0
    571c:	d003      	beq.n	5726 <Power_Ip_SMC_ModeConfig+0x36>
    571e:	9b08      	ldr	r3, [sp, #32]
    5720:	2b01      	cmp	r3, #1
    5722:	d034      	beq.n	578e <Power_Ip_SMC_ModeConfig+0x9e>
    5724:	e0a3      	b.n	586e <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5726:	4b58      	ldr	r3, [pc, #352]	; (5888 <Power_Ip_SMC_ModeConfig+0x198>)
    5728:	68db      	ldr	r3, [r3, #12]
    572a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    572c:	9b06      	ldr	r3, [sp, #24]
    572e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5732:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5734:	4a54      	ldr	r2, [pc, #336]	; (5888 <Power_Ip_SMC_ModeConfig+0x198>)
    5736:	9b06      	ldr	r3, [sp, #24]
    5738:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    573a:	aa02      	add	r2, sp, #8
    573c:	a903      	add	r1, sp, #12
    573e:	a804      	add	r0, sp, #16
    5740:	f24c 3350 	movw	r3, #50000	; 0xc350
    5744:	f7ff fece 	bl	54e4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5748:	9a02      	ldr	r2, [sp, #8]
    574a:	a903      	add	r1, sp, #12
    574c:	ab04      	add	r3, sp, #16
    574e:	4618      	mov	r0, r3
    5750:	f7ff fee2 	bl	5518 <Power_Ip_TimeoutExpired>
    5754:	4603      	mov	r3, r0
    5756:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    575a:	4b4b      	ldr	r3, [pc, #300]	; (5888 <Power_Ip_SMC_ModeConfig+0x198>)
    575c:	695b      	ldr	r3, [r3, #20]
    575e:	f003 0301 	and.w	r3, r3, #1
    5762:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5764:	9b05      	ldr	r3, [sp, #20]
    5766:	2b01      	cmp	r3, #1
    5768:	d006      	beq.n	5778 <Power_Ip_SMC_ModeConfig+0x88>
    576a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    576e:	f083 0301 	eor.w	r3, r3, #1
    5772:	b2db      	uxtb	r3, r3
    5774:	2b00      	cmp	r3, #0
    5776:	d1e7      	bne.n	5748 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5778:	f89d 301f 	ldrb.w	r3, [sp, #31]
    577c:	2b00      	cmp	r3, #0
    577e:	d079      	beq.n	5874 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5780:	2301      	movs	r3, #1
    5782:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5784:	21ff      	movs	r1, #255	; 0xff
    5786:	2000      	movs	r0, #0
    5788:	f7ff fe90 	bl	54ac <Power_Ip_ReportPowerErrors>
            }

            break;
    578c:	e072      	b.n	5874 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    578e:	4b3e      	ldr	r3, [pc, #248]	; (5888 <Power_Ip_SMC_ModeConfig+0x198>)
    5790:	68db      	ldr	r3, [r3, #12]
    5792:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5794:	9b06      	ldr	r3, [sp, #24]
    5796:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    579a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    579c:	9b06      	ldr	r3, [sp, #24]
    579e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    57a2:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    57a4:	4a38      	ldr	r2, [pc, #224]	; (5888 <Power_Ip_SMC_ModeConfig+0x198>)
    57a6:	9b06      	ldr	r3, [sp, #24]
    57a8:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    57aa:	aa02      	add	r2, sp, #8
    57ac:	a903      	add	r1, sp, #12
    57ae:	a804      	add	r0, sp, #16
    57b0:	f24c 3350 	movw	r3, #50000	; 0xc350
    57b4:	f7ff fe96 	bl	54e4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    57b8:	9a02      	ldr	r2, [sp, #8]
    57ba:	a903      	add	r1, sp, #12
    57bc:	ab04      	add	r3, sp, #16
    57be:	4618      	mov	r0, r3
    57c0:	f7ff feaa 	bl	5518 <Power_Ip_TimeoutExpired>
    57c4:	4603      	mov	r3, r0
    57c6:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    57ca:	4b2f      	ldr	r3, [pc, #188]	; (5888 <Power_Ip_SMC_ModeConfig+0x198>)
    57cc:	695b      	ldr	r3, [r3, #20]
    57ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
    57d2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    57d4:	9b05      	ldr	r3, [sp, #20]
    57d6:	2b80      	cmp	r3, #128	; 0x80
    57d8:	d006      	beq.n	57e8 <Power_Ip_SMC_ModeConfig+0xf8>
    57da:	f89d 301f 	ldrb.w	r3, [sp, #31]
    57de:	f083 0301 	eor.w	r3, r3, #1
    57e2:	b2db      	uxtb	r3, r3
    57e4:	2b00      	cmp	r3, #0
    57e6:	d1e7      	bne.n	57b8 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    57e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    57ec:	2b00      	cmp	r3, #0
    57ee:	d043      	beq.n	5878 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    57f0:	2301      	movs	r3, #1
    57f2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    57f4:	21ff      	movs	r1, #255	; 0xff
    57f6:	2000      	movs	r0, #0
    57f8:	f7ff fe58 	bl	54ac <Power_Ip_ReportPowerErrors>
            }

            break;
    57fc:	e03c      	b.n	5878 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    57fe:	4b22      	ldr	r3, [pc, #136]	; (5888 <Power_Ip_SMC_ModeConfig+0x198>)
    5800:	68db      	ldr	r3, [r3, #12]
    5802:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5804:	9b06      	ldr	r3, [sp, #24]
    5806:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    580a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    580c:	9b06      	ldr	r3, [sp, #24]
    580e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5812:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5814:	4a1c      	ldr	r2, [pc, #112]	; (5888 <Power_Ip_SMC_ModeConfig+0x198>)
    5816:	9b06      	ldr	r3, [sp, #24]
    5818:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    581a:	aa02      	add	r2, sp, #8
    581c:	a903      	add	r1, sp, #12
    581e:	a804      	add	r0, sp, #16
    5820:	f24c 3350 	movw	r3, #50000	; 0xc350
    5824:	f7ff fe5e 	bl	54e4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5828:	9a02      	ldr	r2, [sp, #8]
    582a:	a903      	add	r1, sp, #12
    582c:	ab04      	add	r3, sp, #16
    582e:	4618      	mov	r0, r3
    5830:	f7ff fe72 	bl	5518 <Power_Ip_TimeoutExpired>
    5834:	4603      	mov	r3, r0
    5836:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    583a:	4b13      	ldr	r3, [pc, #76]	; (5888 <Power_Ip_SMC_ModeConfig+0x198>)
    583c:	695b      	ldr	r3, [r3, #20]
    583e:	f003 0304 	and.w	r3, r3, #4
    5842:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5844:	9b05      	ldr	r3, [sp, #20]
    5846:	2b04      	cmp	r3, #4
    5848:	d006      	beq.n	5858 <Power_Ip_SMC_ModeConfig+0x168>
    584a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    584e:	f083 0301 	eor.w	r3, r3, #1
    5852:	b2db      	uxtb	r3, r3
    5854:	2b00      	cmp	r3, #0
    5856:	d1e7      	bne.n	5828 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5858:	f89d 301f 	ldrb.w	r3, [sp, #31]
    585c:	2b00      	cmp	r3, #0
    585e:	d00d      	beq.n	587c <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5860:	2301      	movs	r3, #1
    5862:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5864:	21ff      	movs	r1, #255	; 0xff
    5866:	2000      	movs	r0, #0
    5868:	f7ff fe20 	bl	54ac <Power_Ip_ReportPowerErrors>
            }

            break;
    586c:	e006      	b.n	587c <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    586e:	2301      	movs	r3, #1
    5870:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5872:	e004      	b.n	587e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5874:	bf00      	nop
    5876:	e002      	b.n	587e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5878:	bf00      	nop
    587a:	e000      	b.n	587e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    587c:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    587e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5880:	4618      	mov	r0, r3
    5882:	b00b      	add	sp, #44	; 0x2c
    5884:	f85d fb04 	ldr.w	pc, [sp], #4
    5888:	4007e000 	.word	0x4007e000

0000588c <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    588c:	b500      	push	{lr}
    588e:	b085      	sub	sp, #20
    5890:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5892:	9b01      	ldr	r3, [sp, #4]
    5894:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5896:	9803      	ldr	r0, [sp, #12]
    5898:	f000 fbc8 	bl	602c <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    589c:	4a03      	ldr	r2, [pc, #12]	; (58ac <Port_Init+0x20>)
    589e:	9b03      	ldr	r3, [sp, #12]
    58a0:	6013      	str	r3, [r2, #0]
        }
    }
}
    58a2:	bf00      	nop
    58a4:	b005      	add	sp, #20
    58a6:	f85d fb04 	ldr.w	pc, [sp], #4
    58aa:	bf00      	nop
    58ac:	1fff8cf4 	.word	0x1fff8cf4

000058b0 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    58b0:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    58b2:	4b03      	ldr	r3, [pc, #12]	; (58c0 <Port_RefreshPortDirection+0x10>)
    58b4:	681b      	ldr	r3, [r3, #0]
    58b6:	4618      	mov	r0, r3
    58b8:	f000 fc10 	bl	60dc <Port_Ipw_RefreshPortDirection>
    }
}
    58bc:	bf00      	nop
    58be:	bd08      	pop	{r3, pc}
    58c0:	1fff8cf4 	.word	0x1fff8cf4

000058c4 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    58c4:	b086      	sub	sp, #24
    58c6:	9003      	str	r0, [sp, #12]
    58c8:	9102      	str	r1, [sp, #8]
    58ca:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    58cc:	23ff      	movs	r3, #255	; 0xff
    58ce:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    58d0:	9b03      	ldr	r3, [sp, #12]
    58d2:	4a39      	ldr	r2, [pc, #228]	; (59b8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    58d4:	4293      	cmp	r3, r2
    58d6:	d151      	bne.n	597c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    58d8:	9b02      	ldr	r3, [sp, #8]
    58da:	2b10      	cmp	r3, #16
    58dc:	d867      	bhi.n	59ae <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    58de:	a201      	add	r2, pc, #4	; (adr r2, 58e4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    58e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    58e4:	00005929 	.word	0x00005929
    58e8:	00005937 	.word	0x00005937
    58ec:	000059af 	.word	0x000059af
    58f0:	000059af 	.word	0x000059af
    58f4:	000059af 	.word	0x000059af
    58f8:	000059af 	.word	0x000059af
    58fc:	000059af 	.word	0x000059af
    5900:	000059af 	.word	0x000059af
    5904:	000059af 	.word	0x000059af
    5908:	000059af 	.word	0x000059af
    590c:	000059af 	.word	0x000059af
    5910:	000059af 	.word	0x000059af
    5914:	000059af 	.word	0x000059af
    5918:	00005945 	.word	0x00005945
    591c:	00005953 	.word	0x00005953
    5920:	00005961 	.word	0x00005961
    5924:	0000596f 	.word	0x0000596f
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5928:	2301      	movs	r3, #1
    592a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    592c:	9a05      	ldr	r2, [sp, #20]
    592e:	9b01      	ldr	r3, [sp, #4]
    5930:	4313      	orrs	r3, r2
    5932:	9305      	str	r3, [sp, #20]
                break;
    5934:	e03c      	b.n	59b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5936:	2302      	movs	r3, #2
    5938:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    593a:	9a05      	ldr	r2, [sp, #20]
    593c:	9b01      	ldr	r3, [sp, #4]
    593e:	4313      	orrs	r3, r2
    5940:	9305      	str	r3, [sp, #20]
                break;
    5942:	e035      	b.n	59b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5944:	2304      	movs	r3, #4
    5946:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5948:	9a05      	ldr	r2, [sp, #20]
    594a:	9b01      	ldr	r3, [sp, #4]
    594c:	4313      	orrs	r3, r2
    594e:	9305      	str	r3, [sp, #20]
                break;
    5950:	e02e      	b.n	59b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5952:	2308      	movs	r3, #8
    5954:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5956:	9a05      	ldr	r2, [sp, #20]
    5958:	9b01      	ldr	r3, [sp, #4]
    595a:	4313      	orrs	r3, r2
    595c:	9305      	str	r3, [sp, #20]
                break;
    595e:	e027      	b.n	59b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5960:	230e      	movs	r3, #14
    5962:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5964:	9a05      	ldr	r2, [sp, #20]
    5966:	9b01      	ldr	r3, [sp, #4]
    5968:	4013      	ands	r3, r2
    596a:	9305      	str	r3, [sp, #20]
                break;
    596c:	e020      	b.n	59b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    596e:	230d      	movs	r3, #13
    5970:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5972:	9a05      	ldr	r2, [sp, #20]
    5974:	9b01      	ldr	r3, [sp, #4]
    5976:	4013      	ands	r3, r2
    5978:	9305      	str	r3, [sp, #20]
                break;
    597a:	e019      	b.n	59b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    597c:	9b03      	ldr	r3, [sp, #12]
    597e:	4a0f      	ldr	r2, [pc, #60]	; (59bc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5980:	4293      	cmp	r3, r2
    5982:	d115      	bne.n	59b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5984:	9b02      	ldr	r3, [sp, #8]
    5986:	2b00      	cmp	r3, #0
    5988:	d003      	beq.n	5992 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    598a:	9b02      	ldr	r3, [sp, #8]
    598c:	2b01      	cmp	r3, #1
    598e:	d007      	beq.n	59a0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5990:	e00e      	b.n	59b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5992:	230b      	movs	r3, #11
    5994:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5996:	9a05      	ldr	r2, [sp, #20]
    5998:	9b01      	ldr	r3, [sp, #4]
    599a:	4013      	ands	r3, r2
    599c:	9305      	str	r3, [sp, #20]
                break;
    599e:	e007      	b.n	59b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    59a0:	2307      	movs	r3, #7
    59a2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    59a4:	9a05      	ldr	r2, [sp, #20]
    59a6:	9b01      	ldr	r3, [sp, #4]
    59a8:	4013      	ands	r3, r2
    59aa:	9305      	str	r3, [sp, #20]
                break;
    59ac:	e000      	b.n	59b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    59ae:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    59b0:	9b05      	ldr	r3, [sp, #20]
}
    59b2:	4618      	mov	r0, r3
    59b4:	b006      	add	sp, #24
    59b6:	4770      	bx	lr
    59b8:	4004a000 	.word	0x4004a000
    59bc:	4004b000 	.word	0x4004b000

000059c0 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    59c0:	b500      	push	{lr}
    59c2:	b089      	sub	sp, #36	; 0x24
    59c4:	9003      	str	r0, [sp, #12]
    59c6:	9102      	str	r1, [sp, #8]
    59c8:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    59ca:	9b01      	ldr	r3, [sp, #4]
    59cc:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    59ce:	9b01      	ldr	r3, [sp, #4]
    59d0:	2b08      	cmp	r3, #8
    59d2:	d121      	bne.n	5a18 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    59d4:	4b13      	ldr	r3, [pc, #76]	; (5a24 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    59d6:	685b      	ldr	r3, [r3, #4]
    59d8:	f003 030f 	and.w	r3, r3, #15
    59dc:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    59de:	9a06      	ldr	r2, [sp, #24]
    59e0:	9902      	ldr	r1, [sp, #8]
    59e2:	9803      	ldr	r0, [sp, #12]
    59e4:	f7ff ff6e 	bl	58c4 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    59e8:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    59ea:	9b05      	ldr	r3, [sp, #20]
    59ec:	2bff      	cmp	r3, #255	; 0xff
    59ee:	d011      	beq.n	5a14 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    59f0:	f001 f984 	bl	6cfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    59f4:	4b0b      	ldr	r3, [pc, #44]	; (5a24 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    59f6:	685b      	ldr	r3, [r3, #4]
    59f8:	4a0a      	ldr	r2, [pc, #40]	; (5a24 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    59fa:	f023 030f 	bic.w	r3, r3, #15
    59fe:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5a00:	4b08      	ldr	r3, [pc, #32]	; (5a24 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5a02:	685a      	ldr	r2, [r3, #4]
    5a04:	9b05      	ldr	r3, [sp, #20]
    5a06:	f003 030f 	and.w	r3, r3, #15
    5a0a:	4906      	ldr	r1, [pc, #24]	; (5a24 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5a0c:	4313      	orrs	r3, r2
    5a0e:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    5a10:	f001 f9a0 	bl	6d54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    5a14:	2300      	movs	r3, #0
    5a16:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    5a18:	9b07      	ldr	r3, [sp, #28]
}
    5a1a:	4618      	mov	r0, r3
    5a1c:	b009      	add	sp, #36	; 0x24
    5a1e:	f85d fb04 	ldr.w	pc, [sp], #4
    5a22:	bf00      	nop
    5a24:	40048000 	.word	0x40048000

00005a28 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    5a28:	b500      	push	{lr}
    5a2a:	b087      	sub	sp, #28
    5a2c:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    5a2e:	2300      	movs	r3, #0
    5a30:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    5a32:	2300      	movs	r3, #0
    5a34:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    5a36:	2300      	movs	r3, #0
    5a38:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    5a3a:	9b01      	ldr	r3, [sp, #4]
    5a3c:	68db      	ldr	r3, [r3, #12]
    5a3e:	2b02      	cmp	r3, #2
    5a40:	d00a      	beq.n	5a58 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    5a42:	9b05      	ldr	r3, [sp, #20]
    5a44:	f043 0302 	orr.w	r3, r3, #2
    5a48:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    5a4a:	9b01      	ldr	r3, [sp, #4]
    5a4c:	68db      	ldr	r3, [r3, #12]
    5a4e:	f003 0301 	and.w	r3, r3, #1
    5a52:	9a05      	ldr	r2, [sp, #20]
    5a54:	4313      	orrs	r3, r2
    5a56:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    5a58:	9b01      	ldr	r3, [sp, #4]
    5a5a:	699b      	ldr	r3, [r3, #24]
    5a5c:	019b      	lsls	r3, r3, #6
    5a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5a62:	9a05      	ldr	r2, [sp, #20]
    5a64:	4313      	orrs	r3, r2
    5a66:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    5a68:	9b01      	ldr	r3, [sp, #4]
    5a6a:	6a1b      	ldr	r3, [r3, #32]
    5a6c:	03db      	lsls	r3, r3, #15
    5a6e:	b29b      	uxth	r3, r3
    5a70:	9a05      	ldr	r2, [sp, #20]
    5a72:	4313      	orrs	r3, r2
    5a74:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    5a76:	9b01      	ldr	r3, [sp, #4]
    5a78:	7f1b      	ldrb	r3, [r3, #28]
    5a7a:	2b00      	cmp	r3, #0
    5a7c:	d001      	beq.n	5a82 <Port_Ci_Port_Ip_PinInit+0x5a>
    5a7e:	2310      	movs	r3, #16
    5a80:	e000      	b.n	5a84 <Port_Ci_Port_Ip_PinInit+0x5c>
    5a82:	2300      	movs	r3, #0
    5a84:	9a05      	ldr	r2, [sp, #20]
    5a86:	4313      	orrs	r3, r2
    5a88:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    5a8a:	9b01      	ldr	r3, [sp, #4]
    5a8c:	691b      	ldr	r3, [r3, #16]
    5a8e:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5a90:	9b01      	ldr	r3, [sp, #4]
    5a92:	6818      	ldr	r0, [r3, #0]
    5a94:	9b01      	ldr	r3, [sp, #4]
    5a96:	689b      	ldr	r3, [r3, #8]
    5a98:	9a04      	ldr	r2, [sp, #16]
    5a9a:	4619      	mov	r1, r3
    5a9c:	f7ff ff90 	bl	59c0 <Port_Ci_Port_Ip_ConfigureInterleave>
    5aa0:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    5aa2:	9b03      	ldr	r3, [sp, #12]
    5aa4:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    5aa6:	9b04      	ldr	r3, [sp, #16]
    5aa8:	021b      	lsls	r3, r3, #8
    5aaa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5aae:	9a05      	ldr	r2, [sp, #20]
    5ab0:	4313      	orrs	r3, r2
    5ab2:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    5ab4:	f000 ff88 	bl	69c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    5ab8:	9b01      	ldr	r3, [sp, #4]
    5aba:	681b      	ldr	r3, [r3, #0]
    5abc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    5ac0:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    5ac2:	9b01      	ldr	r3, [sp, #4]
    5ac4:	689b      	ldr	r3, [r3, #8]
    5ac6:	2201      	movs	r2, #1
    5ac8:	fa02 f303 	lsl.w	r3, r2, r3
    5acc:	43db      	mvns	r3, r3
    5ace:	9a02      	ldr	r2, [sp, #8]
    5ad0:	4013      	ands	r3, r2
    5ad2:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    5ad4:	9b01      	ldr	r3, [sp, #4]
    5ad6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5ada:	2b00      	cmp	r3, #0
    5adc:	d001      	beq.n	5ae2 <Port_Ci_Port_Ip_PinInit+0xba>
    5ade:	2201      	movs	r2, #1
    5ae0:	e000      	b.n	5ae4 <Port_Ci_Port_Ip_PinInit+0xbc>
    5ae2:	2200      	movs	r2, #0
    5ae4:	9b01      	ldr	r3, [sp, #4]
    5ae6:	689b      	ldr	r3, [r3, #8]
    5ae8:	fa02 f303 	lsl.w	r3, r2, r3
    5aec:	9a02      	ldr	r2, [sp, #8]
    5aee:	4313      	orrs	r3, r2
    5af0:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    5af2:	9b01      	ldr	r3, [sp, #4]
    5af4:	681b      	ldr	r3, [r3, #0]
    5af6:	9a02      	ldr	r2, [sp, #8]
    5af8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    5afc:	f000 ff90 	bl	6a20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    5b00:	9b04      	ldr	r3, [sp, #16]
    5b02:	2b01      	cmp	r3, #1
    5b04:	d16d      	bne.n	5be2 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    5b06:	9b01      	ldr	r3, [sp, #4]
    5b08:	695b      	ldr	r3, [r3, #20]
    5b0a:	2b02      	cmp	r3, #2
    5b0c:	d138      	bne.n	5b80 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    5b0e:	9b01      	ldr	r3, [sp, #4]
    5b10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5b14:	2b01      	cmp	r3, #1
    5b16:	d10f      	bne.n	5b38 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    5b18:	f000 ffa8 	bl	6a6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    5b1c:	9b01      	ldr	r3, [sp, #4]
    5b1e:	685b      	ldr	r3, [r3, #4]
    5b20:	6859      	ldr	r1, [r3, #4]
    5b22:	9b01      	ldr	r3, [sp, #4]
    5b24:	689b      	ldr	r3, [r3, #8]
    5b26:	2201      	movs	r2, #1
    5b28:	409a      	lsls	r2, r3
    5b2a:	9b01      	ldr	r3, [sp, #4]
    5b2c:	685b      	ldr	r3, [r3, #4]
    5b2e:	430a      	orrs	r2, r1
    5b30:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    5b32:	f000 ffc7 	bl	6ac4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    5b36:	e013      	b.n	5b60 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    5b38:	9b01      	ldr	r3, [sp, #4]
    5b3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5b3e:	2b00      	cmp	r3, #0
    5b40:	d10e      	bne.n	5b60 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    5b42:	f000 ffe5 	bl	6b10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    5b46:	9b01      	ldr	r3, [sp, #4]
    5b48:	685b      	ldr	r3, [r3, #4]
    5b4a:	6899      	ldr	r1, [r3, #8]
    5b4c:	9b01      	ldr	r3, [sp, #4]
    5b4e:	689b      	ldr	r3, [r3, #8]
    5b50:	2201      	movs	r2, #1
    5b52:	409a      	lsls	r2, r3
    5b54:	9b01      	ldr	r3, [sp, #4]
    5b56:	685b      	ldr	r3, [r3, #4]
    5b58:	430a      	orrs	r2, r1
    5b5a:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    5b5c:	f001 f804 	bl	6b68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5b60:	f001 f828 	bl	6bb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    5b64:	9b01      	ldr	r3, [sp, #4]
    5b66:	685b      	ldr	r3, [r3, #4]
    5b68:	6959      	ldr	r1, [r3, #20]
    5b6a:	9b01      	ldr	r3, [sp, #4]
    5b6c:	689b      	ldr	r3, [r3, #8]
    5b6e:	2201      	movs	r2, #1
    5b70:	409a      	lsls	r2, r3
    5b72:	9b01      	ldr	r3, [sp, #4]
    5b74:	685b      	ldr	r3, [r3, #4]
    5b76:	430a      	orrs	r2, r1
    5b78:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5b7a:	f001 f847 	bl	6c0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    5b7e:	e030      	b.n	5be2 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5b80:	f001 f818 	bl	6bb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    5b84:	9b01      	ldr	r3, [sp, #4]
    5b86:	685b      	ldr	r3, [r3, #4]
    5b88:	6959      	ldr	r1, [r3, #20]
    5b8a:	9b01      	ldr	r3, [sp, #4]
    5b8c:	689b      	ldr	r3, [r3, #8]
    5b8e:	2201      	movs	r2, #1
    5b90:	fa02 f303 	lsl.w	r3, r2, r3
    5b94:	43da      	mvns	r2, r3
    5b96:	9b01      	ldr	r3, [sp, #4]
    5b98:	685b      	ldr	r3, [r3, #4]
    5b9a:	400a      	ands	r2, r1
    5b9c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5b9e:	f001 f835 	bl	6c0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    5ba2:	f001 f859 	bl	6c58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    5ba6:	9b01      	ldr	r3, [sp, #4]
    5ba8:	685b      	ldr	r3, [r3, #4]
    5baa:	6999      	ldr	r1, [r3, #24]
    5bac:	9b01      	ldr	r3, [sp, #4]
    5bae:	689b      	ldr	r3, [r3, #8]
    5bb0:	2201      	movs	r2, #1
    5bb2:	fa02 f303 	lsl.w	r3, r2, r3
    5bb6:	43da      	mvns	r2, r3
    5bb8:	9b01      	ldr	r3, [sp, #4]
    5bba:	685b      	ldr	r3, [r3, #4]
    5bbc:	400a      	ands	r2, r1
    5bbe:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    5bc0:	9b01      	ldr	r3, [sp, #4]
    5bc2:	695b      	ldr	r3, [r3, #20]
    5bc4:	2b03      	cmp	r3, #3
    5bc6:	d10a      	bne.n	5bde <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    5bc8:	9b01      	ldr	r3, [sp, #4]
    5bca:	685b      	ldr	r3, [r3, #4]
    5bcc:	6999      	ldr	r1, [r3, #24]
    5bce:	9b01      	ldr	r3, [sp, #4]
    5bd0:	689b      	ldr	r3, [r3, #8]
    5bd2:	2201      	movs	r2, #1
    5bd4:	409a      	lsls	r2, r3
    5bd6:	9b01      	ldr	r3, [sp, #4]
    5bd8:	685b      	ldr	r3, [r3, #4]
    5bda:	430a      	orrs	r2, r1
    5bdc:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    5bde:	f001 f867 	bl	6cb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    5be2:	9b01      	ldr	r3, [sp, #4]
    5be4:	681b      	ldr	r3, [r3, #0]
    5be6:	9a01      	ldr	r2, [sp, #4]
    5be8:	6892      	ldr	r2, [r2, #8]
    5bea:	9905      	ldr	r1, [sp, #20]
    5bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5bf0:	bf00      	nop
    5bf2:	b007      	add	sp, #28
    5bf4:	f85d fb04 	ldr.w	pc, [sp], #4

00005bf8 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    5bf8:	b500      	push	{lr}
    5bfa:	b085      	sub	sp, #20
    5bfc:	9001      	str	r0, [sp, #4]
    5bfe:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    5c00:	2300      	movs	r3, #0
    5c02:	9303      	str	r3, [sp, #12]
    5c04:	e00d      	b.n	5c22 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    5c06:	9a03      	ldr	r2, [sp, #12]
    5c08:	4613      	mov	r3, r2
    5c0a:	009b      	lsls	r3, r3, #2
    5c0c:	4413      	add	r3, r2
    5c0e:	00db      	lsls	r3, r3, #3
    5c10:	461a      	mov	r2, r3
    5c12:	9b00      	ldr	r3, [sp, #0]
    5c14:	4413      	add	r3, r2
    5c16:	4618      	mov	r0, r3
    5c18:	f7ff ff06 	bl	5a28 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    5c1c:	9b03      	ldr	r3, [sp, #12]
    5c1e:	3301      	adds	r3, #1
    5c20:	9303      	str	r3, [sp, #12]
    5c22:	9a03      	ldr	r2, [sp, #12]
    5c24:	9b01      	ldr	r3, [sp, #4]
    5c26:	429a      	cmp	r2, r3
    5c28:	d3ed      	bcc.n	5c06 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    5c2a:	2300      	movs	r3, #0
}
    5c2c:	4618      	mov	r0, r3
    5c2e:	b005      	add	sp, #20
    5c30:	f85d fb04 	ldr.w	pc, [sp], #4

00005c34 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    5c34:	b500      	push	{lr}
    5c36:	b087      	sub	sp, #28
    5c38:	9003      	str	r0, [sp, #12]
    5c3a:	9102      	str	r1, [sp, #8]
    5c3c:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    5c3e:	9a01      	ldr	r2, [sp, #4]
    5c40:	9902      	ldr	r1, [sp, #8]
    5c42:	9803      	ldr	r0, [sp, #12]
    5c44:	f7ff febc 	bl	59c0 <Port_Ci_Port_Ip_ConfigureInterleave>
    5c48:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    5c4a:	f001 f8a9 	bl	6da0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    5c4e:	9b03      	ldr	r3, [sp, #12]
    5c50:	9a02      	ldr	r2, [sp, #8]
    5c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5c56:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    5c58:	9b04      	ldr	r3, [sp, #16]
    5c5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    5c5e:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    5c60:	9b05      	ldr	r3, [sp, #20]
    5c62:	021b      	lsls	r3, r3, #8
    5c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5c68:	9a04      	ldr	r2, [sp, #16]
    5c6a:	4313      	orrs	r3, r2
    5c6c:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    5c6e:	9b03      	ldr	r3, [sp, #12]
    5c70:	9a02      	ldr	r2, [sp, #8]
    5c72:	9904      	ldr	r1, [sp, #16]
    5c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    5c78:	f001 f8be 	bl	6df8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    5c7c:	bf00      	nop
    5c7e:	b007      	add	sp, #28
    5c80:	f85d fb04 	ldr.w	pc, [sp], #4

00005c84 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5c84:	b500      	push	{lr}
    5c86:	b083      	sub	sp, #12
    5c88:	9001      	str	r0, [sp, #4]
    5c8a:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    5c8c:	f001 f8da 	bl	6e44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    5c90:	9b01      	ldr	r3, [sp, #4]
    5c92:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    5c96:	2101      	movs	r1, #1
    5c98:	9b00      	ldr	r3, [sp, #0]
    5c9a:	fa01 f303 	lsl.w	r3, r1, r3
    5c9e:	431a      	orrs	r2, r3
    5ca0:	9b01      	ldr	r3, [sp, #4]
    5ca2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    5ca6:	f001 f8f9 	bl	6e9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    5caa:	bf00      	nop
    5cac:	b003      	add	sp, #12
    5cae:	f85d fb04 	ldr.w	pc, [sp], #4

00005cb2 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5cb2:	b500      	push	{lr}
    5cb4:	b083      	sub	sp, #12
    5cb6:	9001      	str	r0, [sp, #4]
    5cb8:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    5cba:	f001 f915 	bl	6ee8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    5cbe:	9b01      	ldr	r3, [sp, #4]
    5cc0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    5cc4:	2101      	movs	r1, #1
    5cc6:	9b00      	ldr	r3, [sp, #0]
    5cc8:	fa01 f303 	lsl.w	r3, r1, r3
    5ccc:	43db      	mvns	r3, r3
    5cce:	401a      	ands	r2, r3
    5cd0:	9b01      	ldr	r3, [sp, #4]
    5cd2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    5cd6:	f001 f933 	bl	6f40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    5cda:	bf00      	nop
    5cdc:	b003      	add	sp, #12
    5cde:	f85d fb04 	ldr.w	pc, [sp], #4

00005ce2 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    5ce2:	b082      	sub	sp, #8
    5ce4:	9001      	str	r0, [sp, #4]
    5ce6:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    5ce8:	9b00      	ldr	r3, [sp, #0]
    5cea:	785b      	ldrb	r3, [r3, #1]
    5cec:	f003 0201 	and.w	r2, r3, #1
    5cf0:	9b01      	ldr	r3, [sp, #4]
    5cf2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    5cf6:	9b00      	ldr	r3, [sp, #0]
    5cf8:	789b      	ldrb	r3, [r3, #2]
    5cfa:	f003 021f 	and.w	r2, r3, #31
    5cfe:	9b01      	ldr	r3, [sp, #4]
    5d00:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    5d04:	bf00      	nop
    5d06:	b002      	add	sp, #8
    5d08:	4770      	bx	lr

00005d0a <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    5d0a:	b086      	sub	sp, #24
    5d0c:	9003      	str	r0, [sp, #12]
    5d0e:	9301      	str	r3, [sp, #4]
    5d10:	460b      	mov	r3, r1
    5d12:	f8ad 300a 	strh.w	r3, [sp, #10]
    5d16:	4613      	mov	r3, r2
    5d18:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    5d1c:	2300      	movs	r3, #0
    5d1e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    5d22:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5d26:	f043 0301 	orr.w	r3, r3, #1
    5d2a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    5d2e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5d32:	f043 0302 	orr.w	r3, r3, #2
    5d36:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    5d3a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5d3e:	f043 0310 	orr.w	r3, r3, #16
    5d42:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    5d46:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5d4e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    5d52:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5d56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    5d5a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    5d5e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    5d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    5d6a:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    5d6e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5d72:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5d76:	4013      	ands	r3, r2
    5d78:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    5d7c:	9b01      	ldr	r3, [sp, #4]
    5d7e:	2b00      	cmp	r3, #0
    5d80:	d003      	beq.n	5d8a <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    5d82:	9b01      	ldr	r3, [sp, #4]
    5d84:	2b01      	cmp	r3, #1
    5d86:	d00a      	beq.n	5d9e <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    5d88:	e013      	b.n	5db2 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    5d8a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d8e:	041a      	lsls	r2, r3, #16
    5d90:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5d94:	431a      	orrs	r2, r3
    5d96:	9b03      	ldr	r3, [sp, #12]
    5d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    5d9c:	e009      	b.n	5db2 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    5d9e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5da2:	041a      	lsls	r2, r3, #16
    5da4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5da8:	431a      	orrs	r2, r3
    5daa:	9b03      	ldr	r3, [sp, #12]
    5dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    5db0:	bf00      	nop
    }
}
    5db2:	bf00      	nop
    5db4:	b006      	add	sp, #24
    5db6:	4770      	bx	lr

00005db8 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    5db8:	b500      	push	{lr}
    5dba:	b087      	sub	sp, #28
    5dbc:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    5dbe:	9b01      	ldr	r3, [sp, #4]
    5dc0:	885b      	ldrh	r3, [r3, #2]
    5dc2:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    5dc6:	9b01      	ldr	r3, [sp, #4]
    5dc8:	689b      	ldr	r3, [r3, #8]
    5dca:	7a1b      	ldrb	r3, [r3, #8]
    5dcc:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    5dd0:	9b01      	ldr	r3, [sp, #4]
    5dd2:	689b      	ldr	r3, [r3, #8]
    5dd4:	681b      	ldr	r3, [r3, #0]
    5dd6:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    5dd8:	9b01      	ldr	r3, [sp, #4]
    5dda:	689b      	ldr	r3, [r3, #8]
    5ddc:	685b      	ldr	r3, [r3, #4]
    5dde:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5de0:	2300      	movs	r3, #0
    5de2:	f8ad 3016 	strh.w	r3, [sp, #22]
    5de6:	e111      	b.n	600c <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    5de8:	9b02      	ldr	r3, [sp, #8]
    5dea:	2b02      	cmp	r3, #2
    5dec:	d169      	bne.n	5ec2 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    5dee:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5df2:	2b01      	cmp	r3, #1
    5df4:	d11a      	bne.n	5e2c <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5df6:	9b01      	ldr	r3, [sp, #4]
    5df8:	685a      	ldr	r2, [r3, #4]
    5dfa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5dfe:	005b      	lsls	r3, r3, #1
    5e00:	4413      	add	r3, r2
    5e02:	881b      	ldrh	r3, [r3, #0]
    5e04:	f003 021f 	and.w	r2, r3, #31
    5e08:	9b01      	ldr	r3, [sp, #4]
    5e0a:	6859      	ldr	r1, [r3, #4]
    5e0c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e10:	005b      	lsls	r3, r3, #1
    5e12:	440b      	add	r3, r1
    5e14:	881b      	ldrh	r3, [r3, #0]
    5e16:	095b      	lsrs	r3, r3, #5
    5e18:	b29b      	uxth	r3, r3
    5e1a:	4619      	mov	r1, r3
    5e1c:	4b81      	ldr	r3, [pc, #516]	; (6024 <Port_Ipw_Init_UnusedPins+0x26c>)
    5e1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5e22:	2101      	movs	r1, #1
    5e24:	fa01 f202 	lsl.w	r2, r1, r2
    5e28:	605a      	str	r2, [r3, #4]
    5e2a:	e01d      	b.n	5e68 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    5e2c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5e30:	2b00      	cmp	r3, #0
    5e32:	d119      	bne.n	5e68 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5e34:	9b01      	ldr	r3, [sp, #4]
    5e36:	685a      	ldr	r2, [r3, #4]
    5e38:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e3c:	005b      	lsls	r3, r3, #1
    5e3e:	4413      	add	r3, r2
    5e40:	881b      	ldrh	r3, [r3, #0]
    5e42:	f003 021f 	and.w	r2, r3, #31
    5e46:	9b01      	ldr	r3, [sp, #4]
    5e48:	6859      	ldr	r1, [r3, #4]
    5e4a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e4e:	005b      	lsls	r3, r3, #1
    5e50:	440b      	add	r3, r1
    5e52:	881b      	ldrh	r3, [r3, #0]
    5e54:	095b      	lsrs	r3, r3, #5
    5e56:	b29b      	uxth	r3, r3
    5e58:	4619      	mov	r1, r3
    5e5a:	4b72      	ldr	r3, [pc, #456]	; (6024 <Port_Ipw_Init_UnusedPins+0x26c>)
    5e5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5e60:	2101      	movs	r1, #1
    5e62:	fa01 f202 	lsl.w	r2, r1, r2
    5e66:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5e68:	f001 f890 	bl	6f8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5e6c:	9b01      	ldr	r3, [sp, #4]
    5e6e:	685a      	ldr	r2, [r3, #4]
    5e70:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e74:	005b      	lsls	r3, r3, #1
    5e76:	4413      	add	r3, r2
    5e78:	881b      	ldrh	r3, [r3, #0]
    5e7a:	095b      	lsrs	r3, r3, #5
    5e7c:	b29b      	uxth	r3, r3
    5e7e:	461a      	mov	r2, r3
    5e80:	4b68      	ldr	r3, [pc, #416]	; (6024 <Port_Ipw_Init_UnusedPins+0x26c>)
    5e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5e86:	6959      	ldr	r1, [r3, #20]
    5e88:	9b01      	ldr	r3, [sp, #4]
    5e8a:	685a      	ldr	r2, [r3, #4]
    5e8c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5e90:	005b      	lsls	r3, r3, #1
    5e92:	4413      	add	r3, r2
    5e94:	881b      	ldrh	r3, [r3, #0]
    5e96:	f003 031f 	and.w	r3, r3, #31
    5e9a:	2201      	movs	r2, #1
    5e9c:	409a      	lsls	r2, r3
    5e9e:	9b01      	ldr	r3, [sp, #4]
    5ea0:	6858      	ldr	r0, [r3, #4]
    5ea2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ea6:	005b      	lsls	r3, r3, #1
    5ea8:	4403      	add	r3, r0
    5eaa:	881b      	ldrh	r3, [r3, #0]
    5eac:	095b      	lsrs	r3, r3, #5
    5eae:	b29b      	uxth	r3, r3
    5eb0:	4618      	mov	r0, r3
    5eb2:	4b5c      	ldr	r3, [pc, #368]	; (6024 <Port_Ipw_Init_UnusedPins+0x26c>)
    5eb4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5eb8:	430a      	orrs	r2, r1
    5eba:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5ebc:	f001 f892 	bl	6fe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    5ec0:	e086      	b.n	5fd0 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5ec2:	f001 f863 	bl	6f8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    5ec6:	9b01      	ldr	r3, [sp, #4]
    5ec8:	685a      	ldr	r2, [r3, #4]
    5eca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ece:	005b      	lsls	r3, r3, #1
    5ed0:	4413      	add	r3, r2
    5ed2:	881b      	ldrh	r3, [r3, #0]
    5ed4:	095b      	lsrs	r3, r3, #5
    5ed6:	b29b      	uxth	r3, r3
    5ed8:	461a      	mov	r2, r3
    5eda:	4b52      	ldr	r3, [pc, #328]	; (6024 <Port_Ipw_Init_UnusedPins+0x26c>)
    5edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5ee0:	6959      	ldr	r1, [r3, #20]
    5ee2:	9b01      	ldr	r3, [sp, #4]
    5ee4:	685a      	ldr	r2, [r3, #4]
    5ee6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5eea:	005b      	lsls	r3, r3, #1
    5eec:	4413      	add	r3, r2
    5eee:	881b      	ldrh	r3, [r3, #0]
    5ef0:	f003 031f 	and.w	r3, r3, #31
    5ef4:	2201      	movs	r2, #1
    5ef6:	fa02 f303 	lsl.w	r3, r2, r3
    5efa:	43da      	mvns	r2, r3
    5efc:	9b01      	ldr	r3, [sp, #4]
    5efe:	6858      	ldr	r0, [r3, #4]
    5f00:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5f04:	005b      	lsls	r3, r3, #1
    5f06:	4403      	add	r3, r0
    5f08:	881b      	ldrh	r3, [r3, #0]
    5f0a:	095b      	lsrs	r3, r3, #5
    5f0c:	b29b      	uxth	r3, r3
    5f0e:	4618      	mov	r0, r3
    5f10:	4b44      	ldr	r3, [pc, #272]	; (6024 <Port_Ipw_Init_UnusedPins+0x26c>)
    5f12:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5f16:	400a      	ands	r2, r1
    5f18:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5f1a:	f001 f863 	bl	6fe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    5f1e:	f001 f887 	bl	7030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5f22:	9b01      	ldr	r3, [sp, #4]
    5f24:	685a      	ldr	r2, [r3, #4]
    5f26:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5f2a:	005b      	lsls	r3, r3, #1
    5f2c:	4413      	add	r3, r2
    5f2e:	881b      	ldrh	r3, [r3, #0]
    5f30:	095b      	lsrs	r3, r3, #5
    5f32:	b29b      	uxth	r3, r3
    5f34:	461a      	mov	r2, r3
    5f36:	4b3b      	ldr	r3, [pc, #236]	; (6024 <Port_Ipw_Init_UnusedPins+0x26c>)
    5f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f3c:	6999      	ldr	r1, [r3, #24]
    5f3e:	9b01      	ldr	r3, [sp, #4]
    5f40:	685a      	ldr	r2, [r3, #4]
    5f42:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5f46:	005b      	lsls	r3, r3, #1
    5f48:	4413      	add	r3, r2
    5f4a:	881b      	ldrh	r3, [r3, #0]
    5f4c:	f003 031f 	and.w	r3, r3, #31
    5f50:	2201      	movs	r2, #1
    5f52:	fa02 f303 	lsl.w	r3, r2, r3
    5f56:	43da      	mvns	r2, r3
    5f58:	9b01      	ldr	r3, [sp, #4]
    5f5a:	6858      	ldr	r0, [r3, #4]
    5f5c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5f60:	005b      	lsls	r3, r3, #1
    5f62:	4403      	add	r3, r0
    5f64:	881b      	ldrh	r3, [r3, #0]
    5f66:	095b      	lsrs	r3, r3, #5
    5f68:	b29b      	uxth	r3, r3
    5f6a:	4618      	mov	r0, r3
    5f6c:	4b2d      	ldr	r3, [pc, #180]	; (6024 <Port_Ipw_Init_UnusedPins+0x26c>)
    5f6e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5f72:	400a      	ands	r2, r1
    5f74:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    5f76:	9b02      	ldr	r3, [sp, #8]
    5f78:	2b03      	cmp	r3, #3
    5f7a:	d127      	bne.n	5fcc <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5f7c:	9b01      	ldr	r3, [sp, #4]
    5f7e:	685a      	ldr	r2, [r3, #4]
    5f80:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5f84:	005b      	lsls	r3, r3, #1
    5f86:	4413      	add	r3, r2
    5f88:	881b      	ldrh	r3, [r3, #0]
    5f8a:	095b      	lsrs	r3, r3, #5
    5f8c:	b29b      	uxth	r3, r3
    5f8e:	461a      	mov	r2, r3
    5f90:	4b24      	ldr	r3, [pc, #144]	; (6024 <Port_Ipw_Init_UnusedPins+0x26c>)
    5f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f96:	6999      	ldr	r1, [r3, #24]
    5f98:	9b01      	ldr	r3, [sp, #4]
    5f9a:	685a      	ldr	r2, [r3, #4]
    5f9c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5fa0:	005b      	lsls	r3, r3, #1
    5fa2:	4413      	add	r3, r2
    5fa4:	881b      	ldrh	r3, [r3, #0]
    5fa6:	f003 031f 	and.w	r3, r3, #31
    5faa:	2201      	movs	r2, #1
    5fac:	409a      	lsls	r2, r3
    5fae:	9b01      	ldr	r3, [sp, #4]
    5fb0:	6858      	ldr	r0, [r3, #4]
    5fb2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5fb6:	005b      	lsls	r3, r3, #1
    5fb8:	4403      	add	r3, r0
    5fba:	881b      	ldrh	r3, [r3, #0]
    5fbc:	095b      	lsrs	r3, r3, #5
    5fbe:	b29b      	uxth	r3, r3
    5fc0:	4618      	mov	r0, r3
    5fc2:	4b18      	ldr	r3, [pc, #96]	; (6024 <Port_Ipw_Init_UnusedPins+0x26c>)
    5fc4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5fc8:	430a      	orrs	r2, r1
    5fca:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    5fcc:	f001 f85c 	bl	7088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    5fd0:	9b01      	ldr	r3, [sp, #4]
    5fd2:	685a      	ldr	r2, [r3, #4]
    5fd4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5fd8:	005b      	lsls	r3, r3, #1
    5fda:	4413      	add	r3, r2
    5fdc:	881b      	ldrh	r3, [r3, #0]
    5fde:	095b      	lsrs	r3, r3, #5
    5fe0:	b29b      	uxth	r3, r3
    5fe2:	461a      	mov	r2, r3
    5fe4:	4b10      	ldr	r3, [pc, #64]	; (6028 <Port_Ipw_Init_UnusedPins+0x270>)
    5fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5fea:	9a01      	ldr	r2, [sp, #4]
    5fec:	6851      	ldr	r1, [r2, #4]
    5fee:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5ff2:	0052      	lsls	r2, r2, #1
    5ff4:	440a      	add	r2, r1
    5ff6:	8812      	ldrh	r2, [r2, #0]
    5ff8:	f002 021f 	and.w	r2, r2, #31
    5ffc:	9903      	ldr	r1, [sp, #12]
    5ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6002:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6006:	3301      	adds	r3, #1
    6008:	f8ad 3016 	strh.w	r3, [sp, #22]
    600c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6010:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6014:	429a      	cmp	r2, r3
    6016:	f4ff aee7 	bcc.w	5de8 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    601a:	bf00      	nop
    601c:	bf00      	nop
    601e:	b007      	add	sp, #28
    6020:	f85d fb04 	ldr.w	pc, [sp], #4
    6024:	00008378 	.word	0x00008378
    6028:	00008364 	.word	0x00008364

0000602c <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    602c:	b500      	push	{lr}
    602e:	b085      	sub	sp, #20
    6030:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    6032:	9b01      	ldr	r3, [sp, #4]
    6034:	7c1b      	ldrb	r3, [r3, #16]
    6036:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    603a:	2300      	movs	r3, #0
    603c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6040:	e035      	b.n	60ae <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    6042:	9b01      	ldr	r3, [sp, #4]
    6044:	695a      	ldr	r2, [r3, #20]
    6046:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    604a:	00db      	lsls	r3, r3, #3
    604c:	4413      	add	r3, r2
    604e:	781b      	ldrb	r3, [r3, #0]
    6050:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6054:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6058:	4a1f      	ldr	r2, [pc, #124]	; (60d8 <Port_Ipw_Init+0xac>)
    605a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    605e:	9b01      	ldr	r3, [sp, #4]
    6060:	695a      	ldr	r2, [r3, #20]
    6062:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6066:	00db      	lsls	r3, r3, #3
    6068:	4413      	add	r3, r2
    606a:	4619      	mov	r1, r3
    606c:	f7ff fe39 	bl	5ce2 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6070:	f001 f978 	bl	7364 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6074:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6078:	4a17      	ldr	r2, [pc, #92]	; (60d8 <Port_Ipw_Init+0xac>)
    607a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    607e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    6082:	9b01      	ldr	r3, [sp, #4]
    6084:	695a      	ldr	r2, [r3, #20]
    6086:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    608a:	00db      	lsls	r3, r3, #3
    608c:	4413      	add	r3, r2
    608e:	685a      	ldr	r2, [r3, #4]
    6090:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6094:	4810      	ldr	r0, [pc, #64]	; (60d8 <Port_Ipw_Init+0xac>)
    6096:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    609a:	430a      	orrs	r2, r1
    609c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    60a0:	f001 f98c 	bl	73bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    60a4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    60a8:	3301      	adds	r3, #1
    60aa:	f8ad 300e 	strh.w	r3, [sp, #14]
    60ae:	f89d 300d 	ldrb.w	r3, [sp, #13]
    60b2:	b29b      	uxth	r3, r3
    60b4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    60b8:	429a      	cmp	r2, r3
    60ba:	d3c2      	bcc.n	6042 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    60bc:	9b01      	ldr	r3, [sp, #4]
    60be:	6a1b      	ldr	r3, [r3, #32]
    60c0:	4619      	mov	r1, r3
    60c2:	2001      	movs	r0, #1
    60c4:	f7ff fd98 	bl	5bf8 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    60c8:	9801      	ldr	r0, [sp, #4]
    60ca:	f7ff fe75 	bl	5db8 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    60ce:	bf00      	nop
    60d0:	b005      	add	sp, #20
    60d2:	f85d fb04 	ldr.w	pc, [sp], #4
    60d6:	bf00      	nop
    60d8:	00008364 	.word	0x00008364

000060dc <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    60dc:	b500      	push	{lr}
    60de:	b085      	sub	sp, #20
    60e0:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    60e2:	9b01      	ldr	r3, [sp, #4]
    60e4:	881b      	ldrh	r3, [r3, #0]
    60e6:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    60ea:	2300      	movs	r3, #0
    60ec:	f8ad 300e 	strh.w	r3, [sp, #14]
    60f0:	e0d2      	b.n	6298 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    60f2:	9b01      	ldr	r3, [sp, #4]
    60f4:	68d9      	ldr	r1, [r3, #12]
    60f6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    60fa:	4613      	mov	r3, r2
    60fc:	009b      	lsls	r3, r3, #2
    60fe:	4413      	add	r3, r2
    6100:	009b      	lsls	r3, r3, #2
    6102:	440b      	add	r3, r1
    6104:	7c5b      	ldrb	r3, [r3, #17]
    6106:	f083 0301 	eor.w	r3, r3, #1
    610a:	b2db      	uxtb	r3, r3
    610c:	2b00      	cmp	r3, #0
    610e:	f000 80be 	beq.w	628e <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    6112:	9b01      	ldr	r3, [sp, #4]
    6114:	68d9      	ldr	r1, [r3, #12]
    6116:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    611a:	4613      	mov	r3, r2
    611c:	009b      	lsls	r3, r3, #2
    611e:	4413      	add	r3, r2
    6120:	009b      	lsls	r3, r3, #2
    6122:	440b      	add	r3, r1
    6124:	7c1b      	ldrb	r3, [r3, #16]
    6126:	2b00      	cmp	r3, #0
    6128:	f000 80b1 	beq.w	628e <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    612c:	9b01      	ldr	r3, [sp, #4]
    612e:	68d9      	ldr	r1, [r3, #12]
    6130:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6134:	4613      	mov	r3, r2
    6136:	009b      	lsls	r3, r3, #2
    6138:	4413      	add	r3, r2
    613a:	009b      	lsls	r3, r3, #2
    613c:	440b      	add	r3, r1
    613e:	881b      	ldrh	r3, [r3, #0]
    6140:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6144:	9b01      	ldr	r3, [sp, #4]
    6146:	68d9      	ldr	r1, [r3, #12]
    6148:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    614c:	4613      	mov	r3, r2
    614e:	009b      	lsls	r3, r3, #2
    6150:	4413      	add	r3, r2
    6152:	009b      	lsls	r3, r3, #2
    6154:	440b      	add	r3, r1
    6156:	68db      	ldr	r3, [r3, #12]
    6158:	2b02      	cmp	r3, #2
    615a:	d11d      	bne.n	6198 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    615c:	f001 fa4a 	bl	75f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6160:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6164:	095b      	lsrs	r3, r3, #5
    6166:	b29b      	uxth	r3, r3
    6168:	461a      	mov	r2, r3
    616a:	4b51      	ldr	r3, [pc, #324]	; (62b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    616c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6170:	6959      	ldr	r1, [r3, #20]
    6172:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6176:	f003 031f 	and.w	r3, r3, #31
    617a:	2201      	movs	r2, #1
    617c:	409a      	lsls	r2, r3
    617e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6182:	095b      	lsrs	r3, r3, #5
    6184:	b29b      	uxth	r3, r3
    6186:	4618      	mov	r0, r3
    6188:	4b49      	ldr	r3, [pc, #292]	; (62b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    618a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    618e:	430a      	orrs	r2, r1
    6190:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6192:	f001 fa5b 	bl	764c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    6196:	e07a      	b.n	628e <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    6198:	9b01      	ldr	r3, [sp, #4]
    619a:	68d9      	ldr	r1, [r3, #12]
    619c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    61a0:	4613      	mov	r3, r2
    61a2:	009b      	lsls	r3, r3, #2
    61a4:	4413      	add	r3, r2
    61a6:	009b      	lsls	r3, r3, #2
    61a8:	440b      	add	r3, r1
    61aa:	68db      	ldr	r3, [r3, #12]
    61ac:	2b01      	cmp	r3, #1
    61ae:	d00b      	beq.n	61c8 <Port_Ipw_RefreshPortDirection+0xec>
    61b0:	9b01      	ldr	r3, [sp, #4]
    61b2:	68d9      	ldr	r1, [r3, #12]
    61b4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    61b8:	4613      	mov	r3, r2
    61ba:	009b      	lsls	r3, r3, #2
    61bc:	4413      	add	r3, r2
    61be:	009b      	lsls	r3, r3, #2
    61c0:	440b      	add	r3, r1
    61c2:	68db      	ldr	r3, [r3, #12]
    61c4:	2b03      	cmp	r3, #3
    61c6:	d162      	bne.n	628e <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    61c8:	f001 fa14 	bl	75f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    61cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    61d0:	095b      	lsrs	r3, r3, #5
    61d2:	b29b      	uxth	r3, r3
    61d4:	461a      	mov	r2, r3
    61d6:	4b36      	ldr	r3, [pc, #216]	; (62b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    61d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    61dc:	6959      	ldr	r1, [r3, #20]
    61de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    61e2:	f003 031f 	and.w	r3, r3, #31
    61e6:	2201      	movs	r2, #1
    61e8:	fa02 f303 	lsl.w	r3, r2, r3
    61ec:	43da      	mvns	r2, r3
    61ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    61f2:	095b      	lsrs	r3, r3, #5
    61f4:	b29b      	uxth	r3, r3
    61f6:	4618      	mov	r0, r3
    61f8:	4b2d      	ldr	r3, [pc, #180]	; (62b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    61fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    61fe:	400a      	ands	r2, r1
    6200:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6202:	f001 fa23 	bl	764c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    6206:	f001 fa47 	bl	7698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    620a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    620e:	095b      	lsrs	r3, r3, #5
    6210:	b29b      	uxth	r3, r3
    6212:	461a      	mov	r2, r3
    6214:	4b26      	ldr	r3, [pc, #152]	; (62b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    621a:	6999      	ldr	r1, [r3, #24]
    621c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6220:	f003 031f 	and.w	r3, r3, #31
    6224:	2201      	movs	r2, #1
    6226:	fa02 f303 	lsl.w	r3, r2, r3
    622a:	43da      	mvns	r2, r3
    622c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6230:	095b      	lsrs	r3, r3, #5
    6232:	b29b      	uxth	r3, r3
    6234:	4618      	mov	r0, r3
    6236:	4b1e      	ldr	r3, [pc, #120]	; (62b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6238:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    623c:	400a      	ands	r2, r1
    623e:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6240:	9b01      	ldr	r3, [sp, #4]
    6242:	68d9      	ldr	r1, [r3, #12]
    6244:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6248:	4613      	mov	r3, r2
    624a:	009b      	lsls	r3, r3, #2
    624c:	4413      	add	r3, r2
    624e:	009b      	lsls	r3, r3, #2
    6250:	440b      	add	r3, r1
    6252:	68db      	ldr	r3, [r3, #12]
    6254:	2b03      	cmp	r3, #3
    6256:	d118      	bne.n	628a <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6258:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    625c:	095b      	lsrs	r3, r3, #5
    625e:	b29b      	uxth	r3, r3
    6260:	461a      	mov	r2, r3
    6262:	4b13      	ldr	r3, [pc, #76]	; (62b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6268:	6999      	ldr	r1, [r3, #24]
    626a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    626e:	f003 031f 	and.w	r3, r3, #31
    6272:	2201      	movs	r2, #1
    6274:	409a      	lsls	r2, r3
    6276:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    627a:	095b      	lsrs	r3, r3, #5
    627c:	b29b      	uxth	r3, r3
    627e:	4618      	mov	r0, r3
    6280:	4b0b      	ldr	r3, [pc, #44]	; (62b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6282:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6286:	430a      	orrs	r2, r1
    6288:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    628a:	f001 fa31 	bl	76f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    628e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6292:	3301      	adds	r3, #1
    6294:	f8ad 300e 	strh.w	r3, [sp, #14]
    6298:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    629c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    62a0:	429a      	cmp	r2, r3
    62a2:	f4ff af26 	bcc.w	60f2 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    62a6:	bf00      	nop
    62a8:	bf00      	nop
    62aa:	b005      	add	sp, #20
    62ac:	f85d fb04 	ldr.w	pc, [sp], #4
    62b0:	00008378 	.word	0x00008378

000062b4 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    62b4:	b500      	push	{lr}
    62b6:	b085      	sub	sp, #20
    62b8:	4603      	mov	r3, r0
    62ba:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    62be:	2300      	movs	r3, #0
    62c0:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    62c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    62c8:	4618      	mov	r0, r3
    62ca:	f000 f871 	bl	63b0 <Dio_Ipw_ReadChannel>
    62ce:	4603      	mov	r3, r0
    62d0:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    62d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    62d8:	4618      	mov	r0, r3
    62da:	b005      	add	sp, #20
    62dc:	f85d fb04 	ldr.w	pc, [sp], #4

000062e0 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    62e0:	b500      	push	{lr}
    62e2:	b083      	sub	sp, #12
    62e4:	4603      	mov	r3, r0
    62e6:	460a      	mov	r2, r1
    62e8:	f8ad 3006 	strh.w	r3, [sp, #6]
    62ec:	4613      	mov	r3, r2
    62ee:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    62f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
    62f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    62fa:	4611      	mov	r1, r2
    62fc:	4618      	mov	r0, r3
    62fe:	f000 f87d 	bl	63fc <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    6302:	bf00      	nop
    6304:	b003      	add	sp, #12
    6306:	f85d fb04 	ldr.w	pc, [sp], #4

0000630a <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    630a:	b500      	push	{lr}
    630c:	b085      	sub	sp, #20
    630e:	4603      	mov	r3, r0
    6310:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6314:	2300      	movs	r3, #0
    6316:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    631a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    631e:	4618      	mov	r0, r3
    6320:	f000 f892 	bl	6448 <Dio_Ipw_FlipChannel>
    6324:	4603      	mov	r3, r0
    6326:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    632a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    632e:	4618      	mov	r0, r3
    6330:	b005      	add	sp, #20
    6332:	f85d fb04 	ldr.w	pc, [sp], #4

00006336 <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    6336:	b500      	push	{lr}
    6338:	b085      	sub	sp, #20
    633a:	4603      	mov	r3, r0
    633c:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6340:	2300      	movs	r3, #0
    6342:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    6344:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6348:	4618      	mov	r0, r3
    634a:	f000 f8b3 	bl	64b4 <Dio_Ipw_ReadPort>
    634e:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    6350:	9b03      	ldr	r3, [sp, #12]
}
    6352:	4618      	mov	r0, r3
    6354:	b005      	add	sp, #20
    6356:	f85d fb04 	ldr.w	pc, [sp], #4

0000635a <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    635a:	b500      	push	{lr}
    635c:	b083      	sub	sp, #12
    635e:	4603      	mov	r3, r0
    6360:	9100      	str	r1, [sp, #0]
    6362:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    6366:	f89d 3007 	ldrb.w	r3, [sp, #7]
    636a:	9900      	ldr	r1, [sp, #0]
    636c:	4618      	mov	r0, r3
    636e:	f000 f8b9 	bl	64e4 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    6372:	bf00      	nop
    6374:	b003      	add	sp, #12
    6376:	f85d fb04 	ldr.w	pc, [sp], #4

0000637a <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    637a:	b500      	push	{lr}
    637c:	b085      	sub	sp, #20
    637e:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6380:	2300      	movs	r3, #0
    6382:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    6384:	9801      	ldr	r0, [sp, #4]
    6386:	f000 f8c5 	bl	6514 <Dio_Ipw_ReadChannelGroup>
    638a:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    638c:	9b03      	ldr	r3, [sp, #12]
}
    638e:	4618      	mov	r0, r3
    6390:	b005      	add	sp, #20
    6392:	f85d fb04 	ldr.w	pc, [sp], #4

00006396 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    6396:	b500      	push	{lr}
    6398:	b083      	sub	sp, #12
    639a:	9001      	str	r0, [sp, #4]
    639c:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    639e:	9900      	ldr	r1, [sp, #0]
    63a0:	9801      	ldr	r0, [sp, #4]
    63a2:	f000 f8d7 	bl	6554 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    63a6:	bf00      	nop
    63a8:	b003      	add	sp, #12
    63aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000063b0 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    63b0:	b500      	push	{lr}
    63b2:	b087      	sub	sp, #28
    63b4:	4603      	mov	r3, r0
    63b6:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    63ba:	2300      	movs	r3, #0
    63bc:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    63c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    63c4:	095b      	lsrs	r3, r3, #5
    63c6:	b29b      	uxth	r3, r3
    63c8:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    63ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    63ce:	f003 031f 	and.w	r3, r3, #31
    63d2:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    63d4:	4a08      	ldr	r2, [pc, #32]	; (63f8 <Dio_Ipw_ReadChannel+0x48>)
    63d6:	9b04      	ldr	r3, [sp, #16]
    63d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63dc:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    63de:	9903      	ldr	r1, [sp, #12]
    63e0:	9802      	ldr	r0, [sp, #8]
    63e2:	f000 f940 	bl	6666 <Gpio_Dio_Ip_ReadPin>
    63e6:	4603      	mov	r3, r0
    63e8:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    63ec:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    63f0:	4618      	mov	r0, r3
    63f2:	b007      	add	sp, #28
    63f4:	f85d fb04 	ldr.w	pc, [sp], #4
    63f8:	1fff8b24 	.word	0x1fff8b24

000063fc <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    63fc:	b500      	push	{lr}
    63fe:	b087      	sub	sp, #28
    6400:	4603      	mov	r3, r0
    6402:	460a      	mov	r2, r1
    6404:	f8ad 3006 	strh.w	r3, [sp, #6]
    6408:	4613      	mov	r3, r2
    640a:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    640e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6412:	095b      	lsrs	r3, r3, #5
    6414:	b29b      	uxth	r3, r3
    6416:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6418:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    641c:	f003 031f 	and.w	r3, r3, #31
    6420:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6422:	4a08      	ldr	r2, [pc, #32]	; (6444 <Dio_Ipw_WriteChannel+0x48>)
    6424:	9b05      	ldr	r3, [sp, #20]
    6426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    642a:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    642c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6430:	461a      	mov	r2, r3
    6432:	9904      	ldr	r1, [sp, #16]
    6434:	9803      	ldr	r0, [sp, #12]
    6436:	f000 f8b7 	bl	65a8 <Gpio_Dio_Ip_WritePin>
}
    643a:	bf00      	nop
    643c:	b007      	add	sp, #28
    643e:	f85d fb04 	ldr.w	pc, [sp], #4
    6442:	bf00      	nop
    6444:	1fff8b24 	.word	0x1fff8b24

00006448 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6448:	b500      	push	{lr}
    644a:	b089      	sub	sp, #36	; 0x24
    644c:	4603      	mov	r3, r0
    644e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6452:	2300      	movs	r3, #0
    6454:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6458:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    645c:	095b      	lsrs	r3, r3, #5
    645e:	b29b      	uxth	r3, r3
    6460:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6462:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6466:	f003 031f 	and.w	r3, r3, #31
    646a:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    646c:	4a10      	ldr	r2, [pc, #64]	; (64b0 <Dio_Ipw_FlipChannel+0x68>)
    646e:	9b06      	ldr	r3, [sp, #24]
    6470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6474:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    6476:	2201      	movs	r2, #1
    6478:	9b05      	ldr	r3, [sp, #20]
    647a:	fa02 f303 	lsl.w	r3, r2, r3
    647e:	4619      	mov	r1, r3
    6480:	9804      	ldr	r0, [sp, #16]
    6482:	f000 f8dc 	bl	663e <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    6486:	9804      	ldr	r0, [sp, #16]
    6488:	f000 f8bc 	bl	6604 <Gpio_Dio_Ip_GetPinsOutput>
    648c:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    648e:	2201      	movs	r2, #1
    6490:	9b05      	ldr	r3, [sp, #20]
    6492:	409a      	lsls	r2, r3
    6494:	9b03      	ldr	r3, [sp, #12]
    6496:	401a      	ands	r2, r3
    6498:	9b05      	ldr	r3, [sp, #20]
    649a:	fa22 f303 	lsr.w	r3, r2, r3
    649e:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    64a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    64a6:	4618      	mov	r0, r3
    64a8:	b009      	add	sp, #36	; 0x24
    64aa:	f85d fb04 	ldr.w	pc, [sp], #4
    64ae:	bf00      	nop
    64b0:	1fff8b24 	.word	0x1fff8b24

000064b4 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    64b4:	b500      	push	{lr}
    64b6:	b085      	sub	sp, #20
    64b8:	4603      	mov	r3, r0
    64ba:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    64be:	2300      	movs	r3, #0
    64c0:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    64c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64c6:	4a06      	ldr	r2, [pc, #24]	; (64e0 <Dio_Ipw_ReadPort+0x2c>)
    64c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64cc:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    64ce:	9802      	ldr	r0, [sp, #8]
    64d0:	f000 f8be 	bl	6650 <Gpio_Dio_Ip_ReadPins>
    64d4:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    64d6:	9b03      	ldr	r3, [sp, #12]
}
    64d8:	4618      	mov	r0, r3
    64da:	b005      	add	sp, #20
    64dc:	f85d fb04 	ldr.w	pc, [sp], #4
    64e0:	1fff8b24 	.word	0x1fff8b24

000064e4 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    64e4:	b500      	push	{lr}
    64e6:	b085      	sub	sp, #20
    64e8:	4603      	mov	r3, r0
    64ea:	9100      	str	r1, [sp, #0]
    64ec:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    64f0:	9b00      	ldr	r3, [sp, #0]
    64f2:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    64f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64f8:	4a05      	ldr	r2, [pc, #20]	; (6510 <Dio_Ipw_WritePort+0x2c>)
    64fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64fe:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    6500:	9903      	ldr	r1, [sp, #12]
    6502:	9802      	ldr	r0, [sp, #8]
    6504:	f000 f875 	bl	65f2 <Gpio_Dio_Ip_WritePins>
}
    6508:	bf00      	nop
    650a:	b005      	add	sp, #20
    650c:	f85d fb04 	ldr.w	pc, [sp], #4
    6510:	1fff8b24 	.word	0x1fff8b24

00006514 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    6514:	b500      	push	{lr}
    6516:	b087      	sub	sp, #28
    6518:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    651a:	2300      	movs	r3, #0
    651c:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    651e:	9b01      	ldr	r3, [sp, #4]
    6520:	781b      	ldrb	r3, [r3, #0]
    6522:	461a      	mov	r2, r3
    6524:	4b0a      	ldr	r3, [pc, #40]	; (6550 <Dio_Ipw_ReadChannelGroup+0x3c>)
    6526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    652a:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    652c:	9804      	ldr	r0, [sp, #16]
    652e:	f000 f88f 	bl	6650 <Gpio_Dio_Ip_ReadPins>
    6532:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    6534:	9b01      	ldr	r3, [sp, #4]
    6536:	685a      	ldr	r2, [r3, #4]
    6538:	9b03      	ldr	r3, [sp, #12]
    653a:	4013      	ands	r3, r2
    653c:	9a01      	ldr	r2, [sp, #4]
    653e:	7852      	ldrb	r2, [r2, #1]
    6540:	40d3      	lsrs	r3, r2
    6542:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    6544:	9b05      	ldr	r3, [sp, #20]
}
    6546:	4618      	mov	r0, r3
    6548:	b007      	add	sp, #28
    654a:	f85d fb04 	ldr.w	pc, [sp], #4
    654e:	bf00      	nop
    6550:	1fff8b24 	.word	0x1fff8b24

00006554 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    6554:	b500      	push	{lr}
    6556:	b087      	sub	sp, #28
    6558:	9001      	str	r0, [sp, #4]
    655a:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    655c:	9b01      	ldr	r3, [sp, #4]
    655e:	781b      	ldrb	r3, [r3, #0]
    6560:	461a      	mov	r2, r3
    6562:	4b10      	ldr	r3, [pc, #64]	; (65a4 <Dio_Ipw_WriteChannelGroup+0x50>)
    6564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6568:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    656a:	9b01      	ldr	r3, [sp, #4]
    656c:	785b      	ldrb	r3, [r3, #1]
    656e:	461a      	mov	r2, r3
    6570:	9b00      	ldr	r3, [sp, #0]
    6572:	fa03 f202 	lsl.w	r2, r3, r2
    6576:	9b01      	ldr	r3, [sp, #4]
    6578:	685b      	ldr	r3, [r3, #4]
    657a:	4013      	ands	r3, r2
    657c:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    657e:	9904      	ldr	r1, [sp, #16]
    6580:	9805      	ldr	r0, [sp, #20]
    6582:	f000 f84a 	bl	661a <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    6586:	9b04      	ldr	r3, [sp, #16]
    6588:	43da      	mvns	r2, r3
    658a:	9b01      	ldr	r3, [sp, #4]
    658c:	685b      	ldr	r3, [r3, #4]
    658e:	4013      	ands	r3, r2
    6590:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    6592:	9903      	ldr	r1, [sp, #12]
    6594:	9805      	ldr	r0, [sp, #20]
    6596:	f000 f849 	bl	662c <Gpio_Dio_Ip_ClearPins>

}
    659a:	bf00      	nop
    659c:	b007      	add	sp, #28
    659e:	f85d fb04 	ldr.w	pc, [sp], #4
    65a2:	bf00      	nop
    65a4:	1fff8b24 	.word	0x1fff8b24

000065a8 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    65a8:	b500      	push	{lr}
    65aa:	b087      	sub	sp, #28
    65ac:	9003      	str	r0, [sp, #12]
    65ae:	9102      	str	r1, [sp, #8]
    65b0:	4613      	mov	r3, r2
    65b2:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    65b6:	f000 f86d 	bl	6694 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    65ba:	9b03      	ldr	r3, [sp, #12]
    65bc:	681b      	ldr	r3, [r3, #0]
    65be:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    65c0:	2201      	movs	r2, #1
    65c2:	9b02      	ldr	r3, [sp, #8]
    65c4:	fa02 f303 	lsl.w	r3, r2, r3
    65c8:	43db      	mvns	r3, r3
    65ca:	9a05      	ldr	r2, [sp, #20]
    65cc:	4013      	ands	r3, r2
    65ce:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    65d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    65d4:	9b02      	ldr	r3, [sp, #8]
    65d6:	fa02 f303 	lsl.w	r3, r2, r3
    65da:	9a05      	ldr	r2, [sp, #20]
    65dc:	4313      	orrs	r3, r2
    65de:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    65e0:	9b03      	ldr	r3, [sp, #12]
    65e2:	9a05      	ldr	r2, [sp, #20]
    65e4:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    65e6:	f000 f881 	bl	66ec <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    65ea:	bf00      	nop
    65ec:	b007      	add	sp, #28
    65ee:	f85d fb04 	ldr.w	pc, [sp], #4

000065f2 <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    65f2:	b082      	sub	sp, #8
    65f4:	9001      	str	r0, [sp, #4]
    65f6:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    65f8:	9b01      	ldr	r3, [sp, #4]
    65fa:	9a00      	ldr	r2, [sp, #0]
    65fc:	601a      	str	r2, [r3, #0]
}
    65fe:	bf00      	nop
    6600:	b002      	add	sp, #8
    6602:	4770      	bx	lr

00006604 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    6604:	b084      	sub	sp, #16
    6606:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6608:	2300      	movs	r3, #0
    660a:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    660c:	9b01      	ldr	r3, [sp, #4]
    660e:	681b      	ldr	r3, [r3, #0]
    6610:	9303      	str	r3, [sp, #12]
    return returnValue;
    6612:	9b03      	ldr	r3, [sp, #12]
}
    6614:	4618      	mov	r0, r3
    6616:	b004      	add	sp, #16
    6618:	4770      	bx	lr

0000661a <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    661a:	b082      	sub	sp, #8
    661c:	9001      	str	r0, [sp, #4]
    661e:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    6620:	9b01      	ldr	r3, [sp, #4]
    6622:	9a00      	ldr	r2, [sp, #0]
    6624:	605a      	str	r2, [r3, #4]
}
    6626:	bf00      	nop
    6628:	b002      	add	sp, #8
    662a:	4770      	bx	lr

0000662c <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    662c:	b082      	sub	sp, #8
    662e:	9001      	str	r0, [sp, #4]
    6630:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    6632:	9b01      	ldr	r3, [sp, #4]
    6634:	9a00      	ldr	r2, [sp, #0]
    6636:	609a      	str	r2, [r3, #8]
}
    6638:	bf00      	nop
    663a:	b002      	add	sp, #8
    663c:	4770      	bx	lr

0000663e <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    663e:	b082      	sub	sp, #8
    6640:	9001      	str	r0, [sp, #4]
    6642:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    6644:	9b01      	ldr	r3, [sp, #4]
    6646:	9a00      	ldr	r2, [sp, #0]
    6648:	60da      	str	r2, [r3, #12]
}
    664a:	bf00      	nop
    664c:	b002      	add	sp, #8
    664e:	4770      	bx	lr

00006650 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    6650:	b084      	sub	sp, #16
    6652:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6654:	2300      	movs	r3, #0
    6656:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    6658:	9b01      	ldr	r3, [sp, #4]
    665a:	691b      	ldr	r3, [r3, #16]
    665c:	9303      	str	r3, [sp, #12]
    return returnValue;
    665e:	9b03      	ldr	r3, [sp, #12]
}
    6660:	4618      	mov	r0, r3
    6662:	b004      	add	sp, #16
    6664:	4770      	bx	lr

00006666 <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    6666:	b084      	sub	sp, #16
    6668:	9001      	str	r0, [sp, #4]
    666a:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    666c:	2300      	movs	r3, #0
    666e:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    6672:	9b01      	ldr	r3, [sp, #4]
    6674:	691a      	ldr	r2, [r3, #16]
    6676:	2101      	movs	r1, #1
    6678:	9b00      	ldr	r3, [sp, #0]
    667a:	fa01 f303 	lsl.w	r3, r1, r3
    667e:	401a      	ands	r2, r3
    6680:	9b00      	ldr	r3, [sp, #0]
    6682:	fa22 f303 	lsr.w	r3, r2, r3
    6686:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    668a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    668e:	4618      	mov	r0, r3
    6690:	b004      	add	sp, #16
    6692:	4770      	bx	lr

00006694 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    6694:	b500      	push	{lr}
    6696:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6698:	f7fa fa1c 	bl	ad4 <Sys_GetCoreID>
    669c:	4603      	mov	r3, r0
    669e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    66a0:	4a10      	ldr	r2, [pc, #64]	; (66e4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    66a2:	9b01      	ldr	r3, [sp, #4]
    66a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66a8:	2b00      	cmp	r3, #0
    66aa:	d10d      	bne.n	66c8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    66ac:	f7fa f930 	bl	910 <Dio_schm_read_msr>
    66b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    66b2:	9b00      	ldr	r3, [sp, #0]
    66b4:	f003 0301 	and.w	r3, r3, #1
    66b8:	2b00      	cmp	r3, #0
    66ba:	d100      	bne.n	66be <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    66bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    66be:	490a      	ldr	r1, [pc, #40]	; (66e8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    66c0:	9b01      	ldr	r3, [sp, #4]
    66c2:	9a00      	ldr	r2, [sp, #0]
    66c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    66c8:	4a06      	ldr	r2, [pc, #24]	; (66e4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    66ca:	9b01      	ldr	r3, [sp, #4]
    66cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66d0:	1c5a      	adds	r2, r3, #1
    66d2:	4904      	ldr	r1, [pc, #16]	; (66e4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    66d4:	9b01      	ldr	r3, [sp, #4]
    66d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    66da:	bf00      	nop
    66dc:	b003      	add	sp, #12
    66de:	f85d fb04 	ldr.w	pc, [sp], #4
    66e2:	bf00      	nop
    66e4:	1fff8cfc 	.word	0x1fff8cfc
    66e8:	1fff8cf8 	.word	0x1fff8cf8

000066ec <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    66ec:	b500      	push	{lr}
    66ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    66f0:	f7fa f9f0 	bl	ad4 <Sys_GetCoreID>
    66f4:	4603      	mov	r3, r0
    66f6:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    66f8:	4a0d      	ldr	r2, [pc, #52]	; (6730 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    66fa:	9b01      	ldr	r3, [sp, #4]
    66fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6700:	1e5a      	subs	r2, r3, #1
    6702:	490b      	ldr	r1, [pc, #44]	; (6730 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    6704:	9b01      	ldr	r3, [sp, #4]
    6706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    670a:	4a0a      	ldr	r2, [pc, #40]	; (6734 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    670c:	9b01      	ldr	r3, [sp, #4]
    670e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6712:	f003 0301 	and.w	r3, r3, #1
    6716:	2b00      	cmp	r3, #0
    6718:	d106      	bne.n	6728 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    671a:	4a05      	ldr	r2, [pc, #20]	; (6730 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    671c:	9b01      	ldr	r3, [sp, #4]
    671e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6722:	2b00      	cmp	r3, #0
    6724:	d100      	bne.n	6728 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6726:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6728:	bf00      	nop
    672a:	b003      	add	sp, #12
    672c:	f85d fb04 	ldr.w	pc, [sp], #4
    6730:	1fff8cfc 	.word	0x1fff8cfc
    6734:	1fff8cf8 	.word	0x1fff8cf8

00006738 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    6738:	b500      	push	{lr}
    673a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    673c:	f7fa f9ca 	bl	ad4 <Sys_GetCoreID>
    6740:	4603      	mov	r3, r0
    6742:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    6744:	4a10      	ldr	r2, [pc, #64]	; (6788 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    6746:	9b01      	ldr	r3, [sp, #4]
    6748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    674c:	2b00      	cmp	r3, #0
    674e:	d10d      	bne.n	676c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6750:	f7fa f8de 	bl	910 <Dio_schm_read_msr>
    6754:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6756:	9b00      	ldr	r3, [sp, #0]
    6758:	f003 0301 	and.w	r3, r3, #1
    675c:	2b00      	cmp	r3, #0
    675e:	d100      	bne.n	6762 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6760:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    6762:	490a      	ldr	r1, [pc, #40]	; (678c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    6764:	9b01      	ldr	r3, [sp, #4]
    6766:	9a00      	ldr	r2, [sp, #0]
    6768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    676c:	4a06      	ldr	r2, [pc, #24]	; (6788 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    676e:	9b01      	ldr	r3, [sp, #4]
    6770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6774:	1c5a      	adds	r2, r3, #1
    6776:	4904      	ldr	r1, [pc, #16]	; (6788 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    6778:	9b01      	ldr	r3, [sp, #4]
    677a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    677e:	bf00      	nop
    6780:	b003      	add	sp, #12
    6782:	f85d fb04 	ldr.w	pc, [sp], #4
    6786:	bf00      	nop
    6788:	1fff8d04 	.word	0x1fff8d04
    678c:	1fff8d00 	.word	0x1fff8d00

00006790 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    6790:	b500      	push	{lr}
    6792:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6794:	f7fa f99e 	bl	ad4 <Sys_GetCoreID>
    6798:	4603      	mov	r3, r0
    679a:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    679c:	4a0d      	ldr	r2, [pc, #52]	; (67d4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    679e:	9b01      	ldr	r3, [sp, #4]
    67a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67a4:	1e5a      	subs	r2, r3, #1
    67a6:	490b      	ldr	r1, [pc, #44]	; (67d4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    67a8:	9b01      	ldr	r3, [sp, #4]
    67aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    67ae:	4a0a      	ldr	r2, [pc, #40]	; (67d8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    67b0:	9b01      	ldr	r3, [sp, #4]
    67b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67b6:	f003 0301 	and.w	r3, r3, #1
    67ba:	2b00      	cmp	r3, #0
    67bc:	d106      	bne.n	67cc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    67be:	4a05      	ldr	r2, [pc, #20]	; (67d4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    67c0:	9b01      	ldr	r3, [sp, #4]
    67c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67c6:	2b00      	cmp	r3, #0
    67c8:	d100      	bne.n	67cc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    67ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    67cc:	bf00      	nop
    67ce:	b003      	add	sp, #12
    67d0:	f85d fb04 	ldr.w	pc, [sp], #4
    67d4:	1fff8d04 	.word	0x1fff8d04
    67d8:	1fff8d00 	.word	0x1fff8d00

000067dc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    67dc:	b500      	push	{lr}
    67de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    67e0:	f7fa f978 	bl	ad4 <Sys_GetCoreID>
    67e4:	4603      	mov	r3, r0
    67e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    67e8:	4a10      	ldr	r2, [pc, #64]	; (682c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    67ea:	9b01      	ldr	r3, [sp, #4]
    67ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67f0:	2b00      	cmp	r3, #0
    67f2:	d10d      	bne.n	6810 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    67f4:	f7fa f895 	bl	922 <Mcu_schm_read_msr>
    67f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    67fa:	9b00      	ldr	r3, [sp, #0]
    67fc:	f003 0301 	and.w	r3, r3, #1
    6800:	2b00      	cmp	r3, #0
    6802:	d100      	bne.n	6806 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6804:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    6806:	490a      	ldr	r1, [pc, #40]	; (6830 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    6808:	9b01      	ldr	r3, [sp, #4]
    680a:	9a00      	ldr	r2, [sp, #0]
    680c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    6810:	4a06      	ldr	r2, [pc, #24]	; (682c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    6812:	9b01      	ldr	r3, [sp, #4]
    6814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6818:	1c5a      	adds	r2, r3, #1
    681a:	4904      	ldr	r1, [pc, #16]	; (682c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    681c:	9b01      	ldr	r3, [sp, #4]
    681e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6822:	bf00      	nop
    6824:	b003      	add	sp, #12
    6826:	f85d fb04 	ldr.w	pc, [sp], #4
    682a:	bf00      	nop
    682c:	1fff8d0c 	.word	0x1fff8d0c
    6830:	1fff8d08 	.word	0x1fff8d08

00006834 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    6834:	b500      	push	{lr}
    6836:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6838:	f7fa f94c 	bl	ad4 <Sys_GetCoreID>
    683c:	4603      	mov	r3, r0
    683e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    6840:	4a0d      	ldr	r2, [pc, #52]	; (6878 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    6842:	9b01      	ldr	r3, [sp, #4]
    6844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6848:	1e5a      	subs	r2, r3, #1
    684a:	490b      	ldr	r1, [pc, #44]	; (6878 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    684c:	9b01      	ldr	r3, [sp, #4]
    684e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    6852:	4a0a      	ldr	r2, [pc, #40]	; (687c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    6854:	9b01      	ldr	r3, [sp, #4]
    6856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    685a:	f003 0301 	and.w	r3, r3, #1
    685e:	2b00      	cmp	r3, #0
    6860:	d106      	bne.n	6870 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    6862:	4a05      	ldr	r2, [pc, #20]	; (6878 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    6864:	9b01      	ldr	r3, [sp, #4]
    6866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    686a:	2b00      	cmp	r3, #0
    686c:	d100      	bne.n	6870 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    686e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6870:	bf00      	nop
    6872:	b003      	add	sp, #12
    6874:	f85d fb04 	ldr.w	pc, [sp], #4
    6878:	1fff8d0c 	.word	0x1fff8d0c
    687c:	1fff8d08 	.word	0x1fff8d08

00006880 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    6880:	b500      	push	{lr}
    6882:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6884:	f7fa f926 	bl	ad4 <Sys_GetCoreID>
    6888:	4603      	mov	r3, r0
    688a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    688c:	4a10      	ldr	r2, [pc, #64]	; (68d0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    688e:	9b01      	ldr	r3, [sp, #4]
    6890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6894:	2b00      	cmp	r3, #0
    6896:	d10d      	bne.n	68b4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6898:	f7fa f843 	bl	922 <Mcu_schm_read_msr>
    689c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    689e:	9b00      	ldr	r3, [sp, #0]
    68a0:	f003 0301 	and.w	r3, r3, #1
    68a4:	2b00      	cmp	r3, #0
    68a6:	d100      	bne.n	68aa <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    68a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    68aa:	490a      	ldr	r1, [pc, #40]	; (68d4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    68ac:	9b01      	ldr	r3, [sp, #4]
    68ae:	9a00      	ldr	r2, [sp, #0]
    68b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    68b4:	4a06      	ldr	r2, [pc, #24]	; (68d0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    68b6:	9b01      	ldr	r3, [sp, #4]
    68b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68bc:	1c5a      	adds	r2, r3, #1
    68be:	4904      	ldr	r1, [pc, #16]	; (68d0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    68c0:	9b01      	ldr	r3, [sp, #4]
    68c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    68c6:	bf00      	nop
    68c8:	b003      	add	sp, #12
    68ca:	f85d fb04 	ldr.w	pc, [sp], #4
    68ce:	bf00      	nop
    68d0:	1fff8d14 	.word	0x1fff8d14
    68d4:	1fff8d10 	.word	0x1fff8d10

000068d8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    68d8:	b500      	push	{lr}
    68da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    68dc:	f7fa f8fa 	bl	ad4 <Sys_GetCoreID>
    68e0:	4603      	mov	r3, r0
    68e2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    68e4:	4a0d      	ldr	r2, [pc, #52]	; (691c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    68e6:	9b01      	ldr	r3, [sp, #4]
    68e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68ec:	1e5a      	subs	r2, r3, #1
    68ee:	490b      	ldr	r1, [pc, #44]	; (691c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    68f0:	9b01      	ldr	r3, [sp, #4]
    68f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    68f6:	4a0a      	ldr	r2, [pc, #40]	; (6920 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    68f8:	9b01      	ldr	r3, [sp, #4]
    68fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68fe:	f003 0301 	and.w	r3, r3, #1
    6902:	2b00      	cmp	r3, #0
    6904:	d106      	bne.n	6914 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    6906:	4a05      	ldr	r2, [pc, #20]	; (691c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    6908:	9b01      	ldr	r3, [sp, #4]
    690a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    690e:	2b00      	cmp	r3, #0
    6910:	d100      	bne.n	6914 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6912:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6914:	bf00      	nop
    6916:	b003      	add	sp, #12
    6918:	f85d fb04 	ldr.w	pc, [sp], #4
    691c:	1fff8d14 	.word	0x1fff8d14
    6920:	1fff8d10 	.word	0x1fff8d10

00006924 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    6924:	b500      	push	{lr}
    6926:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6928:	f7fa f8d4 	bl	ad4 <Sys_GetCoreID>
    692c:	4603      	mov	r3, r0
    692e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    6930:	4a10      	ldr	r2, [pc, #64]	; (6974 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    6932:	9b01      	ldr	r3, [sp, #4]
    6934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6938:	2b00      	cmp	r3, #0
    693a:	d10d      	bne.n	6958 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    693c:	f7f9 fff1 	bl	922 <Mcu_schm_read_msr>
    6940:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6942:	9b00      	ldr	r3, [sp, #0]
    6944:	f003 0301 	and.w	r3, r3, #1
    6948:	2b00      	cmp	r3, #0
    694a:	d100      	bne.n	694e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    694c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    694e:	490a      	ldr	r1, [pc, #40]	; (6978 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    6950:	9b01      	ldr	r3, [sp, #4]
    6952:	9a00      	ldr	r2, [sp, #0]
    6954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    6958:	4a06      	ldr	r2, [pc, #24]	; (6974 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    695a:	9b01      	ldr	r3, [sp, #4]
    695c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6960:	1c5a      	adds	r2, r3, #1
    6962:	4904      	ldr	r1, [pc, #16]	; (6974 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    6964:	9b01      	ldr	r3, [sp, #4]
    6966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    696a:	bf00      	nop
    696c:	b003      	add	sp, #12
    696e:	f85d fb04 	ldr.w	pc, [sp], #4
    6972:	bf00      	nop
    6974:	1fff8d1c 	.word	0x1fff8d1c
    6978:	1fff8d18 	.word	0x1fff8d18

0000697c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    697c:	b500      	push	{lr}
    697e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6980:	f7fa f8a8 	bl	ad4 <Sys_GetCoreID>
    6984:	4603      	mov	r3, r0
    6986:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    6988:	4a0d      	ldr	r2, [pc, #52]	; (69c0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    698a:	9b01      	ldr	r3, [sp, #4]
    698c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6990:	1e5a      	subs	r2, r3, #1
    6992:	490b      	ldr	r1, [pc, #44]	; (69c0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    6994:	9b01      	ldr	r3, [sp, #4]
    6996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    699a:	4a0a      	ldr	r2, [pc, #40]	; (69c4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    699c:	9b01      	ldr	r3, [sp, #4]
    699e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69a2:	f003 0301 	and.w	r3, r3, #1
    69a6:	2b00      	cmp	r3, #0
    69a8:	d106      	bne.n	69b8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    69aa:	4a05      	ldr	r2, [pc, #20]	; (69c0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    69ac:	9b01      	ldr	r3, [sp, #4]
    69ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69b2:	2b00      	cmp	r3, #0
    69b4:	d100      	bne.n	69b8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    69b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    69b8:	bf00      	nop
    69ba:	b003      	add	sp, #12
    69bc:	f85d fb04 	ldr.w	pc, [sp], #4
    69c0:	1fff8d1c 	.word	0x1fff8d1c
    69c4:	1fff8d18 	.word	0x1fff8d18

000069c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    69c8:	b500      	push	{lr}
    69ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    69cc:	f7fa f882 	bl	ad4 <Sys_GetCoreID>
    69d0:	4603      	mov	r3, r0
    69d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    69d4:	4a10      	ldr	r2, [pc, #64]	; (6a18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    69d6:	9b01      	ldr	r3, [sp, #4]
    69d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69dc:	2b00      	cmp	r3, #0
    69de:	d10d      	bne.n	69fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    69e0:	f7f9 ffa8 	bl	934 <Port_schm_read_msr>
    69e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    69e6:	9b00      	ldr	r3, [sp, #0]
    69e8:	f003 0301 	and.w	r3, r3, #1
    69ec:	2b00      	cmp	r3, #0
    69ee:	d100      	bne.n	69f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    69f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    69f2:	490a      	ldr	r1, [pc, #40]	; (6a1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    69f4:	9b01      	ldr	r3, [sp, #4]
    69f6:	9a00      	ldr	r2, [sp, #0]
    69f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    69fc:	4a06      	ldr	r2, [pc, #24]	; (6a18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    69fe:	9b01      	ldr	r3, [sp, #4]
    6a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a04:	1c5a      	adds	r2, r3, #1
    6a06:	4904      	ldr	r1, [pc, #16]	; (6a18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    6a08:	9b01      	ldr	r3, [sp, #4]
    6a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6a0e:	bf00      	nop
    6a10:	b003      	add	sp, #12
    6a12:	f85d fb04 	ldr.w	pc, [sp], #4
    6a16:	bf00      	nop
    6a18:	1fff8d24 	.word	0x1fff8d24
    6a1c:	1fff8d20 	.word	0x1fff8d20

00006a20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    6a20:	b500      	push	{lr}
    6a22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a24:	f7fa f856 	bl	ad4 <Sys_GetCoreID>
    6a28:	4603      	mov	r3, r0
    6a2a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    6a2c:	4a0d      	ldr	r2, [pc, #52]	; (6a64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6a2e:	9b01      	ldr	r3, [sp, #4]
    6a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a34:	1e5a      	subs	r2, r3, #1
    6a36:	490b      	ldr	r1, [pc, #44]	; (6a64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6a38:	9b01      	ldr	r3, [sp, #4]
    6a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    6a3e:	4a0a      	ldr	r2, [pc, #40]	; (6a68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    6a40:	9b01      	ldr	r3, [sp, #4]
    6a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a46:	f003 0301 	and.w	r3, r3, #1
    6a4a:	2b00      	cmp	r3, #0
    6a4c:	d106      	bne.n	6a5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    6a4e:	4a05      	ldr	r2, [pc, #20]	; (6a64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6a50:	9b01      	ldr	r3, [sp, #4]
    6a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a56:	2b00      	cmp	r3, #0
    6a58:	d100      	bne.n	6a5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6a5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6a5c:	bf00      	nop
    6a5e:	b003      	add	sp, #12
    6a60:	f85d fb04 	ldr.w	pc, [sp], #4
    6a64:	1fff8d24 	.word	0x1fff8d24
    6a68:	1fff8d20 	.word	0x1fff8d20

00006a6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    6a6c:	b500      	push	{lr}
    6a6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a70:	f7fa f830 	bl	ad4 <Sys_GetCoreID>
    6a74:	4603      	mov	r3, r0
    6a76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    6a78:	4a10      	ldr	r2, [pc, #64]	; (6abc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    6a7a:	9b01      	ldr	r3, [sp, #4]
    6a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a80:	2b00      	cmp	r3, #0
    6a82:	d10d      	bne.n	6aa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6a84:	f7f9 ff56 	bl	934 <Port_schm_read_msr>
    6a88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6a8a:	9b00      	ldr	r3, [sp, #0]
    6a8c:	f003 0301 	and.w	r3, r3, #1
    6a90:	2b00      	cmp	r3, #0
    6a92:	d100      	bne.n	6a96 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6a94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    6a96:	490a      	ldr	r1, [pc, #40]	; (6ac0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    6a98:	9b01      	ldr	r3, [sp, #4]
    6a9a:	9a00      	ldr	r2, [sp, #0]
    6a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    6aa0:	4a06      	ldr	r2, [pc, #24]	; (6abc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    6aa2:	9b01      	ldr	r3, [sp, #4]
    6aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6aa8:	1c5a      	adds	r2, r3, #1
    6aaa:	4904      	ldr	r1, [pc, #16]	; (6abc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    6aac:	9b01      	ldr	r3, [sp, #4]
    6aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6ab2:	bf00      	nop
    6ab4:	b003      	add	sp, #12
    6ab6:	f85d fb04 	ldr.w	pc, [sp], #4
    6aba:	bf00      	nop
    6abc:	1fff8d2c 	.word	0x1fff8d2c
    6ac0:	1fff8d28 	.word	0x1fff8d28

00006ac4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    6ac4:	b500      	push	{lr}
    6ac6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ac8:	f7fa f804 	bl	ad4 <Sys_GetCoreID>
    6acc:	4603      	mov	r3, r0
    6ace:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    6ad0:	4a0d      	ldr	r2, [pc, #52]	; (6b08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    6ad2:	9b01      	ldr	r3, [sp, #4]
    6ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ad8:	1e5a      	subs	r2, r3, #1
    6ada:	490b      	ldr	r1, [pc, #44]	; (6b08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    6adc:	9b01      	ldr	r3, [sp, #4]
    6ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    6ae2:	4a0a      	ldr	r2, [pc, #40]	; (6b0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    6ae4:	9b01      	ldr	r3, [sp, #4]
    6ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6aea:	f003 0301 	and.w	r3, r3, #1
    6aee:	2b00      	cmp	r3, #0
    6af0:	d106      	bne.n	6b00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    6af2:	4a05      	ldr	r2, [pc, #20]	; (6b08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    6af4:	9b01      	ldr	r3, [sp, #4]
    6af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6afa:	2b00      	cmp	r3, #0
    6afc:	d100      	bne.n	6b00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6afe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6b00:	bf00      	nop
    6b02:	b003      	add	sp, #12
    6b04:	f85d fb04 	ldr.w	pc, [sp], #4
    6b08:	1fff8d2c 	.word	0x1fff8d2c
    6b0c:	1fff8d28 	.word	0x1fff8d28

00006b10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    6b10:	b500      	push	{lr}
    6b12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b14:	f7f9 ffde 	bl	ad4 <Sys_GetCoreID>
    6b18:	4603      	mov	r3, r0
    6b1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    6b1c:	4a10      	ldr	r2, [pc, #64]	; (6b60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6b1e:	9b01      	ldr	r3, [sp, #4]
    6b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b24:	2b00      	cmp	r3, #0
    6b26:	d10d      	bne.n	6b44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6b28:	f7f9 ff04 	bl	934 <Port_schm_read_msr>
    6b2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6b2e:	9b00      	ldr	r3, [sp, #0]
    6b30:	f003 0301 	and.w	r3, r3, #1
    6b34:	2b00      	cmp	r3, #0
    6b36:	d100      	bne.n	6b3a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6b38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    6b3a:	490a      	ldr	r1, [pc, #40]	; (6b64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    6b3c:	9b01      	ldr	r3, [sp, #4]
    6b3e:	9a00      	ldr	r2, [sp, #0]
    6b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    6b44:	4a06      	ldr	r2, [pc, #24]	; (6b60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6b46:	9b01      	ldr	r3, [sp, #4]
    6b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b4c:	1c5a      	adds	r2, r3, #1
    6b4e:	4904      	ldr	r1, [pc, #16]	; (6b60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6b50:	9b01      	ldr	r3, [sp, #4]
    6b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6b56:	bf00      	nop
    6b58:	b003      	add	sp, #12
    6b5a:	f85d fb04 	ldr.w	pc, [sp], #4
    6b5e:	bf00      	nop
    6b60:	1fff8d34 	.word	0x1fff8d34
    6b64:	1fff8d30 	.word	0x1fff8d30

00006b68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    6b68:	b500      	push	{lr}
    6b6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b6c:	f7f9 ffb2 	bl	ad4 <Sys_GetCoreID>
    6b70:	4603      	mov	r3, r0
    6b72:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    6b74:	4a0d      	ldr	r2, [pc, #52]	; (6bac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6b76:	9b01      	ldr	r3, [sp, #4]
    6b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b7c:	1e5a      	subs	r2, r3, #1
    6b7e:	490b      	ldr	r1, [pc, #44]	; (6bac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6b80:	9b01      	ldr	r3, [sp, #4]
    6b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    6b86:	4a0a      	ldr	r2, [pc, #40]	; (6bb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    6b88:	9b01      	ldr	r3, [sp, #4]
    6b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b8e:	f003 0301 	and.w	r3, r3, #1
    6b92:	2b00      	cmp	r3, #0
    6b94:	d106      	bne.n	6ba4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    6b96:	4a05      	ldr	r2, [pc, #20]	; (6bac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6b98:	9b01      	ldr	r3, [sp, #4]
    6b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b9e:	2b00      	cmp	r3, #0
    6ba0:	d100      	bne.n	6ba4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6ba2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6ba4:	bf00      	nop
    6ba6:	b003      	add	sp, #12
    6ba8:	f85d fb04 	ldr.w	pc, [sp], #4
    6bac:	1fff8d34 	.word	0x1fff8d34
    6bb0:	1fff8d30 	.word	0x1fff8d30

00006bb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    6bb4:	b500      	push	{lr}
    6bb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6bb8:	f7f9 ff8c 	bl	ad4 <Sys_GetCoreID>
    6bbc:	4603      	mov	r3, r0
    6bbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    6bc0:	4a10      	ldr	r2, [pc, #64]	; (6c04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    6bc2:	9b01      	ldr	r3, [sp, #4]
    6bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bc8:	2b00      	cmp	r3, #0
    6bca:	d10d      	bne.n	6be8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6bcc:	f7f9 feb2 	bl	934 <Port_schm_read_msr>
    6bd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6bd2:	9b00      	ldr	r3, [sp, #0]
    6bd4:	f003 0301 	and.w	r3, r3, #1
    6bd8:	2b00      	cmp	r3, #0
    6bda:	d100      	bne.n	6bde <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6bdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    6bde:	490a      	ldr	r1, [pc, #40]	; (6c08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    6be0:	9b01      	ldr	r3, [sp, #4]
    6be2:	9a00      	ldr	r2, [sp, #0]
    6be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    6be8:	4a06      	ldr	r2, [pc, #24]	; (6c04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    6bea:	9b01      	ldr	r3, [sp, #4]
    6bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bf0:	1c5a      	adds	r2, r3, #1
    6bf2:	4904      	ldr	r1, [pc, #16]	; (6c04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    6bf4:	9b01      	ldr	r3, [sp, #4]
    6bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6bfa:	bf00      	nop
    6bfc:	b003      	add	sp, #12
    6bfe:	f85d fb04 	ldr.w	pc, [sp], #4
    6c02:	bf00      	nop
    6c04:	1fff8d3c 	.word	0x1fff8d3c
    6c08:	1fff8d38 	.word	0x1fff8d38

00006c0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    6c0c:	b500      	push	{lr}
    6c0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c10:	f7f9 ff60 	bl	ad4 <Sys_GetCoreID>
    6c14:	4603      	mov	r3, r0
    6c16:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    6c18:	4a0d      	ldr	r2, [pc, #52]	; (6c50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6c1a:	9b01      	ldr	r3, [sp, #4]
    6c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c20:	1e5a      	subs	r2, r3, #1
    6c22:	490b      	ldr	r1, [pc, #44]	; (6c50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6c24:	9b01      	ldr	r3, [sp, #4]
    6c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    6c2a:	4a0a      	ldr	r2, [pc, #40]	; (6c54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    6c2c:	9b01      	ldr	r3, [sp, #4]
    6c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c32:	f003 0301 	and.w	r3, r3, #1
    6c36:	2b00      	cmp	r3, #0
    6c38:	d106      	bne.n	6c48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    6c3a:	4a05      	ldr	r2, [pc, #20]	; (6c50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6c3c:	9b01      	ldr	r3, [sp, #4]
    6c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c42:	2b00      	cmp	r3, #0
    6c44:	d100      	bne.n	6c48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6c46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6c48:	bf00      	nop
    6c4a:	b003      	add	sp, #12
    6c4c:	f85d fb04 	ldr.w	pc, [sp], #4
    6c50:	1fff8d3c 	.word	0x1fff8d3c
    6c54:	1fff8d38 	.word	0x1fff8d38

00006c58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    6c58:	b500      	push	{lr}
    6c5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c5c:	f7f9 ff3a 	bl	ad4 <Sys_GetCoreID>
    6c60:	4603      	mov	r3, r0
    6c62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    6c64:	4a10      	ldr	r2, [pc, #64]	; (6ca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6c66:	9b01      	ldr	r3, [sp, #4]
    6c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c6c:	2b00      	cmp	r3, #0
    6c6e:	d10d      	bne.n	6c8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6c70:	f7f9 fe60 	bl	934 <Port_schm_read_msr>
    6c74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6c76:	9b00      	ldr	r3, [sp, #0]
    6c78:	f003 0301 	and.w	r3, r3, #1
    6c7c:	2b00      	cmp	r3, #0
    6c7e:	d100      	bne.n	6c82 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6c80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    6c82:	490a      	ldr	r1, [pc, #40]	; (6cac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    6c84:	9b01      	ldr	r3, [sp, #4]
    6c86:	9a00      	ldr	r2, [sp, #0]
    6c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    6c8c:	4a06      	ldr	r2, [pc, #24]	; (6ca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6c8e:	9b01      	ldr	r3, [sp, #4]
    6c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c94:	1c5a      	adds	r2, r3, #1
    6c96:	4904      	ldr	r1, [pc, #16]	; (6ca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6c98:	9b01      	ldr	r3, [sp, #4]
    6c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6c9e:	bf00      	nop
    6ca0:	b003      	add	sp, #12
    6ca2:	f85d fb04 	ldr.w	pc, [sp], #4
    6ca6:	bf00      	nop
    6ca8:	1fff8d44 	.word	0x1fff8d44
    6cac:	1fff8d40 	.word	0x1fff8d40

00006cb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    6cb0:	b500      	push	{lr}
    6cb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6cb4:	f7f9 ff0e 	bl	ad4 <Sys_GetCoreID>
    6cb8:	4603      	mov	r3, r0
    6cba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    6cbc:	4a0d      	ldr	r2, [pc, #52]	; (6cf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    6cbe:	9b01      	ldr	r3, [sp, #4]
    6cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cc4:	1e5a      	subs	r2, r3, #1
    6cc6:	490b      	ldr	r1, [pc, #44]	; (6cf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    6cc8:	9b01      	ldr	r3, [sp, #4]
    6cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    6cce:	4a0a      	ldr	r2, [pc, #40]	; (6cf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    6cd0:	9b01      	ldr	r3, [sp, #4]
    6cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cd6:	f003 0301 	and.w	r3, r3, #1
    6cda:	2b00      	cmp	r3, #0
    6cdc:	d106      	bne.n	6cec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    6cde:	4a05      	ldr	r2, [pc, #20]	; (6cf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    6ce0:	9b01      	ldr	r3, [sp, #4]
    6ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ce6:	2b00      	cmp	r3, #0
    6ce8:	d100      	bne.n	6cec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6cea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6cec:	bf00      	nop
    6cee:	b003      	add	sp, #12
    6cf0:	f85d fb04 	ldr.w	pc, [sp], #4
    6cf4:	1fff8d44 	.word	0x1fff8d44
    6cf8:	1fff8d40 	.word	0x1fff8d40

00006cfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    6cfc:	b500      	push	{lr}
    6cfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d00:	f7f9 fee8 	bl	ad4 <Sys_GetCoreID>
    6d04:	4603      	mov	r3, r0
    6d06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    6d08:	4a10      	ldr	r2, [pc, #64]	; (6d4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    6d0a:	9b01      	ldr	r3, [sp, #4]
    6d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d10:	2b00      	cmp	r3, #0
    6d12:	d10d      	bne.n	6d30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6d14:	f7f9 fe0e 	bl	934 <Port_schm_read_msr>
    6d18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6d1a:	9b00      	ldr	r3, [sp, #0]
    6d1c:	f003 0301 	and.w	r3, r3, #1
    6d20:	2b00      	cmp	r3, #0
    6d22:	d100      	bne.n	6d26 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6d24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    6d26:	490a      	ldr	r1, [pc, #40]	; (6d50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    6d28:	9b01      	ldr	r3, [sp, #4]
    6d2a:	9a00      	ldr	r2, [sp, #0]
    6d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    6d30:	4a06      	ldr	r2, [pc, #24]	; (6d4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    6d32:	9b01      	ldr	r3, [sp, #4]
    6d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d38:	1c5a      	adds	r2, r3, #1
    6d3a:	4904      	ldr	r1, [pc, #16]	; (6d4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    6d3c:	9b01      	ldr	r3, [sp, #4]
    6d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6d42:	bf00      	nop
    6d44:	b003      	add	sp, #12
    6d46:	f85d fb04 	ldr.w	pc, [sp], #4
    6d4a:	bf00      	nop
    6d4c:	1fff8d4c 	.word	0x1fff8d4c
    6d50:	1fff8d48 	.word	0x1fff8d48

00006d54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    6d54:	b500      	push	{lr}
    6d56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d58:	f7f9 febc 	bl	ad4 <Sys_GetCoreID>
    6d5c:	4603      	mov	r3, r0
    6d5e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    6d60:	4a0d      	ldr	r2, [pc, #52]	; (6d98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    6d62:	9b01      	ldr	r3, [sp, #4]
    6d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d68:	1e5a      	subs	r2, r3, #1
    6d6a:	490b      	ldr	r1, [pc, #44]	; (6d98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    6d6c:	9b01      	ldr	r3, [sp, #4]
    6d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    6d72:	4a0a      	ldr	r2, [pc, #40]	; (6d9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    6d74:	9b01      	ldr	r3, [sp, #4]
    6d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d7a:	f003 0301 	and.w	r3, r3, #1
    6d7e:	2b00      	cmp	r3, #0
    6d80:	d106      	bne.n	6d90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    6d82:	4a05      	ldr	r2, [pc, #20]	; (6d98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    6d84:	9b01      	ldr	r3, [sp, #4]
    6d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d8a:	2b00      	cmp	r3, #0
    6d8c:	d100      	bne.n	6d90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6d8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6d90:	bf00      	nop
    6d92:	b003      	add	sp, #12
    6d94:	f85d fb04 	ldr.w	pc, [sp], #4
    6d98:	1fff8d4c 	.word	0x1fff8d4c
    6d9c:	1fff8d48 	.word	0x1fff8d48

00006da0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    6da0:	b500      	push	{lr}
    6da2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6da4:	f7f9 fe96 	bl	ad4 <Sys_GetCoreID>
    6da8:	4603      	mov	r3, r0
    6daa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    6dac:	4a10      	ldr	r2, [pc, #64]	; (6df0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    6dae:	9b01      	ldr	r3, [sp, #4]
    6db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6db4:	2b00      	cmp	r3, #0
    6db6:	d10d      	bne.n	6dd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6db8:	f7f9 fdbc 	bl	934 <Port_schm_read_msr>
    6dbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6dbe:	9b00      	ldr	r3, [sp, #0]
    6dc0:	f003 0301 	and.w	r3, r3, #1
    6dc4:	2b00      	cmp	r3, #0
    6dc6:	d100      	bne.n	6dca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6dc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    6dca:	490a      	ldr	r1, [pc, #40]	; (6df4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    6dcc:	9b01      	ldr	r3, [sp, #4]
    6dce:	9a00      	ldr	r2, [sp, #0]
    6dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    6dd4:	4a06      	ldr	r2, [pc, #24]	; (6df0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    6dd6:	9b01      	ldr	r3, [sp, #4]
    6dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ddc:	1c5a      	adds	r2, r3, #1
    6dde:	4904      	ldr	r1, [pc, #16]	; (6df0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    6de0:	9b01      	ldr	r3, [sp, #4]
    6de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6de6:	bf00      	nop
    6de8:	b003      	add	sp, #12
    6dea:	f85d fb04 	ldr.w	pc, [sp], #4
    6dee:	bf00      	nop
    6df0:	1fff8d54 	.word	0x1fff8d54
    6df4:	1fff8d50 	.word	0x1fff8d50

00006df8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    6df8:	b500      	push	{lr}
    6dfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6dfc:	f7f9 fe6a 	bl	ad4 <Sys_GetCoreID>
    6e00:	4603      	mov	r3, r0
    6e02:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    6e04:	4a0d      	ldr	r2, [pc, #52]	; (6e3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    6e06:	9b01      	ldr	r3, [sp, #4]
    6e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e0c:	1e5a      	subs	r2, r3, #1
    6e0e:	490b      	ldr	r1, [pc, #44]	; (6e3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    6e10:	9b01      	ldr	r3, [sp, #4]
    6e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    6e16:	4a0a      	ldr	r2, [pc, #40]	; (6e40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    6e18:	9b01      	ldr	r3, [sp, #4]
    6e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e1e:	f003 0301 	and.w	r3, r3, #1
    6e22:	2b00      	cmp	r3, #0
    6e24:	d106      	bne.n	6e34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    6e26:	4a05      	ldr	r2, [pc, #20]	; (6e3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    6e28:	9b01      	ldr	r3, [sp, #4]
    6e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e2e:	2b00      	cmp	r3, #0
    6e30:	d100      	bne.n	6e34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6e32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6e34:	bf00      	nop
    6e36:	b003      	add	sp, #12
    6e38:	f85d fb04 	ldr.w	pc, [sp], #4
    6e3c:	1fff8d54 	.word	0x1fff8d54
    6e40:	1fff8d50 	.word	0x1fff8d50

00006e44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    6e44:	b500      	push	{lr}
    6e46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e48:	f7f9 fe44 	bl	ad4 <Sys_GetCoreID>
    6e4c:	4603      	mov	r3, r0
    6e4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    6e50:	4a10      	ldr	r2, [pc, #64]	; (6e94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6e52:	9b01      	ldr	r3, [sp, #4]
    6e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e58:	2b00      	cmp	r3, #0
    6e5a:	d10d      	bne.n	6e78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6e5c:	f7f9 fd6a 	bl	934 <Port_schm_read_msr>
    6e60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6e62:	9b00      	ldr	r3, [sp, #0]
    6e64:	f003 0301 	and.w	r3, r3, #1
    6e68:	2b00      	cmp	r3, #0
    6e6a:	d100      	bne.n	6e6e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6e6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    6e6e:	490a      	ldr	r1, [pc, #40]	; (6e98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    6e70:	9b01      	ldr	r3, [sp, #4]
    6e72:	9a00      	ldr	r2, [sp, #0]
    6e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    6e78:	4a06      	ldr	r2, [pc, #24]	; (6e94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6e7a:	9b01      	ldr	r3, [sp, #4]
    6e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e80:	1c5a      	adds	r2, r3, #1
    6e82:	4904      	ldr	r1, [pc, #16]	; (6e94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6e84:	9b01      	ldr	r3, [sp, #4]
    6e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6e8a:	bf00      	nop
    6e8c:	b003      	add	sp, #12
    6e8e:	f85d fb04 	ldr.w	pc, [sp], #4
    6e92:	bf00      	nop
    6e94:	1fff8d5c 	.word	0x1fff8d5c
    6e98:	1fff8d58 	.word	0x1fff8d58

00006e9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    6e9c:	b500      	push	{lr}
    6e9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ea0:	f7f9 fe18 	bl	ad4 <Sys_GetCoreID>
    6ea4:	4603      	mov	r3, r0
    6ea6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    6ea8:	4a0d      	ldr	r2, [pc, #52]	; (6ee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6eaa:	9b01      	ldr	r3, [sp, #4]
    6eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6eb0:	1e5a      	subs	r2, r3, #1
    6eb2:	490b      	ldr	r1, [pc, #44]	; (6ee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6eb4:	9b01      	ldr	r3, [sp, #4]
    6eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    6eba:	4a0a      	ldr	r2, [pc, #40]	; (6ee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    6ebc:	9b01      	ldr	r3, [sp, #4]
    6ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ec2:	f003 0301 	and.w	r3, r3, #1
    6ec6:	2b00      	cmp	r3, #0
    6ec8:	d106      	bne.n	6ed8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    6eca:	4a05      	ldr	r2, [pc, #20]	; (6ee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6ecc:	9b01      	ldr	r3, [sp, #4]
    6ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ed2:	2b00      	cmp	r3, #0
    6ed4:	d100      	bne.n	6ed8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6ed6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6ed8:	bf00      	nop
    6eda:	b003      	add	sp, #12
    6edc:	f85d fb04 	ldr.w	pc, [sp], #4
    6ee0:	1fff8d5c 	.word	0x1fff8d5c
    6ee4:	1fff8d58 	.word	0x1fff8d58

00006ee8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    6ee8:	b500      	push	{lr}
    6eea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6eec:	f7f9 fdf2 	bl	ad4 <Sys_GetCoreID>
    6ef0:	4603      	mov	r3, r0
    6ef2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    6ef4:	4a10      	ldr	r2, [pc, #64]	; (6f38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    6ef6:	9b01      	ldr	r3, [sp, #4]
    6ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6efc:	2b00      	cmp	r3, #0
    6efe:	d10d      	bne.n	6f1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6f00:	f7f9 fd18 	bl	934 <Port_schm_read_msr>
    6f04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6f06:	9b00      	ldr	r3, [sp, #0]
    6f08:	f003 0301 	and.w	r3, r3, #1
    6f0c:	2b00      	cmp	r3, #0
    6f0e:	d100      	bne.n	6f12 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6f10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    6f12:	490a      	ldr	r1, [pc, #40]	; (6f3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    6f14:	9b01      	ldr	r3, [sp, #4]
    6f16:	9a00      	ldr	r2, [sp, #0]
    6f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    6f1c:	4a06      	ldr	r2, [pc, #24]	; (6f38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    6f1e:	9b01      	ldr	r3, [sp, #4]
    6f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f24:	1c5a      	adds	r2, r3, #1
    6f26:	4904      	ldr	r1, [pc, #16]	; (6f38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    6f28:	9b01      	ldr	r3, [sp, #4]
    6f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6f2e:	bf00      	nop
    6f30:	b003      	add	sp, #12
    6f32:	f85d fb04 	ldr.w	pc, [sp], #4
    6f36:	bf00      	nop
    6f38:	1fff8d64 	.word	0x1fff8d64
    6f3c:	1fff8d60 	.word	0x1fff8d60

00006f40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    6f40:	b500      	push	{lr}
    6f42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f44:	f7f9 fdc6 	bl	ad4 <Sys_GetCoreID>
    6f48:	4603      	mov	r3, r0
    6f4a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    6f4c:	4a0d      	ldr	r2, [pc, #52]	; (6f84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6f4e:	9b01      	ldr	r3, [sp, #4]
    6f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f54:	1e5a      	subs	r2, r3, #1
    6f56:	490b      	ldr	r1, [pc, #44]	; (6f84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6f58:	9b01      	ldr	r3, [sp, #4]
    6f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    6f5e:	4a0a      	ldr	r2, [pc, #40]	; (6f88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    6f60:	9b01      	ldr	r3, [sp, #4]
    6f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f66:	f003 0301 	and.w	r3, r3, #1
    6f6a:	2b00      	cmp	r3, #0
    6f6c:	d106      	bne.n	6f7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    6f6e:	4a05      	ldr	r2, [pc, #20]	; (6f84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6f70:	9b01      	ldr	r3, [sp, #4]
    6f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f76:	2b00      	cmp	r3, #0
    6f78:	d100      	bne.n	6f7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6f7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6f7c:	bf00      	nop
    6f7e:	b003      	add	sp, #12
    6f80:	f85d fb04 	ldr.w	pc, [sp], #4
    6f84:	1fff8d64 	.word	0x1fff8d64
    6f88:	1fff8d60 	.word	0x1fff8d60

00006f8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    6f8c:	b500      	push	{lr}
    6f8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f90:	f7f9 fda0 	bl	ad4 <Sys_GetCoreID>
    6f94:	4603      	mov	r3, r0
    6f96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    6f98:	4a10      	ldr	r2, [pc, #64]	; (6fdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6f9a:	9b01      	ldr	r3, [sp, #4]
    6f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fa0:	2b00      	cmp	r3, #0
    6fa2:	d10d      	bne.n	6fc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6fa4:	f7f9 fcc6 	bl	934 <Port_schm_read_msr>
    6fa8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6faa:	9b00      	ldr	r3, [sp, #0]
    6fac:	f003 0301 	and.w	r3, r3, #1
    6fb0:	2b00      	cmp	r3, #0
    6fb2:	d100      	bne.n	6fb6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6fb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    6fb6:	490a      	ldr	r1, [pc, #40]	; (6fe0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    6fb8:	9b01      	ldr	r3, [sp, #4]
    6fba:	9a00      	ldr	r2, [sp, #0]
    6fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    6fc0:	4a06      	ldr	r2, [pc, #24]	; (6fdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6fc2:	9b01      	ldr	r3, [sp, #4]
    6fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fc8:	1c5a      	adds	r2, r3, #1
    6fca:	4904      	ldr	r1, [pc, #16]	; (6fdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6fcc:	9b01      	ldr	r3, [sp, #4]
    6fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6fd2:	bf00      	nop
    6fd4:	b003      	add	sp, #12
    6fd6:	f85d fb04 	ldr.w	pc, [sp], #4
    6fda:	bf00      	nop
    6fdc:	1fff8d6c 	.word	0x1fff8d6c
    6fe0:	1fff8d68 	.word	0x1fff8d68

00006fe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    6fe4:	b500      	push	{lr}
    6fe6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6fe8:	f7f9 fd74 	bl	ad4 <Sys_GetCoreID>
    6fec:	4603      	mov	r3, r0
    6fee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    6ff0:	4a0d      	ldr	r2, [pc, #52]	; (7028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    6ff2:	9b01      	ldr	r3, [sp, #4]
    6ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ff8:	1e5a      	subs	r2, r3, #1
    6ffa:	490b      	ldr	r1, [pc, #44]	; (7028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    6ffc:	9b01      	ldr	r3, [sp, #4]
    6ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    7002:	4a0a      	ldr	r2, [pc, #40]	; (702c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    7004:	9b01      	ldr	r3, [sp, #4]
    7006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    700a:	f003 0301 	and.w	r3, r3, #1
    700e:	2b00      	cmp	r3, #0
    7010:	d106      	bne.n	7020 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    7012:	4a05      	ldr	r2, [pc, #20]	; (7028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    7014:	9b01      	ldr	r3, [sp, #4]
    7016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    701a:	2b00      	cmp	r3, #0
    701c:	d100      	bne.n	7020 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    701e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7020:	bf00      	nop
    7022:	b003      	add	sp, #12
    7024:	f85d fb04 	ldr.w	pc, [sp], #4
    7028:	1fff8d6c 	.word	0x1fff8d6c
    702c:	1fff8d68 	.word	0x1fff8d68

00007030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    7030:	b500      	push	{lr}
    7032:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7034:	f7f9 fd4e 	bl	ad4 <Sys_GetCoreID>
    7038:	4603      	mov	r3, r0
    703a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    703c:	4a10      	ldr	r2, [pc, #64]	; (7080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    703e:	9b01      	ldr	r3, [sp, #4]
    7040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7044:	2b00      	cmp	r3, #0
    7046:	d10d      	bne.n	7064 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7048:	f7f9 fc74 	bl	934 <Port_schm_read_msr>
    704c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    704e:	9b00      	ldr	r3, [sp, #0]
    7050:	f003 0301 	and.w	r3, r3, #1
    7054:	2b00      	cmp	r3, #0
    7056:	d100      	bne.n	705a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7058:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    705a:	490a      	ldr	r1, [pc, #40]	; (7084 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    705c:	9b01      	ldr	r3, [sp, #4]
    705e:	9a00      	ldr	r2, [sp, #0]
    7060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    7064:	4a06      	ldr	r2, [pc, #24]	; (7080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    7066:	9b01      	ldr	r3, [sp, #4]
    7068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    706c:	1c5a      	adds	r2, r3, #1
    706e:	4904      	ldr	r1, [pc, #16]	; (7080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    7070:	9b01      	ldr	r3, [sp, #4]
    7072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7076:	bf00      	nop
    7078:	b003      	add	sp, #12
    707a:	f85d fb04 	ldr.w	pc, [sp], #4
    707e:	bf00      	nop
    7080:	1fff8d74 	.word	0x1fff8d74
    7084:	1fff8d70 	.word	0x1fff8d70

00007088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    7088:	b500      	push	{lr}
    708a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    708c:	f7f9 fd22 	bl	ad4 <Sys_GetCoreID>
    7090:	4603      	mov	r3, r0
    7092:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    7094:	4a0d      	ldr	r2, [pc, #52]	; (70cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    7096:	9b01      	ldr	r3, [sp, #4]
    7098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    709c:	1e5a      	subs	r2, r3, #1
    709e:	490b      	ldr	r1, [pc, #44]	; (70cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    70a0:	9b01      	ldr	r3, [sp, #4]
    70a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    70a6:	4a0a      	ldr	r2, [pc, #40]	; (70d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    70a8:	9b01      	ldr	r3, [sp, #4]
    70aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70ae:	f003 0301 	and.w	r3, r3, #1
    70b2:	2b00      	cmp	r3, #0
    70b4:	d106      	bne.n	70c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    70b6:	4a05      	ldr	r2, [pc, #20]	; (70cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    70b8:	9b01      	ldr	r3, [sp, #4]
    70ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70be:	2b00      	cmp	r3, #0
    70c0:	d100      	bne.n	70c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    70c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    70c4:	bf00      	nop
    70c6:	b003      	add	sp, #12
    70c8:	f85d fb04 	ldr.w	pc, [sp], #4
    70cc:	1fff8d74 	.word	0x1fff8d74
    70d0:	1fff8d70 	.word	0x1fff8d70

000070d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    70d4:	b500      	push	{lr}
    70d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    70d8:	f7f9 fcfc 	bl	ad4 <Sys_GetCoreID>
    70dc:	4603      	mov	r3, r0
    70de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    70e0:	4a10      	ldr	r2, [pc, #64]	; (7124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    70e2:	9b01      	ldr	r3, [sp, #4]
    70e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70e8:	2b00      	cmp	r3, #0
    70ea:	d10d      	bne.n	7108 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    70ec:	f7f9 fc22 	bl	934 <Port_schm_read_msr>
    70f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    70f2:	9b00      	ldr	r3, [sp, #0]
    70f4:	f003 0301 	and.w	r3, r3, #1
    70f8:	2b00      	cmp	r3, #0
    70fa:	d100      	bne.n	70fe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    70fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    70fe:	490a      	ldr	r1, [pc, #40]	; (7128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    7100:	9b01      	ldr	r3, [sp, #4]
    7102:	9a00      	ldr	r2, [sp, #0]
    7104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    7108:	4a06      	ldr	r2, [pc, #24]	; (7124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    710a:	9b01      	ldr	r3, [sp, #4]
    710c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7110:	1c5a      	adds	r2, r3, #1
    7112:	4904      	ldr	r1, [pc, #16]	; (7124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    7114:	9b01      	ldr	r3, [sp, #4]
    7116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    711a:	bf00      	nop
    711c:	b003      	add	sp, #12
    711e:	f85d fb04 	ldr.w	pc, [sp], #4
    7122:	bf00      	nop
    7124:	1fff8d7c 	.word	0x1fff8d7c
    7128:	1fff8d78 	.word	0x1fff8d78

0000712c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    712c:	b500      	push	{lr}
    712e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7130:	f7f9 fcd0 	bl	ad4 <Sys_GetCoreID>
    7134:	4603      	mov	r3, r0
    7136:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    7138:	4a0d      	ldr	r2, [pc, #52]	; (7170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    713a:	9b01      	ldr	r3, [sp, #4]
    713c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7140:	1e5a      	subs	r2, r3, #1
    7142:	490b      	ldr	r1, [pc, #44]	; (7170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    7144:	9b01      	ldr	r3, [sp, #4]
    7146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    714a:	4a0a      	ldr	r2, [pc, #40]	; (7174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    714c:	9b01      	ldr	r3, [sp, #4]
    714e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7152:	f003 0301 	and.w	r3, r3, #1
    7156:	2b00      	cmp	r3, #0
    7158:	d106      	bne.n	7168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    715a:	4a05      	ldr	r2, [pc, #20]	; (7170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    715c:	9b01      	ldr	r3, [sp, #4]
    715e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7162:	2b00      	cmp	r3, #0
    7164:	d100      	bne.n	7168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7166:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7168:	bf00      	nop
    716a:	b003      	add	sp, #12
    716c:	f85d fb04 	ldr.w	pc, [sp], #4
    7170:	1fff8d7c 	.word	0x1fff8d7c
    7174:	1fff8d78 	.word	0x1fff8d78

00007178 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    7178:	b500      	push	{lr}
    717a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    717c:	f7f9 fcaa 	bl	ad4 <Sys_GetCoreID>
    7180:	4603      	mov	r3, r0
    7182:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    7184:	4a10      	ldr	r2, [pc, #64]	; (71c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    7186:	9b01      	ldr	r3, [sp, #4]
    7188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    718c:	2b00      	cmp	r3, #0
    718e:	d10d      	bne.n	71ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7190:	f7f9 fbd0 	bl	934 <Port_schm_read_msr>
    7194:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7196:	9b00      	ldr	r3, [sp, #0]
    7198:	f003 0301 	and.w	r3, r3, #1
    719c:	2b00      	cmp	r3, #0
    719e:	d100      	bne.n	71a2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    71a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    71a2:	490a      	ldr	r1, [pc, #40]	; (71cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    71a4:	9b01      	ldr	r3, [sp, #4]
    71a6:	9a00      	ldr	r2, [sp, #0]
    71a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    71ac:	4a06      	ldr	r2, [pc, #24]	; (71c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    71ae:	9b01      	ldr	r3, [sp, #4]
    71b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71b4:	1c5a      	adds	r2, r3, #1
    71b6:	4904      	ldr	r1, [pc, #16]	; (71c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    71b8:	9b01      	ldr	r3, [sp, #4]
    71ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    71be:	bf00      	nop
    71c0:	b003      	add	sp, #12
    71c2:	f85d fb04 	ldr.w	pc, [sp], #4
    71c6:	bf00      	nop
    71c8:	1fff8d84 	.word	0x1fff8d84
    71cc:	1fff8d80 	.word	0x1fff8d80

000071d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    71d0:	b500      	push	{lr}
    71d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    71d4:	f7f9 fc7e 	bl	ad4 <Sys_GetCoreID>
    71d8:	4603      	mov	r3, r0
    71da:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    71dc:	4a0d      	ldr	r2, [pc, #52]	; (7214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    71de:	9b01      	ldr	r3, [sp, #4]
    71e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71e4:	1e5a      	subs	r2, r3, #1
    71e6:	490b      	ldr	r1, [pc, #44]	; (7214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    71e8:	9b01      	ldr	r3, [sp, #4]
    71ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    71ee:	4a0a      	ldr	r2, [pc, #40]	; (7218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    71f0:	9b01      	ldr	r3, [sp, #4]
    71f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71f6:	f003 0301 	and.w	r3, r3, #1
    71fa:	2b00      	cmp	r3, #0
    71fc:	d106      	bne.n	720c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    71fe:	4a05      	ldr	r2, [pc, #20]	; (7214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    7200:	9b01      	ldr	r3, [sp, #4]
    7202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7206:	2b00      	cmp	r3, #0
    7208:	d100      	bne.n	720c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    720a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    720c:	bf00      	nop
    720e:	b003      	add	sp, #12
    7210:	f85d fb04 	ldr.w	pc, [sp], #4
    7214:	1fff8d84 	.word	0x1fff8d84
    7218:	1fff8d80 	.word	0x1fff8d80

0000721c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    721c:	b500      	push	{lr}
    721e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7220:	f7f9 fc58 	bl	ad4 <Sys_GetCoreID>
    7224:	4603      	mov	r3, r0
    7226:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    7228:	4a10      	ldr	r2, [pc, #64]	; (726c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    722a:	9b01      	ldr	r3, [sp, #4]
    722c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7230:	2b00      	cmp	r3, #0
    7232:	d10d      	bne.n	7250 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7234:	f7f9 fb7e 	bl	934 <Port_schm_read_msr>
    7238:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    723a:	9b00      	ldr	r3, [sp, #0]
    723c:	f003 0301 	and.w	r3, r3, #1
    7240:	2b00      	cmp	r3, #0
    7242:	d100      	bne.n	7246 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7244:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    7246:	490a      	ldr	r1, [pc, #40]	; (7270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    7248:	9b01      	ldr	r3, [sp, #4]
    724a:	9a00      	ldr	r2, [sp, #0]
    724c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    7250:	4a06      	ldr	r2, [pc, #24]	; (726c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    7252:	9b01      	ldr	r3, [sp, #4]
    7254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7258:	1c5a      	adds	r2, r3, #1
    725a:	4904      	ldr	r1, [pc, #16]	; (726c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    725c:	9b01      	ldr	r3, [sp, #4]
    725e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7262:	bf00      	nop
    7264:	b003      	add	sp, #12
    7266:	f85d fb04 	ldr.w	pc, [sp], #4
    726a:	bf00      	nop
    726c:	1fff8d8c 	.word	0x1fff8d8c
    7270:	1fff8d88 	.word	0x1fff8d88

00007274 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    7274:	b500      	push	{lr}
    7276:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7278:	f7f9 fc2c 	bl	ad4 <Sys_GetCoreID>
    727c:	4603      	mov	r3, r0
    727e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    7280:	4a0d      	ldr	r2, [pc, #52]	; (72b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    7282:	9b01      	ldr	r3, [sp, #4]
    7284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7288:	1e5a      	subs	r2, r3, #1
    728a:	490b      	ldr	r1, [pc, #44]	; (72b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    728c:	9b01      	ldr	r3, [sp, #4]
    728e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    7292:	4a0a      	ldr	r2, [pc, #40]	; (72bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    7294:	9b01      	ldr	r3, [sp, #4]
    7296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    729a:	f003 0301 	and.w	r3, r3, #1
    729e:	2b00      	cmp	r3, #0
    72a0:	d106      	bne.n	72b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    72a2:	4a05      	ldr	r2, [pc, #20]	; (72b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    72a4:	9b01      	ldr	r3, [sp, #4]
    72a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72aa:	2b00      	cmp	r3, #0
    72ac:	d100      	bne.n	72b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    72ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    72b0:	bf00      	nop
    72b2:	b003      	add	sp, #12
    72b4:	f85d fb04 	ldr.w	pc, [sp], #4
    72b8:	1fff8d8c 	.word	0x1fff8d8c
    72bc:	1fff8d88 	.word	0x1fff8d88

000072c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    72c0:	b500      	push	{lr}
    72c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    72c4:	f7f9 fc06 	bl	ad4 <Sys_GetCoreID>
    72c8:	4603      	mov	r3, r0
    72ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    72cc:	4a10      	ldr	r2, [pc, #64]	; (7310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    72ce:	9b01      	ldr	r3, [sp, #4]
    72d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72d4:	2b00      	cmp	r3, #0
    72d6:	d10d      	bne.n	72f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    72d8:	f7f9 fb2c 	bl	934 <Port_schm_read_msr>
    72dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    72de:	9b00      	ldr	r3, [sp, #0]
    72e0:	f003 0301 	and.w	r3, r3, #1
    72e4:	2b00      	cmp	r3, #0
    72e6:	d100      	bne.n	72ea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    72e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    72ea:	490a      	ldr	r1, [pc, #40]	; (7314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    72ec:	9b01      	ldr	r3, [sp, #4]
    72ee:	9a00      	ldr	r2, [sp, #0]
    72f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    72f4:	4a06      	ldr	r2, [pc, #24]	; (7310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    72f6:	9b01      	ldr	r3, [sp, #4]
    72f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72fc:	1c5a      	adds	r2, r3, #1
    72fe:	4904      	ldr	r1, [pc, #16]	; (7310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    7300:	9b01      	ldr	r3, [sp, #4]
    7302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7306:	bf00      	nop
    7308:	b003      	add	sp, #12
    730a:	f85d fb04 	ldr.w	pc, [sp], #4
    730e:	bf00      	nop
    7310:	1fff8d94 	.word	0x1fff8d94
    7314:	1fff8d90 	.word	0x1fff8d90

00007318 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    7318:	b500      	push	{lr}
    731a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    731c:	f7f9 fbda 	bl	ad4 <Sys_GetCoreID>
    7320:	4603      	mov	r3, r0
    7322:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    7324:	4a0d      	ldr	r2, [pc, #52]	; (735c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    7326:	9b01      	ldr	r3, [sp, #4]
    7328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    732c:	1e5a      	subs	r2, r3, #1
    732e:	490b      	ldr	r1, [pc, #44]	; (735c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    7330:	9b01      	ldr	r3, [sp, #4]
    7332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    7336:	4a0a      	ldr	r2, [pc, #40]	; (7360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    7338:	9b01      	ldr	r3, [sp, #4]
    733a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    733e:	f003 0301 	and.w	r3, r3, #1
    7342:	2b00      	cmp	r3, #0
    7344:	d106      	bne.n	7354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    7346:	4a05      	ldr	r2, [pc, #20]	; (735c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    7348:	9b01      	ldr	r3, [sp, #4]
    734a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    734e:	2b00      	cmp	r3, #0
    7350:	d100      	bne.n	7354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7352:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7354:	bf00      	nop
    7356:	b003      	add	sp, #12
    7358:	f85d fb04 	ldr.w	pc, [sp], #4
    735c:	1fff8d94 	.word	0x1fff8d94
    7360:	1fff8d90 	.word	0x1fff8d90

00007364 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    7364:	b500      	push	{lr}
    7366:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7368:	f7f9 fbb4 	bl	ad4 <Sys_GetCoreID>
    736c:	4603      	mov	r3, r0
    736e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    7370:	4a10      	ldr	r2, [pc, #64]	; (73b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    7372:	9b01      	ldr	r3, [sp, #4]
    7374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7378:	2b00      	cmp	r3, #0
    737a:	d10d      	bne.n	7398 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    737c:	f7f9 fada 	bl	934 <Port_schm_read_msr>
    7380:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7382:	9b00      	ldr	r3, [sp, #0]
    7384:	f003 0301 	and.w	r3, r3, #1
    7388:	2b00      	cmp	r3, #0
    738a:	d100      	bne.n	738e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    738c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    738e:	490a      	ldr	r1, [pc, #40]	; (73b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    7390:	9b01      	ldr	r3, [sp, #4]
    7392:	9a00      	ldr	r2, [sp, #0]
    7394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    7398:	4a06      	ldr	r2, [pc, #24]	; (73b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    739a:	9b01      	ldr	r3, [sp, #4]
    739c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73a0:	1c5a      	adds	r2, r3, #1
    73a2:	4904      	ldr	r1, [pc, #16]	; (73b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    73a4:	9b01      	ldr	r3, [sp, #4]
    73a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    73aa:	bf00      	nop
    73ac:	b003      	add	sp, #12
    73ae:	f85d fb04 	ldr.w	pc, [sp], #4
    73b2:	bf00      	nop
    73b4:	1fff8d9c 	.word	0x1fff8d9c
    73b8:	1fff8d98 	.word	0x1fff8d98

000073bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    73bc:	b500      	push	{lr}
    73be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    73c0:	f7f9 fb88 	bl	ad4 <Sys_GetCoreID>
    73c4:	4603      	mov	r3, r0
    73c6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    73c8:	4a0d      	ldr	r2, [pc, #52]	; (7400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    73ca:	9b01      	ldr	r3, [sp, #4]
    73cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73d0:	1e5a      	subs	r2, r3, #1
    73d2:	490b      	ldr	r1, [pc, #44]	; (7400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    73d4:	9b01      	ldr	r3, [sp, #4]
    73d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    73da:	4a0a      	ldr	r2, [pc, #40]	; (7404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    73dc:	9b01      	ldr	r3, [sp, #4]
    73de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73e2:	f003 0301 	and.w	r3, r3, #1
    73e6:	2b00      	cmp	r3, #0
    73e8:	d106      	bne.n	73f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    73ea:	4a05      	ldr	r2, [pc, #20]	; (7400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    73ec:	9b01      	ldr	r3, [sp, #4]
    73ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73f2:	2b00      	cmp	r3, #0
    73f4:	d100      	bne.n	73f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    73f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    73f8:	bf00      	nop
    73fa:	b003      	add	sp, #12
    73fc:	f85d fb04 	ldr.w	pc, [sp], #4
    7400:	1fff8d9c 	.word	0x1fff8d9c
    7404:	1fff8d98 	.word	0x1fff8d98

00007408 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    7408:	b500      	push	{lr}
    740a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    740c:	f7f9 fb62 	bl	ad4 <Sys_GetCoreID>
    7410:	4603      	mov	r3, r0
    7412:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    7414:	4a10      	ldr	r2, [pc, #64]	; (7458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    7416:	9b01      	ldr	r3, [sp, #4]
    7418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    741c:	2b00      	cmp	r3, #0
    741e:	d10d      	bne.n	743c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7420:	f7f9 fa88 	bl	934 <Port_schm_read_msr>
    7424:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7426:	9b00      	ldr	r3, [sp, #0]
    7428:	f003 0301 	and.w	r3, r3, #1
    742c:	2b00      	cmp	r3, #0
    742e:	d100      	bne.n	7432 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7430:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    7432:	490a      	ldr	r1, [pc, #40]	; (745c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    7434:	9b01      	ldr	r3, [sp, #4]
    7436:	9a00      	ldr	r2, [sp, #0]
    7438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    743c:	4a06      	ldr	r2, [pc, #24]	; (7458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    743e:	9b01      	ldr	r3, [sp, #4]
    7440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7444:	1c5a      	adds	r2, r3, #1
    7446:	4904      	ldr	r1, [pc, #16]	; (7458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    7448:	9b01      	ldr	r3, [sp, #4]
    744a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    744e:	bf00      	nop
    7450:	b003      	add	sp, #12
    7452:	f85d fb04 	ldr.w	pc, [sp], #4
    7456:	bf00      	nop
    7458:	1fff8da4 	.word	0x1fff8da4
    745c:	1fff8da0 	.word	0x1fff8da0

00007460 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    7460:	b500      	push	{lr}
    7462:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7464:	f7f9 fb36 	bl	ad4 <Sys_GetCoreID>
    7468:	4603      	mov	r3, r0
    746a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    746c:	4a0d      	ldr	r2, [pc, #52]	; (74a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    746e:	9b01      	ldr	r3, [sp, #4]
    7470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7474:	1e5a      	subs	r2, r3, #1
    7476:	490b      	ldr	r1, [pc, #44]	; (74a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7478:	9b01      	ldr	r3, [sp, #4]
    747a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    747e:	4a0a      	ldr	r2, [pc, #40]	; (74a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    7480:	9b01      	ldr	r3, [sp, #4]
    7482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7486:	f003 0301 	and.w	r3, r3, #1
    748a:	2b00      	cmp	r3, #0
    748c:	d106      	bne.n	749c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    748e:	4a05      	ldr	r2, [pc, #20]	; (74a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7490:	9b01      	ldr	r3, [sp, #4]
    7492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7496:	2b00      	cmp	r3, #0
    7498:	d100      	bne.n	749c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    749a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    749c:	bf00      	nop
    749e:	b003      	add	sp, #12
    74a0:	f85d fb04 	ldr.w	pc, [sp], #4
    74a4:	1fff8da4 	.word	0x1fff8da4
    74a8:	1fff8da0 	.word	0x1fff8da0

000074ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    74ac:	b500      	push	{lr}
    74ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    74b0:	f7f9 fb10 	bl	ad4 <Sys_GetCoreID>
    74b4:	4603      	mov	r3, r0
    74b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    74b8:	4a10      	ldr	r2, [pc, #64]	; (74fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    74ba:	9b01      	ldr	r3, [sp, #4]
    74bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74c0:	2b00      	cmp	r3, #0
    74c2:	d10d      	bne.n	74e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    74c4:	f7f9 fa36 	bl	934 <Port_schm_read_msr>
    74c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    74ca:	9b00      	ldr	r3, [sp, #0]
    74cc:	f003 0301 	and.w	r3, r3, #1
    74d0:	2b00      	cmp	r3, #0
    74d2:	d100      	bne.n	74d6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    74d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    74d6:	490a      	ldr	r1, [pc, #40]	; (7500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    74d8:	9b01      	ldr	r3, [sp, #4]
    74da:	9a00      	ldr	r2, [sp, #0]
    74dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    74e0:	4a06      	ldr	r2, [pc, #24]	; (74fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    74e2:	9b01      	ldr	r3, [sp, #4]
    74e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74e8:	1c5a      	adds	r2, r3, #1
    74ea:	4904      	ldr	r1, [pc, #16]	; (74fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    74ec:	9b01      	ldr	r3, [sp, #4]
    74ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    74f2:	bf00      	nop
    74f4:	b003      	add	sp, #12
    74f6:	f85d fb04 	ldr.w	pc, [sp], #4
    74fa:	bf00      	nop
    74fc:	1fff8dac 	.word	0x1fff8dac
    7500:	1fff8da8 	.word	0x1fff8da8

00007504 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    7504:	b500      	push	{lr}
    7506:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7508:	f7f9 fae4 	bl	ad4 <Sys_GetCoreID>
    750c:	4603      	mov	r3, r0
    750e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    7510:	4a0d      	ldr	r2, [pc, #52]	; (7548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7512:	9b01      	ldr	r3, [sp, #4]
    7514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7518:	1e5a      	subs	r2, r3, #1
    751a:	490b      	ldr	r1, [pc, #44]	; (7548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    751c:	9b01      	ldr	r3, [sp, #4]
    751e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    7522:	4a0a      	ldr	r2, [pc, #40]	; (754c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    7524:	9b01      	ldr	r3, [sp, #4]
    7526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    752a:	f003 0301 	and.w	r3, r3, #1
    752e:	2b00      	cmp	r3, #0
    7530:	d106      	bne.n	7540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    7532:	4a05      	ldr	r2, [pc, #20]	; (7548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7534:	9b01      	ldr	r3, [sp, #4]
    7536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    753a:	2b00      	cmp	r3, #0
    753c:	d100      	bne.n	7540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    753e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7540:	bf00      	nop
    7542:	b003      	add	sp, #12
    7544:	f85d fb04 	ldr.w	pc, [sp], #4
    7548:	1fff8dac 	.word	0x1fff8dac
    754c:	1fff8da8 	.word	0x1fff8da8

00007550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    7550:	b500      	push	{lr}
    7552:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7554:	f7f9 fabe 	bl	ad4 <Sys_GetCoreID>
    7558:	4603      	mov	r3, r0
    755a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    755c:	4a10      	ldr	r2, [pc, #64]	; (75a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    755e:	9b01      	ldr	r3, [sp, #4]
    7560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7564:	2b00      	cmp	r3, #0
    7566:	d10d      	bne.n	7584 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7568:	f7f9 f9e4 	bl	934 <Port_schm_read_msr>
    756c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    756e:	9b00      	ldr	r3, [sp, #0]
    7570:	f003 0301 	and.w	r3, r3, #1
    7574:	2b00      	cmp	r3, #0
    7576:	d100      	bne.n	757a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7578:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    757a:	490a      	ldr	r1, [pc, #40]	; (75a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    757c:	9b01      	ldr	r3, [sp, #4]
    757e:	9a00      	ldr	r2, [sp, #0]
    7580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    7584:	4a06      	ldr	r2, [pc, #24]	; (75a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7586:	9b01      	ldr	r3, [sp, #4]
    7588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    758c:	1c5a      	adds	r2, r3, #1
    758e:	4904      	ldr	r1, [pc, #16]	; (75a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7590:	9b01      	ldr	r3, [sp, #4]
    7592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7596:	bf00      	nop
    7598:	b003      	add	sp, #12
    759a:	f85d fb04 	ldr.w	pc, [sp], #4
    759e:	bf00      	nop
    75a0:	1fff8db4 	.word	0x1fff8db4
    75a4:	1fff8db0 	.word	0x1fff8db0

000075a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    75a8:	b500      	push	{lr}
    75aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    75ac:	f7f9 fa92 	bl	ad4 <Sys_GetCoreID>
    75b0:	4603      	mov	r3, r0
    75b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    75b4:	4a0d      	ldr	r2, [pc, #52]	; (75ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    75b6:	9b01      	ldr	r3, [sp, #4]
    75b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75bc:	1e5a      	subs	r2, r3, #1
    75be:	490b      	ldr	r1, [pc, #44]	; (75ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    75c0:	9b01      	ldr	r3, [sp, #4]
    75c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    75c6:	4a0a      	ldr	r2, [pc, #40]	; (75f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    75c8:	9b01      	ldr	r3, [sp, #4]
    75ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75ce:	f003 0301 	and.w	r3, r3, #1
    75d2:	2b00      	cmp	r3, #0
    75d4:	d106      	bne.n	75e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    75d6:	4a05      	ldr	r2, [pc, #20]	; (75ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    75d8:	9b01      	ldr	r3, [sp, #4]
    75da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75de:	2b00      	cmp	r3, #0
    75e0:	d100      	bne.n	75e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    75e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    75e4:	bf00      	nop
    75e6:	b003      	add	sp, #12
    75e8:	f85d fb04 	ldr.w	pc, [sp], #4
    75ec:	1fff8db4 	.word	0x1fff8db4
    75f0:	1fff8db0 	.word	0x1fff8db0

000075f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    75f4:	b500      	push	{lr}
    75f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    75f8:	f7f9 fa6c 	bl	ad4 <Sys_GetCoreID>
    75fc:	4603      	mov	r3, r0
    75fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    7600:	4a10      	ldr	r2, [pc, #64]	; (7644 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    7602:	9b01      	ldr	r3, [sp, #4]
    7604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7608:	2b00      	cmp	r3, #0
    760a:	d10d      	bne.n	7628 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    760c:	f7f9 f992 	bl	934 <Port_schm_read_msr>
    7610:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7612:	9b00      	ldr	r3, [sp, #0]
    7614:	f003 0301 	and.w	r3, r3, #1
    7618:	2b00      	cmp	r3, #0
    761a:	d100      	bne.n	761e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    761c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    761e:	490a      	ldr	r1, [pc, #40]	; (7648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    7620:	9b01      	ldr	r3, [sp, #4]
    7622:	9a00      	ldr	r2, [sp, #0]
    7624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    7628:	4a06      	ldr	r2, [pc, #24]	; (7644 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    762a:	9b01      	ldr	r3, [sp, #4]
    762c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7630:	1c5a      	adds	r2, r3, #1
    7632:	4904      	ldr	r1, [pc, #16]	; (7644 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    7634:	9b01      	ldr	r3, [sp, #4]
    7636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    763a:	bf00      	nop
    763c:	b003      	add	sp, #12
    763e:	f85d fb04 	ldr.w	pc, [sp], #4
    7642:	bf00      	nop
    7644:	1fff8dbc 	.word	0x1fff8dbc
    7648:	1fff8db8 	.word	0x1fff8db8

0000764c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    764c:	b500      	push	{lr}
    764e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7650:	f7f9 fa40 	bl	ad4 <Sys_GetCoreID>
    7654:	4603      	mov	r3, r0
    7656:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    7658:	4a0d      	ldr	r2, [pc, #52]	; (7690 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    765a:	9b01      	ldr	r3, [sp, #4]
    765c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7660:	1e5a      	subs	r2, r3, #1
    7662:	490b      	ldr	r1, [pc, #44]	; (7690 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    7664:	9b01      	ldr	r3, [sp, #4]
    7666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    766a:	4a0a      	ldr	r2, [pc, #40]	; (7694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    766c:	9b01      	ldr	r3, [sp, #4]
    766e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7672:	f003 0301 	and.w	r3, r3, #1
    7676:	2b00      	cmp	r3, #0
    7678:	d106      	bne.n	7688 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    767a:	4a05      	ldr	r2, [pc, #20]	; (7690 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    767c:	9b01      	ldr	r3, [sp, #4]
    767e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7682:	2b00      	cmp	r3, #0
    7684:	d100      	bne.n	7688 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7686:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7688:	bf00      	nop
    768a:	b003      	add	sp, #12
    768c:	f85d fb04 	ldr.w	pc, [sp], #4
    7690:	1fff8dbc 	.word	0x1fff8dbc
    7694:	1fff8db8 	.word	0x1fff8db8

00007698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    7698:	b500      	push	{lr}
    769a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    769c:	f7f9 fa1a 	bl	ad4 <Sys_GetCoreID>
    76a0:	4603      	mov	r3, r0
    76a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    76a4:	4a10      	ldr	r2, [pc, #64]	; (76e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    76a6:	9b01      	ldr	r3, [sp, #4]
    76a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76ac:	2b00      	cmp	r3, #0
    76ae:	d10d      	bne.n	76cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    76b0:	f7f9 f940 	bl	934 <Port_schm_read_msr>
    76b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    76b6:	9b00      	ldr	r3, [sp, #0]
    76b8:	f003 0301 	and.w	r3, r3, #1
    76bc:	2b00      	cmp	r3, #0
    76be:	d100      	bne.n	76c2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    76c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    76c2:	490a      	ldr	r1, [pc, #40]	; (76ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    76c4:	9b01      	ldr	r3, [sp, #4]
    76c6:	9a00      	ldr	r2, [sp, #0]
    76c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    76cc:	4a06      	ldr	r2, [pc, #24]	; (76e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    76ce:	9b01      	ldr	r3, [sp, #4]
    76d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76d4:	1c5a      	adds	r2, r3, #1
    76d6:	4904      	ldr	r1, [pc, #16]	; (76e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    76d8:	9b01      	ldr	r3, [sp, #4]
    76da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    76de:	bf00      	nop
    76e0:	b003      	add	sp, #12
    76e2:	f85d fb04 	ldr.w	pc, [sp], #4
    76e6:	bf00      	nop
    76e8:	1fff8dc4 	.word	0x1fff8dc4
    76ec:	1fff8dc0 	.word	0x1fff8dc0

000076f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    76f0:	b500      	push	{lr}
    76f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    76f4:	f7f9 f9ee 	bl	ad4 <Sys_GetCoreID>
    76f8:	4603      	mov	r3, r0
    76fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    76fc:	4a0d      	ldr	r2, [pc, #52]	; (7734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    76fe:	9b01      	ldr	r3, [sp, #4]
    7700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7704:	1e5a      	subs	r2, r3, #1
    7706:	490b      	ldr	r1, [pc, #44]	; (7734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7708:	9b01      	ldr	r3, [sp, #4]
    770a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    770e:	4a0a      	ldr	r2, [pc, #40]	; (7738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    7710:	9b01      	ldr	r3, [sp, #4]
    7712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7716:	f003 0301 	and.w	r3, r3, #1
    771a:	2b00      	cmp	r3, #0
    771c:	d106      	bne.n	772c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    771e:	4a05      	ldr	r2, [pc, #20]	; (7734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7720:	9b01      	ldr	r3, [sp, #4]
    7722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7726:	2b00      	cmp	r3, #0
    7728:	d100      	bne.n	772c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    772a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    772c:	bf00      	nop
    772e:	b003      	add	sp, #12
    7730:	f85d fb04 	ldr.w	pc, [sp], #4
    7734:	1fff8dc4 	.word	0x1fff8dc4
    7738:	1fff8dc0 	.word	0x1fff8dc0

0000773c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    773c:	b500      	push	{lr}
    773e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7740:	f7f9 f9c8 	bl	ad4 <Sys_GetCoreID>
    7744:	4603      	mov	r3, r0
    7746:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    7748:	4a10      	ldr	r2, [pc, #64]	; (778c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    774a:	9b01      	ldr	r3, [sp, #4]
    774c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7750:	2b00      	cmp	r3, #0
    7752:	d10d      	bne.n	7770 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7754:	f7f9 f8ee 	bl	934 <Port_schm_read_msr>
    7758:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    775a:	9b00      	ldr	r3, [sp, #0]
    775c:	f003 0301 	and.w	r3, r3, #1
    7760:	2b00      	cmp	r3, #0
    7762:	d100      	bne.n	7766 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7764:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    7766:	490a      	ldr	r1, [pc, #40]	; (7790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    7768:	9b01      	ldr	r3, [sp, #4]
    776a:	9a00      	ldr	r2, [sp, #0]
    776c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    7770:	4a06      	ldr	r2, [pc, #24]	; (778c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    7772:	9b01      	ldr	r3, [sp, #4]
    7774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7778:	1c5a      	adds	r2, r3, #1
    777a:	4904      	ldr	r1, [pc, #16]	; (778c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    777c:	9b01      	ldr	r3, [sp, #4]
    777e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7782:	bf00      	nop
    7784:	b003      	add	sp, #12
    7786:	f85d fb04 	ldr.w	pc, [sp], #4
    778a:	bf00      	nop
    778c:	1fff8dcc 	.word	0x1fff8dcc
    7790:	1fff8dc8 	.word	0x1fff8dc8

00007794 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    7794:	b500      	push	{lr}
    7796:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7798:	f7f9 f99c 	bl	ad4 <Sys_GetCoreID>
    779c:	4603      	mov	r3, r0
    779e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    77a0:	4a0d      	ldr	r2, [pc, #52]	; (77d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    77a2:	9b01      	ldr	r3, [sp, #4]
    77a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77a8:	1e5a      	subs	r2, r3, #1
    77aa:	490b      	ldr	r1, [pc, #44]	; (77d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    77ac:	9b01      	ldr	r3, [sp, #4]
    77ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    77b2:	4a0a      	ldr	r2, [pc, #40]	; (77dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    77b4:	9b01      	ldr	r3, [sp, #4]
    77b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77ba:	f003 0301 	and.w	r3, r3, #1
    77be:	2b00      	cmp	r3, #0
    77c0:	d106      	bne.n	77d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    77c2:	4a05      	ldr	r2, [pc, #20]	; (77d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    77c4:	9b01      	ldr	r3, [sp, #4]
    77c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77ca:	2b00      	cmp	r3, #0
    77cc:	d100      	bne.n	77d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    77ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    77d0:	bf00      	nop
    77d2:	b003      	add	sp, #12
    77d4:	f85d fb04 	ldr.w	pc, [sp], #4
    77d8:	1fff8dcc 	.word	0x1fff8dcc
    77dc:	1fff8dc8 	.word	0x1fff8dc8

000077e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    77e0:	b500      	push	{lr}
    77e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    77e4:	f7f9 f976 	bl	ad4 <Sys_GetCoreID>
    77e8:	4603      	mov	r3, r0
    77ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    77ec:	4a10      	ldr	r2, [pc, #64]	; (7830 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    77ee:	9b01      	ldr	r3, [sp, #4]
    77f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77f4:	2b00      	cmp	r3, #0
    77f6:	d10d      	bne.n	7814 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    77f8:	f7f9 f89c 	bl	934 <Port_schm_read_msr>
    77fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    77fe:	9b00      	ldr	r3, [sp, #0]
    7800:	f003 0301 	and.w	r3, r3, #1
    7804:	2b00      	cmp	r3, #0
    7806:	d100      	bne.n	780a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7808:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    780a:	490a      	ldr	r1, [pc, #40]	; (7834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    780c:	9b01      	ldr	r3, [sp, #4]
    780e:	9a00      	ldr	r2, [sp, #0]
    7810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    7814:	4a06      	ldr	r2, [pc, #24]	; (7830 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7816:	9b01      	ldr	r3, [sp, #4]
    7818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    781c:	1c5a      	adds	r2, r3, #1
    781e:	4904      	ldr	r1, [pc, #16]	; (7830 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7820:	9b01      	ldr	r3, [sp, #4]
    7822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7826:	bf00      	nop
    7828:	b003      	add	sp, #12
    782a:	f85d fb04 	ldr.w	pc, [sp], #4
    782e:	bf00      	nop
    7830:	1fff8dd4 	.word	0x1fff8dd4
    7834:	1fff8dd0 	.word	0x1fff8dd0

00007838 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    7838:	b500      	push	{lr}
    783a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    783c:	f7f9 f94a 	bl	ad4 <Sys_GetCoreID>
    7840:	4603      	mov	r3, r0
    7842:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    7844:	4a0d      	ldr	r2, [pc, #52]	; (787c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    7846:	9b01      	ldr	r3, [sp, #4]
    7848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    784c:	1e5a      	subs	r2, r3, #1
    784e:	490b      	ldr	r1, [pc, #44]	; (787c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    7850:	9b01      	ldr	r3, [sp, #4]
    7852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    7856:	4a0a      	ldr	r2, [pc, #40]	; (7880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    7858:	9b01      	ldr	r3, [sp, #4]
    785a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    785e:	f003 0301 	and.w	r3, r3, #1
    7862:	2b00      	cmp	r3, #0
    7864:	d106      	bne.n	7874 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    7866:	4a05      	ldr	r2, [pc, #20]	; (787c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    7868:	9b01      	ldr	r3, [sp, #4]
    786a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    786e:	2b00      	cmp	r3, #0
    7870:	d100      	bne.n	7874 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7872:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7874:	bf00      	nop
    7876:	b003      	add	sp, #12
    7878:	f85d fb04 	ldr.w	pc, [sp], #4
    787c:	1fff8dd4 	.word	0x1fff8dd4
    7880:	1fff8dd0 	.word	0x1fff8dd0

00007884 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    7884:	b500      	push	{lr}
    7886:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7888:	f7f9 f924 	bl	ad4 <Sys_GetCoreID>
    788c:	4603      	mov	r3, r0
    788e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    7890:	4a10      	ldr	r2, [pc, #64]	; (78d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    7892:	9b01      	ldr	r3, [sp, #4]
    7894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7898:	2b00      	cmp	r3, #0
    789a:	d10d      	bne.n	78b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    789c:	f7f9 f84a 	bl	934 <Port_schm_read_msr>
    78a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    78a2:	9b00      	ldr	r3, [sp, #0]
    78a4:	f003 0301 	and.w	r3, r3, #1
    78a8:	2b00      	cmp	r3, #0
    78aa:	d100      	bne.n	78ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    78ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    78ae:	490a      	ldr	r1, [pc, #40]	; (78d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    78b0:	9b01      	ldr	r3, [sp, #4]
    78b2:	9a00      	ldr	r2, [sp, #0]
    78b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    78b8:	4a06      	ldr	r2, [pc, #24]	; (78d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    78ba:	9b01      	ldr	r3, [sp, #4]
    78bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78c0:	1c5a      	adds	r2, r3, #1
    78c2:	4904      	ldr	r1, [pc, #16]	; (78d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    78c4:	9b01      	ldr	r3, [sp, #4]
    78c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    78ca:	bf00      	nop
    78cc:	b003      	add	sp, #12
    78ce:	f85d fb04 	ldr.w	pc, [sp], #4
    78d2:	bf00      	nop
    78d4:	1fff8ddc 	.word	0x1fff8ddc
    78d8:	1fff8dd8 	.word	0x1fff8dd8

000078dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    78dc:	b500      	push	{lr}
    78de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    78e0:	f7f9 f8f8 	bl	ad4 <Sys_GetCoreID>
    78e4:	4603      	mov	r3, r0
    78e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    78e8:	4a0d      	ldr	r2, [pc, #52]	; (7920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    78ea:	9b01      	ldr	r3, [sp, #4]
    78ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78f0:	1e5a      	subs	r2, r3, #1
    78f2:	490b      	ldr	r1, [pc, #44]	; (7920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    78f4:	9b01      	ldr	r3, [sp, #4]
    78f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    78fa:	4a0a      	ldr	r2, [pc, #40]	; (7924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    78fc:	9b01      	ldr	r3, [sp, #4]
    78fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7902:	f003 0301 	and.w	r3, r3, #1
    7906:	2b00      	cmp	r3, #0
    7908:	d106      	bne.n	7918 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    790a:	4a05      	ldr	r2, [pc, #20]	; (7920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    790c:	9b01      	ldr	r3, [sp, #4]
    790e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7912:	2b00      	cmp	r3, #0
    7914:	d100      	bne.n	7918 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7916:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7918:	bf00      	nop
    791a:	b003      	add	sp, #12
    791c:	f85d fb04 	ldr.w	pc, [sp], #4
    7920:	1fff8ddc 	.word	0x1fff8ddc
    7924:	1fff8dd8 	.word	0x1fff8dd8

00007928 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    7928:	b500      	push	{lr}
    792a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    792c:	f7f9 f8d2 	bl	ad4 <Sys_GetCoreID>
    7930:	4603      	mov	r3, r0
    7932:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    7934:	4a10      	ldr	r2, [pc, #64]	; (7978 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    7936:	9b01      	ldr	r3, [sp, #4]
    7938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    793c:	2b00      	cmp	r3, #0
    793e:	d10d      	bne.n	795c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7940:	f7f8 fff8 	bl	934 <Port_schm_read_msr>
    7944:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7946:	9b00      	ldr	r3, [sp, #0]
    7948:	f003 0301 	and.w	r3, r3, #1
    794c:	2b00      	cmp	r3, #0
    794e:	d100      	bne.n	7952 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7950:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    7952:	490a      	ldr	r1, [pc, #40]	; (797c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    7954:	9b01      	ldr	r3, [sp, #4]
    7956:	9a00      	ldr	r2, [sp, #0]
    7958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    795c:	4a06      	ldr	r2, [pc, #24]	; (7978 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    795e:	9b01      	ldr	r3, [sp, #4]
    7960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7964:	1c5a      	adds	r2, r3, #1
    7966:	4904      	ldr	r1, [pc, #16]	; (7978 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    7968:	9b01      	ldr	r3, [sp, #4]
    796a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    796e:	bf00      	nop
    7970:	b003      	add	sp, #12
    7972:	f85d fb04 	ldr.w	pc, [sp], #4
    7976:	bf00      	nop
    7978:	1fff8de4 	.word	0x1fff8de4
    797c:	1fff8de0 	.word	0x1fff8de0

00007980 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    7980:	b500      	push	{lr}
    7982:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7984:	f7f9 f8a6 	bl	ad4 <Sys_GetCoreID>
    7988:	4603      	mov	r3, r0
    798a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    798c:	4a0d      	ldr	r2, [pc, #52]	; (79c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    798e:	9b01      	ldr	r3, [sp, #4]
    7990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7994:	1e5a      	subs	r2, r3, #1
    7996:	490b      	ldr	r1, [pc, #44]	; (79c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7998:	9b01      	ldr	r3, [sp, #4]
    799a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    799e:	4a0a      	ldr	r2, [pc, #40]	; (79c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    79a0:	9b01      	ldr	r3, [sp, #4]
    79a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79a6:	f003 0301 	and.w	r3, r3, #1
    79aa:	2b00      	cmp	r3, #0
    79ac:	d106      	bne.n	79bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    79ae:	4a05      	ldr	r2, [pc, #20]	; (79c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    79b0:	9b01      	ldr	r3, [sp, #4]
    79b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79b6:	2b00      	cmp	r3, #0
    79b8:	d100      	bne.n	79bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    79ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    79bc:	bf00      	nop
    79be:	b003      	add	sp, #12
    79c0:	f85d fb04 	ldr.w	pc, [sp], #4
    79c4:	1fff8de4 	.word	0x1fff8de4
    79c8:	1fff8de0 	.word	0x1fff8de0

000079cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    79cc:	b500      	push	{lr}
    79ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    79d0:	f7f9 f880 	bl	ad4 <Sys_GetCoreID>
    79d4:	4603      	mov	r3, r0
    79d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    79d8:	4a10      	ldr	r2, [pc, #64]	; (7a1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    79da:	9b01      	ldr	r3, [sp, #4]
    79dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79e0:	2b00      	cmp	r3, #0
    79e2:	d10d      	bne.n	7a00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    79e4:	f7f8 ffa6 	bl	934 <Port_schm_read_msr>
    79e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    79ea:	9b00      	ldr	r3, [sp, #0]
    79ec:	f003 0301 	and.w	r3, r3, #1
    79f0:	2b00      	cmp	r3, #0
    79f2:	d100      	bne.n	79f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    79f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    79f6:	490a      	ldr	r1, [pc, #40]	; (7a20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    79f8:	9b01      	ldr	r3, [sp, #4]
    79fa:	9a00      	ldr	r2, [sp, #0]
    79fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    7a00:	4a06      	ldr	r2, [pc, #24]	; (7a1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    7a02:	9b01      	ldr	r3, [sp, #4]
    7a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a08:	1c5a      	adds	r2, r3, #1
    7a0a:	4904      	ldr	r1, [pc, #16]	; (7a1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    7a0c:	9b01      	ldr	r3, [sp, #4]
    7a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7a12:	bf00      	nop
    7a14:	b003      	add	sp, #12
    7a16:	f85d fb04 	ldr.w	pc, [sp], #4
    7a1a:	bf00      	nop
    7a1c:	1fff8dec 	.word	0x1fff8dec
    7a20:	1fff8de8 	.word	0x1fff8de8

00007a24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    7a24:	b500      	push	{lr}
    7a26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7a28:	f7f9 f854 	bl	ad4 <Sys_GetCoreID>
    7a2c:	4603      	mov	r3, r0
    7a2e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    7a30:	4a0d      	ldr	r2, [pc, #52]	; (7a68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    7a32:	9b01      	ldr	r3, [sp, #4]
    7a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a38:	1e5a      	subs	r2, r3, #1
    7a3a:	490b      	ldr	r1, [pc, #44]	; (7a68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    7a3c:	9b01      	ldr	r3, [sp, #4]
    7a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    7a42:	4a0a      	ldr	r2, [pc, #40]	; (7a6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    7a44:	9b01      	ldr	r3, [sp, #4]
    7a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a4a:	f003 0301 	and.w	r3, r3, #1
    7a4e:	2b00      	cmp	r3, #0
    7a50:	d106      	bne.n	7a60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    7a52:	4a05      	ldr	r2, [pc, #20]	; (7a68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    7a54:	9b01      	ldr	r3, [sp, #4]
    7a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a5a:	2b00      	cmp	r3, #0
    7a5c:	d100      	bne.n	7a60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7a5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7a60:	bf00      	nop
    7a62:	b003      	add	sp, #12
    7a64:	f85d fb04 	ldr.w	pc, [sp], #4
    7a68:	1fff8dec 	.word	0x1fff8dec
    7a6c:	1fff8de8 	.word	0x1fff8de8

00007a70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    7a70:	b500      	push	{lr}
    7a72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7a74:	f7f9 f82e 	bl	ad4 <Sys_GetCoreID>
    7a78:	4603      	mov	r3, r0
    7a7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    7a7c:	4a10      	ldr	r2, [pc, #64]	; (7ac0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    7a7e:	9b01      	ldr	r3, [sp, #4]
    7a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a84:	2b00      	cmp	r3, #0
    7a86:	d10d      	bne.n	7aa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7a88:	f7f8 ff54 	bl	934 <Port_schm_read_msr>
    7a8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7a8e:	9b00      	ldr	r3, [sp, #0]
    7a90:	f003 0301 	and.w	r3, r3, #1
    7a94:	2b00      	cmp	r3, #0
    7a96:	d100      	bne.n	7a9a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7a98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    7a9a:	490a      	ldr	r1, [pc, #40]	; (7ac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    7a9c:	9b01      	ldr	r3, [sp, #4]
    7a9e:	9a00      	ldr	r2, [sp, #0]
    7aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    7aa4:	4a06      	ldr	r2, [pc, #24]	; (7ac0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    7aa6:	9b01      	ldr	r3, [sp, #4]
    7aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7aac:	1c5a      	adds	r2, r3, #1
    7aae:	4904      	ldr	r1, [pc, #16]	; (7ac0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    7ab0:	9b01      	ldr	r3, [sp, #4]
    7ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7ab6:	bf00      	nop
    7ab8:	b003      	add	sp, #12
    7aba:	f85d fb04 	ldr.w	pc, [sp], #4
    7abe:	bf00      	nop
    7ac0:	1fff8df4 	.word	0x1fff8df4
    7ac4:	1fff8df0 	.word	0x1fff8df0

00007ac8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    7ac8:	b500      	push	{lr}
    7aca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7acc:	f7f9 f802 	bl	ad4 <Sys_GetCoreID>
    7ad0:	4603      	mov	r3, r0
    7ad2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    7ad4:	4a0d      	ldr	r2, [pc, #52]	; (7b0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    7ad6:	9b01      	ldr	r3, [sp, #4]
    7ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7adc:	1e5a      	subs	r2, r3, #1
    7ade:	490b      	ldr	r1, [pc, #44]	; (7b0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    7ae0:	9b01      	ldr	r3, [sp, #4]
    7ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    7ae6:	4a0a      	ldr	r2, [pc, #40]	; (7b10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    7ae8:	9b01      	ldr	r3, [sp, #4]
    7aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7aee:	f003 0301 	and.w	r3, r3, #1
    7af2:	2b00      	cmp	r3, #0
    7af4:	d106      	bne.n	7b04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    7af6:	4a05      	ldr	r2, [pc, #20]	; (7b0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    7af8:	9b01      	ldr	r3, [sp, #4]
    7afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7afe:	2b00      	cmp	r3, #0
    7b00:	d100      	bne.n	7b04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7b02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7b04:	bf00      	nop
    7b06:	b003      	add	sp, #12
    7b08:	f85d fb04 	ldr.w	pc, [sp], #4
    7b0c:	1fff8df4 	.word	0x1fff8df4
    7b10:	1fff8df0 	.word	0x1fff8df0

00007b14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    7b14:	b500      	push	{lr}
    7b16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7b18:	f7f8 ffdc 	bl	ad4 <Sys_GetCoreID>
    7b1c:	4603      	mov	r3, r0
    7b1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    7b20:	4a10      	ldr	r2, [pc, #64]	; (7b64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    7b22:	9b01      	ldr	r3, [sp, #4]
    7b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b28:	2b00      	cmp	r3, #0
    7b2a:	d10d      	bne.n	7b48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7b2c:	f7f8 ff02 	bl	934 <Port_schm_read_msr>
    7b30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7b32:	9b00      	ldr	r3, [sp, #0]
    7b34:	f003 0301 	and.w	r3, r3, #1
    7b38:	2b00      	cmp	r3, #0
    7b3a:	d100      	bne.n	7b3e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7b3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    7b3e:	490a      	ldr	r1, [pc, #40]	; (7b68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    7b40:	9b01      	ldr	r3, [sp, #4]
    7b42:	9a00      	ldr	r2, [sp, #0]
    7b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    7b48:	4a06      	ldr	r2, [pc, #24]	; (7b64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    7b4a:	9b01      	ldr	r3, [sp, #4]
    7b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b50:	1c5a      	adds	r2, r3, #1
    7b52:	4904      	ldr	r1, [pc, #16]	; (7b64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    7b54:	9b01      	ldr	r3, [sp, #4]
    7b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7b5a:	bf00      	nop
    7b5c:	b003      	add	sp, #12
    7b5e:	f85d fb04 	ldr.w	pc, [sp], #4
    7b62:	bf00      	nop
    7b64:	1fff8dfc 	.word	0x1fff8dfc
    7b68:	1fff8df8 	.word	0x1fff8df8

00007b6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    7b6c:	b500      	push	{lr}
    7b6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7b70:	f7f8 ffb0 	bl	ad4 <Sys_GetCoreID>
    7b74:	4603      	mov	r3, r0
    7b76:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    7b78:	4a0d      	ldr	r2, [pc, #52]	; (7bb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7b7a:	9b01      	ldr	r3, [sp, #4]
    7b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b80:	1e5a      	subs	r2, r3, #1
    7b82:	490b      	ldr	r1, [pc, #44]	; (7bb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7b84:	9b01      	ldr	r3, [sp, #4]
    7b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    7b8a:	4a0a      	ldr	r2, [pc, #40]	; (7bb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    7b8c:	9b01      	ldr	r3, [sp, #4]
    7b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b92:	f003 0301 	and.w	r3, r3, #1
    7b96:	2b00      	cmp	r3, #0
    7b98:	d106      	bne.n	7ba8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    7b9a:	4a05      	ldr	r2, [pc, #20]	; (7bb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7b9c:	9b01      	ldr	r3, [sp, #4]
    7b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ba2:	2b00      	cmp	r3, #0
    7ba4:	d100      	bne.n	7ba8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7ba6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7ba8:	bf00      	nop
    7baa:	b003      	add	sp, #12
    7bac:	f85d fb04 	ldr.w	pc, [sp], #4
    7bb0:	1fff8dfc 	.word	0x1fff8dfc
    7bb4:	1fff8df8 	.word	0x1fff8df8

00007bb8 <Fls_ACEraseRomEnd>:
    7bb8:	6c6c6548 	.word	0x6c6c6548
    7bbc:	6f57206f 	.word	0x6f57206f
    7bc0:	0a646c72 	.word	0x0a646c72
    7bc4:	00000000 	.word	0x00000000
    7bc8:	6d726554 	.word	0x6d726554
    7bcc:	6c616e69 	.word	0x6c616e69
    7bd0:	00000000 	.word	0x00000000
    7bd4:	4c554e28 	.word	0x4c554e28
    7bd8:	0000294c 	.word	0x0000294c

00007bdc <Clock_Ip_au8DividerCallbackIndex>:
    7bdc:	0e0d0c00 06030201 0a070409 000b0805     ................

00007bec <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00007bfc <Clock_Ip_au8XoscCallbackIndex>:
    7bfc:	00000100 00000000 00000000 00000000     ................

00007c0c <Clock_Ip_au8IrcoscCallbackIndex>:
    7c0c:	03020100 00000004 00000000 00000000     ................

00007c1c <Clock_Ip_au8GateCallbackIndex>:
    7c1c:	06010200 01040301 00000500 00000000     ................

00007c2c <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00007c3c <Clock_Ip_au8PllCallbackIndex>:
    7c3c:	00000100 00000000 00000000 00000000     ................

00007c4c <Clock_Ip_au8SelectorCallbackIndex>:
    7c4c:	0a090800 03020109 07060504 00000000     ................

00007c5c <Clock_Ip_au8PcfsCallbackIndex>:
	...

00007c6c <Clock_Ip_au8CmuCallbackIndex>:
	...

00007c7c <Clock_Ip_au8ClockFeatures>:
	...
    7c8c:	01000000 00000000 00000000 00000002     ................
    7c9c:	00000000 00000300 00000000 00040000     ................
    7cac:	00000000 05000000 00000000 00000000     ................
    7cbc:	00000006 00000000 00000100 00000000     ................
    7ccc:	00010000 00000000 04000000 00000000     ................
    7cdc:	00000000 00000005 00000001 00000401     ................
    7cec:	00000200 00050100 00030000 04020000     ................
    7cfc:	04000000 02000000 00000005 00000005     ................
    7d0c:	00000403 00000600 00050300 00070000     ................
    7d1c:	05000000 00000000 00000000 00000006     ................
	...
    7d5c:	00050000 00000000 06000000 00000100     ................
    7d6c:	00000000 00030007 00000000 00000000     ................
    7d7c:	00000000 00060000 00000000 07000000     ................
    7d8c:	00000100 00000000 00030008 00000000     ................
	...
    7da4:	00090000 00000000 0a000000 00000100     ................
    7db4:	00000000 0003000b 00000000 00000000     ................
    7dc4:	00000000 000c0000 00000000 0d000000     ................
    7dd4:	00000100 00000000 0003000e 00000000     ................
    7de4:	00000800 00000000 00090000 00000000     ................
    7df4:	0a000000 00000000 00000000 0000000b     ................
    7e04:	00000000 00000b01 00000000 000b0200     ................
    7e14:	00000000 0b030000 00000000 00000000     ................
	...
    7e2c:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    7e3c:	01000000 00000000 00000000 00000007     ................
    7e4c:	00007300 00000700 00320000 00090000     .s........2.....
    7e5c:	02000000 07000000 00000000 00000021     ............!...
    7e6c:	00000009 00000400 00000900 00030000     ................
    7e7c:	00070000 61000000 07000000 00000000     .......a........
    7e8c:	00000024 00000007 00002500 00000700     $........%......
    7e9c:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    7eac:	00000000 00000020 38000004 00003800     .... ......8.8..
    7ebc:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    7ecc:	04000000 00260000 00000026 66000004     ......&.&......f
    7edc:	00006600 00000400 00370037 00040000     .f......7.7.....
    7eec:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    7efc:	2e000004 00002e00 00000200 00404040     ............@@@.
    7f0c:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    7f1c:	0000006b 6c000004 00006c00 00000900     k......l.l......
    7f2c:	00010000 00090000 00000000 07000000     ................
    7f3c:	00000000 00000036 00000007 00003100     ....6........1..
    7f4c:	00000700 00490000 00070000 4a000000     ......I........J
    7f5c:	07000000 00000000 0000004b 00000007     ........K.......
    7f6c:	00004c00 00000700 004d0000 00070000     .L........M.....
    7f7c:	3d000000 03000000 00000000 00000000     ...=............

00007f8c <Clock_Ip_au16SelectorEntryHardwareValue>:
    7f8c:	01010a03 01010001 04040002 02000603     ................
    7f9c:	00010810 02020100 00000000 00000007     ................
    7fac:	00000009 00000000 00000c0e 00000000     ................
	...

00007fe4 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    7fe4:	00020000 00000300 00000601 00000000     ................
	...

00008014 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    8014:	00000700 00000000 02020000 01010303     ................
    8024:	03020606 00000000 00000000 00000000     ................
	...

00008044 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    8044:	00000001 00000000 02020000 01010303     ................
    8054:	03020606 00000000 00000000 00000000     ................
	...

00008074 <Clock_Ip_au8DividerValueHardwareValue>:
    8074:	00020100 00000003 00000004 00000000     ................
    8084:	00000005 00000000 00000000 00000000     ................
    8094:	00000006 00000000 00000000 00000000     ................
	...
    80b4:	00000007                                ....

000080b8 <Clock_Ip_apxScgPeriphAsyncDivs>:
    80b8:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

000080c8 <Clock_Ip_aeSourceTypeClockName>:
    80c8:	00000000 00000001 00000001 00000001     ................
    80d8:	00000001 00000001 00000001 00000001     ................
    80e8:	00000002 00000003 00000001 00000001     ................
    80f8:	00000001 00000001 00000002 00000002     ................
    8108:	00000003 00000003 00000001 00000001     ................
    8118:	00000004 00000004 00000004 00000004     ................
	...

00008184 <Clock_Ip_aeHwPllName>:
    8184:	00000009                                ....

00008188 <Clock_Ip_aeHwDfsName>:
    8188:	00000057                                W...

0000818c <Clock_Ip_axDividerCallbacks>:
    818c:	00002631 0000263b 00002655 0000266f     1&..;&..U&..o&..
    819c:	00002689 000026a3 000026bd 000026d7     .&...&...&...&..
    81ac:	000026f1 0000270b 00002725 0000273f     .&...'..%'..?'..
    81bc:	00002759 00002773 0000278d              Y'..s'...'..

000081c8 <Clock_Ip_axDividerTriggerCallbacks>:
    81c8:	00002b01 00002b01                       .+...+..

000081d0 <Clock_Ip_axExtOscCallbacks>:
    81d0:	00002b0d 00002b0d 00002b0d 00002b17     .+...+...+...+..
    81e0:	00002b0d 00002b21 00002b3b 00002b55     .+..!+..;+..U+..
    81f0:	00002bd9 00002bed                       .+...+..

000081f8 <Clock_Ip_axFracDivCallbacks>:
    81f8:	00002dad 00002dad 00002db7              .-...-...-..

00008204 <Clock_Ip_axGateCallbacks>:
    8204:	00002dd1 00002ddb 00002edb 00002ef5     .-...-..........
    8214:	00002e8b 00002ea5 00002e3b 00002e55     ........;...U...
    8224:	00002deb 00002e05 00002f2b 00002f45     .-......+/..E/..
    8234:	00002f7b 00002f95                       {/.../..

0000823c <Clock_Ip_axIntOscCallbacks>:
    823c:	00003141 00003141 0000314b 00003155     A1..A1..K1..U1..
    824c:	0000316f 00003189 0000319d 000031b7     o1...1...1...1..
    825c:	000031d1 000031e5 000031ff 00003219     .1...1...1...2..
    826c:	000032c1 000032db 000032f5              .2...2...2..

00008278 <Clock_Ip_axCmuCallbacks>:
    8278:	00003891 0000389b 000038a7 00003891     .8...8...8...8..

00008288 <Clock_Ip_axPllCallbacks>:
    8288:	000038b1 000038b1 000038bb 000038b1     .8...8...8...8..
    8298:	000038c7 000038d1 000038eb 00003905     .8...8...8...9..
    82a8:	000039a9 00003995                       .9...9..

000082b0 <Clock_Ip_axPcfsCallbacks>:
    82b0:	00003b05                                .;..

000082b4 <Clock_Ip_axSelectorCallbacks>:
    82b4:	00003b11 00003b11 00003b1b 00003b35     .;...;...;..5;..
    82c4:	00003b11 00003b4f 00003b69 00003b83     .;..O;..i;...;..
    82d4:	00003b9d 00003bb7 00003bd1 00003beb     .;...;...;...;..
    82e4:	00003c05 00003c1f 00003c39 00003c53     .<...<..9<..S<..
    82f4:	00003c6d 00003c87 00003ca1 00003cbb     m<...<...<...<..
    8304:	00003cd5 00003cef                       .<...<..

0000830c <ClockSource>:
    830c:	00000000 00000008 00000002 00000005     ................
	...
    8324:	00000009                                ....

00008328 <ResetReasonArray>:
    8328:	00000000 00000001 00000002 00000003     ................
    8338:	00000004 00000005 00000006 00000007     ................
    8348:	00000008 00000009 0000000a 0000000b     ................
    8358:	0000000c 0000000d 0000000e              ............

00008364 <Port_au32PortCiPortBaseAddr>:
    8364:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    8374:	4004d000                                ...@

00008378 <Port_au32PortCiGpioBaseAddr>:
    8378:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    8388:	400ff100                                ...@

0000838c <Mcu_aClockConfigPB>:
	...
    8394:	1c000101 04000010 01000029 00000005     ........).......
    83a4:	00000001 00000000 00000057 00000000     ........W.......
    83b4:	00000000 00000008 007a1200 00000001     ..........z.....
    83c4:	00000001 00000000 00000057 00000000     ........W.......
    83d4:	00000057 00000000 00000000 00000000     W...............
	...
    83f4:	00000019 00000005 0000001a 00000002     ................
    8404:	0000001b 00000005 0000002a 00000005     ........*.......
    8414:	00000028 0000000e 00000029 00000001     (.......).......
    8424:	00000056 0000001c 00000032 0000002a     V.......2...*...
    8434:	0000002b 00000014 0000002c 00000014     +.......,.......
    8444:	0000002d 00000014 0000002e 00000014     -...............
    8454:	0000003f 00000000 00000040 00000000     ?.......@.......
    8464:	00000041 00000000 00000042 00000000     A.......B.......
    8474:	00000031 00000000 00000045 00000000     1.......E.......
    8484:	00000046 00000000 00000047 00000000     F.......G.......
    8494:	00000044 00000000 00000030 00000000     D.......0.......
    84a4:	0000003d 00000000 00000043 00000000     =.......C.......
    84b4:	00000049 00000000 0000004a 00000000     I.......J.......
    84c4:	0000004b 00000000 00000048 00000000     K.......H.......
    84d4:	0000000c 00000001 00000000 0000000d     ................
    84e4:	00000002 00000000 0000000e 00000001     ................
    84f4:	00000000 0000000f 00000001 00000000     ................
    8504:	0000001d 00000001 00000000 0000001e     ................
    8514:	00000008 00000000 0000001f 00000001     ................
    8524:	00000000 00000021 00000001 00000000     ....!...........
    8534:	00000022 00000002 00000000 00000023     "...........#...
    8544:	00000001 00000000 00000025 00000003     ........%.......
    8554:	00000000 00000026 00000004 00000000     ....&...........
    8564:	00000027 00000002 00000000 00000032     '...........2...
    8574:	00000001 00000000 00000048 00000001     ........H.......
    8584:	00000001 00000056 00000001 00000001     ....V...........
    8594:	00000057 00000000 00000000 00000057     W...........W...
	...
    85ac:	00000057 00000000 00000000 00000057     W...........W...
	...
    85c4:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    85e0:	00000014 00007d00 00000015 00007d00     .....}.......}..
    85f0:	00000016 00007d00 00000017 00008000     .....}..........
    8600:	00000012 00000001 00000013 00000001     ................
    8610:	00000030 00000000 00000031 00000000     0.......1.......
    8620:	00000032 00000000 00000033 00000000     2.......3.......
    8630:	00000034 00000000 00000035 00000001     4.......5.......
    8640:	00000036 00000000 00000037 00000001     6.......7.......
    8650:	00000038 00000001 00000039 00000000     8.......9.......
    8660:	0000003a 00000000 0000003b 00000000     :.......;.......
    8670:	0000003c 00000000 0000003d 00000000     <.......=.......
    8680:	0000003e 00000000 0000003f 00000000     >.......?.......
    8690:	00000040 00000000 00000041 00000000     @.......A.......
    86a0:	00000042 00000000 00000043 00000000     B.......C.......
    86b0:	00000044 00000000 00000045 00000000     D.......E.......
    86c0:	00000046 00000000 00000047 00000000     F.......G.......
    86d0:	00000048 00000000 00000049 00000000     H.......I.......
    86e0:	0000004a 00000000 0000004b 00000000     J.......K.......
    86f0:	0000004c 00000001 0000004d 00000001     L.......M.......
    8700:	0000004e 00000000 0000004f 00000000     N.......O.......
    8710:	00000050 00000001 00000051 00000001     P.......Q.......
    8720:	00000052 00000001 00000053 00000001     R.......S.......
    8730:	00000054 00000001 00000055 00000000     T.......U.......
    8740:	00000056 00000001 00000057 00000000     V.......W.......
    8750:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00008784 <Mcu_Config>:
    8784:	0000005a 00000000 00000001 00000001     Z...............
    8794:	000088d8 0000838c 000088e4              ............

000087a0 <OsIf_xPredefinedConfig>:
    87a0:	00000000 02dc6c00                       .....l..

000087a8 <OsIf_apxPredefinedConfig>:
    87a8:	000087a0                                ....

000087ac <g_pin_mux_InitConfigArr>:
    87ac:	4004c000 400ff0c0 00000000 00000002     ...@...@........
    87bc:	00000001 00000002 00000000 00000000     ................
	...

000087d4 <au8Port_PartitionList>:
    87d4:	00000001                                ....

000087d8 <au32Port_PinToPartitionMap>:
    87d8:	00000001                                ....

000087dc <Port_au16NoUnUsedPadsArrayDefault>:
    87dc:	00010000 00030002 00070006 00090008     ................
    87ec:	000c000b 000e000d 0010000f 00200011     .............. .
    87fc:	00220021 00240023 00260025 00280027     !.".#.$.%.&.'.(.
    880c:	002a0029 002c002b 002e002d 0030002f     ).*.+.,.-.../.0.
    881c:	00400031 00420041 00460043 00480047     1.@.A.B.C.F.G.H.
    882c:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    883c:	00610051 00630062 00650064 00670066     Q.a.b.c.d.e.f.g.
    884c:	00690068 006b006a 006d006c 006f006e     h.i.j.k.l.m.n.o.
    885c:	00710070 00810080 00830082 00850084     p.q.............
    886c:	00870086 00890088 008b008a 008d008c     ................
    887c:	008f008e 00000090                       ........

00008884 <Port_UnUsedPin>:
    8884:	00000100 00000001 00000000              ............

00008890 <Port_aPinConfigDefault>:
    8890:	00000060 00000100 00000000 00000002     `...............
    88a0:	00010001                                ....

000088a4 <Port_Config>:
    88a4:	00530001 000087dc 00008884 00008890     ..S.............
	...
    88bc:	000087d8 000087d4 000087ac              ............

000088c8 <Power_Ip_RCM_ConfigPB>:
	...

000088d0 <Power_Ip_PMC_ConfigPB>:
    88d0:	00000000                                ....

000088d4 <Power_Ip_SMC_ConfigPB>:
    88d4:	00000000                                ....

000088d8 <Power_Ip_aModeConfigPB>:
	...

000088e4 <Power_Ip_HwIPsConfigPB>:
    88e4:	000088c8 000088d0 000088d4              ............

000088f0 <_aInitStr.0>:
    88f0:	00000000 54540000 45522052 53454747     ......TTR REGGES
    8900:	00000000                                ....

00008904 <_aV2C.0>:
    8904:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00008914 <__INIT_TABLE>:
    8914:	00000002 	.word	0x00000002
    8918:	1fff8b10 	.word	0x1fff8b10
    891c:	0000893c 	.word	0x0000893c
    8920:	00008964 	.word	0x00008964
    8924:	1fff8800 	.word	0x1fff8800
    8928:	00000000 	.word	0x00000000
    892c:	00000310 	.word	0x00000310

00008930 <__ZERO_TABLE>:
    8930:	00000001 	.word	0x00000001
    8934:	1fff8b40 	.word	0x1fff8b40
    8938:	1fff92c0 	.word	0x1fff92c0
