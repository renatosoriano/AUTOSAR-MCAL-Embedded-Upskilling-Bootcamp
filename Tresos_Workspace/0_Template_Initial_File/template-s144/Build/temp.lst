
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000acb 	.word	0x00000acb
  10:	00000acd 	.word	0x00000acd
  14:	00000acf 	.word	0x00000acf
  18:	00000ad1 	.word	0x00000ad1
	...
  2c:	00000ad3 	.word	0x00000ad3
  30:	00000ad5 	.word	0x00000ad5
  34:	00000000 	.word	0x00000000
  38:	00000ad7 	.word	0x00000ad7
  3c:	00000ad9 	.word	0x00000ad9
  40:	00000adb 	.word	0x00000adb
  44:	00000adb 	.word	0x00000adb
  48:	00000adb 	.word	0x00000adb
  4c:	00000adb 	.word	0x00000adb
  50:	00000adb 	.word	0x00000adb
  54:	00000adb 	.word	0x00000adb
  58:	00000adb 	.word	0x00000adb
  5c:	00000adb 	.word	0x00000adb
  60:	00000adb 	.word	0x00000adb
  64:	00000adb 	.word	0x00000adb
  68:	00000adb 	.word	0x00000adb
  6c:	00000adb 	.word	0x00000adb
  70:	00000adb 	.word	0x00000adb
  74:	00000adb 	.word	0x00000adb
  78:	00000adb 	.word	0x00000adb
  7c:	00000adb 	.word	0x00000adb
  80:	00000adb 	.word	0x00000adb
  84:	00000adb 	.word	0x00000adb
  88:	00000adb 	.word	0x00000adb
  8c:	00000adb 	.word	0x00000adb
  90:	00000adb 	.word	0x00000adb
  94:	00000adb 	.word	0x00000adb
  98:	00000adb 	.word	0x00000adb
  9c:	00000adb 	.word	0x00000adb
  a0:	00000adb 	.word	0x00000adb
  a4:	00000adb 	.word	0x00000adb
  a8:	00000adb 	.word	0x00000adb
  ac:	00000adb 	.word	0x00000adb
  b0:	00000adb 	.word	0x00000adb
  b4:	00000adb 	.word	0x00000adb
  b8:	00000adb 	.word	0x00000adb
  bc:	00000adb 	.word	0x00000adb
  c0:	00000adb 	.word	0x00000adb
  c4:	00000adb 	.word	0x00000adb
  c8:	00000adb 	.word	0x00000adb
  cc:	00000adb 	.word	0x00000adb
  d0:	00000adb 	.word	0x00000adb
  d4:	00000adb 	.word	0x00000adb
  d8:	00000adb 	.word	0x00000adb
  dc:	00000adb 	.word	0x00000adb
  e0:	00000adb 	.word	0x00000adb
  e4:	00000adb 	.word	0x00000adb
  e8:	00000adb 	.word	0x00000adb
  ec:	00000adb 	.word	0x00000adb
  f0:	00000adb 	.word	0x00000adb
  f4:	00000adb 	.word	0x00000adb
  f8:	00000adb 	.word	0x00000adb
  fc:	00000adb 	.word	0x00000adb
 100:	00000adb 	.word	0x00000adb
 104:	00000adb 	.word	0x00000adb
 108:	00000adb 	.word	0x00000adb
 10c:	00000adb 	.word	0x00000adb
 110:	00000adb 	.word	0x00000adb
 114:	00000adb 	.word	0x00000adb
 118:	00000adb 	.word	0x00000adb
 11c:	00000adb 	.word	0x00000adb
 120:	00000adb 	.word	0x00000adb
 124:	00000adb 	.word	0x00000adb
 128:	00000adb 	.word	0x00000adb
 12c:	00000adb 	.word	0x00000adb
 130:	00000adb 	.word	0x00000adb
 134:	00000adb 	.word	0x00000adb
 138:	00000adb 	.word	0x00000adb
 13c:	00000adb 	.word	0x00000adb
 140:	00000adb 	.word	0x00000adb
 144:	00000adb 	.word	0x00000adb
 148:	00000adb 	.word	0x00000adb
 14c:	00000adb 	.word	0x00000adb
 150:	00000adb 	.word	0x00000adb
 154:	00000adb 	.word	0x00000adb
 158:	00000adb 	.word	0x00000adb
 15c:	00000adb 	.word	0x00000adb
 160:	00000adb 	.word	0x00000adb
 164:	00000adb 	.word	0x00000adb
 168:	00000adb 	.word	0x00000adb
 16c:	00000adb 	.word	0x00000adb
 170:	00000adb 	.word	0x00000adb
 174:	00000adb 	.word	0x00000adb
 178:	00000adb 	.word	0x00000adb
 17c:	00000adb 	.word	0x00000adb
 180:	00000adb 	.word	0x00000adb
 184:	00000adb 	.word	0x00000adb
 188:	00000adb 	.word	0x00000adb
 18c:	00000adb 	.word	0x00000adb
 190:	00000adb 	.word	0x00000adb
 194:	00000adb 	.word	0x00000adb
 198:	00000adb 	.word	0x00000adb
 19c:	00000adb 	.word	0x00000adb
 1a0:	00000adb 	.word	0x00000adb
 1a4:	00000adb 	.word	0x00000adb
 1a8:	00000adb 	.word	0x00000adb
 1ac:	00000adb 	.word	0x00000adb
 1b0:	00000adb 	.word	0x00000adb
 1b4:	00000adb 	.word	0x00000adb
 1b8:	00000adb 	.word	0x00000adb
 1bc:	00000adb 	.word	0x00000adb
 1c0:	00000adb 	.word	0x00000adb
 1c4:	00000adb 	.word	0x00000adb
 1c8:	00000adb 	.word	0x00000adb
 1cc:	00000adb 	.word	0x00000adb
 1d0:	00000adb 	.word	0x00000adb
 1d4:	00000adb 	.word	0x00000adb
 1d8:	00000adb 	.word	0x00000adb
 1dc:	00000adb 	.word	0x00000adb
 1e0:	00000adb 	.word	0x00000adb
 1e4:	00000adb 	.word	0x00000adb
 1e8:	00000adb 	.word	0x00000adb
 1ec:	00000adb 	.word	0x00000adb
 1f0:	00000adb 	.word	0x00000adb
 1f4:	00000adb 	.word	0x00000adb
 1f8:	00000adb 	.word	0x00000adb
 1fc:	00000adb 	.word	0x00000adb
 200:	00000adb 	.word	0x00000adb
 204:	00000adb 	.word	0x00000adb
 208:	00000adb 	.word	0x00000adb
 20c:	00000adb 	.word	0x00000adb
 210:	00000adb 	.word	0x00000adb
 214:	00000adb 	.word	0x00000adb
 218:	00000adb 	.word	0x00000adb
 21c:	00000adb 	.word	0x00000adb
 220:	00000adb 	.word	0x00000adb
 224:	00000adb 	.word	0x00000adb
 228:	00000adb 	.word	0x00000adb
 22c:	00000adb 	.word	0x00000adb
 230:	00000adb 	.word	0x00000adb
 234:	00000adb 	.word	0x00000adb
 238:	00000adb 	.word	0x00000adb
 23c:	00000adb 	.word	0x00000adb
 240:	00000adb 	.word	0x00000adb
 244:	00000adb 	.word	0x00000adb
 248:	00000adb 	.word	0x00000adb
 24c:	00000adb 	.word	0x00000adb
 250:	00000adb 	.word	0x00000adb
 254:	00000adb 	.word	0x00000adb
 258:	00000adb 	.word	0x00000adb
 25c:	00000adb 	.word	0x00000adb
 260:	00000adb 	.word	0x00000adb
 264:	00000adb 	.word	0x00000adb
 268:	00000adb 	.word	0x00000adb
 26c:	00000adb 	.word	0x00000adb
 270:	00000adb 	.word	0x00000adb
 274:	00000adb 	.word	0x00000adb
 278:	00000adb 	.word	0x00000adb
 27c:	00000adb 	.word	0x00000adb
 280:	00000adb 	.word	0x00000adb
 284:	00000adb 	.word	0x00000adb
 288:	00000adb 	.word	0x00000adb
 28c:	00000adb 	.word	0x00000adb
 290:	00000adb 	.word	0x00000adb
 294:	00000adb 	.word	0x00000adb
 298:	00000adb 	.word	0x00000adb
 29c:	00000adb 	.word	0x00000adb
 2a0:	00000adb 	.word	0x00000adb
 2a4:	00000adb 	.word	0x00000adb
 2a8:	00000adb 	.word	0x00000adb
 2ac:	00000adb 	.word	0x00000adb
 2b0:	00000adb 	.word	0x00000adb
 2b4:	00000adb 	.word	0x00000adb
 2b8:	00000adb 	.word	0x00000adb
 2bc:	00000adb 	.word	0x00000adb
 2c0:	00000adb 	.word	0x00000adb
 2c4:	00000adb 	.word	0x00000adb
 2c8:	00000adb 	.word	0x00000adb
 2cc:	00000adb 	.word	0x00000adb
 2d0:	00000adb 	.word	0x00000adb
 2d4:	00000adb 	.word	0x00000adb
 2d8:	00000adb 	.word	0x00000adb
 2dc:	00000adb 	.word	0x00000adb
 2e0:	00000adb 	.word	0x00000adb
 2e4:	00000adb 	.word	0x00000adb
 2e8:	00000adb 	.word	0x00000adb
 2ec:	00000adb 	.word	0x00000adb
 2f0:	00000adb 	.word	0x00000adb
 2f4:	00000adb 	.word	0x00000adb
 2f8:	00000adb 	.word	0x00000adb
 2fc:	00000adb 	.word	0x00000adb
 300:	00000adb 	.word	0x00000adb
 304:	00000adb 	.word	0x00000adb
 308:	00000adb 	.word	0x00000adb
 30c:	00000adb 	.word	0x00000adb

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fa59 	bl	938 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb18 	bl	ac0 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff8e00 	.word	0x1fff8e00

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fa63 	bl	a64 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b500      	push	{lr}
     8b2:	b083      	sub	sp, #12
    EcuM_Init();
     8b4:	f000 f810 	bl	8d8 <EcuM_Init>

    while( 1u )
    {
        Dio_FlipChannel( DioConf_DioChannel_DioChannel_0 );
     8b8:	2060      	movs	r0, #96	; 0x60
     8ba:	f004 fffa 	bl	58b2 <Dio_FlipChannel>
        /*dummy delay*/
        for( uint32 i = 0u ; i < 1000000u ; i++ );
     8be:	2300      	movs	r3, #0
     8c0:	9301      	str	r3, [sp, #4]
     8c2:	e002      	b.n	8ca <main+0x1a>
     8c4:	9b01      	ldr	r3, [sp, #4]
     8c6:	3301      	adds	r3, #1
     8c8:	9301      	str	r3, [sp, #4]
     8ca:	9b01      	ldr	r3, [sp, #4]
     8cc:	4a01      	ldr	r2, [pc, #4]	; (8d4 <main+0x24>)
     8ce:	4293      	cmp	r3, r2
     8d0:	d9f8      	bls.n	8c4 <main+0x14>
        Dio_FlipChannel( DioConf_DioChannel_DioChannel_0 );
     8d2:	e7f1      	b.n	8b8 <main+0x8>
     8d4:	000f423f 	.word	0x000f423f

000008d8 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     8d8:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     8da:	4807      	ldr	r0, [pc, #28]	; (8f8 <EcuM_Init+0x20>)
     8dc:	f003 fea8 	bl	4630 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     8e0:	2000      	movs	r0, #0
     8e2:	f003 fef9 	bl	46d8 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     8e6:	2000      	movs	r0, #0
     8e8:	f003 ff1a 	bl	4720 <Mcu_SetMode>
    /*Apply all the Pin Port microcontroller configuration, for this case
    only Port Pin 122  (D16) is configured as output*/
    Port_Init( &Port_Config );
     8ec:	4803      	ldr	r0, [pc, #12]	; (8fc <EcuM_Init+0x24>)
     8ee:	f004 faa1 	bl	4e34 <Port_Init>
}
     8f2:	bf00      	nop
     8f4:	bd08      	pop	{r3, pc}
     8f6:	bf00      	nop
     8f8:	00007d08 	.word	0x00007d08
     8fc:	00007e28 	.word	0x00007e28

00000900 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     900:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     902:	f3ef 8310 	mrs	r3, PRIMASK
     906:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     908:	4623      	mov	r3, r4
}
     90a:	4618      	mov	r0, r3
     90c:	f85d 4b04 	ldr.w	r4, [sp], #4
     910:	4770      	bx	lr

00000912 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     912:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     914:	f3ef 8310 	mrs	r3, PRIMASK
     918:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     91a:	4623      	mov	r3, r4
}
     91c:	4618      	mov	r0, r3
     91e:	f85d 4b04 	ldr.w	r4, [sp], #4
     922:	4770      	bx	lr

00000924 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     924:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     926:	f3ef 8310 	mrs	r3, PRIMASK
     92a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     92c:	4623      	mov	r3, r4
}
     92e:	4618      	mov	r0, r3
     930:	f85d 4b04 	ldr.w	r4, [sp], #4
     934:	4770      	bx	lr
	...

00000938 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     938:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     93a:	2300      	movs	r3, #0
     93c:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     93e:	2300      	movs	r3, #0
     940:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     942:	2300      	movs	r3, #0
     944:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     946:	2300      	movs	r3, #0
     948:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     94a:	4b44      	ldr	r3, [pc, #272]	; (a5c <init_data_bss+0x124>)
     94c:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     94e:	4b44      	ldr	r3, [pc, #272]	; (a60 <init_data_bss+0x128>)
     950:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     952:	9b05      	ldr	r3, [sp, #20]
     954:	681b      	ldr	r3, [r3, #0]
     956:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     958:	9b05      	ldr	r3, [sp, #20]
     95a:	3304      	adds	r3, #4
     95c:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     95e:	9b05      	ldr	r3, [sp, #20]
     960:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     962:	2300      	movs	r3, #0
     964:	9309      	str	r3, [sp, #36]	; 0x24
     966:	e03d      	b.n	9e4 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     968:	9a09      	ldr	r2, [sp, #36]	; 0x24
     96a:	4613      	mov	r3, r2
     96c:	005b      	lsls	r3, r3, #1
     96e:	4413      	add	r3, r2
     970:	009b      	lsls	r3, r3, #2
     972:	461a      	mov	r2, r3
     974:	9b03      	ldr	r3, [sp, #12]
     976:	4413      	add	r3, r2
     978:	685b      	ldr	r3, [r3, #4]
     97a:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     97c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     97e:	4613      	mov	r3, r2
     980:	005b      	lsls	r3, r3, #1
     982:	4413      	add	r3, r2
     984:	009b      	lsls	r3, r3, #2
     986:	461a      	mov	r2, r3
     988:	9b03      	ldr	r3, [sp, #12]
     98a:	4413      	add	r3, r2
     98c:	681b      	ldr	r3, [r3, #0]
     98e:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     990:	9a09      	ldr	r2, [sp, #36]	; 0x24
     992:	4613      	mov	r3, r2
     994:	005b      	lsls	r3, r3, #1
     996:	4413      	add	r3, r2
     998:	009b      	lsls	r3, r3, #2
     99a:	461a      	mov	r2, r3
     99c:	9b03      	ldr	r3, [sp, #12]
     99e:	4413      	add	r3, r2
     9a0:	689b      	ldr	r3, [r3, #8]
     9a2:	4619      	mov	r1, r3
     9a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9a6:	4613      	mov	r3, r2
     9a8:	005b      	lsls	r3, r3, #1
     9aa:	4413      	add	r3, r2
     9ac:	009b      	lsls	r3, r3, #2
     9ae:	461a      	mov	r2, r3
     9b0:	9b03      	ldr	r3, [sp, #12]
     9b2:	4413      	add	r3, r2
     9b4:	685b      	ldr	r3, [r3, #4]
     9b6:	1acb      	subs	r3, r1, r3
     9b8:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     9ba:	2300      	movs	r3, #0
     9bc:	9308      	str	r3, [sp, #32]
     9be:	e00a      	b.n	9d6 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     9c0:	9a00      	ldr	r2, [sp, #0]
     9c2:	9b08      	ldr	r3, [sp, #32]
     9c4:	441a      	add	r2, r3
     9c6:	9901      	ldr	r1, [sp, #4]
     9c8:	9b08      	ldr	r3, [sp, #32]
     9ca:	440b      	add	r3, r1
     9cc:	7812      	ldrb	r2, [r2, #0]
     9ce:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     9d0:	9b08      	ldr	r3, [sp, #32]
     9d2:	3301      	adds	r3, #1
     9d4:	9308      	str	r3, [sp, #32]
     9d6:	9a08      	ldr	r2, [sp, #32]
     9d8:	9b06      	ldr	r3, [sp, #24]
     9da:	429a      	cmp	r2, r3
     9dc:	d3f0      	bcc.n	9c0 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
     9e0:	3301      	adds	r3, #1
     9e2:	9309      	str	r3, [sp, #36]	; 0x24
     9e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9e6:	9b07      	ldr	r3, [sp, #28]
     9e8:	429a      	cmp	r2, r3
     9ea:	d3bd      	bcc.n	968 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     9ec:	9b04      	ldr	r3, [sp, #16]
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     9f2:	9b04      	ldr	r3, [sp, #16]
     9f4:	3304      	adds	r3, #4
     9f6:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     9f8:	9b04      	ldr	r3, [sp, #16]
     9fa:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     9fc:	2300      	movs	r3, #0
     9fe:	9309      	str	r3, [sp, #36]	; 0x24
     a00:	e024      	b.n	a4c <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a04:	00db      	lsls	r3, r3, #3
     a06:	9a02      	ldr	r2, [sp, #8]
     a08:	4413      	add	r3, r2
     a0a:	681b      	ldr	r3, [r3, #0]
     a0c:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a10:	00db      	lsls	r3, r3, #3
     a12:	9a02      	ldr	r2, [sp, #8]
     a14:	4413      	add	r3, r2
     a16:	685b      	ldr	r3, [r3, #4]
     a18:	4619      	mov	r1, r3
     a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a1c:	00db      	lsls	r3, r3, #3
     a1e:	9a02      	ldr	r2, [sp, #8]
     a20:	4413      	add	r3, r2
     a22:	681b      	ldr	r3, [r3, #0]
     a24:	1acb      	subs	r3, r1, r3
     a26:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     a28:	2300      	movs	r3, #0
     a2a:	9308      	str	r3, [sp, #32]
     a2c:	e007      	b.n	a3e <init_data_bss+0x106>
        {
            ram[j] = 0U;
     a2e:	9a01      	ldr	r2, [sp, #4]
     a30:	9b08      	ldr	r3, [sp, #32]
     a32:	4413      	add	r3, r2
     a34:	2200      	movs	r2, #0
     a36:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     a38:	9b08      	ldr	r3, [sp, #32]
     a3a:	3301      	adds	r3, #1
     a3c:	9308      	str	r3, [sp, #32]
     a3e:	9a08      	ldr	r2, [sp, #32]
     a40:	9b06      	ldr	r3, [sp, #24]
     a42:	429a      	cmp	r2, r3
     a44:	d3f3      	bcc.n	a2e <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a48:	3301      	adds	r3, #1
     a4a:	9309      	str	r3, [sp, #36]	; 0x24
     a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a4e:	9b07      	ldr	r3, [sp, #28]
     a50:	429a      	cmp	r2, r3
     a52:	d3d6      	bcc.n	a02 <init_data_bss+0xca>
        }
    }
}
     a54:	bf00      	nop
     a56:	bf00      	nop
     a58:	b00a      	add	sp, #40	; 0x28
     a5a:	4770      	bx	lr
     a5c:	00007e74 	.word	0x00007e74
     a60:	00007e90 	.word	0x00007e90

00000a64 <sys_m4_cache_init>:
{
     a64:	b084      	sub	sp, #16
     a66:	4603      	mov	r3, r0
     a68:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     a6c:	2300      	movs	r3, #0
     a6e:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     a72:	f89d 3007 	ldrb.w	r3, [sp, #7]
     a76:	2b00      	cmp	r3, #0
     a78:	d118      	bne.n	aac <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     a7a:	4b10      	ldr	r3, [pc, #64]	; (abc <sys_m4_cache_init+0x58>)
     a7c:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     a80:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     a82:	4b0e      	ldr	r3, [pc, #56]	; (abc <sys_m4_cache_init+0x58>)
     a84:	681b      	ldr	r3, [r3, #0]
     a86:	4a0d      	ldr	r2, [pc, #52]	; (abc <sys_m4_cache_init+0x58>)
     a88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a8c:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     a8e:	bf00      	nop
     a90:	4b0a      	ldr	r3, [pc, #40]	; (abc <sys_m4_cache_init+0x58>)
     a92:	681b      	ldr	r3, [r3, #0]
     a94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     a98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     a9c:	d0f8      	beq.n	a90 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     a9e:	4b07      	ldr	r3, [pc, #28]	; (abc <sys_m4_cache_init+0x58>)
     aa0:	681b      	ldr	r3, [r3, #0]
     aa2:	4a06      	ldr	r2, [pc, #24]	; (abc <sys_m4_cache_init+0x58>)
     aa4:	f043 0301 	orr.w	r3, r3, #1
     aa8:	6013      	str	r3, [r2, #0]
     aaa:	e002      	b.n	ab2 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     aac:	2301      	movs	r3, #1
     aae:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     ab2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     ab6:	4618      	mov	r0, r3
     ab8:	b004      	add	sp, #16
     aba:	4770      	bx	lr
     abc:	e0082000 	.word	0xe0082000

00000ac0 <startup_go_to_user_mode>:
}
     ac0:	bf00      	nop
     ac2:	4770      	bx	lr

00000ac4 <Sys_GetCoreID>:
    return 0U;
     ac4:	2300      	movs	r3, #0
}
     ac6:	4618      	mov	r0, r3
     ac8:	4770      	bx	lr

00000aca <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     aca:	e7fe      	b.n	aca <HardFault_Handler>

00000acc <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     acc:	e7fe      	b.n	acc <MemManage_Handler>

00000ace <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     ace:	e7fe      	b.n	ace <BusFault_Handler>

00000ad0 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     ad0:	e7fe      	b.n	ad0 <UsageFault_Handler>

00000ad2 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     ad2:	e7fe      	b.n	ad2 <SVC_Handler>

00000ad4 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     ad4:	e7fe      	b.n	ad4 <DebugMon_Handler>

00000ad6 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     ad6:	e7fe      	b.n	ad6 <PendSV_Handler>

00000ad8 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     ad8:	e7fe      	b.n	ad8 <SysTick_Handler>

00000ada <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     ada:	e7fe      	b.n	ada <undefined_handler>

00000adc <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
     adc:	2300      	movs	r3, #0
}
     ade:	4618      	mov	r0, r3
     ae0:	4770      	bx	lr

00000ae2 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
     ae2:	b082      	sub	sp, #8
     ae4:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
     ae6:	2301      	movs	r3, #1
}
     ae8:	4618      	mov	r0, r3
     aea:	b002      	add	sp, #8
     aec:	4770      	bx	lr

00000aee <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
     aee:	b082      	sub	sp, #8
     af0:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
     af2:	bf00      	nop
     af4:	b002      	add	sp, #8
     af6:	4770      	bx	lr

00000af8 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
     af8:	b082      	sub	sp, #8
     afa:	9001      	str	r0, [sp, #4]
    return Micros;
     afc:	9b01      	ldr	r3, [sp, #4]
}
     afe:	4618      	mov	r0, r3
     b00:	b002      	add	sp, #8
     b02:	4770      	bx	lr

00000b04 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
     b04:	b500      	push	{lr}
     b06:	b083      	sub	sp, #12
     b08:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
     b0a:	f000 f86d 	bl	be8 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
     b0e:	bf00      	nop
     b10:	b003      	add	sp, #12
     b12:	f85d fb04 	ldr.w	pc, [sp], #4

00000b16 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
     b16:	b500      	push	{lr}
     b18:	b085      	sub	sp, #20
     b1a:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
     b1c:	2300      	movs	r3, #0
     b1e:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     b20:	9b01      	ldr	r3, [sp, #4]
     b22:	2b00      	cmp	r3, #0
     b24:	d003      	beq.n	b2e <OsIf_GetCounter+0x18>
     b26:	9b01      	ldr	r3, [sp, #4]
     b28:	2b01      	cmp	r3, #1
     b2a:	d004      	beq.n	b36 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     b2c:	e007      	b.n	b3e <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
     b2e:	f7ff ffd5 	bl	adc <OsIf_Timer_Dummy_GetCounter>
     b32:	9003      	str	r0, [sp, #12]
            break;
     b34:	e003      	b.n	b3e <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
     b36:	f000 f873 	bl	c20 <OsIf_Timer_System_GetCounter>
     b3a:	9003      	str	r0, [sp, #12]
            break;
     b3c:	bf00      	nop
    }

    return Value;
     b3e:	9b03      	ldr	r3, [sp, #12]
}
     b40:	4618      	mov	r0, r3
     b42:	b005      	add	sp, #20
     b44:	f85d fb04 	ldr.w	pc, [sp], #4

00000b48 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
     b48:	b500      	push	{lr}
     b4a:	b085      	sub	sp, #20
     b4c:	9001      	str	r0, [sp, #4]
     b4e:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
     b50:	2300      	movs	r3, #0
     b52:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     b54:	9b00      	ldr	r3, [sp, #0]
     b56:	2b00      	cmp	r3, #0
     b58:	d003      	beq.n	b62 <OsIf_GetElapsed+0x1a>
     b5a:	9b00      	ldr	r3, [sp, #0]
     b5c:	2b01      	cmp	r3, #1
     b5e:	d005      	beq.n	b6c <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     b60:	e009      	b.n	b76 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
     b62:	9801      	ldr	r0, [sp, #4]
     b64:	f7ff ffbd 	bl	ae2 <OsIf_Timer_Dummy_GetElapsed>
     b68:	9003      	str	r0, [sp, #12]
            break;
     b6a:	e004      	b.n	b76 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
     b6c:	9801      	ldr	r0, [sp, #4]
     b6e:	f000 f865 	bl	c3c <OsIf_Timer_System_GetElapsed>
     b72:	9003      	str	r0, [sp, #12]
            break;
     b74:	bf00      	nop
    }

    return Value;
     b76:	9b03      	ldr	r3, [sp, #12]
}
     b78:	4618      	mov	r0, r3
     b7a:	b005      	add	sp, #20
     b7c:	f85d fb04 	ldr.w	pc, [sp], #4

00000b80 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
     b80:	b500      	push	{lr}
     b82:	b083      	sub	sp, #12
     b84:	9001      	str	r0, [sp, #4]
     b86:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
     b88:	9b00      	ldr	r3, [sp, #0]
     b8a:	2b00      	cmp	r3, #0
     b8c:	d003      	beq.n	b96 <OsIf_SetTimerFrequency+0x16>
     b8e:	9b00      	ldr	r3, [sp, #0]
     b90:	2b01      	cmp	r3, #1
     b92:	d004      	beq.n	b9e <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     b94:	e007      	b.n	ba6 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
     b96:	9801      	ldr	r0, [sp, #4]
     b98:	f7ff ffa9 	bl	aee <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
     b9c:	e003      	b.n	ba6 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
     b9e:	9801      	ldr	r0, [sp, #4]
     ba0:	f000 f85c 	bl	c5c <OsIf_Timer_System_SetTimerFrequency>
            break;
     ba4:	bf00      	nop
    }
}
     ba6:	bf00      	nop
     ba8:	b003      	add	sp, #12
     baa:	f85d fb04 	ldr.w	pc, [sp], #4

00000bae <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
     bae:	b500      	push	{lr}
     bb0:	b085      	sub	sp, #20
     bb2:	9001      	str	r0, [sp, #4]
     bb4:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
     bb6:	2300      	movs	r3, #0
     bb8:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     bba:	9b00      	ldr	r3, [sp, #0]
     bbc:	2b00      	cmp	r3, #0
     bbe:	d003      	beq.n	bc8 <OsIf_MicrosToTicks+0x1a>
     bc0:	9b00      	ldr	r3, [sp, #0]
     bc2:	2b01      	cmp	r3, #1
     bc4:	d005      	beq.n	bd2 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     bc6:	e009      	b.n	bdc <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
     bc8:	9801      	ldr	r0, [sp, #4]
     bca:	f7ff ff95 	bl	af8 <OsIf_Timer_Dummy_MicrosToTicks>
     bce:	9003      	str	r0, [sp, #12]
            break;
     bd0:	e004      	b.n	bdc <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
     bd2:	9801      	ldr	r0, [sp, #4]
     bd4:	f000 f850 	bl	c78 <OsIf_Timer_System_MicrosToTicks>
     bd8:	9003      	str	r0, [sp, #12]
            break;
     bda:	bf00      	nop
    }

    return Value;
     bdc:	9b03      	ldr	r3, [sp, #12]
}
     bde:	4618      	mov	r0, r3
     be0:	b005      	add	sp, #20
     be2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00000be8 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
     be8:	b500      	push	{lr}
     bea:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
     bec:	2300      	movs	r3, #0
     bee:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
     bf0:	4a09      	ldr	r2, [pc, #36]	; (c18 <OsIf_Timer_System_Init+0x30>)
     bf2:	9b01      	ldr	r3, [sp, #4]
     bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     bf8:	685a      	ldr	r2, [r3, #4]
     bfa:	4908      	ldr	r1, [pc, #32]	; (c1c <OsIf_Timer_System_Init+0x34>)
     bfc:	9b01      	ldr	r3, [sp, #4]
     bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
     c02:	4a06      	ldr	r2, [pc, #24]	; (c1c <OsIf_Timer_System_Init+0x34>)
     c04:	9b01      	ldr	r3, [sp, #4]
     c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     c0a:	4618      	mov	r0, r3
     c0c:	f000 f868 	bl	ce0 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
     c10:	bf00      	nop
     c12:	b003      	add	sp, #12
     c14:	f85d fb04 	ldr.w	pc, [sp], #4
     c18:	00007d2c 	.word	0x00007d2c
     c1c:	1fff8b40 	.word	0x1fff8b40

00000c20 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
     c20:	b500      	push	{lr}
     c22:	b083      	sub	sp, #12
    uint32 Counter = 0U;
     c24:	2300      	movs	r3, #0
     c26:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
     c28:	2300      	movs	r3, #0
     c2a:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
     c2c:	f000 f86c 	bl	d08 <OsIf_Timer_System_Internal_GetCounter>
     c30:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
     c32:	9b01      	ldr	r3, [sp, #4]
}
     c34:	4618      	mov	r0, r3
     c36:	b003      	add	sp, #12
     c38:	f85d fb04 	ldr.w	pc, [sp], #4

00000c3c <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
     c3c:	b500      	push	{lr}
     c3e:	b085      	sub	sp, #20
     c40:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
     c42:	2300      	movs	r3, #0
     c44:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
     c46:	2300      	movs	r3, #0
     c48:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
     c4a:	9801      	ldr	r0, [sp, #4]
     c4c:	f000 f864 	bl	d18 <OsIf_Timer_System_Internal_GetElapsed>
     c50:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
     c52:	9b03      	ldr	r3, [sp, #12]
}
     c54:	4618      	mov	r0, r3
     c56:	b005      	add	sp, #20
     c58:	f85d fb04 	ldr.w	pc, [sp], #4

00000c5c <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
     c5c:	b084      	sub	sp, #16
     c5e:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
     c60:	2300      	movs	r3, #0
     c62:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
     c64:	4903      	ldr	r1, [pc, #12]	; (c74 <OsIf_Timer_System_SetTimerFrequency+0x18>)
     c66:	9b03      	ldr	r3, [sp, #12]
     c68:	9a01      	ldr	r2, [sp, #4]
     c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
     c6e:	bf00      	nop
     c70:	b004      	add	sp, #16
     c72:	4770      	bx	lr
     c74:	1fff8b40 	.word	0x1fff8b40

00000c78 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
     c78:	b5f0      	push	{r4, r5, r6, r7, lr}
     c7a:	b087      	sub	sp, #28
     c7c:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
     c7e:	2100      	movs	r1, #0
     c80:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
     c82:	2100      	movs	r1, #0
     c84:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
     c86:	9901      	ldr	r1, [sp, #4]
     c88:	2000      	movs	r0, #0
     c8a:	460e      	mov	r6, r1
     c8c:	4607      	mov	r7, r0
     c8e:	4812      	ldr	r0, [pc, #72]	; (cd8 <OsIf_Timer_System_MicrosToTicks+0x60>)
     c90:	9904      	ldr	r1, [sp, #16]
     c92:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
     c96:	2000      	movs	r0, #0
     c98:	460c      	mov	r4, r1
     c9a:	4605      	mov	r5, r0
     c9c:	fb04 f007 	mul.w	r0, r4, r7
     ca0:	fb06 f105 	mul.w	r1, r6, r5
     ca4:	4401      	add	r1, r0
     ca6:	fba6 2304 	umull	r2, r3, r6, r4
     caa:	4419      	add	r1, r3
     cac:	460b      	mov	r3, r1
     cae:	e9cd 2302 	strd	r2, r3, [sp, #8]
     cb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
     cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
     cba:	4a08      	ldr	r2, [pc, #32]	; (cdc <OsIf_Timer_System_MicrosToTicks+0x64>)
     cbc:	f04f 0300 	mov.w	r3, #0
     cc0:	f7ff fc70 	bl	5a4 <__aeabi_uldivmod>
     cc4:	4602      	mov	r2, r0
     cc6:	460b      	mov	r3, r1
     cc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
     ccc:	9b02      	ldr	r3, [sp, #8]
     cce:	9305      	str	r3, [sp, #20]
    }

    return ticks;
     cd0:	9b05      	ldr	r3, [sp, #20]
}
     cd2:	4618      	mov	r0, r3
     cd4:	b007      	add	sp, #28
     cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cd8:	1fff8b40 	.word	0x1fff8b40
     cdc:	000f4240 	.word	0x000f4240

00000ce0 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
     ce0:	b082      	sub	sp, #8
     ce2:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
     ce4:	4b07      	ldr	r3, [pc, #28]	; (d04 <OsIf_Timer_System_Internal_Init+0x24>)
     ce6:	2200      	movs	r2, #0
     ce8:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
     cea:	4b06      	ldr	r3, [pc, #24]	; (d04 <OsIf_Timer_System_Internal_Init+0x24>)
     cec:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
     cf0:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
     cf2:	4b04      	ldr	r3, [pc, #16]	; (d04 <OsIf_Timer_System_Internal_Init+0x24>)
     cf4:	2200      	movs	r2, #0
     cf6:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
     cf8:	4b02      	ldr	r3, [pc, #8]	; (d04 <OsIf_Timer_System_Internal_Init+0x24>)
     cfa:	2205      	movs	r2, #5
     cfc:	601a      	str	r2, [r3, #0]
}
     cfe:	bf00      	nop
     d00:	b002      	add	sp, #8
     d02:	4770      	bx	lr
     d04:	e000e010 	.word	0xe000e010

00000d08 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
     d08:	4b02      	ldr	r3, [pc, #8]	; (d14 <OsIf_Timer_System_Internal_GetCounter+0xc>)
     d0a:	689b      	ldr	r3, [r3, #8]
     d0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
     d10:	4618      	mov	r0, r3
     d12:	4770      	bx	lr
     d14:	e000e010 	.word	0xe000e010

00000d18 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
     d18:	b084      	sub	sp, #16
     d1a:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
     d1c:	4b10      	ldr	r3, [pc, #64]	; (d60 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
     d1e:	689b      	ldr	r3, [r3, #8]
     d20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     d24:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
     d26:	2300      	movs	r3, #0
     d28:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
     d2a:	9b01      	ldr	r3, [sp, #4]
     d2c:	681b      	ldr	r3, [r3, #0]
     d2e:	9a02      	ldr	r2, [sp, #8]
     d30:	429a      	cmp	r2, r3
     d32:	d909      	bls.n	d48 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
     d34:	9b01      	ldr	r3, [sp, #4]
     d36:	681a      	ldr	r2, [r3, #0]
     d38:	9b02      	ldr	r3, [sp, #8]
     d3a:	1ad3      	subs	r3, r2, r3
     d3c:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
     d40:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
     d44:	9303      	str	r3, [sp, #12]
     d46:	e004      	b.n	d52 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
     d48:	9b01      	ldr	r3, [sp, #4]
     d4a:	681a      	ldr	r2, [r3, #0]
     d4c:	9b02      	ldr	r3, [sp, #8]
     d4e:	1ad3      	subs	r3, r2, r3
     d50:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
     d52:	9b01      	ldr	r3, [sp, #4]
     d54:	9a02      	ldr	r2, [sp, #8]
     d56:	601a      	str	r2, [r3, #0]

    return dif;
     d58:	9b03      	ldr	r3, [sp, #12]
}
     d5a:	4618      	mov	r0, r3
     d5c:	b004      	add	sp, #16
     d5e:	4770      	bx	lr
     d60:	e000e010 	.word	0xe000e010

00000d64 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
     d64:	b082      	sub	sp, #8
     d66:	9001      	str	r0, [sp, #4]
     d68:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
     d6a:	bf00      	nop
     d6c:	b002      	add	sp, #8
     d6e:	4770      	bx	lr

00000d70 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
     d70:	b500      	push	{lr}
     d72:	b085      	sub	sp, #20
     d74:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
     d76:	4b24      	ldr	r3, [pc, #144]	; (e08 <Clock_Ip_UpdateDriverContext+0x98>)
     d78:	2201      	movs	r2, #1
     d7a:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
     d7c:	4b23      	ldr	r3, [pc, #140]	; (e0c <Clock_Ip_UpdateDriverContext+0x9c>)
     d7e:	681b      	ldr	r3, [r3, #0]
     d80:	2102      	movs	r1, #2
     d82:	4618      	mov	r0, r3
     d84:	f003 fc32 	bl	45ec <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
     d88:	2300      	movs	r3, #0
     d8a:	f88d 300f 	strb.w	r3, [sp, #15]
     d8e:	e015      	b.n	dbc <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
     d90:	f89d 300f 	ldrb.w	r3, [sp, #15]
     d94:	9a01      	ldr	r2, [sp, #4]
     d96:	334a      	adds	r3, #74	; 0x4a
     d98:	00db      	lsls	r3, r3, #3
     d9a:	4413      	add	r3, r2
     d9c:	6858      	ldr	r0, [r3, #4]
     d9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     da2:	9a01      	ldr	r2, [sp, #4]
     da4:	334a      	adds	r3, #74	; 0x4a
     da6:	00db      	lsls	r3, r3, #3
     da8:	4413      	add	r3, r2
     daa:	689b      	ldr	r3, [r3, #8]
     dac:	4619      	mov	r1, r3
     dae:	f001 fadc 	bl	236a <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
     db2:	f89d 300f 	ldrb.w	r3, [sp, #15]
     db6:	3301      	adds	r3, #1
     db8:	f88d 300f 	strb.w	r3, [sp, #15]
     dbc:	9b01      	ldr	r3, [sp, #4]
     dbe:	7bdb      	ldrb	r3, [r3, #15]
     dc0:	f89d 200f 	ldrb.w	r2, [sp, #15]
     dc4:	429a      	cmp	r2, r3
     dc6:	d3e3      	bcc.n	d90 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
     dc8:	f000 f824 	bl	e14 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
     dcc:	2301      	movs	r3, #1
     dce:	f88d 300f 	strb.w	r3, [sp, #15]
     dd2:	e00e      	b.n	df2 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
     dd4:	f89d 200f 	ldrb.w	r2, [sp, #15]
     dd8:	9b01      	ldr	r3, [sp, #4]
     dda:	327e      	adds	r2, #126	; 0x7e
     ddc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
     de0:	490b      	ldr	r1, [pc, #44]	; (e10 <Clock_Ip_UpdateDriverContext+0xa0>)
     de2:	f89d 200f 	ldrb.w	r2, [sp, #15]
     de6:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
     de8:	f89d 300f 	ldrb.w	r3, [sp, #15]
     dec:	3301      	adds	r3, #1
     dee:	f88d 300f 	strb.w	r3, [sp, #15]
     df2:	9b01      	ldr	r3, [sp, #4]
     df4:	7cdb      	ldrb	r3, [r3, #19]
     df6:	f89d 200f 	ldrb.w	r2, [sp, #15]
     dfa:	429a      	cmp	r2, r3
     dfc:	d3ea      	bcc.n	dd4 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
     dfe:	bf00      	nop
     e00:	bf00      	nop
     e02:	b005      	add	sp, #20
     e04:	f85d fb04 	ldr.w	pc, [sp], #4
     e08:	1fff8b10 	.word	0x1fff8b10
     e0c:	1fff8b44 	.word	0x1fff8b44
     e10:	1fff8b50 	.word	0x1fff8b50

00000e14 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
     e14:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
     e16:	4b23      	ldr	r3, [pc, #140]	; (ea4 <Clock_Ip_CallEmptyCallbacks+0x90>)
     e18:	781b      	ldrb	r3, [r3, #0]
     e1a:	f083 0301 	eor.w	r3, r3, #1
     e1e:	b2db      	uxtb	r3, r3
     e20:	2b00      	cmp	r3, #0
     e22:	d03d      	beq.n	ea0 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
     e24:	4b1f      	ldr	r3, [pc, #124]	; (ea4 <Clock_Ip_CallEmptyCallbacks+0x90>)
     e26:	2201      	movs	r2, #1
     e28:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
     e2a:	4b1f      	ldr	r3, [pc, #124]	; (ea8 <Clock_Ip_CallEmptyCallbacks+0x94>)
     e2c:	685b      	ldr	r3, [r3, #4]
     e2e:	2100      	movs	r1, #0
     e30:	2000      	movs	r0, #0
     e32:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
     e34:	4b1c      	ldr	r3, [pc, #112]	; (ea8 <Clock_Ip_CallEmptyCallbacks+0x94>)
     e36:	689b      	ldr	r3, [r3, #8]
     e38:	2057      	movs	r0, #87	; 0x57
     e3a:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     e3c:	4b1b      	ldr	r3, [pc, #108]	; (eac <Clock_Ip_CallEmptyCallbacks+0x98>)
     e3e:	681b      	ldr	r3, [r3, #0]
     e40:	2000      	movs	r0, #0
     e42:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
     e44:	4b1a      	ldr	r3, [pc, #104]	; (eb0 <Clock_Ip_CallEmptyCallbacks+0x9c>)
     e46:	681b      	ldr	r3, [r3, #0]
     e48:	2000      	movs	r0, #0
     e4a:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
     e4c:	4b19      	ldr	r3, [pc, #100]	; (eb4 <Clock_Ip_CallEmptyCallbacks+0xa0>)
     e4e:	681b      	ldr	r3, [r3, #0]
     e50:	2000      	movs	r0, #0
     e52:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     e54:	4b18      	ldr	r3, [pc, #96]	; (eb8 <Clock_Ip_CallEmptyCallbacks+0xa4>)
     e56:	685b      	ldr	r3, [r3, #4]
     e58:	2000      	movs	r0, #0
     e5a:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
     e5c:	4b16      	ldr	r3, [pc, #88]	; (eb8 <Clock_Ip_CallEmptyCallbacks+0xa4>)
     e5e:	689b      	ldr	r3, [r3, #8]
     e60:	2057      	movs	r0, #87	; 0x57
     e62:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     e64:	4b15      	ldr	r3, [pc, #84]	; (ebc <Clock_Ip_CallEmptyCallbacks+0xa8>)
     e66:	681b      	ldr	r3, [r3, #0]
     e68:	2000      	movs	r0, #0
     e6a:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
     e6c:	4b13      	ldr	r3, [pc, #76]	; (ebc <Clock_Ip_CallEmptyCallbacks+0xa8>)
     e6e:	685b      	ldr	r3, [r3, #4]
     e70:	2100      	movs	r1, #0
     e72:	2057      	movs	r0, #87	; 0x57
     e74:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     e76:	4b12      	ldr	r3, [pc, #72]	; (ec0 <Clock_Ip_CallEmptyCallbacks+0xac>)
     e78:	681b      	ldr	r3, [r3, #0]
     e7a:	2000      	movs	r0, #0
     e7c:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     e7e:	4b11      	ldr	r3, [pc, #68]	; (ec4 <Clock_Ip_CallEmptyCallbacks+0xb0>)
     e80:	685b      	ldr	r3, [r3, #4]
     e82:	2000      	movs	r0, #0
     e84:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
     e86:	4b0f      	ldr	r3, [pc, #60]	; (ec4 <Clock_Ip_CallEmptyCallbacks+0xb0>)
     e88:	689b      	ldr	r3, [r3, #8]
     e8a:	2057      	movs	r0, #87	; 0x57
     e8c:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     e8e:	4b0e      	ldr	r3, [pc, #56]	; (ec8 <Clock_Ip_CallEmptyCallbacks+0xb4>)
     e90:	685b      	ldr	r3, [r3, #4]
     e92:	2000      	movs	r0, #0
     e94:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
     e96:	4b0d      	ldr	r3, [pc, #52]	; (ecc <Clock_Ip_CallEmptyCallbacks+0xb8>)
     e98:	681b      	ldr	r3, [r3, #0]
     e9a:	2100      	movs	r1, #0
     e9c:	2000      	movs	r0, #0
     e9e:	4798      	blx	r3
    }
}
     ea0:	bf00      	nop
     ea2:	bd08      	pop	{r3, pc}
     ea4:	1fff8b48 	.word	0x1fff8b48
     ea8:	000077fc 	.word	0x000077fc
     eac:	00007710 	.word	0x00007710
     eb0:	0000774c 	.word	0x0000774c
     eb4:	00007754 	.word	0x00007754
     eb8:	0000777c 	.word	0x0000777c
     ebc:	00007788 	.word	0x00007788
     ec0:	000077c0 	.word	0x000077c0
     ec4:	0000780c 	.word	0x0000780c
     ec8:	00007838 	.word	0x00007838
     ecc:	00007834 	.word	0x00007834

00000ed0 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
     ed0:	b500      	push	{lr}
     ed2:	b085      	sub	sp, #20
     ed4:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
     ed6:	9b01      	ldr	r3, [sp, #4]
     ed8:	7adb      	ldrb	r3, [r3, #11]
     eda:	9303      	str	r3, [sp, #12]
     edc:	e01f      	b.n	f1e <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
     ede:	9b03      	ldr	r3, [sp, #12]
     ee0:	1e5a      	subs	r2, r3, #1
     ee2:	9b01      	ldr	r3, [sp, #4]
     ee4:	320d      	adds	r2, #13
     ee6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
     eea:	495a      	ldr	r1, [pc, #360]	; (1054 <Clock_Ip_ResetClockConfiguration+0x184>)
     eec:	4613      	mov	r3, r2
     eee:	00db      	lsls	r3, r3, #3
     ef0:	4413      	add	r3, r2
     ef2:	440b      	add	r3, r1
     ef4:	3301      	adds	r3, #1
     ef6:	781b      	ldrb	r3, [r3, #0]
     ef8:	461a      	mov	r2, r3
     efa:	4b57      	ldr	r3, [pc, #348]	; (1058 <Clock_Ip_ResetClockConfiguration+0x188>)
     efc:	5c9b      	ldrb	r3, [r3, r2]
     efe:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
     f00:	4a56      	ldr	r2, [pc, #344]	; (105c <Clock_Ip_ResetClockConfiguration+0x18c>)
     f02:	9b02      	ldr	r3, [sp, #8]
     f04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     f08:	9a03      	ldr	r2, [sp, #12]
     f0a:	3a01      	subs	r2, #1
     f0c:	320d      	adds	r2, #13
     f0e:	00d2      	lsls	r2, r2, #3
     f10:	9901      	ldr	r1, [sp, #4]
     f12:	440a      	add	r2, r1
     f14:	4610      	mov	r0, r2
     f16:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
     f18:	9b03      	ldr	r3, [sp, #12]
     f1a:	3b01      	subs	r3, #1
     f1c:	9303      	str	r3, [sp, #12]
     f1e:	9b03      	ldr	r3, [sp, #12]
     f20:	2b00      	cmp	r3, #0
     f22:	d1dc      	bne.n	ede <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
     f24:	9b01      	ldr	r3, [sp, #4]
     f26:	7b9b      	ldrb	r3, [r3, #14]
     f28:	9303      	str	r3, [sp, #12]
     f2a:	e026      	b.n	f7a <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
     f2c:	9b03      	ldr	r3, [sp, #12]
     f2e:	3b01      	subs	r3, #1
     f30:	9a01      	ldr	r2, [sp, #4]
     f32:	3324      	adds	r3, #36	; 0x24
     f34:	011b      	lsls	r3, r3, #4
     f36:	4413      	add	r3, r2
     f38:	3304      	adds	r3, #4
     f3a:	681a      	ldr	r2, [r3, #0]
     f3c:	4945      	ldr	r1, [pc, #276]	; (1054 <Clock_Ip_ResetClockConfiguration+0x184>)
     f3e:	4613      	mov	r3, r2
     f40:	00db      	lsls	r3, r3, #3
     f42:	4413      	add	r3, r2
     f44:	440b      	add	r3, r1
     f46:	3301      	adds	r3, #1
     f48:	781b      	ldrb	r3, [r3, #0]
     f4a:	461a      	mov	r2, r3
     f4c:	4b44      	ldr	r3, [pc, #272]	; (1060 <Clock_Ip_ResetClockConfiguration+0x190>)
     f4e:	5c9b      	ldrb	r3, [r3, r2]
     f50:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
     f52:	4944      	ldr	r1, [pc, #272]	; (1064 <Clock_Ip_ResetClockConfiguration+0x194>)
     f54:	9a02      	ldr	r2, [sp, #8]
     f56:	4613      	mov	r3, r2
     f58:	005b      	lsls	r3, r3, #1
     f5a:	4413      	add	r3, r2
     f5c:	009b      	lsls	r3, r3, #2
     f5e:	440b      	add	r3, r1
     f60:	681b      	ldr	r3, [r3, #0]
     f62:	9a03      	ldr	r2, [sp, #12]
     f64:	3a01      	subs	r2, #1
     f66:	3224      	adds	r2, #36	; 0x24
     f68:	0112      	lsls	r2, r2, #4
     f6a:	9901      	ldr	r1, [sp, #4]
     f6c:	440a      	add	r2, r1
     f6e:	3204      	adds	r2, #4
     f70:	4610      	mov	r0, r2
     f72:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
     f74:	9b03      	ldr	r3, [sp, #12]
     f76:	3b01      	subs	r3, #1
     f78:	9303      	str	r3, [sp, #12]
     f7a:	9b03      	ldr	r3, [sp, #12]
     f7c:	2b00      	cmp	r3, #0
     f7e:	d1d5      	bne.n	f2c <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
     f80:	9b01      	ldr	r3, [sp, #4]
     f82:	7a9b      	ldrb	r3, [r3, #10]
     f84:	9303      	str	r3, [sp, #12]
     f86:	e02a      	b.n	fde <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
     f88:	9b03      	ldr	r3, [sp, #12]
     f8a:	1e5a      	subs	r2, r3, #1
     f8c:	9901      	ldr	r1, [sp, #4]
     f8e:	4613      	mov	r3, r2
     f90:	009b      	lsls	r3, r3, #2
     f92:	4413      	add	r3, r2
     f94:	00db      	lsls	r3, r3, #3
     f96:	440b      	add	r3, r1
     f98:	3340      	adds	r3, #64	; 0x40
     f9a:	681a      	ldr	r2, [r3, #0]
     f9c:	492d      	ldr	r1, [pc, #180]	; (1054 <Clock_Ip_ResetClockConfiguration+0x184>)
     f9e:	4613      	mov	r3, r2
     fa0:	00db      	lsls	r3, r3, #3
     fa2:	4413      	add	r3, r2
     fa4:	440b      	add	r3, r1
     fa6:	3301      	adds	r3, #1
     fa8:	781b      	ldrb	r3, [r3, #0]
     faa:	461a      	mov	r2, r3
     fac:	4b2e      	ldr	r3, [pc, #184]	; (1068 <Clock_Ip_ResetClockConfiguration+0x198>)
     fae:	5c9b      	ldrb	r3, [r3, r2]
     fb0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
     fb2:	492e      	ldr	r1, [pc, #184]	; (106c <Clock_Ip_ResetClockConfiguration+0x19c>)
     fb4:	9a02      	ldr	r2, [sp, #8]
     fb6:	4613      	mov	r3, r2
     fb8:	009b      	lsls	r3, r3, #2
     fba:	4413      	add	r3, r2
     fbc:	009b      	lsls	r3, r3, #2
     fbe:	440b      	add	r3, r1
     fc0:	6819      	ldr	r1, [r3, #0]
     fc2:	9b03      	ldr	r3, [sp, #12]
     fc4:	1e5a      	subs	r2, r3, #1
     fc6:	4613      	mov	r3, r2
     fc8:	009b      	lsls	r3, r3, #2
     fca:	4413      	add	r3, r2
     fcc:	00db      	lsls	r3, r3, #3
     fce:	3340      	adds	r3, #64	; 0x40
     fd0:	9a01      	ldr	r2, [sp, #4]
     fd2:	4413      	add	r3, r2
     fd4:	4618      	mov	r0, r3
     fd6:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
     fd8:	9b03      	ldr	r3, [sp, #12]
     fda:	3b01      	subs	r3, #1
     fdc:	9303      	str	r3, [sp, #12]
     fde:	9b03      	ldr	r3, [sp, #12]
     fe0:	2b00      	cmp	r3, #0
     fe2:	d1d1      	bne.n	f88 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
     fe4:	9b01      	ldr	r3, [sp, #4]
     fe6:	7a5b      	ldrb	r3, [r3, #9]
     fe8:	9303      	str	r3, [sp, #12]
     fea:	e02b      	b.n	1044 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
     fec:	9b03      	ldr	r3, [sp, #12]
     fee:	1e5a      	subs	r2, r3, #1
     ff0:	9901      	ldr	r1, [sp, #4]
     ff2:	4613      	mov	r3, r2
     ff4:	009b      	lsls	r3, r3, #2
     ff6:	4413      	add	r3, r2
     ff8:	009b      	lsls	r3, r3, #2
     ffa:	440b      	add	r3, r1
     ffc:	332c      	adds	r3, #44	; 0x2c
     ffe:	681a      	ldr	r2, [r3, #0]
    1000:	4914      	ldr	r1, [pc, #80]	; (1054 <Clock_Ip_ResetClockConfiguration+0x184>)
    1002:	4613      	mov	r3, r2
    1004:	00db      	lsls	r3, r3, #3
    1006:	4413      	add	r3, r2
    1008:	440b      	add	r3, r1
    100a:	3301      	adds	r3, #1
    100c:	781b      	ldrb	r3, [r3, #0]
    100e:	461a      	mov	r2, r3
    1010:	4b17      	ldr	r3, [pc, #92]	; (1070 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    1012:	5c9b      	ldrb	r3, [r3, r2]
    1014:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1016:	4917      	ldr	r1, [pc, #92]	; (1074 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1018:	9a02      	ldr	r2, [sp, #8]
    101a:	4613      	mov	r3, r2
    101c:	009b      	lsls	r3, r3, #2
    101e:	4413      	add	r3, r2
    1020:	009b      	lsls	r3, r3, #2
    1022:	440b      	add	r3, r1
    1024:	6819      	ldr	r1, [r3, #0]
    1026:	9b03      	ldr	r3, [sp, #12]
    1028:	1e5a      	subs	r2, r3, #1
    102a:	4613      	mov	r3, r2
    102c:	009b      	lsls	r3, r3, #2
    102e:	4413      	add	r3, r2
    1030:	009b      	lsls	r3, r3, #2
    1032:	3328      	adds	r3, #40	; 0x28
    1034:	9a01      	ldr	r2, [sp, #4]
    1036:	4413      	add	r3, r2
    1038:	3304      	adds	r3, #4
    103a:	4618      	mov	r0, r3
    103c:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    103e:	9b03      	ldr	r3, [sp, #12]
    1040:	3b01      	subs	r3, #1
    1042:	9303      	str	r3, [sp, #12]
    1044:	9b03      	ldr	r3, [sp, #12]
    1046:	2b00      	cmp	r3, #0
    1048:	d1d0      	bne.n	fec <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    104a:	bf00      	nop
    104c:	bf00      	nop
    104e:	b005      	add	sp, #20
    1050:	f85d fb04 	ldr.w	pc, [sp], #4
    1054:	00007200 	.word	0x00007200
    1058:	000071d0 	.word	0x000071d0
    105c:	00007838 	.word	0x00007838
    1060:	000071b0 	.word	0x000071b0
    1064:	0000777c 	.word	0x0000777c
    1068:	000071c0 	.word	0x000071c0
    106c:	0000780c 	.word	0x0000780c
    1070:	00007180 	.word	0x00007180
    1074:	00007754 	.word	0x00007754

00001078 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    1078:	b500      	push	{lr}
    107a:	b085      	sub	sp, #20
    107c:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    107e:	2301      	movs	r3, #1
    1080:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    1082:	9801      	ldr	r0, [sp, #4]
    1084:	f000 f818 	bl	10b8 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    1088:	4b0a      	ldr	r3, [pc, #40]	; (10b4 <Clock_Ip_Init+0x3c>)
    108a:	781b      	ldrb	r3, [r3, #0]
    108c:	2b00      	cmp	r3, #0
    108e:	d00a      	beq.n	10a6 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    1090:	f000 fb74 	bl	177c <Clock_Ip_GetPllStatus>
    1094:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    1096:	9b02      	ldr	r3, [sp, #8]
    1098:	2b00      	cmp	r3, #0
    109a:	d106      	bne.n	10aa <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    109c:	f000 fbf2 	bl	1884 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    10a0:	2300      	movs	r3, #0
    10a2:	9303      	str	r3, [sp, #12]
    10a4:	e001      	b.n	10aa <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    10a6:	2300      	movs	r3, #0
    10a8:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    10aa:	9b03      	ldr	r3, [sp, #12]
}
    10ac:	4618      	mov	r0, r3
    10ae:	b005      	add	sp, #20
    10b0:	f85d fb04 	ldr.w	pc, [sp], #4
    10b4:	1fff8b4c 	.word	0x1fff8b4c

000010b8 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    10b8:	b510      	push	{r4, lr}
    10ba:	b084      	sub	sp, #16
    10bc:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    10be:	4a9f      	ldr	r2, [pc, #636]	; (133c <Clock_Ip_InitClock+0x284>)
    10c0:	9b01      	ldr	r3, [sp, #4]
    10c2:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    10c4:	2101      	movs	r1, #1
    10c6:	9801      	ldr	r0, [sp, #4]
    10c8:	f003 fa90 	bl	45ec <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    10cc:	4b9b      	ldr	r3, [pc, #620]	; (133c <Clock_Ip_InitClock+0x284>)
    10ce:	681b      	ldr	r3, [r3, #0]
    10d0:	2b00      	cmp	r3, #0
    10d2:	d030      	beq.n	1136 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    10d4:	2300      	movs	r3, #0
    10d6:	9303      	str	r3, [sp, #12]
    10d8:	e027      	b.n	112a <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    10da:	9901      	ldr	r1, [sp, #4]
    10dc:	9a03      	ldr	r2, [sp, #12]
    10de:	4613      	mov	r3, r2
    10e0:	009b      	lsls	r3, r3, #2
    10e2:	4413      	add	r3, r2
    10e4:	009b      	lsls	r3, r3, #2
    10e6:	440b      	add	r3, r1
    10e8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    10ec:	681a      	ldr	r2, [r3, #0]
    10ee:	4994      	ldr	r1, [pc, #592]	; (1340 <Clock_Ip_InitClock+0x288>)
    10f0:	4613      	mov	r3, r2
    10f2:	00db      	lsls	r3, r3, #3
    10f4:	4413      	add	r3, r2
    10f6:	440b      	add	r3, r1
    10f8:	3301      	adds	r3, #1
    10fa:	781b      	ldrb	r3, [r3, #0]
    10fc:	461a      	mov	r2, r3
    10fe:	4b91      	ldr	r3, [pc, #580]	; (1344 <Clock_Ip_InitClock+0x28c>)
    1100:	5c9b      	ldrb	r3, [r3, r2]
    1102:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    1104:	4a90      	ldr	r2, [pc, #576]	; (1348 <Clock_Ip_InitClock+0x290>)
    1106:	9b02      	ldr	r3, [sp, #8]
    1108:	011b      	lsls	r3, r3, #4
    110a:	4413      	add	r3, r2
    110c:	6819      	ldr	r1, [r3, #0]
    110e:	9a03      	ldr	r2, [sp, #12]
    1110:	4613      	mov	r3, r2
    1112:	009b      	lsls	r3, r3, #2
    1114:	4413      	add	r3, r2
    1116:	009b      	lsls	r3, r3, #2
    1118:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    111c:	9a01      	ldr	r2, [sp, #4]
    111e:	4413      	add	r3, r2
    1120:	4618      	mov	r0, r3
    1122:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1124:	9b03      	ldr	r3, [sp, #12]
    1126:	3301      	adds	r3, #1
    1128:	9303      	str	r3, [sp, #12]
    112a:	9b01      	ldr	r3, [sp, #4]
    112c:	7c9b      	ldrb	r3, [r3, #18]
    112e:	461a      	mov	r2, r3
    1130:	9b03      	ldr	r3, [sp, #12]
    1132:	4293      	cmp	r3, r2
    1134:	d3d1      	bcc.n	10da <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    1136:	9801      	ldr	r0, [sp, #4]
    1138:	f7ff feca 	bl	ed0 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    113c:	2300      	movs	r3, #0
    113e:	9303      	str	r3, [sp, #12]
    1140:	e029      	b.n	1196 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1142:	9901      	ldr	r1, [sp, #4]
    1144:	9a03      	ldr	r2, [sp, #12]
    1146:	4613      	mov	r3, r2
    1148:	005b      	lsls	r3, r3, #1
    114a:	4413      	add	r3, r2
    114c:	009b      	lsls	r3, r3, #2
    114e:	440b      	add	r3, r1
    1150:	3314      	adds	r3, #20
    1152:	681a      	ldr	r2, [r3, #0]
    1154:	497a      	ldr	r1, [pc, #488]	; (1340 <Clock_Ip_InitClock+0x288>)
    1156:	4613      	mov	r3, r2
    1158:	00db      	lsls	r3, r3, #3
    115a:	4413      	add	r3, r2
    115c:	440b      	add	r3, r1
    115e:	3301      	adds	r3, #1
    1160:	781b      	ldrb	r3, [r3, #0]
    1162:	461a      	mov	r2, r3
    1164:	4b79      	ldr	r3, [pc, #484]	; (134c <Clock_Ip_InitClock+0x294>)
    1166:	5c9b      	ldrb	r3, [r3, r2]
    1168:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    116a:	4979      	ldr	r1, [pc, #484]	; (1350 <Clock_Ip_InitClock+0x298>)
    116c:	9a02      	ldr	r2, [sp, #8]
    116e:	4613      	mov	r3, r2
    1170:	005b      	lsls	r3, r3, #1
    1172:	4413      	add	r3, r2
    1174:	009b      	lsls	r3, r3, #2
    1176:	440b      	add	r3, r1
    1178:	6819      	ldr	r1, [r3, #0]
    117a:	9a03      	ldr	r2, [sp, #12]
    117c:	4613      	mov	r3, r2
    117e:	005b      	lsls	r3, r3, #1
    1180:	4413      	add	r3, r2
    1182:	009b      	lsls	r3, r3, #2
    1184:	3310      	adds	r3, #16
    1186:	9a01      	ldr	r2, [sp, #4]
    1188:	4413      	add	r3, r2
    118a:	3304      	adds	r3, #4
    118c:	4618      	mov	r0, r3
    118e:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1190:	9b03      	ldr	r3, [sp, #12]
    1192:	3301      	adds	r3, #1
    1194:	9303      	str	r3, [sp, #12]
    1196:	9b01      	ldr	r3, [sp, #4]
    1198:	7a1b      	ldrb	r3, [r3, #8]
    119a:	461a      	mov	r2, r3
    119c:	9b03      	ldr	r3, [sp, #12]
    119e:	4293      	cmp	r3, r2
    11a0:	d3cf      	bcc.n	1142 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    11a2:	2300      	movs	r3, #0
    11a4:	9303      	str	r3, [sp, #12]
    11a6:	e02a      	b.n	11fe <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    11a8:	9901      	ldr	r1, [sp, #4]
    11aa:	9a03      	ldr	r2, [sp, #12]
    11ac:	4613      	mov	r3, r2
    11ae:	009b      	lsls	r3, r3, #2
    11b0:	4413      	add	r3, r2
    11b2:	009b      	lsls	r3, r3, #2
    11b4:	440b      	add	r3, r1
    11b6:	332c      	adds	r3, #44	; 0x2c
    11b8:	681a      	ldr	r2, [r3, #0]
    11ba:	4961      	ldr	r1, [pc, #388]	; (1340 <Clock_Ip_InitClock+0x288>)
    11bc:	4613      	mov	r3, r2
    11be:	00db      	lsls	r3, r3, #3
    11c0:	4413      	add	r3, r2
    11c2:	440b      	add	r3, r1
    11c4:	3301      	adds	r3, #1
    11c6:	781b      	ldrb	r3, [r3, #0]
    11c8:	461a      	mov	r2, r3
    11ca:	4b62      	ldr	r3, [pc, #392]	; (1354 <Clock_Ip_InitClock+0x29c>)
    11cc:	5c9b      	ldrb	r3, [r3, r2]
    11ce:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    11d0:	4961      	ldr	r1, [pc, #388]	; (1358 <Clock_Ip_InitClock+0x2a0>)
    11d2:	9a02      	ldr	r2, [sp, #8]
    11d4:	4613      	mov	r3, r2
    11d6:	009b      	lsls	r3, r3, #2
    11d8:	4413      	add	r3, r2
    11da:	009b      	lsls	r3, r3, #2
    11dc:	440b      	add	r3, r1
    11de:	3304      	adds	r3, #4
    11e0:	6819      	ldr	r1, [r3, #0]
    11e2:	9a03      	ldr	r2, [sp, #12]
    11e4:	4613      	mov	r3, r2
    11e6:	009b      	lsls	r3, r3, #2
    11e8:	4413      	add	r3, r2
    11ea:	009b      	lsls	r3, r3, #2
    11ec:	3328      	adds	r3, #40	; 0x28
    11ee:	9a01      	ldr	r2, [sp, #4]
    11f0:	4413      	add	r3, r2
    11f2:	3304      	adds	r3, #4
    11f4:	4618      	mov	r0, r3
    11f6:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    11f8:	9b03      	ldr	r3, [sp, #12]
    11fa:	3301      	adds	r3, #1
    11fc:	9303      	str	r3, [sp, #12]
    11fe:	9b01      	ldr	r3, [sp, #4]
    1200:	7a5b      	ldrb	r3, [r3, #9]
    1202:	461a      	mov	r2, r3
    1204:	9b03      	ldr	r3, [sp, #12]
    1206:	4293      	cmp	r3, r2
    1208:	d3ce      	bcc.n	11a8 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    120a:	9801      	ldr	r0, [sp, #4]
    120c:	f7ff fdb0 	bl	d70 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1210:	2300      	movs	r3, #0
    1212:	9303      	str	r3, [sp, #12]
    1214:	e028      	b.n	1268 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    1216:	9901      	ldr	r1, [sp, #4]
    1218:	9a03      	ldr	r2, [sp, #12]
    121a:	4613      	mov	r3, r2
    121c:	009b      	lsls	r3, r3, #2
    121e:	4413      	add	r3, r2
    1220:	009b      	lsls	r3, r3, #2
    1222:	440b      	add	r3, r1
    1224:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1228:	681a      	ldr	r2, [r3, #0]
    122a:	4945      	ldr	r1, [pc, #276]	; (1340 <Clock_Ip_InitClock+0x288>)
    122c:	4613      	mov	r3, r2
    122e:	00db      	lsls	r3, r3, #3
    1230:	4413      	add	r3, r2
    1232:	440b      	add	r3, r1
    1234:	3301      	adds	r3, #1
    1236:	781b      	ldrb	r3, [r3, #0]
    1238:	461a      	mov	r2, r3
    123a:	4b48      	ldr	r3, [pc, #288]	; (135c <Clock_Ip_InitClock+0x2a4>)
    123c:	5c9b      	ldrb	r3, [r3, r2]
    123e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    1240:	4a47      	ldr	r2, [pc, #284]	; (1360 <Clock_Ip_InitClock+0x2a8>)
    1242:	9b02      	ldr	r3, [sp, #8]
    1244:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1248:	9a03      	ldr	r2, [sp, #12]
    124a:	4613      	mov	r3, r2
    124c:	009b      	lsls	r3, r3, #2
    124e:	4413      	add	r3, r2
    1250:	009b      	lsls	r3, r3, #2
    1252:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    1256:	9a01      	ldr	r2, [sp, #4]
    1258:	4413      	add	r3, r2
    125a:	3304      	adds	r3, #4
    125c:	9903      	ldr	r1, [sp, #12]
    125e:	4618      	mov	r0, r3
    1260:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1262:	9b03      	ldr	r3, [sp, #12]
    1264:	3301      	adds	r3, #1
    1266:	9303      	str	r3, [sp, #12]
    1268:	9b01      	ldr	r3, [sp, #4]
    126a:	7c5b      	ldrb	r3, [r3, #17]
    126c:	461a      	mov	r2, r3
    126e:	9b03      	ldr	r3, [sp, #12]
    1270:	4293      	cmp	r3, r2
    1272:	d3d0      	bcc.n	1216 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1274:	2300      	movs	r3, #0
    1276:	9303      	str	r3, [sp, #12]
    1278:	e026      	b.n	12c8 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    127a:	9901      	ldr	r1, [sp, #4]
    127c:	9a03      	ldr	r2, [sp, #12]
    127e:	4613      	mov	r3, r2
    1280:	005b      	lsls	r3, r3, #1
    1282:	4413      	add	r3, r2
    1284:	009b      	lsls	r3, r3, #2
    1286:	440b      	add	r3, r1
    1288:	f503 730e 	add.w	r3, r3, #568	; 0x238
    128c:	681a      	ldr	r2, [r3, #0]
    128e:	492c      	ldr	r1, [pc, #176]	; (1340 <Clock_Ip_InitClock+0x288>)
    1290:	4613      	mov	r3, r2
    1292:	00db      	lsls	r3, r3, #3
    1294:	4413      	add	r3, r2
    1296:	440b      	add	r3, r1
    1298:	3301      	adds	r3, #1
    129a:	781b      	ldrb	r3, [r3, #0]
    129c:	461a      	mov	r2, r3
    129e:	4b31      	ldr	r3, [pc, #196]	; (1364 <Clock_Ip_InitClock+0x2ac>)
    12a0:	5c9b      	ldrb	r3, [r3, r2]
    12a2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    12a4:	4a30      	ldr	r2, [pc, #192]	; (1368 <Clock_Ip_InitClock+0x2b0>)
    12a6:	9b02      	ldr	r3, [sp, #8]
    12a8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    12ac:	9a03      	ldr	r2, [sp, #12]
    12ae:	4613      	mov	r3, r2
    12b0:	005b      	lsls	r3, r3, #1
    12b2:	4413      	add	r3, r2
    12b4:	009b      	lsls	r3, r3, #2
    12b6:	f503 730e 	add.w	r3, r3, #568	; 0x238
    12ba:	9a01      	ldr	r2, [sp, #4]
    12bc:	4413      	add	r3, r2
    12be:	4618      	mov	r0, r3
    12c0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    12c2:	9b03      	ldr	r3, [sp, #12]
    12c4:	3301      	adds	r3, #1
    12c6:	9303      	str	r3, [sp, #12]
    12c8:	9b01      	ldr	r3, [sp, #4]
    12ca:	7b5b      	ldrb	r3, [r3, #13]
    12cc:	461a      	mov	r2, r3
    12ce:	9b03      	ldr	r3, [sp, #12]
    12d0:	4293      	cmp	r3, r2
    12d2:	d3d2      	bcc.n	127a <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    12d4:	2300      	movs	r3, #0
    12d6:	9303      	str	r3, [sp, #12]
    12d8:	e026      	b.n	1328 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    12da:	9901      	ldr	r1, [sp, #4]
    12dc:	9a03      	ldr	r2, [sp, #12]
    12de:	4613      	mov	r3, r2
    12e0:	005b      	lsls	r3, r3, #1
    12e2:	4413      	add	r3, r2
    12e4:	009b      	lsls	r3, r3, #2
    12e6:	440b      	add	r3, r1
    12e8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    12ec:	681a      	ldr	r2, [r3, #0]
    12ee:	4914      	ldr	r1, [pc, #80]	; (1340 <Clock_Ip_InitClock+0x288>)
    12f0:	4613      	mov	r3, r2
    12f2:	00db      	lsls	r3, r3, #3
    12f4:	4413      	add	r3, r2
    12f6:	440b      	add	r3, r1
    12f8:	3301      	adds	r3, #1
    12fa:	781b      	ldrb	r3, [r3, #0]
    12fc:	461a      	mov	r2, r3
    12fe:	4b1b      	ldr	r3, [pc, #108]	; (136c <Clock_Ip_InitClock+0x2b4>)
    1300:	5c9b      	ldrb	r3, [r3, r2]
    1302:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    1304:	4a1a      	ldr	r2, [pc, #104]	; (1370 <Clock_Ip_InitClock+0x2b8>)
    1306:	9b02      	ldr	r3, [sp, #8]
    1308:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    130c:	9a03      	ldr	r2, [sp, #12]
    130e:	4613      	mov	r3, r2
    1310:	005b      	lsls	r3, r3, #1
    1312:	4413      	add	r3, r2
    1314:	009b      	lsls	r3, r3, #2
    1316:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    131a:	9a01      	ldr	r2, [sp, #4]
    131c:	4413      	add	r3, r2
    131e:	4618      	mov	r0, r3
    1320:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1322:	9b03      	ldr	r3, [sp, #12]
    1324:	3301      	adds	r3, #1
    1326:	9303      	str	r3, [sp, #12]
    1328:	9b01      	ldr	r3, [sp, #4]
    132a:	7b1b      	ldrb	r3, [r3, #12]
    132c:	461a      	mov	r2, r3
    132e:	9b03      	ldr	r3, [sp, #12]
    1330:	4293      	cmp	r3, r2
    1332:	d3d2      	bcc.n	12da <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1334:	2300      	movs	r3, #0
    1336:	9303      	str	r3, [sp, #12]
    1338:	e044      	b.n	13c4 <Clock_Ip_InitClock+0x30c>
    133a:	bf00      	nop
    133c:	1fff8b44 	.word	0x1fff8b44
    1340:	00007200 	.word	0x00007200
    1344:	000071f0 	.word	0x000071f0
    1348:	000077fc 	.word	0x000077fc
    134c:	00007190 	.word	0x00007190
    1350:	000077c0 	.word	0x000077c0
    1354:	00007180 	.word	0x00007180
    1358:	00007754 	.word	0x00007754
    135c:	000071e0 	.word	0x000071e0
    1360:	00007834 	.word	0x00007834
    1364:	00007170 	.word	0x00007170
    1368:	0000774c 	.word	0x0000774c
    136c:	00007160 	.word	0x00007160
    1370:	00007710 	.word	0x00007710
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1374:	9901      	ldr	r1, [sp, #4]
    1376:	9a03      	ldr	r2, [sp, #12]
    1378:	4613      	mov	r3, r2
    137a:	005b      	lsls	r3, r3, #1
    137c:	4413      	add	r3, r2
    137e:	009b      	lsls	r3, r3, #2
    1380:	440b      	add	r3, r1
    1382:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1386:	681a      	ldr	r2, [r3, #0]
    1388:	49ac      	ldr	r1, [pc, #688]	; (163c <Clock_Ip_InitClock+0x584>)
    138a:	4613      	mov	r3, r2
    138c:	00db      	lsls	r3, r3, #3
    138e:	4413      	add	r3, r2
    1390:	440b      	add	r3, r1
    1392:	3301      	adds	r3, #1
    1394:	781b      	ldrb	r3, [r3, #0]
    1396:	461a      	mov	r2, r3
    1398:	4ba9      	ldr	r3, [pc, #676]	; (1640 <Clock_Ip_InitClock+0x588>)
    139a:	5c9b      	ldrb	r3, [r3, r2]
    139c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    139e:	4aa9      	ldr	r2, [pc, #676]	; (1644 <Clock_Ip_InitClock+0x58c>)
    13a0:	9b02      	ldr	r3, [sp, #8]
    13a2:	00db      	lsls	r3, r3, #3
    13a4:	4413      	add	r3, r2
    13a6:	6859      	ldr	r1, [r3, #4]
    13a8:	9a03      	ldr	r2, [sp, #12]
    13aa:	4613      	mov	r3, r2
    13ac:	005b      	lsls	r3, r3, #1
    13ae:	4413      	add	r3, r2
    13b0:	009b      	lsls	r3, r3, #2
    13b2:	f503 730e 	add.w	r3, r3, #568	; 0x238
    13b6:	9a01      	ldr	r2, [sp, #4]
    13b8:	4413      	add	r3, r2
    13ba:	4618      	mov	r0, r3
    13bc:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    13be:	9b03      	ldr	r3, [sp, #12]
    13c0:	3301      	adds	r3, #1
    13c2:	9303      	str	r3, [sp, #12]
    13c4:	9b01      	ldr	r3, [sp, #4]
    13c6:	7b5b      	ldrb	r3, [r3, #13]
    13c8:	461a      	mov	r2, r3
    13ca:	9b03      	ldr	r3, [sp, #12]
    13cc:	4293      	cmp	r3, r2
    13ce:	d3d1      	bcc.n	1374 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    13d0:	2300      	movs	r3, #0
    13d2:	9303      	str	r3, [sp, #12]
    13d4:	e029      	b.n	142a <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    13d6:	9901      	ldr	r1, [sp, #4]
    13d8:	9a03      	ldr	r2, [sp, #12]
    13da:	4613      	mov	r3, r2
    13dc:	009b      	lsls	r3, r3, #2
    13de:	4413      	add	r3, r2
    13e0:	00db      	lsls	r3, r3, #3
    13e2:	440b      	add	r3, r1
    13e4:	3340      	adds	r3, #64	; 0x40
    13e6:	681a      	ldr	r2, [r3, #0]
    13e8:	4994      	ldr	r1, [pc, #592]	; (163c <Clock_Ip_InitClock+0x584>)
    13ea:	4613      	mov	r3, r2
    13ec:	00db      	lsls	r3, r3, #3
    13ee:	4413      	add	r3, r2
    13f0:	440b      	add	r3, r1
    13f2:	3301      	adds	r3, #1
    13f4:	781b      	ldrb	r3, [r3, #0]
    13f6:	461a      	mov	r2, r3
    13f8:	4b93      	ldr	r3, [pc, #588]	; (1648 <Clock_Ip_InitClock+0x590>)
    13fa:	5c9b      	ldrb	r3, [r3, r2]
    13fc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    13fe:	4993      	ldr	r1, [pc, #588]	; (164c <Clock_Ip_InitClock+0x594>)
    1400:	9a02      	ldr	r2, [sp, #8]
    1402:	4613      	mov	r3, r2
    1404:	009b      	lsls	r3, r3, #2
    1406:	4413      	add	r3, r2
    1408:	009b      	lsls	r3, r3, #2
    140a:	440b      	add	r3, r1
    140c:	3304      	adds	r3, #4
    140e:	6819      	ldr	r1, [r3, #0]
    1410:	9a03      	ldr	r2, [sp, #12]
    1412:	4613      	mov	r3, r2
    1414:	009b      	lsls	r3, r3, #2
    1416:	4413      	add	r3, r2
    1418:	00db      	lsls	r3, r3, #3
    141a:	3340      	adds	r3, #64	; 0x40
    141c:	9a01      	ldr	r2, [sp, #4]
    141e:	4413      	add	r3, r2
    1420:	4618      	mov	r0, r3
    1422:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1424:	9b03      	ldr	r3, [sp, #12]
    1426:	3301      	adds	r3, #1
    1428:	9303      	str	r3, [sp, #12]
    142a:	9b01      	ldr	r3, [sp, #4]
    142c:	7a9b      	ldrb	r3, [r3, #10]
    142e:	461a      	mov	r2, r3
    1430:	9b03      	ldr	r3, [sp, #12]
    1432:	4293      	cmp	r3, r2
    1434:	d3cf      	bcc.n	13d6 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1436:	2300      	movs	r3, #0
    1438:	9303      	str	r3, [sp, #12]
    143a:	e029      	b.n	1490 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    143c:	9901      	ldr	r1, [sp, #4]
    143e:	9a03      	ldr	r2, [sp, #12]
    1440:	4613      	mov	r3, r2
    1442:	009b      	lsls	r3, r3, #2
    1444:	4413      	add	r3, r2
    1446:	009b      	lsls	r3, r3, #2
    1448:	440b      	add	r3, r1
    144a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    144e:	681a      	ldr	r2, [r3, #0]
    1450:	497a      	ldr	r1, [pc, #488]	; (163c <Clock_Ip_InitClock+0x584>)
    1452:	4613      	mov	r3, r2
    1454:	00db      	lsls	r3, r3, #3
    1456:	4413      	add	r3, r2
    1458:	440b      	add	r3, r1
    145a:	3301      	adds	r3, #1
    145c:	781b      	ldrb	r3, [r3, #0]
    145e:	461a      	mov	r2, r3
    1460:	4b7b      	ldr	r3, [pc, #492]	; (1650 <Clock_Ip_InitClock+0x598>)
    1462:	5c9b      	ldrb	r3, [r3, r2]
    1464:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    1466:	4a7b      	ldr	r2, [pc, #492]	; (1654 <Clock_Ip_InitClock+0x59c>)
    1468:	9b02      	ldr	r3, [sp, #8]
    146a:	011b      	lsls	r3, r3, #4
    146c:	4413      	add	r3, r2
    146e:	3304      	adds	r3, #4
    1470:	681c      	ldr	r4, [r3, #0]
    1472:	9a03      	ldr	r2, [sp, #12]
    1474:	4613      	mov	r3, r2
    1476:	009b      	lsls	r3, r3, #2
    1478:	4413      	add	r3, r2
    147a:	009b      	lsls	r3, r3, #2
    147c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1480:	9a01      	ldr	r2, [sp, #4]
    1482:	4413      	add	r3, r2
    1484:	9903      	ldr	r1, [sp, #12]
    1486:	4618      	mov	r0, r3
    1488:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    148a:	9b03      	ldr	r3, [sp, #12]
    148c:	3301      	adds	r3, #1
    148e:	9303      	str	r3, [sp, #12]
    1490:	9b01      	ldr	r3, [sp, #4]
    1492:	7c9b      	ldrb	r3, [r3, #18]
    1494:	461a      	mov	r2, r3
    1496:	9b03      	ldr	r3, [sp, #12]
    1498:	4293      	cmp	r3, r2
    149a:	d3cf      	bcc.n	143c <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    149c:	2300      	movs	r3, #0
    149e:	9303      	str	r3, [sp, #12]
    14a0:	e02a      	b.n	14f8 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    14a2:	9901      	ldr	r1, [sp, #4]
    14a4:	9a03      	ldr	r2, [sp, #12]
    14a6:	4613      	mov	r3, r2
    14a8:	009b      	lsls	r3, r3, #2
    14aa:	4413      	add	r3, r2
    14ac:	009b      	lsls	r3, r3, #2
    14ae:	440b      	add	r3, r1
    14b0:	332c      	adds	r3, #44	; 0x2c
    14b2:	681a      	ldr	r2, [r3, #0]
    14b4:	4961      	ldr	r1, [pc, #388]	; (163c <Clock_Ip_InitClock+0x584>)
    14b6:	4613      	mov	r3, r2
    14b8:	00db      	lsls	r3, r3, #3
    14ba:	4413      	add	r3, r2
    14bc:	440b      	add	r3, r1
    14be:	3301      	adds	r3, #1
    14c0:	781b      	ldrb	r3, [r3, #0]
    14c2:	461a      	mov	r2, r3
    14c4:	4b64      	ldr	r3, [pc, #400]	; (1658 <Clock_Ip_InitClock+0x5a0>)
    14c6:	5c9b      	ldrb	r3, [r3, r2]
    14c8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    14ca:	4964      	ldr	r1, [pc, #400]	; (165c <Clock_Ip_InitClock+0x5a4>)
    14cc:	9a02      	ldr	r2, [sp, #8]
    14ce:	4613      	mov	r3, r2
    14d0:	009b      	lsls	r3, r3, #2
    14d2:	4413      	add	r3, r2
    14d4:	009b      	lsls	r3, r3, #2
    14d6:	440b      	add	r3, r1
    14d8:	3308      	adds	r3, #8
    14da:	6819      	ldr	r1, [r3, #0]
    14dc:	9a03      	ldr	r2, [sp, #12]
    14de:	4613      	mov	r3, r2
    14e0:	009b      	lsls	r3, r3, #2
    14e2:	4413      	add	r3, r2
    14e4:	009b      	lsls	r3, r3, #2
    14e6:	3328      	adds	r3, #40	; 0x28
    14e8:	9a01      	ldr	r2, [sp, #4]
    14ea:	4413      	add	r3, r2
    14ec:	3304      	adds	r3, #4
    14ee:	4618      	mov	r0, r3
    14f0:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    14f2:	9b03      	ldr	r3, [sp, #12]
    14f4:	3301      	adds	r3, #1
    14f6:	9303      	str	r3, [sp, #12]
    14f8:	9b01      	ldr	r3, [sp, #4]
    14fa:	7a5b      	ldrb	r3, [r3, #9]
    14fc:	461a      	mov	r2, r3
    14fe:	9b03      	ldr	r3, [sp, #12]
    1500:	4293      	cmp	r3, r2
    1502:	d3ce      	bcc.n	14a2 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1504:	2300      	movs	r3, #0
    1506:	9303      	str	r3, [sp, #12]
    1508:	e029      	b.n	155e <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    150a:	9901      	ldr	r1, [sp, #4]
    150c:	9a03      	ldr	r2, [sp, #12]
    150e:	4613      	mov	r3, r2
    1510:	009b      	lsls	r3, r3, #2
    1512:	4413      	add	r3, r2
    1514:	00db      	lsls	r3, r3, #3
    1516:	440b      	add	r3, r1
    1518:	3340      	adds	r3, #64	; 0x40
    151a:	681a      	ldr	r2, [r3, #0]
    151c:	4947      	ldr	r1, [pc, #284]	; (163c <Clock_Ip_InitClock+0x584>)
    151e:	4613      	mov	r3, r2
    1520:	00db      	lsls	r3, r3, #3
    1522:	4413      	add	r3, r2
    1524:	440b      	add	r3, r1
    1526:	3301      	adds	r3, #1
    1528:	781b      	ldrb	r3, [r3, #0]
    152a:	461a      	mov	r2, r3
    152c:	4b46      	ldr	r3, [pc, #280]	; (1648 <Clock_Ip_InitClock+0x590>)
    152e:	5c9b      	ldrb	r3, [r3, r2]
    1530:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    1532:	4946      	ldr	r1, [pc, #280]	; (164c <Clock_Ip_InitClock+0x594>)
    1534:	9a02      	ldr	r2, [sp, #8]
    1536:	4613      	mov	r3, r2
    1538:	009b      	lsls	r3, r3, #2
    153a:	4413      	add	r3, r2
    153c:	009b      	lsls	r3, r3, #2
    153e:	440b      	add	r3, r1
    1540:	330c      	adds	r3, #12
    1542:	6819      	ldr	r1, [r3, #0]
    1544:	9a03      	ldr	r2, [sp, #12]
    1546:	4613      	mov	r3, r2
    1548:	009b      	lsls	r3, r3, #2
    154a:	4413      	add	r3, r2
    154c:	00db      	lsls	r3, r3, #3
    154e:	3340      	adds	r3, #64	; 0x40
    1550:	9a01      	ldr	r2, [sp, #4]
    1552:	4413      	add	r3, r2
    1554:	4618      	mov	r0, r3
    1556:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1558:	9b03      	ldr	r3, [sp, #12]
    155a:	3301      	adds	r3, #1
    155c:	9303      	str	r3, [sp, #12]
    155e:	9b01      	ldr	r3, [sp, #4]
    1560:	7a9b      	ldrb	r3, [r3, #10]
    1562:	461a      	mov	r2, r3
    1564:	9b03      	ldr	r3, [sp, #12]
    1566:	4293      	cmp	r3, r2
    1568:	d3cf      	bcc.n	150a <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    156a:	2300      	movs	r3, #0
    156c:	9303      	str	r3, [sp, #12]
    156e:	e025      	b.n	15bc <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    1570:	9a01      	ldr	r2, [sp, #4]
    1572:	9b03      	ldr	r3, [sp, #12]
    1574:	3324      	adds	r3, #36	; 0x24
    1576:	011b      	lsls	r3, r3, #4
    1578:	4413      	add	r3, r2
    157a:	3304      	adds	r3, #4
    157c:	681a      	ldr	r2, [r3, #0]
    157e:	492f      	ldr	r1, [pc, #188]	; (163c <Clock_Ip_InitClock+0x584>)
    1580:	4613      	mov	r3, r2
    1582:	00db      	lsls	r3, r3, #3
    1584:	4413      	add	r3, r2
    1586:	440b      	add	r3, r1
    1588:	3301      	adds	r3, #1
    158a:	781b      	ldrb	r3, [r3, #0]
    158c:	461a      	mov	r2, r3
    158e:	4b34      	ldr	r3, [pc, #208]	; (1660 <Clock_Ip_InitClock+0x5a8>)
    1590:	5c9b      	ldrb	r3, [r3, r2]
    1592:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    1594:	4933      	ldr	r1, [pc, #204]	; (1664 <Clock_Ip_InitClock+0x5ac>)
    1596:	9a02      	ldr	r2, [sp, #8]
    1598:	4613      	mov	r3, r2
    159a:	005b      	lsls	r3, r3, #1
    159c:	4413      	add	r3, r2
    159e:	009b      	lsls	r3, r3, #2
    15a0:	440b      	add	r3, r1
    15a2:	3304      	adds	r3, #4
    15a4:	681b      	ldr	r3, [r3, #0]
    15a6:	9a03      	ldr	r2, [sp, #12]
    15a8:	3224      	adds	r2, #36	; 0x24
    15aa:	0112      	lsls	r2, r2, #4
    15ac:	9901      	ldr	r1, [sp, #4]
    15ae:	440a      	add	r2, r1
    15b0:	3204      	adds	r2, #4
    15b2:	4610      	mov	r0, r2
    15b4:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    15b6:	9b03      	ldr	r3, [sp, #12]
    15b8:	3301      	adds	r3, #1
    15ba:	9303      	str	r3, [sp, #12]
    15bc:	9b01      	ldr	r3, [sp, #4]
    15be:	7b9b      	ldrb	r3, [r3, #14]
    15c0:	461a      	mov	r2, r3
    15c2:	9b03      	ldr	r3, [sp, #12]
    15c4:	4293      	cmp	r3, r2
    15c6:	d3d3      	bcc.n	1570 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    15c8:	4b27      	ldr	r3, [pc, #156]	; (1668 <Clock_Ip_InitClock+0x5b0>)
    15ca:	2200      	movs	r2, #0
    15cc:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    15ce:	4b26      	ldr	r3, [pc, #152]	; (1668 <Clock_Ip_InitClock+0x5b0>)
    15d0:	2200      	movs	r2, #0
    15d2:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    15d4:	4b24      	ldr	r3, [pc, #144]	; (1668 <Clock_Ip_InitClock+0x5b0>)
    15d6:	2201      	movs	r2, #1
    15d8:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    15da:	4b23      	ldr	r3, [pc, #140]	; (1668 <Clock_Ip_InitClock+0x5b0>)
    15dc:	2200      	movs	r2, #0
    15de:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    15e0:	f000 fa9c 	bl	1b1c <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    15e4:	2300      	movs	r3, #0
    15e6:	9303      	str	r3, [sp, #12]
    15e8:	e04c      	b.n	1684 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    15ea:	9a01      	ldr	r2, [sp, #4]
    15ec:	9b03      	ldr	r3, [sp, #12]
    15ee:	330d      	adds	r3, #13
    15f0:	00db      	lsls	r3, r3, #3
    15f2:	4413      	add	r3, r2
    15f4:	685b      	ldr	r3, [r3, #4]
    15f6:	4a1d      	ldr	r2, [pc, #116]	; (166c <Clock_Ip_InitClock+0x5b4>)
    15f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    15fc:	2b03      	cmp	r3, #3
    15fe:	d03b      	beq.n	1678 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1600:	9b01      	ldr	r3, [sp, #4]
    1602:	9a03      	ldr	r2, [sp, #12]
    1604:	320d      	adds	r2, #13
    1606:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    160a:	490c      	ldr	r1, [pc, #48]	; (163c <Clock_Ip_InitClock+0x584>)
    160c:	4613      	mov	r3, r2
    160e:	00db      	lsls	r3, r3, #3
    1610:	4413      	add	r3, r2
    1612:	440b      	add	r3, r1
    1614:	3301      	adds	r3, #1
    1616:	781b      	ldrb	r3, [r3, #0]
    1618:	461a      	mov	r2, r3
    161a:	4b15      	ldr	r3, [pc, #84]	; (1670 <Clock_Ip_InitClock+0x5b8>)
    161c:	5c9b      	ldrb	r3, [r3, r2]
    161e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    1620:	4a14      	ldr	r2, [pc, #80]	; (1674 <Clock_Ip_InitClock+0x5bc>)
    1622:	9b02      	ldr	r3, [sp, #8]
    1624:	00db      	lsls	r3, r3, #3
    1626:	4413      	add	r3, r2
    1628:	685b      	ldr	r3, [r3, #4]
    162a:	9a03      	ldr	r2, [sp, #12]
    162c:	320d      	adds	r2, #13
    162e:	00d2      	lsls	r2, r2, #3
    1630:	9901      	ldr	r1, [sp, #4]
    1632:	440a      	add	r2, r1
    1634:	4610      	mov	r0, r2
    1636:	4798      	blx	r3
    1638:	e021      	b.n	167e <Clock_Ip_InitClock+0x5c6>
    163a:	bf00      	nop
    163c:	00007200 	.word	0x00007200
    1640:	00007170 	.word	0x00007170
    1644:	0000774c 	.word	0x0000774c
    1648:	000071c0 	.word	0x000071c0
    164c:	0000780c 	.word	0x0000780c
    1650:	000071f0 	.word	0x000071f0
    1654:	000077fc 	.word	0x000077fc
    1658:	00007180 	.word	0x00007180
    165c:	00007754 	.word	0x00007754
    1660:	000071b0 	.word	0x000071b0
    1664:	0000777c 	.word	0x0000777c
    1668:	1fff8b4c 	.word	0x1fff8b4c
    166c:	0000764c 	.word	0x0000764c
    1670:	000071d0 	.word	0x000071d0
    1674:	00007838 	.word	0x00007838
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    1678:	4b3a      	ldr	r3, [pc, #232]	; (1764 <Clock_Ip_InitClock+0x6ac>)
    167a:	2201      	movs	r2, #1
    167c:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    167e:	9b03      	ldr	r3, [sp, #12]
    1680:	3301      	adds	r3, #1
    1682:	9303      	str	r3, [sp, #12]
    1684:	9b01      	ldr	r3, [sp, #4]
    1686:	7adb      	ldrb	r3, [r3, #11]
    1688:	461a      	mov	r2, r3
    168a:	9b03      	ldr	r3, [sp, #12]
    168c:	4293      	cmp	r3, r2
    168e:	d3ac      	bcc.n	15ea <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    1690:	4b34      	ldr	r3, [pc, #208]	; (1764 <Clock_Ip_InitClock+0x6ac>)
    1692:	781b      	ldrb	r3, [r3, #0]
    1694:	f083 0301 	eor.w	r3, r3, #1
    1698:	b2db      	uxtb	r3, r3
    169a:	2b00      	cmp	r3, #0
    169c:	d05e      	beq.n	175c <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    169e:	2300      	movs	r3, #0
    16a0:	9303      	str	r3, [sp, #12]
    16a2:	e01f      	b.n	16e4 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    16a4:	9a01      	ldr	r2, [sp, #4]
    16a6:	9b03      	ldr	r3, [sp, #12]
    16a8:	334e      	adds	r3, #78	; 0x4e
    16aa:	00db      	lsls	r3, r3, #3
    16ac:	4413      	add	r3, r2
    16ae:	685a      	ldr	r2, [r3, #4]
    16b0:	492d      	ldr	r1, [pc, #180]	; (1768 <Clock_Ip_InitClock+0x6b0>)
    16b2:	4613      	mov	r3, r2
    16b4:	00db      	lsls	r3, r3, #3
    16b6:	4413      	add	r3, r2
    16b8:	440b      	add	r3, r1
    16ba:	3301      	adds	r3, #1
    16bc:	781b      	ldrb	r3, [r3, #0]
    16be:	461a      	mov	r2, r3
    16c0:	4b2a      	ldr	r3, [pc, #168]	; (176c <Clock_Ip_InitClock+0x6b4>)
    16c2:	5c9b      	ldrb	r3, [r3, r2]
    16c4:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    16c6:	4a2a      	ldr	r2, [pc, #168]	; (1770 <Clock_Ip_InitClock+0x6b8>)
    16c8:	9b02      	ldr	r3, [sp, #8]
    16ca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    16ce:	9a03      	ldr	r2, [sp, #12]
    16d0:	324e      	adds	r2, #78	; 0x4e
    16d2:	00d2      	lsls	r2, r2, #3
    16d4:	9901      	ldr	r1, [sp, #4]
    16d6:	440a      	add	r2, r1
    16d8:	3204      	adds	r2, #4
    16da:	4610      	mov	r0, r2
    16dc:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    16de:	9b03      	ldr	r3, [sp, #12]
    16e0:	3301      	adds	r3, #1
    16e2:	9303      	str	r3, [sp, #12]
    16e4:	9b01      	ldr	r3, [sp, #4]
    16e6:	7c1b      	ldrb	r3, [r3, #16]
    16e8:	461a      	mov	r2, r3
    16ea:	9b03      	ldr	r3, [sp, #12]
    16ec:	4293      	cmp	r3, r2
    16ee:	d3d9      	bcc.n	16a4 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    16f0:	2300      	movs	r3, #0
    16f2:	9303      	str	r3, [sp, #12]
    16f4:	e028      	b.n	1748 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    16f6:	9901      	ldr	r1, [sp, #4]
    16f8:	9a03      	ldr	r2, [sp, #12]
    16fa:	4613      	mov	r3, r2
    16fc:	009b      	lsls	r3, r3, #2
    16fe:	4413      	add	r3, r2
    1700:	009b      	lsls	r3, r3, #2
    1702:	440b      	add	r3, r1
    1704:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1708:	681a      	ldr	r2, [r3, #0]
    170a:	4917      	ldr	r1, [pc, #92]	; (1768 <Clock_Ip_InitClock+0x6b0>)
    170c:	4613      	mov	r3, r2
    170e:	00db      	lsls	r3, r3, #3
    1710:	4413      	add	r3, r2
    1712:	440b      	add	r3, r1
    1714:	3301      	adds	r3, #1
    1716:	781b      	ldrb	r3, [r3, #0]
    1718:	461a      	mov	r2, r3
    171a:	4b16      	ldr	r3, [pc, #88]	; (1774 <Clock_Ip_InitClock+0x6bc>)
    171c:	5c9b      	ldrb	r3, [r3, r2]
    171e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    1720:	4a15      	ldr	r2, [pc, #84]	; (1778 <Clock_Ip_InitClock+0x6c0>)
    1722:	9b02      	ldr	r3, [sp, #8]
    1724:	011b      	lsls	r3, r3, #4
    1726:	4413      	add	r3, r2
    1728:	330c      	adds	r3, #12
    172a:	6819      	ldr	r1, [r3, #0]
    172c:	9a03      	ldr	r2, [sp, #12]
    172e:	4613      	mov	r3, r2
    1730:	009b      	lsls	r3, r3, #2
    1732:	4413      	add	r3, r2
    1734:	009b      	lsls	r3, r3, #2
    1736:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    173a:	9a01      	ldr	r2, [sp, #4]
    173c:	4413      	add	r3, r2
    173e:	4618      	mov	r0, r3
    1740:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1742:	9b03      	ldr	r3, [sp, #12]
    1744:	3301      	adds	r3, #1
    1746:	9303      	str	r3, [sp, #12]
    1748:	9b01      	ldr	r3, [sp, #4]
    174a:	7c9b      	ldrb	r3, [r3, #18]
    174c:	461a      	mov	r2, r3
    174e:	9b03      	ldr	r3, [sp, #12]
    1750:	4293      	cmp	r3, r2
    1752:	d3d0      	bcc.n	16f6 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1754:	2104      	movs	r1, #4
    1756:	9801      	ldr	r0, [sp, #4]
    1758:	f002 ff48 	bl	45ec <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    175c:	bf00      	nop
    175e:	b004      	add	sp, #16
    1760:	bd10      	pop	{r4, pc}
    1762:	bf00      	nop
    1764:	1fff8b4c 	.word	0x1fff8b4c
    1768:	00007200 	.word	0x00007200
    176c:	000071a0 	.word	0x000071a0
    1770:	00007788 	.word	0x00007788
    1774:	000071f0 	.word	0x000071f0
    1778:	000077fc 	.word	0x000077fc

0000177c <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    177c:	b500      	push	{lr}
    177e:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    1780:	2302      	movs	r3, #2
    1782:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1784:	2300      	movs	r3, #0
    1786:	9304      	str	r3, [sp, #16]
    1788:	e02c      	b.n	17e4 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    178a:	4a36      	ldr	r2, [pc, #216]	; (1864 <Clock_Ip_GetPllStatus+0xe8>)
    178c:	9b04      	ldr	r3, [sp, #16]
    178e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1792:	4935      	ldr	r1, [pc, #212]	; (1868 <Clock_Ip_GetPllStatus+0xec>)
    1794:	4613      	mov	r3, r2
    1796:	00db      	lsls	r3, r3, #3
    1798:	4413      	add	r3, r2
    179a:	440b      	add	r3, r1
    179c:	3301      	adds	r3, #1
    179e:	781b      	ldrb	r3, [r3, #0]
    17a0:	461a      	mov	r2, r3
    17a2:	4b32      	ldr	r3, [pc, #200]	; (186c <Clock_Ip_GetPllStatus+0xf0>)
    17a4:	5c9b      	ldrb	r3, [r3, r2]
    17a6:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    17a8:	4931      	ldr	r1, [pc, #196]	; (1870 <Clock_Ip_GetPllStatus+0xf4>)
    17aa:	9a03      	ldr	r2, [sp, #12]
    17ac:	4613      	mov	r3, r2
    17ae:	009b      	lsls	r3, r3, #2
    17b0:	4413      	add	r3, r2
    17b2:	009b      	lsls	r3, r3, #2
    17b4:	440b      	add	r3, r1
    17b6:	3308      	adds	r3, #8
    17b8:	681b      	ldr	r3, [r3, #0]
    17ba:	492a      	ldr	r1, [pc, #168]	; (1864 <Clock_Ip_GetPllStatus+0xe8>)
    17bc:	9a04      	ldr	r2, [sp, #16]
    17be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    17c2:	4610      	mov	r0, r2
    17c4:	4798      	blx	r3
    17c6:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    17c8:	9b02      	ldr	r3, [sp, #8]
    17ca:	2b01      	cmp	r3, #1
    17cc:	d102      	bne.n	17d4 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    17ce:	2301      	movs	r3, #1
    17d0:	9305      	str	r3, [sp, #20]
            break;
    17d2:	e00d      	b.n	17f0 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    17d4:	9b02      	ldr	r3, [sp, #8]
    17d6:	2b02      	cmp	r3, #2
    17d8:	d101      	bne.n	17de <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    17da:	2300      	movs	r3, #0
    17dc:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    17de:	9b04      	ldr	r3, [sp, #16]
    17e0:	3301      	adds	r3, #1
    17e2:	9304      	str	r3, [sp, #16]
    17e4:	4b23      	ldr	r3, [pc, #140]	; (1874 <Clock_Ip_GetPllStatus+0xf8>)
    17e6:	789b      	ldrb	r3, [r3, #2]
    17e8:	461a      	mov	r2, r3
    17ea:	9b04      	ldr	r3, [sp, #16]
    17ec:	4293      	cmp	r3, r2
    17ee:	d3cc      	bcc.n	178a <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    17f0:	9b05      	ldr	r3, [sp, #20]
    17f2:	2b00      	cmp	r3, #0
    17f4:	d130      	bne.n	1858 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    17f6:	2300      	movs	r3, #0
    17f8:	9304      	str	r3, [sp, #16]
    17fa:	e027      	b.n	184c <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    17fc:	4a1e      	ldr	r2, [pc, #120]	; (1878 <Clock_Ip_GetPllStatus+0xfc>)
    17fe:	9b04      	ldr	r3, [sp, #16]
    1800:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1804:	4918      	ldr	r1, [pc, #96]	; (1868 <Clock_Ip_GetPllStatus+0xec>)
    1806:	4613      	mov	r3, r2
    1808:	00db      	lsls	r3, r3, #3
    180a:	4413      	add	r3, r2
    180c:	440b      	add	r3, r1
    180e:	3301      	adds	r3, #1
    1810:	781b      	ldrb	r3, [r3, #0]
    1812:	461a      	mov	r2, r3
    1814:	4b19      	ldr	r3, [pc, #100]	; (187c <Clock_Ip_GetPllStatus+0x100>)
    1816:	5c9b      	ldrb	r3, [r3, r2]
    1818:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    181a:	4919      	ldr	r1, [pc, #100]	; (1880 <Clock_Ip_GetPllStatus+0x104>)
    181c:	9a03      	ldr	r2, [sp, #12]
    181e:	4613      	mov	r3, r2
    1820:	005b      	lsls	r3, r3, #1
    1822:	4413      	add	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	440b      	add	r3, r1
    1828:	3308      	adds	r3, #8
    182a:	681b      	ldr	r3, [r3, #0]
    182c:	4912      	ldr	r1, [pc, #72]	; (1878 <Clock_Ip_GetPllStatus+0xfc>)
    182e:	9a04      	ldr	r2, [sp, #16]
    1830:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1834:	4610      	mov	r0, r2
    1836:	4798      	blx	r3
    1838:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    183a:	9b01      	ldr	r3, [sp, #4]
    183c:	2b01      	cmp	r3, #1
    183e:	d102      	bne.n	1846 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    1840:	2301      	movs	r3, #1
    1842:	9305      	str	r3, [sp, #20]
                break;
    1844:	e008      	b.n	1858 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1846:	9b04      	ldr	r3, [sp, #16]
    1848:	3301      	adds	r3, #1
    184a:	9304      	str	r3, [sp, #16]
    184c:	4b09      	ldr	r3, [pc, #36]	; (1874 <Clock_Ip_GetPllStatus+0xf8>)
    184e:	78db      	ldrb	r3, [r3, #3]
    1850:	461a      	mov	r2, r3
    1852:	9b04      	ldr	r3, [sp, #16]
    1854:	4293      	cmp	r3, r2
    1856:	d3d1      	bcc.n	17fc <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    1858:	9b05      	ldr	r3, [sp, #20]
}
    185a:	4618      	mov	r0, r3
    185c:	b007      	add	sp, #28
    185e:	f85d fb04 	ldr.w	pc, [sp], #4
    1862:	bf00      	nop
    1864:	00007708 	.word	0x00007708
    1868:	00007200 	.word	0x00007200
    186c:	000071c0 	.word	0x000071c0
    1870:	0000780c 	.word	0x0000780c
    1874:	1fff8b4c 	.word	0x1fff8b4c
    1878:	0000770c 	.word	0x0000770c
    187c:	000071b0 	.word	0x000071b0
    1880:	0000777c 	.word	0x0000777c

00001884 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    1884:	b500      	push	{lr}
    1886:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1888:	4b55      	ldr	r3, [pc, #340]	; (19e0 <Clock_Ip_DistributePll+0x15c>)
    188a:	681b      	ldr	r3, [r3, #0]
    188c:	2b00      	cmp	r3, #0
    188e:	f000 80a2 	beq.w	19d6 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1892:	2300      	movs	r3, #0
    1894:	9301      	str	r3, [sp, #4]
    1896:	e02c      	b.n	18f2 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    1898:	4b51      	ldr	r3, [pc, #324]	; (19e0 <Clock_Ip_DistributePll+0x15c>)
    189a:	681a      	ldr	r2, [r3, #0]
    189c:	9b01      	ldr	r3, [sp, #4]
    189e:	330d      	adds	r3, #13
    18a0:	00db      	lsls	r3, r3, #3
    18a2:	4413      	add	r3, r2
    18a4:	685b      	ldr	r3, [r3, #4]
    18a6:	4a4f      	ldr	r2, [pc, #316]	; (19e4 <Clock_Ip_DistributePll+0x160>)
    18a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    18ac:	2b03      	cmp	r3, #3
    18ae:	d11d      	bne.n	18ec <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    18b0:	4b4b      	ldr	r3, [pc, #300]	; (19e0 <Clock_Ip_DistributePll+0x15c>)
    18b2:	681b      	ldr	r3, [r3, #0]
    18b4:	9a01      	ldr	r2, [sp, #4]
    18b6:	320d      	adds	r2, #13
    18b8:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    18bc:	494a      	ldr	r1, [pc, #296]	; (19e8 <Clock_Ip_DistributePll+0x164>)
    18be:	4613      	mov	r3, r2
    18c0:	00db      	lsls	r3, r3, #3
    18c2:	4413      	add	r3, r2
    18c4:	440b      	add	r3, r1
    18c6:	3301      	adds	r3, #1
    18c8:	781b      	ldrb	r3, [r3, #0]
    18ca:	461a      	mov	r2, r3
    18cc:	4b47      	ldr	r3, [pc, #284]	; (19ec <Clock_Ip_DistributePll+0x168>)
    18ce:	5c9b      	ldrb	r3, [r3, r2]
    18d0:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    18d2:	4a47      	ldr	r2, [pc, #284]	; (19f0 <Clock_Ip_DistributePll+0x16c>)
    18d4:	9b00      	ldr	r3, [sp, #0]
    18d6:	00db      	lsls	r3, r3, #3
    18d8:	4413      	add	r3, r2
    18da:	685b      	ldr	r3, [r3, #4]
    18dc:	4a40      	ldr	r2, [pc, #256]	; (19e0 <Clock_Ip_DistributePll+0x15c>)
    18de:	6811      	ldr	r1, [r2, #0]
    18e0:	9a01      	ldr	r2, [sp, #4]
    18e2:	320d      	adds	r2, #13
    18e4:	00d2      	lsls	r2, r2, #3
    18e6:	440a      	add	r2, r1
    18e8:	4610      	mov	r0, r2
    18ea:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    18ec:	9b01      	ldr	r3, [sp, #4]
    18ee:	3301      	adds	r3, #1
    18f0:	9301      	str	r3, [sp, #4]
    18f2:	4b3b      	ldr	r3, [pc, #236]	; (19e0 <Clock_Ip_DistributePll+0x15c>)
    18f4:	681b      	ldr	r3, [r3, #0]
    18f6:	7adb      	ldrb	r3, [r3, #11]
    18f8:	461a      	mov	r2, r3
    18fa:	9b01      	ldr	r3, [sp, #4]
    18fc:	4293      	cmp	r3, r2
    18fe:	d3cb      	bcc.n	1898 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    1900:	4b3c      	ldr	r3, [pc, #240]	; (19f4 <Clock_Ip_DistributePll+0x170>)
    1902:	781b      	ldrb	r3, [r3, #0]
    1904:	2b00      	cmp	r3, #0
    1906:	d066      	beq.n	19d6 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1908:	2300      	movs	r3, #0
    190a:	9301      	str	r3, [sp, #4]
    190c:	e021      	b.n	1952 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    190e:	4b34      	ldr	r3, [pc, #208]	; (19e0 <Clock_Ip_DistributePll+0x15c>)
    1910:	681a      	ldr	r2, [r3, #0]
    1912:	9b01      	ldr	r3, [sp, #4]
    1914:	334e      	adds	r3, #78	; 0x4e
    1916:	00db      	lsls	r3, r3, #3
    1918:	4413      	add	r3, r2
    191a:	685a      	ldr	r2, [r3, #4]
    191c:	4932      	ldr	r1, [pc, #200]	; (19e8 <Clock_Ip_DistributePll+0x164>)
    191e:	4613      	mov	r3, r2
    1920:	00db      	lsls	r3, r3, #3
    1922:	4413      	add	r3, r2
    1924:	440b      	add	r3, r1
    1926:	3301      	adds	r3, #1
    1928:	781b      	ldrb	r3, [r3, #0]
    192a:	461a      	mov	r2, r3
    192c:	4b32      	ldr	r3, [pc, #200]	; (19f8 <Clock_Ip_DistributePll+0x174>)
    192e:	5c9b      	ldrb	r3, [r3, r2]
    1930:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    1932:	4a32      	ldr	r2, [pc, #200]	; (19fc <Clock_Ip_DistributePll+0x178>)
    1934:	9b00      	ldr	r3, [sp, #0]
    1936:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    193a:	4a29      	ldr	r2, [pc, #164]	; (19e0 <Clock_Ip_DistributePll+0x15c>)
    193c:	6811      	ldr	r1, [r2, #0]
    193e:	9a01      	ldr	r2, [sp, #4]
    1940:	324e      	adds	r2, #78	; 0x4e
    1942:	00d2      	lsls	r2, r2, #3
    1944:	440a      	add	r2, r1
    1946:	3204      	adds	r2, #4
    1948:	4610      	mov	r0, r2
    194a:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    194c:	9b01      	ldr	r3, [sp, #4]
    194e:	3301      	adds	r3, #1
    1950:	9301      	str	r3, [sp, #4]
    1952:	4b23      	ldr	r3, [pc, #140]	; (19e0 <Clock_Ip_DistributePll+0x15c>)
    1954:	681b      	ldr	r3, [r3, #0]
    1956:	7c1b      	ldrb	r3, [r3, #16]
    1958:	461a      	mov	r2, r3
    195a:	9b01      	ldr	r3, [sp, #4]
    195c:	4293      	cmp	r3, r2
    195e:	d3d6      	bcc.n	190e <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1960:	2300      	movs	r3, #0
    1962:	9301      	str	r3, [sp, #4]
    1964:	e02a      	b.n	19bc <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1966:	4b1e      	ldr	r3, [pc, #120]	; (19e0 <Clock_Ip_DistributePll+0x15c>)
    1968:	6819      	ldr	r1, [r3, #0]
    196a:	9a01      	ldr	r2, [sp, #4]
    196c:	4613      	mov	r3, r2
    196e:	009b      	lsls	r3, r3, #2
    1970:	4413      	add	r3, r2
    1972:	009b      	lsls	r3, r3, #2
    1974:	440b      	add	r3, r1
    1976:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    197a:	681a      	ldr	r2, [r3, #0]
    197c:	491a      	ldr	r1, [pc, #104]	; (19e8 <Clock_Ip_DistributePll+0x164>)
    197e:	4613      	mov	r3, r2
    1980:	00db      	lsls	r3, r3, #3
    1982:	4413      	add	r3, r2
    1984:	440b      	add	r3, r1
    1986:	3301      	adds	r3, #1
    1988:	781b      	ldrb	r3, [r3, #0]
    198a:	461a      	mov	r2, r3
    198c:	4b1c      	ldr	r3, [pc, #112]	; (1a00 <Clock_Ip_DistributePll+0x17c>)
    198e:	5c9b      	ldrb	r3, [r3, r2]
    1990:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    1992:	4a1c      	ldr	r2, [pc, #112]	; (1a04 <Clock_Ip_DistributePll+0x180>)
    1994:	9b00      	ldr	r3, [sp, #0]
    1996:	011b      	lsls	r3, r3, #4
    1998:	4413      	add	r3, r2
    199a:	330c      	adds	r3, #12
    199c:	6819      	ldr	r1, [r3, #0]
    199e:	4b10      	ldr	r3, [pc, #64]	; (19e0 <Clock_Ip_DistributePll+0x15c>)
    19a0:	6818      	ldr	r0, [r3, #0]
    19a2:	9a01      	ldr	r2, [sp, #4]
    19a4:	4613      	mov	r3, r2
    19a6:	009b      	lsls	r3, r3, #2
    19a8:	4413      	add	r3, r2
    19aa:	009b      	lsls	r3, r3, #2
    19ac:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    19b0:	4403      	add	r3, r0
    19b2:	4618      	mov	r0, r3
    19b4:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    19b6:	9b01      	ldr	r3, [sp, #4]
    19b8:	3301      	adds	r3, #1
    19ba:	9301      	str	r3, [sp, #4]
    19bc:	4b08      	ldr	r3, [pc, #32]	; (19e0 <Clock_Ip_DistributePll+0x15c>)
    19be:	681b      	ldr	r3, [r3, #0]
    19c0:	7c9b      	ldrb	r3, [r3, #18]
    19c2:	461a      	mov	r2, r3
    19c4:	9b01      	ldr	r3, [sp, #4]
    19c6:	4293      	cmp	r3, r2
    19c8:	d3cd      	bcc.n	1966 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    19ca:	4b05      	ldr	r3, [pc, #20]	; (19e0 <Clock_Ip_DistributePll+0x15c>)
    19cc:	681b      	ldr	r3, [r3, #0]
    19ce:	2104      	movs	r1, #4
    19d0:	4618      	mov	r0, r3
    19d2:	f002 fe0b 	bl	45ec <Clock_Ip_Command>
        }
    }
}
    19d6:	bf00      	nop
    19d8:	b003      	add	sp, #12
    19da:	f85d fb04 	ldr.w	pc, [sp], #4
    19de:	bf00      	nop
    19e0:	1fff8b44 	.word	0x1fff8b44
    19e4:	0000764c 	.word	0x0000764c
    19e8:	00007200 	.word	0x00007200
    19ec:	000071d0 	.word	0x000071d0
    19f0:	00007838 	.word	0x00007838
    19f4:	1fff8b4c 	.word	0x1fff8b4c
    19f8:	000071a0 	.word	0x000071a0
    19fc:	00007788 	.word	0x00007788
    1a00:	000071f0 	.word	0x000071f0
    1a04:	000077fc 	.word	0x000077fc

00001a08 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    1a08:	b500      	push	{lr}
    1a0a:	b085      	sub	sp, #20
    1a0c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1a0e:	490c      	ldr	r1, [pc, #48]	; (1a40 <Clock_Ip_DisableClockMonitor+0x38>)
    1a10:	9a01      	ldr	r2, [sp, #4]
    1a12:	4613      	mov	r3, r2
    1a14:	00db      	lsls	r3, r3, #3
    1a16:	4413      	add	r3, r2
    1a18:	440b      	add	r3, r1
    1a1a:	3301      	adds	r3, #1
    1a1c:	781b      	ldrb	r3, [r3, #0]
    1a1e:	461a      	mov	r2, r3
    1a20:	4b08      	ldr	r3, [pc, #32]	; (1a44 <Clock_Ip_DisableClockMonitor+0x3c>)
    1a22:	5c9b      	ldrb	r3, [r3, r2]
    1a24:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    1a26:	4a08      	ldr	r2, [pc, #32]	; (1a48 <Clock_Ip_DisableClockMonitor+0x40>)
    1a28:	9b03      	ldr	r3, [sp, #12]
    1a2a:	011b      	lsls	r3, r3, #4
    1a2c:	4413      	add	r3, r2
    1a2e:	3308      	adds	r3, #8
    1a30:	681b      	ldr	r3, [r3, #0]
    1a32:	9801      	ldr	r0, [sp, #4]
    1a34:	4798      	blx	r3
}
    1a36:	bf00      	nop
    1a38:	b005      	add	sp, #20
    1a3a:	f85d fb04 	ldr.w	pc, [sp], #4
    1a3e:	bf00      	nop
    1a40:	00007200 	.word	0x00007200
    1a44:	000071f0 	.word	0x000071f0
    1a48:	000077fc 	.word	0x000077fc

00001a4c <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    1a4c:	b082      	sub	sp, #8
    1a4e:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    1a50:	4a02      	ldr	r2, [pc, #8]	; (1a5c <Clock_Ip_InstallNotificationsCallback+0x10>)
    1a52:	9b01      	ldr	r3, [sp, #4]
    1a54:	6013      	str	r3, [r2, #0]
}
    1a56:	bf00      	nop
    1a58:	b002      	add	sp, #8
    1a5a:	4770      	bx	lr
    1a5c:	1fff8b14 	.word	0x1fff8b14

00001a60 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    1a60:	b500      	push	{lr}
    1a62:	b085      	sub	sp, #20
    1a64:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1a66:	490c      	ldr	r1, [pc, #48]	; (1a98 <Clock_Ip_DisableModuleClock+0x38>)
    1a68:	9a01      	ldr	r2, [sp, #4]
    1a6a:	4613      	mov	r3, r2
    1a6c:	00db      	lsls	r3, r3, #3
    1a6e:	4413      	add	r3, r2
    1a70:	440b      	add	r3, r1
    1a72:	3301      	adds	r3, #1
    1a74:	781b      	ldrb	r3, [r3, #0]
    1a76:	461a      	mov	r2, r3
    1a78:	4b08      	ldr	r3, [pc, #32]	; (1a9c <Clock_Ip_DisableModuleClock+0x3c>)
    1a7a:	5c9b      	ldrb	r3, [r3, r2]
    1a7c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    1a7e:	4a08      	ldr	r2, [pc, #32]	; (1aa0 <Clock_Ip_DisableModuleClock+0x40>)
    1a80:	9b03      	ldr	r3, [sp, #12]
    1a82:	00db      	lsls	r3, r3, #3
    1a84:	4413      	add	r3, r2
    1a86:	685b      	ldr	r3, [r3, #4]
    1a88:	2101      	movs	r1, #1
    1a8a:	9801      	ldr	r0, [sp, #4]
    1a8c:	4798      	blx	r3
}
    1a8e:	bf00      	nop
    1a90:	b005      	add	sp, #20
    1a92:	f85d fb04 	ldr.w	pc, [sp], #4
    1a96:	bf00      	nop
    1a98:	00007200 	.word	0x00007200
    1a9c:	000071a0 	.word	0x000071a0
    1aa0:	00007788 	.word	0x00007788

00001aa4 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    1aa4:	b500      	push	{lr}
    1aa6:	b085      	sub	sp, #20
    1aa8:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1aaa:	490c      	ldr	r1, [pc, #48]	; (1adc <Clock_Ip_EnableModuleClock+0x38>)
    1aac:	9a01      	ldr	r2, [sp, #4]
    1aae:	4613      	mov	r3, r2
    1ab0:	00db      	lsls	r3, r3, #3
    1ab2:	4413      	add	r3, r2
    1ab4:	440b      	add	r3, r1
    1ab6:	3301      	adds	r3, #1
    1ab8:	781b      	ldrb	r3, [r3, #0]
    1aba:	461a      	mov	r2, r3
    1abc:	4b08      	ldr	r3, [pc, #32]	; (1ae0 <Clock_Ip_EnableModuleClock+0x3c>)
    1abe:	5c9b      	ldrb	r3, [r3, r2]
    1ac0:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    1ac2:	4a08      	ldr	r2, [pc, #32]	; (1ae4 <Clock_Ip_EnableModuleClock+0x40>)
    1ac4:	9b03      	ldr	r3, [sp, #12]
    1ac6:	00db      	lsls	r3, r3, #3
    1ac8:	4413      	add	r3, r2
    1aca:	685b      	ldr	r3, [r3, #4]
    1acc:	2100      	movs	r1, #0
    1ace:	9801      	ldr	r0, [sp, #4]
    1ad0:	4798      	blx	r3
}
    1ad2:	bf00      	nop
    1ad4:	b005      	add	sp, #20
    1ad6:	f85d fb04 	ldr.w	pc, [sp], #4
    1ada:	bf00      	nop
    1adc:	00007200 	.word	0x00007200
    1ae0:	000071a0 	.word	0x000071a0
    1ae4:	00007788 	.word	0x00007788

00001ae8 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    1ae8:	b500      	push	{lr}
    1aea:	b083      	sub	sp, #12
    1aec:	9001      	str	r0, [sp, #4]
    1aee:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    1af0:	4b08      	ldr	r3, [pc, #32]	; (1b14 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    1af2:	2200      	movs	r2, #0
    1af4:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1af6:	4b08      	ldr	r3, [pc, #32]	; (1b18 <Clock_Ip_PowerModeChangeNotification+0x30>)
    1af8:	681b      	ldr	r3, [r3, #0]
    1afa:	2102      	movs	r1, #2
    1afc:	4618      	mov	r0, r3
    1afe:	f002 fd75 	bl	45ec <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    1b02:	9900      	ldr	r1, [sp, #0]
    1b04:	9801      	ldr	r0, [sp, #4]
    1b06:	f002 fc51 	bl	43ac <Clock_Ip_ClockPowerModeChangeNotification>
}
    1b0a:	bf00      	nop
    1b0c:	b003      	add	sp, #12
    1b0e:	f85d fb04 	ldr.w	pc, [sp], #4
    1b12:	bf00      	nop
    1b14:	1fff8b10 	.word	0x1fff8b10
    1b18:	1fff8b44 	.word	0x1fff8b44

00001b1c <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    1b1c:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    1b1e:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    1b22:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    1b24:	4b06      	ldr	r3, [pc, #24]	; (1b40 <Clock_Ip_SetWaitStates+0x24>)
    1b26:	785b      	ldrb	r3, [r3, #1]
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d005      	beq.n	1b38 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    1b2c:	9b01      	ldr	r3, [sp, #4]
    1b2e:	3b01      	subs	r3, #1
    1b30:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    1b32:	9b01      	ldr	r3, [sp, #4]
    1b34:	2b00      	cmp	r3, #0
    1b36:	d1f9      	bne.n	1b2c <Clock_Ip_SetWaitStates+0x10>
    }
}
    1b38:	bf00      	nop
    1b3a:	b002      	add	sp, #8
    1b3c:	4770      	bx	lr
    1b3e:	bf00      	nop
    1b40:	1fff8b4c 	.word	0x1fff8b4c

00001b44 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    1b44:	b500      	push	{lr}
    1b46:	b083      	sub	sp, #12
    1b48:	9001      	str	r0, [sp, #4]
    1b4a:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    1b4c:	4b04      	ldr	r3, [pc, #16]	; (1b60 <Clock_Ip_ReportClockErrors+0x1c>)
    1b4e:	681b      	ldr	r3, [r3, #0]
    1b50:	9900      	ldr	r1, [sp, #0]
    1b52:	9801      	ldr	r0, [sp, #4]
    1b54:	4798      	blx	r3
}
    1b56:	bf00      	nop
    1b58:	b003      	add	sp, #12
    1b5a:	f85d fb04 	ldr.w	pc, [sp], #4
    1b5e:	bf00      	nop
    1b60:	1fff8b14 	.word	0x1fff8b14

00001b64 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    1b64:	b500      	push	{lr}
    1b66:	b085      	sub	sp, #20
    1b68:	9003      	str	r0, [sp, #12]
    1b6a:	9102      	str	r1, [sp, #8]
    1b6c:	9201      	str	r2, [sp, #4]
    1b6e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    1b70:	2000      	movs	r0, #0
    1b72:	f7fe ffd0 	bl	b16 <OsIf_GetCounter>
    1b76:	4602      	mov	r2, r0
    1b78:	9b03      	ldr	r3, [sp, #12]
    1b7a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    1b7c:	9b02      	ldr	r3, [sp, #8]
    1b7e:	2200      	movs	r2, #0
    1b80:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    1b82:	2100      	movs	r1, #0
    1b84:	9800      	ldr	r0, [sp, #0]
    1b86:	f7ff f812 	bl	bae <OsIf_MicrosToTicks>
    1b8a:	4602      	mov	r2, r0
    1b8c:	9b01      	ldr	r3, [sp, #4]
    1b8e:	601a      	str	r2, [r3, #0]
}
    1b90:	bf00      	nop
    1b92:	b005      	add	sp, #20
    1b94:	f85d fb04 	ldr.w	pc, [sp], #4

00001b98 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    1b98:	b500      	push	{lr}
    1b9a:	b087      	sub	sp, #28
    1b9c:	9003      	str	r0, [sp, #12]
    1b9e:	9102      	str	r1, [sp, #8]
    1ba0:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    1ba2:	2300      	movs	r3, #0
    1ba4:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    1ba8:	2100      	movs	r1, #0
    1baa:	9803      	ldr	r0, [sp, #12]
    1bac:	f7fe ffcc 	bl	b48 <OsIf_GetElapsed>
    1bb0:	4602      	mov	r2, r0
    1bb2:	9b02      	ldr	r3, [sp, #8]
    1bb4:	681b      	ldr	r3, [r3, #0]
    1bb6:	441a      	add	r2, r3
    1bb8:	9b02      	ldr	r3, [sp, #8]
    1bba:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    1bbc:	9b02      	ldr	r3, [sp, #8]
    1bbe:	681b      	ldr	r3, [r3, #0]
    1bc0:	9a01      	ldr	r2, [sp, #4]
    1bc2:	429a      	cmp	r2, r3
    1bc4:	d802      	bhi.n	1bcc <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    1bc6:	2301      	movs	r3, #1
    1bc8:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    1bcc:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1bd0:	4618      	mov	r0, r3
    1bd2:	b007      	add	sp, #28
    1bd4:	f85d fb04 	ldr.w	pc, [sp], #4

00001bd8 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    1bd8:	b082      	sub	sp, #8
    1bda:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    1bdc:	bf00      	nop
    1bde:	b002      	add	sp, #8
    1be0:	4770      	bx	lr

00001be2 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    1be2:	b500      	push	{lr}
    1be4:	b083      	sub	sp, #12
    1be6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1be8:	9b01      	ldr	r3, [sp, #4]
    1bea:	2b00      	cmp	r3, #0
    1bec:	d002      	beq.n	1bf4 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    1bee:	9801      	ldr	r0, [sp, #4]
    1bf0:	f000 f8ad 	bl	1d4e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1bf4:	bf00      	nop
    1bf6:	b003      	add	sp, #12
    1bf8:	f85d fb04 	ldr.w	pc, [sp], #4

00001bfc <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    1bfc:	b500      	push	{lr}
    1bfe:	b083      	sub	sp, #12
    1c00:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c02:	9b01      	ldr	r3, [sp, #4]
    1c04:	2b00      	cmp	r3, #0
    1c06:	d002      	beq.n	1c0e <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    1c08:	9801      	ldr	r0, [sp, #4]
    1c0a:	f000 f8cd 	bl	1da8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c0e:	bf00      	nop
    1c10:	b003      	add	sp, #12
    1c12:	f85d fb04 	ldr.w	pc, [sp], #4

00001c16 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    1c16:	b500      	push	{lr}
    1c18:	b083      	sub	sp, #12
    1c1a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c1c:	9b01      	ldr	r3, [sp, #4]
    1c1e:	2b00      	cmp	r3, #0
    1c20:	d002      	beq.n	1c28 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    1c22:	9801      	ldr	r0, [sp, #4]
    1c24:	f000 f8ee 	bl	1e04 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c28:	bf00      	nop
    1c2a:	b003      	add	sp, #12
    1c2c:	f85d fb04 	ldr.w	pc, [sp], #4

00001c30 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    1c30:	b500      	push	{lr}
    1c32:	b083      	sub	sp, #12
    1c34:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c36:	9b01      	ldr	r3, [sp, #4]
    1c38:	2b00      	cmp	r3, #0
    1c3a:	d002      	beq.n	1c42 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    1c3c:	9801      	ldr	r0, [sp, #4]
    1c3e:	f000 f8f9 	bl	1e34 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c42:	bf00      	nop
    1c44:	b003      	add	sp, #12
    1c46:	f85d fb04 	ldr.w	pc, [sp], #4

00001c4a <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    1c4a:	b500      	push	{lr}
    1c4c:	b083      	sub	sp, #12
    1c4e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c50:	9b01      	ldr	r3, [sp, #4]
    1c52:	2b00      	cmp	r3, #0
    1c54:	d002      	beq.n	1c5c <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    1c56:	9801      	ldr	r0, [sp, #4]
    1c58:	f000 f904 	bl	1e64 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c5c:	bf00      	nop
    1c5e:	b003      	add	sp, #12
    1c60:	f85d fb04 	ldr.w	pc, [sp], #4

00001c64 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    1c64:	b500      	push	{lr}
    1c66:	b083      	sub	sp, #12
    1c68:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c6a:	9b01      	ldr	r3, [sp, #4]
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	d002      	beq.n	1c76 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    1c70:	9801      	ldr	r0, [sp, #4]
    1c72:	f000 f90f 	bl	1e94 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c76:	bf00      	nop
    1c78:	b003      	add	sp, #12
    1c7a:	f85d fb04 	ldr.w	pc, [sp], #4

00001c7e <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    1c7e:	b500      	push	{lr}
    1c80:	b083      	sub	sp, #12
    1c82:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c84:	9b01      	ldr	r3, [sp, #4]
    1c86:	2b00      	cmp	r3, #0
    1c88:	d002      	beq.n	1c90 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    1c8a:	9801      	ldr	r0, [sp, #4]
    1c8c:	f000 f91a 	bl	1ec4 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c90:	bf00      	nop
    1c92:	b003      	add	sp, #12
    1c94:	f85d fb04 	ldr.w	pc, [sp], #4

00001c98 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    1c98:	b500      	push	{lr}
    1c9a:	b083      	sub	sp, #12
    1c9c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c9e:	9b01      	ldr	r3, [sp, #4]
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	d002      	beq.n	1caa <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    1ca4:	9801      	ldr	r0, [sp, #4]
    1ca6:	f000 f925 	bl	1ef4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1caa:	bf00      	nop
    1cac:	b003      	add	sp, #12
    1cae:	f85d fb04 	ldr.w	pc, [sp], #4

00001cb2 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    1cb2:	b500      	push	{lr}
    1cb4:	b083      	sub	sp, #12
    1cb6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1cb8:	9b01      	ldr	r3, [sp, #4]
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d002      	beq.n	1cc4 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    1cbe:	9801      	ldr	r0, [sp, #4]
    1cc0:	f000 f930 	bl	1f24 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1cc4:	bf00      	nop
    1cc6:	b003      	add	sp, #12
    1cc8:	f85d fb04 	ldr.w	pc, [sp], #4

00001ccc <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    1ccc:	b500      	push	{lr}
    1cce:	b083      	sub	sp, #12
    1cd0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1cd2:	9b01      	ldr	r3, [sp, #4]
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	d002      	beq.n	1cde <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    1cd8:	9801      	ldr	r0, [sp, #4]
    1cda:	f000 f93b 	bl	1f54 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1cde:	bf00      	nop
    1ce0:	b003      	add	sp, #12
    1ce2:	f85d fb04 	ldr.w	pc, [sp], #4

00001ce6 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    1ce6:	b500      	push	{lr}
    1ce8:	b083      	sub	sp, #12
    1cea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1cec:	9b01      	ldr	r3, [sp, #4]
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d002      	beq.n	1cf8 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    1cf2:	9801      	ldr	r0, [sp, #4]
    1cf4:	f000 f946 	bl	1f84 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1cf8:	bf00      	nop
    1cfa:	b003      	add	sp, #12
    1cfc:	f85d fb04 	ldr.w	pc, [sp], #4

00001d00 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    1d00:	b500      	push	{lr}
    1d02:	b083      	sub	sp, #12
    1d04:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d06:	9b01      	ldr	r3, [sp, #4]
    1d08:	2b00      	cmp	r3, #0
    1d0a:	d002      	beq.n	1d12 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    1d0c:	9801      	ldr	r0, [sp, #4]
    1d0e:	f000 f951 	bl	1fb4 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d12:	bf00      	nop
    1d14:	b003      	add	sp, #12
    1d16:	f85d fb04 	ldr.w	pc, [sp], #4

00001d1a <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    1d1a:	b500      	push	{lr}
    1d1c:	b083      	sub	sp, #12
    1d1e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d20:	9b01      	ldr	r3, [sp, #4]
    1d22:	2b00      	cmp	r3, #0
    1d24:	d002      	beq.n	1d2c <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    1d26:	9801      	ldr	r0, [sp, #4]
    1d28:	f000 f95e 	bl	1fe8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d2c:	bf00      	nop
    1d2e:	b003      	add	sp, #12
    1d30:	f85d fb04 	ldr.w	pc, [sp], #4

00001d34 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    1d34:	b500      	push	{lr}
    1d36:	b083      	sub	sp, #12
    1d38:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d3a:	9b01      	ldr	r3, [sp, #4]
    1d3c:	2b00      	cmp	r3, #0
    1d3e:	d002      	beq.n	1d46 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    1d40:	9801      	ldr	r0, [sp, #4]
    1d42:	f000 f98b 	bl	205c <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d46:	bf00      	nop
    1d48:	b003      	add	sp, #12
    1d4a:	f85d fb04 	ldr.w	pc, [sp], #4

00001d4e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1d4e:	b086      	sub	sp, #24
    1d50:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    1d52:	9b01      	ldr	r3, [sp, #4]
    1d54:	681a      	ldr	r2, [r3, #0]
    1d56:	4911      	ldr	r1, [pc, #68]	; (1d9c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    1d58:	4613      	mov	r3, r2
    1d5a:	00db      	lsls	r3, r3, #3
    1d5c:	4413      	add	r3, r2
    1d5e:	440b      	add	r3, r1
    1d60:	781b      	ldrb	r3, [r3, #0]
    1d62:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    1d64:	9b01      	ldr	r3, [sp, #4]
    1d66:	685b      	ldr	r3, [r3, #4]
    1d68:	4a0d      	ldr	r2, [pc, #52]	; (1da0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    1d6a:	5cd3      	ldrb	r3, [r2, r3]
    1d6c:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    1d6e:	4a0d      	ldr	r2, [pc, #52]	; (1da4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    1d70:	9b05      	ldr	r3, [sp, #20]
    1d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1d76:	681b      	ldr	r3, [r3, #0]
    1d78:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    1d7a:	9b03      	ldr	r3, [sp, #12]
    1d7c:	f023 0307 	bic.w	r3, r3, #7
    1d80:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    1d82:	9a03      	ldr	r2, [sp, #12]
    1d84:	9b04      	ldr	r3, [sp, #16]
    1d86:	4313      	orrs	r3, r2
    1d88:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    1d8a:	4a06      	ldr	r2, [pc, #24]	; (1da4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    1d8c:	9b05      	ldr	r3, [sp, #20]
    1d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1d92:	9a03      	ldr	r2, [sp, #12]
    1d94:	601a      	str	r2, [r3, #0]
}
    1d96:	bf00      	nop
    1d98:	b006      	add	sp, #24
    1d9a:	4770      	bx	lr
    1d9c:	00007200 	.word	0x00007200
    1da0:	000075f8 	.word	0x000075f8
    1da4:	0000763c 	.word	0x0000763c

00001da8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1da8:	b086      	sub	sp, #24
    1daa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    1dac:	9b01      	ldr	r3, [sp, #4]
    1dae:	681a      	ldr	r2, [r3, #0]
    1db0:	4911      	ldr	r1, [pc, #68]	; (1df8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    1db2:	4613      	mov	r3, r2
    1db4:	00db      	lsls	r3, r3, #3
    1db6:	4413      	add	r3, r2
    1db8:	440b      	add	r3, r1
    1dba:	781b      	ldrb	r3, [r3, #0]
    1dbc:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    1dbe:	9b01      	ldr	r3, [sp, #4]
    1dc0:	685b      	ldr	r3, [r3, #4]
    1dc2:	4a0e      	ldr	r2, [pc, #56]	; (1dfc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    1dc4:	5cd3      	ldrb	r3, [r2, r3]
    1dc6:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    1dc8:	4a0d      	ldr	r2, [pc, #52]	; (1e00 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    1dca:	9b05      	ldr	r3, [sp, #20]
    1dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1dd0:	681b      	ldr	r3, [r3, #0]
    1dd2:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    1dd4:	9b03      	ldr	r3, [sp, #12]
    1dd6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1dda:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    1ddc:	9b04      	ldr	r3, [sp, #16]
    1dde:	021b      	lsls	r3, r3, #8
    1de0:	9a03      	ldr	r2, [sp, #12]
    1de2:	4313      	orrs	r3, r2
    1de4:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    1de6:	4a06      	ldr	r2, [pc, #24]	; (1e00 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    1de8:	9b05      	ldr	r3, [sp, #20]
    1dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1dee:	9a03      	ldr	r2, [sp, #12]
    1df0:	601a      	str	r2, [r3, #0]
}
    1df2:	bf00      	nop
    1df4:	b006      	add	sp, #24
    1df6:	4770      	bx	lr
    1df8:	00007200 	.word	0x00007200
    1dfc:	000075f8 	.word	0x000075f8
    1e00:	0000763c 	.word	0x0000763c

00001e04 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1e04:	b084      	sub	sp, #16
    1e06:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    1e08:	4b09      	ldr	r3, [pc, #36]	; (1e30 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    1e0a:	695b      	ldr	r3, [r3, #20]
    1e0c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    1e0e:	9b03      	ldr	r3, [sp, #12]
    1e10:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1e14:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    1e16:	9b01      	ldr	r3, [sp, #4]
    1e18:	685b      	ldr	r3, [r3, #4]
    1e1a:	3b01      	subs	r3, #1
    1e1c:	041b      	lsls	r3, r3, #16
    1e1e:	9a03      	ldr	r2, [sp, #12]
    1e20:	4313      	orrs	r3, r2
    1e22:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    1e24:	4a02      	ldr	r2, [pc, #8]	; (1e30 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    1e26:	9b03      	ldr	r3, [sp, #12]
    1e28:	6153      	str	r3, [r2, #20]
}
    1e2a:	bf00      	nop
    1e2c:	b004      	add	sp, #16
    1e2e:	4770      	bx	lr
    1e30:	40064000 	.word	0x40064000

00001e34 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1e34:	b084      	sub	sp, #16
    1e36:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    1e38:	4b09      	ldr	r3, [pc, #36]	; (1e60 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    1e3a:	695b      	ldr	r3, [r3, #20]
    1e3c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    1e3e:	9b03      	ldr	r3, [sp, #12]
    1e40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1e44:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    1e46:	9b01      	ldr	r3, [sp, #4]
    1e48:	685b      	ldr	r3, [r3, #4]
    1e4a:	3b01      	subs	r3, #1
    1e4c:	011b      	lsls	r3, r3, #4
    1e4e:	9a03      	ldr	r2, [sp, #12]
    1e50:	4313      	orrs	r3, r2
    1e52:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    1e54:	4a02      	ldr	r2, [pc, #8]	; (1e60 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    1e56:	9b03      	ldr	r3, [sp, #12]
    1e58:	6153      	str	r3, [r2, #20]
}
    1e5a:	bf00      	nop
    1e5c:	b004      	add	sp, #16
    1e5e:	4770      	bx	lr
    1e60:	40064000 	.word	0x40064000

00001e64 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1e64:	b084      	sub	sp, #16
    1e66:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    1e68:	4b09      	ldr	r3, [pc, #36]	; (1e90 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    1e6a:	695b      	ldr	r3, [r3, #20]
    1e6c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    1e6e:	9b03      	ldr	r3, [sp, #12]
    1e70:	f023 030f 	bic.w	r3, r3, #15
    1e74:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    1e76:	9b01      	ldr	r3, [sp, #4]
    1e78:	685b      	ldr	r3, [r3, #4]
    1e7a:	3b01      	subs	r3, #1
    1e7c:	9a03      	ldr	r2, [sp, #12]
    1e7e:	4313      	orrs	r3, r2
    1e80:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    1e82:	4a03      	ldr	r2, [pc, #12]	; (1e90 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    1e84:	9b03      	ldr	r3, [sp, #12]
    1e86:	6153      	str	r3, [r2, #20]
}
    1e88:	bf00      	nop
    1e8a:	b004      	add	sp, #16
    1e8c:	4770      	bx	lr
    1e8e:	bf00      	nop
    1e90:	40064000 	.word	0x40064000

00001e94 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1e94:	b084      	sub	sp, #16
    1e96:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    1e98:	4b09      	ldr	r3, [pc, #36]	; (1ec0 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    1e9a:	699b      	ldr	r3, [r3, #24]
    1e9c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    1e9e:	9b03      	ldr	r3, [sp, #12]
    1ea0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1ea4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    1ea6:	9b01      	ldr	r3, [sp, #4]
    1ea8:	685b      	ldr	r3, [r3, #4]
    1eaa:	3b01      	subs	r3, #1
    1eac:	041b      	lsls	r3, r3, #16
    1eae:	9a03      	ldr	r2, [sp, #12]
    1eb0:	4313      	orrs	r3, r2
    1eb2:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    1eb4:	4a02      	ldr	r2, [pc, #8]	; (1ec0 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    1eb6:	9b03      	ldr	r3, [sp, #12]
    1eb8:	6193      	str	r3, [r2, #24]
}
    1eba:	bf00      	nop
    1ebc:	b004      	add	sp, #16
    1ebe:	4770      	bx	lr
    1ec0:	40064000 	.word	0x40064000

00001ec4 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1ec4:	b084      	sub	sp, #16
    1ec6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    1ec8:	4b09      	ldr	r3, [pc, #36]	; (1ef0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    1eca:	699b      	ldr	r3, [r3, #24]
    1ecc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    1ece:	9b03      	ldr	r3, [sp, #12]
    1ed0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1ed4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    1ed6:	9b01      	ldr	r3, [sp, #4]
    1ed8:	685b      	ldr	r3, [r3, #4]
    1eda:	3b01      	subs	r3, #1
    1edc:	011b      	lsls	r3, r3, #4
    1ede:	9a03      	ldr	r2, [sp, #12]
    1ee0:	4313      	orrs	r3, r2
    1ee2:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    1ee4:	4a02      	ldr	r2, [pc, #8]	; (1ef0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    1ee6:	9b03      	ldr	r3, [sp, #12]
    1ee8:	6193      	str	r3, [r2, #24]
}
    1eea:	bf00      	nop
    1eec:	b004      	add	sp, #16
    1eee:	4770      	bx	lr
    1ef0:	40064000 	.word	0x40064000

00001ef4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1ef4:	b084      	sub	sp, #16
    1ef6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    1ef8:	4b09      	ldr	r3, [pc, #36]	; (1f20 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    1efa:	699b      	ldr	r3, [r3, #24]
    1efc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    1efe:	9b03      	ldr	r3, [sp, #12]
    1f00:	f023 030f 	bic.w	r3, r3, #15
    1f04:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    1f06:	9b01      	ldr	r3, [sp, #4]
    1f08:	685b      	ldr	r3, [r3, #4]
    1f0a:	3b01      	subs	r3, #1
    1f0c:	9a03      	ldr	r2, [sp, #12]
    1f0e:	4313      	orrs	r3, r2
    1f10:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    1f12:	4a03      	ldr	r2, [pc, #12]	; (1f20 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    1f14:	9b03      	ldr	r3, [sp, #12]
    1f16:	6193      	str	r3, [r2, #24]
}
    1f18:	bf00      	nop
    1f1a:	b004      	add	sp, #16
    1f1c:	4770      	bx	lr
    1f1e:	bf00      	nop
    1f20:	40064000 	.word	0x40064000

00001f24 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1f24:	b084      	sub	sp, #16
    1f26:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    1f28:	4b09      	ldr	r3, [pc, #36]	; (1f50 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    1f2a:	69db      	ldr	r3, [r3, #28]
    1f2c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    1f2e:	9b03      	ldr	r3, [sp, #12]
    1f30:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1f34:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    1f36:	9b01      	ldr	r3, [sp, #4]
    1f38:	685b      	ldr	r3, [r3, #4]
    1f3a:	3b01      	subs	r3, #1
    1f3c:	041b      	lsls	r3, r3, #16
    1f3e:	9a03      	ldr	r2, [sp, #12]
    1f40:	4313      	orrs	r3, r2
    1f42:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    1f44:	4a02      	ldr	r2, [pc, #8]	; (1f50 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    1f46:	9b03      	ldr	r3, [sp, #12]
    1f48:	61d3      	str	r3, [r2, #28]
}
    1f4a:	bf00      	nop
    1f4c:	b004      	add	sp, #16
    1f4e:	4770      	bx	lr
    1f50:	40064000 	.word	0x40064000

00001f54 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1f54:	b084      	sub	sp, #16
    1f56:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    1f58:	4b09      	ldr	r3, [pc, #36]	; (1f80 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    1f5a:	69db      	ldr	r3, [r3, #28]
    1f5c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    1f5e:	9b03      	ldr	r3, [sp, #12]
    1f60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1f64:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    1f66:	9b01      	ldr	r3, [sp, #4]
    1f68:	685b      	ldr	r3, [r3, #4]
    1f6a:	3b01      	subs	r3, #1
    1f6c:	011b      	lsls	r3, r3, #4
    1f6e:	9a03      	ldr	r2, [sp, #12]
    1f70:	4313      	orrs	r3, r2
    1f72:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    1f74:	4a02      	ldr	r2, [pc, #8]	; (1f80 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    1f76:	9b03      	ldr	r3, [sp, #12]
    1f78:	61d3      	str	r3, [r2, #28]
}
    1f7a:	bf00      	nop
    1f7c:	b004      	add	sp, #16
    1f7e:	4770      	bx	lr
    1f80:	40064000 	.word	0x40064000

00001f84 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1f84:	b084      	sub	sp, #16
    1f86:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    1f88:	4b09      	ldr	r3, [pc, #36]	; (1fb0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    1f8a:	69db      	ldr	r3, [r3, #28]
    1f8c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    1f8e:	9b03      	ldr	r3, [sp, #12]
    1f90:	f023 030f 	bic.w	r3, r3, #15
    1f94:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    1f96:	9b01      	ldr	r3, [sp, #4]
    1f98:	685b      	ldr	r3, [r3, #4]
    1f9a:	3b01      	subs	r3, #1
    1f9c:	9a03      	ldr	r2, [sp, #12]
    1f9e:	4313      	orrs	r3, r2
    1fa0:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    1fa2:	4a03      	ldr	r2, [pc, #12]	; (1fb0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    1fa4:	9b03      	ldr	r3, [sp, #12]
    1fa6:	61d3      	str	r3, [r2, #28]
}
    1fa8:	bf00      	nop
    1faa:	b004      	add	sp, #16
    1fac:	4770      	bx	lr
    1fae:	bf00      	nop
    1fb0:	40064000 	.word	0x40064000

00001fb4 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    1fb4:	b084      	sub	sp, #16
    1fb6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    1fb8:	4b0a      	ldr	r3, [pc, #40]	; (1fe4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    1fba:	685b      	ldr	r3, [r3, #4]
    1fbc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    1fbe:	9b03      	ldr	r3, [sp, #12]
    1fc0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1fc4:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    1fc6:	9b01      	ldr	r3, [sp, #4]
    1fc8:	685b      	ldr	r3, [r3, #4]
    1fca:	3b01      	subs	r3, #1
    1fcc:	021b      	lsls	r3, r3, #8
    1fce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    1fd2:	9a03      	ldr	r2, [sp, #12]
    1fd4:	4313      	orrs	r3, r2
    1fd6:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    1fd8:	4a02      	ldr	r2, [pc, #8]	; (1fe4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    1fda:	9b03      	ldr	r3, [sp, #12]
    1fdc:	6053      	str	r3, [r2, #4]
}
    1fde:	bf00      	nop
    1fe0:	b004      	add	sp, #16
    1fe2:	4770      	bx	lr
    1fe4:	40048000 	.word	0x40048000

00001fe8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1fe8:	b084      	sub	sp, #16
    1fea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    1fec:	4919      	ldr	r1, [pc, #100]	; (2054 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    1fee:	9b01      	ldr	r3, [sp, #4]
    1ff0:	681a      	ldr	r2, [r3, #0]
    1ff2:	4819      	ldr	r0, [pc, #100]	; (2058 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    1ff4:	4613      	mov	r3, r2
    1ff6:	00db      	lsls	r3, r3, #3
    1ff8:	4413      	add	r3, r2
    1ffa:	4403      	add	r3, r0
    1ffc:	3305      	adds	r3, #5
    1ffe:	781b      	ldrb	r3, [r3, #0]
    2000:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2004:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2006:	9b03      	ldr	r3, [sp, #12]
    2008:	f023 030f 	bic.w	r3, r3, #15
    200c:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    200e:	9b01      	ldr	r3, [sp, #4]
    2010:	685b      	ldr	r3, [r3, #4]
    2012:	3b01      	subs	r3, #1
    2014:	f003 0307 	and.w	r3, r3, #7
    2018:	9a03      	ldr	r2, [sp, #12]
    201a:	4313      	orrs	r3, r2
    201c:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    201e:	9b01      	ldr	r3, [sp, #4]
    2020:	7a1b      	ldrb	r3, [r3, #8]
    2022:	3b01      	subs	r3, #1
    2024:	00db      	lsls	r3, r3, #3
    2026:	f003 0308 	and.w	r3, r3, #8
    202a:	9a03      	ldr	r2, [sp, #12]
    202c:	4313      	orrs	r3, r2
    202e:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    2030:	4908      	ldr	r1, [pc, #32]	; (2054 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2032:	9b01      	ldr	r3, [sp, #4]
    2034:	681a      	ldr	r2, [r3, #0]
    2036:	4808      	ldr	r0, [pc, #32]	; (2058 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2038:	4613      	mov	r3, r2
    203a:	00db      	lsls	r3, r3, #3
    203c:	4413      	add	r3, r2
    203e:	4403      	add	r3, r0
    2040:	3305      	adds	r3, #5
    2042:	781b      	ldrb	r3, [r3, #0]
    2044:	461a      	mov	r2, r3
    2046:	9b03      	ldr	r3, [sp, #12]
    2048:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    204c:	bf00      	nop
    204e:	b004      	add	sp, #16
    2050:	4770      	bx	lr
    2052:	bf00      	nop
    2054:	40065000 	.word	0x40065000
    2058:	00007200 	.word	0x00007200

0000205c <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    205c:	b084      	sub	sp, #16
    205e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2060:	4b10      	ldr	r3, [pc, #64]	; (20a4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2064:	4a0f      	ldr	r2, [pc, #60]	; (20a4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    206a:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    206c:	4b0d      	ldr	r3, [pc, #52]	; (20a4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    206e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2070:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    2072:	9b03      	ldr	r3, [sp, #12]
    2074:	f023 030f 	bic.w	r3, r3, #15
    2078:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    207a:	9b01      	ldr	r3, [sp, #4]
    207c:	685b      	ldr	r3, [r3, #4]
    207e:	3b01      	subs	r3, #1
    2080:	005b      	lsls	r3, r3, #1
    2082:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    2086:	9b01      	ldr	r3, [sp, #4]
    2088:	7a1b      	ldrb	r3, [r3, #8]
    208a:	3b01      	subs	r3, #1
    208c:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2090:	4313      	orrs	r3, r2
    2092:	9a03      	ldr	r2, [sp, #12]
    2094:	4313      	orrs	r3, r2
    2096:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    2098:	4a02      	ldr	r2, [pc, #8]	; (20a4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    209a:	9b03      	ldr	r3, [sp, #12]
    209c:	6693      	str	r3, [r2, #104]	; 0x68
}
    209e:	bf00      	nop
    20a0:	b004      	add	sp, #16
    20a2:	4770      	bx	lr
    20a4:	40048000 	.word	0x40048000

000020a8 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    20a8:	b082      	sub	sp, #8
    20aa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    20ac:	bf00      	nop
    20ae:	b002      	add	sp, #8
    20b0:	4770      	bx	lr
	...

000020b4 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    20b4:	b082      	sub	sp, #8
    20b6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    20b8:	bf00      	nop
    20ba:	b002      	add	sp, #8
    20bc:	4770      	bx	lr

000020be <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    20be:	b082      	sub	sp, #8
    20c0:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    20c2:	bf00      	nop
    20c4:	b002      	add	sp, #8
    20c6:	4770      	bx	lr

000020c8 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    20c8:	b500      	push	{lr}
    20ca:	b083      	sub	sp, #12
    20cc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    20ce:	9b01      	ldr	r3, [sp, #4]
    20d0:	2b00      	cmp	r3, #0
    20d2:	d002      	beq.n	20da <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    20d4:	9801      	ldr	r0, [sp, #4]
    20d6:	f000 f86a 	bl	21ae <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    20da:	bf00      	nop
    20dc:	b003      	add	sp, #12
    20de:	f85d fb04 	ldr.w	pc, [sp], #4

000020e2 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    20e2:	b500      	push	{lr}
    20e4:	b083      	sub	sp, #12
    20e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    20e8:	9b01      	ldr	r3, [sp, #4]
    20ea:	2b00      	cmp	r3, #0
    20ec:	d002      	beq.n	20f4 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    20ee:	9801      	ldr	r0, [sp, #4]
    20f0:	f000 f884 	bl	21fc <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    20f4:	bf00      	nop
    20f6:	b003      	add	sp, #12
    20f8:	f85d fb04 	ldr.w	pc, [sp], #4

000020fc <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    20fc:	b500      	push	{lr}
    20fe:	b089      	sub	sp, #36	; 0x24
    2100:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2102:	2300      	movs	r3, #0
    2104:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    2108:	9b01      	ldr	r3, [sp, #4]
    210a:	2b00      	cmp	r3, #0
    210c:	d031      	beq.n	2172 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    210e:	4b1b      	ldr	r3, [pc, #108]	; (217c <Clock_Ip_CompleteSOSC+0x80>)
    2110:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2114:	f003 0301 	and.w	r3, r3, #1
    2118:	2b00      	cmp	r3, #0
    211a:	d02a      	beq.n	2172 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    211c:	aa03      	add	r2, sp, #12
    211e:	a904      	add	r1, sp, #16
    2120:	a805      	add	r0, sp, #20
    2122:	f24c 3350 	movw	r3, #50000	; 0xc350
    2126:	f7ff fd1d 	bl	1b64 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    212a:	4b14      	ldr	r3, [pc, #80]	; (217c <Clock_Ip_CompleteSOSC+0x80>)
    212c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2130:	0e1b      	lsrs	r3, r3, #24
    2132:	f003 0301 	and.w	r3, r3, #1
    2136:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2138:	9a03      	ldr	r2, [sp, #12]
    213a:	a904      	add	r1, sp, #16
    213c:	ab05      	add	r3, sp, #20
    213e:	4618      	mov	r0, r3
    2140:	f7ff fd2a 	bl	1b98 <Clock_Ip_TimeoutExpired>
    2144:	4603      	mov	r3, r0
    2146:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    214a:	9b06      	ldr	r3, [sp, #24]
    214c:	2b00      	cmp	r3, #0
    214e:	d106      	bne.n	215e <Clock_Ip_CompleteSOSC+0x62>
    2150:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2154:	f083 0301 	eor.w	r3, r3, #1
    2158:	b2db      	uxtb	r3, r3
    215a:	2b00      	cmp	r3, #0
    215c:	d1e5      	bne.n	212a <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    215e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2162:	2b00      	cmp	r3, #0
    2164:	d005      	beq.n	2172 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2166:	9b01      	ldr	r3, [sp, #4]
    2168:	681b      	ldr	r3, [r3, #0]
    216a:	4619      	mov	r1, r3
    216c:	2001      	movs	r0, #1
    216e:	f7ff fce9 	bl	1b44 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    2172:	bf00      	nop
    2174:	b009      	add	sp, #36	; 0x24
    2176:	f85d fb04 	ldr.w	pc, [sp], #4
    217a:	bf00      	nop
    217c:	40064000 	.word	0x40064000

00002180 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    2180:	b500      	push	{lr}
    2182:	b083      	sub	sp, #12
    2184:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    2186:	9801      	ldr	r0, [sp, #4]
    2188:	f000 f8c0 	bl	230c <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    218c:	bf00      	nop
    218e:	b003      	add	sp, #12
    2190:	f85d fb04 	ldr.w	pc, [sp], #4

00002194 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2194:	b500      	push	{lr}
    2196:	b083      	sub	sp, #12
    2198:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    219a:	9b01      	ldr	r3, [sp, #4]
    219c:	2b00      	cmp	r3, #0
    219e:	d002      	beq.n	21a6 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    21a0:	9801      	ldr	r0, [sp, #4]
    21a2:	f000 f8c3 	bl	232c <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    21a6:	bf00      	nop
    21a8:	b003      	add	sp, #12
    21aa:	f85d fb04 	ldr.w	pc, [sp], #4

000021ae <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    21ae:	b082      	sub	sp, #8
    21b0:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    21b2:	4b11      	ldr	r3, [pc, #68]	; (21f8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21b8:	4a0f      	ldr	r2, [pc, #60]	; (21f8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    21be:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    21c2:	4b0d      	ldr	r3, [pc, #52]	; (21f8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21c8:	4a0b      	ldr	r2, [pc, #44]	; (21f8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    21ce:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    21d2:	4b09      	ldr	r3, [pc, #36]	; (21f8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21d8:	4a07      	ldr	r2, [pc, #28]	; (21f8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21da:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    21de:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    21e2:	4b05      	ldr	r3, [pc, #20]	; (21f8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21e4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21e8:	4a03      	ldr	r2, [pc, #12]	; (21f8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21ea:	f023 0301 	bic.w	r3, r3, #1
    21ee:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    21f2:	bf00      	nop
    21f4:	b002      	add	sp, #8
    21f6:	4770      	bx	lr
    21f8:	40064000 	.word	0x40064000

000021fc <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    21fc:	b082      	sub	sp, #8
    21fe:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    2200:	9b01      	ldr	r3, [sp, #4]
    2202:	891b      	ldrh	r3, [r3, #8]
    2204:	2b01      	cmp	r3, #1
    2206:	d174      	bne.n	22f2 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    2208:	9b01      	ldr	r3, [sp, #4]
    220a:	7bdb      	ldrb	r3, [r3, #15]
    220c:	2b00      	cmp	r3, #0
    220e:	d002      	beq.n	2216 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    2210:	2b01      	cmp	r3, #1
    2212:	d009      	beq.n	2228 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    2214:	e011      	b.n	223a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    2216:	4b39      	ldr	r3, [pc, #228]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2218:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    221c:	4a37      	ldr	r2, [pc, #220]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    221e:	f023 0308 	bic.w	r3, r3, #8
    2222:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2226:	e008      	b.n	223a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    2228:	4b34      	ldr	r3, [pc, #208]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    222a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    222e:	4a33      	ldr	r2, [pc, #204]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2230:	f043 0308 	orr.w	r3, r3, #8
    2234:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2238:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    223a:	4b30      	ldr	r3, [pc, #192]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    223c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2240:	4a2e      	ldr	r2, [pc, #184]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2242:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    2246:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    224a:	9b01      	ldr	r3, [sp, #4]
    224c:	685b      	ldr	r3, [r3, #4]
    224e:	4a2c      	ldr	r2, [pc, #176]	; (2300 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    2250:	4293      	cmp	r3, r2
    2252:	d90d      	bls.n	2270 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    2254:	9b01      	ldr	r3, [sp, #4]
    2256:	685b      	ldr	r3, [r3, #4]
    2258:	4a2a      	ldr	r2, [pc, #168]	; (2304 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    225a:	4293      	cmp	r3, r2
    225c:	d208      	bcs.n	2270 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    225e:	4b27      	ldr	r3, [pc, #156]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2260:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2264:	4a25      	ldr	r2, [pc, #148]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2266:	f043 0320 	orr.w	r3, r3, #32
    226a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    226e:	e007      	b.n	2280 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    2270:	4b22      	ldr	r3, [pc, #136]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2272:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2276:	4a21      	ldr	r2, [pc, #132]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2278:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    227c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    2280:	9b01      	ldr	r3, [sp, #4]
    2282:	7b1b      	ldrb	r3, [r3, #12]
    2284:	2b00      	cmp	r3, #0
    2286:	d108      	bne.n	229a <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    2288:	4b1c      	ldr	r3, [pc, #112]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    228a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    228e:	4a1b      	ldr	r2, [pc, #108]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2290:	f043 0304 	orr.w	r3, r3, #4
    2294:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2298:	e007      	b.n	22aa <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    229a:	4b18      	ldr	r3, [pc, #96]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    229c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    22a0:	4a16      	ldr	r2, [pc, #88]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22a2:	f023 0304 	bic.w	r3, r3, #4
    22a6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    22aa:	9b01      	ldr	r3, [sp, #4]
    22ac:	7c1b      	ldrb	r3, [r3, #16]
    22ae:	2b02      	cmp	r3, #2
    22b0:	d011      	beq.n	22d6 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    22b2:	2b02      	cmp	r3, #2
    22b4:	dc14      	bgt.n	22e0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    22b6:	2b00      	cmp	r3, #0
    22b8:	d002      	beq.n	22c0 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    22ba:	2b01      	cmp	r3, #1
    22bc:	d005      	beq.n	22ca <Clock_Ip_SetSOSC_TrustedCall+0xce>
    22be:	e00f      	b.n	22e0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    22c0:	4b0e      	ldr	r3, [pc, #56]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22c2:	2201      	movs	r2, #1
    22c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    22c8:	e014      	b.n	22f4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    22ca:	4b0c      	ldr	r3, [pc, #48]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22cc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    22d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    22d4:	e00e      	b.n	22f4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    22d6:	4b09      	ldr	r3, [pc, #36]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22d8:	4a0b      	ldr	r2, [pc, #44]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    22da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    22de:	e009      	b.n	22f4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    22e0:	4b06      	ldr	r3, [pc, #24]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    22e6:	4a05      	ldr	r2, [pc, #20]	; (22fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22e8:	f043 0301 	orr.w	r3, r3, #1
    22ec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    22f0:	e000      	b.n	22f4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    22f2:	bf00      	nop
}
    22f4:	bf00      	nop
    22f6:	b002      	add	sp, #8
    22f8:	4770      	bx	lr
    22fa:	bf00      	nop
    22fc:	40064000 	.word	0x40064000
    2300:	003d08ff 	.word	0x003d08ff
    2304:	007a1200 	.word	0x007a1200
    2308:	00030001 	.word	0x00030001

0000230c <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    230c:	b082      	sub	sp, #8
    230e:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    2310:	4b05      	ldr	r3, [pc, #20]	; (2328 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2312:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2316:	4a04      	ldr	r2, [pc, #16]	; (2328 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2318:	f023 0301 	bic.w	r3, r3, #1
    231c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2320:	bf00      	nop
    2322:	b002      	add	sp, #8
    2324:	4770      	bx	lr
    2326:	bf00      	nop
    2328:	40064000 	.word	0x40064000

0000232c <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    232c:	b082      	sub	sp, #8
    232e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2330:	9b01      	ldr	r3, [sp, #4]
    2332:	891b      	ldrh	r3, [r3, #8]
    2334:	2b01      	cmp	r3, #1
    2336:	d107      	bne.n	2348 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2338:	4b05      	ldr	r3, [pc, #20]	; (2350 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    233a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    233e:	4a04      	ldr	r2, [pc, #16]	; (2350 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2340:	f043 0301 	orr.w	r3, r3, #1
    2344:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    2348:	bf00      	nop
    234a:	b002      	add	sp, #8
    234c:	4770      	bx	lr
    234e:	bf00      	nop
    2350:	40064000 	.word	0x40064000

00002354 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    2354:	b082      	sub	sp, #8
    2356:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2358:	bf00      	nop
    235a:	b002      	add	sp, #8
    235c:	4770      	bx	lr

0000235e <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    235e:	b082      	sub	sp, #8
    2360:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    2362:	2300      	movs	r3, #0
}
    2364:	4618      	mov	r0, r3
    2366:	b002      	add	sp, #8
    2368:	4770      	bx	lr

0000236a <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    236a:	b082      	sub	sp, #8
    236c:	9001      	str	r0, [sp, #4]
    236e:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    2370:	bf00      	nop
    2372:	b002      	add	sp, #8
    2374:	4770      	bx	lr
	...

00002378 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    2378:	b082      	sub	sp, #8
    237a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    237c:	bf00      	nop
    237e:	b002      	add	sp, #8
    2380:	4770      	bx	lr

00002382 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    2382:	b082      	sub	sp, #8
    2384:	9001      	str	r0, [sp, #4]
    2386:	460b      	mov	r3, r1
    2388:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    238c:	bf00      	nop
    238e:	b002      	add	sp, #8
    2390:	4770      	bx	lr

00002392 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    2392:	b500      	push	{lr}
    2394:	b083      	sub	sp, #12
    2396:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2398:	9b01      	ldr	r3, [sp, #4]
    239a:	2b00      	cmp	r3, #0
    239c:	d002      	beq.n	23a4 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    239e:	9801      	ldr	r0, [sp, #4]
    23a0:	f000 f8e7 	bl	2572 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    23a4:	bf00      	nop
    23a6:	b003      	add	sp, #12
    23a8:	f85d fb04 	ldr.w	pc, [sp], #4

000023ac <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    23ac:	b500      	push	{lr}
    23ae:	b085      	sub	sp, #20
    23b0:	9001      	str	r0, [sp, #4]
    23b2:	460b      	mov	r3, r1
    23b4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    23b8:	9b01      	ldr	r3, [sp, #4]
    23ba:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    23bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    23c0:	2b00      	cmp	r3, #0
    23c2:	d003      	beq.n	23cc <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    23c4:	2300      	movs	r3, #0
    23c6:	f8ad 300c 	strh.w	r3, [sp, #12]
    23ca:	e002      	b.n	23d2 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    23cc:	2301      	movs	r3, #1
    23ce:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    23d2:	ab02      	add	r3, sp, #8
    23d4:	4618      	mov	r0, r3
    23d6:	f7ff ffdc 	bl	2392 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    23da:	bf00      	nop
    23dc:	b005      	add	sp, #20
    23de:	f85d fb04 	ldr.w	pc, [sp], #4

000023e2 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    23e2:	b500      	push	{lr}
    23e4:	b083      	sub	sp, #12
    23e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    23e8:	9b01      	ldr	r3, [sp, #4]
    23ea:	2b00      	cmp	r3, #0
    23ec:	d002      	beq.n	23f4 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    23ee:	9801      	ldr	r0, [sp, #4]
    23f0:	f000 f8d6 	bl	25a0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    23f4:	bf00      	nop
    23f6:	b003      	add	sp, #12
    23f8:	f85d fb04 	ldr.w	pc, [sp], #4

000023fc <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    23fc:	b500      	push	{lr}
    23fe:	b085      	sub	sp, #20
    2400:	9001      	str	r0, [sp, #4]
    2402:	460b      	mov	r3, r1
    2404:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2408:	9b01      	ldr	r3, [sp, #4]
    240a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    240c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2410:	2b00      	cmp	r3, #0
    2412:	d003      	beq.n	241c <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    2414:	2300      	movs	r3, #0
    2416:	f8ad 300c 	strh.w	r3, [sp, #12]
    241a:	e002      	b.n	2422 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    241c:	2301      	movs	r3, #1
    241e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    2422:	ab02      	add	r3, sp, #8
    2424:	4618      	mov	r0, r3
    2426:	f7ff ffdc 	bl	23e2 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    242a:	bf00      	nop
    242c:	b005      	add	sp, #20
    242e:	f85d fb04 	ldr.w	pc, [sp], #4

00002432 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    2432:	b500      	push	{lr}
    2434:	b083      	sub	sp, #12
    2436:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2438:	9b01      	ldr	r3, [sp, #4]
    243a:	2b00      	cmp	r3, #0
    243c:	d002      	beq.n	2444 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    243e:	9801      	ldr	r0, [sp, #4]
    2440:	f000 f8c6 	bl	25d0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2444:	bf00      	nop
    2446:	b003      	add	sp, #12
    2448:	f85d fb04 	ldr.w	pc, [sp], #4

0000244c <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    244c:	b500      	push	{lr}
    244e:	b085      	sub	sp, #20
    2450:	9001      	str	r0, [sp, #4]
    2452:	460b      	mov	r3, r1
    2454:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2458:	9b01      	ldr	r3, [sp, #4]
    245a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    245c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2460:	2b00      	cmp	r3, #0
    2462:	d003      	beq.n	246c <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    2464:	2300      	movs	r3, #0
    2466:	f8ad 300c 	strh.w	r3, [sp, #12]
    246a:	e002      	b.n	2472 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    246c:	2301      	movs	r3, #1
    246e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    2472:	ab02      	add	r3, sp, #8
    2474:	4618      	mov	r0, r3
    2476:	f7ff ffdc 	bl	2432 <Clock_Ip_ClockSetSimClkoutEnable>
}
    247a:	bf00      	nop
    247c:	b005      	add	sp, #20
    247e:	f85d fb04 	ldr.w	pc, [sp], #4

00002482 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    2482:	b500      	push	{lr}
    2484:	b083      	sub	sp, #12
    2486:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2488:	9b01      	ldr	r3, [sp, #4]
    248a:	2b00      	cmp	r3, #0
    248c:	d002      	beq.n	2494 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    248e:	9801      	ldr	r0, [sp, #4]
    2490:	f000 f8b6 	bl	2600 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2494:	bf00      	nop
    2496:	b003      	add	sp, #12
    2498:	f85d fb04 	ldr.w	pc, [sp], #4

0000249c <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    249c:	b500      	push	{lr}
    249e:	b085      	sub	sp, #20
    24a0:	9001      	str	r0, [sp, #4]
    24a2:	460b      	mov	r3, r1
    24a4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    24a8:	9b01      	ldr	r3, [sp, #4]
    24aa:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    24ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    24b0:	2b00      	cmp	r3, #0
    24b2:	d003      	beq.n	24bc <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    24b4:	2300      	movs	r3, #0
    24b6:	f8ad 300c 	strh.w	r3, [sp, #12]
    24ba:	e002      	b.n	24c2 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    24bc:	2301      	movs	r3, #1
    24be:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    24c2:	ab02      	add	r3, sp, #8
    24c4:	4618      	mov	r0, r3
    24c6:	f7ff ffdc 	bl	2482 <Clock_Ip_ClockSetPccCgcEnable>
}
    24ca:	bf00      	nop
    24cc:	b005      	add	sp, #20
    24ce:	f85d fb04 	ldr.w	pc, [sp], #4

000024d2 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    24d2:	b500      	push	{lr}
    24d4:	b083      	sub	sp, #12
    24d6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    24d8:	9b01      	ldr	r3, [sp, #4]
    24da:	2b00      	cmp	r3, #0
    24dc:	d002      	beq.n	24e4 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    24de:	9801      	ldr	r0, [sp, #4]
    24e0:	f000 f8bc 	bl	265c <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    24e4:	bf00      	nop
    24e6:	b003      	add	sp, #12
    24e8:	f85d fb04 	ldr.w	pc, [sp], #4

000024ec <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    24ec:	b500      	push	{lr}
    24ee:	b085      	sub	sp, #20
    24f0:	9001      	str	r0, [sp, #4]
    24f2:	460b      	mov	r3, r1
    24f4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    24f8:	9b01      	ldr	r3, [sp, #4]
    24fa:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    24fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2500:	2b00      	cmp	r3, #0
    2502:	d003      	beq.n	250c <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    2504:	2300      	movs	r3, #0
    2506:	f8ad 300c 	strh.w	r3, [sp, #12]
    250a:	e002      	b.n	2512 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    250c:	2301      	movs	r3, #1
    250e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    2512:	ab02      	add	r3, sp, #8
    2514:	4618      	mov	r0, r3
    2516:	f7ff ffdc 	bl	24d2 <Clock_Ip_ClockSetSimGate>
}
    251a:	bf00      	nop
    251c:	b005      	add	sp, #20
    251e:	f85d fb04 	ldr.w	pc, [sp], #4

00002522 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    2522:	b500      	push	{lr}
    2524:	b083      	sub	sp, #12
    2526:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2528:	9b01      	ldr	r3, [sp, #4]
    252a:	2b00      	cmp	r3, #0
    252c:	d002      	beq.n	2534 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    252e:	9801      	ldr	r0, [sp, #4]
    2530:	f000 f8c0 	bl	26b4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2534:	bf00      	nop
    2536:	b003      	add	sp, #12
    2538:	f85d fb04 	ldr.w	pc, [sp], #4

0000253c <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    253c:	b500      	push	{lr}
    253e:	b085      	sub	sp, #20
    2540:	9001      	str	r0, [sp, #4]
    2542:	460b      	mov	r3, r1
    2544:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2548:	9b01      	ldr	r3, [sp, #4]
    254a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    254c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2550:	2b00      	cmp	r3, #0
    2552:	d003      	beq.n	255c <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    2554:	2300      	movs	r3, #0
    2556:	f8ad 300c 	strh.w	r3, [sp, #12]
    255a:	e002      	b.n	2562 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    255c:	2301      	movs	r3, #1
    255e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    2562:	ab02      	add	r3, sp, #8
    2564:	4618      	mov	r0, r3
    2566:	f7ff ffdc 	bl	2522 <Clock_Ip_ClockSetSimTraceEnable>
}
    256a:	bf00      	nop
    256c:	b005      	add	sp, #20
    256e:	f85d fb04 	ldr.w	pc, [sp], #4

00002572 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2572:	b084      	sub	sp, #16
    2574:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2576:	4b09      	ldr	r3, [pc, #36]	; (259c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2578:	691b      	ldr	r3, [r3, #16]
    257a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    257c:	9b03      	ldr	r3, [sp, #12]
    257e:	f023 0301 	bic.w	r3, r3, #1
    2582:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    2584:	9b01      	ldr	r3, [sp, #4]
    2586:	889b      	ldrh	r3, [r3, #4]
    2588:	461a      	mov	r2, r3
    258a:	9b03      	ldr	r3, [sp, #12]
    258c:	4313      	orrs	r3, r2
    258e:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2590:	4a02      	ldr	r2, [pc, #8]	; (259c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2592:	9b03      	ldr	r3, [sp, #12]
    2594:	6113      	str	r3, [r2, #16]
}
    2596:	bf00      	nop
    2598:	b004      	add	sp, #16
    259a:	4770      	bx	lr
    259c:	40048000 	.word	0x40048000

000025a0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    25a0:	b084      	sub	sp, #16
    25a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    25a4:	4b09      	ldr	r3, [pc, #36]	; (25cc <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    25a6:	691b      	ldr	r3, [r3, #16]
    25a8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    25aa:	9b03      	ldr	r3, [sp, #12]
    25ac:	f023 0302 	bic.w	r3, r3, #2
    25b0:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    25b2:	9b01      	ldr	r3, [sp, #4]
    25b4:	889b      	ldrh	r3, [r3, #4]
    25b6:	005b      	lsls	r3, r3, #1
    25b8:	9a03      	ldr	r2, [sp, #12]
    25ba:	4313      	orrs	r3, r2
    25bc:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    25be:	4a03      	ldr	r2, [pc, #12]	; (25cc <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    25c0:	9b03      	ldr	r3, [sp, #12]
    25c2:	6113      	str	r3, [r2, #16]
}
    25c4:	bf00      	nop
    25c6:	b004      	add	sp, #16
    25c8:	4770      	bx	lr
    25ca:	bf00      	nop
    25cc:	40048000 	.word	0x40048000

000025d0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    25d0:	b084      	sub	sp, #16
    25d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    25d4:	4b09      	ldr	r3, [pc, #36]	; (25fc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    25d6:	685b      	ldr	r3, [r3, #4]
    25d8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    25da:	9b03      	ldr	r3, [sp, #12]
    25dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    25e0:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    25e2:	9b01      	ldr	r3, [sp, #4]
    25e4:	889b      	ldrh	r3, [r3, #4]
    25e6:	02db      	lsls	r3, r3, #11
    25e8:	9a03      	ldr	r2, [sp, #12]
    25ea:	4313      	orrs	r3, r2
    25ec:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    25ee:	4a03      	ldr	r2, [pc, #12]	; (25fc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    25f0:	9b03      	ldr	r3, [sp, #12]
    25f2:	6053      	str	r3, [r2, #4]
}
    25f4:	bf00      	nop
    25f6:	b004      	add	sp, #16
    25f8:	4770      	bx	lr
    25fa:	bf00      	nop
    25fc:	40048000 	.word	0x40048000

00002600 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2600:	b084      	sub	sp, #16
    2602:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    2604:	4913      	ldr	r1, [pc, #76]	; (2654 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2606:	9b01      	ldr	r3, [sp, #4]
    2608:	681a      	ldr	r2, [r3, #0]
    260a:	4813      	ldr	r0, [pc, #76]	; (2658 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    260c:	4613      	mov	r3, r2
    260e:	00db      	lsls	r3, r3, #3
    2610:	4413      	add	r3, r2
    2612:	4403      	add	r3, r0
    2614:	3306      	adds	r3, #6
    2616:	781b      	ldrb	r3, [r3, #0]
    2618:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    261c:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    261e:	9b03      	ldr	r3, [sp, #12]
    2620:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2624:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    2626:	9b01      	ldr	r3, [sp, #4]
    2628:	889b      	ldrh	r3, [r3, #4]
    262a:	079b      	lsls	r3, r3, #30
    262c:	9a03      	ldr	r2, [sp, #12]
    262e:	4313      	orrs	r3, r2
    2630:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    2632:	4908      	ldr	r1, [pc, #32]	; (2654 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2634:	9b01      	ldr	r3, [sp, #4]
    2636:	681a      	ldr	r2, [r3, #0]
    2638:	4807      	ldr	r0, [pc, #28]	; (2658 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    263a:	4613      	mov	r3, r2
    263c:	00db      	lsls	r3, r3, #3
    263e:	4413      	add	r3, r2
    2640:	4403      	add	r3, r0
    2642:	3306      	adds	r3, #6
    2644:	781b      	ldrb	r3, [r3, #0]
    2646:	461a      	mov	r2, r3
    2648:	9b03      	ldr	r3, [sp, #12]
    264a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    264e:	bf00      	nop
    2650:	b004      	add	sp, #16
    2652:	4770      	bx	lr
    2654:	40065000 	.word	0x40065000
    2658:	00007200 	.word	0x00007200

0000265c <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    265c:	b086      	sub	sp, #24
    265e:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    2660:	9b01      	ldr	r3, [sp, #4]
    2662:	889b      	ldrh	r3, [r3, #4]
    2664:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    2666:	9b01      	ldr	r3, [sp, #4]
    2668:	681a      	ldr	r2, [r3, #0]
    266a:	4910      	ldr	r1, [pc, #64]	; (26ac <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    266c:	4613      	mov	r3, r2
    266e:	00db      	lsls	r3, r3, #3
    2670:	4413      	add	r3, r2
    2672:	440b      	add	r3, r1
    2674:	3306      	adds	r3, #6
    2676:	781b      	ldrb	r3, [r3, #0]
    2678:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    267a:	4b0d      	ldr	r3, [pc, #52]	; (26b0 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    267e:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    2680:	2201      	movs	r2, #1
    2682:	9b04      	ldr	r3, [sp, #16]
    2684:	fa02 f303 	lsl.w	r3, r2, r3
    2688:	43db      	mvns	r3, r3
    268a:	9a03      	ldr	r2, [sp, #12]
    268c:	4013      	ands	r3, r2
    268e:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    2690:	9a05      	ldr	r2, [sp, #20]
    2692:	9b04      	ldr	r3, [sp, #16]
    2694:	fa02 f303 	lsl.w	r3, r2, r3
    2698:	9a03      	ldr	r2, [sp, #12]
    269a:	4313      	orrs	r3, r2
    269c:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    269e:	4a04      	ldr	r2, [pc, #16]	; (26b0 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    26a0:	9b03      	ldr	r3, [sp, #12]
    26a2:	6413      	str	r3, [r2, #64]	; 0x40
}
    26a4:	bf00      	nop
    26a6:	b006      	add	sp, #24
    26a8:	4770      	bx	lr
    26aa:	bf00      	nop
    26ac:	00007200 	.word	0x00007200
    26b0:	40048000 	.word	0x40048000

000026b4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    26b4:	b084      	sub	sp, #16
    26b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    26b8:	4b0a      	ldr	r3, [pc, #40]	; (26e4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    26ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    26bc:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    26be:	9b01      	ldr	r3, [sp, #4]
    26c0:	889b      	ldrh	r3, [r3, #4]
    26c2:	2b01      	cmp	r3, #1
    26c4:	d104      	bne.n	26d0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    26c6:	9b03      	ldr	r3, [sp, #12]
    26c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    26cc:	9303      	str	r3, [sp, #12]
    26ce:	e003      	b.n	26d8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    26d0:	9b03      	ldr	r3, [sp, #12]
    26d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    26d6:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    26d8:	4a02      	ldr	r2, [pc, #8]	; (26e4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    26da:	9b03      	ldr	r3, [sp, #12]
    26dc:	6693      	str	r3, [r2, #104]	; 0x68
}
    26de:	bf00      	nop
    26e0:	b004      	add	sp, #16
    26e2:	4770      	bx	lr
    26e4:	40048000 	.word	0x40048000

000026e8 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    26e8:	b082      	sub	sp, #8
    26ea:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    26ec:	bf00      	nop
    26ee:	b002      	add	sp, #8
    26f0:	4770      	bx	lr

000026f2 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    26f2:	b082      	sub	sp, #8
    26f4:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    26f6:	bf00      	nop
    26f8:	b002      	add	sp, #8
    26fa:	4770      	bx	lr

000026fc <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    26fc:	b500      	push	{lr}
    26fe:	b083      	sub	sp, #12
    2700:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2702:	9b01      	ldr	r3, [sp, #4]
    2704:	2b00      	cmp	r3, #0
    2706:	d002      	beq.n	270e <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    2708:	9801      	ldr	r0, [sp, #4]
    270a:	f000 f8d1 	bl	28b0 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    270e:	bf00      	nop
    2710:	b003      	add	sp, #12
    2712:	f85d fb04 	ldr.w	pc, [sp], #4

00002716 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2716:	b500      	push	{lr}
    2718:	b083      	sub	sp, #12
    271a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    271c:	9b01      	ldr	r3, [sp, #4]
    271e:	2b00      	cmp	r3, #0
    2720:	d002      	beq.n	2728 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    2722:	9801      	ldr	r0, [sp, #4]
    2724:	f000 f950 	bl	29c8 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2728:	bf00      	nop
    272a:	b003      	add	sp, #12
    272c:	f85d fb04 	ldr.w	pc, [sp], #4

00002730 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    2730:	b500      	push	{lr}
    2732:	b083      	sub	sp, #12
    2734:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    2736:	9801      	ldr	r0, [sp, #4]
    2738:	f000 f98e 	bl	2a58 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    273c:	bf00      	nop
    273e:	b003      	add	sp, #12
    2740:	f85d fb04 	ldr.w	pc, [sp], #4

00002744 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2744:	b500      	push	{lr}
    2746:	b083      	sub	sp, #12
    2748:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    274a:	9b01      	ldr	r3, [sp, #4]
    274c:	2b00      	cmp	r3, #0
    274e:	d002      	beq.n	2756 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    2750:	9801      	ldr	r0, [sp, #4]
    2752:	f000 f999 	bl	2a88 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2756:	bf00      	nop
    2758:	b003      	add	sp, #12
    275a:	f85d fb04 	ldr.w	pc, [sp], #4

0000275e <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    275e:	b500      	push	{lr}
    2760:	b083      	sub	sp, #12
    2762:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2764:	9b01      	ldr	r3, [sp, #4]
    2766:	2b00      	cmp	r3, #0
    2768:	d002      	beq.n	2770 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    276a:	9801      	ldr	r0, [sp, #4]
    276c:	f000 f9b0 	bl	2ad0 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2770:	bf00      	nop
    2772:	b003      	add	sp, #12
    2774:	f85d fb04 	ldr.w	pc, [sp], #4

00002778 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    2778:	b500      	push	{lr}
    277a:	b083      	sub	sp, #12
    277c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    277e:	9801      	ldr	r0, [sp, #4]
    2780:	f000 f9ba 	bl	2af8 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2784:	bf00      	nop
    2786:	b003      	add	sp, #12
    2788:	f85d fb04 	ldr.w	pc, [sp], #4

0000278c <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    278c:	b500      	push	{lr}
    278e:	b083      	sub	sp, #12
    2790:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2792:	9b01      	ldr	r3, [sp, #4]
    2794:	2b00      	cmp	r3, #0
    2796:	d002      	beq.n	279e <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    2798:	9801      	ldr	r0, [sp, #4]
    279a:	f000 f9bd 	bl	2b18 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    279e:	bf00      	nop
    27a0:	b003      	add	sp, #12
    27a2:	f85d fb04 	ldr.w	pc, [sp], #4

000027a6 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    27a6:	b500      	push	{lr}
    27a8:	b083      	sub	sp, #12
    27aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    27ac:	9b01      	ldr	r3, [sp, #4]
    27ae:	2b00      	cmp	r3, #0
    27b0:	d002      	beq.n	27b8 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    27b2:	9801      	ldr	r0, [sp, #4]
    27b4:	f000 f9d4 	bl	2b60 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    27b8:	bf00      	nop
    27ba:	b003      	add	sp, #12
    27bc:	f85d fb04 	ldr.w	pc, [sp], #4

000027c0 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    27c0:	b500      	push	{lr}
    27c2:	b083      	sub	sp, #12
    27c4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    27c6:	9801      	ldr	r0, [sp, #4]
    27c8:	f000 f9de 	bl	2b88 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    27cc:	bf00      	nop
    27ce:	b003      	add	sp, #12
    27d0:	f85d fb04 	ldr.w	pc, [sp], #4

000027d4 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    27d4:	b500      	push	{lr}
    27d6:	b089      	sub	sp, #36	; 0x24
    27d8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    27da:	2300      	movs	r3, #0
    27dc:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    27e0:	4b20      	ldr	r3, [pc, #128]	; (2864 <SetInputSouceSytemClock+0x90>)
    27e2:	695b      	ldr	r3, [r3, #20]
    27e4:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    27e6:	9b06      	ldr	r3, [sp, #24]
    27e8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    27ec:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    27ee:	9b01      	ldr	r3, [sp, #4]
    27f0:	061b      	lsls	r3, r3, #24
    27f2:	9a06      	ldr	r2, [sp, #24]
    27f4:	4313      	orrs	r3, r2
    27f6:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    27f8:	4a1a      	ldr	r2, [pc, #104]	; (2864 <SetInputSouceSytemClock+0x90>)
    27fa:	9b06      	ldr	r3, [sp, #24]
    27fc:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    27fe:	aa02      	add	r2, sp, #8
    2800:	a903      	add	r1, sp, #12
    2802:	a804      	add	r0, sp, #16
    2804:	f24c 3350 	movw	r3, #50000	; 0xc350
    2808:	f7ff f9ac 	bl	1b64 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    280c:	4b15      	ldr	r3, [pc, #84]	; (2864 <SetInputSouceSytemClock+0x90>)
    280e:	691b      	ldr	r3, [r3, #16]
    2810:	0e1b      	lsrs	r3, r3, #24
    2812:	f003 030f 	and.w	r3, r3, #15
    2816:	9a01      	ldr	r2, [sp, #4]
    2818:	429a      	cmp	r2, r3
    281a:	bf0c      	ite	eq
    281c:	2301      	moveq	r3, #1
    281e:	2300      	movne	r3, #0
    2820:	b2db      	uxtb	r3, r3
    2822:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2824:	9a02      	ldr	r2, [sp, #8]
    2826:	a903      	add	r1, sp, #12
    2828:	ab04      	add	r3, sp, #16
    282a:	4618      	mov	r0, r3
    282c:	f7ff f9b4 	bl	1b98 <Clock_Ip_TimeoutExpired>
    2830:	4603      	mov	r3, r0
    2832:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    2836:	9b05      	ldr	r3, [sp, #20]
    2838:	2b00      	cmp	r3, #0
    283a:	d106      	bne.n	284a <SetInputSouceSytemClock+0x76>
    283c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2840:	f083 0301 	eor.w	r3, r3, #1
    2844:	b2db      	uxtb	r3, r3
    2846:	2b00      	cmp	r3, #0
    2848:	d1e0      	bne.n	280c <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    284a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    284e:	2b00      	cmp	r3, #0
    2850:	d003      	beq.n	285a <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    2852:	2105      	movs	r1, #5
    2854:	2001      	movs	r0, #1
    2856:	f7ff f975 	bl	1b44 <Clock_Ip_ReportClockErrors>
    }
}
    285a:	bf00      	nop
    285c:	b009      	add	sp, #36	; 0x24
    285e:	f85d fb04 	ldr.w	pc, [sp], #4
    2862:	bf00      	nop
    2864:	40064000 	.word	0x40064000

00002868 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2868:	b500      	push	{lr}
    286a:	b083      	sub	sp, #12
    286c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    286e:	9b01      	ldr	r3, [sp, #4]
    2870:	2b00      	cmp	r3, #0
    2872:	d002      	beq.n	287a <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    2874:	9801      	ldr	r0, [sp, #4]
    2876:	f000 f997 	bl	2ba8 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    287a:	bf00      	nop
    287c:	b003      	add	sp, #12
    287e:	f85d fb04 	ldr.w	pc, [sp], #4

00002882 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2882:	b500      	push	{lr}
    2884:	b083      	sub	sp, #12
    2886:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2888:	9b01      	ldr	r3, [sp, #4]
    288a:	2b00      	cmp	r3, #0
    288c:	d002      	beq.n	2894 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    288e:	9801      	ldr	r0, [sp, #4]
    2890:	f000 fa7e 	bl	2d90 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2894:	bf00      	nop
    2896:	b003      	add	sp, #12
    2898:	f85d fb04 	ldr.w	pc, [sp], #4

0000289c <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    289c:	b500      	push	{lr}
    289e:	b083      	sub	sp, #12
    28a0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    28a2:	9801      	ldr	r0, [sp, #4]
    28a4:	f000 fab8 	bl	2e18 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    28a8:	bf00      	nop
    28aa:	b003      	add	sp, #12
    28ac:	f85d fb04 	ldr.w	pc, [sp], #4

000028b0 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    28b0:	b500      	push	{lr}
    28b2:	b08b      	sub	sp, #44	; 0x2c
    28b4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    28b6:	2300      	movs	r3, #0
    28b8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    28bc:	9b01      	ldr	r3, [sp, #4]
    28be:	2b00      	cmp	r3, #0
    28c0:	d10b      	bne.n	28da <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    28c2:	2305      	movs	r3, #5
    28c4:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    28c6:	2301      	movs	r3, #1
    28c8:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    28cc:	2301      	movs	r3, #1
    28ce:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    28d2:	2301      	movs	r3, #1
    28d4:	f88d 3010 	strb.w	r3, [sp, #16]
    28d8:	e00e      	b.n	28f8 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    28da:	9b01      	ldr	r3, [sp, #4]
    28dc:	681b      	ldr	r3, [r3, #0]
    28de:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    28e0:	9b01      	ldr	r3, [sp, #4]
    28e2:	79db      	ldrb	r3, [r3, #7]
    28e4:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    28e8:	9b01      	ldr	r3, [sp, #4]
    28ea:	889b      	ldrh	r3, [r3, #4]
    28ec:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    28f0:	9b01      	ldr	r3, [sp, #4]
    28f2:	7a1b      	ldrb	r3, [r3, #8]
    28f4:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    28f8:	4b32      	ldr	r3, [pc, #200]	; (29c4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    28fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    28fe:	4a31      	ldr	r2, [pc, #196]	; (29c4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2900:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2904:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    2908:	4b2e      	ldr	r3, [pc, #184]	; (29c4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    290a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    290e:	4a2d      	ldr	r2, [pc, #180]	; (29c4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2910:	f023 0301 	bic.w	r3, r3, #1
    2914:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2918:	4b2a      	ldr	r3, [pc, #168]	; (29c4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    291a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    291e:	4a29      	ldr	r2, [pc, #164]	; (29c4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2920:	f023 0304 	bic.w	r3, r3, #4
    2924:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    2928:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    292c:	2b01      	cmp	r3, #1
    292e:	d144      	bne.n	29ba <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    2930:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2934:	4a23      	ldr	r2, [pc, #140]	; (29c4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2936:	f003 0301 	and.w	r3, r3, #1
    293a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    293e:	4b21      	ldr	r3, [pc, #132]	; (29c4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2940:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2944:	4a1f      	ldr	r2, [pc, #124]	; (29c4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2946:	f043 0301 	orr.w	r3, r3, #1
    294a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    294e:	4b1d      	ldr	r3, [pc, #116]	; (29c4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2950:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2954:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2958:	009b      	lsls	r3, r3, #2
    295a:	f003 0304 	and.w	r3, r3, #4
    295e:	4919      	ldr	r1, [pc, #100]	; (29c4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2960:	4313      	orrs	r3, r2
    2962:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2966:	aa05      	add	r2, sp, #20
    2968:	a906      	add	r1, sp, #24
    296a:	a807      	add	r0, sp, #28
    296c:	f24c 3350 	movw	r3, #50000	; 0xc350
    2970:	f7ff f8f8 	bl	1b64 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2974:	4b13      	ldr	r3, [pc, #76]	; (29c4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2976:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    297a:	0e1b      	lsrs	r3, r3, #24
    297c:	f003 0301 	and.w	r3, r3, #1
    2980:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2982:	9a05      	ldr	r2, [sp, #20]
    2984:	a906      	add	r1, sp, #24
    2986:	ab07      	add	r3, sp, #28
    2988:	4618      	mov	r0, r3
    298a:	f7ff f905 	bl	1b98 <Clock_Ip_TimeoutExpired>
    298e:	4603      	mov	r3, r0
    2990:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2994:	9b08      	ldr	r3, [sp, #32]
    2996:	2b00      	cmp	r3, #0
    2998:	d106      	bne.n	29a8 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    299a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    299e:	f083 0301 	eor.w	r3, r3, #1
    29a2:	b2db      	uxtb	r3, r3
    29a4:	2b00      	cmp	r3, #0
    29a6:	d1e5      	bne.n	2974 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    29a8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    29ac:	2b00      	cmp	r3, #0
    29ae:	d004      	beq.n	29ba <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    29b0:	9b02      	ldr	r3, [sp, #8]
    29b2:	4619      	mov	r1, r3
    29b4:	2001      	movs	r0, #1
    29b6:	f7ff f8c5 	bl	1b44 <Clock_Ip_ReportClockErrors>
        }
    }
}
    29ba:	bf00      	nop
    29bc:	b00b      	add	sp, #44	; 0x2c
    29be:	f85d fb04 	ldr.w	pc, [sp], #4
    29c2:	bf00      	nop
    29c4:	40064000 	.word	0x40064000

000029c8 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    29c8:	b500      	push	{lr}
    29ca:	b089      	sub	sp, #36	; 0x24
    29cc:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    29ce:	2300      	movs	r3, #0
    29d0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    29d4:	4b1f      	ldr	r3, [pc, #124]	; (2a54 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    29da:	4a1e      	ldr	r2, [pc, #120]	; (2a54 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29dc:	f043 0301 	orr.w	r3, r3, #1
    29e0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    29e4:	4b1b      	ldr	r3, [pc, #108]	; (2a54 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    29ea:	4a1a      	ldr	r2, [pc, #104]	; (2a54 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29ec:	f043 0304 	orr.w	r3, r3, #4
    29f0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    29f4:	aa03      	add	r2, sp, #12
    29f6:	a904      	add	r1, sp, #16
    29f8:	a805      	add	r0, sp, #20
    29fa:	f24c 3350 	movw	r3, #50000	; 0xc350
    29fe:	f7ff f8b1 	bl	1b64 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2a02:	4b14      	ldr	r3, [pc, #80]	; (2a54 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a08:	0e1b      	lsrs	r3, r3, #24
    2a0a:	f003 0301 	and.w	r3, r3, #1
    2a0e:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2a10:	9a03      	ldr	r2, [sp, #12]
    2a12:	a904      	add	r1, sp, #16
    2a14:	ab05      	add	r3, sp, #20
    2a16:	4618      	mov	r0, r3
    2a18:	f7ff f8be 	bl	1b98 <Clock_Ip_TimeoutExpired>
    2a1c:	4603      	mov	r3, r0
    2a1e:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2a22:	9b06      	ldr	r3, [sp, #24]
    2a24:	2b00      	cmp	r3, #0
    2a26:	d106      	bne.n	2a36 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    2a28:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2a2c:	f083 0301 	eor.w	r3, r3, #1
    2a30:	b2db      	uxtb	r3, r3
    2a32:	2b00      	cmp	r3, #0
    2a34:	d1e5      	bne.n	2a02 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    2a36:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2a3a:	2b00      	cmp	r3, #0
    2a3c:	d005      	beq.n	2a4a <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2a3e:	9b01      	ldr	r3, [sp, #4]
    2a40:	681b      	ldr	r3, [r3, #0]
    2a42:	4619      	mov	r1, r3
    2a44:	2001      	movs	r0, #1
    2a46:	f7ff f87d 	bl	1b44 <Clock_Ip_ReportClockErrors>
    }
}
    2a4a:	bf00      	nop
    2a4c:	b009      	add	sp, #36	; 0x24
    2a4e:	f85d fb04 	ldr.w	pc, [sp], #4
    2a52:	bf00      	nop
    2a54:	40064000 	.word	0x40064000

00002a58 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    2a58:	b082      	sub	sp, #8
    2a5a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    2a5c:	4b09      	ldr	r3, [pc, #36]	; (2a84 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a62:	4a08      	ldr	r2, [pc, #32]	; (2a84 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a64:	f023 0301 	bic.w	r3, r3, #1
    2a68:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2a6c:	4b05      	ldr	r3, [pc, #20]	; (2a84 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a72:	4a04      	ldr	r2, [pc, #16]	; (2a84 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a74:	f023 0304 	bic.w	r3, r3, #4
    2a78:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2a7c:	bf00      	nop
    2a7e:	b002      	add	sp, #8
    2a80:	4770      	bx	lr
    2a82:	bf00      	nop
    2a84:	40064000 	.word	0x40064000

00002a88 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2a88:	b082      	sub	sp, #8
    2a8a:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2a8c:	4b0f      	ldr	r3, [pc, #60]	; (2acc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2a8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a92:	4a0e      	ldr	r2, [pc, #56]	; (2acc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2a94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2a98:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2a9c:	4b0b      	ldr	r3, [pc, #44]	; (2acc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2a9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2aa2:	4a0a      	ldr	r2, [pc, #40]	; (2acc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2aa4:	f023 0304 	bic.w	r3, r3, #4
    2aa8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    2aac:	4b07      	ldr	r3, [pc, #28]	; (2acc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2aae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2ab2:	9b01      	ldr	r3, [sp, #4]
    2ab4:	7a1b      	ldrb	r3, [r3, #8]
    2ab6:	009b      	lsls	r3, r3, #2
    2ab8:	f003 0304 	and.w	r3, r3, #4
    2abc:	4903      	ldr	r1, [pc, #12]	; (2acc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2abe:	4313      	orrs	r3, r2
    2ac0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    2ac4:	bf00      	nop
    2ac6:	b002      	add	sp, #8
    2ac8:	4770      	bx	lr
    2aca:	bf00      	nop
    2acc:	40064000 	.word	0x40064000

00002ad0 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2ad0:	b082      	sub	sp, #8
    2ad2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2ad4:	9b01      	ldr	r3, [sp, #4]
    2ad6:	889b      	ldrh	r3, [r3, #4]
    2ad8:	2b01      	cmp	r3, #1
    2ada:	d107      	bne.n	2aec <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    2adc:	4b05      	ldr	r3, [pc, #20]	; (2af4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2ade:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ae2:	4a04      	ldr	r2, [pc, #16]	; (2af4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2ae4:	f043 0304 	orr.w	r3, r3, #4
    2ae8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    2aec:	bf00      	nop
    2aee:	b002      	add	sp, #8
    2af0:	4770      	bx	lr
    2af2:	bf00      	nop
    2af4:	40064000 	.word	0x40064000

00002af8 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    2af8:	b082      	sub	sp, #8
    2afa:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2afc:	4b05      	ldr	r3, [pc, #20]	; (2b14 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2afe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b02:	4a04      	ldr	r2, [pc, #16]	; (2b14 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2b04:	f023 0304 	bic.w	r3, r3, #4
    2b08:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2b0c:	bf00      	nop
    2b0e:	b002      	add	sp, #8
    2b10:	4770      	bx	lr
    2b12:	bf00      	nop
    2b14:	40064000 	.word	0x40064000

00002b18 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2b18:	b082      	sub	sp, #8
    2b1a:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2b1c:	4b0f      	ldr	r3, [pc, #60]	; (2b5c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b22:	4a0e      	ldr	r2, [pc, #56]	; (2b5c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b24:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2b28:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    2b2c:	4b0b      	ldr	r3, [pc, #44]	; (2b5c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b32:	4a0a      	ldr	r2, [pc, #40]	; (2b5c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b34:	f023 0302 	bic.w	r3, r3, #2
    2b38:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    2b3c:	4b07      	ldr	r3, [pc, #28]	; (2b5c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b3e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2b42:	9b01      	ldr	r3, [sp, #4]
    2b44:	7a5b      	ldrb	r3, [r3, #9]
    2b46:	005b      	lsls	r3, r3, #1
    2b48:	f003 0302 	and.w	r3, r3, #2
    2b4c:	4903      	ldr	r1, [pc, #12]	; (2b5c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b4e:	4313      	orrs	r3, r2
    2b50:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    2b54:	bf00      	nop
    2b56:	b002      	add	sp, #8
    2b58:	4770      	bx	lr
    2b5a:	bf00      	nop
    2b5c:	40064000 	.word	0x40064000

00002b60 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2b60:	b082      	sub	sp, #8
    2b62:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2b64:	9b01      	ldr	r3, [sp, #4]
    2b66:	889b      	ldrh	r3, [r3, #4]
    2b68:	2b01      	cmp	r3, #1
    2b6a:	d107      	bne.n	2b7c <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    2b6c:	4b05      	ldr	r3, [pc, #20]	; (2b84 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2b6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b72:	4a04      	ldr	r2, [pc, #16]	; (2b84 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2b74:	f043 0302 	orr.w	r3, r3, #2
    2b78:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    2b7c:	bf00      	nop
    2b7e:	b002      	add	sp, #8
    2b80:	4770      	bx	lr
    2b82:	bf00      	nop
    2b84:	40064000 	.word	0x40064000

00002b88 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    2b88:	b082      	sub	sp, #8
    2b8a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    2b8c:	4b05      	ldr	r3, [pc, #20]	; (2ba4 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2b8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b92:	4a04      	ldr	r2, [pc, #16]	; (2ba4 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2b94:	f023 0302 	bic.w	r3, r3, #2
    2b98:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2b9c:	bf00      	nop
    2b9e:	b002      	add	sp, #8
    2ba0:	4770      	bx	lr
    2ba2:	bf00      	nop
    2ba4:	40064000 	.word	0x40064000

00002ba8 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2ba8:	b500      	push	{lr}
    2baa:	b08b      	sub	sp, #44	; 0x2c
    2bac:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2bae:	9b01      	ldr	r3, [sp, #4]
    2bb0:	681a      	ldr	r2, [r3, #0]
    2bb2:	4975      	ldr	r1, [pc, #468]	; (2d88 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    2bb4:	4613      	mov	r3, r2
    2bb6:	00db      	lsls	r3, r3, #3
    2bb8:	4413      	add	r3, r2
    2bba:	440b      	add	r3, r1
    2bbc:	781b      	ldrb	r3, [r3, #0]
    2bbe:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    2bc0:	2300      	movs	r3, #0
    2bc2:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    2bc6:	2300      	movs	r3, #0
    2bc8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    2bcc:	4b6f      	ldr	r3, [pc, #444]	; (2d8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2bce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2bd2:	4a6e      	ldr	r2, [pc, #440]	; (2d8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2bd4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2bd8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    2bdc:	4b6b      	ldr	r3, [pc, #428]	; (2d8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2bde:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    2be6:	2b00      	cmp	r3, #0
    2be8:	d07d      	beq.n	2ce6 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    2bea:	9b01      	ldr	r3, [sp, #4]
    2bec:	79db      	ldrb	r3, [r3, #7]
    2bee:	461a      	mov	r2, r3
    2bf0:	4b66      	ldr	r3, [pc, #408]	; (2d8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2bf2:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    2bf6:	f003 0303 	and.w	r3, r3, #3
    2bfa:	429a      	cmp	r2, r3
    2bfc:	d10b      	bne.n	2c16 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    2bfe:	9b01      	ldr	r3, [sp, #4]
    2c00:	799b      	ldrb	r3, [r3, #6]
    2c02:	461a      	mov	r2, r3
    2c04:	4b61      	ldr	r3, [pc, #388]	; (2d8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c0a:	08db      	lsrs	r3, r3, #3
    2c0c:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    2c10:	429a      	cmp	r2, r3
    2c12:	f000 80b4 	beq.w	2d7e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    2c16:	4b5d      	ldr	r3, [pc, #372]	; (2d8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2c1c:	f003 0301 	and.w	r3, r3, #1
    2c20:	2b00      	cmp	r3, #0
    2c22:	d105      	bne.n	2c30 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    2c24:	2301      	movs	r3, #1
    2c26:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    2c2a:	2000      	movs	r0, #0
    2c2c:	f7ff fd66 	bl	26fc <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    2c30:	2002      	movs	r0, #2
    2c32:	f7ff fdcf 	bl	27d4 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    2c36:	4b55      	ldr	r3, [pc, #340]	; (2d8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c38:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c3c:	4a53      	ldr	r2, [pc, #332]	; (2d8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c3e:	f023 0301 	bic.w	r3, r3, #1
    2c42:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    2c46:	9b01      	ldr	r3, [sp, #4]
    2c48:	889b      	ldrh	r3, [r3, #4]
    2c4a:	2b01      	cmp	r3, #1
    2c4c:	f040 8097 	bne.w	2d7e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    2c50:	9b01      	ldr	r3, [sp, #4]
    2c52:	79db      	ldrb	r3, [r3, #7]
    2c54:	4a4d      	ldr	r2, [pc, #308]	; (2d8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c56:	f003 0303 	and.w	r3, r3, #3
    2c5a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    2c5e:	4b4b      	ldr	r3, [pc, #300]	; (2d8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c60:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    2c64:	9b01      	ldr	r3, [sp, #4]
    2c66:	799b      	ldrb	r3, [r3, #6]
    2c68:	00db      	lsls	r3, r3, #3
    2c6a:	f003 0308 	and.w	r3, r3, #8
    2c6e:	4313      	orrs	r3, r2
    2c70:	4a46      	ldr	r2, [pc, #280]	; (2d8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c72:	f043 0301 	orr.w	r3, r3, #1
    2c76:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2c7a:	aa03      	add	r2, sp, #12
    2c7c:	a904      	add	r1, sp, #16
    2c7e:	a805      	add	r0, sp, #20
    2c80:	f24c 3350 	movw	r3, #50000	; 0xc350
    2c84:	f7fe ff6e 	bl	1b64 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    2c88:	4b40      	ldr	r3, [pc, #256]	; (2d8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c8e:	0e1b      	lsrs	r3, r3, #24
    2c90:	f003 0301 	and.w	r3, r3, #1
    2c94:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2c96:	9a03      	ldr	r2, [sp, #12]
    2c98:	a904      	add	r1, sp, #16
    2c9a:	ab05      	add	r3, sp, #20
    2c9c:	4618      	mov	r0, r3
    2c9e:	f7fe ff7b 	bl	1b98 <Clock_Ip_TimeoutExpired>
    2ca2:	4603      	mov	r3, r0
    2ca4:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2ca8:	9b06      	ldr	r3, [sp, #24]
    2caa:	2b00      	cmp	r3, #0
    2cac:	d106      	bne.n	2cbc <Clock_Ip_SetFirc_TrustedCall+0x114>
    2cae:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2cb2:	f083 0301 	eor.w	r3, r3, #1
    2cb6:	b2db      	uxtb	r3, r3
    2cb8:	2b00      	cmp	r3, #0
    2cba:	d1e5      	bne.n	2c88 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    2cbc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2cc0:	2b00      	cmp	r3, #0
    2cc2:	d005      	beq.n	2cd0 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2cc4:	9b01      	ldr	r3, [sp, #4]
    2cc6:	681b      	ldr	r3, [r3, #0]
    2cc8:	4619      	mov	r1, r3
    2cca:	2001      	movs	r0, #1
    2ccc:	f7fe ff3a 	bl	1b44 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    2cd0:	2003      	movs	r0, #3
    2cd2:	f7ff fd7f 	bl	27d4 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    2cd6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2cda:	2b00      	cmp	r3, #0
    2cdc:	d04f      	beq.n	2d7e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    2cde:	2002      	movs	r0, #2
    2ce0:	f7ff fd26 	bl	2730 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    2ce4:	e04b      	b.n	2d7e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    2ce6:	4b29      	ldr	r3, [pc, #164]	; (2d8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2ce8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2cec:	4a27      	ldr	r2, [pc, #156]	; (2d8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cee:	f023 0301 	bic.w	r3, r3, #1
    2cf2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    2cf6:	9b01      	ldr	r3, [sp, #4]
    2cf8:	889b      	ldrh	r3, [r3, #4]
    2cfa:	2b01      	cmp	r3, #1
    2cfc:	d13f      	bne.n	2d7e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    2cfe:	9b01      	ldr	r3, [sp, #4]
    2d00:	79db      	ldrb	r3, [r3, #7]
    2d02:	4a22      	ldr	r2, [pc, #136]	; (2d8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d04:	f003 0303 	and.w	r3, r3, #3
    2d08:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    2d0c:	4b1f      	ldr	r3, [pc, #124]	; (2d8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d0e:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    2d12:	9b01      	ldr	r3, [sp, #4]
    2d14:	799b      	ldrb	r3, [r3, #6]
    2d16:	00db      	lsls	r3, r3, #3
    2d18:	f003 0308 	and.w	r3, r3, #8
    2d1c:	4313      	orrs	r3, r2
    2d1e:	4a1b      	ldr	r2, [pc, #108]	; (2d8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d20:	f043 0301 	orr.w	r3, r3, #1
    2d24:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2d28:	aa03      	add	r2, sp, #12
    2d2a:	a904      	add	r1, sp, #16
    2d2c:	a805      	add	r0, sp, #20
    2d2e:	f24c 3350 	movw	r3, #50000	; 0xc350
    2d32:	f7fe ff17 	bl	1b64 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    2d36:	4b15      	ldr	r3, [pc, #84]	; (2d8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d38:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2d3c:	0e1b      	lsrs	r3, r3, #24
    2d3e:	f003 0301 	and.w	r3, r3, #1
    2d42:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2d44:	9a03      	ldr	r2, [sp, #12]
    2d46:	a904      	add	r1, sp, #16
    2d48:	ab05      	add	r3, sp, #20
    2d4a:	4618      	mov	r0, r3
    2d4c:	f7fe ff24 	bl	1b98 <Clock_Ip_TimeoutExpired>
    2d50:	4603      	mov	r3, r0
    2d52:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2d56:	9b06      	ldr	r3, [sp, #24]
    2d58:	2b00      	cmp	r3, #0
    2d5a:	d106      	bne.n	2d6a <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    2d5c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2d60:	f083 0301 	eor.w	r3, r3, #1
    2d64:	b2db      	uxtb	r3, r3
    2d66:	2b00      	cmp	r3, #0
    2d68:	d1e5      	bne.n	2d36 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    2d6a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2d6e:	2b00      	cmp	r3, #0
    2d70:	d005      	beq.n	2d7e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2d72:	9b01      	ldr	r3, [sp, #4]
    2d74:	681b      	ldr	r3, [r3, #0]
    2d76:	4619      	mov	r1, r3
    2d78:	2001      	movs	r0, #1
    2d7a:	f7fe fee3 	bl	1b44 <Clock_Ip_ReportClockErrors>
}
    2d7e:	bf00      	nop
    2d80:	b00b      	add	sp, #44	; 0x2c
    2d82:	f85d fb04 	ldr.w	pc, [sp], #4
    2d86:	bf00      	nop
    2d88:	00007200 	.word	0x00007200
    2d8c:	40064000 	.word	0x40064000

00002d90 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2d90:	b500      	push	{lr}
    2d92:	b089      	sub	sp, #36	; 0x24
    2d94:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2d96:	2300      	movs	r3, #0
    2d98:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    2d9c:	9b01      	ldr	r3, [sp, #4]
    2d9e:	889b      	ldrh	r3, [r3, #4]
    2da0:	2b01      	cmp	r3, #1
    2da2:	d132      	bne.n	2e0a <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    2da4:	4b1b      	ldr	r3, [pc, #108]	; (2e14 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2da6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2daa:	4a1a      	ldr	r2, [pc, #104]	; (2e14 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2dac:	f043 0301 	orr.w	r3, r3, #1
    2db0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2db4:	aa03      	add	r2, sp, #12
    2db6:	a904      	add	r1, sp, #16
    2db8:	a805      	add	r0, sp, #20
    2dba:	f24c 3350 	movw	r3, #50000	; 0xc350
    2dbe:	f7fe fed1 	bl	1b64 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    2dc2:	4b14      	ldr	r3, [pc, #80]	; (2e14 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2dc4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2dc8:	0e1b      	lsrs	r3, r3, #24
    2dca:	f003 0301 	and.w	r3, r3, #1
    2dce:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2dd0:	9a03      	ldr	r2, [sp, #12]
    2dd2:	a904      	add	r1, sp, #16
    2dd4:	ab05      	add	r3, sp, #20
    2dd6:	4618      	mov	r0, r3
    2dd8:	f7fe fede 	bl	1b98 <Clock_Ip_TimeoutExpired>
    2ddc:	4603      	mov	r3, r0
    2dde:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2de2:	9b06      	ldr	r3, [sp, #24]
    2de4:	2b00      	cmp	r3, #0
    2de6:	d106      	bne.n	2df6 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    2de8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2dec:	f083 0301 	eor.w	r3, r3, #1
    2df0:	b2db      	uxtb	r3, r3
    2df2:	2b00      	cmp	r3, #0
    2df4:	d1e5      	bne.n	2dc2 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    2df6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d005      	beq.n	2e0a <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2dfe:	9b01      	ldr	r3, [sp, #4]
    2e00:	681b      	ldr	r3, [r3, #0]
    2e02:	4619      	mov	r1, r3
    2e04:	2001      	movs	r0, #1
    2e06:	f7fe fe9d 	bl	1b44 <Clock_Ip_ReportClockErrors>
        }
    }
}
    2e0a:	bf00      	nop
    2e0c:	b009      	add	sp, #36	; 0x24
    2e0e:	f85d fb04 	ldr.w	pc, [sp], #4
    2e12:	bf00      	nop
    2e14:	40064000 	.word	0x40064000

00002e18 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    2e18:	b082      	sub	sp, #8
    2e1a:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    2e1c:	4b05      	ldr	r3, [pc, #20]	; (2e34 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    2e1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2e22:	4a04      	ldr	r2, [pc, #16]	; (2e34 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    2e24:	f023 0301 	bic.w	r3, r3, #1
    2e28:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    2e2c:	bf00      	nop
    2e2e:	b002      	add	sp, #8
    2e30:	4770      	bx	lr
    2e32:	bf00      	nop
    2e34:	40064000 	.word	0x40064000

00002e38 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    2e38:	b082      	sub	sp, #8
    2e3a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2e3c:	bf00      	nop
    2e3e:	b002      	add	sp, #8
    2e40:	4770      	bx	lr

00002e42 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    2e42:	b082      	sub	sp, #8
    2e44:	9001      	str	r0, [sp, #4]
    2e46:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    2e48:	bf00      	nop
    2e4a:	b002      	add	sp, #8
    2e4c:	4770      	bx	lr

00002e4e <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    2e4e:	b082      	sub	sp, #8
    2e50:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2e52:	bf00      	nop
    2e54:	b002      	add	sp, #8
    2e56:	4770      	bx	lr

00002e58 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    2e58:	b082      	sub	sp, #8
    2e5a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2e5c:	bf00      	nop
    2e5e:	b002      	add	sp, #8
    2e60:	4770      	bx	lr

00002e62 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    2e62:	b082      	sub	sp, #8
    2e64:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    2e66:	2302      	movs	r3, #2
}
    2e68:	4618      	mov	r0, r3
    2e6a:	b002      	add	sp, #8
    2e6c:	4770      	bx	lr

00002e6e <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    2e6e:	b082      	sub	sp, #8
    2e70:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    2e72:	bf00      	nop
    2e74:	b002      	add	sp, #8
    2e76:	4770      	bx	lr

00002e78 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    2e78:	b500      	push	{lr}
    2e7a:	b083      	sub	sp, #12
    2e7c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e7e:	9b01      	ldr	r3, [sp, #4]
    2e80:	2b00      	cmp	r3, #0
    2e82:	d002      	beq.n	2e8a <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    2e84:	9801      	ldr	r0, [sp, #4]
    2e86:	f000 f870 	bl	2f6a <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e8a:	bf00      	nop
    2e8c:	b003      	add	sp, #12
    2e8e:	f85d fb04 	ldr.w	pc, [sp], #4

00002e92 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    2e92:	b500      	push	{lr}
    2e94:	b083      	sub	sp, #12
    2e96:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e98:	9b01      	ldr	r3, [sp, #4]
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	d002      	beq.n	2ea4 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    2e9e:	9801      	ldr	r0, [sp, #4]
    2ea0:	f000 f89a 	bl	2fd8 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ea4:	bf00      	nop
    2ea6:	b003      	add	sp, #12
    2ea8:	f85d fb04 	ldr.w	pc, [sp], #4

00002eac <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    2eac:	b500      	push	{lr}
    2eae:	b089      	sub	sp, #36	; 0x24
    2eb0:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    2eb2:	2301      	movs	r3, #1
    2eb4:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    2eb6:	2300      	movs	r3, #0
    2eb8:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    2ebc:	4b1e      	ldr	r3, [pc, #120]	; (2f38 <Clock_Ip_CompleteSpll+0x8c>)
    2ebe:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2ec2:	f003 0301 	and.w	r3, r3, #1
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d02f      	beq.n	2f2a <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2eca:	aa02      	add	r2, sp, #8
    2ecc:	a903      	add	r1, sp, #12
    2ece:	a804      	add	r0, sp, #16
    2ed0:	f24c 3350 	movw	r3, #50000	; 0xc350
    2ed4:	f7fe fe46 	bl	1b64 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    2ed8:	4b17      	ldr	r3, [pc, #92]	; (2f38 <Clock_Ip_CompleteSpll+0x8c>)
    2eda:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2ede:	0e1b      	lsrs	r3, r3, #24
    2ee0:	f003 0301 	and.w	r3, r3, #1
    2ee4:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2ee6:	9a02      	ldr	r2, [sp, #8]
    2ee8:	a903      	add	r1, sp, #12
    2eea:	ab04      	add	r3, sp, #16
    2eec:	4618      	mov	r0, r3
    2eee:	f7fe fe53 	bl	1b98 <Clock_Ip_TimeoutExpired>
    2ef2:	4603      	mov	r3, r0
    2ef4:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    2ef8:	9b05      	ldr	r3, [sp, #20]
    2efa:	2b00      	cmp	r3, #0
    2efc:	d106      	bne.n	2f0c <Clock_Ip_CompleteSpll+0x60>
    2efe:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2f02:	f083 0301 	eor.w	r3, r3, #1
    2f06:	b2db      	uxtb	r3, r3
    2f08:	2b00      	cmp	r3, #0
    2f0a:	d1e5      	bne.n	2ed8 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    2f0c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2f10:	f083 0301 	eor.w	r3, r3, #1
    2f14:	b2db      	uxtb	r3, r3
    2f16:	2b00      	cmp	r3, #0
    2f18:	d002      	beq.n	2f20 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    2f1a:	2302      	movs	r3, #2
    2f1c:	9307      	str	r3, [sp, #28]
    2f1e:	e006      	b.n	2f2e <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    2f20:	9901      	ldr	r1, [sp, #4]
    2f22:	2001      	movs	r0, #1
    2f24:	f7fe fe0e 	bl	1b44 <Clock_Ip_ReportClockErrors>
    2f28:	e001      	b.n	2f2e <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    2f2a:	2300      	movs	r3, #0
    2f2c:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    2f2e:	9b07      	ldr	r3, [sp, #28]
}
    2f30:	4618      	mov	r0, r3
    2f32:	b009      	add	sp, #36	; 0x24
    2f34:	f85d fb04 	ldr.w	pc, [sp], #4
    2f38:	40064000 	.word	0x40064000

00002f3c <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    2f3c:	b500      	push	{lr}
    2f3e:	b083      	sub	sp, #12
    2f40:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    2f42:	9801      	ldr	r0, [sp, #4]
    2f44:	f000 f886 	bl	3054 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2f48:	bf00      	nop
    2f4a:	b003      	add	sp, #12
    2f4c:	f85d fb04 	ldr.w	pc, [sp], #4

00002f50 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    2f50:	b500      	push	{lr}
    2f52:	b083      	sub	sp, #12
    2f54:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f56:	9b01      	ldr	r3, [sp, #4]
    2f58:	2b00      	cmp	r3, #0
    2f5a:	d002      	beq.n	2f62 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    2f5c:	9801      	ldr	r0, [sp, #4]
    2f5e:	f000 f891 	bl	3084 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f62:	bf00      	nop
    2f64:	b003      	add	sp, #12
    2f66:	f85d fb04 	ldr.w	pc, [sp], #4

00002f6a <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    2f6a:	b082      	sub	sp, #8
    2f6c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    2f6e:	4b19      	ldr	r3, [pc, #100]	; (2fd4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f70:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f74:	4a17      	ldr	r2, [pc, #92]	; (2fd4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f76:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2f7a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    2f7e:	4b15      	ldr	r3, [pc, #84]	; (2fd4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f80:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f84:	4a13      	ldr	r2, [pc, #76]	; (2fd4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2f8a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    2f8e:	4b11      	ldr	r3, [pc, #68]	; (2fd4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f90:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f94:	4a0f      	ldr	r2, [pc, #60]	; (2fd4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f96:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    2f9a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    2f9e:	4b0d      	ldr	r3, [pc, #52]	; (2fd4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fa0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2fa4:	4a0b      	ldr	r2, [pc, #44]	; (2fd4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fa6:	f023 0301 	bic.w	r3, r3, #1
    2faa:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    2fae:	4b09      	ldr	r3, [pc, #36]	; (2fd4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fb0:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    2fb4:	4a07      	ldr	r2, [pc, #28]	; (2fd4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fb6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2fba:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    2fbe:	4b05      	ldr	r3, [pc, #20]	; (2fd4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fc0:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    2fc4:	4a03      	ldr	r2, [pc, #12]	; (2fd4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    2fca:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    2fce:	bf00      	nop
    2fd0:	b002      	add	sp, #8
    2fd2:	4770      	bx	lr
    2fd4:	40064000 	.word	0x40064000

00002fd8 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    2fd8:	b082      	sub	sp, #8
    2fda:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    2fdc:	9b01      	ldr	r3, [sp, #4]
    2fde:	889b      	ldrh	r3, [r3, #4]
    2fe0:	2b01      	cmp	r3, #1
    2fe2:	d12f      	bne.n	3044 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    2fe4:	4b1a      	ldr	r3, [pc, #104]	; (3050 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    2fe6:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    2fea:	9b01      	ldr	r3, [sp, #4]
    2fec:	7b5b      	ldrb	r3, [r3, #13]
    2fee:	3b01      	subs	r3, #1
    2ff0:	021b      	lsls	r3, r3, #8
    2ff2:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    2ff6:	9b01      	ldr	r3, [sp, #4]
    2ff8:	7d1b      	ldrb	r3, [r3, #20]
    2ffa:	3b10      	subs	r3, #16
    2ffc:	041b      	lsls	r3, r3, #16
    2ffe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3002:	430b      	orrs	r3, r1
    3004:	4912      	ldr	r1, [pc, #72]	; (3050 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3006:	4313      	orrs	r3, r2
    3008:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    300c:	9b01      	ldr	r3, [sp, #4]
    300e:	7fdb      	ldrb	r3, [r3, #31]
    3010:	2b02      	cmp	r3, #2
    3012:	d011      	beq.n	3038 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3014:	2b02      	cmp	r3, #2
    3016:	dc17      	bgt.n	3048 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3018:	2b00      	cmp	r3, #0
    301a:	d002      	beq.n	3022 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    301c:	2b01      	cmp	r3, #1
    301e:	d005      	beq.n	302c <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3020:	e012      	b.n	3048 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    3022:	4b0b      	ldr	r3, [pc, #44]	; (3050 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3024:	2200      	movs	r2, #0
    3026:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    302a:	e00e      	b.n	304a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    302c:	4b08      	ldr	r3, [pc, #32]	; (3050 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    302e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3032:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3036:	e008      	b.n	304a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3038:	4b05      	ldr	r3, [pc, #20]	; (3050 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    303a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    303e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3042:	e002      	b.n	304a <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    3044:	bf00      	nop
    3046:	e000      	b.n	304a <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3048:	bf00      	nop
}
    304a:	bf00      	nop
    304c:	b002      	add	sp, #8
    304e:	4770      	bx	lr
    3050:	40064000 	.word	0x40064000

00003054 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    3054:	b082      	sub	sp, #8
    3056:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3058:	4b09      	ldr	r3, [pc, #36]	; (3080 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    305a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    305e:	4a08      	ldr	r2, [pc, #32]	; (3080 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3060:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3064:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3068:	4b05      	ldr	r3, [pc, #20]	; (3080 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    306a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    306e:	4a04      	ldr	r2, [pc, #16]	; (3080 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3070:	f023 0301 	bic.w	r3, r3, #1
    3074:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    3078:	bf00      	nop
    307a:	b002      	add	sp, #8
    307c:	4770      	bx	lr
    307e:	bf00      	nop
    3080:	40064000 	.word	0x40064000

00003084 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3084:	b082      	sub	sp, #8
    3086:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3088:	9b01      	ldr	r3, [sp, #4]
    308a:	889b      	ldrh	r3, [r3, #4]
    308c:	2b01      	cmp	r3, #1
    308e:	d107      	bne.n	30a0 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    3090:	4b05      	ldr	r3, [pc, #20]	; (30a8 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3092:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3096:	4a04      	ldr	r2, [pc, #16]	; (30a8 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3098:	f043 0301 	orr.w	r3, r3, #1
    309c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    30a0:	bf00      	nop
    30a2:	b002      	add	sp, #8
    30a4:	4770      	bx	lr
    30a6:	bf00      	nop
    30a8:	40064000 	.word	0x40064000

000030ac <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    30ac:	b082      	sub	sp, #8
    30ae:	9001      	str	r0, [sp, #4]
    30b0:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    30b2:	bf00      	nop
    30b4:	b002      	add	sp, #8
    30b6:	4770      	bx	lr

000030b8 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    30b8:	b082      	sub	sp, #8
    30ba:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    30bc:	bf00      	nop
    30be:	b002      	add	sp, #8
    30c0:	4770      	bx	lr

000030c2 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    30c2:	b500      	push	{lr}
    30c4:	b083      	sub	sp, #12
    30c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30c8:	9b01      	ldr	r3, [sp, #4]
    30ca:	2b00      	cmp	r3, #0
    30cc:	d002      	beq.n	30d4 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    30ce:	9801      	ldr	r0, [sp, #4]
    30d0:	f000 f8ee 	bl	32b0 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30d4:	bf00      	nop
    30d6:	b003      	add	sp, #12
    30d8:	f85d fb04 	ldr.w	pc, [sp], #4

000030dc <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    30dc:	b500      	push	{lr}
    30de:	b083      	sub	sp, #12
    30e0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30e2:	9b01      	ldr	r3, [sp, #4]
    30e4:	2b00      	cmp	r3, #0
    30e6:	d002      	beq.n	30ee <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    30e8:	9801      	ldr	r0, [sp, #4]
    30ea:	f000 f8ff 	bl	32ec <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30ee:	bf00      	nop
    30f0:	b003      	add	sp, #12
    30f2:	f85d fb04 	ldr.w	pc, [sp], #4

000030f6 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    30f6:	b500      	push	{lr}
    30f8:	b083      	sub	sp, #12
    30fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30fc:	9b01      	ldr	r3, [sp, #4]
    30fe:	2b00      	cmp	r3, #0
    3100:	d002      	beq.n	3108 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    3102:	9801      	ldr	r0, [sp, #4]
    3104:	f000 f912 	bl	332c <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3108:	bf00      	nop
    310a:	b003      	add	sp, #12
    310c:	f85d fb04 	ldr.w	pc, [sp], #4

00003110 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3110:	b500      	push	{lr}
    3112:	b083      	sub	sp, #12
    3114:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3116:	9b01      	ldr	r3, [sp, #4]
    3118:	2b00      	cmp	r3, #0
    311a:	d002      	beq.n	3122 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    311c:	9801      	ldr	r0, [sp, #4]
    311e:	f000 f925 	bl	336c <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3122:	bf00      	nop
    3124:	b003      	add	sp, #12
    3126:	f85d fb04 	ldr.w	pc, [sp], #4

0000312a <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    312a:	b500      	push	{lr}
    312c:	b083      	sub	sp, #12
    312e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3130:	9b01      	ldr	r3, [sp, #4]
    3132:	2b00      	cmp	r3, #0
    3134:	d002      	beq.n	313c <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    3136:	9801      	ldr	r0, [sp, #4]
    3138:	f000 f936 	bl	33a8 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    313c:	bf00      	nop
    313e:	b003      	add	sp, #12
    3140:	f85d fb04 	ldr.w	pc, [sp], #4

00003144 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3144:	b500      	push	{lr}
    3146:	b083      	sub	sp, #12
    3148:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    314a:	9b01      	ldr	r3, [sp, #4]
    314c:	2b00      	cmp	r3, #0
    314e:	d002      	beq.n	3156 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    3150:	9801      	ldr	r0, [sp, #4]
    3152:	f000 f949 	bl	33e8 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3156:	bf00      	nop
    3158:	b003      	add	sp, #12
    315a:	f85d fb04 	ldr.w	pc, [sp], #4

0000315e <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    315e:	b500      	push	{lr}
    3160:	b083      	sub	sp, #12
    3162:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3164:	9b01      	ldr	r3, [sp, #4]
    3166:	2b00      	cmp	r3, #0
    3168:	d002      	beq.n	3170 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    316a:	9801      	ldr	r0, [sp, #4]
    316c:	f000 f958 	bl	3420 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3170:	bf00      	nop
    3172:	b003      	add	sp, #12
    3174:	f85d fb04 	ldr.w	pc, [sp], #4

00003178 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3178:	b500      	push	{lr}
    317a:	b083      	sub	sp, #12
    317c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    317e:	9b01      	ldr	r3, [sp, #4]
    3180:	2b00      	cmp	r3, #0
    3182:	d002      	beq.n	318a <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    3184:	9801      	ldr	r0, [sp, #4]
    3186:	f000 f969 	bl	345c <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    318a:	bf00      	nop
    318c:	b003      	add	sp, #12
    318e:	f85d fb04 	ldr.w	pc, [sp], #4

00003192 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3192:	b500      	push	{lr}
    3194:	b083      	sub	sp, #12
    3196:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3198:	9b01      	ldr	r3, [sp, #4]
    319a:	2b00      	cmp	r3, #0
    319c:	d002      	beq.n	31a4 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    319e:	9801      	ldr	r0, [sp, #4]
    31a0:	f000 f978 	bl	3494 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31a4:	bf00      	nop
    31a6:	b003      	add	sp, #12
    31a8:	f85d fb04 	ldr.w	pc, [sp], #4

000031ac <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    31ac:	b500      	push	{lr}
    31ae:	b083      	sub	sp, #12
    31b0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31b2:	9b01      	ldr	r3, [sp, #4]
    31b4:	2b00      	cmp	r3, #0
    31b6:	d002      	beq.n	31be <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    31b8:	9801      	ldr	r0, [sp, #4]
    31ba:	f000 f989 	bl	34d0 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31be:	bf00      	nop
    31c0:	b003      	add	sp, #12
    31c2:	f85d fb04 	ldr.w	pc, [sp], #4

000031c6 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    31c6:	b500      	push	{lr}
    31c8:	b083      	sub	sp, #12
    31ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31cc:	9b01      	ldr	r3, [sp, #4]
    31ce:	2b00      	cmp	r3, #0
    31d0:	d002      	beq.n	31d8 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    31d2:	9801      	ldr	r0, [sp, #4]
    31d4:	f000 f998 	bl	3508 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31d8:	bf00      	nop
    31da:	b003      	add	sp, #12
    31dc:	f85d fb04 	ldr.w	pc, [sp], #4

000031e0 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    31e0:	b500      	push	{lr}
    31e2:	b083      	sub	sp, #12
    31e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31e6:	9b01      	ldr	r3, [sp, #4]
    31e8:	2b00      	cmp	r3, #0
    31ea:	d002      	beq.n	31f2 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    31ec:	9801      	ldr	r0, [sp, #4]
    31ee:	f000 f9a9 	bl	3544 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31f2:	bf00      	nop
    31f4:	b003      	add	sp, #12
    31f6:	f85d fb04 	ldr.w	pc, [sp], #4

000031fa <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    31fa:	b500      	push	{lr}
    31fc:	b083      	sub	sp, #12
    31fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3200:	9b01      	ldr	r3, [sp, #4]
    3202:	2b00      	cmp	r3, #0
    3204:	d002      	beq.n	320c <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    3206:	9801      	ldr	r0, [sp, #4]
    3208:	f000 f9e6 	bl	35d8 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    320c:	bf00      	nop
    320e:	b003      	add	sp, #12
    3210:	f85d fb04 	ldr.w	pc, [sp], #4

00003214 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3214:	b500      	push	{lr}
    3216:	b083      	sub	sp, #12
    3218:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    321a:	9b01      	ldr	r3, [sp, #4]
    321c:	2b00      	cmp	r3, #0
    321e:	d002      	beq.n	3226 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    3220:	9801      	ldr	r0, [sp, #4]
    3222:	f000 fa25 	bl	3670 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3226:	bf00      	nop
    3228:	b003      	add	sp, #12
    322a:	f85d fb04 	ldr.w	pc, [sp], #4

0000322e <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    322e:	b500      	push	{lr}
    3230:	b083      	sub	sp, #12
    3232:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3234:	9b01      	ldr	r3, [sp, #4]
    3236:	2b00      	cmp	r3, #0
    3238:	d002      	beq.n	3240 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    323a:	9801      	ldr	r0, [sp, #4]
    323c:	f000 fa2a 	bl	3694 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3240:	bf00      	nop
    3242:	b003      	add	sp, #12
    3244:	f85d fb04 	ldr.w	pc, [sp], #4

00003248 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3248:	b500      	push	{lr}
    324a:	b083      	sub	sp, #12
    324c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    324e:	9b01      	ldr	r3, [sp, #4]
    3250:	2b00      	cmp	r3, #0
    3252:	d002      	beq.n	325a <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    3254:	9801      	ldr	r0, [sp, #4]
    3256:	f000 fa3b 	bl	36d0 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    325a:	bf00      	nop
    325c:	b003      	add	sp, #12
    325e:	f85d fb04 	ldr.w	pc, [sp], #4

00003262 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3262:	b500      	push	{lr}
    3264:	b083      	sub	sp, #12
    3266:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3268:	9b01      	ldr	r3, [sp, #4]
    326a:	2b00      	cmp	r3, #0
    326c:	d002      	beq.n	3274 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    326e:	9801      	ldr	r0, [sp, #4]
    3270:	f000 fa56 	bl	3720 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3274:	bf00      	nop
    3276:	b003      	add	sp, #12
    3278:	f85d fb04 	ldr.w	pc, [sp], #4

0000327c <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    327c:	b500      	push	{lr}
    327e:	b083      	sub	sp, #12
    3280:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3282:	9b01      	ldr	r3, [sp, #4]
    3284:	2b00      	cmp	r3, #0
    3286:	d002      	beq.n	328e <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    3288:	9801      	ldr	r0, [sp, #4]
    328a:	f000 fa79 	bl	3780 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    328e:	bf00      	nop
    3290:	b003      	add	sp, #12
    3292:	f85d fb04 	ldr.w	pc, [sp], #4

00003296 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3296:	b500      	push	{lr}
    3298:	b083      	sub	sp, #12
    329a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    329c:	9b01      	ldr	r3, [sp, #4]
    329e:	2b00      	cmp	r3, #0
    32a0:	d002      	beq.n	32a8 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    32a2:	9801      	ldr	r0, [sp, #4]
    32a4:	f000 fa8a 	bl	37bc <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32a8:	bf00      	nop
    32aa:	b003      	add	sp, #12
    32ac:	f85d fb04 	ldr.w	pc, [sp], #4

000032b0 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    32b0:	b084      	sub	sp, #16
    32b2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    32b4:	4b0b      	ldr	r3, [pc, #44]	; (32e4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    32b6:	795b      	ldrb	r3, [r3, #5]
    32b8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    32ba:	4b0b      	ldr	r3, [pc, #44]	; (32e8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    32bc:	695b      	ldr	r3, [r3, #20]
    32be:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    32c0:	9b02      	ldr	r3, [sp, #8]
    32c2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    32c6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    32c8:	9b03      	ldr	r3, [sp, #12]
    32ca:	061b      	lsls	r3, r3, #24
    32cc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    32d0:	9a02      	ldr	r2, [sp, #8]
    32d2:	4313      	orrs	r3, r2
    32d4:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    32d6:	4a04      	ldr	r2, [pc, #16]	; (32e8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    32d8:	9b02      	ldr	r3, [sp, #8]
    32da:	6153      	str	r3, [r2, #20]
}
    32dc:	bf00      	nop
    32de:	b004      	add	sp, #16
    32e0:	4770      	bx	lr
    32e2:	bf00      	nop
    32e4:	00007568 	.word	0x00007568
    32e8:	40064000 	.word	0x40064000

000032ec <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    32ec:	b084      	sub	sp, #16
    32ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    32f0:	9b01      	ldr	r3, [sp, #4]
    32f2:	685b      	ldr	r3, [r3, #4]
    32f4:	4a0b      	ldr	r2, [pc, #44]	; (3324 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    32f6:	5cd3      	ldrb	r3, [r2, r3]
    32f8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    32fa:	4b0b      	ldr	r3, [pc, #44]	; (3328 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    32fc:	695b      	ldr	r3, [r3, #20]
    32fe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3300:	9b02      	ldr	r3, [sp, #8]
    3302:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3306:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3308:	9b03      	ldr	r3, [sp, #12]
    330a:	061b      	lsls	r3, r3, #24
    330c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3310:	9a02      	ldr	r2, [sp, #8]
    3312:	4313      	orrs	r3, r2
    3314:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3316:	4a04      	ldr	r2, [pc, #16]	; (3328 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3318:	9b02      	ldr	r3, [sp, #8]
    331a:	6153      	str	r3, [r2, #20]
}
    331c:	bf00      	nop
    331e:	b004      	add	sp, #16
    3320:	4770      	bx	lr
    3322:	bf00      	nop
    3324:	00007568 	.word	0x00007568
    3328:	40064000 	.word	0x40064000

0000332c <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    332c:	b084      	sub	sp, #16
    332e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3330:	9b01      	ldr	r3, [sp, #4]
    3332:	685b      	ldr	r3, [r3, #4]
    3334:	4a0b      	ldr	r2, [pc, #44]	; (3364 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    3336:	5cd3      	ldrb	r3, [r2, r3]
    3338:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    333a:	4b0b      	ldr	r3, [pc, #44]	; (3368 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    333c:	699b      	ldr	r3, [r3, #24]
    333e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    3340:	9b02      	ldr	r3, [sp, #8]
    3342:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3346:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    3348:	9b03      	ldr	r3, [sp, #12]
    334a:	061b      	lsls	r3, r3, #24
    334c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3350:	9a02      	ldr	r2, [sp, #8]
    3352:	4313      	orrs	r3, r2
    3354:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    3356:	4a04      	ldr	r2, [pc, #16]	; (3368 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3358:	9b02      	ldr	r3, [sp, #8]
    335a:	6193      	str	r3, [r2, #24]
}
    335c:	bf00      	nop
    335e:	b004      	add	sp, #16
    3360:	4770      	bx	lr
    3362:	bf00      	nop
    3364:	00007568 	.word	0x00007568
    3368:	40064000 	.word	0x40064000

0000336c <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    336c:	b084      	sub	sp, #16
    336e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3370:	4b0b      	ldr	r3, [pc, #44]	; (33a0 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    3372:	795b      	ldrb	r3, [r3, #5]
    3374:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    3376:	4b0b      	ldr	r3, [pc, #44]	; (33a4 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3378:	69db      	ldr	r3, [r3, #28]
    337a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    337c:	9b02      	ldr	r3, [sp, #8]
    337e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3382:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3384:	9b03      	ldr	r3, [sp, #12]
    3386:	061b      	lsls	r3, r3, #24
    3388:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    338c:	9a02      	ldr	r2, [sp, #8]
    338e:	4313      	orrs	r3, r2
    3390:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3392:	4a04      	ldr	r2, [pc, #16]	; (33a4 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3394:	9b02      	ldr	r3, [sp, #8]
    3396:	61d3      	str	r3, [r2, #28]
}
    3398:	bf00      	nop
    339a:	b004      	add	sp, #16
    339c:	4770      	bx	lr
    339e:	bf00      	nop
    33a0:	00007568 	.word	0x00007568
    33a4:	40064000 	.word	0x40064000

000033a8 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    33a8:	b084      	sub	sp, #16
    33aa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    33ac:	9b01      	ldr	r3, [sp, #4]
    33ae:	685b      	ldr	r3, [r3, #4]
    33b0:	4a0b      	ldr	r2, [pc, #44]	; (33e0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    33b2:	5cd3      	ldrb	r3, [r2, r3]
    33b4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    33b6:	4b0b      	ldr	r3, [pc, #44]	; (33e4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    33b8:	69db      	ldr	r3, [r3, #28]
    33ba:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    33bc:	9b02      	ldr	r3, [sp, #8]
    33be:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    33c2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    33c4:	9b03      	ldr	r3, [sp, #12]
    33c6:	061b      	lsls	r3, r3, #24
    33c8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    33cc:	9a02      	ldr	r2, [sp, #8]
    33ce:	4313      	orrs	r3, r2
    33d0:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    33d2:	4a04      	ldr	r2, [pc, #16]	; (33e4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    33d4:	9b02      	ldr	r3, [sp, #8]
    33d6:	61d3      	str	r3, [r2, #28]
}
    33d8:	bf00      	nop
    33da:	b004      	add	sp, #16
    33dc:	4770      	bx	lr
    33de:	bf00      	nop
    33e0:	00007568 	.word	0x00007568
    33e4:	40064000 	.word	0x40064000

000033e8 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    33e8:	b084      	sub	sp, #16
    33ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    33ec:	4b0a      	ldr	r3, [pc, #40]	; (3418 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    33ee:	7b9b      	ldrb	r3, [r3, #14]
    33f0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    33f2:	4b0a      	ldr	r3, [pc, #40]	; (341c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    33f4:	691b      	ldr	r3, [r3, #16]
    33f6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    33f8:	9b02      	ldr	r3, [sp, #8]
    33fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    33fe:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3400:	9b03      	ldr	r3, [sp, #12]
    3402:	011b      	lsls	r3, r3, #4
    3404:	9a02      	ldr	r2, [sp, #8]
    3406:	4313      	orrs	r3, r2
    3408:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    340a:	4a04      	ldr	r2, [pc, #16]	; (341c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    340c:	9b02      	ldr	r3, [sp, #8]
    340e:	6113      	str	r3, [r2, #16]
}
    3410:	bf00      	nop
    3412:	b004      	add	sp, #16
    3414:	4770      	bx	lr
    3416:	bf00      	nop
    3418:	00007510 	.word	0x00007510
    341c:	40048000 	.word	0x40048000

00003420 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3420:	b084      	sub	sp, #16
    3422:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3424:	9b01      	ldr	r3, [sp, #4]
    3426:	685b      	ldr	r3, [r3, #4]
    3428:	4a0a      	ldr	r2, [pc, #40]	; (3454 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    342a:	5cd3      	ldrb	r3, [r2, r3]
    342c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    342e:	4b0a      	ldr	r3, [pc, #40]	; (3458 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3430:	691b      	ldr	r3, [r3, #16]
    3432:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3434:	9b02      	ldr	r3, [sp, #8]
    3436:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    343a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    343c:	9b03      	ldr	r3, [sp, #12]
    343e:	011b      	lsls	r3, r3, #4
    3440:	9a02      	ldr	r2, [sp, #8]
    3442:	4313      	orrs	r3, r2
    3444:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3446:	4a04      	ldr	r2, [pc, #16]	; (3458 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3448:	9b02      	ldr	r3, [sp, #8]
    344a:	6113      	str	r3, [r2, #16]
}
    344c:	bf00      	nop
    344e:	b004      	add	sp, #16
    3450:	4770      	bx	lr
    3452:	bf00      	nop
    3454:	00007510 	.word	0x00007510
    3458:	40048000 	.word	0x40048000

0000345c <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    345c:	b084      	sub	sp, #16
    345e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3460:	4b0a      	ldr	r3, [pc, #40]	; (348c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    3462:	785b      	ldrb	r3, [r3, #1]
    3464:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3466:	4b0a      	ldr	r3, [pc, #40]	; (3490 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3468:	691b      	ldr	r3, [r3, #16]
    346a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    346c:	9b02      	ldr	r3, [sp, #8]
    346e:	f023 030c 	bic.w	r3, r3, #12
    3472:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3474:	9b03      	ldr	r3, [sp, #12]
    3476:	009b      	lsls	r3, r3, #2
    3478:	9a02      	ldr	r2, [sp, #8]
    347a:	4313      	orrs	r3, r2
    347c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    347e:	4a04      	ldr	r2, [pc, #16]	; (3490 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3480:	9b02      	ldr	r3, [sp, #8]
    3482:	6113      	str	r3, [r2, #16]
}
    3484:	bf00      	nop
    3486:	b004      	add	sp, #16
    3488:	4770      	bx	lr
    348a:	bf00      	nop
    348c:	000075c8 	.word	0x000075c8
    3490:	40048000 	.word	0x40048000

00003494 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3494:	b084      	sub	sp, #16
    3496:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3498:	9b01      	ldr	r3, [sp, #4]
    349a:	685b      	ldr	r3, [r3, #4]
    349c:	4a0a      	ldr	r2, [pc, #40]	; (34c8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    349e:	5cd3      	ldrb	r3, [r2, r3]
    34a0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    34a2:	4b0a      	ldr	r3, [pc, #40]	; (34cc <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    34a4:	691b      	ldr	r3, [r3, #16]
    34a6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    34a8:	9b02      	ldr	r3, [sp, #8]
    34aa:	f023 030c 	bic.w	r3, r3, #12
    34ae:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    34b0:	9b03      	ldr	r3, [sp, #12]
    34b2:	009b      	lsls	r3, r3, #2
    34b4:	9a02      	ldr	r2, [sp, #8]
    34b6:	4313      	orrs	r3, r2
    34b8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    34ba:	4a04      	ldr	r2, [pc, #16]	; (34cc <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    34bc:	9b02      	ldr	r3, [sp, #8]
    34be:	6113      	str	r3, [r2, #16]
}
    34c0:	bf00      	nop
    34c2:	b004      	add	sp, #16
    34c4:	4770      	bx	lr
    34c6:	bf00      	nop
    34c8:	000075c8 	.word	0x000075c8
    34cc:	40048000 	.word	0x40048000

000034d0 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    34d0:	b084      	sub	sp, #16
    34d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    34d4:	4b0a      	ldr	r3, [pc, #40]	; (3500 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    34d6:	795b      	ldrb	r3, [r3, #5]
    34d8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    34da:	4b0a      	ldr	r3, [pc, #40]	; (3504 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    34dc:	6a1b      	ldr	r3, [r3, #32]
    34de:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    34e0:	9b02      	ldr	r3, [sp, #8]
    34e2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    34e6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    34e8:	9b03      	ldr	r3, [sp, #12]
    34ea:	061b      	lsls	r3, r3, #24
    34ec:	9a02      	ldr	r2, [sp, #8]
    34ee:	4313      	orrs	r3, r2
    34f0:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    34f2:	4a04      	ldr	r2, [pc, #16]	; (3504 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    34f4:	9b02      	ldr	r3, [sp, #8]
    34f6:	6213      	str	r3, [r2, #32]
}
    34f8:	bf00      	nop
    34fa:	b004      	add	sp, #16
    34fc:	4770      	bx	lr
    34fe:	bf00      	nop
    3500:	00007568 	.word	0x00007568
    3504:	40064000 	.word	0x40064000

00003508 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3508:	b084      	sub	sp, #16
    350a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    350c:	9b01      	ldr	r3, [sp, #4]
    350e:	685b      	ldr	r3, [r3, #4]
    3510:	4a0a      	ldr	r2, [pc, #40]	; (353c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    3512:	5cd3      	ldrb	r3, [r2, r3]
    3514:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    3516:	4b0a      	ldr	r3, [pc, #40]	; (3540 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3518:	6a1b      	ldr	r3, [r3, #32]
    351a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    351c:	9b02      	ldr	r3, [sp, #8]
    351e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3522:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3524:	9b03      	ldr	r3, [sp, #12]
    3526:	061b      	lsls	r3, r3, #24
    3528:	9a02      	ldr	r2, [sp, #8]
    352a:	4313      	orrs	r3, r2
    352c:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    352e:	4a04      	ldr	r2, [pc, #16]	; (3540 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3530:	9b02      	ldr	r3, [sp, #8]
    3532:	6213      	str	r3, [r2, #32]
}
    3534:	bf00      	nop
    3536:	b004      	add	sp, #16
    3538:	4770      	bx	lr
    353a:	bf00      	nop
    353c:	00007568 	.word	0x00007568
    3540:	40064000 	.word	0x40064000

00003544 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3544:	b086      	sub	sp, #24
    3546:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3548:	4b20      	ldr	r3, [pc, #128]	; (35cc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    354a:	795b      	ldrb	r3, [r3, #5]
    354c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    354e:	9b01      	ldr	r3, [sp, #4]
    3550:	681a      	ldr	r2, [r3, #0]
    3552:	491f      	ldr	r1, [pc, #124]	; (35d0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3554:	4613      	mov	r3, r2
    3556:	00db      	lsls	r3, r3, #3
    3558:	4413      	add	r3, r2
    355a:	440b      	add	r3, r1
    355c:	781b      	ldrb	r3, [r3, #0]
    355e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3560:	4b1c      	ldr	r3, [pc, #112]	; (35d4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3562:	68db      	ldr	r3, [r3, #12]
    3564:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3566:	9b03      	ldr	r3, [sp, #12]
    3568:	2b03      	cmp	r3, #3
    356a:	d813      	bhi.n	3594 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    356c:	9b03      	ldr	r3, [sp, #12]
    356e:	005b      	lsls	r3, r3, #1
    3570:	3318      	adds	r3, #24
    3572:	2203      	movs	r2, #3
    3574:	fa02 f303 	lsl.w	r3, r2, r3
    3578:	43db      	mvns	r3, r3
    357a:	9a05      	ldr	r2, [sp, #20]
    357c:	4013      	ands	r3, r2
    357e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3580:	9b03      	ldr	r3, [sp, #12]
    3582:	005b      	lsls	r3, r3, #1
    3584:	3318      	adds	r3, #24
    3586:	9a04      	ldr	r2, [sp, #16]
    3588:	fa02 f303 	lsl.w	r3, r2, r3
    358c:	9a05      	ldr	r2, [sp, #20]
    358e:	4313      	orrs	r3, r2
    3590:	9305      	str	r3, [sp, #20]
    3592:	e014      	b.n	35be <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3594:	9b03      	ldr	r3, [sp, #12]
    3596:	3b04      	subs	r3, #4
    3598:	005b      	lsls	r3, r3, #1
    359a:	3310      	adds	r3, #16
    359c:	2203      	movs	r2, #3
    359e:	fa02 f303 	lsl.w	r3, r2, r3
    35a2:	43db      	mvns	r3, r3
    35a4:	9a05      	ldr	r2, [sp, #20]
    35a6:	4013      	ands	r3, r2
    35a8:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    35aa:	9b03      	ldr	r3, [sp, #12]
    35ac:	3b04      	subs	r3, #4
    35ae:	005b      	lsls	r3, r3, #1
    35b0:	3310      	adds	r3, #16
    35b2:	9a04      	ldr	r2, [sp, #16]
    35b4:	fa02 f303 	lsl.w	r3, r2, r3
    35b8:	9a05      	ldr	r2, [sp, #20]
    35ba:	4313      	orrs	r3, r2
    35bc:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    35be:	4a05      	ldr	r2, [pc, #20]	; (35d4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    35c0:	9b05      	ldr	r3, [sp, #20]
    35c2:	60d3      	str	r3, [r2, #12]
}
    35c4:	bf00      	nop
    35c6:	b006      	add	sp, #24
    35c8:	4770      	bx	lr
    35ca:	bf00      	nop
    35cc:	00007510 	.word	0x00007510
    35d0:	00007200 	.word	0x00007200
    35d4:	40048000 	.word	0x40048000

000035d8 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    35d8:	b086      	sub	sp, #24
    35da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    35dc:	9b01      	ldr	r3, [sp, #4]
    35de:	685b      	ldr	r3, [r3, #4]
    35e0:	4a20      	ldr	r2, [pc, #128]	; (3664 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    35e2:	5cd3      	ldrb	r3, [r2, r3]
    35e4:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    35e6:	9b01      	ldr	r3, [sp, #4]
    35e8:	681a      	ldr	r2, [r3, #0]
    35ea:	491f      	ldr	r1, [pc, #124]	; (3668 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    35ec:	4613      	mov	r3, r2
    35ee:	00db      	lsls	r3, r3, #3
    35f0:	4413      	add	r3, r2
    35f2:	440b      	add	r3, r1
    35f4:	781b      	ldrb	r3, [r3, #0]
    35f6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    35f8:	4b1c      	ldr	r3, [pc, #112]	; (366c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    35fa:	68db      	ldr	r3, [r3, #12]
    35fc:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    35fe:	9b03      	ldr	r3, [sp, #12]
    3600:	2b03      	cmp	r3, #3
    3602:	d813      	bhi.n	362c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3604:	9b03      	ldr	r3, [sp, #12]
    3606:	005b      	lsls	r3, r3, #1
    3608:	3318      	adds	r3, #24
    360a:	2203      	movs	r2, #3
    360c:	fa02 f303 	lsl.w	r3, r2, r3
    3610:	43db      	mvns	r3, r3
    3612:	9a05      	ldr	r2, [sp, #20]
    3614:	4013      	ands	r3, r2
    3616:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3618:	9b03      	ldr	r3, [sp, #12]
    361a:	005b      	lsls	r3, r3, #1
    361c:	3318      	adds	r3, #24
    361e:	9a04      	ldr	r2, [sp, #16]
    3620:	fa02 f303 	lsl.w	r3, r2, r3
    3624:	9a05      	ldr	r2, [sp, #20]
    3626:	4313      	orrs	r3, r2
    3628:	9305      	str	r3, [sp, #20]
    362a:	e014      	b.n	3656 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    362c:	9b03      	ldr	r3, [sp, #12]
    362e:	3b04      	subs	r3, #4
    3630:	005b      	lsls	r3, r3, #1
    3632:	3310      	adds	r3, #16
    3634:	2203      	movs	r2, #3
    3636:	fa02 f303 	lsl.w	r3, r2, r3
    363a:	43db      	mvns	r3, r3
    363c:	9a05      	ldr	r2, [sp, #20]
    363e:	4013      	ands	r3, r2
    3640:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3642:	9b03      	ldr	r3, [sp, #12]
    3644:	3b04      	subs	r3, #4
    3646:	005b      	lsls	r3, r3, #1
    3648:	3310      	adds	r3, #16
    364a:	9a04      	ldr	r2, [sp, #16]
    364c:	fa02 f303 	lsl.w	r3, r2, r3
    3650:	9a05      	ldr	r2, [sp, #20]
    3652:	4313      	orrs	r3, r2
    3654:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3656:	4a05      	ldr	r2, [pc, #20]	; (366c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3658:	9b05      	ldr	r3, [sp, #20]
    365a:	60d3      	str	r3, [r2, #12]
}
    365c:	bf00      	nop
    365e:	b006      	add	sp, #24
    3660:	4770      	bx	lr
    3662:	bf00      	nop
    3664:	00007510 	.word	0x00007510
    3668:	00007200 	.word	0x00007200
    366c:	40048000 	.word	0x40048000

00003670 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3670:	b084      	sub	sp, #16
    3672:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    3674:	4b06      	ldr	r3, [pc, #24]	; (3690 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3676:	685b      	ldr	r3, [r3, #4]
    3678:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    367a:	9b03      	ldr	r3, [sp, #12]
    367c:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    3680:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3682:	4a03      	ldr	r2, [pc, #12]	; (3690 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3684:	9b03      	ldr	r3, [sp, #12]
    3686:	6053      	str	r3, [r2, #4]
}
    3688:	bf00      	nop
    368a:	b004      	add	sp, #16
    368c:	4770      	bx	lr
    368e:	bf00      	nop
    3690:	40048000 	.word	0x40048000

00003694 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3694:	b084      	sub	sp, #16
    3696:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3698:	9b01      	ldr	r3, [sp, #4]
    369a:	685b      	ldr	r3, [r3, #4]
    369c:	4a0a      	ldr	r2, [pc, #40]	; (36c8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    369e:	5cd3      	ldrb	r3, [r2, r3]
    36a0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    36a2:	4b0a      	ldr	r3, [pc, #40]	; (36cc <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    36a4:	685b      	ldr	r3, [r3, #4]
    36a6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    36a8:	9b02      	ldr	r3, [sp, #8]
    36aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    36ae:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    36b0:	9b03      	ldr	r3, [sp, #12]
    36b2:	011b      	lsls	r3, r3, #4
    36b4:	9a02      	ldr	r2, [sp, #8]
    36b6:	4313      	orrs	r3, r2
    36b8:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    36ba:	4a04      	ldr	r2, [pc, #16]	; (36cc <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    36bc:	9b02      	ldr	r3, [sp, #8]
    36be:	6053      	str	r3, [r2, #4]
}
    36c0:	bf00      	nop
    36c2:	b004      	add	sp, #16
    36c4:	4770      	bx	lr
    36c6:	bf00      	nop
    36c8:	00007510 	.word	0x00007510
    36cc:	40048000 	.word	0x40048000

000036d0 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    36d0:	b084      	sub	sp, #16
    36d2:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    36d4:	9b01      	ldr	r3, [sp, #4]
    36d6:	681a      	ldr	r2, [r3, #0]
    36d8:	490f      	ldr	r1, [pc, #60]	; (3718 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    36da:	4613      	mov	r3, r2
    36dc:	00db      	lsls	r3, r3, #3
    36de:	4413      	add	r3, r2
    36e0:	440b      	add	r3, r1
    36e2:	3304      	adds	r3, #4
    36e4:	781b      	ldrb	r3, [r3, #0]
    36e6:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    36e8:	4a0c      	ldr	r2, [pc, #48]	; (371c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    36ea:	9b03      	ldr	r3, [sp, #12]
    36ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    36f0:	490a      	ldr	r1, [pc, #40]	; (371c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    36f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    36f6:	9b03      	ldr	r3, [sp, #12]
    36f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    36fc:	4a07      	ldr	r2, [pc, #28]	; (371c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    36fe:	9b03      	ldr	r3, [sp, #12]
    3700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3704:	4905      	ldr	r1, [pc, #20]	; (371c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3706:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    370a:	9b03      	ldr	r3, [sp, #12]
    370c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3710:	bf00      	nop
    3712:	b004      	add	sp, #16
    3714:	4770      	bx	lr
    3716:	bf00      	nop
    3718:	00007200 	.word	0x00007200
    371c:	40065000 	.word	0x40065000

00003720 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3720:	b086      	sub	sp, #24
    3722:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3724:	9b01      	ldr	r3, [sp, #4]
    3726:	681a      	ldr	r2, [r3, #0]
    3728:	4912      	ldr	r1, [pc, #72]	; (3774 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    372a:	4613      	mov	r3, r2
    372c:	00db      	lsls	r3, r3, #3
    372e:	4413      	add	r3, r2
    3730:	440b      	add	r3, r1
    3732:	3304      	adds	r3, #4
    3734:	781b      	ldrb	r3, [r3, #0]
    3736:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3738:	9b01      	ldr	r3, [sp, #4]
    373a:	685b      	ldr	r3, [r3, #4]
    373c:	4a0e      	ldr	r2, [pc, #56]	; (3778 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    373e:	5cd3      	ldrb	r3, [r2, r3]
    3740:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    3742:	4a0e      	ldr	r2, [pc, #56]	; (377c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3744:	9b05      	ldr	r3, [sp, #20]
    3746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    374a:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    374c:	9b03      	ldr	r3, [sp, #12]
    374e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    3752:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    3754:	9b04      	ldr	r3, [sp, #16]
    3756:	061b      	lsls	r3, r3, #24
    3758:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    375c:	9a03      	ldr	r2, [sp, #12]
    375e:	4313      	orrs	r3, r2
    3760:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    3762:	4906      	ldr	r1, [pc, #24]	; (377c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3764:	9b05      	ldr	r3, [sp, #20]
    3766:	9a03      	ldr	r2, [sp, #12]
    3768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    376c:	bf00      	nop
    376e:	b006      	add	sp, #24
    3770:	4770      	bx	lr
    3772:	bf00      	nop
    3774:	00007200 	.word	0x00007200
    3778:	00007598 	.word	0x00007598
    377c:	40065000 	.word	0x40065000

00003780 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3780:	b084      	sub	sp, #16
    3782:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3784:	4b0b      	ldr	r3, [pc, #44]	; (37b4 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    3786:	7f1b      	ldrb	r3, [r3, #28]
    3788:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    378a:	4b0b      	ldr	r3, [pc, #44]	; (37b8 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    378c:	685b      	ldr	r3, [r3, #4]
    378e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3790:	9b02      	ldr	r3, [sp, #8]
    3792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3796:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3798:	9b03      	ldr	r3, [sp, #12]
    379a:	031b      	lsls	r3, r3, #12
    379c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    37a0:	9a02      	ldr	r2, [sp, #8]
    37a2:	4313      	orrs	r3, r2
    37a4:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    37a6:	4a04      	ldr	r2, [pc, #16]	; (37b8 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    37a8:	9b02      	ldr	r3, [sp, #8]
    37aa:	6053      	str	r3, [r2, #4]
}
    37ac:	bf00      	nop
    37ae:	b004      	add	sp, #16
    37b0:	4770      	bx	lr
    37b2:	bf00      	nop
    37b4:	00007510 	.word	0x00007510
    37b8:	40048000 	.word	0x40048000

000037bc <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    37bc:	b084      	sub	sp, #16
    37be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    37c0:	9b01      	ldr	r3, [sp, #4]
    37c2:	685b      	ldr	r3, [r3, #4]
    37c4:	4a0b      	ldr	r2, [pc, #44]	; (37f4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    37c6:	5cd3      	ldrb	r3, [r2, r3]
    37c8:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    37ca:	4b0b      	ldr	r3, [pc, #44]	; (37f8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    37cc:	685b      	ldr	r3, [r3, #4]
    37ce:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    37d0:	9b02      	ldr	r3, [sp, #8]
    37d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    37d6:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    37d8:	9b03      	ldr	r3, [sp, #12]
    37da:	031b      	lsls	r3, r3, #12
    37dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    37e0:	9a02      	ldr	r2, [sp, #8]
    37e2:	4313      	orrs	r3, r2
    37e4:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    37e6:	4a04      	ldr	r2, [pc, #16]	; (37f8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    37e8:	9b02      	ldr	r3, [sp, #8]
    37ea:	6053      	str	r3, [r2, #4]
}
    37ec:	bf00      	nop
    37ee:	b004      	add	sp, #16
    37f0:	4770      	bx	lr
    37f2:	bf00      	nop
    37f4:	00007510 	.word	0x00007510
    37f8:	40048000 	.word	0x40048000

000037fc <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    37fc:	b500      	push	{lr}
    37fe:	b085      	sub	sp, #20
    3800:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    3802:	2300      	movs	r3, #0
    3804:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    3808:	9b01      	ldr	r3, [sp, #4]
    380a:	2b00      	cmp	r3, #0
    380c:	d037      	beq.n	387e <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    380e:	2300      	movs	r3, #0
    3810:	9303      	str	r3, [sp, #12]
    3812:	e02b      	b.n	386c <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3814:	4b29      	ldr	r3, [pc, #164]	; (38bc <DisableSafeClock+0xc0>)
    3816:	6819      	ldr	r1, [r3, #0]
    3818:	9a03      	ldr	r2, [sp, #12]
    381a:	4613      	mov	r3, r2
    381c:	005b      	lsls	r3, r3, #1
    381e:	4413      	add	r3, r2
    3820:	009b      	lsls	r3, r3, #2
    3822:	440b      	add	r3, r1
    3824:	3314      	adds	r3, #20
    3826:	681b      	ldr	r3, [r3, #0]
    3828:	2b05      	cmp	r3, #5
    382a:	d11c      	bne.n	3866 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    382c:	2301      	movs	r3, #1
    382e:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    3832:	4b22      	ldr	r3, [pc, #136]	; (38bc <DisableSafeClock+0xc0>)
    3834:	6819      	ldr	r1, [r3, #0]
    3836:	9a03      	ldr	r2, [sp, #12]
    3838:	4613      	mov	r3, r2
    383a:	005b      	lsls	r3, r3, #1
    383c:	4413      	add	r3, r2
    383e:	009b      	lsls	r3, r3, #2
    3840:	440b      	add	r3, r1
    3842:	3318      	adds	r3, #24
    3844:	881b      	ldrh	r3, [r3, #0]
    3846:	2b00      	cmp	r3, #0
    3848:	d118      	bne.n	387c <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    384a:	4b1d      	ldr	r3, [pc, #116]	; (38c0 <DisableSafeClock+0xc4>)
    384c:	791b      	ldrb	r3, [r3, #4]
    384e:	4619      	mov	r1, r3
    3850:	4a1c      	ldr	r2, [pc, #112]	; (38c4 <DisableSafeClock+0xc8>)
    3852:	460b      	mov	r3, r1
    3854:	005b      	lsls	r3, r3, #1
    3856:	440b      	add	r3, r1
    3858:	009b      	lsls	r3, r3, #2
    385a:	4413      	add	r3, r2
    385c:	3308      	adds	r3, #8
    385e:	681b      	ldr	r3, [r3, #0]
    3860:	2005      	movs	r0, #5
    3862:	4798      	blx	r3
                }
                break;
    3864:	e00a      	b.n	387c <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3866:	9b03      	ldr	r3, [sp, #12]
    3868:	3301      	adds	r3, #1
    386a:	9303      	str	r3, [sp, #12]
    386c:	4b13      	ldr	r3, [pc, #76]	; (38bc <DisableSafeClock+0xc0>)
    386e:	681b      	ldr	r3, [r3, #0]
    3870:	7a1b      	ldrb	r3, [r3, #8]
    3872:	461a      	mov	r2, r3
    3874:	9b03      	ldr	r3, [sp, #12]
    3876:	4293      	cmp	r3, r2
    3878:	d3cc      	bcc.n	3814 <DisableSafeClock+0x18>
    387a:	e000      	b.n	387e <DisableSafeClock+0x82>
                break;
    387c:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    387e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3882:	f083 0301 	eor.w	r3, r3, #1
    3886:	b2db      	uxtb	r3, r3
    3888:	2b00      	cmp	r3, #0
    388a:	d013      	beq.n	38b4 <DisableSafeClock+0xb8>
    388c:	4b0e      	ldr	r3, [pc, #56]	; (38c8 <DisableSafeClock+0xcc>)
    388e:	781b      	ldrb	r3, [r3, #0]
    3890:	f083 0301 	eor.w	r3, r3, #1
    3894:	b2db      	uxtb	r3, r3
    3896:	2b00      	cmp	r3, #0
    3898:	d00c      	beq.n	38b4 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    389a:	4b09      	ldr	r3, [pc, #36]	; (38c0 <DisableSafeClock+0xc4>)
    389c:	791b      	ldrb	r3, [r3, #4]
    389e:	4619      	mov	r1, r3
    38a0:	4a08      	ldr	r2, [pc, #32]	; (38c4 <DisableSafeClock+0xc8>)
    38a2:	460b      	mov	r3, r1
    38a4:	005b      	lsls	r3, r3, #1
    38a6:	440b      	add	r3, r1
    38a8:	009b      	lsls	r3, r3, #2
    38aa:	4413      	add	r3, r2
    38ac:	3308      	adds	r3, #8
    38ae:	681b      	ldr	r3, [r3, #0]
    38b0:	2005      	movs	r0, #5
    38b2:	4798      	blx	r3
    }
}
    38b4:	bf00      	nop
    38b6:	b005      	add	sp, #20
    38b8:	f85d fb04 	ldr.w	pc, [sp], #4
    38bc:	1fff8ba8 	.word	0x1fff8ba8
    38c0:	00007190 	.word	0x00007190
    38c4:	000077c0 	.word	0x000077c0
    38c8:	1fff8b18 	.word	0x1fff8b18

000038cc <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    38cc:	4b06      	ldr	r3, [pc, #24]	; (38e8 <SetFircToResetValue_TrustedCall+0x1c>)
    38ce:	2200      	movs	r2, #0
    38d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    38d4:	4b04      	ldr	r3, [pc, #16]	; (38e8 <SetFircToResetValue_TrustedCall+0x1c>)
    38d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    38da:	4a03      	ldr	r2, [pc, #12]	; (38e8 <SetFircToResetValue_TrustedCall+0x1c>)
    38dc:	f043 0301 	orr.w	r3, r3, #1
    38e0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    38e4:	bf00      	nop
    38e6:	4770      	bx	lr
    38e8:	40064000 	.word	0x40064000

000038ec <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    38ec:	b084      	sub	sp, #16
    38ee:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    38f0:	2303      	movs	r3, #3
    38f2:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    38f4:	2300      	movs	r3, #0
    38f6:	9302      	str	r3, [sp, #8]
    38f8:	e028      	b.n	394c <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    38fa:	9b01      	ldr	r3, [sp, #4]
    38fc:	9a02      	ldr	r2, [sp, #8]
    38fe:	320d      	adds	r2, #13
    3900:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3904:	2b28      	cmp	r3, #40	; 0x28
    3906:	d10b      	bne.n	3920 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3908:	9a01      	ldr	r2, [sp, #4]
    390a:	9b02      	ldr	r3, [sp, #8]
    390c:	330d      	adds	r3, #13
    390e:	00db      	lsls	r3, r3, #3
    3910:	4413      	add	r3, r2
    3912:	685b      	ldr	r3, [r3, #4]
    3914:	4a2b      	ldr	r2, [pc, #172]	; (39c4 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    3916:	5cd3      	ldrb	r3, [r2, r3]
    3918:	011b      	lsls	r3, r3, #4
    391a:	9a03      	ldr	r2, [sp, #12]
    391c:	4313      	orrs	r3, r2
    391e:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    3920:	9b01      	ldr	r3, [sp, #4]
    3922:	9a02      	ldr	r2, [sp, #8]
    3924:	320d      	adds	r2, #13
    3926:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    392a:	2b29      	cmp	r3, #41	; 0x29
    392c:	d10b      	bne.n	3946 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    392e:	9a01      	ldr	r2, [sp, #4]
    3930:	9b02      	ldr	r3, [sp, #8]
    3932:	330d      	adds	r3, #13
    3934:	00db      	lsls	r3, r3, #3
    3936:	4413      	add	r3, r2
    3938:	685b      	ldr	r3, [r3, #4]
    393a:	4a23      	ldr	r2, [pc, #140]	; (39c8 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    393c:	5cd3      	ldrb	r3, [r2, r3]
    393e:	009b      	lsls	r3, r3, #2
    3940:	9a03      	ldr	r2, [sp, #12]
    3942:	4313      	orrs	r3, r2
    3944:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3946:	9b02      	ldr	r3, [sp, #8]
    3948:	3301      	adds	r3, #1
    394a:	9302      	str	r3, [sp, #8]
    394c:	9b01      	ldr	r3, [sp, #4]
    394e:	7adb      	ldrb	r3, [r3, #11]
    3950:	461a      	mov	r2, r3
    3952:	9b02      	ldr	r3, [sp, #8]
    3954:	4293      	cmp	r3, r2
    3956:	d3d0      	bcc.n	38fa <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3958:	2300      	movs	r3, #0
    395a:	9302      	str	r3, [sp, #8]
    395c:	e026      	b.n	39ac <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    395e:	9a01      	ldr	r2, [sp, #4]
    3960:	9b02      	ldr	r3, [sp, #8]
    3962:	334e      	adds	r3, #78	; 0x4e
    3964:	00db      	lsls	r3, r3, #3
    3966:	4413      	add	r3, r2
    3968:	685b      	ldr	r3, [r3, #4]
    396a:	2b12      	cmp	r3, #18
    396c:	d109      	bne.n	3982 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    396e:	9a01      	ldr	r2, [sp, #4]
    3970:	9b02      	ldr	r3, [sp, #8]
    3972:	334e      	adds	r3, #78	; 0x4e
    3974:	00db      	lsls	r3, r3, #3
    3976:	4413      	add	r3, r2
    3978:	891b      	ldrh	r3, [r3, #8]
    397a:	005b      	lsls	r3, r3, #1
    397c:	9a03      	ldr	r2, [sp, #12]
    397e:	4313      	orrs	r3, r2
    3980:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    3982:	9a01      	ldr	r2, [sp, #4]
    3984:	9b02      	ldr	r3, [sp, #8]
    3986:	334e      	adds	r3, #78	; 0x4e
    3988:	00db      	lsls	r3, r3, #3
    398a:	4413      	add	r3, r2
    398c:	685b      	ldr	r3, [r3, #4]
    398e:	2b13      	cmp	r3, #19
    3990:	d109      	bne.n	39a6 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3992:	9a01      	ldr	r2, [sp, #4]
    3994:	9b02      	ldr	r3, [sp, #8]
    3996:	334e      	adds	r3, #78	; 0x4e
    3998:	00db      	lsls	r3, r3, #3
    399a:	4413      	add	r3, r2
    399c:	891b      	ldrh	r3, [r3, #8]
    399e:	461a      	mov	r2, r3
    39a0:	9b03      	ldr	r3, [sp, #12]
    39a2:	4313      	orrs	r3, r2
    39a4:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    39a6:	9b02      	ldr	r3, [sp, #8]
    39a8:	3301      	adds	r3, #1
    39aa:	9302      	str	r3, [sp, #8]
    39ac:	9b01      	ldr	r3, [sp, #4]
    39ae:	7c1b      	ldrb	r3, [r3, #16]
    39b0:	461a      	mov	r2, r3
    39b2:	9b02      	ldr	r3, [sp, #8]
    39b4:	4293      	cmp	r3, r2
    39b6:	d3d2      	bcc.n	395e <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    39b8:	4a04      	ldr	r2, [pc, #16]	; (39cc <SetSimLpoclksRegister_TrustedCall+0xe0>)
    39ba:	9b03      	ldr	r3, [sp, #12]
    39bc:	6113      	str	r3, [r2, #16]
}
    39be:	bf00      	nop
    39c0:	b004      	add	sp, #16
    39c2:	4770      	bx	lr
    39c4:	00007510 	.word	0x00007510
    39c8:	000075c8 	.word	0x000075c8
    39cc:	40048000 	.word	0x40048000

000039d0 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    39d0:	b500      	push	{lr}
    39d2:	b089      	sub	sp, #36	; 0x24
    39d4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    39d6:	2300      	movs	r3, #0
    39d8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    39dc:	4a21      	ldr	r2, [pc, #132]	; (3a64 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    39de:	9b01      	ldr	r3, [sp, #4]
    39e0:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    39e2:	4b21      	ldr	r3, [pc, #132]	; (3a68 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    39e4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    39e8:	f003 0301 	and.w	r3, r3, #1
    39ec:	2b00      	cmp	r3, #0
    39ee:	d12e      	bne.n	3a4e <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    39f0:	4b1e      	ldr	r3, [pc, #120]	; (3a6c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    39f2:	2200      	movs	r2, #0
    39f4:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    39f6:	f7ff ff69 	bl	38cc <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    39fa:	aa03      	add	r2, sp, #12
    39fc:	a904      	add	r1, sp, #16
    39fe:	a805      	add	r0, sp, #20
    3a00:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a04:	f7fe f8ae 	bl	1b64 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3a08:	4b17      	ldr	r3, [pc, #92]	; (3a68 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3a0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3a0e:	0e1b      	lsrs	r3, r3, #24
    3a10:	f003 0301 	and.w	r3, r3, #1
    3a14:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3a16:	9a03      	ldr	r2, [sp, #12]
    3a18:	a904      	add	r1, sp, #16
    3a1a:	ab05      	add	r3, sp, #20
    3a1c:	4618      	mov	r0, r3
    3a1e:	f7fe f8bb 	bl	1b98 <Clock_Ip_TimeoutExpired>
    3a22:	4603      	mov	r3, r0
    3a24:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    3a28:	9b06      	ldr	r3, [sp, #24]
    3a2a:	2b00      	cmp	r3, #0
    3a2c:	d106      	bne.n	3a3c <Clock_Ip_SpecificPlatformInitClock+0x6c>
    3a2e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a32:	f083 0301 	eor.w	r3, r3, #1
    3a36:	b2db      	uxtb	r3, r3
    3a38:	2b00      	cmp	r3, #0
    3a3a:	d1e5      	bne.n	3a08 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    3a3c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a40:	2b00      	cmp	r3, #0
    3a42:	d007      	beq.n	3a54 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3a44:	2105      	movs	r1, #5
    3a46:	2001      	movs	r0, #1
    3a48:	f7fe f87c 	bl	1b44 <Clock_Ip_ReportClockErrors>
    3a4c:	e002      	b.n	3a54 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    3a4e:	4b07      	ldr	r3, [pc, #28]	; (3a6c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3a50:	2201      	movs	r2, #1
    3a52:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    3a54:	9801      	ldr	r0, [sp, #4]
    3a56:	f7ff ff49 	bl	38ec <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    3a5a:	bf00      	nop
    3a5c:	b009      	add	sp, #36	; 0x24
    3a5e:	f85d fb04 	ldr.w	pc, [sp], #4
    3a62:	bf00      	nop
    3a64:	1fff8ba8 	.word	0x1fff8ba8
    3a68:	40064000 	.word	0x40064000
    3a6c:	1fff8b18 	.word	0x1fff8b18

00003a70 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    3a70:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    3a72:	2300      	movs	r3, #0
    3a74:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3a76:	4b29      	ldr	r3, [pc, #164]	; (3b1c <getFircConfig+0xac>)
    3a78:	681b      	ldr	r3, [r3, #0]
    3a7a:	2b00      	cmp	r3, #0
    3a7c:	d024      	beq.n	3ac8 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3a7e:	2300      	movs	r3, #0
    3a80:	9301      	str	r3, [sp, #4]
    3a82:	e01a      	b.n	3aba <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3a84:	4b25      	ldr	r3, [pc, #148]	; (3b1c <getFircConfig+0xac>)
    3a86:	6819      	ldr	r1, [r3, #0]
    3a88:	9a01      	ldr	r2, [sp, #4]
    3a8a:	4613      	mov	r3, r2
    3a8c:	005b      	lsls	r3, r3, #1
    3a8e:	4413      	add	r3, r2
    3a90:	009b      	lsls	r3, r3, #2
    3a92:	440b      	add	r3, r1
    3a94:	3314      	adds	r3, #20
    3a96:	681b      	ldr	r3, [r3, #0]
    3a98:	2b05      	cmp	r3, #5
    3a9a:	d10b      	bne.n	3ab4 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    3a9c:	4b1f      	ldr	r3, [pc, #124]	; (3b1c <getFircConfig+0xac>)
    3a9e:	6819      	ldr	r1, [r3, #0]
    3aa0:	9a01      	ldr	r2, [sp, #4]
    3aa2:	4613      	mov	r3, r2
    3aa4:	005b      	lsls	r3, r3, #1
    3aa6:	4413      	add	r3, r2
    3aa8:	009b      	lsls	r3, r3, #2
    3aaa:	3310      	adds	r3, #16
    3aac:	440b      	add	r3, r1
    3aae:	3304      	adds	r3, #4
    3ab0:	9300      	str	r3, [sp, #0]
                break;
    3ab2:	e009      	b.n	3ac8 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3ab4:	9b01      	ldr	r3, [sp, #4]
    3ab6:	3301      	adds	r3, #1
    3ab8:	9301      	str	r3, [sp, #4]
    3aba:	4b18      	ldr	r3, [pc, #96]	; (3b1c <getFircConfig+0xac>)
    3abc:	681b      	ldr	r3, [r3, #0]
    3abe:	7a1b      	ldrb	r3, [r3, #8]
    3ac0:	461a      	mov	r2, r3
    3ac2:	9b01      	ldr	r3, [sp, #4]
    3ac4:	4293      	cmp	r3, r2
    3ac6:	d3dd      	bcc.n	3a84 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3ac8:	9b00      	ldr	r3, [sp, #0]
    3aca:	2b00      	cmp	r3, #0
    3acc:	d121      	bne.n	3b12 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    3ace:	4b14      	ldr	r3, [pc, #80]	; (3b20 <getFircConfig+0xb0>)
    3ad0:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    3ad2:	4b13      	ldr	r3, [pc, #76]	; (3b20 <getFircConfig+0xb0>)
    3ad4:	2205      	movs	r2, #5
    3ad6:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    3ad8:	4b12      	ldr	r3, [pc, #72]	; (3b24 <getFircConfig+0xb4>)
    3ada:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ade:	b29b      	uxth	r3, r3
    3ae0:	f003 0301 	and.w	r3, r3, #1
    3ae4:	b29a      	uxth	r2, r3
    3ae6:	4b0e      	ldr	r3, [pc, #56]	; (3b20 <getFircConfig+0xb0>)
    3ae8:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    3aea:	4b0e      	ldr	r3, [pc, #56]	; (3b24 <getFircConfig+0xb4>)
    3aec:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3af0:	b2db      	uxtb	r3, r3
    3af2:	f003 0303 	and.w	r3, r3, #3
    3af6:	b2da      	uxtb	r2, r3
    3af8:	4b09      	ldr	r3, [pc, #36]	; (3b20 <getFircConfig+0xb0>)
    3afa:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    3afc:	4b09      	ldr	r3, [pc, #36]	; (3b24 <getFircConfig+0xb4>)
    3afe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b02:	b2db      	uxtb	r3, r3
    3b04:	10db      	asrs	r3, r3, #3
    3b06:	b2db      	uxtb	r3, r3
    3b08:	f003 0301 	and.w	r3, r3, #1
    3b0c:	b2da      	uxtb	r2, r3
    3b0e:	4b04      	ldr	r3, [pc, #16]	; (3b20 <getFircConfig+0xb0>)
    3b10:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    3b12:	9b00      	ldr	r3, [sp, #0]
}
    3b14:	4618      	mov	r0, r3
    3b16:	b002      	add	sp, #8
    3b18:	4770      	bx	lr
    3b1a:	bf00      	nop
    3b1c:	1fff8ba8 	.word	0x1fff8ba8
    3b20:	1fff8c14 	.word	0x1fff8c14
    3b24:	40064000 	.word	0x40064000

00003b28 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    3b28:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    3b2a:	2300      	movs	r3, #0
    3b2c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3b2e:	4b20      	ldr	r3, [pc, #128]	; (3bb0 <getSoscConfig+0x88>)
    3b30:	681b      	ldr	r3, [r3, #0]
    3b32:	2b00      	cmp	r3, #0
    3b34:	d024      	beq.n	3b80 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    3b36:	2300      	movs	r3, #0
    3b38:	9301      	str	r3, [sp, #4]
    3b3a:	e01a      	b.n	3b72 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    3b3c:	4b1c      	ldr	r3, [pc, #112]	; (3bb0 <getSoscConfig+0x88>)
    3b3e:	6819      	ldr	r1, [r3, #0]
    3b40:	9a01      	ldr	r2, [sp, #4]
    3b42:	4613      	mov	r3, r2
    3b44:	009b      	lsls	r3, r3, #2
    3b46:	4413      	add	r3, r2
    3b48:	009b      	lsls	r3, r3, #2
    3b4a:	440b      	add	r3, r1
    3b4c:	332c      	adds	r3, #44	; 0x2c
    3b4e:	681b      	ldr	r3, [r3, #0]
    3b50:	2b08      	cmp	r3, #8
    3b52:	d10b      	bne.n	3b6c <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    3b54:	4b16      	ldr	r3, [pc, #88]	; (3bb0 <getSoscConfig+0x88>)
    3b56:	6819      	ldr	r1, [r3, #0]
    3b58:	9a01      	ldr	r2, [sp, #4]
    3b5a:	4613      	mov	r3, r2
    3b5c:	009b      	lsls	r3, r3, #2
    3b5e:	4413      	add	r3, r2
    3b60:	009b      	lsls	r3, r3, #2
    3b62:	3328      	adds	r3, #40	; 0x28
    3b64:	440b      	add	r3, r1
    3b66:	3304      	adds	r3, #4
    3b68:	9300      	str	r3, [sp, #0]
                break;
    3b6a:	e009      	b.n	3b80 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    3b6c:	9b01      	ldr	r3, [sp, #4]
    3b6e:	3301      	adds	r3, #1
    3b70:	9301      	str	r3, [sp, #4]
    3b72:	4b0f      	ldr	r3, [pc, #60]	; (3bb0 <getSoscConfig+0x88>)
    3b74:	681b      	ldr	r3, [r3, #0]
    3b76:	7a5b      	ldrb	r3, [r3, #9]
    3b78:	461a      	mov	r2, r3
    3b7a:	9b01      	ldr	r3, [sp, #4]
    3b7c:	4293      	cmp	r3, r2
    3b7e:	d3dd      	bcc.n	3b3c <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3b80:	9b00      	ldr	r3, [sp, #0]
    3b82:	2b00      	cmp	r3, #0
    3b84:	d110      	bne.n	3ba8 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    3b86:	4b0b      	ldr	r3, [pc, #44]	; (3bb4 <getSoscConfig+0x8c>)
    3b88:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    3b8a:	4b0a      	ldr	r3, [pc, #40]	; (3bb4 <getSoscConfig+0x8c>)
    3b8c:	2208      	movs	r2, #8
    3b8e:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    3b90:	4b09      	ldr	r3, [pc, #36]	; (3bb8 <getSoscConfig+0x90>)
    3b92:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3b96:	b29b      	uxth	r3, r3
    3b98:	f003 0301 	and.w	r3, r3, #1
    3b9c:	b29a      	uxth	r2, r3
    3b9e:	4b05      	ldr	r3, [pc, #20]	; (3bb4 <getSoscConfig+0x8c>)
    3ba0:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    3ba2:	4b04      	ldr	r3, [pc, #16]	; (3bb4 <getSoscConfig+0x8c>)
    3ba4:	4a05      	ldr	r2, [pc, #20]	; (3bbc <getSoscConfig+0x94>)
    3ba6:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    3ba8:	9b00      	ldr	r3, [sp, #0]
}
    3baa:	4618      	mov	r0, r3
    3bac:	b002      	add	sp, #8
    3bae:	4770      	bx	lr
    3bb0:	1fff8ba8 	.word	0x1fff8ba8
    3bb4:	1fff8c20 	.word	0x1fff8c20
    3bb8:	40064000 	.word	0x40064000
    3bbc:	02625a00 	.word	0x02625a00

00003bc0 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    3bc0:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    3bc2:	2300      	movs	r3, #0
    3bc4:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3bc6:	4b28      	ldr	r3, [pc, #160]	; (3c68 <getSpllConfig+0xa8>)
    3bc8:	681b      	ldr	r3, [r3, #0]
    3bca:	2b00      	cmp	r3, #0
    3bcc:	d023      	beq.n	3c16 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    3bce:	2300      	movs	r3, #0
    3bd0:	9301      	str	r3, [sp, #4]
    3bd2:	e019      	b.n	3c08 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    3bd4:	4b24      	ldr	r3, [pc, #144]	; (3c68 <getSpllConfig+0xa8>)
    3bd6:	6819      	ldr	r1, [r3, #0]
    3bd8:	9a01      	ldr	r2, [sp, #4]
    3bda:	4613      	mov	r3, r2
    3bdc:	009b      	lsls	r3, r3, #2
    3bde:	4413      	add	r3, r2
    3be0:	00db      	lsls	r3, r3, #3
    3be2:	440b      	add	r3, r1
    3be4:	3340      	adds	r3, #64	; 0x40
    3be6:	681b      	ldr	r3, [r3, #0]
    3be8:	2b09      	cmp	r3, #9
    3bea:	d10a      	bne.n	3c02 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    3bec:	4b1e      	ldr	r3, [pc, #120]	; (3c68 <getSpllConfig+0xa8>)
    3bee:	6819      	ldr	r1, [r3, #0]
    3bf0:	9a01      	ldr	r2, [sp, #4]
    3bf2:	4613      	mov	r3, r2
    3bf4:	009b      	lsls	r3, r3, #2
    3bf6:	4413      	add	r3, r2
    3bf8:	00db      	lsls	r3, r3, #3
    3bfa:	3340      	adds	r3, #64	; 0x40
    3bfc:	440b      	add	r3, r1
    3bfe:	9300      	str	r3, [sp, #0]
                break;
    3c00:	e009      	b.n	3c16 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    3c02:	9b01      	ldr	r3, [sp, #4]
    3c04:	3301      	adds	r3, #1
    3c06:	9301      	str	r3, [sp, #4]
    3c08:	4b17      	ldr	r3, [pc, #92]	; (3c68 <getSpllConfig+0xa8>)
    3c0a:	681b      	ldr	r3, [r3, #0]
    3c0c:	7a9b      	ldrb	r3, [r3, #10]
    3c0e:	461a      	mov	r2, r3
    3c10:	9b01      	ldr	r3, [sp, #4]
    3c12:	4293      	cmp	r3, r2
    3c14:	d3de      	bcc.n	3bd4 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3c16:	9b00      	ldr	r3, [sp, #0]
    3c18:	2b00      	cmp	r3, #0
    3c1a:	d121      	bne.n	3c60 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    3c1c:	4b13      	ldr	r3, [pc, #76]	; (3c6c <getSpllConfig+0xac>)
    3c1e:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    3c20:	4b12      	ldr	r3, [pc, #72]	; (3c6c <getSpllConfig+0xac>)
    3c22:	2209      	movs	r2, #9
    3c24:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    3c26:	4b12      	ldr	r3, [pc, #72]	; (3c70 <getSpllConfig+0xb0>)
    3c28:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3c2c:	b29b      	uxth	r3, r3
    3c2e:	f003 0301 	and.w	r3, r3, #1
    3c32:	b29a      	uxth	r2, r3
    3c34:	4b0d      	ldr	r3, [pc, #52]	; (3c6c <getSpllConfig+0xac>)
    3c36:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    3c38:	4b0d      	ldr	r3, [pc, #52]	; (3c70 <getSpllConfig+0xb0>)
    3c3a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3c3e:	0a1b      	lsrs	r3, r3, #8
    3c40:	b2db      	uxtb	r3, r3
    3c42:	f003 0307 	and.w	r3, r3, #7
    3c46:	b2da      	uxtb	r2, r3
    3c48:	4b08      	ldr	r3, [pc, #32]	; (3c6c <getSpllConfig+0xac>)
    3c4a:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    3c4c:	4b08      	ldr	r3, [pc, #32]	; (3c70 <getSpllConfig+0xb0>)
    3c4e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3c52:	0c1b      	lsrs	r3, r3, #16
    3c54:	b2db      	uxtb	r3, r3
    3c56:	f003 031f 	and.w	r3, r3, #31
    3c5a:	b2da      	uxtb	r2, r3
    3c5c:	4b03      	ldr	r3, [pc, #12]	; (3c6c <getSpllConfig+0xac>)
    3c5e:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    3c60:	9b00      	ldr	r3, [sp, #0]
}
    3c62:	4618      	mov	r0, r3
    3c64:	b002      	add	sp, #8
    3c66:	4770      	bx	lr
    3c68:	1fff8ba8 	.word	0x1fff8ba8
    3c6c:	1fff8c34 	.word	0x1fff8c34
    3c70:	40064000 	.word	0x40064000

00003c74 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    3c74:	b086      	sub	sp, #24
    3c76:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    3c78:	2300      	movs	r3, #0
    3c7a:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    3c7c:	9b01      	ldr	r3, [sp, #4]
    3c7e:	2b1b      	cmp	r3, #27
    3c80:	d00f      	beq.n	3ca2 <getSelectorConfig+0x2e>
    3c82:	9b01      	ldr	r3, [sp, #4]
    3c84:	2b1b      	cmp	r3, #27
    3c86:	d80f      	bhi.n	3ca8 <getSelectorConfig+0x34>
    3c88:	9b01      	ldr	r3, [sp, #4]
    3c8a:	2b19      	cmp	r3, #25
    3c8c:	d003      	beq.n	3c96 <getSelectorConfig+0x22>
    3c8e:	9b01      	ldr	r3, [sp, #4]
    3c90:	2b1a      	cmp	r3, #26
    3c92:	d003      	beq.n	3c9c <getSelectorConfig+0x28>
    3c94:	e008      	b.n	3ca8 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    3c96:	2300      	movs	r3, #0
    3c98:	9304      	str	r3, [sp, #16]
            break;
    3c9a:	e008      	b.n	3cae <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    3c9c:	2301      	movs	r3, #1
    3c9e:	9304      	str	r3, [sp, #16]
            break;
    3ca0:	e005      	b.n	3cae <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    3ca2:	2302      	movs	r3, #2
    3ca4:	9304      	str	r3, [sp, #16]
            break;
    3ca6:	e002      	b.n	3cae <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    3ca8:	2300      	movs	r3, #0
    3caa:	9304      	str	r3, [sp, #16]
            break;
    3cac:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    3cae:	4b36      	ldr	r3, [pc, #216]	; (3d88 <getSelectorConfig+0x114>)
    3cb0:	681b      	ldr	r3, [r3, #0]
    3cb2:	2b00      	cmp	r3, #0
    3cb4:	d01d      	beq.n	3cf2 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    3cb6:	2300      	movs	r3, #0
    3cb8:	9303      	str	r3, [sp, #12]
    3cba:	e013      	b.n	3ce4 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    3cbc:	4b32      	ldr	r3, [pc, #200]	; (3d88 <getSelectorConfig+0x114>)
    3cbe:	681b      	ldr	r3, [r3, #0]
    3cc0:	9a03      	ldr	r2, [sp, #12]
    3cc2:	320d      	adds	r2, #13
    3cc4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3cc8:	9a01      	ldr	r2, [sp, #4]
    3cca:	429a      	cmp	r2, r3
    3ccc:	d107      	bne.n	3cde <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    3cce:	4b2e      	ldr	r3, [pc, #184]	; (3d88 <getSelectorConfig+0x114>)
    3cd0:	681a      	ldr	r2, [r3, #0]
    3cd2:	9b03      	ldr	r3, [sp, #12]
    3cd4:	330d      	adds	r3, #13
    3cd6:	00db      	lsls	r3, r3, #3
    3cd8:	4413      	add	r3, r2
    3cda:	9305      	str	r3, [sp, #20]
                break;
    3cdc:	e009      	b.n	3cf2 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    3cde:	9b03      	ldr	r3, [sp, #12]
    3ce0:	3301      	adds	r3, #1
    3ce2:	9303      	str	r3, [sp, #12]
    3ce4:	4b28      	ldr	r3, [pc, #160]	; (3d88 <getSelectorConfig+0x114>)
    3ce6:	681b      	ldr	r3, [r3, #0]
    3ce8:	7adb      	ldrb	r3, [r3, #11]
    3cea:	461a      	mov	r2, r3
    3cec:	9b03      	ldr	r3, [sp, #12]
    3cee:	4293      	cmp	r3, r2
    3cf0:	d3e4      	bcc.n	3cbc <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3cf2:	9b05      	ldr	r3, [sp, #20]
    3cf4:	2b00      	cmp	r3, #0
    3cf6:	d140      	bne.n	3d7a <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    3cf8:	9b04      	ldr	r3, [sp, #16]
    3cfa:	00db      	lsls	r3, r3, #3
    3cfc:	4a23      	ldr	r2, [pc, #140]	; (3d8c <getSelectorConfig+0x118>)
    3cfe:	4413      	add	r3, r2
    3d00:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    3d02:	4922      	ldr	r1, [pc, #136]	; (3d8c <getSelectorConfig+0x118>)
    3d04:	9b04      	ldr	r3, [sp, #16]
    3d06:	9a01      	ldr	r2, [sp, #4]
    3d08:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    3d0c:	9b01      	ldr	r3, [sp, #4]
    3d0e:	2b1b      	cmp	r3, #27
    3d10:	d025      	beq.n	3d5e <getSelectorConfig+0xea>
    3d12:	9b01      	ldr	r3, [sp, #4]
    3d14:	2b1b      	cmp	r3, #27
    3d16:	d832      	bhi.n	3d7e <getSelectorConfig+0x10a>
    3d18:	9b01      	ldr	r3, [sp, #4]
    3d1a:	2b19      	cmp	r3, #25
    3d1c:	d003      	beq.n	3d26 <getSelectorConfig+0xb2>
    3d1e:	9b01      	ldr	r3, [sp, #4]
    3d20:	2b1a      	cmp	r3, #26
    3d22:	d00e      	beq.n	3d42 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    3d24:	e02b      	b.n	3d7e <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    3d26:	4b1a      	ldr	r3, [pc, #104]	; (3d90 <getSelectorConfig+0x11c>)
    3d28:	695b      	ldr	r3, [r3, #20]
    3d2a:	0e1b      	lsrs	r3, r3, #24
    3d2c:	f003 030f 	and.w	r3, r3, #15
    3d30:	4a18      	ldr	r2, [pc, #96]	; (3d94 <getSelectorConfig+0x120>)
    3d32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d36:	4915      	ldr	r1, [pc, #84]	; (3d8c <getSelectorConfig+0x118>)
    3d38:	9b04      	ldr	r3, [sp, #16]
    3d3a:	00db      	lsls	r3, r3, #3
    3d3c:	440b      	add	r3, r1
    3d3e:	605a      	str	r2, [r3, #4]
                break;
    3d40:	e01e      	b.n	3d80 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    3d42:	4b13      	ldr	r3, [pc, #76]	; (3d90 <getSelectorConfig+0x11c>)
    3d44:	699b      	ldr	r3, [r3, #24]
    3d46:	0e1b      	lsrs	r3, r3, #24
    3d48:	f003 030f 	and.w	r3, r3, #15
    3d4c:	4a11      	ldr	r2, [pc, #68]	; (3d94 <getSelectorConfig+0x120>)
    3d4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d52:	490e      	ldr	r1, [pc, #56]	; (3d8c <getSelectorConfig+0x118>)
    3d54:	9b04      	ldr	r3, [sp, #16]
    3d56:	00db      	lsls	r3, r3, #3
    3d58:	440b      	add	r3, r1
    3d5a:	605a      	str	r2, [r3, #4]
                break;
    3d5c:	e010      	b.n	3d80 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    3d5e:	4b0c      	ldr	r3, [pc, #48]	; (3d90 <getSelectorConfig+0x11c>)
    3d60:	69db      	ldr	r3, [r3, #28]
    3d62:	0e1b      	lsrs	r3, r3, #24
    3d64:	f003 030f 	and.w	r3, r3, #15
    3d68:	4a0a      	ldr	r2, [pc, #40]	; (3d94 <getSelectorConfig+0x120>)
    3d6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d6e:	4907      	ldr	r1, [pc, #28]	; (3d8c <getSelectorConfig+0x118>)
    3d70:	9b04      	ldr	r3, [sp, #16]
    3d72:	00db      	lsls	r3, r3, #3
    3d74:	440b      	add	r3, r1
    3d76:	605a      	str	r2, [r3, #4]
                break;
    3d78:	e002      	b.n	3d80 <getSelectorConfig+0x10c>
        }
    }
    3d7a:	bf00      	nop
    3d7c:	e000      	b.n	3d80 <getSelectorConfig+0x10c>
                break;
    3d7e:	bf00      	nop

    return ReturnValue;
    3d80:	9b05      	ldr	r3, [sp, #20]
}
    3d82:	4618      	mov	r0, r3
    3d84:	b006      	add	sp, #24
    3d86:	4770      	bx	lr
    3d88:	1fff8ba8 	.word	0x1fff8ba8
    3d8c:	1fff8c5c 	.word	0x1fff8c5c
    3d90:	40064000 	.word	0x40064000
    3d94:	00007890 	.word	0x00007890

00003d98 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    3d98:	b086      	sub	sp, #24
    3d9a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    3d9c:	2300      	movs	r3, #0
    3d9e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    3da0:	2300      	movs	r3, #0
    3da2:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    3da4:	9b01      	ldr	r3, [sp, #4]
    3da6:	2b1f      	cmp	r3, #31
    3da8:	d00f      	beq.n	3dca <getCoreDividerConfig+0x32>
    3daa:	9b01      	ldr	r3, [sp, #4]
    3dac:	2b1f      	cmp	r3, #31
    3dae:	d80f      	bhi.n	3dd0 <getCoreDividerConfig+0x38>
    3db0:	9b01      	ldr	r3, [sp, #4]
    3db2:	2b1d      	cmp	r3, #29
    3db4:	d003      	beq.n	3dbe <getCoreDividerConfig+0x26>
    3db6:	9b01      	ldr	r3, [sp, #4]
    3db8:	2b1e      	cmp	r3, #30
    3dba:	d003      	beq.n	3dc4 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    3dbc:	e008      	b.n	3dd0 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    3dbe:	2300      	movs	r3, #0
    3dc0:	9304      	str	r3, [sp, #16]
            break;
    3dc2:	e006      	b.n	3dd2 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    3dc4:	2301      	movs	r3, #1
    3dc6:	9304      	str	r3, [sp, #16]
            break;
    3dc8:	e003      	b.n	3dd2 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    3dca:	2302      	movs	r3, #2
    3dcc:	9304      	str	r3, [sp, #16]
            break;
    3dce:	e000      	b.n	3dd2 <getCoreDividerConfig+0x3a>
                break;
    3dd0:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    3dd2:	4b41      	ldr	r3, [pc, #260]	; (3ed8 <getCoreDividerConfig+0x140>)
    3dd4:	681b      	ldr	r3, [r3, #0]
    3dd6:	2b00      	cmp	r3, #0
    3dd8:	d026      	beq.n	3e28 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3dda:	2300      	movs	r3, #0
    3ddc:	9303      	str	r3, [sp, #12]
    3dde:	e01c      	b.n	3e1a <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    3de0:	4b3d      	ldr	r3, [pc, #244]	; (3ed8 <getCoreDividerConfig+0x140>)
    3de2:	6819      	ldr	r1, [r3, #0]
    3de4:	9a03      	ldr	r2, [sp, #12]
    3de6:	4613      	mov	r3, r2
    3de8:	005b      	lsls	r3, r3, #1
    3dea:	4413      	add	r3, r2
    3dec:	009b      	lsls	r3, r3, #2
    3dee:	440b      	add	r3, r1
    3df0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3df4:	681b      	ldr	r3, [r3, #0]
    3df6:	9a01      	ldr	r2, [sp, #4]
    3df8:	429a      	cmp	r2, r3
    3dfa:	d10b      	bne.n	3e14 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    3dfc:	4b36      	ldr	r3, [pc, #216]	; (3ed8 <getCoreDividerConfig+0x140>)
    3dfe:	6819      	ldr	r1, [r3, #0]
    3e00:	9a03      	ldr	r2, [sp, #12]
    3e02:	4613      	mov	r3, r2
    3e04:	005b      	lsls	r3, r3, #1
    3e06:	4413      	add	r3, r2
    3e08:	009b      	lsls	r3, r3, #2
    3e0a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3e0e:	440b      	add	r3, r1
    3e10:	9305      	str	r3, [sp, #20]
                break;
    3e12:	e009      	b.n	3e28 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3e14:	9b03      	ldr	r3, [sp, #12]
    3e16:	3301      	adds	r3, #1
    3e18:	9303      	str	r3, [sp, #12]
    3e1a:	4b2f      	ldr	r3, [pc, #188]	; (3ed8 <getCoreDividerConfig+0x140>)
    3e1c:	681b      	ldr	r3, [r3, #0]
    3e1e:	7b1b      	ldrb	r3, [r3, #12]
    3e20:	461a      	mov	r2, r3
    3e22:	9b03      	ldr	r3, [sp, #12]
    3e24:	4293      	cmp	r3, r2
    3e26:	d3db      	bcc.n	3de0 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3e28:	9b05      	ldr	r3, [sp, #20]
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	d14d      	bne.n	3eca <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    3e2e:	9a04      	ldr	r2, [sp, #16]
    3e30:	4613      	mov	r3, r2
    3e32:	005b      	lsls	r3, r3, #1
    3e34:	4413      	add	r3, r2
    3e36:	009b      	lsls	r3, r3, #2
    3e38:	4a28      	ldr	r2, [pc, #160]	; (3edc <getCoreDividerConfig+0x144>)
    3e3a:	4413      	add	r3, r2
    3e3c:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    3e3e:	4927      	ldr	r1, [pc, #156]	; (3edc <getCoreDividerConfig+0x144>)
    3e40:	9a04      	ldr	r2, [sp, #16]
    3e42:	4613      	mov	r3, r2
    3e44:	005b      	lsls	r3, r3, #1
    3e46:	4413      	add	r3, r2
    3e48:	009b      	lsls	r3, r3, #2
    3e4a:	440b      	add	r3, r1
    3e4c:	9a01      	ldr	r2, [sp, #4]
    3e4e:	601a      	str	r2, [r3, #0]
        switch(Name)
    3e50:	9b01      	ldr	r3, [sp, #4]
    3e52:	2b1f      	cmp	r3, #31
    3e54:	d029      	beq.n	3eaa <getCoreDividerConfig+0x112>
    3e56:	9b01      	ldr	r3, [sp, #4]
    3e58:	2b1f      	cmp	r3, #31
    3e5a:	d838      	bhi.n	3ece <getCoreDividerConfig+0x136>
    3e5c:	9b01      	ldr	r3, [sp, #4]
    3e5e:	2b1d      	cmp	r3, #29
    3e60:	d003      	beq.n	3e6a <getCoreDividerConfig+0xd2>
    3e62:	9b01      	ldr	r3, [sp, #4]
    3e64:	2b1e      	cmp	r3, #30
    3e66:	d010      	beq.n	3e8a <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    3e68:	e031      	b.n	3ece <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    3e6a:	4b1d      	ldr	r3, [pc, #116]	; (3ee0 <getCoreDividerConfig+0x148>)
    3e6c:	695b      	ldr	r3, [r3, #20]
    3e6e:	0c1b      	lsrs	r3, r3, #16
    3e70:	f003 030f 	and.w	r3, r3, #15
    3e74:	1c59      	adds	r1, r3, #1
    3e76:	4819      	ldr	r0, [pc, #100]	; (3edc <getCoreDividerConfig+0x144>)
    3e78:	9a04      	ldr	r2, [sp, #16]
    3e7a:	4613      	mov	r3, r2
    3e7c:	005b      	lsls	r3, r3, #1
    3e7e:	4413      	add	r3, r2
    3e80:	009b      	lsls	r3, r3, #2
    3e82:	4403      	add	r3, r0
    3e84:	3304      	adds	r3, #4
    3e86:	6019      	str	r1, [r3, #0]
                break;
    3e88:	e022      	b.n	3ed0 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    3e8a:	4b15      	ldr	r3, [pc, #84]	; (3ee0 <getCoreDividerConfig+0x148>)
    3e8c:	699b      	ldr	r3, [r3, #24]
    3e8e:	0c1b      	lsrs	r3, r3, #16
    3e90:	f003 030f 	and.w	r3, r3, #15
    3e94:	1c59      	adds	r1, r3, #1
    3e96:	4811      	ldr	r0, [pc, #68]	; (3edc <getCoreDividerConfig+0x144>)
    3e98:	9a04      	ldr	r2, [sp, #16]
    3e9a:	4613      	mov	r3, r2
    3e9c:	005b      	lsls	r3, r3, #1
    3e9e:	4413      	add	r3, r2
    3ea0:	009b      	lsls	r3, r3, #2
    3ea2:	4403      	add	r3, r0
    3ea4:	3304      	adds	r3, #4
    3ea6:	6019      	str	r1, [r3, #0]
                break;
    3ea8:	e012      	b.n	3ed0 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    3eaa:	4b0d      	ldr	r3, [pc, #52]	; (3ee0 <getCoreDividerConfig+0x148>)
    3eac:	69db      	ldr	r3, [r3, #28]
    3eae:	0c1b      	lsrs	r3, r3, #16
    3eb0:	f003 030f 	and.w	r3, r3, #15
    3eb4:	1c59      	adds	r1, r3, #1
    3eb6:	4809      	ldr	r0, [pc, #36]	; (3edc <getCoreDividerConfig+0x144>)
    3eb8:	9a04      	ldr	r2, [sp, #16]
    3eba:	4613      	mov	r3, r2
    3ebc:	005b      	lsls	r3, r3, #1
    3ebe:	4413      	add	r3, r2
    3ec0:	009b      	lsls	r3, r3, #2
    3ec2:	4403      	add	r3, r0
    3ec4:	3304      	adds	r3, #4
    3ec6:	6019      	str	r1, [r3, #0]
                break;
    3ec8:	e002      	b.n	3ed0 <getCoreDividerConfig+0x138>
        }
    }
    3eca:	bf00      	nop
    3ecc:	e000      	b.n	3ed0 <getCoreDividerConfig+0x138>
                break;
    3ece:	bf00      	nop

    return ReturnValue;
    3ed0:	9b05      	ldr	r3, [sp, #20]
}
    3ed2:	4618      	mov	r0, r3
    3ed4:	b006      	add	sp, #24
    3ed6:	4770      	bx	lr
    3ed8:	1fff8ba8 	.word	0x1fff8ba8
    3edc:	1fff8c74 	.word	0x1fff8c74
    3ee0:	40064000 	.word	0x40064000

00003ee4 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    3ee4:	b086      	sub	sp, #24
    3ee6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    3ee8:	2300      	movs	r3, #0
    3eea:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    3eec:	2300      	movs	r3, #0
    3eee:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    3ef0:	9b01      	ldr	r3, [sp, #4]
    3ef2:	2b23      	cmp	r3, #35	; 0x23
    3ef4:	d00f      	beq.n	3f16 <getBusDividerConfig+0x32>
    3ef6:	9b01      	ldr	r3, [sp, #4]
    3ef8:	2b23      	cmp	r3, #35	; 0x23
    3efa:	d80f      	bhi.n	3f1c <getBusDividerConfig+0x38>
    3efc:	9b01      	ldr	r3, [sp, #4]
    3efe:	2b21      	cmp	r3, #33	; 0x21
    3f00:	d003      	beq.n	3f0a <getBusDividerConfig+0x26>
    3f02:	9b01      	ldr	r3, [sp, #4]
    3f04:	2b22      	cmp	r3, #34	; 0x22
    3f06:	d003      	beq.n	3f10 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    3f08:	e008      	b.n	3f1c <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    3f0a:	2300      	movs	r3, #0
    3f0c:	9304      	str	r3, [sp, #16]
            break;
    3f0e:	e006      	b.n	3f1e <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    3f10:	2301      	movs	r3, #1
    3f12:	9304      	str	r3, [sp, #16]
            break;
    3f14:	e003      	b.n	3f1e <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    3f16:	2302      	movs	r3, #2
    3f18:	9304      	str	r3, [sp, #16]
            break;
    3f1a:	e000      	b.n	3f1e <getBusDividerConfig+0x3a>
                break;
    3f1c:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    3f1e:	4b41      	ldr	r3, [pc, #260]	; (4024 <getBusDividerConfig+0x140>)
    3f20:	681b      	ldr	r3, [r3, #0]
    3f22:	2b00      	cmp	r3, #0
    3f24:	d026      	beq.n	3f74 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3f26:	2300      	movs	r3, #0
    3f28:	9303      	str	r3, [sp, #12]
    3f2a:	e01c      	b.n	3f66 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    3f2c:	4b3d      	ldr	r3, [pc, #244]	; (4024 <getBusDividerConfig+0x140>)
    3f2e:	6819      	ldr	r1, [r3, #0]
    3f30:	9a03      	ldr	r2, [sp, #12]
    3f32:	4613      	mov	r3, r2
    3f34:	005b      	lsls	r3, r3, #1
    3f36:	4413      	add	r3, r2
    3f38:	009b      	lsls	r3, r3, #2
    3f3a:	440b      	add	r3, r1
    3f3c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3f40:	681b      	ldr	r3, [r3, #0]
    3f42:	9a01      	ldr	r2, [sp, #4]
    3f44:	429a      	cmp	r2, r3
    3f46:	d10b      	bne.n	3f60 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    3f48:	4b36      	ldr	r3, [pc, #216]	; (4024 <getBusDividerConfig+0x140>)
    3f4a:	6819      	ldr	r1, [r3, #0]
    3f4c:	9a03      	ldr	r2, [sp, #12]
    3f4e:	4613      	mov	r3, r2
    3f50:	005b      	lsls	r3, r3, #1
    3f52:	4413      	add	r3, r2
    3f54:	009b      	lsls	r3, r3, #2
    3f56:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3f5a:	440b      	add	r3, r1
    3f5c:	9305      	str	r3, [sp, #20]
                break;
    3f5e:	e009      	b.n	3f74 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3f60:	9b03      	ldr	r3, [sp, #12]
    3f62:	3301      	adds	r3, #1
    3f64:	9303      	str	r3, [sp, #12]
    3f66:	4b2f      	ldr	r3, [pc, #188]	; (4024 <getBusDividerConfig+0x140>)
    3f68:	681b      	ldr	r3, [r3, #0]
    3f6a:	7b1b      	ldrb	r3, [r3, #12]
    3f6c:	461a      	mov	r2, r3
    3f6e:	9b03      	ldr	r3, [sp, #12]
    3f70:	4293      	cmp	r3, r2
    3f72:	d3db      	bcc.n	3f2c <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3f74:	9b05      	ldr	r3, [sp, #20]
    3f76:	2b00      	cmp	r3, #0
    3f78:	d14d      	bne.n	4016 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    3f7a:	9a04      	ldr	r2, [sp, #16]
    3f7c:	4613      	mov	r3, r2
    3f7e:	005b      	lsls	r3, r3, #1
    3f80:	4413      	add	r3, r2
    3f82:	009b      	lsls	r3, r3, #2
    3f84:	4a28      	ldr	r2, [pc, #160]	; (4028 <getBusDividerConfig+0x144>)
    3f86:	4413      	add	r3, r2
    3f88:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    3f8a:	4927      	ldr	r1, [pc, #156]	; (4028 <getBusDividerConfig+0x144>)
    3f8c:	9a04      	ldr	r2, [sp, #16]
    3f8e:	4613      	mov	r3, r2
    3f90:	005b      	lsls	r3, r3, #1
    3f92:	4413      	add	r3, r2
    3f94:	009b      	lsls	r3, r3, #2
    3f96:	440b      	add	r3, r1
    3f98:	9a01      	ldr	r2, [sp, #4]
    3f9a:	601a      	str	r2, [r3, #0]
        switch(Name)
    3f9c:	9b01      	ldr	r3, [sp, #4]
    3f9e:	2b23      	cmp	r3, #35	; 0x23
    3fa0:	d029      	beq.n	3ff6 <getBusDividerConfig+0x112>
    3fa2:	9b01      	ldr	r3, [sp, #4]
    3fa4:	2b23      	cmp	r3, #35	; 0x23
    3fa6:	d838      	bhi.n	401a <getBusDividerConfig+0x136>
    3fa8:	9b01      	ldr	r3, [sp, #4]
    3faa:	2b21      	cmp	r3, #33	; 0x21
    3fac:	d003      	beq.n	3fb6 <getBusDividerConfig+0xd2>
    3fae:	9b01      	ldr	r3, [sp, #4]
    3fb0:	2b22      	cmp	r3, #34	; 0x22
    3fb2:	d010      	beq.n	3fd6 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    3fb4:	e031      	b.n	401a <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    3fb6:	4b1d      	ldr	r3, [pc, #116]	; (402c <getBusDividerConfig+0x148>)
    3fb8:	695b      	ldr	r3, [r3, #20]
    3fba:	091b      	lsrs	r3, r3, #4
    3fbc:	f003 030f 	and.w	r3, r3, #15
    3fc0:	1c59      	adds	r1, r3, #1
    3fc2:	4819      	ldr	r0, [pc, #100]	; (4028 <getBusDividerConfig+0x144>)
    3fc4:	9a04      	ldr	r2, [sp, #16]
    3fc6:	4613      	mov	r3, r2
    3fc8:	005b      	lsls	r3, r3, #1
    3fca:	4413      	add	r3, r2
    3fcc:	009b      	lsls	r3, r3, #2
    3fce:	4403      	add	r3, r0
    3fd0:	3304      	adds	r3, #4
    3fd2:	6019      	str	r1, [r3, #0]
                break;
    3fd4:	e022      	b.n	401c <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    3fd6:	4b15      	ldr	r3, [pc, #84]	; (402c <getBusDividerConfig+0x148>)
    3fd8:	699b      	ldr	r3, [r3, #24]
    3fda:	091b      	lsrs	r3, r3, #4
    3fdc:	f003 030f 	and.w	r3, r3, #15
    3fe0:	1c59      	adds	r1, r3, #1
    3fe2:	4811      	ldr	r0, [pc, #68]	; (4028 <getBusDividerConfig+0x144>)
    3fe4:	9a04      	ldr	r2, [sp, #16]
    3fe6:	4613      	mov	r3, r2
    3fe8:	005b      	lsls	r3, r3, #1
    3fea:	4413      	add	r3, r2
    3fec:	009b      	lsls	r3, r3, #2
    3fee:	4403      	add	r3, r0
    3ff0:	3304      	adds	r3, #4
    3ff2:	6019      	str	r1, [r3, #0]
                break;
    3ff4:	e012      	b.n	401c <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    3ff6:	4b0d      	ldr	r3, [pc, #52]	; (402c <getBusDividerConfig+0x148>)
    3ff8:	69db      	ldr	r3, [r3, #28]
    3ffa:	091b      	lsrs	r3, r3, #4
    3ffc:	f003 030f 	and.w	r3, r3, #15
    4000:	1c59      	adds	r1, r3, #1
    4002:	4809      	ldr	r0, [pc, #36]	; (4028 <getBusDividerConfig+0x144>)
    4004:	9a04      	ldr	r2, [sp, #16]
    4006:	4613      	mov	r3, r2
    4008:	005b      	lsls	r3, r3, #1
    400a:	4413      	add	r3, r2
    400c:	009b      	lsls	r3, r3, #2
    400e:	4403      	add	r3, r0
    4010:	3304      	adds	r3, #4
    4012:	6019      	str	r1, [r3, #0]
                break;
    4014:	e002      	b.n	401c <getBusDividerConfig+0x138>
        }
    }
    4016:	bf00      	nop
    4018:	e000      	b.n	401c <getBusDividerConfig+0x138>
                break;
    401a:	bf00      	nop

    return ReturnValue;
    401c:	9b05      	ldr	r3, [sp, #20]
}
    401e:	4618      	mov	r0, r3
    4020:	b006      	add	sp, #24
    4022:	4770      	bx	lr
    4024:	1fff8ba8 	.word	0x1fff8ba8
    4028:	1fff8c98 	.word	0x1fff8c98
    402c:	40064000 	.word	0x40064000

00004030 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    4030:	b086      	sub	sp, #24
    4032:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4034:	2300      	movs	r3, #0
    4036:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4038:	2300      	movs	r3, #0
    403a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    403c:	9b01      	ldr	r3, [sp, #4]
    403e:	2b27      	cmp	r3, #39	; 0x27
    4040:	d00f      	beq.n	4062 <getSlowDividerConfig+0x32>
    4042:	9b01      	ldr	r3, [sp, #4]
    4044:	2b27      	cmp	r3, #39	; 0x27
    4046:	d80f      	bhi.n	4068 <getSlowDividerConfig+0x38>
    4048:	9b01      	ldr	r3, [sp, #4]
    404a:	2b25      	cmp	r3, #37	; 0x25
    404c:	d003      	beq.n	4056 <getSlowDividerConfig+0x26>
    404e:	9b01      	ldr	r3, [sp, #4]
    4050:	2b26      	cmp	r3, #38	; 0x26
    4052:	d003      	beq.n	405c <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4054:	e008      	b.n	4068 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4056:	2300      	movs	r3, #0
    4058:	9304      	str	r3, [sp, #16]
            break;
    405a:	e006      	b.n	406a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    405c:	2301      	movs	r3, #1
    405e:	9304      	str	r3, [sp, #16]
            break;
    4060:	e003      	b.n	406a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4062:	2302      	movs	r3, #2
    4064:	9304      	str	r3, [sp, #16]
            break;
    4066:	e000      	b.n	406a <getSlowDividerConfig+0x3a>
                break;
    4068:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    406a:	4b40      	ldr	r3, [pc, #256]	; (416c <getSlowDividerConfig+0x13c>)
    406c:	681b      	ldr	r3, [r3, #0]
    406e:	2b00      	cmp	r3, #0
    4070:	d026      	beq.n	40c0 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4072:	2300      	movs	r3, #0
    4074:	9303      	str	r3, [sp, #12]
    4076:	e01c      	b.n	40b2 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4078:	4b3c      	ldr	r3, [pc, #240]	; (416c <getSlowDividerConfig+0x13c>)
    407a:	6819      	ldr	r1, [r3, #0]
    407c:	9a03      	ldr	r2, [sp, #12]
    407e:	4613      	mov	r3, r2
    4080:	005b      	lsls	r3, r3, #1
    4082:	4413      	add	r3, r2
    4084:	009b      	lsls	r3, r3, #2
    4086:	440b      	add	r3, r1
    4088:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    408c:	681b      	ldr	r3, [r3, #0]
    408e:	9a01      	ldr	r2, [sp, #4]
    4090:	429a      	cmp	r2, r3
    4092:	d10b      	bne.n	40ac <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4094:	4b35      	ldr	r3, [pc, #212]	; (416c <getSlowDividerConfig+0x13c>)
    4096:	6819      	ldr	r1, [r3, #0]
    4098:	9a03      	ldr	r2, [sp, #12]
    409a:	4613      	mov	r3, r2
    409c:	005b      	lsls	r3, r3, #1
    409e:	4413      	add	r3, r2
    40a0:	009b      	lsls	r3, r3, #2
    40a2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    40a6:	440b      	add	r3, r1
    40a8:	9305      	str	r3, [sp, #20]
                break;
    40aa:	e009      	b.n	40c0 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    40ac:	9b03      	ldr	r3, [sp, #12]
    40ae:	3301      	adds	r3, #1
    40b0:	9303      	str	r3, [sp, #12]
    40b2:	4b2e      	ldr	r3, [pc, #184]	; (416c <getSlowDividerConfig+0x13c>)
    40b4:	681b      	ldr	r3, [r3, #0]
    40b6:	7b1b      	ldrb	r3, [r3, #12]
    40b8:	461a      	mov	r2, r3
    40ba:	9b03      	ldr	r3, [sp, #12]
    40bc:	4293      	cmp	r3, r2
    40be:	d3db      	bcc.n	4078 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    40c0:	9b05      	ldr	r3, [sp, #20]
    40c2:	2b00      	cmp	r3, #0
    40c4:	d14a      	bne.n	415c <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    40c6:	9a04      	ldr	r2, [sp, #16]
    40c8:	4613      	mov	r3, r2
    40ca:	005b      	lsls	r3, r3, #1
    40cc:	4413      	add	r3, r2
    40ce:	009b      	lsls	r3, r3, #2
    40d0:	4a27      	ldr	r2, [pc, #156]	; (4170 <getSlowDividerConfig+0x140>)
    40d2:	4413      	add	r3, r2
    40d4:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    40d6:	4926      	ldr	r1, [pc, #152]	; (4170 <getSlowDividerConfig+0x140>)
    40d8:	9a04      	ldr	r2, [sp, #16]
    40da:	4613      	mov	r3, r2
    40dc:	005b      	lsls	r3, r3, #1
    40de:	4413      	add	r3, r2
    40e0:	009b      	lsls	r3, r3, #2
    40e2:	440b      	add	r3, r1
    40e4:	9a01      	ldr	r2, [sp, #4]
    40e6:	601a      	str	r2, [r3, #0]
        switch(Name)
    40e8:	9b01      	ldr	r3, [sp, #4]
    40ea:	2b27      	cmp	r3, #39	; 0x27
    40ec:	d027      	beq.n	413e <getSlowDividerConfig+0x10e>
    40ee:	9b01      	ldr	r3, [sp, #4]
    40f0:	2b27      	cmp	r3, #39	; 0x27
    40f2:	d835      	bhi.n	4160 <getSlowDividerConfig+0x130>
    40f4:	9b01      	ldr	r3, [sp, #4]
    40f6:	2b25      	cmp	r3, #37	; 0x25
    40f8:	d003      	beq.n	4102 <getSlowDividerConfig+0xd2>
    40fa:	9b01      	ldr	r3, [sp, #4]
    40fc:	2b26      	cmp	r3, #38	; 0x26
    40fe:	d00f      	beq.n	4120 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4100:	e02e      	b.n	4160 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    4102:	4b1c      	ldr	r3, [pc, #112]	; (4174 <getSlowDividerConfig+0x144>)
    4104:	695b      	ldr	r3, [r3, #20]
    4106:	f003 030f 	and.w	r3, r3, #15
    410a:	1c59      	adds	r1, r3, #1
    410c:	4818      	ldr	r0, [pc, #96]	; (4170 <getSlowDividerConfig+0x140>)
    410e:	9a04      	ldr	r2, [sp, #16]
    4110:	4613      	mov	r3, r2
    4112:	005b      	lsls	r3, r3, #1
    4114:	4413      	add	r3, r2
    4116:	009b      	lsls	r3, r3, #2
    4118:	4403      	add	r3, r0
    411a:	3304      	adds	r3, #4
    411c:	6019      	str	r1, [r3, #0]
                break;
    411e:	e020      	b.n	4162 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    4120:	4b14      	ldr	r3, [pc, #80]	; (4174 <getSlowDividerConfig+0x144>)
    4122:	699b      	ldr	r3, [r3, #24]
    4124:	f003 030f 	and.w	r3, r3, #15
    4128:	1c59      	adds	r1, r3, #1
    412a:	4811      	ldr	r0, [pc, #68]	; (4170 <getSlowDividerConfig+0x140>)
    412c:	9a04      	ldr	r2, [sp, #16]
    412e:	4613      	mov	r3, r2
    4130:	005b      	lsls	r3, r3, #1
    4132:	4413      	add	r3, r2
    4134:	009b      	lsls	r3, r3, #2
    4136:	4403      	add	r3, r0
    4138:	3304      	adds	r3, #4
    413a:	6019      	str	r1, [r3, #0]
                break;
    413c:	e011      	b.n	4162 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    413e:	4b0d      	ldr	r3, [pc, #52]	; (4174 <getSlowDividerConfig+0x144>)
    4140:	69db      	ldr	r3, [r3, #28]
    4142:	f003 030f 	and.w	r3, r3, #15
    4146:	1c59      	adds	r1, r3, #1
    4148:	4809      	ldr	r0, [pc, #36]	; (4170 <getSlowDividerConfig+0x140>)
    414a:	9a04      	ldr	r2, [sp, #16]
    414c:	4613      	mov	r3, r2
    414e:	005b      	lsls	r3, r3, #1
    4150:	4413      	add	r3, r2
    4152:	009b      	lsls	r3, r3, #2
    4154:	4403      	add	r3, r0
    4156:	3304      	adds	r3, #4
    4158:	6019      	str	r1, [r3, #0]
                break;
    415a:	e002      	b.n	4162 <getSlowDividerConfig+0x132>
        }
    }
    415c:	bf00      	nop
    415e:	e000      	b.n	4162 <getSlowDividerConfig+0x132>
                break;
    4160:	bf00      	nop

    return ReturnValue;
    4162:	9b05      	ldr	r3, [sp, #20]
}
    4164:	4618      	mov	r0, r3
    4166:	b006      	add	sp, #24
    4168:	4770      	bx	lr
    416a:	bf00      	nop
    416c:	1fff8ba8 	.word	0x1fff8ba8
    4170:	1fff8cbc 	.word	0x1fff8cbc
    4174:	40064000 	.word	0x40064000

00004178 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    4178:	b500      	push	{lr}
    417a:	b083      	sub	sp, #12
    417c:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    417e:	4b64      	ldr	r3, [pc, #400]	; (4310 <Clock_Ip_ClockInitializeObjects+0x198>)
    4180:	781b      	ldrb	r3, [r3, #0]
    4182:	f083 0301 	eor.w	r3, r3, #1
    4186:	b2db      	uxtb	r3, r3
    4188:	2b00      	cmp	r3, #0
    418a:	d05b      	beq.n	4244 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    418c:	4b60      	ldr	r3, [pc, #384]	; (4310 <Clock_Ip_ClockInitializeObjects+0x198>)
    418e:	2201      	movs	r2, #1
    4190:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    4192:	4b60      	ldr	r3, [pc, #384]	; (4314 <Clock_Ip_ClockInitializeObjects+0x19c>)
    4194:	785b      	ldrb	r3, [r3, #1]
    4196:	461a      	mov	r2, r3
    4198:	4613      	mov	r3, r2
    419a:	009b      	lsls	r3, r3, #2
    419c:	4413      	add	r3, r2
    419e:	009b      	lsls	r3, r3, #2
    41a0:	4a5d      	ldr	r2, [pc, #372]	; (4318 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    41a2:	4413      	add	r3, r2
    41a4:	4a5d      	ldr	r2, [pc, #372]	; (431c <Clock_Ip_ClockInitializeObjects+0x1a4>)
    41a6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    41a8:	4b5d      	ldr	r3, [pc, #372]	; (4320 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    41aa:	785b      	ldrb	r3, [r3, #1]
    41ac:	461a      	mov	r2, r3
    41ae:	4613      	mov	r3, r2
    41b0:	009b      	lsls	r3, r3, #2
    41b2:	4413      	add	r3, r2
    41b4:	009b      	lsls	r3, r3, #2
    41b6:	4a5b      	ldr	r2, [pc, #364]	; (4324 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    41b8:	4413      	add	r3, r2
    41ba:	4a5b      	ldr	r2, [pc, #364]	; (4328 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    41bc:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    41be:	4b5b      	ldr	r3, [pc, #364]	; (432c <Clock_Ip_ClockInitializeObjects+0x1b4>)
    41c0:	791b      	ldrb	r3, [r3, #4]
    41c2:	461a      	mov	r2, r3
    41c4:	4613      	mov	r3, r2
    41c6:	005b      	lsls	r3, r3, #1
    41c8:	4413      	add	r3, r2
    41ca:	009b      	lsls	r3, r3, #2
    41cc:	4a58      	ldr	r2, [pc, #352]	; (4330 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    41ce:	4413      	add	r3, r2
    41d0:	4a58      	ldr	r2, [pc, #352]	; (4334 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    41d2:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    41d4:	4b58      	ldr	r3, [pc, #352]	; (4338 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    41d6:	795b      	ldrb	r3, [r3, #5]
    41d8:	00db      	lsls	r3, r3, #3
    41da:	4a58      	ldr	r2, [pc, #352]	; (433c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    41dc:	4413      	add	r3, r2
    41de:	4a58      	ldr	r2, [pc, #352]	; (4340 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    41e0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    41e2:	4b55      	ldr	r3, [pc, #340]	; (4338 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    41e4:	79db      	ldrb	r3, [r3, #7]
    41e6:	00db      	lsls	r3, r3, #3
    41e8:	4a54      	ldr	r2, [pc, #336]	; (433c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    41ea:	4413      	add	r3, r2
    41ec:	4a55      	ldr	r2, [pc, #340]	; (4344 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    41ee:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    41f0:	4b55      	ldr	r3, [pc, #340]	; (4348 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    41f2:	799b      	ldrb	r3, [r3, #6]
    41f4:	009b      	lsls	r3, r3, #2
    41f6:	4a55      	ldr	r2, [pc, #340]	; (434c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    41f8:	4413      	add	r3, r2
    41fa:	4a55      	ldr	r2, [pc, #340]	; (4350 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    41fc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    41fe:	4b52      	ldr	r3, [pc, #328]	; (4348 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4200:	7a1b      	ldrb	r3, [r3, #8]
    4202:	009b      	lsls	r3, r3, #2
    4204:	4a51      	ldr	r2, [pc, #324]	; (434c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4206:	4413      	add	r3, r2
    4208:	4a52      	ldr	r2, [pc, #328]	; (4354 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    420a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    420c:	4b4e      	ldr	r3, [pc, #312]	; (4348 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    420e:	7a5b      	ldrb	r3, [r3, #9]
    4210:	009b      	lsls	r3, r3, #2
    4212:	4a4e      	ldr	r2, [pc, #312]	; (434c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4214:	4413      	add	r3, r2
    4216:	4a50      	ldr	r2, [pc, #320]	; (4358 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4218:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    421a:	4b4b      	ldr	r3, [pc, #300]	; (4348 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    421c:	7adb      	ldrb	r3, [r3, #11]
    421e:	009b      	lsls	r3, r3, #2
    4220:	4a4a      	ldr	r2, [pc, #296]	; (434c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4222:	4413      	add	r3, r2
    4224:	4a4d      	ldr	r2, [pc, #308]	; (435c <Clock_Ip_ClockInitializeObjects+0x1e4>)
    4226:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    4228:	4b47      	ldr	r3, [pc, #284]	; (4348 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    422a:	7b1b      	ldrb	r3, [r3, #12]
    422c:	009b      	lsls	r3, r3, #2
    422e:	4a47      	ldr	r2, [pc, #284]	; (434c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4230:	4413      	add	r3, r2
    4232:	4a4b      	ldr	r2, [pc, #300]	; (4360 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    4234:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    4236:	4b44      	ldr	r3, [pc, #272]	; (4348 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4238:	7b9b      	ldrb	r3, [r3, #14]
    423a:	009b      	lsls	r3, r3, #2
    423c:	4a43      	ldr	r2, [pc, #268]	; (434c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    423e:	4413      	add	r3, r2
    4240:	4a48      	ldr	r2, [pc, #288]	; (4364 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    4242:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    4244:	4b48      	ldr	r3, [pc, #288]	; (4368 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    4246:	781b      	ldrb	r3, [r3, #0]
    4248:	2b00      	cmp	r3, #0
    424a:	d002      	beq.n	4252 <Clock_Ip_ClockInitializeObjects+0xda>
    424c:	9b01      	ldr	r3, [sp, #4]
    424e:	2b00      	cmp	r3, #0
    4250:	d003      	beq.n	425a <Clock_Ip_ClockInitializeObjects+0xe2>
    4252:	4b46      	ldr	r3, [pc, #280]	; (436c <Clock_Ip_ClockInitializeObjects+0x1f4>)
    4254:	781b      	ldrb	r3, [r3, #0]
    4256:	2b00      	cmp	r3, #0
    4258:	d056      	beq.n	4308 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    425a:	f7ff fc09 	bl	3a70 <getFircConfig>
    425e:	4603      	mov	r3, r0
    4260:	4a43      	ldr	r2, [pc, #268]	; (4370 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    4262:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    4264:	f7ff fc60 	bl	3b28 <getSoscConfig>
    4268:	4603      	mov	r3, r0
    426a:	4a42      	ldr	r2, [pc, #264]	; (4374 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    426c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    426e:	f7ff fca7 	bl	3bc0 <getSpllConfig>
    4272:	4603      	mov	r3, r0
    4274:	4a40      	ldr	r2, [pc, #256]	; (4378 <Clock_Ip_ClockInitializeObjects+0x200>)
    4276:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    4278:	2019      	movs	r0, #25
    427a:	f7ff fcfb 	bl	3c74 <getSelectorConfig>
    427e:	4603      	mov	r3, r0
    4280:	4a3e      	ldr	r2, [pc, #248]	; (437c <Clock_Ip_ClockInitializeObjects+0x204>)
    4282:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    4284:	201a      	movs	r0, #26
    4286:	f7ff fcf5 	bl	3c74 <getSelectorConfig>
    428a:	4603      	mov	r3, r0
    428c:	4a3c      	ldr	r2, [pc, #240]	; (4380 <Clock_Ip_ClockInitializeObjects+0x208>)
    428e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    4290:	201b      	movs	r0, #27
    4292:	f7ff fcef 	bl	3c74 <getSelectorConfig>
    4296:	4603      	mov	r3, r0
    4298:	4a3a      	ldr	r2, [pc, #232]	; (4384 <Clock_Ip_ClockInitializeObjects+0x20c>)
    429a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    429c:	201d      	movs	r0, #29
    429e:	f7ff fd7b 	bl	3d98 <getCoreDividerConfig>
    42a2:	4603      	mov	r3, r0
    42a4:	4a38      	ldr	r2, [pc, #224]	; (4388 <Clock_Ip_ClockInitializeObjects+0x210>)
    42a6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    42a8:	201e      	movs	r0, #30
    42aa:	f7ff fd75 	bl	3d98 <getCoreDividerConfig>
    42ae:	4603      	mov	r3, r0
    42b0:	4a36      	ldr	r2, [pc, #216]	; (438c <Clock_Ip_ClockInitializeObjects+0x214>)
    42b2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    42b4:	201f      	movs	r0, #31
    42b6:	f7ff fd6f 	bl	3d98 <getCoreDividerConfig>
    42ba:	4603      	mov	r3, r0
    42bc:	4a34      	ldr	r2, [pc, #208]	; (4390 <Clock_Ip_ClockInitializeObjects+0x218>)
    42be:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    42c0:	2021      	movs	r0, #33	; 0x21
    42c2:	f7ff fe0f 	bl	3ee4 <getBusDividerConfig>
    42c6:	4603      	mov	r3, r0
    42c8:	4a32      	ldr	r2, [pc, #200]	; (4394 <Clock_Ip_ClockInitializeObjects+0x21c>)
    42ca:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    42cc:	2022      	movs	r0, #34	; 0x22
    42ce:	f7ff fe09 	bl	3ee4 <getBusDividerConfig>
    42d2:	4603      	mov	r3, r0
    42d4:	4a30      	ldr	r2, [pc, #192]	; (4398 <Clock_Ip_ClockInitializeObjects+0x220>)
    42d6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    42d8:	2023      	movs	r0, #35	; 0x23
    42da:	f7ff fe03 	bl	3ee4 <getBusDividerConfig>
    42de:	4603      	mov	r3, r0
    42e0:	4a2e      	ldr	r2, [pc, #184]	; (439c <Clock_Ip_ClockInitializeObjects+0x224>)
    42e2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    42e4:	2025      	movs	r0, #37	; 0x25
    42e6:	f7ff fea3 	bl	4030 <getSlowDividerConfig>
    42ea:	4603      	mov	r3, r0
    42ec:	4a2c      	ldr	r2, [pc, #176]	; (43a0 <Clock_Ip_ClockInitializeObjects+0x228>)
    42ee:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    42f0:	2026      	movs	r0, #38	; 0x26
    42f2:	f7ff fe9d 	bl	4030 <getSlowDividerConfig>
    42f6:	4603      	mov	r3, r0
    42f8:	4a2a      	ldr	r2, [pc, #168]	; (43a4 <Clock_Ip_ClockInitializeObjects+0x22c>)
    42fa:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    42fc:	2027      	movs	r0, #39	; 0x27
    42fe:	f7ff fe97 	bl	4030 <getSlowDividerConfig>
    4302:	4603      	mov	r3, r0
    4304:	4a28      	ldr	r2, [pc, #160]	; (43a8 <Clock_Ip_ClockInitializeObjects+0x230>)
    4306:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    4308:	bf00      	nop
    430a:	b003      	add	sp, #12
    430c:	f85d fb04 	ldr.w	pc, [sp], #4
    4310:	1fff8ce0 	.word	0x1fff8ce0
    4314:	000071c0 	.word	0x000071c0
    4318:	0000780c 	.word	0x0000780c
    431c:	1fff8bac 	.word	0x1fff8bac
    4320:	00007180 	.word	0x00007180
    4324:	00007754 	.word	0x00007754
    4328:	1fff8bb0 	.word	0x1fff8bb0
    432c:	00007190 	.word	0x00007190
    4330:	000077c0 	.word	0x000077c0
    4334:	1fff8bb4 	.word	0x1fff8bb4
    4338:	000071d0 	.word	0x000071d0
    433c:	00007838 	.word	0x00007838
    4340:	1fff8bb8 	.word	0x1fff8bb8
    4344:	1fff8bf4 	.word	0x1fff8bf4
    4348:	00007160 	.word	0x00007160
    434c:	00007710 	.word	0x00007710
    4350:	1fff8bbc 	.word	0x1fff8bbc
    4354:	1fff8bf8 	.word	0x1fff8bf8
    4358:	1fff8bc0 	.word	0x1fff8bc0
    435c:	1fff8bfc 	.word	0x1fff8bfc
    4360:	1fff8bc4 	.word	0x1fff8bc4
    4364:	1fff8c00 	.word	0x1fff8c00
    4368:	1fff8b19 	.word	0x1fff8b19
    436c:	1fff8b10 	.word	0x1fff8b10
    4370:	1fff8bc8 	.word	0x1fff8bc8
    4374:	1fff8bcc 	.word	0x1fff8bcc
    4378:	1fff8bd0 	.word	0x1fff8bd0
    437c:	1fff8bd4 	.word	0x1fff8bd4
    4380:	1fff8bd8 	.word	0x1fff8bd8
    4384:	1fff8c04 	.word	0x1fff8c04
    4388:	1fff8bdc 	.word	0x1fff8bdc
    438c:	1fff8be0 	.word	0x1fff8be0
    4390:	1fff8c08 	.word	0x1fff8c08
    4394:	1fff8be4 	.word	0x1fff8be4
    4398:	1fff8be8 	.word	0x1fff8be8
    439c:	1fff8c0c 	.word	0x1fff8c0c
    43a0:	1fff8bec 	.word	0x1fff8bec
    43a4:	1fff8bf0 	.word	0x1fff8bf0
    43a8:	1fff8c10 	.word	0x1fff8c10

000043ac <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    43ac:	b500      	push	{lr}
    43ae:	b083      	sub	sp, #12
    43b0:	9001      	str	r0, [sp, #4]
    43b2:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    43b4:	9b01      	ldr	r3, [sp, #4]
    43b6:	2b03      	cmp	r3, #3
    43b8:	f000 8090 	beq.w	44dc <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    43bc:	9b01      	ldr	r3, [sp, #4]
    43be:	2b03      	cmp	r3, #3
    43c0:	f200 80d3 	bhi.w	456a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    43c4:	9b01      	ldr	r3, [sp, #4]
    43c6:	2b00      	cmp	r3, #0
    43c8:	d040      	beq.n	444c <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    43ca:	9b01      	ldr	r3, [sp, #4]
    43cc:	3b01      	subs	r3, #1
    43ce:	2b01      	cmp	r3, #1
    43d0:	f200 80cb 	bhi.w	456a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    43d4:	9b00      	ldr	r3, [sp, #0]
    43d6:	2b00      	cmp	r3, #0
    43d8:	f040 80c9 	bne.w	456e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    43dc:	4b68      	ldr	r3, [pc, #416]	; (4580 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    43de:	2200      	movs	r2, #0
    43e0:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    43e2:	4b68      	ldr	r3, [pc, #416]	; (4584 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    43e4:	681b      	ldr	r3, [r3, #0]
    43e6:	685b      	ldr	r3, [r3, #4]
    43e8:	4a67      	ldr	r2, [pc, #412]	; (4588 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    43ea:	6812      	ldr	r2, [r2, #0]
    43ec:	4610      	mov	r0, r2
    43ee:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    43f0:	4b66      	ldr	r3, [pc, #408]	; (458c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    43f2:	681b      	ldr	r3, [r3, #0]
    43f4:	681b      	ldr	r3, [r3, #0]
    43f6:	4a66      	ldr	r2, [pc, #408]	; (4590 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    43f8:	6812      	ldr	r2, [r2, #0]
    43fa:	4610      	mov	r0, r2
    43fc:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    43fe:	4b65      	ldr	r3, [pc, #404]	; (4594 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4400:	681b      	ldr	r3, [r3, #0]
    4402:	681b      	ldr	r3, [r3, #0]
    4404:	4a64      	ldr	r2, [pc, #400]	; (4598 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    4406:	6812      	ldr	r2, [r2, #0]
    4408:	4610      	mov	r0, r2
    440a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    440c:	4b63      	ldr	r3, [pc, #396]	; (459c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    440e:	681b      	ldr	r3, [r3, #0]
    4410:	681b      	ldr	r3, [r3, #0]
    4412:	4a63      	ldr	r2, [pc, #396]	; (45a0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    4414:	6812      	ldr	r2, [r2, #0]
    4416:	4610      	mov	r0, r2
    4418:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    441a:	4b62      	ldr	r3, [pc, #392]	; (45a4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    441c:	681b      	ldr	r3, [r3, #0]
    441e:	691b      	ldr	r3, [r3, #16]
    4420:	4a61      	ldr	r2, [pc, #388]	; (45a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4422:	6812      	ldr	r2, [r2, #0]
    4424:	6812      	ldr	r2, [r2, #0]
    4426:	4610      	mov	r0, r2
    4428:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    442a:	4b60      	ldr	r3, [pc, #384]	; (45ac <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    442c:	681b      	ldr	r3, [r3, #0]
    442e:	68db      	ldr	r3, [r3, #12]
    4430:	4a5f      	ldr	r2, [pc, #380]	; (45b0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4432:	6812      	ldr	r2, [r2, #0]
    4434:	6812      	ldr	r2, [r2, #0]
    4436:	4610      	mov	r0, r2
    4438:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    443a:	4b5e      	ldr	r3, [pc, #376]	; (45b4 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    443c:	681b      	ldr	r3, [r3, #0]
    443e:	689b      	ldr	r3, [r3, #8]
    4440:	4a5d      	ldr	r2, [pc, #372]	; (45b8 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4442:	6812      	ldr	r2, [r2, #0]
    4444:	6812      	ldr	r2, [r2, #0]
    4446:	4610      	mov	r0, r2
    4448:	4798      	blx	r3
            }
        }
        break;
    444a:	e090      	b.n	456e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    444c:	9b00      	ldr	r3, [sp, #0]
    444e:	2b02      	cmp	r3, #2
    4450:	f040 808f 	bne.w	4572 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4454:	4b4a      	ldr	r3, [pc, #296]	; (4580 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4456:	2201      	movs	r2, #1
    4458:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    445a:	4b56      	ldr	r3, [pc, #344]	; (45b4 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    445c:	681b      	ldr	r3, [r3, #0]
    445e:	685b      	ldr	r3, [r3, #4]
    4460:	4a55      	ldr	r2, [pc, #340]	; (45b8 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4462:	6812      	ldr	r2, [r2, #0]
    4464:	4610      	mov	r0, r2
    4466:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4468:	4b50      	ldr	r3, [pc, #320]	; (45ac <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    446a:	681b      	ldr	r3, [r3, #0]
    446c:	691b      	ldr	r3, [r3, #16]
    446e:	4a50      	ldr	r2, [pc, #320]	; (45b0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4470:	6812      	ldr	r2, [r2, #0]
    4472:	4610      	mov	r0, r2
    4474:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4476:	4b4d      	ldr	r3, [pc, #308]	; (45ac <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4478:	681b      	ldr	r3, [r3, #0]
    447a:	689b      	ldr	r3, [r3, #8]
    447c:	4a4c      	ldr	r2, [pc, #304]	; (45b0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    447e:	6812      	ldr	r2, [r2, #0]
    4480:	4610      	mov	r0, r2
    4482:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4484:	4b47      	ldr	r3, [pc, #284]	; (45a4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4486:	681b      	ldr	r3, [r3, #0]
    4488:	68db      	ldr	r3, [r3, #12]
    448a:	4a47      	ldr	r2, [pc, #284]	; (45a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    448c:	6812      	ldr	r2, [r2, #0]
    448e:	4610      	mov	r0, r2
    4490:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4492:	4b44      	ldr	r3, [pc, #272]	; (45a4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4494:	681b      	ldr	r3, [r3, #0]
    4496:	689b      	ldr	r3, [r3, #8]
    4498:	4a43      	ldr	r2, [pc, #268]	; (45a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    449a:	6812      	ldr	r2, [r2, #0]
    449c:	6812      	ldr	r2, [r2, #0]
    449e:	4610      	mov	r0, r2
    44a0:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    44a2:	4b38      	ldr	r3, [pc, #224]	; (4584 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    44a4:	681b      	ldr	r3, [r3, #0]
    44a6:	685b      	ldr	r3, [r3, #4]
    44a8:	4a44      	ldr	r2, [pc, #272]	; (45bc <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    44aa:	6812      	ldr	r2, [r2, #0]
    44ac:	4610      	mov	r0, r2
    44ae:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    44b0:	4b36      	ldr	r3, [pc, #216]	; (458c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    44b2:	681b      	ldr	r3, [r3, #0]
    44b4:	681b      	ldr	r3, [r3, #0]
    44b6:	4a42      	ldr	r2, [pc, #264]	; (45c0 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    44b8:	6812      	ldr	r2, [r2, #0]
    44ba:	4610      	mov	r0, r2
    44bc:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    44be:	4b35      	ldr	r3, [pc, #212]	; (4594 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    44c0:	681b      	ldr	r3, [r3, #0]
    44c2:	681b      	ldr	r3, [r3, #0]
    44c4:	4a3f      	ldr	r2, [pc, #252]	; (45c4 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    44c6:	6812      	ldr	r2, [r2, #0]
    44c8:	4610      	mov	r0, r2
    44ca:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    44cc:	4b33      	ldr	r3, [pc, #204]	; (459c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    44ce:	681b      	ldr	r3, [r3, #0]
    44d0:	681b      	ldr	r3, [r3, #0]
    44d2:	4a3d      	ldr	r2, [pc, #244]	; (45c8 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    44d4:	6812      	ldr	r2, [r2, #0]
    44d6:	4610      	mov	r0, r2
    44d8:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    44da:	e04a      	b.n	4572 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    44dc:	9b00      	ldr	r3, [sp, #0]
    44de:	2b02      	cmp	r3, #2
    44e0:	d149      	bne.n	4576 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    44e2:	4b27      	ldr	r3, [pc, #156]	; (4580 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    44e4:	2201      	movs	r2, #1
    44e6:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    44e8:	4b32      	ldr	r3, [pc, #200]	; (45b4 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    44ea:	681b      	ldr	r3, [r3, #0]
    44ec:	685b      	ldr	r3, [r3, #4]
    44ee:	4a32      	ldr	r2, [pc, #200]	; (45b8 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    44f0:	6812      	ldr	r2, [r2, #0]
    44f2:	4610      	mov	r0, r2
    44f4:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    44f6:	4b2d      	ldr	r3, [pc, #180]	; (45ac <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    44f8:	681b      	ldr	r3, [r3, #0]
    44fa:	691b      	ldr	r3, [r3, #16]
    44fc:	4a2c      	ldr	r2, [pc, #176]	; (45b0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    44fe:	6812      	ldr	r2, [r2, #0]
    4500:	4610      	mov	r0, r2
    4502:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4504:	4b29      	ldr	r3, [pc, #164]	; (45ac <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4506:	681b      	ldr	r3, [r3, #0]
    4508:	689b      	ldr	r3, [r3, #8]
    450a:	4a29      	ldr	r2, [pc, #164]	; (45b0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    450c:	6812      	ldr	r2, [r2, #0]
    450e:	4610      	mov	r0, r2
    4510:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4512:	4b24      	ldr	r3, [pc, #144]	; (45a4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4514:	681b      	ldr	r3, [r3, #0]
    4516:	68db      	ldr	r3, [r3, #12]
    4518:	4a23      	ldr	r2, [pc, #140]	; (45a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    451a:	6812      	ldr	r2, [r2, #0]
    451c:	4610      	mov	r0, r2
    451e:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4520:	4b20      	ldr	r3, [pc, #128]	; (45a4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4522:	681b      	ldr	r3, [r3, #0]
    4524:	689b      	ldr	r3, [r3, #8]
    4526:	4a20      	ldr	r2, [pc, #128]	; (45a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4528:	6812      	ldr	r2, [r2, #0]
    452a:	6812      	ldr	r2, [r2, #0]
    452c:	4610      	mov	r0, r2
    452e:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    4530:	4b26      	ldr	r3, [pc, #152]	; (45cc <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    4532:	681b      	ldr	r3, [r3, #0]
    4534:	685b      	ldr	r3, [r3, #4]
    4536:	4a26      	ldr	r2, [pc, #152]	; (45d0 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4538:	6812      	ldr	r2, [r2, #0]
    453a:	4610      	mov	r0, r2
    453c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    453e:	4b25      	ldr	r3, [pc, #148]	; (45d4 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    4540:	681b      	ldr	r3, [r3, #0]
    4542:	681b      	ldr	r3, [r3, #0]
    4544:	4a24      	ldr	r2, [pc, #144]	; (45d8 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4546:	6812      	ldr	r2, [r2, #0]
    4548:	4610      	mov	r0, r2
    454a:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    454c:	4b23      	ldr	r3, [pc, #140]	; (45dc <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    454e:	681b      	ldr	r3, [r3, #0]
    4550:	681b      	ldr	r3, [r3, #0]
    4552:	4a23      	ldr	r2, [pc, #140]	; (45e0 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4554:	6812      	ldr	r2, [r2, #0]
    4556:	4610      	mov	r0, r2
    4558:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    455a:	4b22      	ldr	r3, [pc, #136]	; (45e4 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    455c:	681b      	ldr	r3, [r3, #0]
    455e:	681b      	ldr	r3, [r3, #0]
    4560:	4a21      	ldr	r2, [pc, #132]	; (45e8 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    4562:	6812      	ldr	r2, [r2, #0]
    4564:	4610      	mov	r0, r2
    4566:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4568:	e005      	b.n	4576 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    456a:	bf00      	nop
    456c:	e004      	b.n	4578 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    456e:	bf00      	nop
    4570:	e002      	b.n	4578 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4572:	bf00      	nop
    4574:	e000      	b.n	4578 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4576:	bf00      	nop
    }

}
    4578:	bf00      	nop
    457a:	b003      	add	sp, #12
    457c:	f85d fb04 	ldr.w	pc, [sp], #4
    4580:	1fff8b19 	.word	0x1fff8b19
    4584:	1fff8bb8 	.word	0x1fff8bb8
    4588:	1fff8bd8 	.word	0x1fff8bd8
    458c:	1fff8bbc 	.word	0x1fff8bbc
    4590:	1fff8be0 	.word	0x1fff8be0
    4594:	1fff8bc0 	.word	0x1fff8bc0
    4598:	1fff8be8 	.word	0x1fff8be8
    459c:	1fff8bc4 	.word	0x1fff8bc4
    45a0:	1fff8bf0 	.word	0x1fff8bf0
    45a4:	1fff8bac 	.word	0x1fff8bac
    45a8:	1fff8bd0 	.word	0x1fff8bd0
    45ac:	1fff8bb0 	.word	0x1fff8bb0
    45b0:	1fff8bcc 	.word	0x1fff8bcc
    45b4:	1fff8bb4 	.word	0x1fff8bb4
    45b8:	1fff8bc8 	.word	0x1fff8bc8
    45bc:	1fff8bd4 	.word	0x1fff8bd4
    45c0:	1fff8bdc 	.word	0x1fff8bdc
    45c4:	1fff8be4 	.word	0x1fff8be4
    45c8:	1fff8bec 	.word	0x1fff8bec
    45cc:	1fff8bf4 	.word	0x1fff8bf4
    45d0:	1fff8c04 	.word	0x1fff8c04
    45d4:	1fff8bf8 	.word	0x1fff8bf8
    45d8:	1fff8c08 	.word	0x1fff8c08
    45dc:	1fff8bfc 	.word	0x1fff8bfc
    45e0:	1fff8c0c 	.word	0x1fff8c0c
    45e4:	1fff8c00 	.word	0x1fff8c00
    45e8:	1fff8c10 	.word	0x1fff8c10

000045ec <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    45ec:	b500      	push	{lr}
    45ee:	b083      	sub	sp, #12
    45f0:	9001      	str	r0, [sp, #4]
    45f2:	9100      	str	r1, [sp, #0]
    switch(Command)
    45f4:	9b00      	ldr	r3, [sp, #0]
    45f6:	2b04      	cmp	r3, #4
    45f8:	d010      	beq.n	461c <Clock_Ip_Command+0x30>
    45fa:	9b00      	ldr	r3, [sp, #0]
    45fc:	2b04      	cmp	r3, #4
    45fe:	d811      	bhi.n	4624 <Clock_Ip_Command+0x38>
    4600:	9b00      	ldr	r3, [sp, #0]
    4602:	2b01      	cmp	r3, #1
    4604:	d006      	beq.n	4614 <Clock_Ip_Command+0x28>
    4606:	9b00      	ldr	r3, [sp, #0]
    4608:	2b02      	cmp	r3, #2
    460a:	d10b      	bne.n	4624 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    460c:	9801      	ldr	r0, [sp, #4]
    460e:	f7ff fdb3 	bl	4178 <Clock_Ip_ClockInitializeObjects>
            break;
    4612:	e008      	b.n	4626 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    4614:	9801      	ldr	r0, [sp, #4]
    4616:	f7ff f9db 	bl	39d0 <Clock_Ip_SpecificPlatformInitClock>
            break;
    461a:	e004      	b.n	4626 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    461c:	9801      	ldr	r0, [sp, #4]
    461e:	f7ff f8ed 	bl	37fc <DisableSafeClock>
            break;
    4622:	e000      	b.n	4626 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    4624:	bf00      	nop
    }
}
    4626:	bf00      	nop
    4628:	b003      	add	sp, #12
    462a:	f85d fb04 	ldr.w	pc, [sp], #4
    462e:	bf00      	nop

00004630 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    4630:	b500      	push	{lr}
    4632:	b085      	sub	sp, #20
    4634:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    4636:	4a20      	ldr	r2, [pc, #128]	; (46b8 <Mcu_Init+0x88>)
    4638:	9b01      	ldr	r3, [sp, #4]
    463a:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    463c:	2300      	movs	r3, #0
    463e:	9303      	str	r3, [sp, #12]
    4640:	e010      	b.n	4664 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    4642:	4b1d      	ldr	r3, [pc, #116]	; (46b8 <Mcu_Init+0x88>)
    4644:	681b      	ldr	r3, [r3, #0]
    4646:	6919      	ldr	r1, [r3, #16]
    4648:	9a03      	ldr	r2, [sp, #12]
    464a:	4613      	mov	r3, r2
    464c:	005b      	lsls	r3, r3, #1
    464e:	4413      	add	r3, r2
    4650:	009b      	lsls	r3, r3, #2
    4652:	440b      	add	r3, r1
    4654:	681b      	ldr	r3, [r3, #0]
    4656:	9a03      	ldr	r2, [sp, #12]
    4658:	b2d1      	uxtb	r1, r2
    465a:	4a18      	ldr	r2, [pc, #96]	; (46bc <Mcu_Init+0x8c>)
    465c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    465e:	9b03      	ldr	r3, [sp, #12]
    4660:	3301      	adds	r3, #1
    4662:	9303      	str	r3, [sp, #12]
    4664:	4b14      	ldr	r3, [pc, #80]	; (46b8 <Mcu_Init+0x88>)
    4666:	681b      	ldr	r3, [r3, #0]
    4668:	689b      	ldr	r3, [r3, #8]
    466a:	9a03      	ldr	r2, [sp, #12]
    466c:	429a      	cmp	r2, r3
    466e:	d3e8      	bcc.n	4642 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4670:	2300      	movs	r3, #0
    4672:	9303      	str	r3, [sp, #12]
    4674:	e010      	b.n	4698 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    4676:	4b10      	ldr	r3, [pc, #64]	; (46b8 <Mcu_Init+0x88>)
    4678:	681b      	ldr	r3, [r3, #0]
    467a:	6959      	ldr	r1, [r3, #20]
    467c:	9a03      	ldr	r2, [sp, #12]
    467e:	4613      	mov	r3, r2
    4680:	01db      	lsls	r3, r3, #7
    4682:	1a9b      	subs	r3, r3, r2
    4684:	00db      	lsls	r3, r3, #3
    4686:	440b      	add	r3, r1
    4688:	681b      	ldr	r3, [r3, #0]
    468a:	9a03      	ldr	r2, [sp, #12]
    468c:	b2d1      	uxtb	r1, r2
    468e:	4a0c      	ldr	r2, [pc, #48]	; (46c0 <Mcu_Init+0x90>)
    4690:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4692:	9b03      	ldr	r3, [sp, #12]
    4694:	3301      	adds	r3, #1
    4696:	9303      	str	r3, [sp, #12]
    4698:	4b07      	ldr	r3, [pc, #28]	; (46b8 <Mcu_Init+0x88>)
    469a:	681b      	ldr	r3, [r3, #0]
    469c:	68db      	ldr	r3, [r3, #12]
    469e:	9a03      	ldr	r2, [sp, #12]
    46a0:	429a      	cmp	r2, r3
    46a2:	d3e8      	bcc.n	4676 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    46a4:	4b04      	ldr	r3, [pc, #16]	; (46b8 <Mcu_Init+0x88>)
    46a6:	681b      	ldr	r3, [r3, #0]
    46a8:	699b      	ldr	r3, [r3, #24]
    46aa:	4618      	mov	r0, r3
    46ac:	f000 f88a 	bl	47c4 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    46b0:	bf00      	nop
    46b2:	b005      	add	sp, #20
    46b4:	f85d fb04 	ldr.w	pc, [sp], #4
    46b8:	1fff8cec 	.word	0x1fff8cec
    46bc:	1fff8ce8 	.word	0x1fff8ce8
    46c0:	1fff8ce4 	.word	0x1fff8ce4

000046c4 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    46c4:	b084      	sub	sp, #16
    46c6:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    46c8:	2301      	movs	r3, #1
    46ca:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    46ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    46d2:	4618      	mov	r0, r3
    46d4:	b004      	add	sp, #16
    46d6:	4770      	bx	lr

000046d8 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    46d8:	b500      	push	{lr}
    46da:	b085      	sub	sp, #20
    46dc:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    46de:	4a0e      	ldr	r2, [pc, #56]	; (4718 <Mcu_InitClock+0x40>)
    46e0:	9b01      	ldr	r3, [sp, #4]
    46e2:	4413      	add	r3, r2
    46e4:	781b      	ldrb	r3, [r3, #0]
    46e6:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    46ea:	4b0c      	ldr	r3, [pc, #48]	; (471c <Mcu_InitClock+0x44>)
    46ec:	681b      	ldr	r3, [r3, #0]
    46ee:	6959      	ldr	r1, [r3, #20]
    46f0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    46f4:	4613      	mov	r3, r2
    46f6:	01db      	lsls	r3, r3, #7
    46f8:	1a9b      	subs	r3, r3, r2
    46fa:	00db      	lsls	r3, r3, #3
    46fc:	440b      	add	r3, r1
    46fe:	4618      	mov	r0, r3
    4700:	f000 f86a 	bl	47d8 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    4704:	2300      	movs	r3, #0
    4706:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    470a:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    470e:	4618      	mov	r0, r3
    4710:	b005      	add	sp, #20
    4712:	f85d fb04 	ldr.w	pc, [sp], #4
    4716:	bf00      	nop
    4718:	1fff8ce4 	.word	0x1fff8ce4
    471c:	1fff8cec 	.word	0x1fff8cec

00004720 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    4720:	b500      	push	{lr}
    4722:	b085      	sub	sp, #20
    4724:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    4726:	4a0d      	ldr	r2, [pc, #52]	; (475c <Mcu_SetMode+0x3c>)
    4728:	9b01      	ldr	r3, [sp, #4]
    472a:	4413      	add	r3, r2
    472c:	781b      	ldrb	r3, [r3, #0]
    472e:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    4732:	f001 fb27 	bl	5d84 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    4736:	4b0a      	ldr	r3, [pc, #40]	; (4760 <Mcu_SetMode+0x40>)
    4738:	681b      	ldr	r3, [r3, #0]
    473a:	6919      	ldr	r1, [r3, #16]
    473c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4740:	4613      	mov	r3, r2
    4742:	005b      	lsls	r3, r3, #1
    4744:	4413      	add	r3, r2
    4746:	009b      	lsls	r3, r3, #2
    4748:	440b      	add	r3, r1
    474a:	4618      	mov	r0, r3
    474c:	f000 f84e 	bl	47ec <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    4750:	f001 fb44 	bl	5ddc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4754:	bf00      	nop
    4756:	b005      	add	sp, #20
    4758:	f85d fb04 	ldr.w	pc, [sp], #4
    475c:	1fff8ce8 	.word	0x1fff8ce8
    4760:	1fff8cec 	.word	0x1fff8cec

00004764 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    4764:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    4766:	2302      	movs	r3, #2
    4768:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    476a:	9b01      	ldr	r3, [sp, #4]
}
    476c:	4618      	mov	r0, r3
    476e:	b002      	add	sp, #8
    4770:	4770      	bx	lr

00004772 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    4772:	b500      	push	{lr}
    4774:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    4776:	f000 f843 	bl	4800 <Mcu_Ipw_GetResetReason>
    477a:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    477c:	9b01      	ldr	r3, [sp, #4]
}
    477e:	4618      	mov	r0, r3
    4780:	b003      	add	sp, #12
    4782:	f85d fb04 	ldr.w	pc, [sp], #4

00004786 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    4786:	b500      	push	{lr}
    4788:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    478a:	f000 f83f 	bl	480c <Mcu_Ipw_GetResetRawValue>
    478e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    4790:	9b01      	ldr	r3, [sp, #4]
}
    4792:	4618      	mov	r0, r3
    4794:	b003      	add	sp, #12
    4796:	f85d fb04 	ldr.w	pc, [sp], #4

0000479a <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    479a:	b500      	push	{lr}
    479c:	b083      	sub	sp, #12
    479e:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    47a0:	9801      	ldr	r0, [sp, #4]
    47a2:	f000 f839 	bl	4818 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    47a6:	bf00      	nop
    47a8:	b003      	add	sp, #12
    47aa:	f85d fb04 	ldr.w	pc, [sp], #4

000047ae <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    47ae:	b082      	sub	sp, #8
    47b0:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    47b2:	4b03      	ldr	r3, [pc, #12]	; (47c0 <Mcu_ClkSrcFailureNotification+0x12>)
    47b4:	681b      	ldr	r3, [r3, #0]
    47b6:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    47b8:	bf00      	nop
    47ba:	b002      	add	sp, #8
    47bc:	4770      	bx	lr
    47be:	bf00      	nop
    47c0:	1fff8cec 	.word	0x1fff8cec

000047c4 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    47c4:	b500      	push	{lr}
    47c6:	b083      	sub	sp, #12
    47c8:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    47ca:	9801      	ldr	r0, [sp, #4]
    47cc:	f000 f882 	bl	48d4 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    47d0:	bf00      	nop
    47d2:	b003      	add	sp, #12
    47d4:	f85d fb04 	ldr.w	pc, [sp], #4

000047d8 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    47d8:	b500      	push	{lr}
    47da:	b083      	sub	sp, #12
    47dc:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    47de:	9801      	ldr	r0, [sp, #4]
    47e0:	f7fc fc6a 	bl	10b8 <Clock_Ip_InitClock>
}
    47e4:	bf00      	nop
    47e6:	b003      	add	sp, #12
    47e8:	f85d fb04 	ldr.w	pc, [sp], #4

000047ec <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    47ec:	b500      	push	{lr}
    47ee:	b083      	sub	sp, #12
    47f0:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    47f2:	9801      	ldr	r0, [sp, #4]
    47f4:	f000 f820 	bl	4838 <Power_Ip_SetMode>
}
    47f8:	bf00      	nop
    47fa:	b003      	add	sp, #12
    47fc:	f85d fb04 	ldr.w	pc, [sp], #4

00004800 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    4800:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    4802:	f000 f84f 	bl	48a4 <Power_Ip_GetResetReason>
    4806:	4603      	mov	r3, r0
}
    4808:	4618      	mov	r0, r3
    480a:	bd08      	pop	{r3, pc}

0000480c <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    480c:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    480e:	f000 f857 	bl	48c0 <Power_Ip_GetResetRawValue>
    4812:	4603      	mov	r3, r0
}
    4814:	4618      	mov	r0, r3
    4816:	bd08      	pop	{r3, pc}

00004818 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4818:	b500      	push	{lr}
    481a:	b083      	sub	sp, #12
    481c:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    481e:	9b01      	ldr	r3, [sp, #4]
    4820:	2b00      	cmp	r3, #0
    4822:	d102      	bne.n	482a <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    4824:	f000 f86c 	bl	4900 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    4828:	e001      	b.n	482e <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    482a:	f000 f86e 	bl	490a <Power_Ip_EnableSleepOnExit>
}
    482e:	bf00      	nop
    4830:	b003      	add	sp, #12
    4832:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004838 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4838:	b500      	push	{lr}
    483a:	b085      	sub	sp, #20
    483c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    483e:	9b01      	ldr	r3, [sp, #4]
    4840:	685b      	ldr	r3, [r3, #4]
    4842:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    4844:	9802      	ldr	r0, [sp, #8]
    4846:	f000 f9f5 	bl	4c34 <Power_Ip_SMC_ModeCheckEntry>
    484a:	4603      	mov	r3, r0
    484c:	2b00      	cmp	r3, #0
    484e:	d002      	beq.n	4856 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4850:	2301      	movs	r3, #1
    4852:	9303      	str	r3, [sp, #12]
    4854:	e003      	b.n	485e <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    4856:	9801      	ldr	r0, [sp, #4]
    4858:	f000 fa1e 	bl	4c98 <Power_Ip_SMC_ModeConfig>
    485c:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    485e:	9b03      	ldr	r3, [sp, #12]
    4860:	2b01      	cmp	r3, #1
    4862:	d103      	bne.n	486c <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4864:	21ff      	movs	r1, #255	; 0xff
    4866:	2003      	movs	r0, #3
    4868:	f000 f8f4 	bl	4a54 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    486c:	bf00      	nop
    486e:	b005      	add	sp, #20
    4870:	f85d fb04 	ldr.w	pc, [sp], #4

00004874 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    4874:	b084      	sub	sp, #16
    4876:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    4878:	230c      	movs	r3, #12
    487a:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    487c:	4a08      	ldr	r2, [pc, #32]	; (48a0 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    487e:	9b01      	ldr	r3, [sp, #4]
    4880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4884:	2b0e      	cmp	r3, #14
    4886:	d805      	bhi.n	4894 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    4888:	4a05      	ldr	r2, [pc, #20]	; (48a0 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    488a:	9b01      	ldr	r3, [sp, #4]
    488c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4890:	9303      	str	r3, [sp, #12]
    4892:	e001      	b.n	4898 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    4894:	230c      	movs	r3, #12
    4896:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    4898:	9b03      	ldr	r3, [sp, #12]
}
    489a:	4618      	mov	r0, r3
    489c:	b004      	add	sp, #16
    489e:	4770      	bx	lr
    48a0:	000078ac 	.word	0x000078ac

000048a4 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    48a4:	b500      	push	{lr}
    48a6:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    48a8:	f000 f940 	bl	4b2c <Power_Ip_RCM_GetResetReason>
    48ac:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    48ae:	9801      	ldr	r0, [sp, #4]
    48b0:	f7ff ffe0 	bl	4874 <Power_Ip_ConvertIntergeToResetType>
    48b4:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    48b6:	9b00      	ldr	r3, [sp, #0]
}
    48b8:	4618      	mov	r0, r3
    48ba:	b003      	add	sp, #12
    48bc:	f85d fb04 	ldr.w	pc, [sp], #4

000048c0 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    48c0:	b500      	push	{lr}
    48c2:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    48c4:	f000 f98a 	bl	4bdc <Power_Ip_RCM_GetResetRawValue>
    48c8:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    48ca:	9b01      	ldr	r3, [sp, #4]
}
    48cc:	4618      	mov	r0, r3
    48ce:	b003      	add	sp, #12
    48d0:	f85d fb04 	ldr.w	pc, [sp], #4

000048d4 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    48d4:	b500      	push	{lr}
    48d6:	b083      	sub	sp, #12
    48d8:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    48da:	9b01      	ldr	r3, [sp, #4]
    48dc:	681b      	ldr	r3, [r3, #0]
    48de:	4618      	mov	r0, r3
    48e0:	f000 f90e 	bl	4b00 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    48e4:	9b01      	ldr	r3, [sp, #4]
    48e6:	685b      	ldr	r3, [r3, #4]
    48e8:	4618      	mov	r0, r3
    48ea:	f000 f86d 	bl	49c8 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    48ee:	9b01      	ldr	r3, [sp, #4]
    48f0:	689b      	ldr	r3, [r3, #8]
    48f2:	4618      	mov	r0, r3
    48f4:	f000 f990 	bl	4c18 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    48f8:	bf00      	nop
    48fa:	b003      	add	sp, #12
    48fc:	f85d fb04 	ldr.w	pc, [sp], #4

00004900 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    4900:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    4902:	f000 f811 	bl	4928 <Power_Ip_CM4_DisableSleepOnExit>
}
    4906:	bf00      	nop
    4908:	bd08      	pop	{r3, pc}

0000490a <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    490a:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    490c:	f000 f820 	bl	4950 <Power_Ip_CM4_EnableSleepOnExit>
}
    4910:	bf00      	nop
    4912:	bd08      	pop	{r3, pc}

00004914 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    4914:	b082      	sub	sp, #8
    4916:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    4918:	4a02      	ldr	r2, [pc, #8]	; (4924 <Power_Ip_InstallNotificationsCallback+0x10>)
    491a:	9b01      	ldr	r3, [sp, #4]
    491c:	6013      	str	r3, [r2, #0]
}
    491e:	bf00      	nop
    4920:	b002      	add	sp, #8
    4922:	4770      	bx	lr
    4924:	1fff8b1c 	.word	0x1fff8b1c

00004928 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    4928:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    492a:	2300      	movs	r3, #0
    492c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    492e:	4b07      	ldr	r3, [pc, #28]	; (494c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4930:	681b      	ldr	r3, [r3, #0]
    4932:	685b      	ldr	r3, [r3, #4]
    4934:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    4936:	9b01      	ldr	r3, [sp, #4]
    4938:	f023 0302 	bic.w	r3, r3, #2
    493c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    493e:	4b03      	ldr	r3, [pc, #12]	; (494c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4940:	681b      	ldr	r3, [r3, #0]
    4942:	9a01      	ldr	r2, [sp, #4]
    4944:	605a      	str	r2, [r3, #4]
}
    4946:	bf00      	nop
    4948:	b002      	add	sp, #8
    494a:	4770      	bx	lr
    494c:	1fff8b20 	.word	0x1fff8b20

00004950 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    4950:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4952:	2300      	movs	r3, #0
    4954:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4956:	4b07      	ldr	r3, [pc, #28]	; (4974 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4958:	681b      	ldr	r3, [r3, #0]
    495a:	685b      	ldr	r3, [r3, #4]
    495c:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    495e:	9b01      	ldr	r3, [sp, #4]
    4960:	f043 0302 	orr.w	r3, r3, #2
    4964:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4966:	4b03      	ldr	r3, [pc, #12]	; (4974 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4968:	681b      	ldr	r3, [r3, #0]
    496a:	9a01      	ldr	r2, [sp, #4]
    496c:	605a      	str	r2, [r3, #4]
}
    496e:	bf00      	nop
    4970:	b002      	add	sp, #8
    4972:	4770      	bx	lr
    4974:	1fff8b20 	.word	0x1fff8b20

00004978 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    4978:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    497a:	2300      	movs	r3, #0
    497c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    497e:	4b07      	ldr	r3, [pc, #28]	; (499c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4980:	681b      	ldr	r3, [r3, #0]
    4982:	685b      	ldr	r3, [r3, #4]
    4984:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    4986:	9b01      	ldr	r3, [sp, #4]
    4988:	f043 0304 	orr.w	r3, r3, #4
    498c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    498e:	4b03      	ldr	r3, [pc, #12]	; (499c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4990:	681b      	ldr	r3, [r3, #0]
    4992:	9a01      	ldr	r2, [sp, #4]
    4994:	605a      	str	r2, [r3, #4]
}
    4996:	bf00      	nop
    4998:	b002      	add	sp, #8
    499a:	4770      	bx	lr
    499c:	1fff8b20 	.word	0x1fff8b20

000049a0 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    49a0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    49a2:	2300      	movs	r3, #0
    49a4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    49a6:	4b07      	ldr	r3, [pc, #28]	; (49c4 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    49a8:	681b      	ldr	r3, [r3, #0]
    49aa:	685b      	ldr	r3, [r3, #4]
    49ac:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    49ae:	9b01      	ldr	r3, [sp, #4]
    49b0:	f023 0304 	bic.w	r3, r3, #4
    49b4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    49b6:	4b03      	ldr	r3, [pc, #12]	; (49c4 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    49b8:	681b      	ldr	r3, [r3, #0]
    49ba:	9a01      	ldr	r2, [sp, #4]
    49bc:	605a      	str	r2, [r3, #4]
}
    49be:	bf00      	nop
    49c0:	b002      	add	sp, #8
    49c2:	4770      	bx	lr
    49c4:	1fff8b20 	.word	0x1fff8b20

000049c8 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    49c8:	b084      	sub	sp, #16
    49ca:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    49cc:	4b20      	ldr	r3, [pc, #128]	; (4a50 <Power_Ip_PMC_PowerInit+0x88>)
    49ce:	781b      	ldrb	r3, [r3, #0]
    49d0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    49d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    49d8:	f003 030f 	and.w	r3, r3, #15
    49dc:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    49e0:	9b01      	ldr	r3, [sp, #4]
    49e2:	781a      	ldrb	r2, [r3, #0]
    49e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    49e8:	4313      	orrs	r3, r2
    49ea:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    49ee:	4a18      	ldr	r2, [pc, #96]	; (4a50 <Power_Ip_PMC_PowerInit+0x88>)
    49f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    49f4:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    49f6:	4b16      	ldr	r3, [pc, #88]	; (4a50 <Power_Ip_PMC_PowerInit+0x88>)
    49f8:	785b      	ldrb	r3, [r3, #1]
    49fa:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    49fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a02:	f003 031f 	and.w	r3, r3, #31
    4a06:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    4a0a:	9b01      	ldr	r3, [sp, #4]
    4a0c:	785a      	ldrb	r2, [r3, #1]
    4a0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a12:	4313      	orrs	r3, r2
    4a14:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    4a18:	4a0d      	ldr	r2, [pc, #52]	; (4a50 <Power_Ip_PMC_PowerInit+0x88>)
    4a1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a1e:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    4a20:	4b0b      	ldr	r3, [pc, #44]	; (4a50 <Power_Ip_PMC_PowerInit+0x88>)
    4a22:	789b      	ldrb	r3, [r3, #2]
    4a24:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    4a28:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    4a30:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    4a34:	9b01      	ldr	r3, [sp, #4]
    4a36:	789a      	ldrb	r2, [r3, #2]
    4a38:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a3c:	4313      	orrs	r3, r2
    4a3e:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    4a42:	4a03      	ldr	r2, [pc, #12]	; (4a50 <Power_Ip_PMC_PowerInit+0x88>)
    4a44:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a48:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    4a4a:	bf00      	nop
    4a4c:	b004      	add	sp, #16
    4a4e:	4770      	bx	lr
    4a50:	4007d000 	.word	0x4007d000

00004a54 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    4a54:	b500      	push	{lr}
    4a56:	b083      	sub	sp, #12
    4a58:	9001      	str	r0, [sp, #4]
    4a5a:	460b      	mov	r3, r1
    4a5c:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    4a60:	4b05      	ldr	r3, [pc, #20]	; (4a78 <Power_Ip_ReportPowerErrors+0x24>)
    4a62:	681b      	ldr	r3, [r3, #0]
    4a64:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4a68:	4611      	mov	r1, r2
    4a6a:	9801      	ldr	r0, [sp, #4]
    4a6c:	4798      	blx	r3
}
    4a6e:	bf00      	nop
    4a70:	b003      	add	sp, #12
    4a72:	f85d fb04 	ldr.w	pc, [sp], #4
    4a76:	bf00      	nop
    4a78:	1fff8b1c 	.word	0x1fff8b1c

00004a7c <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    4a7c:	b082      	sub	sp, #8
    4a7e:	9001      	str	r0, [sp, #4]
    4a80:	460b      	mov	r3, r1
    4a82:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    4a86:	bf00      	nop
    4a88:	b002      	add	sp, #8
    4a8a:	4770      	bx	lr

00004a8c <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    4a8c:	b500      	push	{lr}
    4a8e:	b085      	sub	sp, #20
    4a90:	9003      	str	r0, [sp, #12]
    4a92:	9102      	str	r1, [sp, #8]
    4a94:	9201      	str	r2, [sp, #4]
    4a96:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    4a98:	2000      	movs	r0, #0
    4a9a:	f7fc f83c 	bl	b16 <OsIf_GetCounter>
    4a9e:	4602      	mov	r2, r0
    4aa0:	9b03      	ldr	r3, [sp, #12]
    4aa2:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    4aa4:	9b02      	ldr	r3, [sp, #8]
    4aa6:	2200      	movs	r2, #0
    4aa8:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    4aaa:	2100      	movs	r1, #0
    4aac:	9800      	ldr	r0, [sp, #0]
    4aae:	f7fc f87e 	bl	bae <OsIf_MicrosToTicks>
    4ab2:	4602      	mov	r2, r0
    4ab4:	9b01      	ldr	r3, [sp, #4]
    4ab6:	601a      	str	r2, [r3, #0]
}
    4ab8:	bf00      	nop
    4aba:	b005      	add	sp, #20
    4abc:	f85d fb04 	ldr.w	pc, [sp], #4

00004ac0 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    4ac0:	b500      	push	{lr}
    4ac2:	b087      	sub	sp, #28
    4ac4:	9003      	str	r0, [sp, #12]
    4ac6:	9102      	str	r1, [sp, #8]
    4ac8:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    4aca:	2300      	movs	r3, #0
    4acc:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    4ad0:	2100      	movs	r1, #0
    4ad2:	9803      	ldr	r0, [sp, #12]
    4ad4:	f7fc f838 	bl	b48 <OsIf_GetElapsed>
    4ad8:	4602      	mov	r2, r0
    4ada:	9b02      	ldr	r3, [sp, #8]
    4adc:	681b      	ldr	r3, [r3, #0]
    4ade:	441a      	add	r2, r3
    4ae0:	9b02      	ldr	r3, [sp, #8]
    4ae2:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    4ae4:	9b02      	ldr	r3, [sp, #8]
    4ae6:	681b      	ldr	r3, [r3, #0]
    4ae8:	9a01      	ldr	r2, [sp, #4]
    4aea:	429a      	cmp	r2, r3
    4aec:	d802      	bhi.n	4af4 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    4aee:	2301      	movs	r3, #1
    4af0:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    4af4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    4af8:	4618      	mov	r0, r3
    4afa:	b007      	add	sp, #28
    4afc:	f85d fb04 	ldr.w	pc, [sp], #4

00004b00 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    4b00:	b082      	sub	sp, #8
    4b02:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    4b04:	9b01      	ldr	r3, [sp, #4]
    4b06:	681a      	ldr	r2, [r3, #0]
    4b08:	4907      	ldr	r1, [pc, #28]	; (4b28 <Power_Ip_RCM_ResetInit+0x28>)
    4b0a:	f641 7307 	movw	r3, #7943	; 0x1f07
    4b0e:	4013      	ands	r3, r2
    4b10:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    4b12:	9b01      	ldr	r3, [sp, #4]
    4b14:	685a      	ldr	r2, [r3, #4]
    4b16:	4904      	ldr	r1, [pc, #16]	; (4b28 <Power_Ip_RCM_ResetInit+0x28>)
    4b18:	f642 73ff 	movw	r3, #12287	; 0x2fff
    4b1c:	4013      	ands	r3, r2
    4b1e:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    4b20:	bf00      	nop
    4b22:	b002      	add	sp, #8
    4b24:	4770      	bx	lr
    4b26:	bf00      	nop
    4b28:	4007f000 	.word	0x4007f000

00004b2c <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    4b2c:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    4b2e:	230c      	movs	r3, #12
    4b30:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    4b32:	2300      	movs	r3, #0
    4b34:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    4b36:	2300      	movs	r3, #0
    4b38:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    4b3a:	2300      	movs	r3, #0
    4b3c:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    4b3e:	4b25      	ldr	r3, [pc, #148]	; (4bd4 <Power_Ip_RCM_GetResetReason+0xa8>)
    4b40:	699a      	ldr	r2, [r3, #24]
    4b42:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4b46:	4013      	ands	r3, r2
    4b48:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    4b4a:	9b03      	ldr	r3, [sp, #12]
    4b4c:	2b00      	cmp	r3, #0
    4b4e:	d008      	beq.n	4b62 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    4b50:	4920      	ldr	r1, [pc, #128]	; (4bd4 <Power_Ip_RCM_GetResetReason+0xa8>)
    4b52:	9a03      	ldr	r2, [sp, #12]
    4b54:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4b58:	4013      	ands	r3, r2
    4b5a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    4b5c:	4a1e      	ldr	r2, [pc, #120]	; (4bd8 <Power_Ip_RCM_GetResetReason+0xac>)
    4b5e:	9b03      	ldr	r3, [sp, #12]
    4b60:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    4b62:	4b1d      	ldr	r3, [pc, #116]	; (4bd8 <Power_Ip_RCM_GetResetReason+0xac>)
    4b64:	681b      	ldr	r3, [r3, #0]
    4b66:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    4b68:	9a02      	ldr	r2, [sp, #8]
    4b6a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4b6e:	4013      	ands	r3, r2
    4b70:	2b82      	cmp	r3, #130	; 0x82
    4b72:	d102      	bne.n	4b7a <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    4b74:	2305      	movs	r3, #5
    4b76:	9307      	str	r3, [sp, #28]
    4b78:	e027      	b.n	4bca <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    4b7a:	2300      	movs	r3, #0
    4b7c:	9306      	str	r3, [sp, #24]
    4b7e:	e021      	b.n	4bc4 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    4b80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4b84:	9b06      	ldr	r3, [sp, #24]
    4b86:	fa22 f303 	lsr.w	r3, r2, r3
    4b8a:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    4b8c:	9a01      	ldr	r2, [sp, #4]
    4b8e:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    4b92:	4013      	ands	r3, r2
    4b94:	2b00      	cmp	r3, #0
    4b96:	d012      	beq.n	4bbe <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    4b98:	9a01      	ldr	r2, [sp, #4]
    4b9a:	9b02      	ldr	r3, [sp, #8]
    4b9c:	4013      	ands	r3, r2
    4b9e:	2b00      	cmp	r3, #0
    4ba0:	d00a      	beq.n	4bb8 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    4ba2:	9b05      	ldr	r3, [sp, #20]
    4ba4:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    4ba6:	9b04      	ldr	r3, [sp, #16]
    4ba8:	3301      	adds	r3, #1
    4baa:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    4bac:	9b04      	ldr	r3, [sp, #16]
    4bae:	2b01      	cmp	r3, #1
    4bb0:	d902      	bls.n	4bb8 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    4bb2:	230d      	movs	r3, #13
    4bb4:	9307      	str	r3, [sp, #28]
                        break;
    4bb6:	e008      	b.n	4bca <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    4bb8:	9b05      	ldr	r3, [sp, #20]
    4bba:	3301      	adds	r3, #1
    4bbc:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    4bbe:	9b06      	ldr	r3, [sp, #24]
    4bc0:	3301      	adds	r3, #1
    4bc2:	9306      	str	r3, [sp, #24]
    4bc4:	9b06      	ldr	r3, [sp, #24]
    4bc6:	2b1f      	cmp	r3, #31
    4bc8:	d9da      	bls.n	4b80 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    4bca:	9b07      	ldr	r3, [sp, #28]
}
    4bcc:	4618      	mov	r0, r3
    4bce:	b008      	add	sp, #32
    4bd0:	4770      	bx	lr
    4bd2:	bf00      	nop
    4bd4:	4007f000 	.word	0x4007f000
    4bd8:	1fff8cf0 	.word	0x1fff8cf0

00004bdc <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    4bdc:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    4bde:	4b0c      	ldr	r3, [pc, #48]	; (4c10 <Power_Ip_RCM_GetResetRawValue+0x34>)
    4be0:	699a      	ldr	r2, [r3, #24]
    4be2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4be6:	4013      	ands	r3, r2
    4be8:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    4bea:	9b01      	ldr	r3, [sp, #4]
    4bec:	2b00      	cmp	r3, #0
    4bee:	d008      	beq.n	4c02 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    4bf0:	4907      	ldr	r1, [pc, #28]	; (4c10 <Power_Ip_RCM_GetResetRawValue+0x34>)
    4bf2:	9a01      	ldr	r2, [sp, #4]
    4bf4:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4bf8:	4013      	ands	r3, r2
    4bfa:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    4bfc:	4a05      	ldr	r2, [pc, #20]	; (4c14 <Power_Ip_RCM_GetResetRawValue+0x38>)
    4bfe:	9b01      	ldr	r3, [sp, #4]
    4c00:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    4c02:	4b04      	ldr	r3, [pc, #16]	; (4c14 <Power_Ip_RCM_GetResetRawValue+0x38>)
    4c04:	681b      	ldr	r3, [r3, #0]
    4c06:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    4c08:	9b00      	ldr	r3, [sp, #0]
}
    4c0a:	4618      	mov	r0, r3
    4c0c:	b002      	add	sp, #8
    4c0e:	4770      	bx	lr
    4c10:	4007f000 	.word	0x4007f000
    4c14:	1fff8cf0 	.word	0x1fff8cf0

00004c18 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    4c18:	b082      	sub	sp, #8
    4c1a:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    4c1c:	9b01      	ldr	r3, [sp, #4]
    4c1e:	681b      	ldr	r3, [r3, #0]
    4c20:	4a03      	ldr	r2, [pc, #12]	; (4c30 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    4c22:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    4c26:	6093      	str	r3, [r2, #8]
}
    4c28:	bf00      	nop
    4c2a:	b002      	add	sp, #8
    4c2c:	4770      	bx	lr
    4c2e:	bf00      	nop
    4c30:	4007e000 	.word	0x4007e000

00004c34 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    4c34:	b084      	sub	sp, #16
    4c36:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    4c38:	2301      	movs	r3, #1
    4c3a:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    4c3c:	4b15      	ldr	r3, [pc, #84]	; (4c94 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    4c3e:	695b      	ldr	r3, [r3, #20]
    4c40:	b2db      	uxtb	r3, r3
    4c42:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    4c44:	9b01      	ldr	r3, [sp, #4]
    4c46:	2b02      	cmp	r3, #2
    4c48:	d012      	beq.n	4c70 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    4c4a:	9b01      	ldr	r3, [sp, #4]
    4c4c:	2b02      	cmp	r3, #2
    4c4e:	d818      	bhi.n	4c82 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    4c50:	9b01      	ldr	r3, [sp, #4]
    4c52:	2b00      	cmp	r3, #0
    4c54:	d003      	beq.n	4c5e <Power_Ip_SMC_ModeCheckEntry+0x2a>
    4c56:	9b01      	ldr	r3, [sp, #4]
    4c58:	2b01      	cmp	r3, #1
    4c5a:	d003      	beq.n	4c64 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    4c5c:	e011      	b.n	4c82 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    4c5e:	2300      	movs	r3, #0
    4c60:	9303      	str	r3, [sp, #12]
            break;
    4c62:	e013      	b.n	4c8c <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    4c64:	9b02      	ldr	r3, [sp, #8]
    4c66:	2b01      	cmp	r3, #1
    4c68:	d10d      	bne.n	4c86 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    4c6a:	2300      	movs	r3, #0
    4c6c:	9303      	str	r3, [sp, #12]
            break;
    4c6e:	e00a      	b.n	4c86 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    4c70:	9b02      	ldr	r3, [sp, #8]
    4c72:	2b01      	cmp	r3, #1
    4c74:	d002      	beq.n	4c7c <Power_Ip_SMC_ModeCheckEntry+0x48>
    4c76:	9b02      	ldr	r3, [sp, #8]
    4c78:	2b10      	cmp	r3, #16
    4c7a:	d106      	bne.n	4c8a <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    4c7c:	2300      	movs	r3, #0
    4c7e:	9303      	str	r3, [sp, #12]
            break;
    4c80:	e003      	b.n	4c8a <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    4c82:	bf00      	nop
    4c84:	e002      	b.n	4c8c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    4c86:	bf00      	nop
    4c88:	e000      	b.n	4c8c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    4c8a:	bf00      	nop
        }
    }

    return PowerModeCheck;
    4c8c:	9b03      	ldr	r3, [sp, #12]
}
    4c8e:	4618      	mov	r0, r3
    4c90:	b004      	add	sp, #16
    4c92:	4770      	bx	lr
    4c94:	4007e000 	.word	0x4007e000

00004c98 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4c98:	b500      	push	{lr}
    4c9a:	b08b      	sub	sp, #44	; 0x2c
    4c9c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    4c9e:	2300      	movs	r3, #0
    4ca0:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    4ca2:	2300      	movs	r3, #0
    4ca4:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    4ca6:	2300      	movs	r3, #0
    4ca8:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    4cac:	9b01      	ldr	r3, [sp, #4]
    4cae:	685b      	ldr	r3, [r3, #4]
    4cb0:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    4cb2:	9b08      	ldr	r3, [sp, #32]
    4cb4:	2b02      	cmp	r3, #2
    4cb6:	d076      	beq.n	4da6 <Power_Ip_SMC_ModeConfig+0x10e>
    4cb8:	9b08      	ldr	r3, [sp, #32]
    4cba:	2b02      	cmp	r3, #2
    4cbc:	f200 80ab 	bhi.w	4e16 <Power_Ip_SMC_ModeConfig+0x17e>
    4cc0:	9b08      	ldr	r3, [sp, #32]
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d003      	beq.n	4cce <Power_Ip_SMC_ModeConfig+0x36>
    4cc6:	9b08      	ldr	r3, [sp, #32]
    4cc8:	2b01      	cmp	r3, #1
    4cca:	d034      	beq.n	4d36 <Power_Ip_SMC_ModeConfig+0x9e>
    4ccc:	e0a3      	b.n	4e16 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    4cce:	4b58      	ldr	r3, [pc, #352]	; (4e30 <Power_Ip_SMC_ModeConfig+0x198>)
    4cd0:	68db      	ldr	r3, [r3, #12]
    4cd2:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    4cd4:	9b06      	ldr	r3, [sp, #24]
    4cd6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4cda:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    4cdc:	4a54      	ldr	r2, [pc, #336]	; (4e30 <Power_Ip_SMC_ModeConfig+0x198>)
    4cde:	9b06      	ldr	r3, [sp, #24]
    4ce0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    4ce2:	aa02      	add	r2, sp, #8
    4ce4:	a903      	add	r1, sp, #12
    4ce6:	a804      	add	r0, sp, #16
    4ce8:	f24c 3350 	movw	r3, #50000	; 0xc350
    4cec:	f7ff fece 	bl	4a8c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4cf0:	9a02      	ldr	r2, [sp, #8]
    4cf2:	a903      	add	r1, sp, #12
    4cf4:	ab04      	add	r3, sp, #16
    4cf6:	4618      	mov	r0, r3
    4cf8:	f7ff fee2 	bl	4ac0 <Power_Ip_TimeoutExpired>
    4cfc:	4603      	mov	r3, r0
    4cfe:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    4d02:	4b4b      	ldr	r3, [pc, #300]	; (4e30 <Power_Ip_SMC_ModeConfig+0x198>)
    4d04:	695b      	ldr	r3, [r3, #20]
    4d06:	f003 0301 	and.w	r3, r3, #1
    4d0a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    4d0c:	9b05      	ldr	r3, [sp, #20]
    4d0e:	2b01      	cmp	r3, #1
    4d10:	d006      	beq.n	4d20 <Power_Ip_SMC_ModeConfig+0x88>
    4d12:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d16:	f083 0301 	eor.w	r3, r3, #1
    4d1a:	b2db      	uxtb	r3, r3
    4d1c:	2b00      	cmp	r3, #0
    4d1e:	d1e7      	bne.n	4cf0 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    4d20:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d24:	2b00      	cmp	r3, #0
    4d26:	d079      	beq.n	4e1c <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4d28:	2301      	movs	r3, #1
    4d2a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4d2c:	21ff      	movs	r1, #255	; 0xff
    4d2e:	2000      	movs	r0, #0
    4d30:	f7ff fe90 	bl	4a54 <Power_Ip_ReportPowerErrors>
            }

            break;
    4d34:	e072      	b.n	4e1c <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    4d36:	4b3e      	ldr	r3, [pc, #248]	; (4e30 <Power_Ip_SMC_ModeConfig+0x198>)
    4d38:	68db      	ldr	r3, [r3, #12]
    4d3a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    4d3c:	9b06      	ldr	r3, [sp, #24]
    4d3e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4d42:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    4d44:	9b06      	ldr	r3, [sp, #24]
    4d46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    4d4a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    4d4c:	4a38      	ldr	r2, [pc, #224]	; (4e30 <Power_Ip_SMC_ModeConfig+0x198>)
    4d4e:	9b06      	ldr	r3, [sp, #24]
    4d50:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    4d52:	aa02      	add	r2, sp, #8
    4d54:	a903      	add	r1, sp, #12
    4d56:	a804      	add	r0, sp, #16
    4d58:	f24c 3350 	movw	r3, #50000	; 0xc350
    4d5c:	f7ff fe96 	bl	4a8c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4d60:	9a02      	ldr	r2, [sp, #8]
    4d62:	a903      	add	r1, sp, #12
    4d64:	ab04      	add	r3, sp, #16
    4d66:	4618      	mov	r0, r3
    4d68:	f7ff feaa 	bl	4ac0 <Power_Ip_TimeoutExpired>
    4d6c:	4603      	mov	r3, r0
    4d6e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    4d72:	4b2f      	ldr	r3, [pc, #188]	; (4e30 <Power_Ip_SMC_ModeConfig+0x198>)
    4d74:	695b      	ldr	r3, [r3, #20]
    4d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4d7a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    4d7c:	9b05      	ldr	r3, [sp, #20]
    4d7e:	2b80      	cmp	r3, #128	; 0x80
    4d80:	d006      	beq.n	4d90 <Power_Ip_SMC_ModeConfig+0xf8>
    4d82:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d86:	f083 0301 	eor.w	r3, r3, #1
    4d8a:	b2db      	uxtb	r3, r3
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d1e7      	bne.n	4d60 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    4d90:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d94:	2b00      	cmp	r3, #0
    4d96:	d043      	beq.n	4e20 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4d98:	2301      	movs	r3, #1
    4d9a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4d9c:	21ff      	movs	r1, #255	; 0xff
    4d9e:	2000      	movs	r0, #0
    4da0:	f7ff fe58 	bl	4a54 <Power_Ip_ReportPowerErrors>
            }

            break;
    4da4:	e03c      	b.n	4e20 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    4da6:	4b22      	ldr	r3, [pc, #136]	; (4e30 <Power_Ip_SMC_ModeConfig+0x198>)
    4da8:	68db      	ldr	r3, [r3, #12]
    4daa:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    4dac:	9b06      	ldr	r3, [sp, #24]
    4dae:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4db2:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    4db4:	9b06      	ldr	r3, [sp, #24]
    4db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4dba:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    4dbc:	4a1c      	ldr	r2, [pc, #112]	; (4e30 <Power_Ip_SMC_ModeConfig+0x198>)
    4dbe:	9b06      	ldr	r3, [sp, #24]
    4dc0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    4dc2:	aa02      	add	r2, sp, #8
    4dc4:	a903      	add	r1, sp, #12
    4dc6:	a804      	add	r0, sp, #16
    4dc8:	f24c 3350 	movw	r3, #50000	; 0xc350
    4dcc:	f7ff fe5e 	bl	4a8c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4dd0:	9a02      	ldr	r2, [sp, #8]
    4dd2:	a903      	add	r1, sp, #12
    4dd4:	ab04      	add	r3, sp, #16
    4dd6:	4618      	mov	r0, r3
    4dd8:	f7ff fe72 	bl	4ac0 <Power_Ip_TimeoutExpired>
    4ddc:	4603      	mov	r3, r0
    4dde:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    4de2:	4b13      	ldr	r3, [pc, #76]	; (4e30 <Power_Ip_SMC_ModeConfig+0x198>)
    4de4:	695b      	ldr	r3, [r3, #20]
    4de6:	f003 0304 	and.w	r3, r3, #4
    4dea:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    4dec:	9b05      	ldr	r3, [sp, #20]
    4dee:	2b04      	cmp	r3, #4
    4df0:	d006      	beq.n	4e00 <Power_Ip_SMC_ModeConfig+0x168>
    4df2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4df6:	f083 0301 	eor.w	r3, r3, #1
    4dfa:	b2db      	uxtb	r3, r3
    4dfc:	2b00      	cmp	r3, #0
    4dfe:	d1e7      	bne.n	4dd0 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    4e00:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e04:	2b00      	cmp	r3, #0
    4e06:	d00d      	beq.n	4e24 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e08:	2301      	movs	r3, #1
    4e0a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4e0c:	21ff      	movs	r1, #255	; 0xff
    4e0e:	2000      	movs	r0, #0
    4e10:	f7ff fe20 	bl	4a54 <Power_Ip_ReportPowerErrors>
            }

            break;
    4e14:	e006      	b.n	4e24 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e16:	2301      	movs	r3, #1
    4e18:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    4e1a:	e004      	b.n	4e26 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    4e1c:	bf00      	nop
    4e1e:	e002      	b.n	4e26 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    4e20:	bf00      	nop
    4e22:	e000      	b.n	4e26 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    4e24:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    4e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    4e28:	4618      	mov	r0, r3
    4e2a:	b00b      	add	sp, #44	; 0x2c
    4e2c:	f85d fb04 	ldr.w	pc, [sp], #4
    4e30:	4007e000 	.word	0x4007e000

00004e34 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    4e34:	b500      	push	{lr}
    4e36:	b085      	sub	sp, #20
    4e38:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    4e3a:	9b01      	ldr	r3, [sp, #4]
    4e3c:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    4e3e:	9803      	ldr	r0, [sp, #12]
    4e40:	f000 fbc8 	bl	55d4 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    4e44:	4a03      	ldr	r2, [pc, #12]	; (4e54 <Port_Init+0x20>)
    4e46:	9b03      	ldr	r3, [sp, #12]
    4e48:	6013      	str	r3, [r2, #0]
        }
    }
}
    4e4a:	bf00      	nop
    4e4c:	b005      	add	sp, #20
    4e4e:	f85d fb04 	ldr.w	pc, [sp], #4
    4e52:	bf00      	nop
    4e54:	1fff8cf4 	.word	0x1fff8cf4

00004e58 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    4e58:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    4e5a:	4b03      	ldr	r3, [pc, #12]	; (4e68 <Port_RefreshPortDirection+0x10>)
    4e5c:	681b      	ldr	r3, [r3, #0]
    4e5e:	4618      	mov	r0, r3
    4e60:	f000 fc10 	bl	5684 <Port_Ipw_RefreshPortDirection>
    }
}
    4e64:	bf00      	nop
    4e66:	bd08      	pop	{r3, pc}
    4e68:	1fff8cf4 	.word	0x1fff8cf4

00004e6c <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    4e6c:	b086      	sub	sp, #24
    4e6e:	9003      	str	r0, [sp, #12]
    4e70:	9102      	str	r1, [sp, #8]
    4e72:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    4e74:	23ff      	movs	r3, #255	; 0xff
    4e76:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    4e78:	9b03      	ldr	r3, [sp, #12]
    4e7a:	4a39      	ldr	r2, [pc, #228]	; (4f60 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    4e7c:	4293      	cmp	r3, r2
    4e7e:	d151      	bne.n	4f24 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    4e80:	9b02      	ldr	r3, [sp, #8]
    4e82:	2b10      	cmp	r3, #16
    4e84:	d867      	bhi.n	4f56 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    4e86:	a201      	add	r2, pc, #4	; (adr r2, 4e8c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    4e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4e8c:	00004ed1 	.word	0x00004ed1
    4e90:	00004edf 	.word	0x00004edf
    4e94:	00004f57 	.word	0x00004f57
    4e98:	00004f57 	.word	0x00004f57
    4e9c:	00004f57 	.word	0x00004f57
    4ea0:	00004f57 	.word	0x00004f57
    4ea4:	00004f57 	.word	0x00004f57
    4ea8:	00004f57 	.word	0x00004f57
    4eac:	00004f57 	.word	0x00004f57
    4eb0:	00004f57 	.word	0x00004f57
    4eb4:	00004f57 	.word	0x00004f57
    4eb8:	00004f57 	.word	0x00004f57
    4ebc:	00004f57 	.word	0x00004f57
    4ec0:	00004eed 	.word	0x00004eed
    4ec4:	00004efb 	.word	0x00004efb
    4ec8:	00004f09 	.word	0x00004f09
    4ecc:	00004f17 	.word	0x00004f17
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    4ed0:	2301      	movs	r3, #1
    4ed2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4ed4:	9a05      	ldr	r2, [sp, #20]
    4ed6:	9b01      	ldr	r3, [sp, #4]
    4ed8:	4313      	orrs	r3, r2
    4eda:	9305      	str	r3, [sp, #20]
                break;
    4edc:	e03c      	b.n	4f58 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    4ede:	2302      	movs	r3, #2
    4ee0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4ee2:	9a05      	ldr	r2, [sp, #20]
    4ee4:	9b01      	ldr	r3, [sp, #4]
    4ee6:	4313      	orrs	r3, r2
    4ee8:	9305      	str	r3, [sp, #20]
                break;
    4eea:	e035      	b.n	4f58 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    4eec:	2304      	movs	r3, #4
    4eee:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4ef0:	9a05      	ldr	r2, [sp, #20]
    4ef2:	9b01      	ldr	r3, [sp, #4]
    4ef4:	4313      	orrs	r3, r2
    4ef6:	9305      	str	r3, [sp, #20]
                break;
    4ef8:	e02e      	b.n	4f58 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    4efa:	2308      	movs	r3, #8
    4efc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4efe:	9a05      	ldr	r2, [sp, #20]
    4f00:	9b01      	ldr	r3, [sp, #4]
    4f02:	4313      	orrs	r3, r2
    4f04:	9305      	str	r3, [sp, #20]
                break;
    4f06:	e027      	b.n	4f58 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    4f08:	230e      	movs	r3, #14
    4f0a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f0c:	9a05      	ldr	r2, [sp, #20]
    4f0e:	9b01      	ldr	r3, [sp, #4]
    4f10:	4013      	ands	r3, r2
    4f12:	9305      	str	r3, [sp, #20]
                break;
    4f14:	e020      	b.n	4f58 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    4f16:	230d      	movs	r3, #13
    4f18:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f1a:	9a05      	ldr	r2, [sp, #20]
    4f1c:	9b01      	ldr	r3, [sp, #4]
    4f1e:	4013      	ands	r3, r2
    4f20:	9305      	str	r3, [sp, #20]
                break;
    4f22:	e019      	b.n	4f58 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    4f24:	9b03      	ldr	r3, [sp, #12]
    4f26:	4a0f      	ldr	r2, [pc, #60]	; (4f64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    4f28:	4293      	cmp	r3, r2
    4f2a:	d115      	bne.n	4f58 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    4f2c:	9b02      	ldr	r3, [sp, #8]
    4f2e:	2b00      	cmp	r3, #0
    4f30:	d003      	beq.n	4f3a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    4f32:	9b02      	ldr	r3, [sp, #8]
    4f34:	2b01      	cmp	r3, #1
    4f36:	d007      	beq.n	4f48 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    4f38:	e00e      	b.n	4f58 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    4f3a:	230b      	movs	r3, #11
    4f3c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f3e:	9a05      	ldr	r2, [sp, #20]
    4f40:	9b01      	ldr	r3, [sp, #4]
    4f42:	4013      	ands	r3, r2
    4f44:	9305      	str	r3, [sp, #20]
                break;
    4f46:	e007      	b.n	4f58 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    4f48:	2307      	movs	r3, #7
    4f4a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f4c:	9a05      	ldr	r2, [sp, #20]
    4f4e:	9b01      	ldr	r3, [sp, #4]
    4f50:	4013      	ands	r3, r2
    4f52:	9305      	str	r3, [sp, #20]
                break;
    4f54:	e000      	b.n	4f58 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    4f56:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    4f58:	9b05      	ldr	r3, [sp, #20]
}
    4f5a:	4618      	mov	r0, r3
    4f5c:	b006      	add	sp, #24
    4f5e:	4770      	bx	lr
    4f60:	4004a000 	.word	0x4004a000
    4f64:	4004b000 	.word	0x4004b000

00004f68 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    4f68:	b500      	push	{lr}
    4f6a:	b089      	sub	sp, #36	; 0x24
    4f6c:	9003      	str	r0, [sp, #12]
    4f6e:	9102      	str	r1, [sp, #8]
    4f70:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    4f72:	9b01      	ldr	r3, [sp, #4]
    4f74:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    4f76:	9b01      	ldr	r3, [sp, #4]
    4f78:	2b08      	cmp	r3, #8
    4f7a:	d121      	bne.n	4fc0 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    4f7c:	4b13      	ldr	r3, [pc, #76]	; (4fcc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4f7e:	685b      	ldr	r3, [r3, #4]
    4f80:	f003 030f 	and.w	r3, r3, #15
    4f84:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    4f86:	9a06      	ldr	r2, [sp, #24]
    4f88:	9902      	ldr	r1, [sp, #8]
    4f8a:	9803      	ldr	r0, [sp, #12]
    4f8c:	f7ff ff6e 	bl	4e6c <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    4f90:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    4f92:	9b05      	ldr	r3, [sp, #20]
    4f94:	2bff      	cmp	r3, #255	; 0xff
    4f96:	d011      	beq.n	4fbc <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    4f98:	f001 f984 	bl	62a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    4f9c:	4b0b      	ldr	r3, [pc, #44]	; (4fcc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4f9e:	685b      	ldr	r3, [r3, #4]
    4fa0:	4a0a      	ldr	r2, [pc, #40]	; (4fcc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fa2:	f023 030f 	bic.w	r3, r3, #15
    4fa6:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    4fa8:	4b08      	ldr	r3, [pc, #32]	; (4fcc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4faa:	685a      	ldr	r2, [r3, #4]
    4fac:	9b05      	ldr	r3, [sp, #20]
    4fae:	f003 030f 	and.w	r3, r3, #15
    4fb2:	4906      	ldr	r1, [pc, #24]	; (4fcc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fb4:	4313      	orrs	r3, r2
    4fb6:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    4fb8:	f001 f9a0 	bl	62fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    4fbc:	2300      	movs	r3, #0
    4fbe:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    4fc0:	9b07      	ldr	r3, [sp, #28]
}
    4fc2:	4618      	mov	r0, r3
    4fc4:	b009      	add	sp, #36	; 0x24
    4fc6:	f85d fb04 	ldr.w	pc, [sp], #4
    4fca:	bf00      	nop
    4fcc:	40048000 	.word	0x40048000

00004fd0 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    4fd0:	b500      	push	{lr}
    4fd2:	b087      	sub	sp, #28
    4fd4:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    4fd6:	2300      	movs	r3, #0
    4fd8:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    4fda:	2300      	movs	r3, #0
    4fdc:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    4fde:	2300      	movs	r3, #0
    4fe0:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    4fe2:	9b01      	ldr	r3, [sp, #4]
    4fe4:	68db      	ldr	r3, [r3, #12]
    4fe6:	2b02      	cmp	r3, #2
    4fe8:	d00a      	beq.n	5000 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    4fea:	9b05      	ldr	r3, [sp, #20]
    4fec:	f043 0302 	orr.w	r3, r3, #2
    4ff0:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    4ff2:	9b01      	ldr	r3, [sp, #4]
    4ff4:	68db      	ldr	r3, [r3, #12]
    4ff6:	f003 0301 	and.w	r3, r3, #1
    4ffa:	9a05      	ldr	r2, [sp, #20]
    4ffc:	4313      	orrs	r3, r2
    4ffe:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    5000:	9b01      	ldr	r3, [sp, #4]
    5002:	699b      	ldr	r3, [r3, #24]
    5004:	019b      	lsls	r3, r3, #6
    5006:	f003 0340 	and.w	r3, r3, #64	; 0x40
    500a:	9a05      	ldr	r2, [sp, #20]
    500c:	4313      	orrs	r3, r2
    500e:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    5010:	9b01      	ldr	r3, [sp, #4]
    5012:	6a1b      	ldr	r3, [r3, #32]
    5014:	03db      	lsls	r3, r3, #15
    5016:	b29b      	uxth	r3, r3
    5018:	9a05      	ldr	r2, [sp, #20]
    501a:	4313      	orrs	r3, r2
    501c:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    501e:	9b01      	ldr	r3, [sp, #4]
    5020:	7f1b      	ldrb	r3, [r3, #28]
    5022:	2b00      	cmp	r3, #0
    5024:	d001      	beq.n	502a <Port_Ci_Port_Ip_PinInit+0x5a>
    5026:	2310      	movs	r3, #16
    5028:	e000      	b.n	502c <Port_Ci_Port_Ip_PinInit+0x5c>
    502a:	2300      	movs	r3, #0
    502c:	9a05      	ldr	r2, [sp, #20]
    502e:	4313      	orrs	r3, r2
    5030:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    5032:	9b01      	ldr	r3, [sp, #4]
    5034:	691b      	ldr	r3, [r3, #16]
    5036:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5038:	9b01      	ldr	r3, [sp, #4]
    503a:	6818      	ldr	r0, [r3, #0]
    503c:	9b01      	ldr	r3, [sp, #4]
    503e:	689b      	ldr	r3, [r3, #8]
    5040:	9a04      	ldr	r2, [sp, #16]
    5042:	4619      	mov	r1, r3
    5044:	f7ff ff90 	bl	4f68 <Port_Ci_Port_Ip_ConfigureInterleave>
    5048:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    504a:	9b03      	ldr	r3, [sp, #12]
    504c:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    504e:	9b04      	ldr	r3, [sp, #16]
    5050:	021b      	lsls	r3, r3, #8
    5052:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5056:	9a05      	ldr	r2, [sp, #20]
    5058:	4313      	orrs	r3, r2
    505a:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    505c:	f000 ff88 	bl	5f70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    5060:	9b01      	ldr	r3, [sp, #4]
    5062:	681b      	ldr	r3, [r3, #0]
    5064:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    5068:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    506a:	9b01      	ldr	r3, [sp, #4]
    506c:	689b      	ldr	r3, [r3, #8]
    506e:	2201      	movs	r2, #1
    5070:	fa02 f303 	lsl.w	r3, r2, r3
    5074:	43db      	mvns	r3, r3
    5076:	9a02      	ldr	r2, [sp, #8]
    5078:	4013      	ands	r3, r2
    507a:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    507c:	9b01      	ldr	r3, [sp, #4]
    507e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5082:	2b00      	cmp	r3, #0
    5084:	d001      	beq.n	508a <Port_Ci_Port_Ip_PinInit+0xba>
    5086:	2201      	movs	r2, #1
    5088:	e000      	b.n	508c <Port_Ci_Port_Ip_PinInit+0xbc>
    508a:	2200      	movs	r2, #0
    508c:	9b01      	ldr	r3, [sp, #4]
    508e:	689b      	ldr	r3, [r3, #8]
    5090:	fa02 f303 	lsl.w	r3, r2, r3
    5094:	9a02      	ldr	r2, [sp, #8]
    5096:	4313      	orrs	r3, r2
    5098:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    509a:	9b01      	ldr	r3, [sp, #4]
    509c:	681b      	ldr	r3, [r3, #0]
    509e:	9a02      	ldr	r2, [sp, #8]
    50a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    50a4:	f000 ff90 	bl	5fc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    50a8:	9b04      	ldr	r3, [sp, #16]
    50aa:	2b01      	cmp	r3, #1
    50ac:	d16d      	bne.n	518a <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    50ae:	9b01      	ldr	r3, [sp, #4]
    50b0:	695b      	ldr	r3, [r3, #20]
    50b2:	2b02      	cmp	r3, #2
    50b4:	d138      	bne.n	5128 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    50b6:	9b01      	ldr	r3, [sp, #4]
    50b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    50bc:	2b01      	cmp	r3, #1
    50be:	d10f      	bne.n	50e0 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    50c0:	f000 ffa8 	bl	6014 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    50c4:	9b01      	ldr	r3, [sp, #4]
    50c6:	685b      	ldr	r3, [r3, #4]
    50c8:	6859      	ldr	r1, [r3, #4]
    50ca:	9b01      	ldr	r3, [sp, #4]
    50cc:	689b      	ldr	r3, [r3, #8]
    50ce:	2201      	movs	r2, #1
    50d0:	409a      	lsls	r2, r3
    50d2:	9b01      	ldr	r3, [sp, #4]
    50d4:	685b      	ldr	r3, [r3, #4]
    50d6:	430a      	orrs	r2, r1
    50d8:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    50da:	f000 ffc7 	bl	606c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    50de:	e013      	b.n	5108 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    50e0:	9b01      	ldr	r3, [sp, #4]
    50e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    50e6:	2b00      	cmp	r3, #0
    50e8:	d10e      	bne.n	5108 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    50ea:	f000 ffe5 	bl	60b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    50ee:	9b01      	ldr	r3, [sp, #4]
    50f0:	685b      	ldr	r3, [r3, #4]
    50f2:	6899      	ldr	r1, [r3, #8]
    50f4:	9b01      	ldr	r3, [sp, #4]
    50f6:	689b      	ldr	r3, [r3, #8]
    50f8:	2201      	movs	r2, #1
    50fa:	409a      	lsls	r2, r3
    50fc:	9b01      	ldr	r3, [sp, #4]
    50fe:	685b      	ldr	r3, [r3, #4]
    5100:	430a      	orrs	r2, r1
    5102:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    5104:	f001 f804 	bl	6110 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5108:	f001 f828 	bl	615c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    510c:	9b01      	ldr	r3, [sp, #4]
    510e:	685b      	ldr	r3, [r3, #4]
    5110:	6959      	ldr	r1, [r3, #20]
    5112:	9b01      	ldr	r3, [sp, #4]
    5114:	689b      	ldr	r3, [r3, #8]
    5116:	2201      	movs	r2, #1
    5118:	409a      	lsls	r2, r3
    511a:	9b01      	ldr	r3, [sp, #4]
    511c:	685b      	ldr	r3, [r3, #4]
    511e:	430a      	orrs	r2, r1
    5120:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5122:	f001 f847 	bl	61b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    5126:	e030      	b.n	518a <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5128:	f001 f818 	bl	615c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    512c:	9b01      	ldr	r3, [sp, #4]
    512e:	685b      	ldr	r3, [r3, #4]
    5130:	6959      	ldr	r1, [r3, #20]
    5132:	9b01      	ldr	r3, [sp, #4]
    5134:	689b      	ldr	r3, [r3, #8]
    5136:	2201      	movs	r2, #1
    5138:	fa02 f303 	lsl.w	r3, r2, r3
    513c:	43da      	mvns	r2, r3
    513e:	9b01      	ldr	r3, [sp, #4]
    5140:	685b      	ldr	r3, [r3, #4]
    5142:	400a      	ands	r2, r1
    5144:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5146:	f001 f835 	bl	61b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    514a:	f001 f859 	bl	6200 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    514e:	9b01      	ldr	r3, [sp, #4]
    5150:	685b      	ldr	r3, [r3, #4]
    5152:	6999      	ldr	r1, [r3, #24]
    5154:	9b01      	ldr	r3, [sp, #4]
    5156:	689b      	ldr	r3, [r3, #8]
    5158:	2201      	movs	r2, #1
    515a:	fa02 f303 	lsl.w	r3, r2, r3
    515e:	43da      	mvns	r2, r3
    5160:	9b01      	ldr	r3, [sp, #4]
    5162:	685b      	ldr	r3, [r3, #4]
    5164:	400a      	ands	r2, r1
    5166:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    5168:	9b01      	ldr	r3, [sp, #4]
    516a:	695b      	ldr	r3, [r3, #20]
    516c:	2b03      	cmp	r3, #3
    516e:	d10a      	bne.n	5186 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    5170:	9b01      	ldr	r3, [sp, #4]
    5172:	685b      	ldr	r3, [r3, #4]
    5174:	6999      	ldr	r1, [r3, #24]
    5176:	9b01      	ldr	r3, [sp, #4]
    5178:	689b      	ldr	r3, [r3, #8]
    517a:	2201      	movs	r2, #1
    517c:	409a      	lsls	r2, r3
    517e:	9b01      	ldr	r3, [sp, #4]
    5180:	685b      	ldr	r3, [r3, #4]
    5182:	430a      	orrs	r2, r1
    5184:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    5186:	f001 f867 	bl	6258 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    518a:	9b01      	ldr	r3, [sp, #4]
    518c:	681b      	ldr	r3, [r3, #0]
    518e:	9a01      	ldr	r2, [sp, #4]
    5190:	6892      	ldr	r2, [r2, #8]
    5192:	9905      	ldr	r1, [sp, #20]
    5194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5198:	bf00      	nop
    519a:	b007      	add	sp, #28
    519c:	f85d fb04 	ldr.w	pc, [sp], #4

000051a0 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    51a0:	b500      	push	{lr}
    51a2:	b085      	sub	sp, #20
    51a4:	9001      	str	r0, [sp, #4]
    51a6:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    51a8:	2300      	movs	r3, #0
    51aa:	9303      	str	r3, [sp, #12]
    51ac:	e00d      	b.n	51ca <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    51ae:	9a03      	ldr	r2, [sp, #12]
    51b0:	4613      	mov	r3, r2
    51b2:	009b      	lsls	r3, r3, #2
    51b4:	4413      	add	r3, r2
    51b6:	00db      	lsls	r3, r3, #3
    51b8:	461a      	mov	r2, r3
    51ba:	9b00      	ldr	r3, [sp, #0]
    51bc:	4413      	add	r3, r2
    51be:	4618      	mov	r0, r3
    51c0:	f7ff ff06 	bl	4fd0 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    51c4:	9b03      	ldr	r3, [sp, #12]
    51c6:	3301      	adds	r3, #1
    51c8:	9303      	str	r3, [sp, #12]
    51ca:	9a03      	ldr	r2, [sp, #12]
    51cc:	9b01      	ldr	r3, [sp, #4]
    51ce:	429a      	cmp	r2, r3
    51d0:	d3ed      	bcc.n	51ae <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    51d2:	2300      	movs	r3, #0
}
    51d4:	4618      	mov	r0, r3
    51d6:	b005      	add	sp, #20
    51d8:	f85d fb04 	ldr.w	pc, [sp], #4

000051dc <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    51dc:	b500      	push	{lr}
    51de:	b087      	sub	sp, #28
    51e0:	9003      	str	r0, [sp, #12]
    51e2:	9102      	str	r1, [sp, #8]
    51e4:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    51e6:	9a01      	ldr	r2, [sp, #4]
    51e8:	9902      	ldr	r1, [sp, #8]
    51ea:	9803      	ldr	r0, [sp, #12]
    51ec:	f7ff febc 	bl	4f68 <Port_Ci_Port_Ip_ConfigureInterleave>
    51f0:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    51f2:	f001 f8a9 	bl	6348 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    51f6:	9b03      	ldr	r3, [sp, #12]
    51f8:	9a02      	ldr	r2, [sp, #8]
    51fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    51fe:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    5200:	9b04      	ldr	r3, [sp, #16]
    5202:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    5206:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    5208:	9b05      	ldr	r3, [sp, #20]
    520a:	021b      	lsls	r3, r3, #8
    520c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5210:	9a04      	ldr	r2, [sp, #16]
    5212:	4313      	orrs	r3, r2
    5214:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    5216:	9b03      	ldr	r3, [sp, #12]
    5218:	9a02      	ldr	r2, [sp, #8]
    521a:	9904      	ldr	r1, [sp, #16]
    521c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    5220:	f001 f8be 	bl	63a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    5224:	bf00      	nop
    5226:	b007      	add	sp, #28
    5228:	f85d fb04 	ldr.w	pc, [sp], #4

0000522c <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    522c:	b500      	push	{lr}
    522e:	b083      	sub	sp, #12
    5230:	9001      	str	r0, [sp, #4]
    5232:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    5234:	f001 f8da 	bl	63ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    5238:	9b01      	ldr	r3, [sp, #4]
    523a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    523e:	2101      	movs	r1, #1
    5240:	9b00      	ldr	r3, [sp, #0]
    5242:	fa01 f303 	lsl.w	r3, r1, r3
    5246:	431a      	orrs	r2, r3
    5248:	9b01      	ldr	r3, [sp, #4]
    524a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    524e:	f001 f8f9 	bl	6444 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    5252:	bf00      	nop
    5254:	b003      	add	sp, #12
    5256:	f85d fb04 	ldr.w	pc, [sp], #4

0000525a <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    525a:	b500      	push	{lr}
    525c:	b083      	sub	sp, #12
    525e:	9001      	str	r0, [sp, #4]
    5260:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    5262:	f001 f915 	bl	6490 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    5266:	9b01      	ldr	r3, [sp, #4]
    5268:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    526c:	2101      	movs	r1, #1
    526e:	9b00      	ldr	r3, [sp, #0]
    5270:	fa01 f303 	lsl.w	r3, r1, r3
    5274:	43db      	mvns	r3, r3
    5276:	401a      	ands	r2, r3
    5278:	9b01      	ldr	r3, [sp, #4]
    527a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    527e:	f001 f933 	bl	64e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    5282:	bf00      	nop
    5284:	b003      	add	sp, #12
    5286:	f85d fb04 	ldr.w	pc, [sp], #4

0000528a <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    528a:	b082      	sub	sp, #8
    528c:	9001      	str	r0, [sp, #4]
    528e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    5290:	9b00      	ldr	r3, [sp, #0]
    5292:	785b      	ldrb	r3, [r3, #1]
    5294:	f003 0201 	and.w	r2, r3, #1
    5298:	9b01      	ldr	r3, [sp, #4]
    529a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    529e:	9b00      	ldr	r3, [sp, #0]
    52a0:	789b      	ldrb	r3, [r3, #2]
    52a2:	f003 021f 	and.w	r2, r3, #31
    52a6:	9b01      	ldr	r3, [sp, #4]
    52a8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    52ac:	bf00      	nop
    52ae:	b002      	add	sp, #8
    52b0:	4770      	bx	lr

000052b2 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    52b2:	b086      	sub	sp, #24
    52b4:	9003      	str	r0, [sp, #12]
    52b6:	9301      	str	r3, [sp, #4]
    52b8:	460b      	mov	r3, r1
    52ba:	f8ad 300a 	strh.w	r3, [sp, #10]
    52be:	4613      	mov	r3, r2
    52c0:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    52c4:	2300      	movs	r3, #0
    52c6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    52ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52ce:	f043 0301 	orr.w	r3, r3, #1
    52d2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    52d6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52da:	f043 0302 	orr.w	r3, r3, #2
    52de:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    52e2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52e6:	f043 0310 	orr.w	r3, r3, #16
    52ea:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    52ee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    52f6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    52fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    5302:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    5306:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    530a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    530e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    5312:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    5316:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    531a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    531e:	4013      	ands	r3, r2
    5320:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    5324:	9b01      	ldr	r3, [sp, #4]
    5326:	2b00      	cmp	r3, #0
    5328:	d003      	beq.n	5332 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    532a:	9b01      	ldr	r3, [sp, #4]
    532c:	2b01      	cmp	r3, #1
    532e:	d00a      	beq.n	5346 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    5330:	e013      	b.n	535a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    5332:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5336:	041a      	lsls	r2, r3, #16
    5338:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    533c:	431a      	orrs	r2, r3
    533e:	9b03      	ldr	r3, [sp, #12]
    5340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    5344:	e009      	b.n	535a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    5346:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    534a:	041a      	lsls	r2, r3, #16
    534c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5350:	431a      	orrs	r2, r3
    5352:	9b03      	ldr	r3, [sp, #12]
    5354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    5358:	bf00      	nop
    }
}
    535a:	bf00      	nop
    535c:	b006      	add	sp, #24
    535e:	4770      	bx	lr

00005360 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    5360:	b500      	push	{lr}
    5362:	b087      	sub	sp, #28
    5364:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    5366:	9b01      	ldr	r3, [sp, #4]
    5368:	885b      	ldrh	r3, [r3, #2]
    536a:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    536e:	9b01      	ldr	r3, [sp, #4]
    5370:	689b      	ldr	r3, [r3, #8]
    5372:	7a1b      	ldrb	r3, [r3, #8]
    5374:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    5378:	9b01      	ldr	r3, [sp, #4]
    537a:	689b      	ldr	r3, [r3, #8]
    537c:	681b      	ldr	r3, [r3, #0]
    537e:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    5380:	9b01      	ldr	r3, [sp, #4]
    5382:	689b      	ldr	r3, [r3, #8]
    5384:	685b      	ldr	r3, [r3, #4]
    5386:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5388:	2300      	movs	r3, #0
    538a:	f8ad 3016 	strh.w	r3, [sp, #22]
    538e:	e111      	b.n	55b4 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    5390:	9b02      	ldr	r3, [sp, #8]
    5392:	2b02      	cmp	r3, #2
    5394:	d169      	bne.n	546a <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    5396:	f89d 3013 	ldrb.w	r3, [sp, #19]
    539a:	2b01      	cmp	r3, #1
    539c:	d11a      	bne.n	53d4 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    539e:	9b01      	ldr	r3, [sp, #4]
    53a0:	685a      	ldr	r2, [r3, #4]
    53a2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53a6:	005b      	lsls	r3, r3, #1
    53a8:	4413      	add	r3, r2
    53aa:	881b      	ldrh	r3, [r3, #0]
    53ac:	f003 021f 	and.w	r2, r3, #31
    53b0:	9b01      	ldr	r3, [sp, #4]
    53b2:	6859      	ldr	r1, [r3, #4]
    53b4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53b8:	005b      	lsls	r3, r3, #1
    53ba:	440b      	add	r3, r1
    53bc:	881b      	ldrh	r3, [r3, #0]
    53be:	095b      	lsrs	r3, r3, #5
    53c0:	b29b      	uxth	r3, r3
    53c2:	4619      	mov	r1, r3
    53c4:	4b81      	ldr	r3, [pc, #516]	; (55cc <Port_Ipw_Init_UnusedPins+0x26c>)
    53c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    53ca:	2101      	movs	r1, #1
    53cc:	fa01 f202 	lsl.w	r2, r1, r2
    53d0:	605a      	str	r2, [r3, #4]
    53d2:	e01d      	b.n	5410 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    53d4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    53d8:	2b00      	cmp	r3, #0
    53da:	d119      	bne.n	5410 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    53dc:	9b01      	ldr	r3, [sp, #4]
    53de:	685a      	ldr	r2, [r3, #4]
    53e0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53e4:	005b      	lsls	r3, r3, #1
    53e6:	4413      	add	r3, r2
    53e8:	881b      	ldrh	r3, [r3, #0]
    53ea:	f003 021f 	and.w	r2, r3, #31
    53ee:	9b01      	ldr	r3, [sp, #4]
    53f0:	6859      	ldr	r1, [r3, #4]
    53f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53f6:	005b      	lsls	r3, r3, #1
    53f8:	440b      	add	r3, r1
    53fa:	881b      	ldrh	r3, [r3, #0]
    53fc:	095b      	lsrs	r3, r3, #5
    53fe:	b29b      	uxth	r3, r3
    5400:	4619      	mov	r1, r3
    5402:	4b72      	ldr	r3, [pc, #456]	; (55cc <Port_Ipw_Init_UnusedPins+0x26c>)
    5404:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5408:	2101      	movs	r1, #1
    540a:	fa01 f202 	lsl.w	r2, r1, r2
    540e:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5410:	f001 f890 	bl	6534 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5414:	9b01      	ldr	r3, [sp, #4]
    5416:	685a      	ldr	r2, [r3, #4]
    5418:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    541c:	005b      	lsls	r3, r3, #1
    541e:	4413      	add	r3, r2
    5420:	881b      	ldrh	r3, [r3, #0]
    5422:	095b      	lsrs	r3, r3, #5
    5424:	b29b      	uxth	r3, r3
    5426:	461a      	mov	r2, r3
    5428:	4b68      	ldr	r3, [pc, #416]	; (55cc <Port_Ipw_Init_UnusedPins+0x26c>)
    542a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    542e:	6959      	ldr	r1, [r3, #20]
    5430:	9b01      	ldr	r3, [sp, #4]
    5432:	685a      	ldr	r2, [r3, #4]
    5434:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5438:	005b      	lsls	r3, r3, #1
    543a:	4413      	add	r3, r2
    543c:	881b      	ldrh	r3, [r3, #0]
    543e:	f003 031f 	and.w	r3, r3, #31
    5442:	2201      	movs	r2, #1
    5444:	409a      	lsls	r2, r3
    5446:	9b01      	ldr	r3, [sp, #4]
    5448:	6858      	ldr	r0, [r3, #4]
    544a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    544e:	005b      	lsls	r3, r3, #1
    5450:	4403      	add	r3, r0
    5452:	881b      	ldrh	r3, [r3, #0]
    5454:	095b      	lsrs	r3, r3, #5
    5456:	b29b      	uxth	r3, r3
    5458:	4618      	mov	r0, r3
    545a:	4b5c      	ldr	r3, [pc, #368]	; (55cc <Port_Ipw_Init_UnusedPins+0x26c>)
    545c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5460:	430a      	orrs	r2, r1
    5462:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5464:	f001 f892 	bl	658c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    5468:	e086      	b.n	5578 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    546a:	f001 f863 	bl	6534 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    546e:	9b01      	ldr	r3, [sp, #4]
    5470:	685a      	ldr	r2, [r3, #4]
    5472:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5476:	005b      	lsls	r3, r3, #1
    5478:	4413      	add	r3, r2
    547a:	881b      	ldrh	r3, [r3, #0]
    547c:	095b      	lsrs	r3, r3, #5
    547e:	b29b      	uxth	r3, r3
    5480:	461a      	mov	r2, r3
    5482:	4b52      	ldr	r3, [pc, #328]	; (55cc <Port_Ipw_Init_UnusedPins+0x26c>)
    5484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5488:	6959      	ldr	r1, [r3, #20]
    548a:	9b01      	ldr	r3, [sp, #4]
    548c:	685a      	ldr	r2, [r3, #4]
    548e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5492:	005b      	lsls	r3, r3, #1
    5494:	4413      	add	r3, r2
    5496:	881b      	ldrh	r3, [r3, #0]
    5498:	f003 031f 	and.w	r3, r3, #31
    549c:	2201      	movs	r2, #1
    549e:	fa02 f303 	lsl.w	r3, r2, r3
    54a2:	43da      	mvns	r2, r3
    54a4:	9b01      	ldr	r3, [sp, #4]
    54a6:	6858      	ldr	r0, [r3, #4]
    54a8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54ac:	005b      	lsls	r3, r3, #1
    54ae:	4403      	add	r3, r0
    54b0:	881b      	ldrh	r3, [r3, #0]
    54b2:	095b      	lsrs	r3, r3, #5
    54b4:	b29b      	uxth	r3, r3
    54b6:	4618      	mov	r0, r3
    54b8:	4b44      	ldr	r3, [pc, #272]	; (55cc <Port_Ipw_Init_UnusedPins+0x26c>)
    54ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    54be:	400a      	ands	r2, r1
    54c0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    54c2:	f001 f863 	bl	658c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    54c6:	f001 f887 	bl	65d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    54ca:	9b01      	ldr	r3, [sp, #4]
    54cc:	685a      	ldr	r2, [r3, #4]
    54ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54d2:	005b      	lsls	r3, r3, #1
    54d4:	4413      	add	r3, r2
    54d6:	881b      	ldrh	r3, [r3, #0]
    54d8:	095b      	lsrs	r3, r3, #5
    54da:	b29b      	uxth	r3, r3
    54dc:	461a      	mov	r2, r3
    54de:	4b3b      	ldr	r3, [pc, #236]	; (55cc <Port_Ipw_Init_UnusedPins+0x26c>)
    54e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    54e4:	6999      	ldr	r1, [r3, #24]
    54e6:	9b01      	ldr	r3, [sp, #4]
    54e8:	685a      	ldr	r2, [r3, #4]
    54ea:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54ee:	005b      	lsls	r3, r3, #1
    54f0:	4413      	add	r3, r2
    54f2:	881b      	ldrh	r3, [r3, #0]
    54f4:	f003 031f 	and.w	r3, r3, #31
    54f8:	2201      	movs	r2, #1
    54fa:	fa02 f303 	lsl.w	r3, r2, r3
    54fe:	43da      	mvns	r2, r3
    5500:	9b01      	ldr	r3, [sp, #4]
    5502:	6858      	ldr	r0, [r3, #4]
    5504:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5508:	005b      	lsls	r3, r3, #1
    550a:	4403      	add	r3, r0
    550c:	881b      	ldrh	r3, [r3, #0]
    550e:	095b      	lsrs	r3, r3, #5
    5510:	b29b      	uxth	r3, r3
    5512:	4618      	mov	r0, r3
    5514:	4b2d      	ldr	r3, [pc, #180]	; (55cc <Port_Ipw_Init_UnusedPins+0x26c>)
    5516:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    551a:	400a      	ands	r2, r1
    551c:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    551e:	9b02      	ldr	r3, [sp, #8]
    5520:	2b03      	cmp	r3, #3
    5522:	d127      	bne.n	5574 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5524:	9b01      	ldr	r3, [sp, #4]
    5526:	685a      	ldr	r2, [r3, #4]
    5528:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    552c:	005b      	lsls	r3, r3, #1
    552e:	4413      	add	r3, r2
    5530:	881b      	ldrh	r3, [r3, #0]
    5532:	095b      	lsrs	r3, r3, #5
    5534:	b29b      	uxth	r3, r3
    5536:	461a      	mov	r2, r3
    5538:	4b24      	ldr	r3, [pc, #144]	; (55cc <Port_Ipw_Init_UnusedPins+0x26c>)
    553a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    553e:	6999      	ldr	r1, [r3, #24]
    5540:	9b01      	ldr	r3, [sp, #4]
    5542:	685a      	ldr	r2, [r3, #4]
    5544:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5548:	005b      	lsls	r3, r3, #1
    554a:	4413      	add	r3, r2
    554c:	881b      	ldrh	r3, [r3, #0]
    554e:	f003 031f 	and.w	r3, r3, #31
    5552:	2201      	movs	r2, #1
    5554:	409a      	lsls	r2, r3
    5556:	9b01      	ldr	r3, [sp, #4]
    5558:	6858      	ldr	r0, [r3, #4]
    555a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    555e:	005b      	lsls	r3, r3, #1
    5560:	4403      	add	r3, r0
    5562:	881b      	ldrh	r3, [r3, #0]
    5564:	095b      	lsrs	r3, r3, #5
    5566:	b29b      	uxth	r3, r3
    5568:	4618      	mov	r0, r3
    556a:	4b18      	ldr	r3, [pc, #96]	; (55cc <Port_Ipw_Init_UnusedPins+0x26c>)
    556c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5570:	430a      	orrs	r2, r1
    5572:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    5574:	f001 f85c 	bl	6630 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    5578:	9b01      	ldr	r3, [sp, #4]
    557a:	685a      	ldr	r2, [r3, #4]
    557c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5580:	005b      	lsls	r3, r3, #1
    5582:	4413      	add	r3, r2
    5584:	881b      	ldrh	r3, [r3, #0]
    5586:	095b      	lsrs	r3, r3, #5
    5588:	b29b      	uxth	r3, r3
    558a:	461a      	mov	r2, r3
    558c:	4b10      	ldr	r3, [pc, #64]	; (55d0 <Port_Ipw_Init_UnusedPins+0x270>)
    558e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5592:	9a01      	ldr	r2, [sp, #4]
    5594:	6851      	ldr	r1, [r2, #4]
    5596:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    559a:	0052      	lsls	r2, r2, #1
    559c:	440a      	add	r2, r1
    559e:	8812      	ldrh	r2, [r2, #0]
    55a0:	f002 021f 	and.w	r2, r2, #31
    55a4:	9903      	ldr	r1, [sp, #12]
    55a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    55aa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    55ae:	3301      	adds	r3, #1
    55b0:	f8ad 3016 	strh.w	r3, [sp, #22]
    55b4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    55b8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    55bc:	429a      	cmp	r2, r3
    55be:	f4ff aee7 	bcc.w	5390 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    55c2:	bf00      	nop
    55c4:	bf00      	nop
    55c6:	b007      	add	sp, #28
    55c8:	f85d fb04 	ldr.w	pc, [sp], #4
    55cc:	000078fc 	.word	0x000078fc
    55d0:	000078e8 	.word	0x000078e8

000055d4 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    55d4:	b500      	push	{lr}
    55d6:	b085      	sub	sp, #20
    55d8:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    55da:	9b01      	ldr	r3, [sp, #4]
    55dc:	7c1b      	ldrb	r3, [r3, #16]
    55de:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    55e2:	2300      	movs	r3, #0
    55e4:	f8ad 300e 	strh.w	r3, [sp, #14]
    55e8:	e035      	b.n	5656 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    55ea:	9b01      	ldr	r3, [sp, #4]
    55ec:	695a      	ldr	r2, [r3, #20]
    55ee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    55f2:	00db      	lsls	r3, r3, #3
    55f4:	4413      	add	r3, r2
    55f6:	781b      	ldrb	r3, [r3, #0]
    55f8:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    55fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5600:	4a1f      	ldr	r2, [pc, #124]	; (5680 <Port_Ipw_Init+0xac>)
    5602:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5606:	9b01      	ldr	r3, [sp, #4]
    5608:	695a      	ldr	r2, [r3, #20]
    560a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    560e:	00db      	lsls	r3, r3, #3
    5610:	4413      	add	r3, r2
    5612:	4619      	mov	r1, r3
    5614:	f7ff fe39 	bl	528a <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    5618:	f001 f978 	bl	690c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    561c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5620:	4a17      	ldr	r2, [pc, #92]	; (5680 <Port_Ipw_Init+0xac>)
    5622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5626:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    562a:	9b01      	ldr	r3, [sp, #4]
    562c:	695a      	ldr	r2, [r3, #20]
    562e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5632:	00db      	lsls	r3, r3, #3
    5634:	4413      	add	r3, r2
    5636:	685a      	ldr	r2, [r3, #4]
    5638:	f89d 300c 	ldrb.w	r3, [sp, #12]
    563c:	4810      	ldr	r0, [pc, #64]	; (5680 <Port_Ipw_Init+0xac>)
    563e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5642:	430a      	orrs	r2, r1
    5644:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    5648:	f001 f98c 	bl	6964 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    564c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5650:	3301      	adds	r3, #1
    5652:	f8ad 300e 	strh.w	r3, [sp, #14]
    5656:	f89d 300d 	ldrb.w	r3, [sp, #13]
    565a:	b29b      	uxth	r3, r3
    565c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5660:	429a      	cmp	r2, r3
    5662:	d3c2      	bcc.n	55ea <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    5664:	9b01      	ldr	r3, [sp, #4]
    5666:	6a1b      	ldr	r3, [r3, #32]
    5668:	4619      	mov	r1, r3
    566a:	2001      	movs	r0, #1
    566c:	f7ff fd98 	bl	51a0 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    5670:	9801      	ldr	r0, [sp, #4]
    5672:	f7ff fe75 	bl	5360 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    5676:	bf00      	nop
    5678:	b005      	add	sp, #20
    567a:	f85d fb04 	ldr.w	pc, [sp], #4
    567e:	bf00      	nop
    5680:	000078e8 	.word	0x000078e8

00005684 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    5684:	b500      	push	{lr}
    5686:	b085      	sub	sp, #20
    5688:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    568a:	9b01      	ldr	r3, [sp, #4]
    568c:	881b      	ldrh	r3, [r3, #0]
    568e:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5692:	2300      	movs	r3, #0
    5694:	f8ad 300e 	strh.w	r3, [sp, #14]
    5698:	e0d2      	b.n	5840 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    569a:	9b01      	ldr	r3, [sp, #4]
    569c:	68d9      	ldr	r1, [r3, #12]
    569e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56a2:	4613      	mov	r3, r2
    56a4:	009b      	lsls	r3, r3, #2
    56a6:	4413      	add	r3, r2
    56a8:	009b      	lsls	r3, r3, #2
    56aa:	440b      	add	r3, r1
    56ac:	7c5b      	ldrb	r3, [r3, #17]
    56ae:	f083 0301 	eor.w	r3, r3, #1
    56b2:	b2db      	uxtb	r3, r3
    56b4:	2b00      	cmp	r3, #0
    56b6:	f000 80be 	beq.w	5836 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    56ba:	9b01      	ldr	r3, [sp, #4]
    56bc:	68d9      	ldr	r1, [r3, #12]
    56be:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56c2:	4613      	mov	r3, r2
    56c4:	009b      	lsls	r3, r3, #2
    56c6:	4413      	add	r3, r2
    56c8:	009b      	lsls	r3, r3, #2
    56ca:	440b      	add	r3, r1
    56cc:	7c1b      	ldrb	r3, [r3, #16]
    56ce:	2b00      	cmp	r3, #0
    56d0:	f000 80b1 	beq.w	5836 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    56d4:	9b01      	ldr	r3, [sp, #4]
    56d6:	68d9      	ldr	r1, [r3, #12]
    56d8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56dc:	4613      	mov	r3, r2
    56de:	009b      	lsls	r3, r3, #2
    56e0:	4413      	add	r3, r2
    56e2:	009b      	lsls	r3, r3, #2
    56e4:	440b      	add	r3, r1
    56e6:	881b      	ldrh	r3, [r3, #0]
    56e8:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    56ec:	9b01      	ldr	r3, [sp, #4]
    56ee:	68d9      	ldr	r1, [r3, #12]
    56f0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56f4:	4613      	mov	r3, r2
    56f6:	009b      	lsls	r3, r3, #2
    56f8:	4413      	add	r3, r2
    56fa:	009b      	lsls	r3, r3, #2
    56fc:	440b      	add	r3, r1
    56fe:	68db      	ldr	r3, [r3, #12]
    5700:	2b02      	cmp	r3, #2
    5702:	d11d      	bne.n	5740 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5704:	f001 fa4a 	bl	6b9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5708:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    570c:	095b      	lsrs	r3, r3, #5
    570e:	b29b      	uxth	r3, r3
    5710:	461a      	mov	r2, r3
    5712:	4b51      	ldr	r3, [pc, #324]	; (5858 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5718:	6959      	ldr	r1, [r3, #20]
    571a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    571e:	f003 031f 	and.w	r3, r3, #31
    5722:	2201      	movs	r2, #1
    5724:	409a      	lsls	r2, r3
    5726:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    572a:	095b      	lsrs	r3, r3, #5
    572c:	b29b      	uxth	r3, r3
    572e:	4618      	mov	r0, r3
    5730:	4b49      	ldr	r3, [pc, #292]	; (5858 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5732:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5736:	430a      	orrs	r2, r1
    5738:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    573a:	f001 fa5b 	bl	6bf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    573e:	e07a      	b.n	5836 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    5740:	9b01      	ldr	r3, [sp, #4]
    5742:	68d9      	ldr	r1, [r3, #12]
    5744:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5748:	4613      	mov	r3, r2
    574a:	009b      	lsls	r3, r3, #2
    574c:	4413      	add	r3, r2
    574e:	009b      	lsls	r3, r3, #2
    5750:	440b      	add	r3, r1
    5752:	68db      	ldr	r3, [r3, #12]
    5754:	2b01      	cmp	r3, #1
    5756:	d00b      	beq.n	5770 <Port_Ipw_RefreshPortDirection+0xec>
    5758:	9b01      	ldr	r3, [sp, #4]
    575a:	68d9      	ldr	r1, [r3, #12]
    575c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5760:	4613      	mov	r3, r2
    5762:	009b      	lsls	r3, r3, #2
    5764:	4413      	add	r3, r2
    5766:	009b      	lsls	r3, r3, #2
    5768:	440b      	add	r3, r1
    576a:	68db      	ldr	r3, [r3, #12]
    576c:	2b03      	cmp	r3, #3
    576e:	d162      	bne.n	5836 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5770:	f001 fa14 	bl	6b9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5774:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5778:	095b      	lsrs	r3, r3, #5
    577a:	b29b      	uxth	r3, r3
    577c:	461a      	mov	r2, r3
    577e:	4b36      	ldr	r3, [pc, #216]	; (5858 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5784:	6959      	ldr	r1, [r3, #20]
    5786:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    578a:	f003 031f 	and.w	r3, r3, #31
    578e:	2201      	movs	r2, #1
    5790:	fa02 f303 	lsl.w	r3, r2, r3
    5794:	43da      	mvns	r2, r3
    5796:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    579a:	095b      	lsrs	r3, r3, #5
    579c:	b29b      	uxth	r3, r3
    579e:	4618      	mov	r0, r3
    57a0:	4b2d      	ldr	r3, [pc, #180]	; (5858 <Port_Ipw_RefreshPortDirection+0x1d4>)
    57a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    57a6:	400a      	ands	r2, r1
    57a8:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    57aa:	f001 fa23 	bl	6bf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    57ae:	f001 fa47 	bl	6c40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    57b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57b6:	095b      	lsrs	r3, r3, #5
    57b8:	b29b      	uxth	r3, r3
    57ba:	461a      	mov	r2, r3
    57bc:	4b26      	ldr	r3, [pc, #152]	; (5858 <Port_Ipw_RefreshPortDirection+0x1d4>)
    57be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57c2:	6999      	ldr	r1, [r3, #24]
    57c4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57c8:	f003 031f 	and.w	r3, r3, #31
    57cc:	2201      	movs	r2, #1
    57ce:	fa02 f303 	lsl.w	r3, r2, r3
    57d2:	43da      	mvns	r2, r3
    57d4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57d8:	095b      	lsrs	r3, r3, #5
    57da:	b29b      	uxth	r3, r3
    57dc:	4618      	mov	r0, r3
    57de:	4b1e      	ldr	r3, [pc, #120]	; (5858 <Port_Ipw_RefreshPortDirection+0x1d4>)
    57e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    57e4:	400a      	ands	r2, r1
    57e6:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    57e8:	9b01      	ldr	r3, [sp, #4]
    57ea:	68d9      	ldr	r1, [r3, #12]
    57ec:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    57f0:	4613      	mov	r3, r2
    57f2:	009b      	lsls	r3, r3, #2
    57f4:	4413      	add	r3, r2
    57f6:	009b      	lsls	r3, r3, #2
    57f8:	440b      	add	r3, r1
    57fa:	68db      	ldr	r3, [r3, #12]
    57fc:	2b03      	cmp	r3, #3
    57fe:	d118      	bne.n	5832 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5800:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5804:	095b      	lsrs	r3, r3, #5
    5806:	b29b      	uxth	r3, r3
    5808:	461a      	mov	r2, r3
    580a:	4b13      	ldr	r3, [pc, #76]	; (5858 <Port_Ipw_RefreshPortDirection+0x1d4>)
    580c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5810:	6999      	ldr	r1, [r3, #24]
    5812:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5816:	f003 031f 	and.w	r3, r3, #31
    581a:	2201      	movs	r2, #1
    581c:	409a      	lsls	r2, r3
    581e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5822:	095b      	lsrs	r3, r3, #5
    5824:	b29b      	uxth	r3, r3
    5826:	4618      	mov	r0, r3
    5828:	4b0b      	ldr	r3, [pc, #44]	; (5858 <Port_Ipw_RefreshPortDirection+0x1d4>)
    582a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    582e:	430a      	orrs	r2, r1
    5830:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    5832:	f001 fa31 	bl	6c98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5836:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    583a:	3301      	adds	r3, #1
    583c:	f8ad 300e 	strh.w	r3, [sp, #14]
    5840:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5844:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5848:	429a      	cmp	r2, r3
    584a:	f4ff af26 	bcc.w	569a <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    584e:	bf00      	nop
    5850:	bf00      	nop
    5852:	b005      	add	sp, #20
    5854:	f85d fb04 	ldr.w	pc, [sp], #4
    5858:	000078fc 	.word	0x000078fc

0000585c <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    585c:	b500      	push	{lr}
    585e:	b085      	sub	sp, #20
    5860:	4603      	mov	r3, r0
    5862:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5866:	2300      	movs	r3, #0
    5868:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    586c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5870:	4618      	mov	r0, r3
    5872:	f000 f871 	bl	5958 <Dio_Ipw_ReadChannel>
    5876:	4603      	mov	r3, r0
    5878:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    587c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5880:	4618      	mov	r0, r3
    5882:	b005      	add	sp, #20
    5884:	f85d fb04 	ldr.w	pc, [sp], #4

00005888 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    5888:	b500      	push	{lr}
    588a:	b083      	sub	sp, #12
    588c:	4603      	mov	r3, r0
    588e:	460a      	mov	r2, r1
    5890:	f8ad 3006 	strh.w	r3, [sp, #6]
    5894:	4613      	mov	r3, r2
    5896:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    589a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    589e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    58a2:	4611      	mov	r1, r2
    58a4:	4618      	mov	r0, r3
    58a6:	f000 f87d 	bl	59a4 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    58aa:	bf00      	nop
    58ac:	b003      	add	sp, #12
    58ae:	f85d fb04 	ldr.w	pc, [sp], #4

000058b2 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    58b2:	b500      	push	{lr}
    58b4:	b085      	sub	sp, #20
    58b6:	4603      	mov	r3, r0
    58b8:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    58bc:	2300      	movs	r3, #0
    58be:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    58c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    58c6:	4618      	mov	r0, r3
    58c8:	f000 f892 	bl	59f0 <Dio_Ipw_FlipChannel>
    58cc:	4603      	mov	r3, r0
    58ce:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    58d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    58d6:	4618      	mov	r0, r3
    58d8:	b005      	add	sp, #20
    58da:	f85d fb04 	ldr.w	pc, [sp], #4

000058de <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    58de:	b500      	push	{lr}
    58e0:	b085      	sub	sp, #20
    58e2:	4603      	mov	r3, r0
    58e4:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    58e8:	2300      	movs	r3, #0
    58ea:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    58ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    58f0:	4618      	mov	r0, r3
    58f2:	f000 f8b3 	bl	5a5c <Dio_Ipw_ReadPort>
    58f6:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    58f8:	9b03      	ldr	r3, [sp, #12]
}
    58fa:	4618      	mov	r0, r3
    58fc:	b005      	add	sp, #20
    58fe:	f85d fb04 	ldr.w	pc, [sp], #4

00005902 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    5902:	b500      	push	{lr}
    5904:	b083      	sub	sp, #12
    5906:	4603      	mov	r3, r0
    5908:	9100      	str	r1, [sp, #0]
    590a:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    590e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5912:	9900      	ldr	r1, [sp, #0]
    5914:	4618      	mov	r0, r3
    5916:	f000 f8b9 	bl	5a8c <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    591a:	bf00      	nop
    591c:	b003      	add	sp, #12
    591e:	f85d fb04 	ldr.w	pc, [sp], #4

00005922 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    5922:	b500      	push	{lr}
    5924:	b085      	sub	sp, #20
    5926:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5928:	2300      	movs	r3, #0
    592a:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    592c:	9801      	ldr	r0, [sp, #4]
    592e:	f000 f8c5 	bl	5abc <Dio_Ipw_ReadChannelGroup>
    5932:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    5934:	9b03      	ldr	r3, [sp, #12]
}
    5936:	4618      	mov	r0, r3
    5938:	b005      	add	sp, #20
    593a:	f85d fb04 	ldr.w	pc, [sp], #4

0000593e <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    593e:	b500      	push	{lr}
    5940:	b083      	sub	sp, #12
    5942:	9001      	str	r0, [sp, #4]
    5944:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    5946:	9900      	ldr	r1, [sp, #0]
    5948:	9801      	ldr	r0, [sp, #4]
    594a:	f000 f8d7 	bl	5afc <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    594e:	bf00      	nop
    5950:	b003      	add	sp, #12
    5952:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005958 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    5958:	b500      	push	{lr}
    595a:	b087      	sub	sp, #28
    595c:	4603      	mov	r3, r0
    595e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    5962:	2300      	movs	r3, #0
    5964:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5968:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    596c:	095b      	lsrs	r3, r3, #5
    596e:	b29b      	uxth	r3, r3
    5970:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    5972:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5976:	f003 031f 	and.w	r3, r3, #31
    597a:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    597c:	4a08      	ldr	r2, [pc, #32]	; (59a0 <Dio_Ipw_ReadChannel+0x48>)
    597e:	9b04      	ldr	r3, [sp, #16]
    5980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5984:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    5986:	9903      	ldr	r1, [sp, #12]
    5988:	9802      	ldr	r0, [sp, #8]
    598a:	f000 f940 	bl	5c0e <Gpio_Dio_Ip_ReadPin>
    598e:	4603      	mov	r3, r0
    5990:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    5994:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5998:	4618      	mov	r0, r3
    599a:	b007      	add	sp, #28
    599c:	f85d fb04 	ldr.w	pc, [sp], #4
    59a0:	1fff8b24 	.word	0x1fff8b24

000059a4 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    59a4:	b500      	push	{lr}
    59a6:	b087      	sub	sp, #28
    59a8:	4603      	mov	r3, r0
    59aa:	460a      	mov	r2, r1
    59ac:	f8ad 3006 	strh.w	r3, [sp, #6]
    59b0:	4613      	mov	r3, r2
    59b2:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    59b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    59ba:	095b      	lsrs	r3, r3, #5
    59bc:	b29b      	uxth	r3, r3
    59be:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    59c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    59c4:	f003 031f 	and.w	r3, r3, #31
    59c8:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    59ca:	4a08      	ldr	r2, [pc, #32]	; (59ec <Dio_Ipw_WriteChannel+0x48>)
    59cc:	9b05      	ldr	r3, [sp, #20]
    59ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    59d2:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    59d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    59d8:	461a      	mov	r2, r3
    59da:	9904      	ldr	r1, [sp, #16]
    59dc:	9803      	ldr	r0, [sp, #12]
    59de:	f000 f8b7 	bl	5b50 <Gpio_Dio_Ip_WritePin>
}
    59e2:	bf00      	nop
    59e4:	b007      	add	sp, #28
    59e6:	f85d fb04 	ldr.w	pc, [sp], #4
    59ea:	bf00      	nop
    59ec:	1fff8b24 	.word	0x1fff8b24

000059f0 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    59f0:	b500      	push	{lr}
    59f2:	b089      	sub	sp, #36	; 0x24
    59f4:	4603      	mov	r3, r0
    59f6:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    59fa:	2300      	movs	r3, #0
    59fc:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5a00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5a04:	095b      	lsrs	r3, r3, #5
    5a06:	b29b      	uxth	r3, r3
    5a08:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    5a0a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5a0e:	f003 031f 	and.w	r3, r3, #31
    5a12:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    5a14:	4a10      	ldr	r2, [pc, #64]	; (5a58 <Dio_Ipw_FlipChannel+0x68>)
    5a16:	9b06      	ldr	r3, [sp, #24]
    5a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5a1c:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    5a1e:	2201      	movs	r2, #1
    5a20:	9b05      	ldr	r3, [sp, #20]
    5a22:	fa02 f303 	lsl.w	r3, r2, r3
    5a26:	4619      	mov	r1, r3
    5a28:	9804      	ldr	r0, [sp, #16]
    5a2a:	f000 f8dc 	bl	5be6 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    5a2e:	9804      	ldr	r0, [sp, #16]
    5a30:	f000 f8bc 	bl	5bac <Gpio_Dio_Ip_GetPinsOutput>
    5a34:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    5a36:	2201      	movs	r2, #1
    5a38:	9b05      	ldr	r3, [sp, #20]
    5a3a:	409a      	lsls	r2, r3
    5a3c:	9b03      	ldr	r3, [sp, #12]
    5a3e:	401a      	ands	r2, r3
    5a40:	9b05      	ldr	r3, [sp, #20]
    5a42:	fa22 f303 	lsr.w	r3, r2, r3
    5a46:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    5a4a:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    5a4e:	4618      	mov	r0, r3
    5a50:	b009      	add	sp, #36	; 0x24
    5a52:	f85d fb04 	ldr.w	pc, [sp], #4
    5a56:	bf00      	nop
    5a58:	1fff8b24 	.word	0x1fff8b24

00005a5c <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    5a5c:	b500      	push	{lr}
    5a5e:	b085      	sub	sp, #20
    5a60:	4603      	mov	r3, r0
    5a62:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5a66:	2300      	movs	r3, #0
    5a68:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    5a6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5a6e:	4a06      	ldr	r2, [pc, #24]	; (5a88 <Dio_Ipw_ReadPort+0x2c>)
    5a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5a74:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    5a76:	9802      	ldr	r0, [sp, #8]
    5a78:	f000 f8be 	bl	5bf8 <Gpio_Dio_Ip_ReadPins>
    5a7c:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    5a7e:	9b03      	ldr	r3, [sp, #12]
}
    5a80:	4618      	mov	r0, r3
    5a82:	b005      	add	sp, #20
    5a84:	f85d fb04 	ldr.w	pc, [sp], #4
    5a88:	1fff8b24 	.word	0x1fff8b24

00005a8c <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    5a8c:	b500      	push	{lr}
    5a8e:	b085      	sub	sp, #20
    5a90:	4603      	mov	r3, r0
    5a92:	9100      	str	r1, [sp, #0]
    5a94:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    5a98:	9b00      	ldr	r3, [sp, #0]
    5a9a:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    5a9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5aa0:	4a05      	ldr	r2, [pc, #20]	; (5ab8 <Dio_Ipw_WritePort+0x2c>)
    5aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5aa6:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    5aa8:	9903      	ldr	r1, [sp, #12]
    5aaa:	9802      	ldr	r0, [sp, #8]
    5aac:	f000 f875 	bl	5b9a <Gpio_Dio_Ip_WritePins>
}
    5ab0:	bf00      	nop
    5ab2:	b005      	add	sp, #20
    5ab4:	f85d fb04 	ldr.w	pc, [sp], #4
    5ab8:	1fff8b24 	.word	0x1fff8b24

00005abc <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    5abc:	b500      	push	{lr}
    5abe:	b087      	sub	sp, #28
    5ac0:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5ac2:	2300      	movs	r3, #0
    5ac4:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    5ac6:	9b01      	ldr	r3, [sp, #4]
    5ac8:	781b      	ldrb	r3, [r3, #0]
    5aca:	461a      	mov	r2, r3
    5acc:	4b0a      	ldr	r3, [pc, #40]	; (5af8 <Dio_Ipw_ReadChannelGroup+0x3c>)
    5ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5ad2:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    5ad4:	9804      	ldr	r0, [sp, #16]
    5ad6:	f000 f88f 	bl	5bf8 <Gpio_Dio_Ip_ReadPins>
    5ada:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    5adc:	9b01      	ldr	r3, [sp, #4]
    5ade:	685a      	ldr	r2, [r3, #4]
    5ae0:	9b03      	ldr	r3, [sp, #12]
    5ae2:	4013      	ands	r3, r2
    5ae4:	9a01      	ldr	r2, [sp, #4]
    5ae6:	7852      	ldrb	r2, [r2, #1]
    5ae8:	40d3      	lsrs	r3, r2
    5aea:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    5aec:	9b05      	ldr	r3, [sp, #20]
}
    5aee:	4618      	mov	r0, r3
    5af0:	b007      	add	sp, #28
    5af2:	f85d fb04 	ldr.w	pc, [sp], #4
    5af6:	bf00      	nop
    5af8:	1fff8b24 	.word	0x1fff8b24

00005afc <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    5afc:	b500      	push	{lr}
    5afe:	b087      	sub	sp, #28
    5b00:	9001      	str	r0, [sp, #4]
    5b02:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    5b04:	9b01      	ldr	r3, [sp, #4]
    5b06:	781b      	ldrb	r3, [r3, #0]
    5b08:	461a      	mov	r2, r3
    5b0a:	4b10      	ldr	r3, [pc, #64]	; (5b4c <Dio_Ipw_WriteChannelGroup+0x50>)
    5b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b10:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    5b12:	9b01      	ldr	r3, [sp, #4]
    5b14:	785b      	ldrb	r3, [r3, #1]
    5b16:	461a      	mov	r2, r3
    5b18:	9b00      	ldr	r3, [sp, #0]
    5b1a:	fa03 f202 	lsl.w	r2, r3, r2
    5b1e:	9b01      	ldr	r3, [sp, #4]
    5b20:	685b      	ldr	r3, [r3, #4]
    5b22:	4013      	ands	r3, r2
    5b24:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    5b26:	9904      	ldr	r1, [sp, #16]
    5b28:	9805      	ldr	r0, [sp, #20]
    5b2a:	f000 f84a 	bl	5bc2 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    5b2e:	9b04      	ldr	r3, [sp, #16]
    5b30:	43da      	mvns	r2, r3
    5b32:	9b01      	ldr	r3, [sp, #4]
    5b34:	685b      	ldr	r3, [r3, #4]
    5b36:	4013      	ands	r3, r2
    5b38:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    5b3a:	9903      	ldr	r1, [sp, #12]
    5b3c:	9805      	ldr	r0, [sp, #20]
    5b3e:	f000 f849 	bl	5bd4 <Gpio_Dio_Ip_ClearPins>

}
    5b42:	bf00      	nop
    5b44:	b007      	add	sp, #28
    5b46:	f85d fb04 	ldr.w	pc, [sp], #4
    5b4a:	bf00      	nop
    5b4c:	1fff8b24 	.word	0x1fff8b24

00005b50 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    5b50:	b500      	push	{lr}
    5b52:	b087      	sub	sp, #28
    5b54:	9003      	str	r0, [sp, #12]
    5b56:	9102      	str	r1, [sp, #8]
    5b58:	4613      	mov	r3, r2
    5b5a:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    5b5e:	f000 f86d 	bl	5c3c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    5b62:	9b03      	ldr	r3, [sp, #12]
    5b64:	681b      	ldr	r3, [r3, #0]
    5b66:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    5b68:	2201      	movs	r2, #1
    5b6a:	9b02      	ldr	r3, [sp, #8]
    5b6c:	fa02 f303 	lsl.w	r3, r2, r3
    5b70:	43db      	mvns	r3, r3
    5b72:	9a05      	ldr	r2, [sp, #20]
    5b74:	4013      	ands	r3, r2
    5b76:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    5b78:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5b7c:	9b02      	ldr	r3, [sp, #8]
    5b7e:	fa02 f303 	lsl.w	r3, r2, r3
    5b82:	9a05      	ldr	r2, [sp, #20]
    5b84:	4313      	orrs	r3, r2
    5b86:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    5b88:	9b03      	ldr	r3, [sp, #12]
    5b8a:	9a05      	ldr	r2, [sp, #20]
    5b8c:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    5b8e:	f000 f881 	bl	5c94 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    5b92:	bf00      	nop
    5b94:	b007      	add	sp, #28
    5b96:	f85d fb04 	ldr.w	pc, [sp], #4

00005b9a <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    5b9a:	b082      	sub	sp, #8
    5b9c:	9001      	str	r0, [sp, #4]
    5b9e:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    5ba0:	9b01      	ldr	r3, [sp, #4]
    5ba2:	9a00      	ldr	r2, [sp, #0]
    5ba4:	601a      	str	r2, [r3, #0]
}
    5ba6:	bf00      	nop
    5ba8:	b002      	add	sp, #8
    5baa:	4770      	bx	lr

00005bac <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    5bac:	b084      	sub	sp, #16
    5bae:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    5bb0:	2300      	movs	r3, #0
    5bb2:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    5bb4:	9b01      	ldr	r3, [sp, #4]
    5bb6:	681b      	ldr	r3, [r3, #0]
    5bb8:	9303      	str	r3, [sp, #12]
    return returnValue;
    5bba:	9b03      	ldr	r3, [sp, #12]
}
    5bbc:	4618      	mov	r0, r3
    5bbe:	b004      	add	sp, #16
    5bc0:	4770      	bx	lr

00005bc2 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    5bc2:	b082      	sub	sp, #8
    5bc4:	9001      	str	r0, [sp, #4]
    5bc6:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    5bc8:	9b01      	ldr	r3, [sp, #4]
    5bca:	9a00      	ldr	r2, [sp, #0]
    5bcc:	605a      	str	r2, [r3, #4]
}
    5bce:	bf00      	nop
    5bd0:	b002      	add	sp, #8
    5bd2:	4770      	bx	lr

00005bd4 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    5bd4:	b082      	sub	sp, #8
    5bd6:	9001      	str	r0, [sp, #4]
    5bd8:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    5bda:	9b01      	ldr	r3, [sp, #4]
    5bdc:	9a00      	ldr	r2, [sp, #0]
    5bde:	609a      	str	r2, [r3, #8]
}
    5be0:	bf00      	nop
    5be2:	b002      	add	sp, #8
    5be4:	4770      	bx	lr

00005be6 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    5be6:	b082      	sub	sp, #8
    5be8:	9001      	str	r0, [sp, #4]
    5bea:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    5bec:	9b01      	ldr	r3, [sp, #4]
    5bee:	9a00      	ldr	r2, [sp, #0]
    5bf0:	60da      	str	r2, [r3, #12]
}
    5bf2:	bf00      	nop
    5bf4:	b002      	add	sp, #8
    5bf6:	4770      	bx	lr

00005bf8 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    5bf8:	b084      	sub	sp, #16
    5bfa:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    5bfc:	2300      	movs	r3, #0
    5bfe:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    5c00:	9b01      	ldr	r3, [sp, #4]
    5c02:	691b      	ldr	r3, [r3, #16]
    5c04:	9303      	str	r3, [sp, #12]
    return returnValue;
    5c06:	9b03      	ldr	r3, [sp, #12]
}
    5c08:	4618      	mov	r0, r3
    5c0a:	b004      	add	sp, #16
    5c0c:	4770      	bx	lr

00005c0e <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    5c0e:	b084      	sub	sp, #16
    5c10:	9001      	str	r0, [sp, #4]
    5c12:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    5c14:	2300      	movs	r3, #0
    5c16:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    5c1a:	9b01      	ldr	r3, [sp, #4]
    5c1c:	691a      	ldr	r2, [r3, #16]
    5c1e:	2101      	movs	r1, #1
    5c20:	9b00      	ldr	r3, [sp, #0]
    5c22:	fa01 f303 	lsl.w	r3, r1, r3
    5c26:	401a      	ands	r2, r3
    5c28:	9b00      	ldr	r3, [sp, #0]
    5c2a:	fa22 f303 	lsr.w	r3, r2, r3
    5c2e:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    5c32:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5c36:	4618      	mov	r0, r3
    5c38:	b004      	add	sp, #16
    5c3a:	4770      	bx	lr

00005c3c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    5c3c:	b500      	push	{lr}
    5c3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5c40:	f7fa ff40 	bl	ac4 <Sys_GetCoreID>
    5c44:	4603      	mov	r3, r0
    5c46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    5c48:	4a10      	ldr	r2, [pc, #64]	; (5c8c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    5c4a:	9b01      	ldr	r3, [sp, #4]
    5c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c50:	2b00      	cmp	r3, #0
    5c52:	d10d      	bne.n	5c70 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5c54:	f7fa fe54 	bl	900 <Dio_schm_read_msr>
    5c58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5c5a:	9b00      	ldr	r3, [sp, #0]
    5c5c:	f003 0301 	and.w	r3, r3, #1
    5c60:	2b00      	cmp	r3, #0
    5c62:	d100      	bne.n	5c66 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5c64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    5c66:	490a      	ldr	r1, [pc, #40]	; (5c90 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    5c68:	9b01      	ldr	r3, [sp, #4]
    5c6a:	9a00      	ldr	r2, [sp, #0]
    5c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    5c70:	4a06      	ldr	r2, [pc, #24]	; (5c8c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    5c72:	9b01      	ldr	r3, [sp, #4]
    5c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c78:	1c5a      	adds	r2, r3, #1
    5c7a:	4904      	ldr	r1, [pc, #16]	; (5c8c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    5c7c:	9b01      	ldr	r3, [sp, #4]
    5c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5c82:	bf00      	nop
    5c84:	b003      	add	sp, #12
    5c86:	f85d fb04 	ldr.w	pc, [sp], #4
    5c8a:	bf00      	nop
    5c8c:	1fff8cfc 	.word	0x1fff8cfc
    5c90:	1fff8cf8 	.word	0x1fff8cf8

00005c94 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    5c94:	b500      	push	{lr}
    5c96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5c98:	f7fa ff14 	bl	ac4 <Sys_GetCoreID>
    5c9c:	4603      	mov	r3, r0
    5c9e:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    5ca0:	4a0d      	ldr	r2, [pc, #52]	; (5cd8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    5ca2:	9b01      	ldr	r3, [sp, #4]
    5ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ca8:	1e5a      	subs	r2, r3, #1
    5caa:	490b      	ldr	r1, [pc, #44]	; (5cd8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    5cac:	9b01      	ldr	r3, [sp, #4]
    5cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    5cb2:	4a0a      	ldr	r2, [pc, #40]	; (5cdc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    5cb4:	9b01      	ldr	r3, [sp, #4]
    5cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5cba:	f003 0301 	and.w	r3, r3, #1
    5cbe:	2b00      	cmp	r3, #0
    5cc0:	d106      	bne.n	5cd0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    5cc2:	4a05      	ldr	r2, [pc, #20]	; (5cd8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    5cc4:	9b01      	ldr	r3, [sp, #4]
    5cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5cca:	2b00      	cmp	r3, #0
    5ccc:	d100      	bne.n	5cd0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5cce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5cd0:	bf00      	nop
    5cd2:	b003      	add	sp, #12
    5cd4:	f85d fb04 	ldr.w	pc, [sp], #4
    5cd8:	1fff8cfc 	.word	0x1fff8cfc
    5cdc:	1fff8cf8 	.word	0x1fff8cf8

00005ce0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    5ce0:	b500      	push	{lr}
    5ce2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5ce4:	f7fa feee 	bl	ac4 <Sys_GetCoreID>
    5ce8:	4603      	mov	r3, r0
    5cea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    5cec:	4a10      	ldr	r2, [pc, #64]	; (5d30 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    5cee:	9b01      	ldr	r3, [sp, #4]
    5cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5cf4:	2b00      	cmp	r3, #0
    5cf6:	d10d      	bne.n	5d14 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5cf8:	f7fa fe02 	bl	900 <Dio_schm_read_msr>
    5cfc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5cfe:	9b00      	ldr	r3, [sp, #0]
    5d00:	f003 0301 	and.w	r3, r3, #1
    5d04:	2b00      	cmp	r3, #0
    5d06:	d100      	bne.n	5d0a <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5d08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    5d0a:	490a      	ldr	r1, [pc, #40]	; (5d34 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    5d0c:	9b01      	ldr	r3, [sp, #4]
    5d0e:	9a00      	ldr	r2, [sp, #0]
    5d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    5d14:	4a06      	ldr	r2, [pc, #24]	; (5d30 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    5d16:	9b01      	ldr	r3, [sp, #4]
    5d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d1c:	1c5a      	adds	r2, r3, #1
    5d1e:	4904      	ldr	r1, [pc, #16]	; (5d30 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    5d20:	9b01      	ldr	r3, [sp, #4]
    5d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5d26:	bf00      	nop
    5d28:	b003      	add	sp, #12
    5d2a:	f85d fb04 	ldr.w	pc, [sp], #4
    5d2e:	bf00      	nop
    5d30:	1fff8d04 	.word	0x1fff8d04
    5d34:	1fff8d00 	.word	0x1fff8d00

00005d38 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    5d38:	b500      	push	{lr}
    5d3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5d3c:	f7fa fec2 	bl	ac4 <Sys_GetCoreID>
    5d40:	4603      	mov	r3, r0
    5d42:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    5d44:	4a0d      	ldr	r2, [pc, #52]	; (5d7c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    5d46:	9b01      	ldr	r3, [sp, #4]
    5d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d4c:	1e5a      	subs	r2, r3, #1
    5d4e:	490b      	ldr	r1, [pc, #44]	; (5d7c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    5d50:	9b01      	ldr	r3, [sp, #4]
    5d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    5d56:	4a0a      	ldr	r2, [pc, #40]	; (5d80 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    5d58:	9b01      	ldr	r3, [sp, #4]
    5d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d5e:	f003 0301 	and.w	r3, r3, #1
    5d62:	2b00      	cmp	r3, #0
    5d64:	d106      	bne.n	5d74 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    5d66:	4a05      	ldr	r2, [pc, #20]	; (5d7c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    5d68:	9b01      	ldr	r3, [sp, #4]
    5d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d6e:	2b00      	cmp	r3, #0
    5d70:	d100      	bne.n	5d74 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5d72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5d74:	bf00      	nop
    5d76:	b003      	add	sp, #12
    5d78:	f85d fb04 	ldr.w	pc, [sp], #4
    5d7c:	1fff8d04 	.word	0x1fff8d04
    5d80:	1fff8d00 	.word	0x1fff8d00

00005d84 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    5d84:	b500      	push	{lr}
    5d86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5d88:	f7fa fe9c 	bl	ac4 <Sys_GetCoreID>
    5d8c:	4603      	mov	r3, r0
    5d8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    5d90:	4a10      	ldr	r2, [pc, #64]	; (5dd4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    5d92:	9b01      	ldr	r3, [sp, #4]
    5d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d98:	2b00      	cmp	r3, #0
    5d9a:	d10d      	bne.n	5db8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5d9c:	f7fa fdb9 	bl	912 <Mcu_schm_read_msr>
    5da0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5da2:	9b00      	ldr	r3, [sp, #0]
    5da4:	f003 0301 	and.w	r3, r3, #1
    5da8:	2b00      	cmp	r3, #0
    5daa:	d100      	bne.n	5dae <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5dac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    5dae:	490a      	ldr	r1, [pc, #40]	; (5dd8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    5db0:	9b01      	ldr	r3, [sp, #4]
    5db2:	9a00      	ldr	r2, [sp, #0]
    5db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    5db8:	4a06      	ldr	r2, [pc, #24]	; (5dd4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    5dba:	9b01      	ldr	r3, [sp, #4]
    5dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5dc0:	1c5a      	adds	r2, r3, #1
    5dc2:	4904      	ldr	r1, [pc, #16]	; (5dd4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    5dc4:	9b01      	ldr	r3, [sp, #4]
    5dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5dca:	bf00      	nop
    5dcc:	b003      	add	sp, #12
    5dce:	f85d fb04 	ldr.w	pc, [sp], #4
    5dd2:	bf00      	nop
    5dd4:	1fff8d0c 	.word	0x1fff8d0c
    5dd8:	1fff8d08 	.word	0x1fff8d08

00005ddc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    5ddc:	b500      	push	{lr}
    5dde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5de0:	f7fa fe70 	bl	ac4 <Sys_GetCoreID>
    5de4:	4603      	mov	r3, r0
    5de6:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    5de8:	4a0d      	ldr	r2, [pc, #52]	; (5e20 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    5dea:	9b01      	ldr	r3, [sp, #4]
    5dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5df0:	1e5a      	subs	r2, r3, #1
    5df2:	490b      	ldr	r1, [pc, #44]	; (5e20 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    5df4:	9b01      	ldr	r3, [sp, #4]
    5df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    5dfa:	4a0a      	ldr	r2, [pc, #40]	; (5e24 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    5dfc:	9b01      	ldr	r3, [sp, #4]
    5dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e02:	f003 0301 	and.w	r3, r3, #1
    5e06:	2b00      	cmp	r3, #0
    5e08:	d106      	bne.n	5e18 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    5e0a:	4a05      	ldr	r2, [pc, #20]	; (5e20 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    5e0c:	9b01      	ldr	r3, [sp, #4]
    5e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e12:	2b00      	cmp	r3, #0
    5e14:	d100      	bne.n	5e18 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5e16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5e18:	bf00      	nop
    5e1a:	b003      	add	sp, #12
    5e1c:	f85d fb04 	ldr.w	pc, [sp], #4
    5e20:	1fff8d0c 	.word	0x1fff8d0c
    5e24:	1fff8d08 	.word	0x1fff8d08

00005e28 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    5e28:	b500      	push	{lr}
    5e2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5e2c:	f7fa fe4a 	bl	ac4 <Sys_GetCoreID>
    5e30:	4603      	mov	r3, r0
    5e32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    5e34:	4a10      	ldr	r2, [pc, #64]	; (5e78 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    5e36:	9b01      	ldr	r3, [sp, #4]
    5e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e3c:	2b00      	cmp	r3, #0
    5e3e:	d10d      	bne.n	5e5c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5e40:	f7fa fd67 	bl	912 <Mcu_schm_read_msr>
    5e44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5e46:	9b00      	ldr	r3, [sp, #0]
    5e48:	f003 0301 	and.w	r3, r3, #1
    5e4c:	2b00      	cmp	r3, #0
    5e4e:	d100      	bne.n	5e52 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5e50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    5e52:	490a      	ldr	r1, [pc, #40]	; (5e7c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    5e54:	9b01      	ldr	r3, [sp, #4]
    5e56:	9a00      	ldr	r2, [sp, #0]
    5e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    5e5c:	4a06      	ldr	r2, [pc, #24]	; (5e78 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    5e5e:	9b01      	ldr	r3, [sp, #4]
    5e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e64:	1c5a      	adds	r2, r3, #1
    5e66:	4904      	ldr	r1, [pc, #16]	; (5e78 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    5e68:	9b01      	ldr	r3, [sp, #4]
    5e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5e6e:	bf00      	nop
    5e70:	b003      	add	sp, #12
    5e72:	f85d fb04 	ldr.w	pc, [sp], #4
    5e76:	bf00      	nop
    5e78:	1fff8d14 	.word	0x1fff8d14
    5e7c:	1fff8d10 	.word	0x1fff8d10

00005e80 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    5e80:	b500      	push	{lr}
    5e82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5e84:	f7fa fe1e 	bl	ac4 <Sys_GetCoreID>
    5e88:	4603      	mov	r3, r0
    5e8a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    5e8c:	4a0d      	ldr	r2, [pc, #52]	; (5ec4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    5e8e:	9b01      	ldr	r3, [sp, #4]
    5e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e94:	1e5a      	subs	r2, r3, #1
    5e96:	490b      	ldr	r1, [pc, #44]	; (5ec4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    5e98:	9b01      	ldr	r3, [sp, #4]
    5e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    5e9e:	4a0a      	ldr	r2, [pc, #40]	; (5ec8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    5ea0:	9b01      	ldr	r3, [sp, #4]
    5ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ea6:	f003 0301 	and.w	r3, r3, #1
    5eaa:	2b00      	cmp	r3, #0
    5eac:	d106      	bne.n	5ebc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    5eae:	4a05      	ldr	r2, [pc, #20]	; (5ec4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    5eb0:	9b01      	ldr	r3, [sp, #4]
    5eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5eb6:	2b00      	cmp	r3, #0
    5eb8:	d100      	bne.n	5ebc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5eba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5ebc:	bf00      	nop
    5ebe:	b003      	add	sp, #12
    5ec0:	f85d fb04 	ldr.w	pc, [sp], #4
    5ec4:	1fff8d14 	.word	0x1fff8d14
    5ec8:	1fff8d10 	.word	0x1fff8d10

00005ecc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    5ecc:	b500      	push	{lr}
    5ece:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5ed0:	f7fa fdf8 	bl	ac4 <Sys_GetCoreID>
    5ed4:	4603      	mov	r3, r0
    5ed6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    5ed8:	4a10      	ldr	r2, [pc, #64]	; (5f1c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    5eda:	9b01      	ldr	r3, [sp, #4]
    5edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ee0:	2b00      	cmp	r3, #0
    5ee2:	d10d      	bne.n	5f00 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5ee4:	f7fa fd15 	bl	912 <Mcu_schm_read_msr>
    5ee8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5eea:	9b00      	ldr	r3, [sp, #0]
    5eec:	f003 0301 	and.w	r3, r3, #1
    5ef0:	2b00      	cmp	r3, #0
    5ef2:	d100      	bne.n	5ef6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5ef4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    5ef6:	490a      	ldr	r1, [pc, #40]	; (5f20 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    5ef8:	9b01      	ldr	r3, [sp, #4]
    5efa:	9a00      	ldr	r2, [sp, #0]
    5efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    5f00:	4a06      	ldr	r2, [pc, #24]	; (5f1c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    5f02:	9b01      	ldr	r3, [sp, #4]
    5f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f08:	1c5a      	adds	r2, r3, #1
    5f0a:	4904      	ldr	r1, [pc, #16]	; (5f1c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    5f0c:	9b01      	ldr	r3, [sp, #4]
    5f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5f12:	bf00      	nop
    5f14:	b003      	add	sp, #12
    5f16:	f85d fb04 	ldr.w	pc, [sp], #4
    5f1a:	bf00      	nop
    5f1c:	1fff8d1c 	.word	0x1fff8d1c
    5f20:	1fff8d18 	.word	0x1fff8d18

00005f24 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    5f24:	b500      	push	{lr}
    5f26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5f28:	f7fa fdcc 	bl	ac4 <Sys_GetCoreID>
    5f2c:	4603      	mov	r3, r0
    5f2e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    5f30:	4a0d      	ldr	r2, [pc, #52]	; (5f68 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    5f32:	9b01      	ldr	r3, [sp, #4]
    5f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f38:	1e5a      	subs	r2, r3, #1
    5f3a:	490b      	ldr	r1, [pc, #44]	; (5f68 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    5f3c:	9b01      	ldr	r3, [sp, #4]
    5f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    5f42:	4a0a      	ldr	r2, [pc, #40]	; (5f6c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    5f44:	9b01      	ldr	r3, [sp, #4]
    5f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f4a:	f003 0301 	and.w	r3, r3, #1
    5f4e:	2b00      	cmp	r3, #0
    5f50:	d106      	bne.n	5f60 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    5f52:	4a05      	ldr	r2, [pc, #20]	; (5f68 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    5f54:	9b01      	ldr	r3, [sp, #4]
    5f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f5a:	2b00      	cmp	r3, #0
    5f5c:	d100      	bne.n	5f60 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5f5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5f60:	bf00      	nop
    5f62:	b003      	add	sp, #12
    5f64:	f85d fb04 	ldr.w	pc, [sp], #4
    5f68:	1fff8d1c 	.word	0x1fff8d1c
    5f6c:	1fff8d18 	.word	0x1fff8d18

00005f70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    5f70:	b500      	push	{lr}
    5f72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5f74:	f7fa fda6 	bl	ac4 <Sys_GetCoreID>
    5f78:	4603      	mov	r3, r0
    5f7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    5f7c:	4a10      	ldr	r2, [pc, #64]	; (5fc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    5f7e:	9b01      	ldr	r3, [sp, #4]
    5f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f84:	2b00      	cmp	r3, #0
    5f86:	d10d      	bne.n	5fa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5f88:	f7fa fccc 	bl	924 <Port_schm_read_msr>
    5f8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5f8e:	9b00      	ldr	r3, [sp, #0]
    5f90:	f003 0301 	and.w	r3, r3, #1
    5f94:	2b00      	cmp	r3, #0
    5f96:	d100      	bne.n	5f9a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5f98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    5f9a:	490a      	ldr	r1, [pc, #40]	; (5fc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    5f9c:	9b01      	ldr	r3, [sp, #4]
    5f9e:	9a00      	ldr	r2, [sp, #0]
    5fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    5fa4:	4a06      	ldr	r2, [pc, #24]	; (5fc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    5fa6:	9b01      	ldr	r3, [sp, #4]
    5fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fac:	1c5a      	adds	r2, r3, #1
    5fae:	4904      	ldr	r1, [pc, #16]	; (5fc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    5fb0:	9b01      	ldr	r3, [sp, #4]
    5fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5fb6:	bf00      	nop
    5fb8:	b003      	add	sp, #12
    5fba:	f85d fb04 	ldr.w	pc, [sp], #4
    5fbe:	bf00      	nop
    5fc0:	1fff8d24 	.word	0x1fff8d24
    5fc4:	1fff8d20 	.word	0x1fff8d20

00005fc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    5fc8:	b500      	push	{lr}
    5fca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5fcc:	f7fa fd7a 	bl	ac4 <Sys_GetCoreID>
    5fd0:	4603      	mov	r3, r0
    5fd2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    5fd4:	4a0d      	ldr	r2, [pc, #52]	; (600c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    5fd6:	9b01      	ldr	r3, [sp, #4]
    5fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fdc:	1e5a      	subs	r2, r3, #1
    5fde:	490b      	ldr	r1, [pc, #44]	; (600c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    5fe0:	9b01      	ldr	r3, [sp, #4]
    5fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    5fe6:	4a0a      	ldr	r2, [pc, #40]	; (6010 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    5fe8:	9b01      	ldr	r3, [sp, #4]
    5fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fee:	f003 0301 	and.w	r3, r3, #1
    5ff2:	2b00      	cmp	r3, #0
    5ff4:	d106      	bne.n	6004 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    5ff6:	4a05      	ldr	r2, [pc, #20]	; (600c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    5ff8:	9b01      	ldr	r3, [sp, #4]
    5ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ffe:	2b00      	cmp	r3, #0
    6000:	d100      	bne.n	6004 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6002:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6004:	bf00      	nop
    6006:	b003      	add	sp, #12
    6008:	f85d fb04 	ldr.w	pc, [sp], #4
    600c:	1fff8d24 	.word	0x1fff8d24
    6010:	1fff8d20 	.word	0x1fff8d20

00006014 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    6014:	b500      	push	{lr}
    6016:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6018:	f7fa fd54 	bl	ac4 <Sys_GetCoreID>
    601c:	4603      	mov	r3, r0
    601e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    6020:	4a10      	ldr	r2, [pc, #64]	; (6064 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    6022:	9b01      	ldr	r3, [sp, #4]
    6024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6028:	2b00      	cmp	r3, #0
    602a:	d10d      	bne.n	6048 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    602c:	f7fa fc7a 	bl	924 <Port_schm_read_msr>
    6030:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6032:	9b00      	ldr	r3, [sp, #0]
    6034:	f003 0301 	and.w	r3, r3, #1
    6038:	2b00      	cmp	r3, #0
    603a:	d100      	bne.n	603e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    603c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    603e:	490a      	ldr	r1, [pc, #40]	; (6068 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    6040:	9b01      	ldr	r3, [sp, #4]
    6042:	9a00      	ldr	r2, [sp, #0]
    6044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    6048:	4a06      	ldr	r2, [pc, #24]	; (6064 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    604a:	9b01      	ldr	r3, [sp, #4]
    604c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6050:	1c5a      	adds	r2, r3, #1
    6052:	4904      	ldr	r1, [pc, #16]	; (6064 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    6054:	9b01      	ldr	r3, [sp, #4]
    6056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    605a:	bf00      	nop
    605c:	b003      	add	sp, #12
    605e:	f85d fb04 	ldr.w	pc, [sp], #4
    6062:	bf00      	nop
    6064:	1fff8d2c 	.word	0x1fff8d2c
    6068:	1fff8d28 	.word	0x1fff8d28

0000606c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    606c:	b500      	push	{lr}
    606e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6070:	f7fa fd28 	bl	ac4 <Sys_GetCoreID>
    6074:	4603      	mov	r3, r0
    6076:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    6078:	4a0d      	ldr	r2, [pc, #52]	; (60b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    607a:	9b01      	ldr	r3, [sp, #4]
    607c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6080:	1e5a      	subs	r2, r3, #1
    6082:	490b      	ldr	r1, [pc, #44]	; (60b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    6084:	9b01      	ldr	r3, [sp, #4]
    6086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    608a:	4a0a      	ldr	r2, [pc, #40]	; (60b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    608c:	9b01      	ldr	r3, [sp, #4]
    608e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6092:	f003 0301 	and.w	r3, r3, #1
    6096:	2b00      	cmp	r3, #0
    6098:	d106      	bne.n	60a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    609a:	4a05      	ldr	r2, [pc, #20]	; (60b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    609c:	9b01      	ldr	r3, [sp, #4]
    609e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60a2:	2b00      	cmp	r3, #0
    60a4:	d100      	bne.n	60a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    60a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    60a8:	bf00      	nop
    60aa:	b003      	add	sp, #12
    60ac:	f85d fb04 	ldr.w	pc, [sp], #4
    60b0:	1fff8d2c 	.word	0x1fff8d2c
    60b4:	1fff8d28 	.word	0x1fff8d28

000060b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    60b8:	b500      	push	{lr}
    60ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    60bc:	f7fa fd02 	bl	ac4 <Sys_GetCoreID>
    60c0:	4603      	mov	r3, r0
    60c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    60c4:	4a10      	ldr	r2, [pc, #64]	; (6108 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    60c6:	9b01      	ldr	r3, [sp, #4]
    60c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60cc:	2b00      	cmp	r3, #0
    60ce:	d10d      	bne.n	60ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    60d0:	f7fa fc28 	bl	924 <Port_schm_read_msr>
    60d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    60d6:	9b00      	ldr	r3, [sp, #0]
    60d8:	f003 0301 	and.w	r3, r3, #1
    60dc:	2b00      	cmp	r3, #0
    60de:	d100      	bne.n	60e2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    60e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    60e2:	490a      	ldr	r1, [pc, #40]	; (610c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    60e4:	9b01      	ldr	r3, [sp, #4]
    60e6:	9a00      	ldr	r2, [sp, #0]
    60e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    60ec:	4a06      	ldr	r2, [pc, #24]	; (6108 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    60ee:	9b01      	ldr	r3, [sp, #4]
    60f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60f4:	1c5a      	adds	r2, r3, #1
    60f6:	4904      	ldr	r1, [pc, #16]	; (6108 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    60f8:	9b01      	ldr	r3, [sp, #4]
    60fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    60fe:	bf00      	nop
    6100:	b003      	add	sp, #12
    6102:	f85d fb04 	ldr.w	pc, [sp], #4
    6106:	bf00      	nop
    6108:	1fff8d34 	.word	0x1fff8d34
    610c:	1fff8d30 	.word	0x1fff8d30

00006110 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    6110:	b500      	push	{lr}
    6112:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6114:	f7fa fcd6 	bl	ac4 <Sys_GetCoreID>
    6118:	4603      	mov	r3, r0
    611a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    611c:	4a0d      	ldr	r2, [pc, #52]	; (6154 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    611e:	9b01      	ldr	r3, [sp, #4]
    6120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6124:	1e5a      	subs	r2, r3, #1
    6126:	490b      	ldr	r1, [pc, #44]	; (6154 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6128:	9b01      	ldr	r3, [sp, #4]
    612a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    612e:	4a0a      	ldr	r2, [pc, #40]	; (6158 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    6130:	9b01      	ldr	r3, [sp, #4]
    6132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6136:	f003 0301 	and.w	r3, r3, #1
    613a:	2b00      	cmp	r3, #0
    613c:	d106      	bne.n	614c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    613e:	4a05      	ldr	r2, [pc, #20]	; (6154 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6140:	9b01      	ldr	r3, [sp, #4]
    6142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6146:	2b00      	cmp	r3, #0
    6148:	d100      	bne.n	614c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    614a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    614c:	bf00      	nop
    614e:	b003      	add	sp, #12
    6150:	f85d fb04 	ldr.w	pc, [sp], #4
    6154:	1fff8d34 	.word	0x1fff8d34
    6158:	1fff8d30 	.word	0x1fff8d30

0000615c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    615c:	b500      	push	{lr}
    615e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6160:	f7fa fcb0 	bl	ac4 <Sys_GetCoreID>
    6164:	4603      	mov	r3, r0
    6166:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    6168:	4a10      	ldr	r2, [pc, #64]	; (61ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    616a:	9b01      	ldr	r3, [sp, #4]
    616c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6170:	2b00      	cmp	r3, #0
    6172:	d10d      	bne.n	6190 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6174:	f7fa fbd6 	bl	924 <Port_schm_read_msr>
    6178:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    617a:	9b00      	ldr	r3, [sp, #0]
    617c:	f003 0301 	and.w	r3, r3, #1
    6180:	2b00      	cmp	r3, #0
    6182:	d100      	bne.n	6186 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6184:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    6186:	490a      	ldr	r1, [pc, #40]	; (61b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    6188:	9b01      	ldr	r3, [sp, #4]
    618a:	9a00      	ldr	r2, [sp, #0]
    618c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    6190:	4a06      	ldr	r2, [pc, #24]	; (61ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    6192:	9b01      	ldr	r3, [sp, #4]
    6194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6198:	1c5a      	adds	r2, r3, #1
    619a:	4904      	ldr	r1, [pc, #16]	; (61ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    619c:	9b01      	ldr	r3, [sp, #4]
    619e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    61a2:	bf00      	nop
    61a4:	b003      	add	sp, #12
    61a6:	f85d fb04 	ldr.w	pc, [sp], #4
    61aa:	bf00      	nop
    61ac:	1fff8d3c 	.word	0x1fff8d3c
    61b0:	1fff8d38 	.word	0x1fff8d38

000061b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    61b4:	b500      	push	{lr}
    61b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    61b8:	f7fa fc84 	bl	ac4 <Sys_GetCoreID>
    61bc:	4603      	mov	r3, r0
    61be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    61c0:	4a0d      	ldr	r2, [pc, #52]	; (61f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    61c2:	9b01      	ldr	r3, [sp, #4]
    61c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61c8:	1e5a      	subs	r2, r3, #1
    61ca:	490b      	ldr	r1, [pc, #44]	; (61f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    61cc:	9b01      	ldr	r3, [sp, #4]
    61ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    61d2:	4a0a      	ldr	r2, [pc, #40]	; (61fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    61d4:	9b01      	ldr	r3, [sp, #4]
    61d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61da:	f003 0301 	and.w	r3, r3, #1
    61de:	2b00      	cmp	r3, #0
    61e0:	d106      	bne.n	61f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    61e2:	4a05      	ldr	r2, [pc, #20]	; (61f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    61e4:	9b01      	ldr	r3, [sp, #4]
    61e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61ea:	2b00      	cmp	r3, #0
    61ec:	d100      	bne.n	61f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    61ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    61f0:	bf00      	nop
    61f2:	b003      	add	sp, #12
    61f4:	f85d fb04 	ldr.w	pc, [sp], #4
    61f8:	1fff8d3c 	.word	0x1fff8d3c
    61fc:	1fff8d38 	.word	0x1fff8d38

00006200 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    6200:	b500      	push	{lr}
    6202:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6204:	f7fa fc5e 	bl	ac4 <Sys_GetCoreID>
    6208:	4603      	mov	r3, r0
    620a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    620c:	4a10      	ldr	r2, [pc, #64]	; (6250 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    620e:	9b01      	ldr	r3, [sp, #4]
    6210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6214:	2b00      	cmp	r3, #0
    6216:	d10d      	bne.n	6234 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6218:	f7fa fb84 	bl	924 <Port_schm_read_msr>
    621c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    621e:	9b00      	ldr	r3, [sp, #0]
    6220:	f003 0301 	and.w	r3, r3, #1
    6224:	2b00      	cmp	r3, #0
    6226:	d100      	bne.n	622a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6228:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    622a:	490a      	ldr	r1, [pc, #40]	; (6254 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    622c:	9b01      	ldr	r3, [sp, #4]
    622e:	9a00      	ldr	r2, [sp, #0]
    6230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    6234:	4a06      	ldr	r2, [pc, #24]	; (6250 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6236:	9b01      	ldr	r3, [sp, #4]
    6238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    623c:	1c5a      	adds	r2, r3, #1
    623e:	4904      	ldr	r1, [pc, #16]	; (6250 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6240:	9b01      	ldr	r3, [sp, #4]
    6242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6246:	bf00      	nop
    6248:	b003      	add	sp, #12
    624a:	f85d fb04 	ldr.w	pc, [sp], #4
    624e:	bf00      	nop
    6250:	1fff8d44 	.word	0x1fff8d44
    6254:	1fff8d40 	.word	0x1fff8d40

00006258 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    6258:	b500      	push	{lr}
    625a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    625c:	f7fa fc32 	bl	ac4 <Sys_GetCoreID>
    6260:	4603      	mov	r3, r0
    6262:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    6264:	4a0d      	ldr	r2, [pc, #52]	; (629c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    6266:	9b01      	ldr	r3, [sp, #4]
    6268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    626c:	1e5a      	subs	r2, r3, #1
    626e:	490b      	ldr	r1, [pc, #44]	; (629c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    6270:	9b01      	ldr	r3, [sp, #4]
    6272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    6276:	4a0a      	ldr	r2, [pc, #40]	; (62a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    6278:	9b01      	ldr	r3, [sp, #4]
    627a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    627e:	f003 0301 	and.w	r3, r3, #1
    6282:	2b00      	cmp	r3, #0
    6284:	d106      	bne.n	6294 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    6286:	4a05      	ldr	r2, [pc, #20]	; (629c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    6288:	9b01      	ldr	r3, [sp, #4]
    628a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    628e:	2b00      	cmp	r3, #0
    6290:	d100      	bne.n	6294 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6292:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6294:	bf00      	nop
    6296:	b003      	add	sp, #12
    6298:	f85d fb04 	ldr.w	pc, [sp], #4
    629c:	1fff8d44 	.word	0x1fff8d44
    62a0:	1fff8d40 	.word	0x1fff8d40

000062a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    62a4:	b500      	push	{lr}
    62a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    62a8:	f7fa fc0c 	bl	ac4 <Sys_GetCoreID>
    62ac:	4603      	mov	r3, r0
    62ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    62b0:	4a10      	ldr	r2, [pc, #64]	; (62f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    62b2:	9b01      	ldr	r3, [sp, #4]
    62b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62b8:	2b00      	cmp	r3, #0
    62ba:	d10d      	bne.n	62d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    62bc:	f7fa fb32 	bl	924 <Port_schm_read_msr>
    62c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    62c2:	9b00      	ldr	r3, [sp, #0]
    62c4:	f003 0301 	and.w	r3, r3, #1
    62c8:	2b00      	cmp	r3, #0
    62ca:	d100      	bne.n	62ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    62cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    62ce:	490a      	ldr	r1, [pc, #40]	; (62f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    62d0:	9b01      	ldr	r3, [sp, #4]
    62d2:	9a00      	ldr	r2, [sp, #0]
    62d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    62d8:	4a06      	ldr	r2, [pc, #24]	; (62f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    62da:	9b01      	ldr	r3, [sp, #4]
    62dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62e0:	1c5a      	adds	r2, r3, #1
    62e2:	4904      	ldr	r1, [pc, #16]	; (62f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    62e4:	9b01      	ldr	r3, [sp, #4]
    62e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    62ea:	bf00      	nop
    62ec:	b003      	add	sp, #12
    62ee:	f85d fb04 	ldr.w	pc, [sp], #4
    62f2:	bf00      	nop
    62f4:	1fff8d4c 	.word	0x1fff8d4c
    62f8:	1fff8d48 	.word	0x1fff8d48

000062fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    62fc:	b500      	push	{lr}
    62fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6300:	f7fa fbe0 	bl	ac4 <Sys_GetCoreID>
    6304:	4603      	mov	r3, r0
    6306:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    6308:	4a0d      	ldr	r2, [pc, #52]	; (6340 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    630a:	9b01      	ldr	r3, [sp, #4]
    630c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6310:	1e5a      	subs	r2, r3, #1
    6312:	490b      	ldr	r1, [pc, #44]	; (6340 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    6314:	9b01      	ldr	r3, [sp, #4]
    6316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    631a:	4a0a      	ldr	r2, [pc, #40]	; (6344 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    631c:	9b01      	ldr	r3, [sp, #4]
    631e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6322:	f003 0301 	and.w	r3, r3, #1
    6326:	2b00      	cmp	r3, #0
    6328:	d106      	bne.n	6338 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    632a:	4a05      	ldr	r2, [pc, #20]	; (6340 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    632c:	9b01      	ldr	r3, [sp, #4]
    632e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6332:	2b00      	cmp	r3, #0
    6334:	d100      	bne.n	6338 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6336:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6338:	bf00      	nop
    633a:	b003      	add	sp, #12
    633c:	f85d fb04 	ldr.w	pc, [sp], #4
    6340:	1fff8d4c 	.word	0x1fff8d4c
    6344:	1fff8d48 	.word	0x1fff8d48

00006348 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    6348:	b500      	push	{lr}
    634a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    634c:	f7fa fbba 	bl	ac4 <Sys_GetCoreID>
    6350:	4603      	mov	r3, r0
    6352:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    6354:	4a10      	ldr	r2, [pc, #64]	; (6398 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    6356:	9b01      	ldr	r3, [sp, #4]
    6358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    635c:	2b00      	cmp	r3, #0
    635e:	d10d      	bne.n	637c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6360:	f7fa fae0 	bl	924 <Port_schm_read_msr>
    6364:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6366:	9b00      	ldr	r3, [sp, #0]
    6368:	f003 0301 	and.w	r3, r3, #1
    636c:	2b00      	cmp	r3, #0
    636e:	d100      	bne.n	6372 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6370:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    6372:	490a      	ldr	r1, [pc, #40]	; (639c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    6374:	9b01      	ldr	r3, [sp, #4]
    6376:	9a00      	ldr	r2, [sp, #0]
    6378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    637c:	4a06      	ldr	r2, [pc, #24]	; (6398 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    637e:	9b01      	ldr	r3, [sp, #4]
    6380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6384:	1c5a      	adds	r2, r3, #1
    6386:	4904      	ldr	r1, [pc, #16]	; (6398 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    6388:	9b01      	ldr	r3, [sp, #4]
    638a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    638e:	bf00      	nop
    6390:	b003      	add	sp, #12
    6392:	f85d fb04 	ldr.w	pc, [sp], #4
    6396:	bf00      	nop
    6398:	1fff8d54 	.word	0x1fff8d54
    639c:	1fff8d50 	.word	0x1fff8d50

000063a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    63a0:	b500      	push	{lr}
    63a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    63a4:	f7fa fb8e 	bl	ac4 <Sys_GetCoreID>
    63a8:	4603      	mov	r3, r0
    63aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    63ac:	4a0d      	ldr	r2, [pc, #52]	; (63e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    63ae:	9b01      	ldr	r3, [sp, #4]
    63b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63b4:	1e5a      	subs	r2, r3, #1
    63b6:	490b      	ldr	r1, [pc, #44]	; (63e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    63b8:	9b01      	ldr	r3, [sp, #4]
    63ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    63be:	4a0a      	ldr	r2, [pc, #40]	; (63e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    63c0:	9b01      	ldr	r3, [sp, #4]
    63c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63c6:	f003 0301 	and.w	r3, r3, #1
    63ca:	2b00      	cmp	r3, #0
    63cc:	d106      	bne.n	63dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    63ce:	4a05      	ldr	r2, [pc, #20]	; (63e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    63d0:	9b01      	ldr	r3, [sp, #4]
    63d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63d6:	2b00      	cmp	r3, #0
    63d8:	d100      	bne.n	63dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    63da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    63dc:	bf00      	nop
    63de:	b003      	add	sp, #12
    63e0:	f85d fb04 	ldr.w	pc, [sp], #4
    63e4:	1fff8d54 	.word	0x1fff8d54
    63e8:	1fff8d50 	.word	0x1fff8d50

000063ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    63ec:	b500      	push	{lr}
    63ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    63f0:	f7fa fb68 	bl	ac4 <Sys_GetCoreID>
    63f4:	4603      	mov	r3, r0
    63f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    63f8:	4a10      	ldr	r2, [pc, #64]	; (643c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    63fa:	9b01      	ldr	r3, [sp, #4]
    63fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6400:	2b00      	cmp	r3, #0
    6402:	d10d      	bne.n	6420 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6404:	f7fa fa8e 	bl	924 <Port_schm_read_msr>
    6408:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    640a:	9b00      	ldr	r3, [sp, #0]
    640c:	f003 0301 	and.w	r3, r3, #1
    6410:	2b00      	cmp	r3, #0
    6412:	d100      	bne.n	6416 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6414:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    6416:	490a      	ldr	r1, [pc, #40]	; (6440 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    6418:	9b01      	ldr	r3, [sp, #4]
    641a:	9a00      	ldr	r2, [sp, #0]
    641c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    6420:	4a06      	ldr	r2, [pc, #24]	; (643c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6422:	9b01      	ldr	r3, [sp, #4]
    6424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6428:	1c5a      	adds	r2, r3, #1
    642a:	4904      	ldr	r1, [pc, #16]	; (643c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    642c:	9b01      	ldr	r3, [sp, #4]
    642e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6432:	bf00      	nop
    6434:	b003      	add	sp, #12
    6436:	f85d fb04 	ldr.w	pc, [sp], #4
    643a:	bf00      	nop
    643c:	1fff8d5c 	.word	0x1fff8d5c
    6440:	1fff8d58 	.word	0x1fff8d58

00006444 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    6444:	b500      	push	{lr}
    6446:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6448:	f7fa fb3c 	bl	ac4 <Sys_GetCoreID>
    644c:	4603      	mov	r3, r0
    644e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    6450:	4a0d      	ldr	r2, [pc, #52]	; (6488 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6452:	9b01      	ldr	r3, [sp, #4]
    6454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6458:	1e5a      	subs	r2, r3, #1
    645a:	490b      	ldr	r1, [pc, #44]	; (6488 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    645c:	9b01      	ldr	r3, [sp, #4]
    645e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    6462:	4a0a      	ldr	r2, [pc, #40]	; (648c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    6464:	9b01      	ldr	r3, [sp, #4]
    6466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    646a:	f003 0301 	and.w	r3, r3, #1
    646e:	2b00      	cmp	r3, #0
    6470:	d106      	bne.n	6480 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    6472:	4a05      	ldr	r2, [pc, #20]	; (6488 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6474:	9b01      	ldr	r3, [sp, #4]
    6476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    647a:	2b00      	cmp	r3, #0
    647c:	d100      	bne.n	6480 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    647e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6480:	bf00      	nop
    6482:	b003      	add	sp, #12
    6484:	f85d fb04 	ldr.w	pc, [sp], #4
    6488:	1fff8d5c 	.word	0x1fff8d5c
    648c:	1fff8d58 	.word	0x1fff8d58

00006490 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    6490:	b500      	push	{lr}
    6492:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6494:	f7fa fb16 	bl	ac4 <Sys_GetCoreID>
    6498:	4603      	mov	r3, r0
    649a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    649c:	4a10      	ldr	r2, [pc, #64]	; (64e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    649e:	9b01      	ldr	r3, [sp, #4]
    64a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64a4:	2b00      	cmp	r3, #0
    64a6:	d10d      	bne.n	64c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    64a8:	f7fa fa3c 	bl	924 <Port_schm_read_msr>
    64ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    64ae:	9b00      	ldr	r3, [sp, #0]
    64b0:	f003 0301 	and.w	r3, r3, #1
    64b4:	2b00      	cmp	r3, #0
    64b6:	d100      	bne.n	64ba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    64b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    64ba:	490a      	ldr	r1, [pc, #40]	; (64e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    64bc:	9b01      	ldr	r3, [sp, #4]
    64be:	9a00      	ldr	r2, [sp, #0]
    64c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    64c4:	4a06      	ldr	r2, [pc, #24]	; (64e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    64c6:	9b01      	ldr	r3, [sp, #4]
    64c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64cc:	1c5a      	adds	r2, r3, #1
    64ce:	4904      	ldr	r1, [pc, #16]	; (64e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    64d0:	9b01      	ldr	r3, [sp, #4]
    64d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    64d6:	bf00      	nop
    64d8:	b003      	add	sp, #12
    64da:	f85d fb04 	ldr.w	pc, [sp], #4
    64de:	bf00      	nop
    64e0:	1fff8d64 	.word	0x1fff8d64
    64e4:	1fff8d60 	.word	0x1fff8d60

000064e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    64e8:	b500      	push	{lr}
    64ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    64ec:	f7fa faea 	bl	ac4 <Sys_GetCoreID>
    64f0:	4603      	mov	r3, r0
    64f2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    64f4:	4a0d      	ldr	r2, [pc, #52]	; (652c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    64f6:	9b01      	ldr	r3, [sp, #4]
    64f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64fc:	1e5a      	subs	r2, r3, #1
    64fe:	490b      	ldr	r1, [pc, #44]	; (652c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6500:	9b01      	ldr	r3, [sp, #4]
    6502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    6506:	4a0a      	ldr	r2, [pc, #40]	; (6530 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    6508:	9b01      	ldr	r3, [sp, #4]
    650a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    650e:	f003 0301 	and.w	r3, r3, #1
    6512:	2b00      	cmp	r3, #0
    6514:	d106      	bne.n	6524 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    6516:	4a05      	ldr	r2, [pc, #20]	; (652c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6518:	9b01      	ldr	r3, [sp, #4]
    651a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    651e:	2b00      	cmp	r3, #0
    6520:	d100      	bne.n	6524 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6522:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6524:	bf00      	nop
    6526:	b003      	add	sp, #12
    6528:	f85d fb04 	ldr.w	pc, [sp], #4
    652c:	1fff8d64 	.word	0x1fff8d64
    6530:	1fff8d60 	.word	0x1fff8d60

00006534 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    6534:	b500      	push	{lr}
    6536:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6538:	f7fa fac4 	bl	ac4 <Sys_GetCoreID>
    653c:	4603      	mov	r3, r0
    653e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    6540:	4a10      	ldr	r2, [pc, #64]	; (6584 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6542:	9b01      	ldr	r3, [sp, #4]
    6544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6548:	2b00      	cmp	r3, #0
    654a:	d10d      	bne.n	6568 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    654c:	f7fa f9ea 	bl	924 <Port_schm_read_msr>
    6550:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6552:	9b00      	ldr	r3, [sp, #0]
    6554:	f003 0301 	and.w	r3, r3, #1
    6558:	2b00      	cmp	r3, #0
    655a:	d100      	bne.n	655e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    655c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    655e:	490a      	ldr	r1, [pc, #40]	; (6588 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    6560:	9b01      	ldr	r3, [sp, #4]
    6562:	9a00      	ldr	r2, [sp, #0]
    6564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    6568:	4a06      	ldr	r2, [pc, #24]	; (6584 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    656a:	9b01      	ldr	r3, [sp, #4]
    656c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6570:	1c5a      	adds	r2, r3, #1
    6572:	4904      	ldr	r1, [pc, #16]	; (6584 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6574:	9b01      	ldr	r3, [sp, #4]
    6576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    657a:	bf00      	nop
    657c:	b003      	add	sp, #12
    657e:	f85d fb04 	ldr.w	pc, [sp], #4
    6582:	bf00      	nop
    6584:	1fff8d6c 	.word	0x1fff8d6c
    6588:	1fff8d68 	.word	0x1fff8d68

0000658c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    658c:	b500      	push	{lr}
    658e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6590:	f7fa fa98 	bl	ac4 <Sys_GetCoreID>
    6594:	4603      	mov	r3, r0
    6596:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    6598:	4a0d      	ldr	r2, [pc, #52]	; (65d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    659a:	9b01      	ldr	r3, [sp, #4]
    659c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65a0:	1e5a      	subs	r2, r3, #1
    65a2:	490b      	ldr	r1, [pc, #44]	; (65d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    65a4:	9b01      	ldr	r3, [sp, #4]
    65a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    65aa:	4a0a      	ldr	r2, [pc, #40]	; (65d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    65ac:	9b01      	ldr	r3, [sp, #4]
    65ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65b2:	f003 0301 	and.w	r3, r3, #1
    65b6:	2b00      	cmp	r3, #0
    65b8:	d106      	bne.n	65c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    65ba:	4a05      	ldr	r2, [pc, #20]	; (65d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    65bc:	9b01      	ldr	r3, [sp, #4]
    65be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65c2:	2b00      	cmp	r3, #0
    65c4:	d100      	bne.n	65c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    65c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    65c8:	bf00      	nop
    65ca:	b003      	add	sp, #12
    65cc:	f85d fb04 	ldr.w	pc, [sp], #4
    65d0:	1fff8d6c 	.word	0x1fff8d6c
    65d4:	1fff8d68 	.word	0x1fff8d68

000065d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    65d8:	b500      	push	{lr}
    65da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    65dc:	f7fa fa72 	bl	ac4 <Sys_GetCoreID>
    65e0:	4603      	mov	r3, r0
    65e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    65e4:	4a10      	ldr	r2, [pc, #64]	; (6628 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    65e6:	9b01      	ldr	r3, [sp, #4]
    65e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65ec:	2b00      	cmp	r3, #0
    65ee:	d10d      	bne.n	660c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    65f0:	f7fa f998 	bl	924 <Port_schm_read_msr>
    65f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    65f6:	9b00      	ldr	r3, [sp, #0]
    65f8:	f003 0301 	and.w	r3, r3, #1
    65fc:	2b00      	cmp	r3, #0
    65fe:	d100      	bne.n	6602 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6600:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    6602:	490a      	ldr	r1, [pc, #40]	; (662c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    6604:	9b01      	ldr	r3, [sp, #4]
    6606:	9a00      	ldr	r2, [sp, #0]
    6608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    660c:	4a06      	ldr	r2, [pc, #24]	; (6628 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    660e:	9b01      	ldr	r3, [sp, #4]
    6610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6614:	1c5a      	adds	r2, r3, #1
    6616:	4904      	ldr	r1, [pc, #16]	; (6628 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    6618:	9b01      	ldr	r3, [sp, #4]
    661a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    661e:	bf00      	nop
    6620:	b003      	add	sp, #12
    6622:	f85d fb04 	ldr.w	pc, [sp], #4
    6626:	bf00      	nop
    6628:	1fff8d74 	.word	0x1fff8d74
    662c:	1fff8d70 	.word	0x1fff8d70

00006630 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    6630:	b500      	push	{lr}
    6632:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6634:	f7fa fa46 	bl	ac4 <Sys_GetCoreID>
    6638:	4603      	mov	r3, r0
    663a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    663c:	4a0d      	ldr	r2, [pc, #52]	; (6674 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    663e:	9b01      	ldr	r3, [sp, #4]
    6640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6644:	1e5a      	subs	r2, r3, #1
    6646:	490b      	ldr	r1, [pc, #44]	; (6674 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6648:	9b01      	ldr	r3, [sp, #4]
    664a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    664e:	4a0a      	ldr	r2, [pc, #40]	; (6678 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    6650:	9b01      	ldr	r3, [sp, #4]
    6652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6656:	f003 0301 	and.w	r3, r3, #1
    665a:	2b00      	cmp	r3, #0
    665c:	d106      	bne.n	666c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    665e:	4a05      	ldr	r2, [pc, #20]	; (6674 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6660:	9b01      	ldr	r3, [sp, #4]
    6662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6666:	2b00      	cmp	r3, #0
    6668:	d100      	bne.n	666c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    666a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    666c:	bf00      	nop
    666e:	b003      	add	sp, #12
    6670:	f85d fb04 	ldr.w	pc, [sp], #4
    6674:	1fff8d74 	.word	0x1fff8d74
    6678:	1fff8d70 	.word	0x1fff8d70

0000667c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    667c:	b500      	push	{lr}
    667e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6680:	f7fa fa20 	bl	ac4 <Sys_GetCoreID>
    6684:	4603      	mov	r3, r0
    6686:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    6688:	4a10      	ldr	r2, [pc, #64]	; (66cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    668a:	9b01      	ldr	r3, [sp, #4]
    668c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6690:	2b00      	cmp	r3, #0
    6692:	d10d      	bne.n	66b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6694:	f7fa f946 	bl	924 <Port_schm_read_msr>
    6698:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    669a:	9b00      	ldr	r3, [sp, #0]
    669c:	f003 0301 	and.w	r3, r3, #1
    66a0:	2b00      	cmp	r3, #0
    66a2:	d100      	bne.n	66a6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    66a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    66a6:	490a      	ldr	r1, [pc, #40]	; (66d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    66a8:	9b01      	ldr	r3, [sp, #4]
    66aa:	9a00      	ldr	r2, [sp, #0]
    66ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    66b0:	4a06      	ldr	r2, [pc, #24]	; (66cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    66b2:	9b01      	ldr	r3, [sp, #4]
    66b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66b8:	1c5a      	adds	r2, r3, #1
    66ba:	4904      	ldr	r1, [pc, #16]	; (66cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    66bc:	9b01      	ldr	r3, [sp, #4]
    66be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    66c2:	bf00      	nop
    66c4:	b003      	add	sp, #12
    66c6:	f85d fb04 	ldr.w	pc, [sp], #4
    66ca:	bf00      	nop
    66cc:	1fff8d7c 	.word	0x1fff8d7c
    66d0:	1fff8d78 	.word	0x1fff8d78

000066d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    66d4:	b500      	push	{lr}
    66d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    66d8:	f7fa f9f4 	bl	ac4 <Sys_GetCoreID>
    66dc:	4603      	mov	r3, r0
    66de:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    66e0:	4a0d      	ldr	r2, [pc, #52]	; (6718 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    66e2:	9b01      	ldr	r3, [sp, #4]
    66e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66e8:	1e5a      	subs	r2, r3, #1
    66ea:	490b      	ldr	r1, [pc, #44]	; (6718 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    66ec:	9b01      	ldr	r3, [sp, #4]
    66ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    66f2:	4a0a      	ldr	r2, [pc, #40]	; (671c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    66f4:	9b01      	ldr	r3, [sp, #4]
    66f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66fa:	f003 0301 	and.w	r3, r3, #1
    66fe:	2b00      	cmp	r3, #0
    6700:	d106      	bne.n	6710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    6702:	4a05      	ldr	r2, [pc, #20]	; (6718 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    6704:	9b01      	ldr	r3, [sp, #4]
    6706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    670a:	2b00      	cmp	r3, #0
    670c:	d100      	bne.n	6710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    670e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6710:	bf00      	nop
    6712:	b003      	add	sp, #12
    6714:	f85d fb04 	ldr.w	pc, [sp], #4
    6718:	1fff8d7c 	.word	0x1fff8d7c
    671c:	1fff8d78 	.word	0x1fff8d78

00006720 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    6720:	b500      	push	{lr}
    6722:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6724:	f7fa f9ce 	bl	ac4 <Sys_GetCoreID>
    6728:	4603      	mov	r3, r0
    672a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    672c:	4a10      	ldr	r2, [pc, #64]	; (6770 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    672e:	9b01      	ldr	r3, [sp, #4]
    6730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6734:	2b00      	cmp	r3, #0
    6736:	d10d      	bne.n	6754 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6738:	f7fa f8f4 	bl	924 <Port_schm_read_msr>
    673c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    673e:	9b00      	ldr	r3, [sp, #0]
    6740:	f003 0301 	and.w	r3, r3, #1
    6744:	2b00      	cmp	r3, #0
    6746:	d100      	bne.n	674a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6748:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    674a:	490a      	ldr	r1, [pc, #40]	; (6774 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    674c:	9b01      	ldr	r3, [sp, #4]
    674e:	9a00      	ldr	r2, [sp, #0]
    6750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    6754:	4a06      	ldr	r2, [pc, #24]	; (6770 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    6756:	9b01      	ldr	r3, [sp, #4]
    6758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    675c:	1c5a      	adds	r2, r3, #1
    675e:	4904      	ldr	r1, [pc, #16]	; (6770 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    6760:	9b01      	ldr	r3, [sp, #4]
    6762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6766:	bf00      	nop
    6768:	b003      	add	sp, #12
    676a:	f85d fb04 	ldr.w	pc, [sp], #4
    676e:	bf00      	nop
    6770:	1fff8d84 	.word	0x1fff8d84
    6774:	1fff8d80 	.word	0x1fff8d80

00006778 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    6778:	b500      	push	{lr}
    677a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    677c:	f7fa f9a2 	bl	ac4 <Sys_GetCoreID>
    6780:	4603      	mov	r3, r0
    6782:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    6784:	4a0d      	ldr	r2, [pc, #52]	; (67bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    6786:	9b01      	ldr	r3, [sp, #4]
    6788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    678c:	1e5a      	subs	r2, r3, #1
    678e:	490b      	ldr	r1, [pc, #44]	; (67bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    6790:	9b01      	ldr	r3, [sp, #4]
    6792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    6796:	4a0a      	ldr	r2, [pc, #40]	; (67c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    6798:	9b01      	ldr	r3, [sp, #4]
    679a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    679e:	f003 0301 	and.w	r3, r3, #1
    67a2:	2b00      	cmp	r3, #0
    67a4:	d106      	bne.n	67b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    67a6:	4a05      	ldr	r2, [pc, #20]	; (67bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    67a8:	9b01      	ldr	r3, [sp, #4]
    67aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67ae:	2b00      	cmp	r3, #0
    67b0:	d100      	bne.n	67b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    67b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    67b4:	bf00      	nop
    67b6:	b003      	add	sp, #12
    67b8:	f85d fb04 	ldr.w	pc, [sp], #4
    67bc:	1fff8d84 	.word	0x1fff8d84
    67c0:	1fff8d80 	.word	0x1fff8d80

000067c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    67c4:	b500      	push	{lr}
    67c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    67c8:	f7fa f97c 	bl	ac4 <Sys_GetCoreID>
    67cc:	4603      	mov	r3, r0
    67ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    67d0:	4a10      	ldr	r2, [pc, #64]	; (6814 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    67d2:	9b01      	ldr	r3, [sp, #4]
    67d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67d8:	2b00      	cmp	r3, #0
    67da:	d10d      	bne.n	67f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    67dc:	f7fa f8a2 	bl	924 <Port_schm_read_msr>
    67e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    67e2:	9b00      	ldr	r3, [sp, #0]
    67e4:	f003 0301 	and.w	r3, r3, #1
    67e8:	2b00      	cmp	r3, #0
    67ea:	d100      	bne.n	67ee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    67ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    67ee:	490a      	ldr	r1, [pc, #40]	; (6818 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    67f0:	9b01      	ldr	r3, [sp, #4]
    67f2:	9a00      	ldr	r2, [sp, #0]
    67f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    67f8:	4a06      	ldr	r2, [pc, #24]	; (6814 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    67fa:	9b01      	ldr	r3, [sp, #4]
    67fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6800:	1c5a      	adds	r2, r3, #1
    6802:	4904      	ldr	r1, [pc, #16]	; (6814 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    6804:	9b01      	ldr	r3, [sp, #4]
    6806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    680a:	bf00      	nop
    680c:	b003      	add	sp, #12
    680e:	f85d fb04 	ldr.w	pc, [sp], #4
    6812:	bf00      	nop
    6814:	1fff8d8c 	.word	0x1fff8d8c
    6818:	1fff8d88 	.word	0x1fff8d88

0000681c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    681c:	b500      	push	{lr}
    681e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6820:	f7fa f950 	bl	ac4 <Sys_GetCoreID>
    6824:	4603      	mov	r3, r0
    6826:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    6828:	4a0d      	ldr	r2, [pc, #52]	; (6860 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    682a:	9b01      	ldr	r3, [sp, #4]
    682c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6830:	1e5a      	subs	r2, r3, #1
    6832:	490b      	ldr	r1, [pc, #44]	; (6860 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    6834:	9b01      	ldr	r3, [sp, #4]
    6836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    683a:	4a0a      	ldr	r2, [pc, #40]	; (6864 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    683c:	9b01      	ldr	r3, [sp, #4]
    683e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6842:	f003 0301 	and.w	r3, r3, #1
    6846:	2b00      	cmp	r3, #0
    6848:	d106      	bne.n	6858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    684a:	4a05      	ldr	r2, [pc, #20]	; (6860 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    684c:	9b01      	ldr	r3, [sp, #4]
    684e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6852:	2b00      	cmp	r3, #0
    6854:	d100      	bne.n	6858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6856:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6858:	bf00      	nop
    685a:	b003      	add	sp, #12
    685c:	f85d fb04 	ldr.w	pc, [sp], #4
    6860:	1fff8d8c 	.word	0x1fff8d8c
    6864:	1fff8d88 	.word	0x1fff8d88

00006868 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    6868:	b500      	push	{lr}
    686a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    686c:	f7fa f92a 	bl	ac4 <Sys_GetCoreID>
    6870:	4603      	mov	r3, r0
    6872:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    6874:	4a10      	ldr	r2, [pc, #64]	; (68b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    6876:	9b01      	ldr	r3, [sp, #4]
    6878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    687c:	2b00      	cmp	r3, #0
    687e:	d10d      	bne.n	689c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6880:	f7fa f850 	bl	924 <Port_schm_read_msr>
    6884:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6886:	9b00      	ldr	r3, [sp, #0]
    6888:	f003 0301 	and.w	r3, r3, #1
    688c:	2b00      	cmp	r3, #0
    688e:	d100      	bne.n	6892 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6890:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    6892:	490a      	ldr	r1, [pc, #40]	; (68bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    6894:	9b01      	ldr	r3, [sp, #4]
    6896:	9a00      	ldr	r2, [sp, #0]
    6898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    689c:	4a06      	ldr	r2, [pc, #24]	; (68b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    689e:	9b01      	ldr	r3, [sp, #4]
    68a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68a4:	1c5a      	adds	r2, r3, #1
    68a6:	4904      	ldr	r1, [pc, #16]	; (68b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    68a8:	9b01      	ldr	r3, [sp, #4]
    68aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    68ae:	bf00      	nop
    68b0:	b003      	add	sp, #12
    68b2:	f85d fb04 	ldr.w	pc, [sp], #4
    68b6:	bf00      	nop
    68b8:	1fff8d94 	.word	0x1fff8d94
    68bc:	1fff8d90 	.word	0x1fff8d90

000068c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    68c0:	b500      	push	{lr}
    68c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    68c4:	f7fa f8fe 	bl	ac4 <Sys_GetCoreID>
    68c8:	4603      	mov	r3, r0
    68ca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    68cc:	4a0d      	ldr	r2, [pc, #52]	; (6904 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    68ce:	9b01      	ldr	r3, [sp, #4]
    68d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68d4:	1e5a      	subs	r2, r3, #1
    68d6:	490b      	ldr	r1, [pc, #44]	; (6904 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    68d8:	9b01      	ldr	r3, [sp, #4]
    68da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    68de:	4a0a      	ldr	r2, [pc, #40]	; (6908 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    68e0:	9b01      	ldr	r3, [sp, #4]
    68e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68e6:	f003 0301 	and.w	r3, r3, #1
    68ea:	2b00      	cmp	r3, #0
    68ec:	d106      	bne.n	68fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    68ee:	4a05      	ldr	r2, [pc, #20]	; (6904 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    68f0:	9b01      	ldr	r3, [sp, #4]
    68f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68f6:	2b00      	cmp	r3, #0
    68f8:	d100      	bne.n	68fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    68fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    68fc:	bf00      	nop
    68fe:	b003      	add	sp, #12
    6900:	f85d fb04 	ldr.w	pc, [sp], #4
    6904:	1fff8d94 	.word	0x1fff8d94
    6908:	1fff8d90 	.word	0x1fff8d90

0000690c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    690c:	b500      	push	{lr}
    690e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6910:	f7fa f8d8 	bl	ac4 <Sys_GetCoreID>
    6914:	4603      	mov	r3, r0
    6916:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    6918:	4a10      	ldr	r2, [pc, #64]	; (695c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    691a:	9b01      	ldr	r3, [sp, #4]
    691c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6920:	2b00      	cmp	r3, #0
    6922:	d10d      	bne.n	6940 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6924:	f7f9 fffe 	bl	924 <Port_schm_read_msr>
    6928:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    692a:	9b00      	ldr	r3, [sp, #0]
    692c:	f003 0301 	and.w	r3, r3, #1
    6930:	2b00      	cmp	r3, #0
    6932:	d100      	bne.n	6936 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6934:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    6936:	490a      	ldr	r1, [pc, #40]	; (6960 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    6938:	9b01      	ldr	r3, [sp, #4]
    693a:	9a00      	ldr	r2, [sp, #0]
    693c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    6940:	4a06      	ldr	r2, [pc, #24]	; (695c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    6942:	9b01      	ldr	r3, [sp, #4]
    6944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6948:	1c5a      	adds	r2, r3, #1
    694a:	4904      	ldr	r1, [pc, #16]	; (695c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    694c:	9b01      	ldr	r3, [sp, #4]
    694e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6952:	bf00      	nop
    6954:	b003      	add	sp, #12
    6956:	f85d fb04 	ldr.w	pc, [sp], #4
    695a:	bf00      	nop
    695c:	1fff8d9c 	.word	0x1fff8d9c
    6960:	1fff8d98 	.word	0x1fff8d98

00006964 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    6964:	b500      	push	{lr}
    6966:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6968:	f7fa f8ac 	bl	ac4 <Sys_GetCoreID>
    696c:	4603      	mov	r3, r0
    696e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    6970:	4a0d      	ldr	r2, [pc, #52]	; (69a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    6972:	9b01      	ldr	r3, [sp, #4]
    6974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6978:	1e5a      	subs	r2, r3, #1
    697a:	490b      	ldr	r1, [pc, #44]	; (69a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    697c:	9b01      	ldr	r3, [sp, #4]
    697e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    6982:	4a0a      	ldr	r2, [pc, #40]	; (69ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    6984:	9b01      	ldr	r3, [sp, #4]
    6986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    698a:	f003 0301 	and.w	r3, r3, #1
    698e:	2b00      	cmp	r3, #0
    6990:	d106      	bne.n	69a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    6992:	4a05      	ldr	r2, [pc, #20]	; (69a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    6994:	9b01      	ldr	r3, [sp, #4]
    6996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    699a:	2b00      	cmp	r3, #0
    699c:	d100      	bne.n	69a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    699e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    69a0:	bf00      	nop
    69a2:	b003      	add	sp, #12
    69a4:	f85d fb04 	ldr.w	pc, [sp], #4
    69a8:	1fff8d9c 	.word	0x1fff8d9c
    69ac:	1fff8d98 	.word	0x1fff8d98

000069b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    69b0:	b500      	push	{lr}
    69b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    69b4:	f7fa f886 	bl	ac4 <Sys_GetCoreID>
    69b8:	4603      	mov	r3, r0
    69ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    69bc:	4a10      	ldr	r2, [pc, #64]	; (6a00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    69be:	9b01      	ldr	r3, [sp, #4]
    69c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69c4:	2b00      	cmp	r3, #0
    69c6:	d10d      	bne.n	69e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    69c8:	f7f9 ffac 	bl	924 <Port_schm_read_msr>
    69cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    69ce:	9b00      	ldr	r3, [sp, #0]
    69d0:	f003 0301 	and.w	r3, r3, #1
    69d4:	2b00      	cmp	r3, #0
    69d6:	d100      	bne.n	69da <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    69d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    69da:	490a      	ldr	r1, [pc, #40]	; (6a04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    69dc:	9b01      	ldr	r3, [sp, #4]
    69de:	9a00      	ldr	r2, [sp, #0]
    69e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    69e4:	4a06      	ldr	r2, [pc, #24]	; (6a00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    69e6:	9b01      	ldr	r3, [sp, #4]
    69e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69ec:	1c5a      	adds	r2, r3, #1
    69ee:	4904      	ldr	r1, [pc, #16]	; (6a00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    69f0:	9b01      	ldr	r3, [sp, #4]
    69f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    69f6:	bf00      	nop
    69f8:	b003      	add	sp, #12
    69fa:	f85d fb04 	ldr.w	pc, [sp], #4
    69fe:	bf00      	nop
    6a00:	1fff8da4 	.word	0x1fff8da4
    6a04:	1fff8da0 	.word	0x1fff8da0

00006a08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    6a08:	b500      	push	{lr}
    6a0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a0c:	f7fa f85a 	bl	ac4 <Sys_GetCoreID>
    6a10:	4603      	mov	r3, r0
    6a12:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    6a14:	4a0d      	ldr	r2, [pc, #52]	; (6a4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    6a16:	9b01      	ldr	r3, [sp, #4]
    6a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a1c:	1e5a      	subs	r2, r3, #1
    6a1e:	490b      	ldr	r1, [pc, #44]	; (6a4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    6a20:	9b01      	ldr	r3, [sp, #4]
    6a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    6a26:	4a0a      	ldr	r2, [pc, #40]	; (6a50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    6a28:	9b01      	ldr	r3, [sp, #4]
    6a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a2e:	f003 0301 	and.w	r3, r3, #1
    6a32:	2b00      	cmp	r3, #0
    6a34:	d106      	bne.n	6a44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    6a36:	4a05      	ldr	r2, [pc, #20]	; (6a4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    6a38:	9b01      	ldr	r3, [sp, #4]
    6a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a3e:	2b00      	cmp	r3, #0
    6a40:	d100      	bne.n	6a44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6a42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6a44:	bf00      	nop
    6a46:	b003      	add	sp, #12
    6a48:	f85d fb04 	ldr.w	pc, [sp], #4
    6a4c:	1fff8da4 	.word	0x1fff8da4
    6a50:	1fff8da0 	.word	0x1fff8da0

00006a54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    6a54:	b500      	push	{lr}
    6a56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a58:	f7fa f834 	bl	ac4 <Sys_GetCoreID>
    6a5c:	4603      	mov	r3, r0
    6a5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    6a60:	4a10      	ldr	r2, [pc, #64]	; (6aa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    6a62:	9b01      	ldr	r3, [sp, #4]
    6a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a68:	2b00      	cmp	r3, #0
    6a6a:	d10d      	bne.n	6a88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6a6c:	f7f9 ff5a 	bl	924 <Port_schm_read_msr>
    6a70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6a72:	9b00      	ldr	r3, [sp, #0]
    6a74:	f003 0301 	and.w	r3, r3, #1
    6a78:	2b00      	cmp	r3, #0
    6a7a:	d100      	bne.n	6a7e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6a7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    6a7e:	490a      	ldr	r1, [pc, #40]	; (6aa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    6a80:	9b01      	ldr	r3, [sp, #4]
    6a82:	9a00      	ldr	r2, [sp, #0]
    6a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    6a88:	4a06      	ldr	r2, [pc, #24]	; (6aa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    6a8a:	9b01      	ldr	r3, [sp, #4]
    6a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a90:	1c5a      	adds	r2, r3, #1
    6a92:	4904      	ldr	r1, [pc, #16]	; (6aa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    6a94:	9b01      	ldr	r3, [sp, #4]
    6a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6a9a:	bf00      	nop
    6a9c:	b003      	add	sp, #12
    6a9e:	f85d fb04 	ldr.w	pc, [sp], #4
    6aa2:	bf00      	nop
    6aa4:	1fff8dac 	.word	0x1fff8dac
    6aa8:	1fff8da8 	.word	0x1fff8da8

00006aac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    6aac:	b500      	push	{lr}
    6aae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ab0:	f7fa f808 	bl	ac4 <Sys_GetCoreID>
    6ab4:	4603      	mov	r3, r0
    6ab6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    6ab8:	4a0d      	ldr	r2, [pc, #52]	; (6af0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    6aba:	9b01      	ldr	r3, [sp, #4]
    6abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ac0:	1e5a      	subs	r2, r3, #1
    6ac2:	490b      	ldr	r1, [pc, #44]	; (6af0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    6ac4:	9b01      	ldr	r3, [sp, #4]
    6ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    6aca:	4a0a      	ldr	r2, [pc, #40]	; (6af4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    6acc:	9b01      	ldr	r3, [sp, #4]
    6ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ad2:	f003 0301 	and.w	r3, r3, #1
    6ad6:	2b00      	cmp	r3, #0
    6ad8:	d106      	bne.n	6ae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    6ada:	4a05      	ldr	r2, [pc, #20]	; (6af0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    6adc:	9b01      	ldr	r3, [sp, #4]
    6ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ae2:	2b00      	cmp	r3, #0
    6ae4:	d100      	bne.n	6ae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6ae6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6ae8:	bf00      	nop
    6aea:	b003      	add	sp, #12
    6aec:	f85d fb04 	ldr.w	pc, [sp], #4
    6af0:	1fff8dac 	.word	0x1fff8dac
    6af4:	1fff8da8 	.word	0x1fff8da8

00006af8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    6af8:	b500      	push	{lr}
    6afa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6afc:	f7f9 ffe2 	bl	ac4 <Sys_GetCoreID>
    6b00:	4603      	mov	r3, r0
    6b02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    6b04:	4a10      	ldr	r2, [pc, #64]	; (6b48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    6b06:	9b01      	ldr	r3, [sp, #4]
    6b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b0c:	2b00      	cmp	r3, #0
    6b0e:	d10d      	bne.n	6b2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6b10:	f7f9 ff08 	bl	924 <Port_schm_read_msr>
    6b14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6b16:	9b00      	ldr	r3, [sp, #0]
    6b18:	f003 0301 	and.w	r3, r3, #1
    6b1c:	2b00      	cmp	r3, #0
    6b1e:	d100      	bne.n	6b22 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6b20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    6b22:	490a      	ldr	r1, [pc, #40]	; (6b4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    6b24:	9b01      	ldr	r3, [sp, #4]
    6b26:	9a00      	ldr	r2, [sp, #0]
    6b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    6b2c:	4a06      	ldr	r2, [pc, #24]	; (6b48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    6b2e:	9b01      	ldr	r3, [sp, #4]
    6b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b34:	1c5a      	adds	r2, r3, #1
    6b36:	4904      	ldr	r1, [pc, #16]	; (6b48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    6b38:	9b01      	ldr	r3, [sp, #4]
    6b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6b3e:	bf00      	nop
    6b40:	b003      	add	sp, #12
    6b42:	f85d fb04 	ldr.w	pc, [sp], #4
    6b46:	bf00      	nop
    6b48:	1fff8db4 	.word	0x1fff8db4
    6b4c:	1fff8db0 	.word	0x1fff8db0

00006b50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    6b50:	b500      	push	{lr}
    6b52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b54:	f7f9 ffb6 	bl	ac4 <Sys_GetCoreID>
    6b58:	4603      	mov	r3, r0
    6b5a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    6b5c:	4a0d      	ldr	r2, [pc, #52]	; (6b94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    6b5e:	9b01      	ldr	r3, [sp, #4]
    6b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b64:	1e5a      	subs	r2, r3, #1
    6b66:	490b      	ldr	r1, [pc, #44]	; (6b94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    6b68:	9b01      	ldr	r3, [sp, #4]
    6b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    6b6e:	4a0a      	ldr	r2, [pc, #40]	; (6b98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    6b70:	9b01      	ldr	r3, [sp, #4]
    6b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b76:	f003 0301 	and.w	r3, r3, #1
    6b7a:	2b00      	cmp	r3, #0
    6b7c:	d106      	bne.n	6b8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    6b7e:	4a05      	ldr	r2, [pc, #20]	; (6b94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    6b80:	9b01      	ldr	r3, [sp, #4]
    6b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b86:	2b00      	cmp	r3, #0
    6b88:	d100      	bne.n	6b8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6b8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6b8c:	bf00      	nop
    6b8e:	b003      	add	sp, #12
    6b90:	f85d fb04 	ldr.w	pc, [sp], #4
    6b94:	1fff8db4 	.word	0x1fff8db4
    6b98:	1fff8db0 	.word	0x1fff8db0

00006b9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    6b9c:	b500      	push	{lr}
    6b9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ba0:	f7f9 ff90 	bl	ac4 <Sys_GetCoreID>
    6ba4:	4603      	mov	r3, r0
    6ba6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    6ba8:	4a10      	ldr	r2, [pc, #64]	; (6bec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    6baa:	9b01      	ldr	r3, [sp, #4]
    6bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bb0:	2b00      	cmp	r3, #0
    6bb2:	d10d      	bne.n	6bd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6bb4:	f7f9 feb6 	bl	924 <Port_schm_read_msr>
    6bb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6bba:	9b00      	ldr	r3, [sp, #0]
    6bbc:	f003 0301 	and.w	r3, r3, #1
    6bc0:	2b00      	cmp	r3, #0
    6bc2:	d100      	bne.n	6bc6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6bc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    6bc6:	490a      	ldr	r1, [pc, #40]	; (6bf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    6bc8:	9b01      	ldr	r3, [sp, #4]
    6bca:	9a00      	ldr	r2, [sp, #0]
    6bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    6bd0:	4a06      	ldr	r2, [pc, #24]	; (6bec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    6bd2:	9b01      	ldr	r3, [sp, #4]
    6bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bd8:	1c5a      	adds	r2, r3, #1
    6bda:	4904      	ldr	r1, [pc, #16]	; (6bec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    6bdc:	9b01      	ldr	r3, [sp, #4]
    6bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6be2:	bf00      	nop
    6be4:	b003      	add	sp, #12
    6be6:	f85d fb04 	ldr.w	pc, [sp], #4
    6bea:	bf00      	nop
    6bec:	1fff8dbc 	.word	0x1fff8dbc
    6bf0:	1fff8db8 	.word	0x1fff8db8

00006bf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    6bf4:	b500      	push	{lr}
    6bf6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6bf8:	f7f9 ff64 	bl	ac4 <Sys_GetCoreID>
    6bfc:	4603      	mov	r3, r0
    6bfe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    6c00:	4a0d      	ldr	r2, [pc, #52]	; (6c38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    6c02:	9b01      	ldr	r3, [sp, #4]
    6c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c08:	1e5a      	subs	r2, r3, #1
    6c0a:	490b      	ldr	r1, [pc, #44]	; (6c38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    6c0c:	9b01      	ldr	r3, [sp, #4]
    6c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    6c12:	4a0a      	ldr	r2, [pc, #40]	; (6c3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    6c14:	9b01      	ldr	r3, [sp, #4]
    6c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c1a:	f003 0301 	and.w	r3, r3, #1
    6c1e:	2b00      	cmp	r3, #0
    6c20:	d106      	bne.n	6c30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    6c22:	4a05      	ldr	r2, [pc, #20]	; (6c38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    6c24:	9b01      	ldr	r3, [sp, #4]
    6c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c2a:	2b00      	cmp	r3, #0
    6c2c:	d100      	bne.n	6c30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6c2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6c30:	bf00      	nop
    6c32:	b003      	add	sp, #12
    6c34:	f85d fb04 	ldr.w	pc, [sp], #4
    6c38:	1fff8dbc 	.word	0x1fff8dbc
    6c3c:	1fff8db8 	.word	0x1fff8db8

00006c40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    6c40:	b500      	push	{lr}
    6c42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c44:	f7f9 ff3e 	bl	ac4 <Sys_GetCoreID>
    6c48:	4603      	mov	r3, r0
    6c4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    6c4c:	4a10      	ldr	r2, [pc, #64]	; (6c90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    6c4e:	9b01      	ldr	r3, [sp, #4]
    6c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c54:	2b00      	cmp	r3, #0
    6c56:	d10d      	bne.n	6c74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6c58:	f7f9 fe64 	bl	924 <Port_schm_read_msr>
    6c5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6c5e:	9b00      	ldr	r3, [sp, #0]
    6c60:	f003 0301 	and.w	r3, r3, #1
    6c64:	2b00      	cmp	r3, #0
    6c66:	d100      	bne.n	6c6a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6c68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    6c6a:	490a      	ldr	r1, [pc, #40]	; (6c94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    6c6c:	9b01      	ldr	r3, [sp, #4]
    6c6e:	9a00      	ldr	r2, [sp, #0]
    6c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    6c74:	4a06      	ldr	r2, [pc, #24]	; (6c90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    6c76:	9b01      	ldr	r3, [sp, #4]
    6c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c7c:	1c5a      	adds	r2, r3, #1
    6c7e:	4904      	ldr	r1, [pc, #16]	; (6c90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    6c80:	9b01      	ldr	r3, [sp, #4]
    6c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6c86:	bf00      	nop
    6c88:	b003      	add	sp, #12
    6c8a:	f85d fb04 	ldr.w	pc, [sp], #4
    6c8e:	bf00      	nop
    6c90:	1fff8dc4 	.word	0x1fff8dc4
    6c94:	1fff8dc0 	.word	0x1fff8dc0

00006c98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    6c98:	b500      	push	{lr}
    6c9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c9c:	f7f9 ff12 	bl	ac4 <Sys_GetCoreID>
    6ca0:	4603      	mov	r3, r0
    6ca2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    6ca4:	4a0d      	ldr	r2, [pc, #52]	; (6cdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    6ca6:	9b01      	ldr	r3, [sp, #4]
    6ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cac:	1e5a      	subs	r2, r3, #1
    6cae:	490b      	ldr	r1, [pc, #44]	; (6cdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    6cb0:	9b01      	ldr	r3, [sp, #4]
    6cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    6cb6:	4a0a      	ldr	r2, [pc, #40]	; (6ce0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    6cb8:	9b01      	ldr	r3, [sp, #4]
    6cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cbe:	f003 0301 	and.w	r3, r3, #1
    6cc2:	2b00      	cmp	r3, #0
    6cc4:	d106      	bne.n	6cd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    6cc6:	4a05      	ldr	r2, [pc, #20]	; (6cdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    6cc8:	9b01      	ldr	r3, [sp, #4]
    6cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cce:	2b00      	cmp	r3, #0
    6cd0:	d100      	bne.n	6cd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6cd2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6cd4:	bf00      	nop
    6cd6:	b003      	add	sp, #12
    6cd8:	f85d fb04 	ldr.w	pc, [sp], #4
    6cdc:	1fff8dc4 	.word	0x1fff8dc4
    6ce0:	1fff8dc0 	.word	0x1fff8dc0

00006ce4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    6ce4:	b500      	push	{lr}
    6ce6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ce8:	f7f9 feec 	bl	ac4 <Sys_GetCoreID>
    6cec:	4603      	mov	r3, r0
    6cee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    6cf0:	4a10      	ldr	r2, [pc, #64]	; (6d34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    6cf2:	9b01      	ldr	r3, [sp, #4]
    6cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cf8:	2b00      	cmp	r3, #0
    6cfa:	d10d      	bne.n	6d18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6cfc:	f7f9 fe12 	bl	924 <Port_schm_read_msr>
    6d00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6d02:	9b00      	ldr	r3, [sp, #0]
    6d04:	f003 0301 	and.w	r3, r3, #1
    6d08:	2b00      	cmp	r3, #0
    6d0a:	d100      	bne.n	6d0e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6d0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    6d0e:	490a      	ldr	r1, [pc, #40]	; (6d38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    6d10:	9b01      	ldr	r3, [sp, #4]
    6d12:	9a00      	ldr	r2, [sp, #0]
    6d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    6d18:	4a06      	ldr	r2, [pc, #24]	; (6d34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    6d1a:	9b01      	ldr	r3, [sp, #4]
    6d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d20:	1c5a      	adds	r2, r3, #1
    6d22:	4904      	ldr	r1, [pc, #16]	; (6d34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    6d24:	9b01      	ldr	r3, [sp, #4]
    6d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6d2a:	bf00      	nop
    6d2c:	b003      	add	sp, #12
    6d2e:	f85d fb04 	ldr.w	pc, [sp], #4
    6d32:	bf00      	nop
    6d34:	1fff8dcc 	.word	0x1fff8dcc
    6d38:	1fff8dc8 	.word	0x1fff8dc8

00006d3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    6d3c:	b500      	push	{lr}
    6d3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d40:	f7f9 fec0 	bl	ac4 <Sys_GetCoreID>
    6d44:	4603      	mov	r3, r0
    6d46:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    6d48:	4a0d      	ldr	r2, [pc, #52]	; (6d80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    6d4a:	9b01      	ldr	r3, [sp, #4]
    6d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d50:	1e5a      	subs	r2, r3, #1
    6d52:	490b      	ldr	r1, [pc, #44]	; (6d80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    6d54:	9b01      	ldr	r3, [sp, #4]
    6d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    6d5a:	4a0a      	ldr	r2, [pc, #40]	; (6d84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    6d5c:	9b01      	ldr	r3, [sp, #4]
    6d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d62:	f003 0301 	and.w	r3, r3, #1
    6d66:	2b00      	cmp	r3, #0
    6d68:	d106      	bne.n	6d78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    6d6a:	4a05      	ldr	r2, [pc, #20]	; (6d80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    6d6c:	9b01      	ldr	r3, [sp, #4]
    6d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d72:	2b00      	cmp	r3, #0
    6d74:	d100      	bne.n	6d78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6d76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6d78:	bf00      	nop
    6d7a:	b003      	add	sp, #12
    6d7c:	f85d fb04 	ldr.w	pc, [sp], #4
    6d80:	1fff8dcc 	.word	0x1fff8dcc
    6d84:	1fff8dc8 	.word	0x1fff8dc8

00006d88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    6d88:	b500      	push	{lr}
    6d8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d8c:	f7f9 fe9a 	bl	ac4 <Sys_GetCoreID>
    6d90:	4603      	mov	r3, r0
    6d92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    6d94:	4a10      	ldr	r2, [pc, #64]	; (6dd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    6d96:	9b01      	ldr	r3, [sp, #4]
    6d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d9c:	2b00      	cmp	r3, #0
    6d9e:	d10d      	bne.n	6dbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6da0:	f7f9 fdc0 	bl	924 <Port_schm_read_msr>
    6da4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6da6:	9b00      	ldr	r3, [sp, #0]
    6da8:	f003 0301 	and.w	r3, r3, #1
    6dac:	2b00      	cmp	r3, #0
    6dae:	d100      	bne.n	6db2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6db0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    6db2:	490a      	ldr	r1, [pc, #40]	; (6ddc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    6db4:	9b01      	ldr	r3, [sp, #4]
    6db6:	9a00      	ldr	r2, [sp, #0]
    6db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    6dbc:	4a06      	ldr	r2, [pc, #24]	; (6dd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    6dbe:	9b01      	ldr	r3, [sp, #4]
    6dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dc4:	1c5a      	adds	r2, r3, #1
    6dc6:	4904      	ldr	r1, [pc, #16]	; (6dd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    6dc8:	9b01      	ldr	r3, [sp, #4]
    6dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6dce:	bf00      	nop
    6dd0:	b003      	add	sp, #12
    6dd2:	f85d fb04 	ldr.w	pc, [sp], #4
    6dd6:	bf00      	nop
    6dd8:	1fff8dd4 	.word	0x1fff8dd4
    6ddc:	1fff8dd0 	.word	0x1fff8dd0

00006de0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    6de0:	b500      	push	{lr}
    6de2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6de4:	f7f9 fe6e 	bl	ac4 <Sys_GetCoreID>
    6de8:	4603      	mov	r3, r0
    6dea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    6dec:	4a0d      	ldr	r2, [pc, #52]	; (6e24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    6dee:	9b01      	ldr	r3, [sp, #4]
    6df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6df4:	1e5a      	subs	r2, r3, #1
    6df6:	490b      	ldr	r1, [pc, #44]	; (6e24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    6df8:	9b01      	ldr	r3, [sp, #4]
    6dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    6dfe:	4a0a      	ldr	r2, [pc, #40]	; (6e28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    6e00:	9b01      	ldr	r3, [sp, #4]
    6e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e06:	f003 0301 	and.w	r3, r3, #1
    6e0a:	2b00      	cmp	r3, #0
    6e0c:	d106      	bne.n	6e1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    6e0e:	4a05      	ldr	r2, [pc, #20]	; (6e24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    6e10:	9b01      	ldr	r3, [sp, #4]
    6e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e16:	2b00      	cmp	r3, #0
    6e18:	d100      	bne.n	6e1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6e1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6e1c:	bf00      	nop
    6e1e:	b003      	add	sp, #12
    6e20:	f85d fb04 	ldr.w	pc, [sp], #4
    6e24:	1fff8dd4 	.word	0x1fff8dd4
    6e28:	1fff8dd0 	.word	0x1fff8dd0

00006e2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    6e2c:	b500      	push	{lr}
    6e2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e30:	f7f9 fe48 	bl	ac4 <Sys_GetCoreID>
    6e34:	4603      	mov	r3, r0
    6e36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    6e38:	4a10      	ldr	r2, [pc, #64]	; (6e7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    6e3a:	9b01      	ldr	r3, [sp, #4]
    6e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e40:	2b00      	cmp	r3, #0
    6e42:	d10d      	bne.n	6e60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6e44:	f7f9 fd6e 	bl	924 <Port_schm_read_msr>
    6e48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6e4a:	9b00      	ldr	r3, [sp, #0]
    6e4c:	f003 0301 	and.w	r3, r3, #1
    6e50:	2b00      	cmp	r3, #0
    6e52:	d100      	bne.n	6e56 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6e54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    6e56:	490a      	ldr	r1, [pc, #40]	; (6e80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    6e58:	9b01      	ldr	r3, [sp, #4]
    6e5a:	9a00      	ldr	r2, [sp, #0]
    6e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    6e60:	4a06      	ldr	r2, [pc, #24]	; (6e7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    6e62:	9b01      	ldr	r3, [sp, #4]
    6e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e68:	1c5a      	adds	r2, r3, #1
    6e6a:	4904      	ldr	r1, [pc, #16]	; (6e7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    6e6c:	9b01      	ldr	r3, [sp, #4]
    6e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6e72:	bf00      	nop
    6e74:	b003      	add	sp, #12
    6e76:	f85d fb04 	ldr.w	pc, [sp], #4
    6e7a:	bf00      	nop
    6e7c:	1fff8ddc 	.word	0x1fff8ddc
    6e80:	1fff8dd8 	.word	0x1fff8dd8

00006e84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    6e84:	b500      	push	{lr}
    6e86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e88:	f7f9 fe1c 	bl	ac4 <Sys_GetCoreID>
    6e8c:	4603      	mov	r3, r0
    6e8e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    6e90:	4a0d      	ldr	r2, [pc, #52]	; (6ec8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    6e92:	9b01      	ldr	r3, [sp, #4]
    6e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e98:	1e5a      	subs	r2, r3, #1
    6e9a:	490b      	ldr	r1, [pc, #44]	; (6ec8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    6e9c:	9b01      	ldr	r3, [sp, #4]
    6e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    6ea2:	4a0a      	ldr	r2, [pc, #40]	; (6ecc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    6ea4:	9b01      	ldr	r3, [sp, #4]
    6ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6eaa:	f003 0301 	and.w	r3, r3, #1
    6eae:	2b00      	cmp	r3, #0
    6eb0:	d106      	bne.n	6ec0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    6eb2:	4a05      	ldr	r2, [pc, #20]	; (6ec8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    6eb4:	9b01      	ldr	r3, [sp, #4]
    6eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6eba:	2b00      	cmp	r3, #0
    6ebc:	d100      	bne.n	6ec0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6ebe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6ec0:	bf00      	nop
    6ec2:	b003      	add	sp, #12
    6ec4:	f85d fb04 	ldr.w	pc, [sp], #4
    6ec8:	1fff8ddc 	.word	0x1fff8ddc
    6ecc:	1fff8dd8 	.word	0x1fff8dd8

00006ed0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    6ed0:	b500      	push	{lr}
    6ed2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ed4:	f7f9 fdf6 	bl	ac4 <Sys_GetCoreID>
    6ed8:	4603      	mov	r3, r0
    6eda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    6edc:	4a10      	ldr	r2, [pc, #64]	; (6f20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    6ede:	9b01      	ldr	r3, [sp, #4]
    6ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ee4:	2b00      	cmp	r3, #0
    6ee6:	d10d      	bne.n	6f04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6ee8:	f7f9 fd1c 	bl	924 <Port_schm_read_msr>
    6eec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6eee:	9b00      	ldr	r3, [sp, #0]
    6ef0:	f003 0301 	and.w	r3, r3, #1
    6ef4:	2b00      	cmp	r3, #0
    6ef6:	d100      	bne.n	6efa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6ef8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    6efa:	490a      	ldr	r1, [pc, #40]	; (6f24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    6efc:	9b01      	ldr	r3, [sp, #4]
    6efe:	9a00      	ldr	r2, [sp, #0]
    6f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    6f04:	4a06      	ldr	r2, [pc, #24]	; (6f20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    6f06:	9b01      	ldr	r3, [sp, #4]
    6f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f0c:	1c5a      	adds	r2, r3, #1
    6f0e:	4904      	ldr	r1, [pc, #16]	; (6f20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    6f10:	9b01      	ldr	r3, [sp, #4]
    6f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6f16:	bf00      	nop
    6f18:	b003      	add	sp, #12
    6f1a:	f85d fb04 	ldr.w	pc, [sp], #4
    6f1e:	bf00      	nop
    6f20:	1fff8de4 	.word	0x1fff8de4
    6f24:	1fff8de0 	.word	0x1fff8de0

00006f28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    6f28:	b500      	push	{lr}
    6f2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f2c:	f7f9 fdca 	bl	ac4 <Sys_GetCoreID>
    6f30:	4603      	mov	r3, r0
    6f32:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    6f34:	4a0d      	ldr	r2, [pc, #52]	; (6f6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    6f36:	9b01      	ldr	r3, [sp, #4]
    6f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f3c:	1e5a      	subs	r2, r3, #1
    6f3e:	490b      	ldr	r1, [pc, #44]	; (6f6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    6f40:	9b01      	ldr	r3, [sp, #4]
    6f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    6f46:	4a0a      	ldr	r2, [pc, #40]	; (6f70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    6f48:	9b01      	ldr	r3, [sp, #4]
    6f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f4e:	f003 0301 	and.w	r3, r3, #1
    6f52:	2b00      	cmp	r3, #0
    6f54:	d106      	bne.n	6f64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    6f56:	4a05      	ldr	r2, [pc, #20]	; (6f6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    6f58:	9b01      	ldr	r3, [sp, #4]
    6f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f5e:	2b00      	cmp	r3, #0
    6f60:	d100      	bne.n	6f64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6f62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6f64:	bf00      	nop
    6f66:	b003      	add	sp, #12
    6f68:	f85d fb04 	ldr.w	pc, [sp], #4
    6f6c:	1fff8de4 	.word	0x1fff8de4
    6f70:	1fff8de0 	.word	0x1fff8de0

00006f74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    6f74:	b500      	push	{lr}
    6f76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f78:	f7f9 fda4 	bl	ac4 <Sys_GetCoreID>
    6f7c:	4603      	mov	r3, r0
    6f7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    6f80:	4a10      	ldr	r2, [pc, #64]	; (6fc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    6f82:	9b01      	ldr	r3, [sp, #4]
    6f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f88:	2b00      	cmp	r3, #0
    6f8a:	d10d      	bne.n	6fa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6f8c:	f7f9 fcca 	bl	924 <Port_schm_read_msr>
    6f90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6f92:	9b00      	ldr	r3, [sp, #0]
    6f94:	f003 0301 	and.w	r3, r3, #1
    6f98:	2b00      	cmp	r3, #0
    6f9a:	d100      	bne.n	6f9e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6f9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    6f9e:	490a      	ldr	r1, [pc, #40]	; (6fc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    6fa0:	9b01      	ldr	r3, [sp, #4]
    6fa2:	9a00      	ldr	r2, [sp, #0]
    6fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    6fa8:	4a06      	ldr	r2, [pc, #24]	; (6fc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    6faa:	9b01      	ldr	r3, [sp, #4]
    6fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fb0:	1c5a      	adds	r2, r3, #1
    6fb2:	4904      	ldr	r1, [pc, #16]	; (6fc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    6fb4:	9b01      	ldr	r3, [sp, #4]
    6fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6fba:	bf00      	nop
    6fbc:	b003      	add	sp, #12
    6fbe:	f85d fb04 	ldr.w	pc, [sp], #4
    6fc2:	bf00      	nop
    6fc4:	1fff8dec 	.word	0x1fff8dec
    6fc8:	1fff8de8 	.word	0x1fff8de8

00006fcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    6fcc:	b500      	push	{lr}
    6fce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6fd0:	f7f9 fd78 	bl	ac4 <Sys_GetCoreID>
    6fd4:	4603      	mov	r3, r0
    6fd6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    6fd8:	4a0d      	ldr	r2, [pc, #52]	; (7010 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    6fda:	9b01      	ldr	r3, [sp, #4]
    6fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fe0:	1e5a      	subs	r2, r3, #1
    6fe2:	490b      	ldr	r1, [pc, #44]	; (7010 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    6fe4:	9b01      	ldr	r3, [sp, #4]
    6fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    6fea:	4a0a      	ldr	r2, [pc, #40]	; (7014 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    6fec:	9b01      	ldr	r3, [sp, #4]
    6fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ff2:	f003 0301 	and.w	r3, r3, #1
    6ff6:	2b00      	cmp	r3, #0
    6ff8:	d106      	bne.n	7008 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    6ffa:	4a05      	ldr	r2, [pc, #20]	; (7010 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    6ffc:	9b01      	ldr	r3, [sp, #4]
    6ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7002:	2b00      	cmp	r3, #0
    7004:	d100      	bne.n	7008 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7006:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7008:	bf00      	nop
    700a:	b003      	add	sp, #12
    700c:	f85d fb04 	ldr.w	pc, [sp], #4
    7010:	1fff8dec 	.word	0x1fff8dec
    7014:	1fff8de8 	.word	0x1fff8de8

00007018 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    7018:	b500      	push	{lr}
    701a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    701c:	f7f9 fd52 	bl	ac4 <Sys_GetCoreID>
    7020:	4603      	mov	r3, r0
    7022:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    7024:	4a10      	ldr	r2, [pc, #64]	; (7068 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    7026:	9b01      	ldr	r3, [sp, #4]
    7028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    702c:	2b00      	cmp	r3, #0
    702e:	d10d      	bne.n	704c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7030:	f7f9 fc78 	bl	924 <Port_schm_read_msr>
    7034:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7036:	9b00      	ldr	r3, [sp, #0]
    7038:	f003 0301 	and.w	r3, r3, #1
    703c:	2b00      	cmp	r3, #0
    703e:	d100      	bne.n	7042 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7040:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    7042:	490a      	ldr	r1, [pc, #40]	; (706c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    7044:	9b01      	ldr	r3, [sp, #4]
    7046:	9a00      	ldr	r2, [sp, #0]
    7048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    704c:	4a06      	ldr	r2, [pc, #24]	; (7068 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    704e:	9b01      	ldr	r3, [sp, #4]
    7050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7054:	1c5a      	adds	r2, r3, #1
    7056:	4904      	ldr	r1, [pc, #16]	; (7068 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    7058:	9b01      	ldr	r3, [sp, #4]
    705a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    705e:	bf00      	nop
    7060:	b003      	add	sp, #12
    7062:	f85d fb04 	ldr.w	pc, [sp], #4
    7066:	bf00      	nop
    7068:	1fff8df4 	.word	0x1fff8df4
    706c:	1fff8df0 	.word	0x1fff8df0

00007070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    7070:	b500      	push	{lr}
    7072:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7074:	f7f9 fd26 	bl	ac4 <Sys_GetCoreID>
    7078:	4603      	mov	r3, r0
    707a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    707c:	4a0d      	ldr	r2, [pc, #52]	; (70b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    707e:	9b01      	ldr	r3, [sp, #4]
    7080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7084:	1e5a      	subs	r2, r3, #1
    7086:	490b      	ldr	r1, [pc, #44]	; (70b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    7088:	9b01      	ldr	r3, [sp, #4]
    708a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    708e:	4a0a      	ldr	r2, [pc, #40]	; (70b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    7090:	9b01      	ldr	r3, [sp, #4]
    7092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7096:	f003 0301 	and.w	r3, r3, #1
    709a:	2b00      	cmp	r3, #0
    709c:	d106      	bne.n	70ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    709e:	4a05      	ldr	r2, [pc, #20]	; (70b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    70a0:	9b01      	ldr	r3, [sp, #4]
    70a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70a6:	2b00      	cmp	r3, #0
    70a8:	d100      	bne.n	70ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    70aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    70ac:	bf00      	nop
    70ae:	b003      	add	sp, #12
    70b0:	f85d fb04 	ldr.w	pc, [sp], #4
    70b4:	1fff8df4 	.word	0x1fff8df4
    70b8:	1fff8df0 	.word	0x1fff8df0

000070bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    70bc:	b500      	push	{lr}
    70be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    70c0:	f7f9 fd00 	bl	ac4 <Sys_GetCoreID>
    70c4:	4603      	mov	r3, r0
    70c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    70c8:	4a10      	ldr	r2, [pc, #64]	; (710c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    70ca:	9b01      	ldr	r3, [sp, #4]
    70cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70d0:	2b00      	cmp	r3, #0
    70d2:	d10d      	bne.n	70f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    70d4:	f7f9 fc26 	bl	924 <Port_schm_read_msr>
    70d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    70da:	9b00      	ldr	r3, [sp, #0]
    70dc:	f003 0301 	and.w	r3, r3, #1
    70e0:	2b00      	cmp	r3, #0
    70e2:	d100      	bne.n	70e6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    70e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    70e6:	490a      	ldr	r1, [pc, #40]	; (7110 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    70e8:	9b01      	ldr	r3, [sp, #4]
    70ea:	9a00      	ldr	r2, [sp, #0]
    70ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    70f0:	4a06      	ldr	r2, [pc, #24]	; (710c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    70f2:	9b01      	ldr	r3, [sp, #4]
    70f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70f8:	1c5a      	adds	r2, r3, #1
    70fa:	4904      	ldr	r1, [pc, #16]	; (710c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    70fc:	9b01      	ldr	r3, [sp, #4]
    70fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7102:	bf00      	nop
    7104:	b003      	add	sp, #12
    7106:	f85d fb04 	ldr.w	pc, [sp], #4
    710a:	bf00      	nop
    710c:	1fff8dfc 	.word	0x1fff8dfc
    7110:	1fff8df8 	.word	0x1fff8df8

00007114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    7114:	b500      	push	{lr}
    7116:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7118:	f7f9 fcd4 	bl	ac4 <Sys_GetCoreID>
    711c:	4603      	mov	r3, r0
    711e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    7120:	4a0d      	ldr	r2, [pc, #52]	; (7158 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7122:	9b01      	ldr	r3, [sp, #4]
    7124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7128:	1e5a      	subs	r2, r3, #1
    712a:	490b      	ldr	r1, [pc, #44]	; (7158 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    712c:	9b01      	ldr	r3, [sp, #4]
    712e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    7132:	4a0a      	ldr	r2, [pc, #40]	; (715c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    7134:	9b01      	ldr	r3, [sp, #4]
    7136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    713a:	f003 0301 	and.w	r3, r3, #1
    713e:	2b00      	cmp	r3, #0
    7140:	d106      	bne.n	7150 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    7142:	4a05      	ldr	r2, [pc, #20]	; (7158 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7144:	9b01      	ldr	r3, [sp, #4]
    7146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    714a:	2b00      	cmp	r3, #0
    714c:	d100      	bne.n	7150 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    714e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7150:	bf00      	nop
    7152:	b003      	add	sp, #12
    7154:	f85d fb04 	ldr.w	pc, [sp], #4
    7158:	1fff8dfc 	.word	0x1fff8dfc
    715c:	1fff8df8 	.word	0x1fff8df8

00007160 <Clock_Ip_au8DividerCallbackIndex>:
    7160:	0e0d0c00 06030201 0a070409 000b0805     ................

00007170 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00007180 <Clock_Ip_au8XoscCallbackIndex>:
    7180:	00000100 00000000 00000000 00000000     ................

00007190 <Clock_Ip_au8IrcoscCallbackIndex>:
    7190:	03020100 00000004 00000000 00000000     ................

000071a0 <Clock_Ip_au8GateCallbackIndex>:
    71a0:	06010200 01040301 00000500 00000000     ................

000071b0 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

000071c0 <Clock_Ip_au8PllCallbackIndex>:
    71c0:	00000100 00000000 00000000 00000000     ................

000071d0 <Clock_Ip_au8SelectorCallbackIndex>:
    71d0:	0a090800 03020109 07060504 00000000     ................

000071e0 <Clock_Ip_au8PcfsCallbackIndex>:
	...

000071f0 <Clock_Ip_au8CmuCallbackIndex>:
	...

00007200 <Clock_Ip_au8ClockFeatures>:
	...
    7210:	01000000 00000000 00000000 00000002     ................
    7220:	00000000 00000300 00000000 00040000     ................
    7230:	00000000 05000000 00000000 00000000     ................
    7240:	00000006 00000000 00000100 00000000     ................
    7250:	00010000 00000000 04000000 00000000     ................
    7260:	00000000 00000005 00000001 00000401     ................
    7270:	00000200 00050100 00030000 04020000     ................
    7280:	04000000 02000000 00000005 00000005     ................
    7290:	00000403 00000600 00050300 00070000     ................
    72a0:	05000000 00000000 00000000 00000006     ................
	...
    72e0:	00050000 00000000 06000000 00000100     ................
    72f0:	00000000 00030007 00000000 00000000     ................
    7300:	00000000 00060000 00000000 07000000     ................
    7310:	00000100 00000000 00030008 00000000     ................
	...
    7328:	00090000 00000000 0a000000 00000100     ................
    7338:	00000000 0003000b 00000000 00000000     ................
    7348:	00000000 000c0000 00000000 0d000000     ................
    7358:	00000100 00000000 0003000e 00000000     ................
    7368:	00000800 00000000 00090000 00000000     ................
    7378:	0a000000 00000000 00000000 0000000b     ................
    7388:	00000000 00000b01 00000000 000b0200     ................
    7398:	00000000 0b030000 00000000 00000000     ................
	...
    73b0:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    73c0:	01000000 00000000 00000000 00000007     ................
    73d0:	00007300 00000700 00320000 00090000     .s........2.....
    73e0:	02000000 07000000 00000000 00000021     ............!...
    73f0:	00000009 00000400 00000900 00030000     ................
    7400:	00070000 61000000 07000000 00000000     .......a........
    7410:	00000024 00000007 00002500 00000700     $........%......
    7420:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    7430:	00000000 00000020 38000004 00003800     .... ......8.8..
    7440:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    7450:	04000000 00260000 00000026 66000004     ......&.&......f
    7460:	00006600 00000400 00370037 00040000     .f......7.7.....
    7470:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    7480:	2e000004 00002e00 00000200 00404040     ............@@@.
    7490:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    74a0:	0000006b 6c000004 00006c00 00000900     k......l.l......
    74b0:	00010000 00090000 00000000 07000000     ................
    74c0:	00000000 00000036 00000007 00003100     ....6........1..
    74d0:	00000700 00490000 00070000 4a000000     ......I........J
    74e0:	07000000 00000000 0000004b 00000007     ........K.......
    74f0:	00004c00 00000700 004d0000 00070000     .L........M.....
    7500:	3d000000 03000000 00000000 00000000     ...=............

00007510 <Clock_Ip_au16SelectorEntryHardwareValue>:
    7510:	01010a03 01010001 04040002 02000603     ................
    7520:	00010810 02020100 00000000 00000007     ................
    7530:	00000009 00000000 00000c0e 00000000     ................
	...

00007568 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    7568:	00020000 00000300 00000601 00000000     ................
	...

00007598 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    7598:	00000700 00000000 02020000 01010303     ................
    75a8:	03020606 00000000 00000000 00000000     ................
	...

000075c8 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    75c8:	00000001 00000000 02020000 01010303     ................
    75d8:	03020606 00000000 00000000 00000000     ................
	...

000075f8 <Clock_Ip_au8DividerValueHardwareValue>:
    75f8:	00020100 00000003 00000004 00000000     ................
    7608:	00000005 00000000 00000000 00000000     ................
    7618:	00000006 00000000 00000000 00000000     ................
	...
    7638:	00000007                                ....

0000763c <Clock_Ip_apxScgPeriphAsyncDivs>:
    763c:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

0000764c <Clock_Ip_aeSourceTypeClockName>:
    764c:	00000000 00000001 00000001 00000001     ................
    765c:	00000001 00000001 00000001 00000001     ................
    766c:	00000002 00000003 00000001 00000001     ................
    767c:	00000001 00000001 00000002 00000002     ................
    768c:	00000003 00000003 00000001 00000001     ................
    769c:	00000004 00000004 00000004 00000004     ................
	...

00007708 <Clock_Ip_aeHwPllName>:
    7708:	00000009                                ....

0000770c <Clock_Ip_aeHwDfsName>:
    770c:	00000057                                W...

00007710 <Clock_Ip_axDividerCallbacks>:
    7710:	00001bd9 00001be3 00001bfd 00001c17     ................
    7720:	00001c31 00001c4b 00001c65 00001c7f     1...K...e.......
    7730:	00001c99 00001cb3 00001ccd 00001ce7     ................
    7740:	00001d01 00001d1b 00001d35              ........5...

0000774c <Clock_Ip_axDividerTriggerCallbacks>:
    774c:	000020a9 000020a9                       . ... ..

00007754 <Clock_Ip_axExtOscCallbacks>:
    7754:	000020b5 000020b5 000020b5 000020bf     . ... ... ... ..
    7764:	000020b5 000020c9 000020e3 000020fd     . ... ... ... ..
    7774:	00002181 00002195                       .!...!..

0000777c <Clock_Ip_axFracDivCallbacks>:
    777c:	00002355 00002355 0000235f              U#..U#.._#..

00007788 <Clock_Ip_axGateCallbacks>:
    7788:	00002379 00002383 00002483 0000249d     y#...#...$...$..
    7798:	00002433 0000244d 000023e3 000023fd     3$..M$...#...#..
    77a8:	00002393 000023ad 000024d3 000024ed     .#...#...$...$..
    77b8:	00002523 0000253d                       #%..=%..

000077c0 <Clock_Ip_axIntOscCallbacks>:
    77c0:	000026e9 000026e9 000026f3 000026fd     .&...&...&...&..
    77d0:	00002717 00002731 00002745 0000275f     .'..1'..E'.._'..
    77e0:	00002779 0000278d 000027a7 000027c1     y'...'...'...'..
    77f0:	00002869 00002883 0000289d              i(...(...(..

000077fc <Clock_Ip_axCmuCallbacks>:
    77fc:	00002e39 00002e43 00002e4f 00002e39     9...C...O...9...

0000780c <Clock_Ip_axPllCallbacks>:
    780c:	00002e59 00002e59 00002e63 00002e59     Y...Y...c...Y...
    781c:	00002e6f 00002e79 00002e93 00002ead     o...y...........
    782c:	00002f51 00002f3d                       Q/..=/..

00007834 <Clock_Ip_axPcfsCallbacks>:
    7834:	000030ad                                .0..

00007838 <Clock_Ip_axSelectorCallbacks>:
    7838:	000030b9 000030b9 000030c3 000030dd     .0...0...0...0..
    7848:	000030b9 000030f7 00003111 0000312b     .0...0...1..+1..
    7858:	00003145 0000315f 00003179 00003193     E1.._1..y1...1..
    7868:	000031ad 000031c7 000031e1 000031fb     .1...1...1...1..
    7878:	00003215 0000322f 00003249 00003263     .2../2..I2..c2..
    7888:	0000327d 00003297                       }2...2..

00007890 <ClockSource>:
    7890:	00000000 00000008 00000002 00000005     ................
	...
    78a8:	00000009                                ....

000078ac <ResetReasonArray>:
    78ac:	00000000 00000001 00000002 00000003     ................
    78bc:	00000004 00000005 00000006 00000007     ................
    78cc:	00000008 00000009 0000000a 0000000b     ................
    78dc:	0000000c 0000000d 0000000e              ............

000078e8 <Port_au32PortCiPortBaseAddr>:
    78e8:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    78f8:	4004d000                                ...@

000078fc <Port_au32PortCiGpioBaseAddr>:
    78fc:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    790c:	400ff100                                ...@

00007910 <Mcu_aClockConfigPB>:
	...
    7918:	1c000101 04000010 01000029 00000005     ........).......
    7928:	00000001 00000000 00000057 00000000     ........W.......
    7938:	00000000 00000008 007a1200 00000001     ..........z.....
    7948:	00000001 00000000 00000057 00000000     ........W.......
    7958:	00000057 00000000 00000000 00000000     W...............
	...
    7978:	00000019 00000005 0000001a 00000002     ................
    7988:	0000001b 00000005 0000002a 00000005     ........*.......
    7998:	00000028 0000000e 00000029 00000001     (.......).......
    79a8:	00000056 0000001c 00000032 0000002a     V.......2...*...
    79b8:	0000002b 00000014 0000002c 00000014     +.......,.......
    79c8:	0000002d 00000014 0000002e 00000014     -...............
    79d8:	0000003f 00000000 00000040 00000000     ?.......@.......
    79e8:	00000041 00000000 00000042 00000000     A.......B.......
    79f8:	00000031 00000000 00000045 00000000     1.......E.......
    7a08:	00000046 00000000 00000047 00000000     F.......G.......
    7a18:	00000044 00000000 00000030 00000000     D.......0.......
    7a28:	0000003d 00000000 00000043 00000000     =.......C.......
    7a38:	00000049 00000000 0000004a 00000000     I.......J.......
    7a48:	0000004b 00000000 00000048 00000000     K.......H.......
    7a58:	0000000c 00000001 00000000 0000000d     ................
    7a68:	00000002 00000000 0000000e 00000001     ................
    7a78:	00000000 0000000f 00000001 00000000     ................
    7a88:	0000001d 00000001 00000000 0000001e     ................
    7a98:	00000008 00000000 0000001f 00000001     ................
    7aa8:	00000000 00000021 00000001 00000000     ....!...........
    7ab8:	00000022 00000002 00000000 00000023     "...........#...
    7ac8:	00000001 00000000 00000025 00000003     ........%.......
    7ad8:	00000000 00000026 00000004 00000000     ....&...........
    7ae8:	00000027 00000002 00000000 00000032     '...........2...
    7af8:	00000001 00000000 00000048 00000001     ........H.......
    7b08:	00000001 00000056 00000001 00000001     ....V...........
    7b18:	00000057 00000000 00000000 00000057     W...........W...
	...
    7b30:	00000057 00000000 00000000 00000057     W...........W...
	...
    7b48:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    7b64:	00000014 00007d00 00000015 00007d00     .....}.......}..
    7b74:	00000016 00007d00 00000017 00008000     .....}..........
    7b84:	00000012 00000001 00000013 00000001     ................
    7b94:	00000030 00000000 00000031 00000000     0.......1.......
    7ba4:	00000032 00000000 00000033 00000000     2.......3.......
    7bb4:	00000034 00000000 00000035 00000001     4.......5.......
    7bc4:	00000036 00000000 00000037 00000001     6.......7.......
    7bd4:	00000038 00000001 00000039 00000000     8.......9.......
    7be4:	0000003a 00000000 0000003b 00000000     :.......;.......
    7bf4:	0000003c 00000000 0000003d 00000000     <.......=.......
    7c04:	0000003e 00000000 0000003f 00000000     >.......?.......
    7c14:	00000040 00000000 00000041 00000000     @.......A.......
    7c24:	00000042 00000000 00000043 00000000     B.......C.......
    7c34:	00000044 00000000 00000045 00000000     D.......E.......
    7c44:	00000046 00000000 00000047 00000000     F.......G.......
    7c54:	00000048 00000000 00000049 00000000     H.......I.......
    7c64:	0000004a 00000000 0000004b 00000000     J.......K.......
    7c74:	0000004c 00000001 0000004d 00000001     L.......M.......
    7c84:	0000004e 00000000 0000004f 00000000     N.......O.......
    7c94:	00000050 00000001 00000051 00000001     P.......Q.......
    7ca4:	00000052 00000001 00000053 00000001     R.......S.......
    7cb4:	00000054 00000001 00000055 00000000     T.......U.......
    7cc4:	00000056 00000001 00000057 00000000     V.......W.......
    7cd4:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00007d08 <Mcu_Config>:
    7d08:	0000005a 00000000 00000001 00000001     Z...............
    7d18:	00007e5c 00007910 00007e68              \~...y..h~..

00007d24 <OsIf_xPredefinedConfig>:
    7d24:	00000000 02dc6c00                       .....l..

00007d2c <OsIf_apxPredefinedConfig>:
    7d2c:	00007d24                                $}..

00007d30 <g_pin_mux_InitConfigArr>:
    7d30:	4004c000 400ff0c0 00000000 00000002     ...@...@........
    7d40:	00000001 00000002 00000000 00000000     ................
	...

00007d58 <au8Port_PartitionList>:
    7d58:	00000001                                ....

00007d5c <au32Port_PinToPartitionMap>:
    7d5c:	00000001                                ....

00007d60 <Port_au16NoUnUsedPadsArrayDefault>:
    7d60:	00010000 00030002 00070006 00090008     ................
    7d70:	000c000b 000e000d 0010000f 00200011     .............. .
    7d80:	00220021 00240023 00260025 00280027     !.".#.$.%.&.'.(.
    7d90:	002a0029 002c002b 002e002d 0030002f     ).*.+.,.-.../.0.
    7da0:	00400031 00420041 00460043 00480047     1.@.A.B.C.F.G.H.
    7db0:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    7dc0:	00610051 00630062 00650064 00670066     Q.a.b.c.d.e.f.g.
    7dd0:	00690068 006b006a 006d006c 006f006e     h.i.j.k.l.m.n.o.
    7de0:	00710070 00810080 00830082 00850084     p.q.............
    7df0:	00870086 00890088 008b008a 008d008c     ................
    7e00:	008f008e 00000090                       ........

00007e08 <Port_UnUsedPin>:
    7e08:	00000100 00000001 00000000              ............

00007e14 <Port_aPinConfigDefault>:
    7e14:	00000060 00000100 00000000 00000002     `...............
    7e24:	00010001                                ....

00007e28 <Port_Config>:
    7e28:	00530001 00007d60 00007e08 00007e14     ..S.`}...~...~..
	...
    7e40:	00007d5c 00007d58 00007d30              \}..X}..0}..

00007e4c <Power_Ip_RCM_ConfigPB>:
	...

00007e54 <Power_Ip_PMC_ConfigPB>:
    7e54:	00000000                                ....

00007e58 <Power_Ip_SMC_ConfigPB>:
    7e58:	00000000                                ....

00007e5c <Power_Ip_aModeConfigPB>:
	...

00007e68 <Power_Ip_HwIPsConfigPB>:
    7e68:	00007e4c 00007e54 00007e58              L~..T~..X~..

00007e74 <__INIT_TABLE>:
    7e74:	00000002 	.word	0x00000002
    7e78:	1fff8b10 	.word	0x1fff8b10
    7e7c:	00007e9c 	.word	0x00007e9c
    7e80:	00007ec4 	.word	0x00007ec4
    7e84:	1fff8800 	.word	0x1fff8800
    7e88:	00000000 	.word	0x00000000
    7e8c:	00000310 	.word	0x00000310

00007e90 <__ZERO_TABLE>:
    7e90:	00000001 	.word	0x00000001
    7e94:	1fff8b40 	.word	0x1fff8b40
    7e98:	1fff8e10 	.word	0x1fff8e10
