
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000c13 	.word	0x00000c13
  10:	00000c15 	.word	0x00000c15
  14:	00000c17 	.word	0x00000c17
  18:	00000c19 	.word	0x00000c19
	...
  2c:	00000c1b 	.word	0x00000c1b
  30:	00000c1d 	.word	0x00000c1d
  34:	00000000 	.word	0x00000000
  38:	00000c1f 	.word	0x00000c1f
  3c:	00000c21 	.word	0x00000c21
  40:	00000c23 	.word	0x00000c23
  44:	00000c23 	.word	0x00000c23
  48:	00000c23 	.word	0x00000c23
  4c:	00000c23 	.word	0x00000c23
  50:	00000c23 	.word	0x00000c23
  54:	00000c23 	.word	0x00000c23
  58:	00000c23 	.word	0x00000c23
  5c:	00000c23 	.word	0x00000c23
  60:	00000c23 	.word	0x00000c23
  64:	00000c23 	.word	0x00000c23
  68:	00000c23 	.word	0x00000c23
  6c:	00000c23 	.word	0x00000c23
  70:	00000c23 	.word	0x00000c23
  74:	00000c23 	.word	0x00000c23
  78:	00000c23 	.word	0x00000c23
  7c:	00000c23 	.word	0x00000c23
  80:	00000c23 	.word	0x00000c23
  84:	00000c23 	.word	0x00000c23
  88:	00000c23 	.word	0x00000c23
  8c:	00000c23 	.word	0x00000c23
  90:	00000c23 	.word	0x00000c23
  94:	00000c23 	.word	0x00000c23
  98:	00000c23 	.word	0x00000c23
  9c:	00000c23 	.word	0x00000c23
  a0:	00000c23 	.word	0x00000c23
  a4:	00000c23 	.word	0x00000c23
  a8:	00000c23 	.word	0x00000c23
  ac:	00000c23 	.word	0x00000c23
  b0:	00000c23 	.word	0x00000c23
  b4:	00000c23 	.word	0x00000c23
  b8:	00000c23 	.word	0x00000c23
  bc:	00000c23 	.word	0x00000c23
  c0:	00000c23 	.word	0x00000c23
  c4:	00000c23 	.word	0x00000c23
  c8:	00000c23 	.word	0x00000c23
  cc:	00000c23 	.word	0x00000c23
  d0:	00000c23 	.word	0x00000c23
  d4:	00000c23 	.word	0x00000c23
  d8:	00000c23 	.word	0x00000c23
  dc:	00000c23 	.word	0x00000c23
  e0:	00000c23 	.word	0x00000c23
  e4:	00000c23 	.word	0x00000c23
  e8:	00000c23 	.word	0x00000c23
  ec:	00000c23 	.word	0x00000c23
  f0:	00000c23 	.word	0x00000c23
  f4:	00000c23 	.word	0x00000c23
  f8:	00000c23 	.word	0x00000c23
  fc:	00000c23 	.word	0x00000c23
 100:	00000c23 	.word	0x00000c23
 104:	00000c23 	.word	0x00000c23
 108:	00000c23 	.word	0x00000c23
 10c:	00000c23 	.word	0x00000c23
 110:	00000c23 	.word	0x00000c23
 114:	00000c23 	.word	0x00000c23
 118:	00000c23 	.word	0x00000c23
 11c:	00000c23 	.word	0x00000c23
 120:	00000c23 	.word	0x00000c23
 124:	00000c23 	.word	0x00000c23
 128:	00000c23 	.word	0x00000c23
 12c:	00000c23 	.word	0x00000c23
 130:	00000c23 	.word	0x00000c23
 134:	00000c23 	.word	0x00000c23
 138:	00000c23 	.word	0x00000c23
 13c:	00000c23 	.word	0x00000c23
 140:	00000c23 	.word	0x00000c23
 144:	00000c23 	.word	0x00000c23
 148:	00000c23 	.word	0x00000c23
 14c:	00000c23 	.word	0x00000c23
 150:	00000c23 	.word	0x00000c23
 154:	00000c23 	.word	0x00000c23
 158:	00000c23 	.word	0x00000c23
 15c:	00000c23 	.word	0x00000c23
 160:	00000c23 	.word	0x00000c23
 164:	00000c23 	.word	0x00000c23
 168:	00000c23 	.word	0x00000c23
 16c:	00000c23 	.word	0x00000c23
 170:	00000c23 	.word	0x00000c23
 174:	00000c23 	.word	0x00000c23
 178:	00000c23 	.word	0x00000c23
 17c:	00000c23 	.word	0x00000c23
 180:	00000c23 	.word	0x00000c23
 184:	00000c23 	.word	0x00000c23
 188:	00000c23 	.word	0x00000c23
 18c:	00000c23 	.word	0x00000c23
 190:	00000c23 	.word	0x00000c23
 194:	00000c23 	.word	0x00000c23
 198:	00000c23 	.word	0x00000c23
 19c:	00000c23 	.word	0x00000c23
 1a0:	00000c23 	.word	0x00000c23
 1a4:	00000c23 	.word	0x00000c23
 1a8:	00000c23 	.word	0x00000c23
 1ac:	00000c23 	.word	0x00000c23
 1b0:	00000c23 	.word	0x00000c23
 1b4:	00000c23 	.word	0x00000c23
 1b8:	00000c23 	.word	0x00000c23
 1bc:	00000c23 	.word	0x00000c23
 1c0:	00000c23 	.word	0x00000c23
 1c4:	00000c23 	.word	0x00000c23
 1c8:	00000c23 	.word	0x00000c23
 1cc:	00000c23 	.word	0x00000c23
 1d0:	00000c23 	.word	0x00000c23
 1d4:	00000c23 	.word	0x00000c23
 1d8:	00000c23 	.word	0x00000c23
 1dc:	00000c23 	.word	0x00000c23
 1e0:	00000c23 	.word	0x00000c23
 1e4:	00000c23 	.word	0x00000c23
 1e8:	00000c23 	.word	0x00000c23
 1ec:	00000c23 	.word	0x00000c23
 1f0:	00000c23 	.word	0x00000c23
 1f4:	00000c23 	.word	0x00000c23
 1f8:	00000c23 	.word	0x00000c23
 1fc:	00000c23 	.word	0x00000c23
 200:	00000c23 	.word	0x00000c23
 204:	00000c23 	.word	0x00000c23
 208:	00000c23 	.word	0x00000c23
 20c:	00000c23 	.word	0x00000c23
 210:	00000c23 	.word	0x00000c23
 214:	00000c23 	.word	0x00000c23
 218:	00000c23 	.word	0x00000c23
 21c:	00000c23 	.word	0x00000c23
 220:	00000c23 	.word	0x00000c23
 224:	00000c23 	.word	0x00000c23
 228:	00000c23 	.word	0x00000c23
 22c:	00000c23 	.word	0x00000c23
 230:	00000c23 	.word	0x00000c23
 234:	00000c23 	.word	0x00000c23
 238:	00000c23 	.word	0x00000c23
 23c:	00000c23 	.word	0x00000c23
 240:	00000c23 	.word	0x00000c23
 244:	00000c23 	.word	0x00000c23
 248:	00000c23 	.word	0x00000c23
 24c:	00000c23 	.word	0x00000c23
 250:	00000c23 	.word	0x00000c23
 254:	00000c23 	.word	0x00000c23
 258:	00000c23 	.word	0x00000c23
 25c:	00000c23 	.word	0x00000c23
 260:	00000c23 	.word	0x00000c23
 264:	00000c23 	.word	0x00000c23
 268:	00000c23 	.word	0x00000c23
 26c:	00000c23 	.word	0x00000c23
 270:	00000c23 	.word	0x00000c23
 274:	00000c23 	.word	0x00000c23
 278:	00000c23 	.word	0x00000c23
 27c:	00000c23 	.word	0x00000c23
 280:	00000c23 	.word	0x00000c23
 284:	00000c23 	.word	0x00000c23
 288:	00000c23 	.word	0x00000c23
 28c:	00000c23 	.word	0x00000c23
 290:	00000c23 	.word	0x00000c23
 294:	00000c23 	.word	0x00000c23
 298:	00000c23 	.word	0x00000c23
 29c:	00000c23 	.word	0x00000c23
 2a0:	00000c23 	.word	0x00000c23
 2a4:	00000c23 	.word	0x00000c23
 2a8:	00000c23 	.word	0x00000c23
 2ac:	00000c23 	.word	0x00000c23
 2b0:	00000c23 	.word	0x00000c23
 2b4:	00000c23 	.word	0x00000c23
 2b8:	00000c23 	.word	0x00000c23
 2bc:	00000c23 	.word	0x00000c23
 2c0:	00000c23 	.word	0x00000c23
 2c4:	00000c23 	.word	0x00000c23
 2c8:	00000c23 	.word	0x00000c23
 2cc:	00000c23 	.word	0x00000c23
 2d0:	00000c23 	.word	0x00000c23
 2d4:	00000c23 	.word	0x00000c23
 2d8:	00000c23 	.word	0x00000c23
 2dc:	00000c23 	.word	0x00000c23
 2e0:	00000c23 	.word	0x00000c23
 2e4:	00000c23 	.word	0x00000c23
 2e8:	00000c23 	.word	0x00000c23
 2ec:	00000c23 	.word	0x00000c23
 2f0:	00000c23 	.word	0x00000c23
 2f4:	00000c23 	.word	0x00000c23
 2f8:	00000c23 	.word	0x00000c23
 2fc:	00000c23 	.word	0x00000c23
 300:	00000c23 	.word	0x00000c23
 304:	00000c23 	.word	0x00000c23
 308:	00000c23 	.word	0x00000c23
 30c:	00000c23 	.word	0x00000c23

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fafd 	bl	a80 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fbbc 	bl	c08 <startup_go_to_user_mode>
     490:	f000 fa34 	bl	8fc <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff8f04 	.word	0x1fff8f04

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fb07 	bl	bac <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0x4>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0x8>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Delay>:
void Delay( uint32 ms );

/*this is dummy delay function prepare just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     8b0:	b500      	push	{lr}
     8b2:	b087      	sub	sp, #28
     8b4:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     8b6:	9b01      	ldr	r3, [sp, #4]
     8b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8bc:	fb02 f303 	mul.w	r3, r2, r3
     8c0:	2101      	movs	r1, #1
     8c2:	4618      	mov	r0, r3
     8c4:	f001 f9ae 	bl	1c24 <OsIf_MicrosToTicks>
     8c8:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     8ca:	2001      	movs	r0, #1
     8cc:	f001 f95e 	bl	1b8c <OsIf_GetCounter>
     8d0:	4603      	mov	r3, r0
     8d2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     8d4:	2300      	movs	r3, #0
     8d6:	9305      	str	r3, [sp, #20]
    do
    {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8d8:	ab03      	add	r3, sp, #12
     8da:	2101      	movs	r1, #1
     8dc:	4618      	mov	r0, r3
     8de:	f001 f96e 	bl	1bbe <OsIf_GetElapsed>
     8e2:	4602      	mov	r2, r0
     8e4:	9b05      	ldr	r3, [sp, #20]
     8e6:	4413      	add	r3, r2
     8e8:	9305      	str	r3, [sp, #20]
    }while( ElapsedTime < Timeout );
     8ea:	9a05      	ldr	r2, [sp, #20]
     8ec:	9b04      	ldr	r3, [sp, #16]
     8ee:	429a      	cmp	r2, r3
     8f0:	d3f2      	bcc.n	8d8 <Delay+0x28>
}
     8f2:	bf00      	nop
     8f4:	bf00      	nop
     8f6:	b007      	add	sp, #28
     8f8:	f85d fb04 	ldr.w	pc, [sp], #4

000008fc <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8fc:	b500      	push	{lr}
     8fe:	b083      	sub	sp, #12
    Spi_DataBufferType TxBuffer[4];
    Spi_DataBufferType RxBuffer[4];

    EcuM_Init();
     900:	f000 f884 	bl	a0c <EcuM_Init>
    SEGGER_RTT_Init();
     904:	f000 fb20 	bl	f48 <SEGGER_RTT_Init>

    /*Enable writing instructions in the eeprom memory by sending a 0x06*/
    TxBuffer[0] = 0x06;                                 /*WREN Instruction value*/
     908:	2306      	movs	r3, #6
     90a:	f88d 3004 	strb.w	r3, [sp, #4]
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_0, TxBuffer, NULL, 1 );
     90e:	a901      	add	r1, sp, #4
     910:	2301      	movs	r3, #1
     912:	2200      	movs	r2, #0
     914:	2000      	movs	r0, #0
     916:	f007 fab9 	bl	7e8c <Spi_SetupEB>
    Spi_SyncTransmit( SpiConf_SpiSequence_SpiSequence_0 );
     91a:	2000      	movs	r0, #0
     91c:	f007 fb8e 	bl	803c <Spi_SyncTransmit>

    /*Send to write the value 0x37 in the address 0 of the memory*/
    TxBuffer[0] = 0x02;             /*Write instruction */
     920:	2302      	movs	r3, #2
     922:	f88d 3004 	strb.w	r3, [sp, #4]
    TxBuffer[1] = 0x00;             /*16 bit - address  */
     926:	2300      	movs	r3, #0
     928:	f88d 3005 	strb.w	r3, [sp, #5]
    TxBuffer[2] = 0x00;             /*16 bit - address  */
     92c:	2300      	movs	r3, #0
     92e:	f88d 3006 	strb.w	r3, [sp, #6]
    TxBuffer[3] = 0x37;             /*Data byte         */
     932:	2337      	movs	r3, #55	; 0x37
     934:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_0, TxBuffer, NULL, 4 );
     938:	a901      	add	r1, sp, #4
     93a:	2304      	movs	r3, #4
     93c:	2200      	movs	r2, #0
     93e:	2000      	movs	r0, #0
     940:	f007 faa4 	bl	7e8c <Spi_SetupEB>
    Spi_SyncTransmit( SpiConf_SpiSequence_SpiSequence_0 );
     944:	2000      	movs	r0, #0
     946:	f007 fb79 	bl	803c <Spi_SyncTransmit>

    /*Wait for the data to be recorded in memory, it is not the best way to
    do it, so it's just for demonstration purposes*/
    Delay( 8 );
     94a:	2008      	movs	r0, #8
     94c:	f7ff ffb0 	bl	8b0 <Delay>

    /*Read a single byte from direccion 0x00 of eeprom memory, we need to transmit first
    the read instruction plus the address to read*/
    TxBuffer[0] = 0x03;             /*Read instruction */
     950:	2303      	movs	r3, #3
     952:	f88d 3004 	strb.w	r3, [sp, #4]
    TxBuffer[1] = 0x00;             /*16 bit - address  */
     956:	2300      	movs	r3, #0
     958:	f88d 3005 	strb.w	r3, [sp, #5]
    TxBuffer[2] = 0x00;             /*16 bit - address  */
     95c:	2300      	movs	r3, #0
     95e:	f88d 3006 	strb.w	r3, [sp, #6]
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_0, TxBuffer, RxBuffer, 4 );
     962:	466a      	mov	r2, sp
     964:	a901      	add	r1, sp, #4
     966:	2304      	movs	r3, #4
     968:	2000      	movs	r0, #0
     96a:	f007 fa8f 	bl	7e8c <Spi_SetupEB>
    Spi_SyncTransmit( SpiConf_SpiSequence_SpiSequence_0 );
     96e:	2000      	movs	r0, #0
     970:	f007 fb64 	bl	803c <Spi_SyncTransmit>

    /*Display data read it*/
    SEGGER_RTT_printf(0, "Data read from eeprom 1: 0x%X\n", RxBuffer[3] );
     974:	f89d 3003 	ldrb.w	r3, [sp, #3]
     978:	461a      	mov	r2, r3
     97a:	4922      	ldr	r1, [pc, #136]	; (a04 <main+0x108>)
     97c:	2000      	movs	r0, #0
     97e:	f000 fe4b 	bl	1618 <SEGGER_RTT_printf>

    /*Enable writing instructions in the eeprom memory by sending a 0x06*/
    TxBuffer[0] = 0x06;                                 /*WREN Instruction value*/
     982:	2306      	movs	r3, #6
     984:	f88d 3004 	strb.w	r3, [sp, #4]
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_1, TxBuffer, NULL, 1 );
     988:	a901      	add	r1, sp, #4
     98a:	2301      	movs	r3, #1
     98c:	2200      	movs	r2, #0
     98e:	2001      	movs	r0, #1
     990:	f007 fa7c 	bl	7e8c <Spi_SetupEB>
    Spi_SyncTransmit( SpiConf_SpiSequence_SpiSequence_1 );
     994:	2001      	movs	r0, #1
     996:	f007 fb51 	bl	803c <Spi_SyncTransmit>

    /*Send to write the value 0x38 in the address 0 of the memory*/
    TxBuffer[0] = 0x02;             /*Write instruction */
     99a:	2302      	movs	r3, #2
     99c:	f88d 3004 	strb.w	r3, [sp, #4]
    TxBuffer[1] = 0x00;             /*16 bit - address  */
     9a0:	2300      	movs	r3, #0
     9a2:	f88d 3005 	strb.w	r3, [sp, #5]
    TxBuffer[2] = 0x00;             /*16 bit - address  */
     9a6:	2300      	movs	r3, #0
     9a8:	f88d 3006 	strb.w	r3, [sp, #6]
    TxBuffer[3] = 0x38;             /*Data byte         */
     9ac:	2338      	movs	r3, #56	; 0x38
     9ae:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_1, TxBuffer, NULL, 4 );
     9b2:	a901      	add	r1, sp, #4
     9b4:	2304      	movs	r3, #4
     9b6:	2200      	movs	r2, #0
     9b8:	2001      	movs	r0, #1
     9ba:	f007 fa67 	bl	7e8c <Spi_SetupEB>
    Spi_SyncTransmit( SpiConf_SpiSequence_SpiSequence_1 );
     9be:	2001      	movs	r0, #1
     9c0:	f007 fb3c 	bl	803c <Spi_SyncTransmit>

    /*Wait for the data to be recorded in memory, it is not the best way to
    do it, so it's just for demonstration purposes*/
    Delay( 8 );
     9c4:	2008      	movs	r0, #8
     9c6:	f7ff ff73 	bl	8b0 <Delay>

    /*Read a single byte from direccion 0x00 of eeprom memory, we need to transmit first
    the read instruction plus the address to read*/
    TxBuffer[0] = 0x03;             /*Read instruction */
     9ca:	2303      	movs	r3, #3
     9cc:	f88d 3004 	strb.w	r3, [sp, #4]
    TxBuffer[1] = 0x00;             /*16 bit - address  */
     9d0:	2300      	movs	r3, #0
     9d2:	f88d 3005 	strb.w	r3, [sp, #5]
    TxBuffer[2] = 0x00;             /*16 bit - address  */
     9d6:	2300      	movs	r3, #0
     9d8:	f88d 3006 	strb.w	r3, [sp, #6]
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_1, TxBuffer, RxBuffer, 4 );
     9dc:	466a      	mov	r2, sp
     9de:	a901      	add	r1, sp, #4
     9e0:	2304      	movs	r3, #4
     9e2:	2001      	movs	r0, #1
     9e4:	f007 fa52 	bl	7e8c <Spi_SetupEB>
    Spi_SyncTransmit( SpiConf_SpiSequence_SpiSequence_1 );
     9e8:	2001      	movs	r0, #1
     9ea:	f007 fb27 	bl	803c <Spi_SyncTransmit>

    /*Display data read it*/
    SEGGER_RTT_printf(0, "Data read from eeprom 2: 0x%X\n", RxBuffer[3] );
     9ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
     9f2:	461a      	mov	r2, r3
     9f4:	4904      	ldr	r1, [pc, #16]	; (a08 <main+0x10c>)
     9f6:	2000      	movs	r0, #0
     9f8:	f000 fe0e 	bl	1618 <SEGGER_RTT_printf>

    while( 1u )
    {
        Delay( 10u );
     9fc:	200a      	movs	r0, #10
     9fe:	f7ff ff57 	bl	8b0 <Delay>
     a02:	e7fb      	b.n	9fc <main+0x100>
     a04:	0000a568 	.word	0x0000a568
     a08:	0000a588 	.word	0x0000a588

00000a0c <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     a0c:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     a0e:	480b      	ldr	r0, [pc, #44]	; (a3c <EcuM_Init+0x30>)
     a10:	f004 fe48 	bl	56a4 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     a14:	2000      	movs	r0, #0
     a16:	f004 fe99 	bl	574c <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     a1a:	2000      	movs	r0, #0
     a1c:	f004 feba 	bl	5794 <Mcu_SetMode>

    /*Init the internal tick reference Systick Timer*/
    OsIf_Init( NULL_PTR );
     a20:	2000      	movs	r0, #0
     a22:	f001 f8aa 	bl	1b7a <OsIf_Init>
    /*enable and setup interrupts*/
    Platform_Init( NULL_PTR );
     a26:	2000      	movs	r0, #0
     a28:	f000 ffa4 	bl	1974 <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration, for this case
    only Port Pin 122  (D16) is configured as output*/
    Port_Init( &Port_Config );
     a2c:	4804      	ldr	r0, [pc, #16]	; (a40 <EcuM_Init+0x34>)
     a2e:	f005 fa3b 	bl	5ea8 <Port_Init>

    /*init the FlexCAN0 with the paramters set in Tresos in loop back mode*/
    Spi_Init( &Spi_Config );
     a32:	4804      	ldr	r0, [pc, #16]	; (a44 <EcuM_Init+0x38>)
     a34:	f007 f978 	bl	7d28 <Spi_Init>
}
     a38:	bf00      	nop
     a3a:	bd08      	pop	{r3, pc}
     a3c:	0000b1a4 	.word	0x0000b1a4
     a40:	0000b3cc 	.word	0x0000b3cc
     a44:	0000b528 	.word	0x0000b528

00000a48 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     a48:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a4a:	f3ef 8310 	mrs	r3, PRIMASK
     a4e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a50:	4623      	mov	r3, r4
}
     a52:	4618      	mov	r0, r3
     a54:	f85d 4b04 	ldr.w	r4, [sp], #4
     a58:	4770      	bx	lr

00000a5a <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     a5a:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a5c:	f3ef 8310 	mrs	r3, PRIMASK
     a60:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a62:	4623      	mov	r3, r4
}
     a64:	4618      	mov	r0, r3
     a66:	f85d 4b04 	ldr.w	r4, [sp], #4
     a6a:	4770      	bx	lr

00000a6c <Spi_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Spi_schm_read_msr(void)
{
     a6c:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a6e:	f3ef 8310 	mrs	r3, PRIMASK
     a72:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a74:	4623      	mov	r3, r4
}
     a76:	4618      	mov	r0, r3
     a78:	f85d 4b04 	ldr.w	r4, [sp], #4
     a7c:	4770      	bx	lr
	...

00000a80 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     a80:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     a82:	2300      	movs	r3, #0
     a84:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     a86:	2300      	movs	r3, #0
     a88:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     a8a:	2300      	movs	r3, #0
     a8c:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     a8e:	2300      	movs	r3, #0
     a90:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     a92:	4b44      	ldr	r3, [pc, #272]	; (ba4 <init_data_bss+0x124>)
     a94:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     a96:	4b44      	ldr	r3, [pc, #272]	; (ba8 <init_data_bss+0x128>)
     a98:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     a9a:	9b05      	ldr	r3, [sp, #20]
     a9c:	681b      	ldr	r3, [r3, #0]
     a9e:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     aa0:	9b05      	ldr	r3, [sp, #20]
     aa2:	3304      	adds	r3, #4
     aa4:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     aa6:	9b05      	ldr	r3, [sp, #20]
     aa8:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     aaa:	2300      	movs	r3, #0
     aac:	9309      	str	r3, [sp, #36]	; 0x24
     aae:	e03d      	b.n	b2c <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ab2:	4613      	mov	r3, r2
     ab4:	005b      	lsls	r3, r3, #1
     ab6:	4413      	add	r3, r2
     ab8:	009b      	lsls	r3, r3, #2
     aba:	461a      	mov	r2, r3
     abc:	9b03      	ldr	r3, [sp, #12]
     abe:	4413      	add	r3, r2
     ac0:	685b      	ldr	r3, [r3, #4]
     ac2:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ac6:	4613      	mov	r3, r2
     ac8:	005b      	lsls	r3, r3, #1
     aca:	4413      	add	r3, r2
     acc:	009b      	lsls	r3, r3, #2
     ace:	461a      	mov	r2, r3
     ad0:	9b03      	ldr	r3, [sp, #12]
     ad2:	4413      	add	r3, r2
     ad4:	681b      	ldr	r3, [r3, #0]
     ad6:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ada:	4613      	mov	r3, r2
     adc:	005b      	lsls	r3, r3, #1
     ade:	4413      	add	r3, r2
     ae0:	009b      	lsls	r3, r3, #2
     ae2:	461a      	mov	r2, r3
     ae4:	9b03      	ldr	r3, [sp, #12]
     ae6:	4413      	add	r3, r2
     ae8:	689b      	ldr	r3, [r3, #8]
     aea:	4619      	mov	r1, r3
     aec:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aee:	4613      	mov	r3, r2
     af0:	005b      	lsls	r3, r3, #1
     af2:	4413      	add	r3, r2
     af4:	009b      	lsls	r3, r3, #2
     af6:	461a      	mov	r2, r3
     af8:	9b03      	ldr	r3, [sp, #12]
     afa:	4413      	add	r3, r2
     afc:	685b      	ldr	r3, [r3, #4]
     afe:	1acb      	subs	r3, r1, r3
     b00:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b02:	2300      	movs	r3, #0
     b04:	9308      	str	r3, [sp, #32]
     b06:	e00a      	b.n	b1e <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     b08:	9a00      	ldr	r2, [sp, #0]
     b0a:	9b08      	ldr	r3, [sp, #32]
     b0c:	441a      	add	r2, r3
     b0e:	9901      	ldr	r1, [sp, #4]
     b10:	9b08      	ldr	r3, [sp, #32]
     b12:	440b      	add	r3, r1
     b14:	7812      	ldrb	r2, [r2, #0]
     b16:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b18:	9b08      	ldr	r3, [sp, #32]
     b1a:	3301      	adds	r3, #1
     b1c:	9308      	str	r3, [sp, #32]
     b1e:	9a08      	ldr	r2, [sp, #32]
     b20:	9b06      	ldr	r3, [sp, #24]
     b22:	429a      	cmp	r2, r3
     b24:	d3f0      	bcc.n	b08 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b28:	3301      	adds	r3, #1
     b2a:	9309      	str	r3, [sp, #36]	; 0x24
     b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b2e:	9b07      	ldr	r3, [sp, #28]
     b30:	429a      	cmp	r2, r3
     b32:	d3bd      	bcc.n	ab0 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     b34:	9b04      	ldr	r3, [sp, #16]
     b36:	681b      	ldr	r3, [r3, #0]
     b38:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     b3a:	9b04      	ldr	r3, [sp, #16]
     b3c:	3304      	adds	r3, #4
     b3e:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     b40:	9b04      	ldr	r3, [sp, #16]
     b42:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     b44:	2300      	movs	r3, #0
     b46:	9309      	str	r3, [sp, #36]	; 0x24
     b48:	e024      	b.n	b94 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b4c:	00db      	lsls	r3, r3, #3
     b4e:	9a02      	ldr	r2, [sp, #8]
     b50:	4413      	add	r3, r2
     b52:	681b      	ldr	r3, [r3, #0]
     b54:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b58:	00db      	lsls	r3, r3, #3
     b5a:	9a02      	ldr	r2, [sp, #8]
     b5c:	4413      	add	r3, r2
     b5e:	685b      	ldr	r3, [r3, #4]
     b60:	4619      	mov	r1, r3
     b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b64:	00db      	lsls	r3, r3, #3
     b66:	9a02      	ldr	r2, [sp, #8]
     b68:	4413      	add	r3, r2
     b6a:	681b      	ldr	r3, [r3, #0]
     b6c:	1acb      	subs	r3, r1, r3
     b6e:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b70:	2300      	movs	r3, #0
     b72:	9308      	str	r3, [sp, #32]
     b74:	e007      	b.n	b86 <init_data_bss+0x106>
        {
            ram[j] = 0U;
     b76:	9a01      	ldr	r2, [sp, #4]
     b78:	9b08      	ldr	r3, [sp, #32]
     b7a:	4413      	add	r3, r2
     b7c:	2200      	movs	r2, #0
     b7e:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b80:	9b08      	ldr	r3, [sp, #32]
     b82:	3301      	adds	r3, #1
     b84:	9308      	str	r3, [sp, #32]
     b86:	9a08      	ldr	r2, [sp, #32]
     b88:	9b06      	ldr	r3, [sp, #24]
     b8a:	429a      	cmp	r2, r3
     b8c:	d3f3      	bcc.n	b76 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b90:	3301      	adds	r3, #1
     b92:	9309      	str	r3, [sp, #36]	; 0x24
     b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b96:	9b07      	ldr	r3, [sp, #28]
     b98:	429a      	cmp	r2, r3
     b9a:	d3d6      	bcc.n	b4a <init_data_bss+0xca>
        }
    }
}
     b9c:	bf00      	nop
     b9e:	bf00      	nop
     ba0:	b00a      	add	sp, #40	; 0x28
     ba2:	4770      	bx	lr
     ba4:	0000b56c 	.word	0x0000b56c
     ba8:	0000b588 	.word	0x0000b588

00000bac <sys_m4_cache_init>:
{
     bac:	b084      	sub	sp, #16
     bae:	4603      	mov	r3, r0
     bb0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     bb4:	2300      	movs	r3, #0
     bb6:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     bba:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bbe:	2b00      	cmp	r3, #0
     bc0:	d118      	bne.n	bf4 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     bc2:	4b10      	ldr	r3, [pc, #64]	; (c04 <sys_m4_cache_init+0x58>)
     bc4:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     bc8:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     bca:	4b0e      	ldr	r3, [pc, #56]	; (c04 <sys_m4_cache_init+0x58>)
     bcc:	681b      	ldr	r3, [r3, #0]
     bce:	4a0d      	ldr	r2, [pc, #52]	; (c04 <sys_m4_cache_init+0x58>)
     bd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     bd4:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     bd6:	bf00      	nop
     bd8:	4b0a      	ldr	r3, [pc, #40]	; (c04 <sys_m4_cache_init+0x58>)
     bda:	681b      	ldr	r3, [r3, #0]
     bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     be4:	d0f8      	beq.n	bd8 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     be6:	4b07      	ldr	r3, [pc, #28]	; (c04 <sys_m4_cache_init+0x58>)
     be8:	681b      	ldr	r3, [r3, #0]
     bea:	4a06      	ldr	r2, [pc, #24]	; (c04 <sys_m4_cache_init+0x58>)
     bec:	f043 0301 	orr.w	r3, r3, #1
     bf0:	6013      	str	r3, [r2, #0]
     bf2:	e002      	b.n	bfa <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     bf4:	2301      	movs	r3, #1
     bf6:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     bfa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     bfe:	4618      	mov	r0, r3
     c00:	b004      	add	sp, #16
     c02:	4770      	bx	lr
     c04:	e0082000 	.word	0xe0082000

00000c08 <startup_go_to_user_mode>:
}
     c08:	bf00      	nop
     c0a:	4770      	bx	lr

00000c0c <Sys_GetCoreID>:
    return 0U;
     c0c:	2300      	movs	r3, #0
}
     c0e:	4618      	mov	r0, r3
     c10:	4770      	bx	lr

00000c12 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     c12:	e7fe      	b.n	c12 <HardFault_Handler>

00000c14 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     c14:	e7fe      	b.n	c14 <MemManage_Handler>

00000c16 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     c16:	e7fe      	b.n	c16 <BusFault_Handler>

00000c18 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     c18:	e7fe      	b.n	c18 <UsageFault_Handler>

00000c1a <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     c1a:	e7fe      	b.n	c1a <SVC_Handler>

00000c1c <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     c1c:	e7fe      	b.n	c1c <DebugMon_Handler>

00000c1e <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     c1e:	e7fe      	b.n	c1e <PendSV_Handler>

00000c20 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     c20:	e7fe      	b.n	c20 <SysTick_Handler>

00000c22 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     c22:	e7fe      	b.n	c22 <undefined_handler>

00000c24 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     c24:	b500      	push	{lr}
     c26:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     c28:	4b26      	ldr	r3, [pc, #152]	; (cc4 <_DoInit+0xa0>)
     c2a:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     c2c:	22a8      	movs	r2, #168	; 0xa8
     c2e:	2100      	movs	r1, #0
     c30:	9800      	ldr	r0, [sp, #0]
     c32:	f000 fd13 	bl	165c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     c36:	9b00      	ldr	r3, [sp, #0]
     c38:	2203      	movs	r2, #3
     c3a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     c3c:	9b00      	ldr	r3, [sp, #0]
     c3e:	2203      	movs	r2, #3
     c40:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     c42:	9b00      	ldr	r3, [sp, #0]
     c44:	4a20      	ldr	r2, [pc, #128]	; (cc8 <_DoInit+0xa4>)
     c46:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     c48:	9b00      	ldr	r3, [sp, #0]
     c4a:	4a20      	ldr	r2, [pc, #128]	; (ccc <_DoInit+0xa8>)
     c4c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     c4e:	9b00      	ldr	r3, [sp, #0]
     c50:	f44f 6280 	mov.w	r2, #1024	; 0x400
     c54:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     c56:	9b00      	ldr	r3, [sp, #0]
     c58:	2200      	movs	r2, #0
     c5a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     c5c:	9b00      	ldr	r3, [sp, #0]
     c5e:	2200      	movs	r2, #0
     c60:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     c62:	9b00      	ldr	r3, [sp, #0]
     c64:	2200      	movs	r2, #0
     c66:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     c68:	9b00      	ldr	r3, [sp, #0]
     c6a:	4a17      	ldr	r2, [pc, #92]	; (cc8 <_DoInit+0xa4>)
     c6c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     c6e:	9b00      	ldr	r3, [sp, #0]
     c70:	4a17      	ldr	r2, [pc, #92]	; (cd0 <_DoInit+0xac>)
     c72:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     c74:	9b00      	ldr	r3, [sp, #0]
     c76:	2210      	movs	r2, #16
     c78:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     c7a:	9b00      	ldr	r3, [sp, #0]
     c7c:	2200      	movs	r2, #0
     c7e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     c80:	9b00      	ldr	r3, [sp, #0]
     c82:	2200      	movs	r2, #0
     c84:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     c86:	9b00      	ldr	r3, [sp, #0]
     c88:	2200      	movs	r2, #0
     c8a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     c8c:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     c90:	2300      	movs	r3, #0
     c92:	9301      	str	r3, [sp, #4]
     c94:	e00c      	b.n	cb0 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     c96:	9b01      	ldr	r3, [sp, #4]
     c98:	f1c3 030f 	rsb	r3, r3, #15
     c9c:	4a0d      	ldr	r2, [pc, #52]	; (cd4 <_DoInit+0xb0>)
     c9e:	5cd1      	ldrb	r1, [r2, r3]
     ca0:	9a00      	ldr	r2, [sp, #0]
     ca2:	9b01      	ldr	r3, [sp, #4]
     ca4:	4413      	add	r3, r2
     ca6:	460a      	mov	r2, r1
     ca8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	3301      	adds	r3, #1
     cae:	9301      	str	r3, [sp, #4]
     cb0:	9b01      	ldr	r3, [sp, #4]
     cb2:	2b0f      	cmp	r3, #15
     cb4:	d9ef      	bls.n	c96 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     cb6:	f3bf 8f5f 	dmb	sy
}
     cba:	bf00      	nop
     cbc:	b003      	add	sp, #12
     cbe:	f85d fb04 	ldr.w	pc, [sp], #4
     cc2:	bf00      	nop
     cc4:	1fff8f20 	.word	0x1fff8f20
     cc8:	0000a5a8 	.word	0x0000a5a8
     ccc:	1fff8fc8 	.word	0x1fff8fc8
     cd0:	1fff93c8 	.word	0x1fff93c8
     cd4:	0000b548 	.word	0x0000b548

00000cd8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     cd8:	b500      	push	{lr}
     cda:	b08b      	sub	sp, #44	; 0x2c
     cdc:	9003      	str	r0, [sp, #12]
     cde:	9102      	str	r1, [sp, #8]
     ce0:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     ce2:	2300      	movs	r3, #0
     ce4:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     ce6:	9b03      	ldr	r3, [sp, #12]
     ce8:	68db      	ldr	r3, [r3, #12]
     cea:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     cec:	9b03      	ldr	r3, [sp, #12]
     cee:	691b      	ldr	r3, [r3, #16]
     cf0:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     cf2:	9a06      	ldr	r2, [sp, #24]
     cf4:	9b07      	ldr	r3, [sp, #28]
     cf6:	429a      	cmp	r2, r3
     cf8:	d905      	bls.n	d06 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     cfa:	9a06      	ldr	r2, [sp, #24]
     cfc:	9b07      	ldr	r3, [sp, #28]
     cfe:	1ad3      	subs	r3, r2, r3
     d00:	3b01      	subs	r3, #1
     d02:	9309      	str	r3, [sp, #36]	; 0x24
     d04:	e007      	b.n	d16 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     d06:	9b03      	ldr	r3, [sp, #12]
     d08:	689a      	ldr	r2, [r3, #8]
     d0a:	9906      	ldr	r1, [sp, #24]
     d0c:	9b07      	ldr	r3, [sp, #28]
     d0e:	1acb      	subs	r3, r1, r3
     d10:	4413      	add	r3, r2
     d12:	3b01      	subs	r3, #1
     d14:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     d16:	9b03      	ldr	r3, [sp, #12]
     d18:	689a      	ldr	r2, [r3, #8]
     d1a:	9b07      	ldr	r3, [sp, #28]
     d1c:	1ad3      	subs	r3, r2, r3
     d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d20:	4293      	cmp	r3, r2
     d22:	bf28      	it	cs
     d24:	4613      	movcs	r3, r2
     d26:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d2a:	9b01      	ldr	r3, [sp, #4]
     d2c:	4293      	cmp	r3, r2
     d2e:	bf28      	it	cs
     d30:	4613      	movcs	r3, r2
     d32:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d34:	9b03      	ldr	r3, [sp, #12]
     d36:	685a      	ldr	r2, [r3, #4]
     d38:	9b07      	ldr	r3, [sp, #28]
     d3a:	4413      	add	r3, r2
     d3c:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d40:	9902      	ldr	r1, [sp, #8]
     d42:	9805      	ldr	r0, [sp, #20]
     d44:	f000 fc7c 	bl	1640 <memcpy>
    NumBytesWritten += NumBytesToWrite;
     d48:	9a08      	ldr	r2, [sp, #32]
     d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d4c:	4413      	add	r3, r2
     d4e:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     d50:	9a02      	ldr	r2, [sp, #8]
     d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d54:	4413      	add	r3, r2
     d56:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     d58:	9a01      	ldr	r2, [sp, #4]
     d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d5c:	1ad3      	subs	r3, r2, r3
     d5e:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     d60:	9a07      	ldr	r2, [sp, #28]
     d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d64:	4413      	add	r3, r2
     d66:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     d68:	9b03      	ldr	r3, [sp, #12]
     d6a:	689b      	ldr	r3, [r3, #8]
     d6c:	9a07      	ldr	r2, [sp, #28]
     d6e:	429a      	cmp	r2, r3
     d70:	d101      	bne.n	d76 <_WriteBlocking+0x9e>
      WrOff = 0u;
     d72:	2300      	movs	r3, #0
     d74:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d76:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     d7a:	9b03      	ldr	r3, [sp, #12]
     d7c:	9a07      	ldr	r2, [sp, #28]
     d7e:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     d80:	9b01      	ldr	r3, [sp, #4]
     d82:	2b00      	cmp	r3, #0
     d84:	d1b2      	bne.n	cec <_WriteBlocking+0x14>
  return NumBytesWritten;
     d86:	9b08      	ldr	r3, [sp, #32]
}
     d88:	4618      	mov	r0, r3
     d8a:	b00b      	add	sp, #44	; 0x2c
     d8c:	f85d fb04 	ldr.w	pc, [sp], #4

00000d90 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     d90:	b500      	push	{lr}
     d92:	b089      	sub	sp, #36	; 0x24
     d94:	9003      	str	r0, [sp, #12]
     d96:	9102      	str	r1, [sp, #8]
     d98:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     d9a:	9b03      	ldr	r3, [sp, #12]
     d9c:	68db      	ldr	r3, [r3, #12]
     d9e:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     da0:	9b03      	ldr	r3, [sp, #12]
     da2:	689a      	ldr	r2, [r3, #8]
     da4:	9b07      	ldr	r3, [sp, #28]
     da6:	1ad3      	subs	r3, r2, r3
     da8:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     daa:	9a06      	ldr	r2, [sp, #24]
     dac:	9b01      	ldr	r3, [sp, #4]
     dae:	429a      	cmp	r2, r3
     db0:	d911      	bls.n	dd6 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     db2:	9b03      	ldr	r3, [sp, #12]
     db4:	685a      	ldr	r2, [r3, #4]
     db6:	9b07      	ldr	r3, [sp, #28]
     db8:	4413      	add	r3, r2
     dba:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     dbc:	9a01      	ldr	r2, [sp, #4]
     dbe:	9902      	ldr	r1, [sp, #8]
     dc0:	9804      	ldr	r0, [sp, #16]
     dc2:	f000 fc3d 	bl	1640 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     dc6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     dca:	9a07      	ldr	r2, [sp, #28]
     dcc:	9b01      	ldr	r3, [sp, #4]
     dce:	441a      	add	r2, r3
     dd0:	9b03      	ldr	r3, [sp, #12]
     dd2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     dd4:	e01f      	b.n	e16 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     dd6:	9b06      	ldr	r3, [sp, #24]
     dd8:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     dda:	9b03      	ldr	r3, [sp, #12]
     ddc:	685a      	ldr	r2, [r3, #4]
     dde:	9b07      	ldr	r3, [sp, #28]
     de0:	4413      	add	r3, r2
     de2:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     de4:	9a05      	ldr	r2, [sp, #20]
     de6:	9902      	ldr	r1, [sp, #8]
     de8:	9804      	ldr	r0, [sp, #16]
     dea:	f000 fc29 	bl	1640 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     dee:	9a01      	ldr	r2, [sp, #4]
     df0:	9b06      	ldr	r3, [sp, #24]
     df2:	1ad3      	subs	r3, r2, r3
     df4:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     df6:	9b03      	ldr	r3, [sp, #12]
     df8:	685b      	ldr	r3, [r3, #4]
     dfa:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     dfc:	9a02      	ldr	r2, [sp, #8]
     dfe:	9b06      	ldr	r3, [sp, #24]
     e00:	4413      	add	r3, r2
     e02:	9a05      	ldr	r2, [sp, #20]
     e04:	4619      	mov	r1, r3
     e06:	9804      	ldr	r0, [sp, #16]
     e08:	f000 fc1a 	bl	1640 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     e0c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     e10:	9b03      	ldr	r3, [sp, #12]
     e12:	9a05      	ldr	r2, [sp, #20]
     e14:	60da      	str	r2, [r3, #12]
}
     e16:	bf00      	nop
     e18:	b009      	add	sp, #36	; 0x24
     e1a:	f85d fb04 	ldr.w	pc, [sp], #4

00000e1e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     e1e:	b086      	sub	sp, #24
     e20:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     e22:	9b01      	ldr	r3, [sp, #4]
     e24:	691b      	ldr	r3, [r3, #16]
     e26:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     e28:	9b01      	ldr	r3, [sp, #4]
     e2a:	68db      	ldr	r3, [r3, #12]
     e2c:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     e2e:	9a04      	ldr	r2, [sp, #16]
     e30:	9b03      	ldr	r3, [sp, #12]
     e32:	429a      	cmp	r2, r3
     e34:	d808      	bhi.n	e48 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     e36:	9b01      	ldr	r3, [sp, #4]
     e38:	689a      	ldr	r2, [r3, #8]
     e3a:	9b03      	ldr	r3, [sp, #12]
     e3c:	1ad2      	subs	r2, r2, r3
     e3e:	9b04      	ldr	r3, [sp, #16]
     e40:	4413      	add	r3, r2
     e42:	3b01      	subs	r3, #1
     e44:	9305      	str	r3, [sp, #20]
     e46:	e004      	b.n	e52 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     e48:	9a04      	ldr	r2, [sp, #16]
     e4a:	9b03      	ldr	r3, [sp, #12]
     e4c:	1ad3      	subs	r3, r2, r3
     e4e:	3b01      	subs	r3, #1
     e50:	9305      	str	r3, [sp, #20]
  }
  return r;
     e52:	9b05      	ldr	r3, [sp, #20]
}
     e54:	4618      	mov	r0, r3
     e56:	b006      	add	sp, #24
     e58:	4770      	bx	lr
	...

00000e5c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     e5c:	b500      	push	{lr}
     e5e:	b089      	sub	sp, #36	; 0x24
     e60:	9003      	str	r0, [sp, #12]
     e62:	9102      	str	r1, [sp, #8]
     e64:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     e66:	9b02      	ldr	r3, [sp, #8]
     e68:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     e6a:	9b03      	ldr	r3, [sp, #12]
     e6c:	1c5a      	adds	r2, r3, #1
     e6e:	4613      	mov	r3, r2
     e70:	005b      	lsls	r3, r3, #1
     e72:	4413      	add	r3, r2
     e74:	00db      	lsls	r3, r3, #3
     e76:	4a20      	ldr	r2, [pc, #128]	; (ef8 <SEGGER_RTT_WriteNoLock+0x9c>)
     e78:	4413      	add	r3, r2
     e7a:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     e7c:	9b05      	ldr	r3, [sp, #20]
     e7e:	695b      	ldr	r3, [r3, #20]
     e80:	2b02      	cmp	r3, #2
     e82:	d029      	beq.n	ed8 <SEGGER_RTT_WriteNoLock+0x7c>
     e84:	2b02      	cmp	r3, #2
     e86:	d82e      	bhi.n	ee6 <SEGGER_RTT_WriteNoLock+0x8a>
     e88:	2b00      	cmp	r3, #0
     e8a:	d002      	beq.n	e92 <SEGGER_RTT_WriteNoLock+0x36>
     e8c:	2b01      	cmp	r3, #1
     e8e:	d013      	beq.n	eb8 <SEGGER_RTT_WriteNoLock+0x5c>
     e90:	e029      	b.n	ee6 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     e92:	9805      	ldr	r0, [sp, #20]
     e94:	f7ff ffc3 	bl	e1e <_GetAvailWriteSpace>
     e98:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     e9a:	9a04      	ldr	r2, [sp, #16]
     e9c:	9b01      	ldr	r3, [sp, #4]
     e9e:	429a      	cmp	r2, r3
     ea0:	d202      	bcs.n	ea8 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     ea2:	2300      	movs	r3, #0
     ea4:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     ea6:	e021      	b.n	eec <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     ea8:	9b01      	ldr	r3, [sp, #4]
     eaa:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     eac:	9a01      	ldr	r2, [sp, #4]
     eae:	9906      	ldr	r1, [sp, #24]
     eb0:	9805      	ldr	r0, [sp, #20]
     eb2:	f7ff ff6d 	bl	d90 <_WriteNoCheck>
    break;
     eb6:	e019      	b.n	eec <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     eb8:	9805      	ldr	r0, [sp, #20]
     eba:	f7ff ffb0 	bl	e1e <_GetAvailWriteSpace>
     ebe:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     ec0:	9a01      	ldr	r2, [sp, #4]
     ec2:	9b04      	ldr	r3, [sp, #16]
     ec4:	4293      	cmp	r3, r2
     ec6:	bf28      	it	cs
     ec8:	4613      	movcs	r3, r2
     eca:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     ecc:	9a07      	ldr	r2, [sp, #28]
     ece:	9906      	ldr	r1, [sp, #24]
     ed0:	9805      	ldr	r0, [sp, #20]
     ed2:	f7ff ff5d 	bl	d90 <_WriteNoCheck>
    break;
     ed6:	e009      	b.n	eec <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     ed8:	9a01      	ldr	r2, [sp, #4]
     eda:	9906      	ldr	r1, [sp, #24]
     edc:	9805      	ldr	r0, [sp, #20]
     ede:	f7ff fefb 	bl	cd8 <_WriteBlocking>
     ee2:	9007      	str	r0, [sp, #28]
    break;
     ee4:	e002      	b.n	eec <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     ee6:	2300      	movs	r3, #0
     ee8:	9307      	str	r3, [sp, #28]
    break;
     eea:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     eec:	9b07      	ldr	r3, [sp, #28]
}
     eee:	4618      	mov	r0, r3
     ef0:	b009      	add	sp, #36	; 0x24
     ef2:	f85d fb04 	ldr.w	pc, [sp], #4
     ef6:	bf00      	nop
     ef8:	1fff8f20 	.word	0x1fff8f20

00000efc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     efc:	b500      	push	{lr}
     efe:	b089      	sub	sp, #36	; 0x24
     f00:	9003      	str	r0, [sp, #12]
     f02:	9102      	str	r1, [sp, #8]
     f04:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     f06:	4b0f      	ldr	r3, [pc, #60]	; (f44 <SEGGER_RTT_Write+0x48>)
     f08:	9307      	str	r3, [sp, #28]
     f0a:	9b07      	ldr	r3, [sp, #28]
     f0c:	781b      	ldrb	r3, [r3, #0]
     f0e:	b2db      	uxtb	r3, r3
     f10:	2b53      	cmp	r3, #83	; 0x53
     f12:	d001      	beq.n	f18 <SEGGER_RTT_Write+0x1c>
     f14:	f7ff fe86 	bl	c24 <_DoInit>
  SEGGER_RTT_LOCK();
     f18:	f3ef 8311 	mrs	r3, BASEPRI
     f1c:	f04f 0120 	mov.w	r1, #32
     f20:	f381 8811 	msr	BASEPRI, r1
     f24:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     f26:	9a01      	ldr	r2, [sp, #4]
     f28:	9902      	ldr	r1, [sp, #8]
     f2a:	9803      	ldr	r0, [sp, #12]
     f2c:	f7ff ff96 	bl	e5c <SEGGER_RTT_WriteNoLock>
     f30:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     f32:	9b06      	ldr	r3, [sp, #24]
     f34:	f383 8811 	msr	BASEPRI, r3
  return Status;
     f38:	9b05      	ldr	r3, [sp, #20]
}
     f3a:	4618      	mov	r0, r3
     f3c:	b009      	add	sp, #36	; 0x24
     f3e:	f85d fb04 	ldr.w	pc, [sp], #4
     f42:	bf00      	nop
     f44:	1fff8f20 	.word	0x1fff8f20

00000f48 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
     f48:	b508      	push	{r3, lr}
  _DoInit();
     f4a:	f7ff fe6b 	bl	c24 <_DoInit>
}
     f4e:	bf00      	nop
     f50:	bd08      	pop	{r3, pc}

00000f52 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     f52:	b500      	push	{lr}
     f54:	b085      	sub	sp, #20
     f56:	9001      	str	r0, [sp, #4]
     f58:	460b      	mov	r3, r1
     f5a:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
     f5e:	9b01      	ldr	r3, [sp, #4]
     f60:	689b      	ldr	r3, [r3, #8]
     f62:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
     f64:	9b03      	ldr	r3, [sp, #12]
     f66:	1c5a      	adds	r2, r3, #1
     f68:	9b01      	ldr	r3, [sp, #4]
     f6a:	685b      	ldr	r3, [r3, #4]
     f6c:	429a      	cmp	r2, r3
     f6e:	d80f      	bhi.n	f90 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
     f70:	9b01      	ldr	r3, [sp, #4]
     f72:	681a      	ldr	r2, [r3, #0]
     f74:	9b03      	ldr	r3, [sp, #12]
     f76:	4413      	add	r3, r2
     f78:	f89d 2003 	ldrb.w	r2, [sp, #3]
     f7c:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
     f7e:	9b03      	ldr	r3, [sp, #12]
     f80:	1c5a      	adds	r2, r3, #1
     f82:	9b01      	ldr	r3, [sp, #4]
     f84:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
     f86:	9b01      	ldr	r3, [sp, #4]
     f88:	68db      	ldr	r3, [r3, #12]
     f8a:	1c5a      	adds	r2, r3, #1
     f8c:	9b01      	ldr	r3, [sp, #4]
     f8e:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
     f90:	9b01      	ldr	r3, [sp, #4]
     f92:	689a      	ldr	r2, [r3, #8]
     f94:	9b01      	ldr	r3, [sp, #4]
     f96:	685b      	ldr	r3, [r3, #4]
     f98:	429a      	cmp	r2, r3
     f9a:	d115      	bne.n	fc8 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
     f9c:	9b01      	ldr	r3, [sp, #4]
     f9e:	6918      	ldr	r0, [r3, #16]
     fa0:	9b01      	ldr	r3, [sp, #4]
     fa2:	6819      	ldr	r1, [r3, #0]
     fa4:	9b01      	ldr	r3, [sp, #4]
     fa6:	689b      	ldr	r3, [r3, #8]
     fa8:	461a      	mov	r2, r3
     faa:	f7ff ffa7 	bl	efc <SEGGER_RTT_Write>
     fae:	4602      	mov	r2, r0
     fb0:	9b01      	ldr	r3, [sp, #4]
     fb2:	689b      	ldr	r3, [r3, #8]
     fb4:	429a      	cmp	r2, r3
     fb6:	d004      	beq.n	fc2 <_StoreChar+0x70>
      p->ReturnValue = -1;
     fb8:	9b01      	ldr	r3, [sp, #4]
     fba:	f04f 32ff 	mov.w	r2, #4294967295
     fbe:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
     fc0:	e002      	b.n	fc8 <_StoreChar+0x76>
      p->Cnt = 0u;
     fc2:	9b01      	ldr	r3, [sp, #4]
     fc4:	2200      	movs	r2, #0
     fc6:	609a      	str	r2, [r3, #8]
}
     fc8:	bf00      	nop
     fca:	b005      	add	sp, #20
     fcc:	f85d fb04 	ldr.w	pc, [sp], #4

00000fd0 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
     fd0:	b500      	push	{lr}
     fd2:	b08b      	sub	sp, #44	; 0x2c
     fd4:	9003      	str	r0, [sp, #12]
     fd6:	9102      	str	r1, [sp, #8]
     fd8:	9201      	str	r2, [sp, #4]
     fda:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
     fdc:	9b02      	ldr	r3, [sp, #8]
     fde:	9308      	str	r3, [sp, #32]
  Digit = 1u;
     fe0:	2301      	movs	r3, #1
     fe2:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
     fe4:	2301      	movs	r3, #1
     fe6:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     fe8:	e007      	b.n	ffa <_PrintUnsigned+0x2a>
    Number = (Number / Base);
     fea:	9a08      	ldr	r2, [sp, #32]
     fec:	9b01      	ldr	r3, [sp, #4]
     fee:	fbb2 f3f3 	udiv	r3, r2, r3
     ff2:	9308      	str	r3, [sp, #32]
    Width++;
     ff4:	9b07      	ldr	r3, [sp, #28]
     ff6:	3301      	adds	r3, #1
     ff8:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     ffa:	9a08      	ldr	r2, [sp, #32]
     ffc:	9b01      	ldr	r3, [sp, #4]
     ffe:	429a      	cmp	r2, r3
    1000:	d2f3      	bcs.n	fea <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    1002:	9a00      	ldr	r2, [sp, #0]
    1004:	9b07      	ldr	r3, [sp, #28]
    1006:	429a      	cmp	r2, r3
    1008:	d901      	bls.n	100e <_PrintUnsigned+0x3e>
    Width = NumDigits;
    100a:	9b00      	ldr	r3, [sp, #0]
    100c:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    100e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1010:	f003 0301 	and.w	r3, r3, #1
    1014:	2b00      	cmp	r3, #0
    1016:	d128      	bne.n	106a <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    101a:	2b00      	cmp	r3, #0
    101c:	d025      	beq.n	106a <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    101e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1020:	f003 0302 	and.w	r3, r3, #2
    1024:	2b00      	cmp	r3, #0
    1026:	d006      	beq.n	1036 <_PrintUnsigned+0x66>
    1028:	9b00      	ldr	r3, [sp, #0]
    102a:	2b00      	cmp	r3, #0
    102c:	d103      	bne.n	1036 <_PrintUnsigned+0x66>
        c = '0';
    102e:	2330      	movs	r3, #48	; 0x30
    1030:	f88d 301b 	strb.w	r3, [sp, #27]
    1034:	e002      	b.n	103c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1036:	2320      	movs	r3, #32
    1038:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    103c:	e00c      	b.n	1058 <_PrintUnsigned+0x88>
        FieldWidth--;
    103e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1040:	3b01      	subs	r3, #1
    1042:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1044:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1048:	4619      	mov	r1, r3
    104a:	9803      	ldr	r0, [sp, #12]
    104c:	f7ff ff81 	bl	f52 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1050:	9b03      	ldr	r3, [sp, #12]
    1052:	68db      	ldr	r3, [r3, #12]
    1054:	2b00      	cmp	r3, #0
    1056:	db07      	blt.n	1068 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    105a:	2b00      	cmp	r3, #0
    105c:	d005      	beq.n	106a <_PrintUnsigned+0x9a>
    105e:	9a07      	ldr	r2, [sp, #28]
    1060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1062:	429a      	cmp	r2, r3
    1064:	d3eb      	bcc.n	103e <_PrintUnsigned+0x6e>
    1066:	e000      	b.n	106a <_PrintUnsigned+0x9a>
          break;
    1068:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    106a:	9b03      	ldr	r3, [sp, #12]
    106c:	68db      	ldr	r3, [r3, #12]
    106e:	2b00      	cmp	r3, #0
    1070:	db55      	blt.n	111e <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1072:	9b00      	ldr	r3, [sp, #0]
    1074:	2b01      	cmp	r3, #1
    1076:	d903      	bls.n	1080 <_PrintUnsigned+0xb0>
        NumDigits--;
    1078:	9b00      	ldr	r3, [sp, #0]
    107a:	3b01      	subs	r3, #1
    107c:	9300      	str	r3, [sp, #0]
    107e:	e009      	b.n	1094 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1080:	9a02      	ldr	r2, [sp, #8]
    1082:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1084:	fbb2 f3f3 	udiv	r3, r2, r3
    1088:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    108a:	9a05      	ldr	r2, [sp, #20]
    108c:	9b01      	ldr	r3, [sp, #4]
    108e:	429a      	cmp	r2, r3
    1090:	d200      	bcs.n	1094 <_PrintUnsigned+0xc4>
          break;
    1092:	e005      	b.n	10a0 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1094:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1096:	9a01      	ldr	r2, [sp, #4]
    1098:	fb02 f303 	mul.w	r3, r2, r3
    109c:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    109e:	e7e8      	b.n	1072 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    10a0:	9a02      	ldr	r2, [sp, #8]
    10a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10a4:	fbb2 f3f3 	udiv	r3, r2, r3
    10a8:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    10aa:	9b05      	ldr	r3, [sp, #20]
    10ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10ae:	fb02 f303 	mul.w	r3, r2, r3
    10b2:	9a02      	ldr	r2, [sp, #8]
    10b4:	1ad3      	subs	r3, r2, r3
    10b6:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    10b8:	4a1b      	ldr	r2, [pc, #108]	; (1128 <_PrintUnsigned+0x158>)
    10ba:	9b05      	ldr	r3, [sp, #20]
    10bc:	4413      	add	r3, r2
    10be:	781b      	ldrb	r3, [r3, #0]
    10c0:	4619      	mov	r1, r3
    10c2:	9803      	ldr	r0, [sp, #12]
    10c4:	f7ff ff45 	bl	f52 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    10c8:	9b03      	ldr	r3, [sp, #12]
    10ca:	68db      	ldr	r3, [r3, #12]
    10cc:	2b00      	cmp	r3, #0
    10ce:	db08      	blt.n	10e2 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    10d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10d2:	9b01      	ldr	r3, [sp, #4]
    10d4:	fbb2 f3f3 	udiv	r3, r2, r3
    10d8:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    10da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10dc:	2b00      	cmp	r3, #0
    10de:	d1df      	bne.n	10a0 <_PrintUnsigned+0xd0>
    10e0:	e000      	b.n	10e4 <_PrintUnsigned+0x114>
        break;
    10e2:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    10e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    10e6:	f003 0301 	and.w	r3, r3, #1
    10ea:	2b00      	cmp	r3, #0
    10ec:	d017      	beq.n	111e <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    10ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10f0:	2b00      	cmp	r3, #0
    10f2:	d014      	beq.n	111e <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    10f4:	e00a      	b.n	110c <_PrintUnsigned+0x13c>
          FieldWidth--;
    10f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10f8:	3b01      	subs	r3, #1
    10fa:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    10fc:	2120      	movs	r1, #32
    10fe:	9803      	ldr	r0, [sp, #12]
    1100:	f7ff ff27 	bl	f52 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1104:	9b03      	ldr	r3, [sp, #12]
    1106:	68db      	ldr	r3, [r3, #12]
    1108:	2b00      	cmp	r3, #0
    110a:	db07      	blt.n	111c <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    110c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    110e:	2b00      	cmp	r3, #0
    1110:	d005      	beq.n	111e <_PrintUnsigned+0x14e>
    1112:	9a07      	ldr	r2, [sp, #28]
    1114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1116:	429a      	cmp	r2, r3
    1118:	d3ed      	bcc.n	10f6 <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    111a:	e000      	b.n	111e <_PrintUnsigned+0x14e>
            break;
    111c:	bf00      	nop
}
    111e:	bf00      	nop
    1120:	b00b      	add	sp, #44	; 0x2c
    1122:	f85d fb04 	ldr.w	pc, [sp], #4
    1126:	bf00      	nop
    1128:	0000b55c 	.word	0x0000b55c

0000112c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    112c:	b500      	push	{lr}
    112e:	b089      	sub	sp, #36	; 0x24
    1130:	9005      	str	r0, [sp, #20]
    1132:	9104      	str	r1, [sp, #16]
    1134:	9203      	str	r2, [sp, #12]
    1136:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1138:	9b04      	ldr	r3, [sp, #16]
    113a:	2b00      	cmp	r3, #0
    113c:	bfb8      	it	lt
    113e:	425b      	neglt	r3, r3
    1140:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1142:	2301      	movs	r3, #1
    1144:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1146:	e007      	b.n	1158 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1148:	9b03      	ldr	r3, [sp, #12]
    114a:	9a06      	ldr	r2, [sp, #24]
    114c:	fb92 f3f3 	sdiv	r3, r2, r3
    1150:	9306      	str	r3, [sp, #24]
    Width++;
    1152:	9b07      	ldr	r3, [sp, #28]
    1154:	3301      	adds	r3, #1
    1156:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1158:	9b03      	ldr	r3, [sp, #12]
    115a:	9a06      	ldr	r2, [sp, #24]
    115c:	429a      	cmp	r2, r3
    115e:	daf3      	bge.n	1148 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1160:	9a02      	ldr	r2, [sp, #8]
    1162:	9b07      	ldr	r3, [sp, #28]
    1164:	429a      	cmp	r2, r3
    1166:	d901      	bls.n	116c <_PrintInt+0x40>
    Width = NumDigits;
    1168:	9b02      	ldr	r3, [sp, #8]
    116a:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    116c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    116e:	2b00      	cmp	r3, #0
    1170:	d00a      	beq.n	1188 <_PrintInt+0x5c>
    1172:	9b04      	ldr	r3, [sp, #16]
    1174:	2b00      	cmp	r3, #0
    1176:	db04      	blt.n	1182 <_PrintInt+0x56>
    1178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    117a:	f003 0304 	and.w	r3, r3, #4
    117e:	2b00      	cmp	r3, #0
    1180:	d002      	beq.n	1188 <_PrintInt+0x5c>
    FieldWidth--;
    1182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1184:	3b01      	subs	r3, #1
    1186:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    118a:	f003 0302 	and.w	r3, r3, #2
    118e:	2b00      	cmp	r3, #0
    1190:	d002      	beq.n	1198 <_PrintInt+0x6c>
    1192:	9b02      	ldr	r3, [sp, #8]
    1194:	2b00      	cmp	r3, #0
    1196:	d01c      	beq.n	11d2 <_PrintInt+0xa6>
    1198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    119a:	f003 0301 	and.w	r3, r3, #1
    119e:	2b00      	cmp	r3, #0
    11a0:	d117      	bne.n	11d2 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    11a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11a4:	2b00      	cmp	r3, #0
    11a6:	d014      	beq.n	11d2 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11a8:	e00a      	b.n	11c0 <_PrintInt+0x94>
        FieldWidth--;
    11aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11ac:	3b01      	subs	r3, #1
    11ae:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    11b0:	2120      	movs	r1, #32
    11b2:	9805      	ldr	r0, [sp, #20]
    11b4:	f7ff fecd 	bl	f52 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    11b8:	9b05      	ldr	r3, [sp, #20]
    11ba:	68db      	ldr	r3, [r3, #12]
    11bc:	2b00      	cmp	r3, #0
    11be:	db07      	blt.n	11d0 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11c2:	2b00      	cmp	r3, #0
    11c4:	d005      	beq.n	11d2 <_PrintInt+0xa6>
    11c6:	9a07      	ldr	r2, [sp, #28]
    11c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11ca:	429a      	cmp	r2, r3
    11cc:	d3ed      	bcc.n	11aa <_PrintInt+0x7e>
    11ce:	e000      	b.n	11d2 <_PrintInt+0xa6>
          break;
    11d0:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    11d2:	9b05      	ldr	r3, [sp, #20]
    11d4:	68db      	ldr	r3, [r3, #12]
    11d6:	2b00      	cmp	r3, #0
    11d8:	db4a      	blt.n	1270 <_PrintInt+0x144>
    if (v < 0) {
    11da:	9b04      	ldr	r3, [sp, #16]
    11dc:	2b00      	cmp	r3, #0
    11de:	da07      	bge.n	11f0 <_PrintInt+0xc4>
      v = -v;
    11e0:	9b04      	ldr	r3, [sp, #16]
    11e2:	425b      	negs	r3, r3
    11e4:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    11e6:	212d      	movs	r1, #45	; 0x2d
    11e8:	9805      	ldr	r0, [sp, #20]
    11ea:	f7ff feb2 	bl	f52 <_StoreChar>
    11ee:	e008      	b.n	1202 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    11f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11f2:	f003 0304 	and.w	r3, r3, #4
    11f6:	2b00      	cmp	r3, #0
    11f8:	d003      	beq.n	1202 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    11fa:	212b      	movs	r1, #43	; 0x2b
    11fc:	9805      	ldr	r0, [sp, #20]
    11fe:	f7ff fea8 	bl	f52 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1202:	9b05      	ldr	r3, [sp, #20]
    1204:	68db      	ldr	r3, [r3, #12]
    1206:	2b00      	cmp	r3, #0
    1208:	db32      	blt.n	1270 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    120a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    120c:	f003 0302 	and.w	r3, r3, #2
    1210:	2b00      	cmp	r3, #0
    1212:	d01f      	beq.n	1254 <_PrintInt+0x128>
    1214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1216:	f003 0301 	and.w	r3, r3, #1
    121a:	2b00      	cmp	r3, #0
    121c:	d11a      	bne.n	1254 <_PrintInt+0x128>
    121e:	9b02      	ldr	r3, [sp, #8]
    1220:	2b00      	cmp	r3, #0
    1222:	d117      	bne.n	1254 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1226:	2b00      	cmp	r3, #0
    1228:	d014      	beq.n	1254 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    122a:	e00a      	b.n	1242 <_PrintInt+0x116>
            FieldWidth--;
    122c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    122e:	3b01      	subs	r3, #1
    1230:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1232:	2130      	movs	r1, #48	; 0x30
    1234:	9805      	ldr	r0, [sp, #20]
    1236:	f7ff fe8c 	bl	f52 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    123a:	9b05      	ldr	r3, [sp, #20]
    123c:	68db      	ldr	r3, [r3, #12]
    123e:	2b00      	cmp	r3, #0
    1240:	db07      	blt.n	1252 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1244:	2b00      	cmp	r3, #0
    1246:	d005      	beq.n	1254 <_PrintInt+0x128>
    1248:	9a07      	ldr	r2, [sp, #28]
    124a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    124c:	429a      	cmp	r2, r3
    124e:	d3ed      	bcc.n	122c <_PrintInt+0x100>
    1250:	e000      	b.n	1254 <_PrintInt+0x128>
              break;
    1252:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1254:	9b05      	ldr	r3, [sp, #20]
    1256:	68db      	ldr	r3, [r3, #12]
    1258:	2b00      	cmp	r3, #0
    125a:	db09      	blt.n	1270 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    125c:	9904      	ldr	r1, [sp, #16]
    125e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1260:	9301      	str	r3, [sp, #4]
    1262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1264:	9300      	str	r3, [sp, #0]
    1266:	9b02      	ldr	r3, [sp, #8]
    1268:	9a03      	ldr	r2, [sp, #12]
    126a:	9805      	ldr	r0, [sp, #20]
    126c:	f7ff feb0 	bl	fd0 <_PrintUnsigned>
      }
    }
  }
}
    1270:	bf00      	nop
    1272:	b009      	add	sp, #36	; 0x24
    1274:	f85d fb04 	ldr.w	pc, [sp], #4

00001278 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1278:	b500      	push	{lr}
    127a:	b0a3      	sub	sp, #140	; 0x8c
    127c:	9005      	str	r0, [sp, #20]
    127e:	9104      	str	r1, [sp, #16]
    1280:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    1282:	ab06      	add	r3, sp, #24
    1284:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    1286:	2340      	movs	r3, #64	; 0x40
    1288:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    128a:	2300      	movs	r3, #0
    128c:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    128e:	9b05      	ldr	r3, [sp, #20]
    1290:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    1292:	2300      	movs	r3, #0
    1294:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    1296:	9b04      	ldr	r3, [sp, #16]
    1298:	781b      	ldrb	r3, [r3, #0]
    129a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    129e:	9b04      	ldr	r3, [sp, #16]
    12a0:	3301      	adds	r3, #1
    12a2:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    12a4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12a8:	2b00      	cmp	r3, #0
    12aa:	f000 819c 	beq.w	15e6 <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    12ae:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12b2:	2b25      	cmp	r3, #37	; 0x25
    12b4:	f040 818b 	bne.w	15ce <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    12b8:	2300      	movs	r3, #0
    12ba:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    12bc:	2301      	movs	r3, #1
    12be:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    12c0:	9b04      	ldr	r3, [sp, #16]
    12c2:	781b      	ldrb	r3, [r3, #0]
    12c4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    12c8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12cc:	3b23      	subs	r3, #35	; 0x23
    12ce:	2b0d      	cmp	r3, #13
    12d0:	d83e      	bhi.n	1350 <SEGGER_RTT_vprintf+0xd8>
    12d2:	a201      	add	r2, pc, #4	; (adr r2, 12d8 <SEGGER_RTT_vprintf+0x60>)
    12d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    12d8:	00001341 	.word	0x00001341
    12dc:	00001351 	.word	0x00001351
    12e0:	00001351 	.word	0x00001351
    12e4:	00001351 	.word	0x00001351
    12e8:	00001351 	.word	0x00001351
    12ec:	00001351 	.word	0x00001351
    12f0:	00001351 	.word	0x00001351
    12f4:	00001351 	.word	0x00001351
    12f8:	00001331 	.word	0x00001331
    12fc:	00001351 	.word	0x00001351
    1300:	00001311 	.word	0x00001311
    1304:	00001351 	.word	0x00001351
    1308:	00001351 	.word	0x00001351
    130c:	00001321 	.word	0x00001321
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1310:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1312:	f043 0301 	orr.w	r3, r3, #1
    1316:	931e      	str	r3, [sp, #120]	; 0x78
    1318:	9b04      	ldr	r3, [sp, #16]
    131a:	3301      	adds	r3, #1
    131c:	9304      	str	r3, [sp, #16]
    131e:	e01a      	b.n	1356 <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1320:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1322:	f043 0302 	orr.w	r3, r3, #2
    1326:	931e      	str	r3, [sp, #120]	; 0x78
    1328:	9b04      	ldr	r3, [sp, #16]
    132a:	3301      	adds	r3, #1
    132c:	9304      	str	r3, [sp, #16]
    132e:	e012      	b.n	1356 <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1330:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1332:	f043 0304 	orr.w	r3, r3, #4
    1336:	931e      	str	r3, [sp, #120]	; 0x78
    1338:	9b04      	ldr	r3, [sp, #16]
    133a:	3301      	adds	r3, #1
    133c:	9304      	str	r3, [sp, #16]
    133e:	e00a      	b.n	1356 <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1340:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1342:	f043 0308 	orr.w	r3, r3, #8
    1346:	931e      	str	r3, [sp, #120]	; 0x78
    1348:	9b04      	ldr	r3, [sp, #16]
    134a:	3301      	adds	r3, #1
    134c:	9304      	str	r3, [sp, #16]
    134e:	e002      	b.n	1356 <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1350:	2300      	movs	r3, #0
    1352:	9320      	str	r3, [sp, #128]	; 0x80
    1354:	bf00      	nop
        }
      } while (v);
    1356:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1358:	2b00      	cmp	r3, #0
    135a:	d1b1      	bne.n	12c0 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    135c:	2300      	movs	r3, #0
    135e:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1360:	9b04      	ldr	r3, [sp, #16]
    1362:	781b      	ldrb	r3, [r3, #0]
    1364:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1368:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    136c:	2b2f      	cmp	r3, #47	; 0x2f
    136e:	d912      	bls.n	1396 <SEGGER_RTT_vprintf+0x11e>
    1370:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1374:	2b39      	cmp	r3, #57	; 0x39
    1376:	d80e      	bhi.n	1396 <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1378:	9b04      	ldr	r3, [sp, #16]
    137a:	3301      	adds	r3, #1
    137c:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    137e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1380:	4613      	mov	r3, r2
    1382:	009b      	lsls	r3, r3, #2
    1384:	4413      	add	r3, r2
    1386:	005b      	lsls	r3, r3, #1
    1388:	461a      	mov	r2, r3
    138a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    138e:	4413      	add	r3, r2
    1390:	3b30      	subs	r3, #48	; 0x30
    1392:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    1394:	e7e4      	b.n	1360 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    1396:	2300      	movs	r3, #0
    1398:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    139a:	9b04      	ldr	r3, [sp, #16]
    139c:	781b      	ldrb	r3, [r3, #0]
    139e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    13a2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13a6:	2b2e      	cmp	r3, #46	; 0x2e
    13a8:	d11d      	bne.n	13e6 <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    13aa:	9b04      	ldr	r3, [sp, #16]
    13ac:	3301      	adds	r3, #1
    13ae:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    13b0:	9b04      	ldr	r3, [sp, #16]
    13b2:	781b      	ldrb	r3, [r3, #0]
    13b4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    13b8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13bc:	2b2f      	cmp	r3, #47	; 0x2f
    13be:	d912      	bls.n	13e6 <SEGGER_RTT_vprintf+0x16e>
    13c0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13c4:	2b39      	cmp	r3, #57	; 0x39
    13c6:	d80e      	bhi.n	13e6 <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    13c8:	9b04      	ldr	r3, [sp, #16]
    13ca:	3301      	adds	r3, #1
    13cc:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    13ce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    13d0:	4613      	mov	r3, r2
    13d2:	009b      	lsls	r3, r3, #2
    13d4:	4413      	add	r3, r2
    13d6:	005b      	lsls	r3, r3, #1
    13d8:	461a      	mov	r2, r3
    13da:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13de:	4413      	add	r3, r2
    13e0:	3b30      	subs	r3, #48	; 0x30
    13e2:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    13e4:	e7e4      	b.n	13b0 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    13e6:	9b04      	ldr	r3, [sp, #16]
    13e8:	781b      	ldrb	r3, [r3, #0]
    13ea:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    13ee:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13f2:	2b6c      	cmp	r3, #108	; 0x6c
    13f4:	d003      	beq.n	13fe <SEGGER_RTT_vprintf+0x186>
    13f6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13fa:	2b68      	cmp	r3, #104	; 0x68
    13fc:	d107      	bne.n	140e <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    13fe:	9b04      	ldr	r3, [sp, #16]
    1400:	3301      	adds	r3, #1
    1402:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1404:	9b04      	ldr	r3, [sp, #16]
    1406:	781b      	ldrb	r3, [r3, #0]
    1408:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    140c:	e7ef      	b.n	13ee <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    140e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1412:	2b25      	cmp	r3, #37	; 0x25
    1414:	f000 80d0 	beq.w	15b8 <SEGGER_RTT_vprintf+0x340>
    1418:	2b25      	cmp	r3, #37	; 0x25
    141a:	f2c0 80d3 	blt.w	15c4 <SEGGER_RTT_vprintf+0x34c>
    141e:	2b78      	cmp	r3, #120	; 0x78
    1420:	f300 80d0 	bgt.w	15c4 <SEGGER_RTT_vprintf+0x34c>
    1424:	2b58      	cmp	r3, #88	; 0x58
    1426:	f2c0 80cd 	blt.w	15c4 <SEGGER_RTT_vprintf+0x34c>
    142a:	3b58      	subs	r3, #88	; 0x58
    142c:	2b20      	cmp	r3, #32
    142e:	f200 80c9 	bhi.w	15c4 <SEGGER_RTT_vprintf+0x34c>
    1432:	a201      	add	r2, pc, #4	; (adr r2, 1438 <SEGGER_RTT_vprintf+0x1c0>)
    1434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1438:	00001529 	.word	0x00001529
    143c:	000015c5 	.word	0x000015c5
    1440:	000015c5 	.word	0x000015c5
    1444:	000015c5 	.word	0x000015c5
    1448:	000015c5 	.word	0x000015c5
    144c:	000015c5 	.word	0x000015c5
    1450:	000015c5 	.word	0x000015c5
    1454:	000015c5 	.word	0x000015c5
    1458:	000015c5 	.word	0x000015c5
    145c:	000015c5 	.word	0x000015c5
    1460:	000015c5 	.word	0x000015c5
    1464:	000014bd 	.word	0x000014bd
    1468:	000014e1 	.word	0x000014e1
    146c:	000015c5 	.word	0x000015c5
    1470:	000015c5 	.word	0x000015c5
    1474:	000015c5 	.word	0x000015c5
    1478:	000015c5 	.word	0x000015c5
    147c:	000015c5 	.word	0x000015c5
    1480:	000015c5 	.word	0x000015c5
    1484:	000015c5 	.word	0x000015c5
    1488:	000015c5 	.word	0x000015c5
    148c:	000015c5 	.word	0x000015c5
    1490:	000015c5 	.word	0x000015c5
    1494:	000015c5 	.word	0x000015c5
    1498:	00001595 	.word	0x00001595
    149c:	000015c5 	.word	0x000015c5
    14a0:	000015c5 	.word	0x000015c5
    14a4:	0000154d 	.word	0x0000154d
    14a8:	000015c5 	.word	0x000015c5
    14ac:	00001505 	.word	0x00001505
    14b0:	000015c5 	.word	0x000015c5
    14b4:	000015c5 	.word	0x000015c5
    14b8:	00001529 	.word	0x00001529
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    14bc:	9b03      	ldr	r3, [sp, #12]
    14be:	681b      	ldr	r3, [r3, #0]
    14c0:	1d19      	adds	r1, r3, #4
    14c2:	9a03      	ldr	r2, [sp, #12]
    14c4:	6011      	str	r1, [r2, #0]
    14c6:	681b      	ldr	r3, [r3, #0]
    14c8:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    14ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
    14cc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    14d0:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    14d4:	ab16      	add	r3, sp, #88	; 0x58
    14d6:	4611      	mov	r1, r2
    14d8:	4618      	mov	r0, r3
    14da:	f7ff fd3a 	bl	f52 <_StoreChar>
        break;
    14de:	e072      	b.n	15c6 <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    14e0:	9b03      	ldr	r3, [sp, #12]
    14e2:	681b      	ldr	r3, [r3, #0]
    14e4:	1d19      	adds	r1, r3, #4
    14e6:	9a03      	ldr	r2, [sp, #12]
    14e8:	6011      	str	r1, [r2, #0]
    14ea:	681b      	ldr	r3, [r3, #0]
    14ec:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    14ee:	a816      	add	r0, sp, #88	; 0x58
    14f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    14f2:	9301      	str	r3, [sp, #4]
    14f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    14f6:	9300      	str	r3, [sp, #0]
    14f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    14fa:	220a      	movs	r2, #10
    14fc:	9920      	ldr	r1, [sp, #128]	; 0x80
    14fe:	f7ff fe15 	bl	112c <_PrintInt>
        break;
    1502:	e060      	b.n	15c6 <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    1504:	9b03      	ldr	r3, [sp, #12]
    1506:	681b      	ldr	r3, [r3, #0]
    1508:	1d19      	adds	r1, r3, #4
    150a:	9a03      	ldr	r2, [sp, #12]
    150c:	6011      	str	r1, [r2, #0]
    150e:	681b      	ldr	r3, [r3, #0]
    1510:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    1512:	9920      	ldr	r1, [sp, #128]	; 0x80
    1514:	a816      	add	r0, sp, #88	; 0x58
    1516:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1518:	9301      	str	r3, [sp, #4]
    151a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    151c:	9300      	str	r3, [sp, #0]
    151e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1520:	220a      	movs	r2, #10
    1522:	f7ff fd55 	bl	fd0 <_PrintUnsigned>
        break;
    1526:	e04e      	b.n	15c6 <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1528:	9b03      	ldr	r3, [sp, #12]
    152a:	681b      	ldr	r3, [r3, #0]
    152c:	1d19      	adds	r1, r3, #4
    152e:	9a03      	ldr	r2, [sp, #12]
    1530:	6011      	str	r1, [r2, #0]
    1532:	681b      	ldr	r3, [r3, #0]
    1534:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    1536:	9920      	ldr	r1, [sp, #128]	; 0x80
    1538:	a816      	add	r0, sp, #88	; 0x58
    153a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    153c:	9301      	str	r3, [sp, #4]
    153e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1540:	9300      	str	r3, [sp, #0]
    1542:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1544:	2210      	movs	r2, #16
    1546:	f7ff fd43 	bl	fd0 <_PrintUnsigned>
        break;
    154a:	e03c      	b.n	15c6 <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    154c:	9b03      	ldr	r3, [sp, #12]
    154e:	681b      	ldr	r3, [r3, #0]
    1550:	1d19      	adds	r1, r3, #4
    1552:	9a03      	ldr	r2, [sp, #12]
    1554:	6011      	str	r1, [r2, #0]
    1556:	681b      	ldr	r3, [r3, #0]
    1558:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    155a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    155c:	2b00      	cmp	r3, #0
    155e:	d101      	bne.n	1564 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    1560:	4b2c      	ldr	r3, [pc, #176]	; (1614 <SEGGER_RTT_vprintf+0x39c>)
    1562:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    1564:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1566:	781b      	ldrb	r3, [r3, #0]
    1568:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    156c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    156e:	3301      	adds	r3, #1
    1570:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    1572:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1576:	2b00      	cmp	r3, #0
    1578:	d00a      	beq.n	1590 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    157a:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    157e:	ab16      	add	r3, sp, #88	; 0x58
    1580:	4611      	mov	r1, r2
    1582:	4618      	mov	r0, r3
    1584:	f7ff fce5 	bl	f52 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1588:	9b19      	ldr	r3, [sp, #100]	; 0x64
    158a:	2b00      	cmp	r3, #0
    158c:	daea      	bge.n	1564 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    158e:	e01a      	b.n	15c6 <SEGGER_RTT_vprintf+0x34e>
              break;
    1590:	bf00      	nop
        break;
    1592:	e018      	b.n	15c6 <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    1594:	9b03      	ldr	r3, [sp, #12]
    1596:	681b      	ldr	r3, [r3, #0]
    1598:	1d19      	adds	r1, r3, #4
    159a:	9a03      	ldr	r2, [sp, #12]
    159c:	6011      	str	r1, [r2, #0]
    159e:	681b      	ldr	r3, [r3, #0]
    15a0:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    15a2:	9920      	ldr	r1, [sp, #128]	; 0x80
    15a4:	a816      	add	r0, sp, #88	; 0x58
    15a6:	2300      	movs	r3, #0
    15a8:	9301      	str	r3, [sp, #4]
    15aa:	2308      	movs	r3, #8
    15ac:	9300      	str	r3, [sp, #0]
    15ae:	2308      	movs	r3, #8
    15b0:	2210      	movs	r2, #16
    15b2:	f7ff fd0d 	bl	fd0 <_PrintUnsigned>
        break;
    15b6:	e006      	b.n	15c6 <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    15b8:	ab16      	add	r3, sp, #88	; 0x58
    15ba:	2125      	movs	r1, #37	; 0x25
    15bc:	4618      	mov	r0, r3
    15be:	f7ff fcc8 	bl	f52 <_StoreChar>
        break;
    15c2:	e000      	b.n	15c6 <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    15c4:	bf00      	nop
      }
      sFormat++;
    15c6:	9b04      	ldr	r3, [sp, #16]
    15c8:	3301      	adds	r3, #1
    15ca:	9304      	str	r3, [sp, #16]
    15cc:	e006      	b.n	15dc <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    15ce:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    15d2:	ab16      	add	r3, sp, #88	; 0x58
    15d4:	4611      	mov	r1, r2
    15d6:	4618      	mov	r0, r3
    15d8:	f7ff fcbb 	bl	f52 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    15dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15de:	2b00      	cmp	r3, #0
    15e0:	f6bf ae59 	bge.w	1296 <SEGGER_RTT_vprintf+0x1e>
    15e4:	e000      	b.n	15e8 <SEGGER_RTT_vprintf+0x370>
      break;
    15e6:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    15e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15ea:	2b00      	cmp	r3, #0
    15ec:	dd0c      	ble.n	1608 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    15ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
    15f0:	2b00      	cmp	r3, #0
    15f2:	d005      	beq.n	1600 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    15f4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    15f6:	ab06      	add	r3, sp, #24
    15f8:	4619      	mov	r1, r3
    15fa:	9805      	ldr	r0, [sp, #20]
    15fc:	f7ff fc7e 	bl	efc <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1600:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1602:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1604:	4413      	add	r3, r2
    1606:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1608:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    160a:	4618      	mov	r0, r3
    160c:	b023      	add	sp, #140	; 0x8c
    160e:	f85d fb04 	ldr.w	pc, [sp], #4
    1612:	bf00      	nop
    1614:	0000a5b4 	.word	0x0000a5b4

00001618 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1618:	b40e      	push	{r1, r2, r3}
    161a:	b500      	push	{lr}
    161c:	b084      	sub	sp, #16
    161e:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1620:	ab06      	add	r3, sp, #24
    1622:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1624:	ab02      	add	r3, sp, #8
    1626:	461a      	mov	r2, r3
    1628:	9905      	ldr	r1, [sp, #20]
    162a:	9801      	ldr	r0, [sp, #4]
    162c:	f7ff fe24 	bl	1278 <SEGGER_RTT_vprintf>
    1630:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    1632:	9b03      	ldr	r3, [sp, #12]
}
    1634:	4618      	mov	r0, r3
    1636:	b004      	add	sp, #16
    1638:	f85d eb04 	ldr.w	lr, [sp], #4
    163c:	b003      	add	sp, #12
    163e:	4770      	bx	lr

00001640 <memcpy>:
    1640:	440a      	add	r2, r1
    1642:	4291      	cmp	r1, r2
    1644:	f100 33ff 	add.w	r3, r0, #4294967295
    1648:	d100      	bne.n	164c <memcpy+0xc>
    164a:	4770      	bx	lr
    164c:	b510      	push	{r4, lr}
    164e:	f811 4b01 	ldrb.w	r4, [r1], #1
    1652:	f803 4f01 	strb.w	r4, [r3, #1]!
    1656:	4291      	cmp	r1, r2
    1658:	d1f9      	bne.n	164e <memcpy+0xe>
    165a:	bd10      	pop	{r4, pc}

0000165c <memset>:
    165c:	4402      	add	r2, r0
    165e:	4603      	mov	r3, r0
    1660:	4293      	cmp	r3, r2
    1662:	d100      	bne.n	1666 <memset+0xa>
    1664:	4770      	bx	lr
    1666:	f803 1b01 	strb.w	r1, [r3], #1
    166a:	e7f9      	b.n	1660 <memset+0x4>

0000166c <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    166c:	b086      	sub	sp, #24
    166e:	9003      	str	r0, [sp, #12]
    1670:	9102      	str	r1, [sp, #8]
    1672:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    1674:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1678:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    167c:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    167e:	9b01      	ldr	r3, [sp, #4]
    1680:	2b00      	cmp	r3, #0
    1682:	d007      	beq.n	1694 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    1684:	9b03      	ldr	r3, [sp, #12]
    1686:	3310      	adds	r3, #16
    1688:	009b      	lsls	r3, r3, #2
    168a:	9a05      	ldr	r2, [sp, #20]
    168c:	4413      	add	r3, r2
    168e:	681a      	ldr	r2, [r3, #0]
    1690:	9b01      	ldr	r3, [sp, #4]
    1692:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    1694:	9b03      	ldr	r3, [sp, #12]
    1696:	3310      	adds	r3, #16
    1698:	009b      	lsls	r3, r3, #2
    169a:	9a05      	ldr	r2, [sp, #20]
    169c:	4413      	add	r3, r2
    169e:	9a02      	ldr	r2, [sp, #8]
    16a0:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    16a2:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    16a6:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    16aa:	bf00      	nop
    16ac:	b006      	add	sp, #24
    16ae:	4770      	bx	lr

000016b0 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    16b0:	b082      	sub	sp, #8
    16b2:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    16b4:	9b01      	ldr	r3, [sp, #4]
    16b6:	f003 021f 	and.w	r2, r3, #31
    16ba:	4905      	ldr	r1, [pc, #20]	; (16d0 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    16bc:	9b01      	ldr	r3, [sp, #4]
    16be:	095b      	lsrs	r3, r3, #5
    16c0:	2001      	movs	r0, #1
    16c2:	fa00 f202 	lsl.w	r2, r0, r2
    16c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    16ca:	bf00      	nop
    16cc:	b002      	add	sp, #8
    16ce:	4770      	bx	lr
    16d0:	e000e100 	.word	0xe000e100

000016d4 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    16d4:	b082      	sub	sp, #8
    16d6:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    16d8:	9b01      	ldr	r3, [sp, #4]
    16da:	f003 021f 	and.w	r2, r3, #31
    16de:	4906      	ldr	r1, [pc, #24]	; (16f8 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    16e0:	9b01      	ldr	r3, [sp, #4]
    16e2:	095b      	lsrs	r3, r3, #5
    16e4:	2001      	movs	r0, #1
    16e6:	fa00 f202 	lsl.w	r2, r0, r2
    16ea:	3320      	adds	r3, #32
    16ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    16f0:	bf00      	nop
    16f2:	b002      	add	sp, #8
    16f4:	4770      	bx	lr
    16f6:	bf00      	nop
    16f8:	e000e100 	.word	0xe000e100

000016fc <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    16fc:	b084      	sub	sp, #16
    16fe:	9001      	str	r0, [sp, #4]
    1700:	460b      	mov	r3, r1
    1702:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1706:	2304      	movs	r3, #4
    1708:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    170c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1710:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1714:	fa02 f103 	lsl.w	r1, r2, r3
    1718:	4a04      	ldr	r2, [pc, #16]	; (172c <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    171a:	9b01      	ldr	r3, [sp, #4]
    171c:	b2c9      	uxtb	r1, r1
    171e:	4413      	add	r3, r2
    1720:	460a      	mov	r2, r1
    1722:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    1726:	bf00      	nop
    1728:	b004      	add	sp, #16
    172a:	4770      	bx	lr
    172c:	e000e100 	.word	0xe000e100

00001730 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    1730:	b084      	sub	sp, #16
    1732:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1734:	2304      	movs	r3, #4
    1736:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    173a:	4a09      	ldr	r2, [pc, #36]	; (1760 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    173c:	9b01      	ldr	r3, [sp, #4]
    173e:	4413      	add	r3, r2
    1740:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    1744:	b2db      	uxtb	r3, r3
    1746:	461a      	mov	r2, r3
    1748:	f89d 300f 	ldrb.w	r3, [sp, #15]
    174c:	fa42 f303 	asr.w	r3, r2, r3
    1750:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    1754:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    1758:	4618      	mov	r0, r3
    175a:	b004      	add	sp, #16
    175c:	4770      	bx	lr
    175e:	bf00      	nop
    1760:	e000e100 	.word	0xe000e100

00001764 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    1764:	b082      	sub	sp, #8
    1766:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1768:	9b01      	ldr	r3, [sp, #4]
    176a:	f003 021f 	and.w	r2, r3, #31
    176e:	4906      	ldr	r1, [pc, #24]	; (1788 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    1770:	9b01      	ldr	r3, [sp, #4]
    1772:	095b      	lsrs	r3, r3, #5
    1774:	2001      	movs	r0, #1
    1776:	fa00 f202 	lsl.w	r2, r0, r2
    177a:	3360      	adds	r3, #96	; 0x60
    177c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    1780:	bf00      	nop
    1782:	b002      	add	sp, #8
    1784:	4770      	bx	lr
    1786:	bf00      	nop
    1788:	e000e100 	.word	0xe000e100

0000178c <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    178c:	b500      	push	{lr}
    178e:	b085      	sub	sp, #20
    1790:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1792:	2300      	movs	r3, #0
    1794:	9303      	str	r3, [sp, #12]
    1796:	e05d      	b.n	1854 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1798:	9b01      	ldr	r3, [sp, #4]
    179a:	6859      	ldr	r1, [r3, #4]
    179c:	9a03      	ldr	r2, [sp, #12]
    179e:	4613      	mov	r3, r2
    17a0:	005b      	lsls	r3, r3, #1
    17a2:	4413      	add	r3, r2
    17a4:	009b      	lsls	r3, r3, #2
    17a6:	440b      	add	r3, r1
    17a8:	681b      	ldr	r3, [r3, #0]
    17aa:	4618      	mov	r0, r3
    17ac:	f000 f899 	bl	18e2 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17b0:	9b01      	ldr	r3, [sp, #4]
    17b2:	6859      	ldr	r1, [r3, #4]
    17b4:	9a03      	ldr	r2, [sp, #12]
    17b6:	4613      	mov	r3, r2
    17b8:	005b      	lsls	r3, r3, #1
    17ba:	4413      	add	r3, r2
    17bc:	009b      	lsls	r3, r3, #2
    17be:	440b      	add	r3, r1
    17c0:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    17c2:	9b01      	ldr	r3, [sp, #4]
    17c4:	6859      	ldr	r1, [r3, #4]
    17c6:	9a03      	ldr	r2, [sp, #12]
    17c8:	4613      	mov	r3, r2
    17ca:	005b      	lsls	r3, r3, #1
    17cc:	4413      	add	r3, r2
    17ce:	009b      	lsls	r3, r3, #2
    17d0:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17d2:	795b      	ldrb	r3, [r3, #5]
    17d4:	4619      	mov	r1, r3
    17d6:	f000 f869 	bl	18ac <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17da:	9b01      	ldr	r3, [sp, #4]
    17dc:	6859      	ldr	r1, [r3, #4]
    17de:	9a03      	ldr	r2, [sp, #12]
    17e0:	4613      	mov	r3, r2
    17e2:	005b      	lsls	r3, r3, #1
    17e4:	4413      	add	r3, r2
    17e6:	009b      	lsls	r3, r3, #2
    17e8:	440b      	add	r3, r1
    17ea:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    17ec:	9b01      	ldr	r3, [sp, #4]
    17ee:	6859      	ldr	r1, [r3, #4]
    17f0:	9a03      	ldr	r2, [sp, #12]
    17f2:	4613      	mov	r3, r2
    17f4:	005b      	lsls	r3, r3, #1
    17f6:	4413      	add	r3, r2
    17f8:	009b      	lsls	r3, r3, #2
    17fa:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17fc:	689b      	ldr	r3, [r3, #8]
    17fe:	2200      	movs	r2, #0
    1800:	4619      	mov	r1, r3
    1802:	f000 f831 	bl	1868 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1806:	9b01      	ldr	r3, [sp, #4]
    1808:	6859      	ldr	r1, [r3, #4]
    180a:	9a03      	ldr	r2, [sp, #12]
    180c:	4613      	mov	r3, r2
    180e:	005b      	lsls	r3, r3, #1
    1810:	4413      	add	r3, r2
    1812:	009b      	lsls	r3, r3, #2
    1814:	440b      	add	r3, r1
    1816:	791b      	ldrb	r3, [r3, #4]
    1818:	2b00      	cmp	r3, #0
    181a:	d00c      	beq.n	1836 <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    181c:	9b01      	ldr	r3, [sp, #4]
    181e:	6859      	ldr	r1, [r3, #4]
    1820:	9a03      	ldr	r2, [sp, #12]
    1822:	4613      	mov	r3, r2
    1824:	005b      	lsls	r3, r3, #1
    1826:	4413      	add	r3, r2
    1828:	009b      	lsls	r3, r3, #2
    182a:	440b      	add	r3, r1
    182c:	681b      	ldr	r3, [r3, #0]
    182e:	4618      	mov	r0, r3
    1830:	f000 f828 	bl	1884 <IntCtrl_Ip_EnableIrq>
    1834:	e00b      	b.n	184e <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1836:	9b01      	ldr	r3, [sp, #4]
    1838:	6859      	ldr	r1, [r3, #4]
    183a:	9a03      	ldr	r2, [sp, #12]
    183c:	4613      	mov	r3, r2
    183e:	005b      	lsls	r3, r3, #1
    1840:	4413      	add	r3, r2
    1842:	009b      	lsls	r3, r3, #2
    1844:	440b      	add	r3, r1
    1846:	681b      	ldr	r3, [r3, #0]
    1848:	4618      	mov	r0, r3
    184a:	f000 f825 	bl	1898 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    184e:	9b03      	ldr	r3, [sp, #12]
    1850:	3301      	adds	r3, #1
    1852:	9303      	str	r3, [sp, #12]
    1854:	9b01      	ldr	r3, [sp, #4]
    1856:	681b      	ldr	r3, [r3, #0]
    1858:	9a03      	ldr	r2, [sp, #12]
    185a:	429a      	cmp	r2, r3
    185c:	d39c      	bcc.n	1798 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    185e:	2300      	movs	r3, #0
}
    1860:	4618      	mov	r0, r3
    1862:	b005      	add	sp, #20
    1864:	f85d fb04 	ldr.w	pc, [sp], #4

00001868 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1868:	b500      	push	{lr}
    186a:	b085      	sub	sp, #20
    186c:	9003      	str	r0, [sp, #12]
    186e:	9102      	str	r1, [sp, #8]
    1870:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    1872:	9a01      	ldr	r2, [sp, #4]
    1874:	9902      	ldr	r1, [sp, #8]
    1876:	9803      	ldr	r0, [sp, #12]
    1878:	f7ff fef8 	bl	166c <IntCtrl_Ip_InstallHandlerPrivileged>
}
    187c:	bf00      	nop
    187e:	b005      	add	sp, #20
    1880:	f85d fb04 	ldr.w	pc, [sp], #4

00001884 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    1884:	b500      	push	{lr}
    1886:	b083      	sub	sp, #12
    1888:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    188a:	9801      	ldr	r0, [sp, #4]
    188c:	f7ff ff10 	bl	16b0 <IntCtrl_Ip_EnableIrqPrivileged>
}
    1890:	bf00      	nop
    1892:	b003      	add	sp, #12
    1894:	f85d fb04 	ldr.w	pc, [sp], #4

00001898 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    1898:	b500      	push	{lr}
    189a:	b083      	sub	sp, #12
    189c:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    189e:	9801      	ldr	r0, [sp, #4]
    18a0:	f7ff ff18 	bl	16d4 <IntCtrl_Ip_DisableIrqPrivileged>
}
    18a4:	bf00      	nop
    18a6:	b003      	add	sp, #12
    18a8:	f85d fb04 	ldr.w	pc, [sp], #4

000018ac <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    18ac:	b500      	push	{lr}
    18ae:	b083      	sub	sp, #12
    18b0:	9001      	str	r0, [sp, #4]
    18b2:	460b      	mov	r3, r1
    18b4:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    18b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    18bc:	4619      	mov	r1, r3
    18be:	9801      	ldr	r0, [sp, #4]
    18c0:	f7ff ff1c 	bl	16fc <IntCtrl_Ip_SetPriorityPrivileged>
}
    18c4:	bf00      	nop
    18c6:	b003      	add	sp, #12
    18c8:	f85d fb04 	ldr.w	pc, [sp], #4

000018cc <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    18cc:	b500      	push	{lr}
    18ce:	b083      	sub	sp, #12
    18d0:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    18d2:	9801      	ldr	r0, [sp, #4]
    18d4:	f7ff ff2c 	bl	1730 <IntCtrl_Ip_GetPriorityPrivileged>
    18d8:	4603      	mov	r3, r0
}
    18da:	4618      	mov	r0, r3
    18dc:	b003      	add	sp, #12
    18de:	f85d fb04 	ldr.w	pc, [sp], #4

000018e2 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    18e2:	b500      	push	{lr}
    18e4:	b083      	sub	sp, #12
    18e6:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    18e8:	9801      	ldr	r0, [sp, #4]
    18ea:	f7ff ff3b 	bl	1764 <IntCtrl_Ip_ClearPendingPrivileged>
}
    18ee:	bf00      	nop
    18f0:	b003      	add	sp, #12
    18f2:	f85d fb04 	ldr.w	pc, [sp], #4
    18f6:	bf00      	nop

000018f8 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    18f8:	b500      	push	{lr}
    18fa:	b083      	sub	sp, #12
    18fc:	9001      	str	r0, [sp, #4]
    18fe:	460b      	mov	r3, r1
    1900:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1904:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1908:	2b00      	cmp	r3, #0
    190a:	d003      	beq.n	1914 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    190c:	9801      	ldr	r0, [sp, #4]
    190e:	f7ff ffb9 	bl	1884 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    1912:	e002      	b.n	191a <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1914:	9801      	ldr	r0, [sp, #4]
    1916:	f7ff ffbf 	bl	1898 <IntCtrl_Ip_DisableIrq>
}
    191a:	bf00      	nop
    191c:	b003      	add	sp, #12
    191e:	f85d fb04 	ldr.w	pc, [sp], #4

00001922 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1922:	b500      	push	{lr}
    1924:	b083      	sub	sp, #12
    1926:	9001      	str	r0, [sp, #4]
    1928:	460b      	mov	r3, r1
    192a:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    192e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1932:	4619      	mov	r1, r3
    1934:	9801      	ldr	r0, [sp, #4]
    1936:	f7ff ffb9 	bl	18ac <IntCtrl_Ip_SetPriority>
}
    193a:	bf00      	nop
    193c:	b003      	add	sp, #12
    193e:	f85d fb04 	ldr.w	pc, [sp], #4

00001942 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    1942:	b500      	push	{lr}
    1944:	b083      	sub	sp, #12
    1946:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1948:	9801      	ldr	r0, [sp, #4]
    194a:	f7ff ffbf 	bl	18cc <IntCtrl_Ip_GetPriority>
    194e:	4603      	mov	r3, r0
}
    1950:	4618      	mov	r0, r3
    1952:	b003      	add	sp, #12
    1954:	f85d fb04 	ldr.w	pc, [sp], #4

00001958 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1958:	b500      	push	{lr}
    195a:	b085      	sub	sp, #20
    195c:	9003      	str	r0, [sp, #12]
    195e:	9102      	str	r1, [sp, #8]
    1960:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1962:	9a01      	ldr	r2, [sp, #4]
    1964:	9902      	ldr	r1, [sp, #8]
    1966:	9803      	ldr	r0, [sp, #12]
    1968:	f7ff ff7e 	bl	1868 <IntCtrl_Ip_InstallHandler>
}
    196c:	bf00      	nop
    196e:	b005      	add	sp, #20
    1970:	f85d fb04 	ldr.w	pc, [sp], #4

00001974 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    1974:	b500      	push	{lr}
    1976:	b085      	sub	sp, #20
    1978:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    197a:	2300      	movs	r3, #0
    197c:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    1980:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1984:	4a05      	ldr	r2, [pc, #20]	; (199c <Platform_Init+0x28>)
    1986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    198a:	681b      	ldr	r3, [r3, #0]
    198c:	4618      	mov	r0, r3
    198e:	f000 f8c7 	bl	1b20 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    1992:	bf00      	nop
    1994:	b005      	add	sp, #20
    1996:	f85d fb04 	ldr.w	pc, [sp], #4
    199a:	bf00      	nop
    199c:	0000b1d0 	.word	0x0000b1d0

000019a0 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    19a0:	b500      	push	{lr}
    19a2:	b085      	sub	sp, #20
    19a4:	9001      	str	r0, [sp, #4]
    19a6:	460b      	mov	r3, r1
    19a8:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    19ac:	2300      	movs	r3, #0
    19ae:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    19b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    19b6:	4619      	mov	r1, r3
    19b8:	9801      	ldr	r0, [sp, #4]
    19ba:	f7ff ff9d 	bl	18f8 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    19be:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    19c2:	4618      	mov	r0, r3
    19c4:	b005      	add	sp, #20
    19c6:	f85d fb04 	ldr.w	pc, [sp], #4

000019ca <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    19ca:	b500      	push	{lr}
    19cc:	b085      	sub	sp, #20
    19ce:	9001      	str	r0, [sp, #4]
    19d0:	460b      	mov	r3, r1
    19d2:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    19d6:	2300      	movs	r3, #0
    19d8:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    19dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    19e0:	4619      	mov	r1, r3
    19e2:	9801      	ldr	r0, [sp, #4]
    19e4:	f7ff ff9d 	bl	1922 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    19e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    19ec:	4618      	mov	r0, r3
    19ee:	b005      	add	sp, #20
    19f0:	f85d fb04 	ldr.w	pc, [sp], #4

000019f4 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    19f4:	b500      	push	{lr}
    19f6:	b085      	sub	sp, #20
    19f8:	9001      	str	r0, [sp, #4]
    19fa:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    19fc:	2300      	movs	r3, #0
    19fe:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    1a02:	9801      	ldr	r0, [sp, #4]
    1a04:	f7ff ff9d 	bl	1942 <Platform_Ipw_GetIrqPriority>
    1a08:	4603      	mov	r3, r0
    1a0a:	461a      	mov	r2, r3
    1a0c:	9b00      	ldr	r3, [sp, #0]
    1a0e:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    1a10:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1a14:	4618      	mov	r0, r3
    1a16:	b005      	add	sp, #20
    1a18:	f85d fb04 	ldr.w	pc, [sp], #4

00001a1c <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1a1c:	b500      	push	{lr}
    1a1e:	b087      	sub	sp, #28
    1a20:	9003      	str	r0, [sp, #12]
    1a22:	9102      	str	r1, [sp, #8]
    1a24:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1a26:	2300      	movs	r3, #0
    1a28:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1a2c:	9a01      	ldr	r2, [sp, #4]
    1a2e:	9902      	ldr	r1, [sp, #8]
    1a30:	9803      	ldr	r0, [sp, #12]
    1a32:	f7ff ff91 	bl	1958 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1a36:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1a3a:	4618      	mov	r0, r3
    1a3c:	b007      	add	sp, #28
    1a3e:	f85d fb04 	ldr.w	pc, [sp], #4
    1a42:	bf00      	nop

00001a44 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1a44:	b500      	push	{lr}
    1a46:	b085      	sub	sp, #20
    1a48:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a4a:	2300      	movs	r3, #0
    1a4c:	9303      	str	r3, [sp, #12]
    1a4e:	e05d      	b.n	1b0c <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a50:	9b01      	ldr	r3, [sp, #4]
    1a52:	6859      	ldr	r1, [r3, #4]
    1a54:	9a03      	ldr	r2, [sp, #12]
    1a56:	4613      	mov	r3, r2
    1a58:	005b      	lsls	r3, r3, #1
    1a5a:	4413      	add	r3, r2
    1a5c:	009b      	lsls	r3, r3, #2
    1a5e:	440b      	add	r3, r1
    1a60:	681b      	ldr	r3, [r3, #0]
    1a62:	4618      	mov	r0, r3
    1a64:	f7ff ff3d 	bl	18e2 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a68:	9b01      	ldr	r3, [sp, #4]
    1a6a:	6859      	ldr	r1, [r3, #4]
    1a6c:	9a03      	ldr	r2, [sp, #12]
    1a6e:	4613      	mov	r3, r2
    1a70:	005b      	lsls	r3, r3, #1
    1a72:	4413      	add	r3, r2
    1a74:	009b      	lsls	r3, r3, #2
    1a76:	440b      	add	r3, r1
    1a78:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1a7a:	9b01      	ldr	r3, [sp, #4]
    1a7c:	6859      	ldr	r1, [r3, #4]
    1a7e:	9a03      	ldr	r2, [sp, #12]
    1a80:	4613      	mov	r3, r2
    1a82:	005b      	lsls	r3, r3, #1
    1a84:	4413      	add	r3, r2
    1a86:	009b      	lsls	r3, r3, #2
    1a88:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a8a:	795b      	ldrb	r3, [r3, #5]
    1a8c:	4619      	mov	r1, r3
    1a8e:	f7ff ff0d 	bl	18ac <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a92:	9b01      	ldr	r3, [sp, #4]
    1a94:	6859      	ldr	r1, [r3, #4]
    1a96:	9a03      	ldr	r2, [sp, #12]
    1a98:	4613      	mov	r3, r2
    1a9a:	005b      	lsls	r3, r3, #1
    1a9c:	4413      	add	r3, r2
    1a9e:	009b      	lsls	r3, r3, #2
    1aa0:	440b      	add	r3, r1
    1aa2:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1aa4:	9b01      	ldr	r3, [sp, #4]
    1aa6:	6859      	ldr	r1, [r3, #4]
    1aa8:	9a03      	ldr	r2, [sp, #12]
    1aaa:	4613      	mov	r3, r2
    1aac:	005b      	lsls	r3, r3, #1
    1aae:	4413      	add	r3, r2
    1ab0:	009b      	lsls	r3, r3, #2
    1ab2:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1ab4:	689b      	ldr	r3, [r3, #8]
    1ab6:	2200      	movs	r2, #0
    1ab8:	4619      	mov	r1, r3
    1aba:	f7ff fed5 	bl	1868 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1abe:	9b01      	ldr	r3, [sp, #4]
    1ac0:	6859      	ldr	r1, [r3, #4]
    1ac2:	9a03      	ldr	r2, [sp, #12]
    1ac4:	4613      	mov	r3, r2
    1ac6:	005b      	lsls	r3, r3, #1
    1ac8:	4413      	add	r3, r2
    1aca:	009b      	lsls	r3, r3, #2
    1acc:	440b      	add	r3, r1
    1ace:	791b      	ldrb	r3, [r3, #4]
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d00c      	beq.n	1aee <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1ad4:	9b01      	ldr	r3, [sp, #4]
    1ad6:	6859      	ldr	r1, [r3, #4]
    1ad8:	9a03      	ldr	r2, [sp, #12]
    1ada:	4613      	mov	r3, r2
    1adc:	005b      	lsls	r3, r3, #1
    1ade:	4413      	add	r3, r2
    1ae0:	009b      	lsls	r3, r3, #2
    1ae2:	440b      	add	r3, r1
    1ae4:	681b      	ldr	r3, [r3, #0]
    1ae6:	4618      	mov	r0, r3
    1ae8:	f7ff fecc 	bl	1884 <IntCtrl_Ip_EnableIrq>
    1aec:	e00b      	b.n	1b06 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1aee:	9b01      	ldr	r3, [sp, #4]
    1af0:	6859      	ldr	r1, [r3, #4]
    1af2:	9a03      	ldr	r2, [sp, #12]
    1af4:	4613      	mov	r3, r2
    1af6:	005b      	lsls	r3, r3, #1
    1af8:	4413      	add	r3, r2
    1afa:	009b      	lsls	r3, r3, #2
    1afc:	440b      	add	r3, r1
    1afe:	681b      	ldr	r3, [r3, #0]
    1b00:	4618      	mov	r0, r3
    1b02:	f7ff fec9 	bl	1898 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1b06:	9b03      	ldr	r3, [sp, #12]
    1b08:	3301      	adds	r3, #1
    1b0a:	9303      	str	r3, [sp, #12]
    1b0c:	9b01      	ldr	r3, [sp, #4]
    1b0e:	681b      	ldr	r3, [r3, #0]
    1b10:	9a03      	ldr	r2, [sp, #12]
    1b12:	429a      	cmp	r2, r3
    1b14:	d39c      	bcc.n	1a50 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1b16:	2300      	movs	r3, #0
}
    1b18:	4618      	mov	r0, r3
    1b1a:	b005      	add	sp, #20
    1b1c:	f85d fb04 	ldr.w	pc, [sp], #4

00001b20 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1b20:	b500      	push	{lr}
    1b22:	b085      	sub	sp, #20
    1b24:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1b26:	2300      	movs	r3, #0
    1b28:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1b2c:	9b01      	ldr	r3, [sp, #4]
    1b2e:	681b      	ldr	r3, [r3, #0]
    1b30:	2b00      	cmp	r3, #0
    1b32:	d007      	beq.n	1b44 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1b34:	9b01      	ldr	r3, [sp, #4]
    1b36:	681b      	ldr	r3, [r3, #0]
    1b38:	4618      	mov	r0, r3
    1b3a:	f7ff ff83 	bl	1a44 <Platform_Ipw_InitIntCtrl>
    1b3e:	4603      	mov	r3, r0
    1b40:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1b44:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1b48:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1b4a:	bf00      	nop
    1b4c:	b005      	add	sp, #20
    1b4e:	f85d fb04 	ldr.w	pc, [sp], #4

00001b52 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1b52:	2300      	movs	r3, #0
}
    1b54:	4618      	mov	r0, r3
    1b56:	4770      	bx	lr

00001b58 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1b58:	b082      	sub	sp, #8
    1b5a:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1b5c:	2301      	movs	r3, #1
}
    1b5e:	4618      	mov	r0, r3
    1b60:	b002      	add	sp, #8
    1b62:	4770      	bx	lr

00001b64 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1b64:	b082      	sub	sp, #8
    1b66:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1b68:	bf00      	nop
    1b6a:	b002      	add	sp, #8
    1b6c:	4770      	bx	lr

00001b6e <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1b6e:	b082      	sub	sp, #8
    1b70:	9001      	str	r0, [sp, #4]
    return Micros;
    1b72:	9b01      	ldr	r3, [sp, #4]
}
    1b74:	4618      	mov	r0, r3
    1b76:	b002      	add	sp, #8
    1b78:	4770      	bx	lr

00001b7a <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1b7a:	b500      	push	{lr}
    1b7c:	b083      	sub	sp, #12
    1b7e:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1b80:	f000 f86c 	bl	1c5c <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1b84:	bf00      	nop
    1b86:	b003      	add	sp, #12
    1b88:	f85d fb04 	ldr.w	pc, [sp], #4

00001b8c <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1b8c:	b500      	push	{lr}
    1b8e:	b085      	sub	sp, #20
    1b90:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1b92:	2300      	movs	r3, #0
    1b94:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1b96:	9b01      	ldr	r3, [sp, #4]
    1b98:	2b00      	cmp	r3, #0
    1b9a:	d003      	beq.n	1ba4 <OsIf_GetCounter+0x18>
    1b9c:	9b01      	ldr	r3, [sp, #4]
    1b9e:	2b01      	cmp	r3, #1
    1ba0:	d004      	beq.n	1bac <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1ba2:	e007      	b.n	1bb4 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1ba4:	f7ff ffd5 	bl	1b52 <OsIf_Timer_Dummy_GetCounter>
    1ba8:	9003      	str	r0, [sp, #12]
            break;
    1baa:	e003      	b.n	1bb4 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1bac:	f000 f872 	bl	1c94 <OsIf_Timer_System_GetCounter>
    1bb0:	9003      	str	r0, [sp, #12]
            break;
    1bb2:	bf00      	nop
    }

    return Value;
    1bb4:	9b03      	ldr	r3, [sp, #12]
}
    1bb6:	4618      	mov	r0, r3
    1bb8:	b005      	add	sp, #20
    1bba:	f85d fb04 	ldr.w	pc, [sp], #4

00001bbe <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1bbe:	b500      	push	{lr}
    1bc0:	b085      	sub	sp, #20
    1bc2:	9001      	str	r0, [sp, #4]
    1bc4:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1bc6:	2300      	movs	r3, #0
    1bc8:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1bca:	9b00      	ldr	r3, [sp, #0]
    1bcc:	2b00      	cmp	r3, #0
    1bce:	d003      	beq.n	1bd8 <OsIf_GetElapsed+0x1a>
    1bd0:	9b00      	ldr	r3, [sp, #0]
    1bd2:	2b01      	cmp	r3, #1
    1bd4:	d005      	beq.n	1be2 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1bd6:	e009      	b.n	1bec <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1bd8:	9801      	ldr	r0, [sp, #4]
    1bda:	f7ff ffbd 	bl	1b58 <OsIf_Timer_Dummy_GetElapsed>
    1bde:	9003      	str	r0, [sp, #12]
            break;
    1be0:	e004      	b.n	1bec <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1be2:	9801      	ldr	r0, [sp, #4]
    1be4:	f000 f864 	bl	1cb0 <OsIf_Timer_System_GetElapsed>
    1be8:	9003      	str	r0, [sp, #12]
            break;
    1bea:	bf00      	nop
    }

    return Value;
    1bec:	9b03      	ldr	r3, [sp, #12]
}
    1bee:	4618      	mov	r0, r3
    1bf0:	b005      	add	sp, #20
    1bf2:	f85d fb04 	ldr.w	pc, [sp], #4

00001bf6 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1bf6:	b500      	push	{lr}
    1bf8:	b083      	sub	sp, #12
    1bfa:	9001      	str	r0, [sp, #4]
    1bfc:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1bfe:	9b00      	ldr	r3, [sp, #0]
    1c00:	2b00      	cmp	r3, #0
    1c02:	d003      	beq.n	1c0c <OsIf_SetTimerFrequency+0x16>
    1c04:	9b00      	ldr	r3, [sp, #0]
    1c06:	2b01      	cmp	r3, #1
    1c08:	d004      	beq.n	1c14 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c0a:	e007      	b.n	1c1c <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1c0c:	9801      	ldr	r0, [sp, #4]
    1c0e:	f7ff ffa9 	bl	1b64 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1c12:	e003      	b.n	1c1c <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1c14:	9801      	ldr	r0, [sp, #4]
    1c16:	f000 f85b 	bl	1cd0 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1c1a:	bf00      	nop
    }
}
    1c1c:	bf00      	nop
    1c1e:	b003      	add	sp, #12
    1c20:	f85d fb04 	ldr.w	pc, [sp], #4

00001c24 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1c24:	b500      	push	{lr}
    1c26:	b085      	sub	sp, #20
    1c28:	9001      	str	r0, [sp, #4]
    1c2a:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1c2c:	2300      	movs	r3, #0
    1c2e:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1c30:	9b00      	ldr	r3, [sp, #0]
    1c32:	2b00      	cmp	r3, #0
    1c34:	d003      	beq.n	1c3e <OsIf_MicrosToTicks+0x1a>
    1c36:	9b00      	ldr	r3, [sp, #0]
    1c38:	2b01      	cmp	r3, #1
    1c3a:	d005      	beq.n	1c48 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c3c:	e009      	b.n	1c52 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1c3e:	9801      	ldr	r0, [sp, #4]
    1c40:	f7ff ff95 	bl	1b6e <OsIf_Timer_Dummy_MicrosToTicks>
    1c44:	9003      	str	r0, [sp, #12]
            break;
    1c46:	e004      	b.n	1c52 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1c48:	9801      	ldr	r0, [sp, #4]
    1c4a:	f000 f84f 	bl	1cec <OsIf_Timer_System_MicrosToTicks>
    1c4e:	9003      	str	r0, [sp, #12]
            break;
    1c50:	bf00      	nop
    }

    return Value;
    1c52:	9b03      	ldr	r3, [sp, #12]
}
    1c54:	4618      	mov	r0, r3
    1c56:	b005      	add	sp, #20
    1c58:	f85d fb04 	ldr.w	pc, [sp], #4

00001c5c <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1c5c:	b500      	push	{lr}
    1c5e:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1c60:	2300      	movs	r3, #0
    1c62:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1c64:	4a09      	ldr	r2, [pc, #36]	; (1c8c <OsIf_Timer_System_Init+0x30>)
    1c66:	9b01      	ldr	r3, [sp, #4]
    1c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c6c:	685a      	ldr	r2, [r3, #4]
    1c6e:	4908      	ldr	r1, [pc, #32]	; (1c90 <OsIf_Timer_System_Init+0x34>)
    1c70:	9b01      	ldr	r3, [sp, #4]
    1c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1c76:	4a06      	ldr	r2, [pc, #24]	; (1c90 <OsIf_Timer_System_Init+0x34>)
    1c78:	9b01      	ldr	r3, [sp, #4]
    1c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c7e:	4618      	mov	r0, r3
    1c80:	f000 f868 	bl	1d54 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1c84:	bf00      	nop
    1c86:	b003      	add	sp, #12
    1c88:	f85d fb04 	ldr.w	pc, [sp], #4
    1c8c:	0000b1c8 	.word	0x0000b1c8
    1c90:	1fff8b40 	.word	0x1fff8b40

00001c94 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1c94:	b500      	push	{lr}
    1c96:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1c98:	2300      	movs	r3, #0
    1c9a:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1c9c:	2300      	movs	r3, #0
    1c9e:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1ca0:	f000 f86c 	bl	1d7c <OsIf_Timer_System_Internal_GetCounter>
    1ca4:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1ca6:	9b01      	ldr	r3, [sp, #4]
}
    1ca8:	4618      	mov	r0, r3
    1caa:	b003      	add	sp, #12
    1cac:	f85d fb04 	ldr.w	pc, [sp], #4

00001cb0 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1cb0:	b500      	push	{lr}
    1cb2:	b085      	sub	sp, #20
    1cb4:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1cb6:	2300      	movs	r3, #0
    1cb8:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1cba:	2300      	movs	r3, #0
    1cbc:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1cbe:	9801      	ldr	r0, [sp, #4]
    1cc0:	f000 f864 	bl	1d8c <OsIf_Timer_System_Internal_GetElapsed>
    1cc4:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1cc6:	9b03      	ldr	r3, [sp, #12]
}
    1cc8:	4618      	mov	r0, r3
    1cca:	b005      	add	sp, #20
    1ccc:	f85d fb04 	ldr.w	pc, [sp], #4

00001cd0 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1cd0:	b084      	sub	sp, #16
    1cd2:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1cd4:	2300      	movs	r3, #0
    1cd6:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1cd8:	4903      	ldr	r1, [pc, #12]	; (1ce8 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1cda:	9b03      	ldr	r3, [sp, #12]
    1cdc:	9a01      	ldr	r2, [sp, #4]
    1cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1ce2:	bf00      	nop
    1ce4:	b004      	add	sp, #16
    1ce6:	4770      	bx	lr
    1ce8:	1fff8b40 	.word	0x1fff8b40

00001cec <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cee:	b087      	sub	sp, #28
    1cf0:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1cf2:	2100      	movs	r1, #0
    1cf4:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1cf6:	2100      	movs	r1, #0
    1cf8:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1cfa:	9901      	ldr	r1, [sp, #4]
    1cfc:	2000      	movs	r0, #0
    1cfe:	460e      	mov	r6, r1
    1d00:	4607      	mov	r7, r0
    1d02:	4812      	ldr	r0, [pc, #72]	; (1d4c <OsIf_Timer_System_MicrosToTicks+0x60>)
    1d04:	9904      	ldr	r1, [sp, #16]
    1d06:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1d0a:	2000      	movs	r0, #0
    1d0c:	460c      	mov	r4, r1
    1d0e:	4605      	mov	r5, r0
    1d10:	fb04 f007 	mul.w	r0, r4, r7
    1d14:	fb06 f105 	mul.w	r1, r6, r5
    1d18:	4401      	add	r1, r0
    1d1a:	fba6 2304 	umull	r2, r3, r6, r4
    1d1e:	4419      	add	r1, r3
    1d20:	460b      	mov	r3, r1
    1d22:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1d26:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1d2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1d2e:	4a08      	ldr	r2, [pc, #32]	; (1d50 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1d30:	f04f 0300 	mov.w	r3, #0
    1d34:	f7fe fc36 	bl	5a4 <__aeabi_uldivmod>
    1d38:	4602      	mov	r2, r0
    1d3a:	460b      	mov	r3, r1
    1d3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1d40:	9b02      	ldr	r3, [sp, #8]
    1d42:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1d44:	9b05      	ldr	r3, [sp, #20]
}
    1d46:	4618      	mov	r0, r3
    1d48:	b007      	add	sp, #28
    1d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d4c:	1fff8b40 	.word	0x1fff8b40
    1d50:	000f4240 	.word	0x000f4240

00001d54 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1d54:	b082      	sub	sp, #8
    1d56:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1d58:	4b07      	ldr	r3, [pc, #28]	; (1d78 <OsIf_Timer_System_Internal_Init+0x24>)
    1d5a:	2200      	movs	r2, #0
    1d5c:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1d5e:	4b06      	ldr	r3, [pc, #24]	; (1d78 <OsIf_Timer_System_Internal_Init+0x24>)
    1d60:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1d64:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1d66:	4b04      	ldr	r3, [pc, #16]	; (1d78 <OsIf_Timer_System_Internal_Init+0x24>)
    1d68:	2200      	movs	r2, #0
    1d6a:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1d6c:	4b02      	ldr	r3, [pc, #8]	; (1d78 <OsIf_Timer_System_Internal_Init+0x24>)
    1d6e:	2205      	movs	r2, #5
    1d70:	601a      	str	r2, [r3, #0]
}
    1d72:	bf00      	nop
    1d74:	b002      	add	sp, #8
    1d76:	4770      	bx	lr
    1d78:	e000e010 	.word	0xe000e010

00001d7c <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1d7c:	4b02      	ldr	r3, [pc, #8]	; (1d88 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1d7e:	689b      	ldr	r3, [r3, #8]
    1d80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1d84:	4618      	mov	r0, r3
    1d86:	4770      	bx	lr
    1d88:	e000e010 	.word	0xe000e010

00001d8c <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1d8c:	b084      	sub	sp, #16
    1d8e:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1d90:	4b10      	ldr	r3, [pc, #64]	; (1dd4 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1d92:	689b      	ldr	r3, [r3, #8]
    1d94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1d98:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1d9a:	2300      	movs	r3, #0
    1d9c:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1d9e:	9b01      	ldr	r3, [sp, #4]
    1da0:	681b      	ldr	r3, [r3, #0]
    1da2:	9a02      	ldr	r2, [sp, #8]
    1da4:	429a      	cmp	r2, r3
    1da6:	d909      	bls.n	1dbc <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1da8:	9b01      	ldr	r3, [sp, #4]
    1daa:	681a      	ldr	r2, [r3, #0]
    1dac:	9b02      	ldr	r3, [sp, #8]
    1dae:	1ad3      	subs	r3, r2, r3
    1db0:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1db4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1db8:	9303      	str	r3, [sp, #12]
    1dba:	e004      	b.n	1dc6 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1dbc:	9b01      	ldr	r3, [sp, #4]
    1dbe:	681a      	ldr	r2, [r3, #0]
    1dc0:	9b02      	ldr	r3, [sp, #8]
    1dc2:	1ad3      	subs	r3, r2, r3
    1dc4:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1dc6:	9b01      	ldr	r3, [sp, #4]
    1dc8:	9a02      	ldr	r2, [sp, #8]
    1dca:	601a      	str	r2, [r3, #0]

    return dif;
    1dcc:	9b03      	ldr	r3, [sp, #12]
}
    1dce:	4618      	mov	r0, r3
    1dd0:	b004      	add	sp, #16
    1dd2:	4770      	bx	lr
    1dd4:	e000e010 	.word	0xe000e010

00001dd8 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1dd8:	b082      	sub	sp, #8
    1dda:	9001      	str	r0, [sp, #4]
    1ddc:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1dde:	bf00      	nop
    1de0:	b002      	add	sp, #8
    1de2:	4770      	bx	lr

00001de4 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1de4:	b500      	push	{lr}
    1de6:	b085      	sub	sp, #20
    1de8:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1dea:	4b24      	ldr	r3, [pc, #144]	; (1e7c <Clock_Ip_UpdateDriverContext+0x98>)
    1dec:	2201      	movs	r2, #1
    1dee:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1df0:	4b23      	ldr	r3, [pc, #140]	; (1e80 <Clock_Ip_UpdateDriverContext+0x9c>)
    1df2:	681b      	ldr	r3, [r3, #0]
    1df4:	2102      	movs	r1, #2
    1df6:	4618      	mov	r0, r3
    1df8:	f003 fc32 	bl	5660 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1dfc:	2300      	movs	r3, #0
    1dfe:	f88d 300f 	strb.w	r3, [sp, #15]
    1e02:	e015      	b.n	1e30 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1e04:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e08:	9a01      	ldr	r2, [sp, #4]
    1e0a:	334a      	adds	r3, #74	; 0x4a
    1e0c:	00db      	lsls	r3, r3, #3
    1e0e:	4413      	add	r3, r2
    1e10:	6858      	ldr	r0, [r3, #4]
    1e12:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e16:	9a01      	ldr	r2, [sp, #4]
    1e18:	334a      	adds	r3, #74	; 0x4a
    1e1a:	00db      	lsls	r3, r3, #3
    1e1c:	4413      	add	r3, r2
    1e1e:	689b      	ldr	r3, [r3, #8]
    1e20:	4619      	mov	r1, r3
    1e22:	f001 fadc 	bl	33de <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1e26:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e2a:	3301      	adds	r3, #1
    1e2c:	f88d 300f 	strb.w	r3, [sp, #15]
    1e30:	9b01      	ldr	r3, [sp, #4]
    1e32:	7bdb      	ldrb	r3, [r3, #15]
    1e34:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e38:	429a      	cmp	r2, r3
    1e3a:	d3e3      	bcc.n	1e04 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1e3c:	f000 f824 	bl	1e88 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1e40:	2301      	movs	r3, #1
    1e42:	f88d 300f 	strb.w	r3, [sp, #15]
    1e46:	e00e      	b.n	1e66 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1e48:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e4c:	9b01      	ldr	r3, [sp, #4]
    1e4e:	327e      	adds	r2, #126	; 0x7e
    1e50:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1e54:	490b      	ldr	r1, [pc, #44]	; (1e84 <Clock_Ip_UpdateDriverContext+0xa0>)
    1e56:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e5a:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1e5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e60:	3301      	adds	r3, #1
    1e62:	f88d 300f 	strb.w	r3, [sp, #15]
    1e66:	9b01      	ldr	r3, [sp, #4]
    1e68:	7cdb      	ldrb	r3, [r3, #19]
    1e6a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e6e:	429a      	cmp	r2, r3
    1e70:	d3ea      	bcc.n	1e48 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1e72:	bf00      	nop
    1e74:	bf00      	nop
    1e76:	b005      	add	sp, #20
    1e78:	f85d fb04 	ldr.w	pc, [sp], #4
    1e7c:	1fff8b10 	.word	0x1fff8b10
    1e80:	1fff8b44 	.word	0x1fff8b44
    1e84:	1fff8b50 	.word	0x1fff8b50

00001e88 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1e88:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1e8a:	4b23      	ldr	r3, [pc, #140]	; (1f18 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1e8c:	781b      	ldrb	r3, [r3, #0]
    1e8e:	f083 0301 	eor.w	r3, r3, #1
    1e92:	b2db      	uxtb	r3, r3
    1e94:	2b00      	cmp	r3, #0
    1e96:	d03d      	beq.n	1f14 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1e98:	4b1f      	ldr	r3, [pc, #124]	; (1f18 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1e9a:	2201      	movs	r2, #1
    1e9c:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1e9e:	4b1f      	ldr	r3, [pc, #124]	; (1f1c <Clock_Ip_CallEmptyCallbacks+0x94>)
    1ea0:	685b      	ldr	r3, [r3, #4]
    1ea2:	2100      	movs	r1, #0
    1ea4:	2000      	movs	r0, #0
    1ea6:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1ea8:	4b1c      	ldr	r3, [pc, #112]	; (1f1c <Clock_Ip_CallEmptyCallbacks+0x94>)
    1eaa:	689b      	ldr	r3, [r3, #8]
    1eac:	2057      	movs	r0, #87	; 0x57
    1eae:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1eb0:	4b1b      	ldr	r3, [pc, #108]	; (1f20 <Clock_Ip_CallEmptyCallbacks+0x98>)
    1eb2:	681b      	ldr	r3, [r3, #0]
    1eb4:	2000      	movs	r0, #0
    1eb6:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1eb8:	4b1a      	ldr	r3, [pc, #104]	; (1f24 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1eba:	681b      	ldr	r3, [r3, #0]
    1ebc:	2000      	movs	r0, #0
    1ebe:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1ec0:	4b19      	ldr	r3, [pc, #100]	; (1f28 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1ec2:	681b      	ldr	r3, [r3, #0]
    1ec4:	2000      	movs	r0, #0
    1ec6:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ec8:	4b18      	ldr	r3, [pc, #96]	; (1f2c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1eca:	685b      	ldr	r3, [r3, #4]
    1ecc:	2000      	movs	r0, #0
    1ece:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1ed0:	4b16      	ldr	r3, [pc, #88]	; (1f2c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1ed2:	689b      	ldr	r3, [r3, #8]
    1ed4:	2057      	movs	r0, #87	; 0x57
    1ed6:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ed8:	4b15      	ldr	r3, [pc, #84]	; (1f30 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1eda:	681b      	ldr	r3, [r3, #0]
    1edc:	2000      	movs	r0, #0
    1ede:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1ee0:	4b13      	ldr	r3, [pc, #76]	; (1f30 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1ee2:	685b      	ldr	r3, [r3, #4]
    1ee4:	2100      	movs	r1, #0
    1ee6:	2057      	movs	r0, #87	; 0x57
    1ee8:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1eea:	4b12      	ldr	r3, [pc, #72]	; (1f34 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1eec:	681b      	ldr	r3, [r3, #0]
    1eee:	2000      	movs	r0, #0
    1ef0:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ef2:	4b11      	ldr	r3, [pc, #68]	; (1f38 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1ef4:	685b      	ldr	r3, [r3, #4]
    1ef6:	2000      	movs	r0, #0
    1ef8:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1efa:	4b0f      	ldr	r3, [pc, #60]	; (1f38 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1efc:	689b      	ldr	r3, [r3, #8]
    1efe:	2057      	movs	r0, #87	; 0x57
    1f00:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1f02:	4b0e      	ldr	r3, [pc, #56]	; (1f3c <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1f04:	685b      	ldr	r3, [r3, #4]
    1f06:	2000      	movs	r0, #0
    1f08:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1f0a:	4b0d      	ldr	r3, [pc, #52]	; (1f40 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1f0c:	681b      	ldr	r3, [r3, #0]
    1f0e:	2100      	movs	r1, #0
    1f10:	2000      	movs	r0, #0
    1f12:	4798      	blx	r3
    }
}
    1f14:	bf00      	nop
    1f16:	bd08      	pop	{r3, pc}
    1f18:	1fff8b48 	.word	0x1fff8b48
    1f1c:	0000ac58 	.word	0x0000ac58
    1f20:	0000ab6c 	.word	0x0000ab6c
    1f24:	0000aba8 	.word	0x0000aba8
    1f28:	0000abb0 	.word	0x0000abb0
    1f2c:	0000abd8 	.word	0x0000abd8
    1f30:	0000abe4 	.word	0x0000abe4
    1f34:	0000ac1c 	.word	0x0000ac1c
    1f38:	0000ac68 	.word	0x0000ac68
    1f3c:	0000ac94 	.word	0x0000ac94
    1f40:	0000ac90 	.word	0x0000ac90

00001f44 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1f44:	b500      	push	{lr}
    1f46:	b085      	sub	sp, #20
    1f48:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1f4a:	9b01      	ldr	r3, [sp, #4]
    1f4c:	7adb      	ldrb	r3, [r3, #11]
    1f4e:	9303      	str	r3, [sp, #12]
    1f50:	e01f      	b.n	1f92 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f52:	9b03      	ldr	r3, [sp, #12]
    1f54:	1e5a      	subs	r2, r3, #1
    1f56:	9b01      	ldr	r3, [sp, #4]
    1f58:	320d      	adds	r2, #13
    1f5a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1f5e:	495a      	ldr	r1, [pc, #360]	; (20c8 <Clock_Ip_ResetClockConfiguration+0x184>)
    1f60:	4613      	mov	r3, r2
    1f62:	00db      	lsls	r3, r3, #3
    1f64:	4413      	add	r3, r2
    1f66:	440b      	add	r3, r1
    1f68:	3301      	adds	r3, #1
    1f6a:	781b      	ldrb	r3, [r3, #0]
    1f6c:	461a      	mov	r2, r3
    1f6e:	4b57      	ldr	r3, [pc, #348]	; (20cc <Clock_Ip_ResetClockConfiguration+0x188>)
    1f70:	5c9b      	ldrb	r3, [r3, r2]
    1f72:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1f74:	4a56      	ldr	r2, [pc, #344]	; (20d0 <Clock_Ip_ResetClockConfiguration+0x18c>)
    1f76:	9b02      	ldr	r3, [sp, #8]
    1f78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f7c:	9a03      	ldr	r2, [sp, #12]
    1f7e:	3a01      	subs	r2, #1
    1f80:	320d      	adds	r2, #13
    1f82:	00d2      	lsls	r2, r2, #3
    1f84:	9901      	ldr	r1, [sp, #4]
    1f86:	440a      	add	r2, r1
    1f88:	4610      	mov	r0, r2
    1f8a:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1f8c:	9b03      	ldr	r3, [sp, #12]
    1f8e:	3b01      	subs	r3, #1
    1f90:	9303      	str	r3, [sp, #12]
    1f92:	9b03      	ldr	r3, [sp, #12]
    1f94:	2b00      	cmp	r3, #0
    1f96:	d1dc      	bne.n	1f52 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1f98:	9b01      	ldr	r3, [sp, #4]
    1f9a:	7b9b      	ldrb	r3, [r3, #14]
    1f9c:	9303      	str	r3, [sp, #12]
    1f9e:	e026      	b.n	1fee <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1fa0:	9b03      	ldr	r3, [sp, #12]
    1fa2:	3b01      	subs	r3, #1
    1fa4:	9a01      	ldr	r2, [sp, #4]
    1fa6:	3324      	adds	r3, #36	; 0x24
    1fa8:	011b      	lsls	r3, r3, #4
    1faa:	4413      	add	r3, r2
    1fac:	3304      	adds	r3, #4
    1fae:	681a      	ldr	r2, [r3, #0]
    1fb0:	4945      	ldr	r1, [pc, #276]	; (20c8 <Clock_Ip_ResetClockConfiguration+0x184>)
    1fb2:	4613      	mov	r3, r2
    1fb4:	00db      	lsls	r3, r3, #3
    1fb6:	4413      	add	r3, r2
    1fb8:	440b      	add	r3, r1
    1fba:	3301      	adds	r3, #1
    1fbc:	781b      	ldrb	r3, [r3, #0]
    1fbe:	461a      	mov	r2, r3
    1fc0:	4b44      	ldr	r3, [pc, #272]	; (20d4 <Clock_Ip_ResetClockConfiguration+0x190>)
    1fc2:	5c9b      	ldrb	r3, [r3, r2]
    1fc4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1fc6:	4944      	ldr	r1, [pc, #272]	; (20d8 <Clock_Ip_ResetClockConfiguration+0x194>)
    1fc8:	9a02      	ldr	r2, [sp, #8]
    1fca:	4613      	mov	r3, r2
    1fcc:	005b      	lsls	r3, r3, #1
    1fce:	4413      	add	r3, r2
    1fd0:	009b      	lsls	r3, r3, #2
    1fd2:	440b      	add	r3, r1
    1fd4:	681b      	ldr	r3, [r3, #0]
    1fd6:	9a03      	ldr	r2, [sp, #12]
    1fd8:	3a01      	subs	r2, #1
    1fda:	3224      	adds	r2, #36	; 0x24
    1fdc:	0112      	lsls	r2, r2, #4
    1fde:	9901      	ldr	r1, [sp, #4]
    1fe0:	440a      	add	r2, r1
    1fe2:	3204      	adds	r2, #4
    1fe4:	4610      	mov	r0, r2
    1fe6:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1fe8:	9b03      	ldr	r3, [sp, #12]
    1fea:	3b01      	subs	r3, #1
    1fec:	9303      	str	r3, [sp, #12]
    1fee:	9b03      	ldr	r3, [sp, #12]
    1ff0:	2b00      	cmp	r3, #0
    1ff2:	d1d5      	bne.n	1fa0 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1ff4:	9b01      	ldr	r3, [sp, #4]
    1ff6:	7a9b      	ldrb	r3, [r3, #10]
    1ff8:	9303      	str	r3, [sp, #12]
    1ffa:	e02a      	b.n	2052 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1ffc:	9b03      	ldr	r3, [sp, #12]
    1ffe:	1e5a      	subs	r2, r3, #1
    2000:	9901      	ldr	r1, [sp, #4]
    2002:	4613      	mov	r3, r2
    2004:	009b      	lsls	r3, r3, #2
    2006:	4413      	add	r3, r2
    2008:	00db      	lsls	r3, r3, #3
    200a:	440b      	add	r3, r1
    200c:	3340      	adds	r3, #64	; 0x40
    200e:	681a      	ldr	r2, [r3, #0]
    2010:	492d      	ldr	r1, [pc, #180]	; (20c8 <Clock_Ip_ResetClockConfiguration+0x184>)
    2012:	4613      	mov	r3, r2
    2014:	00db      	lsls	r3, r3, #3
    2016:	4413      	add	r3, r2
    2018:	440b      	add	r3, r1
    201a:	3301      	adds	r3, #1
    201c:	781b      	ldrb	r3, [r3, #0]
    201e:	461a      	mov	r2, r3
    2020:	4b2e      	ldr	r3, [pc, #184]	; (20dc <Clock_Ip_ResetClockConfiguration+0x198>)
    2022:	5c9b      	ldrb	r3, [r3, r2]
    2024:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2026:	492e      	ldr	r1, [pc, #184]	; (20e0 <Clock_Ip_ResetClockConfiguration+0x19c>)
    2028:	9a02      	ldr	r2, [sp, #8]
    202a:	4613      	mov	r3, r2
    202c:	009b      	lsls	r3, r3, #2
    202e:	4413      	add	r3, r2
    2030:	009b      	lsls	r3, r3, #2
    2032:	440b      	add	r3, r1
    2034:	6819      	ldr	r1, [r3, #0]
    2036:	9b03      	ldr	r3, [sp, #12]
    2038:	1e5a      	subs	r2, r3, #1
    203a:	4613      	mov	r3, r2
    203c:	009b      	lsls	r3, r3, #2
    203e:	4413      	add	r3, r2
    2040:	00db      	lsls	r3, r3, #3
    2042:	3340      	adds	r3, #64	; 0x40
    2044:	9a01      	ldr	r2, [sp, #4]
    2046:	4413      	add	r3, r2
    2048:	4618      	mov	r0, r3
    204a:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    204c:	9b03      	ldr	r3, [sp, #12]
    204e:	3b01      	subs	r3, #1
    2050:	9303      	str	r3, [sp, #12]
    2052:	9b03      	ldr	r3, [sp, #12]
    2054:	2b00      	cmp	r3, #0
    2056:	d1d1      	bne.n	1ffc <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2058:	9b01      	ldr	r3, [sp, #4]
    205a:	7a5b      	ldrb	r3, [r3, #9]
    205c:	9303      	str	r3, [sp, #12]
    205e:	e02b      	b.n	20b8 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2060:	9b03      	ldr	r3, [sp, #12]
    2062:	1e5a      	subs	r2, r3, #1
    2064:	9901      	ldr	r1, [sp, #4]
    2066:	4613      	mov	r3, r2
    2068:	009b      	lsls	r3, r3, #2
    206a:	4413      	add	r3, r2
    206c:	009b      	lsls	r3, r3, #2
    206e:	440b      	add	r3, r1
    2070:	332c      	adds	r3, #44	; 0x2c
    2072:	681a      	ldr	r2, [r3, #0]
    2074:	4914      	ldr	r1, [pc, #80]	; (20c8 <Clock_Ip_ResetClockConfiguration+0x184>)
    2076:	4613      	mov	r3, r2
    2078:	00db      	lsls	r3, r3, #3
    207a:	4413      	add	r3, r2
    207c:	440b      	add	r3, r1
    207e:	3301      	adds	r3, #1
    2080:	781b      	ldrb	r3, [r3, #0]
    2082:	461a      	mov	r2, r3
    2084:	4b17      	ldr	r3, [pc, #92]	; (20e4 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    2086:	5c9b      	ldrb	r3, [r3, r2]
    2088:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    208a:	4917      	ldr	r1, [pc, #92]	; (20e8 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    208c:	9a02      	ldr	r2, [sp, #8]
    208e:	4613      	mov	r3, r2
    2090:	009b      	lsls	r3, r3, #2
    2092:	4413      	add	r3, r2
    2094:	009b      	lsls	r3, r3, #2
    2096:	440b      	add	r3, r1
    2098:	6819      	ldr	r1, [r3, #0]
    209a:	9b03      	ldr	r3, [sp, #12]
    209c:	1e5a      	subs	r2, r3, #1
    209e:	4613      	mov	r3, r2
    20a0:	009b      	lsls	r3, r3, #2
    20a2:	4413      	add	r3, r2
    20a4:	009b      	lsls	r3, r3, #2
    20a6:	3328      	adds	r3, #40	; 0x28
    20a8:	9a01      	ldr	r2, [sp, #4]
    20aa:	4413      	add	r3, r2
    20ac:	3304      	adds	r3, #4
    20ae:	4618      	mov	r0, r3
    20b0:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    20b2:	9b03      	ldr	r3, [sp, #12]
    20b4:	3b01      	subs	r3, #1
    20b6:	9303      	str	r3, [sp, #12]
    20b8:	9b03      	ldr	r3, [sp, #12]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d1d0      	bne.n	2060 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    20be:	bf00      	nop
    20c0:	bf00      	nop
    20c2:	b005      	add	sp, #20
    20c4:	f85d fb04 	ldr.w	pc, [sp], #4
    20c8:	0000a65c 	.word	0x0000a65c
    20cc:	0000a62c 	.word	0x0000a62c
    20d0:	0000ac94 	.word	0x0000ac94
    20d4:	0000a60c 	.word	0x0000a60c
    20d8:	0000abd8 	.word	0x0000abd8
    20dc:	0000a61c 	.word	0x0000a61c
    20e0:	0000ac68 	.word	0x0000ac68
    20e4:	0000a5dc 	.word	0x0000a5dc
    20e8:	0000abb0 	.word	0x0000abb0

000020ec <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    20ec:	b500      	push	{lr}
    20ee:	b085      	sub	sp, #20
    20f0:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    20f2:	2301      	movs	r3, #1
    20f4:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    20f6:	9801      	ldr	r0, [sp, #4]
    20f8:	f000 f818 	bl	212c <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    20fc:	4b0a      	ldr	r3, [pc, #40]	; (2128 <Clock_Ip_Init+0x3c>)
    20fe:	781b      	ldrb	r3, [r3, #0]
    2100:	2b00      	cmp	r3, #0
    2102:	d00a      	beq.n	211a <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2104:	f000 fb74 	bl	27f0 <Clock_Ip_GetPllStatus>
    2108:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    210a:	9b02      	ldr	r3, [sp, #8]
    210c:	2b00      	cmp	r3, #0
    210e:	d106      	bne.n	211e <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2110:	f000 fbf2 	bl	28f8 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2114:	2300      	movs	r3, #0
    2116:	9303      	str	r3, [sp, #12]
    2118:	e001      	b.n	211e <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    211a:	2300      	movs	r3, #0
    211c:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    211e:	9b03      	ldr	r3, [sp, #12]
}
    2120:	4618      	mov	r0, r3
    2122:	b005      	add	sp, #20
    2124:	f85d fb04 	ldr.w	pc, [sp], #4
    2128:	1fff8b4c 	.word	0x1fff8b4c

0000212c <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    212c:	b510      	push	{r4, lr}
    212e:	b084      	sub	sp, #16
    2130:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2132:	4a9f      	ldr	r2, [pc, #636]	; (23b0 <Clock_Ip_InitClock+0x284>)
    2134:	9b01      	ldr	r3, [sp, #4]
    2136:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2138:	2101      	movs	r1, #1
    213a:	9801      	ldr	r0, [sp, #4]
    213c:	f003 fa90 	bl	5660 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2140:	4b9b      	ldr	r3, [pc, #620]	; (23b0 <Clock_Ip_InitClock+0x284>)
    2142:	681b      	ldr	r3, [r3, #0]
    2144:	2b00      	cmp	r3, #0
    2146:	d030      	beq.n	21aa <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2148:	2300      	movs	r3, #0
    214a:	9303      	str	r3, [sp, #12]
    214c:	e027      	b.n	219e <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    214e:	9901      	ldr	r1, [sp, #4]
    2150:	9a03      	ldr	r2, [sp, #12]
    2152:	4613      	mov	r3, r2
    2154:	009b      	lsls	r3, r3, #2
    2156:	4413      	add	r3, r2
    2158:	009b      	lsls	r3, r3, #2
    215a:	440b      	add	r3, r1
    215c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2160:	681a      	ldr	r2, [r3, #0]
    2162:	4994      	ldr	r1, [pc, #592]	; (23b4 <Clock_Ip_InitClock+0x288>)
    2164:	4613      	mov	r3, r2
    2166:	00db      	lsls	r3, r3, #3
    2168:	4413      	add	r3, r2
    216a:	440b      	add	r3, r1
    216c:	3301      	adds	r3, #1
    216e:	781b      	ldrb	r3, [r3, #0]
    2170:	461a      	mov	r2, r3
    2172:	4b91      	ldr	r3, [pc, #580]	; (23b8 <Clock_Ip_InitClock+0x28c>)
    2174:	5c9b      	ldrb	r3, [r3, r2]
    2176:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2178:	4a90      	ldr	r2, [pc, #576]	; (23bc <Clock_Ip_InitClock+0x290>)
    217a:	9b02      	ldr	r3, [sp, #8]
    217c:	011b      	lsls	r3, r3, #4
    217e:	4413      	add	r3, r2
    2180:	6819      	ldr	r1, [r3, #0]
    2182:	9a03      	ldr	r2, [sp, #12]
    2184:	4613      	mov	r3, r2
    2186:	009b      	lsls	r3, r3, #2
    2188:	4413      	add	r3, r2
    218a:	009b      	lsls	r3, r3, #2
    218c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2190:	9a01      	ldr	r2, [sp, #4]
    2192:	4413      	add	r3, r2
    2194:	4618      	mov	r0, r3
    2196:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2198:	9b03      	ldr	r3, [sp, #12]
    219a:	3301      	adds	r3, #1
    219c:	9303      	str	r3, [sp, #12]
    219e:	9b01      	ldr	r3, [sp, #4]
    21a0:	7c9b      	ldrb	r3, [r3, #18]
    21a2:	461a      	mov	r2, r3
    21a4:	9b03      	ldr	r3, [sp, #12]
    21a6:	4293      	cmp	r3, r2
    21a8:	d3d1      	bcc.n	214e <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    21aa:	9801      	ldr	r0, [sp, #4]
    21ac:	f7ff feca 	bl	1f44 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    21b0:	2300      	movs	r3, #0
    21b2:	9303      	str	r3, [sp, #12]
    21b4:	e029      	b.n	220a <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    21b6:	9901      	ldr	r1, [sp, #4]
    21b8:	9a03      	ldr	r2, [sp, #12]
    21ba:	4613      	mov	r3, r2
    21bc:	005b      	lsls	r3, r3, #1
    21be:	4413      	add	r3, r2
    21c0:	009b      	lsls	r3, r3, #2
    21c2:	440b      	add	r3, r1
    21c4:	3314      	adds	r3, #20
    21c6:	681a      	ldr	r2, [r3, #0]
    21c8:	497a      	ldr	r1, [pc, #488]	; (23b4 <Clock_Ip_InitClock+0x288>)
    21ca:	4613      	mov	r3, r2
    21cc:	00db      	lsls	r3, r3, #3
    21ce:	4413      	add	r3, r2
    21d0:	440b      	add	r3, r1
    21d2:	3301      	adds	r3, #1
    21d4:	781b      	ldrb	r3, [r3, #0]
    21d6:	461a      	mov	r2, r3
    21d8:	4b79      	ldr	r3, [pc, #484]	; (23c0 <Clock_Ip_InitClock+0x294>)
    21da:	5c9b      	ldrb	r3, [r3, r2]
    21dc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    21de:	4979      	ldr	r1, [pc, #484]	; (23c4 <Clock_Ip_InitClock+0x298>)
    21e0:	9a02      	ldr	r2, [sp, #8]
    21e2:	4613      	mov	r3, r2
    21e4:	005b      	lsls	r3, r3, #1
    21e6:	4413      	add	r3, r2
    21e8:	009b      	lsls	r3, r3, #2
    21ea:	440b      	add	r3, r1
    21ec:	6819      	ldr	r1, [r3, #0]
    21ee:	9a03      	ldr	r2, [sp, #12]
    21f0:	4613      	mov	r3, r2
    21f2:	005b      	lsls	r3, r3, #1
    21f4:	4413      	add	r3, r2
    21f6:	009b      	lsls	r3, r3, #2
    21f8:	3310      	adds	r3, #16
    21fa:	9a01      	ldr	r2, [sp, #4]
    21fc:	4413      	add	r3, r2
    21fe:	3304      	adds	r3, #4
    2200:	4618      	mov	r0, r3
    2202:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2204:	9b03      	ldr	r3, [sp, #12]
    2206:	3301      	adds	r3, #1
    2208:	9303      	str	r3, [sp, #12]
    220a:	9b01      	ldr	r3, [sp, #4]
    220c:	7a1b      	ldrb	r3, [r3, #8]
    220e:	461a      	mov	r2, r3
    2210:	9b03      	ldr	r3, [sp, #12]
    2212:	4293      	cmp	r3, r2
    2214:	d3cf      	bcc.n	21b6 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2216:	2300      	movs	r3, #0
    2218:	9303      	str	r3, [sp, #12]
    221a:	e02a      	b.n	2272 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    221c:	9901      	ldr	r1, [sp, #4]
    221e:	9a03      	ldr	r2, [sp, #12]
    2220:	4613      	mov	r3, r2
    2222:	009b      	lsls	r3, r3, #2
    2224:	4413      	add	r3, r2
    2226:	009b      	lsls	r3, r3, #2
    2228:	440b      	add	r3, r1
    222a:	332c      	adds	r3, #44	; 0x2c
    222c:	681a      	ldr	r2, [r3, #0]
    222e:	4961      	ldr	r1, [pc, #388]	; (23b4 <Clock_Ip_InitClock+0x288>)
    2230:	4613      	mov	r3, r2
    2232:	00db      	lsls	r3, r3, #3
    2234:	4413      	add	r3, r2
    2236:	440b      	add	r3, r1
    2238:	3301      	adds	r3, #1
    223a:	781b      	ldrb	r3, [r3, #0]
    223c:	461a      	mov	r2, r3
    223e:	4b62      	ldr	r3, [pc, #392]	; (23c8 <Clock_Ip_InitClock+0x29c>)
    2240:	5c9b      	ldrb	r3, [r3, r2]
    2242:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2244:	4961      	ldr	r1, [pc, #388]	; (23cc <Clock_Ip_InitClock+0x2a0>)
    2246:	9a02      	ldr	r2, [sp, #8]
    2248:	4613      	mov	r3, r2
    224a:	009b      	lsls	r3, r3, #2
    224c:	4413      	add	r3, r2
    224e:	009b      	lsls	r3, r3, #2
    2250:	440b      	add	r3, r1
    2252:	3304      	adds	r3, #4
    2254:	6819      	ldr	r1, [r3, #0]
    2256:	9a03      	ldr	r2, [sp, #12]
    2258:	4613      	mov	r3, r2
    225a:	009b      	lsls	r3, r3, #2
    225c:	4413      	add	r3, r2
    225e:	009b      	lsls	r3, r3, #2
    2260:	3328      	adds	r3, #40	; 0x28
    2262:	9a01      	ldr	r2, [sp, #4]
    2264:	4413      	add	r3, r2
    2266:	3304      	adds	r3, #4
    2268:	4618      	mov	r0, r3
    226a:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    226c:	9b03      	ldr	r3, [sp, #12]
    226e:	3301      	adds	r3, #1
    2270:	9303      	str	r3, [sp, #12]
    2272:	9b01      	ldr	r3, [sp, #4]
    2274:	7a5b      	ldrb	r3, [r3, #9]
    2276:	461a      	mov	r2, r3
    2278:	9b03      	ldr	r3, [sp, #12]
    227a:	4293      	cmp	r3, r2
    227c:	d3ce      	bcc.n	221c <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    227e:	9801      	ldr	r0, [sp, #4]
    2280:	f7ff fdb0 	bl	1de4 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2284:	2300      	movs	r3, #0
    2286:	9303      	str	r3, [sp, #12]
    2288:	e028      	b.n	22dc <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    228a:	9901      	ldr	r1, [sp, #4]
    228c:	9a03      	ldr	r2, [sp, #12]
    228e:	4613      	mov	r3, r2
    2290:	009b      	lsls	r3, r3, #2
    2292:	4413      	add	r3, r2
    2294:	009b      	lsls	r3, r3, #2
    2296:	440b      	add	r3, r1
    2298:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    229c:	681a      	ldr	r2, [r3, #0]
    229e:	4945      	ldr	r1, [pc, #276]	; (23b4 <Clock_Ip_InitClock+0x288>)
    22a0:	4613      	mov	r3, r2
    22a2:	00db      	lsls	r3, r3, #3
    22a4:	4413      	add	r3, r2
    22a6:	440b      	add	r3, r1
    22a8:	3301      	adds	r3, #1
    22aa:	781b      	ldrb	r3, [r3, #0]
    22ac:	461a      	mov	r2, r3
    22ae:	4b48      	ldr	r3, [pc, #288]	; (23d0 <Clock_Ip_InitClock+0x2a4>)
    22b0:	5c9b      	ldrb	r3, [r3, r2]
    22b2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    22b4:	4a47      	ldr	r2, [pc, #284]	; (23d4 <Clock_Ip_InitClock+0x2a8>)
    22b6:	9b02      	ldr	r3, [sp, #8]
    22b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    22bc:	9a03      	ldr	r2, [sp, #12]
    22be:	4613      	mov	r3, r2
    22c0:	009b      	lsls	r3, r3, #2
    22c2:	4413      	add	r3, r2
    22c4:	009b      	lsls	r3, r3, #2
    22c6:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    22ca:	9a01      	ldr	r2, [sp, #4]
    22cc:	4413      	add	r3, r2
    22ce:	3304      	adds	r3, #4
    22d0:	9903      	ldr	r1, [sp, #12]
    22d2:	4618      	mov	r0, r3
    22d4:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    22d6:	9b03      	ldr	r3, [sp, #12]
    22d8:	3301      	adds	r3, #1
    22da:	9303      	str	r3, [sp, #12]
    22dc:	9b01      	ldr	r3, [sp, #4]
    22de:	7c5b      	ldrb	r3, [r3, #17]
    22e0:	461a      	mov	r2, r3
    22e2:	9b03      	ldr	r3, [sp, #12]
    22e4:	4293      	cmp	r3, r2
    22e6:	d3d0      	bcc.n	228a <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    22e8:	2300      	movs	r3, #0
    22ea:	9303      	str	r3, [sp, #12]
    22ec:	e026      	b.n	233c <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    22ee:	9901      	ldr	r1, [sp, #4]
    22f0:	9a03      	ldr	r2, [sp, #12]
    22f2:	4613      	mov	r3, r2
    22f4:	005b      	lsls	r3, r3, #1
    22f6:	4413      	add	r3, r2
    22f8:	009b      	lsls	r3, r3, #2
    22fa:	440b      	add	r3, r1
    22fc:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2300:	681a      	ldr	r2, [r3, #0]
    2302:	492c      	ldr	r1, [pc, #176]	; (23b4 <Clock_Ip_InitClock+0x288>)
    2304:	4613      	mov	r3, r2
    2306:	00db      	lsls	r3, r3, #3
    2308:	4413      	add	r3, r2
    230a:	440b      	add	r3, r1
    230c:	3301      	adds	r3, #1
    230e:	781b      	ldrb	r3, [r3, #0]
    2310:	461a      	mov	r2, r3
    2312:	4b31      	ldr	r3, [pc, #196]	; (23d8 <Clock_Ip_InitClock+0x2ac>)
    2314:	5c9b      	ldrb	r3, [r3, r2]
    2316:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2318:	4a30      	ldr	r2, [pc, #192]	; (23dc <Clock_Ip_InitClock+0x2b0>)
    231a:	9b02      	ldr	r3, [sp, #8]
    231c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2320:	9a03      	ldr	r2, [sp, #12]
    2322:	4613      	mov	r3, r2
    2324:	005b      	lsls	r3, r3, #1
    2326:	4413      	add	r3, r2
    2328:	009b      	lsls	r3, r3, #2
    232a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    232e:	9a01      	ldr	r2, [sp, #4]
    2330:	4413      	add	r3, r2
    2332:	4618      	mov	r0, r3
    2334:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2336:	9b03      	ldr	r3, [sp, #12]
    2338:	3301      	adds	r3, #1
    233a:	9303      	str	r3, [sp, #12]
    233c:	9b01      	ldr	r3, [sp, #4]
    233e:	7b5b      	ldrb	r3, [r3, #13]
    2340:	461a      	mov	r2, r3
    2342:	9b03      	ldr	r3, [sp, #12]
    2344:	4293      	cmp	r3, r2
    2346:	d3d2      	bcc.n	22ee <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2348:	2300      	movs	r3, #0
    234a:	9303      	str	r3, [sp, #12]
    234c:	e026      	b.n	239c <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    234e:	9901      	ldr	r1, [sp, #4]
    2350:	9a03      	ldr	r2, [sp, #12]
    2352:	4613      	mov	r3, r2
    2354:	005b      	lsls	r3, r3, #1
    2356:	4413      	add	r3, r2
    2358:	009b      	lsls	r3, r3, #2
    235a:	440b      	add	r3, r1
    235c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2360:	681a      	ldr	r2, [r3, #0]
    2362:	4914      	ldr	r1, [pc, #80]	; (23b4 <Clock_Ip_InitClock+0x288>)
    2364:	4613      	mov	r3, r2
    2366:	00db      	lsls	r3, r3, #3
    2368:	4413      	add	r3, r2
    236a:	440b      	add	r3, r1
    236c:	3301      	adds	r3, #1
    236e:	781b      	ldrb	r3, [r3, #0]
    2370:	461a      	mov	r2, r3
    2372:	4b1b      	ldr	r3, [pc, #108]	; (23e0 <Clock_Ip_InitClock+0x2b4>)
    2374:	5c9b      	ldrb	r3, [r3, r2]
    2376:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    2378:	4a1a      	ldr	r2, [pc, #104]	; (23e4 <Clock_Ip_InitClock+0x2b8>)
    237a:	9b02      	ldr	r3, [sp, #8]
    237c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    2380:	9a03      	ldr	r2, [sp, #12]
    2382:	4613      	mov	r3, r2
    2384:	005b      	lsls	r3, r3, #1
    2386:	4413      	add	r3, r2
    2388:	009b      	lsls	r3, r3, #2
    238a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    238e:	9a01      	ldr	r2, [sp, #4]
    2390:	4413      	add	r3, r2
    2392:	4618      	mov	r0, r3
    2394:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2396:	9b03      	ldr	r3, [sp, #12]
    2398:	3301      	adds	r3, #1
    239a:	9303      	str	r3, [sp, #12]
    239c:	9b01      	ldr	r3, [sp, #4]
    239e:	7b1b      	ldrb	r3, [r3, #12]
    23a0:	461a      	mov	r2, r3
    23a2:	9b03      	ldr	r3, [sp, #12]
    23a4:	4293      	cmp	r3, r2
    23a6:	d3d2      	bcc.n	234e <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    23a8:	2300      	movs	r3, #0
    23aa:	9303      	str	r3, [sp, #12]
    23ac:	e044      	b.n	2438 <Clock_Ip_InitClock+0x30c>
    23ae:	bf00      	nop
    23b0:	1fff8b44 	.word	0x1fff8b44
    23b4:	0000a65c 	.word	0x0000a65c
    23b8:	0000a64c 	.word	0x0000a64c
    23bc:	0000ac58 	.word	0x0000ac58
    23c0:	0000a5ec 	.word	0x0000a5ec
    23c4:	0000ac1c 	.word	0x0000ac1c
    23c8:	0000a5dc 	.word	0x0000a5dc
    23cc:	0000abb0 	.word	0x0000abb0
    23d0:	0000a63c 	.word	0x0000a63c
    23d4:	0000ac90 	.word	0x0000ac90
    23d8:	0000a5cc 	.word	0x0000a5cc
    23dc:	0000aba8 	.word	0x0000aba8
    23e0:	0000a5bc 	.word	0x0000a5bc
    23e4:	0000ab6c 	.word	0x0000ab6c
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    23e8:	9901      	ldr	r1, [sp, #4]
    23ea:	9a03      	ldr	r2, [sp, #12]
    23ec:	4613      	mov	r3, r2
    23ee:	005b      	lsls	r3, r3, #1
    23f0:	4413      	add	r3, r2
    23f2:	009b      	lsls	r3, r3, #2
    23f4:	440b      	add	r3, r1
    23f6:	f503 730e 	add.w	r3, r3, #568	; 0x238
    23fa:	681a      	ldr	r2, [r3, #0]
    23fc:	49ac      	ldr	r1, [pc, #688]	; (26b0 <Clock_Ip_InitClock+0x584>)
    23fe:	4613      	mov	r3, r2
    2400:	00db      	lsls	r3, r3, #3
    2402:	4413      	add	r3, r2
    2404:	440b      	add	r3, r1
    2406:	3301      	adds	r3, #1
    2408:	781b      	ldrb	r3, [r3, #0]
    240a:	461a      	mov	r2, r3
    240c:	4ba9      	ldr	r3, [pc, #676]	; (26b4 <Clock_Ip_InitClock+0x588>)
    240e:	5c9b      	ldrb	r3, [r3, r2]
    2410:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    2412:	4aa9      	ldr	r2, [pc, #676]	; (26b8 <Clock_Ip_InitClock+0x58c>)
    2414:	9b02      	ldr	r3, [sp, #8]
    2416:	00db      	lsls	r3, r3, #3
    2418:	4413      	add	r3, r2
    241a:	6859      	ldr	r1, [r3, #4]
    241c:	9a03      	ldr	r2, [sp, #12]
    241e:	4613      	mov	r3, r2
    2420:	005b      	lsls	r3, r3, #1
    2422:	4413      	add	r3, r2
    2424:	009b      	lsls	r3, r3, #2
    2426:	f503 730e 	add.w	r3, r3, #568	; 0x238
    242a:	9a01      	ldr	r2, [sp, #4]
    242c:	4413      	add	r3, r2
    242e:	4618      	mov	r0, r3
    2430:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2432:	9b03      	ldr	r3, [sp, #12]
    2434:	3301      	adds	r3, #1
    2436:	9303      	str	r3, [sp, #12]
    2438:	9b01      	ldr	r3, [sp, #4]
    243a:	7b5b      	ldrb	r3, [r3, #13]
    243c:	461a      	mov	r2, r3
    243e:	9b03      	ldr	r3, [sp, #12]
    2440:	4293      	cmp	r3, r2
    2442:	d3d1      	bcc.n	23e8 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2444:	2300      	movs	r3, #0
    2446:	9303      	str	r3, [sp, #12]
    2448:	e029      	b.n	249e <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    244a:	9901      	ldr	r1, [sp, #4]
    244c:	9a03      	ldr	r2, [sp, #12]
    244e:	4613      	mov	r3, r2
    2450:	009b      	lsls	r3, r3, #2
    2452:	4413      	add	r3, r2
    2454:	00db      	lsls	r3, r3, #3
    2456:	440b      	add	r3, r1
    2458:	3340      	adds	r3, #64	; 0x40
    245a:	681a      	ldr	r2, [r3, #0]
    245c:	4994      	ldr	r1, [pc, #592]	; (26b0 <Clock_Ip_InitClock+0x584>)
    245e:	4613      	mov	r3, r2
    2460:	00db      	lsls	r3, r3, #3
    2462:	4413      	add	r3, r2
    2464:	440b      	add	r3, r1
    2466:	3301      	adds	r3, #1
    2468:	781b      	ldrb	r3, [r3, #0]
    246a:	461a      	mov	r2, r3
    246c:	4b93      	ldr	r3, [pc, #588]	; (26bc <Clock_Ip_InitClock+0x590>)
    246e:	5c9b      	ldrb	r3, [r3, r2]
    2470:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    2472:	4993      	ldr	r1, [pc, #588]	; (26c0 <Clock_Ip_InitClock+0x594>)
    2474:	9a02      	ldr	r2, [sp, #8]
    2476:	4613      	mov	r3, r2
    2478:	009b      	lsls	r3, r3, #2
    247a:	4413      	add	r3, r2
    247c:	009b      	lsls	r3, r3, #2
    247e:	440b      	add	r3, r1
    2480:	3304      	adds	r3, #4
    2482:	6819      	ldr	r1, [r3, #0]
    2484:	9a03      	ldr	r2, [sp, #12]
    2486:	4613      	mov	r3, r2
    2488:	009b      	lsls	r3, r3, #2
    248a:	4413      	add	r3, r2
    248c:	00db      	lsls	r3, r3, #3
    248e:	3340      	adds	r3, #64	; 0x40
    2490:	9a01      	ldr	r2, [sp, #4]
    2492:	4413      	add	r3, r2
    2494:	4618      	mov	r0, r3
    2496:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2498:	9b03      	ldr	r3, [sp, #12]
    249a:	3301      	adds	r3, #1
    249c:	9303      	str	r3, [sp, #12]
    249e:	9b01      	ldr	r3, [sp, #4]
    24a0:	7a9b      	ldrb	r3, [r3, #10]
    24a2:	461a      	mov	r2, r3
    24a4:	9b03      	ldr	r3, [sp, #12]
    24a6:	4293      	cmp	r3, r2
    24a8:	d3cf      	bcc.n	244a <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    24aa:	2300      	movs	r3, #0
    24ac:	9303      	str	r3, [sp, #12]
    24ae:	e029      	b.n	2504 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    24b0:	9901      	ldr	r1, [sp, #4]
    24b2:	9a03      	ldr	r2, [sp, #12]
    24b4:	4613      	mov	r3, r2
    24b6:	009b      	lsls	r3, r3, #2
    24b8:	4413      	add	r3, r2
    24ba:	009b      	lsls	r3, r3, #2
    24bc:	440b      	add	r3, r1
    24be:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24c2:	681a      	ldr	r2, [r3, #0]
    24c4:	497a      	ldr	r1, [pc, #488]	; (26b0 <Clock_Ip_InitClock+0x584>)
    24c6:	4613      	mov	r3, r2
    24c8:	00db      	lsls	r3, r3, #3
    24ca:	4413      	add	r3, r2
    24cc:	440b      	add	r3, r1
    24ce:	3301      	adds	r3, #1
    24d0:	781b      	ldrb	r3, [r3, #0]
    24d2:	461a      	mov	r2, r3
    24d4:	4b7b      	ldr	r3, [pc, #492]	; (26c4 <Clock_Ip_InitClock+0x598>)
    24d6:	5c9b      	ldrb	r3, [r3, r2]
    24d8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    24da:	4a7b      	ldr	r2, [pc, #492]	; (26c8 <Clock_Ip_InitClock+0x59c>)
    24dc:	9b02      	ldr	r3, [sp, #8]
    24de:	011b      	lsls	r3, r3, #4
    24e0:	4413      	add	r3, r2
    24e2:	3304      	adds	r3, #4
    24e4:	681c      	ldr	r4, [r3, #0]
    24e6:	9a03      	ldr	r2, [sp, #12]
    24e8:	4613      	mov	r3, r2
    24ea:	009b      	lsls	r3, r3, #2
    24ec:	4413      	add	r3, r2
    24ee:	009b      	lsls	r3, r3, #2
    24f0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24f4:	9a01      	ldr	r2, [sp, #4]
    24f6:	4413      	add	r3, r2
    24f8:	9903      	ldr	r1, [sp, #12]
    24fa:	4618      	mov	r0, r3
    24fc:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    24fe:	9b03      	ldr	r3, [sp, #12]
    2500:	3301      	adds	r3, #1
    2502:	9303      	str	r3, [sp, #12]
    2504:	9b01      	ldr	r3, [sp, #4]
    2506:	7c9b      	ldrb	r3, [r3, #18]
    2508:	461a      	mov	r2, r3
    250a:	9b03      	ldr	r3, [sp, #12]
    250c:	4293      	cmp	r3, r2
    250e:	d3cf      	bcc.n	24b0 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2510:	2300      	movs	r3, #0
    2512:	9303      	str	r3, [sp, #12]
    2514:	e02a      	b.n	256c <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2516:	9901      	ldr	r1, [sp, #4]
    2518:	9a03      	ldr	r2, [sp, #12]
    251a:	4613      	mov	r3, r2
    251c:	009b      	lsls	r3, r3, #2
    251e:	4413      	add	r3, r2
    2520:	009b      	lsls	r3, r3, #2
    2522:	440b      	add	r3, r1
    2524:	332c      	adds	r3, #44	; 0x2c
    2526:	681a      	ldr	r2, [r3, #0]
    2528:	4961      	ldr	r1, [pc, #388]	; (26b0 <Clock_Ip_InitClock+0x584>)
    252a:	4613      	mov	r3, r2
    252c:	00db      	lsls	r3, r3, #3
    252e:	4413      	add	r3, r2
    2530:	440b      	add	r3, r1
    2532:	3301      	adds	r3, #1
    2534:	781b      	ldrb	r3, [r3, #0]
    2536:	461a      	mov	r2, r3
    2538:	4b64      	ldr	r3, [pc, #400]	; (26cc <Clock_Ip_InitClock+0x5a0>)
    253a:	5c9b      	ldrb	r3, [r3, r2]
    253c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    253e:	4964      	ldr	r1, [pc, #400]	; (26d0 <Clock_Ip_InitClock+0x5a4>)
    2540:	9a02      	ldr	r2, [sp, #8]
    2542:	4613      	mov	r3, r2
    2544:	009b      	lsls	r3, r3, #2
    2546:	4413      	add	r3, r2
    2548:	009b      	lsls	r3, r3, #2
    254a:	440b      	add	r3, r1
    254c:	3308      	adds	r3, #8
    254e:	6819      	ldr	r1, [r3, #0]
    2550:	9a03      	ldr	r2, [sp, #12]
    2552:	4613      	mov	r3, r2
    2554:	009b      	lsls	r3, r3, #2
    2556:	4413      	add	r3, r2
    2558:	009b      	lsls	r3, r3, #2
    255a:	3328      	adds	r3, #40	; 0x28
    255c:	9a01      	ldr	r2, [sp, #4]
    255e:	4413      	add	r3, r2
    2560:	3304      	adds	r3, #4
    2562:	4618      	mov	r0, r3
    2564:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2566:	9b03      	ldr	r3, [sp, #12]
    2568:	3301      	adds	r3, #1
    256a:	9303      	str	r3, [sp, #12]
    256c:	9b01      	ldr	r3, [sp, #4]
    256e:	7a5b      	ldrb	r3, [r3, #9]
    2570:	461a      	mov	r2, r3
    2572:	9b03      	ldr	r3, [sp, #12]
    2574:	4293      	cmp	r3, r2
    2576:	d3ce      	bcc.n	2516 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2578:	2300      	movs	r3, #0
    257a:	9303      	str	r3, [sp, #12]
    257c:	e029      	b.n	25d2 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    257e:	9901      	ldr	r1, [sp, #4]
    2580:	9a03      	ldr	r2, [sp, #12]
    2582:	4613      	mov	r3, r2
    2584:	009b      	lsls	r3, r3, #2
    2586:	4413      	add	r3, r2
    2588:	00db      	lsls	r3, r3, #3
    258a:	440b      	add	r3, r1
    258c:	3340      	adds	r3, #64	; 0x40
    258e:	681a      	ldr	r2, [r3, #0]
    2590:	4947      	ldr	r1, [pc, #284]	; (26b0 <Clock_Ip_InitClock+0x584>)
    2592:	4613      	mov	r3, r2
    2594:	00db      	lsls	r3, r3, #3
    2596:	4413      	add	r3, r2
    2598:	440b      	add	r3, r1
    259a:	3301      	adds	r3, #1
    259c:	781b      	ldrb	r3, [r3, #0]
    259e:	461a      	mov	r2, r3
    25a0:	4b46      	ldr	r3, [pc, #280]	; (26bc <Clock_Ip_InitClock+0x590>)
    25a2:	5c9b      	ldrb	r3, [r3, r2]
    25a4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    25a6:	4946      	ldr	r1, [pc, #280]	; (26c0 <Clock_Ip_InitClock+0x594>)
    25a8:	9a02      	ldr	r2, [sp, #8]
    25aa:	4613      	mov	r3, r2
    25ac:	009b      	lsls	r3, r3, #2
    25ae:	4413      	add	r3, r2
    25b0:	009b      	lsls	r3, r3, #2
    25b2:	440b      	add	r3, r1
    25b4:	330c      	adds	r3, #12
    25b6:	6819      	ldr	r1, [r3, #0]
    25b8:	9a03      	ldr	r2, [sp, #12]
    25ba:	4613      	mov	r3, r2
    25bc:	009b      	lsls	r3, r3, #2
    25be:	4413      	add	r3, r2
    25c0:	00db      	lsls	r3, r3, #3
    25c2:	3340      	adds	r3, #64	; 0x40
    25c4:	9a01      	ldr	r2, [sp, #4]
    25c6:	4413      	add	r3, r2
    25c8:	4618      	mov	r0, r3
    25ca:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    25cc:	9b03      	ldr	r3, [sp, #12]
    25ce:	3301      	adds	r3, #1
    25d0:	9303      	str	r3, [sp, #12]
    25d2:	9b01      	ldr	r3, [sp, #4]
    25d4:	7a9b      	ldrb	r3, [r3, #10]
    25d6:	461a      	mov	r2, r3
    25d8:	9b03      	ldr	r3, [sp, #12]
    25da:	4293      	cmp	r3, r2
    25dc:	d3cf      	bcc.n	257e <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    25de:	2300      	movs	r3, #0
    25e0:	9303      	str	r3, [sp, #12]
    25e2:	e025      	b.n	2630 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    25e4:	9a01      	ldr	r2, [sp, #4]
    25e6:	9b03      	ldr	r3, [sp, #12]
    25e8:	3324      	adds	r3, #36	; 0x24
    25ea:	011b      	lsls	r3, r3, #4
    25ec:	4413      	add	r3, r2
    25ee:	3304      	adds	r3, #4
    25f0:	681a      	ldr	r2, [r3, #0]
    25f2:	492f      	ldr	r1, [pc, #188]	; (26b0 <Clock_Ip_InitClock+0x584>)
    25f4:	4613      	mov	r3, r2
    25f6:	00db      	lsls	r3, r3, #3
    25f8:	4413      	add	r3, r2
    25fa:	440b      	add	r3, r1
    25fc:	3301      	adds	r3, #1
    25fe:	781b      	ldrb	r3, [r3, #0]
    2600:	461a      	mov	r2, r3
    2602:	4b34      	ldr	r3, [pc, #208]	; (26d4 <Clock_Ip_InitClock+0x5a8>)
    2604:	5c9b      	ldrb	r3, [r3, r2]
    2606:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2608:	4933      	ldr	r1, [pc, #204]	; (26d8 <Clock_Ip_InitClock+0x5ac>)
    260a:	9a02      	ldr	r2, [sp, #8]
    260c:	4613      	mov	r3, r2
    260e:	005b      	lsls	r3, r3, #1
    2610:	4413      	add	r3, r2
    2612:	009b      	lsls	r3, r3, #2
    2614:	440b      	add	r3, r1
    2616:	3304      	adds	r3, #4
    2618:	681b      	ldr	r3, [r3, #0]
    261a:	9a03      	ldr	r2, [sp, #12]
    261c:	3224      	adds	r2, #36	; 0x24
    261e:	0112      	lsls	r2, r2, #4
    2620:	9901      	ldr	r1, [sp, #4]
    2622:	440a      	add	r2, r1
    2624:	3204      	adds	r2, #4
    2626:	4610      	mov	r0, r2
    2628:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    262a:	9b03      	ldr	r3, [sp, #12]
    262c:	3301      	adds	r3, #1
    262e:	9303      	str	r3, [sp, #12]
    2630:	9b01      	ldr	r3, [sp, #4]
    2632:	7b9b      	ldrb	r3, [r3, #14]
    2634:	461a      	mov	r2, r3
    2636:	9b03      	ldr	r3, [sp, #12]
    2638:	4293      	cmp	r3, r2
    263a:	d3d3      	bcc.n	25e4 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    263c:	4b27      	ldr	r3, [pc, #156]	; (26dc <Clock_Ip_InitClock+0x5b0>)
    263e:	2200      	movs	r2, #0
    2640:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    2642:	4b26      	ldr	r3, [pc, #152]	; (26dc <Clock_Ip_InitClock+0x5b0>)
    2644:	2200      	movs	r2, #0
    2646:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    2648:	4b24      	ldr	r3, [pc, #144]	; (26dc <Clock_Ip_InitClock+0x5b0>)
    264a:	2201      	movs	r2, #1
    264c:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    264e:	4b23      	ldr	r3, [pc, #140]	; (26dc <Clock_Ip_InitClock+0x5b0>)
    2650:	2200      	movs	r2, #0
    2652:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    2654:	f000 fa9c 	bl	2b90 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2658:	2300      	movs	r3, #0
    265a:	9303      	str	r3, [sp, #12]
    265c:	e04c      	b.n	26f8 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    265e:	9a01      	ldr	r2, [sp, #4]
    2660:	9b03      	ldr	r3, [sp, #12]
    2662:	330d      	adds	r3, #13
    2664:	00db      	lsls	r3, r3, #3
    2666:	4413      	add	r3, r2
    2668:	685b      	ldr	r3, [r3, #4]
    266a:	4a1d      	ldr	r2, [pc, #116]	; (26e0 <Clock_Ip_InitClock+0x5b4>)
    266c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2670:	2b03      	cmp	r3, #3
    2672:	d03b      	beq.n	26ec <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2674:	9b01      	ldr	r3, [sp, #4]
    2676:	9a03      	ldr	r2, [sp, #12]
    2678:	320d      	adds	r2, #13
    267a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    267e:	490c      	ldr	r1, [pc, #48]	; (26b0 <Clock_Ip_InitClock+0x584>)
    2680:	4613      	mov	r3, r2
    2682:	00db      	lsls	r3, r3, #3
    2684:	4413      	add	r3, r2
    2686:	440b      	add	r3, r1
    2688:	3301      	adds	r3, #1
    268a:	781b      	ldrb	r3, [r3, #0]
    268c:	461a      	mov	r2, r3
    268e:	4b15      	ldr	r3, [pc, #84]	; (26e4 <Clock_Ip_InitClock+0x5b8>)
    2690:	5c9b      	ldrb	r3, [r3, r2]
    2692:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    2694:	4a14      	ldr	r2, [pc, #80]	; (26e8 <Clock_Ip_InitClock+0x5bc>)
    2696:	9b02      	ldr	r3, [sp, #8]
    2698:	00db      	lsls	r3, r3, #3
    269a:	4413      	add	r3, r2
    269c:	685b      	ldr	r3, [r3, #4]
    269e:	9a03      	ldr	r2, [sp, #12]
    26a0:	320d      	adds	r2, #13
    26a2:	00d2      	lsls	r2, r2, #3
    26a4:	9901      	ldr	r1, [sp, #4]
    26a6:	440a      	add	r2, r1
    26a8:	4610      	mov	r0, r2
    26aa:	4798      	blx	r3
    26ac:	e021      	b.n	26f2 <Clock_Ip_InitClock+0x5c6>
    26ae:	bf00      	nop
    26b0:	0000a65c 	.word	0x0000a65c
    26b4:	0000a5cc 	.word	0x0000a5cc
    26b8:	0000aba8 	.word	0x0000aba8
    26bc:	0000a61c 	.word	0x0000a61c
    26c0:	0000ac68 	.word	0x0000ac68
    26c4:	0000a64c 	.word	0x0000a64c
    26c8:	0000ac58 	.word	0x0000ac58
    26cc:	0000a5dc 	.word	0x0000a5dc
    26d0:	0000abb0 	.word	0x0000abb0
    26d4:	0000a60c 	.word	0x0000a60c
    26d8:	0000abd8 	.word	0x0000abd8
    26dc:	1fff8b4c 	.word	0x1fff8b4c
    26e0:	0000aaa8 	.word	0x0000aaa8
    26e4:	0000a62c 	.word	0x0000a62c
    26e8:	0000ac94 	.word	0x0000ac94
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    26ec:	4b3a      	ldr	r3, [pc, #232]	; (27d8 <Clock_Ip_InitClock+0x6ac>)
    26ee:	2201      	movs	r2, #1
    26f0:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    26f2:	9b03      	ldr	r3, [sp, #12]
    26f4:	3301      	adds	r3, #1
    26f6:	9303      	str	r3, [sp, #12]
    26f8:	9b01      	ldr	r3, [sp, #4]
    26fa:	7adb      	ldrb	r3, [r3, #11]
    26fc:	461a      	mov	r2, r3
    26fe:	9b03      	ldr	r3, [sp, #12]
    2700:	4293      	cmp	r3, r2
    2702:	d3ac      	bcc.n	265e <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2704:	4b34      	ldr	r3, [pc, #208]	; (27d8 <Clock_Ip_InitClock+0x6ac>)
    2706:	781b      	ldrb	r3, [r3, #0]
    2708:	f083 0301 	eor.w	r3, r3, #1
    270c:	b2db      	uxtb	r3, r3
    270e:	2b00      	cmp	r3, #0
    2710:	d05e      	beq.n	27d0 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2712:	2300      	movs	r3, #0
    2714:	9303      	str	r3, [sp, #12]
    2716:	e01f      	b.n	2758 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2718:	9a01      	ldr	r2, [sp, #4]
    271a:	9b03      	ldr	r3, [sp, #12]
    271c:	334e      	adds	r3, #78	; 0x4e
    271e:	00db      	lsls	r3, r3, #3
    2720:	4413      	add	r3, r2
    2722:	685a      	ldr	r2, [r3, #4]
    2724:	492d      	ldr	r1, [pc, #180]	; (27dc <Clock_Ip_InitClock+0x6b0>)
    2726:	4613      	mov	r3, r2
    2728:	00db      	lsls	r3, r3, #3
    272a:	4413      	add	r3, r2
    272c:	440b      	add	r3, r1
    272e:	3301      	adds	r3, #1
    2730:	781b      	ldrb	r3, [r3, #0]
    2732:	461a      	mov	r2, r3
    2734:	4b2a      	ldr	r3, [pc, #168]	; (27e0 <Clock_Ip_InitClock+0x6b4>)
    2736:	5c9b      	ldrb	r3, [r3, r2]
    2738:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    273a:	4a2a      	ldr	r2, [pc, #168]	; (27e4 <Clock_Ip_InitClock+0x6b8>)
    273c:	9b02      	ldr	r3, [sp, #8]
    273e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2742:	9a03      	ldr	r2, [sp, #12]
    2744:	324e      	adds	r2, #78	; 0x4e
    2746:	00d2      	lsls	r2, r2, #3
    2748:	9901      	ldr	r1, [sp, #4]
    274a:	440a      	add	r2, r1
    274c:	3204      	adds	r2, #4
    274e:	4610      	mov	r0, r2
    2750:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2752:	9b03      	ldr	r3, [sp, #12]
    2754:	3301      	adds	r3, #1
    2756:	9303      	str	r3, [sp, #12]
    2758:	9b01      	ldr	r3, [sp, #4]
    275a:	7c1b      	ldrb	r3, [r3, #16]
    275c:	461a      	mov	r2, r3
    275e:	9b03      	ldr	r3, [sp, #12]
    2760:	4293      	cmp	r3, r2
    2762:	d3d9      	bcc.n	2718 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2764:	2300      	movs	r3, #0
    2766:	9303      	str	r3, [sp, #12]
    2768:	e028      	b.n	27bc <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    276a:	9901      	ldr	r1, [sp, #4]
    276c:	9a03      	ldr	r2, [sp, #12]
    276e:	4613      	mov	r3, r2
    2770:	009b      	lsls	r3, r3, #2
    2772:	4413      	add	r3, r2
    2774:	009b      	lsls	r3, r3, #2
    2776:	440b      	add	r3, r1
    2778:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    277c:	681a      	ldr	r2, [r3, #0]
    277e:	4917      	ldr	r1, [pc, #92]	; (27dc <Clock_Ip_InitClock+0x6b0>)
    2780:	4613      	mov	r3, r2
    2782:	00db      	lsls	r3, r3, #3
    2784:	4413      	add	r3, r2
    2786:	440b      	add	r3, r1
    2788:	3301      	adds	r3, #1
    278a:	781b      	ldrb	r3, [r3, #0]
    278c:	461a      	mov	r2, r3
    278e:	4b16      	ldr	r3, [pc, #88]	; (27e8 <Clock_Ip_InitClock+0x6bc>)
    2790:	5c9b      	ldrb	r3, [r3, r2]
    2792:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2794:	4a15      	ldr	r2, [pc, #84]	; (27ec <Clock_Ip_InitClock+0x6c0>)
    2796:	9b02      	ldr	r3, [sp, #8]
    2798:	011b      	lsls	r3, r3, #4
    279a:	4413      	add	r3, r2
    279c:	330c      	adds	r3, #12
    279e:	6819      	ldr	r1, [r3, #0]
    27a0:	9a03      	ldr	r2, [sp, #12]
    27a2:	4613      	mov	r3, r2
    27a4:	009b      	lsls	r3, r3, #2
    27a6:	4413      	add	r3, r2
    27a8:	009b      	lsls	r3, r3, #2
    27aa:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    27ae:	9a01      	ldr	r2, [sp, #4]
    27b0:	4413      	add	r3, r2
    27b2:	4618      	mov	r0, r3
    27b4:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    27b6:	9b03      	ldr	r3, [sp, #12]
    27b8:	3301      	adds	r3, #1
    27ba:	9303      	str	r3, [sp, #12]
    27bc:	9b01      	ldr	r3, [sp, #4]
    27be:	7c9b      	ldrb	r3, [r3, #18]
    27c0:	461a      	mov	r2, r3
    27c2:	9b03      	ldr	r3, [sp, #12]
    27c4:	4293      	cmp	r3, r2
    27c6:	d3d0      	bcc.n	276a <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    27c8:	2104      	movs	r1, #4
    27ca:	9801      	ldr	r0, [sp, #4]
    27cc:	f002 ff48 	bl	5660 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    27d0:	bf00      	nop
    27d2:	b004      	add	sp, #16
    27d4:	bd10      	pop	{r4, pc}
    27d6:	bf00      	nop
    27d8:	1fff8b4c 	.word	0x1fff8b4c
    27dc:	0000a65c 	.word	0x0000a65c
    27e0:	0000a5fc 	.word	0x0000a5fc
    27e4:	0000abe4 	.word	0x0000abe4
    27e8:	0000a64c 	.word	0x0000a64c
    27ec:	0000ac58 	.word	0x0000ac58

000027f0 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    27f0:	b500      	push	{lr}
    27f2:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    27f4:	2302      	movs	r3, #2
    27f6:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    27f8:	2300      	movs	r3, #0
    27fa:	9304      	str	r3, [sp, #16]
    27fc:	e02c      	b.n	2858 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    27fe:	4a36      	ldr	r2, [pc, #216]	; (28d8 <Clock_Ip_GetPllStatus+0xe8>)
    2800:	9b04      	ldr	r3, [sp, #16]
    2802:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2806:	4935      	ldr	r1, [pc, #212]	; (28dc <Clock_Ip_GetPllStatus+0xec>)
    2808:	4613      	mov	r3, r2
    280a:	00db      	lsls	r3, r3, #3
    280c:	4413      	add	r3, r2
    280e:	440b      	add	r3, r1
    2810:	3301      	adds	r3, #1
    2812:	781b      	ldrb	r3, [r3, #0]
    2814:	461a      	mov	r2, r3
    2816:	4b32      	ldr	r3, [pc, #200]	; (28e0 <Clock_Ip_GetPllStatus+0xf0>)
    2818:	5c9b      	ldrb	r3, [r3, r2]
    281a:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    281c:	4931      	ldr	r1, [pc, #196]	; (28e4 <Clock_Ip_GetPllStatus+0xf4>)
    281e:	9a03      	ldr	r2, [sp, #12]
    2820:	4613      	mov	r3, r2
    2822:	009b      	lsls	r3, r3, #2
    2824:	4413      	add	r3, r2
    2826:	009b      	lsls	r3, r3, #2
    2828:	440b      	add	r3, r1
    282a:	3308      	adds	r3, #8
    282c:	681b      	ldr	r3, [r3, #0]
    282e:	492a      	ldr	r1, [pc, #168]	; (28d8 <Clock_Ip_GetPllStatus+0xe8>)
    2830:	9a04      	ldr	r2, [sp, #16]
    2832:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2836:	4610      	mov	r0, r2
    2838:	4798      	blx	r3
    283a:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    283c:	9b02      	ldr	r3, [sp, #8]
    283e:	2b01      	cmp	r3, #1
    2840:	d102      	bne.n	2848 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2842:	2301      	movs	r3, #1
    2844:	9305      	str	r3, [sp, #20]
            break;
    2846:	e00d      	b.n	2864 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2848:	9b02      	ldr	r3, [sp, #8]
    284a:	2b02      	cmp	r3, #2
    284c:	d101      	bne.n	2852 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    284e:	2300      	movs	r3, #0
    2850:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2852:	9b04      	ldr	r3, [sp, #16]
    2854:	3301      	adds	r3, #1
    2856:	9304      	str	r3, [sp, #16]
    2858:	4b23      	ldr	r3, [pc, #140]	; (28e8 <Clock_Ip_GetPllStatus+0xf8>)
    285a:	789b      	ldrb	r3, [r3, #2]
    285c:	461a      	mov	r2, r3
    285e:	9b04      	ldr	r3, [sp, #16]
    2860:	4293      	cmp	r3, r2
    2862:	d3cc      	bcc.n	27fe <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2864:	9b05      	ldr	r3, [sp, #20]
    2866:	2b00      	cmp	r3, #0
    2868:	d130      	bne.n	28cc <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    286a:	2300      	movs	r3, #0
    286c:	9304      	str	r3, [sp, #16]
    286e:	e027      	b.n	28c0 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2870:	4a1e      	ldr	r2, [pc, #120]	; (28ec <Clock_Ip_GetPllStatus+0xfc>)
    2872:	9b04      	ldr	r3, [sp, #16]
    2874:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2878:	4918      	ldr	r1, [pc, #96]	; (28dc <Clock_Ip_GetPllStatus+0xec>)
    287a:	4613      	mov	r3, r2
    287c:	00db      	lsls	r3, r3, #3
    287e:	4413      	add	r3, r2
    2880:	440b      	add	r3, r1
    2882:	3301      	adds	r3, #1
    2884:	781b      	ldrb	r3, [r3, #0]
    2886:	461a      	mov	r2, r3
    2888:	4b19      	ldr	r3, [pc, #100]	; (28f0 <Clock_Ip_GetPllStatus+0x100>)
    288a:	5c9b      	ldrb	r3, [r3, r2]
    288c:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    288e:	4919      	ldr	r1, [pc, #100]	; (28f4 <Clock_Ip_GetPllStatus+0x104>)
    2890:	9a03      	ldr	r2, [sp, #12]
    2892:	4613      	mov	r3, r2
    2894:	005b      	lsls	r3, r3, #1
    2896:	4413      	add	r3, r2
    2898:	009b      	lsls	r3, r3, #2
    289a:	440b      	add	r3, r1
    289c:	3308      	adds	r3, #8
    289e:	681b      	ldr	r3, [r3, #0]
    28a0:	4912      	ldr	r1, [pc, #72]	; (28ec <Clock_Ip_GetPllStatus+0xfc>)
    28a2:	9a04      	ldr	r2, [sp, #16]
    28a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    28a8:	4610      	mov	r0, r2
    28aa:	4798      	blx	r3
    28ac:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    28ae:	9b01      	ldr	r3, [sp, #4]
    28b0:	2b01      	cmp	r3, #1
    28b2:	d102      	bne.n	28ba <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    28b4:	2301      	movs	r3, #1
    28b6:	9305      	str	r3, [sp, #20]
                break;
    28b8:	e008      	b.n	28cc <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    28ba:	9b04      	ldr	r3, [sp, #16]
    28bc:	3301      	adds	r3, #1
    28be:	9304      	str	r3, [sp, #16]
    28c0:	4b09      	ldr	r3, [pc, #36]	; (28e8 <Clock_Ip_GetPllStatus+0xf8>)
    28c2:	78db      	ldrb	r3, [r3, #3]
    28c4:	461a      	mov	r2, r3
    28c6:	9b04      	ldr	r3, [sp, #16]
    28c8:	4293      	cmp	r3, r2
    28ca:	d3d1      	bcc.n	2870 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    28cc:	9b05      	ldr	r3, [sp, #20]
}
    28ce:	4618      	mov	r0, r3
    28d0:	b007      	add	sp, #28
    28d2:	f85d fb04 	ldr.w	pc, [sp], #4
    28d6:	bf00      	nop
    28d8:	0000ab64 	.word	0x0000ab64
    28dc:	0000a65c 	.word	0x0000a65c
    28e0:	0000a61c 	.word	0x0000a61c
    28e4:	0000ac68 	.word	0x0000ac68
    28e8:	1fff8b4c 	.word	0x1fff8b4c
    28ec:	0000ab68 	.word	0x0000ab68
    28f0:	0000a60c 	.word	0x0000a60c
    28f4:	0000abd8 	.word	0x0000abd8

000028f8 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    28f8:	b500      	push	{lr}
    28fa:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    28fc:	4b55      	ldr	r3, [pc, #340]	; (2a54 <Clock_Ip_DistributePll+0x15c>)
    28fe:	681b      	ldr	r3, [r3, #0]
    2900:	2b00      	cmp	r3, #0
    2902:	f000 80a2 	beq.w	2a4a <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2906:	2300      	movs	r3, #0
    2908:	9301      	str	r3, [sp, #4]
    290a:	e02c      	b.n	2966 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    290c:	4b51      	ldr	r3, [pc, #324]	; (2a54 <Clock_Ip_DistributePll+0x15c>)
    290e:	681a      	ldr	r2, [r3, #0]
    2910:	9b01      	ldr	r3, [sp, #4]
    2912:	330d      	adds	r3, #13
    2914:	00db      	lsls	r3, r3, #3
    2916:	4413      	add	r3, r2
    2918:	685b      	ldr	r3, [r3, #4]
    291a:	4a4f      	ldr	r2, [pc, #316]	; (2a58 <Clock_Ip_DistributePll+0x160>)
    291c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2920:	2b03      	cmp	r3, #3
    2922:	d11d      	bne.n	2960 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2924:	4b4b      	ldr	r3, [pc, #300]	; (2a54 <Clock_Ip_DistributePll+0x15c>)
    2926:	681b      	ldr	r3, [r3, #0]
    2928:	9a01      	ldr	r2, [sp, #4]
    292a:	320d      	adds	r2, #13
    292c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2930:	494a      	ldr	r1, [pc, #296]	; (2a5c <Clock_Ip_DistributePll+0x164>)
    2932:	4613      	mov	r3, r2
    2934:	00db      	lsls	r3, r3, #3
    2936:	4413      	add	r3, r2
    2938:	440b      	add	r3, r1
    293a:	3301      	adds	r3, #1
    293c:	781b      	ldrb	r3, [r3, #0]
    293e:	461a      	mov	r2, r3
    2940:	4b47      	ldr	r3, [pc, #284]	; (2a60 <Clock_Ip_DistributePll+0x168>)
    2942:	5c9b      	ldrb	r3, [r3, r2]
    2944:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2946:	4a47      	ldr	r2, [pc, #284]	; (2a64 <Clock_Ip_DistributePll+0x16c>)
    2948:	9b00      	ldr	r3, [sp, #0]
    294a:	00db      	lsls	r3, r3, #3
    294c:	4413      	add	r3, r2
    294e:	685b      	ldr	r3, [r3, #4]
    2950:	4a40      	ldr	r2, [pc, #256]	; (2a54 <Clock_Ip_DistributePll+0x15c>)
    2952:	6811      	ldr	r1, [r2, #0]
    2954:	9a01      	ldr	r2, [sp, #4]
    2956:	320d      	adds	r2, #13
    2958:	00d2      	lsls	r2, r2, #3
    295a:	440a      	add	r2, r1
    295c:	4610      	mov	r0, r2
    295e:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2960:	9b01      	ldr	r3, [sp, #4]
    2962:	3301      	adds	r3, #1
    2964:	9301      	str	r3, [sp, #4]
    2966:	4b3b      	ldr	r3, [pc, #236]	; (2a54 <Clock_Ip_DistributePll+0x15c>)
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	7adb      	ldrb	r3, [r3, #11]
    296c:	461a      	mov	r2, r3
    296e:	9b01      	ldr	r3, [sp, #4]
    2970:	4293      	cmp	r3, r2
    2972:	d3cb      	bcc.n	290c <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2974:	4b3c      	ldr	r3, [pc, #240]	; (2a68 <Clock_Ip_DistributePll+0x170>)
    2976:	781b      	ldrb	r3, [r3, #0]
    2978:	2b00      	cmp	r3, #0
    297a:	d066      	beq.n	2a4a <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    297c:	2300      	movs	r3, #0
    297e:	9301      	str	r3, [sp, #4]
    2980:	e021      	b.n	29c6 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2982:	4b34      	ldr	r3, [pc, #208]	; (2a54 <Clock_Ip_DistributePll+0x15c>)
    2984:	681a      	ldr	r2, [r3, #0]
    2986:	9b01      	ldr	r3, [sp, #4]
    2988:	334e      	adds	r3, #78	; 0x4e
    298a:	00db      	lsls	r3, r3, #3
    298c:	4413      	add	r3, r2
    298e:	685a      	ldr	r2, [r3, #4]
    2990:	4932      	ldr	r1, [pc, #200]	; (2a5c <Clock_Ip_DistributePll+0x164>)
    2992:	4613      	mov	r3, r2
    2994:	00db      	lsls	r3, r3, #3
    2996:	4413      	add	r3, r2
    2998:	440b      	add	r3, r1
    299a:	3301      	adds	r3, #1
    299c:	781b      	ldrb	r3, [r3, #0]
    299e:	461a      	mov	r2, r3
    29a0:	4b32      	ldr	r3, [pc, #200]	; (2a6c <Clock_Ip_DistributePll+0x174>)
    29a2:	5c9b      	ldrb	r3, [r3, r2]
    29a4:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    29a6:	4a32      	ldr	r2, [pc, #200]	; (2a70 <Clock_Ip_DistributePll+0x178>)
    29a8:	9b00      	ldr	r3, [sp, #0]
    29aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    29ae:	4a29      	ldr	r2, [pc, #164]	; (2a54 <Clock_Ip_DistributePll+0x15c>)
    29b0:	6811      	ldr	r1, [r2, #0]
    29b2:	9a01      	ldr	r2, [sp, #4]
    29b4:	324e      	adds	r2, #78	; 0x4e
    29b6:	00d2      	lsls	r2, r2, #3
    29b8:	440a      	add	r2, r1
    29ba:	3204      	adds	r2, #4
    29bc:	4610      	mov	r0, r2
    29be:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    29c0:	9b01      	ldr	r3, [sp, #4]
    29c2:	3301      	adds	r3, #1
    29c4:	9301      	str	r3, [sp, #4]
    29c6:	4b23      	ldr	r3, [pc, #140]	; (2a54 <Clock_Ip_DistributePll+0x15c>)
    29c8:	681b      	ldr	r3, [r3, #0]
    29ca:	7c1b      	ldrb	r3, [r3, #16]
    29cc:	461a      	mov	r2, r3
    29ce:	9b01      	ldr	r3, [sp, #4]
    29d0:	4293      	cmp	r3, r2
    29d2:	d3d6      	bcc.n	2982 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    29d4:	2300      	movs	r3, #0
    29d6:	9301      	str	r3, [sp, #4]
    29d8:	e02a      	b.n	2a30 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    29da:	4b1e      	ldr	r3, [pc, #120]	; (2a54 <Clock_Ip_DistributePll+0x15c>)
    29dc:	6819      	ldr	r1, [r3, #0]
    29de:	9a01      	ldr	r2, [sp, #4]
    29e0:	4613      	mov	r3, r2
    29e2:	009b      	lsls	r3, r3, #2
    29e4:	4413      	add	r3, r2
    29e6:	009b      	lsls	r3, r3, #2
    29e8:	440b      	add	r3, r1
    29ea:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    29ee:	681a      	ldr	r2, [r3, #0]
    29f0:	491a      	ldr	r1, [pc, #104]	; (2a5c <Clock_Ip_DistributePll+0x164>)
    29f2:	4613      	mov	r3, r2
    29f4:	00db      	lsls	r3, r3, #3
    29f6:	4413      	add	r3, r2
    29f8:	440b      	add	r3, r1
    29fa:	3301      	adds	r3, #1
    29fc:	781b      	ldrb	r3, [r3, #0]
    29fe:	461a      	mov	r2, r3
    2a00:	4b1c      	ldr	r3, [pc, #112]	; (2a74 <Clock_Ip_DistributePll+0x17c>)
    2a02:	5c9b      	ldrb	r3, [r3, r2]
    2a04:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2a06:	4a1c      	ldr	r2, [pc, #112]	; (2a78 <Clock_Ip_DistributePll+0x180>)
    2a08:	9b00      	ldr	r3, [sp, #0]
    2a0a:	011b      	lsls	r3, r3, #4
    2a0c:	4413      	add	r3, r2
    2a0e:	330c      	adds	r3, #12
    2a10:	6819      	ldr	r1, [r3, #0]
    2a12:	4b10      	ldr	r3, [pc, #64]	; (2a54 <Clock_Ip_DistributePll+0x15c>)
    2a14:	6818      	ldr	r0, [r3, #0]
    2a16:	9a01      	ldr	r2, [sp, #4]
    2a18:	4613      	mov	r3, r2
    2a1a:	009b      	lsls	r3, r3, #2
    2a1c:	4413      	add	r3, r2
    2a1e:	009b      	lsls	r3, r3, #2
    2a20:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2a24:	4403      	add	r3, r0
    2a26:	4618      	mov	r0, r3
    2a28:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2a2a:	9b01      	ldr	r3, [sp, #4]
    2a2c:	3301      	adds	r3, #1
    2a2e:	9301      	str	r3, [sp, #4]
    2a30:	4b08      	ldr	r3, [pc, #32]	; (2a54 <Clock_Ip_DistributePll+0x15c>)
    2a32:	681b      	ldr	r3, [r3, #0]
    2a34:	7c9b      	ldrb	r3, [r3, #18]
    2a36:	461a      	mov	r2, r3
    2a38:	9b01      	ldr	r3, [sp, #4]
    2a3a:	4293      	cmp	r3, r2
    2a3c:	d3cd      	bcc.n	29da <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2a3e:	4b05      	ldr	r3, [pc, #20]	; (2a54 <Clock_Ip_DistributePll+0x15c>)
    2a40:	681b      	ldr	r3, [r3, #0]
    2a42:	2104      	movs	r1, #4
    2a44:	4618      	mov	r0, r3
    2a46:	f002 fe0b 	bl	5660 <Clock_Ip_Command>
        }
    }
}
    2a4a:	bf00      	nop
    2a4c:	b003      	add	sp, #12
    2a4e:	f85d fb04 	ldr.w	pc, [sp], #4
    2a52:	bf00      	nop
    2a54:	1fff8b44 	.word	0x1fff8b44
    2a58:	0000aaa8 	.word	0x0000aaa8
    2a5c:	0000a65c 	.word	0x0000a65c
    2a60:	0000a62c 	.word	0x0000a62c
    2a64:	0000ac94 	.word	0x0000ac94
    2a68:	1fff8b4c 	.word	0x1fff8b4c
    2a6c:	0000a5fc 	.word	0x0000a5fc
    2a70:	0000abe4 	.word	0x0000abe4
    2a74:	0000a64c 	.word	0x0000a64c
    2a78:	0000ac58 	.word	0x0000ac58

00002a7c <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2a7c:	b500      	push	{lr}
    2a7e:	b085      	sub	sp, #20
    2a80:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2a82:	490c      	ldr	r1, [pc, #48]	; (2ab4 <Clock_Ip_DisableClockMonitor+0x38>)
    2a84:	9a01      	ldr	r2, [sp, #4]
    2a86:	4613      	mov	r3, r2
    2a88:	00db      	lsls	r3, r3, #3
    2a8a:	4413      	add	r3, r2
    2a8c:	440b      	add	r3, r1
    2a8e:	3301      	adds	r3, #1
    2a90:	781b      	ldrb	r3, [r3, #0]
    2a92:	461a      	mov	r2, r3
    2a94:	4b08      	ldr	r3, [pc, #32]	; (2ab8 <Clock_Ip_DisableClockMonitor+0x3c>)
    2a96:	5c9b      	ldrb	r3, [r3, r2]
    2a98:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2a9a:	4a08      	ldr	r2, [pc, #32]	; (2abc <Clock_Ip_DisableClockMonitor+0x40>)
    2a9c:	9b03      	ldr	r3, [sp, #12]
    2a9e:	011b      	lsls	r3, r3, #4
    2aa0:	4413      	add	r3, r2
    2aa2:	3308      	adds	r3, #8
    2aa4:	681b      	ldr	r3, [r3, #0]
    2aa6:	9801      	ldr	r0, [sp, #4]
    2aa8:	4798      	blx	r3
}
    2aaa:	bf00      	nop
    2aac:	b005      	add	sp, #20
    2aae:	f85d fb04 	ldr.w	pc, [sp], #4
    2ab2:	bf00      	nop
    2ab4:	0000a65c 	.word	0x0000a65c
    2ab8:	0000a64c 	.word	0x0000a64c
    2abc:	0000ac58 	.word	0x0000ac58

00002ac0 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2ac0:	b082      	sub	sp, #8
    2ac2:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2ac4:	4a02      	ldr	r2, [pc, #8]	; (2ad0 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2ac6:	9b01      	ldr	r3, [sp, #4]
    2ac8:	6013      	str	r3, [r2, #0]
}
    2aca:	bf00      	nop
    2acc:	b002      	add	sp, #8
    2ace:	4770      	bx	lr
    2ad0:	1fff8b14 	.word	0x1fff8b14

00002ad4 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2ad4:	b500      	push	{lr}
    2ad6:	b085      	sub	sp, #20
    2ad8:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2ada:	490c      	ldr	r1, [pc, #48]	; (2b0c <Clock_Ip_DisableModuleClock+0x38>)
    2adc:	9a01      	ldr	r2, [sp, #4]
    2ade:	4613      	mov	r3, r2
    2ae0:	00db      	lsls	r3, r3, #3
    2ae2:	4413      	add	r3, r2
    2ae4:	440b      	add	r3, r1
    2ae6:	3301      	adds	r3, #1
    2ae8:	781b      	ldrb	r3, [r3, #0]
    2aea:	461a      	mov	r2, r3
    2aec:	4b08      	ldr	r3, [pc, #32]	; (2b10 <Clock_Ip_DisableModuleClock+0x3c>)
    2aee:	5c9b      	ldrb	r3, [r3, r2]
    2af0:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2af2:	4a08      	ldr	r2, [pc, #32]	; (2b14 <Clock_Ip_DisableModuleClock+0x40>)
    2af4:	9b03      	ldr	r3, [sp, #12]
    2af6:	00db      	lsls	r3, r3, #3
    2af8:	4413      	add	r3, r2
    2afa:	685b      	ldr	r3, [r3, #4]
    2afc:	2101      	movs	r1, #1
    2afe:	9801      	ldr	r0, [sp, #4]
    2b00:	4798      	blx	r3
}
    2b02:	bf00      	nop
    2b04:	b005      	add	sp, #20
    2b06:	f85d fb04 	ldr.w	pc, [sp], #4
    2b0a:	bf00      	nop
    2b0c:	0000a65c 	.word	0x0000a65c
    2b10:	0000a5fc 	.word	0x0000a5fc
    2b14:	0000abe4 	.word	0x0000abe4

00002b18 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2b18:	b500      	push	{lr}
    2b1a:	b085      	sub	sp, #20
    2b1c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2b1e:	490c      	ldr	r1, [pc, #48]	; (2b50 <Clock_Ip_EnableModuleClock+0x38>)
    2b20:	9a01      	ldr	r2, [sp, #4]
    2b22:	4613      	mov	r3, r2
    2b24:	00db      	lsls	r3, r3, #3
    2b26:	4413      	add	r3, r2
    2b28:	440b      	add	r3, r1
    2b2a:	3301      	adds	r3, #1
    2b2c:	781b      	ldrb	r3, [r3, #0]
    2b2e:	461a      	mov	r2, r3
    2b30:	4b08      	ldr	r3, [pc, #32]	; (2b54 <Clock_Ip_EnableModuleClock+0x3c>)
    2b32:	5c9b      	ldrb	r3, [r3, r2]
    2b34:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2b36:	4a08      	ldr	r2, [pc, #32]	; (2b58 <Clock_Ip_EnableModuleClock+0x40>)
    2b38:	9b03      	ldr	r3, [sp, #12]
    2b3a:	00db      	lsls	r3, r3, #3
    2b3c:	4413      	add	r3, r2
    2b3e:	685b      	ldr	r3, [r3, #4]
    2b40:	2100      	movs	r1, #0
    2b42:	9801      	ldr	r0, [sp, #4]
    2b44:	4798      	blx	r3
}
    2b46:	bf00      	nop
    2b48:	b005      	add	sp, #20
    2b4a:	f85d fb04 	ldr.w	pc, [sp], #4
    2b4e:	bf00      	nop
    2b50:	0000a65c 	.word	0x0000a65c
    2b54:	0000a5fc 	.word	0x0000a5fc
    2b58:	0000abe4 	.word	0x0000abe4

00002b5c <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2b5c:	b500      	push	{lr}
    2b5e:	b083      	sub	sp, #12
    2b60:	9001      	str	r0, [sp, #4]
    2b62:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2b64:	4b08      	ldr	r3, [pc, #32]	; (2b88 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2b66:	2200      	movs	r2, #0
    2b68:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2b6a:	4b08      	ldr	r3, [pc, #32]	; (2b8c <Clock_Ip_PowerModeChangeNotification+0x30>)
    2b6c:	681b      	ldr	r3, [r3, #0]
    2b6e:	2102      	movs	r1, #2
    2b70:	4618      	mov	r0, r3
    2b72:	f002 fd75 	bl	5660 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2b76:	9900      	ldr	r1, [sp, #0]
    2b78:	9801      	ldr	r0, [sp, #4]
    2b7a:	f002 fc51 	bl	5420 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2b7e:	bf00      	nop
    2b80:	b003      	add	sp, #12
    2b82:	f85d fb04 	ldr.w	pc, [sp], #4
    2b86:	bf00      	nop
    2b88:	1fff8b10 	.word	0x1fff8b10
    2b8c:	1fff8b44 	.word	0x1fff8b44

00002b90 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2b90:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2b92:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2b96:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2b98:	4b06      	ldr	r3, [pc, #24]	; (2bb4 <Clock_Ip_SetWaitStates+0x24>)
    2b9a:	785b      	ldrb	r3, [r3, #1]
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	d005      	beq.n	2bac <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2ba0:	9b01      	ldr	r3, [sp, #4]
    2ba2:	3b01      	subs	r3, #1
    2ba4:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2ba6:	9b01      	ldr	r3, [sp, #4]
    2ba8:	2b00      	cmp	r3, #0
    2baa:	d1f9      	bne.n	2ba0 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2bac:	bf00      	nop
    2bae:	b002      	add	sp, #8
    2bb0:	4770      	bx	lr
    2bb2:	bf00      	nop
    2bb4:	1fff8b4c 	.word	0x1fff8b4c

00002bb8 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2bb8:	b500      	push	{lr}
    2bba:	b083      	sub	sp, #12
    2bbc:	9001      	str	r0, [sp, #4]
    2bbe:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2bc0:	4b04      	ldr	r3, [pc, #16]	; (2bd4 <Clock_Ip_ReportClockErrors+0x1c>)
    2bc2:	681b      	ldr	r3, [r3, #0]
    2bc4:	9900      	ldr	r1, [sp, #0]
    2bc6:	9801      	ldr	r0, [sp, #4]
    2bc8:	4798      	blx	r3
}
    2bca:	bf00      	nop
    2bcc:	b003      	add	sp, #12
    2bce:	f85d fb04 	ldr.w	pc, [sp], #4
    2bd2:	bf00      	nop
    2bd4:	1fff8b14 	.word	0x1fff8b14

00002bd8 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2bd8:	b500      	push	{lr}
    2bda:	b085      	sub	sp, #20
    2bdc:	9003      	str	r0, [sp, #12]
    2bde:	9102      	str	r1, [sp, #8]
    2be0:	9201      	str	r2, [sp, #4]
    2be2:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2be4:	2000      	movs	r0, #0
    2be6:	f7fe ffd1 	bl	1b8c <OsIf_GetCounter>
    2bea:	4602      	mov	r2, r0
    2bec:	9b03      	ldr	r3, [sp, #12]
    2bee:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2bf0:	9b02      	ldr	r3, [sp, #8]
    2bf2:	2200      	movs	r2, #0
    2bf4:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2bf6:	2100      	movs	r1, #0
    2bf8:	9800      	ldr	r0, [sp, #0]
    2bfa:	f7ff f813 	bl	1c24 <OsIf_MicrosToTicks>
    2bfe:	4602      	mov	r2, r0
    2c00:	9b01      	ldr	r3, [sp, #4]
    2c02:	601a      	str	r2, [r3, #0]
}
    2c04:	bf00      	nop
    2c06:	b005      	add	sp, #20
    2c08:	f85d fb04 	ldr.w	pc, [sp], #4

00002c0c <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2c0c:	b500      	push	{lr}
    2c0e:	b087      	sub	sp, #28
    2c10:	9003      	str	r0, [sp, #12]
    2c12:	9102      	str	r1, [sp, #8]
    2c14:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2c16:	2300      	movs	r3, #0
    2c18:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2c1c:	2100      	movs	r1, #0
    2c1e:	9803      	ldr	r0, [sp, #12]
    2c20:	f7fe ffcd 	bl	1bbe <OsIf_GetElapsed>
    2c24:	4602      	mov	r2, r0
    2c26:	9b02      	ldr	r3, [sp, #8]
    2c28:	681b      	ldr	r3, [r3, #0]
    2c2a:	441a      	add	r2, r3
    2c2c:	9b02      	ldr	r3, [sp, #8]
    2c2e:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2c30:	9b02      	ldr	r3, [sp, #8]
    2c32:	681b      	ldr	r3, [r3, #0]
    2c34:	9a01      	ldr	r2, [sp, #4]
    2c36:	429a      	cmp	r2, r3
    2c38:	d802      	bhi.n	2c40 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2c3a:	2301      	movs	r3, #1
    2c3c:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2c40:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2c44:	4618      	mov	r0, r3
    2c46:	b007      	add	sp, #28
    2c48:	f85d fb04 	ldr.w	pc, [sp], #4

00002c4c <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2c4c:	b082      	sub	sp, #8
    2c4e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2c50:	bf00      	nop
    2c52:	b002      	add	sp, #8
    2c54:	4770      	bx	lr

00002c56 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2c56:	b500      	push	{lr}
    2c58:	b083      	sub	sp, #12
    2c5a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c5c:	9b01      	ldr	r3, [sp, #4]
    2c5e:	2b00      	cmp	r3, #0
    2c60:	d002      	beq.n	2c68 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2c62:	9801      	ldr	r0, [sp, #4]
    2c64:	f000 f8ad 	bl	2dc2 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c68:	bf00      	nop
    2c6a:	b003      	add	sp, #12
    2c6c:	f85d fb04 	ldr.w	pc, [sp], #4

00002c70 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2c70:	b500      	push	{lr}
    2c72:	b083      	sub	sp, #12
    2c74:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c76:	9b01      	ldr	r3, [sp, #4]
    2c78:	2b00      	cmp	r3, #0
    2c7a:	d002      	beq.n	2c82 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2c7c:	9801      	ldr	r0, [sp, #4]
    2c7e:	f000 f8cd 	bl	2e1c <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c82:	bf00      	nop
    2c84:	b003      	add	sp, #12
    2c86:	f85d fb04 	ldr.w	pc, [sp], #4

00002c8a <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2c8a:	b500      	push	{lr}
    2c8c:	b083      	sub	sp, #12
    2c8e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c90:	9b01      	ldr	r3, [sp, #4]
    2c92:	2b00      	cmp	r3, #0
    2c94:	d002      	beq.n	2c9c <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2c96:	9801      	ldr	r0, [sp, #4]
    2c98:	f000 f8ee 	bl	2e78 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c9c:	bf00      	nop
    2c9e:	b003      	add	sp, #12
    2ca0:	f85d fb04 	ldr.w	pc, [sp], #4

00002ca4 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2ca4:	b500      	push	{lr}
    2ca6:	b083      	sub	sp, #12
    2ca8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2caa:	9b01      	ldr	r3, [sp, #4]
    2cac:	2b00      	cmp	r3, #0
    2cae:	d002      	beq.n	2cb6 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2cb0:	9801      	ldr	r0, [sp, #4]
    2cb2:	f000 f8f9 	bl	2ea8 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cb6:	bf00      	nop
    2cb8:	b003      	add	sp, #12
    2cba:	f85d fb04 	ldr.w	pc, [sp], #4

00002cbe <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2cbe:	b500      	push	{lr}
    2cc0:	b083      	sub	sp, #12
    2cc2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cc4:	9b01      	ldr	r3, [sp, #4]
    2cc6:	2b00      	cmp	r3, #0
    2cc8:	d002      	beq.n	2cd0 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2cca:	9801      	ldr	r0, [sp, #4]
    2ccc:	f000 f904 	bl	2ed8 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cd0:	bf00      	nop
    2cd2:	b003      	add	sp, #12
    2cd4:	f85d fb04 	ldr.w	pc, [sp], #4

00002cd8 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2cd8:	b500      	push	{lr}
    2cda:	b083      	sub	sp, #12
    2cdc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cde:	9b01      	ldr	r3, [sp, #4]
    2ce0:	2b00      	cmp	r3, #0
    2ce2:	d002      	beq.n	2cea <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2ce4:	9801      	ldr	r0, [sp, #4]
    2ce6:	f000 f90f 	bl	2f08 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cea:	bf00      	nop
    2cec:	b003      	add	sp, #12
    2cee:	f85d fb04 	ldr.w	pc, [sp], #4

00002cf2 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2cf2:	b500      	push	{lr}
    2cf4:	b083      	sub	sp, #12
    2cf6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cf8:	9b01      	ldr	r3, [sp, #4]
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	d002      	beq.n	2d04 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2cfe:	9801      	ldr	r0, [sp, #4]
    2d00:	f000 f91a 	bl	2f38 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d04:	bf00      	nop
    2d06:	b003      	add	sp, #12
    2d08:	f85d fb04 	ldr.w	pc, [sp], #4

00002d0c <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2d0c:	b500      	push	{lr}
    2d0e:	b083      	sub	sp, #12
    2d10:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d12:	9b01      	ldr	r3, [sp, #4]
    2d14:	2b00      	cmp	r3, #0
    2d16:	d002      	beq.n	2d1e <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2d18:	9801      	ldr	r0, [sp, #4]
    2d1a:	f000 f925 	bl	2f68 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d1e:	bf00      	nop
    2d20:	b003      	add	sp, #12
    2d22:	f85d fb04 	ldr.w	pc, [sp], #4

00002d26 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2d26:	b500      	push	{lr}
    2d28:	b083      	sub	sp, #12
    2d2a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d2c:	9b01      	ldr	r3, [sp, #4]
    2d2e:	2b00      	cmp	r3, #0
    2d30:	d002      	beq.n	2d38 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2d32:	9801      	ldr	r0, [sp, #4]
    2d34:	f000 f930 	bl	2f98 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d38:	bf00      	nop
    2d3a:	b003      	add	sp, #12
    2d3c:	f85d fb04 	ldr.w	pc, [sp], #4

00002d40 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2d40:	b500      	push	{lr}
    2d42:	b083      	sub	sp, #12
    2d44:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d46:	9b01      	ldr	r3, [sp, #4]
    2d48:	2b00      	cmp	r3, #0
    2d4a:	d002      	beq.n	2d52 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2d4c:	9801      	ldr	r0, [sp, #4]
    2d4e:	f000 f93b 	bl	2fc8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d52:	bf00      	nop
    2d54:	b003      	add	sp, #12
    2d56:	f85d fb04 	ldr.w	pc, [sp], #4

00002d5a <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2d5a:	b500      	push	{lr}
    2d5c:	b083      	sub	sp, #12
    2d5e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d60:	9b01      	ldr	r3, [sp, #4]
    2d62:	2b00      	cmp	r3, #0
    2d64:	d002      	beq.n	2d6c <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2d66:	9801      	ldr	r0, [sp, #4]
    2d68:	f000 f946 	bl	2ff8 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d6c:	bf00      	nop
    2d6e:	b003      	add	sp, #12
    2d70:	f85d fb04 	ldr.w	pc, [sp], #4

00002d74 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2d74:	b500      	push	{lr}
    2d76:	b083      	sub	sp, #12
    2d78:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d7a:	9b01      	ldr	r3, [sp, #4]
    2d7c:	2b00      	cmp	r3, #0
    2d7e:	d002      	beq.n	2d86 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2d80:	9801      	ldr	r0, [sp, #4]
    2d82:	f000 f951 	bl	3028 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d86:	bf00      	nop
    2d88:	b003      	add	sp, #12
    2d8a:	f85d fb04 	ldr.w	pc, [sp], #4

00002d8e <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2d8e:	b500      	push	{lr}
    2d90:	b083      	sub	sp, #12
    2d92:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d94:	9b01      	ldr	r3, [sp, #4]
    2d96:	2b00      	cmp	r3, #0
    2d98:	d002      	beq.n	2da0 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2d9a:	9801      	ldr	r0, [sp, #4]
    2d9c:	f000 f95e 	bl	305c <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2da0:	bf00      	nop
    2da2:	b003      	add	sp, #12
    2da4:	f85d fb04 	ldr.w	pc, [sp], #4

00002da8 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2da8:	b500      	push	{lr}
    2daa:	b083      	sub	sp, #12
    2dac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2dae:	9b01      	ldr	r3, [sp, #4]
    2db0:	2b00      	cmp	r3, #0
    2db2:	d002      	beq.n	2dba <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2db4:	9801      	ldr	r0, [sp, #4]
    2db6:	f000 f98b 	bl	30d0 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2dba:	bf00      	nop
    2dbc:	b003      	add	sp, #12
    2dbe:	f85d fb04 	ldr.w	pc, [sp], #4

00002dc2 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2dc2:	b086      	sub	sp, #24
    2dc4:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2dc6:	9b01      	ldr	r3, [sp, #4]
    2dc8:	681a      	ldr	r2, [r3, #0]
    2dca:	4911      	ldr	r1, [pc, #68]	; (2e10 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2dcc:	4613      	mov	r3, r2
    2dce:	00db      	lsls	r3, r3, #3
    2dd0:	4413      	add	r3, r2
    2dd2:	440b      	add	r3, r1
    2dd4:	781b      	ldrb	r3, [r3, #0]
    2dd6:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2dd8:	9b01      	ldr	r3, [sp, #4]
    2dda:	685b      	ldr	r3, [r3, #4]
    2ddc:	4a0d      	ldr	r2, [pc, #52]	; (2e14 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2dde:	5cd3      	ldrb	r3, [r2, r3]
    2de0:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2de2:	4a0d      	ldr	r2, [pc, #52]	; (2e18 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2de4:	9b05      	ldr	r3, [sp, #20]
    2de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2dea:	681b      	ldr	r3, [r3, #0]
    2dec:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2dee:	9b03      	ldr	r3, [sp, #12]
    2df0:	f023 0307 	bic.w	r3, r3, #7
    2df4:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2df6:	9a03      	ldr	r2, [sp, #12]
    2df8:	9b04      	ldr	r3, [sp, #16]
    2dfa:	4313      	orrs	r3, r2
    2dfc:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2dfe:	4a06      	ldr	r2, [pc, #24]	; (2e18 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2e00:	9b05      	ldr	r3, [sp, #20]
    2e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e06:	9a03      	ldr	r2, [sp, #12]
    2e08:	601a      	str	r2, [r3, #0]
}
    2e0a:	bf00      	nop
    2e0c:	b006      	add	sp, #24
    2e0e:	4770      	bx	lr
    2e10:	0000a65c 	.word	0x0000a65c
    2e14:	0000aa54 	.word	0x0000aa54
    2e18:	0000aa98 	.word	0x0000aa98

00002e1c <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e1c:	b086      	sub	sp, #24
    2e1e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2e20:	9b01      	ldr	r3, [sp, #4]
    2e22:	681a      	ldr	r2, [r3, #0]
    2e24:	4911      	ldr	r1, [pc, #68]	; (2e6c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2e26:	4613      	mov	r3, r2
    2e28:	00db      	lsls	r3, r3, #3
    2e2a:	4413      	add	r3, r2
    2e2c:	440b      	add	r3, r1
    2e2e:	781b      	ldrb	r3, [r3, #0]
    2e30:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2e32:	9b01      	ldr	r3, [sp, #4]
    2e34:	685b      	ldr	r3, [r3, #4]
    2e36:	4a0e      	ldr	r2, [pc, #56]	; (2e70 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2e38:	5cd3      	ldrb	r3, [r2, r3]
    2e3a:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2e3c:	4a0d      	ldr	r2, [pc, #52]	; (2e74 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2e3e:	9b05      	ldr	r3, [sp, #20]
    2e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e44:	681b      	ldr	r3, [r3, #0]
    2e46:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2e48:	9b03      	ldr	r3, [sp, #12]
    2e4a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2e4e:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2e50:	9b04      	ldr	r3, [sp, #16]
    2e52:	021b      	lsls	r3, r3, #8
    2e54:	9a03      	ldr	r2, [sp, #12]
    2e56:	4313      	orrs	r3, r2
    2e58:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2e5a:	4a06      	ldr	r2, [pc, #24]	; (2e74 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2e5c:	9b05      	ldr	r3, [sp, #20]
    2e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e62:	9a03      	ldr	r2, [sp, #12]
    2e64:	601a      	str	r2, [r3, #0]
}
    2e66:	bf00      	nop
    2e68:	b006      	add	sp, #24
    2e6a:	4770      	bx	lr
    2e6c:	0000a65c 	.word	0x0000a65c
    2e70:	0000aa54 	.word	0x0000aa54
    2e74:	0000aa98 	.word	0x0000aa98

00002e78 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e78:	b084      	sub	sp, #16
    2e7a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2e7c:	4b09      	ldr	r3, [pc, #36]	; (2ea4 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2e7e:	695b      	ldr	r3, [r3, #20]
    2e80:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2e82:	9b03      	ldr	r3, [sp, #12]
    2e84:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2e88:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2e8a:	9b01      	ldr	r3, [sp, #4]
    2e8c:	685b      	ldr	r3, [r3, #4]
    2e8e:	3b01      	subs	r3, #1
    2e90:	041b      	lsls	r3, r3, #16
    2e92:	9a03      	ldr	r2, [sp, #12]
    2e94:	4313      	orrs	r3, r2
    2e96:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2e98:	4a02      	ldr	r2, [pc, #8]	; (2ea4 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2e9a:	9b03      	ldr	r3, [sp, #12]
    2e9c:	6153      	str	r3, [r2, #20]
}
    2e9e:	bf00      	nop
    2ea0:	b004      	add	sp, #16
    2ea2:	4770      	bx	lr
    2ea4:	40064000 	.word	0x40064000

00002ea8 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ea8:	b084      	sub	sp, #16
    2eaa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2eac:	4b09      	ldr	r3, [pc, #36]	; (2ed4 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2eae:	695b      	ldr	r3, [r3, #20]
    2eb0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2eb2:	9b03      	ldr	r3, [sp, #12]
    2eb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2eb8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2eba:	9b01      	ldr	r3, [sp, #4]
    2ebc:	685b      	ldr	r3, [r3, #4]
    2ebe:	3b01      	subs	r3, #1
    2ec0:	011b      	lsls	r3, r3, #4
    2ec2:	9a03      	ldr	r2, [sp, #12]
    2ec4:	4313      	orrs	r3, r2
    2ec6:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2ec8:	4a02      	ldr	r2, [pc, #8]	; (2ed4 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2eca:	9b03      	ldr	r3, [sp, #12]
    2ecc:	6153      	str	r3, [r2, #20]
}
    2ece:	bf00      	nop
    2ed0:	b004      	add	sp, #16
    2ed2:	4770      	bx	lr
    2ed4:	40064000 	.word	0x40064000

00002ed8 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ed8:	b084      	sub	sp, #16
    2eda:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2edc:	4b09      	ldr	r3, [pc, #36]	; (2f04 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2ede:	695b      	ldr	r3, [r3, #20]
    2ee0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2ee2:	9b03      	ldr	r3, [sp, #12]
    2ee4:	f023 030f 	bic.w	r3, r3, #15
    2ee8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2eea:	9b01      	ldr	r3, [sp, #4]
    2eec:	685b      	ldr	r3, [r3, #4]
    2eee:	3b01      	subs	r3, #1
    2ef0:	9a03      	ldr	r2, [sp, #12]
    2ef2:	4313      	orrs	r3, r2
    2ef4:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2ef6:	4a03      	ldr	r2, [pc, #12]	; (2f04 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2ef8:	9b03      	ldr	r3, [sp, #12]
    2efa:	6153      	str	r3, [r2, #20]
}
    2efc:	bf00      	nop
    2efe:	b004      	add	sp, #16
    2f00:	4770      	bx	lr
    2f02:	bf00      	nop
    2f04:	40064000 	.word	0x40064000

00002f08 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f08:	b084      	sub	sp, #16
    2f0a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f0c:	4b09      	ldr	r3, [pc, #36]	; (2f34 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2f0e:	699b      	ldr	r3, [r3, #24]
    2f10:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2f12:	9b03      	ldr	r3, [sp, #12]
    2f14:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2f18:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2f1a:	9b01      	ldr	r3, [sp, #4]
    2f1c:	685b      	ldr	r3, [r3, #4]
    2f1e:	3b01      	subs	r3, #1
    2f20:	041b      	lsls	r3, r3, #16
    2f22:	9a03      	ldr	r2, [sp, #12]
    2f24:	4313      	orrs	r3, r2
    2f26:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f28:	4a02      	ldr	r2, [pc, #8]	; (2f34 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2f2a:	9b03      	ldr	r3, [sp, #12]
    2f2c:	6193      	str	r3, [r2, #24]
}
    2f2e:	bf00      	nop
    2f30:	b004      	add	sp, #16
    2f32:	4770      	bx	lr
    2f34:	40064000 	.word	0x40064000

00002f38 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f38:	b084      	sub	sp, #16
    2f3a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f3c:	4b09      	ldr	r3, [pc, #36]	; (2f64 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2f3e:	699b      	ldr	r3, [r3, #24]
    2f40:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2f42:	9b03      	ldr	r3, [sp, #12]
    2f44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2f48:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2f4a:	9b01      	ldr	r3, [sp, #4]
    2f4c:	685b      	ldr	r3, [r3, #4]
    2f4e:	3b01      	subs	r3, #1
    2f50:	011b      	lsls	r3, r3, #4
    2f52:	9a03      	ldr	r2, [sp, #12]
    2f54:	4313      	orrs	r3, r2
    2f56:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f58:	4a02      	ldr	r2, [pc, #8]	; (2f64 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2f5a:	9b03      	ldr	r3, [sp, #12]
    2f5c:	6193      	str	r3, [r2, #24]
}
    2f5e:	bf00      	nop
    2f60:	b004      	add	sp, #16
    2f62:	4770      	bx	lr
    2f64:	40064000 	.word	0x40064000

00002f68 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f68:	b084      	sub	sp, #16
    2f6a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f6c:	4b09      	ldr	r3, [pc, #36]	; (2f94 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2f6e:	699b      	ldr	r3, [r3, #24]
    2f70:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2f72:	9b03      	ldr	r3, [sp, #12]
    2f74:	f023 030f 	bic.w	r3, r3, #15
    2f78:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2f7a:	9b01      	ldr	r3, [sp, #4]
    2f7c:	685b      	ldr	r3, [r3, #4]
    2f7e:	3b01      	subs	r3, #1
    2f80:	9a03      	ldr	r2, [sp, #12]
    2f82:	4313      	orrs	r3, r2
    2f84:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f86:	4a03      	ldr	r2, [pc, #12]	; (2f94 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2f88:	9b03      	ldr	r3, [sp, #12]
    2f8a:	6193      	str	r3, [r2, #24]
}
    2f8c:	bf00      	nop
    2f8e:	b004      	add	sp, #16
    2f90:	4770      	bx	lr
    2f92:	bf00      	nop
    2f94:	40064000 	.word	0x40064000

00002f98 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f98:	b084      	sub	sp, #16
    2f9a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2f9c:	4b09      	ldr	r3, [pc, #36]	; (2fc4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2f9e:	69db      	ldr	r3, [r3, #28]
    2fa0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2fa2:	9b03      	ldr	r3, [sp, #12]
    2fa4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2fa8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2faa:	9b01      	ldr	r3, [sp, #4]
    2fac:	685b      	ldr	r3, [r3, #4]
    2fae:	3b01      	subs	r3, #1
    2fb0:	041b      	lsls	r3, r3, #16
    2fb2:	9a03      	ldr	r2, [sp, #12]
    2fb4:	4313      	orrs	r3, r2
    2fb6:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2fb8:	4a02      	ldr	r2, [pc, #8]	; (2fc4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2fba:	9b03      	ldr	r3, [sp, #12]
    2fbc:	61d3      	str	r3, [r2, #28]
}
    2fbe:	bf00      	nop
    2fc0:	b004      	add	sp, #16
    2fc2:	4770      	bx	lr
    2fc4:	40064000 	.word	0x40064000

00002fc8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fc8:	b084      	sub	sp, #16
    2fca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2fcc:	4b09      	ldr	r3, [pc, #36]	; (2ff4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2fce:	69db      	ldr	r3, [r3, #28]
    2fd0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2fd2:	9b03      	ldr	r3, [sp, #12]
    2fd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2fd8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2fda:	9b01      	ldr	r3, [sp, #4]
    2fdc:	685b      	ldr	r3, [r3, #4]
    2fde:	3b01      	subs	r3, #1
    2fe0:	011b      	lsls	r3, r3, #4
    2fe2:	9a03      	ldr	r2, [sp, #12]
    2fe4:	4313      	orrs	r3, r2
    2fe6:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2fe8:	4a02      	ldr	r2, [pc, #8]	; (2ff4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2fea:	9b03      	ldr	r3, [sp, #12]
    2fec:	61d3      	str	r3, [r2, #28]
}
    2fee:	bf00      	nop
    2ff0:	b004      	add	sp, #16
    2ff2:	4770      	bx	lr
    2ff4:	40064000 	.word	0x40064000

00002ff8 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ff8:	b084      	sub	sp, #16
    2ffa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2ffc:	4b09      	ldr	r3, [pc, #36]	; (3024 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2ffe:	69db      	ldr	r3, [r3, #28]
    3000:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    3002:	9b03      	ldr	r3, [sp, #12]
    3004:	f023 030f 	bic.w	r3, r3, #15
    3008:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    300a:	9b01      	ldr	r3, [sp, #4]
    300c:	685b      	ldr	r3, [r3, #4]
    300e:	3b01      	subs	r3, #1
    3010:	9a03      	ldr	r2, [sp, #12]
    3012:	4313      	orrs	r3, r2
    3014:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3016:	4a03      	ldr	r2, [pc, #12]	; (3024 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3018:	9b03      	ldr	r3, [sp, #12]
    301a:	61d3      	str	r3, [r2, #28]
}
    301c:	bf00      	nop
    301e:	b004      	add	sp, #16
    3020:	4770      	bx	lr
    3022:	bf00      	nop
    3024:	40064000 	.word	0x40064000

00003028 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3028:	b084      	sub	sp, #16
    302a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    302c:	4b0a      	ldr	r3, [pc, #40]	; (3058 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    302e:	685b      	ldr	r3, [r3, #4]
    3030:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3032:	9b03      	ldr	r3, [sp, #12]
    3034:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3038:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    303a:	9b01      	ldr	r3, [sp, #4]
    303c:	685b      	ldr	r3, [r3, #4]
    303e:	3b01      	subs	r3, #1
    3040:	021b      	lsls	r3, r3, #8
    3042:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3046:	9a03      	ldr	r2, [sp, #12]
    3048:	4313      	orrs	r3, r2
    304a:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    304c:	4a02      	ldr	r2, [pc, #8]	; (3058 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    304e:	9b03      	ldr	r3, [sp, #12]
    3050:	6053      	str	r3, [r2, #4]
}
    3052:	bf00      	nop
    3054:	b004      	add	sp, #16
    3056:	4770      	bx	lr
    3058:	40048000 	.word	0x40048000

0000305c <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    305c:	b084      	sub	sp, #16
    305e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3060:	4919      	ldr	r1, [pc, #100]	; (30c8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3062:	9b01      	ldr	r3, [sp, #4]
    3064:	681a      	ldr	r2, [r3, #0]
    3066:	4819      	ldr	r0, [pc, #100]	; (30cc <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3068:	4613      	mov	r3, r2
    306a:	00db      	lsls	r3, r3, #3
    306c:	4413      	add	r3, r2
    306e:	4403      	add	r3, r0
    3070:	3305      	adds	r3, #5
    3072:	781b      	ldrb	r3, [r3, #0]
    3074:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3078:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    307a:	9b03      	ldr	r3, [sp, #12]
    307c:	f023 030f 	bic.w	r3, r3, #15
    3080:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    3082:	9b01      	ldr	r3, [sp, #4]
    3084:	685b      	ldr	r3, [r3, #4]
    3086:	3b01      	subs	r3, #1
    3088:	f003 0307 	and.w	r3, r3, #7
    308c:	9a03      	ldr	r2, [sp, #12]
    308e:	4313      	orrs	r3, r2
    3090:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3092:	9b01      	ldr	r3, [sp, #4]
    3094:	7a1b      	ldrb	r3, [r3, #8]
    3096:	3b01      	subs	r3, #1
    3098:	00db      	lsls	r3, r3, #3
    309a:	f003 0308 	and.w	r3, r3, #8
    309e:	9a03      	ldr	r2, [sp, #12]
    30a0:	4313      	orrs	r3, r2
    30a2:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    30a4:	4908      	ldr	r1, [pc, #32]	; (30c8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    30a6:	9b01      	ldr	r3, [sp, #4]
    30a8:	681a      	ldr	r2, [r3, #0]
    30aa:	4808      	ldr	r0, [pc, #32]	; (30cc <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    30ac:	4613      	mov	r3, r2
    30ae:	00db      	lsls	r3, r3, #3
    30b0:	4413      	add	r3, r2
    30b2:	4403      	add	r3, r0
    30b4:	3305      	adds	r3, #5
    30b6:	781b      	ldrb	r3, [r3, #0]
    30b8:	461a      	mov	r2, r3
    30ba:	9b03      	ldr	r3, [sp, #12]
    30bc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    30c0:	bf00      	nop
    30c2:	b004      	add	sp, #16
    30c4:	4770      	bx	lr
    30c6:	bf00      	nop
    30c8:	40065000 	.word	0x40065000
    30cc:	0000a65c 	.word	0x0000a65c

000030d0 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30d0:	b084      	sub	sp, #16
    30d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    30d4:	4b10      	ldr	r3, [pc, #64]	; (3118 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    30d8:	4a0f      	ldr	r2, [pc, #60]	; (3118 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    30de:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    30e0:	4b0d      	ldr	r3, [pc, #52]	; (3118 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    30e4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    30e6:	9b03      	ldr	r3, [sp, #12]
    30e8:	f023 030f 	bic.w	r3, r3, #15
    30ec:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    30ee:	9b01      	ldr	r3, [sp, #4]
    30f0:	685b      	ldr	r3, [r3, #4]
    30f2:	3b01      	subs	r3, #1
    30f4:	005b      	lsls	r3, r3, #1
    30f6:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    30fa:	9b01      	ldr	r3, [sp, #4]
    30fc:	7a1b      	ldrb	r3, [r3, #8]
    30fe:	3b01      	subs	r3, #1
    3100:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3104:	4313      	orrs	r3, r2
    3106:	9a03      	ldr	r2, [sp, #12]
    3108:	4313      	orrs	r3, r2
    310a:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    310c:	4a02      	ldr	r2, [pc, #8]	; (3118 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    310e:	9b03      	ldr	r3, [sp, #12]
    3110:	6693      	str	r3, [r2, #104]	; 0x68
}
    3112:	bf00      	nop
    3114:	b004      	add	sp, #16
    3116:	4770      	bx	lr
    3118:	40048000 	.word	0x40048000

0000311c <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    311c:	b082      	sub	sp, #8
    311e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3120:	bf00      	nop
    3122:	b002      	add	sp, #8
    3124:	4770      	bx	lr
	...

00003128 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3128:	b082      	sub	sp, #8
    312a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    312c:	bf00      	nop
    312e:	b002      	add	sp, #8
    3130:	4770      	bx	lr

00003132 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3132:	b082      	sub	sp, #8
    3134:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3136:	bf00      	nop
    3138:	b002      	add	sp, #8
    313a:	4770      	bx	lr

0000313c <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    313c:	b500      	push	{lr}
    313e:	b083      	sub	sp, #12
    3140:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3142:	9b01      	ldr	r3, [sp, #4]
    3144:	2b00      	cmp	r3, #0
    3146:	d002      	beq.n	314e <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3148:	9801      	ldr	r0, [sp, #4]
    314a:	f000 f86a 	bl	3222 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    314e:	bf00      	nop
    3150:	b003      	add	sp, #12
    3152:	f85d fb04 	ldr.w	pc, [sp], #4

00003156 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3156:	b500      	push	{lr}
    3158:	b083      	sub	sp, #12
    315a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    315c:	9b01      	ldr	r3, [sp, #4]
    315e:	2b00      	cmp	r3, #0
    3160:	d002      	beq.n	3168 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    3162:	9801      	ldr	r0, [sp, #4]
    3164:	f000 f884 	bl	3270 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3168:	bf00      	nop
    316a:	b003      	add	sp, #12
    316c:	f85d fb04 	ldr.w	pc, [sp], #4

00003170 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3170:	b500      	push	{lr}
    3172:	b089      	sub	sp, #36	; 0x24
    3174:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3176:	2300      	movs	r3, #0
    3178:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    317c:	9b01      	ldr	r3, [sp, #4]
    317e:	2b00      	cmp	r3, #0
    3180:	d031      	beq.n	31e6 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    3182:	4b1b      	ldr	r3, [pc, #108]	; (31f0 <Clock_Ip_CompleteSOSC+0x80>)
    3184:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3188:	f003 0301 	and.w	r3, r3, #1
    318c:	2b00      	cmp	r3, #0
    318e:	d02a      	beq.n	31e6 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3190:	aa03      	add	r2, sp, #12
    3192:	a904      	add	r1, sp, #16
    3194:	a805      	add	r0, sp, #20
    3196:	f24c 3350 	movw	r3, #50000	; 0xc350
    319a:	f7ff fd1d 	bl	2bd8 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    319e:	4b14      	ldr	r3, [pc, #80]	; (31f0 <Clock_Ip_CompleteSOSC+0x80>)
    31a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31a4:	0e1b      	lsrs	r3, r3, #24
    31a6:	f003 0301 	and.w	r3, r3, #1
    31aa:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    31ac:	9a03      	ldr	r2, [sp, #12]
    31ae:	a904      	add	r1, sp, #16
    31b0:	ab05      	add	r3, sp, #20
    31b2:	4618      	mov	r0, r3
    31b4:	f7ff fd2a 	bl	2c0c <Clock_Ip_TimeoutExpired>
    31b8:	4603      	mov	r3, r0
    31ba:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    31be:	9b06      	ldr	r3, [sp, #24]
    31c0:	2b00      	cmp	r3, #0
    31c2:	d106      	bne.n	31d2 <Clock_Ip_CompleteSOSC+0x62>
    31c4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31c8:	f083 0301 	eor.w	r3, r3, #1
    31cc:	b2db      	uxtb	r3, r3
    31ce:	2b00      	cmp	r3, #0
    31d0:	d1e5      	bne.n	319e <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    31d2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31d6:	2b00      	cmp	r3, #0
    31d8:	d005      	beq.n	31e6 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    31da:	9b01      	ldr	r3, [sp, #4]
    31dc:	681b      	ldr	r3, [r3, #0]
    31de:	4619      	mov	r1, r3
    31e0:	2001      	movs	r0, #1
    31e2:	f7ff fce9 	bl	2bb8 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    31e6:	bf00      	nop
    31e8:	b009      	add	sp, #36	; 0x24
    31ea:	f85d fb04 	ldr.w	pc, [sp], #4
    31ee:	bf00      	nop
    31f0:	40064000 	.word	0x40064000

000031f4 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    31f4:	b500      	push	{lr}
    31f6:	b083      	sub	sp, #12
    31f8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    31fa:	9801      	ldr	r0, [sp, #4]
    31fc:	f000 f8c0 	bl	3380 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3200:	bf00      	nop
    3202:	b003      	add	sp, #12
    3204:	f85d fb04 	ldr.w	pc, [sp], #4

00003208 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3208:	b500      	push	{lr}
    320a:	b083      	sub	sp, #12
    320c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    320e:	9b01      	ldr	r3, [sp, #4]
    3210:	2b00      	cmp	r3, #0
    3212:	d002      	beq.n	321a <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3214:	9801      	ldr	r0, [sp, #4]
    3216:	f000 f8c3 	bl	33a0 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    321a:	bf00      	nop
    321c:	b003      	add	sp, #12
    321e:	f85d fb04 	ldr.w	pc, [sp], #4

00003222 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3222:	b082      	sub	sp, #8
    3224:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3226:	4b11      	ldr	r3, [pc, #68]	; (326c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3228:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    322c:	4a0f      	ldr	r2, [pc, #60]	; (326c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    322e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3232:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    3236:	4b0d      	ldr	r3, [pc, #52]	; (326c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3238:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    323c:	4a0b      	ldr	r2, [pc, #44]	; (326c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    323e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3242:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    3246:	4b09      	ldr	r3, [pc, #36]	; (326c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3248:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    324c:	4a07      	ldr	r2, [pc, #28]	; (326c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    324e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3252:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    3256:	4b05      	ldr	r3, [pc, #20]	; (326c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3258:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    325c:	4a03      	ldr	r2, [pc, #12]	; (326c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    325e:	f023 0301 	bic.w	r3, r3, #1
    3262:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3266:	bf00      	nop
    3268:	b002      	add	sp, #8
    326a:	4770      	bx	lr
    326c:	40064000 	.word	0x40064000

00003270 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3270:	b082      	sub	sp, #8
    3272:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    3274:	9b01      	ldr	r3, [sp, #4]
    3276:	891b      	ldrh	r3, [r3, #8]
    3278:	2b01      	cmp	r3, #1
    327a:	d174      	bne.n	3366 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    327c:	9b01      	ldr	r3, [sp, #4]
    327e:	7bdb      	ldrb	r3, [r3, #15]
    3280:	2b00      	cmp	r3, #0
    3282:	d002      	beq.n	328a <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    3284:	2b01      	cmp	r3, #1
    3286:	d009      	beq.n	329c <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    3288:	e011      	b.n	32ae <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    328a:	4b39      	ldr	r3, [pc, #228]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    328c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3290:	4a37      	ldr	r2, [pc, #220]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3292:	f023 0308 	bic.w	r3, r3, #8
    3296:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    329a:	e008      	b.n	32ae <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    329c:	4b34      	ldr	r3, [pc, #208]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    329e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32a2:	4a33      	ldr	r2, [pc, #204]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32a4:	f043 0308 	orr.w	r3, r3, #8
    32a8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    32ac:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    32ae:	4b30      	ldr	r3, [pc, #192]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32b4:	4a2e      	ldr	r2, [pc, #184]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    32ba:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    32be:	9b01      	ldr	r3, [sp, #4]
    32c0:	685b      	ldr	r3, [r3, #4]
    32c2:	4a2c      	ldr	r2, [pc, #176]	; (3374 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    32c4:	4293      	cmp	r3, r2
    32c6:	d90d      	bls.n	32e4 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    32c8:	9b01      	ldr	r3, [sp, #4]
    32ca:	685b      	ldr	r3, [r3, #4]
    32cc:	4a2a      	ldr	r2, [pc, #168]	; (3378 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    32ce:	4293      	cmp	r3, r2
    32d0:	d208      	bcs.n	32e4 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    32d2:	4b27      	ldr	r3, [pc, #156]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32d8:	4a25      	ldr	r2, [pc, #148]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32da:	f043 0320 	orr.w	r3, r3, #32
    32de:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    32e2:	e007      	b.n	32f4 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    32e4:	4b22      	ldr	r3, [pc, #136]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32ea:	4a21      	ldr	r2, [pc, #132]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32ec:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    32f0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    32f4:	9b01      	ldr	r3, [sp, #4]
    32f6:	7b1b      	ldrb	r3, [r3, #12]
    32f8:	2b00      	cmp	r3, #0
    32fa:	d108      	bne.n	330e <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    32fc:	4b1c      	ldr	r3, [pc, #112]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3302:	4a1b      	ldr	r2, [pc, #108]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3304:	f043 0304 	orr.w	r3, r3, #4
    3308:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    330c:	e007      	b.n	331e <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    330e:	4b18      	ldr	r3, [pc, #96]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3310:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3314:	4a16      	ldr	r2, [pc, #88]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3316:	f023 0304 	bic.w	r3, r3, #4
    331a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    331e:	9b01      	ldr	r3, [sp, #4]
    3320:	7c1b      	ldrb	r3, [r3, #16]
    3322:	2b02      	cmp	r3, #2
    3324:	d011      	beq.n	334a <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3326:	2b02      	cmp	r3, #2
    3328:	dc14      	bgt.n	3354 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    332a:	2b00      	cmp	r3, #0
    332c:	d002      	beq.n	3334 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    332e:	2b01      	cmp	r3, #1
    3330:	d005      	beq.n	333e <Clock_Ip_SetSOSC_TrustedCall+0xce>
    3332:	e00f      	b.n	3354 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3334:	4b0e      	ldr	r3, [pc, #56]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3336:	2201      	movs	r2, #1
    3338:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    333c:	e014      	b.n	3368 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    333e:	4b0c      	ldr	r3, [pc, #48]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3340:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3344:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3348:	e00e      	b.n	3368 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    334a:	4b09      	ldr	r3, [pc, #36]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    334c:	4a0b      	ldr	r2, [pc, #44]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    334e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    3352:	e009      	b.n	3368 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3354:	4b06      	ldr	r3, [pc, #24]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3356:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    335a:	4a05      	ldr	r2, [pc, #20]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    335c:	f043 0301 	orr.w	r3, r3, #1
    3360:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3364:	e000      	b.n	3368 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    3366:	bf00      	nop
}
    3368:	bf00      	nop
    336a:	b002      	add	sp, #8
    336c:	4770      	bx	lr
    336e:	bf00      	nop
    3370:	40064000 	.word	0x40064000
    3374:	003d08ff 	.word	0x003d08ff
    3378:	007a1200 	.word	0x007a1200
    337c:	00030001 	.word	0x00030001

00003380 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    3380:	b082      	sub	sp, #8
    3382:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    3384:	4b05      	ldr	r3, [pc, #20]	; (339c <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3386:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    338a:	4a04      	ldr	r2, [pc, #16]	; (339c <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    338c:	f023 0301 	bic.w	r3, r3, #1
    3390:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3394:	bf00      	nop
    3396:	b002      	add	sp, #8
    3398:	4770      	bx	lr
    339a:	bf00      	nop
    339c:	40064000 	.word	0x40064000

000033a0 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    33a0:	b082      	sub	sp, #8
    33a2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    33a4:	9b01      	ldr	r3, [sp, #4]
    33a6:	891b      	ldrh	r3, [r3, #8]
    33a8:	2b01      	cmp	r3, #1
    33aa:	d107      	bne.n	33bc <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    33ac:	4b05      	ldr	r3, [pc, #20]	; (33c4 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    33ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    33b2:	4a04      	ldr	r2, [pc, #16]	; (33c4 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    33b4:	f043 0301 	orr.w	r3, r3, #1
    33b8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    33bc:	bf00      	nop
    33be:	b002      	add	sp, #8
    33c0:	4770      	bx	lr
    33c2:	bf00      	nop
    33c4:	40064000 	.word	0x40064000

000033c8 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    33c8:	b082      	sub	sp, #8
    33ca:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    33cc:	bf00      	nop
    33ce:	b002      	add	sp, #8
    33d0:	4770      	bx	lr

000033d2 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    33d2:	b082      	sub	sp, #8
    33d4:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    33d6:	2300      	movs	r3, #0
}
    33d8:	4618      	mov	r0, r3
    33da:	b002      	add	sp, #8
    33dc:	4770      	bx	lr

000033de <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    33de:	b082      	sub	sp, #8
    33e0:	9001      	str	r0, [sp, #4]
    33e2:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    33e4:	bf00      	nop
    33e6:	b002      	add	sp, #8
    33e8:	4770      	bx	lr
	...

000033ec <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    33ec:	b082      	sub	sp, #8
    33ee:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    33f0:	bf00      	nop
    33f2:	b002      	add	sp, #8
    33f4:	4770      	bx	lr

000033f6 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    33f6:	b082      	sub	sp, #8
    33f8:	9001      	str	r0, [sp, #4]
    33fa:	460b      	mov	r3, r1
    33fc:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    3400:	bf00      	nop
    3402:	b002      	add	sp, #8
    3404:	4770      	bx	lr

00003406 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    3406:	b500      	push	{lr}
    3408:	b083      	sub	sp, #12
    340a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    340c:	9b01      	ldr	r3, [sp, #4]
    340e:	2b00      	cmp	r3, #0
    3410:	d002      	beq.n	3418 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    3412:	9801      	ldr	r0, [sp, #4]
    3414:	f000 f8e7 	bl	35e6 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3418:	bf00      	nop
    341a:	b003      	add	sp, #12
    341c:	f85d fb04 	ldr.w	pc, [sp], #4

00003420 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3420:	b500      	push	{lr}
    3422:	b085      	sub	sp, #20
    3424:	9001      	str	r0, [sp, #4]
    3426:	460b      	mov	r3, r1
    3428:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    342c:	9b01      	ldr	r3, [sp, #4]
    342e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3430:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3434:	2b00      	cmp	r3, #0
    3436:	d003      	beq.n	3440 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3438:	2300      	movs	r3, #0
    343a:	f8ad 300c 	strh.w	r3, [sp, #12]
    343e:	e002      	b.n	3446 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3440:	2301      	movs	r3, #1
    3442:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    3446:	ab02      	add	r3, sp, #8
    3448:	4618      	mov	r0, r3
    344a:	f7ff ffdc 	bl	3406 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    344e:	bf00      	nop
    3450:	b005      	add	sp, #20
    3452:	f85d fb04 	ldr.w	pc, [sp], #4

00003456 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    3456:	b500      	push	{lr}
    3458:	b083      	sub	sp, #12
    345a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    345c:	9b01      	ldr	r3, [sp, #4]
    345e:	2b00      	cmp	r3, #0
    3460:	d002      	beq.n	3468 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    3462:	9801      	ldr	r0, [sp, #4]
    3464:	f000 f8d6 	bl	3614 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3468:	bf00      	nop
    346a:	b003      	add	sp, #12
    346c:	f85d fb04 	ldr.w	pc, [sp], #4

00003470 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3470:	b500      	push	{lr}
    3472:	b085      	sub	sp, #20
    3474:	9001      	str	r0, [sp, #4]
    3476:	460b      	mov	r3, r1
    3478:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    347c:	9b01      	ldr	r3, [sp, #4]
    347e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3480:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3484:	2b00      	cmp	r3, #0
    3486:	d003      	beq.n	3490 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    3488:	2300      	movs	r3, #0
    348a:	f8ad 300c 	strh.w	r3, [sp, #12]
    348e:	e002      	b.n	3496 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3490:	2301      	movs	r3, #1
    3492:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    3496:	ab02      	add	r3, sp, #8
    3498:	4618      	mov	r0, r3
    349a:	f7ff ffdc 	bl	3456 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    349e:	bf00      	nop
    34a0:	b005      	add	sp, #20
    34a2:	f85d fb04 	ldr.w	pc, [sp], #4

000034a6 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    34a6:	b500      	push	{lr}
    34a8:	b083      	sub	sp, #12
    34aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34ac:	9b01      	ldr	r3, [sp, #4]
    34ae:	2b00      	cmp	r3, #0
    34b0:	d002      	beq.n	34b8 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    34b2:	9801      	ldr	r0, [sp, #4]
    34b4:	f000 f8c6 	bl	3644 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34b8:	bf00      	nop
    34ba:	b003      	add	sp, #12
    34bc:	f85d fb04 	ldr.w	pc, [sp], #4

000034c0 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    34c0:	b500      	push	{lr}
    34c2:	b085      	sub	sp, #20
    34c4:	9001      	str	r0, [sp, #4]
    34c6:	460b      	mov	r3, r1
    34c8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    34cc:	9b01      	ldr	r3, [sp, #4]
    34ce:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    34d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    34d4:	2b00      	cmp	r3, #0
    34d6:	d003      	beq.n	34e0 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    34d8:	2300      	movs	r3, #0
    34da:	f8ad 300c 	strh.w	r3, [sp, #12]
    34de:	e002      	b.n	34e6 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    34e0:	2301      	movs	r3, #1
    34e2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    34e6:	ab02      	add	r3, sp, #8
    34e8:	4618      	mov	r0, r3
    34ea:	f7ff ffdc 	bl	34a6 <Clock_Ip_ClockSetSimClkoutEnable>
}
    34ee:	bf00      	nop
    34f0:	b005      	add	sp, #20
    34f2:	f85d fb04 	ldr.w	pc, [sp], #4

000034f6 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    34f6:	b500      	push	{lr}
    34f8:	b083      	sub	sp, #12
    34fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34fc:	9b01      	ldr	r3, [sp, #4]
    34fe:	2b00      	cmp	r3, #0
    3500:	d002      	beq.n	3508 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    3502:	9801      	ldr	r0, [sp, #4]
    3504:	f000 f8b6 	bl	3674 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3508:	bf00      	nop
    350a:	b003      	add	sp, #12
    350c:	f85d fb04 	ldr.w	pc, [sp], #4

00003510 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3510:	b500      	push	{lr}
    3512:	b085      	sub	sp, #20
    3514:	9001      	str	r0, [sp, #4]
    3516:	460b      	mov	r3, r1
    3518:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    351c:	9b01      	ldr	r3, [sp, #4]
    351e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3520:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3524:	2b00      	cmp	r3, #0
    3526:	d003      	beq.n	3530 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3528:	2300      	movs	r3, #0
    352a:	f8ad 300c 	strh.w	r3, [sp, #12]
    352e:	e002      	b.n	3536 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3530:	2301      	movs	r3, #1
    3532:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    3536:	ab02      	add	r3, sp, #8
    3538:	4618      	mov	r0, r3
    353a:	f7ff ffdc 	bl	34f6 <Clock_Ip_ClockSetPccCgcEnable>
}
    353e:	bf00      	nop
    3540:	b005      	add	sp, #20
    3542:	f85d fb04 	ldr.w	pc, [sp], #4

00003546 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    3546:	b500      	push	{lr}
    3548:	b083      	sub	sp, #12
    354a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    354c:	9b01      	ldr	r3, [sp, #4]
    354e:	2b00      	cmp	r3, #0
    3550:	d002      	beq.n	3558 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    3552:	9801      	ldr	r0, [sp, #4]
    3554:	f000 f8bc 	bl	36d0 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3558:	bf00      	nop
    355a:	b003      	add	sp, #12
    355c:	f85d fb04 	ldr.w	pc, [sp], #4

00003560 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    3560:	b500      	push	{lr}
    3562:	b085      	sub	sp, #20
    3564:	9001      	str	r0, [sp, #4]
    3566:	460b      	mov	r3, r1
    3568:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    356c:	9b01      	ldr	r3, [sp, #4]
    356e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3570:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3574:	2b00      	cmp	r3, #0
    3576:	d003      	beq.n	3580 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    3578:	2300      	movs	r3, #0
    357a:	f8ad 300c 	strh.w	r3, [sp, #12]
    357e:	e002      	b.n	3586 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3580:	2301      	movs	r3, #1
    3582:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    3586:	ab02      	add	r3, sp, #8
    3588:	4618      	mov	r0, r3
    358a:	f7ff ffdc 	bl	3546 <Clock_Ip_ClockSetSimGate>
}
    358e:	bf00      	nop
    3590:	b005      	add	sp, #20
    3592:	f85d fb04 	ldr.w	pc, [sp], #4

00003596 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    3596:	b500      	push	{lr}
    3598:	b083      	sub	sp, #12
    359a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    359c:	9b01      	ldr	r3, [sp, #4]
    359e:	2b00      	cmp	r3, #0
    35a0:	d002      	beq.n	35a8 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    35a2:	9801      	ldr	r0, [sp, #4]
    35a4:	f000 f8c0 	bl	3728 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    35a8:	bf00      	nop
    35aa:	b003      	add	sp, #12
    35ac:	f85d fb04 	ldr.w	pc, [sp], #4

000035b0 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    35b0:	b500      	push	{lr}
    35b2:	b085      	sub	sp, #20
    35b4:	9001      	str	r0, [sp, #4]
    35b6:	460b      	mov	r3, r1
    35b8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    35bc:	9b01      	ldr	r3, [sp, #4]
    35be:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    35c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    35c4:	2b00      	cmp	r3, #0
    35c6:	d003      	beq.n	35d0 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    35c8:	2300      	movs	r3, #0
    35ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    35ce:	e002      	b.n	35d6 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    35d0:	2301      	movs	r3, #1
    35d2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    35d6:	ab02      	add	r3, sp, #8
    35d8:	4618      	mov	r0, r3
    35da:	f7ff ffdc 	bl	3596 <Clock_Ip_ClockSetSimTraceEnable>
}
    35de:	bf00      	nop
    35e0:	b005      	add	sp, #20
    35e2:	f85d fb04 	ldr.w	pc, [sp], #4

000035e6 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35e6:	b084      	sub	sp, #16
    35e8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    35ea:	4b09      	ldr	r3, [pc, #36]	; (3610 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    35ec:	691b      	ldr	r3, [r3, #16]
    35ee:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    35f0:	9b03      	ldr	r3, [sp, #12]
    35f2:	f023 0301 	bic.w	r3, r3, #1
    35f6:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    35f8:	9b01      	ldr	r3, [sp, #4]
    35fa:	889b      	ldrh	r3, [r3, #4]
    35fc:	461a      	mov	r2, r3
    35fe:	9b03      	ldr	r3, [sp, #12]
    3600:	4313      	orrs	r3, r2
    3602:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3604:	4a02      	ldr	r2, [pc, #8]	; (3610 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3606:	9b03      	ldr	r3, [sp, #12]
    3608:	6113      	str	r3, [r2, #16]
}
    360a:	bf00      	nop
    360c:	b004      	add	sp, #16
    360e:	4770      	bx	lr
    3610:	40048000 	.word	0x40048000

00003614 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3614:	b084      	sub	sp, #16
    3616:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3618:	4b09      	ldr	r3, [pc, #36]	; (3640 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    361a:	691b      	ldr	r3, [r3, #16]
    361c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    361e:	9b03      	ldr	r3, [sp, #12]
    3620:	f023 0302 	bic.w	r3, r3, #2
    3624:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3626:	9b01      	ldr	r3, [sp, #4]
    3628:	889b      	ldrh	r3, [r3, #4]
    362a:	005b      	lsls	r3, r3, #1
    362c:	9a03      	ldr	r2, [sp, #12]
    362e:	4313      	orrs	r3, r2
    3630:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3632:	4a03      	ldr	r2, [pc, #12]	; (3640 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3634:	9b03      	ldr	r3, [sp, #12]
    3636:	6113      	str	r3, [r2, #16]
}
    3638:	bf00      	nop
    363a:	b004      	add	sp, #16
    363c:	4770      	bx	lr
    363e:	bf00      	nop
    3640:	40048000 	.word	0x40048000

00003644 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3644:	b084      	sub	sp, #16
    3646:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3648:	4b09      	ldr	r3, [pc, #36]	; (3670 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    364a:	685b      	ldr	r3, [r3, #4]
    364c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    364e:	9b03      	ldr	r3, [sp, #12]
    3650:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3654:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    3656:	9b01      	ldr	r3, [sp, #4]
    3658:	889b      	ldrh	r3, [r3, #4]
    365a:	02db      	lsls	r3, r3, #11
    365c:	9a03      	ldr	r2, [sp, #12]
    365e:	4313      	orrs	r3, r2
    3660:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3662:	4a03      	ldr	r2, [pc, #12]	; (3670 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3664:	9b03      	ldr	r3, [sp, #12]
    3666:	6053      	str	r3, [r2, #4]
}
    3668:	bf00      	nop
    366a:	b004      	add	sp, #16
    366c:	4770      	bx	lr
    366e:	bf00      	nop
    3670:	40048000 	.word	0x40048000

00003674 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3674:	b084      	sub	sp, #16
    3676:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    3678:	4913      	ldr	r1, [pc, #76]	; (36c8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    367a:	9b01      	ldr	r3, [sp, #4]
    367c:	681a      	ldr	r2, [r3, #0]
    367e:	4813      	ldr	r0, [pc, #76]	; (36cc <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3680:	4613      	mov	r3, r2
    3682:	00db      	lsls	r3, r3, #3
    3684:	4413      	add	r3, r2
    3686:	4403      	add	r3, r0
    3688:	3306      	adds	r3, #6
    368a:	781b      	ldrb	r3, [r3, #0]
    368c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3690:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    3692:	9b03      	ldr	r3, [sp, #12]
    3694:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    3698:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    369a:	9b01      	ldr	r3, [sp, #4]
    369c:	889b      	ldrh	r3, [r3, #4]
    369e:	079b      	lsls	r3, r3, #30
    36a0:	9a03      	ldr	r2, [sp, #12]
    36a2:	4313      	orrs	r3, r2
    36a4:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    36a6:	4908      	ldr	r1, [pc, #32]	; (36c8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    36a8:	9b01      	ldr	r3, [sp, #4]
    36aa:	681a      	ldr	r2, [r3, #0]
    36ac:	4807      	ldr	r0, [pc, #28]	; (36cc <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    36ae:	4613      	mov	r3, r2
    36b0:	00db      	lsls	r3, r3, #3
    36b2:	4413      	add	r3, r2
    36b4:	4403      	add	r3, r0
    36b6:	3306      	adds	r3, #6
    36b8:	781b      	ldrb	r3, [r3, #0]
    36ba:	461a      	mov	r2, r3
    36bc:	9b03      	ldr	r3, [sp, #12]
    36be:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    36c2:	bf00      	nop
    36c4:	b004      	add	sp, #16
    36c6:	4770      	bx	lr
    36c8:	40065000 	.word	0x40065000
    36cc:	0000a65c 	.word	0x0000a65c

000036d0 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    36d0:	b086      	sub	sp, #24
    36d2:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    36d4:	9b01      	ldr	r3, [sp, #4]
    36d6:	889b      	ldrh	r3, [r3, #4]
    36d8:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    36da:	9b01      	ldr	r3, [sp, #4]
    36dc:	681a      	ldr	r2, [r3, #0]
    36de:	4910      	ldr	r1, [pc, #64]	; (3720 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    36e0:	4613      	mov	r3, r2
    36e2:	00db      	lsls	r3, r3, #3
    36e4:	4413      	add	r3, r2
    36e6:	440b      	add	r3, r1
    36e8:	3306      	adds	r3, #6
    36ea:	781b      	ldrb	r3, [r3, #0]
    36ec:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    36ee:	4b0d      	ldr	r3, [pc, #52]	; (3724 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    36f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    36f2:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    36f4:	2201      	movs	r2, #1
    36f6:	9b04      	ldr	r3, [sp, #16]
    36f8:	fa02 f303 	lsl.w	r3, r2, r3
    36fc:	43db      	mvns	r3, r3
    36fe:	9a03      	ldr	r2, [sp, #12]
    3700:	4013      	ands	r3, r2
    3702:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3704:	9a05      	ldr	r2, [sp, #20]
    3706:	9b04      	ldr	r3, [sp, #16]
    3708:	fa02 f303 	lsl.w	r3, r2, r3
    370c:	9a03      	ldr	r2, [sp, #12]
    370e:	4313      	orrs	r3, r2
    3710:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    3712:	4a04      	ldr	r2, [pc, #16]	; (3724 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3714:	9b03      	ldr	r3, [sp, #12]
    3716:	6413      	str	r3, [r2, #64]	; 0x40
}
    3718:	bf00      	nop
    371a:	b006      	add	sp, #24
    371c:	4770      	bx	lr
    371e:	bf00      	nop
    3720:	0000a65c 	.word	0x0000a65c
    3724:	40048000 	.word	0x40048000

00003728 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3728:	b084      	sub	sp, #16
    372a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    372c:	4b0a      	ldr	r3, [pc, #40]	; (3758 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    372e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3730:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    3732:	9b01      	ldr	r3, [sp, #4]
    3734:	889b      	ldrh	r3, [r3, #4]
    3736:	2b01      	cmp	r3, #1
    3738:	d104      	bne.n	3744 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    373a:	9b03      	ldr	r3, [sp, #12]
    373c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3740:	9303      	str	r3, [sp, #12]
    3742:	e003      	b.n	374c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3744:	9b03      	ldr	r3, [sp, #12]
    3746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    374a:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    374c:	4a02      	ldr	r2, [pc, #8]	; (3758 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    374e:	9b03      	ldr	r3, [sp, #12]
    3750:	6693      	str	r3, [r2, #104]	; 0x68
}
    3752:	bf00      	nop
    3754:	b004      	add	sp, #16
    3756:	4770      	bx	lr
    3758:	40048000 	.word	0x40048000

0000375c <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    375c:	b082      	sub	sp, #8
    375e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3760:	bf00      	nop
    3762:	b002      	add	sp, #8
    3764:	4770      	bx	lr

00003766 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    3766:	b082      	sub	sp, #8
    3768:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    376a:	bf00      	nop
    376c:	b002      	add	sp, #8
    376e:	4770      	bx	lr

00003770 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3770:	b500      	push	{lr}
    3772:	b083      	sub	sp, #12
    3774:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3776:	9b01      	ldr	r3, [sp, #4]
    3778:	2b00      	cmp	r3, #0
    377a:	d002      	beq.n	3782 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    377c:	9801      	ldr	r0, [sp, #4]
    377e:	f000 f8d1 	bl	3924 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3782:	bf00      	nop
    3784:	b003      	add	sp, #12
    3786:	f85d fb04 	ldr.w	pc, [sp], #4

0000378a <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    378a:	b500      	push	{lr}
    378c:	b083      	sub	sp, #12
    378e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3790:	9b01      	ldr	r3, [sp, #4]
    3792:	2b00      	cmp	r3, #0
    3794:	d002      	beq.n	379c <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    3796:	9801      	ldr	r0, [sp, #4]
    3798:	f000 f950 	bl	3a3c <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    379c:	bf00      	nop
    379e:	b003      	add	sp, #12
    37a0:	f85d fb04 	ldr.w	pc, [sp], #4

000037a4 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    37a4:	b500      	push	{lr}
    37a6:	b083      	sub	sp, #12
    37a8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    37aa:	9801      	ldr	r0, [sp, #4]
    37ac:	f000 f98e 	bl	3acc <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    37b0:	bf00      	nop
    37b2:	b003      	add	sp, #12
    37b4:	f85d fb04 	ldr.w	pc, [sp], #4

000037b8 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    37b8:	b500      	push	{lr}
    37ba:	b083      	sub	sp, #12
    37bc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37be:	9b01      	ldr	r3, [sp, #4]
    37c0:	2b00      	cmp	r3, #0
    37c2:	d002      	beq.n	37ca <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    37c4:	9801      	ldr	r0, [sp, #4]
    37c6:	f000 f999 	bl	3afc <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37ca:	bf00      	nop
    37cc:	b003      	add	sp, #12
    37ce:	f85d fb04 	ldr.w	pc, [sp], #4

000037d2 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    37d2:	b500      	push	{lr}
    37d4:	b083      	sub	sp, #12
    37d6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37d8:	9b01      	ldr	r3, [sp, #4]
    37da:	2b00      	cmp	r3, #0
    37dc:	d002      	beq.n	37e4 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    37de:	9801      	ldr	r0, [sp, #4]
    37e0:	f000 f9b0 	bl	3b44 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37e4:	bf00      	nop
    37e6:	b003      	add	sp, #12
    37e8:	f85d fb04 	ldr.w	pc, [sp], #4

000037ec <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    37ec:	b500      	push	{lr}
    37ee:	b083      	sub	sp, #12
    37f0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    37f2:	9801      	ldr	r0, [sp, #4]
    37f4:	f000 f9ba 	bl	3b6c <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    37f8:	bf00      	nop
    37fa:	b003      	add	sp, #12
    37fc:	f85d fb04 	ldr.w	pc, [sp], #4

00003800 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3800:	b500      	push	{lr}
    3802:	b083      	sub	sp, #12
    3804:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3806:	9b01      	ldr	r3, [sp, #4]
    3808:	2b00      	cmp	r3, #0
    380a:	d002      	beq.n	3812 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    380c:	9801      	ldr	r0, [sp, #4]
    380e:	f000 f9bd 	bl	3b8c <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3812:	bf00      	nop
    3814:	b003      	add	sp, #12
    3816:	f85d fb04 	ldr.w	pc, [sp], #4

0000381a <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    381a:	b500      	push	{lr}
    381c:	b083      	sub	sp, #12
    381e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3820:	9b01      	ldr	r3, [sp, #4]
    3822:	2b00      	cmp	r3, #0
    3824:	d002      	beq.n	382c <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3826:	9801      	ldr	r0, [sp, #4]
    3828:	f000 f9d4 	bl	3bd4 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    382c:	bf00      	nop
    382e:	b003      	add	sp, #12
    3830:	f85d fb04 	ldr.w	pc, [sp], #4

00003834 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3834:	b500      	push	{lr}
    3836:	b083      	sub	sp, #12
    3838:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    383a:	9801      	ldr	r0, [sp, #4]
    383c:	f000 f9de 	bl	3bfc <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3840:	bf00      	nop
    3842:	b003      	add	sp, #12
    3844:	f85d fb04 	ldr.w	pc, [sp], #4

00003848 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3848:	b500      	push	{lr}
    384a:	b089      	sub	sp, #36	; 0x24
    384c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    384e:	2300      	movs	r3, #0
    3850:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3854:	4b20      	ldr	r3, [pc, #128]	; (38d8 <SetInputSouceSytemClock+0x90>)
    3856:	695b      	ldr	r3, [r3, #20]
    3858:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    385a:	9b06      	ldr	r3, [sp, #24]
    385c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3860:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3862:	9b01      	ldr	r3, [sp, #4]
    3864:	061b      	lsls	r3, r3, #24
    3866:	9a06      	ldr	r2, [sp, #24]
    3868:	4313      	orrs	r3, r2
    386a:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    386c:	4a1a      	ldr	r2, [pc, #104]	; (38d8 <SetInputSouceSytemClock+0x90>)
    386e:	9b06      	ldr	r3, [sp, #24]
    3870:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3872:	aa02      	add	r2, sp, #8
    3874:	a903      	add	r1, sp, #12
    3876:	a804      	add	r0, sp, #16
    3878:	f24c 3350 	movw	r3, #50000	; 0xc350
    387c:	f7ff f9ac 	bl	2bd8 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3880:	4b15      	ldr	r3, [pc, #84]	; (38d8 <SetInputSouceSytemClock+0x90>)
    3882:	691b      	ldr	r3, [r3, #16]
    3884:	0e1b      	lsrs	r3, r3, #24
    3886:	f003 030f 	and.w	r3, r3, #15
    388a:	9a01      	ldr	r2, [sp, #4]
    388c:	429a      	cmp	r2, r3
    388e:	bf0c      	ite	eq
    3890:	2301      	moveq	r3, #1
    3892:	2300      	movne	r3, #0
    3894:	b2db      	uxtb	r3, r3
    3896:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3898:	9a02      	ldr	r2, [sp, #8]
    389a:	a903      	add	r1, sp, #12
    389c:	ab04      	add	r3, sp, #16
    389e:	4618      	mov	r0, r3
    38a0:	f7ff f9b4 	bl	2c0c <Clock_Ip_TimeoutExpired>
    38a4:	4603      	mov	r3, r0
    38a6:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    38aa:	9b05      	ldr	r3, [sp, #20]
    38ac:	2b00      	cmp	r3, #0
    38ae:	d106      	bne.n	38be <SetInputSouceSytemClock+0x76>
    38b0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    38b4:	f083 0301 	eor.w	r3, r3, #1
    38b8:	b2db      	uxtb	r3, r3
    38ba:	2b00      	cmp	r3, #0
    38bc:	d1e0      	bne.n	3880 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    38be:	f89d 301f 	ldrb.w	r3, [sp, #31]
    38c2:	2b00      	cmp	r3, #0
    38c4:	d003      	beq.n	38ce <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    38c6:	2105      	movs	r1, #5
    38c8:	2001      	movs	r0, #1
    38ca:	f7ff f975 	bl	2bb8 <Clock_Ip_ReportClockErrors>
    }
}
    38ce:	bf00      	nop
    38d0:	b009      	add	sp, #36	; 0x24
    38d2:	f85d fb04 	ldr.w	pc, [sp], #4
    38d6:	bf00      	nop
    38d8:	40064000 	.word	0x40064000

000038dc <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    38dc:	b500      	push	{lr}
    38de:	b083      	sub	sp, #12
    38e0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38e2:	9b01      	ldr	r3, [sp, #4]
    38e4:	2b00      	cmp	r3, #0
    38e6:	d002      	beq.n	38ee <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    38e8:	9801      	ldr	r0, [sp, #4]
    38ea:	f000 f997 	bl	3c1c <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38ee:	bf00      	nop
    38f0:	b003      	add	sp, #12
    38f2:	f85d fb04 	ldr.w	pc, [sp], #4

000038f6 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    38f6:	b500      	push	{lr}
    38f8:	b083      	sub	sp, #12
    38fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38fc:	9b01      	ldr	r3, [sp, #4]
    38fe:	2b00      	cmp	r3, #0
    3900:	d002      	beq.n	3908 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    3902:	9801      	ldr	r0, [sp, #4]
    3904:	f000 fa7e 	bl	3e04 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3908:	bf00      	nop
    390a:	b003      	add	sp, #12
    390c:	f85d fb04 	ldr.w	pc, [sp], #4

00003910 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3910:	b500      	push	{lr}
    3912:	b083      	sub	sp, #12
    3914:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3916:	9801      	ldr	r0, [sp, #4]
    3918:	f000 fab8 	bl	3e8c <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    391c:	bf00      	nop
    391e:	b003      	add	sp, #12
    3920:	f85d fb04 	ldr.w	pc, [sp], #4

00003924 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3924:	b500      	push	{lr}
    3926:	b08b      	sub	sp, #44	; 0x2c
    3928:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    392a:	2300      	movs	r3, #0
    392c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3930:	9b01      	ldr	r3, [sp, #4]
    3932:	2b00      	cmp	r3, #0
    3934:	d10b      	bne.n	394e <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3936:	2305      	movs	r3, #5
    3938:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    393a:	2301      	movs	r3, #1
    393c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3940:	2301      	movs	r3, #1
    3942:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3946:	2301      	movs	r3, #1
    3948:	f88d 3010 	strb.w	r3, [sp, #16]
    394c:	e00e      	b.n	396c <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    394e:	9b01      	ldr	r3, [sp, #4]
    3950:	681b      	ldr	r3, [r3, #0]
    3952:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3954:	9b01      	ldr	r3, [sp, #4]
    3956:	79db      	ldrb	r3, [r3, #7]
    3958:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    395c:	9b01      	ldr	r3, [sp, #4]
    395e:	889b      	ldrh	r3, [r3, #4]
    3960:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3964:	9b01      	ldr	r3, [sp, #4]
    3966:	7a1b      	ldrb	r3, [r3, #8]
    3968:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    396c:	4b32      	ldr	r3, [pc, #200]	; (3a38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    396e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3972:	4a31      	ldr	r2, [pc, #196]	; (3a38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3974:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3978:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    397c:	4b2e      	ldr	r3, [pc, #184]	; (3a38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    397e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3982:	4a2d      	ldr	r2, [pc, #180]	; (3a38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3984:	f023 0301 	bic.w	r3, r3, #1
    3988:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    398c:	4b2a      	ldr	r3, [pc, #168]	; (3a38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    398e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3992:	4a29      	ldr	r2, [pc, #164]	; (3a38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3994:	f023 0304 	bic.w	r3, r3, #4
    3998:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    399c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    39a0:	2b01      	cmp	r3, #1
    39a2:	d144      	bne.n	3a2e <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    39a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    39a8:	4a23      	ldr	r2, [pc, #140]	; (3a38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39aa:	f003 0301 	and.w	r3, r3, #1
    39ae:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    39b2:	4b21      	ldr	r3, [pc, #132]	; (3a38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39b8:	4a1f      	ldr	r2, [pc, #124]	; (3a38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39ba:	f043 0301 	orr.w	r3, r3, #1
    39be:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    39c2:	4b1d      	ldr	r3, [pc, #116]	; (3a38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    39c8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    39cc:	009b      	lsls	r3, r3, #2
    39ce:	f003 0304 	and.w	r3, r3, #4
    39d2:	4919      	ldr	r1, [pc, #100]	; (3a38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39d4:	4313      	orrs	r3, r2
    39d6:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    39da:	aa05      	add	r2, sp, #20
    39dc:	a906      	add	r1, sp, #24
    39de:	a807      	add	r0, sp, #28
    39e0:	f24c 3350 	movw	r3, #50000	; 0xc350
    39e4:	f7ff f8f8 	bl	2bd8 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    39e8:	4b13      	ldr	r3, [pc, #76]	; (3a38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39ee:	0e1b      	lsrs	r3, r3, #24
    39f0:	f003 0301 	and.w	r3, r3, #1
    39f4:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    39f6:	9a05      	ldr	r2, [sp, #20]
    39f8:	a906      	add	r1, sp, #24
    39fa:	ab07      	add	r3, sp, #28
    39fc:	4618      	mov	r0, r3
    39fe:	f7ff f905 	bl	2c0c <Clock_Ip_TimeoutExpired>
    3a02:	4603      	mov	r3, r0
    3a04:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3a08:	9b08      	ldr	r3, [sp, #32]
    3a0a:	2b00      	cmp	r3, #0
    3a0c:	d106      	bne.n	3a1c <Clock_Ip_SetSirc_TrustedCall+0xf8>
    3a0e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3a12:	f083 0301 	eor.w	r3, r3, #1
    3a16:	b2db      	uxtb	r3, r3
    3a18:	2b00      	cmp	r3, #0
    3a1a:	d1e5      	bne.n	39e8 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3a1c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3a20:	2b00      	cmp	r3, #0
    3a22:	d004      	beq.n	3a2e <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3a24:	9b02      	ldr	r3, [sp, #8]
    3a26:	4619      	mov	r1, r3
    3a28:	2001      	movs	r0, #1
    3a2a:	f7ff f8c5 	bl	2bb8 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3a2e:	bf00      	nop
    3a30:	b00b      	add	sp, #44	; 0x2c
    3a32:	f85d fb04 	ldr.w	pc, [sp], #4
    3a36:	bf00      	nop
    3a38:	40064000 	.word	0x40064000

00003a3c <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a3c:	b500      	push	{lr}
    3a3e:	b089      	sub	sp, #36	; 0x24
    3a40:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3a42:	2300      	movs	r3, #0
    3a44:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3a48:	4b1f      	ldr	r3, [pc, #124]	; (3ac8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a4e:	4a1e      	ldr	r2, [pc, #120]	; (3ac8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a50:	f043 0301 	orr.w	r3, r3, #1
    3a54:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3a58:	4b1b      	ldr	r3, [pc, #108]	; (3ac8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a5e:	4a1a      	ldr	r2, [pc, #104]	; (3ac8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a60:	f043 0304 	orr.w	r3, r3, #4
    3a64:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a68:	aa03      	add	r2, sp, #12
    3a6a:	a904      	add	r1, sp, #16
    3a6c:	a805      	add	r0, sp, #20
    3a6e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a72:	f7ff f8b1 	bl	2bd8 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3a76:	4b14      	ldr	r3, [pc, #80]	; (3ac8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a7c:	0e1b      	lsrs	r3, r3, #24
    3a7e:	f003 0301 	and.w	r3, r3, #1
    3a82:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3a84:	9a03      	ldr	r2, [sp, #12]
    3a86:	a904      	add	r1, sp, #16
    3a88:	ab05      	add	r3, sp, #20
    3a8a:	4618      	mov	r0, r3
    3a8c:	f7ff f8be 	bl	2c0c <Clock_Ip_TimeoutExpired>
    3a90:	4603      	mov	r3, r0
    3a92:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3a96:	9b06      	ldr	r3, [sp, #24]
    3a98:	2b00      	cmp	r3, #0
    3a9a:	d106      	bne.n	3aaa <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3a9c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3aa0:	f083 0301 	eor.w	r3, r3, #1
    3aa4:	b2db      	uxtb	r3, r3
    3aa6:	2b00      	cmp	r3, #0
    3aa8:	d1e5      	bne.n	3a76 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3aaa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3aae:	2b00      	cmp	r3, #0
    3ab0:	d005      	beq.n	3abe <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3ab2:	9b01      	ldr	r3, [sp, #4]
    3ab4:	681b      	ldr	r3, [r3, #0]
    3ab6:	4619      	mov	r1, r3
    3ab8:	2001      	movs	r0, #1
    3aba:	f7ff f87d 	bl	2bb8 <Clock_Ip_ReportClockErrors>
    }
}
    3abe:	bf00      	nop
    3ac0:	b009      	add	sp, #36	; 0x24
    3ac2:	f85d fb04 	ldr.w	pc, [sp], #4
    3ac6:	bf00      	nop
    3ac8:	40064000 	.word	0x40064000

00003acc <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3acc:	b082      	sub	sp, #8
    3ace:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3ad0:	4b09      	ldr	r3, [pc, #36]	; (3af8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ad2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ad6:	4a08      	ldr	r2, [pc, #32]	; (3af8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ad8:	f023 0301 	bic.w	r3, r3, #1
    3adc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3ae0:	4b05      	ldr	r3, [pc, #20]	; (3af8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ae2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ae6:	4a04      	ldr	r2, [pc, #16]	; (3af8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ae8:	f023 0304 	bic.w	r3, r3, #4
    3aec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3af0:	bf00      	nop
    3af2:	b002      	add	sp, #8
    3af4:	4770      	bx	lr
    3af6:	bf00      	nop
    3af8:	40064000 	.word	0x40064000

00003afc <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3afc:	b082      	sub	sp, #8
    3afe:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3b00:	4b0f      	ldr	r3, [pc, #60]	; (3b40 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b06:	4a0e      	ldr	r2, [pc, #56]	; (3b40 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b0c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b10:	4b0b      	ldr	r3, [pc, #44]	; (3b40 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b16:	4a0a      	ldr	r2, [pc, #40]	; (3b40 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b18:	f023 0304 	bic.w	r3, r3, #4
    3b1c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3b20:	4b07      	ldr	r3, [pc, #28]	; (3b40 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b22:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3b26:	9b01      	ldr	r3, [sp, #4]
    3b28:	7a1b      	ldrb	r3, [r3, #8]
    3b2a:	009b      	lsls	r3, r3, #2
    3b2c:	f003 0304 	and.w	r3, r3, #4
    3b30:	4903      	ldr	r1, [pc, #12]	; (3b40 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b32:	4313      	orrs	r3, r2
    3b34:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3b38:	bf00      	nop
    3b3a:	b002      	add	sp, #8
    3b3c:	4770      	bx	lr
    3b3e:	bf00      	nop
    3b40:	40064000 	.word	0x40064000

00003b44 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b44:	b082      	sub	sp, #8
    3b46:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3b48:	9b01      	ldr	r3, [sp, #4]
    3b4a:	889b      	ldrh	r3, [r3, #4]
    3b4c:	2b01      	cmp	r3, #1
    3b4e:	d107      	bne.n	3b60 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3b50:	4b05      	ldr	r3, [pc, #20]	; (3b68 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3b52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b56:	4a04      	ldr	r2, [pc, #16]	; (3b68 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3b58:	f043 0304 	orr.w	r3, r3, #4
    3b5c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3b60:	bf00      	nop
    3b62:	b002      	add	sp, #8
    3b64:	4770      	bx	lr
    3b66:	bf00      	nop
    3b68:	40064000 	.word	0x40064000

00003b6c <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3b6c:	b082      	sub	sp, #8
    3b6e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b70:	4b05      	ldr	r3, [pc, #20]	; (3b88 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3b72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b76:	4a04      	ldr	r2, [pc, #16]	; (3b88 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3b78:	f023 0304 	bic.w	r3, r3, #4
    3b7c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3b80:	bf00      	nop
    3b82:	b002      	add	sp, #8
    3b84:	4770      	bx	lr
    3b86:	bf00      	nop
    3b88:	40064000 	.word	0x40064000

00003b8c <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b8c:	b082      	sub	sp, #8
    3b8e:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3b90:	4b0f      	ldr	r3, [pc, #60]	; (3bd0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b96:	4a0e      	ldr	r2, [pc, #56]	; (3bd0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b9c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3ba0:	4b0b      	ldr	r3, [pc, #44]	; (3bd0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3ba2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ba6:	4a0a      	ldr	r2, [pc, #40]	; (3bd0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3ba8:	f023 0302 	bic.w	r3, r3, #2
    3bac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3bb0:	4b07      	ldr	r3, [pc, #28]	; (3bd0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bb2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3bb6:	9b01      	ldr	r3, [sp, #4]
    3bb8:	7a5b      	ldrb	r3, [r3, #9]
    3bba:	005b      	lsls	r3, r3, #1
    3bbc:	f003 0302 	and.w	r3, r3, #2
    3bc0:	4903      	ldr	r1, [pc, #12]	; (3bd0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bc2:	4313      	orrs	r3, r2
    3bc4:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3bc8:	bf00      	nop
    3bca:	b002      	add	sp, #8
    3bcc:	4770      	bx	lr
    3bce:	bf00      	nop
    3bd0:	40064000 	.word	0x40064000

00003bd4 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3bd4:	b082      	sub	sp, #8
    3bd6:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3bd8:	9b01      	ldr	r3, [sp, #4]
    3bda:	889b      	ldrh	r3, [r3, #4]
    3bdc:	2b01      	cmp	r3, #1
    3bde:	d107      	bne.n	3bf0 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3be0:	4b05      	ldr	r3, [pc, #20]	; (3bf8 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3be2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3be6:	4a04      	ldr	r2, [pc, #16]	; (3bf8 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3be8:	f043 0302 	orr.w	r3, r3, #2
    3bec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3bf0:	bf00      	nop
    3bf2:	b002      	add	sp, #8
    3bf4:	4770      	bx	lr
    3bf6:	bf00      	nop
    3bf8:	40064000 	.word	0x40064000

00003bfc <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3bfc:	b082      	sub	sp, #8
    3bfe:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3c00:	4b05      	ldr	r3, [pc, #20]	; (3c18 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3c02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c06:	4a04      	ldr	r2, [pc, #16]	; (3c18 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3c08:	f023 0302 	bic.w	r3, r3, #2
    3c0c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3c10:	bf00      	nop
    3c12:	b002      	add	sp, #8
    3c14:	4770      	bx	lr
    3c16:	bf00      	nop
    3c18:	40064000 	.word	0x40064000

00003c1c <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c1c:	b500      	push	{lr}
    3c1e:	b08b      	sub	sp, #44	; 0x2c
    3c20:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3c22:	9b01      	ldr	r3, [sp, #4]
    3c24:	681a      	ldr	r2, [r3, #0]
    3c26:	4975      	ldr	r1, [pc, #468]	; (3dfc <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3c28:	4613      	mov	r3, r2
    3c2a:	00db      	lsls	r3, r3, #3
    3c2c:	4413      	add	r3, r2
    3c2e:	440b      	add	r3, r1
    3c30:	781b      	ldrb	r3, [r3, #0]
    3c32:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3c34:	2300      	movs	r3, #0
    3c36:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3c3a:	2300      	movs	r3, #0
    3c3c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3c40:	4b6f      	ldr	r3, [pc, #444]	; (3e00 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c46:	4a6e      	ldr	r2, [pc, #440]	; (3e00 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c48:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3c4c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3c50:	4b6b      	ldr	r3, [pc, #428]	; (3e00 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	d07d      	beq.n	3d5a <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3c5e:	9b01      	ldr	r3, [sp, #4]
    3c60:	79db      	ldrb	r3, [r3, #7]
    3c62:	461a      	mov	r2, r3
    3c64:	4b66      	ldr	r3, [pc, #408]	; (3e00 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c66:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3c6a:	f003 0303 	and.w	r3, r3, #3
    3c6e:	429a      	cmp	r2, r3
    3c70:	d10b      	bne.n	3c8a <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3c72:	9b01      	ldr	r3, [sp, #4]
    3c74:	799b      	ldrb	r3, [r3, #6]
    3c76:	461a      	mov	r2, r3
    3c78:	4b61      	ldr	r3, [pc, #388]	; (3e00 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c7e:	08db      	lsrs	r3, r3, #3
    3c80:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3c84:	429a      	cmp	r2, r3
    3c86:	f000 80b4 	beq.w	3df2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3c8a:	4b5d      	ldr	r3, [pc, #372]	; (3e00 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c90:	f003 0301 	and.w	r3, r3, #1
    3c94:	2b00      	cmp	r3, #0
    3c96:	d105      	bne.n	3ca4 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3c98:	2301      	movs	r3, #1
    3c9a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3c9e:	2000      	movs	r0, #0
    3ca0:	f7ff fd66 	bl	3770 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3ca4:	2002      	movs	r0, #2
    3ca6:	f7ff fdcf 	bl	3848 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3caa:	4b55      	ldr	r3, [pc, #340]	; (3e00 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cac:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3cb0:	4a53      	ldr	r2, [pc, #332]	; (3e00 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cb2:	f023 0301 	bic.w	r3, r3, #1
    3cb6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3cba:	9b01      	ldr	r3, [sp, #4]
    3cbc:	889b      	ldrh	r3, [r3, #4]
    3cbe:	2b01      	cmp	r3, #1
    3cc0:	f040 8097 	bne.w	3df2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3cc4:	9b01      	ldr	r3, [sp, #4]
    3cc6:	79db      	ldrb	r3, [r3, #7]
    3cc8:	4a4d      	ldr	r2, [pc, #308]	; (3e00 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cca:	f003 0303 	and.w	r3, r3, #3
    3cce:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3cd2:	4b4b      	ldr	r3, [pc, #300]	; (3e00 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cd4:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3cd8:	9b01      	ldr	r3, [sp, #4]
    3cda:	799b      	ldrb	r3, [r3, #6]
    3cdc:	00db      	lsls	r3, r3, #3
    3cde:	f003 0308 	and.w	r3, r3, #8
    3ce2:	4313      	orrs	r3, r2
    3ce4:	4a46      	ldr	r2, [pc, #280]	; (3e00 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ce6:	f043 0301 	orr.w	r3, r3, #1
    3cea:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3cee:	aa03      	add	r2, sp, #12
    3cf0:	a904      	add	r1, sp, #16
    3cf2:	a805      	add	r0, sp, #20
    3cf4:	f24c 3350 	movw	r3, #50000	; 0xc350
    3cf8:	f7fe ff6e 	bl	2bd8 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3cfc:	4b40      	ldr	r3, [pc, #256]	; (3e00 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d02:	0e1b      	lsrs	r3, r3, #24
    3d04:	f003 0301 	and.w	r3, r3, #1
    3d08:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d0a:	9a03      	ldr	r2, [sp, #12]
    3d0c:	a904      	add	r1, sp, #16
    3d0e:	ab05      	add	r3, sp, #20
    3d10:	4618      	mov	r0, r3
    3d12:	f7fe ff7b 	bl	2c0c <Clock_Ip_TimeoutExpired>
    3d16:	4603      	mov	r3, r0
    3d18:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d1c:	9b06      	ldr	r3, [sp, #24]
    3d1e:	2b00      	cmp	r3, #0
    3d20:	d106      	bne.n	3d30 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3d22:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d26:	f083 0301 	eor.w	r3, r3, #1
    3d2a:	b2db      	uxtb	r3, r3
    3d2c:	2b00      	cmp	r3, #0
    3d2e:	d1e5      	bne.n	3cfc <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3d30:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d34:	2b00      	cmp	r3, #0
    3d36:	d005      	beq.n	3d44 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d38:	9b01      	ldr	r3, [sp, #4]
    3d3a:	681b      	ldr	r3, [r3, #0]
    3d3c:	4619      	mov	r1, r3
    3d3e:	2001      	movs	r0, #1
    3d40:	f7fe ff3a 	bl	2bb8 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3d44:	2003      	movs	r0, #3
    3d46:	f7ff fd7f 	bl	3848 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3d4a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3d4e:	2b00      	cmp	r3, #0
    3d50:	d04f      	beq.n	3df2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3d52:	2002      	movs	r0, #2
    3d54:	f7ff fd26 	bl	37a4 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3d58:	e04b      	b.n	3df2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3d5a:	4b29      	ldr	r3, [pc, #164]	; (3e00 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d5c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d60:	4a27      	ldr	r2, [pc, #156]	; (3e00 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d62:	f023 0301 	bic.w	r3, r3, #1
    3d66:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3d6a:	9b01      	ldr	r3, [sp, #4]
    3d6c:	889b      	ldrh	r3, [r3, #4]
    3d6e:	2b01      	cmp	r3, #1
    3d70:	d13f      	bne.n	3df2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3d72:	9b01      	ldr	r3, [sp, #4]
    3d74:	79db      	ldrb	r3, [r3, #7]
    3d76:	4a22      	ldr	r2, [pc, #136]	; (3e00 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d78:	f003 0303 	and.w	r3, r3, #3
    3d7c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3d80:	4b1f      	ldr	r3, [pc, #124]	; (3e00 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d82:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3d86:	9b01      	ldr	r3, [sp, #4]
    3d88:	799b      	ldrb	r3, [r3, #6]
    3d8a:	00db      	lsls	r3, r3, #3
    3d8c:	f003 0308 	and.w	r3, r3, #8
    3d90:	4313      	orrs	r3, r2
    3d92:	4a1b      	ldr	r2, [pc, #108]	; (3e00 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d94:	f043 0301 	orr.w	r3, r3, #1
    3d98:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d9c:	aa03      	add	r2, sp, #12
    3d9e:	a904      	add	r1, sp, #16
    3da0:	a805      	add	r0, sp, #20
    3da2:	f24c 3350 	movw	r3, #50000	; 0xc350
    3da6:	f7fe ff17 	bl	2bd8 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3daa:	4b15      	ldr	r3, [pc, #84]	; (3e00 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3dac:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3db0:	0e1b      	lsrs	r3, r3, #24
    3db2:	f003 0301 	and.w	r3, r3, #1
    3db6:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3db8:	9a03      	ldr	r2, [sp, #12]
    3dba:	a904      	add	r1, sp, #16
    3dbc:	ab05      	add	r3, sp, #20
    3dbe:	4618      	mov	r0, r3
    3dc0:	f7fe ff24 	bl	2c0c <Clock_Ip_TimeoutExpired>
    3dc4:	4603      	mov	r3, r0
    3dc6:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3dca:	9b06      	ldr	r3, [sp, #24]
    3dcc:	2b00      	cmp	r3, #0
    3dce:	d106      	bne.n	3dde <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3dd0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dd4:	f083 0301 	eor.w	r3, r3, #1
    3dd8:	b2db      	uxtb	r3, r3
    3dda:	2b00      	cmp	r3, #0
    3ddc:	d1e5      	bne.n	3daa <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3dde:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3de2:	2b00      	cmp	r3, #0
    3de4:	d005      	beq.n	3df2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3de6:	9b01      	ldr	r3, [sp, #4]
    3de8:	681b      	ldr	r3, [r3, #0]
    3dea:	4619      	mov	r1, r3
    3dec:	2001      	movs	r0, #1
    3dee:	f7fe fee3 	bl	2bb8 <Clock_Ip_ReportClockErrors>
}
    3df2:	bf00      	nop
    3df4:	b00b      	add	sp, #44	; 0x2c
    3df6:	f85d fb04 	ldr.w	pc, [sp], #4
    3dfa:	bf00      	nop
    3dfc:	0000a65c 	.word	0x0000a65c
    3e00:	40064000 	.word	0x40064000

00003e04 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e04:	b500      	push	{lr}
    3e06:	b089      	sub	sp, #36	; 0x24
    3e08:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3e0a:	2300      	movs	r3, #0
    3e0c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3e10:	9b01      	ldr	r3, [sp, #4]
    3e12:	889b      	ldrh	r3, [r3, #4]
    3e14:	2b01      	cmp	r3, #1
    3e16:	d132      	bne.n	3e7e <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3e18:	4b1b      	ldr	r3, [pc, #108]	; (3e88 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e1e:	4a1a      	ldr	r2, [pc, #104]	; (3e88 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e20:	f043 0301 	orr.w	r3, r3, #1
    3e24:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3e28:	aa03      	add	r2, sp, #12
    3e2a:	a904      	add	r1, sp, #16
    3e2c:	a805      	add	r0, sp, #20
    3e2e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3e32:	f7fe fed1 	bl	2bd8 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3e36:	4b14      	ldr	r3, [pc, #80]	; (3e88 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e38:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e3c:	0e1b      	lsrs	r3, r3, #24
    3e3e:	f003 0301 	and.w	r3, r3, #1
    3e42:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3e44:	9a03      	ldr	r2, [sp, #12]
    3e46:	a904      	add	r1, sp, #16
    3e48:	ab05      	add	r3, sp, #20
    3e4a:	4618      	mov	r0, r3
    3e4c:	f7fe fede 	bl	2c0c <Clock_Ip_TimeoutExpired>
    3e50:	4603      	mov	r3, r0
    3e52:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3e56:	9b06      	ldr	r3, [sp, #24]
    3e58:	2b00      	cmp	r3, #0
    3e5a:	d106      	bne.n	3e6a <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3e5c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e60:	f083 0301 	eor.w	r3, r3, #1
    3e64:	b2db      	uxtb	r3, r3
    3e66:	2b00      	cmp	r3, #0
    3e68:	d1e5      	bne.n	3e36 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3e6a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e6e:	2b00      	cmp	r3, #0
    3e70:	d005      	beq.n	3e7e <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3e72:	9b01      	ldr	r3, [sp, #4]
    3e74:	681b      	ldr	r3, [r3, #0]
    3e76:	4619      	mov	r1, r3
    3e78:	2001      	movs	r0, #1
    3e7a:	f7fe fe9d 	bl	2bb8 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3e7e:	bf00      	nop
    3e80:	b009      	add	sp, #36	; 0x24
    3e82:	f85d fb04 	ldr.w	pc, [sp], #4
    3e86:	bf00      	nop
    3e88:	40064000 	.word	0x40064000

00003e8c <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3e8c:	b082      	sub	sp, #8
    3e8e:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3e90:	4b05      	ldr	r3, [pc, #20]	; (3ea8 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3e92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e96:	4a04      	ldr	r2, [pc, #16]	; (3ea8 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3e98:	f023 0301 	bic.w	r3, r3, #1
    3e9c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3ea0:	bf00      	nop
    3ea2:	b002      	add	sp, #8
    3ea4:	4770      	bx	lr
    3ea6:	bf00      	nop
    3ea8:	40064000 	.word	0x40064000

00003eac <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3eac:	b082      	sub	sp, #8
    3eae:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3eb0:	bf00      	nop
    3eb2:	b002      	add	sp, #8
    3eb4:	4770      	bx	lr

00003eb6 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3eb6:	b082      	sub	sp, #8
    3eb8:	9001      	str	r0, [sp, #4]
    3eba:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3ebc:	bf00      	nop
    3ebe:	b002      	add	sp, #8
    3ec0:	4770      	bx	lr

00003ec2 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3ec2:	b082      	sub	sp, #8
    3ec4:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3ec6:	bf00      	nop
    3ec8:	b002      	add	sp, #8
    3eca:	4770      	bx	lr

00003ecc <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3ecc:	b082      	sub	sp, #8
    3ece:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3ed0:	bf00      	nop
    3ed2:	b002      	add	sp, #8
    3ed4:	4770      	bx	lr

00003ed6 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3ed6:	b082      	sub	sp, #8
    3ed8:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3eda:	2302      	movs	r3, #2
}
    3edc:	4618      	mov	r0, r3
    3ede:	b002      	add	sp, #8
    3ee0:	4770      	bx	lr

00003ee2 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3ee2:	b082      	sub	sp, #8
    3ee4:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3ee6:	bf00      	nop
    3ee8:	b002      	add	sp, #8
    3eea:	4770      	bx	lr

00003eec <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3eec:	b500      	push	{lr}
    3eee:	b083      	sub	sp, #12
    3ef0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ef2:	9b01      	ldr	r3, [sp, #4]
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	d002      	beq.n	3efe <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3ef8:	9801      	ldr	r0, [sp, #4]
    3efa:	f000 f870 	bl	3fde <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3efe:	bf00      	nop
    3f00:	b003      	add	sp, #12
    3f02:	f85d fb04 	ldr.w	pc, [sp], #4

00003f06 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3f06:	b500      	push	{lr}
    3f08:	b083      	sub	sp, #12
    3f0a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f0c:	9b01      	ldr	r3, [sp, #4]
    3f0e:	2b00      	cmp	r3, #0
    3f10:	d002      	beq.n	3f18 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3f12:	9801      	ldr	r0, [sp, #4]
    3f14:	f000 f89a 	bl	404c <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f18:	bf00      	nop
    3f1a:	b003      	add	sp, #12
    3f1c:	f85d fb04 	ldr.w	pc, [sp], #4

00003f20 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3f20:	b500      	push	{lr}
    3f22:	b089      	sub	sp, #36	; 0x24
    3f24:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3f26:	2301      	movs	r3, #1
    3f28:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3f2a:	2300      	movs	r3, #0
    3f2c:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3f30:	4b1e      	ldr	r3, [pc, #120]	; (3fac <Clock_Ip_CompleteSpll+0x8c>)
    3f32:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f36:	f003 0301 	and.w	r3, r3, #1
    3f3a:	2b00      	cmp	r3, #0
    3f3c:	d02f      	beq.n	3f9e <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3f3e:	aa02      	add	r2, sp, #8
    3f40:	a903      	add	r1, sp, #12
    3f42:	a804      	add	r0, sp, #16
    3f44:	f24c 3350 	movw	r3, #50000	; 0xc350
    3f48:	f7fe fe46 	bl	2bd8 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3f4c:	4b17      	ldr	r3, [pc, #92]	; (3fac <Clock_Ip_CompleteSpll+0x8c>)
    3f4e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f52:	0e1b      	lsrs	r3, r3, #24
    3f54:	f003 0301 	and.w	r3, r3, #1
    3f58:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3f5a:	9a02      	ldr	r2, [sp, #8]
    3f5c:	a903      	add	r1, sp, #12
    3f5e:	ab04      	add	r3, sp, #16
    3f60:	4618      	mov	r0, r3
    3f62:	f7fe fe53 	bl	2c0c <Clock_Ip_TimeoutExpired>
    3f66:	4603      	mov	r3, r0
    3f68:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3f6c:	9b05      	ldr	r3, [sp, #20]
    3f6e:	2b00      	cmp	r3, #0
    3f70:	d106      	bne.n	3f80 <Clock_Ip_CompleteSpll+0x60>
    3f72:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3f76:	f083 0301 	eor.w	r3, r3, #1
    3f7a:	b2db      	uxtb	r3, r3
    3f7c:	2b00      	cmp	r3, #0
    3f7e:	d1e5      	bne.n	3f4c <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3f80:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3f84:	f083 0301 	eor.w	r3, r3, #1
    3f88:	b2db      	uxtb	r3, r3
    3f8a:	2b00      	cmp	r3, #0
    3f8c:	d002      	beq.n	3f94 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3f8e:	2302      	movs	r3, #2
    3f90:	9307      	str	r3, [sp, #28]
    3f92:	e006      	b.n	3fa2 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3f94:	9901      	ldr	r1, [sp, #4]
    3f96:	2001      	movs	r0, #1
    3f98:	f7fe fe0e 	bl	2bb8 <Clock_Ip_ReportClockErrors>
    3f9c:	e001      	b.n	3fa2 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3f9e:	2300      	movs	r3, #0
    3fa0:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3fa2:	9b07      	ldr	r3, [sp, #28]
}
    3fa4:	4618      	mov	r0, r3
    3fa6:	b009      	add	sp, #36	; 0x24
    3fa8:	f85d fb04 	ldr.w	pc, [sp], #4
    3fac:	40064000 	.word	0x40064000

00003fb0 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3fb0:	b500      	push	{lr}
    3fb2:	b083      	sub	sp, #12
    3fb4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3fb6:	9801      	ldr	r0, [sp, #4]
    3fb8:	f000 f886 	bl	40c8 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3fbc:	bf00      	nop
    3fbe:	b003      	add	sp, #12
    3fc0:	f85d fb04 	ldr.w	pc, [sp], #4

00003fc4 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3fc4:	b500      	push	{lr}
    3fc6:	b083      	sub	sp, #12
    3fc8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3fca:	9b01      	ldr	r3, [sp, #4]
    3fcc:	2b00      	cmp	r3, #0
    3fce:	d002      	beq.n	3fd6 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3fd0:	9801      	ldr	r0, [sp, #4]
    3fd2:	f000 f891 	bl	40f8 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3fd6:	bf00      	nop
    3fd8:	b003      	add	sp, #12
    3fda:	f85d fb04 	ldr.w	pc, [sp], #4

00003fde <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3fde:	b082      	sub	sp, #8
    3fe0:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3fe2:	4b19      	ldr	r3, [pc, #100]	; (4048 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fe4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3fe8:	4a17      	ldr	r2, [pc, #92]	; (4048 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3fee:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3ff2:	4b15      	ldr	r3, [pc, #84]	; (4048 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ff4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ff8:	4a13      	ldr	r2, [pc, #76]	; (4048 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3ffe:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    4002:	4b11      	ldr	r3, [pc, #68]	; (4048 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4004:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4008:	4a0f      	ldr	r2, [pc, #60]	; (4048 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    400a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    400e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4012:	4b0d      	ldr	r3, [pc, #52]	; (4048 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4014:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4018:	4a0b      	ldr	r2, [pc, #44]	; (4048 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    401a:	f023 0301 	bic.w	r3, r3, #1
    401e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4022:	4b09      	ldr	r3, [pc, #36]	; (4048 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4024:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4028:	4a07      	ldr	r2, [pc, #28]	; (4048 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    402a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    402e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4032:	4b05      	ldr	r3, [pc, #20]	; (4048 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4034:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4038:	4a03      	ldr	r2, [pc, #12]	; (4048 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    403a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    403e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4042:	bf00      	nop
    4044:	b002      	add	sp, #8
    4046:	4770      	bx	lr
    4048:	40064000 	.word	0x40064000

0000404c <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    404c:	b082      	sub	sp, #8
    404e:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4050:	9b01      	ldr	r3, [sp, #4]
    4052:	889b      	ldrh	r3, [r3, #4]
    4054:	2b01      	cmp	r3, #1
    4056:	d12f      	bne.n	40b8 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4058:	4b1a      	ldr	r3, [pc, #104]	; (40c4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    405a:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    405e:	9b01      	ldr	r3, [sp, #4]
    4060:	7b5b      	ldrb	r3, [r3, #13]
    4062:	3b01      	subs	r3, #1
    4064:	021b      	lsls	r3, r3, #8
    4066:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    406a:	9b01      	ldr	r3, [sp, #4]
    406c:	7d1b      	ldrb	r3, [r3, #20]
    406e:	3b10      	subs	r3, #16
    4070:	041b      	lsls	r3, r3, #16
    4072:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4076:	430b      	orrs	r3, r1
    4078:	4912      	ldr	r1, [pc, #72]	; (40c4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    407a:	4313      	orrs	r3, r2
    407c:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4080:	9b01      	ldr	r3, [sp, #4]
    4082:	7fdb      	ldrb	r3, [r3, #31]
    4084:	2b02      	cmp	r3, #2
    4086:	d011      	beq.n	40ac <Clock_Ip_SetSpll_TrustedCall+0x60>
    4088:	2b02      	cmp	r3, #2
    408a:	dc17      	bgt.n	40bc <Clock_Ip_SetSpll_TrustedCall+0x70>
    408c:	2b00      	cmp	r3, #0
    408e:	d002      	beq.n	4096 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4090:	2b01      	cmp	r3, #1
    4092:	d005      	beq.n	40a0 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4094:	e012      	b.n	40bc <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    4096:	4b0b      	ldr	r3, [pc, #44]	; (40c4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4098:	2200      	movs	r2, #0
    409a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    409e:	e00e      	b.n	40be <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    40a0:	4b08      	ldr	r3, [pc, #32]	; (40c4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    40a6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    40aa:	e008      	b.n	40be <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    40ac:	4b05      	ldr	r3, [pc, #20]	; (40c4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    40b2:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    40b6:	e002      	b.n	40be <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    40b8:	bf00      	nop
    40ba:	e000      	b.n	40be <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    40bc:	bf00      	nop
}
    40be:	bf00      	nop
    40c0:	b002      	add	sp, #8
    40c2:	4770      	bx	lr
    40c4:	40064000 	.word	0x40064000

000040c8 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    40c8:	b082      	sub	sp, #8
    40ca:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    40cc:	4b09      	ldr	r3, [pc, #36]	; (40f4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40ce:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    40d2:	4a08      	ldr	r2, [pc, #32]	; (40f4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    40d8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    40dc:	4b05      	ldr	r3, [pc, #20]	; (40f4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40de:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    40e2:	4a04      	ldr	r2, [pc, #16]	; (40f4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40e4:	f023 0301 	bic.w	r3, r3, #1
    40e8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    40ec:	bf00      	nop
    40ee:	b002      	add	sp, #8
    40f0:	4770      	bx	lr
    40f2:	bf00      	nop
    40f4:	40064000 	.word	0x40064000

000040f8 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    40f8:	b082      	sub	sp, #8
    40fa:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    40fc:	9b01      	ldr	r3, [sp, #4]
    40fe:	889b      	ldrh	r3, [r3, #4]
    4100:	2b01      	cmp	r3, #1
    4102:	d107      	bne.n	4114 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4104:	4b05      	ldr	r3, [pc, #20]	; (411c <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4106:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    410a:	4a04      	ldr	r2, [pc, #16]	; (411c <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    410c:	f043 0301 	orr.w	r3, r3, #1
    4110:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4114:	bf00      	nop
    4116:	b002      	add	sp, #8
    4118:	4770      	bx	lr
    411a:	bf00      	nop
    411c:	40064000 	.word	0x40064000

00004120 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4120:	b082      	sub	sp, #8
    4122:	9001      	str	r0, [sp, #4]
    4124:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4126:	bf00      	nop
    4128:	b002      	add	sp, #8
    412a:	4770      	bx	lr

0000412c <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    412c:	b082      	sub	sp, #8
    412e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4130:	bf00      	nop
    4132:	b002      	add	sp, #8
    4134:	4770      	bx	lr

00004136 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4136:	b500      	push	{lr}
    4138:	b083      	sub	sp, #12
    413a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    413c:	9b01      	ldr	r3, [sp, #4]
    413e:	2b00      	cmp	r3, #0
    4140:	d002      	beq.n	4148 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4142:	9801      	ldr	r0, [sp, #4]
    4144:	f000 f8ee 	bl	4324 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4148:	bf00      	nop
    414a:	b003      	add	sp, #12
    414c:	f85d fb04 	ldr.w	pc, [sp], #4

00004150 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4150:	b500      	push	{lr}
    4152:	b083      	sub	sp, #12
    4154:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4156:	9b01      	ldr	r3, [sp, #4]
    4158:	2b00      	cmp	r3, #0
    415a:	d002      	beq.n	4162 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    415c:	9801      	ldr	r0, [sp, #4]
    415e:	f000 f8ff 	bl	4360 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4162:	bf00      	nop
    4164:	b003      	add	sp, #12
    4166:	f85d fb04 	ldr.w	pc, [sp], #4

0000416a <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    416a:	b500      	push	{lr}
    416c:	b083      	sub	sp, #12
    416e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4170:	9b01      	ldr	r3, [sp, #4]
    4172:	2b00      	cmp	r3, #0
    4174:	d002      	beq.n	417c <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    4176:	9801      	ldr	r0, [sp, #4]
    4178:	f000 f912 	bl	43a0 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    417c:	bf00      	nop
    417e:	b003      	add	sp, #12
    4180:	f85d fb04 	ldr.w	pc, [sp], #4

00004184 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4184:	b500      	push	{lr}
    4186:	b083      	sub	sp, #12
    4188:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    418a:	9b01      	ldr	r3, [sp, #4]
    418c:	2b00      	cmp	r3, #0
    418e:	d002      	beq.n	4196 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4190:	9801      	ldr	r0, [sp, #4]
    4192:	f000 f925 	bl	43e0 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4196:	bf00      	nop
    4198:	b003      	add	sp, #12
    419a:	f85d fb04 	ldr.w	pc, [sp], #4

0000419e <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    419e:	b500      	push	{lr}
    41a0:	b083      	sub	sp, #12
    41a2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41a4:	9b01      	ldr	r3, [sp, #4]
    41a6:	2b00      	cmp	r3, #0
    41a8:	d002      	beq.n	41b0 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    41aa:	9801      	ldr	r0, [sp, #4]
    41ac:	f000 f936 	bl	441c <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41b0:	bf00      	nop
    41b2:	b003      	add	sp, #12
    41b4:	f85d fb04 	ldr.w	pc, [sp], #4

000041b8 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    41b8:	b500      	push	{lr}
    41ba:	b083      	sub	sp, #12
    41bc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41be:	9b01      	ldr	r3, [sp, #4]
    41c0:	2b00      	cmp	r3, #0
    41c2:	d002      	beq.n	41ca <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    41c4:	9801      	ldr	r0, [sp, #4]
    41c6:	f000 f949 	bl	445c <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41ca:	bf00      	nop
    41cc:	b003      	add	sp, #12
    41ce:	f85d fb04 	ldr.w	pc, [sp], #4

000041d2 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    41d2:	b500      	push	{lr}
    41d4:	b083      	sub	sp, #12
    41d6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41d8:	9b01      	ldr	r3, [sp, #4]
    41da:	2b00      	cmp	r3, #0
    41dc:	d002      	beq.n	41e4 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    41de:	9801      	ldr	r0, [sp, #4]
    41e0:	f000 f958 	bl	4494 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41e4:	bf00      	nop
    41e6:	b003      	add	sp, #12
    41e8:	f85d fb04 	ldr.w	pc, [sp], #4

000041ec <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    41ec:	b500      	push	{lr}
    41ee:	b083      	sub	sp, #12
    41f0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41f2:	9b01      	ldr	r3, [sp, #4]
    41f4:	2b00      	cmp	r3, #0
    41f6:	d002      	beq.n	41fe <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    41f8:	9801      	ldr	r0, [sp, #4]
    41fa:	f000 f969 	bl	44d0 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41fe:	bf00      	nop
    4200:	b003      	add	sp, #12
    4202:	f85d fb04 	ldr.w	pc, [sp], #4

00004206 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4206:	b500      	push	{lr}
    4208:	b083      	sub	sp, #12
    420a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    420c:	9b01      	ldr	r3, [sp, #4]
    420e:	2b00      	cmp	r3, #0
    4210:	d002      	beq.n	4218 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    4212:	9801      	ldr	r0, [sp, #4]
    4214:	f000 f978 	bl	4508 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4218:	bf00      	nop
    421a:	b003      	add	sp, #12
    421c:	f85d fb04 	ldr.w	pc, [sp], #4

00004220 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4220:	b500      	push	{lr}
    4222:	b083      	sub	sp, #12
    4224:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4226:	9b01      	ldr	r3, [sp, #4]
    4228:	2b00      	cmp	r3, #0
    422a:	d002      	beq.n	4232 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    422c:	9801      	ldr	r0, [sp, #4]
    422e:	f000 f989 	bl	4544 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4232:	bf00      	nop
    4234:	b003      	add	sp, #12
    4236:	f85d fb04 	ldr.w	pc, [sp], #4

0000423a <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    423a:	b500      	push	{lr}
    423c:	b083      	sub	sp, #12
    423e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4240:	9b01      	ldr	r3, [sp, #4]
    4242:	2b00      	cmp	r3, #0
    4244:	d002      	beq.n	424c <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    4246:	9801      	ldr	r0, [sp, #4]
    4248:	f000 f998 	bl	457c <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    424c:	bf00      	nop
    424e:	b003      	add	sp, #12
    4250:	f85d fb04 	ldr.w	pc, [sp], #4

00004254 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4254:	b500      	push	{lr}
    4256:	b083      	sub	sp, #12
    4258:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    425a:	9b01      	ldr	r3, [sp, #4]
    425c:	2b00      	cmp	r3, #0
    425e:	d002      	beq.n	4266 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4260:	9801      	ldr	r0, [sp, #4]
    4262:	f000 f9a9 	bl	45b8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4266:	bf00      	nop
    4268:	b003      	add	sp, #12
    426a:	f85d fb04 	ldr.w	pc, [sp], #4

0000426e <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    426e:	b500      	push	{lr}
    4270:	b083      	sub	sp, #12
    4272:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4274:	9b01      	ldr	r3, [sp, #4]
    4276:	2b00      	cmp	r3, #0
    4278:	d002      	beq.n	4280 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    427a:	9801      	ldr	r0, [sp, #4]
    427c:	f000 f9e6 	bl	464c <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4280:	bf00      	nop
    4282:	b003      	add	sp, #12
    4284:	f85d fb04 	ldr.w	pc, [sp], #4

00004288 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4288:	b500      	push	{lr}
    428a:	b083      	sub	sp, #12
    428c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    428e:	9b01      	ldr	r3, [sp, #4]
    4290:	2b00      	cmp	r3, #0
    4292:	d002      	beq.n	429a <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    4294:	9801      	ldr	r0, [sp, #4]
    4296:	f000 fa25 	bl	46e4 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    429a:	bf00      	nop
    429c:	b003      	add	sp, #12
    429e:	f85d fb04 	ldr.w	pc, [sp], #4

000042a2 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    42a2:	b500      	push	{lr}
    42a4:	b083      	sub	sp, #12
    42a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42a8:	9b01      	ldr	r3, [sp, #4]
    42aa:	2b00      	cmp	r3, #0
    42ac:	d002      	beq.n	42b4 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    42ae:	9801      	ldr	r0, [sp, #4]
    42b0:	f000 fa2a 	bl	4708 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42b4:	bf00      	nop
    42b6:	b003      	add	sp, #12
    42b8:	f85d fb04 	ldr.w	pc, [sp], #4

000042bc <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    42bc:	b500      	push	{lr}
    42be:	b083      	sub	sp, #12
    42c0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42c2:	9b01      	ldr	r3, [sp, #4]
    42c4:	2b00      	cmp	r3, #0
    42c6:	d002      	beq.n	42ce <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    42c8:	9801      	ldr	r0, [sp, #4]
    42ca:	f000 fa3b 	bl	4744 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42ce:	bf00      	nop
    42d0:	b003      	add	sp, #12
    42d2:	f85d fb04 	ldr.w	pc, [sp], #4

000042d6 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    42d6:	b500      	push	{lr}
    42d8:	b083      	sub	sp, #12
    42da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42dc:	9b01      	ldr	r3, [sp, #4]
    42de:	2b00      	cmp	r3, #0
    42e0:	d002      	beq.n	42e8 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    42e2:	9801      	ldr	r0, [sp, #4]
    42e4:	f000 fa56 	bl	4794 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42e8:	bf00      	nop
    42ea:	b003      	add	sp, #12
    42ec:	f85d fb04 	ldr.w	pc, [sp], #4

000042f0 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    42f0:	b500      	push	{lr}
    42f2:	b083      	sub	sp, #12
    42f4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42f6:	9b01      	ldr	r3, [sp, #4]
    42f8:	2b00      	cmp	r3, #0
    42fa:	d002      	beq.n	4302 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    42fc:	9801      	ldr	r0, [sp, #4]
    42fe:	f000 fa79 	bl	47f4 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4302:	bf00      	nop
    4304:	b003      	add	sp, #12
    4306:	f85d fb04 	ldr.w	pc, [sp], #4

0000430a <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    430a:	b500      	push	{lr}
    430c:	b083      	sub	sp, #12
    430e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4310:	9b01      	ldr	r3, [sp, #4]
    4312:	2b00      	cmp	r3, #0
    4314:	d002      	beq.n	431c <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4316:	9801      	ldr	r0, [sp, #4]
    4318:	f000 fa8a 	bl	4830 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    431c:	bf00      	nop
    431e:	b003      	add	sp, #12
    4320:	f85d fb04 	ldr.w	pc, [sp], #4

00004324 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4324:	b084      	sub	sp, #16
    4326:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4328:	4b0b      	ldr	r3, [pc, #44]	; (4358 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    432a:	795b      	ldrb	r3, [r3, #5]
    432c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    432e:	4b0b      	ldr	r3, [pc, #44]	; (435c <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4330:	695b      	ldr	r3, [r3, #20]
    4332:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4334:	9b02      	ldr	r3, [sp, #8]
    4336:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    433a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    433c:	9b03      	ldr	r3, [sp, #12]
    433e:	061b      	lsls	r3, r3, #24
    4340:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4344:	9a02      	ldr	r2, [sp, #8]
    4346:	4313      	orrs	r3, r2
    4348:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    434a:	4a04      	ldr	r2, [pc, #16]	; (435c <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    434c:	9b02      	ldr	r3, [sp, #8]
    434e:	6153      	str	r3, [r2, #20]
}
    4350:	bf00      	nop
    4352:	b004      	add	sp, #16
    4354:	4770      	bx	lr
    4356:	bf00      	nop
    4358:	0000a9c4 	.word	0x0000a9c4
    435c:	40064000 	.word	0x40064000

00004360 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4360:	b084      	sub	sp, #16
    4362:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4364:	9b01      	ldr	r3, [sp, #4]
    4366:	685b      	ldr	r3, [r3, #4]
    4368:	4a0b      	ldr	r2, [pc, #44]	; (4398 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    436a:	5cd3      	ldrb	r3, [r2, r3]
    436c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    436e:	4b0b      	ldr	r3, [pc, #44]	; (439c <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4370:	695b      	ldr	r3, [r3, #20]
    4372:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4374:	9b02      	ldr	r3, [sp, #8]
    4376:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    437a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    437c:	9b03      	ldr	r3, [sp, #12]
    437e:	061b      	lsls	r3, r3, #24
    4380:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4384:	9a02      	ldr	r2, [sp, #8]
    4386:	4313      	orrs	r3, r2
    4388:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    438a:	4a04      	ldr	r2, [pc, #16]	; (439c <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    438c:	9b02      	ldr	r3, [sp, #8]
    438e:	6153      	str	r3, [r2, #20]
}
    4390:	bf00      	nop
    4392:	b004      	add	sp, #16
    4394:	4770      	bx	lr
    4396:	bf00      	nop
    4398:	0000a9c4 	.word	0x0000a9c4
    439c:	40064000 	.word	0x40064000

000043a0 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43a0:	b084      	sub	sp, #16
    43a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43a4:	9b01      	ldr	r3, [sp, #4]
    43a6:	685b      	ldr	r3, [r3, #4]
    43a8:	4a0b      	ldr	r2, [pc, #44]	; (43d8 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    43aa:	5cd3      	ldrb	r3, [r2, r3]
    43ac:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    43ae:	4b0b      	ldr	r3, [pc, #44]	; (43dc <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    43b0:	699b      	ldr	r3, [r3, #24]
    43b2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    43b4:	9b02      	ldr	r3, [sp, #8]
    43b6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    43ba:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    43bc:	9b03      	ldr	r3, [sp, #12]
    43be:	061b      	lsls	r3, r3, #24
    43c0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    43c4:	9a02      	ldr	r2, [sp, #8]
    43c6:	4313      	orrs	r3, r2
    43c8:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    43ca:	4a04      	ldr	r2, [pc, #16]	; (43dc <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    43cc:	9b02      	ldr	r3, [sp, #8]
    43ce:	6193      	str	r3, [r2, #24]
}
    43d0:	bf00      	nop
    43d2:	b004      	add	sp, #16
    43d4:	4770      	bx	lr
    43d6:	bf00      	nop
    43d8:	0000a9c4 	.word	0x0000a9c4
    43dc:	40064000 	.word	0x40064000

000043e0 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43e0:	b084      	sub	sp, #16
    43e2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43e4:	4b0b      	ldr	r3, [pc, #44]	; (4414 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    43e6:	795b      	ldrb	r3, [r3, #5]
    43e8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    43ea:	4b0b      	ldr	r3, [pc, #44]	; (4418 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    43ec:	69db      	ldr	r3, [r3, #28]
    43ee:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    43f0:	9b02      	ldr	r3, [sp, #8]
    43f2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    43f6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    43f8:	9b03      	ldr	r3, [sp, #12]
    43fa:	061b      	lsls	r3, r3, #24
    43fc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4400:	9a02      	ldr	r2, [sp, #8]
    4402:	4313      	orrs	r3, r2
    4404:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4406:	4a04      	ldr	r2, [pc, #16]	; (4418 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4408:	9b02      	ldr	r3, [sp, #8]
    440a:	61d3      	str	r3, [r2, #28]
}
    440c:	bf00      	nop
    440e:	b004      	add	sp, #16
    4410:	4770      	bx	lr
    4412:	bf00      	nop
    4414:	0000a9c4 	.word	0x0000a9c4
    4418:	40064000 	.word	0x40064000

0000441c <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    441c:	b084      	sub	sp, #16
    441e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4420:	9b01      	ldr	r3, [sp, #4]
    4422:	685b      	ldr	r3, [r3, #4]
    4424:	4a0b      	ldr	r2, [pc, #44]	; (4454 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    4426:	5cd3      	ldrb	r3, [r2, r3]
    4428:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    442a:	4b0b      	ldr	r3, [pc, #44]	; (4458 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    442c:	69db      	ldr	r3, [r3, #28]
    442e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4430:	9b02      	ldr	r3, [sp, #8]
    4432:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4436:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4438:	9b03      	ldr	r3, [sp, #12]
    443a:	061b      	lsls	r3, r3, #24
    443c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4440:	9a02      	ldr	r2, [sp, #8]
    4442:	4313      	orrs	r3, r2
    4444:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4446:	4a04      	ldr	r2, [pc, #16]	; (4458 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4448:	9b02      	ldr	r3, [sp, #8]
    444a:	61d3      	str	r3, [r2, #28]
}
    444c:	bf00      	nop
    444e:	b004      	add	sp, #16
    4450:	4770      	bx	lr
    4452:	bf00      	nop
    4454:	0000a9c4 	.word	0x0000a9c4
    4458:	40064000 	.word	0x40064000

0000445c <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    445c:	b084      	sub	sp, #16
    445e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4460:	4b0a      	ldr	r3, [pc, #40]	; (448c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    4462:	7b9b      	ldrb	r3, [r3, #14]
    4464:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4466:	4b0a      	ldr	r3, [pc, #40]	; (4490 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4468:	691b      	ldr	r3, [r3, #16]
    446a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    446c:	9b02      	ldr	r3, [sp, #8]
    446e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4472:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4474:	9b03      	ldr	r3, [sp, #12]
    4476:	011b      	lsls	r3, r3, #4
    4478:	9a02      	ldr	r2, [sp, #8]
    447a:	4313      	orrs	r3, r2
    447c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    447e:	4a04      	ldr	r2, [pc, #16]	; (4490 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4480:	9b02      	ldr	r3, [sp, #8]
    4482:	6113      	str	r3, [r2, #16]
}
    4484:	bf00      	nop
    4486:	b004      	add	sp, #16
    4488:	4770      	bx	lr
    448a:	bf00      	nop
    448c:	0000a96c 	.word	0x0000a96c
    4490:	40048000 	.word	0x40048000

00004494 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4494:	b084      	sub	sp, #16
    4496:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4498:	9b01      	ldr	r3, [sp, #4]
    449a:	685b      	ldr	r3, [r3, #4]
    449c:	4a0a      	ldr	r2, [pc, #40]	; (44c8 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    449e:	5cd3      	ldrb	r3, [r2, r3]
    44a0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    44a2:	4b0a      	ldr	r3, [pc, #40]	; (44cc <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    44a4:	691b      	ldr	r3, [r3, #16]
    44a6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    44a8:	9b02      	ldr	r3, [sp, #8]
    44aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    44ae:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    44b0:	9b03      	ldr	r3, [sp, #12]
    44b2:	011b      	lsls	r3, r3, #4
    44b4:	9a02      	ldr	r2, [sp, #8]
    44b6:	4313      	orrs	r3, r2
    44b8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    44ba:	4a04      	ldr	r2, [pc, #16]	; (44cc <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    44bc:	9b02      	ldr	r3, [sp, #8]
    44be:	6113      	str	r3, [r2, #16]
}
    44c0:	bf00      	nop
    44c2:	b004      	add	sp, #16
    44c4:	4770      	bx	lr
    44c6:	bf00      	nop
    44c8:	0000a96c 	.word	0x0000a96c
    44cc:	40048000 	.word	0x40048000

000044d0 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44d0:	b084      	sub	sp, #16
    44d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44d4:	4b0a      	ldr	r3, [pc, #40]	; (4500 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    44d6:	785b      	ldrb	r3, [r3, #1]
    44d8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    44da:	4b0a      	ldr	r3, [pc, #40]	; (4504 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    44dc:	691b      	ldr	r3, [r3, #16]
    44de:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    44e0:	9b02      	ldr	r3, [sp, #8]
    44e2:	f023 030c 	bic.w	r3, r3, #12
    44e6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    44e8:	9b03      	ldr	r3, [sp, #12]
    44ea:	009b      	lsls	r3, r3, #2
    44ec:	9a02      	ldr	r2, [sp, #8]
    44ee:	4313      	orrs	r3, r2
    44f0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    44f2:	4a04      	ldr	r2, [pc, #16]	; (4504 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    44f4:	9b02      	ldr	r3, [sp, #8]
    44f6:	6113      	str	r3, [r2, #16]
}
    44f8:	bf00      	nop
    44fa:	b004      	add	sp, #16
    44fc:	4770      	bx	lr
    44fe:	bf00      	nop
    4500:	0000aa24 	.word	0x0000aa24
    4504:	40048000 	.word	0x40048000

00004508 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4508:	b084      	sub	sp, #16
    450a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    450c:	9b01      	ldr	r3, [sp, #4]
    450e:	685b      	ldr	r3, [r3, #4]
    4510:	4a0a      	ldr	r2, [pc, #40]	; (453c <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    4512:	5cd3      	ldrb	r3, [r2, r3]
    4514:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4516:	4b0a      	ldr	r3, [pc, #40]	; (4540 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4518:	691b      	ldr	r3, [r3, #16]
    451a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    451c:	9b02      	ldr	r3, [sp, #8]
    451e:	f023 030c 	bic.w	r3, r3, #12
    4522:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4524:	9b03      	ldr	r3, [sp, #12]
    4526:	009b      	lsls	r3, r3, #2
    4528:	9a02      	ldr	r2, [sp, #8]
    452a:	4313      	orrs	r3, r2
    452c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    452e:	4a04      	ldr	r2, [pc, #16]	; (4540 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4530:	9b02      	ldr	r3, [sp, #8]
    4532:	6113      	str	r3, [r2, #16]
}
    4534:	bf00      	nop
    4536:	b004      	add	sp, #16
    4538:	4770      	bx	lr
    453a:	bf00      	nop
    453c:	0000aa24 	.word	0x0000aa24
    4540:	40048000 	.word	0x40048000

00004544 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4544:	b084      	sub	sp, #16
    4546:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4548:	4b0a      	ldr	r3, [pc, #40]	; (4574 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    454a:	795b      	ldrb	r3, [r3, #5]
    454c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    454e:	4b0a      	ldr	r3, [pc, #40]	; (4578 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4550:	6a1b      	ldr	r3, [r3, #32]
    4552:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4554:	9b02      	ldr	r3, [sp, #8]
    4556:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    455a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    455c:	9b03      	ldr	r3, [sp, #12]
    455e:	061b      	lsls	r3, r3, #24
    4560:	9a02      	ldr	r2, [sp, #8]
    4562:	4313      	orrs	r3, r2
    4564:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4566:	4a04      	ldr	r2, [pc, #16]	; (4578 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4568:	9b02      	ldr	r3, [sp, #8]
    456a:	6213      	str	r3, [r2, #32]
}
    456c:	bf00      	nop
    456e:	b004      	add	sp, #16
    4570:	4770      	bx	lr
    4572:	bf00      	nop
    4574:	0000a9c4 	.word	0x0000a9c4
    4578:	40064000 	.word	0x40064000

0000457c <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    457c:	b084      	sub	sp, #16
    457e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4580:	9b01      	ldr	r3, [sp, #4]
    4582:	685b      	ldr	r3, [r3, #4]
    4584:	4a0a      	ldr	r2, [pc, #40]	; (45b0 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    4586:	5cd3      	ldrb	r3, [r2, r3]
    4588:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    458a:	4b0a      	ldr	r3, [pc, #40]	; (45b4 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    458c:	6a1b      	ldr	r3, [r3, #32]
    458e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4590:	9b02      	ldr	r3, [sp, #8]
    4592:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4596:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4598:	9b03      	ldr	r3, [sp, #12]
    459a:	061b      	lsls	r3, r3, #24
    459c:	9a02      	ldr	r2, [sp, #8]
    459e:	4313      	orrs	r3, r2
    45a0:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    45a2:	4a04      	ldr	r2, [pc, #16]	; (45b4 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    45a4:	9b02      	ldr	r3, [sp, #8]
    45a6:	6213      	str	r3, [r2, #32]
}
    45a8:	bf00      	nop
    45aa:	b004      	add	sp, #16
    45ac:	4770      	bx	lr
    45ae:	bf00      	nop
    45b0:	0000a9c4 	.word	0x0000a9c4
    45b4:	40064000 	.word	0x40064000

000045b8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45b8:	b086      	sub	sp, #24
    45ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45bc:	4b20      	ldr	r3, [pc, #128]	; (4640 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    45be:	795b      	ldrb	r3, [r3, #5]
    45c0:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    45c2:	9b01      	ldr	r3, [sp, #4]
    45c4:	681a      	ldr	r2, [r3, #0]
    45c6:	491f      	ldr	r1, [pc, #124]	; (4644 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    45c8:	4613      	mov	r3, r2
    45ca:	00db      	lsls	r3, r3, #3
    45cc:	4413      	add	r3, r2
    45ce:	440b      	add	r3, r1
    45d0:	781b      	ldrb	r3, [r3, #0]
    45d2:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    45d4:	4b1c      	ldr	r3, [pc, #112]	; (4648 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    45d6:	68db      	ldr	r3, [r3, #12]
    45d8:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    45da:	9b03      	ldr	r3, [sp, #12]
    45dc:	2b03      	cmp	r3, #3
    45de:	d813      	bhi.n	4608 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    45e0:	9b03      	ldr	r3, [sp, #12]
    45e2:	005b      	lsls	r3, r3, #1
    45e4:	3318      	adds	r3, #24
    45e6:	2203      	movs	r2, #3
    45e8:	fa02 f303 	lsl.w	r3, r2, r3
    45ec:	43db      	mvns	r3, r3
    45ee:	9a05      	ldr	r2, [sp, #20]
    45f0:	4013      	ands	r3, r2
    45f2:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    45f4:	9b03      	ldr	r3, [sp, #12]
    45f6:	005b      	lsls	r3, r3, #1
    45f8:	3318      	adds	r3, #24
    45fa:	9a04      	ldr	r2, [sp, #16]
    45fc:	fa02 f303 	lsl.w	r3, r2, r3
    4600:	9a05      	ldr	r2, [sp, #20]
    4602:	4313      	orrs	r3, r2
    4604:	9305      	str	r3, [sp, #20]
    4606:	e014      	b.n	4632 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4608:	9b03      	ldr	r3, [sp, #12]
    460a:	3b04      	subs	r3, #4
    460c:	005b      	lsls	r3, r3, #1
    460e:	3310      	adds	r3, #16
    4610:	2203      	movs	r2, #3
    4612:	fa02 f303 	lsl.w	r3, r2, r3
    4616:	43db      	mvns	r3, r3
    4618:	9a05      	ldr	r2, [sp, #20]
    461a:	4013      	ands	r3, r2
    461c:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    461e:	9b03      	ldr	r3, [sp, #12]
    4620:	3b04      	subs	r3, #4
    4622:	005b      	lsls	r3, r3, #1
    4624:	3310      	adds	r3, #16
    4626:	9a04      	ldr	r2, [sp, #16]
    4628:	fa02 f303 	lsl.w	r3, r2, r3
    462c:	9a05      	ldr	r2, [sp, #20]
    462e:	4313      	orrs	r3, r2
    4630:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4632:	4a05      	ldr	r2, [pc, #20]	; (4648 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4634:	9b05      	ldr	r3, [sp, #20]
    4636:	60d3      	str	r3, [r2, #12]
}
    4638:	bf00      	nop
    463a:	b006      	add	sp, #24
    463c:	4770      	bx	lr
    463e:	bf00      	nop
    4640:	0000a96c 	.word	0x0000a96c
    4644:	0000a65c 	.word	0x0000a65c
    4648:	40048000 	.word	0x40048000

0000464c <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    464c:	b086      	sub	sp, #24
    464e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4650:	9b01      	ldr	r3, [sp, #4]
    4652:	685b      	ldr	r3, [r3, #4]
    4654:	4a20      	ldr	r2, [pc, #128]	; (46d8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    4656:	5cd3      	ldrb	r3, [r2, r3]
    4658:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    465a:	9b01      	ldr	r3, [sp, #4]
    465c:	681a      	ldr	r2, [r3, #0]
    465e:	491f      	ldr	r1, [pc, #124]	; (46dc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    4660:	4613      	mov	r3, r2
    4662:	00db      	lsls	r3, r3, #3
    4664:	4413      	add	r3, r2
    4666:	440b      	add	r3, r1
    4668:	781b      	ldrb	r3, [r3, #0]
    466a:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    466c:	4b1c      	ldr	r3, [pc, #112]	; (46e0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    466e:	68db      	ldr	r3, [r3, #12]
    4670:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4672:	9b03      	ldr	r3, [sp, #12]
    4674:	2b03      	cmp	r3, #3
    4676:	d813      	bhi.n	46a0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4678:	9b03      	ldr	r3, [sp, #12]
    467a:	005b      	lsls	r3, r3, #1
    467c:	3318      	adds	r3, #24
    467e:	2203      	movs	r2, #3
    4680:	fa02 f303 	lsl.w	r3, r2, r3
    4684:	43db      	mvns	r3, r3
    4686:	9a05      	ldr	r2, [sp, #20]
    4688:	4013      	ands	r3, r2
    468a:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    468c:	9b03      	ldr	r3, [sp, #12]
    468e:	005b      	lsls	r3, r3, #1
    4690:	3318      	adds	r3, #24
    4692:	9a04      	ldr	r2, [sp, #16]
    4694:	fa02 f303 	lsl.w	r3, r2, r3
    4698:	9a05      	ldr	r2, [sp, #20]
    469a:	4313      	orrs	r3, r2
    469c:	9305      	str	r3, [sp, #20]
    469e:	e014      	b.n	46ca <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    46a0:	9b03      	ldr	r3, [sp, #12]
    46a2:	3b04      	subs	r3, #4
    46a4:	005b      	lsls	r3, r3, #1
    46a6:	3310      	adds	r3, #16
    46a8:	2203      	movs	r2, #3
    46aa:	fa02 f303 	lsl.w	r3, r2, r3
    46ae:	43db      	mvns	r3, r3
    46b0:	9a05      	ldr	r2, [sp, #20]
    46b2:	4013      	ands	r3, r2
    46b4:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    46b6:	9b03      	ldr	r3, [sp, #12]
    46b8:	3b04      	subs	r3, #4
    46ba:	005b      	lsls	r3, r3, #1
    46bc:	3310      	adds	r3, #16
    46be:	9a04      	ldr	r2, [sp, #16]
    46c0:	fa02 f303 	lsl.w	r3, r2, r3
    46c4:	9a05      	ldr	r2, [sp, #20]
    46c6:	4313      	orrs	r3, r2
    46c8:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    46ca:	4a05      	ldr	r2, [pc, #20]	; (46e0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    46cc:	9b05      	ldr	r3, [sp, #20]
    46ce:	60d3      	str	r3, [r2, #12]
}
    46d0:	bf00      	nop
    46d2:	b006      	add	sp, #24
    46d4:	4770      	bx	lr
    46d6:	bf00      	nop
    46d8:	0000a96c 	.word	0x0000a96c
    46dc:	0000a65c 	.word	0x0000a65c
    46e0:	40048000 	.word	0x40048000

000046e4 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46e4:	b084      	sub	sp, #16
    46e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    46e8:	4b06      	ldr	r3, [pc, #24]	; (4704 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    46ea:	685b      	ldr	r3, [r3, #4]
    46ec:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    46ee:	9b03      	ldr	r3, [sp, #12]
    46f0:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    46f4:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    46f6:	4a03      	ldr	r2, [pc, #12]	; (4704 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    46f8:	9b03      	ldr	r3, [sp, #12]
    46fa:	6053      	str	r3, [r2, #4]
}
    46fc:	bf00      	nop
    46fe:	b004      	add	sp, #16
    4700:	4770      	bx	lr
    4702:	bf00      	nop
    4704:	40048000 	.word	0x40048000

00004708 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4708:	b084      	sub	sp, #16
    470a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    470c:	9b01      	ldr	r3, [sp, #4]
    470e:	685b      	ldr	r3, [r3, #4]
    4710:	4a0a      	ldr	r2, [pc, #40]	; (473c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    4712:	5cd3      	ldrb	r3, [r2, r3]
    4714:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    4716:	4b0a      	ldr	r3, [pc, #40]	; (4740 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4718:	685b      	ldr	r3, [r3, #4]
    471a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    471c:	9b02      	ldr	r3, [sp, #8]
    471e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4722:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4724:	9b03      	ldr	r3, [sp, #12]
    4726:	011b      	lsls	r3, r3, #4
    4728:	9a02      	ldr	r2, [sp, #8]
    472a:	4313      	orrs	r3, r2
    472c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    472e:	4a04      	ldr	r2, [pc, #16]	; (4740 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4730:	9b02      	ldr	r3, [sp, #8]
    4732:	6053      	str	r3, [r2, #4]
}
    4734:	bf00      	nop
    4736:	b004      	add	sp, #16
    4738:	4770      	bx	lr
    473a:	bf00      	nop
    473c:	0000a96c 	.word	0x0000a96c
    4740:	40048000 	.word	0x40048000

00004744 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4744:	b084      	sub	sp, #16
    4746:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4748:	9b01      	ldr	r3, [sp, #4]
    474a:	681a      	ldr	r2, [r3, #0]
    474c:	490f      	ldr	r1, [pc, #60]	; (478c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    474e:	4613      	mov	r3, r2
    4750:	00db      	lsls	r3, r3, #3
    4752:	4413      	add	r3, r2
    4754:	440b      	add	r3, r1
    4756:	3304      	adds	r3, #4
    4758:	781b      	ldrb	r3, [r3, #0]
    475a:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    475c:	4a0c      	ldr	r2, [pc, #48]	; (4790 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    475e:	9b03      	ldr	r3, [sp, #12]
    4760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4764:	490a      	ldr	r1, [pc, #40]	; (4790 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4766:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    476a:	9b03      	ldr	r3, [sp, #12]
    476c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4770:	4a07      	ldr	r2, [pc, #28]	; (4790 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4772:	9b03      	ldr	r3, [sp, #12]
    4774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4778:	4905      	ldr	r1, [pc, #20]	; (4790 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    477a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    477e:	9b03      	ldr	r3, [sp, #12]
    4780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4784:	bf00      	nop
    4786:	b004      	add	sp, #16
    4788:	4770      	bx	lr
    478a:	bf00      	nop
    478c:	0000a65c 	.word	0x0000a65c
    4790:	40065000 	.word	0x40065000

00004794 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4794:	b086      	sub	sp, #24
    4796:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4798:	9b01      	ldr	r3, [sp, #4]
    479a:	681a      	ldr	r2, [r3, #0]
    479c:	4912      	ldr	r1, [pc, #72]	; (47e8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    479e:	4613      	mov	r3, r2
    47a0:	00db      	lsls	r3, r3, #3
    47a2:	4413      	add	r3, r2
    47a4:	440b      	add	r3, r1
    47a6:	3304      	adds	r3, #4
    47a8:	781b      	ldrb	r3, [r3, #0]
    47aa:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47ac:	9b01      	ldr	r3, [sp, #4]
    47ae:	685b      	ldr	r3, [r3, #4]
    47b0:	4a0e      	ldr	r2, [pc, #56]	; (47ec <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    47b2:	5cd3      	ldrb	r3, [r2, r3]
    47b4:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    47b6:	4a0e      	ldr	r2, [pc, #56]	; (47f0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    47b8:	9b05      	ldr	r3, [sp, #20]
    47ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    47be:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    47c0:	9b03      	ldr	r3, [sp, #12]
    47c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    47c6:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    47c8:	9b04      	ldr	r3, [sp, #16]
    47ca:	061b      	lsls	r3, r3, #24
    47cc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    47d0:	9a03      	ldr	r2, [sp, #12]
    47d2:	4313      	orrs	r3, r2
    47d4:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    47d6:	4906      	ldr	r1, [pc, #24]	; (47f0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    47d8:	9b05      	ldr	r3, [sp, #20]
    47da:	9a03      	ldr	r2, [sp, #12]
    47dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    47e0:	bf00      	nop
    47e2:	b006      	add	sp, #24
    47e4:	4770      	bx	lr
    47e6:	bf00      	nop
    47e8:	0000a65c 	.word	0x0000a65c
    47ec:	0000a9f4 	.word	0x0000a9f4
    47f0:	40065000 	.word	0x40065000

000047f4 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47f4:	b084      	sub	sp, #16
    47f6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47f8:	4b0b      	ldr	r3, [pc, #44]	; (4828 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    47fa:	7f1b      	ldrb	r3, [r3, #28]
    47fc:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    47fe:	4b0b      	ldr	r3, [pc, #44]	; (482c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4800:	685b      	ldr	r3, [r3, #4]
    4802:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4804:	9b02      	ldr	r3, [sp, #8]
    4806:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    480a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    480c:	9b03      	ldr	r3, [sp, #12]
    480e:	031b      	lsls	r3, r3, #12
    4810:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4814:	9a02      	ldr	r2, [sp, #8]
    4816:	4313      	orrs	r3, r2
    4818:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    481a:	4a04      	ldr	r2, [pc, #16]	; (482c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    481c:	9b02      	ldr	r3, [sp, #8]
    481e:	6053      	str	r3, [r2, #4]
}
    4820:	bf00      	nop
    4822:	b004      	add	sp, #16
    4824:	4770      	bx	lr
    4826:	bf00      	nop
    4828:	0000a96c 	.word	0x0000a96c
    482c:	40048000 	.word	0x40048000

00004830 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4830:	b084      	sub	sp, #16
    4832:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4834:	9b01      	ldr	r3, [sp, #4]
    4836:	685b      	ldr	r3, [r3, #4]
    4838:	4a0b      	ldr	r2, [pc, #44]	; (4868 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    483a:	5cd3      	ldrb	r3, [r2, r3]
    483c:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    483e:	4b0b      	ldr	r3, [pc, #44]	; (486c <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4840:	685b      	ldr	r3, [r3, #4]
    4842:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4844:	9b02      	ldr	r3, [sp, #8]
    4846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    484a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    484c:	9b03      	ldr	r3, [sp, #12]
    484e:	031b      	lsls	r3, r3, #12
    4850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4854:	9a02      	ldr	r2, [sp, #8]
    4856:	4313      	orrs	r3, r2
    4858:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    485a:	4a04      	ldr	r2, [pc, #16]	; (486c <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    485c:	9b02      	ldr	r3, [sp, #8]
    485e:	6053      	str	r3, [r2, #4]
}
    4860:	bf00      	nop
    4862:	b004      	add	sp, #16
    4864:	4770      	bx	lr
    4866:	bf00      	nop
    4868:	0000a96c 	.word	0x0000a96c
    486c:	40048000 	.word	0x40048000

00004870 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4870:	b500      	push	{lr}
    4872:	b085      	sub	sp, #20
    4874:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4876:	2300      	movs	r3, #0
    4878:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    487c:	9b01      	ldr	r3, [sp, #4]
    487e:	2b00      	cmp	r3, #0
    4880:	d037      	beq.n	48f2 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4882:	2300      	movs	r3, #0
    4884:	9303      	str	r3, [sp, #12]
    4886:	e02b      	b.n	48e0 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4888:	4b29      	ldr	r3, [pc, #164]	; (4930 <DisableSafeClock+0xc0>)
    488a:	6819      	ldr	r1, [r3, #0]
    488c:	9a03      	ldr	r2, [sp, #12]
    488e:	4613      	mov	r3, r2
    4890:	005b      	lsls	r3, r3, #1
    4892:	4413      	add	r3, r2
    4894:	009b      	lsls	r3, r3, #2
    4896:	440b      	add	r3, r1
    4898:	3314      	adds	r3, #20
    489a:	681b      	ldr	r3, [r3, #0]
    489c:	2b05      	cmp	r3, #5
    489e:	d11c      	bne.n	48da <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    48a0:	2301      	movs	r3, #1
    48a2:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    48a6:	4b22      	ldr	r3, [pc, #136]	; (4930 <DisableSafeClock+0xc0>)
    48a8:	6819      	ldr	r1, [r3, #0]
    48aa:	9a03      	ldr	r2, [sp, #12]
    48ac:	4613      	mov	r3, r2
    48ae:	005b      	lsls	r3, r3, #1
    48b0:	4413      	add	r3, r2
    48b2:	009b      	lsls	r3, r3, #2
    48b4:	440b      	add	r3, r1
    48b6:	3318      	adds	r3, #24
    48b8:	881b      	ldrh	r3, [r3, #0]
    48ba:	2b00      	cmp	r3, #0
    48bc:	d118      	bne.n	48f0 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    48be:	4b1d      	ldr	r3, [pc, #116]	; (4934 <DisableSafeClock+0xc4>)
    48c0:	791b      	ldrb	r3, [r3, #4]
    48c2:	4619      	mov	r1, r3
    48c4:	4a1c      	ldr	r2, [pc, #112]	; (4938 <DisableSafeClock+0xc8>)
    48c6:	460b      	mov	r3, r1
    48c8:	005b      	lsls	r3, r3, #1
    48ca:	440b      	add	r3, r1
    48cc:	009b      	lsls	r3, r3, #2
    48ce:	4413      	add	r3, r2
    48d0:	3308      	adds	r3, #8
    48d2:	681b      	ldr	r3, [r3, #0]
    48d4:	2005      	movs	r0, #5
    48d6:	4798      	blx	r3
                }
                break;
    48d8:	e00a      	b.n	48f0 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    48da:	9b03      	ldr	r3, [sp, #12]
    48dc:	3301      	adds	r3, #1
    48de:	9303      	str	r3, [sp, #12]
    48e0:	4b13      	ldr	r3, [pc, #76]	; (4930 <DisableSafeClock+0xc0>)
    48e2:	681b      	ldr	r3, [r3, #0]
    48e4:	7a1b      	ldrb	r3, [r3, #8]
    48e6:	461a      	mov	r2, r3
    48e8:	9b03      	ldr	r3, [sp, #12]
    48ea:	4293      	cmp	r3, r2
    48ec:	d3cc      	bcc.n	4888 <DisableSafeClock+0x18>
    48ee:	e000      	b.n	48f2 <DisableSafeClock+0x82>
                break;
    48f0:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    48f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    48f6:	f083 0301 	eor.w	r3, r3, #1
    48fa:	b2db      	uxtb	r3, r3
    48fc:	2b00      	cmp	r3, #0
    48fe:	d013      	beq.n	4928 <DisableSafeClock+0xb8>
    4900:	4b0e      	ldr	r3, [pc, #56]	; (493c <DisableSafeClock+0xcc>)
    4902:	781b      	ldrb	r3, [r3, #0]
    4904:	f083 0301 	eor.w	r3, r3, #1
    4908:	b2db      	uxtb	r3, r3
    490a:	2b00      	cmp	r3, #0
    490c:	d00c      	beq.n	4928 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    490e:	4b09      	ldr	r3, [pc, #36]	; (4934 <DisableSafeClock+0xc4>)
    4910:	791b      	ldrb	r3, [r3, #4]
    4912:	4619      	mov	r1, r3
    4914:	4a08      	ldr	r2, [pc, #32]	; (4938 <DisableSafeClock+0xc8>)
    4916:	460b      	mov	r3, r1
    4918:	005b      	lsls	r3, r3, #1
    491a:	440b      	add	r3, r1
    491c:	009b      	lsls	r3, r3, #2
    491e:	4413      	add	r3, r2
    4920:	3308      	adds	r3, #8
    4922:	681b      	ldr	r3, [r3, #0]
    4924:	2005      	movs	r0, #5
    4926:	4798      	blx	r3
    }
}
    4928:	bf00      	nop
    492a:	b005      	add	sp, #20
    492c:	f85d fb04 	ldr.w	pc, [sp], #4
    4930:	1fff8ba8 	.word	0x1fff8ba8
    4934:	0000a5ec 	.word	0x0000a5ec
    4938:	0000ac1c 	.word	0x0000ac1c
    493c:	1fff8b18 	.word	0x1fff8b18

00004940 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4940:	4b06      	ldr	r3, [pc, #24]	; (495c <SetFircToResetValue_TrustedCall+0x1c>)
    4942:	2200      	movs	r2, #0
    4944:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4948:	4b04      	ldr	r3, [pc, #16]	; (495c <SetFircToResetValue_TrustedCall+0x1c>)
    494a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    494e:	4a03      	ldr	r2, [pc, #12]	; (495c <SetFircToResetValue_TrustedCall+0x1c>)
    4950:	f043 0301 	orr.w	r3, r3, #1
    4954:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4958:	bf00      	nop
    495a:	4770      	bx	lr
    495c:	40064000 	.word	0x40064000

00004960 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4960:	b084      	sub	sp, #16
    4962:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4964:	2303      	movs	r3, #3
    4966:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4968:	2300      	movs	r3, #0
    496a:	9302      	str	r3, [sp, #8]
    496c:	e028      	b.n	49c0 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    496e:	9b01      	ldr	r3, [sp, #4]
    4970:	9a02      	ldr	r2, [sp, #8]
    4972:	320d      	adds	r2, #13
    4974:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4978:	2b28      	cmp	r3, #40	; 0x28
    497a:	d10b      	bne.n	4994 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    497c:	9a01      	ldr	r2, [sp, #4]
    497e:	9b02      	ldr	r3, [sp, #8]
    4980:	330d      	adds	r3, #13
    4982:	00db      	lsls	r3, r3, #3
    4984:	4413      	add	r3, r2
    4986:	685b      	ldr	r3, [r3, #4]
    4988:	4a2b      	ldr	r2, [pc, #172]	; (4a38 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    498a:	5cd3      	ldrb	r3, [r2, r3]
    498c:	011b      	lsls	r3, r3, #4
    498e:	9a03      	ldr	r2, [sp, #12]
    4990:	4313      	orrs	r3, r2
    4992:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4994:	9b01      	ldr	r3, [sp, #4]
    4996:	9a02      	ldr	r2, [sp, #8]
    4998:	320d      	adds	r2, #13
    499a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    499e:	2b29      	cmp	r3, #41	; 0x29
    49a0:	d10b      	bne.n	49ba <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    49a2:	9a01      	ldr	r2, [sp, #4]
    49a4:	9b02      	ldr	r3, [sp, #8]
    49a6:	330d      	adds	r3, #13
    49a8:	00db      	lsls	r3, r3, #3
    49aa:	4413      	add	r3, r2
    49ac:	685b      	ldr	r3, [r3, #4]
    49ae:	4a23      	ldr	r2, [pc, #140]	; (4a3c <SetSimLpoclksRegister_TrustedCall+0xdc>)
    49b0:	5cd3      	ldrb	r3, [r2, r3]
    49b2:	009b      	lsls	r3, r3, #2
    49b4:	9a03      	ldr	r2, [sp, #12]
    49b6:	4313      	orrs	r3, r2
    49b8:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    49ba:	9b02      	ldr	r3, [sp, #8]
    49bc:	3301      	adds	r3, #1
    49be:	9302      	str	r3, [sp, #8]
    49c0:	9b01      	ldr	r3, [sp, #4]
    49c2:	7adb      	ldrb	r3, [r3, #11]
    49c4:	461a      	mov	r2, r3
    49c6:	9b02      	ldr	r3, [sp, #8]
    49c8:	4293      	cmp	r3, r2
    49ca:	d3d0      	bcc.n	496e <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    49cc:	2300      	movs	r3, #0
    49ce:	9302      	str	r3, [sp, #8]
    49d0:	e026      	b.n	4a20 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    49d2:	9a01      	ldr	r2, [sp, #4]
    49d4:	9b02      	ldr	r3, [sp, #8]
    49d6:	334e      	adds	r3, #78	; 0x4e
    49d8:	00db      	lsls	r3, r3, #3
    49da:	4413      	add	r3, r2
    49dc:	685b      	ldr	r3, [r3, #4]
    49de:	2b12      	cmp	r3, #18
    49e0:	d109      	bne.n	49f6 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    49e2:	9a01      	ldr	r2, [sp, #4]
    49e4:	9b02      	ldr	r3, [sp, #8]
    49e6:	334e      	adds	r3, #78	; 0x4e
    49e8:	00db      	lsls	r3, r3, #3
    49ea:	4413      	add	r3, r2
    49ec:	891b      	ldrh	r3, [r3, #8]
    49ee:	005b      	lsls	r3, r3, #1
    49f0:	9a03      	ldr	r2, [sp, #12]
    49f2:	4313      	orrs	r3, r2
    49f4:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    49f6:	9a01      	ldr	r2, [sp, #4]
    49f8:	9b02      	ldr	r3, [sp, #8]
    49fa:	334e      	adds	r3, #78	; 0x4e
    49fc:	00db      	lsls	r3, r3, #3
    49fe:	4413      	add	r3, r2
    4a00:	685b      	ldr	r3, [r3, #4]
    4a02:	2b13      	cmp	r3, #19
    4a04:	d109      	bne.n	4a1a <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4a06:	9a01      	ldr	r2, [sp, #4]
    4a08:	9b02      	ldr	r3, [sp, #8]
    4a0a:	334e      	adds	r3, #78	; 0x4e
    4a0c:	00db      	lsls	r3, r3, #3
    4a0e:	4413      	add	r3, r2
    4a10:	891b      	ldrh	r3, [r3, #8]
    4a12:	461a      	mov	r2, r3
    4a14:	9b03      	ldr	r3, [sp, #12]
    4a16:	4313      	orrs	r3, r2
    4a18:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4a1a:	9b02      	ldr	r3, [sp, #8]
    4a1c:	3301      	adds	r3, #1
    4a1e:	9302      	str	r3, [sp, #8]
    4a20:	9b01      	ldr	r3, [sp, #4]
    4a22:	7c1b      	ldrb	r3, [r3, #16]
    4a24:	461a      	mov	r2, r3
    4a26:	9b02      	ldr	r3, [sp, #8]
    4a28:	4293      	cmp	r3, r2
    4a2a:	d3d2      	bcc.n	49d2 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4a2c:	4a04      	ldr	r2, [pc, #16]	; (4a40 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4a2e:	9b03      	ldr	r3, [sp, #12]
    4a30:	6113      	str	r3, [r2, #16]
}
    4a32:	bf00      	nop
    4a34:	b004      	add	sp, #16
    4a36:	4770      	bx	lr
    4a38:	0000a96c 	.word	0x0000a96c
    4a3c:	0000aa24 	.word	0x0000aa24
    4a40:	40048000 	.word	0x40048000

00004a44 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4a44:	b500      	push	{lr}
    4a46:	b089      	sub	sp, #36	; 0x24
    4a48:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4a4a:	2300      	movs	r3, #0
    4a4c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4a50:	4a21      	ldr	r2, [pc, #132]	; (4ad8 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4a52:	9b01      	ldr	r3, [sp, #4]
    4a54:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4a56:	4b21      	ldr	r3, [pc, #132]	; (4adc <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4a58:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a5c:	f003 0301 	and.w	r3, r3, #1
    4a60:	2b00      	cmp	r3, #0
    4a62:	d12e      	bne.n	4ac2 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4a64:	4b1e      	ldr	r3, [pc, #120]	; (4ae0 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4a66:	2200      	movs	r2, #0
    4a68:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4a6a:	f7ff ff69 	bl	4940 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4a6e:	aa03      	add	r2, sp, #12
    4a70:	a904      	add	r1, sp, #16
    4a72:	a805      	add	r0, sp, #20
    4a74:	f24c 3350 	movw	r3, #50000	; 0xc350
    4a78:	f7fe f8ae 	bl	2bd8 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4a7c:	4b17      	ldr	r3, [pc, #92]	; (4adc <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4a7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a82:	0e1b      	lsrs	r3, r3, #24
    4a84:	f003 0301 	and.w	r3, r3, #1
    4a88:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4a8a:	9a03      	ldr	r2, [sp, #12]
    4a8c:	a904      	add	r1, sp, #16
    4a8e:	ab05      	add	r3, sp, #20
    4a90:	4618      	mov	r0, r3
    4a92:	f7fe f8bb 	bl	2c0c <Clock_Ip_TimeoutExpired>
    4a96:	4603      	mov	r3, r0
    4a98:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4a9c:	9b06      	ldr	r3, [sp, #24]
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	d106      	bne.n	4ab0 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4aa2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4aa6:	f083 0301 	eor.w	r3, r3, #1
    4aaa:	b2db      	uxtb	r3, r3
    4aac:	2b00      	cmp	r3, #0
    4aae:	d1e5      	bne.n	4a7c <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4ab0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4ab4:	2b00      	cmp	r3, #0
    4ab6:	d007      	beq.n	4ac8 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4ab8:	2105      	movs	r1, #5
    4aba:	2001      	movs	r0, #1
    4abc:	f7fe f87c 	bl	2bb8 <Clock_Ip_ReportClockErrors>
    4ac0:	e002      	b.n	4ac8 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4ac2:	4b07      	ldr	r3, [pc, #28]	; (4ae0 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4ac4:	2201      	movs	r2, #1
    4ac6:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4ac8:	9801      	ldr	r0, [sp, #4]
    4aca:	f7ff ff49 	bl	4960 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4ace:	bf00      	nop
    4ad0:	b009      	add	sp, #36	; 0x24
    4ad2:	f85d fb04 	ldr.w	pc, [sp], #4
    4ad6:	bf00      	nop
    4ad8:	1fff8ba8 	.word	0x1fff8ba8
    4adc:	40064000 	.word	0x40064000
    4ae0:	1fff8b18 	.word	0x1fff8b18

00004ae4 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4ae4:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4ae6:	2300      	movs	r3, #0
    4ae8:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4aea:	4b29      	ldr	r3, [pc, #164]	; (4b90 <getFircConfig+0xac>)
    4aec:	681b      	ldr	r3, [r3, #0]
    4aee:	2b00      	cmp	r3, #0
    4af0:	d024      	beq.n	4b3c <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4af2:	2300      	movs	r3, #0
    4af4:	9301      	str	r3, [sp, #4]
    4af6:	e01a      	b.n	4b2e <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4af8:	4b25      	ldr	r3, [pc, #148]	; (4b90 <getFircConfig+0xac>)
    4afa:	6819      	ldr	r1, [r3, #0]
    4afc:	9a01      	ldr	r2, [sp, #4]
    4afe:	4613      	mov	r3, r2
    4b00:	005b      	lsls	r3, r3, #1
    4b02:	4413      	add	r3, r2
    4b04:	009b      	lsls	r3, r3, #2
    4b06:	440b      	add	r3, r1
    4b08:	3314      	adds	r3, #20
    4b0a:	681b      	ldr	r3, [r3, #0]
    4b0c:	2b05      	cmp	r3, #5
    4b0e:	d10b      	bne.n	4b28 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4b10:	4b1f      	ldr	r3, [pc, #124]	; (4b90 <getFircConfig+0xac>)
    4b12:	6819      	ldr	r1, [r3, #0]
    4b14:	9a01      	ldr	r2, [sp, #4]
    4b16:	4613      	mov	r3, r2
    4b18:	005b      	lsls	r3, r3, #1
    4b1a:	4413      	add	r3, r2
    4b1c:	009b      	lsls	r3, r3, #2
    4b1e:	3310      	adds	r3, #16
    4b20:	440b      	add	r3, r1
    4b22:	3304      	adds	r3, #4
    4b24:	9300      	str	r3, [sp, #0]
                break;
    4b26:	e009      	b.n	4b3c <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4b28:	9b01      	ldr	r3, [sp, #4]
    4b2a:	3301      	adds	r3, #1
    4b2c:	9301      	str	r3, [sp, #4]
    4b2e:	4b18      	ldr	r3, [pc, #96]	; (4b90 <getFircConfig+0xac>)
    4b30:	681b      	ldr	r3, [r3, #0]
    4b32:	7a1b      	ldrb	r3, [r3, #8]
    4b34:	461a      	mov	r2, r3
    4b36:	9b01      	ldr	r3, [sp, #4]
    4b38:	4293      	cmp	r3, r2
    4b3a:	d3dd      	bcc.n	4af8 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4b3c:	9b00      	ldr	r3, [sp, #0]
    4b3e:	2b00      	cmp	r3, #0
    4b40:	d121      	bne.n	4b86 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4b42:	4b14      	ldr	r3, [pc, #80]	; (4b94 <getFircConfig+0xb0>)
    4b44:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4b46:	4b13      	ldr	r3, [pc, #76]	; (4b94 <getFircConfig+0xb0>)
    4b48:	2205      	movs	r2, #5
    4b4a:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4b4c:	4b12      	ldr	r3, [pc, #72]	; (4b98 <getFircConfig+0xb4>)
    4b4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b52:	b29b      	uxth	r3, r3
    4b54:	f003 0301 	and.w	r3, r3, #1
    4b58:	b29a      	uxth	r2, r3
    4b5a:	4b0e      	ldr	r3, [pc, #56]	; (4b94 <getFircConfig+0xb0>)
    4b5c:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4b5e:	4b0e      	ldr	r3, [pc, #56]	; (4b98 <getFircConfig+0xb4>)
    4b60:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4b64:	b2db      	uxtb	r3, r3
    4b66:	f003 0303 	and.w	r3, r3, #3
    4b6a:	b2da      	uxtb	r2, r3
    4b6c:	4b09      	ldr	r3, [pc, #36]	; (4b94 <getFircConfig+0xb0>)
    4b6e:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4b70:	4b09      	ldr	r3, [pc, #36]	; (4b98 <getFircConfig+0xb4>)
    4b72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b76:	b2db      	uxtb	r3, r3
    4b78:	10db      	asrs	r3, r3, #3
    4b7a:	b2db      	uxtb	r3, r3
    4b7c:	f003 0301 	and.w	r3, r3, #1
    4b80:	b2da      	uxtb	r2, r3
    4b82:	4b04      	ldr	r3, [pc, #16]	; (4b94 <getFircConfig+0xb0>)
    4b84:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4b86:	9b00      	ldr	r3, [sp, #0]
}
    4b88:	4618      	mov	r0, r3
    4b8a:	b002      	add	sp, #8
    4b8c:	4770      	bx	lr
    4b8e:	bf00      	nop
    4b90:	1fff8ba8 	.word	0x1fff8ba8
    4b94:	1fff8c14 	.word	0x1fff8c14
    4b98:	40064000 	.word	0x40064000

00004b9c <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4b9c:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4b9e:	2300      	movs	r3, #0
    4ba0:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4ba2:	4b20      	ldr	r3, [pc, #128]	; (4c24 <getSoscConfig+0x88>)
    4ba4:	681b      	ldr	r3, [r3, #0]
    4ba6:	2b00      	cmp	r3, #0
    4ba8:	d024      	beq.n	4bf4 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4baa:	2300      	movs	r3, #0
    4bac:	9301      	str	r3, [sp, #4]
    4bae:	e01a      	b.n	4be6 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4bb0:	4b1c      	ldr	r3, [pc, #112]	; (4c24 <getSoscConfig+0x88>)
    4bb2:	6819      	ldr	r1, [r3, #0]
    4bb4:	9a01      	ldr	r2, [sp, #4]
    4bb6:	4613      	mov	r3, r2
    4bb8:	009b      	lsls	r3, r3, #2
    4bba:	4413      	add	r3, r2
    4bbc:	009b      	lsls	r3, r3, #2
    4bbe:	440b      	add	r3, r1
    4bc0:	332c      	adds	r3, #44	; 0x2c
    4bc2:	681b      	ldr	r3, [r3, #0]
    4bc4:	2b08      	cmp	r3, #8
    4bc6:	d10b      	bne.n	4be0 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4bc8:	4b16      	ldr	r3, [pc, #88]	; (4c24 <getSoscConfig+0x88>)
    4bca:	6819      	ldr	r1, [r3, #0]
    4bcc:	9a01      	ldr	r2, [sp, #4]
    4bce:	4613      	mov	r3, r2
    4bd0:	009b      	lsls	r3, r3, #2
    4bd2:	4413      	add	r3, r2
    4bd4:	009b      	lsls	r3, r3, #2
    4bd6:	3328      	adds	r3, #40	; 0x28
    4bd8:	440b      	add	r3, r1
    4bda:	3304      	adds	r3, #4
    4bdc:	9300      	str	r3, [sp, #0]
                break;
    4bde:	e009      	b.n	4bf4 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4be0:	9b01      	ldr	r3, [sp, #4]
    4be2:	3301      	adds	r3, #1
    4be4:	9301      	str	r3, [sp, #4]
    4be6:	4b0f      	ldr	r3, [pc, #60]	; (4c24 <getSoscConfig+0x88>)
    4be8:	681b      	ldr	r3, [r3, #0]
    4bea:	7a5b      	ldrb	r3, [r3, #9]
    4bec:	461a      	mov	r2, r3
    4bee:	9b01      	ldr	r3, [sp, #4]
    4bf0:	4293      	cmp	r3, r2
    4bf2:	d3dd      	bcc.n	4bb0 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4bf4:	9b00      	ldr	r3, [sp, #0]
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	d110      	bne.n	4c1c <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4bfa:	4b0b      	ldr	r3, [pc, #44]	; (4c28 <getSoscConfig+0x8c>)
    4bfc:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4bfe:	4b0a      	ldr	r3, [pc, #40]	; (4c28 <getSoscConfig+0x8c>)
    4c00:	2208      	movs	r2, #8
    4c02:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4c04:	4b09      	ldr	r3, [pc, #36]	; (4c2c <getSoscConfig+0x90>)
    4c06:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4c0a:	b29b      	uxth	r3, r3
    4c0c:	f003 0301 	and.w	r3, r3, #1
    4c10:	b29a      	uxth	r2, r3
    4c12:	4b05      	ldr	r3, [pc, #20]	; (4c28 <getSoscConfig+0x8c>)
    4c14:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4c16:	4b04      	ldr	r3, [pc, #16]	; (4c28 <getSoscConfig+0x8c>)
    4c18:	4a05      	ldr	r2, [pc, #20]	; (4c30 <getSoscConfig+0x94>)
    4c1a:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4c1c:	9b00      	ldr	r3, [sp, #0]
}
    4c1e:	4618      	mov	r0, r3
    4c20:	b002      	add	sp, #8
    4c22:	4770      	bx	lr
    4c24:	1fff8ba8 	.word	0x1fff8ba8
    4c28:	1fff8c20 	.word	0x1fff8c20
    4c2c:	40064000 	.word	0x40064000
    4c30:	02625a00 	.word	0x02625a00

00004c34 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4c34:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4c36:	2300      	movs	r3, #0
    4c38:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4c3a:	4b28      	ldr	r3, [pc, #160]	; (4cdc <getSpllConfig+0xa8>)
    4c3c:	681b      	ldr	r3, [r3, #0]
    4c3e:	2b00      	cmp	r3, #0
    4c40:	d023      	beq.n	4c8a <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4c42:	2300      	movs	r3, #0
    4c44:	9301      	str	r3, [sp, #4]
    4c46:	e019      	b.n	4c7c <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4c48:	4b24      	ldr	r3, [pc, #144]	; (4cdc <getSpllConfig+0xa8>)
    4c4a:	6819      	ldr	r1, [r3, #0]
    4c4c:	9a01      	ldr	r2, [sp, #4]
    4c4e:	4613      	mov	r3, r2
    4c50:	009b      	lsls	r3, r3, #2
    4c52:	4413      	add	r3, r2
    4c54:	00db      	lsls	r3, r3, #3
    4c56:	440b      	add	r3, r1
    4c58:	3340      	adds	r3, #64	; 0x40
    4c5a:	681b      	ldr	r3, [r3, #0]
    4c5c:	2b09      	cmp	r3, #9
    4c5e:	d10a      	bne.n	4c76 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4c60:	4b1e      	ldr	r3, [pc, #120]	; (4cdc <getSpllConfig+0xa8>)
    4c62:	6819      	ldr	r1, [r3, #0]
    4c64:	9a01      	ldr	r2, [sp, #4]
    4c66:	4613      	mov	r3, r2
    4c68:	009b      	lsls	r3, r3, #2
    4c6a:	4413      	add	r3, r2
    4c6c:	00db      	lsls	r3, r3, #3
    4c6e:	3340      	adds	r3, #64	; 0x40
    4c70:	440b      	add	r3, r1
    4c72:	9300      	str	r3, [sp, #0]
                break;
    4c74:	e009      	b.n	4c8a <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4c76:	9b01      	ldr	r3, [sp, #4]
    4c78:	3301      	adds	r3, #1
    4c7a:	9301      	str	r3, [sp, #4]
    4c7c:	4b17      	ldr	r3, [pc, #92]	; (4cdc <getSpllConfig+0xa8>)
    4c7e:	681b      	ldr	r3, [r3, #0]
    4c80:	7a9b      	ldrb	r3, [r3, #10]
    4c82:	461a      	mov	r2, r3
    4c84:	9b01      	ldr	r3, [sp, #4]
    4c86:	4293      	cmp	r3, r2
    4c88:	d3de      	bcc.n	4c48 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4c8a:	9b00      	ldr	r3, [sp, #0]
    4c8c:	2b00      	cmp	r3, #0
    4c8e:	d121      	bne.n	4cd4 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4c90:	4b13      	ldr	r3, [pc, #76]	; (4ce0 <getSpllConfig+0xac>)
    4c92:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4c94:	4b12      	ldr	r3, [pc, #72]	; (4ce0 <getSpllConfig+0xac>)
    4c96:	2209      	movs	r2, #9
    4c98:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4c9a:	4b12      	ldr	r3, [pc, #72]	; (4ce4 <getSpllConfig+0xb0>)
    4c9c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4ca0:	b29b      	uxth	r3, r3
    4ca2:	f003 0301 	and.w	r3, r3, #1
    4ca6:	b29a      	uxth	r2, r3
    4ca8:	4b0d      	ldr	r3, [pc, #52]	; (4ce0 <getSpllConfig+0xac>)
    4caa:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4cac:	4b0d      	ldr	r3, [pc, #52]	; (4ce4 <getSpllConfig+0xb0>)
    4cae:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4cb2:	0a1b      	lsrs	r3, r3, #8
    4cb4:	b2db      	uxtb	r3, r3
    4cb6:	f003 0307 	and.w	r3, r3, #7
    4cba:	b2da      	uxtb	r2, r3
    4cbc:	4b08      	ldr	r3, [pc, #32]	; (4ce0 <getSpllConfig+0xac>)
    4cbe:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4cc0:	4b08      	ldr	r3, [pc, #32]	; (4ce4 <getSpllConfig+0xb0>)
    4cc2:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4cc6:	0c1b      	lsrs	r3, r3, #16
    4cc8:	b2db      	uxtb	r3, r3
    4cca:	f003 031f 	and.w	r3, r3, #31
    4cce:	b2da      	uxtb	r2, r3
    4cd0:	4b03      	ldr	r3, [pc, #12]	; (4ce0 <getSpllConfig+0xac>)
    4cd2:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4cd4:	9b00      	ldr	r3, [sp, #0]
}
    4cd6:	4618      	mov	r0, r3
    4cd8:	b002      	add	sp, #8
    4cda:	4770      	bx	lr
    4cdc:	1fff8ba8 	.word	0x1fff8ba8
    4ce0:	1fff8c34 	.word	0x1fff8c34
    4ce4:	40064000 	.word	0x40064000

00004ce8 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4ce8:	b086      	sub	sp, #24
    4cea:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4cec:	2300      	movs	r3, #0
    4cee:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4cf0:	9b01      	ldr	r3, [sp, #4]
    4cf2:	2b1b      	cmp	r3, #27
    4cf4:	d00f      	beq.n	4d16 <getSelectorConfig+0x2e>
    4cf6:	9b01      	ldr	r3, [sp, #4]
    4cf8:	2b1b      	cmp	r3, #27
    4cfa:	d80f      	bhi.n	4d1c <getSelectorConfig+0x34>
    4cfc:	9b01      	ldr	r3, [sp, #4]
    4cfe:	2b19      	cmp	r3, #25
    4d00:	d003      	beq.n	4d0a <getSelectorConfig+0x22>
    4d02:	9b01      	ldr	r3, [sp, #4]
    4d04:	2b1a      	cmp	r3, #26
    4d06:	d003      	beq.n	4d10 <getSelectorConfig+0x28>
    4d08:	e008      	b.n	4d1c <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4d0a:	2300      	movs	r3, #0
    4d0c:	9304      	str	r3, [sp, #16]
            break;
    4d0e:	e008      	b.n	4d22 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4d10:	2301      	movs	r3, #1
    4d12:	9304      	str	r3, [sp, #16]
            break;
    4d14:	e005      	b.n	4d22 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4d16:	2302      	movs	r3, #2
    4d18:	9304      	str	r3, [sp, #16]
            break;
    4d1a:	e002      	b.n	4d22 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4d1c:	2300      	movs	r3, #0
    4d1e:	9304      	str	r3, [sp, #16]
            break;
    4d20:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4d22:	4b36      	ldr	r3, [pc, #216]	; (4dfc <getSelectorConfig+0x114>)
    4d24:	681b      	ldr	r3, [r3, #0]
    4d26:	2b00      	cmp	r3, #0
    4d28:	d01d      	beq.n	4d66 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4d2a:	2300      	movs	r3, #0
    4d2c:	9303      	str	r3, [sp, #12]
    4d2e:	e013      	b.n	4d58 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4d30:	4b32      	ldr	r3, [pc, #200]	; (4dfc <getSelectorConfig+0x114>)
    4d32:	681b      	ldr	r3, [r3, #0]
    4d34:	9a03      	ldr	r2, [sp, #12]
    4d36:	320d      	adds	r2, #13
    4d38:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4d3c:	9a01      	ldr	r2, [sp, #4]
    4d3e:	429a      	cmp	r2, r3
    4d40:	d107      	bne.n	4d52 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4d42:	4b2e      	ldr	r3, [pc, #184]	; (4dfc <getSelectorConfig+0x114>)
    4d44:	681a      	ldr	r2, [r3, #0]
    4d46:	9b03      	ldr	r3, [sp, #12]
    4d48:	330d      	adds	r3, #13
    4d4a:	00db      	lsls	r3, r3, #3
    4d4c:	4413      	add	r3, r2
    4d4e:	9305      	str	r3, [sp, #20]
                break;
    4d50:	e009      	b.n	4d66 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4d52:	9b03      	ldr	r3, [sp, #12]
    4d54:	3301      	adds	r3, #1
    4d56:	9303      	str	r3, [sp, #12]
    4d58:	4b28      	ldr	r3, [pc, #160]	; (4dfc <getSelectorConfig+0x114>)
    4d5a:	681b      	ldr	r3, [r3, #0]
    4d5c:	7adb      	ldrb	r3, [r3, #11]
    4d5e:	461a      	mov	r2, r3
    4d60:	9b03      	ldr	r3, [sp, #12]
    4d62:	4293      	cmp	r3, r2
    4d64:	d3e4      	bcc.n	4d30 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4d66:	9b05      	ldr	r3, [sp, #20]
    4d68:	2b00      	cmp	r3, #0
    4d6a:	d140      	bne.n	4dee <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4d6c:	9b04      	ldr	r3, [sp, #16]
    4d6e:	00db      	lsls	r3, r3, #3
    4d70:	4a23      	ldr	r2, [pc, #140]	; (4e00 <getSelectorConfig+0x118>)
    4d72:	4413      	add	r3, r2
    4d74:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4d76:	4922      	ldr	r1, [pc, #136]	; (4e00 <getSelectorConfig+0x118>)
    4d78:	9b04      	ldr	r3, [sp, #16]
    4d7a:	9a01      	ldr	r2, [sp, #4]
    4d7c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4d80:	9b01      	ldr	r3, [sp, #4]
    4d82:	2b1b      	cmp	r3, #27
    4d84:	d025      	beq.n	4dd2 <getSelectorConfig+0xea>
    4d86:	9b01      	ldr	r3, [sp, #4]
    4d88:	2b1b      	cmp	r3, #27
    4d8a:	d832      	bhi.n	4df2 <getSelectorConfig+0x10a>
    4d8c:	9b01      	ldr	r3, [sp, #4]
    4d8e:	2b19      	cmp	r3, #25
    4d90:	d003      	beq.n	4d9a <getSelectorConfig+0xb2>
    4d92:	9b01      	ldr	r3, [sp, #4]
    4d94:	2b1a      	cmp	r3, #26
    4d96:	d00e      	beq.n	4db6 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4d98:	e02b      	b.n	4df2 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4d9a:	4b1a      	ldr	r3, [pc, #104]	; (4e04 <getSelectorConfig+0x11c>)
    4d9c:	695b      	ldr	r3, [r3, #20]
    4d9e:	0e1b      	lsrs	r3, r3, #24
    4da0:	f003 030f 	and.w	r3, r3, #15
    4da4:	4a18      	ldr	r2, [pc, #96]	; (4e08 <getSelectorConfig+0x120>)
    4da6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4daa:	4915      	ldr	r1, [pc, #84]	; (4e00 <getSelectorConfig+0x118>)
    4dac:	9b04      	ldr	r3, [sp, #16]
    4dae:	00db      	lsls	r3, r3, #3
    4db0:	440b      	add	r3, r1
    4db2:	605a      	str	r2, [r3, #4]
                break;
    4db4:	e01e      	b.n	4df4 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4db6:	4b13      	ldr	r3, [pc, #76]	; (4e04 <getSelectorConfig+0x11c>)
    4db8:	699b      	ldr	r3, [r3, #24]
    4dba:	0e1b      	lsrs	r3, r3, #24
    4dbc:	f003 030f 	and.w	r3, r3, #15
    4dc0:	4a11      	ldr	r2, [pc, #68]	; (4e08 <getSelectorConfig+0x120>)
    4dc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4dc6:	490e      	ldr	r1, [pc, #56]	; (4e00 <getSelectorConfig+0x118>)
    4dc8:	9b04      	ldr	r3, [sp, #16]
    4dca:	00db      	lsls	r3, r3, #3
    4dcc:	440b      	add	r3, r1
    4dce:	605a      	str	r2, [r3, #4]
                break;
    4dd0:	e010      	b.n	4df4 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4dd2:	4b0c      	ldr	r3, [pc, #48]	; (4e04 <getSelectorConfig+0x11c>)
    4dd4:	69db      	ldr	r3, [r3, #28]
    4dd6:	0e1b      	lsrs	r3, r3, #24
    4dd8:	f003 030f 	and.w	r3, r3, #15
    4ddc:	4a0a      	ldr	r2, [pc, #40]	; (4e08 <getSelectorConfig+0x120>)
    4dde:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4de2:	4907      	ldr	r1, [pc, #28]	; (4e00 <getSelectorConfig+0x118>)
    4de4:	9b04      	ldr	r3, [sp, #16]
    4de6:	00db      	lsls	r3, r3, #3
    4de8:	440b      	add	r3, r1
    4dea:	605a      	str	r2, [r3, #4]
                break;
    4dec:	e002      	b.n	4df4 <getSelectorConfig+0x10c>
        }
    }
    4dee:	bf00      	nop
    4df0:	e000      	b.n	4df4 <getSelectorConfig+0x10c>
                break;
    4df2:	bf00      	nop

    return ReturnValue;
    4df4:	9b05      	ldr	r3, [sp, #20]
}
    4df6:	4618      	mov	r0, r3
    4df8:	b006      	add	sp, #24
    4dfa:	4770      	bx	lr
    4dfc:	1fff8ba8 	.word	0x1fff8ba8
    4e00:	1fff8c5c 	.word	0x1fff8c5c
    4e04:	40064000 	.word	0x40064000
    4e08:	0000acec 	.word	0x0000acec

00004e0c <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4e0c:	b086      	sub	sp, #24
    4e0e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4e10:	2300      	movs	r3, #0
    4e12:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4e14:	2300      	movs	r3, #0
    4e16:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4e18:	9b01      	ldr	r3, [sp, #4]
    4e1a:	2b1f      	cmp	r3, #31
    4e1c:	d00f      	beq.n	4e3e <getCoreDividerConfig+0x32>
    4e1e:	9b01      	ldr	r3, [sp, #4]
    4e20:	2b1f      	cmp	r3, #31
    4e22:	d80f      	bhi.n	4e44 <getCoreDividerConfig+0x38>
    4e24:	9b01      	ldr	r3, [sp, #4]
    4e26:	2b1d      	cmp	r3, #29
    4e28:	d003      	beq.n	4e32 <getCoreDividerConfig+0x26>
    4e2a:	9b01      	ldr	r3, [sp, #4]
    4e2c:	2b1e      	cmp	r3, #30
    4e2e:	d003      	beq.n	4e38 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4e30:	e008      	b.n	4e44 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4e32:	2300      	movs	r3, #0
    4e34:	9304      	str	r3, [sp, #16]
            break;
    4e36:	e006      	b.n	4e46 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4e38:	2301      	movs	r3, #1
    4e3a:	9304      	str	r3, [sp, #16]
            break;
    4e3c:	e003      	b.n	4e46 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4e3e:	2302      	movs	r3, #2
    4e40:	9304      	str	r3, [sp, #16]
            break;
    4e42:	e000      	b.n	4e46 <getCoreDividerConfig+0x3a>
                break;
    4e44:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4e46:	4b41      	ldr	r3, [pc, #260]	; (4f4c <getCoreDividerConfig+0x140>)
    4e48:	681b      	ldr	r3, [r3, #0]
    4e4a:	2b00      	cmp	r3, #0
    4e4c:	d026      	beq.n	4e9c <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e4e:	2300      	movs	r3, #0
    4e50:	9303      	str	r3, [sp, #12]
    4e52:	e01c      	b.n	4e8e <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4e54:	4b3d      	ldr	r3, [pc, #244]	; (4f4c <getCoreDividerConfig+0x140>)
    4e56:	6819      	ldr	r1, [r3, #0]
    4e58:	9a03      	ldr	r2, [sp, #12]
    4e5a:	4613      	mov	r3, r2
    4e5c:	005b      	lsls	r3, r3, #1
    4e5e:	4413      	add	r3, r2
    4e60:	009b      	lsls	r3, r3, #2
    4e62:	440b      	add	r3, r1
    4e64:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e68:	681b      	ldr	r3, [r3, #0]
    4e6a:	9a01      	ldr	r2, [sp, #4]
    4e6c:	429a      	cmp	r2, r3
    4e6e:	d10b      	bne.n	4e88 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4e70:	4b36      	ldr	r3, [pc, #216]	; (4f4c <getCoreDividerConfig+0x140>)
    4e72:	6819      	ldr	r1, [r3, #0]
    4e74:	9a03      	ldr	r2, [sp, #12]
    4e76:	4613      	mov	r3, r2
    4e78:	005b      	lsls	r3, r3, #1
    4e7a:	4413      	add	r3, r2
    4e7c:	009b      	lsls	r3, r3, #2
    4e7e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e82:	440b      	add	r3, r1
    4e84:	9305      	str	r3, [sp, #20]
                break;
    4e86:	e009      	b.n	4e9c <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e88:	9b03      	ldr	r3, [sp, #12]
    4e8a:	3301      	adds	r3, #1
    4e8c:	9303      	str	r3, [sp, #12]
    4e8e:	4b2f      	ldr	r3, [pc, #188]	; (4f4c <getCoreDividerConfig+0x140>)
    4e90:	681b      	ldr	r3, [r3, #0]
    4e92:	7b1b      	ldrb	r3, [r3, #12]
    4e94:	461a      	mov	r2, r3
    4e96:	9b03      	ldr	r3, [sp, #12]
    4e98:	4293      	cmp	r3, r2
    4e9a:	d3db      	bcc.n	4e54 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4e9c:	9b05      	ldr	r3, [sp, #20]
    4e9e:	2b00      	cmp	r3, #0
    4ea0:	d14d      	bne.n	4f3e <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4ea2:	9a04      	ldr	r2, [sp, #16]
    4ea4:	4613      	mov	r3, r2
    4ea6:	005b      	lsls	r3, r3, #1
    4ea8:	4413      	add	r3, r2
    4eaa:	009b      	lsls	r3, r3, #2
    4eac:	4a28      	ldr	r2, [pc, #160]	; (4f50 <getCoreDividerConfig+0x144>)
    4eae:	4413      	add	r3, r2
    4eb0:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4eb2:	4927      	ldr	r1, [pc, #156]	; (4f50 <getCoreDividerConfig+0x144>)
    4eb4:	9a04      	ldr	r2, [sp, #16]
    4eb6:	4613      	mov	r3, r2
    4eb8:	005b      	lsls	r3, r3, #1
    4eba:	4413      	add	r3, r2
    4ebc:	009b      	lsls	r3, r3, #2
    4ebe:	440b      	add	r3, r1
    4ec0:	9a01      	ldr	r2, [sp, #4]
    4ec2:	601a      	str	r2, [r3, #0]
        switch(Name)
    4ec4:	9b01      	ldr	r3, [sp, #4]
    4ec6:	2b1f      	cmp	r3, #31
    4ec8:	d029      	beq.n	4f1e <getCoreDividerConfig+0x112>
    4eca:	9b01      	ldr	r3, [sp, #4]
    4ecc:	2b1f      	cmp	r3, #31
    4ece:	d838      	bhi.n	4f42 <getCoreDividerConfig+0x136>
    4ed0:	9b01      	ldr	r3, [sp, #4]
    4ed2:	2b1d      	cmp	r3, #29
    4ed4:	d003      	beq.n	4ede <getCoreDividerConfig+0xd2>
    4ed6:	9b01      	ldr	r3, [sp, #4]
    4ed8:	2b1e      	cmp	r3, #30
    4eda:	d010      	beq.n	4efe <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4edc:	e031      	b.n	4f42 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4ede:	4b1d      	ldr	r3, [pc, #116]	; (4f54 <getCoreDividerConfig+0x148>)
    4ee0:	695b      	ldr	r3, [r3, #20]
    4ee2:	0c1b      	lsrs	r3, r3, #16
    4ee4:	f003 030f 	and.w	r3, r3, #15
    4ee8:	1c59      	adds	r1, r3, #1
    4eea:	4819      	ldr	r0, [pc, #100]	; (4f50 <getCoreDividerConfig+0x144>)
    4eec:	9a04      	ldr	r2, [sp, #16]
    4eee:	4613      	mov	r3, r2
    4ef0:	005b      	lsls	r3, r3, #1
    4ef2:	4413      	add	r3, r2
    4ef4:	009b      	lsls	r3, r3, #2
    4ef6:	4403      	add	r3, r0
    4ef8:	3304      	adds	r3, #4
    4efa:	6019      	str	r1, [r3, #0]
                break;
    4efc:	e022      	b.n	4f44 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4efe:	4b15      	ldr	r3, [pc, #84]	; (4f54 <getCoreDividerConfig+0x148>)
    4f00:	699b      	ldr	r3, [r3, #24]
    4f02:	0c1b      	lsrs	r3, r3, #16
    4f04:	f003 030f 	and.w	r3, r3, #15
    4f08:	1c59      	adds	r1, r3, #1
    4f0a:	4811      	ldr	r0, [pc, #68]	; (4f50 <getCoreDividerConfig+0x144>)
    4f0c:	9a04      	ldr	r2, [sp, #16]
    4f0e:	4613      	mov	r3, r2
    4f10:	005b      	lsls	r3, r3, #1
    4f12:	4413      	add	r3, r2
    4f14:	009b      	lsls	r3, r3, #2
    4f16:	4403      	add	r3, r0
    4f18:	3304      	adds	r3, #4
    4f1a:	6019      	str	r1, [r3, #0]
                break;
    4f1c:	e012      	b.n	4f44 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4f1e:	4b0d      	ldr	r3, [pc, #52]	; (4f54 <getCoreDividerConfig+0x148>)
    4f20:	69db      	ldr	r3, [r3, #28]
    4f22:	0c1b      	lsrs	r3, r3, #16
    4f24:	f003 030f 	and.w	r3, r3, #15
    4f28:	1c59      	adds	r1, r3, #1
    4f2a:	4809      	ldr	r0, [pc, #36]	; (4f50 <getCoreDividerConfig+0x144>)
    4f2c:	9a04      	ldr	r2, [sp, #16]
    4f2e:	4613      	mov	r3, r2
    4f30:	005b      	lsls	r3, r3, #1
    4f32:	4413      	add	r3, r2
    4f34:	009b      	lsls	r3, r3, #2
    4f36:	4403      	add	r3, r0
    4f38:	3304      	adds	r3, #4
    4f3a:	6019      	str	r1, [r3, #0]
                break;
    4f3c:	e002      	b.n	4f44 <getCoreDividerConfig+0x138>
        }
    }
    4f3e:	bf00      	nop
    4f40:	e000      	b.n	4f44 <getCoreDividerConfig+0x138>
                break;
    4f42:	bf00      	nop

    return ReturnValue;
    4f44:	9b05      	ldr	r3, [sp, #20]
}
    4f46:	4618      	mov	r0, r3
    4f48:	b006      	add	sp, #24
    4f4a:	4770      	bx	lr
    4f4c:	1fff8ba8 	.word	0x1fff8ba8
    4f50:	1fff8c74 	.word	0x1fff8c74
    4f54:	40064000 	.word	0x40064000

00004f58 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4f58:	b086      	sub	sp, #24
    4f5a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4f5c:	2300      	movs	r3, #0
    4f5e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4f60:	2300      	movs	r3, #0
    4f62:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4f64:	9b01      	ldr	r3, [sp, #4]
    4f66:	2b23      	cmp	r3, #35	; 0x23
    4f68:	d00f      	beq.n	4f8a <getBusDividerConfig+0x32>
    4f6a:	9b01      	ldr	r3, [sp, #4]
    4f6c:	2b23      	cmp	r3, #35	; 0x23
    4f6e:	d80f      	bhi.n	4f90 <getBusDividerConfig+0x38>
    4f70:	9b01      	ldr	r3, [sp, #4]
    4f72:	2b21      	cmp	r3, #33	; 0x21
    4f74:	d003      	beq.n	4f7e <getBusDividerConfig+0x26>
    4f76:	9b01      	ldr	r3, [sp, #4]
    4f78:	2b22      	cmp	r3, #34	; 0x22
    4f7a:	d003      	beq.n	4f84 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4f7c:	e008      	b.n	4f90 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4f7e:	2300      	movs	r3, #0
    4f80:	9304      	str	r3, [sp, #16]
            break;
    4f82:	e006      	b.n	4f92 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4f84:	2301      	movs	r3, #1
    4f86:	9304      	str	r3, [sp, #16]
            break;
    4f88:	e003      	b.n	4f92 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4f8a:	2302      	movs	r3, #2
    4f8c:	9304      	str	r3, [sp, #16]
            break;
    4f8e:	e000      	b.n	4f92 <getBusDividerConfig+0x3a>
                break;
    4f90:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4f92:	4b41      	ldr	r3, [pc, #260]	; (5098 <getBusDividerConfig+0x140>)
    4f94:	681b      	ldr	r3, [r3, #0]
    4f96:	2b00      	cmp	r3, #0
    4f98:	d026      	beq.n	4fe8 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4f9a:	2300      	movs	r3, #0
    4f9c:	9303      	str	r3, [sp, #12]
    4f9e:	e01c      	b.n	4fda <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4fa0:	4b3d      	ldr	r3, [pc, #244]	; (5098 <getBusDividerConfig+0x140>)
    4fa2:	6819      	ldr	r1, [r3, #0]
    4fa4:	9a03      	ldr	r2, [sp, #12]
    4fa6:	4613      	mov	r3, r2
    4fa8:	005b      	lsls	r3, r3, #1
    4faa:	4413      	add	r3, r2
    4fac:	009b      	lsls	r3, r3, #2
    4fae:	440b      	add	r3, r1
    4fb0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4fb4:	681b      	ldr	r3, [r3, #0]
    4fb6:	9a01      	ldr	r2, [sp, #4]
    4fb8:	429a      	cmp	r2, r3
    4fba:	d10b      	bne.n	4fd4 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4fbc:	4b36      	ldr	r3, [pc, #216]	; (5098 <getBusDividerConfig+0x140>)
    4fbe:	6819      	ldr	r1, [r3, #0]
    4fc0:	9a03      	ldr	r2, [sp, #12]
    4fc2:	4613      	mov	r3, r2
    4fc4:	005b      	lsls	r3, r3, #1
    4fc6:	4413      	add	r3, r2
    4fc8:	009b      	lsls	r3, r3, #2
    4fca:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4fce:	440b      	add	r3, r1
    4fd0:	9305      	str	r3, [sp, #20]
                break;
    4fd2:	e009      	b.n	4fe8 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4fd4:	9b03      	ldr	r3, [sp, #12]
    4fd6:	3301      	adds	r3, #1
    4fd8:	9303      	str	r3, [sp, #12]
    4fda:	4b2f      	ldr	r3, [pc, #188]	; (5098 <getBusDividerConfig+0x140>)
    4fdc:	681b      	ldr	r3, [r3, #0]
    4fde:	7b1b      	ldrb	r3, [r3, #12]
    4fe0:	461a      	mov	r2, r3
    4fe2:	9b03      	ldr	r3, [sp, #12]
    4fe4:	4293      	cmp	r3, r2
    4fe6:	d3db      	bcc.n	4fa0 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4fe8:	9b05      	ldr	r3, [sp, #20]
    4fea:	2b00      	cmp	r3, #0
    4fec:	d14d      	bne.n	508a <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4fee:	9a04      	ldr	r2, [sp, #16]
    4ff0:	4613      	mov	r3, r2
    4ff2:	005b      	lsls	r3, r3, #1
    4ff4:	4413      	add	r3, r2
    4ff6:	009b      	lsls	r3, r3, #2
    4ff8:	4a28      	ldr	r2, [pc, #160]	; (509c <getBusDividerConfig+0x144>)
    4ffa:	4413      	add	r3, r2
    4ffc:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    4ffe:	4927      	ldr	r1, [pc, #156]	; (509c <getBusDividerConfig+0x144>)
    5000:	9a04      	ldr	r2, [sp, #16]
    5002:	4613      	mov	r3, r2
    5004:	005b      	lsls	r3, r3, #1
    5006:	4413      	add	r3, r2
    5008:	009b      	lsls	r3, r3, #2
    500a:	440b      	add	r3, r1
    500c:	9a01      	ldr	r2, [sp, #4]
    500e:	601a      	str	r2, [r3, #0]
        switch(Name)
    5010:	9b01      	ldr	r3, [sp, #4]
    5012:	2b23      	cmp	r3, #35	; 0x23
    5014:	d029      	beq.n	506a <getBusDividerConfig+0x112>
    5016:	9b01      	ldr	r3, [sp, #4]
    5018:	2b23      	cmp	r3, #35	; 0x23
    501a:	d838      	bhi.n	508e <getBusDividerConfig+0x136>
    501c:	9b01      	ldr	r3, [sp, #4]
    501e:	2b21      	cmp	r3, #33	; 0x21
    5020:	d003      	beq.n	502a <getBusDividerConfig+0xd2>
    5022:	9b01      	ldr	r3, [sp, #4]
    5024:	2b22      	cmp	r3, #34	; 0x22
    5026:	d010      	beq.n	504a <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5028:	e031      	b.n	508e <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    502a:	4b1d      	ldr	r3, [pc, #116]	; (50a0 <getBusDividerConfig+0x148>)
    502c:	695b      	ldr	r3, [r3, #20]
    502e:	091b      	lsrs	r3, r3, #4
    5030:	f003 030f 	and.w	r3, r3, #15
    5034:	1c59      	adds	r1, r3, #1
    5036:	4819      	ldr	r0, [pc, #100]	; (509c <getBusDividerConfig+0x144>)
    5038:	9a04      	ldr	r2, [sp, #16]
    503a:	4613      	mov	r3, r2
    503c:	005b      	lsls	r3, r3, #1
    503e:	4413      	add	r3, r2
    5040:	009b      	lsls	r3, r3, #2
    5042:	4403      	add	r3, r0
    5044:	3304      	adds	r3, #4
    5046:	6019      	str	r1, [r3, #0]
                break;
    5048:	e022      	b.n	5090 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    504a:	4b15      	ldr	r3, [pc, #84]	; (50a0 <getBusDividerConfig+0x148>)
    504c:	699b      	ldr	r3, [r3, #24]
    504e:	091b      	lsrs	r3, r3, #4
    5050:	f003 030f 	and.w	r3, r3, #15
    5054:	1c59      	adds	r1, r3, #1
    5056:	4811      	ldr	r0, [pc, #68]	; (509c <getBusDividerConfig+0x144>)
    5058:	9a04      	ldr	r2, [sp, #16]
    505a:	4613      	mov	r3, r2
    505c:	005b      	lsls	r3, r3, #1
    505e:	4413      	add	r3, r2
    5060:	009b      	lsls	r3, r3, #2
    5062:	4403      	add	r3, r0
    5064:	3304      	adds	r3, #4
    5066:	6019      	str	r1, [r3, #0]
                break;
    5068:	e012      	b.n	5090 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    506a:	4b0d      	ldr	r3, [pc, #52]	; (50a0 <getBusDividerConfig+0x148>)
    506c:	69db      	ldr	r3, [r3, #28]
    506e:	091b      	lsrs	r3, r3, #4
    5070:	f003 030f 	and.w	r3, r3, #15
    5074:	1c59      	adds	r1, r3, #1
    5076:	4809      	ldr	r0, [pc, #36]	; (509c <getBusDividerConfig+0x144>)
    5078:	9a04      	ldr	r2, [sp, #16]
    507a:	4613      	mov	r3, r2
    507c:	005b      	lsls	r3, r3, #1
    507e:	4413      	add	r3, r2
    5080:	009b      	lsls	r3, r3, #2
    5082:	4403      	add	r3, r0
    5084:	3304      	adds	r3, #4
    5086:	6019      	str	r1, [r3, #0]
                break;
    5088:	e002      	b.n	5090 <getBusDividerConfig+0x138>
        }
    }
    508a:	bf00      	nop
    508c:	e000      	b.n	5090 <getBusDividerConfig+0x138>
                break;
    508e:	bf00      	nop

    return ReturnValue;
    5090:	9b05      	ldr	r3, [sp, #20]
}
    5092:	4618      	mov	r0, r3
    5094:	b006      	add	sp, #24
    5096:	4770      	bx	lr
    5098:	1fff8ba8 	.word	0x1fff8ba8
    509c:	1fff8c98 	.word	0x1fff8c98
    50a0:	40064000 	.word	0x40064000

000050a4 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    50a4:	b086      	sub	sp, #24
    50a6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    50a8:	2300      	movs	r3, #0
    50aa:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    50ac:	2300      	movs	r3, #0
    50ae:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    50b0:	9b01      	ldr	r3, [sp, #4]
    50b2:	2b27      	cmp	r3, #39	; 0x27
    50b4:	d00f      	beq.n	50d6 <getSlowDividerConfig+0x32>
    50b6:	9b01      	ldr	r3, [sp, #4]
    50b8:	2b27      	cmp	r3, #39	; 0x27
    50ba:	d80f      	bhi.n	50dc <getSlowDividerConfig+0x38>
    50bc:	9b01      	ldr	r3, [sp, #4]
    50be:	2b25      	cmp	r3, #37	; 0x25
    50c0:	d003      	beq.n	50ca <getSlowDividerConfig+0x26>
    50c2:	9b01      	ldr	r3, [sp, #4]
    50c4:	2b26      	cmp	r3, #38	; 0x26
    50c6:	d003      	beq.n	50d0 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    50c8:	e008      	b.n	50dc <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    50ca:	2300      	movs	r3, #0
    50cc:	9304      	str	r3, [sp, #16]
            break;
    50ce:	e006      	b.n	50de <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    50d0:	2301      	movs	r3, #1
    50d2:	9304      	str	r3, [sp, #16]
            break;
    50d4:	e003      	b.n	50de <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    50d6:	2302      	movs	r3, #2
    50d8:	9304      	str	r3, [sp, #16]
            break;
    50da:	e000      	b.n	50de <getSlowDividerConfig+0x3a>
                break;
    50dc:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    50de:	4b40      	ldr	r3, [pc, #256]	; (51e0 <getSlowDividerConfig+0x13c>)
    50e0:	681b      	ldr	r3, [r3, #0]
    50e2:	2b00      	cmp	r3, #0
    50e4:	d026      	beq.n	5134 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    50e6:	2300      	movs	r3, #0
    50e8:	9303      	str	r3, [sp, #12]
    50ea:	e01c      	b.n	5126 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    50ec:	4b3c      	ldr	r3, [pc, #240]	; (51e0 <getSlowDividerConfig+0x13c>)
    50ee:	6819      	ldr	r1, [r3, #0]
    50f0:	9a03      	ldr	r2, [sp, #12]
    50f2:	4613      	mov	r3, r2
    50f4:	005b      	lsls	r3, r3, #1
    50f6:	4413      	add	r3, r2
    50f8:	009b      	lsls	r3, r3, #2
    50fa:	440b      	add	r3, r1
    50fc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5100:	681b      	ldr	r3, [r3, #0]
    5102:	9a01      	ldr	r2, [sp, #4]
    5104:	429a      	cmp	r2, r3
    5106:	d10b      	bne.n	5120 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5108:	4b35      	ldr	r3, [pc, #212]	; (51e0 <getSlowDividerConfig+0x13c>)
    510a:	6819      	ldr	r1, [r3, #0]
    510c:	9a03      	ldr	r2, [sp, #12]
    510e:	4613      	mov	r3, r2
    5110:	005b      	lsls	r3, r3, #1
    5112:	4413      	add	r3, r2
    5114:	009b      	lsls	r3, r3, #2
    5116:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    511a:	440b      	add	r3, r1
    511c:	9305      	str	r3, [sp, #20]
                break;
    511e:	e009      	b.n	5134 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5120:	9b03      	ldr	r3, [sp, #12]
    5122:	3301      	adds	r3, #1
    5124:	9303      	str	r3, [sp, #12]
    5126:	4b2e      	ldr	r3, [pc, #184]	; (51e0 <getSlowDividerConfig+0x13c>)
    5128:	681b      	ldr	r3, [r3, #0]
    512a:	7b1b      	ldrb	r3, [r3, #12]
    512c:	461a      	mov	r2, r3
    512e:	9b03      	ldr	r3, [sp, #12]
    5130:	4293      	cmp	r3, r2
    5132:	d3db      	bcc.n	50ec <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5134:	9b05      	ldr	r3, [sp, #20]
    5136:	2b00      	cmp	r3, #0
    5138:	d14a      	bne.n	51d0 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    513a:	9a04      	ldr	r2, [sp, #16]
    513c:	4613      	mov	r3, r2
    513e:	005b      	lsls	r3, r3, #1
    5140:	4413      	add	r3, r2
    5142:	009b      	lsls	r3, r3, #2
    5144:	4a27      	ldr	r2, [pc, #156]	; (51e4 <getSlowDividerConfig+0x140>)
    5146:	4413      	add	r3, r2
    5148:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    514a:	4926      	ldr	r1, [pc, #152]	; (51e4 <getSlowDividerConfig+0x140>)
    514c:	9a04      	ldr	r2, [sp, #16]
    514e:	4613      	mov	r3, r2
    5150:	005b      	lsls	r3, r3, #1
    5152:	4413      	add	r3, r2
    5154:	009b      	lsls	r3, r3, #2
    5156:	440b      	add	r3, r1
    5158:	9a01      	ldr	r2, [sp, #4]
    515a:	601a      	str	r2, [r3, #0]
        switch(Name)
    515c:	9b01      	ldr	r3, [sp, #4]
    515e:	2b27      	cmp	r3, #39	; 0x27
    5160:	d027      	beq.n	51b2 <getSlowDividerConfig+0x10e>
    5162:	9b01      	ldr	r3, [sp, #4]
    5164:	2b27      	cmp	r3, #39	; 0x27
    5166:	d835      	bhi.n	51d4 <getSlowDividerConfig+0x130>
    5168:	9b01      	ldr	r3, [sp, #4]
    516a:	2b25      	cmp	r3, #37	; 0x25
    516c:	d003      	beq.n	5176 <getSlowDividerConfig+0xd2>
    516e:	9b01      	ldr	r3, [sp, #4]
    5170:	2b26      	cmp	r3, #38	; 0x26
    5172:	d00f      	beq.n	5194 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5174:	e02e      	b.n	51d4 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    5176:	4b1c      	ldr	r3, [pc, #112]	; (51e8 <getSlowDividerConfig+0x144>)
    5178:	695b      	ldr	r3, [r3, #20]
    517a:	f003 030f 	and.w	r3, r3, #15
    517e:	1c59      	adds	r1, r3, #1
    5180:	4818      	ldr	r0, [pc, #96]	; (51e4 <getSlowDividerConfig+0x140>)
    5182:	9a04      	ldr	r2, [sp, #16]
    5184:	4613      	mov	r3, r2
    5186:	005b      	lsls	r3, r3, #1
    5188:	4413      	add	r3, r2
    518a:	009b      	lsls	r3, r3, #2
    518c:	4403      	add	r3, r0
    518e:	3304      	adds	r3, #4
    5190:	6019      	str	r1, [r3, #0]
                break;
    5192:	e020      	b.n	51d6 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5194:	4b14      	ldr	r3, [pc, #80]	; (51e8 <getSlowDividerConfig+0x144>)
    5196:	699b      	ldr	r3, [r3, #24]
    5198:	f003 030f 	and.w	r3, r3, #15
    519c:	1c59      	adds	r1, r3, #1
    519e:	4811      	ldr	r0, [pc, #68]	; (51e4 <getSlowDividerConfig+0x140>)
    51a0:	9a04      	ldr	r2, [sp, #16]
    51a2:	4613      	mov	r3, r2
    51a4:	005b      	lsls	r3, r3, #1
    51a6:	4413      	add	r3, r2
    51a8:	009b      	lsls	r3, r3, #2
    51aa:	4403      	add	r3, r0
    51ac:	3304      	adds	r3, #4
    51ae:	6019      	str	r1, [r3, #0]
                break;
    51b0:	e011      	b.n	51d6 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    51b2:	4b0d      	ldr	r3, [pc, #52]	; (51e8 <getSlowDividerConfig+0x144>)
    51b4:	69db      	ldr	r3, [r3, #28]
    51b6:	f003 030f 	and.w	r3, r3, #15
    51ba:	1c59      	adds	r1, r3, #1
    51bc:	4809      	ldr	r0, [pc, #36]	; (51e4 <getSlowDividerConfig+0x140>)
    51be:	9a04      	ldr	r2, [sp, #16]
    51c0:	4613      	mov	r3, r2
    51c2:	005b      	lsls	r3, r3, #1
    51c4:	4413      	add	r3, r2
    51c6:	009b      	lsls	r3, r3, #2
    51c8:	4403      	add	r3, r0
    51ca:	3304      	adds	r3, #4
    51cc:	6019      	str	r1, [r3, #0]
                break;
    51ce:	e002      	b.n	51d6 <getSlowDividerConfig+0x132>
        }
    }
    51d0:	bf00      	nop
    51d2:	e000      	b.n	51d6 <getSlowDividerConfig+0x132>
                break;
    51d4:	bf00      	nop

    return ReturnValue;
    51d6:	9b05      	ldr	r3, [sp, #20]
}
    51d8:	4618      	mov	r0, r3
    51da:	b006      	add	sp, #24
    51dc:	4770      	bx	lr
    51de:	bf00      	nop
    51e0:	1fff8ba8 	.word	0x1fff8ba8
    51e4:	1fff8cbc 	.word	0x1fff8cbc
    51e8:	40064000 	.word	0x40064000

000051ec <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    51ec:	b500      	push	{lr}
    51ee:	b083      	sub	sp, #12
    51f0:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    51f2:	4b64      	ldr	r3, [pc, #400]	; (5384 <Clock_Ip_ClockInitializeObjects+0x198>)
    51f4:	781b      	ldrb	r3, [r3, #0]
    51f6:	f083 0301 	eor.w	r3, r3, #1
    51fa:	b2db      	uxtb	r3, r3
    51fc:	2b00      	cmp	r3, #0
    51fe:	d05b      	beq.n	52b8 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5200:	4b60      	ldr	r3, [pc, #384]	; (5384 <Clock_Ip_ClockInitializeObjects+0x198>)
    5202:	2201      	movs	r2, #1
    5204:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5206:	4b60      	ldr	r3, [pc, #384]	; (5388 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5208:	785b      	ldrb	r3, [r3, #1]
    520a:	461a      	mov	r2, r3
    520c:	4613      	mov	r3, r2
    520e:	009b      	lsls	r3, r3, #2
    5210:	4413      	add	r3, r2
    5212:	009b      	lsls	r3, r3, #2
    5214:	4a5d      	ldr	r2, [pc, #372]	; (538c <Clock_Ip_ClockInitializeObjects+0x1a0>)
    5216:	4413      	add	r3, r2
    5218:	4a5d      	ldr	r2, [pc, #372]	; (5390 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    521a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    521c:	4b5d      	ldr	r3, [pc, #372]	; (5394 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    521e:	785b      	ldrb	r3, [r3, #1]
    5220:	461a      	mov	r2, r3
    5222:	4613      	mov	r3, r2
    5224:	009b      	lsls	r3, r3, #2
    5226:	4413      	add	r3, r2
    5228:	009b      	lsls	r3, r3, #2
    522a:	4a5b      	ldr	r2, [pc, #364]	; (5398 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    522c:	4413      	add	r3, r2
    522e:	4a5b      	ldr	r2, [pc, #364]	; (539c <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5230:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    5232:	4b5b      	ldr	r3, [pc, #364]	; (53a0 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5234:	791b      	ldrb	r3, [r3, #4]
    5236:	461a      	mov	r2, r3
    5238:	4613      	mov	r3, r2
    523a:	005b      	lsls	r3, r3, #1
    523c:	4413      	add	r3, r2
    523e:	009b      	lsls	r3, r3, #2
    5240:	4a58      	ldr	r2, [pc, #352]	; (53a4 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    5242:	4413      	add	r3, r2
    5244:	4a58      	ldr	r2, [pc, #352]	; (53a8 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    5246:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5248:	4b58      	ldr	r3, [pc, #352]	; (53ac <Clock_Ip_ClockInitializeObjects+0x1c0>)
    524a:	795b      	ldrb	r3, [r3, #5]
    524c:	00db      	lsls	r3, r3, #3
    524e:	4a58      	ldr	r2, [pc, #352]	; (53b0 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5250:	4413      	add	r3, r2
    5252:	4a58      	ldr	r2, [pc, #352]	; (53b4 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    5254:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    5256:	4b55      	ldr	r3, [pc, #340]	; (53ac <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5258:	79db      	ldrb	r3, [r3, #7]
    525a:	00db      	lsls	r3, r3, #3
    525c:	4a54      	ldr	r2, [pc, #336]	; (53b0 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    525e:	4413      	add	r3, r2
    5260:	4a55      	ldr	r2, [pc, #340]	; (53b8 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    5262:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    5264:	4b55      	ldr	r3, [pc, #340]	; (53bc <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5266:	799b      	ldrb	r3, [r3, #6]
    5268:	009b      	lsls	r3, r3, #2
    526a:	4a55      	ldr	r2, [pc, #340]	; (53c0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    526c:	4413      	add	r3, r2
    526e:	4a55      	ldr	r2, [pc, #340]	; (53c4 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5270:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    5272:	4b52      	ldr	r3, [pc, #328]	; (53bc <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5274:	7a1b      	ldrb	r3, [r3, #8]
    5276:	009b      	lsls	r3, r3, #2
    5278:	4a51      	ldr	r2, [pc, #324]	; (53c0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    527a:	4413      	add	r3, r2
    527c:	4a52      	ldr	r2, [pc, #328]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    527e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    5280:	4b4e      	ldr	r3, [pc, #312]	; (53bc <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5282:	7a5b      	ldrb	r3, [r3, #9]
    5284:	009b      	lsls	r3, r3, #2
    5286:	4a4e      	ldr	r2, [pc, #312]	; (53c0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5288:	4413      	add	r3, r2
    528a:	4a50      	ldr	r2, [pc, #320]	; (53cc <Clock_Ip_ClockInitializeObjects+0x1e0>)
    528c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    528e:	4b4b      	ldr	r3, [pc, #300]	; (53bc <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5290:	7adb      	ldrb	r3, [r3, #11]
    5292:	009b      	lsls	r3, r3, #2
    5294:	4a4a      	ldr	r2, [pc, #296]	; (53c0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5296:	4413      	add	r3, r2
    5298:	4a4d      	ldr	r2, [pc, #308]	; (53d0 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    529a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    529c:	4b47      	ldr	r3, [pc, #284]	; (53bc <Clock_Ip_ClockInitializeObjects+0x1d0>)
    529e:	7b1b      	ldrb	r3, [r3, #12]
    52a0:	009b      	lsls	r3, r3, #2
    52a2:	4a47      	ldr	r2, [pc, #284]	; (53c0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52a4:	4413      	add	r3, r2
    52a6:	4a4b      	ldr	r2, [pc, #300]	; (53d4 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    52a8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    52aa:	4b44      	ldr	r3, [pc, #272]	; (53bc <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52ac:	7b9b      	ldrb	r3, [r3, #14]
    52ae:	009b      	lsls	r3, r3, #2
    52b0:	4a43      	ldr	r2, [pc, #268]	; (53c0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52b2:	4413      	add	r3, r2
    52b4:	4a48      	ldr	r2, [pc, #288]	; (53d8 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    52b6:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    52b8:	4b48      	ldr	r3, [pc, #288]	; (53dc <Clock_Ip_ClockInitializeObjects+0x1f0>)
    52ba:	781b      	ldrb	r3, [r3, #0]
    52bc:	2b00      	cmp	r3, #0
    52be:	d002      	beq.n	52c6 <Clock_Ip_ClockInitializeObjects+0xda>
    52c0:	9b01      	ldr	r3, [sp, #4]
    52c2:	2b00      	cmp	r3, #0
    52c4:	d003      	beq.n	52ce <Clock_Ip_ClockInitializeObjects+0xe2>
    52c6:	4b46      	ldr	r3, [pc, #280]	; (53e0 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    52c8:	781b      	ldrb	r3, [r3, #0]
    52ca:	2b00      	cmp	r3, #0
    52cc:	d056      	beq.n	537c <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    52ce:	f7ff fc09 	bl	4ae4 <getFircConfig>
    52d2:	4603      	mov	r3, r0
    52d4:	4a43      	ldr	r2, [pc, #268]	; (53e4 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    52d6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    52d8:	f7ff fc60 	bl	4b9c <getSoscConfig>
    52dc:	4603      	mov	r3, r0
    52de:	4a42      	ldr	r2, [pc, #264]	; (53e8 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    52e0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    52e2:	f7ff fca7 	bl	4c34 <getSpllConfig>
    52e6:	4603      	mov	r3, r0
    52e8:	4a40      	ldr	r2, [pc, #256]	; (53ec <Clock_Ip_ClockInitializeObjects+0x200>)
    52ea:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    52ec:	2019      	movs	r0, #25
    52ee:	f7ff fcfb 	bl	4ce8 <getSelectorConfig>
    52f2:	4603      	mov	r3, r0
    52f4:	4a3e      	ldr	r2, [pc, #248]	; (53f0 <Clock_Ip_ClockInitializeObjects+0x204>)
    52f6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    52f8:	201a      	movs	r0, #26
    52fa:	f7ff fcf5 	bl	4ce8 <getSelectorConfig>
    52fe:	4603      	mov	r3, r0
    5300:	4a3c      	ldr	r2, [pc, #240]	; (53f4 <Clock_Ip_ClockInitializeObjects+0x208>)
    5302:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5304:	201b      	movs	r0, #27
    5306:	f7ff fcef 	bl	4ce8 <getSelectorConfig>
    530a:	4603      	mov	r3, r0
    530c:	4a3a      	ldr	r2, [pc, #232]	; (53f8 <Clock_Ip_ClockInitializeObjects+0x20c>)
    530e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5310:	201d      	movs	r0, #29
    5312:	f7ff fd7b 	bl	4e0c <getCoreDividerConfig>
    5316:	4603      	mov	r3, r0
    5318:	4a38      	ldr	r2, [pc, #224]	; (53fc <Clock_Ip_ClockInitializeObjects+0x210>)
    531a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    531c:	201e      	movs	r0, #30
    531e:	f7ff fd75 	bl	4e0c <getCoreDividerConfig>
    5322:	4603      	mov	r3, r0
    5324:	4a36      	ldr	r2, [pc, #216]	; (5400 <Clock_Ip_ClockInitializeObjects+0x214>)
    5326:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5328:	201f      	movs	r0, #31
    532a:	f7ff fd6f 	bl	4e0c <getCoreDividerConfig>
    532e:	4603      	mov	r3, r0
    5330:	4a34      	ldr	r2, [pc, #208]	; (5404 <Clock_Ip_ClockInitializeObjects+0x218>)
    5332:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5334:	2021      	movs	r0, #33	; 0x21
    5336:	f7ff fe0f 	bl	4f58 <getBusDividerConfig>
    533a:	4603      	mov	r3, r0
    533c:	4a32      	ldr	r2, [pc, #200]	; (5408 <Clock_Ip_ClockInitializeObjects+0x21c>)
    533e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5340:	2022      	movs	r0, #34	; 0x22
    5342:	f7ff fe09 	bl	4f58 <getBusDividerConfig>
    5346:	4603      	mov	r3, r0
    5348:	4a30      	ldr	r2, [pc, #192]	; (540c <Clock_Ip_ClockInitializeObjects+0x220>)
    534a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    534c:	2023      	movs	r0, #35	; 0x23
    534e:	f7ff fe03 	bl	4f58 <getBusDividerConfig>
    5352:	4603      	mov	r3, r0
    5354:	4a2e      	ldr	r2, [pc, #184]	; (5410 <Clock_Ip_ClockInitializeObjects+0x224>)
    5356:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    5358:	2025      	movs	r0, #37	; 0x25
    535a:	f7ff fea3 	bl	50a4 <getSlowDividerConfig>
    535e:	4603      	mov	r3, r0
    5360:	4a2c      	ldr	r2, [pc, #176]	; (5414 <Clock_Ip_ClockInitializeObjects+0x228>)
    5362:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    5364:	2026      	movs	r0, #38	; 0x26
    5366:	f7ff fe9d 	bl	50a4 <getSlowDividerConfig>
    536a:	4603      	mov	r3, r0
    536c:	4a2a      	ldr	r2, [pc, #168]	; (5418 <Clock_Ip_ClockInitializeObjects+0x22c>)
    536e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5370:	2027      	movs	r0, #39	; 0x27
    5372:	f7ff fe97 	bl	50a4 <getSlowDividerConfig>
    5376:	4603      	mov	r3, r0
    5378:	4a28      	ldr	r2, [pc, #160]	; (541c <Clock_Ip_ClockInitializeObjects+0x230>)
    537a:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    537c:	bf00      	nop
    537e:	b003      	add	sp, #12
    5380:	f85d fb04 	ldr.w	pc, [sp], #4
    5384:	1fff8ce0 	.word	0x1fff8ce0
    5388:	0000a61c 	.word	0x0000a61c
    538c:	0000ac68 	.word	0x0000ac68
    5390:	1fff8bac 	.word	0x1fff8bac
    5394:	0000a5dc 	.word	0x0000a5dc
    5398:	0000abb0 	.word	0x0000abb0
    539c:	1fff8bb0 	.word	0x1fff8bb0
    53a0:	0000a5ec 	.word	0x0000a5ec
    53a4:	0000ac1c 	.word	0x0000ac1c
    53a8:	1fff8bb4 	.word	0x1fff8bb4
    53ac:	0000a62c 	.word	0x0000a62c
    53b0:	0000ac94 	.word	0x0000ac94
    53b4:	1fff8bb8 	.word	0x1fff8bb8
    53b8:	1fff8bf4 	.word	0x1fff8bf4
    53bc:	0000a5bc 	.word	0x0000a5bc
    53c0:	0000ab6c 	.word	0x0000ab6c
    53c4:	1fff8bbc 	.word	0x1fff8bbc
    53c8:	1fff8bf8 	.word	0x1fff8bf8
    53cc:	1fff8bc0 	.word	0x1fff8bc0
    53d0:	1fff8bfc 	.word	0x1fff8bfc
    53d4:	1fff8bc4 	.word	0x1fff8bc4
    53d8:	1fff8c00 	.word	0x1fff8c00
    53dc:	1fff8b19 	.word	0x1fff8b19
    53e0:	1fff8b10 	.word	0x1fff8b10
    53e4:	1fff8bc8 	.word	0x1fff8bc8
    53e8:	1fff8bcc 	.word	0x1fff8bcc
    53ec:	1fff8bd0 	.word	0x1fff8bd0
    53f0:	1fff8bd4 	.word	0x1fff8bd4
    53f4:	1fff8bd8 	.word	0x1fff8bd8
    53f8:	1fff8c04 	.word	0x1fff8c04
    53fc:	1fff8bdc 	.word	0x1fff8bdc
    5400:	1fff8be0 	.word	0x1fff8be0
    5404:	1fff8c08 	.word	0x1fff8c08
    5408:	1fff8be4 	.word	0x1fff8be4
    540c:	1fff8be8 	.word	0x1fff8be8
    5410:	1fff8c0c 	.word	0x1fff8c0c
    5414:	1fff8bec 	.word	0x1fff8bec
    5418:	1fff8bf0 	.word	0x1fff8bf0
    541c:	1fff8c10 	.word	0x1fff8c10

00005420 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5420:	b500      	push	{lr}
    5422:	b083      	sub	sp, #12
    5424:	9001      	str	r0, [sp, #4]
    5426:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5428:	9b01      	ldr	r3, [sp, #4]
    542a:	2b03      	cmp	r3, #3
    542c:	f000 8090 	beq.w	5550 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    5430:	9b01      	ldr	r3, [sp, #4]
    5432:	2b03      	cmp	r3, #3
    5434:	f200 80d3 	bhi.w	55de <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5438:	9b01      	ldr	r3, [sp, #4]
    543a:	2b00      	cmp	r3, #0
    543c:	d040      	beq.n	54c0 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    543e:	9b01      	ldr	r3, [sp, #4]
    5440:	3b01      	subs	r3, #1
    5442:	2b01      	cmp	r3, #1
    5444:	f200 80cb 	bhi.w	55de <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    5448:	9b00      	ldr	r3, [sp, #0]
    544a:	2b00      	cmp	r3, #0
    544c:	f040 80c9 	bne.w	55e2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    5450:	4b68      	ldr	r3, [pc, #416]	; (55f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5452:	2200      	movs	r2, #0
    5454:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    5456:	4b68      	ldr	r3, [pc, #416]	; (55f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5458:	681b      	ldr	r3, [r3, #0]
    545a:	685b      	ldr	r3, [r3, #4]
    545c:	4a67      	ldr	r2, [pc, #412]	; (55fc <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    545e:	6812      	ldr	r2, [r2, #0]
    5460:	4610      	mov	r0, r2
    5462:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    5464:	4b66      	ldr	r3, [pc, #408]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5466:	681b      	ldr	r3, [r3, #0]
    5468:	681b      	ldr	r3, [r3, #0]
    546a:	4a66      	ldr	r2, [pc, #408]	; (5604 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    546c:	6812      	ldr	r2, [r2, #0]
    546e:	4610      	mov	r0, r2
    5470:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    5472:	4b65      	ldr	r3, [pc, #404]	; (5608 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5474:	681b      	ldr	r3, [r3, #0]
    5476:	681b      	ldr	r3, [r3, #0]
    5478:	4a64      	ldr	r2, [pc, #400]	; (560c <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    547a:	6812      	ldr	r2, [r2, #0]
    547c:	4610      	mov	r0, r2
    547e:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    5480:	4b63      	ldr	r3, [pc, #396]	; (5610 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5482:	681b      	ldr	r3, [r3, #0]
    5484:	681b      	ldr	r3, [r3, #0]
    5486:	4a63      	ldr	r2, [pc, #396]	; (5614 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    5488:	6812      	ldr	r2, [r2, #0]
    548a:	4610      	mov	r0, r2
    548c:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    548e:	4b62      	ldr	r3, [pc, #392]	; (5618 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5490:	681b      	ldr	r3, [r3, #0]
    5492:	691b      	ldr	r3, [r3, #16]
    5494:	4a61      	ldr	r2, [pc, #388]	; (561c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5496:	6812      	ldr	r2, [r2, #0]
    5498:	6812      	ldr	r2, [r2, #0]
    549a:	4610      	mov	r0, r2
    549c:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    549e:	4b60      	ldr	r3, [pc, #384]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54a0:	681b      	ldr	r3, [r3, #0]
    54a2:	68db      	ldr	r3, [r3, #12]
    54a4:	4a5f      	ldr	r2, [pc, #380]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54a6:	6812      	ldr	r2, [r2, #0]
    54a8:	6812      	ldr	r2, [r2, #0]
    54aa:	4610      	mov	r0, r2
    54ac:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    54ae:	4b5e      	ldr	r3, [pc, #376]	; (5628 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    54b0:	681b      	ldr	r3, [r3, #0]
    54b2:	689b      	ldr	r3, [r3, #8]
    54b4:	4a5d      	ldr	r2, [pc, #372]	; (562c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    54b6:	6812      	ldr	r2, [r2, #0]
    54b8:	6812      	ldr	r2, [r2, #0]
    54ba:	4610      	mov	r0, r2
    54bc:	4798      	blx	r3
            }
        }
        break;
    54be:	e090      	b.n	55e2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    54c0:	9b00      	ldr	r3, [sp, #0]
    54c2:	2b02      	cmp	r3, #2
    54c4:	f040 808f 	bne.w	55e6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    54c8:	4b4a      	ldr	r3, [pc, #296]	; (55f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    54ca:	2201      	movs	r2, #1
    54cc:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    54ce:	4b56      	ldr	r3, [pc, #344]	; (5628 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    54d0:	681b      	ldr	r3, [r3, #0]
    54d2:	685b      	ldr	r3, [r3, #4]
    54d4:	4a55      	ldr	r2, [pc, #340]	; (562c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    54d6:	6812      	ldr	r2, [r2, #0]
    54d8:	4610      	mov	r0, r2
    54da:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    54dc:	4b50      	ldr	r3, [pc, #320]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54de:	681b      	ldr	r3, [r3, #0]
    54e0:	691b      	ldr	r3, [r3, #16]
    54e2:	4a50      	ldr	r2, [pc, #320]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54e4:	6812      	ldr	r2, [r2, #0]
    54e6:	4610      	mov	r0, r2
    54e8:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    54ea:	4b4d      	ldr	r3, [pc, #308]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54ec:	681b      	ldr	r3, [r3, #0]
    54ee:	689b      	ldr	r3, [r3, #8]
    54f0:	4a4c      	ldr	r2, [pc, #304]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54f2:	6812      	ldr	r2, [r2, #0]
    54f4:	4610      	mov	r0, r2
    54f6:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    54f8:	4b47      	ldr	r3, [pc, #284]	; (5618 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    54fa:	681b      	ldr	r3, [r3, #0]
    54fc:	68db      	ldr	r3, [r3, #12]
    54fe:	4a47      	ldr	r2, [pc, #284]	; (561c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5500:	6812      	ldr	r2, [r2, #0]
    5502:	4610      	mov	r0, r2
    5504:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5506:	4b44      	ldr	r3, [pc, #272]	; (5618 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5508:	681b      	ldr	r3, [r3, #0]
    550a:	689b      	ldr	r3, [r3, #8]
    550c:	4a43      	ldr	r2, [pc, #268]	; (561c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    550e:	6812      	ldr	r2, [r2, #0]
    5510:	6812      	ldr	r2, [r2, #0]
    5512:	4610      	mov	r0, r2
    5514:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    5516:	4b38      	ldr	r3, [pc, #224]	; (55f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5518:	681b      	ldr	r3, [r3, #0]
    551a:	685b      	ldr	r3, [r3, #4]
    551c:	4a44      	ldr	r2, [pc, #272]	; (5630 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    551e:	6812      	ldr	r2, [r2, #0]
    5520:	4610      	mov	r0, r2
    5522:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5524:	4b36      	ldr	r3, [pc, #216]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5526:	681b      	ldr	r3, [r3, #0]
    5528:	681b      	ldr	r3, [r3, #0]
    552a:	4a42      	ldr	r2, [pc, #264]	; (5634 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    552c:	6812      	ldr	r2, [r2, #0]
    552e:	4610      	mov	r0, r2
    5530:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    5532:	4b35      	ldr	r3, [pc, #212]	; (5608 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5534:	681b      	ldr	r3, [r3, #0]
    5536:	681b      	ldr	r3, [r3, #0]
    5538:	4a3f      	ldr	r2, [pc, #252]	; (5638 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    553a:	6812      	ldr	r2, [r2, #0]
    553c:	4610      	mov	r0, r2
    553e:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5540:	4b33      	ldr	r3, [pc, #204]	; (5610 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5542:	681b      	ldr	r3, [r3, #0]
    5544:	681b      	ldr	r3, [r3, #0]
    5546:	4a3d      	ldr	r2, [pc, #244]	; (563c <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    5548:	6812      	ldr	r2, [r2, #0]
    554a:	4610      	mov	r0, r2
    554c:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    554e:	e04a      	b.n	55e6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5550:	9b00      	ldr	r3, [sp, #0]
    5552:	2b02      	cmp	r3, #2
    5554:	d149      	bne.n	55ea <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5556:	4b27      	ldr	r3, [pc, #156]	; (55f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5558:	2201      	movs	r2, #1
    555a:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    555c:	4b32      	ldr	r3, [pc, #200]	; (5628 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    555e:	681b      	ldr	r3, [r3, #0]
    5560:	685b      	ldr	r3, [r3, #4]
    5562:	4a32      	ldr	r2, [pc, #200]	; (562c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5564:	6812      	ldr	r2, [r2, #0]
    5566:	4610      	mov	r0, r2
    5568:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    556a:	4b2d      	ldr	r3, [pc, #180]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    556c:	681b      	ldr	r3, [r3, #0]
    556e:	691b      	ldr	r3, [r3, #16]
    5570:	4a2c      	ldr	r2, [pc, #176]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5572:	6812      	ldr	r2, [r2, #0]
    5574:	4610      	mov	r0, r2
    5576:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5578:	4b29      	ldr	r3, [pc, #164]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    557a:	681b      	ldr	r3, [r3, #0]
    557c:	689b      	ldr	r3, [r3, #8]
    557e:	4a29      	ldr	r2, [pc, #164]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5580:	6812      	ldr	r2, [r2, #0]
    5582:	4610      	mov	r0, r2
    5584:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5586:	4b24      	ldr	r3, [pc, #144]	; (5618 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5588:	681b      	ldr	r3, [r3, #0]
    558a:	68db      	ldr	r3, [r3, #12]
    558c:	4a23      	ldr	r2, [pc, #140]	; (561c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    558e:	6812      	ldr	r2, [r2, #0]
    5590:	4610      	mov	r0, r2
    5592:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5594:	4b20      	ldr	r3, [pc, #128]	; (5618 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5596:	681b      	ldr	r3, [r3, #0]
    5598:	689b      	ldr	r3, [r3, #8]
    559a:	4a20      	ldr	r2, [pc, #128]	; (561c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    559c:	6812      	ldr	r2, [r2, #0]
    559e:	6812      	ldr	r2, [r2, #0]
    55a0:	4610      	mov	r0, r2
    55a2:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    55a4:	4b26      	ldr	r3, [pc, #152]	; (5640 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    55a6:	681b      	ldr	r3, [r3, #0]
    55a8:	685b      	ldr	r3, [r3, #4]
    55aa:	4a26      	ldr	r2, [pc, #152]	; (5644 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    55ac:	6812      	ldr	r2, [r2, #0]
    55ae:	4610      	mov	r0, r2
    55b0:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    55b2:	4b25      	ldr	r3, [pc, #148]	; (5648 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    55b4:	681b      	ldr	r3, [r3, #0]
    55b6:	681b      	ldr	r3, [r3, #0]
    55b8:	4a24      	ldr	r2, [pc, #144]	; (564c <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    55ba:	6812      	ldr	r2, [r2, #0]
    55bc:	4610      	mov	r0, r2
    55be:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    55c0:	4b23      	ldr	r3, [pc, #140]	; (5650 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    55c2:	681b      	ldr	r3, [r3, #0]
    55c4:	681b      	ldr	r3, [r3, #0]
    55c6:	4a23      	ldr	r2, [pc, #140]	; (5654 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    55c8:	6812      	ldr	r2, [r2, #0]
    55ca:	4610      	mov	r0, r2
    55cc:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    55ce:	4b22      	ldr	r3, [pc, #136]	; (5658 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    55d0:	681b      	ldr	r3, [r3, #0]
    55d2:	681b      	ldr	r3, [r3, #0]
    55d4:	4a21      	ldr	r2, [pc, #132]	; (565c <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    55d6:	6812      	ldr	r2, [r2, #0]
    55d8:	4610      	mov	r0, r2
    55da:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    55dc:	e005      	b.n	55ea <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    55de:	bf00      	nop
    55e0:	e004      	b.n	55ec <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    55e2:	bf00      	nop
    55e4:	e002      	b.n	55ec <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    55e6:	bf00      	nop
    55e8:	e000      	b.n	55ec <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    55ea:	bf00      	nop
    }

}
    55ec:	bf00      	nop
    55ee:	b003      	add	sp, #12
    55f0:	f85d fb04 	ldr.w	pc, [sp], #4
    55f4:	1fff8b19 	.word	0x1fff8b19
    55f8:	1fff8bb8 	.word	0x1fff8bb8
    55fc:	1fff8bd8 	.word	0x1fff8bd8
    5600:	1fff8bbc 	.word	0x1fff8bbc
    5604:	1fff8be0 	.word	0x1fff8be0
    5608:	1fff8bc0 	.word	0x1fff8bc0
    560c:	1fff8be8 	.word	0x1fff8be8
    5610:	1fff8bc4 	.word	0x1fff8bc4
    5614:	1fff8bf0 	.word	0x1fff8bf0
    5618:	1fff8bac 	.word	0x1fff8bac
    561c:	1fff8bd0 	.word	0x1fff8bd0
    5620:	1fff8bb0 	.word	0x1fff8bb0
    5624:	1fff8bcc 	.word	0x1fff8bcc
    5628:	1fff8bb4 	.word	0x1fff8bb4
    562c:	1fff8bc8 	.word	0x1fff8bc8
    5630:	1fff8bd4 	.word	0x1fff8bd4
    5634:	1fff8bdc 	.word	0x1fff8bdc
    5638:	1fff8be4 	.word	0x1fff8be4
    563c:	1fff8bec 	.word	0x1fff8bec
    5640:	1fff8bf4 	.word	0x1fff8bf4
    5644:	1fff8c04 	.word	0x1fff8c04
    5648:	1fff8bf8 	.word	0x1fff8bf8
    564c:	1fff8c08 	.word	0x1fff8c08
    5650:	1fff8bfc 	.word	0x1fff8bfc
    5654:	1fff8c0c 	.word	0x1fff8c0c
    5658:	1fff8c00 	.word	0x1fff8c00
    565c:	1fff8c10 	.word	0x1fff8c10

00005660 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    5660:	b500      	push	{lr}
    5662:	b083      	sub	sp, #12
    5664:	9001      	str	r0, [sp, #4]
    5666:	9100      	str	r1, [sp, #0]
    switch(Command)
    5668:	9b00      	ldr	r3, [sp, #0]
    566a:	2b04      	cmp	r3, #4
    566c:	d010      	beq.n	5690 <Clock_Ip_Command+0x30>
    566e:	9b00      	ldr	r3, [sp, #0]
    5670:	2b04      	cmp	r3, #4
    5672:	d811      	bhi.n	5698 <Clock_Ip_Command+0x38>
    5674:	9b00      	ldr	r3, [sp, #0]
    5676:	2b01      	cmp	r3, #1
    5678:	d006      	beq.n	5688 <Clock_Ip_Command+0x28>
    567a:	9b00      	ldr	r3, [sp, #0]
    567c:	2b02      	cmp	r3, #2
    567e:	d10b      	bne.n	5698 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    5680:	9801      	ldr	r0, [sp, #4]
    5682:	f7ff fdb3 	bl	51ec <Clock_Ip_ClockInitializeObjects>
            break;
    5686:	e008      	b.n	569a <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    5688:	9801      	ldr	r0, [sp, #4]
    568a:	f7ff f9db 	bl	4a44 <Clock_Ip_SpecificPlatformInitClock>
            break;
    568e:	e004      	b.n	569a <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5690:	9801      	ldr	r0, [sp, #4]
    5692:	f7ff f8ed 	bl	4870 <DisableSafeClock>
            break;
    5696:	e000      	b.n	569a <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    5698:	bf00      	nop
    }
}
    569a:	bf00      	nop
    569c:	b003      	add	sp, #12
    569e:	f85d fb04 	ldr.w	pc, [sp], #4
    56a2:	bf00      	nop

000056a4 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    56a4:	b500      	push	{lr}
    56a6:	b085      	sub	sp, #20
    56a8:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    56aa:	4a20      	ldr	r2, [pc, #128]	; (572c <Mcu_Init+0x88>)
    56ac:	9b01      	ldr	r3, [sp, #4]
    56ae:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    56b0:	2300      	movs	r3, #0
    56b2:	9303      	str	r3, [sp, #12]
    56b4:	e010      	b.n	56d8 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    56b6:	4b1d      	ldr	r3, [pc, #116]	; (572c <Mcu_Init+0x88>)
    56b8:	681b      	ldr	r3, [r3, #0]
    56ba:	6919      	ldr	r1, [r3, #16]
    56bc:	9a03      	ldr	r2, [sp, #12]
    56be:	4613      	mov	r3, r2
    56c0:	005b      	lsls	r3, r3, #1
    56c2:	4413      	add	r3, r2
    56c4:	009b      	lsls	r3, r3, #2
    56c6:	440b      	add	r3, r1
    56c8:	681b      	ldr	r3, [r3, #0]
    56ca:	9a03      	ldr	r2, [sp, #12]
    56cc:	b2d1      	uxtb	r1, r2
    56ce:	4a18      	ldr	r2, [pc, #96]	; (5730 <Mcu_Init+0x8c>)
    56d0:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    56d2:	9b03      	ldr	r3, [sp, #12]
    56d4:	3301      	adds	r3, #1
    56d6:	9303      	str	r3, [sp, #12]
    56d8:	4b14      	ldr	r3, [pc, #80]	; (572c <Mcu_Init+0x88>)
    56da:	681b      	ldr	r3, [r3, #0]
    56dc:	689b      	ldr	r3, [r3, #8]
    56de:	9a03      	ldr	r2, [sp, #12]
    56e0:	429a      	cmp	r2, r3
    56e2:	d3e8      	bcc.n	56b6 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    56e4:	2300      	movs	r3, #0
    56e6:	9303      	str	r3, [sp, #12]
    56e8:	e010      	b.n	570c <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    56ea:	4b10      	ldr	r3, [pc, #64]	; (572c <Mcu_Init+0x88>)
    56ec:	681b      	ldr	r3, [r3, #0]
    56ee:	6959      	ldr	r1, [r3, #20]
    56f0:	9a03      	ldr	r2, [sp, #12]
    56f2:	4613      	mov	r3, r2
    56f4:	01db      	lsls	r3, r3, #7
    56f6:	1a9b      	subs	r3, r3, r2
    56f8:	00db      	lsls	r3, r3, #3
    56fa:	440b      	add	r3, r1
    56fc:	681b      	ldr	r3, [r3, #0]
    56fe:	9a03      	ldr	r2, [sp, #12]
    5700:	b2d1      	uxtb	r1, r2
    5702:	4a0c      	ldr	r2, [pc, #48]	; (5734 <Mcu_Init+0x90>)
    5704:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5706:	9b03      	ldr	r3, [sp, #12]
    5708:	3301      	adds	r3, #1
    570a:	9303      	str	r3, [sp, #12]
    570c:	4b07      	ldr	r3, [pc, #28]	; (572c <Mcu_Init+0x88>)
    570e:	681b      	ldr	r3, [r3, #0]
    5710:	68db      	ldr	r3, [r3, #12]
    5712:	9a03      	ldr	r2, [sp, #12]
    5714:	429a      	cmp	r2, r3
    5716:	d3e8      	bcc.n	56ea <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5718:	4b04      	ldr	r3, [pc, #16]	; (572c <Mcu_Init+0x88>)
    571a:	681b      	ldr	r3, [r3, #0]
    571c:	699b      	ldr	r3, [r3, #24]
    571e:	4618      	mov	r0, r3
    5720:	f000 f88a 	bl	5838 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5724:	bf00      	nop
    5726:	b005      	add	sp, #20
    5728:	f85d fb04 	ldr.w	pc, [sp], #4
    572c:	1fff8cec 	.word	0x1fff8cec
    5730:	1fff8ce8 	.word	0x1fff8ce8
    5734:	1fff8ce4 	.word	0x1fff8ce4

00005738 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5738:	b084      	sub	sp, #16
    573a:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    573c:	2301      	movs	r3, #1
    573e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5742:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5746:	4618      	mov	r0, r3
    5748:	b004      	add	sp, #16
    574a:	4770      	bx	lr

0000574c <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    574c:	b500      	push	{lr}
    574e:	b085      	sub	sp, #20
    5750:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5752:	4a0e      	ldr	r2, [pc, #56]	; (578c <Mcu_InitClock+0x40>)
    5754:	9b01      	ldr	r3, [sp, #4]
    5756:	4413      	add	r3, r2
    5758:	781b      	ldrb	r3, [r3, #0]
    575a:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    575e:	4b0c      	ldr	r3, [pc, #48]	; (5790 <Mcu_InitClock+0x44>)
    5760:	681b      	ldr	r3, [r3, #0]
    5762:	6959      	ldr	r1, [r3, #20]
    5764:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5768:	4613      	mov	r3, r2
    576a:	01db      	lsls	r3, r3, #7
    576c:	1a9b      	subs	r3, r3, r2
    576e:	00db      	lsls	r3, r3, #3
    5770:	440b      	add	r3, r1
    5772:	4618      	mov	r0, r3
    5774:	f000 f86a 	bl	584c <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5778:	2300      	movs	r3, #0
    577a:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    577e:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    5782:	4618      	mov	r0, r3
    5784:	b005      	add	sp, #20
    5786:	f85d fb04 	ldr.w	pc, [sp], #4
    578a:	bf00      	nop
    578c:	1fff8ce4 	.word	0x1fff8ce4
    5790:	1fff8cec 	.word	0x1fff8cec

00005794 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5794:	b500      	push	{lr}
    5796:	b085      	sub	sp, #20
    5798:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    579a:	4a0d      	ldr	r2, [pc, #52]	; (57d0 <Mcu_SetMode+0x3c>)
    579c:	9b01      	ldr	r3, [sp, #4]
    579e:	4413      	add	r3, r2
    57a0:	781b      	ldrb	r3, [r3, #0]
    57a2:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    57a6:	f002 fedb 	bl	8560 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    57aa:	4b0a      	ldr	r3, [pc, #40]	; (57d4 <Mcu_SetMode+0x40>)
    57ac:	681b      	ldr	r3, [r3, #0]
    57ae:	6919      	ldr	r1, [r3, #16]
    57b0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    57b4:	4613      	mov	r3, r2
    57b6:	005b      	lsls	r3, r3, #1
    57b8:	4413      	add	r3, r2
    57ba:	009b      	lsls	r3, r3, #2
    57bc:	440b      	add	r3, r1
    57be:	4618      	mov	r0, r3
    57c0:	f000 f84e 	bl	5860 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    57c4:	f002 fef8 	bl	85b8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    57c8:	bf00      	nop
    57ca:	b005      	add	sp, #20
    57cc:	f85d fb04 	ldr.w	pc, [sp], #4
    57d0:	1fff8ce8 	.word	0x1fff8ce8
    57d4:	1fff8cec 	.word	0x1fff8cec

000057d8 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    57d8:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    57da:	2302      	movs	r3, #2
    57dc:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    57de:	9b01      	ldr	r3, [sp, #4]
}
    57e0:	4618      	mov	r0, r3
    57e2:	b002      	add	sp, #8
    57e4:	4770      	bx	lr

000057e6 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    57e6:	b500      	push	{lr}
    57e8:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    57ea:	f000 f843 	bl	5874 <Mcu_Ipw_GetResetReason>
    57ee:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    57f0:	9b01      	ldr	r3, [sp, #4]
}
    57f2:	4618      	mov	r0, r3
    57f4:	b003      	add	sp, #12
    57f6:	f85d fb04 	ldr.w	pc, [sp], #4

000057fa <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    57fa:	b500      	push	{lr}
    57fc:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    57fe:	f000 f83f 	bl	5880 <Mcu_Ipw_GetResetRawValue>
    5802:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5804:	9b01      	ldr	r3, [sp, #4]
}
    5806:	4618      	mov	r0, r3
    5808:	b003      	add	sp, #12
    580a:	f85d fb04 	ldr.w	pc, [sp], #4

0000580e <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    580e:	b500      	push	{lr}
    5810:	b083      	sub	sp, #12
    5812:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5814:	9801      	ldr	r0, [sp, #4]
    5816:	f000 f839 	bl	588c <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    581a:	bf00      	nop
    581c:	b003      	add	sp, #12
    581e:	f85d fb04 	ldr.w	pc, [sp], #4

00005822 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5822:	b082      	sub	sp, #8
    5824:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5826:	4b03      	ldr	r3, [pc, #12]	; (5834 <Mcu_ClkSrcFailureNotification+0x12>)
    5828:	681b      	ldr	r3, [r3, #0]
    582a:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    582c:	bf00      	nop
    582e:	b002      	add	sp, #8
    5830:	4770      	bx	lr
    5832:	bf00      	nop
    5834:	1fff8cec 	.word	0x1fff8cec

00005838 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5838:	b500      	push	{lr}
    583a:	b083      	sub	sp, #12
    583c:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    583e:	9801      	ldr	r0, [sp, #4]
    5840:	f000 f882 	bl	5948 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5844:	bf00      	nop
    5846:	b003      	add	sp, #12
    5848:	f85d fb04 	ldr.w	pc, [sp], #4

0000584c <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    584c:	b500      	push	{lr}
    584e:	b083      	sub	sp, #12
    5850:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5852:	9801      	ldr	r0, [sp, #4]
    5854:	f7fc fc6a 	bl	212c <Clock_Ip_InitClock>
}
    5858:	bf00      	nop
    585a:	b003      	add	sp, #12
    585c:	f85d fb04 	ldr.w	pc, [sp], #4

00005860 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5860:	b500      	push	{lr}
    5862:	b083      	sub	sp, #12
    5864:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5866:	9801      	ldr	r0, [sp, #4]
    5868:	f000 f820 	bl	58ac <Power_Ip_SetMode>
}
    586c:	bf00      	nop
    586e:	b003      	add	sp, #12
    5870:	f85d fb04 	ldr.w	pc, [sp], #4

00005874 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5874:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5876:	f000 f84f 	bl	5918 <Power_Ip_GetResetReason>
    587a:	4603      	mov	r3, r0
}
    587c:	4618      	mov	r0, r3
    587e:	bd08      	pop	{r3, pc}

00005880 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5880:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5882:	f000 f857 	bl	5934 <Power_Ip_GetResetRawValue>
    5886:	4603      	mov	r3, r0
}
    5888:	4618      	mov	r0, r3
    588a:	bd08      	pop	{r3, pc}

0000588c <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    588c:	b500      	push	{lr}
    588e:	b083      	sub	sp, #12
    5890:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5892:	9b01      	ldr	r3, [sp, #4]
    5894:	2b00      	cmp	r3, #0
    5896:	d102      	bne.n	589e <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5898:	f000 f86c 	bl	5974 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    589c:	e001      	b.n	58a2 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    589e:	f000 f86e 	bl	597e <Power_Ip_EnableSleepOnExit>
}
    58a2:	bf00      	nop
    58a4:	b003      	add	sp, #12
    58a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000058ac <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    58ac:	b500      	push	{lr}
    58ae:	b085      	sub	sp, #20
    58b0:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    58b2:	9b01      	ldr	r3, [sp, #4]
    58b4:	685b      	ldr	r3, [r3, #4]
    58b6:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    58b8:	9802      	ldr	r0, [sp, #8]
    58ba:	f000 f9f5 	bl	5ca8 <Power_Ip_SMC_ModeCheckEntry>
    58be:	4603      	mov	r3, r0
    58c0:	2b00      	cmp	r3, #0
    58c2:	d002      	beq.n	58ca <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    58c4:	2301      	movs	r3, #1
    58c6:	9303      	str	r3, [sp, #12]
    58c8:	e003      	b.n	58d2 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    58ca:	9801      	ldr	r0, [sp, #4]
    58cc:	f000 fa1e 	bl	5d0c <Power_Ip_SMC_ModeConfig>
    58d0:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    58d2:	9b03      	ldr	r3, [sp, #12]
    58d4:	2b01      	cmp	r3, #1
    58d6:	d103      	bne.n	58e0 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    58d8:	21ff      	movs	r1, #255	; 0xff
    58da:	2003      	movs	r0, #3
    58dc:	f000 f8f4 	bl	5ac8 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    58e0:	bf00      	nop
    58e2:	b005      	add	sp, #20
    58e4:	f85d fb04 	ldr.w	pc, [sp], #4

000058e8 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    58e8:	b084      	sub	sp, #16
    58ea:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    58ec:	230c      	movs	r3, #12
    58ee:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    58f0:	4a08      	ldr	r2, [pc, #32]	; (5914 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    58f2:	9b01      	ldr	r3, [sp, #4]
    58f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    58f8:	2b0e      	cmp	r3, #14
    58fa:	d805      	bhi.n	5908 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    58fc:	4a05      	ldr	r2, [pc, #20]	; (5914 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    58fe:	9b01      	ldr	r3, [sp, #4]
    5900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5904:	9303      	str	r3, [sp, #12]
    5906:	e001      	b.n	590c <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5908:	230c      	movs	r3, #12
    590a:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    590c:	9b03      	ldr	r3, [sp, #12]
}
    590e:	4618      	mov	r0, r3
    5910:	b004      	add	sp, #16
    5912:	4770      	bx	lr
    5914:	0000ad08 	.word	0x0000ad08

00005918 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5918:	b500      	push	{lr}
    591a:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    591c:	f000 f940 	bl	5ba0 <Power_Ip_RCM_GetResetReason>
    5920:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5922:	9801      	ldr	r0, [sp, #4]
    5924:	f7ff ffe0 	bl	58e8 <Power_Ip_ConvertIntergeToResetType>
    5928:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    592a:	9b00      	ldr	r3, [sp, #0]
}
    592c:	4618      	mov	r0, r3
    592e:	b003      	add	sp, #12
    5930:	f85d fb04 	ldr.w	pc, [sp], #4

00005934 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5934:	b500      	push	{lr}
    5936:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5938:	f000 f98a 	bl	5c50 <Power_Ip_RCM_GetResetRawValue>
    593c:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    593e:	9b01      	ldr	r3, [sp, #4]
}
    5940:	4618      	mov	r0, r3
    5942:	b003      	add	sp, #12
    5944:	f85d fb04 	ldr.w	pc, [sp], #4

00005948 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5948:	b500      	push	{lr}
    594a:	b083      	sub	sp, #12
    594c:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    594e:	9b01      	ldr	r3, [sp, #4]
    5950:	681b      	ldr	r3, [r3, #0]
    5952:	4618      	mov	r0, r3
    5954:	f000 f90e 	bl	5b74 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5958:	9b01      	ldr	r3, [sp, #4]
    595a:	685b      	ldr	r3, [r3, #4]
    595c:	4618      	mov	r0, r3
    595e:	f000 f86d 	bl	5a3c <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5962:	9b01      	ldr	r3, [sp, #4]
    5964:	689b      	ldr	r3, [r3, #8]
    5966:	4618      	mov	r0, r3
    5968:	f000 f990 	bl	5c8c <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    596c:	bf00      	nop
    596e:	b003      	add	sp, #12
    5970:	f85d fb04 	ldr.w	pc, [sp], #4

00005974 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5974:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5976:	f000 f811 	bl	599c <Power_Ip_CM4_DisableSleepOnExit>
}
    597a:	bf00      	nop
    597c:	bd08      	pop	{r3, pc}

0000597e <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    597e:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5980:	f000 f820 	bl	59c4 <Power_Ip_CM4_EnableSleepOnExit>
}
    5984:	bf00      	nop
    5986:	bd08      	pop	{r3, pc}

00005988 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5988:	b082      	sub	sp, #8
    598a:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    598c:	4a02      	ldr	r2, [pc, #8]	; (5998 <Power_Ip_InstallNotificationsCallback+0x10>)
    598e:	9b01      	ldr	r3, [sp, #4]
    5990:	6013      	str	r3, [r2, #0]
}
    5992:	bf00      	nop
    5994:	b002      	add	sp, #8
    5996:	4770      	bx	lr
    5998:	1fff8b1c 	.word	0x1fff8b1c

0000599c <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    599c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    599e:	2300      	movs	r3, #0
    59a0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59a2:	4b07      	ldr	r3, [pc, #28]	; (59c0 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    59a4:	681b      	ldr	r3, [r3, #0]
    59a6:	685b      	ldr	r3, [r3, #4]
    59a8:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    59aa:	9b01      	ldr	r3, [sp, #4]
    59ac:	f023 0302 	bic.w	r3, r3, #2
    59b0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    59b2:	4b03      	ldr	r3, [pc, #12]	; (59c0 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    59b4:	681b      	ldr	r3, [r3, #0]
    59b6:	9a01      	ldr	r2, [sp, #4]
    59b8:	605a      	str	r2, [r3, #4]
}
    59ba:	bf00      	nop
    59bc:	b002      	add	sp, #8
    59be:	4770      	bx	lr
    59c0:	1fff8b20 	.word	0x1fff8b20

000059c4 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    59c4:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59c6:	2300      	movs	r3, #0
    59c8:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59ca:	4b07      	ldr	r3, [pc, #28]	; (59e8 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    59cc:	681b      	ldr	r3, [r3, #0]
    59ce:	685b      	ldr	r3, [r3, #4]
    59d0:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    59d2:	9b01      	ldr	r3, [sp, #4]
    59d4:	f043 0302 	orr.w	r3, r3, #2
    59d8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    59da:	4b03      	ldr	r3, [pc, #12]	; (59e8 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    59dc:	681b      	ldr	r3, [r3, #0]
    59de:	9a01      	ldr	r2, [sp, #4]
    59e0:	605a      	str	r2, [r3, #4]
}
    59e2:	bf00      	nop
    59e4:	b002      	add	sp, #8
    59e6:	4770      	bx	lr
    59e8:	1fff8b20 	.word	0x1fff8b20

000059ec <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    59ec:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59ee:	2300      	movs	r3, #0
    59f0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59f2:	4b07      	ldr	r3, [pc, #28]	; (5a10 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    59f4:	681b      	ldr	r3, [r3, #0]
    59f6:	685b      	ldr	r3, [r3, #4]
    59f8:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    59fa:	9b01      	ldr	r3, [sp, #4]
    59fc:	f043 0304 	orr.w	r3, r3, #4
    5a00:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a02:	4b03      	ldr	r3, [pc, #12]	; (5a10 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5a04:	681b      	ldr	r3, [r3, #0]
    5a06:	9a01      	ldr	r2, [sp, #4]
    5a08:	605a      	str	r2, [r3, #4]
}
    5a0a:	bf00      	nop
    5a0c:	b002      	add	sp, #8
    5a0e:	4770      	bx	lr
    5a10:	1fff8b20 	.word	0x1fff8b20

00005a14 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5a14:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5a16:	2300      	movs	r3, #0
    5a18:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5a1a:	4b07      	ldr	r3, [pc, #28]	; (5a38 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5a1c:	681b      	ldr	r3, [r3, #0]
    5a1e:	685b      	ldr	r3, [r3, #4]
    5a20:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5a22:	9b01      	ldr	r3, [sp, #4]
    5a24:	f023 0304 	bic.w	r3, r3, #4
    5a28:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a2a:	4b03      	ldr	r3, [pc, #12]	; (5a38 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5a2c:	681b      	ldr	r3, [r3, #0]
    5a2e:	9a01      	ldr	r2, [sp, #4]
    5a30:	605a      	str	r2, [r3, #4]
}
    5a32:	bf00      	nop
    5a34:	b002      	add	sp, #8
    5a36:	4770      	bx	lr
    5a38:	1fff8b20 	.word	0x1fff8b20

00005a3c <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5a3c:	b084      	sub	sp, #16
    5a3e:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5a40:	4b20      	ldr	r3, [pc, #128]	; (5ac4 <Power_Ip_PMC_PowerInit+0x88>)
    5a42:	781b      	ldrb	r3, [r3, #0]
    5a44:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5a48:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a4c:	f003 030f 	and.w	r3, r3, #15
    5a50:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5a54:	9b01      	ldr	r3, [sp, #4]
    5a56:	781a      	ldrb	r2, [r3, #0]
    5a58:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a5c:	4313      	orrs	r3, r2
    5a5e:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5a62:	4a18      	ldr	r2, [pc, #96]	; (5ac4 <Power_Ip_PMC_PowerInit+0x88>)
    5a64:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a68:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5a6a:	4b16      	ldr	r3, [pc, #88]	; (5ac4 <Power_Ip_PMC_PowerInit+0x88>)
    5a6c:	785b      	ldrb	r3, [r3, #1]
    5a6e:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5a72:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a76:	f003 031f 	and.w	r3, r3, #31
    5a7a:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5a7e:	9b01      	ldr	r3, [sp, #4]
    5a80:	785a      	ldrb	r2, [r3, #1]
    5a82:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a86:	4313      	orrs	r3, r2
    5a88:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5a8c:	4a0d      	ldr	r2, [pc, #52]	; (5ac4 <Power_Ip_PMC_PowerInit+0x88>)
    5a8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a92:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5a94:	4b0b      	ldr	r3, [pc, #44]	; (5ac4 <Power_Ip_PMC_PowerInit+0x88>)
    5a96:	789b      	ldrb	r3, [r3, #2]
    5a98:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5a9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5aa0:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5aa4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5aa8:	9b01      	ldr	r3, [sp, #4]
    5aaa:	789a      	ldrb	r2, [r3, #2]
    5aac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ab0:	4313      	orrs	r3, r2
    5ab2:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5ab6:	4a03      	ldr	r2, [pc, #12]	; (5ac4 <Power_Ip_PMC_PowerInit+0x88>)
    5ab8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5abc:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5abe:	bf00      	nop
    5ac0:	b004      	add	sp, #16
    5ac2:	4770      	bx	lr
    5ac4:	4007d000 	.word	0x4007d000

00005ac8 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5ac8:	b500      	push	{lr}
    5aca:	b083      	sub	sp, #12
    5acc:	9001      	str	r0, [sp, #4]
    5ace:	460b      	mov	r3, r1
    5ad0:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5ad4:	4b05      	ldr	r3, [pc, #20]	; (5aec <Power_Ip_ReportPowerErrors+0x24>)
    5ad6:	681b      	ldr	r3, [r3, #0]
    5ad8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5adc:	4611      	mov	r1, r2
    5ade:	9801      	ldr	r0, [sp, #4]
    5ae0:	4798      	blx	r3
}
    5ae2:	bf00      	nop
    5ae4:	b003      	add	sp, #12
    5ae6:	f85d fb04 	ldr.w	pc, [sp], #4
    5aea:	bf00      	nop
    5aec:	1fff8b1c 	.word	0x1fff8b1c

00005af0 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5af0:	b082      	sub	sp, #8
    5af2:	9001      	str	r0, [sp, #4]
    5af4:	460b      	mov	r3, r1
    5af6:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5afa:	bf00      	nop
    5afc:	b002      	add	sp, #8
    5afe:	4770      	bx	lr

00005b00 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5b00:	b500      	push	{lr}
    5b02:	b085      	sub	sp, #20
    5b04:	9003      	str	r0, [sp, #12]
    5b06:	9102      	str	r1, [sp, #8]
    5b08:	9201      	str	r2, [sp, #4]
    5b0a:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5b0c:	2000      	movs	r0, #0
    5b0e:	f7fc f83d 	bl	1b8c <OsIf_GetCounter>
    5b12:	4602      	mov	r2, r0
    5b14:	9b03      	ldr	r3, [sp, #12]
    5b16:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5b18:	9b02      	ldr	r3, [sp, #8]
    5b1a:	2200      	movs	r2, #0
    5b1c:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5b1e:	2100      	movs	r1, #0
    5b20:	9800      	ldr	r0, [sp, #0]
    5b22:	f7fc f87f 	bl	1c24 <OsIf_MicrosToTicks>
    5b26:	4602      	mov	r2, r0
    5b28:	9b01      	ldr	r3, [sp, #4]
    5b2a:	601a      	str	r2, [r3, #0]
}
    5b2c:	bf00      	nop
    5b2e:	b005      	add	sp, #20
    5b30:	f85d fb04 	ldr.w	pc, [sp], #4

00005b34 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5b34:	b500      	push	{lr}
    5b36:	b087      	sub	sp, #28
    5b38:	9003      	str	r0, [sp, #12]
    5b3a:	9102      	str	r1, [sp, #8]
    5b3c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5b3e:	2300      	movs	r3, #0
    5b40:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5b44:	2100      	movs	r1, #0
    5b46:	9803      	ldr	r0, [sp, #12]
    5b48:	f7fc f839 	bl	1bbe <OsIf_GetElapsed>
    5b4c:	4602      	mov	r2, r0
    5b4e:	9b02      	ldr	r3, [sp, #8]
    5b50:	681b      	ldr	r3, [r3, #0]
    5b52:	441a      	add	r2, r3
    5b54:	9b02      	ldr	r3, [sp, #8]
    5b56:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5b58:	9b02      	ldr	r3, [sp, #8]
    5b5a:	681b      	ldr	r3, [r3, #0]
    5b5c:	9a01      	ldr	r2, [sp, #4]
    5b5e:	429a      	cmp	r2, r3
    5b60:	d802      	bhi.n	5b68 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5b62:	2301      	movs	r3, #1
    5b64:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5b68:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5b6c:	4618      	mov	r0, r3
    5b6e:	b007      	add	sp, #28
    5b70:	f85d fb04 	ldr.w	pc, [sp], #4

00005b74 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5b74:	b082      	sub	sp, #8
    5b76:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5b78:	9b01      	ldr	r3, [sp, #4]
    5b7a:	681a      	ldr	r2, [r3, #0]
    5b7c:	4907      	ldr	r1, [pc, #28]	; (5b9c <Power_Ip_RCM_ResetInit+0x28>)
    5b7e:	f641 7307 	movw	r3, #7943	; 0x1f07
    5b82:	4013      	ands	r3, r2
    5b84:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5b86:	9b01      	ldr	r3, [sp, #4]
    5b88:	685a      	ldr	r2, [r3, #4]
    5b8a:	4904      	ldr	r1, [pc, #16]	; (5b9c <Power_Ip_RCM_ResetInit+0x28>)
    5b8c:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5b90:	4013      	ands	r3, r2
    5b92:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5b94:	bf00      	nop
    5b96:	b002      	add	sp, #8
    5b98:	4770      	bx	lr
    5b9a:	bf00      	nop
    5b9c:	4007f000 	.word	0x4007f000

00005ba0 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5ba0:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5ba2:	230c      	movs	r3, #12
    5ba4:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5ba6:	2300      	movs	r3, #0
    5ba8:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5baa:	2300      	movs	r3, #0
    5bac:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5bae:	2300      	movs	r3, #0
    5bb0:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5bb2:	4b25      	ldr	r3, [pc, #148]	; (5c48 <Power_Ip_RCM_GetResetReason+0xa8>)
    5bb4:	699a      	ldr	r2, [r3, #24]
    5bb6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bba:	4013      	ands	r3, r2
    5bbc:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5bbe:	9b03      	ldr	r3, [sp, #12]
    5bc0:	2b00      	cmp	r3, #0
    5bc2:	d008      	beq.n	5bd6 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5bc4:	4920      	ldr	r1, [pc, #128]	; (5c48 <Power_Ip_RCM_GetResetReason+0xa8>)
    5bc6:	9a03      	ldr	r2, [sp, #12]
    5bc8:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bcc:	4013      	ands	r3, r2
    5bce:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5bd0:	4a1e      	ldr	r2, [pc, #120]	; (5c4c <Power_Ip_RCM_GetResetReason+0xac>)
    5bd2:	9b03      	ldr	r3, [sp, #12]
    5bd4:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5bd6:	4b1d      	ldr	r3, [pc, #116]	; (5c4c <Power_Ip_RCM_GetResetReason+0xac>)
    5bd8:	681b      	ldr	r3, [r3, #0]
    5bda:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5bdc:	9a02      	ldr	r2, [sp, #8]
    5bde:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5be2:	4013      	ands	r3, r2
    5be4:	2b82      	cmp	r3, #130	; 0x82
    5be6:	d102      	bne.n	5bee <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5be8:	2305      	movs	r3, #5
    5bea:	9307      	str	r3, [sp, #28]
    5bec:	e027      	b.n	5c3e <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5bee:	2300      	movs	r3, #0
    5bf0:	9306      	str	r3, [sp, #24]
    5bf2:	e021      	b.n	5c38 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5bf4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5bf8:	9b06      	ldr	r3, [sp, #24]
    5bfa:	fa22 f303 	lsr.w	r3, r2, r3
    5bfe:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5c00:	9a01      	ldr	r2, [sp, #4]
    5c02:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5c06:	4013      	ands	r3, r2
    5c08:	2b00      	cmp	r3, #0
    5c0a:	d012      	beq.n	5c32 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5c0c:	9a01      	ldr	r2, [sp, #4]
    5c0e:	9b02      	ldr	r3, [sp, #8]
    5c10:	4013      	ands	r3, r2
    5c12:	2b00      	cmp	r3, #0
    5c14:	d00a      	beq.n	5c2c <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5c16:	9b05      	ldr	r3, [sp, #20]
    5c18:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5c1a:	9b04      	ldr	r3, [sp, #16]
    5c1c:	3301      	adds	r3, #1
    5c1e:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5c20:	9b04      	ldr	r3, [sp, #16]
    5c22:	2b01      	cmp	r3, #1
    5c24:	d902      	bls.n	5c2c <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5c26:	230d      	movs	r3, #13
    5c28:	9307      	str	r3, [sp, #28]
                        break;
    5c2a:	e008      	b.n	5c3e <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5c2c:	9b05      	ldr	r3, [sp, #20]
    5c2e:	3301      	adds	r3, #1
    5c30:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5c32:	9b06      	ldr	r3, [sp, #24]
    5c34:	3301      	adds	r3, #1
    5c36:	9306      	str	r3, [sp, #24]
    5c38:	9b06      	ldr	r3, [sp, #24]
    5c3a:	2b1f      	cmp	r3, #31
    5c3c:	d9da      	bls.n	5bf4 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5c3e:	9b07      	ldr	r3, [sp, #28]
}
    5c40:	4618      	mov	r0, r3
    5c42:	b008      	add	sp, #32
    5c44:	4770      	bx	lr
    5c46:	bf00      	nop
    5c48:	4007f000 	.word	0x4007f000
    5c4c:	1fff8cf0 	.word	0x1fff8cf0

00005c50 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5c50:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5c52:	4b0c      	ldr	r3, [pc, #48]	; (5c84 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5c54:	699a      	ldr	r2, [r3, #24]
    5c56:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c5a:	4013      	ands	r3, r2
    5c5c:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5c5e:	9b01      	ldr	r3, [sp, #4]
    5c60:	2b00      	cmp	r3, #0
    5c62:	d008      	beq.n	5c76 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5c64:	4907      	ldr	r1, [pc, #28]	; (5c84 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5c66:	9a01      	ldr	r2, [sp, #4]
    5c68:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c6c:	4013      	ands	r3, r2
    5c6e:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5c70:	4a05      	ldr	r2, [pc, #20]	; (5c88 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5c72:	9b01      	ldr	r3, [sp, #4]
    5c74:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5c76:	4b04      	ldr	r3, [pc, #16]	; (5c88 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5c78:	681b      	ldr	r3, [r3, #0]
    5c7a:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5c7c:	9b00      	ldr	r3, [sp, #0]
}
    5c7e:	4618      	mov	r0, r3
    5c80:	b002      	add	sp, #8
    5c82:	4770      	bx	lr
    5c84:	4007f000 	.word	0x4007f000
    5c88:	1fff8cf0 	.word	0x1fff8cf0

00005c8c <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5c8c:	b082      	sub	sp, #8
    5c8e:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5c90:	9b01      	ldr	r3, [sp, #4]
    5c92:	681b      	ldr	r3, [r3, #0]
    5c94:	4a03      	ldr	r2, [pc, #12]	; (5ca4 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5c96:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5c9a:	6093      	str	r3, [r2, #8]
}
    5c9c:	bf00      	nop
    5c9e:	b002      	add	sp, #8
    5ca0:	4770      	bx	lr
    5ca2:	bf00      	nop
    5ca4:	4007e000 	.word	0x4007e000

00005ca8 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5ca8:	b084      	sub	sp, #16
    5caa:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5cac:	2301      	movs	r3, #1
    5cae:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5cb0:	4b15      	ldr	r3, [pc, #84]	; (5d08 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5cb2:	695b      	ldr	r3, [r3, #20]
    5cb4:	b2db      	uxtb	r3, r3
    5cb6:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5cb8:	9b01      	ldr	r3, [sp, #4]
    5cba:	2b02      	cmp	r3, #2
    5cbc:	d012      	beq.n	5ce4 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5cbe:	9b01      	ldr	r3, [sp, #4]
    5cc0:	2b02      	cmp	r3, #2
    5cc2:	d818      	bhi.n	5cf6 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5cc4:	9b01      	ldr	r3, [sp, #4]
    5cc6:	2b00      	cmp	r3, #0
    5cc8:	d003      	beq.n	5cd2 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5cca:	9b01      	ldr	r3, [sp, #4]
    5ccc:	2b01      	cmp	r3, #1
    5cce:	d003      	beq.n	5cd8 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5cd0:	e011      	b.n	5cf6 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5cd2:	2300      	movs	r3, #0
    5cd4:	9303      	str	r3, [sp, #12]
            break;
    5cd6:	e013      	b.n	5d00 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5cd8:	9b02      	ldr	r3, [sp, #8]
    5cda:	2b01      	cmp	r3, #1
    5cdc:	d10d      	bne.n	5cfa <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5cde:	2300      	movs	r3, #0
    5ce0:	9303      	str	r3, [sp, #12]
            break;
    5ce2:	e00a      	b.n	5cfa <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5ce4:	9b02      	ldr	r3, [sp, #8]
    5ce6:	2b01      	cmp	r3, #1
    5ce8:	d002      	beq.n	5cf0 <Power_Ip_SMC_ModeCheckEntry+0x48>
    5cea:	9b02      	ldr	r3, [sp, #8]
    5cec:	2b10      	cmp	r3, #16
    5cee:	d106      	bne.n	5cfe <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5cf0:	2300      	movs	r3, #0
    5cf2:	9303      	str	r3, [sp, #12]
            break;
    5cf4:	e003      	b.n	5cfe <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5cf6:	bf00      	nop
    5cf8:	e002      	b.n	5d00 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5cfa:	bf00      	nop
    5cfc:	e000      	b.n	5d00 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5cfe:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5d00:	9b03      	ldr	r3, [sp, #12]
}
    5d02:	4618      	mov	r0, r3
    5d04:	b004      	add	sp, #16
    5d06:	4770      	bx	lr
    5d08:	4007e000 	.word	0x4007e000

00005d0c <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5d0c:	b500      	push	{lr}
    5d0e:	b08b      	sub	sp, #44	; 0x2c
    5d10:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5d12:	2300      	movs	r3, #0
    5d14:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5d16:	2300      	movs	r3, #0
    5d18:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5d1a:	2300      	movs	r3, #0
    5d1c:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5d20:	9b01      	ldr	r3, [sp, #4]
    5d22:	685b      	ldr	r3, [r3, #4]
    5d24:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5d26:	9b08      	ldr	r3, [sp, #32]
    5d28:	2b02      	cmp	r3, #2
    5d2a:	d076      	beq.n	5e1a <Power_Ip_SMC_ModeConfig+0x10e>
    5d2c:	9b08      	ldr	r3, [sp, #32]
    5d2e:	2b02      	cmp	r3, #2
    5d30:	f200 80ab 	bhi.w	5e8a <Power_Ip_SMC_ModeConfig+0x17e>
    5d34:	9b08      	ldr	r3, [sp, #32]
    5d36:	2b00      	cmp	r3, #0
    5d38:	d003      	beq.n	5d42 <Power_Ip_SMC_ModeConfig+0x36>
    5d3a:	9b08      	ldr	r3, [sp, #32]
    5d3c:	2b01      	cmp	r3, #1
    5d3e:	d034      	beq.n	5daa <Power_Ip_SMC_ModeConfig+0x9e>
    5d40:	e0a3      	b.n	5e8a <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5d42:	4b58      	ldr	r3, [pc, #352]	; (5ea4 <Power_Ip_SMC_ModeConfig+0x198>)
    5d44:	68db      	ldr	r3, [r3, #12]
    5d46:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d48:	9b06      	ldr	r3, [sp, #24]
    5d4a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d4e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5d50:	4a54      	ldr	r2, [pc, #336]	; (5ea4 <Power_Ip_SMC_ModeConfig+0x198>)
    5d52:	9b06      	ldr	r3, [sp, #24]
    5d54:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5d56:	aa02      	add	r2, sp, #8
    5d58:	a903      	add	r1, sp, #12
    5d5a:	a804      	add	r0, sp, #16
    5d5c:	f24c 3350 	movw	r3, #50000	; 0xc350
    5d60:	f7ff fece 	bl	5b00 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5d64:	9a02      	ldr	r2, [sp, #8]
    5d66:	a903      	add	r1, sp, #12
    5d68:	ab04      	add	r3, sp, #16
    5d6a:	4618      	mov	r0, r3
    5d6c:	f7ff fee2 	bl	5b34 <Power_Ip_TimeoutExpired>
    5d70:	4603      	mov	r3, r0
    5d72:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5d76:	4b4b      	ldr	r3, [pc, #300]	; (5ea4 <Power_Ip_SMC_ModeConfig+0x198>)
    5d78:	695b      	ldr	r3, [r3, #20]
    5d7a:	f003 0301 	and.w	r3, r3, #1
    5d7e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5d80:	9b05      	ldr	r3, [sp, #20]
    5d82:	2b01      	cmp	r3, #1
    5d84:	d006      	beq.n	5d94 <Power_Ip_SMC_ModeConfig+0x88>
    5d86:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d8a:	f083 0301 	eor.w	r3, r3, #1
    5d8e:	b2db      	uxtb	r3, r3
    5d90:	2b00      	cmp	r3, #0
    5d92:	d1e7      	bne.n	5d64 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5d94:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d98:	2b00      	cmp	r3, #0
    5d9a:	d079      	beq.n	5e90 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5d9c:	2301      	movs	r3, #1
    5d9e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5da0:	21ff      	movs	r1, #255	; 0xff
    5da2:	2000      	movs	r0, #0
    5da4:	f7ff fe90 	bl	5ac8 <Power_Ip_ReportPowerErrors>
            }

            break;
    5da8:	e072      	b.n	5e90 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5daa:	4b3e      	ldr	r3, [pc, #248]	; (5ea4 <Power_Ip_SMC_ModeConfig+0x198>)
    5dac:	68db      	ldr	r3, [r3, #12]
    5dae:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5db0:	9b06      	ldr	r3, [sp, #24]
    5db2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5db6:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5db8:	9b06      	ldr	r3, [sp, #24]
    5dba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5dbe:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5dc0:	4a38      	ldr	r2, [pc, #224]	; (5ea4 <Power_Ip_SMC_ModeConfig+0x198>)
    5dc2:	9b06      	ldr	r3, [sp, #24]
    5dc4:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5dc6:	aa02      	add	r2, sp, #8
    5dc8:	a903      	add	r1, sp, #12
    5dca:	a804      	add	r0, sp, #16
    5dcc:	f24c 3350 	movw	r3, #50000	; 0xc350
    5dd0:	f7ff fe96 	bl	5b00 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5dd4:	9a02      	ldr	r2, [sp, #8]
    5dd6:	a903      	add	r1, sp, #12
    5dd8:	ab04      	add	r3, sp, #16
    5dda:	4618      	mov	r0, r3
    5ddc:	f7ff feaa 	bl	5b34 <Power_Ip_TimeoutExpired>
    5de0:	4603      	mov	r3, r0
    5de2:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5de6:	4b2f      	ldr	r3, [pc, #188]	; (5ea4 <Power_Ip_SMC_ModeConfig+0x198>)
    5de8:	695b      	ldr	r3, [r3, #20]
    5dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5dee:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5df0:	9b05      	ldr	r3, [sp, #20]
    5df2:	2b80      	cmp	r3, #128	; 0x80
    5df4:	d006      	beq.n	5e04 <Power_Ip_SMC_ModeConfig+0xf8>
    5df6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5dfa:	f083 0301 	eor.w	r3, r3, #1
    5dfe:	b2db      	uxtb	r3, r3
    5e00:	2b00      	cmp	r3, #0
    5e02:	d1e7      	bne.n	5dd4 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5e04:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e08:	2b00      	cmp	r3, #0
    5e0a:	d043      	beq.n	5e94 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e0c:	2301      	movs	r3, #1
    5e0e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5e10:	21ff      	movs	r1, #255	; 0xff
    5e12:	2000      	movs	r0, #0
    5e14:	f7ff fe58 	bl	5ac8 <Power_Ip_ReportPowerErrors>
            }

            break;
    5e18:	e03c      	b.n	5e94 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5e1a:	4b22      	ldr	r3, [pc, #136]	; (5ea4 <Power_Ip_SMC_ModeConfig+0x198>)
    5e1c:	68db      	ldr	r3, [r3, #12]
    5e1e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5e20:	9b06      	ldr	r3, [sp, #24]
    5e22:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5e26:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5e28:	9b06      	ldr	r3, [sp, #24]
    5e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5e2e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5e30:	4a1c      	ldr	r2, [pc, #112]	; (5ea4 <Power_Ip_SMC_ModeConfig+0x198>)
    5e32:	9b06      	ldr	r3, [sp, #24]
    5e34:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5e36:	aa02      	add	r2, sp, #8
    5e38:	a903      	add	r1, sp, #12
    5e3a:	a804      	add	r0, sp, #16
    5e3c:	f24c 3350 	movw	r3, #50000	; 0xc350
    5e40:	f7ff fe5e 	bl	5b00 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5e44:	9a02      	ldr	r2, [sp, #8]
    5e46:	a903      	add	r1, sp, #12
    5e48:	ab04      	add	r3, sp, #16
    5e4a:	4618      	mov	r0, r3
    5e4c:	f7ff fe72 	bl	5b34 <Power_Ip_TimeoutExpired>
    5e50:	4603      	mov	r3, r0
    5e52:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5e56:	4b13      	ldr	r3, [pc, #76]	; (5ea4 <Power_Ip_SMC_ModeConfig+0x198>)
    5e58:	695b      	ldr	r3, [r3, #20]
    5e5a:	f003 0304 	and.w	r3, r3, #4
    5e5e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5e60:	9b05      	ldr	r3, [sp, #20]
    5e62:	2b04      	cmp	r3, #4
    5e64:	d006      	beq.n	5e74 <Power_Ip_SMC_ModeConfig+0x168>
    5e66:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e6a:	f083 0301 	eor.w	r3, r3, #1
    5e6e:	b2db      	uxtb	r3, r3
    5e70:	2b00      	cmp	r3, #0
    5e72:	d1e7      	bne.n	5e44 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5e74:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e78:	2b00      	cmp	r3, #0
    5e7a:	d00d      	beq.n	5e98 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e7c:	2301      	movs	r3, #1
    5e7e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5e80:	21ff      	movs	r1, #255	; 0xff
    5e82:	2000      	movs	r0, #0
    5e84:	f7ff fe20 	bl	5ac8 <Power_Ip_ReportPowerErrors>
            }

            break;
    5e88:	e006      	b.n	5e98 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e8a:	2301      	movs	r3, #1
    5e8c:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5e8e:	e004      	b.n	5e9a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e90:	bf00      	nop
    5e92:	e002      	b.n	5e9a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e94:	bf00      	nop
    5e96:	e000      	b.n	5e9a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e98:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5e9c:	4618      	mov	r0, r3
    5e9e:	b00b      	add	sp, #44	; 0x2c
    5ea0:	f85d fb04 	ldr.w	pc, [sp], #4
    5ea4:	4007e000 	.word	0x4007e000

00005ea8 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5ea8:	b500      	push	{lr}
    5eaa:	b085      	sub	sp, #20
    5eac:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5eae:	9b01      	ldr	r3, [sp, #4]
    5eb0:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5eb2:	9803      	ldr	r0, [sp, #12]
    5eb4:	f000 fbc8 	bl	6648 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5eb8:	4a03      	ldr	r2, [pc, #12]	; (5ec8 <Port_Init+0x20>)
    5eba:	9b03      	ldr	r3, [sp, #12]
    5ebc:	6013      	str	r3, [r2, #0]
        }
    }
}
    5ebe:	bf00      	nop
    5ec0:	b005      	add	sp, #20
    5ec2:	f85d fb04 	ldr.w	pc, [sp], #4
    5ec6:	bf00      	nop
    5ec8:	1fff8cf4 	.word	0x1fff8cf4

00005ecc <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5ecc:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5ece:	4b03      	ldr	r3, [pc, #12]	; (5edc <Port_RefreshPortDirection+0x10>)
    5ed0:	681b      	ldr	r3, [r3, #0]
    5ed2:	4618      	mov	r0, r3
    5ed4:	f000 fc10 	bl	66f8 <Port_Ipw_RefreshPortDirection>
    }
}
    5ed8:	bf00      	nop
    5eda:	bd08      	pop	{r3, pc}
    5edc:	1fff8cf4 	.word	0x1fff8cf4

00005ee0 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5ee0:	b086      	sub	sp, #24
    5ee2:	9003      	str	r0, [sp, #12]
    5ee4:	9102      	str	r1, [sp, #8]
    5ee6:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5ee8:	23ff      	movs	r3, #255	; 0xff
    5eea:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5eec:	9b03      	ldr	r3, [sp, #12]
    5eee:	4a39      	ldr	r2, [pc, #228]	; (5fd4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5ef0:	4293      	cmp	r3, r2
    5ef2:	d151      	bne.n	5f98 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5ef4:	9b02      	ldr	r3, [sp, #8]
    5ef6:	2b10      	cmp	r3, #16
    5ef8:	d867      	bhi.n	5fca <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5efa:	a201      	add	r2, pc, #4	; (adr r2, 5f00 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5f00:	00005f45 	.word	0x00005f45
    5f04:	00005f53 	.word	0x00005f53
    5f08:	00005fcb 	.word	0x00005fcb
    5f0c:	00005fcb 	.word	0x00005fcb
    5f10:	00005fcb 	.word	0x00005fcb
    5f14:	00005fcb 	.word	0x00005fcb
    5f18:	00005fcb 	.word	0x00005fcb
    5f1c:	00005fcb 	.word	0x00005fcb
    5f20:	00005fcb 	.word	0x00005fcb
    5f24:	00005fcb 	.word	0x00005fcb
    5f28:	00005fcb 	.word	0x00005fcb
    5f2c:	00005fcb 	.word	0x00005fcb
    5f30:	00005fcb 	.word	0x00005fcb
    5f34:	00005f61 	.word	0x00005f61
    5f38:	00005f6f 	.word	0x00005f6f
    5f3c:	00005f7d 	.word	0x00005f7d
    5f40:	00005f8b 	.word	0x00005f8b
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5f44:	2301      	movs	r3, #1
    5f46:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f48:	9a05      	ldr	r2, [sp, #20]
    5f4a:	9b01      	ldr	r3, [sp, #4]
    5f4c:	4313      	orrs	r3, r2
    5f4e:	9305      	str	r3, [sp, #20]
                break;
    5f50:	e03c      	b.n	5fcc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5f52:	2302      	movs	r3, #2
    5f54:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f56:	9a05      	ldr	r2, [sp, #20]
    5f58:	9b01      	ldr	r3, [sp, #4]
    5f5a:	4313      	orrs	r3, r2
    5f5c:	9305      	str	r3, [sp, #20]
                break;
    5f5e:	e035      	b.n	5fcc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5f60:	2304      	movs	r3, #4
    5f62:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f64:	9a05      	ldr	r2, [sp, #20]
    5f66:	9b01      	ldr	r3, [sp, #4]
    5f68:	4313      	orrs	r3, r2
    5f6a:	9305      	str	r3, [sp, #20]
                break;
    5f6c:	e02e      	b.n	5fcc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5f6e:	2308      	movs	r3, #8
    5f70:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f72:	9a05      	ldr	r2, [sp, #20]
    5f74:	9b01      	ldr	r3, [sp, #4]
    5f76:	4313      	orrs	r3, r2
    5f78:	9305      	str	r3, [sp, #20]
                break;
    5f7a:	e027      	b.n	5fcc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5f7c:	230e      	movs	r3, #14
    5f7e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f80:	9a05      	ldr	r2, [sp, #20]
    5f82:	9b01      	ldr	r3, [sp, #4]
    5f84:	4013      	ands	r3, r2
    5f86:	9305      	str	r3, [sp, #20]
                break;
    5f88:	e020      	b.n	5fcc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5f8a:	230d      	movs	r3, #13
    5f8c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f8e:	9a05      	ldr	r2, [sp, #20]
    5f90:	9b01      	ldr	r3, [sp, #4]
    5f92:	4013      	ands	r3, r2
    5f94:	9305      	str	r3, [sp, #20]
                break;
    5f96:	e019      	b.n	5fcc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5f98:	9b03      	ldr	r3, [sp, #12]
    5f9a:	4a0f      	ldr	r2, [pc, #60]	; (5fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5f9c:	4293      	cmp	r3, r2
    5f9e:	d115      	bne.n	5fcc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5fa0:	9b02      	ldr	r3, [sp, #8]
    5fa2:	2b00      	cmp	r3, #0
    5fa4:	d003      	beq.n	5fae <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5fa6:	9b02      	ldr	r3, [sp, #8]
    5fa8:	2b01      	cmp	r3, #1
    5faa:	d007      	beq.n	5fbc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5fac:	e00e      	b.n	5fcc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5fae:	230b      	movs	r3, #11
    5fb0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5fb2:	9a05      	ldr	r2, [sp, #20]
    5fb4:	9b01      	ldr	r3, [sp, #4]
    5fb6:	4013      	ands	r3, r2
    5fb8:	9305      	str	r3, [sp, #20]
                break;
    5fba:	e007      	b.n	5fcc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5fbc:	2307      	movs	r3, #7
    5fbe:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5fc0:	9a05      	ldr	r2, [sp, #20]
    5fc2:	9b01      	ldr	r3, [sp, #4]
    5fc4:	4013      	ands	r3, r2
    5fc6:	9305      	str	r3, [sp, #20]
                break;
    5fc8:	e000      	b.n	5fcc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5fca:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5fcc:	9b05      	ldr	r3, [sp, #20]
}
    5fce:	4618      	mov	r0, r3
    5fd0:	b006      	add	sp, #24
    5fd2:	4770      	bx	lr
    5fd4:	4004a000 	.word	0x4004a000
    5fd8:	4004b000 	.word	0x4004b000

00005fdc <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5fdc:	b500      	push	{lr}
    5fde:	b089      	sub	sp, #36	; 0x24
    5fe0:	9003      	str	r0, [sp, #12]
    5fe2:	9102      	str	r1, [sp, #8]
    5fe4:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5fe6:	9b01      	ldr	r3, [sp, #4]
    5fe8:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5fea:	9b01      	ldr	r3, [sp, #4]
    5fec:	2b08      	cmp	r3, #8
    5fee:	d121      	bne.n	6034 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5ff0:	4b13      	ldr	r3, [pc, #76]	; (6040 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5ff2:	685b      	ldr	r3, [r3, #4]
    5ff4:	f003 030f 	and.w	r3, r3, #15
    5ff8:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5ffa:	9a06      	ldr	r2, [sp, #24]
    5ffc:	9902      	ldr	r1, [sp, #8]
    5ffe:	9803      	ldr	r0, [sp, #12]
    6000:	f7ff ff6e 	bl	5ee0 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6004:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    6006:	9b05      	ldr	r3, [sp, #20]
    6008:	2bff      	cmp	r3, #255	; 0xff
    600a:	d011      	beq.n	6030 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    600c:	f002 fd38 	bl	8a80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6010:	4b0b      	ldr	r3, [pc, #44]	; (6040 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6012:	685b      	ldr	r3, [r3, #4]
    6014:	4a0a      	ldr	r2, [pc, #40]	; (6040 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6016:	f023 030f 	bic.w	r3, r3, #15
    601a:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    601c:	4b08      	ldr	r3, [pc, #32]	; (6040 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    601e:	685a      	ldr	r2, [r3, #4]
    6020:	9b05      	ldr	r3, [sp, #20]
    6022:	f003 030f 	and.w	r3, r3, #15
    6026:	4906      	ldr	r1, [pc, #24]	; (6040 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6028:	4313      	orrs	r3, r2
    602a:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    602c:	f002 fd54 	bl	8ad8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6030:	2300      	movs	r3, #0
    6032:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6034:	9b07      	ldr	r3, [sp, #28]
}
    6036:	4618      	mov	r0, r3
    6038:	b009      	add	sp, #36	; 0x24
    603a:	f85d fb04 	ldr.w	pc, [sp], #4
    603e:	bf00      	nop
    6040:	40048000 	.word	0x40048000

00006044 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6044:	b500      	push	{lr}
    6046:	b087      	sub	sp, #28
    6048:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    604a:	2300      	movs	r3, #0
    604c:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    604e:	2300      	movs	r3, #0
    6050:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    6052:	2300      	movs	r3, #0
    6054:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    6056:	9b01      	ldr	r3, [sp, #4]
    6058:	68db      	ldr	r3, [r3, #12]
    605a:	2b02      	cmp	r3, #2
    605c:	d00a      	beq.n	6074 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    605e:	9b05      	ldr	r3, [sp, #20]
    6060:	f043 0302 	orr.w	r3, r3, #2
    6064:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    6066:	9b01      	ldr	r3, [sp, #4]
    6068:	68db      	ldr	r3, [r3, #12]
    606a:	f003 0301 	and.w	r3, r3, #1
    606e:	9a05      	ldr	r2, [sp, #20]
    6070:	4313      	orrs	r3, r2
    6072:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    6074:	9b01      	ldr	r3, [sp, #4]
    6076:	699b      	ldr	r3, [r3, #24]
    6078:	019b      	lsls	r3, r3, #6
    607a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    607e:	9a05      	ldr	r2, [sp, #20]
    6080:	4313      	orrs	r3, r2
    6082:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    6084:	9b01      	ldr	r3, [sp, #4]
    6086:	6a1b      	ldr	r3, [r3, #32]
    6088:	03db      	lsls	r3, r3, #15
    608a:	b29b      	uxth	r3, r3
    608c:	9a05      	ldr	r2, [sp, #20]
    608e:	4313      	orrs	r3, r2
    6090:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    6092:	9b01      	ldr	r3, [sp, #4]
    6094:	7f1b      	ldrb	r3, [r3, #28]
    6096:	2b00      	cmp	r3, #0
    6098:	d001      	beq.n	609e <Port_Ci_Port_Ip_PinInit+0x5a>
    609a:	2310      	movs	r3, #16
    609c:	e000      	b.n	60a0 <Port_Ci_Port_Ip_PinInit+0x5c>
    609e:	2300      	movs	r3, #0
    60a0:	9a05      	ldr	r2, [sp, #20]
    60a2:	4313      	orrs	r3, r2
    60a4:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    60a6:	9b01      	ldr	r3, [sp, #4]
    60a8:	691b      	ldr	r3, [r3, #16]
    60aa:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    60ac:	9b01      	ldr	r3, [sp, #4]
    60ae:	6818      	ldr	r0, [r3, #0]
    60b0:	9b01      	ldr	r3, [sp, #4]
    60b2:	689b      	ldr	r3, [r3, #8]
    60b4:	9a04      	ldr	r2, [sp, #16]
    60b6:	4619      	mov	r1, r3
    60b8:	f7ff ff90 	bl	5fdc <Port_Ci_Port_Ip_ConfigureInterleave>
    60bc:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    60be:	9b03      	ldr	r3, [sp, #12]
    60c0:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    60c2:	9b04      	ldr	r3, [sp, #16]
    60c4:	021b      	lsls	r3, r3, #8
    60c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    60ca:	9a05      	ldr	r2, [sp, #20]
    60cc:	4313      	orrs	r3, r2
    60ce:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    60d0:	f002 fb3c 	bl	874c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    60d4:	9b01      	ldr	r3, [sp, #4]
    60d6:	681b      	ldr	r3, [r3, #0]
    60d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    60dc:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    60de:	9b01      	ldr	r3, [sp, #4]
    60e0:	689b      	ldr	r3, [r3, #8]
    60e2:	2201      	movs	r2, #1
    60e4:	fa02 f303 	lsl.w	r3, r2, r3
    60e8:	43db      	mvns	r3, r3
    60ea:	9a02      	ldr	r2, [sp, #8]
    60ec:	4013      	ands	r3, r2
    60ee:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    60f0:	9b01      	ldr	r3, [sp, #4]
    60f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    60f6:	2b00      	cmp	r3, #0
    60f8:	d001      	beq.n	60fe <Port_Ci_Port_Ip_PinInit+0xba>
    60fa:	2201      	movs	r2, #1
    60fc:	e000      	b.n	6100 <Port_Ci_Port_Ip_PinInit+0xbc>
    60fe:	2200      	movs	r2, #0
    6100:	9b01      	ldr	r3, [sp, #4]
    6102:	689b      	ldr	r3, [r3, #8]
    6104:	fa02 f303 	lsl.w	r3, r2, r3
    6108:	9a02      	ldr	r2, [sp, #8]
    610a:	4313      	orrs	r3, r2
    610c:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    610e:	9b01      	ldr	r3, [sp, #4]
    6110:	681b      	ldr	r3, [r3, #0]
    6112:	9a02      	ldr	r2, [sp, #8]
    6114:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6118:	f002 fb44 	bl	87a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    611c:	9b04      	ldr	r3, [sp, #16]
    611e:	2b01      	cmp	r3, #1
    6120:	d16d      	bne.n	61fe <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6122:	9b01      	ldr	r3, [sp, #4]
    6124:	695b      	ldr	r3, [r3, #20]
    6126:	2b02      	cmp	r3, #2
    6128:	d138      	bne.n	619c <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    612a:	9b01      	ldr	r3, [sp, #4]
    612c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6130:	2b01      	cmp	r3, #1
    6132:	d10f      	bne.n	6154 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6134:	f002 fb5c 	bl	87f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6138:	9b01      	ldr	r3, [sp, #4]
    613a:	685b      	ldr	r3, [r3, #4]
    613c:	6859      	ldr	r1, [r3, #4]
    613e:	9b01      	ldr	r3, [sp, #4]
    6140:	689b      	ldr	r3, [r3, #8]
    6142:	2201      	movs	r2, #1
    6144:	409a      	lsls	r2, r3
    6146:	9b01      	ldr	r3, [sp, #4]
    6148:	685b      	ldr	r3, [r3, #4]
    614a:	430a      	orrs	r2, r1
    614c:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    614e:	f002 fb7b 	bl	8848 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    6152:	e013      	b.n	617c <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6154:	9b01      	ldr	r3, [sp, #4]
    6156:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    615a:	2b00      	cmp	r3, #0
    615c:	d10e      	bne.n	617c <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    615e:	f002 fb99 	bl	8894 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    6162:	9b01      	ldr	r3, [sp, #4]
    6164:	685b      	ldr	r3, [r3, #4]
    6166:	6899      	ldr	r1, [r3, #8]
    6168:	9b01      	ldr	r3, [sp, #4]
    616a:	689b      	ldr	r3, [r3, #8]
    616c:	2201      	movs	r2, #1
    616e:	409a      	lsls	r2, r3
    6170:	9b01      	ldr	r3, [sp, #4]
    6172:	685b      	ldr	r3, [r3, #4]
    6174:	430a      	orrs	r2, r1
    6176:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6178:	f002 fbb8 	bl	88ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    617c:	f002 fbdc 	bl	8938 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6180:	9b01      	ldr	r3, [sp, #4]
    6182:	685b      	ldr	r3, [r3, #4]
    6184:	6959      	ldr	r1, [r3, #20]
    6186:	9b01      	ldr	r3, [sp, #4]
    6188:	689b      	ldr	r3, [r3, #8]
    618a:	2201      	movs	r2, #1
    618c:	409a      	lsls	r2, r3
    618e:	9b01      	ldr	r3, [sp, #4]
    6190:	685b      	ldr	r3, [r3, #4]
    6192:	430a      	orrs	r2, r1
    6194:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6196:	f002 fbfb 	bl	8990 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    619a:	e030      	b.n	61fe <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    619c:	f002 fbcc 	bl	8938 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    61a0:	9b01      	ldr	r3, [sp, #4]
    61a2:	685b      	ldr	r3, [r3, #4]
    61a4:	6959      	ldr	r1, [r3, #20]
    61a6:	9b01      	ldr	r3, [sp, #4]
    61a8:	689b      	ldr	r3, [r3, #8]
    61aa:	2201      	movs	r2, #1
    61ac:	fa02 f303 	lsl.w	r3, r2, r3
    61b0:	43da      	mvns	r2, r3
    61b2:	9b01      	ldr	r3, [sp, #4]
    61b4:	685b      	ldr	r3, [r3, #4]
    61b6:	400a      	ands	r2, r1
    61b8:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    61ba:	f002 fbe9 	bl	8990 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    61be:	f002 fc0d 	bl	89dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    61c2:	9b01      	ldr	r3, [sp, #4]
    61c4:	685b      	ldr	r3, [r3, #4]
    61c6:	6999      	ldr	r1, [r3, #24]
    61c8:	9b01      	ldr	r3, [sp, #4]
    61ca:	689b      	ldr	r3, [r3, #8]
    61cc:	2201      	movs	r2, #1
    61ce:	fa02 f303 	lsl.w	r3, r2, r3
    61d2:	43da      	mvns	r2, r3
    61d4:	9b01      	ldr	r3, [sp, #4]
    61d6:	685b      	ldr	r3, [r3, #4]
    61d8:	400a      	ands	r2, r1
    61da:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    61dc:	9b01      	ldr	r3, [sp, #4]
    61de:	695b      	ldr	r3, [r3, #20]
    61e0:	2b03      	cmp	r3, #3
    61e2:	d10a      	bne.n	61fa <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    61e4:	9b01      	ldr	r3, [sp, #4]
    61e6:	685b      	ldr	r3, [r3, #4]
    61e8:	6999      	ldr	r1, [r3, #24]
    61ea:	9b01      	ldr	r3, [sp, #4]
    61ec:	689b      	ldr	r3, [r3, #8]
    61ee:	2201      	movs	r2, #1
    61f0:	409a      	lsls	r2, r3
    61f2:	9b01      	ldr	r3, [sp, #4]
    61f4:	685b      	ldr	r3, [r3, #4]
    61f6:	430a      	orrs	r2, r1
    61f8:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    61fa:	f002 fc1b 	bl	8a34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    61fe:	9b01      	ldr	r3, [sp, #4]
    6200:	681b      	ldr	r3, [r3, #0]
    6202:	9a01      	ldr	r2, [sp, #4]
    6204:	6892      	ldr	r2, [r2, #8]
    6206:	9905      	ldr	r1, [sp, #20]
    6208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    620c:	bf00      	nop
    620e:	b007      	add	sp, #28
    6210:	f85d fb04 	ldr.w	pc, [sp], #4

00006214 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6214:	b500      	push	{lr}
    6216:	b085      	sub	sp, #20
    6218:	9001      	str	r0, [sp, #4]
    621a:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    621c:	2300      	movs	r3, #0
    621e:	9303      	str	r3, [sp, #12]
    6220:	e00d      	b.n	623e <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6222:	9a03      	ldr	r2, [sp, #12]
    6224:	4613      	mov	r3, r2
    6226:	009b      	lsls	r3, r3, #2
    6228:	4413      	add	r3, r2
    622a:	00db      	lsls	r3, r3, #3
    622c:	461a      	mov	r2, r3
    622e:	9b00      	ldr	r3, [sp, #0]
    6230:	4413      	add	r3, r2
    6232:	4618      	mov	r0, r3
    6234:	f7ff ff06 	bl	6044 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6238:	9b03      	ldr	r3, [sp, #12]
    623a:	3301      	adds	r3, #1
    623c:	9303      	str	r3, [sp, #12]
    623e:	9a03      	ldr	r2, [sp, #12]
    6240:	9b01      	ldr	r3, [sp, #4]
    6242:	429a      	cmp	r2, r3
    6244:	d3ed      	bcc.n	6222 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    6246:	2300      	movs	r3, #0
}
    6248:	4618      	mov	r0, r3
    624a:	b005      	add	sp, #20
    624c:	f85d fb04 	ldr.w	pc, [sp], #4

00006250 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6250:	b500      	push	{lr}
    6252:	b087      	sub	sp, #28
    6254:	9003      	str	r0, [sp, #12]
    6256:	9102      	str	r1, [sp, #8]
    6258:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    625a:	9a01      	ldr	r2, [sp, #4]
    625c:	9902      	ldr	r1, [sp, #8]
    625e:	9803      	ldr	r0, [sp, #12]
    6260:	f7ff febc 	bl	5fdc <Port_Ci_Port_Ip_ConfigureInterleave>
    6264:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    6266:	f002 fc5d 	bl	8b24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    626a:	9b03      	ldr	r3, [sp, #12]
    626c:	9a02      	ldr	r2, [sp, #8]
    626e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6272:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    6274:	9b04      	ldr	r3, [sp, #16]
    6276:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    627a:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    627c:	9b05      	ldr	r3, [sp, #20]
    627e:	021b      	lsls	r3, r3, #8
    6280:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6284:	9a04      	ldr	r2, [sp, #16]
    6286:	4313      	orrs	r3, r2
    6288:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    628a:	9b03      	ldr	r3, [sp, #12]
    628c:	9a02      	ldr	r2, [sp, #8]
    628e:	9904      	ldr	r1, [sp, #16]
    6290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6294:	f002 fc72 	bl	8b7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6298:	bf00      	nop
    629a:	b007      	add	sp, #28
    629c:	f85d fb04 	ldr.w	pc, [sp], #4

000062a0 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    62a0:	b500      	push	{lr}
    62a2:	b083      	sub	sp, #12
    62a4:	9001      	str	r0, [sp, #4]
    62a6:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    62a8:	f002 fc8e 	bl	8bc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    62ac:	9b01      	ldr	r3, [sp, #4]
    62ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    62b2:	2101      	movs	r1, #1
    62b4:	9b00      	ldr	r3, [sp, #0]
    62b6:	fa01 f303 	lsl.w	r3, r1, r3
    62ba:	431a      	orrs	r2, r3
    62bc:	9b01      	ldr	r3, [sp, #4]
    62be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    62c2:	f002 fcad 	bl	8c20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    62c6:	bf00      	nop
    62c8:	b003      	add	sp, #12
    62ca:	f85d fb04 	ldr.w	pc, [sp], #4

000062ce <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    62ce:	b500      	push	{lr}
    62d0:	b083      	sub	sp, #12
    62d2:	9001      	str	r0, [sp, #4]
    62d4:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    62d6:	f002 fcc9 	bl	8c6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    62da:	9b01      	ldr	r3, [sp, #4]
    62dc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    62e0:	2101      	movs	r1, #1
    62e2:	9b00      	ldr	r3, [sp, #0]
    62e4:	fa01 f303 	lsl.w	r3, r1, r3
    62e8:	43db      	mvns	r3, r3
    62ea:	401a      	ands	r2, r3
    62ec:	9b01      	ldr	r3, [sp, #4]
    62ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    62f2:	f002 fce7 	bl	8cc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    62f6:	bf00      	nop
    62f8:	b003      	add	sp, #12
    62fa:	f85d fb04 	ldr.w	pc, [sp], #4

000062fe <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    62fe:	b082      	sub	sp, #8
    6300:	9001      	str	r0, [sp, #4]
    6302:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6304:	9b00      	ldr	r3, [sp, #0]
    6306:	785b      	ldrb	r3, [r3, #1]
    6308:	f003 0201 	and.w	r2, r3, #1
    630c:	9b01      	ldr	r3, [sp, #4]
    630e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6312:	9b00      	ldr	r3, [sp, #0]
    6314:	789b      	ldrb	r3, [r3, #2]
    6316:	f003 021f 	and.w	r2, r3, #31
    631a:	9b01      	ldr	r3, [sp, #4]
    631c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6320:	bf00      	nop
    6322:	b002      	add	sp, #8
    6324:	4770      	bx	lr

00006326 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6326:	b086      	sub	sp, #24
    6328:	9003      	str	r0, [sp, #12]
    632a:	9301      	str	r3, [sp, #4]
    632c:	460b      	mov	r3, r1
    632e:	f8ad 300a 	strh.w	r3, [sp, #10]
    6332:	4613      	mov	r3, r2
    6334:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6338:	2300      	movs	r3, #0
    633a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    633e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6342:	f043 0301 	orr.w	r3, r3, #1
    6346:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    634a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    634e:	f043 0302 	orr.w	r3, r3, #2
    6352:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    6356:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    635a:	f043 0310 	orr.w	r3, r3, #16
    635e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    6362:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    636a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    636e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6372:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    6376:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    637a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    637e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    6382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    6386:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    638a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    638e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6392:	4013      	ands	r3, r2
    6394:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6398:	9b01      	ldr	r3, [sp, #4]
    639a:	2b00      	cmp	r3, #0
    639c:	d003      	beq.n	63a6 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    639e:	9b01      	ldr	r3, [sp, #4]
    63a0:	2b01      	cmp	r3, #1
    63a2:	d00a      	beq.n	63ba <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    63a4:	e013      	b.n	63ce <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    63a6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    63aa:	041a      	lsls	r2, r3, #16
    63ac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63b0:	431a      	orrs	r2, r3
    63b2:	9b03      	ldr	r3, [sp, #12]
    63b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    63b8:	e009      	b.n	63ce <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    63ba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    63be:	041a      	lsls	r2, r3, #16
    63c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63c4:	431a      	orrs	r2, r3
    63c6:	9b03      	ldr	r3, [sp, #12]
    63c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    63cc:	bf00      	nop
    }
}
    63ce:	bf00      	nop
    63d0:	b006      	add	sp, #24
    63d2:	4770      	bx	lr

000063d4 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    63d4:	b500      	push	{lr}
    63d6:	b087      	sub	sp, #28
    63d8:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    63da:	9b01      	ldr	r3, [sp, #4]
    63dc:	885b      	ldrh	r3, [r3, #2]
    63de:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    63e2:	9b01      	ldr	r3, [sp, #4]
    63e4:	689b      	ldr	r3, [r3, #8]
    63e6:	7a1b      	ldrb	r3, [r3, #8]
    63e8:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    63ec:	9b01      	ldr	r3, [sp, #4]
    63ee:	689b      	ldr	r3, [r3, #8]
    63f0:	681b      	ldr	r3, [r3, #0]
    63f2:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    63f4:	9b01      	ldr	r3, [sp, #4]
    63f6:	689b      	ldr	r3, [r3, #8]
    63f8:	685b      	ldr	r3, [r3, #4]
    63fa:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    63fc:	2300      	movs	r3, #0
    63fe:	f8ad 3016 	strh.w	r3, [sp, #22]
    6402:	e111      	b.n	6628 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6404:	9b02      	ldr	r3, [sp, #8]
    6406:	2b02      	cmp	r3, #2
    6408:	d169      	bne.n	64de <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    640a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    640e:	2b01      	cmp	r3, #1
    6410:	d11a      	bne.n	6448 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6412:	9b01      	ldr	r3, [sp, #4]
    6414:	685a      	ldr	r2, [r3, #4]
    6416:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    641a:	005b      	lsls	r3, r3, #1
    641c:	4413      	add	r3, r2
    641e:	881b      	ldrh	r3, [r3, #0]
    6420:	f003 021f 	and.w	r2, r3, #31
    6424:	9b01      	ldr	r3, [sp, #4]
    6426:	6859      	ldr	r1, [r3, #4]
    6428:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    642c:	005b      	lsls	r3, r3, #1
    642e:	440b      	add	r3, r1
    6430:	881b      	ldrh	r3, [r3, #0]
    6432:	095b      	lsrs	r3, r3, #5
    6434:	b29b      	uxth	r3, r3
    6436:	4619      	mov	r1, r3
    6438:	4b81      	ldr	r3, [pc, #516]	; (6640 <Port_Ipw_Init_UnusedPins+0x26c>)
    643a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    643e:	2101      	movs	r1, #1
    6440:	fa01 f202 	lsl.w	r2, r1, r2
    6444:	605a      	str	r2, [r3, #4]
    6446:	e01d      	b.n	6484 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6448:	f89d 3013 	ldrb.w	r3, [sp, #19]
    644c:	2b00      	cmp	r3, #0
    644e:	d119      	bne.n	6484 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6450:	9b01      	ldr	r3, [sp, #4]
    6452:	685a      	ldr	r2, [r3, #4]
    6454:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6458:	005b      	lsls	r3, r3, #1
    645a:	4413      	add	r3, r2
    645c:	881b      	ldrh	r3, [r3, #0]
    645e:	f003 021f 	and.w	r2, r3, #31
    6462:	9b01      	ldr	r3, [sp, #4]
    6464:	6859      	ldr	r1, [r3, #4]
    6466:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    646a:	005b      	lsls	r3, r3, #1
    646c:	440b      	add	r3, r1
    646e:	881b      	ldrh	r3, [r3, #0]
    6470:	095b      	lsrs	r3, r3, #5
    6472:	b29b      	uxth	r3, r3
    6474:	4619      	mov	r1, r3
    6476:	4b72      	ldr	r3, [pc, #456]	; (6640 <Port_Ipw_Init_UnusedPins+0x26c>)
    6478:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    647c:	2101      	movs	r1, #1
    647e:	fa01 f202 	lsl.w	r2, r1, r2
    6482:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6484:	f002 fc44 	bl	8d10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6488:	9b01      	ldr	r3, [sp, #4]
    648a:	685a      	ldr	r2, [r3, #4]
    648c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6490:	005b      	lsls	r3, r3, #1
    6492:	4413      	add	r3, r2
    6494:	881b      	ldrh	r3, [r3, #0]
    6496:	095b      	lsrs	r3, r3, #5
    6498:	b29b      	uxth	r3, r3
    649a:	461a      	mov	r2, r3
    649c:	4b68      	ldr	r3, [pc, #416]	; (6640 <Port_Ipw_Init_UnusedPins+0x26c>)
    649e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64a2:	6959      	ldr	r1, [r3, #20]
    64a4:	9b01      	ldr	r3, [sp, #4]
    64a6:	685a      	ldr	r2, [r3, #4]
    64a8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64ac:	005b      	lsls	r3, r3, #1
    64ae:	4413      	add	r3, r2
    64b0:	881b      	ldrh	r3, [r3, #0]
    64b2:	f003 031f 	and.w	r3, r3, #31
    64b6:	2201      	movs	r2, #1
    64b8:	409a      	lsls	r2, r3
    64ba:	9b01      	ldr	r3, [sp, #4]
    64bc:	6858      	ldr	r0, [r3, #4]
    64be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64c2:	005b      	lsls	r3, r3, #1
    64c4:	4403      	add	r3, r0
    64c6:	881b      	ldrh	r3, [r3, #0]
    64c8:	095b      	lsrs	r3, r3, #5
    64ca:	b29b      	uxth	r3, r3
    64cc:	4618      	mov	r0, r3
    64ce:	4b5c      	ldr	r3, [pc, #368]	; (6640 <Port_Ipw_Init_UnusedPins+0x26c>)
    64d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    64d4:	430a      	orrs	r2, r1
    64d6:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    64d8:	f002 fc46 	bl	8d68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    64dc:	e086      	b.n	65ec <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    64de:	f002 fc17 	bl	8d10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    64e2:	9b01      	ldr	r3, [sp, #4]
    64e4:	685a      	ldr	r2, [r3, #4]
    64e6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64ea:	005b      	lsls	r3, r3, #1
    64ec:	4413      	add	r3, r2
    64ee:	881b      	ldrh	r3, [r3, #0]
    64f0:	095b      	lsrs	r3, r3, #5
    64f2:	b29b      	uxth	r3, r3
    64f4:	461a      	mov	r2, r3
    64f6:	4b52      	ldr	r3, [pc, #328]	; (6640 <Port_Ipw_Init_UnusedPins+0x26c>)
    64f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64fc:	6959      	ldr	r1, [r3, #20]
    64fe:	9b01      	ldr	r3, [sp, #4]
    6500:	685a      	ldr	r2, [r3, #4]
    6502:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6506:	005b      	lsls	r3, r3, #1
    6508:	4413      	add	r3, r2
    650a:	881b      	ldrh	r3, [r3, #0]
    650c:	f003 031f 	and.w	r3, r3, #31
    6510:	2201      	movs	r2, #1
    6512:	fa02 f303 	lsl.w	r3, r2, r3
    6516:	43da      	mvns	r2, r3
    6518:	9b01      	ldr	r3, [sp, #4]
    651a:	6858      	ldr	r0, [r3, #4]
    651c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6520:	005b      	lsls	r3, r3, #1
    6522:	4403      	add	r3, r0
    6524:	881b      	ldrh	r3, [r3, #0]
    6526:	095b      	lsrs	r3, r3, #5
    6528:	b29b      	uxth	r3, r3
    652a:	4618      	mov	r0, r3
    652c:	4b44      	ldr	r3, [pc, #272]	; (6640 <Port_Ipw_Init_UnusedPins+0x26c>)
    652e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6532:	400a      	ands	r2, r1
    6534:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6536:	f002 fc17 	bl	8d68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    653a:	f002 fc3b 	bl	8db4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    653e:	9b01      	ldr	r3, [sp, #4]
    6540:	685a      	ldr	r2, [r3, #4]
    6542:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6546:	005b      	lsls	r3, r3, #1
    6548:	4413      	add	r3, r2
    654a:	881b      	ldrh	r3, [r3, #0]
    654c:	095b      	lsrs	r3, r3, #5
    654e:	b29b      	uxth	r3, r3
    6550:	461a      	mov	r2, r3
    6552:	4b3b      	ldr	r3, [pc, #236]	; (6640 <Port_Ipw_Init_UnusedPins+0x26c>)
    6554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6558:	6999      	ldr	r1, [r3, #24]
    655a:	9b01      	ldr	r3, [sp, #4]
    655c:	685a      	ldr	r2, [r3, #4]
    655e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6562:	005b      	lsls	r3, r3, #1
    6564:	4413      	add	r3, r2
    6566:	881b      	ldrh	r3, [r3, #0]
    6568:	f003 031f 	and.w	r3, r3, #31
    656c:	2201      	movs	r2, #1
    656e:	fa02 f303 	lsl.w	r3, r2, r3
    6572:	43da      	mvns	r2, r3
    6574:	9b01      	ldr	r3, [sp, #4]
    6576:	6858      	ldr	r0, [r3, #4]
    6578:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    657c:	005b      	lsls	r3, r3, #1
    657e:	4403      	add	r3, r0
    6580:	881b      	ldrh	r3, [r3, #0]
    6582:	095b      	lsrs	r3, r3, #5
    6584:	b29b      	uxth	r3, r3
    6586:	4618      	mov	r0, r3
    6588:	4b2d      	ldr	r3, [pc, #180]	; (6640 <Port_Ipw_Init_UnusedPins+0x26c>)
    658a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    658e:	400a      	ands	r2, r1
    6590:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6592:	9b02      	ldr	r3, [sp, #8]
    6594:	2b03      	cmp	r3, #3
    6596:	d127      	bne.n	65e8 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6598:	9b01      	ldr	r3, [sp, #4]
    659a:	685a      	ldr	r2, [r3, #4]
    659c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65a0:	005b      	lsls	r3, r3, #1
    65a2:	4413      	add	r3, r2
    65a4:	881b      	ldrh	r3, [r3, #0]
    65a6:	095b      	lsrs	r3, r3, #5
    65a8:	b29b      	uxth	r3, r3
    65aa:	461a      	mov	r2, r3
    65ac:	4b24      	ldr	r3, [pc, #144]	; (6640 <Port_Ipw_Init_UnusedPins+0x26c>)
    65ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    65b2:	6999      	ldr	r1, [r3, #24]
    65b4:	9b01      	ldr	r3, [sp, #4]
    65b6:	685a      	ldr	r2, [r3, #4]
    65b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65bc:	005b      	lsls	r3, r3, #1
    65be:	4413      	add	r3, r2
    65c0:	881b      	ldrh	r3, [r3, #0]
    65c2:	f003 031f 	and.w	r3, r3, #31
    65c6:	2201      	movs	r2, #1
    65c8:	409a      	lsls	r2, r3
    65ca:	9b01      	ldr	r3, [sp, #4]
    65cc:	6858      	ldr	r0, [r3, #4]
    65ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65d2:	005b      	lsls	r3, r3, #1
    65d4:	4403      	add	r3, r0
    65d6:	881b      	ldrh	r3, [r3, #0]
    65d8:	095b      	lsrs	r3, r3, #5
    65da:	b29b      	uxth	r3, r3
    65dc:	4618      	mov	r0, r3
    65de:	4b18      	ldr	r3, [pc, #96]	; (6640 <Port_Ipw_Init_UnusedPins+0x26c>)
    65e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    65e4:	430a      	orrs	r2, r1
    65e6:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    65e8:	f002 fc10 	bl	8e0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    65ec:	9b01      	ldr	r3, [sp, #4]
    65ee:	685a      	ldr	r2, [r3, #4]
    65f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65f4:	005b      	lsls	r3, r3, #1
    65f6:	4413      	add	r3, r2
    65f8:	881b      	ldrh	r3, [r3, #0]
    65fa:	095b      	lsrs	r3, r3, #5
    65fc:	b29b      	uxth	r3, r3
    65fe:	461a      	mov	r2, r3
    6600:	4b10      	ldr	r3, [pc, #64]	; (6644 <Port_Ipw_Init_UnusedPins+0x270>)
    6602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6606:	9a01      	ldr	r2, [sp, #4]
    6608:	6851      	ldr	r1, [r2, #4]
    660a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    660e:	0052      	lsls	r2, r2, #1
    6610:	440a      	add	r2, r1
    6612:	8812      	ldrh	r2, [r2, #0]
    6614:	f002 021f 	and.w	r2, r2, #31
    6618:	9903      	ldr	r1, [sp, #12]
    661a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    661e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6622:	3301      	adds	r3, #1
    6624:	f8ad 3016 	strh.w	r3, [sp, #22]
    6628:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    662c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6630:	429a      	cmp	r2, r3
    6632:	f4ff aee7 	bcc.w	6404 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6636:	bf00      	nop
    6638:	bf00      	nop
    663a:	b007      	add	sp, #28
    663c:	f85d fb04 	ldr.w	pc, [sp], #4
    6640:	0000ad58 	.word	0x0000ad58
    6644:	0000ad44 	.word	0x0000ad44

00006648 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6648:	b500      	push	{lr}
    664a:	b085      	sub	sp, #20
    664c:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    664e:	9b01      	ldr	r3, [sp, #4]
    6650:	7c1b      	ldrb	r3, [r3, #16]
    6652:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6656:	2300      	movs	r3, #0
    6658:	f8ad 300e 	strh.w	r3, [sp, #14]
    665c:	e035      	b.n	66ca <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    665e:	9b01      	ldr	r3, [sp, #4]
    6660:	695a      	ldr	r2, [r3, #20]
    6662:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6666:	00db      	lsls	r3, r3, #3
    6668:	4413      	add	r3, r2
    666a:	781b      	ldrb	r3, [r3, #0]
    666c:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6670:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6674:	4a1f      	ldr	r2, [pc, #124]	; (66f4 <Port_Ipw_Init+0xac>)
    6676:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    667a:	9b01      	ldr	r3, [sp, #4]
    667c:	695a      	ldr	r2, [r3, #20]
    667e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6682:	00db      	lsls	r3, r3, #3
    6684:	4413      	add	r3, r2
    6686:	4619      	mov	r1, r3
    6688:	f7ff fe39 	bl	62fe <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    668c:	f002 fd2c 	bl	90e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6690:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6694:	4a17      	ldr	r2, [pc, #92]	; (66f4 <Port_Ipw_Init+0xac>)
    6696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    669a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    669e:	9b01      	ldr	r3, [sp, #4]
    66a0:	695a      	ldr	r2, [r3, #20]
    66a2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    66a6:	00db      	lsls	r3, r3, #3
    66a8:	4413      	add	r3, r2
    66aa:	685a      	ldr	r2, [r3, #4]
    66ac:	f89d 300c 	ldrb.w	r3, [sp, #12]
    66b0:	4810      	ldr	r0, [pc, #64]	; (66f4 <Port_Ipw_Init+0xac>)
    66b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    66b6:	430a      	orrs	r2, r1
    66b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    66bc:	f002 fd40 	bl	9140 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    66c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    66c4:	3301      	adds	r3, #1
    66c6:	f8ad 300e 	strh.w	r3, [sp, #14]
    66ca:	f89d 300d 	ldrb.w	r3, [sp, #13]
    66ce:	b29b      	uxth	r3, r3
    66d0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66d4:	429a      	cmp	r2, r3
    66d6:	d3c2      	bcc.n	665e <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    66d8:	9b01      	ldr	r3, [sp, #4]
    66da:	6a1b      	ldr	r3, [r3, #32]
    66dc:	4619      	mov	r1, r3
    66de:	2005      	movs	r0, #5
    66e0:	f7ff fd98 	bl	6214 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    66e4:	9801      	ldr	r0, [sp, #4]
    66e6:	f7ff fe75 	bl	63d4 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    66ea:	bf00      	nop
    66ec:	b005      	add	sp, #20
    66ee:	f85d fb04 	ldr.w	pc, [sp], #4
    66f2:	bf00      	nop
    66f4:	0000ad44 	.word	0x0000ad44

000066f8 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    66f8:	b500      	push	{lr}
    66fa:	b085      	sub	sp, #20
    66fc:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    66fe:	9b01      	ldr	r3, [sp, #4]
    6700:	881b      	ldrh	r3, [r3, #0]
    6702:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6706:	2300      	movs	r3, #0
    6708:	f8ad 300e 	strh.w	r3, [sp, #14]
    670c:	e0d2      	b.n	68b4 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    670e:	9b01      	ldr	r3, [sp, #4]
    6710:	68d9      	ldr	r1, [r3, #12]
    6712:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6716:	4613      	mov	r3, r2
    6718:	009b      	lsls	r3, r3, #2
    671a:	4413      	add	r3, r2
    671c:	009b      	lsls	r3, r3, #2
    671e:	440b      	add	r3, r1
    6720:	7c5b      	ldrb	r3, [r3, #17]
    6722:	f083 0301 	eor.w	r3, r3, #1
    6726:	b2db      	uxtb	r3, r3
    6728:	2b00      	cmp	r3, #0
    672a:	f000 80be 	beq.w	68aa <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    672e:	9b01      	ldr	r3, [sp, #4]
    6730:	68d9      	ldr	r1, [r3, #12]
    6732:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6736:	4613      	mov	r3, r2
    6738:	009b      	lsls	r3, r3, #2
    673a:	4413      	add	r3, r2
    673c:	009b      	lsls	r3, r3, #2
    673e:	440b      	add	r3, r1
    6740:	7c1b      	ldrb	r3, [r3, #16]
    6742:	2b00      	cmp	r3, #0
    6744:	f000 80b1 	beq.w	68aa <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    6748:	9b01      	ldr	r3, [sp, #4]
    674a:	68d9      	ldr	r1, [r3, #12]
    674c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6750:	4613      	mov	r3, r2
    6752:	009b      	lsls	r3, r3, #2
    6754:	4413      	add	r3, r2
    6756:	009b      	lsls	r3, r3, #2
    6758:	440b      	add	r3, r1
    675a:	881b      	ldrh	r3, [r3, #0]
    675c:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6760:	9b01      	ldr	r3, [sp, #4]
    6762:	68d9      	ldr	r1, [r3, #12]
    6764:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6768:	4613      	mov	r3, r2
    676a:	009b      	lsls	r3, r3, #2
    676c:	4413      	add	r3, r2
    676e:	009b      	lsls	r3, r3, #2
    6770:	440b      	add	r3, r1
    6772:	68db      	ldr	r3, [r3, #12]
    6774:	2b02      	cmp	r3, #2
    6776:	d11d      	bne.n	67b4 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6778:	f002 fdfe 	bl	9378 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    677c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6780:	095b      	lsrs	r3, r3, #5
    6782:	b29b      	uxth	r3, r3
    6784:	461a      	mov	r2, r3
    6786:	4b51      	ldr	r3, [pc, #324]	; (68cc <Port_Ipw_RefreshPortDirection+0x1d4>)
    6788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    678c:	6959      	ldr	r1, [r3, #20]
    678e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6792:	f003 031f 	and.w	r3, r3, #31
    6796:	2201      	movs	r2, #1
    6798:	409a      	lsls	r2, r3
    679a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    679e:	095b      	lsrs	r3, r3, #5
    67a0:	b29b      	uxth	r3, r3
    67a2:	4618      	mov	r0, r3
    67a4:	4b49      	ldr	r3, [pc, #292]	; (68cc <Port_Ipw_RefreshPortDirection+0x1d4>)
    67a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67aa:	430a      	orrs	r2, r1
    67ac:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    67ae:	f002 fe0f 	bl	93d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    67b2:	e07a      	b.n	68aa <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    67b4:	9b01      	ldr	r3, [sp, #4]
    67b6:	68d9      	ldr	r1, [r3, #12]
    67b8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67bc:	4613      	mov	r3, r2
    67be:	009b      	lsls	r3, r3, #2
    67c0:	4413      	add	r3, r2
    67c2:	009b      	lsls	r3, r3, #2
    67c4:	440b      	add	r3, r1
    67c6:	68db      	ldr	r3, [r3, #12]
    67c8:	2b01      	cmp	r3, #1
    67ca:	d00b      	beq.n	67e4 <Port_Ipw_RefreshPortDirection+0xec>
    67cc:	9b01      	ldr	r3, [sp, #4]
    67ce:	68d9      	ldr	r1, [r3, #12]
    67d0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67d4:	4613      	mov	r3, r2
    67d6:	009b      	lsls	r3, r3, #2
    67d8:	4413      	add	r3, r2
    67da:	009b      	lsls	r3, r3, #2
    67dc:	440b      	add	r3, r1
    67de:	68db      	ldr	r3, [r3, #12]
    67e0:	2b03      	cmp	r3, #3
    67e2:	d162      	bne.n	68aa <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    67e4:	f002 fdc8 	bl	9378 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    67e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67ec:	095b      	lsrs	r3, r3, #5
    67ee:	b29b      	uxth	r3, r3
    67f0:	461a      	mov	r2, r3
    67f2:	4b36      	ldr	r3, [pc, #216]	; (68cc <Port_Ipw_RefreshPortDirection+0x1d4>)
    67f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    67f8:	6959      	ldr	r1, [r3, #20]
    67fa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67fe:	f003 031f 	and.w	r3, r3, #31
    6802:	2201      	movs	r2, #1
    6804:	fa02 f303 	lsl.w	r3, r2, r3
    6808:	43da      	mvns	r2, r3
    680a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    680e:	095b      	lsrs	r3, r3, #5
    6810:	b29b      	uxth	r3, r3
    6812:	4618      	mov	r0, r3
    6814:	4b2d      	ldr	r3, [pc, #180]	; (68cc <Port_Ipw_RefreshPortDirection+0x1d4>)
    6816:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    681a:	400a      	ands	r2, r1
    681c:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    681e:	f002 fdd7 	bl	93d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    6822:	f002 fdfb 	bl	941c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6826:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    682a:	095b      	lsrs	r3, r3, #5
    682c:	b29b      	uxth	r3, r3
    682e:	461a      	mov	r2, r3
    6830:	4b26      	ldr	r3, [pc, #152]	; (68cc <Port_Ipw_RefreshPortDirection+0x1d4>)
    6832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6836:	6999      	ldr	r1, [r3, #24]
    6838:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    683c:	f003 031f 	and.w	r3, r3, #31
    6840:	2201      	movs	r2, #1
    6842:	fa02 f303 	lsl.w	r3, r2, r3
    6846:	43da      	mvns	r2, r3
    6848:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    684c:	095b      	lsrs	r3, r3, #5
    684e:	b29b      	uxth	r3, r3
    6850:	4618      	mov	r0, r3
    6852:	4b1e      	ldr	r3, [pc, #120]	; (68cc <Port_Ipw_RefreshPortDirection+0x1d4>)
    6854:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6858:	400a      	ands	r2, r1
    685a:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    685c:	9b01      	ldr	r3, [sp, #4]
    685e:	68d9      	ldr	r1, [r3, #12]
    6860:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6864:	4613      	mov	r3, r2
    6866:	009b      	lsls	r3, r3, #2
    6868:	4413      	add	r3, r2
    686a:	009b      	lsls	r3, r3, #2
    686c:	440b      	add	r3, r1
    686e:	68db      	ldr	r3, [r3, #12]
    6870:	2b03      	cmp	r3, #3
    6872:	d118      	bne.n	68a6 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6874:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6878:	095b      	lsrs	r3, r3, #5
    687a:	b29b      	uxth	r3, r3
    687c:	461a      	mov	r2, r3
    687e:	4b13      	ldr	r3, [pc, #76]	; (68cc <Port_Ipw_RefreshPortDirection+0x1d4>)
    6880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6884:	6999      	ldr	r1, [r3, #24]
    6886:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    688a:	f003 031f 	and.w	r3, r3, #31
    688e:	2201      	movs	r2, #1
    6890:	409a      	lsls	r2, r3
    6892:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6896:	095b      	lsrs	r3, r3, #5
    6898:	b29b      	uxth	r3, r3
    689a:	4618      	mov	r0, r3
    689c:	4b0b      	ldr	r3, [pc, #44]	; (68cc <Port_Ipw_RefreshPortDirection+0x1d4>)
    689e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    68a2:	430a      	orrs	r2, r1
    68a4:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    68a6:	f002 fde5 	bl	9474 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    68aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    68ae:	3301      	adds	r3, #1
    68b0:	f8ad 300e 	strh.w	r3, [sp, #14]
    68b4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    68b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    68bc:	429a      	cmp	r2, r3
    68be:	f4ff af26 	bcc.w	670e <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    68c2:	bf00      	nop
    68c4:	bf00      	nop
    68c6:	b005      	add	sp, #20
    68c8:	f85d fb04 	ldr.w	pc, [sp], #4
    68cc:	0000ad58 	.word	0x0000ad58

000068d0 <Lpspi_Ip_ChannelFinished>:
* @param[in]     Instance            Index of the hardware instance.
* @param[in]     ErrorFlag           Save the status of transfer error flags
* @return void
*/
static void Lpspi_Ip_ChannelFinished(uint8 Instance, boolean ErrorFlag)
{
    68d0:	b500      	push	{lr}
    68d2:	b085      	sub	sp, #20
    68d4:	4603      	mov	r3, r0
    68d6:	460a      	mov	r2, r1
    68d8:	f88d 3007 	strb.w	r3, [sp, #7]
    68dc:	4613      	mov	r3, r2
    68de:	f88d 3006 	strb.w	r3, [sp, #6]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    68e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68e6:	4a12      	ldr	r2, [pc, #72]	; (6930 <Lpspi_Ip_ChannelFinished+0x60>)
    68e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68ec:	9302      	str	r3, [sp, #8]
    Lpspi_Ip_EventType EventState = LPSPI_IP_EVENT_FAULT;
    68ee:	2301      	movs	r3, #1
    68f0:	9303      	str	r3, [sp, #12]
    
    if(TRUE == ErrorFlag)
    68f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    68f6:	2b00      	cmp	r3, #0
    68f8:	d005      	beq.n	6906 <Lpspi_Ip_ChannelFinished+0x36>
    {
        State->Status = LPSPI_IP_FAULT;
    68fa:	9b02      	ldr	r3, [sp, #8]
    68fc:	2203      	movs	r2, #3
    68fe:	605a      	str	r2, [r3, #4]
        EventState = LPSPI_IP_EVENT_FAULT;
    6900:	2301      	movs	r3, #1
    6902:	9303      	str	r3, [sp, #12]
    6904:	e004      	b.n	6910 <Lpspi_Ip_ChannelFinished+0x40>
    }
    else
    {
        State->Status = LPSPI_IP_IDLE;
    6906:	9b02      	ldr	r3, [sp, #8]
    6908:	2201      	movs	r2, #1
    690a:	605a      	str	r2, [r3, #4]
        EventState = LPSPI_IP_EVENT_END_TRANSFER;
    690c:	2300      	movs	r3, #0
    690e:	9303      	str	r3, [sp, #12]
    }

    if (NULL_PTR != State->Callback)
    6910:	9b02      	ldr	r3, [sp, #8]
    6912:	691b      	ldr	r3, [r3, #16]
    6914:	2b00      	cmp	r3, #0
    6916:	d006      	beq.n	6926 <Lpspi_Ip_ChannelFinished+0x56>
    {
        State->Callback(Instance, EventState);
    6918:	9b02      	ldr	r3, [sp, #8]
    691a:	691b      	ldr	r3, [r3, #16]
    691c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6920:	9903      	ldr	r1, [sp, #12]
    6922:	4610      	mov	r0, r2
    6924:	4798      	blx	r3
    }
}
    6926:	bf00      	nop
    6928:	b005      	add	sp, #20
    692a:	f85d fb04 	ldr.w	pc, [sp], #4
    692e:	bf00      	nop
    6930:	1fff8d38 	.word	0x1fff8d38

00006934 <Lpspi_Ip_TransferProcess>:
*
* @param[in]     Instance      Index of the hardware instance.
* @return void
*/
static void Lpspi_Ip_TransferProcess(uint8 Instance)
{
    6934:	b510      	push	{r4, lr}
    6936:	b092      	sub	sp, #72	; 0x48
    6938:	4603      	mov	r3, r0
    693a:	f88d 300f 	strb.w	r3, [sp, #15]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    693e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6942:	4aad      	ldr	r2, [pc, #692]	; (6bf8 <Lpspi_Ip_TransferProcess+0x2c4>)
    6944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6948:	9310      	str	r3, [sp, #64]	; 0x40
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    694a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    694e:	4aab      	ldr	r2, [pc, #684]	; (6bfc <Lpspi_Ip_TransferProcess+0x2c8>)
    6950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6954:	930f      	str	r3, [sp, #60]	; 0x3c
    uint32 SrStatusRegister;
    uint8 NumberOfWrites = 0u;
    6956:	2300      	movs	r3, #0
    6958:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    uint8 NumberOfReads = 0u;
    695c:	2300      	movs	r3, #0
    695e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    boolean ErrorFlag = FALSE;
    6962:	2300      	movs	r3, #0
    6964:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45

    if (LPSPI_IP_BUSY == State->Status)
    6968:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    696a:	685b      	ldr	r3, [r3, #4]
    696c:	2b02      	cmp	r3, #2
    696e:	f040 821e 	bne.w	6dae <Lpspi_Ip_TransferProcess+0x47a>
    {
        /* Read Status and clear all flags. */
        SrStatusRegister = Base->SR;
    6972:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6974:	695b      	ldr	r3, [r3, #20]
    6976:	930e      	str	r3, [sp, #56]	; 0x38
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    6978:	9b10      	ldr	r3, [sp, #64]	; 0x40
    697a:	695b      	ldr	r3, [r3, #20]
    697c:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    6980:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6982:	615a      	str	r2, [r3, #20]
        
        if ((SrStatusRegister & (LPSPI_SR_REF_MASK | LPSPI_SR_TEF_MASK)) != 0u)
    6984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6986:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    698a:	2b00      	cmp	r3, #0
    698c:	d003      	beq.n	6996 <Lpspi_Ip_TransferProcess+0x62>
        {
            /* mark error flag */
            ErrorFlag = TRUE;
    698e:	2301      	movs	r3, #1
    6990:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    6994:	e1f6      	b.n	6d84 <Lpspi_Ip_TransferProcess+0x450>
        }
        else
        {
            /* RECEIVE */
            /* Read all Data available in receive HW fifo. */
            NumberOfReads = (uint8)(((Base->FSR) & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
    6996:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    699a:	0c1b      	lsrs	r3, r3, #16
    699c:	b2db      	uxtb	r3, r3
    699e:	f003 0307 	and.w	r3, r3, #7
    69a2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
            if (NumberOfReads != 0u)
    69a6:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    69aa:	2b00      	cmp	r3, #0
    69ac:	f000 80cb 	beq.w	6b46 <Lpspi_Ip_TransferProcess+0x212>
            {
                if (NumberOfReads > (State->ExpectedFifoReads - State->RxIndex))
    69b0:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
    69b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69b6:	8b1b      	ldrh	r3, [r3, #24]
    69b8:	4619      	mov	r1, r3
    69ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69bc:	8a9b      	ldrh	r3, [r3, #20]
    69be:	1acb      	subs	r3, r1, r3
    69c0:	429a      	cmp	r2, r3
    69c2:	dd08      	ble.n	69d6 <Lpspi_Ip_TransferProcess+0xa2>
                {
                    NumberOfReads = (uint8)(State->ExpectedFifoReads - State->RxIndex);
    69c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69c6:	8b1b      	ldrh	r3, [r3, #24]
    69c8:	b2da      	uxtb	r2, r3
    69ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69cc:	8a9b      	ldrh	r3, [r3, #20]
    69ce:	b2db      	uxtb	r3, r3
    69d0:	1ad3      	subs	r3, r2, r3
    69d2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
                }
                /* If these are the first frames of this channel. Current TXFIFO slot must be plus 1 because the slot of CMD have moved out and
                  CurrentTxFifoSlot was minus 1 when prepare TX channel */
                if (0u == State->RxIndex)
    69d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69d8:	8a9b      	ldrh	r3, [r3, #20]
    69da:	2b00      	cmp	r3, #0
    69dc:	d107      	bne.n	69ee <Lpspi_Ip_TransferProcess+0xba>
                {
                    State->CurrentTxFifoSlot += 1u;
    69de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    69e4:	3301      	adds	r3, #1
    69e6:	b2da      	uxtb	r2, r3
    69e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    69ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    69f2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    69f6:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    69fa:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    const LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    69fe:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    6a02:	4a7d      	ldr	r2, [pc, #500]	; (6bf8 <Lpspi_Ip_TransferProcess+0x2c4>)
    6a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a08:	930c      	str	r3, [sp, #48]	; 0x30
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    6a0a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    6a0e:	4a7b      	ldr	r2, [pc, #492]	; (6bfc <Lpspi_Ip_TransferProcess+0x2c8>)
    6a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a14:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 Data = 0u;
    6a16:	2300      	movs	r3, #0
    6a18:	930a      	str	r3, [sp, #40]	; 0x28
    uint8 Index = 0u;
    6a1a:	2300      	movs	r3, #0
    6a1c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    if (NULL_PTR != State->RxBuffer)
    6a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a22:	689b      	ldr	r3, [r3, #8]
    6a24:	2b00      	cmp	r3, #0
    6a26:	d069      	beq.n	6afc <Lpspi_Ip_TransferProcess+0x1c8>
        if (State->ExternalDevice->DeviceParams->FrameSize < 9u)
    6a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a2c:	68db      	ldr	r3, [r3, #12]
    6a2e:	881b      	ldrh	r3, [r3, #0]
    6a30:	2b08      	cmp	r3, #8
    6a32:	d81e      	bhi.n	6a72 <Lpspi_Ip_TransferProcess+0x13e>
            for (Index = 0; Index < NumberOfReads; Index++)
    6a34:	2300      	movs	r3, #0
    6a36:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6a3a:	e013      	b.n	6a64 <Lpspi_Ip_TransferProcess+0x130>
                Data = Base->RDR;
    6a3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    6a40:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint8*)(&State->RxBuffer[State->RxIndex + Index])) = (uint8)Data;
    6a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a44:	689b      	ldr	r3, [r3, #8]
    6a46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6a48:	8a92      	ldrh	r2, [r2, #20]
    6a4a:	4611      	mov	r1, r2
    6a4c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    6a50:	440a      	add	r2, r1
    6a52:	4413      	add	r3, r2
    6a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6a56:	b2d2      	uxtb	r2, r2
    6a58:	701a      	strb	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    6a5a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6a5e:	3301      	adds	r3, #1
    6a60:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6a64:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    6a68:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6a6c:	429a      	cmp	r2, r3
    6a6e:	d8e5      	bhi.n	6a3c <Lpspi_Ip_TransferProcess+0x108>
    6a70:	e055      	b.n	6b1e <Lpspi_Ip_TransferProcess+0x1ea>
        else if (State->ExternalDevice->DeviceParams->FrameSize < 17u)
    6a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a76:	68db      	ldr	r3, [r3, #12]
    6a78:	881b      	ldrh	r3, [r3, #0]
    6a7a:	2b10      	cmp	r3, #16
    6a7c:	d81f      	bhi.n	6abe <Lpspi_Ip_TransferProcess+0x18a>
            for (Index = 0; Index < NumberOfReads; Index++)
    6a7e:	2300      	movs	r3, #0
    6a80:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6a84:	e014      	b.n	6ab0 <Lpspi_Ip_TransferProcess+0x17c>
                Data = Base->RDR;
    6a86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    6a8a:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint16*)(&State->RxBuffer[2u * (State->RxIndex + Index)])) = (uint16)Data;
    6a8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a8e:	689a      	ldr	r2, [r3, #8]
    6a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a92:	8a9b      	ldrh	r3, [r3, #20]
    6a94:	4619      	mov	r1, r3
    6a96:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6a9a:	440b      	add	r3, r1
    6a9c:	005b      	lsls	r3, r3, #1
    6a9e:	4413      	add	r3, r2
    6aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6aa2:	b292      	uxth	r2, r2
    6aa4:	801a      	strh	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    6aa6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6aaa:	3301      	adds	r3, #1
    6aac:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6ab0:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    6ab4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6ab8:	429a      	cmp	r2, r3
    6aba:	d8e4      	bhi.n	6a86 <Lpspi_Ip_TransferProcess+0x152>
    6abc:	e02f      	b.n	6b1e <Lpspi_Ip_TransferProcess+0x1ea>
            for (Index = 0; Index < NumberOfReads; Index++)
    6abe:	2300      	movs	r3, #0
    6ac0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6ac4:	e013      	b.n	6aee <Lpspi_Ip_TransferProcess+0x1ba>
                Data = Base->RDR;
    6ac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    6aca:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint32*)(&State->RxBuffer[4u * (State->RxIndex + Index)])) = (uint32)Data;
    6acc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6ace:	689a      	ldr	r2, [r3, #8]
    6ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6ad2:	8a9b      	ldrh	r3, [r3, #20]
    6ad4:	4619      	mov	r1, r3
    6ad6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6ada:	440b      	add	r3, r1
    6adc:	009b      	lsls	r3, r3, #2
    6ade:	4413      	add	r3, r2
    6ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6ae2:	601a      	str	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    6ae4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6ae8:	3301      	adds	r3, #1
    6aea:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6aee:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    6af2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6af6:	429a      	cmp	r2, r3
    6af8:	d8e5      	bhi.n	6ac6 <Lpspi_Ip_TransferProcess+0x192>
    6afa:	e010      	b.n	6b1e <Lpspi_Ip_TransferProcess+0x1ea>
        for (Index = 0; Index < NumberOfReads; Index++)
    6afc:	2300      	movs	r3, #0
    6afe:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6b02:	e006      	b.n	6b12 <Lpspi_Ip_TransferProcess+0x1de>
            (void)Base->RDR;
    6b04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        for (Index = 0; Index < NumberOfReads; Index++)
    6b08:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6b0c:	3301      	adds	r3, #1
    6b0e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6b12:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    6b16:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6b1a:	429a      	cmp	r2, r3
    6b1c:	d8f2      	bhi.n	6b04 <Lpspi_Ip_TransferProcess+0x1d0>
    State->RxIndex += NumberOfReads;
    6b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6b20:	8a9a      	ldrh	r2, [r3, #20]
    6b22:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    6b26:	b29b      	uxth	r3, r3
    6b28:	4413      	add	r3, r2
    6b2a:	b29a      	uxth	r2, r3
    6b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6b2e:	829a      	strh	r2, [r3, #20]
}
    6b30:	bf00      	nop
                }
                /* Read Data from RX FIFO */
                Lpspi_Ip_ReadDataFromFifo(Instance, NumberOfReads);
                /* Update current FIFO slots are available to fill .*/
                State->CurrentTxFifoSlot += NumberOfReads;
    6b32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b34:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    6b38:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    6b3c:	4413      	add	r3, r2
    6b3e:	b2da      	uxtb	r2, r3
    6b40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            to fill TX FIFO. At that time, another interrupt occurred and preemptive current interrupt, and the time to process that interrupt is longer than the time to transfer all frames 
            in TX FIFO. So TX FIFO will be empty and some frames received in RX FIFO, then the program is returned from that interrupt and fill TX FIFO until full and exist SPI interrupt function. 
            And if there is a interrupt occurred with higher priority of SPI interrupt and the time to process that interrupt is longer than the time to transfer all frames in TX FIFO. 
            So, RX FIFO can be overflow due to SPI interrupt function is not serviced to read RX FIFO.
            State->CurrentTxFifoSlot variable is used to hanlde number of frames are "on bus transfer". They are always less than FIFO size */
            if((State->CurrentTxFifoSlot != 0u) && (State->TxDoneFlag != TRUE))
    6b46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    6b4c:	2b00      	cmp	r3, #0
    6b4e:	f000 8119 	beq.w	6d84 <Lpspi_Ip_TransferProcess+0x450>
    6b52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    6b58:	f083 0301 	eor.w	r3, r3, #1
    6b5c:	b2db      	uxtb	r3, r3
    6b5e:	2b00      	cmp	r3, #0
    6b60:	f000 8110 	beq.w	6d84 <Lpspi_Ip_TransferProcess+0x450>
            {
                if(State->ExpectedFifoWrites != State->TxIndex)
    6b64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b66:	8b5a      	ldrh	r2, [r3, #26]
    6b68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b6a:	8adb      	ldrh	r3, [r3, #22]
    6b6c:	429a      	cmp	r2, r3
    6b6e:	f000 80ca 	beq.w	6d06 <Lpspi_Ip_TransferProcess+0x3d2>
                {
                    NumberOfWrites = State->CurrentTxFifoSlot;
    6b72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    6b78:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
                    /* Limits to remaining frames. */
                    if (NumberOfWrites > (State->ExpectedFifoWrites - State->TxIndex))
    6b7c:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
    6b80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b82:	8b5b      	ldrh	r3, [r3, #26]
    6b84:	4619      	mov	r1, r3
    6b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b88:	8adb      	ldrh	r3, [r3, #22]
    6b8a:	1acb      	subs	r3, r1, r3
    6b8c:	429a      	cmp	r2, r3
    6b8e:	dd08      	ble.n	6ba2 <Lpspi_Ip_TransferProcess+0x26e>
                    {
                        NumberOfWrites = (uint8)(State->ExpectedFifoWrites - State->TxIndex);
    6b90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b92:	8b5b      	ldrh	r3, [r3, #26]
    6b94:	b2da      	uxtb	r2, r3
    6b96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b98:	8adb      	ldrh	r3, [r3, #22]
    6b9a:	b2db      	uxtb	r3, r3
    6b9c:	1ad3      	subs	r3, r2, r3
    6b9e:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    6ba2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6ba6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    6baa:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    6bae:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    6bb2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    6bb6:	4a10      	ldr	r2, [pc, #64]	; (6bf8 <Lpspi_Ip_TransferProcess+0x2c4>)
    6bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bbc:	9308      	str	r3, [sp, #32]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    6bbe:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    6bc2:	4a0e      	ldr	r2, [pc, #56]	; (6bfc <Lpspi_Ip_TransferProcess+0x2c8>)
    6bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bc8:	9307      	str	r3, [sp, #28]
    uint32 Data = 0u;
    6bca:	2300      	movs	r3, #0
    6bcc:	9306      	str	r3, [sp, #24]
    uint8 Index = 0u;
    6bce:	2300      	movs	r3, #0
    6bd0:	f88d 3017 	strb.w	r3, [sp, #23]
    Data = State->ExternalDevice->DeviceParams->DefaultData;
    6bd4:	9b07      	ldr	r3, [sp, #28]
    6bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6bd8:	68db      	ldr	r3, [r3, #12]
    6bda:	685b      	ldr	r3, [r3, #4]
    6bdc:	9306      	str	r3, [sp, #24]
    if (NULL_PTR != State->TxBuffer)
    6bde:	9b07      	ldr	r3, [sp, #28]
    6be0:	68db      	ldr	r3, [r3, #12]
    6be2:	2b00      	cmp	r3, #0
    6be4:	d068      	beq.n	6cb8 <Lpspi_Ip_TransferProcess+0x384>
        if (State->TxFrameSize < 9u)
    6be6:	9b07      	ldr	r3, [sp, #28]
    6be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    6bea:	2b08      	cmp	r3, #8
    6bec:	d822      	bhi.n	6c34 <Lpspi_Ip_TransferProcess+0x300>
            for (Index = 0; Index < NumberOfWrites; Index++)
    6bee:	2300      	movs	r3, #0
    6bf0:	f88d 3017 	strb.w	r3, [sp, #23]
    6bf4:	e017      	b.n	6c26 <Lpspi_Ip_TransferProcess+0x2f2>
    6bf6:	bf00      	nop
    6bf8:	0000ad6c 	.word	0x0000ad6c
    6bfc:	1fff8d38 	.word	0x1fff8d38
                Data = *((const uint8*)(&State->TxBuffer[State->TxIndex + Index]));
    6c00:	9b07      	ldr	r3, [sp, #28]
    6c02:	68db      	ldr	r3, [r3, #12]
    6c04:	9a07      	ldr	r2, [sp, #28]
    6c06:	8ad2      	ldrh	r2, [r2, #22]
    6c08:	4611      	mov	r1, r2
    6c0a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    6c0e:	440a      	add	r2, r1
    6c10:	4413      	add	r3, r2
    6c12:	781b      	ldrb	r3, [r3, #0]
    6c14:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    6c16:	9b08      	ldr	r3, [sp, #32]
    6c18:	9a06      	ldr	r2, [sp, #24]
    6c1a:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    6c1c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c20:	3301      	adds	r3, #1
    6c22:	f88d 3017 	strb.w	r3, [sp, #23]
    6c26:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    6c2a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c2e:	429a      	cmp	r2, r3
    6c30:	d8e6      	bhi.n	6c00 <Lpspi_Ip_TransferProcess+0x2cc>
    6c32:	e053      	b.n	6cdc <Lpspi_Ip_TransferProcess+0x3a8>
        else if (State->TxFrameSize < 17u)
    6c34:	9b07      	ldr	r3, [sp, #28]
    6c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    6c38:	2b10      	cmp	r3, #16
    6c3a:	d81e      	bhi.n	6c7a <Lpspi_Ip_TransferProcess+0x346>
            for (Index = 0; Index < NumberOfWrites; Index++)
    6c3c:	2300      	movs	r3, #0
    6c3e:	f88d 3017 	strb.w	r3, [sp, #23]
    6c42:	e013      	b.n	6c6c <Lpspi_Ip_TransferProcess+0x338>
                Data = *((const uint16*)(&State->TxBuffer[2u * (State->TxIndex + Index)]));
    6c44:	9b07      	ldr	r3, [sp, #28]
    6c46:	68da      	ldr	r2, [r3, #12]
    6c48:	9b07      	ldr	r3, [sp, #28]
    6c4a:	8adb      	ldrh	r3, [r3, #22]
    6c4c:	4619      	mov	r1, r3
    6c4e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c52:	440b      	add	r3, r1
    6c54:	005b      	lsls	r3, r3, #1
    6c56:	4413      	add	r3, r2
    6c58:	881b      	ldrh	r3, [r3, #0]
    6c5a:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    6c5c:	9b08      	ldr	r3, [sp, #32]
    6c5e:	9a06      	ldr	r2, [sp, #24]
    6c60:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    6c62:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c66:	3301      	adds	r3, #1
    6c68:	f88d 3017 	strb.w	r3, [sp, #23]
    6c6c:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    6c70:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c74:	429a      	cmp	r2, r3
    6c76:	d8e5      	bhi.n	6c44 <Lpspi_Ip_TransferProcess+0x310>
    6c78:	e030      	b.n	6cdc <Lpspi_Ip_TransferProcess+0x3a8>
            for (Index = 0; Index < NumberOfWrites; Index++)
    6c7a:	2300      	movs	r3, #0
    6c7c:	f88d 3017 	strb.w	r3, [sp, #23]
    6c80:	e013      	b.n	6caa <Lpspi_Ip_TransferProcess+0x376>
                Data = *((const uint32*)(&State->TxBuffer[4u * (State->TxIndex + Index)]));
    6c82:	9b07      	ldr	r3, [sp, #28]
    6c84:	68da      	ldr	r2, [r3, #12]
    6c86:	9b07      	ldr	r3, [sp, #28]
    6c88:	8adb      	ldrh	r3, [r3, #22]
    6c8a:	4619      	mov	r1, r3
    6c8c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c90:	440b      	add	r3, r1
    6c92:	009b      	lsls	r3, r3, #2
    6c94:	4413      	add	r3, r2
    6c96:	681b      	ldr	r3, [r3, #0]
    6c98:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    6c9a:	9b08      	ldr	r3, [sp, #32]
    6c9c:	9a06      	ldr	r2, [sp, #24]
    6c9e:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    6ca0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6ca4:	3301      	adds	r3, #1
    6ca6:	f88d 3017 	strb.w	r3, [sp, #23]
    6caa:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    6cae:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6cb2:	429a      	cmp	r2, r3
    6cb4:	d8e5      	bhi.n	6c82 <Lpspi_Ip_TransferProcess+0x34e>
    6cb6:	e011      	b.n	6cdc <Lpspi_Ip_TransferProcess+0x3a8>
        for (Index = 0; Index < NumberOfWrites; Index++)
    6cb8:	2300      	movs	r3, #0
    6cba:	f88d 3017 	strb.w	r3, [sp, #23]
    6cbe:	e007      	b.n	6cd0 <Lpspi_Ip_TransferProcess+0x39c>
            Base->TDR = Data;
    6cc0:	9b08      	ldr	r3, [sp, #32]
    6cc2:	9a06      	ldr	r2, [sp, #24]
    6cc4:	665a      	str	r2, [r3, #100]	; 0x64
        for (Index = 0; Index < NumberOfWrites; Index++)
    6cc6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6cca:	3301      	adds	r3, #1
    6ccc:	f88d 3017 	strb.w	r3, [sp, #23]
    6cd0:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    6cd4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6cd8:	429a      	cmp	r2, r3
    6cda:	d8f1      	bhi.n	6cc0 <Lpspi_Ip_TransferProcess+0x38c>
    State->TxIndex += NumberOfWrites;
    6cdc:	9b07      	ldr	r3, [sp, #28]
    6cde:	8ada      	ldrh	r2, [r3, #22]
    6ce0:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    6ce4:	b29b      	uxth	r3, r3
    6ce6:	4413      	add	r3, r2
    6ce8:	b29a      	uxth	r2, r3
    6cea:	9b07      	ldr	r3, [sp, #28]
    6cec:	82da      	strh	r2, [r3, #22]
}
    6cee:	bf00      	nop
                    }
                    /* Push Data into TX FIFO */
                    Lpspi_Ip_PushDataToFifo(Instance, NumberOfWrites);
                    State->CurrentTxFifoSlot -= NumberOfWrites;
    6cf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6cf2:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    6cf6:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    6cfa:	1ad3      	subs	r3, r2, r3
    6cfc:	b2da      	uxtb	r2, r3
    6cfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    6d04:	e03e      	b.n	6d84 <Lpspi_Ip_TransferProcess+0x450>
                }
                else
                {
                    if(TRUE == State->NextTransferConfigAvailable)
    6d06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d08:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    6d0c:	2b00      	cmp	r3, #0
    6d0e:	d01c      	beq.n	6d4a <Lpspi_Ip_TransferProcess+0x416>
                    {
                        /* Initialize next transfer */
                        State->ExternalDevice->DeviceParams->DefaultData = State->DefaultDataNext;
    6d10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6d14:	68db      	ldr	r3, [r3, #12]
    6d16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6d18:	6b52      	ldr	r2, [r2, #52]	; 0x34
    6d1a:	605a      	str	r2, [r3, #4]
                        State->FirstCmd = FALSE;
    6d1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d1e:	2200      	movs	r2, #0
    6d20:	775a      	strb	r2, [r3, #29]
                        Lpspi_TransmitTxInit(Instance, State->TxBufferNext, State->FrameSizeNext, State->LsbNext, State->LengthNext);
    6d22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    6d26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d28:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    6d2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d2c:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
    6d30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d32:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    6d34:	f89d 000f 	ldrb.w	r0, [sp, #15]
    6d38:	9300      	str	r3, [sp, #0]
    6d3a:	4623      	mov	r3, r4
    6d3c:	f000 fb7a 	bl	7434 <Lpspi_TransmitTxInit>
                        State->NextTransferConfigAvailable = FALSE;
    6d40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d42:	2200      	movs	r2, #0
    6d44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    6d48:	e01c      	b.n	6d84 <Lpspi_Ip_TransferProcess+0x450>
                    }
                    else
                    {
                        State->TxDoneFlag = TRUE;
    6d4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d4c:	2201      	movs	r2, #1
    6d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                        /* Disable TX interrupt */
                        Base->IER &= ~LPSPI_IER_TDIE_MASK;
    6d52:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d54:	699b      	ldr	r3, [r3, #24]
    6d56:	f023 0201 	bic.w	r2, r3, #1
    6d5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d5c:	619a      	str	r2, [r3, #24]
                        if((FALSE == State->KeepCs) && (0u != (Base->TCR & LPSPI_TCR_CONT_MASK)))
    6d5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d60:	7f1b      	ldrb	r3, [r3, #28]
    6d62:	f083 0301 	eor.w	r3, r3, #1
    6d66:	b2db      	uxtb	r3, r3
    6d68:	2b00      	cmp	r3, #0
    6d6a:	d00b      	beq.n	6d84 <Lpspi_Ip_TransferProcess+0x450>
    6d6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    6d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    6d74:	2b00      	cmp	r3, #0
    6d76:	d005      	beq.n	6d84 <Lpspi_Ip_TransferProcess+0x450>
                        {
                            /* Clear CS */
                            Base->TCR &= ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK);
    6d78:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    6d7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    6d80:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d82:	661a      	str	r2, [r3, #96]	; 0x60
                }
            }
        }
        
        /* End of transfer */
        if((State->RxIndex == State->ExpectedFifoReads) || (TRUE == ErrorFlag))
    6d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d86:	8a9a      	ldrh	r2, [r3, #20]
    6d88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d8a:	8b1b      	ldrh	r3, [r3, #24]
    6d8c:	429a      	cmp	r2, r3
    6d8e:	d003      	beq.n	6d98 <Lpspi_Ip_TransferProcess+0x464>
    6d90:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    6d94:	2b00      	cmp	r3, #0
    6d96:	d00a      	beq.n	6dae <Lpspi_Ip_TransferProcess+0x47a>
                Base->TCR |= LPSPI_TCR_RXMSK(1);
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12();
            }
            #endif
            /* Disable interrupts */
            Base->IER = 0u;
    6d98:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d9a:	2200      	movs	r2, #0
    6d9c:	619a      	str	r2, [r3, #24]
            Lpspi_Ip_ChannelFinished(Instance, ErrorFlag);
    6d9e:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    6da2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6da6:	4611      	mov	r1, r2
    6da8:	4618      	mov	r0, r3
    6daa:	f7ff fd91 	bl	68d0 <Lpspi_Ip_ChannelFinished>
        }
    }
}
    6dae:	bf00      	nop
    6db0:	b012      	add	sp, #72	; 0x48
    6db2:	bd10      	pop	{r4, pc}

00006db4 <Lpspi_Ip_Init>:
    OsIf_Trusted_Call1param(Lpspi_Ip_SetUserAccess, Instance);
}
#endif /* LPSPI_IP_ENABLE_USER_MODE_SUPPORT */
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_Init(const Lpspi_Ip_ConfigType *PhyUnitConfigPtr)
{
    6db4:	b500      	push	{lr}
    6db6:	b087      	sub	sp, #28
    6db8:	9001      	str	r0, [sp, #4]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    6dba:	2300      	movs	r3, #0
    6dbc:	9305      	str	r3, [sp, #20]
    uint8 Instance = 0u;
    6dbe:	2300      	movs	r3, #0
    6dc0:	f88d 3013 	strb.w	r3, [sp, #19]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(PhyUnitConfigPtr != NULL_PTR);
    #endif
    Instance = PhyUnitConfigPtr->Instance;
    6dc4:	9b01      	ldr	r3, [sp, #4]
    6dc6:	781b      	ldrb	r3, [r3, #0]
    6dc8:	f88d 3013 	strb.w	r3, [sp, #19]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    6dcc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6dd0:	4a23      	ldr	r2, [pc, #140]	; (6e60 <Lpspi_Ip_Init+0xac>)
    6dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dd6:	9303      	str	r3, [sp, #12]
    Base = Lpspi_Ip_apxBases[Instance];
    6dd8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6ddc:	4a21      	ldr	r2, [pc, #132]	; (6e64 <Lpspi_Ip_Init+0xb0>)
    6dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6de2:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State == NULL_PTR);
    #endif
    Lpspi_Ip_apxStateStructureArray[Instance] = &Lpspi_Ip_axStateStructure[PhyUnitConfigPtr->StateIndex];
    6de4:	9b01      	ldr	r3, [sp, #4]
    6de6:	7c1b      	ldrb	r3, [r3, #16]
    6de8:	461a      	mov	r2, r3
    6dea:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6dee:	0192      	lsls	r2, r2, #6
    6df0:	491d      	ldr	r1, [pc, #116]	; (6e68 <Lpspi_Ip_Init+0xb4>)
    6df2:	440a      	add	r2, r1
    6df4:	491a      	ldr	r1, [pc, #104]	; (6e60 <Lpspi_Ip_Init+0xac>)
    6df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    6dfa:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6dfe:	4a18      	ldr	r2, [pc, #96]	; (6e60 <Lpspi_Ip_Init+0xac>)
    6e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e04:	9303      	str	r3, [sp, #12]
    State->PhyUnitConfig = PhyUnitConfigPtr;
    6e06:	9b03      	ldr	r3, [sp, #12]
    6e08:	9a01      	ldr	r2, [sp, #4]
    6e0a:	621a      	str	r2, [r3, #32]
    /* enable in debug mode to ensure CS will be kept when CPU halts at breakpoint */
    Base->CR = PhyUnitConfigPtr->Cr | LPSPI_CR_DBGEN_MASK;
    6e0c:	9b01      	ldr	r3, [sp, #4]
    6e0e:	685b      	ldr	r3, [r3, #4]
    6e10:	f043 0208 	orr.w	r2, r3, #8
    6e14:	9b02      	ldr	r3, [sp, #8]
    6e16:	611a      	str	r2, [r3, #16]
    Base->CFGR1 = PhyUnitConfigPtr->Cfgr1;
    6e18:	9b01      	ldr	r3, [sp, #4]
    6e1a:	689a      	ldr	r2, [r3, #8]
    6e1c:	9b02      	ldr	r3, [sp, #8]
    6e1e:	625a      	str	r2, [r3, #36]	; 0x24
    /* Set TX WATER. it will be set again in DMA mode */
    Base->FCR = LPSPI_FCR_TXWATER((uint32)LPSPI_IP_FIFO_SIZE_U8 - (uint32)1u);
    6e20:	9b02      	ldr	r3, [sp, #8]
    6e22:	2203      	movs	r2, #3
    6e24:	659a      	str	r2, [r3, #88]	; 0x58
    #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
    State->ClockMode = LPSPI_IP_NORMAL_CLOCK;
    #endif
    State->KeepCs = FALSE;
    6e26:	9b03      	ldr	r3, [sp, #12]
    6e28:	2200      	movs	r2, #0
    6e2a:	771a      	strb	r2, [r3, #28]
    State->FirstCmd = TRUE;
    6e2c:	9b03      	ldr	r3, [sp, #12]
    6e2e:	2201      	movs	r2, #1
    6e30:	775a      	strb	r2, [r3, #29]
    #if ((STD_ON == LPSPI_IP_DMA_USED) && (STD_ON == LPSPI_IP_ENABLE_DMAFASTTRANSFER_SUPPORT))
    Lpspi_Ip_TxDmaTcdSGInit(Instance);
    Lpspi_Ip_RxDmaTcdSGInit(Instance);
    #endif
    /* set State to idle */
    State->Status = LPSPI_IP_IDLE;
    6e32:	9b03      	ldr	r3, [sp, #12]
    6e34:	2201      	movs	r2, #1
    6e36:	605a      	str	r2, [r3, #4]
    (void)Lpspi_Ip_UpdateTransferMode(Instance, PhyUnitConfigPtr->TransferMode);
    6e38:	9b01      	ldr	r3, [sp, #4]
    6e3a:	68da      	ldr	r2, [r3, #12]
    6e3c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6e40:	4611      	mov	r1, r2
    6e42:	4618      	mov	r0, r3
    6e44:	f000 fd10 	bl	7868 <Lpspi_Ip_UpdateTransferMode>
    
    /* Enable SPI module */
    Base->CR |= LPSPI_CR_MEN_MASK;
    6e48:	9b02      	ldr	r3, [sp, #8]
    6e4a:	691b      	ldr	r3, [r3, #16]
    6e4c:	f043 0201 	orr.w	r2, r3, #1
    6e50:	9b02      	ldr	r3, [sp, #8]
    6e52:	611a      	str	r2, [r3, #16]
    return Status;
    6e54:	9b05      	ldr	r3, [sp, #20]
}
    6e56:	4618      	mov	r0, r3
    6e58:	b007      	add	sp, #28
    6e5a:	f85d fb04 	ldr.w	pc, [sp], #4
    6e5e:	bf00      	nop
    6e60:	1fff8d38 	.word	0x1fff8d38
    6e64:	0000ad6c 	.word	0x0000ad6c
    6e68:	1fff8cf8 	.word	0x1fff8cf8

00006e6c <Lpspi_Ip_DeInit>:
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_DeInit(uint8 Instance)
{
    6e6c:	b086      	sub	sp, #24
    6e6e:	4603      	mov	r3, r0
    6e70:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base;
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    6e74:	2300      	movs	r3, #0
    6e76:	9305      	str	r3, [sp, #20]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    6e78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e7c:	4a11      	ldr	r2, [pc, #68]	; (6ec4 <Lpspi_Ip_DeInit+0x58>)
    6e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e82:	9304      	str	r3, [sp, #16]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    6e84:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e88:	4a0f      	ldr	r2, [pc, #60]	; (6ec8 <Lpspi_Ip_DeInit+0x5c>)
    6e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e8e:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    if (LPSPI_IP_BUSY == State->Status)
    6e90:	9b03      	ldr	r3, [sp, #12]
    6e92:	685b      	ldr	r3, [r3, #4]
    6e94:	2b02      	cmp	r3, #2
    6e96:	d102      	bne.n	6e9e <Lpspi_Ip_DeInit+0x32>
    {
        Status = LPSPI_IP_STATUS_FAIL;
    6e98:	2301      	movs	r3, #1
    6e9a:	9305      	str	r3, [sp, #20]
    6e9c:	e00e      	b.n	6ebc <Lpspi_Ip_DeInit+0x50>
    }
    else
    {
        /* Use reset hardware feature. */
        Base->CR |= LPSPI_CR_RST(1u);
    6e9e:	9b04      	ldr	r3, [sp, #16]
    6ea0:	691b      	ldr	r3, [r3, #16]
    6ea2:	f043 0202 	orr.w	r2, r3, #2
    6ea6:	9b04      	ldr	r3, [sp, #16]
    6ea8:	611a      	str	r2, [r3, #16]
        Base->CR = 0;
    6eaa:	9b04      	ldr	r3, [sp, #16]
    6eac:	2200      	movs	r2, #0
    6eae:	611a      	str	r2, [r3, #16]

        Lpspi_Ip_apxStateStructureArray[Instance] = NULL_PTR;
    6eb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6eb4:	4a04      	ldr	r2, [pc, #16]	; (6ec8 <Lpspi_Ip_DeInit+0x5c>)
    6eb6:	2100      	movs	r1, #0
    6eb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    return Status;
    6ebc:	9b05      	ldr	r3, [sp, #20]
}
    6ebe:	4618      	mov	r0, r3
    6ec0:	b006      	add	sp, #24
    6ec2:	4770      	bx	lr
    6ec4:	0000ad6c 	.word	0x0000ad6c
    6ec8:	1fff8d38 	.word	0x1fff8d38

00006ecc <Lpspi_Ip_SyncTransmit>:
                                            const uint8 *TxBuffer,
                                            uint8 *RxBuffer,
                                            uint16 Length,
                                            uint32 TimeOut
                                         )
{
    6ecc:	b510      	push	{r4, lr}
    6ece:	b09a      	sub	sp, #104	; 0x68
    6ed0:	9005      	str	r0, [sp, #20]
    6ed2:	9104      	str	r1, [sp, #16]
    6ed4:	9203      	str	r2, [sp, #12]
    6ed6:	f8ad 300a 	strh.w	r3, [sp, #10]
    LPSPI_Type *Base;
    Lpspi_Ip_StateStructureType *State;
    uint8 NumberOfWrites, NumberOfReads;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    6eda:	2300      	movs	r3, #0
    6edc:	9318      	str	r3, [sp, #96]	; 0x60
    uint32 TimeoutTicks = OsIf_MicrosToTicks(TimeOut, LPSPI_IP_TIMEOUT_METHOD);
    6ede:	2100      	movs	r1, #0
    6ee0:	981c      	ldr	r0, [sp, #112]	; 0x70
    6ee2:	f7fa fe9f 	bl	1c24 <OsIf_MicrosToTicks>
    6ee6:	9015      	str	r0, [sp, #84]	; 0x54
    uint32 CurrentTicks = 0u; /* initialize current counter */
    6ee8:	2300      	movs	r3, #0
    6eea:	9307      	str	r3, [sp, #28]
    uint32 ElapsedTicks = 0u; /* elapsed will give timeout */
    6eec:	2300      	movs	r3, #0
    6eee:	9317      	str	r3, [sp, #92]	; 0x5c
    uint8 Instance = 0u;
    6ef0:	2300      	movs	r3, #0
    6ef2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    uint32 Cfgr1 = 0u;
    6ef6:	2300      	movs	r3, #0
    6ef8:	9313      	str	r3, [sp, #76]	; 0x4c
    boolean TxDoneFlag = FALSE;
    6efa:	2300      	movs	r3, #0
    6efc:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
    DevAssert(ExternalDevice != NULL_PTR);
    DevAssert(0u != Length);
    DevAssert(0u != TimeOut);
    Lpspi_Ip_CheckValidParameters(ExternalDevice, Length);
    #endif
    Instance = ExternalDevice->Instance;
    6f00:	9b05      	ldr	r3, [sp, #20]
    6f02:	781b      	ldrb	r3, [r3, #0]
    6f04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    6f08:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    6f0c:	4a92      	ldr	r2, [pc, #584]	; (7158 <Lpspi_Ip_SyncTransmit+0x28c>)
    6f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f12:	9312      	str	r3, [sp, #72]	; 0x48
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State != NULL_PTR);
    #endif
    
    Base = Lpspi_Ip_apxBases[Instance];    
    6f14:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    6f18:	4a90      	ldr	r2, [pc, #576]	; (715c <Lpspi_Ip_SyncTransmit+0x290>)
    6f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f1e:	9311      	str	r3, [sp, #68]	; 0x44
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08();
    6f20:	f002 ff9c 	bl	9e5c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08>
    if (LPSPI_IP_BUSY == State->Status)
    6f24:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f26:	685b      	ldr	r3, [r3, #4]
    6f28:	2b02      	cmp	r3, #2
    6f2a:	d104      	bne.n	6f36 <Lpspi_Ip_SyncTransmit+0x6a>
    {
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08();
    6f2c:	f002 ffc2 	bl	9eb4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>
        Status = LPSPI_IP_STATUS_FAIL;
    6f30:	2301      	movs	r3, #1
    6f32:	9318      	str	r3, [sp, #96]	; 0x60
    6f34:	e276      	b.n	7424 <Lpspi_Ip_SyncTransmit+0x558>
        /* Clear some bits which support for half duplex mode at previous transfer */
        Base->CFGR1 &= ~(LPSPI_CFGR1_PCSCFG_MASK | LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK);
        #endif
        
        /* Mark the hardware as busy. */
        State->Status = LPSPI_IP_BUSY;
    6f36:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f38:	2202      	movs	r2, #2
    6f3a:	605a      	str	r2, [r3, #4]
        State->ExternalDevice = ExternalDevice;
    6f3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f3e:	9a05      	ldr	r2, [sp, #20]
    6f40:	625a      	str	r2, [r3, #36]	; 0x24
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08();
    6f42:	f002 ffb7 	bl	9eb4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>
        
        /* Disable DMA requests and all interrupts */
        Base->DER = 0u;
    6f46:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f48:	2200      	movs	r2, #0
    6f4a:	61da      	str	r2, [r3, #28]
        Base->IER = 0u;
    6f4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f4e:	2200      	movs	r2, #0
    6f50:	619a      	str	r2, [r3, #24]
        
        /* Update State structure. */
        State->NextTransferConfigAvailable = State->KeepCs;
    6f52:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f54:	7f1a      	ldrb	r2, [r3, #28]
    6f56:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Set clock configuration */
        if(TRUE == State->FirstCmd)
    6f5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f5e:	7f5b      	ldrb	r3, [r3, #29]
    6f60:	2b00      	cmp	r3, #0
    6f62:	d030      	beq.n	6fc6 <Lpspi_Ip_SyncTransmit+0xfa>
            /* Makes sure that FIFOs will be empty before start new transfer session. 
            There is maybe a frame in RX shifter register (previous transfer is broken and CS did not de-assert).
            So use reset FIFO do not prevent the potential issue. So reset module by software reset bit should be used here */
            /* Reset FIFOs using CR[RST] bit */
            /* store CFGR1 and restore after all registers are reset */
            Cfgr1 = Base->CFGR1;
    6f64:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6f68:	9313      	str	r3, [sp, #76]	; 0x4c
            Base->CR |= LPSPI_CR_RST_MASK;
    6f6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f6c:	691b      	ldr	r3, [r3, #16]
    6f6e:	f043 0202 	orr.w	r2, r3, #2
    6f72:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f74:	611a      	str	r2, [r3, #16]
            Base->CR &= ~LPSPI_CR_RST_MASK;
    6f76:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f78:	691b      	ldr	r3, [r3, #16]
    6f7a:	f023 0202 	bic.w	r2, r3, #2
    6f7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f80:	611a      	str	r2, [r3, #16]
            /* restore CFGR1 */
            Base->CFGR1 = Cfgr1;
    6f82:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6f86:	625a      	str	r2, [r3, #36]	; 0x24
            /* clear all flags */
            Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    6f88:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f8a:	695b      	ldr	r3, [r3, #20]
    6f8c:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    6f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f92:	615a      	str	r2, [r3, #20]

            #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
            Base->CCR = ExternalDevice->Ccr[State->ClockMode];
            #else
            Base->CCR = ExternalDevice->Ccr;
    6f94:	9b05      	ldr	r3, [sp, #20]
    6f96:	685a      	ldr	r2, [r3, #4]
    6f98:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f9a:	641a      	str	r2, [r3, #64]	; 0x40
            #endif
                /* Reset current FIFO slots are available to fill at beginning of job (HLD).*/
            State->CurrentTxFifoSlot = LPSPI_IP_FIFO_SIZE_U8;
    6f9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f9e:	2204      	movs	r2, #4
    6fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            Lpspi_TransmitTxInit(Instance, (const uint8*)TxBuffer, State->ExternalDevice->DeviceParams->FrameSize, State->ExternalDevice->DeviceParams->Lsb, Length);
    6fa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6fa8:	68db      	ldr	r3, [r3, #12]
    6faa:	881a      	ldrh	r2, [r3, #0]
    6fac:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6fb0:	68db      	ldr	r3, [r3, #12]
    6fb2:	7899      	ldrb	r1, [r3, #2]
    6fb4:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    6fb8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6fbc:	9300      	str	r3, [sp, #0]
    6fbe:	460b      	mov	r3, r1
    6fc0:	9904      	ldr	r1, [sp, #16]
    6fc2:	f000 fa37 	bl	7434 <Lpspi_TransmitTxInit>
        }
        Lpspi_TransmitRxInit(Instance, RxBuffer, State->ExternalDevice->DeviceParams->FrameSize, Length);
    6fc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6fca:	68db      	ldr	r3, [r3, #12]
    6fcc:	881a      	ldrh	r2, [r3, #0]
    6fce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6fd2:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    6fd6:	9903      	ldr	r1, [sp, #12]
    6fd8:	f000 facc 	bl	7574 <Lpspi_TransmitRxInit>
        /* initialize current counter */
        CurrentTicks = OsIf_GetCounter(LPSPI_IP_TIMEOUT_METHOD);
    6fdc:	2000      	movs	r0, #0
    6fde:	f7fa fdd5 	bl	1b8c <OsIf_GetCounter>
    6fe2:	4603      	mov	r3, r0
    6fe4:	9307      	str	r3, [sp, #28]
        while(State->RxIndex != State->ExpectedFifoReads)
    6fe6:	e202      	b.n	73ee <Lpspi_Ip_SyncTransmit+0x522>
        {
            /* RECEIVE DATA */
            /* The receiving should be performed first because maybe have a last frame in RX FIFO from previous channel
                , it should be read to clear RXFIFO before start a new write to TXFIFO */
            /* Read all Data available in receive HW fifo. */
            NumberOfReads = (uint8)(((Base->FSR) & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
    6fe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    6fec:	0c1b      	lsrs	r3, r3, #16
    6fee:	b2db      	uxtb	r3, r3
    6ff0:	f003 0307 	and.w	r3, r3, #7
    6ff4:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
            /* Limits to remaining frames. */
            
            if (NumberOfReads != 0u)
    6ff8:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    6ffc:	2b00      	cmp	r3, #0
    6ffe:	f000 80d2 	beq.w	71a6 <Lpspi_Ip_SyncTransmit+0x2da>
            {
                if (NumberOfReads > (State->ExpectedFifoReads - State->RxIndex))
    7002:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
    7006:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7008:	8b1b      	ldrh	r3, [r3, #24]
    700a:	4619      	mov	r1, r3
    700c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    700e:	8a9b      	ldrh	r3, [r3, #20]
    7010:	1acb      	subs	r3, r1, r3
    7012:	429a      	cmp	r2, r3
    7014:	dd08      	ble.n	7028 <Lpspi_Ip_SyncTransmit+0x15c>
                {
                    NumberOfReads = (uint8)(State->ExpectedFifoReads - State->RxIndex);
    7016:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7018:	8b1b      	ldrh	r3, [r3, #24]
    701a:	b2da      	uxtb	r2, r3
    701c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    701e:	8a9b      	ldrh	r3, [r3, #20]
    7020:	b2db      	uxtb	r3, r3
    7022:	1ad3      	subs	r3, r2, r3
    7024:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                }
                /* If these are the first frames of this channel. Current TXFIFO slot must be plus 1 because the slot of CMD have moved out */
                if (0u == State->RxIndex)
    7028:	9b12      	ldr	r3, [sp, #72]	; 0x48
    702a:	8a9b      	ldrh	r3, [r3, #20]
    702c:	2b00      	cmp	r3, #0
    702e:	d107      	bne.n	7040 <Lpspi_Ip_SyncTransmit+0x174>
                {
                    State->CurrentTxFifoSlot += 1u;
    7030:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    7036:	3301      	adds	r3, #1
    7038:	b2da      	uxtb	r2, r3
    703a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    703c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    7040:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    7044:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    7048:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    704c:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    const LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    7050:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    7054:	4a41      	ldr	r2, [pc, #260]	; (715c <Lpspi_Ip_SyncTransmit+0x290>)
    7056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    705a:	930f      	str	r3, [sp, #60]	; 0x3c
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    705c:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    7060:	4a3d      	ldr	r2, [pc, #244]	; (7158 <Lpspi_Ip_SyncTransmit+0x28c>)
    7062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7066:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 Data = 0u;
    7068:	2300      	movs	r3, #0
    706a:	930d      	str	r3, [sp, #52]	; 0x34
    uint8 Index = 0u;
    706c:	2300      	movs	r3, #0
    706e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    if (NULL_PTR != State->RxBuffer)
    7072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7074:	689b      	ldr	r3, [r3, #8]
    7076:	2b00      	cmp	r3, #0
    7078:	d069      	beq.n	714e <Lpspi_Ip_SyncTransmit+0x282>
        if (State->ExternalDevice->DeviceParams->FrameSize < 9u)
    707a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    707e:	68db      	ldr	r3, [r3, #12]
    7080:	881b      	ldrh	r3, [r3, #0]
    7082:	2b08      	cmp	r3, #8
    7084:	d81e      	bhi.n	70c4 <Lpspi_Ip_SyncTransmit+0x1f8>
            for (Index = 0; Index < NumberOfReads; Index++)
    7086:	2300      	movs	r3, #0
    7088:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    708c:	e013      	b.n	70b6 <Lpspi_Ip_SyncTransmit+0x1ea>
                Data = Base->RDR;
    708e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    7092:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint8*)(&State->RxBuffer[State->RxIndex + Index])) = (uint8)Data;
    7094:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7096:	689b      	ldr	r3, [r3, #8]
    7098:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    709a:	8a92      	ldrh	r2, [r2, #20]
    709c:	4611      	mov	r1, r2
    709e:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
    70a2:	440a      	add	r2, r1
    70a4:	4413      	add	r3, r2
    70a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    70a8:	b2d2      	uxtb	r2, r2
    70aa:	701a      	strb	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    70ac:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    70b0:	3301      	adds	r3, #1
    70b2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    70b6:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    70ba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    70be:	429a      	cmp	r2, r3
    70c0:	d8e5      	bhi.n	708e <Lpspi_Ip_SyncTransmit+0x1c2>
    70c2:	e05a      	b.n	717a <Lpspi_Ip_SyncTransmit+0x2ae>
        else if (State->ExternalDevice->DeviceParams->FrameSize < 17u)
    70c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    70c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    70c8:	68db      	ldr	r3, [r3, #12]
    70ca:	881b      	ldrh	r3, [r3, #0]
    70cc:	2b10      	cmp	r3, #16
    70ce:	d81f      	bhi.n	7110 <Lpspi_Ip_SyncTransmit+0x244>
            for (Index = 0; Index < NumberOfReads; Index++)
    70d0:	2300      	movs	r3, #0
    70d2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    70d6:	e014      	b.n	7102 <Lpspi_Ip_SyncTransmit+0x236>
                Data = Base->RDR;
    70d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    70da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    70dc:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint16*)(&State->RxBuffer[2u * (State->RxIndex + Index)])) = (uint16)Data;
    70de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    70e0:	689a      	ldr	r2, [r3, #8]
    70e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    70e4:	8a9b      	ldrh	r3, [r3, #20]
    70e6:	4619      	mov	r1, r3
    70e8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    70ec:	440b      	add	r3, r1
    70ee:	005b      	lsls	r3, r3, #1
    70f0:	4413      	add	r3, r2
    70f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    70f4:	b292      	uxth	r2, r2
    70f6:	801a      	strh	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    70f8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    70fc:	3301      	adds	r3, #1
    70fe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    7102:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    7106:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    710a:	429a      	cmp	r2, r3
    710c:	d8e4      	bhi.n	70d8 <Lpspi_Ip_SyncTransmit+0x20c>
    710e:	e034      	b.n	717a <Lpspi_Ip_SyncTransmit+0x2ae>
            for (Index = 0; Index < NumberOfReads; Index++)
    7110:	2300      	movs	r3, #0
    7112:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    7116:	e013      	b.n	7140 <Lpspi_Ip_SyncTransmit+0x274>
                Data = Base->RDR;
    7118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    711a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    711c:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint32*)(&State->RxBuffer[4u * (State->RxIndex + Index)])) = (uint32)Data;
    711e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7120:	689a      	ldr	r2, [r3, #8]
    7122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7124:	8a9b      	ldrh	r3, [r3, #20]
    7126:	4619      	mov	r1, r3
    7128:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    712c:	440b      	add	r3, r1
    712e:	009b      	lsls	r3, r3, #2
    7130:	4413      	add	r3, r2
    7132:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7134:	601a      	str	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    7136:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    713a:	3301      	adds	r3, #1
    713c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    7140:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    7144:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    7148:	429a      	cmp	r2, r3
    714a:	d8e5      	bhi.n	7118 <Lpspi_Ip_SyncTransmit+0x24c>
    714c:	e015      	b.n	717a <Lpspi_Ip_SyncTransmit+0x2ae>
        for (Index = 0; Index < NumberOfReads; Index++)
    714e:	2300      	movs	r3, #0
    7150:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    7154:	e00b      	b.n	716e <Lpspi_Ip_SyncTransmit+0x2a2>
    7156:	bf00      	nop
    7158:	1fff8d38 	.word	0x1fff8d38
    715c:	0000ad6c 	.word	0x0000ad6c
            (void)Base->RDR;
    7160:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        for (Index = 0; Index < NumberOfReads; Index++)
    7164:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    7168:	3301      	adds	r3, #1
    716a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    716e:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    7172:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    7176:	429a      	cmp	r2, r3
    7178:	d8f2      	bhi.n	7160 <Lpspi_Ip_SyncTransmit+0x294>
    State->RxIndex += NumberOfReads;
    717a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    717c:	8a9a      	ldrh	r2, [r3, #20]
    717e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    7182:	b29b      	uxth	r3, r3
    7184:	4413      	add	r3, r2
    7186:	b29a      	uxth	r2, r3
    7188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    718a:	829a      	strh	r2, [r3, #20]
}
    718c:	bf00      	nop
                }
                /* Read Data from RX FIFO */
                Lpspi_Ip_ReadDataFromFifo(Instance, NumberOfReads);
                /* Update current FIFO slots are available to fill .*/
                State->CurrentTxFifoSlot += NumberOfReads;
    718e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7190:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    7194:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    7198:	4413      	add	r3, r2
    719a:	b2da      	uxtb	r2, r3
    719c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    719e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                ElapsedTicks = 0u;
    71a2:	2300      	movs	r3, #0
    71a4:	9317      	str	r3, [sp, #92]	; 0x5c
            /* After driver code read all frames in RX FIFO, if there are still some frames in TX FIFO, at the time before driver code check number of frames available in TX FIFO 
            to prepare to fill TX FIFO. At that time, interrupt occurred, and the time to process interrupt is longer than the time to transfer all frames in TX FIFO. 
            So TX FIFO will be empty and some frames received in RX FIFO, then the program is returned from interrupt and fill TX FIFO until full. 
            And there is a interrupt occurred after that before read all frames in RX FIFO, and the time to process interrupt is longer than the time to transfer all frames in TX FIFO.
            State->CurrentTxFifoSlot variable is used to hanlde number of frames are "on bus transfer". They are always less than FIFO size */
            if((State->CurrentTxFifoSlot != 0u) && (TxDoneFlag != TRUE))
    71a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    71ac:	2b00      	cmp	r3, #0
    71ae:	f000 810e 	beq.w	73ce <Lpspi_Ip_SyncTransmit+0x502>
    71b2:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
    71b6:	f083 0301 	eor.w	r3, r3, #1
    71ba:	b2db      	uxtb	r3, r3
    71bc:	2b00      	cmp	r3, #0
    71be:	f000 8106 	beq.w	73ce <Lpspi_Ip_SyncTransmit+0x502>
            {
                if(State->ExpectedFifoWrites != State->TxIndex)
    71c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71c4:	8b5a      	ldrh	r2, [r3, #26]
    71c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71c8:	8adb      	ldrh	r3, [r3, #22]
    71ca:	429a      	cmp	r2, r3
    71cc:	f000 80c7 	beq.w	735e <Lpspi_Ip_SyncTransmit+0x492>
                {
                    NumberOfWrites = State->CurrentTxFifoSlot;
    71d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    71d6:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
                    /* Limits to remaining frames. */
                    if (NumberOfWrites > (State->ExpectedFifoWrites - State->TxIndex))
    71da:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
    71de:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71e0:	8b5b      	ldrh	r3, [r3, #26]
    71e2:	4619      	mov	r1, r3
    71e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71e6:	8adb      	ldrh	r3, [r3, #22]
    71e8:	1acb      	subs	r3, r1, r3
    71ea:	429a      	cmp	r2, r3
    71ec:	dd08      	ble.n	7200 <Lpspi_Ip_SyncTransmit+0x334>
                    {
                        NumberOfWrites = (uint8)(State->ExpectedFifoWrites - State->TxIndex);
    71ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71f0:	8b5b      	ldrh	r3, [r3, #26]
    71f2:	b2da      	uxtb	r2, r3
    71f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71f6:	8adb      	ldrh	r3, [r3, #22]
    71f8:	b2db      	uxtb	r3, r3
    71fa:	1ad3      	subs	r3, r2, r3
    71fc:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    7200:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    7204:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    7208:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    720c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    7210:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    7214:	4a85      	ldr	r2, [pc, #532]	; (742c <Lpspi_Ip_SyncTransmit+0x560>)
    7216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    721a:	930b      	str	r3, [sp, #44]	; 0x2c
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    721c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    7220:	4a83      	ldr	r2, [pc, #524]	; (7430 <Lpspi_Ip_SyncTransmit+0x564>)
    7222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7226:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 Data = 0u;
    7228:	2300      	movs	r3, #0
    722a:	9309      	str	r3, [sp, #36]	; 0x24
    uint8 Index = 0u;
    722c:	2300      	movs	r3, #0
    722e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Data = State->ExternalDevice->DeviceParams->DefaultData;
    7232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7236:	68db      	ldr	r3, [r3, #12]
    7238:	685b      	ldr	r3, [r3, #4]
    723a:	9309      	str	r3, [sp, #36]	; 0x24
    if (NULL_PTR != State->TxBuffer)
    723c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    723e:	68db      	ldr	r3, [r3, #12]
    7240:	2b00      	cmp	r3, #0
    7242:	d063      	beq.n	730c <Lpspi_Ip_SyncTransmit+0x440>
        if (State->TxFrameSize < 9u)
    7244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    7248:	2b08      	cmp	r3, #8
    724a:	d81d      	bhi.n	7288 <Lpspi_Ip_SyncTransmit+0x3bc>
            for (Index = 0; Index < NumberOfWrites; Index++)
    724c:	2300      	movs	r3, #0
    724e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    7252:	e012      	b.n	727a <Lpspi_Ip_SyncTransmit+0x3ae>
                Data = *((const uint8*)(&State->TxBuffer[State->TxIndex + Index]));
    7254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7256:	68db      	ldr	r3, [r3, #12]
    7258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    725a:	8ad2      	ldrh	r2, [r2, #22]
    725c:	4611      	mov	r1, r2
    725e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    7262:	440a      	add	r2, r1
    7264:	4413      	add	r3, r2
    7266:	781b      	ldrb	r3, [r3, #0]
    7268:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    726a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    726c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    726e:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    7270:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    7274:	3301      	adds	r3, #1
    7276:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    727a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    727e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    7282:	429a      	cmp	r2, r3
    7284:	d8e6      	bhi.n	7254 <Lpspi_Ip_SyncTransmit+0x388>
    7286:	e053      	b.n	7330 <Lpspi_Ip_SyncTransmit+0x464>
        else if (State->TxFrameSize < 17u)
    7288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    728a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    728c:	2b10      	cmp	r3, #16
    728e:	d81e      	bhi.n	72ce <Lpspi_Ip_SyncTransmit+0x402>
            for (Index = 0; Index < NumberOfWrites; Index++)
    7290:	2300      	movs	r3, #0
    7292:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    7296:	e013      	b.n	72c0 <Lpspi_Ip_SyncTransmit+0x3f4>
                Data = *((const uint16*)(&State->TxBuffer[2u * (State->TxIndex + Index)]));
    7298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    729a:	68da      	ldr	r2, [r3, #12]
    729c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    729e:	8adb      	ldrh	r3, [r3, #22]
    72a0:	4619      	mov	r1, r3
    72a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    72a6:	440b      	add	r3, r1
    72a8:	005b      	lsls	r3, r3, #1
    72aa:	4413      	add	r3, r2
    72ac:	881b      	ldrh	r3, [r3, #0]
    72ae:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    72b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    72b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    72b4:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    72b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    72ba:	3301      	adds	r3, #1
    72bc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    72c0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    72c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    72c8:	429a      	cmp	r2, r3
    72ca:	d8e5      	bhi.n	7298 <Lpspi_Ip_SyncTransmit+0x3cc>
    72cc:	e030      	b.n	7330 <Lpspi_Ip_SyncTransmit+0x464>
            for (Index = 0; Index < NumberOfWrites; Index++)
    72ce:	2300      	movs	r3, #0
    72d0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    72d4:	e013      	b.n	72fe <Lpspi_Ip_SyncTransmit+0x432>
                Data = *((const uint32*)(&State->TxBuffer[4u * (State->TxIndex + Index)]));
    72d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    72d8:	68da      	ldr	r2, [r3, #12]
    72da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    72dc:	8adb      	ldrh	r3, [r3, #22]
    72de:	4619      	mov	r1, r3
    72e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    72e4:	440b      	add	r3, r1
    72e6:	009b      	lsls	r3, r3, #2
    72e8:	4413      	add	r3, r2
    72ea:	681b      	ldr	r3, [r3, #0]
    72ec:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    72ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    72f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    72f2:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    72f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    72f8:	3301      	adds	r3, #1
    72fa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    72fe:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    7302:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    7306:	429a      	cmp	r2, r3
    7308:	d8e5      	bhi.n	72d6 <Lpspi_Ip_SyncTransmit+0x40a>
    730a:	e011      	b.n	7330 <Lpspi_Ip_SyncTransmit+0x464>
        for (Index = 0; Index < NumberOfWrites; Index++)
    730c:	2300      	movs	r3, #0
    730e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    7312:	e007      	b.n	7324 <Lpspi_Ip_SyncTransmit+0x458>
            Base->TDR = Data;
    7314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7316:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7318:	665a      	str	r2, [r3, #100]	; 0x64
        for (Index = 0; Index < NumberOfWrites; Index++)
    731a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    731e:	3301      	adds	r3, #1
    7320:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    7324:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    7328:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    732c:	429a      	cmp	r2, r3
    732e:	d8f1      	bhi.n	7314 <Lpspi_Ip_SyncTransmit+0x448>
    State->TxIndex += NumberOfWrites;
    7330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7332:	8ada      	ldrh	r2, [r3, #22]
    7334:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    7338:	b29b      	uxth	r3, r3
    733a:	4413      	add	r3, r2
    733c:	b29a      	uxth	r2, r3
    733e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7340:	82da      	strh	r2, [r3, #22]
}
    7342:	bf00      	nop
                    }
                    /* Push Data into TX FIFO */
                    Lpspi_Ip_PushDataToFifo(Instance, NumberOfWrites);
                    State->CurrentTxFifoSlot -= NumberOfWrites;
    7344:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7346:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    734a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    734e:	1ad3      	subs	r3, r2, r3
    7350:	b2da      	uxtb	r2, r3
    7352:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                    ElapsedTicks = 0u;
    7358:	2300      	movs	r3, #0
    735a:	9317      	str	r3, [sp, #92]	; 0x5c
    735c:	e037      	b.n	73ce <Lpspi_Ip_SyncTransmit+0x502>
                }
                else
                {
                    if(TRUE == State->NextTransferConfigAvailable)
    735e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7360:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    7364:	2b00      	cmp	r3, #0
    7366:	d01c      	beq.n	73a2 <Lpspi_Ip_SyncTransmit+0x4d6>
                    {
                        /* Initialize next transfer */
                        State->ExternalDevice->DeviceParams->DefaultData = State->DefaultDataNext;
    7368:	9b12      	ldr	r3, [sp, #72]	; 0x48
    736a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    736c:	68db      	ldr	r3, [r3, #12]
    736e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7370:	6b52      	ldr	r2, [r2, #52]	; 0x34
    7372:	605a      	str	r2, [r3, #4]
                        State->FirstCmd = FALSE;
    7374:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7376:	2200      	movs	r2, #0
    7378:	775a      	strb	r2, [r3, #29]
                        Lpspi_TransmitTxInit(Instance, State->TxBufferNext, State->FrameSizeNext, State->LsbNext, State->LengthNext);
    737a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    737c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    737e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7380:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    7382:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7384:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
    7388:	9b12      	ldr	r3, [sp, #72]	; 0x48
    738a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    738c:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    7390:	9300      	str	r3, [sp, #0]
    7392:	4623      	mov	r3, r4
    7394:	f000 f84e 	bl	7434 <Lpspi_TransmitTxInit>
                        State->NextTransferConfigAvailable = FALSE;
    7398:	9b12      	ldr	r3, [sp, #72]	; 0x48
    739a:	2200      	movs	r2, #0
    739c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    73a0:	e015      	b.n	73ce <Lpspi_Ip_SyncTransmit+0x502>
                    }
                    else
                    {
                        TxDoneFlag = TRUE;
    73a2:	2301      	movs	r3, #1
    73a4:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
                        if((FALSE == State->KeepCs) && (0u != (Base->TCR & LPSPI_TCR_CONT_MASK)))
    73a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    73aa:	7f1b      	ldrb	r3, [r3, #28]
    73ac:	f083 0301 	eor.w	r3, r3, #1
    73b0:	b2db      	uxtb	r3, r3
    73b2:	2b00      	cmp	r3, #0
    73b4:	d00b      	beq.n	73ce <Lpspi_Ip_SyncTransmit+0x502>
    73b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    73b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    73ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    73be:	2b00      	cmp	r3, #0
    73c0:	d005      	beq.n	73ce <Lpspi_Ip_SyncTransmit+0x502>
                        {
                            /* Clear CS */
                            Base->TCR &= ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK);
    73c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    73c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    73c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    73ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    73cc:	661a      	str	r2, [r3, #96]	; 0x60
                        }
                    }
                }
            }
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, LPSPI_IP_TIMEOUT_METHOD);
    73ce:	ab07      	add	r3, sp, #28
    73d0:	2100      	movs	r1, #0
    73d2:	4618      	mov	r0, r3
    73d4:	f7fa fbf3 	bl	1bbe <OsIf_GetElapsed>
    73d8:	4602      	mov	r2, r0
    73da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    73dc:	4413      	add	r3, r2
    73de:	9317      	str	r3, [sp, #92]	; 0x5c
            if (ElapsedTicks >= TimeoutTicks)
    73e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    73e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    73e4:	429a      	cmp	r2, r3
    73e6:	d302      	bcc.n	73ee <Lpspi_Ip_SyncTransmit+0x522>
            {
                Status = LPSPI_IP_TIMEOUT;
    73e8:	2303      	movs	r3, #3
    73ea:	9318      	str	r3, [sp, #96]	; 0x60
                break;
    73ec:	e006      	b.n	73fc <Lpspi_Ip_SyncTransmit+0x530>
        while(State->RxIndex != State->ExpectedFifoReads)
    73ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    73f0:	8a9a      	ldrh	r2, [r3, #20]
    73f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    73f4:	8b1b      	ldrh	r3, [r3, #24]
    73f6:	429a      	cmp	r2, r3
    73f8:	f47f adf6 	bne.w	6fe8 <Lpspi_Ip_SyncTransmit+0x11c>
            }
        }
        if ((LPSPI_IP_STATUS_SUCCESS != Status) || (0u == Length))
    73fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
    73fe:	2b00      	cmp	r3, #0
    7400:	d103      	bne.n	740a <Lpspi_Ip_SyncTransmit+0x53e>
    7402:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7406:	2b00      	cmp	r3, #0
    7408:	d109      	bne.n	741e <Lpspi_Ip_SyncTransmit+0x552>
        {
#if (STD_OFF == LPSPI_IP_DEV_ERROR_DETECT)
            /* Return Fail status if length is 0. Error Detect is enabled, nothing need to be done here */
            if (0u == Length)
    740a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    740e:	2b00      	cmp	r3, #0
    7410:	d101      	bne.n	7416 <Lpspi_Ip_SyncTransmit+0x54a>
            {
                Status = LPSPI_IP_STATUS_FAIL;
    7412:	2301      	movs	r3, #1
    7414:	9318      	str	r3, [sp, #96]	; 0x60
            }
#endif
            State->Status = LPSPI_IP_FAULT;
    7416:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7418:	2203      	movs	r2, #3
    741a:	605a      	str	r2, [r3, #4]
    741c:	e002      	b.n	7424 <Lpspi_Ip_SyncTransmit+0x558>
        }
        else
        {
            State->Status = LPSPI_IP_IDLE;
    741e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7420:	2201      	movs	r2, #1
    7422:	605a      	str	r2, [r3, #4]
        }
    }
    return Status;
    7424:	9b18      	ldr	r3, [sp, #96]	; 0x60
}
    7426:	4618      	mov	r0, r3
    7428:	b01a      	add	sp, #104	; 0x68
    742a:	bd10      	pop	{r4, pc}
    742c:	0000ad6c 	.word	0x0000ad6c
    7430:	1fff8d38 	.word	0x1fff8d38

00007434 <Lpspi_TransmitTxInit>:
                                 const uint8* TxBuffer,
                                 uint16 TxFrameSize,
                                 boolean TxLsb,
                                 uint16 BufLen
                                )
{
    7434:	b088      	sub	sp, #32
    7436:	9100      	str	r1, [sp, #0]
    7438:	4611      	mov	r1, r2
    743a:	461a      	mov	r2, r3
    743c:	4603      	mov	r3, r0
    743e:	f88d 3007 	strb.w	r3, [sp, #7]
    7442:	460b      	mov	r3, r1
    7444:	f8ad 3004 	strh.w	r3, [sp, #4]
    7448:	4613      	mov	r3, r2
    744a:	f88d 3006 	strb.w	r3, [sp, #6]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    744e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7452:	4a46      	ldr	r2, [pc, #280]	; (756c <Lpspi_TransmitTxInit+0x138>)
    7454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7458:	9307      	str	r3, [sp, #28]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    745a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    745e:	4a44      	ldr	r2, [pc, #272]	; (7570 <Lpspi_TransmitTxInit+0x13c>)
    7460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7464:	9306      	str	r3, [sp, #24]
    uint32 TransferCommand = 0u;
    7466:	2300      	movs	r3, #0
    7468:	9305      	str	r3, [sp, #20]
    uint8 LsbWriteValue = TxLsb ? 1U : 0U;
    746a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    746e:	2b00      	cmp	r3, #0
    7470:	d001      	beq.n	7476 <Lpspi_TransmitTxInit+0x42>
    7472:	2301      	movs	r3, #1
    7474:	e000      	b.n	7478 <Lpspi_TransmitTxInit+0x44>
    7476:	2300      	movs	r3, #0
    7478:	f88d 3013 	strb.w	r3, [sp, #19]

    State->TxFrameSize = TxFrameSize;
    747c:	9b06      	ldr	r3, [sp, #24]
    747e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7482:	851a      	strh	r2, [r3, #40]	; 0x28
    State->TxLsb = TxLsb;
    7484:	9b06      	ldr	r3, [sp, #24]
    7486:	f89d 2006 	ldrb.w	r2, [sp, #6]
    748a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    /* Get transfer command */
#if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
    TransferCommand = State->ExternalDevice->Tcr[State->ClockMode] | LPSPI_TCR_FRAMESZ((uint32)TxFrameSize - 1u) | LPSPI_TCR_LSBF(LsbWriteValue);
#else
    TransferCommand = State->ExternalDevice->Tcr | LPSPI_TCR_FRAMESZ((uint32)TxFrameSize - 1u) | LPSPI_TCR_LSBF(LsbWriteValue);
    748e:	9b06      	ldr	r3, [sp, #24]
    7490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7492:	689a      	ldr	r2, [r3, #8]
    7494:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7498:	3b01      	subs	r3, #1
    749a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    749e:	431a      	orrs	r2, r3
    74a0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    74a4:	05db      	lsls	r3, r3, #23
    74a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    74aa:	4313      	orrs	r3, r2
    74ac:	9305      	str	r3, [sp, #20]
        {
            TransferCommand &= ~LPSPI_TCR_CONT_MASK;
        }
        #endif
        
        if(TRUE == State->FirstCmd)
    74ae:	9b06      	ldr	r3, [sp, #24]
    74b0:	7f5b      	ldrb	r3, [r3, #29]
    74b2:	2b00      	cmp	r3, #0
    74b4:	d003      	beq.n	74be <Lpspi_TransmitTxInit+0x8a>
        {
            /* Set transfer command */
            Base->TCR = TransferCommand;
    74b6:	9b07      	ldr	r3, [sp, #28]
    74b8:	9a05      	ldr	r2, [sp, #20]
    74ba:	661a      	str	r2, [r3, #96]	; 0x60
    74bc:	e00d      	b.n	74da <Lpspi_TransmitTxInit+0xa6>
        }
        else
        {
            if (0u != (TransferCommand & LPSPI_TCR_CONT_MASK))
    74be:	9b05      	ldr	r3, [sp, #20]
    74c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    74c4:	2b00      	cmp	r3, #0
    74c6:	d005      	beq.n	74d4 <Lpspi_TransmitTxInit+0xa0>
            {
                Base->TCR = TransferCommand | LPSPI_TCR_CONTC_MASK;
    74c8:	9b05      	ldr	r3, [sp, #20]
    74ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
    74ce:	9b07      	ldr	r3, [sp, #28]
    74d0:	661a      	str	r2, [r3, #96]	; 0x60
    74d2:	e002      	b.n	74da <Lpspi_TransmitTxInit+0xa6>
            }
            else
            {
                Base->TCR = TransferCommand;
    74d4:	9b07      	ldr	r3, [sp, #28]
    74d6:	9a05      	ldr	r2, [sp, #20]
    74d8:	661a      	str	r2, [r3, #96]	; 0x60
        #if (STD_ON == LPSPI_IP_HALF_DUPLEX_MODE_SUPPORT)
        if (LPSPI_IP_FULL_DUPLEX == State->ExternalDevice->DeviceParams->TransferType)
        #endif
        {
            /* CMD will take 1 slot in TXFIFO, update current TX FIFO slot. it will be plus 1 when the first frames of channel have recieved */
            State->CurrentTxFifoSlot -= 1u;
    74da:	9b06      	ldr	r3, [sp, #24]
    74dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    74e0:	3b01      	subs	r3, #1
    74e2:	b2da      	uxtb	r2, r3
    74e4:	9b06      	ldr	r3, [sp, #24]
    74e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        }
    }
    
    /* Update State structure. */
    State->TxIndex = 0u;
    74ea:	9b06      	ldr	r3, [sp, #24]
    74ec:	2200      	movs	r2, #0
    74ee:	82da      	strh	r2, [r3, #22]
        (void)TxBuffer;
    }
    else
    #endif
    {
        State->TxBuffer = TxBuffer;
    74f0:	9b06      	ldr	r3, [sp, #24]
    74f2:	9a00      	ldr	r2, [sp, #0]
    74f4:	60da      	str	r2, [r3, #12]
    74f6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    74fa:	f8ad 3010 	strh.w	r3, [sp, #16]
    74fe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7502:	f8ad 300e 	strh.w	r3, [sp, #14]
    if (FrameSize < 9u)
    7506:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    750a:	2b08      	cmp	r3, #8
    750c:	d804      	bhi.n	7518 <Lpspi_TransmitTxInit+0xe4>
        Ret = Length;
    750e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    7512:	f8ad 300c 	strh.w	r3, [sp, #12]
    7516:	e022      	b.n	755e <Lpspi_TransmitTxInit+0x12a>
    else if (FrameSize < 17u)
    7518:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    751c:	2b10      	cmp	r3, #16
    751e:	d80c      	bhi.n	753a <Lpspi_TransmitTxInit+0x106>
        Ret = (uint16)(Length / 2u) + (uint16)(Length % 2U);
    7520:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    7524:	085b      	lsrs	r3, r3, #1
    7526:	b29a      	uxth	r2, r3
    7528:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    752c:	f003 0301 	and.w	r3, r3, #1
    7530:	b29b      	uxth	r3, r3
    7532:	4413      	add	r3, r2
    7534:	f8ad 300c 	strh.w	r3, [sp, #12]
    7538:	e011      	b.n	755e <Lpspi_TransmitTxInit+0x12a>
        Ret = (uint16)(Length / 4u) + (uint16)(((Length % 4U) == 0U) ? 0U : 1U);
    753a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    753e:	089b      	lsrs	r3, r3, #2
    7540:	b29a      	uxth	r2, r3
    7542:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    7546:	f003 0303 	and.w	r3, r3, #3
    754a:	b29b      	uxth	r3, r3
    754c:	2b00      	cmp	r3, #0
    754e:	bf14      	ite	ne
    7550:	2301      	movne	r3, #1
    7552:	2300      	moveq	r3, #0
    7554:	b2db      	uxtb	r3, r3
    7556:	b29b      	uxth	r3, r3
    7558:	4413      	add	r3, r2
    755a:	f8ad 300c 	strh.w	r3, [sp, #12]
    return Ret;
    755e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    }

    State->ExpectedFifoWrites = Lpspi_Ip_GetWordsFromLength(BufLen, TxFrameSize);
    7562:	9b06      	ldr	r3, [sp, #24]
    7564:	835a      	strh	r2, [r3, #26]
}
    7566:	bf00      	nop
    7568:	b008      	add	sp, #32
    756a:	4770      	bx	lr
    756c:	0000ad6c 	.word	0x0000ad6c
    7570:	1fff8d38 	.word	0x1fff8d38

00007574 <Lpspi_TransmitRxInit>:
static void Lpspi_TransmitRxInit(uint8 Instance,
                                      uint8* RxBuffer,
                                      uint16 RxFrameSize,
                                      uint16 BufLen
                                     )
{
    7574:	b088      	sub	sp, #32
    7576:	9102      	str	r1, [sp, #8]
    7578:	4611      	mov	r1, r2
    757a:	461a      	mov	r2, r3
    757c:	4603      	mov	r3, r0
    757e:	f88d 300f 	strb.w	r3, [sp, #15]
    7582:	460b      	mov	r3, r1
    7584:	f8ad 300c 	strh.w	r3, [sp, #12]
    7588:	4613      	mov	r3, r2
    758a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    758e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7592:	4a22      	ldr	r2, [pc, #136]	; (761c <Lpspi_TransmitRxInit+0xa8>)
    7594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7598:	9307      	str	r3, [sp, #28]
    
    /* Update State structure. */
    State->RxIndex = 0u;
    759a:	9b07      	ldr	r3, [sp, #28]
    759c:	2200      	movs	r2, #0
    759e:	829a      	strh	r2, [r3, #20]
        (void)RxBuffer; 
    }
    else
    #endif        
    {
        State->RxBuffer = RxBuffer; 
    75a0:	9b07      	ldr	r3, [sp, #28]
    75a2:	9a02      	ldr	r2, [sp, #8]
    75a4:	609a      	str	r2, [r3, #8]
    75a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    75aa:	f8ad 301a 	strh.w	r3, [sp, #26]
    75ae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    75b2:	f8ad 3018 	strh.w	r3, [sp, #24]
    if (FrameSize < 9u)
    75b6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    75ba:	2b08      	cmp	r3, #8
    75bc:	d804      	bhi.n	75c8 <Lpspi_TransmitRxInit+0x54>
        Ret = Length;
    75be:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    75c2:	f8ad 3016 	strh.w	r3, [sp, #22]
    75c6:	e022      	b.n	760e <Lpspi_TransmitRxInit+0x9a>
    else if (FrameSize < 17u)
    75c8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    75cc:	2b10      	cmp	r3, #16
    75ce:	d80c      	bhi.n	75ea <Lpspi_TransmitRxInit+0x76>
        Ret = (uint16)(Length / 2u) + (uint16)(Length % 2U);
    75d0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    75d4:	085b      	lsrs	r3, r3, #1
    75d6:	b29a      	uxth	r2, r3
    75d8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    75dc:	f003 0301 	and.w	r3, r3, #1
    75e0:	b29b      	uxth	r3, r3
    75e2:	4413      	add	r3, r2
    75e4:	f8ad 3016 	strh.w	r3, [sp, #22]
    75e8:	e011      	b.n	760e <Lpspi_TransmitRxInit+0x9a>
        Ret = (uint16)(Length / 4u) + (uint16)(((Length % 4U) == 0U) ? 0U : 1U);
    75ea:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    75ee:	089b      	lsrs	r3, r3, #2
    75f0:	b29a      	uxth	r2, r3
    75f2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    75f6:	f003 0303 	and.w	r3, r3, #3
    75fa:	b29b      	uxth	r3, r3
    75fc:	2b00      	cmp	r3, #0
    75fe:	bf14      	ite	ne
    7600:	2301      	movne	r3, #1
    7602:	2300      	moveq	r3, #0
    7604:	b2db      	uxtb	r3, r3
    7606:	b29b      	uxth	r3, r3
    7608:	4413      	add	r3, r2
    760a:	f8ad 3016 	strh.w	r3, [sp, #22]
    return Ret;
    760e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    }

    State->ExpectedFifoReads = Lpspi_Ip_GetWordsFromLength(BufLen, RxFrameSize);
    7612:	9b07      	ldr	r3, [sp, #28]
    7614:	831a      	strh	r2, [r3, #24]
}
    7616:	bf00      	nop
    7618:	b008      	add	sp, #32
    761a:	4770      	bx	lr
    761c:	1fff8d38 	.word	0x1fff8d38

00007620 <Lpspi_Ip_AsyncTransmit>:
                                            const uint8 *TxBuffer,
                                            uint8 *RxBuffer,
                                            uint16 Length,
                                            Lpspi_Ip_CallbackType EndCallback
                                          )
{
    7620:	b500      	push	{lr}
    7622:	b08b      	sub	sp, #44	; 0x2c
    7624:	9005      	str	r0, [sp, #20]
    7626:	9104      	str	r1, [sp, #16]
    7628:	9203      	str	r2, [sp, #12]
    762a:	f8ad 300a 	strh.w	r3, [sp, #10]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    762e:	2300      	movs	r3, #0
    7630:	9309      	str	r3, [sp, #36]	; 0x24
    uint8 Instance = 0u;
    7632:	2300      	movs	r3, #0
    7634:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(ExternalDevice != NULL_PTR);
    DevAssert(0u != Length);
    Lpspi_Ip_CheckValidParameters(ExternalDevice, Length);
    #endif
    Instance = ExternalDevice->Instance;
    7638:	9b05      	ldr	r3, [sp, #20]
    763a:	781b      	ldrb	r3, [r3, #0]
    763c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    7640:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    7644:	4a3d      	ldr	r2, [pc, #244]	; (773c <Lpspi_Ip_AsyncTransmit+0x11c>)
    7646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    764a:	9307      	str	r3, [sp, #28]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State != NULL_PTR);
    #endif
    
    Base = Lpspi_Ip_apxBases[Instance];
    764c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    7650:	4a3b      	ldr	r2, [pc, #236]	; (7740 <Lpspi_Ip_AsyncTransmit+0x120>)
    7652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7656:	9306      	str	r3, [sp, #24]
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09();
    7658:	f002 fc52 	bl	9f00 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09>
    if (LPSPI_IP_BUSY == State->Status)
    765c:	9b07      	ldr	r3, [sp, #28]
    765e:	685b      	ldr	r3, [r3, #4]
    7660:	2b02      	cmp	r3, #2
    7662:	d104      	bne.n	766e <Lpspi_Ip_AsyncTransmit+0x4e>
    {
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09();
    7664:	f002 fc78 	bl	9f58 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>
        Status = LPSPI_IP_STATUS_FAIL;
    7668:	2301      	movs	r3, #1
    766a:	9309      	str	r3, [sp, #36]	; 0x24
    766c:	e061      	b.n	7732 <Lpspi_Ip_AsyncTransmit+0x112>
        #if (STD_ON == LPSPI_IP_HALF_DUPLEX_MODE_SUPPORT)
        /* Clear some bits which support for half duplex mode at previous transfer */
        Base->CFGR1 &= ~(LPSPI_CFGR1_PCSCFG_MASK | LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK);
        #endif
        /* Mark the hardware as busy. */
        State->Status = LPSPI_IP_BUSY;
    766e:	9b07      	ldr	r3, [sp, #28]
    7670:	2202      	movs	r2, #2
    7672:	605a      	str	r2, [r3, #4]
        State->ExternalDevice = ExternalDevice;
    7674:	9b07      	ldr	r3, [sp, #28]
    7676:	9a05      	ldr	r2, [sp, #20]
    7678:	625a      	str	r2, [r3, #36]	; 0x24
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09();
    767a:	f002 fc6d 	bl	9f58 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>
        
        /* Update State structure. */
        State->Callback = EndCallback;
    767e:	9b07      	ldr	r3, [sp, #28]
    7680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7682:	611a      	str	r2, [r3, #16]
        State->NextTransferConfigAvailable = State->KeepCs;
    7684:	9b07      	ldr	r3, [sp, #28]
    7686:	7f1a      	ldrb	r2, [r3, #28]
    7688:	9b07      	ldr	r3, [sp, #28]
    768a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Reset TX done flag */
        State->TxDoneFlag = FALSE;
    768e:	9b07      	ldr	r3, [sp, #28]
    7690:	2200      	movs	r2, #0
    7692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        /* Set clock configuration */
        if(TRUE == State->FirstCmd)
    7696:	9b07      	ldr	r3, [sp, #28]
    7698:	7f5b      	ldrb	r3, [r3, #29]
    769a:	2b00      	cmp	r3, #0
    769c:	d028      	beq.n	76f0 <Lpspi_Ip_AsyncTransmit+0xd0>
        {
            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11();
    769e:	f002 fcd3 	bl	a048 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11>
            /* Make sure that FIFOs will be empty before start new transfer session */
            Base->CR |= LPSPI_CR_RTF_MASK|LPSPI_CR_RRF_MASK;
    76a2:	9b06      	ldr	r3, [sp, #24]
    76a4:	691b      	ldr	r3, [r3, #16]
    76a6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
    76aa:	9b06      	ldr	r3, [sp, #24]
    76ac:	611a      	str	r2, [r3, #16]
            /* clear all flags */
            Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    76ae:	9b06      	ldr	r3, [sp, #24]
    76b0:	695b      	ldr	r3, [r3, #20]
    76b2:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    76b6:	9b06      	ldr	r3, [sp, #24]
    76b8:	615a      	str	r2, [r3, #20]
            #endif
            {
                #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
                Base->CCR = ExternalDevice->Ccr[State->ClockMode];
                #else
                Base->CCR = ExternalDevice->Ccr;
    76ba:	9b05      	ldr	r3, [sp, #20]
    76bc:	685a      	ldr	r2, [r3, #4]
    76be:	9b06      	ldr	r3, [sp, #24]
    76c0:	641a      	str	r2, [r3, #64]	; 0x40
                #endif
            }
            /* Update current FIFO slots are available to fill .*/
            State->CurrentTxFifoSlot = LPSPI_IP_FIFO_SIZE_U8;
    76c2:	9b07      	ldr	r3, [sp, #28]
    76c4:	2204      	movs	r2, #4
    76c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            /* In setting up Transmit command register, the RXMSK is also cleared */
            Lpspi_TransmitTxInit(Instance, (const uint8*)TxBuffer, State->ExternalDevice->DeviceParams->FrameSize, State->ExternalDevice->DeviceParams->Lsb, Length);
    76ca:	9b07      	ldr	r3, [sp, #28]
    76cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    76ce:	68db      	ldr	r3, [r3, #12]
    76d0:	881a      	ldrh	r2, [r3, #0]
    76d2:	9b07      	ldr	r3, [sp, #28]
    76d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    76d6:	68db      	ldr	r3, [r3, #12]
    76d8:	7899      	ldrb	r1, [r3, #2]
    76da:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    76de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    76e2:	9300      	str	r3, [sp, #0]
    76e4:	460b      	mov	r3, r1
    76e6:	9904      	ldr	r1, [sp, #16]
    76e8:	f7ff fea4 	bl	7434 <Lpspi_TransmitTxInit>
            SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11();
    76ec:	f002 fcd8 	bl	a0a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11>
        }
        Lpspi_TransmitRxInit(Instance, RxBuffer, State->ExternalDevice->DeviceParams->FrameSize, Length);
    76f0:	9b07      	ldr	r3, [sp, #28]
    76f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    76f4:	68db      	ldr	r3, [r3, #12]
    76f6:	881a      	ldrh	r2, [r3, #0]
    76f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    76fc:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    7700:	9903      	ldr	r1, [sp, #12]
    7702:	f7ff ff37 	bl	7574 <Lpspi_TransmitRxInit>
            }
            else
            #endif
            {
                /* Set TX water */
                Base->FCR = LPSPI_FCR_TXWATER((uint32)LPSPI_IP_FIFO_SIZE_U8 - (uint32)1u);
    7706:	9b06      	ldr	r3, [sp, #24]
    7708:	2203      	movs	r2, #3
    770a:	659a      	str	r2, [r3, #88]	; 0x58
            }
            
            /* Disable DMA requests */
            Base->DER = 0u;
    770c:	9b06      	ldr	r3, [sp, #24]
    770e:	2200      	movs	r2, #0
    7710:	61da      	str	r2, [r3, #28]
            switch (State->TransferMode)
    7712:	9b07      	ldr	r3, [sp, #28]
    7714:	681b      	ldr	r3, [r3, #0]
    7716:	2b00      	cmp	r3, #0
    7718:	d002      	beq.n	7720 <Lpspi_Ip_AsyncTransmit+0x100>
    771a:	2b01      	cmp	r3, #1
    771c:	d004      	beq.n	7728 <Lpspi_Ip_AsyncTransmit+0x108>
                case LPSPI_IP_INTERRUPT:
                    Base->IER = LPSPI_IER_RDIE_MASK | LPSPI_IER_TDIE_MASK | LPSPI_IER_REIE_MASK | LPSPI_IER_TEIE_MASK;
                    break;
                default:
                    /* Nothing to do */
                    break;
    771e:	e008      	b.n	7732 <Lpspi_Ip_AsyncTransmit+0x112>
                    Base->IER = 0u;
    7720:	9b06      	ldr	r3, [sp, #24]
    7722:	2200      	movs	r2, #0
    7724:	619a      	str	r2, [r3, #24]
                    break;
    7726:	e004      	b.n	7732 <Lpspi_Ip_AsyncTransmit+0x112>
                    Base->IER = LPSPI_IER_RDIE_MASK | LPSPI_IER_TDIE_MASK | LPSPI_IER_REIE_MASK | LPSPI_IER_TEIE_MASK;
    7728:	9b06      	ldr	r3, [sp, #24]
    772a:	f641 0203 	movw	r2, #6147	; 0x1803
    772e:	619a      	str	r2, [r3, #24]
                    break;
    7730:	bf00      	nop
            /* Enable DMA request. */
            Base->DER = LPSPI_DER_RDDE_MASK | LPSPI_DER_TDDE_MASK;
        }
        #endif
    }
    return Status;
    7732:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    7734:	4618      	mov	r0, r3
    7736:	b00b      	add	sp, #44	; 0x2c
    7738:	f85d fb04 	ldr.w	pc, [sp], #4
    773c:	1fff8d38 	.word	0x1fff8d38
    7740:	0000ad6c 	.word	0x0000ad6c

00007744 <Lpspi_Ip_ManageBuffers>:
}
#endif
#endif

void Lpspi_Ip_ManageBuffers(uint8 Instance)
{
    7744:	b500      	push	{lr}
    7746:	b085      	sub	sp, #20
    7748:	4603      	mov	r3, r0
    774a:	f88d 3007 	strb.w	r3, [sp, #7]
    #endif

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    774e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7752:	4a14      	ldr	r2, [pc, #80]	; (77a4 <Lpspi_Ip_ManageBuffers+0x60>)
    7754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7758:	9303      	str	r3, [sp, #12]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    775a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    775e:	4a12      	ldr	r2, [pc, #72]	; (77a8 <Lpspi_Ip_ManageBuffers+0x64>)
    7760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7764:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    if (LPSPI_IP_POLLING == State->TransferMode)
    7766:	9b02      	ldr	r3, [sp, #8]
    7768:	681b      	ldr	r3, [r3, #0]
    776a:	2b00      	cmp	r3, #0
    776c:	d115      	bne.n	779a <Lpspi_Ip_ManageBuffers+0x56>
                - Receive: Both TDF (push CDM) and DRF (receive data) are set.
               In half duplex Slave mode:
                - Transmit: TDF is set only, RDF will never be set by RX FIFO have masked.
                - Receive: Both TDF and RDF are set. But only process for RDF to receive data. In this case, State->CurrentTxFifoSlot will be set to 0 */
            if(
                (0u != (Base->SR & LPSPI_SR_RDF_MASK)) ||
    776e:	9b03      	ldr	r3, [sp, #12]
    7770:	695b      	ldr	r3, [r3, #20]
    7772:	f003 0302 	and.w	r3, r3, #2
            if(
    7776:	2b00      	cmp	r3, #0
    7778:	d10a      	bne.n	7790 <Lpspi_Ip_ManageBuffers+0x4c>
                ((0u != (Base->SR & LPSPI_SR_TDF_MASK)) && (0u!= State->CurrentTxFifoSlot))
    777a:	9b03      	ldr	r3, [sp, #12]
    777c:	695b      	ldr	r3, [r3, #20]
    777e:	f003 0301 	and.w	r3, r3, #1
                (0u != (Base->SR & LPSPI_SR_RDF_MASK)) ||
    7782:	2b00      	cmp	r3, #0
    7784:	d009      	beq.n	779a <Lpspi_Ip_ManageBuffers+0x56>
                ((0u != (Base->SR & LPSPI_SR_TDF_MASK)) && (0u!= State->CurrentTxFifoSlot))
    7786:	9b02      	ldr	r3, [sp, #8]
    7788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    778c:	2b00      	cmp	r3, #0
    778e:	d004      	beq.n	779a <Lpspi_Ip_ManageBuffers+0x56>
                    Lpspi_Ip_TransferProcessHalfDuplex(Instance);
                }
                else
                #endif
                {
                    Lpspi_Ip_TransferProcess(Instance); 
    7790:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7794:	4618      	mov	r0, r3
    7796:	f7ff f8cd 	bl	6934 <Lpspi_Ip_TransferProcess>
                Lpspi_Ip_IrqTxDmaHandler(Instance);
            }
        }
        #endif
    }
}
    779a:	bf00      	nop
    779c:	b005      	add	sp, #20
    779e:	f85d fb04 	ldr.w	pc, [sp], #4
    77a2:	bf00      	nop
    77a4:	0000ad6c 	.word	0x0000ad6c
    77a8:	1fff8d38 	.word	0x1fff8d38

000077ac <Lpspi_Ip_UpdateFrameSize>:
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_UpdateFrameSize(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, uint16 FrameSize)
{
    77ac:	b084      	sub	sp, #16
    77ae:	9001      	str	r0, [sp, #4]
    77b0:	460b      	mov	r3, r1
    77b2:	f8ad 3002 	strh.w	r3, [sp, #2]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    77b6:	2300      	movs	r3, #0
    77b8:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    DevAssert(LPSPI_IP_FRAMESIZE_MAX_U16 >= FrameSize);
    DevAssert(LPSPI_IP_FRAMESIZE_MIN_U16 <= FrameSize);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    77ba:	9b01      	ldr	r3, [sp, #4]
    77bc:	781b      	ldrb	r3, [r3, #0]
    77be:	461a      	mov	r2, r3
    77c0:	4b09      	ldr	r3, [pc, #36]	; (77e8 <Lpspi_Ip_UpdateFrameSize+0x3c>)
    77c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    77c6:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Frame size can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    77c8:	9b02      	ldr	r3, [sp, #8]
    77ca:	685b      	ldr	r3, [r3, #4]
    77cc:	2b02      	cmp	r3, #2
    77ce:	d005      	beq.n	77dc <Lpspi_Ip_UpdateFrameSize+0x30>
    {
        ExternalDevice->DeviceParams->FrameSize = FrameSize;
    77d0:	9b01      	ldr	r3, [sp, #4]
    77d2:	68db      	ldr	r3, [r3, #12]
    77d4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    77d8:	801a      	strh	r2, [r3, #0]
    77da:	e001      	b.n	77e0 <Lpspi_Ip_UpdateFrameSize+0x34>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    77dc:	2301      	movs	r3, #1
    77de:	9303      	str	r3, [sp, #12]
    }
    return Status;
    77e0:	9b03      	ldr	r3, [sp, #12]
}
    77e2:	4618      	mov	r0, r3
    77e4:	b004      	add	sp, #16
    77e6:	4770      	bx	lr
    77e8:	1fff8d38 	.word	0x1fff8d38

000077ec <Lpspi_Ip_UpdateLsb>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateLsb(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, boolean Lsb)
{
    77ec:	b084      	sub	sp, #16
    77ee:	9001      	str	r0, [sp, #4]
    77f0:	460b      	mov	r3, r1
    77f2:	f88d 3003 	strb.w	r3, [sp, #3]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    77f6:	2300      	movs	r3, #0
    77f8:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    77fa:	9b01      	ldr	r3, [sp, #4]
    77fc:	781b      	ldrb	r3, [r3, #0]
    77fe:	461a      	mov	r2, r3
    7800:	4b09      	ldr	r3, [pc, #36]	; (7828 <Lpspi_Ip_UpdateLsb+0x3c>)
    7802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7806:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Bite order can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    7808:	9b02      	ldr	r3, [sp, #8]
    780a:	685b      	ldr	r3, [r3, #4]
    780c:	2b02      	cmp	r3, #2
    780e:	d005      	beq.n	781c <Lpspi_Ip_UpdateLsb+0x30>
    {
        ExternalDevice->DeviceParams->Lsb = Lsb;
    7810:	9b01      	ldr	r3, [sp, #4]
    7812:	68db      	ldr	r3, [r3, #12]
    7814:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7818:	709a      	strb	r2, [r3, #2]
    781a:	e001      	b.n	7820 <Lpspi_Ip_UpdateLsb+0x34>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    781c:	2301      	movs	r3, #1
    781e:	9303      	str	r3, [sp, #12]
    }
    return Status;
    7820:	9b03      	ldr	r3, [sp, #12]
}
    7822:	4618      	mov	r0, r3
    7824:	b004      	add	sp, #16
    7826:	4770      	bx	lr
    7828:	1fff8d38 	.word	0x1fff8d38

0000782c <Lpspi_Ip_UpdateDefaultTransmitData>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateDefaultTransmitData(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, uint32 DefaultData)
{
    782c:	b084      	sub	sp, #16
    782e:	9001      	str	r0, [sp, #4]
    7830:	9100      	str	r1, [sp, #0]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    7832:	2300      	movs	r3, #0
    7834:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    7836:	9b01      	ldr	r3, [sp, #4]
    7838:	781b      	ldrb	r3, [r3, #0]
    783a:	461a      	mov	r2, r3
    783c:	4b09      	ldr	r3, [pc, #36]	; (7864 <Lpspi_Ip_UpdateDefaultTransmitData+0x38>)
    783e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7842:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Bite order can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    7844:	9b02      	ldr	r3, [sp, #8]
    7846:	685b      	ldr	r3, [r3, #4]
    7848:	2b02      	cmp	r3, #2
    784a:	d004      	beq.n	7856 <Lpspi_Ip_UpdateDefaultTransmitData+0x2a>
    {
        ExternalDevice->DeviceParams->DefaultData = DefaultData;
    784c:	9b01      	ldr	r3, [sp, #4]
    784e:	68db      	ldr	r3, [r3, #12]
    7850:	9a00      	ldr	r2, [sp, #0]
    7852:	605a      	str	r2, [r3, #4]
    7854:	e001      	b.n	785a <Lpspi_Ip_UpdateDefaultTransmitData+0x2e>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    7856:	2301      	movs	r3, #1
    7858:	9303      	str	r3, [sp, #12]
    }
    return Status;
    785a:	9b03      	ldr	r3, [sp, #12]
}
    785c:	4618      	mov	r0, r3
    785e:	b004      	add	sp, #16
    7860:	4770      	bx	lr
    7862:	bf00      	nop
    7864:	1fff8d38 	.word	0x1fff8d38

00007868 <Lpspi_Ip_UpdateTransferMode>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateTransferMode(uint8 Instance, Lpspi_Ip_ModeType Mode)
{
    7868:	b084      	sub	sp, #16
    786a:	4603      	mov	r3, r0
    786c:	9100      	str	r1, [sp, #0]
    786e:	f88d 3007 	strb.w	r3, [sp, #7]
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    7872:	2300      	movs	r3, #0
    7874:	9303      	str	r3, [sp, #12]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    7876:	f89d 3007 	ldrb.w	r3, [sp, #7]
    787a:	4a09      	ldr	r2, [pc, #36]	; (78a0 <Lpspi_Ip_UpdateTransferMode+0x38>)
    787c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7880:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Transfer mode can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    7882:	9b02      	ldr	r3, [sp, #8]
    7884:	685b      	ldr	r3, [r3, #4]
    7886:	2b02      	cmp	r3, #2
    7888:	d003      	beq.n	7892 <Lpspi_Ip_UpdateTransferMode+0x2a>
    {
        State->TransferMode = Mode;
    788a:	9b02      	ldr	r3, [sp, #8]
    788c:	9a00      	ldr	r2, [sp, #0]
    788e:	601a      	str	r2, [r3, #0]
    7890:	e001      	b.n	7896 <Lpspi_Ip_UpdateTransferMode+0x2e>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    7892:	2301      	movs	r3, #1
    7894:	9303      	str	r3, [sp, #12]
    }
    return Status;
    7896:	9b03      	ldr	r3, [sp, #12]
}
    7898:	4618      	mov	r0, r3
    789a:	b004      	add	sp, #16
    789c:	4770      	bx	lr
    789e:	bf00      	nop
    78a0:	1fff8d38 	.word	0x1fff8d38

000078a4 <Lpspi_Ip_Cancel>:

void Lpspi_Ip_Cancel(uint8 Instance)
{
    78a4:	b500      	push	{lr}
    78a6:	b087      	sub	sp, #28
    78a8:	4603      	mov	r3, r0
    78aa:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    uint32 Cfgr1 = 0u;
    78ae:	2300      	movs	r3, #0
    78b0:	9305      	str	r3, [sp, #20]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    78b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78b6:	4a18      	ldr	r2, [pc, #96]	; (7918 <Lpspi_Ip_Cancel+0x74>)
    78b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78bc:	9304      	str	r3, [sp, #16]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    78be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78c2:	4a16      	ldr	r2, [pc, #88]	; (791c <Lpspi_Ip_Cancel+0x78>)
    78c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78c8:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10();
    78ca:	f002 fb6b 	bl	9fa4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10>
    if (LPSPI_IP_BUSY == State->Status)
    78ce:	9b03      	ldr	r3, [sp, #12]
    78d0:	685b      	ldr	r3, [r3, #4]
    78d2:	2b02      	cmp	r3, #2
    78d4:	d11a      	bne.n	790c <Lpspi_Ip_Cancel+0x68>
    {
        /* Mask Rx to discard received data */
        Base->TCR |= LPSPI_TCR_RXMSK(1);
    78d6:	9b04      	ldr	r3, [sp, #16]
    78d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    78da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
    78de:	9b04      	ldr	r3, [sp, #16]
    78e0:	661a      	str	r2, [r3, #96]	; 0x60
        /* store CFGR1 and restore after all registers are reset */
        Cfgr1 = Base->CFGR1;
    78e2:	9b04      	ldr	r3, [sp, #16]
    78e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    78e6:	9305      	str	r3, [sp, #20]
        /* Disable interrupts and DMA requests. */
        /* Clear FIFO */
        /* RTF and RRF will not clear shifter, so RST must be used to ensure old Data in shifter will also be cleared. */
        Base->CR |= LPSPI_CR_RST_MASK;
    78e8:	9b04      	ldr	r3, [sp, #16]
    78ea:	691b      	ldr	r3, [r3, #16]
    78ec:	f043 0202 	orr.w	r2, r3, #2
    78f0:	9b04      	ldr	r3, [sp, #16]
    78f2:	611a      	str	r2, [r3, #16]
        Base->CR &= ~LPSPI_CR_RST_MASK;
    78f4:	9b04      	ldr	r3, [sp, #16]
    78f6:	691b      	ldr	r3, [r3, #16]
    78f8:	f023 0202 	bic.w	r2, r3, #2
    78fc:	9b04      	ldr	r3, [sp, #16]
    78fe:	611a      	str	r2, [r3, #16]
        /* restore CFGR1 */
        Base->CFGR1 = Cfgr1;
    7900:	9b04      	ldr	r3, [sp, #16]
    7902:	9a05      	ldr	r2, [sp, #20]
    7904:	625a      	str	r2, [r3, #36]	; 0x24
            (void)Dma_Ip_SetLogicChannelCommand(State->PhyUnitConfig->RxDmaChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            (void)Dma_Ip_SetLogicChannelCommand(State->PhyUnitConfig->TxDmaChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
        #endif
        /* set State to idle */
        State->Status = LPSPI_IP_IDLE;
    7906:	9b03      	ldr	r3, [sp, #12]
    7908:	2201      	movs	r2, #1
    790a:	605a      	str	r2, [r3, #4]
    }
    SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10();
    790c:	f002 fb76 	bl	9ffc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10>
}
    7910:	bf00      	nop
    7912:	b007      	add	sp, #28
    7914:	f85d fb04 	ldr.w	pc, [sp], #4
    7918:	0000ad6c 	.word	0x0000ad6c
    791c:	1fff8d38 	.word	0x1fff8d38

00007920 <Lpspi_Ip_IrqHandler>:
* @param[in]     Instance            Instance of the hardware unit.
*
* @implements Lpspi_Ip_IrqHandler_Activity
*/
void Lpspi_Ip_IrqHandler(uint8 Instance)
{
    7920:	b500      	push	{lr}
    7922:	b087      	sub	sp, #28
    7924:	4603      	mov	r3, r0
    7926:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    792a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    792e:	4a18      	ldr	r2, [pc, #96]	; (7990 <Lpspi_Ip_IrqHandler+0x70>)
    7930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7934:	9305      	str	r3, [sp, #20]
    const Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    7936:	f89d 3007 	ldrb.w	r3, [sp, #7]
    793a:	4a16      	ldr	r2, [pc, #88]	; (7994 <Lpspi_Ip_IrqHandler+0x74>)
    793c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7940:	9304      	str	r3, [sp, #16]
    uint32 IrqFlags = 0u;
    7942:	2300      	movs	r3, #0
    7944:	9303      	str	r3, [sp, #12]

    if (NULL_PTR != State)
    7946:	9b04      	ldr	r3, [sp, #16]
    7948:	2b00      	cmp	r3, #0
    794a:	d016      	beq.n	797a <Lpspi_Ip_IrqHandler+0x5a>
    {
        /* the driver has been initialized */
        IrqFlags = Base->SR & (LPSPI_SR_TDF_MASK | LPSPI_SR_RDF_MASK | LPSPI_SR_TEF_MASK | LPSPI_SR_REF_MASK);
    794c:	9b05      	ldr	r3, [sp, #20]
    794e:	695a      	ldr	r2, [r3, #20]
    7950:	f641 0303 	movw	r3, #6147	; 0x1803
    7954:	4013      	ands	r3, r2
    7956:	9303      	str	r3, [sp, #12]
        IrqFlags &= Base->IER & (LPSPI_IER_TDIE_MASK | LPSPI_IER_RDIE_MASK | LPSPI_IER_TEIE_MASK | LPSPI_IER_REIE_MASK);
    7958:	9b05      	ldr	r3, [sp, #20]
    795a:	699a      	ldr	r2, [r3, #24]
    795c:	f641 0303 	movw	r3, #6147	; 0x1803
    7960:	4013      	ands	r3, r2
    7962:	9a03      	ldr	r2, [sp, #12]
    7964:	4013      	ands	r3, r2
    7966:	9303      	str	r3, [sp, #12]
        if (0u != IrqFlags)
    7968:	9b03      	ldr	r3, [sp, #12]
    796a:	2b00      	cmp	r3, #0
    796c:	d00b      	beq.n	7986 <Lpspi_Ip_IrqHandler+0x66>
                Lpspi_Ip_TransferProcessHalfDuplex(Instance);    
            }
            else
            #endif
            {
                Lpspi_Ip_TransferProcess(Instance); 
    796e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7972:	4618      	mov	r0, r3
    7974:	f7fe ffde 	bl	6934 <Lpspi_Ip_TransferProcess>
    {
        /* the driver has not been initialized */
        /* clear all flags */
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    }
}
    7978:	e005      	b.n	7986 <Lpspi_Ip_IrqHandler+0x66>
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    797a:	9b05      	ldr	r3, [sp, #20]
    797c:	695b      	ldr	r3, [r3, #20]
    797e:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    7982:	9b05      	ldr	r3, [sp, #20]
    7984:	615a      	str	r2, [r3, #20]
}
    7986:	bf00      	nop
    7988:	b007      	add	sp, #28
    798a:	f85d fb04 	ldr.w	pc, [sp], #4
    798e:	bf00      	nop
    7990:	0000ad6c 	.word	0x0000ad6c
    7994:	1fff8d38 	.word	0x1fff8d38

00007998 <Lpspi_Ip_GetStatus>:
* @param[in]        Instance - SPI peripheral instance number.
*
* @return           Lpspi_Ip_HwStatusType
*/
Lpspi_Ip_HwStatusType Lpspi_Ip_GetStatus(uint8 Instance)
{
    7998:	b084      	sub	sp, #16
    799a:	4603      	mov	r3, r0
    799c:	f88d 3007 	strb.w	r3, [sp, #7]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_HwStatusType Status = LPSPI_IP_UNINIT;
    79a0:	2300      	movs	r3, #0
    79a2:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    79a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    79a8:	4a06      	ldr	r2, [pc, #24]	; (79c4 <Lpspi_Ip_GetStatus+0x2c>)
    79aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79ae:	9302      	str	r3, [sp, #8]
    if (State != NULL_PTR)
    79b0:	9b02      	ldr	r3, [sp, #8]
    79b2:	2b00      	cmp	r3, #0
    79b4:	d002      	beq.n	79bc <Lpspi_Ip_GetStatus+0x24>
    {
        Status = State->Status;
    79b6:	9b02      	ldr	r3, [sp, #8]
    79b8:	685b      	ldr	r3, [r3, #4]
    79ba:	9303      	str	r3, [sp, #12]
    }
    
    return Status;
    79bc:	9b03      	ldr	r3, [sp, #12]
}
    79be:	4618      	mov	r0, r3
    79c0:	b004      	add	sp, #16
    79c2:	4770      	bx	lr
    79c4:	1fff8d38 	.word	0x1fff8d38

000079c8 <Spi_CheckInit>:
static inline Std_ReturnType Spi_CheckInit
    ( 
        const Spi_ConfigType *ConfigPtr,
        uint32 SpiCoreID
    )
{
    79c8:	b086      	sub	sp, #24
    79ca:	9001      	str	r0, [sp, #4]
    79cc:	9100      	str	r1, [sp, #0]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    79ce:	2300      	movs	r3, #0
    79d0:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 Sequence;
#endif

#if (SPI_PRECOMPILE_SUPPORT == STD_OFF)
    /* Configuration sizes must be checked for Post Build & Link Time configurations */
    Channel  = (uint32)(ConfigPtr->SpiMaxChannel);
    79d4:	9b01      	ldr	r3, [sp, #4]
    79d6:	789b      	ldrb	r3, [r3, #2]
    79d8:	9304      	str	r3, [sp, #16]
    Job      = (uint32)(ConfigPtr->SpiMaxJob);
    79da:	9b01      	ldr	r3, [sp, #4]
    79dc:	889b      	ldrh	r3, [r3, #4]
    79de:	9303      	str	r3, [sp, #12]
    Sequence = (uint32)(ConfigPtr->SpiMaxSequence);
    79e0:	9b01      	ldr	r3, [sp, #4]
    79e2:	799b      	ldrb	r3, [r3, #6]
    79e4:	9302      	str	r3, [sp, #8]

    if ((Channel >= SPI_MAX_CHANNEL) || (Job >= SPI_MAX_JOB) || (Sequence >= SPI_MAX_SEQUENCE))
    79e6:	9b04      	ldr	r3, [sp, #16]
    79e8:	2b01      	cmp	r3, #1
    79ea:	d805      	bhi.n	79f8 <Spi_CheckInit+0x30>
    79ec:	9b03      	ldr	r3, [sp, #12]
    79ee:	2b01      	cmp	r3, #1
    79f0:	d802      	bhi.n	79f8 <Spi_CheckInit+0x30>
    79f2:	9b02      	ldr	r3, [sp, #8]
    79f4:	2b01      	cmp	r3, #1
    79f6:	d902      	bls.n	79fe <Spi_CheckInit+0x36>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    79f8:	2301      	movs	r3, #1
    79fa:	f88d 3017 	strb.w	r3, [sp, #23]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        /* Call Det_ReportError */
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_INIT_ID,SPI_E_CONFIG_OUT_OF_RANGE);
#endif
    }
    if (SpiCoreID != ConfigPtr->SpiCoreUse)
    79fe:	9b01      	ldr	r3, [sp, #4]
    7a00:	689b      	ldr	r3, [r3, #8]
    7a02:	9a00      	ldr	r2, [sp, #0]
    7a04:	429a      	cmp	r2, r3
    7a06:	d002      	beq.n	7a0e <Spi_CheckInit+0x46>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    7a08:	2301      	movs	r3, #1
    7a0a:	f88d 3017 	strb.w	r3, [sp, #23]
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_INIT_ID,SPI_E_INVALID_POINTER);
#endif
    }
#endif /* (SPI_PRECOMPILE_SUPPORT == STD_OFF) */

    return CheckStatus;
    7a0e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7a12:	4618      	mov	r0, r3
    7a14:	b006      	add	sp, #24
    7a16:	4770      	bx	lr

00007a18 <Spi_SyncJobsTranfer>:
static Std_ReturnType Spi_SyncJobsTranfer
    (
        const Spi_SequenceConfigType *SequenceConfig,
        uint32 SpiCoreID
    )
{
    7a18:	b500      	push	{lr}
    7a1a:	b089      	sub	sp, #36	; 0x24
    7a1c:	9001      	str	r0, [sp, #4]
    7a1e:	9100      	str	r1, [sp, #0]
    Spi_JobType JobsCount;
    const Spi_JobType *JobIndexList;
    Spi_JobType Job;
    Spi_JobStateType *JobState;
    const Spi_JobConfigType *JobConfig;
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    7a20:	2300      	movs	r3, #0
    7a22:	f88d 3017 	strb.w	r3, [sp, #23]
    
    /* Get the number of jobs in the sequence */
    JobsCount = SequenceConfig->NumJobs;
    7a26:	9b01      	ldr	r3, [sp, #4]
    7a28:	881b      	ldrh	r3, [r3, #0]
    7a2a:	f8ad 301e 	strh.w	r3, [sp, #30]
    JobIndexList = SequenceConfig->JobIndexList;
    7a2e:	9b01      	ldr	r3, [sp, #4]
    7a30:	689b      	ldr	r3, [r3, #8]
    7a32:	9306      	str	r3, [sp, #24]
    while (0u < JobsCount)
    7a34:	e072      	b.n	7b1c <Spi_SyncJobsTranfer+0x104>
    {
        /* Get the job id */
        Job = *JobIndexList;
    7a36:	9b06      	ldr	r3, [sp, #24]
    7a38:	881b      	ldrh	r3, [r3, #0]
    7a3a:	f8ad 3014 	strh.w	r3, [sp, #20]
        /* Set the job status as pending */
        JobState = &Spi_axSpiJobState[Job];
    7a3e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7a42:	009b      	lsls	r3, r3, #2
    7a44:	4a3a      	ldr	r2, [pc, #232]	; (7b30 <Spi_SyncJobsTranfer+0x118>)
    7a46:	4413      	add	r3, r2
    7a48:	9304      	str	r3, [sp, #16]
        JobState->Result = SPI_JOB_PENDING;
    7a4a:	9b04      	ldr	r3, [sp, #16]
    7a4c:	2201      	movs	r2, #1
    7a4e:	601a      	str	r2, [r3, #0]
        JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    7a50:	4a38      	ldr	r2, [pc, #224]	; (7b34 <Spi_SyncJobsTranfer+0x11c>)
    7a52:	9b00      	ldr	r3, [sp, #0]
    7a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a58:	691a      	ldr	r2, [r3, #16]
    7a5a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7a5e:	009b      	lsls	r3, r3, #2
    7a60:	4413      	add	r3, r2
    7a62:	681b      	ldr	r3, [r3, #0]
    7a64:	9303      	str	r3, [sp, #12]
        
        /* start job notification to assert the non-cs pin,
        when non-cs pin is used as chipselect*/
        if (NULL_PTR != JobConfig->StartNotification)
    7a66:	9b03      	ldr	r3, [sp, #12]
    7a68:	68db      	ldr	r3, [r3, #12]
    7a6a:	2b00      	cmp	r3, #0
    7a6c:	d002      	beq.n	7a74 <Spi_SyncJobsTranfer+0x5c>
        {
            JobConfig->StartNotification();
    7a6e:	9b03      	ldr	r3, [sp, #12]
    7a70:	68db      	ldr	r3, [r3, #12]
    7a72:	4798      	blx	r3
        else
        {
            /* Do nothing */
        }
        /* Mark HWUnit as busy */
        Spi_axSpiHwUnitQueueArray[JobConfig->HWUnit].Status = SPI_BUSY;
    7a74:	9b03      	ldr	r3, [sp, #12]
    7a76:	7f1b      	ldrb	r3, [r3, #28]
    7a78:	4619      	mov	r1, r3
    7a7a:	4b2f      	ldr	r3, [pc, #188]	; (7b38 <Spi_SyncJobsTranfer+0x120>)
    7a7c:	2202      	movs	r2, #2
    7a7e:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        
        Status = Spi_Ipw_SyncTransmit(JobConfig, SpiCoreID);
    7a82:	9900      	ldr	r1, [sp, #0]
    7a84:	9803      	ldr	r0, [sp, #12]
    7a86:	f000 fc5f 	bl	8348 <Spi_Ipw_SyncTransmit>
    7a8a:	4603      	mov	r3, r0
    7a8c:	f88d 3017 	strb.w	r3, [sp, #23]
        
        /* release HWUnit */
        Spi_axSpiHwUnitQueueArray[JobConfig->HWUnit].Status = SPI_IDLE;
    7a90:	9b03      	ldr	r3, [sp, #12]
    7a92:	7f1b      	ldrb	r3, [r3, #28]
    7a94:	4619      	mov	r1, r3
    7a96:	4b28      	ldr	r3, [pc, #160]	; (7b38 <Spi_SyncJobsTranfer+0x120>)
    7a98:	2201      	movs	r2, #1
    7a9a:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        
        if ((Std_ReturnType)E_OK == Status)
    7a9e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7aa2:	2b00      	cmp	r3, #0
    7aa4:	d10a      	bne.n	7abc <Spi_SyncJobsTranfer+0xa4>
        {
            /* Job is done set the status as OK */
            JobState->Result = SPI_JOB_OK;
    7aa6:	9b04      	ldr	r3, [sp, #16]
    7aa8:	2200      	movs	r2, #0
    7aaa:	601a      	str	r2, [r3, #0]
            /* Perform job EndNotification (if there is one) */
            if (NULL_PTR != JobConfig->EndNotification)
    7aac:	9b03      	ldr	r3, [sp, #12]
    7aae:	689b      	ldr	r3, [r3, #8]
    7ab0:	2b00      	cmp	r3, #0
    7ab2:	d02b      	beq.n	7b0c <Spi_SyncJobsTranfer+0xf4>
            {
                JobConfig->EndNotification();
    7ab4:	9b03      	ldr	r3, [sp, #12]
    7ab6:	689b      	ldr	r3, [r3, #8]
    7ab8:	4798      	blx	r3
    7aba:	e027      	b.n	7b0c <Spi_SyncJobsTranfer+0xf4>
            /* transmission failed */
            /* set the remaining job status (including the current one) as FAILED */
            do
            {
                /* Set the job status as FAILED */
                Spi_axSpiJobState[*JobIndexList].Result = SPI_JOB_FAILED;
    7abc:	9b06      	ldr	r3, [sp, #24]
    7abe:	881b      	ldrh	r3, [r3, #0]
    7ac0:	4619      	mov	r1, r3
    7ac2:	4b1b      	ldr	r3, [pc, #108]	; (7b30 <Spi_SyncJobsTranfer+0x118>)
    7ac4:	2202      	movs	r2, #2
    7ac6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                /* Update pointer position for JobConfig */
                JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[*JobIndexList].JobCfg;
    7aca:	4a1a      	ldr	r2, [pc, #104]	; (7b34 <Spi_SyncJobsTranfer+0x11c>)
    7acc:	9b00      	ldr	r3, [sp, #0]
    7ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ad2:	691a      	ldr	r2, [r3, #16]
    7ad4:	9b06      	ldr	r3, [sp, #24]
    7ad6:	881b      	ldrh	r3, [r3, #0]
    7ad8:	009b      	lsls	r3, r3, #2
    7ada:	4413      	add	r3, r2
    7adc:	681b      	ldr	r3, [r3, #0]
    7ade:	9303      	str	r3, [sp, #12]
                /* Perform job EndNotification (if there is one) */
                if (NULL_PTR != JobConfig->EndNotification)
    7ae0:	9b03      	ldr	r3, [sp, #12]
    7ae2:	689b      	ldr	r3, [r3, #8]
    7ae4:	2b00      	cmp	r3, #0
    7ae6:	d002      	beq.n	7aee <Spi_SyncJobsTranfer+0xd6>
                {
                    JobConfig->EndNotification();
    7ae8:	9b03      	ldr	r3, [sp, #12]
    7aea:	689b      	ldr	r3, [r3, #8]
    7aec:	4798      	blx	r3
                }
                else
                {
                    /* Do nothing */
                }
                JobIndexList++;
    7aee:	9b06      	ldr	r3, [sp, #24]
    7af0:	3302      	adds	r3, #2
    7af2:	9306      	str	r3, [sp, #24]
                JobsCount--;
    7af4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7af8:	3b01      	subs	r3, #1
    7afa:	f8ad 301e 	strh.w	r3, [sp, #30]
            } while (0u < JobsCount);
    7afe:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7b02:	2b00      	cmp	r3, #0
    7b04:	d1da      	bne.n	7abc <Spi_SyncJobsTranfer+0xa4>
            JobsCount = 1u;  /* needed to end correctly the outer loop */
    7b06:	2301      	movs	r3, #1
    7b08:	f8ad 301e 	strh.w	r3, [sp, #30]
        }
        /* iterate to next job in sequence */
        JobIndexList++;
    7b0c:	9b06      	ldr	r3, [sp, #24]
    7b0e:	3302      	adds	r3, #2
    7b10:	9306      	str	r3, [sp, #24]
        JobsCount--;
    7b12:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7b16:	3b01      	subs	r3, #1
    7b18:	f8ad 301e 	strh.w	r3, [sp, #30]
    while (0u < JobsCount)
    7b1c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7b20:	2b00      	cmp	r3, #0
    7b22:	d188      	bne.n	7a36 <Spi_SyncJobsTranfer+0x1e>
    } /* while (JobsCount > 0u) */
    return Status;
    7b24:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7b28:	4618      	mov	r0, r3
    7b2a:	b009      	add	sp, #36	; 0x24
    7b2c:	f85d fb04 	ldr.w	pc, [sp], #4
    7b30:	1fff8d58 	.word	0x1fff8d58
    7b34:	1fff8d4c 	.word	0x1fff8d4c
    7b38:	1fff8d44 	.word	0x1fff8d44

00007b3c <Spi_InitChannelsJobsSeqsState>:
*/
static void Spi_InitChannelsJobsSeqsState
    (
        uint32 SpiCoreID      
    )
{
    7b3c:	b088      	sub	sp, #32
    7b3e:	9001      	str	r0, [sp, #4]
#endif
    const Spi_ChannelConfigType *ChannelConfig;
    const Spi_JobConfigType *JobConfig;
    const Spi_SequenceConfigType *SequenceConfig;
    
    for (Channel = 0u;
    7b40:	2300      	movs	r3, #0
    7b42:	9307      	str	r3, [sp, #28]
    7b44:	e034      	b.n	7bb0 <Spi_InitChannelsJobsSeqsState+0x74>
        Channel <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxChannel);
        Channel++)
    {
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[Channel].ChannelCfg;
    7b46:	4a4a      	ldr	r2, [pc, #296]	; (7c70 <Spi_InitChannelsJobsSeqsState+0x134>)
    7b48:	9b01      	ldr	r3, [sp, #4]
    7b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b4e:	68da      	ldr	r2, [r3, #12]
    7b50:	9b07      	ldr	r3, [sp, #28]
    7b52:	009b      	lsls	r3, r3, #2
    7b54:	4413      	add	r3, r2
    7b56:	681b      	ldr	r3, [r3, #0]
    7b58:	9302      	str	r3, [sp, #8]
        /* Check which channel has assigned for current core */
        if((NULL_PTR != ChannelConfig) && (SpiCoreID == ChannelConfig->SpiCoreUse))
    7b5a:	9b02      	ldr	r3, [sp, #8]
    7b5c:	2b00      	cmp	r3, #0
    7b5e:	d024      	beq.n	7baa <Spi_InitChannelsJobsSeqsState+0x6e>
    7b60:	9b02      	ldr	r3, [sp, #8]
    7b62:	695b      	ldr	r3, [r3, #20]
    7b64:	9a01      	ldr	r2, [sp, #4]
    7b66:	429a      	cmp	r2, r3
    7b68:	d11f      	bne.n	7baa <Spi_InitChannelsJobsSeqsState+0x6e>
        {
            /* Check if configured buffers are External (EB) */
            if (EB == ChannelConfig->BufferType)
    7b6a:	9b02      	ldr	r3, [sp, #8]
    7b6c:	681b      	ldr	r3, [r3, #0]
    7b6e:	2b01      	cmp	r3, #1
    7b70:	d10e      	bne.n	7b90 <Spi_InitChannelsJobsSeqsState+0x54>
            {
                /* Initialize all buffers */
                ChannelConfig->BufferDescriptor->ExternalBufferTX = NULL_PTR;
    7b72:	9b02      	ldr	r3, [sp, #8]
    7b74:	691b      	ldr	r3, [r3, #16]
    7b76:	2200      	movs	r2, #0
    7b78:	601a      	str	r2, [r3, #0]
                ChannelConfig->BufferDescriptor->BufferRX = NULL_PTR;
    7b7a:	9b02      	ldr	r3, [sp, #8]
    7b7c:	691b      	ldr	r3, [r3, #16]
    7b7e:	2200      	movs	r2, #0
    7b80:	609a      	str	r2, [r3, #8]
    
                /* Channel length is zero for unconfigured external buffers */
                Spi_axSpiChannelState[Channel].Length = (Spi_NumberOfDataType) 0;
    7b82:	4a3c      	ldr	r2, [pc, #240]	; (7c74 <Spi_InitChannelsJobsSeqsState+0x138>)
    7b84:	9b07      	ldr	r3, [sp, #28]
    7b86:	009b      	lsls	r3, r3, #2
    7b88:	4413      	add	r3, r2
    7b8a:	2200      	movs	r2, #0
    7b8c:	805a      	strh	r2, [r3, #2]
    7b8e:	e007      	b.n	7ba0 <Spi_InitChannelsJobsSeqsState+0x64>
            }
            else
            {
                /* Setup channel length according to configuration */
                Spi_axSpiChannelState[Channel].Length = ChannelConfig->Length;
    7b90:	9b02      	ldr	r3, [sp, #8]
    7b92:	8999      	ldrh	r1, [r3, #12]
    7b94:	4a37      	ldr	r2, [pc, #220]	; (7c74 <Spi_InitChannelsJobsSeqsState+0x138>)
    7b96:	9b07      	ldr	r3, [sp, #28]
    7b98:	009b      	lsls	r3, r3, #2
    7b9a:	4413      	add	r3, r2
    7b9c:	460a      	mov	r2, r1
    7b9e:	805a      	strh	r2, [r3, #2]
            }
            Spi_axSpiChannelState[Channel].Flags = SPI_CHANNEL_FLAG_TX_DEFAULT_U8;
    7ba0:	4a34      	ldr	r2, [pc, #208]	; (7c74 <Spi_InitChannelsJobsSeqsState+0x138>)
    7ba2:	9b07      	ldr	r3, [sp, #28]
    7ba4:	2101      	movs	r1, #1
    7ba6:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        Channel++)
    7baa:	9b07      	ldr	r3, [sp, #28]
    7bac:	3301      	adds	r3, #1
    7bae:	9307      	str	r3, [sp, #28]
        Channel <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxChannel);
    7bb0:	4a2f      	ldr	r2, [pc, #188]	; (7c70 <Spi_InitChannelsJobsSeqsState+0x134>)
    7bb2:	9b01      	ldr	r3, [sp, #4]
    7bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bb8:	789b      	ldrb	r3, [r3, #2]
    7bba:	461a      	mov	r2, r3
    for (Channel = 0u;
    7bbc:	9b07      	ldr	r3, [sp, #28]
    7bbe:	4293      	cmp	r3, r2
    7bc0:	d9c1      	bls.n	7b46 <Spi_InitChannelsJobsSeqsState+0xa>
        }
    }
    
    /* initialize job results */
    for (Job = 0u;
    7bc2:	2300      	movs	r3, #0
    7bc4:	9306      	str	r3, [sp, #24]
    7bc6:	e019      	b.n	7bfc <Spi_InitChannelsJobsSeqsState+0xc0>
        Job <= (uint32)( Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxJob);
        Job++)
    {
        JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    7bc8:	4a29      	ldr	r2, [pc, #164]	; (7c70 <Spi_InitChannelsJobsSeqsState+0x134>)
    7bca:	9b01      	ldr	r3, [sp, #4]
    7bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bd0:	691a      	ldr	r2, [r3, #16]
    7bd2:	9b06      	ldr	r3, [sp, #24]
    7bd4:	009b      	lsls	r3, r3, #2
    7bd6:	4413      	add	r3, r2
    7bd8:	681b      	ldr	r3, [r3, #0]
    7bda:	9303      	str	r3, [sp, #12]
        if((NULL_PTR != JobConfig) && (SpiCoreID == JobConfig->SpiCoreUse))
    7bdc:	9b03      	ldr	r3, [sp, #12]
    7bde:	2b00      	cmp	r3, #0
    7be0:	d009      	beq.n	7bf6 <Spi_InitChannelsJobsSeqsState+0xba>
    7be2:	9b03      	ldr	r3, [sp, #12]
    7be4:	695b      	ldr	r3, [r3, #20]
    7be6:	9a01      	ldr	r2, [sp, #4]
    7be8:	429a      	cmp	r2, r3
    7bea:	d104      	bne.n	7bf6 <Spi_InitChannelsJobsSeqsState+0xba>
        {
            Spi_axSpiJobState[Job].Result = SPI_JOB_OK;
    7bec:	4a22      	ldr	r2, [pc, #136]	; (7c78 <Spi_InitChannelsJobsSeqsState+0x13c>)
    7bee:	9b06      	ldr	r3, [sp, #24]
    7bf0:	2100      	movs	r1, #0
    7bf2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Job++)
    7bf6:	9b06      	ldr	r3, [sp, #24]
    7bf8:	3301      	adds	r3, #1
    7bfa:	9306      	str	r3, [sp, #24]
        Job <= (uint32)( Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxJob);
    7bfc:	4a1c      	ldr	r2, [pc, #112]	; (7c70 <Spi_InitChannelsJobsSeqsState+0x134>)
    7bfe:	9b01      	ldr	r3, [sp, #4]
    7c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c04:	889b      	ldrh	r3, [r3, #4]
    7c06:	461a      	mov	r2, r3
    for (Job = 0u;
    7c08:	9b06      	ldr	r3, [sp, #24]
    7c0a:	4293      	cmp	r3, r2
    7c0c:	d9dc      	bls.n	7bc8 <Spi_InitChannelsJobsSeqsState+0x8c>
            Spi_axSpiJobState[Job].AsyncCrtSequenceState = NULL_PTR;
        #endif
        }
    }
    
    for (Sequence = 0u;
    7c0e:	2300      	movs	r3, #0
    7c10:	9305      	str	r3, [sp, #20]
    7c12:	e01f      	b.n	7c54 <Spi_InitChannelsJobsSeqsState+0x118>
        Sequence <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxSequence);
        Sequence++)
    {
        SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
    7c14:	4a16      	ldr	r2, [pc, #88]	; (7c70 <Spi_InitChannelsJobsSeqsState+0x134>)
    7c16:	9b01      	ldr	r3, [sp, #4]
    7c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c1c:	695a      	ldr	r2, [r3, #20]
    7c1e:	9b05      	ldr	r3, [sp, #20]
    7c20:	009b      	lsls	r3, r3, #2
    7c22:	4413      	add	r3, r2
    7c24:	681b      	ldr	r3, [r3, #0]
    7c26:	9304      	str	r3, [sp, #16]
        if ((NULL_PTR != SequenceConfig) && (SpiCoreID == SequenceConfig->SpiCoreUse))
    7c28:	9b04      	ldr	r3, [sp, #16]
    7c2a:	2b00      	cmp	r3, #0
    7c2c:	d00f      	beq.n	7c4e <Spi_InitChannelsJobsSeqsState+0x112>
    7c2e:	9b04      	ldr	r3, [sp, #16]
    7c30:	685b      	ldr	r3, [r3, #4]
    7c32:	9a01      	ldr	r2, [sp, #4]
    7c34:	429a      	cmp	r2, r3
    7c36:	d10a      	bne.n	7c4e <Spi_InitChannelsJobsSeqsState+0x112>
            SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
            Spi_axSpiSequenceState[Sequence].Sequence = SequenceConfig;
            #endif
    
            /* initialize sequence results */
            Spi_axSpiSequenceState[Sequence].Result = SPI_SEQ_OK;
    7c38:	4a10      	ldr	r2, [pc, #64]	; (7c7c <Spi_InitChannelsJobsSeqsState+0x140>)
    7c3a:	9b05      	ldr	r3, [sp, #20]
    7c3c:	2100      	movs	r1, #0
    7c3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* SPI135: Spi_SyncTransmit() must fail if an other sync transmission
                    is ongoing.*/
            /* mark all HW units as used by the sync transmission, in order to
                force the mutual exclusion of Spi_SyncTransmit() calls */
    
            Spi_au32SpiSeqUsedHWUnits[Sequence] = 0xFFFFFFFFU;
    7c42:	4a0f      	ldr	r2, [pc, #60]	; (7c80 <Spi_InitChannelsJobsSeqsState+0x144>)
    7c44:	9b05      	ldr	r3, [sp, #20]
    7c46:	f04f 31ff 	mov.w	r1, #4294967295
    7c4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Sequence++)
    7c4e:	9b05      	ldr	r3, [sp, #20]
    7c50:	3301      	adds	r3, #1
    7c52:	9305      	str	r3, [sp, #20]
        Sequence <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxSequence);
    7c54:	4a06      	ldr	r2, [pc, #24]	; (7c70 <Spi_InitChannelsJobsSeqsState+0x134>)
    7c56:	9b01      	ldr	r3, [sp, #4]
    7c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c5c:	799b      	ldrb	r3, [r3, #6]
    7c5e:	461a      	mov	r2, r3
    for (Sequence = 0u;
    7c60:	9b05      	ldr	r3, [sp, #20]
    7c62:	4293      	cmp	r3, r2
    7c64:	d9d6      	bls.n	7c14 <Spi_InitChannelsJobsSeqsState+0xd8>
        else
        {
            /* Do nothing */
        }
    }
}
    7c66:	bf00      	nop
    7c68:	bf00      	nop
    7c6a:	b008      	add	sp, #32
    7c6c:	4770      	bx	lr
    7c6e:	bf00      	nop
    7c70:	1fff8d4c 	.word	0x1fff8d4c
    7c74:	1fff8d60 	.word	0x1fff8d60
    7c78:	1fff8d58 	.word	0x1fff8d58
    7c7c:	1fff8d50 	.word	0x1fff8d50
    7c80:	1fff8d68 	.word	0x1fff8d68

00007c84 <Spi_GetStatusAsyncCheckHwBusy>:
*/
static Spi_StatusType Spi_GetStatusAsyncCheckHwBusy
    (
        uint32 SpiCoreID
    )
{
    7c84:	b084      	sub	sp, #16
    7c86:	9001      	str	r0, [sp, #4]
    Spi_StatusType StatusFlag = SPI_IDLE;
    7c88:	2301      	movs	r3, #1
    7c8a:	9303      	str	r3, [sp, #12]
    Spi_HWUnitType HWUnit;
    
    for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    7c8c:	2300      	movs	r3, #0
    7c8e:	f88d 300b 	strb.w	r3, [sp, #11]
    7c92:	e028      	b.n	7ce6 <Spi_GetStatusAsyncCheckHwBusy+0x62>
    {
        if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7c94:	4a18      	ldr	r2, [pc, #96]	; (7cf8 <Spi_GetStatusAsyncCheckHwBusy+0x74>)
    7c96:	9b01      	ldr	r3, [sp, #4]
    7c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c9c:	69da      	ldr	r2, [r3, #28]
    7c9e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7ca2:	009b      	lsls	r3, r3, #2
    7ca4:	4413      	add	r3, r2
    7ca6:	681b      	ldr	r3, [r3, #0]
    7ca8:	2b00      	cmp	r3, #0
    7caa:	d017      	beq.n	7cdc <Spi_GetStatusAsyncCheckHwBusy+0x58>
            (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    7cac:	4a12      	ldr	r2, [pc, #72]	; (7cf8 <Spi_GetStatusAsyncCheckHwBusy+0x74>)
    7cae:	9b01      	ldr	r3, [sp, #4]
    7cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cb4:	69da      	ldr	r2, [r3, #28]
    7cb6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7cba:	009b      	lsls	r3, r3, #2
    7cbc:	4413      	add	r3, r2
    7cbe:	681b      	ldr	r3, [r3, #0]
    7cc0:	689b      	ldr	r3, [r3, #8]
        if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7cc2:	9a01      	ldr	r2, [sp, #4]
    7cc4:	429a      	cmp	r2, r3
    7cc6:	d109      	bne.n	7cdc <Spi_GetStatusAsyncCheckHwBusy+0x58>
           )
        {
            if (SPI_BUSY == Spi_axSpiHwUnitQueueArray[HWUnit].Status)
    7cc8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7ccc:	4a0b      	ldr	r2, [pc, #44]	; (7cfc <Spi_GetStatusAsyncCheckHwBusy+0x78>)
    7cce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    7cd2:	2b02      	cmp	r3, #2
    7cd4:	d102      	bne.n	7cdc <Spi_GetStatusAsyncCheckHwBusy+0x58>
            {
                StatusFlag = SPI_BUSY;
    7cd6:	2302      	movs	r3, #2
    7cd8:	9303      	str	r3, [sp, #12]
                break;
    7cda:	e008      	b.n	7cee <Spi_GetStatusAsyncCheckHwBusy+0x6a>
    for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    7cdc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7ce0:	3301      	adds	r3, #1
    7ce2:	f88d 300b 	strb.w	r3, [sp, #11]
    7ce6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7cea:	2b00      	cmp	r3, #0
    7cec:	d0d2      	beq.n	7c94 <Spi_GetStatusAsyncCheckHwBusy+0x10>
        else
        {
            /* Do nothing */
        }
    }
    return StatusFlag;
    7cee:	9b03      	ldr	r3, [sp, #12]
}
    7cf0:	4618      	mov	r0, r3
    7cf2:	b004      	add	sp, #16
    7cf4:	4770      	bx	lr
    7cf6:	bf00      	nop
    7cf8:	1fff8d4c 	.word	0x1fff8d4c
    7cfc:	1fff8d44 	.word	0x1fff8d44

00007d00 <Spi_GetVersionInfo>:
/** @implements Spi_GetVersionInfo_Activity */
void Spi_GetVersionInfo 
    (
        Std_VersionInfoType *versioninfo
    )
{
    7d00:	b082      	sub	sp, #8
    7d02:	9001      	str	r0, [sp, #4]
        (void)Det_ReportError((uint16)SPI_MODULE_ID,(uint8)0,SPI_GETVERSIONINFO_ID,SPI_E_PARAM_POINTER);
    }
    else
    {
#endif /* SPI_DEV_ERROR_DETECT == STD_ON */
    versioninfo->vendorID = (uint16)SPI_VENDOR_ID;
    7d04:	9b01      	ldr	r3, [sp, #4]
    7d06:	222b      	movs	r2, #43	; 0x2b
    7d08:	801a      	strh	r2, [r3, #0]
    versioninfo->moduleID = (uint8)SPI_MODULE_ID;
    7d0a:	9b01      	ldr	r3, [sp, #4]
    7d0c:	2253      	movs	r2, #83	; 0x53
    7d0e:	805a      	strh	r2, [r3, #2]
    versioninfo->sw_major_version = (uint8)SPI_SW_MAJOR_VERSION;
    7d10:	9b01      	ldr	r3, [sp, #4]
    7d12:	2202      	movs	r2, #2
    7d14:	711a      	strb	r2, [r3, #4]
    versioninfo->sw_minor_version = (uint8)SPI_SW_MINOR_VERSION;
    7d16:	9b01      	ldr	r3, [sp, #4]
    7d18:	2200      	movs	r2, #0
    7d1a:	715a      	strb	r2, [r3, #5]
    versioninfo->sw_patch_version = (uint8)SPI_SW_PATCH_VERSION;
    7d1c:	9b01      	ldr	r3, [sp, #4]
    7d1e:	2200      	movs	r2, #0
    7d20:	719a      	strb	r2, [r3, #6]
#if(SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif /* SPI_DEV_ERROR_DETECT == STD_ON */
}
    7d22:	bf00      	nop
    7d24:	b002      	add	sp, #8
    7d26:	4770      	bx	lr

00007d28 <Spi_Init>:
/** @implements Spi_Init_Activity */
void Spi_Init
    (
        const Spi_ConfigType *ConfigPtr
    )
{
    7d28:	b500      	push	{lr}
    7d2a:	b085      	sub	sp, #20
    7d2c:	9001      	str	r0, [sp, #4]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    7d2e:	2300      	movs	r3, #0
    7d30:	f88d 300e 	strb.w	r3, [sp, #14]

    SpiCoreID = Spi_GetCoreID;
    7d34:	2300      	movs	r3, #0
    7d36:	9302      	str	r3, [sp, #8]
    CheckStatus = Spi_InitCheckDemError(SpiCoreID, ConfigPtr);
    if ((Std_ReturnType)E_OK == CheckStatus) 
    {
#endif /*(SPI_DEV_ERROR_DETECT == STD_ON)*/

    CheckStatus = Spi_CheckInit(ConfigPtr, SpiCoreID);
    7d38:	9902      	ldr	r1, [sp, #8]
    7d3a:	9801      	ldr	r0, [sp, #4]
    7d3c:	f7ff fe44 	bl	79c8 <Spi_CheckInit>
    7d40:	4603      	mov	r3, r0
    7d42:	f88d 300e 	strb.w	r3, [sp, #14]

    if((Std_ReturnType)E_OK == CheckStatus )
    7d46:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7d4a:	2b00      	cmp	r3, #0
    7d4c:	d144      	bne.n	7dd8 <Spi_Init+0xb0>
    {
    #if (SPI_PRECOMPILE_SUPPORT == STD_OFF)
        Spi_apxSpiConfigPtr[SpiCoreID] = ConfigPtr;
    7d4e:	4924      	ldr	r1, [pc, #144]	; (7de0 <Spi_Init+0xb8>)
    7d50:	9b02      	ldr	r3, [sp, #8]
    7d52:	9a01      	ldr	r2, [sp, #4]
    7d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    #else /* (SPI_CONFIG_VARIANT == SPI_VARIANT_PRECOMPILE) */
        Spi_apxSpiConfigPtr[SpiCoreID] = Spi_PBCfgVariantPredefined[SpiCoreID];
    #endif /* (SPI_PRECOMPILE_SUPPORT == STD_OFF) */
    /* Initiate Channels, Jobs, Sequences state */
    Spi_InitChannelsJobsSeqsState(SpiCoreID);
    7d58:	9802      	ldr	r0, [sp, #8]
    7d5a:	f7ff feef 	bl	7b3c <Spi_InitChannelsJobsSeqsState>
        
        /* initialize all physical HWUnits */
        for (HWUnit = (Spi_HWUnitType) 0;
    7d5e:	2300      	movs	r3, #0
    7d60:	f88d 300f 	strb.w	r3, [sp, #15]
    7d64:	e034      	b.n	7dd0 <Spi_Init+0xa8>
            HWUnit < (Spi_HWUnitType) SPI_MAX_HWUNIT;
            HWUnit++)
        {
            if((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7d66:	4a1e      	ldr	r2, [pc, #120]	; (7de0 <Spi_Init+0xb8>)
    7d68:	9b02      	ldr	r3, [sp, #8]
    7d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d6e:	69da      	ldr	r2, [r3, #28]
    7d70:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d74:	009b      	lsls	r3, r3, #2
    7d76:	4413      	add	r3, r2
    7d78:	681b      	ldr	r3, [r3, #0]
    7d7a:	2b00      	cmp	r3, #0
    7d7c:	d023      	beq.n	7dc6 <Spi_Init+0x9e>
               (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    7d7e:	4a18      	ldr	r2, [pc, #96]	; (7de0 <Spi_Init+0xb8>)
    7d80:	9b02      	ldr	r3, [sp, #8]
    7d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d86:	69da      	ldr	r2, [r3, #28]
    7d88:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d8c:	009b      	lsls	r3, r3, #2
    7d8e:	4413      	add	r3, r2
    7d90:	681b      	ldr	r3, [r3, #0]
    7d92:	689b      	ldr	r3, [r3, #8]
            if((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7d94:	9a02      	ldr	r2, [sp, #8]
    7d96:	429a      	cmp	r2, r3
    7d98:	d115      	bne.n	7dc6 <Spi_Init+0x9e>
              )
            {
                Spi_Ipw_Init(HWUnit, Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig);
    7d9a:	4a11      	ldr	r2, [pc, #68]	; (7de0 <Spi_Init+0xb8>)
    7d9c:	9b02      	ldr	r3, [sp, #8]
    7d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7da2:	69da      	ldr	r2, [r3, #28]
    7da4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7da8:	009b      	lsls	r3, r3, #2
    7daa:	4413      	add	r3, r2
    7dac:	681a      	ldr	r2, [r3, #0]
    7dae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7db2:	4611      	mov	r1, r2
    7db4:	4618      	mov	r0, r3
    7db6:	f000 fa8c 	bl	82d2 <Spi_Ipw_Init>

#if ((SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2))
                /* initialize the Job lists => no scheduled job for the unit */
                Spi_InitJobsList(HWUnit);
#endif
                Spi_axSpiHwUnitQueueArray[HWUnit].Status = SPI_IDLE;
    7dba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7dbe:	4a09      	ldr	r2, [pc, #36]	; (7de4 <Spi_Init+0xbc>)
    7dc0:	2101      	movs	r1, #1
    7dc2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            HWUnit++)
    7dc6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7dca:	3301      	adds	r3, #1
    7dcc:	f88d 300f 	strb.w	r3, [sp, #15]
        for (HWUnit = (Spi_HWUnitType) 0;
    7dd0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7dd4:	2b00      	cmp	r3, #0
    7dd6:	d0c6      	beq.n	7d66 <Spi_Init+0x3e>
    }

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif /*(SPI_DEV_ERROR_DETECT == STD_ON)*/
}
    7dd8:	bf00      	nop
    7dda:	b005      	add	sp, #20
    7ddc:	f85d fb04 	ldr.w	pc, [sp], #4
    7de0:	1fff8d4c 	.word	0x1fff8d4c
    7de4:	1fff8d44 	.word	0x1fff8d44

00007de8 <Spi_DeInit>:
*       if SPI_DEV_ERROR_DETECT is STD_ON.
*
* @implements Spi_DeInit_Activity
*/
Std_ReturnType Spi_DeInit(void)
{
    7de8:	b500      	push	{lr}
    7dea:	b083      	sub	sp, #12
    Std_ReturnType TempExit = (Std_ReturnType)E_OK;
    7dec:	2300      	movs	r3, #0
    7dee:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;

    SpiCoreID = Spi_GetCoreID;
    7df2:	2300      	movs	r3, #0
    7df4:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Check if Spi Status is Busy */
        if (SPI_BUSY == Spi_GetStatus())
    7df6:	f000 f8b1 	bl	7f5c <Spi_GetStatus>
    7dfa:	4603      	mov	r3, r0
    7dfc:	2b02      	cmp	r3, #2
    7dfe:	d103      	bne.n	7e08 <Spi_DeInit+0x20>
        {
            TempExit = E_NOT_OK;
    7e00:	2301      	movs	r3, #1
    7e02:	f88d 3007 	strb.w	r3, [sp, #7]
    7e06:	e037      	b.n	7e78 <Spi_DeInit+0x90>
        }
        else
        {
            /* De-initialize all physical HWUnits */
            for (HWUnit = (Spi_HWUnitType) 0;
    7e08:	2300      	movs	r3, #0
    7e0a:	f88d 3006 	strb.w	r3, [sp, #6]
    7e0e:	e02a      	b.n	7e66 <Spi_DeInit+0x7e>
                 HWUnit < (Spi_HWUnitType) SPI_MAX_HWUNIT;
                 HWUnit++)
            {
                if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7e10:	4a1c      	ldr	r2, [pc, #112]	; (7e84 <Spi_DeInit+0x9c>)
    7e12:	9b00      	ldr	r3, [sp, #0]
    7e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e18:	69da      	ldr	r2, [r3, #28]
    7e1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e1e:	009b      	lsls	r3, r3, #2
    7e20:	4413      	add	r3, r2
    7e22:	681b      	ldr	r3, [r3, #0]
    7e24:	2b00      	cmp	r3, #0
    7e26:	d019      	beq.n	7e5c <Spi_DeInit+0x74>
                    (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    7e28:	4a16      	ldr	r2, [pc, #88]	; (7e84 <Spi_DeInit+0x9c>)
    7e2a:	9b00      	ldr	r3, [sp, #0]
    7e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e30:	69da      	ldr	r2, [r3, #28]
    7e32:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e36:	009b      	lsls	r3, r3, #2
    7e38:	4413      	add	r3, r2
    7e3a:	681b      	ldr	r3, [r3, #0]
    7e3c:	689b      	ldr	r3, [r3, #8]
                if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7e3e:	9a00      	ldr	r2, [sp, #0]
    7e40:	429a      	cmp	r2, r3
    7e42:	d10b      	bne.n	7e5c <Spi_DeInit+0x74>
                   )
                {
                    Spi_Ipw_DeInit(HWUnit, SpiCoreID);
    7e44:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e48:	9900      	ldr	r1, [sp, #0]
    7e4a:	4618      	mov	r0, r3
    7e4c:	f000 fa54 	bl	82f8 <Spi_Ipw_DeInit>
    
                    Spi_axSpiHwUnitQueueArray[HWUnit].Status = SPI_UNINIT;
    7e50:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e54:	4a0c      	ldr	r2, [pc, #48]	; (7e88 <Spi_DeInit+0xa0>)
    7e56:	2100      	movs	r1, #0
    7e58:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
                 HWUnit++)
    7e5c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e60:	3301      	adds	r3, #1
    7e62:	f88d 3006 	strb.w	r3, [sp, #6]
            for (HWUnit = (Spi_HWUnitType) 0;
    7e66:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e6a:	2b00      	cmp	r3, #0
    7e6c:	d0d0      	beq.n	7e10 <Spi_DeInit+0x28>
                {
                    /* Do nothing */
                }
            }
            /* Reset configuration pointer */
            Spi_apxSpiConfigPtr[SpiCoreID] = NULL_PTR;
    7e6e:	4a05      	ldr	r2, [pc, #20]	; (7e84 <Spi_DeInit+0x9c>)
    7e70:	9b00      	ldr	r3, [sp, #0]
    7e72:	2100      	movs	r1, #0
    7e74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return TempExit;
    7e78:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
    7e7c:	4618      	mov	r0, r3
    7e7e:	b003      	add	sp, #12
    7e80:	f85d fb04 	ldr.w	pc, [sp], #4
    7e84:	1fff8d4c 	.word	0x1fff8d4c
    7e88:	1fff8d44 	.word	0x1fff8d44

00007e8c <Spi_SetupEB>:
        Spi_ChannelType Channel,
        const Spi_DataBufferType  *SrcDataBufferPtr,
        Spi_DataBufferType *DesDataBufferPtr,
        Spi_NumberOfDataType Length
    )
{
    7e8c:	b500      	push	{lr}
    7e8e:	b089      	sub	sp, #36	; 0x24
    7e90:	9102      	str	r1, [sp, #8]
    7e92:	9201      	str	r2, [sp, #4]
    7e94:	461a      	mov	r2, r3
    7e96:	4603      	mov	r3, r0
    7e98:	f88d 300f 	strb.w	r3, [sp, #15]
    7e9c:	4613      	mov	r3, r2
    7e9e:	f8ad 300c 	strh.w	r3, [sp, #12]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    7ea2:	2300      	movs	r3, #0
    7ea4:	f88d 301f 	strb.w	r3, [sp, #31]
    Spi_ChannelStateType *ChannelState;
    const Spi_ChannelConfigType *ChannelConfig;
    uint32 SpiCoreID;

    /* get current coreID */
    SpiCoreID = Spi_GetCoreID;
    7ea8:	2300      	movs	r3, #0
    7eaa:	9306      	str	r3, [sp, #24]
        Status = (Std_ReturnType)E_NOT_OK;
    }
    else
    {
#endif
        ChannelState = &Spi_axSpiChannelState[Channel];
    7eac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7eb0:	009b      	lsls	r3, r3, #2
    7eb2:	4a28      	ldr	r2, [pc, #160]	; (7f54 <Spi_SetupEB+0xc8>)
    7eb4:	4413      	add	r3, r2
    7eb6:	9305      	str	r3, [sp, #20]
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[Channel].ChannelCfg;
    7eb8:	4a27      	ldr	r2, [pc, #156]	; (7f58 <Spi_SetupEB+0xcc>)
    7eba:	9b06      	ldr	r3, [sp, #24]
    7ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ec0:	68da      	ldr	r2, [r3, #12]
    7ec2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ec6:	009b      	lsls	r3, r3, #2
    7ec8:	4413      	add	r3, r2
    7eca:	681b      	ldr	r3, [r3, #0]
    7ecc:	9304      	str	r3, [sp, #16]
        /* exit early if this is the wrong buffer type */
        if (IB == ChannelConfig->BufferType)
    7ece:	9b04      	ldr	r3, [sp, #16]
    7ed0:	681b      	ldr	r3, [r3, #0]
    7ed2:	2b00      	cmp	r3, #0
    7ed4:	d103      	bne.n	7ede <Spi_SetupEB+0x52>
        {
            /* Call Det_ReportError */
#if (SPI_DEV_ERROR_DETECT == STD_ON)
            (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_SETUPEB_ID,SPI_E_PARAM_CHANNEL);
#endif
            Status = (Std_ReturnType)E_NOT_OK;
    7ed6:	2301      	movs	r3, #1
    7ed8:	f88d 301f 	strb.w	r3, [sp, #31]
    7edc:	e033      	b.n	7f46 <Spi_SetupEB+0xba>
            /* Length and Framesize - aren't compatible */
            /* If 8 < Framesize =< 16: Length must be divisible by 2 */
            /* If 16 < Framesize =< 32: Length must be divisible by 4 */
            Status = Spi_SetupEbCheckLength(ChannelConfig, Length);
#endif
            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05();
    7ede:	f001 fec7 	bl	9c70 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05>
            /* save the new parameters */
            ChannelConfig->BufferDescriptor->ExternalBufferTX = SrcDataBufferPtr;
    7ee2:	9b04      	ldr	r3, [sp, #16]
    7ee4:	691b      	ldr	r3, [r3, #16]
    7ee6:	9a02      	ldr	r2, [sp, #8]
    7ee8:	601a      	str	r2, [r3, #0]
            ChannelConfig->BufferDescriptor->BufferRX = DesDataBufferPtr;
    7eea:	9b04      	ldr	r3, [sp, #16]
    7eec:	691b      	ldr	r3, [r3, #16]
    7eee:	9a01      	ldr	r2, [sp, #4]
    7ef0:	609a      	str	r2, [r3, #8]

            ChannelState->Length = Length;
    7ef2:	9b05      	ldr	r3, [sp, #20]
    7ef4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7ef8:	805a      	strh	r2, [r3, #2]

            /* if source data pointer is zero, transmit default value */
            if (NULL_PTR == SrcDataBufferPtr)
    7efa:	9b02      	ldr	r3, [sp, #8]
    7efc:	2b00      	cmp	r3, #0
    7efe:	d107      	bne.n	7f10 <Spi_SetupEB+0x84>
            {
                ChannelState->Flags |= SPI_CHANNEL_FLAG_TX_DEFAULT_U8;
    7f00:	9b05      	ldr	r3, [sp, #20]
    7f02:	781b      	ldrb	r3, [r3, #0]
    7f04:	f043 0301 	orr.w	r3, r3, #1
    7f08:	b2da      	uxtb	r2, r3
    7f0a:	9b05      	ldr	r3, [sp, #20]
    7f0c:	701a      	strb	r2, [r3, #0]
    7f0e:	e006      	b.n	7f1e <Spi_SetupEB+0x92>
            }
            else
            {
                ChannelState->Flags &= (uint8) (~SPI_CHANNEL_FLAG_TX_DEFAULT_U8);
    7f10:	9b05      	ldr	r3, [sp, #20]
    7f12:	781b      	ldrb	r3, [r3, #0]
    7f14:	f023 0301 	bic.w	r3, r3, #1
    7f18:	b2da      	uxtb	r2, r3
    7f1a:	9b05      	ldr	r3, [sp, #20]
    7f1c:	701a      	strb	r2, [r3, #0]
            }

            /* if destination data pointer is zero, discard receiving data */
            if (NULL_PTR == DesDataBufferPtr)
    7f1e:	9b01      	ldr	r3, [sp, #4]
    7f20:	2b00      	cmp	r3, #0
    7f22:	d107      	bne.n	7f34 <Spi_SetupEB+0xa8>
            {
                ChannelState->Flags |= SPI_CHANNEL_FLAG_RX_DISCARD_U8;
    7f24:	9b05      	ldr	r3, [sp, #20]
    7f26:	781b      	ldrb	r3, [r3, #0]
    7f28:	f043 0302 	orr.w	r3, r3, #2
    7f2c:	b2da      	uxtb	r2, r3
    7f2e:	9b05      	ldr	r3, [sp, #20]
    7f30:	701a      	strb	r2, [r3, #0]
    7f32:	e006      	b.n	7f42 <Spi_SetupEB+0xb6>
            }
            else
            {
                ChannelState->Flags &= (uint8) (~SPI_CHANNEL_FLAG_RX_DISCARD_U8);
    7f34:	9b05      	ldr	r3, [sp, #20]
    7f36:	781b      	ldrb	r3, [r3, #0]
    7f38:	f023 0302 	bic.w	r3, r3, #2
    7f3c:	b2da      	uxtb	r2, r3
    7f3e:	9b05      	ldr	r3, [sp, #20]
    7f40:	701a      	strb	r2, [r3, #0]
            }
            SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05();
    7f42:	f001 fec1 	bl	9cc8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05>
        }
#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return Status;
    7f46:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    7f4a:	4618      	mov	r0, r3
    7f4c:	b009      	add	sp, #36	; 0x24
    7f4e:	f85d fb04 	ldr.w	pc, [sp], #4
    7f52:	bf00      	nop
    7f54:	1fff8d60 	.word	0x1fff8d60
    7f58:	1fff8d4c 	.word	0x1fff8d4c

00007f5c <Spi_GetStatus>:
*       if SPI_DEV_ERROR_DETECT is STD_ON.
*
* @implements Spi_GetStatus_Activity
*/
Spi_StatusType Spi_GetStatus(void)
{
    7f5c:	b500      	push	{lr}
    7f5e:	b085      	sub	sp, #20
    Spi_StatusType StatusFlag = SPI_IDLE;
    7f60:	2301      	movs	r3, #1
    7f62:	9303      	str	r3, [sp, #12]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;
    
    /* Get current coreID */
    SpiCoreID = Spi_GetCoreID;
    7f64:	2300      	movs	r3, #0
    7f66:	9301      	str	r3, [sp, #4]

    if (NULL_PTR == Spi_apxSpiConfigPtr[SpiCoreID])
    7f68:	4a22      	ldr	r2, [pc, #136]	; (7ff4 <Spi_GetStatus+0x98>)
    7f6a:	9b01      	ldr	r3, [sp, #4]
    7f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f70:	2b00      	cmp	r3, #0
    7f72:	d102      	bne.n	7f7a <Spi_GetStatus+0x1e>
        /* If Development Error Detection is enabled, report error if not */
        /* initialized */
        /* Call Det_ReportError */
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETSTATUS_ID,SPI_E_UNINIT);
#endif
        StatusFlag = SPI_UNINIT;
    7f74:	2300      	movs	r3, #0
    7f76:	9303      	str	r3, [sp, #12]
    7f78:	e037      	b.n	7fea <Spi_GetStatus+0x8e>
    }
    else
    {
        /* The SPI Handler Driver software module shall be busy when any
           HWUnit is busy */
        for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    7f7a:	2300      	movs	r3, #0
    7f7c:	f88d 300b 	strb.w	r3, [sp, #11]
    7f80:	e028      	b.n	7fd4 <Spi_GetStatus+0x78>
        {
            if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7f82:	4a1c      	ldr	r2, [pc, #112]	; (7ff4 <Spi_GetStatus+0x98>)
    7f84:	9b01      	ldr	r3, [sp, #4]
    7f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f8a:	69da      	ldr	r2, [r3, #28]
    7f8c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7f90:	009b      	lsls	r3, r3, #2
    7f92:	4413      	add	r3, r2
    7f94:	681b      	ldr	r3, [r3, #0]
    7f96:	2b00      	cmp	r3, #0
    7f98:	d017      	beq.n	7fca <Spi_GetStatus+0x6e>
                (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    7f9a:	4a16      	ldr	r2, [pc, #88]	; (7ff4 <Spi_GetStatus+0x98>)
    7f9c:	9b01      	ldr	r3, [sp, #4]
    7f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fa2:	69da      	ldr	r2, [r3, #28]
    7fa4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7fa8:	009b      	lsls	r3, r3, #2
    7faa:	4413      	add	r3, r2
    7fac:	681b      	ldr	r3, [r3, #0]
    7fae:	689b      	ldr	r3, [r3, #8]
            if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7fb0:	9a01      	ldr	r2, [sp, #4]
    7fb2:	429a      	cmp	r2, r3
    7fb4:	d109      	bne.n	7fca <Spi_GetStatus+0x6e>
               )
            {
                if (1u == Spi_au32SpiBusySyncHWUnitsStatus[HWUnit])
    7fb6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7fba:	4a0f      	ldr	r2, [pc, #60]	; (7ff8 <Spi_GetStatus+0x9c>)
    7fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fc0:	2b01      	cmp	r3, #1
    7fc2:	d102      	bne.n	7fca <Spi_GetStatus+0x6e>
                {
                    StatusFlag = SPI_BUSY;
    7fc4:	2302      	movs	r3, #2
    7fc6:	9303      	str	r3, [sp, #12]
                    break;
    7fc8:	e008      	b.n	7fdc <Spi_GetStatus+0x80>
        for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    7fca:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7fce:	3301      	adds	r3, #1
    7fd0:	f88d 300b 	strb.w	r3, [sp, #11]
    7fd4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7fd8:	2b00      	cmp	r3, #0
    7fda:	d0d2      	beq.n	7f82 <Spi_GetStatus+0x26>
            {
                /* Do nothing */
            }
        }
        /* check for busy HWUnit in async transmissions */
        if (SPI_BUSY != StatusFlag)
    7fdc:	9b03      	ldr	r3, [sp, #12]
    7fde:	2b02      	cmp	r3, #2
    7fe0:	d003      	beq.n	7fea <Spi_GetStatus+0x8e>
        {
            /* Note: Checking for IsSync attribute for HWUnit is not really needed
                 It is preferable to skip this check in order to have a more compact code
            */
            StatusFlag = Spi_GetStatusAsyncCheckHwBusy(SpiCoreID);
    7fe2:	9801      	ldr	r0, [sp, #4]
    7fe4:	f7ff fe4e 	bl	7c84 <Spi_GetStatusAsyncCheckHwBusy>
    7fe8:	9003      	str	r0, [sp, #12]
        else
        {
            /* Do notthing */
        }
    }
    return StatusFlag;
    7fea:	9b03      	ldr	r3, [sp, #12]
}
    7fec:	4618      	mov	r0, r3
    7fee:	b005      	add	sp, #20
    7ff0:	f85d fb04 	ldr.w	pc, [sp], #4
    7ff4:	1fff8d4c 	.word	0x1fff8d4c
    7ff8:	1fff8d70 	.word	0x1fff8d70

00007ffc <Spi_GetJobResult>:
/** @implements Spi_GetJobResult_Activity */
Spi_JobResultType Spi_GetJobResult
    (
        Spi_JobType Job
    )
{
    7ffc:	b084      	sub	sp, #16
    7ffe:	4603      	mov	r3, r0
    8000:	f8ad 3006 	strh.w	r3, [sp, #6]
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETJOBRESULT_ID,SPI_E_PARAM_CONFIG);
    }
    else
    {
#endif
        JobResult = Spi_axSpiJobState[Job].Result;
    8004:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8008:	4a03      	ldr	r2, [pc, #12]	; (8018 <Spi_GetJobResult+0x1c>)
    800a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    800e:	9303      	str	r3, [sp, #12]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return JobResult;
    8010:	9b03      	ldr	r3, [sp, #12]
}
    8012:	4618      	mov	r0, r3
    8014:	b004      	add	sp, #16
    8016:	4770      	bx	lr
    8018:	1fff8d58 	.word	0x1fff8d58

0000801c <Spi_GetSequenceResult>:
/** @implements Spi_GetSequenceResult_Activity */
Spi_SeqResultType Spi_GetSequenceResult
    (
        Spi_SequenceType Sequence
    )
{
    801c:	b084      	sub	sp, #16
    801e:	4603      	mov	r3, r0
    8020:	f88d 3007 	strb.w	r3, [sp, #7]
            (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETSEQUENCERESULT_ID,SPI_E_PARAM_CONFIG);
        }
        else
        {
#endif
           SequenceResult = Spi_axSpiSequenceState[Sequence].Result;
    8024:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8028:	4a03      	ldr	r2, [pc, #12]	; (8038 <Spi_GetSequenceResult+0x1c>)
    802a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    802e:	9303      	str	r3, [sp, #12]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif

    return SequenceResult;
    8030:	9b03      	ldr	r3, [sp, #12]
}
    8032:	4618      	mov	r0, r3
    8034:	b004      	add	sp, #16
    8036:	4770      	bx	lr
    8038:	1fff8d50 	.word	0x1fff8d50

0000803c <Spi_SyncTransmit>:
/** @implements Spi_SyncTransmit_Activity */
Std_ReturnType Spi_SyncTransmit
    (
        Spi_SequenceType Sequence
    )
{
    803c:	b500      	push	{lr}
    803e:	b08b      	sub	sp, #44	; 0x2c
    8040:	4603      	mov	r3, r0
    8042:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_SequenceStateType *SequenceState;
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    8046:	2300      	movs	r3, #0
    8048:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    Spi_JobType Job;
    const Spi_JobConfigType *JobConfig;
    uint32 SpiCoreID;

    /* Get current coreID */
    SpiCoreID = Spi_GetCoreID;
    804c:	2300      	movs	r3, #0
    804e:	9308      	str	r3, [sp, #32]
        Status = Spi_SynctransmitCheckJobsIsValid(SequenceConfig, SpiCoreID);

        if ((Std_ReturnType)E_NOT_OK != Status)
        {
#endif /* (SPI_DEV_ERROR_DETECT == STD_ON) */
            SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
    8050:	4a60      	ldr	r2, [pc, #384]	; (81d4 <Spi_SyncTransmit+0x198>)
    8052:	9b08      	ldr	r3, [sp, #32]
    8054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8058:	695a      	ldr	r2, [r3, #20]
    805a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    805e:	009b      	lsls	r3, r3, #2
    8060:	4413      	add	r3, r2
    8062:	681b      	ldr	r3, [r3, #0]
    8064:	9307      	str	r3, [sp, #28]
            /* Get the number of jobs in the sequence */
            NumJobsInSequence = SequenceConfig->NumJobs;
    8066:	9b07      	ldr	r3, [sp, #28]
    8068:	881b      	ldrh	r3, [r3, #0]
    806a:	f8ad 301a 	strh.w	r3, [sp, #26]

            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06();
    806e:	f001 fe51 	bl	9d14 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06>
            /* check if there are HW units already running */
            for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    8072:	2300      	movs	r3, #0
    8074:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    8078:	e017      	b.n	80aa <Spi_SyncTransmit+0x6e>
            {
                if (0u != ((Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] << HWUnit) & Spi_au32SpiSeqUsedHWUnits[Sequence]))
    807a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    807e:	4a56      	ldr	r2, [pc, #344]	; (81d8 <Spi_SyncTransmit+0x19c>)
    8080:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8084:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    8088:	409a      	lsls	r2, r3
    808a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    808e:	4953      	ldr	r1, [pc, #332]	; (81dc <Spi_SyncTransmit+0x1a0>)
    8090:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    8094:	4013      	ands	r3, r2
    8096:	2b00      	cmp	r3, #0
    8098:	d002      	beq.n	80a0 <Spi_SyncTransmit+0x64>
                {
                    Status = (Std_ReturnType)E_NOT_OK;
    809a:	2301      	movs	r3, #1
    809c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    80a0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    80a4:	3301      	adds	r3, #1
    80a6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    80aa:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    80ae:	2b00      	cmp	r3, #0
    80b0:	d0e3      	beq.n	807a <Spi_SyncTransmit+0x3e>
                {
                    /* Do notthing */
                }
            }
            
            if ((Std_ReturnType)E_NOT_OK != Status)
    80b2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    80b6:	2b01      	cmp	r3, #1
    80b8:	f000 8083 	beq.w	81c2 <Spi_SyncTransmit+0x186>
            {
                /* Set the sequence as pending */
                SequenceState = &Spi_axSpiSequenceState[Sequence];
    80bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    80c0:	009b      	lsls	r3, r3, #2
    80c2:	4a47      	ldr	r2, [pc, #284]	; (81e0 <Spi_SyncTransmit+0x1a4>)
    80c4:	4413      	add	r3, r2
    80c6:	9305      	str	r3, [sp, #20]
                SequenceState->Result = SPI_SEQ_PENDING;
    80c8:	9b05      	ldr	r3, [sp, #20]
    80ca:	2201      	movs	r2, #1
    80cc:	601a      	str	r2, [r3, #0]
                /* set used HW units as busy */
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    80ce:	2300      	movs	r3, #0
    80d0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    80d4:	e022      	b.n	811c <Spi_SyncTransmit+0xe0>
                {
                    /* Get the job id */
                    Job = SequenceConfig->JobIndexList[JobIndex];
    80d6:	9b07      	ldr	r3, [sp, #28]
    80d8:	689a      	ldr	r2, [r3, #8]
    80da:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    80de:	005b      	lsls	r3, r3, #1
    80e0:	4413      	add	r3, r2
    80e2:	881b      	ldrh	r3, [r3, #0]
    80e4:	f8ad 3012 	strh.w	r3, [sp, #18]
                    JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    80e8:	4a3a      	ldr	r2, [pc, #232]	; (81d4 <Spi_SyncTransmit+0x198>)
    80ea:	9b08      	ldr	r3, [sp, #32]
    80ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80f0:	691a      	ldr	r2, [r3, #16]
    80f2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    80f6:	009b      	lsls	r3, r3, #2
    80f8:	4413      	add	r3, r2
    80fa:	681b      	ldr	r3, [r3, #0]
    80fc:	9303      	str	r3, [sp, #12]
                    /* Logical Spi HWUnit */
                    HWUnit = JobConfig->HWUnit;
    80fe:	9b03      	ldr	r3, [sp, #12]
    8100:	7f1b      	ldrb	r3, [r3, #28]
    8102:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] = 1u;
    8106:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    810a:	4a33      	ldr	r2, [pc, #204]	; (81d8 <Spi_SyncTransmit+0x19c>)
    810c:	2101      	movs	r1, #1
    810e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    8112:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    8116:	3301      	adds	r3, #1
    8118:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    811c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    8120:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    8124:	429a      	cmp	r2, r3
    8126:	d3d6      	bcc.n	80d6 <Spi_SyncTransmit+0x9a>
                }
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06();
    8128:	f001 fe20 	bl	9d6c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>
                /* Transmit Jobs */
                Status = Spi_SyncJobsTranfer(SequenceConfig, SpiCoreID);
    812c:	9908      	ldr	r1, [sp, #32]
    812e:	9807      	ldr	r0, [sp, #28]
    8130:	f7ff fc72 	bl	7a18 <Spi_SyncJobsTranfer>
    8134:	4603      	mov	r3, r0
    8136:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                
                if ((Std_ReturnType)E_OK == Status)
    813a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    813e:	2b00      	cmp	r3, #0
    8140:	d103      	bne.n	814a <Spi_SyncTransmit+0x10e>
                {
                    /* Set the sequence as OK */
                    SequenceState->Result = SPI_SEQ_OK;
    8142:	9b05      	ldr	r3, [sp, #20]
    8144:	2200      	movs	r2, #0
    8146:	601a      	str	r2, [r3, #0]
    8148:	e002      	b.n	8150 <Spi_SyncTransmit+0x114>
#endif
                }
                else
                {
                    /* Set the sequence as FAILED */
                    SequenceState->Result = SPI_SEQ_FAILED;
    814a:	9b05      	ldr	r3, [sp, #20]
    814c:	2202      	movs	r2, #2
    814e:	601a      	str	r2, [r3, #0]
                    /* Report to DEM */
                    Spi_DemReportStatus(SpiCoreID, DEM_EVENT_STATUS_FAILED);
#endif
                }
                
                SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07();
    8150:	f001 fe32 	bl	9db8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07>
                /* set used HW units as idle */
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    8154:	2300      	movs	r3, #0
    8156:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    815a:	e022      	b.n	81a2 <Spi_SyncTransmit+0x166>
                {
                    /* Get the job id */
                    Job = SequenceConfig->JobIndexList[JobIndex];
    815c:	9b07      	ldr	r3, [sp, #28]
    815e:	689a      	ldr	r2, [r3, #8]
    8160:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    8164:	005b      	lsls	r3, r3, #1
    8166:	4413      	add	r3, r2
    8168:	881b      	ldrh	r3, [r3, #0]
    816a:	f8ad 3012 	strh.w	r3, [sp, #18]
                    JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    816e:	4a19      	ldr	r2, [pc, #100]	; (81d4 <Spi_SyncTransmit+0x198>)
    8170:	9b08      	ldr	r3, [sp, #32]
    8172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8176:	691a      	ldr	r2, [r3, #16]
    8178:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    817c:	009b      	lsls	r3, r3, #2
    817e:	4413      	add	r3, r2
    8180:	681b      	ldr	r3, [r3, #0]
    8182:	9303      	str	r3, [sp, #12]
                    /* Logical Spi HWUnit */
                    HWUnit = JobConfig->HWUnit;
    8184:	9b03      	ldr	r3, [sp, #12]
    8186:	7f1b      	ldrb	r3, [r3, #28]
    8188:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] = 0u;
    818c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    8190:	4a11      	ldr	r2, [pc, #68]	; (81d8 <Spi_SyncTransmit+0x19c>)
    8192:	2100      	movs	r1, #0
    8194:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    8198:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    819c:	3301      	adds	r3, #1
    819e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    81a2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    81a6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    81aa:	429a      	cmp	r2, r3
    81ac:	d3d6      	bcc.n	815c <Spi_SyncTransmit+0x120>
                }
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07();
    81ae:	f001 fe2f 	bl	9e10 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07>
                
                /* End Sequence Notification */
                if (NULL_PTR != SequenceConfig->EndNotification)
    81b2:	9b07      	ldr	r3, [sp, #28]
    81b4:	68db      	ldr	r3, [r3, #12]
    81b6:	2b00      	cmp	r3, #0
    81b8:	d005      	beq.n	81c6 <Spi_SyncTransmit+0x18a>
                {
                    SequenceConfig->EndNotification();
    81ba:	9b07      	ldr	r3, [sp, #28]
    81bc:	68db      	ldr	r3, [r3, #12]
    81be:	4798      	blx	r3
    81c0:	e001      	b.n	81c6 <Spi_SyncTransmit+0x18a>
                    /* Do nothing */
                }
            }
            else
            {
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06();
    81c2:	f001 fdd3 	bl	9d6c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>
            /* Do nothing */
        }
    }
#endif

    return Status;
    81c6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    81ca:	4618      	mov	r0, r3
    81cc:	b00b      	add	sp, #44	; 0x2c
    81ce:	f85d fb04 	ldr.w	pc, [sp], #4
    81d2:	bf00      	nop
    81d4:	1fff8d4c 	.word	0x1fff8d4c
    81d8:	1fff8d70 	.word	0x1fff8d70
    81dc:	1fff8d68 	.word	0x1fff8d68
    81e0:	1fff8d50 	.word	0x1fff8d50

000081e4 <Spi_GetHWUnitStatus>:
/** @implements Spi_GetHWUnitStatus_Activity */
Spi_StatusType Spi_GetHWUnitStatus
    (
        Spi_HWUnitType HWUnit
    )
{
    81e4:	b084      	sub	sp, #16
    81e6:	4603      	mov	r3, r0
    81e8:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_StatusType Status = SPI_UNINIT;
    81ec:	2300      	movs	r3, #0
    81ee:	9303      	str	r3, [sp, #12]
        /* Do nothing */
    }
    else
    {
#endif
        Status = Spi_axSpiHwUnitQueueArray[HWUnit].Status;
    81f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    81f4:	4a03      	ldr	r2, [pc, #12]	; (8204 <Spi_GetHWUnitStatus+0x20>)
    81f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    81fa:	9303      	str	r3, [sp, #12]

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return Status;
    81fc:	9b03      	ldr	r3, [sp, #12]
}
    81fe:	4618      	mov	r0, r3
    8200:	b004      	add	sp, #16
    8202:	4770      	bx	lr
    8204:	1fff8d44 	.word	0x1fff8d44

00008208 <Spi_Cancel>:
*       undefined state due to cancelling a sequence transmission.
*
*/
/**  @implements Spi_Cancel_Activity */
void Spi_Cancel(Spi_SequenceType Sequence)
{
    8208:	b082      	sub	sp, #8
    820a:	4603      	mov	r3, r0
    820c:	f88d 3007 	strb.w	r3, [sp, #7]
        }
        else
        {
#endif
            /* Set sequence state to Cancel */
            Spi_axSpiSequenceState[Sequence].Result = SPI_SEQ_CANCELLED;
    8210:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8214:	4a03      	ldr	r2, [pc, #12]	; (8224 <Spi_Cancel+0x1c>)
    8216:	2103      	movs	r1, #3
    8218:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            #endif
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif
}
    821c:	bf00      	nop
    821e:	b002      	add	sp, #8
    8220:	4770      	bx	lr
    8222:	bf00      	nop
    8224:	1fff8d50 	.word	0x1fff8d50

00008228 <Spi_MainFunction_Handling>:
                /*Do nothing */
            }
        }
    }
#endif /* #if ( (SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2) ) */
}
    8228:	bf00      	nop
    822a:	4770      	bx	lr

0000822c <Spi_Ipw_SyncTransmitProcess>:
        const Spi_JobConfigType *JobConfig,
        const Spi_ChannelConfigType *ChannelConfig,
        Spi_DataBufferType *RxBuffer,
        const Spi_DataBufferType *TxBuffer
    )
{
    822c:	b500      	push	{lr}
    822e:	b08d      	sub	sp, #52	; 0x34
    8230:	9005      	str	r0, [sp, #20]
    8232:	9104      	str	r1, [sp, #16]
    8234:	9203      	str	r2, [sp, #12]
    8236:	9302      	str	r3, [sp, #8]
    Lpspi_Ip_StatusType Lpspi_spiStatus = LPSPI_IP_STATUS_SUCCESS;
    8238:	2300      	movs	r3, #0
    823a:	930b      	str	r3, [sp, #44]	; 0x2c
    const Lpspi_Ip_ExternalDeviceType* LpspiExternalDevice;
#if (SPI_IPW_SPI_FLEXIO_ENABLE == STD_ON)
    Flexio_Spi_Ip_StatusType Flexio_spiStatus = FLEXIO_SPI_IP_STATUS_SUCCESS;
    const Flexio_Spi_Ip_ExternalDeviceType* Flexio_SpiExternalDevice;
#endif
    Std_ReturnType Ipw_Status = (Std_ReturnType)E_OK;
    823c:	2300      	movs	r3, #0
    823e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    Spi_NumberOfDataType NumberOfBytes;
    Spi_Ipw_SupportedIpsType IpType = JobConfig->ExternalDeviceConfig->ExDeviceConfig->IpType;
    8242:	9b05      	ldr	r3, [sp, #20]
    8244:	6a1b      	ldr	r3, [r3, #32]
    8246:	681b      	ldr	r3, [r3, #0]
    8248:	681b      	ldr	r3, [r3, #0]
    824a:	9309      	str	r3, [sp, #36]	; 0x24
        HalfDuplexMode = LPSPI_IP_FULL_DUPLEX;
        HalfDuplexModeSupport = FALSE;
    }
#endif
    
    NumberOfBytes = ChannelConfig->ChannelState->Length;
    824c:	9b04      	ldr	r3, [sp, #16]
    824e:	699b      	ldr	r3, [r3, #24]
    8250:	885b      	ldrh	r3, [r3, #2]
    8252:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    if (SPI_OVER_LPSPI == IpType)
    8256:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8258:	2b00      	cmp	r3, #0
    825a:	d12e      	bne.n	82ba <Spi_Ipw_SyncTransmitProcess+0x8e>
    {
        LpspiExternalDevice = JobConfig->ExternalDeviceConfig->ExDeviceConfig->ExternalDeviceConfig.LpspiExternalDeviceConfig;
    825c:	9b05      	ldr	r3, [sp, #20]
    825e:	6a1b      	ldr	r3, [r3, #32]
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	689b      	ldr	r3, [r3, #8]
    8264:	9307      	str	r3, [sp, #28]
        Lpspi_spiStatus = Lpspi_Ip_UpdateDefaultTransmitData(LpspiExternalDevice, ChannelConfig->DefaultTransmitValue);
    8266:	9b04      	ldr	r3, [sp, #16]
    8268:	689b      	ldr	r3, [r3, #8]
    826a:	4619      	mov	r1, r3
    826c:	9807      	ldr	r0, [sp, #28]
    826e:	f7ff fadd 	bl	782c <Lpspi_Ip_UpdateDefaultTransmitData>
    8272:	900b      	str	r0, [sp, #44]	; 0x2c
        if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    8274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8276:	2b00      	cmp	r3, #0
    8278:	d11f      	bne.n	82ba <Spi_Ipw_SyncTransmitProcess+0x8e>
        {
            Lpspi_spiStatus = Lpspi_Ip_UpdateFrameSize(LpspiExternalDevice, ChannelConfig->FrameSize);
    827a:	9b04      	ldr	r3, [sp, #16]
    827c:	791b      	ldrb	r3, [r3, #4]
    827e:	b29b      	uxth	r3, r3
    8280:	4619      	mov	r1, r3
    8282:	9807      	ldr	r0, [sp, #28]
    8284:	f7ff fa92 	bl	77ac <Lpspi_Ip_UpdateFrameSize>
    8288:	900b      	str	r0, [sp, #44]	; 0x2c
            if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    828a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    828c:	2b00      	cmp	r3, #0
    828e:	d114      	bne.n	82ba <Spi_Ipw_SyncTransmitProcess+0x8e>
            {
                Lpspi_spiStatus = Lpspi_Ip_UpdateLsb(LpspiExternalDevice, ChannelConfig->Lsb);
    8290:	9b04      	ldr	r3, [sp, #16]
    8292:	795b      	ldrb	r3, [r3, #5]
    8294:	4619      	mov	r1, r3
    8296:	9807      	ldr	r0, [sp, #28]
    8298:	f7ff faa8 	bl	77ec <Lpspi_Ip_UpdateLsb>
    829c:	900b      	str	r0, [sp, #44]	; 0x2c
                if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    829e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    82a0:	2b00      	cmp	r3, #0
    82a2:	d10a      	bne.n	82ba <Spi_Ipw_SyncTransmitProcess+0x8e>
                        Lpspi_spiStatus = Lpspi_Ip_SyncTransmitHalfDuplex(LpspiExternalDevice, Buffer, NumberOfBytes, HalfDuplexMode, SPI_TIMEOUT_COUNTER_U32);
                    }
                    else
                    #endif
                    {
                        Lpspi_spiStatus = Lpspi_Ip_SyncTransmit(LpspiExternalDevice, (const uint8*)TxBuffer, RxBuffer, NumberOfBytes, SPI_TIMEOUT_COUNTER_U32);
    82a4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    82a8:	f24c 3250 	movw	r2, #50000	; 0xc350
    82ac:	9200      	str	r2, [sp, #0]
    82ae:	9a03      	ldr	r2, [sp, #12]
    82b0:	9902      	ldr	r1, [sp, #8]
    82b2:	9807      	ldr	r0, [sp, #28]
    82b4:	f7fe fe0a 	bl	6ecc <Lpspi_Ip_SyncTransmit>
    82b8:	900b      	str	r0, [sp, #44]	; 0x2c
            }
        }
    }
    if( (LPSPI_IP_STATUS_SUCCESS != Lpspi_spiStatus) || (FLEXIO_SPI_IP_STATUS_SUCCESS != Flexio_spiStatus))
#else
    if(LPSPI_IP_STATUS_SUCCESS != Lpspi_spiStatus)
    82ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    82bc:	2b00      	cmp	r3, #0
    82be:	d002      	beq.n	82c6 <Spi_Ipw_SyncTransmitProcess+0x9a>
#endif /*(SPI_IPW_SPI_FLEXIO_ENABLE == STD_ON)*/
    {
        Ipw_Status = (Std_ReturnType)E_NOT_OK;
    82c0:	2301      	movs	r3, #1
    82c2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    }
    return Ipw_Status;
    82c6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
}
    82ca:	4618      	mov	r0, r3
    82cc:	b00d      	add	sp, #52	; 0x34
    82ce:	f85d fb04 	ldr.w	pc, [sp], #4

000082d2 <Spi_Ipw_Init>:
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* Spi_Ipw_Init */
void Spi_Ipw_Init(const Spi_HWUnitType HWUnitId, const Spi_HWUnitConfigType *HWUnit)
{
    82d2:	b500      	push	{lr}
    82d4:	b083      	sub	sp, #12
    82d6:	4603      	mov	r3, r0
    82d8:	9100      	str	r1, [sp, #0]
    82da:	f88d 3007 	strb.w	r3, [sp, #7]
    if (SPI_OVER_LPSPI == HWUnit->IpType)
    82de:	9b00      	ldr	r3, [sp, #0]
    82e0:	681b      	ldr	r3, [r3, #0]
    82e2:	2b00      	cmp	r3, #0
    82e4:	d104      	bne.n	82f0 <Spi_Ipw_Init+0x1e>
    #if ((SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2))
        Spi_Ipw_au8LpspiHWUnitMapping[HWUnit->Instance] = HWUnitId;
    #else
        (void)HWUnitId;
    #endif
        (void)Lpspi_Ip_Init(HWUnit->IpConfig.LpspiIpConfig);
    82e6:	9b00      	ldr	r3, [sp, #0]
    82e8:	68db      	ldr	r3, [r3, #12]
    82ea:	4618      	mov	r0, r3
    82ec:	f7fe fd62 	bl	6db4 <Lpspi_Ip_Init>
        (void)HWUnitId;
    #endif
        (void)Flexio_Spi_Ip_Init(HWUnit->IpConfig.FlexioSpiIpConfig);
    }
#endif
}
    82f0:	bf00      	nop
    82f2:	b003      	add	sp, #12
    82f4:	f85d fb04 	ldr.w	pc, [sp], #4

000082f8 <Spi_Ipw_DeInit>:

/* Spi_Ipw_DeInit */
void Spi_Ipw_DeInit(Spi_HWUnitType HWUnit, uint32 SpiCoreID)
{
    82f8:	b500      	push	{lr}
    82fa:	b083      	sub	sp, #12
    82fc:	4603      	mov	r3, r0
    82fe:	9100      	str	r1, [sp, #0]
    8300:	f88d 3007 	strb.w	r3, [sp, #7]
    if (SPI_OVER_LPSPI == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->IpType)
    8304:	4a0f      	ldr	r2, [pc, #60]	; (8344 <Spi_Ipw_DeInit+0x4c>)
    8306:	9b00      	ldr	r3, [sp, #0]
    8308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    830c:	69da      	ldr	r2, [r3, #28]
    830e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8312:	009b      	lsls	r3, r3, #2
    8314:	4413      	add	r3, r2
    8316:	681b      	ldr	r3, [r3, #0]
    8318:	681b      	ldr	r3, [r3, #0]
    831a:	2b00      	cmp	r3, #0
    831c:	d10d      	bne.n	833a <Spi_Ipw_DeInit+0x42>
    {
        (void)Lpspi_Ip_DeInit(Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->Instance);
    831e:	4a09      	ldr	r2, [pc, #36]	; (8344 <Spi_Ipw_DeInit+0x4c>)
    8320:	9b00      	ldr	r3, [sp, #0]
    8322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8326:	69da      	ldr	r2, [r3, #28]
    8328:	f89d 3007 	ldrb.w	r3, [sp, #7]
    832c:	009b      	lsls	r3, r3, #2
    832e:	4413      	add	r3, r2
    8330:	681b      	ldr	r3, [r3, #0]
    8332:	791b      	ldrb	r3, [r3, #4]
    8334:	4618      	mov	r0, r3
    8336:	f7fe fd99 	bl	6e6c <Lpspi_Ip_DeInit>
    else
    {
        (void)Flexio_Spi_Ip_DeInit(Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->Instance);
    }
#endif
}
    833a:	bf00      	nop
    833c:	b003      	add	sp, #12
    833e:	f85d fb04 	ldr.w	pc, [sp], #4
    8342:	bf00      	nop
    8344:	1fff8d4c 	.word	0x1fff8d4c

00008348 <Spi_Ipw_SyncTransmit>:

/* Spi_Ipw_SyncTransmit */
#if ( (SPI_LEVEL_DELIVERED == SPI_LEVEL2) || (SPI_LEVEL_DELIVERED == SPI_LEVEL0) )
Std_ReturnType Spi_Ipw_SyncTransmit(const Spi_JobConfigType *JobConfig, uint32 SpiCoreID)
{
    8348:	b500      	push	{lr}
    834a:	b08b      	sub	sp, #44	; 0x2c
    834c:	9001      	str	r0, [sp, #4]
    834e:	9100      	str	r1, [sp, #0]

    Std_ReturnType Ipw_Status = (Std_ReturnType)E_OK;
    8350:	2300      	movs	r3, #0
    8352:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    const Spi_ChannelConfigType *ChannelConfig;
    const Spi_ChannelConfigType *NextChannelConfig;
    Spi_ChannelType ChannelID;
    Spi_ChannelType NumChannelsInJob;
    Spi_ChannelType ChannelIndex;
    Spi_Ipw_SupportedIpsType IpType = JobConfig->ExternalDeviceConfig->ExDeviceConfig->IpType;
    8356:	9b01      	ldr	r3, [sp, #4]
    8358:	6a1b      	ldr	r3, [r3, #32]
    835a:	681b      	ldr	r3, [r3, #0]
    835c:	681b      	ldr	r3, [r3, #0]
    835e:	9306      	str	r3, [sp, #24]
    
    NumChannelsInJob = JobConfig->NumChannels;
    8360:	9b01      	ldr	r3, [sp, #4]
    8362:	781b      	ldrb	r3, [r3, #0]
    8364:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChannelIndex = (Spi_ChannelType)0; ChannelIndex < NumChannelsInJob; ChannelIndex++)
    8368:	2300      	movs	r3, #0
    836a:	f88d 301f 	strb.w	r3, [sp, #31]
    836e:	e0e6      	b.n	853e <Spi_Ipw_SyncTransmit+0x1f6>
    {
        ChannelID = JobConfig->ChannelIndexList[ChannelIndex];
    8370:	9b01      	ldr	r3, [sp, #4]
    8372:	685a      	ldr	r2, [r3, #4]
    8374:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8378:	4413      	add	r3, r2
    837a:	781b      	ldrb	r3, [r3, #0]
    837c:	f88d 3016 	strb.w	r3, [sp, #22]
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[ChannelID].ChannelCfg;
    8380:	4a75      	ldr	r2, [pc, #468]	; (8558 <Spi_Ipw_SyncTransmit+0x210>)
    8382:	9b00      	ldr	r3, [sp, #0]
    8384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8388:	68da      	ldr	r2, [r3, #12]
    838a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    838e:	009b      	lsls	r3, r3, #2
    8390:	4413      	add	r3, r2
    8392:	681b      	ldr	r3, [r3, #0]
    8394:	9304      	str	r3, [sp, #16]
        RxBuffer = ChannelConfig->BufferDescriptor->BufferRX;
    8396:	9b04      	ldr	r3, [sp, #16]
    8398:	691b      	ldr	r3, [r3, #16]
    839a:	689b      	ldr	r3, [r3, #8]
    839c:	9303      	str	r3, [sp, #12]
        if(0u != (ChannelConfig->ChannelState->Flags & SPI_CHANNEL_FLAG_TX_DEFAULT_U8))
    839e:	9b04      	ldr	r3, [sp, #16]
    83a0:	699b      	ldr	r3, [r3, #24]
    83a2:	781b      	ldrb	r3, [r3, #0]
    83a4:	f003 0301 	and.w	r3, r3, #1
    83a8:	2b00      	cmp	r3, #0
    83aa:	d002      	beq.n	83b2 <Spi_Ipw_SyncTransmit+0x6a>
        {
            TxBuffer = NULL_PTR;
    83ac:	2300      	movs	r3, #0
    83ae:	9308      	str	r3, [sp, #32]
    83b0:	e00c      	b.n	83cc <Spi_Ipw_SyncTransmit+0x84>
        }
        else
        {
            if(EB == ChannelConfig->BufferType)
    83b2:	9b04      	ldr	r3, [sp, #16]
    83b4:	681b      	ldr	r3, [r3, #0]
    83b6:	2b01      	cmp	r3, #1
    83b8:	d104      	bne.n	83c4 <Spi_Ipw_SyncTransmit+0x7c>
            {
                TxBuffer = ChannelConfig->BufferDescriptor->ExternalBufferTX;
    83ba:	9b04      	ldr	r3, [sp, #16]
    83bc:	691b      	ldr	r3, [r3, #16]
    83be:	681b      	ldr	r3, [r3, #0]
    83c0:	9308      	str	r3, [sp, #32]
    83c2:	e003      	b.n	83cc <Spi_Ipw_SyncTransmit+0x84>
            }
            else
            {
                TxBuffer = (const uint8*)(ChannelConfig->BufferDescriptor->InternalBufferTX);
    83c4:	9b04      	ldr	r3, [sp, #16]
    83c6:	691b      	ldr	r3, [r3, #16]
    83c8:	685b      	ldr	r3, [r3, #4]
    83ca:	9308      	str	r3, [sp, #32]
            }
        }
        
        if (SPI_OVER_LPSPI == IpType)
    83cc:	9b06      	ldr	r3, [sp, #24]
    83ce:	2b00      	cmp	r3, #0
    83d0:	f040 80a7 	bne.w	8522 <Spi_Ipw_SyncTransmit+0x1da>
        {
            if(ChannelIndex == (NumChannelsInJob - 1u))
    83d4:	f89d 201f 	ldrb.w	r2, [sp, #31]
    83d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    83dc:	3b01      	subs	r3, #1
    83de:	429a      	cmp	r2, r3
    83e0:	d10a      	bne.n	83f8 <Spi_Ipw_SyncTransmit+0xb0>
            {
                /* Clear CS after current channel */
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->KeepCs = FALSE;
    83e2:	9b01      	ldr	r3, [sp, #4]
    83e4:	6a1b      	ldr	r3, [r3, #32]
    83e6:	681b      	ldr	r3, [r3, #0]
    83e8:	791b      	ldrb	r3, [r3, #4]
    83ea:	461a      	mov	r2, r3
    83ec:	4b5b      	ldr	r3, [pc, #364]	; (855c <Spi_Ipw_SyncTransmit+0x214>)
    83ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    83f2:	2200      	movs	r2, #0
    83f4:	771a      	strb	r2, [r3, #28]
    83f6:	e07b      	b.n	84f0 <Spi_Ipw_SyncTransmit+0x1a8>
            }
            else
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->KeepCs = TRUE;
    83f8:	9b01      	ldr	r3, [sp, #4]
    83fa:	6a1b      	ldr	r3, [r3, #32]
    83fc:	681b      	ldr	r3, [r3, #0]
    83fe:	791b      	ldrb	r3, [r3, #4]
    8400:	461a      	mov	r2, r3
    8402:	4b56      	ldr	r3, [pc, #344]	; (855c <Spi_Ipw_SyncTransmit+0x214>)
    8404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8408:	2201      	movs	r2, #1
    840a:	771a      	strb	r2, [r3, #28]
                MCAL_DATA_SYNC_BARRIER();
    840c:	f3bf 8f4f 	dsb	sy
                /* update data for next transfer */
                NextChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[JobConfig->ChannelIndexList[ChannelIndex + 1u]].ChannelCfg;
    8410:	4a51      	ldr	r2, [pc, #324]	; (8558 <Spi_Ipw_SyncTransmit+0x210>)
    8412:	9b00      	ldr	r3, [sp, #0]
    8414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8418:	68da      	ldr	r2, [r3, #12]
    841a:	9b01      	ldr	r3, [sp, #4]
    841c:	6859      	ldr	r1, [r3, #4]
    841e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8422:	3301      	adds	r3, #1
    8424:	440b      	add	r3, r1
    8426:	781b      	ldrb	r3, [r3, #0]
    8428:	009b      	lsls	r3, r3, #2
    842a:	4413      	add	r3, r2
    842c:	681b      	ldr	r3, [r3, #0]
    842e:	9302      	str	r3, [sp, #8]
                MCAL_DATA_SYNC_BARRIER();
    8430:	f3bf 8f4f 	dsb	sy
                if(0u != (NextChannelConfig->ChannelState->Flags & SPI_CHANNEL_FLAG_TX_DEFAULT_U8))
    8434:	9b02      	ldr	r3, [sp, #8]
    8436:	699b      	ldr	r3, [r3, #24]
    8438:	781b      	ldrb	r3, [r3, #0]
    843a:	f003 0301 	and.w	r3, r3, #1
    843e:	2b00      	cmp	r3, #0
    8440:	d00a      	beq.n	8458 <Spi_Ipw_SyncTransmit+0x110>
                {
                    Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NULL_PTR;
    8442:	9b01      	ldr	r3, [sp, #4]
    8444:	6a1b      	ldr	r3, [r3, #32]
    8446:	681b      	ldr	r3, [r3, #0]
    8448:	791b      	ldrb	r3, [r3, #4]
    844a:	461a      	mov	r2, r3
    844c:	4b43      	ldr	r3, [pc, #268]	; (855c <Spi_Ipw_SyncTransmit+0x214>)
    844e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8452:	2200      	movs	r2, #0
    8454:	62da      	str	r2, [r3, #44]	; 0x2c
    8456:	e01c      	b.n	8492 <Spi_Ipw_SyncTransmit+0x14a>
                }
                else
                {
                    if(EB == NextChannelConfig->BufferType)
    8458:	9b02      	ldr	r3, [sp, #8]
    845a:	681b      	ldr	r3, [r3, #0]
    845c:	2b01      	cmp	r3, #1
    845e:	d10c      	bne.n	847a <Spi_Ipw_SyncTransmit+0x132>
                    {
                        Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NextChannelConfig->BufferDescriptor->ExternalBufferTX;
    8460:	9b02      	ldr	r3, [sp, #8]
    8462:	691a      	ldr	r2, [r3, #16]
    8464:	9b01      	ldr	r3, [sp, #4]
    8466:	6a1b      	ldr	r3, [r3, #32]
    8468:	681b      	ldr	r3, [r3, #0]
    846a:	791b      	ldrb	r3, [r3, #4]
    846c:	4619      	mov	r1, r3
    846e:	4b3b      	ldr	r3, [pc, #236]	; (855c <Spi_Ipw_SyncTransmit+0x214>)
    8470:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    8474:	6812      	ldr	r2, [r2, #0]
    8476:	62da      	str	r2, [r3, #44]	; 0x2c
    8478:	e00b      	b.n	8492 <Spi_Ipw_SyncTransmit+0x14a>
                    }
                    else
                    {
                        Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NextChannelConfig->BufferDescriptor->InternalBufferTX;
    847a:	9b02      	ldr	r3, [sp, #8]
    847c:	691a      	ldr	r2, [r3, #16]
    847e:	9b01      	ldr	r3, [sp, #4]
    8480:	6a1b      	ldr	r3, [r3, #32]
    8482:	681b      	ldr	r3, [r3, #0]
    8484:	791b      	ldrb	r3, [r3, #4]
    8486:	4619      	mov	r1, r3
    8488:	4b34      	ldr	r3, [pc, #208]	; (855c <Spi_Ipw_SyncTransmit+0x214>)
    848a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    848e:	6852      	ldr	r2, [r2, #4]
    8490:	62da      	str	r2, [r3, #44]	; 0x2c
                    }
                }
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FrameSizeNext = NextChannelConfig->FrameSize;
    8492:	9b02      	ldr	r3, [sp, #8]
    8494:	791a      	ldrb	r2, [r3, #4]
    8496:	9b01      	ldr	r3, [sp, #4]
    8498:	6a1b      	ldr	r3, [r3, #32]
    849a:	681b      	ldr	r3, [r3, #0]
    849c:	791b      	ldrb	r3, [r3, #4]
    849e:	4619      	mov	r1, r3
    84a0:	4b2e      	ldr	r3, [pc, #184]	; (855c <Spi_Ipw_SyncTransmit+0x214>)
    84a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    84a6:	b292      	uxth	r2, r2
    84a8:	861a      	strh	r2, [r3, #48]	; 0x30
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->LsbNext = NextChannelConfig->Lsb;
    84aa:	9b01      	ldr	r3, [sp, #4]
    84ac:	6a1b      	ldr	r3, [r3, #32]
    84ae:	681b      	ldr	r3, [r3, #0]
    84b0:	791b      	ldrb	r3, [r3, #4]
    84b2:	461a      	mov	r2, r3
    84b4:	4b29      	ldr	r3, [pc, #164]	; (855c <Spi_Ipw_SyncTransmit+0x214>)
    84b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    84ba:	9a02      	ldr	r2, [sp, #8]
    84bc:	7952      	ldrb	r2, [r2, #5]
    84be:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->DefaultDataNext = NextChannelConfig->DefaultTransmitValue;
    84c2:	9b01      	ldr	r3, [sp, #4]
    84c4:	6a1b      	ldr	r3, [r3, #32]
    84c6:	681b      	ldr	r3, [r3, #0]
    84c8:	791b      	ldrb	r3, [r3, #4]
    84ca:	461a      	mov	r2, r3
    84cc:	4b23      	ldr	r3, [pc, #140]	; (855c <Spi_Ipw_SyncTransmit+0x214>)
    84ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    84d2:	9a02      	ldr	r2, [sp, #8]
    84d4:	6892      	ldr	r2, [r2, #8]
    84d6:	635a      	str	r2, [r3, #52]	; 0x34
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->LengthNext = NextChannelConfig->ChannelState->Length;
    84d8:	9b02      	ldr	r3, [sp, #8]
    84da:	699a      	ldr	r2, [r3, #24]
    84dc:	9b01      	ldr	r3, [sp, #4]
    84de:	6a1b      	ldr	r3, [r3, #32]
    84e0:	681b      	ldr	r3, [r3, #0]
    84e2:	791b      	ldrb	r3, [r3, #4]
    84e4:	4619      	mov	r1, r3
    84e6:	4b1d      	ldr	r3, [pc, #116]	; (855c <Spi_Ipw_SyncTransmit+0x214>)
    84e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    84ec:	8852      	ldrh	r2, [r2, #2]
    84ee:	871a      	strh	r2, [r3, #56]	; 0x38
                    Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->NextChannelIsRX = FALSE;
                }
                #endif
            }
            
            if(0u == ChannelIndex)
    84f0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    84f4:	2b00      	cmp	r3, #0
    84f6:	d10a      	bne.n	850e <Spi_Ipw_SyncTransmit+0x1c6>
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FirstCmd = TRUE;
    84f8:	9b01      	ldr	r3, [sp, #4]
    84fa:	6a1b      	ldr	r3, [r3, #32]
    84fc:	681b      	ldr	r3, [r3, #0]
    84fe:	791b      	ldrb	r3, [r3, #4]
    8500:	461a      	mov	r2, r3
    8502:	4b16      	ldr	r3, [pc, #88]	; (855c <Spi_Ipw_SyncTransmit+0x214>)
    8504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8508:	2201      	movs	r2, #1
    850a:	775a      	strb	r2, [r3, #29]
    850c:	e009      	b.n	8522 <Spi_Ipw_SyncTransmit+0x1da>
            }
            else
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FirstCmd = FALSE;
    850e:	9b01      	ldr	r3, [sp, #4]
    8510:	6a1b      	ldr	r3, [r3, #32]
    8512:	681b      	ldr	r3, [r3, #0]
    8514:	791b      	ldrb	r3, [r3, #4]
    8516:	461a      	mov	r2, r3
    8518:	4b10      	ldr	r3, [pc, #64]	; (855c <Spi_Ipw_SyncTransmit+0x214>)
    851a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    851e:	2200      	movs	r2, #0
    8520:	775a      	strb	r2, [r3, #29]
            }
        }
        Ipw_Status = Spi_Ipw_SyncTransmitProcess(JobConfig, ChannelConfig, RxBuffer, (const uint8*)TxBuffer);
    8522:	9b08      	ldr	r3, [sp, #32]
    8524:	9a03      	ldr	r2, [sp, #12]
    8526:	9904      	ldr	r1, [sp, #16]
    8528:	9801      	ldr	r0, [sp, #4]
    852a:	f7ff fe7f 	bl	822c <Spi_Ipw_SyncTransmitProcess>
    852e:	4603      	mov	r3, r0
    8530:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (ChannelIndex = (Spi_ChannelType)0; ChannelIndex < NumChannelsInJob; ChannelIndex++)
    8534:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8538:	3301      	adds	r3, #1
    853a:	f88d 301f 	strb.w	r3, [sp, #31]
    853e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    8542:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8546:	429a      	cmp	r2, r3
    8548:	f4ff af12 	bcc.w	8370 <Spi_Ipw_SyncTransmit+0x28>
    }
    return Ipw_Status;
    854c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    8550:	4618      	mov	r0, r3
    8552:	b00b      	add	sp, #44	; 0x2c
    8554:	f85d fb04 	ldr.w	pc, [sp], #4
    8558:	1fff8d4c 	.word	0x1fff8d4c
    855c:	1fff8d38 	.word	0x1fff8d38

00008560 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    8560:	b500      	push	{lr}
    8562:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8564:	f7f8 fb52 	bl	c0c <Sys_GetCoreID>
    8568:	4603      	mov	r3, r0
    856a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    856c:	4a10      	ldr	r2, [pc, #64]	; (85b0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    856e:	9b01      	ldr	r3, [sp, #4]
    8570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8574:	2b00      	cmp	r3, #0
    8576:	d10d      	bne.n	8594 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8578:	f7f8 fa66 	bl	a48 <Mcu_schm_read_msr>
    857c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    857e:	9b00      	ldr	r3, [sp, #0]
    8580:	f003 0301 	and.w	r3, r3, #1
    8584:	2b00      	cmp	r3, #0
    8586:	d100      	bne.n	858a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8588:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    858a:	490a      	ldr	r1, [pc, #40]	; (85b4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    858c:	9b01      	ldr	r3, [sp, #4]
    858e:	9a00      	ldr	r2, [sp, #0]
    8590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    8594:	4a06      	ldr	r2, [pc, #24]	; (85b0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    8596:	9b01      	ldr	r3, [sp, #4]
    8598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    859c:	1c5a      	adds	r2, r3, #1
    859e:	4904      	ldr	r1, [pc, #16]	; (85b0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    85a0:	9b01      	ldr	r3, [sp, #4]
    85a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    85a6:	bf00      	nop
    85a8:	b003      	add	sp, #12
    85aa:	f85d fb04 	ldr.w	pc, [sp], #4
    85ae:	bf00      	nop
    85b0:	1fff8d78 	.word	0x1fff8d78
    85b4:	1fff8d74 	.word	0x1fff8d74

000085b8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    85b8:	b500      	push	{lr}
    85ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    85bc:	f7f8 fb26 	bl	c0c <Sys_GetCoreID>
    85c0:	4603      	mov	r3, r0
    85c2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    85c4:	4a0d      	ldr	r2, [pc, #52]	; (85fc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    85c6:	9b01      	ldr	r3, [sp, #4]
    85c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85cc:	1e5a      	subs	r2, r3, #1
    85ce:	490b      	ldr	r1, [pc, #44]	; (85fc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    85d0:	9b01      	ldr	r3, [sp, #4]
    85d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    85d6:	4a0a      	ldr	r2, [pc, #40]	; (8600 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    85d8:	9b01      	ldr	r3, [sp, #4]
    85da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85de:	f003 0301 	and.w	r3, r3, #1
    85e2:	2b00      	cmp	r3, #0
    85e4:	d106      	bne.n	85f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    85e6:	4a05      	ldr	r2, [pc, #20]	; (85fc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    85e8:	9b01      	ldr	r3, [sp, #4]
    85ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85ee:	2b00      	cmp	r3, #0
    85f0:	d100      	bne.n	85f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    85f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    85f4:	bf00      	nop
    85f6:	b003      	add	sp, #12
    85f8:	f85d fb04 	ldr.w	pc, [sp], #4
    85fc:	1fff8d78 	.word	0x1fff8d78
    8600:	1fff8d74 	.word	0x1fff8d74

00008604 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    8604:	b500      	push	{lr}
    8606:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8608:	f7f8 fb00 	bl	c0c <Sys_GetCoreID>
    860c:	4603      	mov	r3, r0
    860e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    8610:	4a10      	ldr	r2, [pc, #64]	; (8654 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    8612:	9b01      	ldr	r3, [sp, #4]
    8614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8618:	2b00      	cmp	r3, #0
    861a:	d10d      	bne.n	8638 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    861c:	f7f8 fa14 	bl	a48 <Mcu_schm_read_msr>
    8620:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8622:	9b00      	ldr	r3, [sp, #0]
    8624:	f003 0301 	and.w	r3, r3, #1
    8628:	2b00      	cmp	r3, #0
    862a:	d100      	bne.n	862e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    862c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    862e:	490a      	ldr	r1, [pc, #40]	; (8658 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    8630:	9b01      	ldr	r3, [sp, #4]
    8632:	9a00      	ldr	r2, [sp, #0]
    8634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    8638:	4a06      	ldr	r2, [pc, #24]	; (8654 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    863a:	9b01      	ldr	r3, [sp, #4]
    863c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8640:	1c5a      	adds	r2, r3, #1
    8642:	4904      	ldr	r1, [pc, #16]	; (8654 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    8644:	9b01      	ldr	r3, [sp, #4]
    8646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    864a:	bf00      	nop
    864c:	b003      	add	sp, #12
    864e:	f85d fb04 	ldr.w	pc, [sp], #4
    8652:	bf00      	nop
    8654:	1fff8d80 	.word	0x1fff8d80
    8658:	1fff8d7c 	.word	0x1fff8d7c

0000865c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    865c:	b500      	push	{lr}
    865e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8660:	f7f8 fad4 	bl	c0c <Sys_GetCoreID>
    8664:	4603      	mov	r3, r0
    8666:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    8668:	4a0d      	ldr	r2, [pc, #52]	; (86a0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    866a:	9b01      	ldr	r3, [sp, #4]
    866c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8670:	1e5a      	subs	r2, r3, #1
    8672:	490b      	ldr	r1, [pc, #44]	; (86a0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    8674:	9b01      	ldr	r3, [sp, #4]
    8676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    867a:	4a0a      	ldr	r2, [pc, #40]	; (86a4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    867c:	9b01      	ldr	r3, [sp, #4]
    867e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8682:	f003 0301 	and.w	r3, r3, #1
    8686:	2b00      	cmp	r3, #0
    8688:	d106      	bne.n	8698 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    868a:	4a05      	ldr	r2, [pc, #20]	; (86a0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    868c:	9b01      	ldr	r3, [sp, #4]
    868e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8692:	2b00      	cmp	r3, #0
    8694:	d100      	bne.n	8698 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8696:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8698:	bf00      	nop
    869a:	b003      	add	sp, #12
    869c:	f85d fb04 	ldr.w	pc, [sp], #4
    86a0:	1fff8d80 	.word	0x1fff8d80
    86a4:	1fff8d7c 	.word	0x1fff8d7c

000086a8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    86a8:	b500      	push	{lr}
    86aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    86ac:	f7f8 faae 	bl	c0c <Sys_GetCoreID>
    86b0:	4603      	mov	r3, r0
    86b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    86b4:	4a10      	ldr	r2, [pc, #64]	; (86f8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    86b6:	9b01      	ldr	r3, [sp, #4]
    86b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86bc:	2b00      	cmp	r3, #0
    86be:	d10d      	bne.n	86dc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    86c0:	f7f8 f9c2 	bl	a48 <Mcu_schm_read_msr>
    86c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    86c6:	9b00      	ldr	r3, [sp, #0]
    86c8:	f003 0301 	and.w	r3, r3, #1
    86cc:	2b00      	cmp	r3, #0
    86ce:	d100      	bne.n	86d2 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    86d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    86d2:	490a      	ldr	r1, [pc, #40]	; (86fc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    86d4:	9b01      	ldr	r3, [sp, #4]
    86d6:	9a00      	ldr	r2, [sp, #0]
    86d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    86dc:	4a06      	ldr	r2, [pc, #24]	; (86f8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    86de:	9b01      	ldr	r3, [sp, #4]
    86e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86e4:	1c5a      	adds	r2, r3, #1
    86e6:	4904      	ldr	r1, [pc, #16]	; (86f8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    86e8:	9b01      	ldr	r3, [sp, #4]
    86ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    86ee:	bf00      	nop
    86f0:	b003      	add	sp, #12
    86f2:	f85d fb04 	ldr.w	pc, [sp], #4
    86f6:	bf00      	nop
    86f8:	1fff8d88 	.word	0x1fff8d88
    86fc:	1fff8d84 	.word	0x1fff8d84

00008700 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    8700:	b500      	push	{lr}
    8702:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8704:	f7f8 fa82 	bl	c0c <Sys_GetCoreID>
    8708:	4603      	mov	r3, r0
    870a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    870c:	4a0d      	ldr	r2, [pc, #52]	; (8744 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    870e:	9b01      	ldr	r3, [sp, #4]
    8710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8714:	1e5a      	subs	r2, r3, #1
    8716:	490b      	ldr	r1, [pc, #44]	; (8744 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    8718:	9b01      	ldr	r3, [sp, #4]
    871a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    871e:	4a0a      	ldr	r2, [pc, #40]	; (8748 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    8720:	9b01      	ldr	r3, [sp, #4]
    8722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8726:	f003 0301 	and.w	r3, r3, #1
    872a:	2b00      	cmp	r3, #0
    872c:	d106      	bne.n	873c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    872e:	4a05      	ldr	r2, [pc, #20]	; (8744 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    8730:	9b01      	ldr	r3, [sp, #4]
    8732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8736:	2b00      	cmp	r3, #0
    8738:	d100      	bne.n	873c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    873a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    873c:	bf00      	nop
    873e:	b003      	add	sp, #12
    8740:	f85d fb04 	ldr.w	pc, [sp], #4
    8744:	1fff8d88 	.word	0x1fff8d88
    8748:	1fff8d84 	.word	0x1fff8d84

0000874c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    874c:	b500      	push	{lr}
    874e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8750:	f7f8 fa5c 	bl	c0c <Sys_GetCoreID>
    8754:	4603      	mov	r3, r0
    8756:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    8758:	4a10      	ldr	r2, [pc, #64]	; (879c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    875a:	9b01      	ldr	r3, [sp, #4]
    875c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8760:	2b00      	cmp	r3, #0
    8762:	d10d      	bne.n	8780 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8764:	f7f8 f979 	bl	a5a <Port_schm_read_msr>
    8768:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    876a:	9b00      	ldr	r3, [sp, #0]
    876c:	f003 0301 	and.w	r3, r3, #1
    8770:	2b00      	cmp	r3, #0
    8772:	d100      	bne.n	8776 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8774:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    8776:	490a      	ldr	r1, [pc, #40]	; (87a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    8778:	9b01      	ldr	r3, [sp, #4]
    877a:	9a00      	ldr	r2, [sp, #0]
    877c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    8780:	4a06      	ldr	r2, [pc, #24]	; (879c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    8782:	9b01      	ldr	r3, [sp, #4]
    8784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8788:	1c5a      	adds	r2, r3, #1
    878a:	4904      	ldr	r1, [pc, #16]	; (879c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    878c:	9b01      	ldr	r3, [sp, #4]
    878e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8792:	bf00      	nop
    8794:	b003      	add	sp, #12
    8796:	f85d fb04 	ldr.w	pc, [sp], #4
    879a:	bf00      	nop
    879c:	1fff8d90 	.word	0x1fff8d90
    87a0:	1fff8d8c 	.word	0x1fff8d8c

000087a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    87a4:	b500      	push	{lr}
    87a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    87a8:	f7f8 fa30 	bl	c0c <Sys_GetCoreID>
    87ac:	4603      	mov	r3, r0
    87ae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    87b0:	4a0d      	ldr	r2, [pc, #52]	; (87e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    87b2:	9b01      	ldr	r3, [sp, #4]
    87b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87b8:	1e5a      	subs	r2, r3, #1
    87ba:	490b      	ldr	r1, [pc, #44]	; (87e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    87bc:	9b01      	ldr	r3, [sp, #4]
    87be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    87c2:	4a0a      	ldr	r2, [pc, #40]	; (87ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    87c4:	9b01      	ldr	r3, [sp, #4]
    87c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87ca:	f003 0301 	and.w	r3, r3, #1
    87ce:	2b00      	cmp	r3, #0
    87d0:	d106      	bne.n	87e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    87d2:	4a05      	ldr	r2, [pc, #20]	; (87e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    87d4:	9b01      	ldr	r3, [sp, #4]
    87d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87da:	2b00      	cmp	r3, #0
    87dc:	d100      	bne.n	87e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    87de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    87e0:	bf00      	nop
    87e2:	b003      	add	sp, #12
    87e4:	f85d fb04 	ldr.w	pc, [sp], #4
    87e8:	1fff8d90 	.word	0x1fff8d90
    87ec:	1fff8d8c 	.word	0x1fff8d8c

000087f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    87f0:	b500      	push	{lr}
    87f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    87f4:	f7f8 fa0a 	bl	c0c <Sys_GetCoreID>
    87f8:	4603      	mov	r3, r0
    87fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    87fc:	4a10      	ldr	r2, [pc, #64]	; (8840 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    87fe:	9b01      	ldr	r3, [sp, #4]
    8800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8804:	2b00      	cmp	r3, #0
    8806:	d10d      	bne.n	8824 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8808:	f7f8 f927 	bl	a5a <Port_schm_read_msr>
    880c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    880e:	9b00      	ldr	r3, [sp, #0]
    8810:	f003 0301 	and.w	r3, r3, #1
    8814:	2b00      	cmp	r3, #0
    8816:	d100      	bne.n	881a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8818:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    881a:	490a      	ldr	r1, [pc, #40]	; (8844 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    881c:	9b01      	ldr	r3, [sp, #4]
    881e:	9a00      	ldr	r2, [sp, #0]
    8820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    8824:	4a06      	ldr	r2, [pc, #24]	; (8840 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    8826:	9b01      	ldr	r3, [sp, #4]
    8828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    882c:	1c5a      	adds	r2, r3, #1
    882e:	4904      	ldr	r1, [pc, #16]	; (8840 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    8830:	9b01      	ldr	r3, [sp, #4]
    8832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8836:	bf00      	nop
    8838:	b003      	add	sp, #12
    883a:	f85d fb04 	ldr.w	pc, [sp], #4
    883e:	bf00      	nop
    8840:	1fff8d98 	.word	0x1fff8d98
    8844:	1fff8d94 	.word	0x1fff8d94

00008848 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    8848:	b500      	push	{lr}
    884a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    884c:	f7f8 f9de 	bl	c0c <Sys_GetCoreID>
    8850:	4603      	mov	r3, r0
    8852:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    8854:	4a0d      	ldr	r2, [pc, #52]	; (888c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8856:	9b01      	ldr	r3, [sp, #4]
    8858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    885c:	1e5a      	subs	r2, r3, #1
    885e:	490b      	ldr	r1, [pc, #44]	; (888c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8860:	9b01      	ldr	r3, [sp, #4]
    8862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    8866:	4a0a      	ldr	r2, [pc, #40]	; (8890 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    8868:	9b01      	ldr	r3, [sp, #4]
    886a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    886e:	f003 0301 	and.w	r3, r3, #1
    8872:	2b00      	cmp	r3, #0
    8874:	d106      	bne.n	8884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    8876:	4a05      	ldr	r2, [pc, #20]	; (888c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8878:	9b01      	ldr	r3, [sp, #4]
    887a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    887e:	2b00      	cmp	r3, #0
    8880:	d100      	bne.n	8884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8882:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8884:	bf00      	nop
    8886:	b003      	add	sp, #12
    8888:	f85d fb04 	ldr.w	pc, [sp], #4
    888c:	1fff8d98 	.word	0x1fff8d98
    8890:	1fff8d94 	.word	0x1fff8d94

00008894 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    8894:	b500      	push	{lr}
    8896:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8898:	f7f8 f9b8 	bl	c0c <Sys_GetCoreID>
    889c:	4603      	mov	r3, r0
    889e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    88a0:	4a10      	ldr	r2, [pc, #64]	; (88e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    88a2:	9b01      	ldr	r3, [sp, #4]
    88a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88a8:	2b00      	cmp	r3, #0
    88aa:	d10d      	bne.n	88c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    88ac:	f7f8 f8d5 	bl	a5a <Port_schm_read_msr>
    88b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    88b2:	9b00      	ldr	r3, [sp, #0]
    88b4:	f003 0301 	and.w	r3, r3, #1
    88b8:	2b00      	cmp	r3, #0
    88ba:	d100      	bne.n	88be <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    88bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    88be:	490a      	ldr	r1, [pc, #40]	; (88e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    88c0:	9b01      	ldr	r3, [sp, #4]
    88c2:	9a00      	ldr	r2, [sp, #0]
    88c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    88c8:	4a06      	ldr	r2, [pc, #24]	; (88e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    88ca:	9b01      	ldr	r3, [sp, #4]
    88cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88d0:	1c5a      	adds	r2, r3, #1
    88d2:	4904      	ldr	r1, [pc, #16]	; (88e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    88d4:	9b01      	ldr	r3, [sp, #4]
    88d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    88da:	bf00      	nop
    88dc:	b003      	add	sp, #12
    88de:	f85d fb04 	ldr.w	pc, [sp], #4
    88e2:	bf00      	nop
    88e4:	1fff8da0 	.word	0x1fff8da0
    88e8:	1fff8d9c 	.word	0x1fff8d9c

000088ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    88ec:	b500      	push	{lr}
    88ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    88f0:	f7f8 f98c 	bl	c0c <Sys_GetCoreID>
    88f4:	4603      	mov	r3, r0
    88f6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    88f8:	4a0d      	ldr	r2, [pc, #52]	; (8930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    88fa:	9b01      	ldr	r3, [sp, #4]
    88fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8900:	1e5a      	subs	r2, r3, #1
    8902:	490b      	ldr	r1, [pc, #44]	; (8930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    8904:	9b01      	ldr	r3, [sp, #4]
    8906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    890a:	4a0a      	ldr	r2, [pc, #40]	; (8934 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    890c:	9b01      	ldr	r3, [sp, #4]
    890e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8912:	f003 0301 	and.w	r3, r3, #1
    8916:	2b00      	cmp	r3, #0
    8918:	d106      	bne.n	8928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    891a:	4a05      	ldr	r2, [pc, #20]	; (8930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    891c:	9b01      	ldr	r3, [sp, #4]
    891e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8922:	2b00      	cmp	r3, #0
    8924:	d100      	bne.n	8928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8926:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8928:	bf00      	nop
    892a:	b003      	add	sp, #12
    892c:	f85d fb04 	ldr.w	pc, [sp], #4
    8930:	1fff8da0 	.word	0x1fff8da0
    8934:	1fff8d9c 	.word	0x1fff8d9c

00008938 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    8938:	b500      	push	{lr}
    893a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    893c:	f7f8 f966 	bl	c0c <Sys_GetCoreID>
    8940:	4603      	mov	r3, r0
    8942:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    8944:	4a10      	ldr	r2, [pc, #64]	; (8988 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    8946:	9b01      	ldr	r3, [sp, #4]
    8948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    894c:	2b00      	cmp	r3, #0
    894e:	d10d      	bne.n	896c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8950:	f7f8 f883 	bl	a5a <Port_schm_read_msr>
    8954:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8956:	9b00      	ldr	r3, [sp, #0]
    8958:	f003 0301 	and.w	r3, r3, #1
    895c:	2b00      	cmp	r3, #0
    895e:	d100      	bne.n	8962 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8960:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    8962:	490a      	ldr	r1, [pc, #40]	; (898c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    8964:	9b01      	ldr	r3, [sp, #4]
    8966:	9a00      	ldr	r2, [sp, #0]
    8968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    896c:	4a06      	ldr	r2, [pc, #24]	; (8988 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    896e:	9b01      	ldr	r3, [sp, #4]
    8970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8974:	1c5a      	adds	r2, r3, #1
    8976:	4904      	ldr	r1, [pc, #16]	; (8988 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    8978:	9b01      	ldr	r3, [sp, #4]
    897a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    897e:	bf00      	nop
    8980:	b003      	add	sp, #12
    8982:	f85d fb04 	ldr.w	pc, [sp], #4
    8986:	bf00      	nop
    8988:	1fff8da8 	.word	0x1fff8da8
    898c:	1fff8da4 	.word	0x1fff8da4

00008990 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    8990:	b500      	push	{lr}
    8992:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8994:	f7f8 f93a 	bl	c0c <Sys_GetCoreID>
    8998:	4603      	mov	r3, r0
    899a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    899c:	4a0d      	ldr	r2, [pc, #52]	; (89d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    899e:	9b01      	ldr	r3, [sp, #4]
    89a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89a4:	1e5a      	subs	r2, r3, #1
    89a6:	490b      	ldr	r1, [pc, #44]	; (89d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    89a8:	9b01      	ldr	r3, [sp, #4]
    89aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    89ae:	4a0a      	ldr	r2, [pc, #40]	; (89d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    89b0:	9b01      	ldr	r3, [sp, #4]
    89b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89b6:	f003 0301 	and.w	r3, r3, #1
    89ba:	2b00      	cmp	r3, #0
    89bc:	d106      	bne.n	89cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    89be:	4a05      	ldr	r2, [pc, #20]	; (89d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    89c0:	9b01      	ldr	r3, [sp, #4]
    89c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89c6:	2b00      	cmp	r3, #0
    89c8:	d100      	bne.n	89cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    89ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    89cc:	bf00      	nop
    89ce:	b003      	add	sp, #12
    89d0:	f85d fb04 	ldr.w	pc, [sp], #4
    89d4:	1fff8da8 	.word	0x1fff8da8
    89d8:	1fff8da4 	.word	0x1fff8da4

000089dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    89dc:	b500      	push	{lr}
    89de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    89e0:	f7f8 f914 	bl	c0c <Sys_GetCoreID>
    89e4:	4603      	mov	r3, r0
    89e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    89e8:	4a10      	ldr	r2, [pc, #64]	; (8a2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    89ea:	9b01      	ldr	r3, [sp, #4]
    89ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89f0:	2b00      	cmp	r3, #0
    89f2:	d10d      	bne.n	8a10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    89f4:	f7f8 f831 	bl	a5a <Port_schm_read_msr>
    89f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    89fa:	9b00      	ldr	r3, [sp, #0]
    89fc:	f003 0301 	and.w	r3, r3, #1
    8a00:	2b00      	cmp	r3, #0
    8a02:	d100      	bne.n	8a06 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8a04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    8a06:	490a      	ldr	r1, [pc, #40]	; (8a30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    8a08:	9b01      	ldr	r3, [sp, #4]
    8a0a:	9a00      	ldr	r2, [sp, #0]
    8a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    8a10:	4a06      	ldr	r2, [pc, #24]	; (8a2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    8a12:	9b01      	ldr	r3, [sp, #4]
    8a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a18:	1c5a      	adds	r2, r3, #1
    8a1a:	4904      	ldr	r1, [pc, #16]	; (8a2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    8a1c:	9b01      	ldr	r3, [sp, #4]
    8a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8a22:	bf00      	nop
    8a24:	b003      	add	sp, #12
    8a26:	f85d fb04 	ldr.w	pc, [sp], #4
    8a2a:	bf00      	nop
    8a2c:	1fff8db0 	.word	0x1fff8db0
    8a30:	1fff8dac 	.word	0x1fff8dac

00008a34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    8a34:	b500      	push	{lr}
    8a36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8a38:	f7f8 f8e8 	bl	c0c <Sys_GetCoreID>
    8a3c:	4603      	mov	r3, r0
    8a3e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    8a40:	4a0d      	ldr	r2, [pc, #52]	; (8a78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    8a42:	9b01      	ldr	r3, [sp, #4]
    8a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a48:	1e5a      	subs	r2, r3, #1
    8a4a:	490b      	ldr	r1, [pc, #44]	; (8a78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    8a4c:	9b01      	ldr	r3, [sp, #4]
    8a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    8a52:	4a0a      	ldr	r2, [pc, #40]	; (8a7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    8a54:	9b01      	ldr	r3, [sp, #4]
    8a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a5a:	f003 0301 	and.w	r3, r3, #1
    8a5e:	2b00      	cmp	r3, #0
    8a60:	d106      	bne.n	8a70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    8a62:	4a05      	ldr	r2, [pc, #20]	; (8a78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    8a64:	9b01      	ldr	r3, [sp, #4]
    8a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a6a:	2b00      	cmp	r3, #0
    8a6c:	d100      	bne.n	8a70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8a6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8a70:	bf00      	nop
    8a72:	b003      	add	sp, #12
    8a74:	f85d fb04 	ldr.w	pc, [sp], #4
    8a78:	1fff8db0 	.word	0x1fff8db0
    8a7c:	1fff8dac 	.word	0x1fff8dac

00008a80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    8a80:	b500      	push	{lr}
    8a82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8a84:	f7f8 f8c2 	bl	c0c <Sys_GetCoreID>
    8a88:	4603      	mov	r3, r0
    8a8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    8a8c:	4a10      	ldr	r2, [pc, #64]	; (8ad0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    8a8e:	9b01      	ldr	r3, [sp, #4]
    8a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a94:	2b00      	cmp	r3, #0
    8a96:	d10d      	bne.n	8ab4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8a98:	f7f7 ffdf 	bl	a5a <Port_schm_read_msr>
    8a9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8a9e:	9b00      	ldr	r3, [sp, #0]
    8aa0:	f003 0301 	and.w	r3, r3, #1
    8aa4:	2b00      	cmp	r3, #0
    8aa6:	d100      	bne.n	8aaa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8aa8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    8aaa:	490a      	ldr	r1, [pc, #40]	; (8ad4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    8aac:	9b01      	ldr	r3, [sp, #4]
    8aae:	9a00      	ldr	r2, [sp, #0]
    8ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    8ab4:	4a06      	ldr	r2, [pc, #24]	; (8ad0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    8ab6:	9b01      	ldr	r3, [sp, #4]
    8ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8abc:	1c5a      	adds	r2, r3, #1
    8abe:	4904      	ldr	r1, [pc, #16]	; (8ad0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    8ac0:	9b01      	ldr	r3, [sp, #4]
    8ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8ac6:	bf00      	nop
    8ac8:	b003      	add	sp, #12
    8aca:	f85d fb04 	ldr.w	pc, [sp], #4
    8ace:	bf00      	nop
    8ad0:	1fff8db8 	.word	0x1fff8db8
    8ad4:	1fff8db4 	.word	0x1fff8db4

00008ad8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    8ad8:	b500      	push	{lr}
    8ada:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8adc:	f7f8 f896 	bl	c0c <Sys_GetCoreID>
    8ae0:	4603      	mov	r3, r0
    8ae2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    8ae4:	4a0d      	ldr	r2, [pc, #52]	; (8b1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    8ae6:	9b01      	ldr	r3, [sp, #4]
    8ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8aec:	1e5a      	subs	r2, r3, #1
    8aee:	490b      	ldr	r1, [pc, #44]	; (8b1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    8af0:	9b01      	ldr	r3, [sp, #4]
    8af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    8af6:	4a0a      	ldr	r2, [pc, #40]	; (8b20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    8af8:	9b01      	ldr	r3, [sp, #4]
    8afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8afe:	f003 0301 	and.w	r3, r3, #1
    8b02:	2b00      	cmp	r3, #0
    8b04:	d106      	bne.n	8b14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    8b06:	4a05      	ldr	r2, [pc, #20]	; (8b1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    8b08:	9b01      	ldr	r3, [sp, #4]
    8b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b0e:	2b00      	cmp	r3, #0
    8b10:	d100      	bne.n	8b14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8b12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8b14:	bf00      	nop
    8b16:	b003      	add	sp, #12
    8b18:	f85d fb04 	ldr.w	pc, [sp], #4
    8b1c:	1fff8db8 	.word	0x1fff8db8
    8b20:	1fff8db4 	.word	0x1fff8db4

00008b24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    8b24:	b500      	push	{lr}
    8b26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8b28:	f7f8 f870 	bl	c0c <Sys_GetCoreID>
    8b2c:	4603      	mov	r3, r0
    8b2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    8b30:	4a10      	ldr	r2, [pc, #64]	; (8b74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    8b32:	9b01      	ldr	r3, [sp, #4]
    8b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b38:	2b00      	cmp	r3, #0
    8b3a:	d10d      	bne.n	8b58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8b3c:	f7f7 ff8d 	bl	a5a <Port_schm_read_msr>
    8b40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8b42:	9b00      	ldr	r3, [sp, #0]
    8b44:	f003 0301 	and.w	r3, r3, #1
    8b48:	2b00      	cmp	r3, #0
    8b4a:	d100      	bne.n	8b4e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8b4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    8b4e:	490a      	ldr	r1, [pc, #40]	; (8b78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    8b50:	9b01      	ldr	r3, [sp, #4]
    8b52:	9a00      	ldr	r2, [sp, #0]
    8b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    8b58:	4a06      	ldr	r2, [pc, #24]	; (8b74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    8b5a:	9b01      	ldr	r3, [sp, #4]
    8b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b60:	1c5a      	adds	r2, r3, #1
    8b62:	4904      	ldr	r1, [pc, #16]	; (8b74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    8b64:	9b01      	ldr	r3, [sp, #4]
    8b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8b6a:	bf00      	nop
    8b6c:	b003      	add	sp, #12
    8b6e:	f85d fb04 	ldr.w	pc, [sp], #4
    8b72:	bf00      	nop
    8b74:	1fff8dc0 	.word	0x1fff8dc0
    8b78:	1fff8dbc 	.word	0x1fff8dbc

00008b7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    8b7c:	b500      	push	{lr}
    8b7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8b80:	f7f8 f844 	bl	c0c <Sys_GetCoreID>
    8b84:	4603      	mov	r3, r0
    8b86:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    8b88:	4a0d      	ldr	r2, [pc, #52]	; (8bc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    8b8a:	9b01      	ldr	r3, [sp, #4]
    8b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b90:	1e5a      	subs	r2, r3, #1
    8b92:	490b      	ldr	r1, [pc, #44]	; (8bc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    8b94:	9b01      	ldr	r3, [sp, #4]
    8b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    8b9a:	4a0a      	ldr	r2, [pc, #40]	; (8bc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    8b9c:	9b01      	ldr	r3, [sp, #4]
    8b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ba2:	f003 0301 	and.w	r3, r3, #1
    8ba6:	2b00      	cmp	r3, #0
    8ba8:	d106      	bne.n	8bb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    8baa:	4a05      	ldr	r2, [pc, #20]	; (8bc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    8bac:	9b01      	ldr	r3, [sp, #4]
    8bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bb2:	2b00      	cmp	r3, #0
    8bb4:	d100      	bne.n	8bb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8bb6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8bb8:	bf00      	nop
    8bba:	b003      	add	sp, #12
    8bbc:	f85d fb04 	ldr.w	pc, [sp], #4
    8bc0:	1fff8dc0 	.word	0x1fff8dc0
    8bc4:	1fff8dbc 	.word	0x1fff8dbc

00008bc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    8bc8:	b500      	push	{lr}
    8bca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8bcc:	f7f8 f81e 	bl	c0c <Sys_GetCoreID>
    8bd0:	4603      	mov	r3, r0
    8bd2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    8bd4:	4a10      	ldr	r2, [pc, #64]	; (8c18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    8bd6:	9b01      	ldr	r3, [sp, #4]
    8bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bdc:	2b00      	cmp	r3, #0
    8bde:	d10d      	bne.n	8bfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8be0:	f7f7 ff3b 	bl	a5a <Port_schm_read_msr>
    8be4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8be6:	9b00      	ldr	r3, [sp, #0]
    8be8:	f003 0301 	and.w	r3, r3, #1
    8bec:	2b00      	cmp	r3, #0
    8bee:	d100      	bne.n	8bf2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8bf0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    8bf2:	490a      	ldr	r1, [pc, #40]	; (8c1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    8bf4:	9b01      	ldr	r3, [sp, #4]
    8bf6:	9a00      	ldr	r2, [sp, #0]
    8bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    8bfc:	4a06      	ldr	r2, [pc, #24]	; (8c18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    8bfe:	9b01      	ldr	r3, [sp, #4]
    8c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c04:	1c5a      	adds	r2, r3, #1
    8c06:	4904      	ldr	r1, [pc, #16]	; (8c18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    8c08:	9b01      	ldr	r3, [sp, #4]
    8c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8c0e:	bf00      	nop
    8c10:	b003      	add	sp, #12
    8c12:	f85d fb04 	ldr.w	pc, [sp], #4
    8c16:	bf00      	nop
    8c18:	1fff8dc8 	.word	0x1fff8dc8
    8c1c:	1fff8dc4 	.word	0x1fff8dc4

00008c20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    8c20:	b500      	push	{lr}
    8c22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c24:	f7f7 fff2 	bl	c0c <Sys_GetCoreID>
    8c28:	4603      	mov	r3, r0
    8c2a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    8c2c:	4a0d      	ldr	r2, [pc, #52]	; (8c64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    8c2e:	9b01      	ldr	r3, [sp, #4]
    8c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c34:	1e5a      	subs	r2, r3, #1
    8c36:	490b      	ldr	r1, [pc, #44]	; (8c64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    8c38:	9b01      	ldr	r3, [sp, #4]
    8c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    8c3e:	4a0a      	ldr	r2, [pc, #40]	; (8c68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    8c40:	9b01      	ldr	r3, [sp, #4]
    8c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c46:	f003 0301 	and.w	r3, r3, #1
    8c4a:	2b00      	cmp	r3, #0
    8c4c:	d106      	bne.n	8c5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    8c4e:	4a05      	ldr	r2, [pc, #20]	; (8c64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    8c50:	9b01      	ldr	r3, [sp, #4]
    8c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c56:	2b00      	cmp	r3, #0
    8c58:	d100      	bne.n	8c5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8c5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8c5c:	bf00      	nop
    8c5e:	b003      	add	sp, #12
    8c60:	f85d fb04 	ldr.w	pc, [sp], #4
    8c64:	1fff8dc8 	.word	0x1fff8dc8
    8c68:	1fff8dc4 	.word	0x1fff8dc4

00008c6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    8c6c:	b500      	push	{lr}
    8c6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c70:	f7f7 ffcc 	bl	c0c <Sys_GetCoreID>
    8c74:	4603      	mov	r3, r0
    8c76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    8c78:	4a10      	ldr	r2, [pc, #64]	; (8cbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    8c7a:	9b01      	ldr	r3, [sp, #4]
    8c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c80:	2b00      	cmp	r3, #0
    8c82:	d10d      	bne.n	8ca0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8c84:	f7f7 fee9 	bl	a5a <Port_schm_read_msr>
    8c88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8c8a:	9b00      	ldr	r3, [sp, #0]
    8c8c:	f003 0301 	and.w	r3, r3, #1
    8c90:	2b00      	cmp	r3, #0
    8c92:	d100      	bne.n	8c96 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8c94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    8c96:	490a      	ldr	r1, [pc, #40]	; (8cc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    8c98:	9b01      	ldr	r3, [sp, #4]
    8c9a:	9a00      	ldr	r2, [sp, #0]
    8c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    8ca0:	4a06      	ldr	r2, [pc, #24]	; (8cbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    8ca2:	9b01      	ldr	r3, [sp, #4]
    8ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ca8:	1c5a      	adds	r2, r3, #1
    8caa:	4904      	ldr	r1, [pc, #16]	; (8cbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    8cac:	9b01      	ldr	r3, [sp, #4]
    8cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8cb2:	bf00      	nop
    8cb4:	b003      	add	sp, #12
    8cb6:	f85d fb04 	ldr.w	pc, [sp], #4
    8cba:	bf00      	nop
    8cbc:	1fff8dd0 	.word	0x1fff8dd0
    8cc0:	1fff8dcc 	.word	0x1fff8dcc

00008cc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    8cc4:	b500      	push	{lr}
    8cc6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8cc8:	f7f7 ffa0 	bl	c0c <Sys_GetCoreID>
    8ccc:	4603      	mov	r3, r0
    8cce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    8cd0:	4a0d      	ldr	r2, [pc, #52]	; (8d08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    8cd2:	9b01      	ldr	r3, [sp, #4]
    8cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cd8:	1e5a      	subs	r2, r3, #1
    8cda:	490b      	ldr	r1, [pc, #44]	; (8d08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    8cdc:	9b01      	ldr	r3, [sp, #4]
    8cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    8ce2:	4a0a      	ldr	r2, [pc, #40]	; (8d0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    8ce4:	9b01      	ldr	r3, [sp, #4]
    8ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cea:	f003 0301 	and.w	r3, r3, #1
    8cee:	2b00      	cmp	r3, #0
    8cf0:	d106      	bne.n	8d00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    8cf2:	4a05      	ldr	r2, [pc, #20]	; (8d08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    8cf4:	9b01      	ldr	r3, [sp, #4]
    8cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cfa:	2b00      	cmp	r3, #0
    8cfc:	d100      	bne.n	8d00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8cfe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8d00:	bf00      	nop
    8d02:	b003      	add	sp, #12
    8d04:	f85d fb04 	ldr.w	pc, [sp], #4
    8d08:	1fff8dd0 	.word	0x1fff8dd0
    8d0c:	1fff8dcc 	.word	0x1fff8dcc

00008d10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    8d10:	b500      	push	{lr}
    8d12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d14:	f7f7 ff7a 	bl	c0c <Sys_GetCoreID>
    8d18:	4603      	mov	r3, r0
    8d1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    8d1c:	4a10      	ldr	r2, [pc, #64]	; (8d60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    8d1e:	9b01      	ldr	r3, [sp, #4]
    8d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d24:	2b00      	cmp	r3, #0
    8d26:	d10d      	bne.n	8d44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8d28:	f7f7 fe97 	bl	a5a <Port_schm_read_msr>
    8d2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8d2e:	9b00      	ldr	r3, [sp, #0]
    8d30:	f003 0301 	and.w	r3, r3, #1
    8d34:	2b00      	cmp	r3, #0
    8d36:	d100      	bne.n	8d3a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8d38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    8d3a:	490a      	ldr	r1, [pc, #40]	; (8d64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    8d3c:	9b01      	ldr	r3, [sp, #4]
    8d3e:	9a00      	ldr	r2, [sp, #0]
    8d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    8d44:	4a06      	ldr	r2, [pc, #24]	; (8d60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    8d46:	9b01      	ldr	r3, [sp, #4]
    8d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d4c:	1c5a      	adds	r2, r3, #1
    8d4e:	4904      	ldr	r1, [pc, #16]	; (8d60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    8d50:	9b01      	ldr	r3, [sp, #4]
    8d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8d56:	bf00      	nop
    8d58:	b003      	add	sp, #12
    8d5a:	f85d fb04 	ldr.w	pc, [sp], #4
    8d5e:	bf00      	nop
    8d60:	1fff8dd8 	.word	0x1fff8dd8
    8d64:	1fff8dd4 	.word	0x1fff8dd4

00008d68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    8d68:	b500      	push	{lr}
    8d6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d6c:	f7f7 ff4e 	bl	c0c <Sys_GetCoreID>
    8d70:	4603      	mov	r3, r0
    8d72:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    8d74:	4a0d      	ldr	r2, [pc, #52]	; (8dac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    8d76:	9b01      	ldr	r3, [sp, #4]
    8d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d7c:	1e5a      	subs	r2, r3, #1
    8d7e:	490b      	ldr	r1, [pc, #44]	; (8dac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    8d80:	9b01      	ldr	r3, [sp, #4]
    8d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    8d86:	4a0a      	ldr	r2, [pc, #40]	; (8db0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    8d88:	9b01      	ldr	r3, [sp, #4]
    8d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d8e:	f003 0301 	and.w	r3, r3, #1
    8d92:	2b00      	cmp	r3, #0
    8d94:	d106      	bne.n	8da4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    8d96:	4a05      	ldr	r2, [pc, #20]	; (8dac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    8d98:	9b01      	ldr	r3, [sp, #4]
    8d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d9e:	2b00      	cmp	r3, #0
    8da0:	d100      	bne.n	8da4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8da2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8da4:	bf00      	nop
    8da6:	b003      	add	sp, #12
    8da8:	f85d fb04 	ldr.w	pc, [sp], #4
    8dac:	1fff8dd8 	.word	0x1fff8dd8
    8db0:	1fff8dd4 	.word	0x1fff8dd4

00008db4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    8db4:	b500      	push	{lr}
    8db6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8db8:	f7f7 ff28 	bl	c0c <Sys_GetCoreID>
    8dbc:	4603      	mov	r3, r0
    8dbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    8dc0:	4a10      	ldr	r2, [pc, #64]	; (8e04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    8dc2:	9b01      	ldr	r3, [sp, #4]
    8dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dc8:	2b00      	cmp	r3, #0
    8dca:	d10d      	bne.n	8de8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8dcc:	f7f7 fe45 	bl	a5a <Port_schm_read_msr>
    8dd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8dd2:	9b00      	ldr	r3, [sp, #0]
    8dd4:	f003 0301 	and.w	r3, r3, #1
    8dd8:	2b00      	cmp	r3, #0
    8dda:	d100      	bne.n	8dde <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8ddc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    8dde:	490a      	ldr	r1, [pc, #40]	; (8e08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    8de0:	9b01      	ldr	r3, [sp, #4]
    8de2:	9a00      	ldr	r2, [sp, #0]
    8de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    8de8:	4a06      	ldr	r2, [pc, #24]	; (8e04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    8dea:	9b01      	ldr	r3, [sp, #4]
    8dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8df0:	1c5a      	adds	r2, r3, #1
    8df2:	4904      	ldr	r1, [pc, #16]	; (8e04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    8df4:	9b01      	ldr	r3, [sp, #4]
    8df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8dfa:	bf00      	nop
    8dfc:	b003      	add	sp, #12
    8dfe:	f85d fb04 	ldr.w	pc, [sp], #4
    8e02:	bf00      	nop
    8e04:	1fff8de0 	.word	0x1fff8de0
    8e08:	1fff8ddc 	.word	0x1fff8ddc

00008e0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    8e0c:	b500      	push	{lr}
    8e0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e10:	f7f7 fefc 	bl	c0c <Sys_GetCoreID>
    8e14:	4603      	mov	r3, r0
    8e16:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    8e18:	4a0d      	ldr	r2, [pc, #52]	; (8e50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    8e1a:	9b01      	ldr	r3, [sp, #4]
    8e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e20:	1e5a      	subs	r2, r3, #1
    8e22:	490b      	ldr	r1, [pc, #44]	; (8e50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    8e24:	9b01      	ldr	r3, [sp, #4]
    8e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    8e2a:	4a0a      	ldr	r2, [pc, #40]	; (8e54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    8e2c:	9b01      	ldr	r3, [sp, #4]
    8e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e32:	f003 0301 	and.w	r3, r3, #1
    8e36:	2b00      	cmp	r3, #0
    8e38:	d106      	bne.n	8e48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    8e3a:	4a05      	ldr	r2, [pc, #20]	; (8e50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    8e3c:	9b01      	ldr	r3, [sp, #4]
    8e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e42:	2b00      	cmp	r3, #0
    8e44:	d100      	bne.n	8e48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8e46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8e48:	bf00      	nop
    8e4a:	b003      	add	sp, #12
    8e4c:	f85d fb04 	ldr.w	pc, [sp], #4
    8e50:	1fff8de0 	.word	0x1fff8de0
    8e54:	1fff8ddc 	.word	0x1fff8ddc

00008e58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    8e58:	b500      	push	{lr}
    8e5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e5c:	f7f7 fed6 	bl	c0c <Sys_GetCoreID>
    8e60:	4603      	mov	r3, r0
    8e62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    8e64:	4a10      	ldr	r2, [pc, #64]	; (8ea8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    8e66:	9b01      	ldr	r3, [sp, #4]
    8e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e6c:	2b00      	cmp	r3, #0
    8e6e:	d10d      	bne.n	8e8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8e70:	f7f7 fdf3 	bl	a5a <Port_schm_read_msr>
    8e74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8e76:	9b00      	ldr	r3, [sp, #0]
    8e78:	f003 0301 	and.w	r3, r3, #1
    8e7c:	2b00      	cmp	r3, #0
    8e7e:	d100      	bne.n	8e82 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8e80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    8e82:	490a      	ldr	r1, [pc, #40]	; (8eac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    8e84:	9b01      	ldr	r3, [sp, #4]
    8e86:	9a00      	ldr	r2, [sp, #0]
    8e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    8e8c:	4a06      	ldr	r2, [pc, #24]	; (8ea8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    8e8e:	9b01      	ldr	r3, [sp, #4]
    8e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e94:	1c5a      	adds	r2, r3, #1
    8e96:	4904      	ldr	r1, [pc, #16]	; (8ea8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    8e98:	9b01      	ldr	r3, [sp, #4]
    8e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8e9e:	bf00      	nop
    8ea0:	b003      	add	sp, #12
    8ea2:	f85d fb04 	ldr.w	pc, [sp], #4
    8ea6:	bf00      	nop
    8ea8:	1fff8de8 	.word	0x1fff8de8
    8eac:	1fff8de4 	.word	0x1fff8de4

00008eb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    8eb0:	b500      	push	{lr}
    8eb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8eb4:	f7f7 feaa 	bl	c0c <Sys_GetCoreID>
    8eb8:	4603      	mov	r3, r0
    8eba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    8ebc:	4a0d      	ldr	r2, [pc, #52]	; (8ef4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    8ebe:	9b01      	ldr	r3, [sp, #4]
    8ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ec4:	1e5a      	subs	r2, r3, #1
    8ec6:	490b      	ldr	r1, [pc, #44]	; (8ef4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    8ec8:	9b01      	ldr	r3, [sp, #4]
    8eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    8ece:	4a0a      	ldr	r2, [pc, #40]	; (8ef8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    8ed0:	9b01      	ldr	r3, [sp, #4]
    8ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ed6:	f003 0301 	and.w	r3, r3, #1
    8eda:	2b00      	cmp	r3, #0
    8edc:	d106      	bne.n	8eec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    8ede:	4a05      	ldr	r2, [pc, #20]	; (8ef4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    8ee0:	9b01      	ldr	r3, [sp, #4]
    8ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ee6:	2b00      	cmp	r3, #0
    8ee8:	d100      	bne.n	8eec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8eea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8eec:	bf00      	nop
    8eee:	b003      	add	sp, #12
    8ef0:	f85d fb04 	ldr.w	pc, [sp], #4
    8ef4:	1fff8de8 	.word	0x1fff8de8
    8ef8:	1fff8de4 	.word	0x1fff8de4

00008efc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    8efc:	b500      	push	{lr}
    8efe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f00:	f7f7 fe84 	bl	c0c <Sys_GetCoreID>
    8f04:	4603      	mov	r3, r0
    8f06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    8f08:	4a10      	ldr	r2, [pc, #64]	; (8f4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    8f0a:	9b01      	ldr	r3, [sp, #4]
    8f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f10:	2b00      	cmp	r3, #0
    8f12:	d10d      	bne.n	8f30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8f14:	f7f7 fda1 	bl	a5a <Port_schm_read_msr>
    8f18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8f1a:	9b00      	ldr	r3, [sp, #0]
    8f1c:	f003 0301 	and.w	r3, r3, #1
    8f20:	2b00      	cmp	r3, #0
    8f22:	d100      	bne.n	8f26 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8f24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    8f26:	490a      	ldr	r1, [pc, #40]	; (8f50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    8f28:	9b01      	ldr	r3, [sp, #4]
    8f2a:	9a00      	ldr	r2, [sp, #0]
    8f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    8f30:	4a06      	ldr	r2, [pc, #24]	; (8f4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    8f32:	9b01      	ldr	r3, [sp, #4]
    8f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f38:	1c5a      	adds	r2, r3, #1
    8f3a:	4904      	ldr	r1, [pc, #16]	; (8f4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    8f3c:	9b01      	ldr	r3, [sp, #4]
    8f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8f42:	bf00      	nop
    8f44:	b003      	add	sp, #12
    8f46:	f85d fb04 	ldr.w	pc, [sp], #4
    8f4a:	bf00      	nop
    8f4c:	1fff8df0 	.word	0x1fff8df0
    8f50:	1fff8dec 	.word	0x1fff8dec

00008f54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    8f54:	b500      	push	{lr}
    8f56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f58:	f7f7 fe58 	bl	c0c <Sys_GetCoreID>
    8f5c:	4603      	mov	r3, r0
    8f5e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    8f60:	4a0d      	ldr	r2, [pc, #52]	; (8f98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    8f62:	9b01      	ldr	r3, [sp, #4]
    8f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f68:	1e5a      	subs	r2, r3, #1
    8f6a:	490b      	ldr	r1, [pc, #44]	; (8f98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    8f6c:	9b01      	ldr	r3, [sp, #4]
    8f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    8f72:	4a0a      	ldr	r2, [pc, #40]	; (8f9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    8f74:	9b01      	ldr	r3, [sp, #4]
    8f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f7a:	f003 0301 	and.w	r3, r3, #1
    8f7e:	2b00      	cmp	r3, #0
    8f80:	d106      	bne.n	8f90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    8f82:	4a05      	ldr	r2, [pc, #20]	; (8f98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    8f84:	9b01      	ldr	r3, [sp, #4]
    8f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f8a:	2b00      	cmp	r3, #0
    8f8c:	d100      	bne.n	8f90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8f8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8f90:	bf00      	nop
    8f92:	b003      	add	sp, #12
    8f94:	f85d fb04 	ldr.w	pc, [sp], #4
    8f98:	1fff8df0 	.word	0x1fff8df0
    8f9c:	1fff8dec 	.word	0x1fff8dec

00008fa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    8fa0:	b500      	push	{lr}
    8fa2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8fa4:	f7f7 fe32 	bl	c0c <Sys_GetCoreID>
    8fa8:	4603      	mov	r3, r0
    8faa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    8fac:	4a10      	ldr	r2, [pc, #64]	; (8ff0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    8fae:	9b01      	ldr	r3, [sp, #4]
    8fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fb4:	2b00      	cmp	r3, #0
    8fb6:	d10d      	bne.n	8fd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8fb8:	f7f7 fd4f 	bl	a5a <Port_schm_read_msr>
    8fbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8fbe:	9b00      	ldr	r3, [sp, #0]
    8fc0:	f003 0301 	and.w	r3, r3, #1
    8fc4:	2b00      	cmp	r3, #0
    8fc6:	d100      	bne.n	8fca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8fc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    8fca:	490a      	ldr	r1, [pc, #40]	; (8ff4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    8fcc:	9b01      	ldr	r3, [sp, #4]
    8fce:	9a00      	ldr	r2, [sp, #0]
    8fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    8fd4:	4a06      	ldr	r2, [pc, #24]	; (8ff0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    8fd6:	9b01      	ldr	r3, [sp, #4]
    8fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fdc:	1c5a      	adds	r2, r3, #1
    8fde:	4904      	ldr	r1, [pc, #16]	; (8ff0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    8fe0:	9b01      	ldr	r3, [sp, #4]
    8fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8fe6:	bf00      	nop
    8fe8:	b003      	add	sp, #12
    8fea:	f85d fb04 	ldr.w	pc, [sp], #4
    8fee:	bf00      	nop
    8ff0:	1fff8df8 	.word	0x1fff8df8
    8ff4:	1fff8df4 	.word	0x1fff8df4

00008ff8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    8ff8:	b500      	push	{lr}
    8ffa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ffc:	f7f7 fe06 	bl	c0c <Sys_GetCoreID>
    9000:	4603      	mov	r3, r0
    9002:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    9004:	4a0d      	ldr	r2, [pc, #52]	; (903c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    9006:	9b01      	ldr	r3, [sp, #4]
    9008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    900c:	1e5a      	subs	r2, r3, #1
    900e:	490b      	ldr	r1, [pc, #44]	; (903c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    9010:	9b01      	ldr	r3, [sp, #4]
    9012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    9016:	4a0a      	ldr	r2, [pc, #40]	; (9040 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    9018:	9b01      	ldr	r3, [sp, #4]
    901a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    901e:	f003 0301 	and.w	r3, r3, #1
    9022:	2b00      	cmp	r3, #0
    9024:	d106      	bne.n	9034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    9026:	4a05      	ldr	r2, [pc, #20]	; (903c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    9028:	9b01      	ldr	r3, [sp, #4]
    902a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    902e:	2b00      	cmp	r3, #0
    9030:	d100      	bne.n	9034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9032:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9034:	bf00      	nop
    9036:	b003      	add	sp, #12
    9038:	f85d fb04 	ldr.w	pc, [sp], #4
    903c:	1fff8df8 	.word	0x1fff8df8
    9040:	1fff8df4 	.word	0x1fff8df4

00009044 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    9044:	b500      	push	{lr}
    9046:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9048:	f7f7 fde0 	bl	c0c <Sys_GetCoreID>
    904c:	4603      	mov	r3, r0
    904e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    9050:	4a10      	ldr	r2, [pc, #64]	; (9094 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    9052:	9b01      	ldr	r3, [sp, #4]
    9054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9058:	2b00      	cmp	r3, #0
    905a:	d10d      	bne.n	9078 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    905c:	f7f7 fcfd 	bl	a5a <Port_schm_read_msr>
    9060:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9062:	9b00      	ldr	r3, [sp, #0]
    9064:	f003 0301 	and.w	r3, r3, #1
    9068:	2b00      	cmp	r3, #0
    906a:	d100      	bne.n	906e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    906c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    906e:	490a      	ldr	r1, [pc, #40]	; (9098 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    9070:	9b01      	ldr	r3, [sp, #4]
    9072:	9a00      	ldr	r2, [sp, #0]
    9074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    9078:	4a06      	ldr	r2, [pc, #24]	; (9094 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    907a:	9b01      	ldr	r3, [sp, #4]
    907c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9080:	1c5a      	adds	r2, r3, #1
    9082:	4904      	ldr	r1, [pc, #16]	; (9094 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    9084:	9b01      	ldr	r3, [sp, #4]
    9086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    908a:	bf00      	nop
    908c:	b003      	add	sp, #12
    908e:	f85d fb04 	ldr.w	pc, [sp], #4
    9092:	bf00      	nop
    9094:	1fff8e00 	.word	0x1fff8e00
    9098:	1fff8dfc 	.word	0x1fff8dfc

0000909c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    909c:	b500      	push	{lr}
    909e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    90a0:	f7f7 fdb4 	bl	c0c <Sys_GetCoreID>
    90a4:	4603      	mov	r3, r0
    90a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    90a8:	4a0d      	ldr	r2, [pc, #52]	; (90e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    90aa:	9b01      	ldr	r3, [sp, #4]
    90ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90b0:	1e5a      	subs	r2, r3, #1
    90b2:	490b      	ldr	r1, [pc, #44]	; (90e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    90b4:	9b01      	ldr	r3, [sp, #4]
    90b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    90ba:	4a0a      	ldr	r2, [pc, #40]	; (90e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    90bc:	9b01      	ldr	r3, [sp, #4]
    90be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90c2:	f003 0301 	and.w	r3, r3, #1
    90c6:	2b00      	cmp	r3, #0
    90c8:	d106      	bne.n	90d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    90ca:	4a05      	ldr	r2, [pc, #20]	; (90e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    90cc:	9b01      	ldr	r3, [sp, #4]
    90ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90d2:	2b00      	cmp	r3, #0
    90d4:	d100      	bne.n	90d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    90d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    90d8:	bf00      	nop
    90da:	b003      	add	sp, #12
    90dc:	f85d fb04 	ldr.w	pc, [sp], #4
    90e0:	1fff8e00 	.word	0x1fff8e00
    90e4:	1fff8dfc 	.word	0x1fff8dfc

000090e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    90e8:	b500      	push	{lr}
    90ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    90ec:	f7f7 fd8e 	bl	c0c <Sys_GetCoreID>
    90f0:	4603      	mov	r3, r0
    90f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    90f4:	4a10      	ldr	r2, [pc, #64]	; (9138 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    90f6:	9b01      	ldr	r3, [sp, #4]
    90f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90fc:	2b00      	cmp	r3, #0
    90fe:	d10d      	bne.n	911c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9100:	f7f7 fcab 	bl	a5a <Port_schm_read_msr>
    9104:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9106:	9b00      	ldr	r3, [sp, #0]
    9108:	f003 0301 	and.w	r3, r3, #1
    910c:	2b00      	cmp	r3, #0
    910e:	d100      	bne.n	9112 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9110:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    9112:	490a      	ldr	r1, [pc, #40]	; (913c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    9114:	9b01      	ldr	r3, [sp, #4]
    9116:	9a00      	ldr	r2, [sp, #0]
    9118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    911c:	4a06      	ldr	r2, [pc, #24]	; (9138 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    911e:	9b01      	ldr	r3, [sp, #4]
    9120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9124:	1c5a      	adds	r2, r3, #1
    9126:	4904      	ldr	r1, [pc, #16]	; (9138 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    9128:	9b01      	ldr	r3, [sp, #4]
    912a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    912e:	bf00      	nop
    9130:	b003      	add	sp, #12
    9132:	f85d fb04 	ldr.w	pc, [sp], #4
    9136:	bf00      	nop
    9138:	1fff8e08 	.word	0x1fff8e08
    913c:	1fff8e04 	.word	0x1fff8e04

00009140 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    9140:	b500      	push	{lr}
    9142:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9144:	f7f7 fd62 	bl	c0c <Sys_GetCoreID>
    9148:	4603      	mov	r3, r0
    914a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    914c:	4a0d      	ldr	r2, [pc, #52]	; (9184 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    914e:	9b01      	ldr	r3, [sp, #4]
    9150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9154:	1e5a      	subs	r2, r3, #1
    9156:	490b      	ldr	r1, [pc, #44]	; (9184 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    9158:	9b01      	ldr	r3, [sp, #4]
    915a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    915e:	4a0a      	ldr	r2, [pc, #40]	; (9188 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    9160:	9b01      	ldr	r3, [sp, #4]
    9162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9166:	f003 0301 	and.w	r3, r3, #1
    916a:	2b00      	cmp	r3, #0
    916c:	d106      	bne.n	917c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    916e:	4a05      	ldr	r2, [pc, #20]	; (9184 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    9170:	9b01      	ldr	r3, [sp, #4]
    9172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9176:	2b00      	cmp	r3, #0
    9178:	d100      	bne.n	917c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    917a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    917c:	bf00      	nop
    917e:	b003      	add	sp, #12
    9180:	f85d fb04 	ldr.w	pc, [sp], #4
    9184:	1fff8e08 	.word	0x1fff8e08
    9188:	1fff8e04 	.word	0x1fff8e04

0000918c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    918c:	b500      	push	{lr}
    918e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9190:	f7f7 fd3c 	bl	c0c <Sys_GetCoreID>
    9194:	4603      	mov	r3, r0
    9196:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    9198:	4a10      	ldr	r2, [pc, #64]	; (91dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    919a:	9b01      	ldr	r3, [sp, #4]
    919c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91a0:	2b00      	cmp	r3, #0
    91a2:	d10d      	bne.n	91c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    91a4:	f7f7 fc59 	bl	a5a <Port_schm_read_msr>
    91a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    91aa:	9b00      	ldr	r3, [sp, #0]
    91ac:	f003 0301 	and.w	r3, r3, #1
    91b0:	2b00      	cmp	r3, #0
    91b2:	d100      	bne.n	91b6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    91b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    91b6:	490a      	ldr	r1, [pc, #40]	; (91e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    91b8:	9b01      	ldr	r3, [sp, #4]
    91ba:	9a00      	ldr	r2, [sp, #0]
    91bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    91c0:	4a06      	ldr	r2, [pc, #24]	; (91dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    91c2:	9b01      	ldr	r3, [sp, #4]
    91c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91c8:	1c5a      	adds	r2, r3, #1
    91ca:	4904      	ldr	r1, [pc, #16]	; (91dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    91cc:	9b01      	ldr	r3, [sp, #4]
    91ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    91d2:	bf00      	nop
    91d4:	b003      	add	sp, #12
    91d6:	f85d fb04 	ldr.w	pc, [sp], #4
    91da:	bf00      	nop
    91dc:	1fff8e10 	.word	0x1fff8e10
    91e0:	1fff8e0c 	.word	0x1fff8e0c

000091e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    91e4:	b500      	push	{lr}
    91e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    91e8:	f7f7 fd10 	bl	c0c <Sys_GetCoreID>
    91ec:	4603      	mov	r3, r0
    91ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    91f0:	4a0d      	ldr	r2, [pc, #52]	; (9228 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    91f2:	9b01      	ldr	r3, [sp, #4]
    91f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91f8:	1e5a      	subs	r2, r3, #1
    91fa:	490b      	ldr	r1, [pc, #44]	; (9228 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    91fc:	9b01      	ldr	r3, [sp, #4]
    91fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    9202:	4a0a      	ldr	r2, [pc, #40]	; (922c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    9204:	9b01      	ldr	r3, [sp, #4]
    9206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    920a:	f003 0301 	and.w	r3, r3, #1
    920e:	2b00      	cmp	r3, #0
    9210:	d106      	bne.n	9220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    9212:	4a05      	ldr	r2, [pc, #20]	; (9228 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    9214:	9b01      	ldr	r3, [sp, #4]
    9216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    921a:	2b00      	cmp	r3, #0
    921c:	d100      	bne.n	9220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    921e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9220:	bf00      	nop
    9222:	b003      	add	sp, #12
    9224:	f85d fb04 	ldr.w	pc, [sp], #4
    9228:	1fff8e10 	.word	0x1fff8e10
    922c:	1fff8e0c 	.word	0x1fff8e0c

00009230 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    9230:	b500      	push	{lr}
    9232:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9234:	f7f7 fcea 	bl	c0c <Sys_GetCoreID>
    9238:	4603      	mov	r3, r0
    923a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    923c:	4a10      	ldr	r2, [pc, #64]	; (9280 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    923e:	9b01      	ldr	r3, [sp, #4]
    9240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9244:	2b00      	cmp	r3, #0
    9246:	d10d      	bne.n	9264 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9248:	f7f7 fc07 	bl	a5a <Port_schm_read_msr>
    924c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    924e:	9b00      	ldr	r3, [sp, #0]
    9250:	f003 0301 	and.w	r3, r3, #1
    9254:	2b00      	cmp	r3, #0
    9256:	d100      	bne.n	925a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9258:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    925a:	490a      	ldr	r1, [pc, #40]	; (9284 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    925c:	9b01      	ldr	r3, [sp, #4]
    925e:	9a00      	ldr	r2, [sp, #0]
    9260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    9264:	4a06      	ldr	r2, [pc, #24]	; (9280 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    9266:	9b01      	ldr	r3, [sp, #4]
    9268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    926c:	1c5a      	adds	r2, r3, #1
    926e:	4904      	ldr	r1, [pc, #16]	; (9280 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    9270:	9b01      	ldr	r3, [sp, #4]
    9272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9276:	bf00      	nop
    9278:	b003      	add	sp, #12
    927a:	f85d fb04 	ldr.w	pc, [sp], #4
    927e:	bf00      	nop
    9280:	1fff8e18 	.word	0x1fff8e18
    9284:	1fff8e14 	.word	0x1fff8e14

00009288 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    9288:	b500      	push	{lr}
    928a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    928c:	f7f7 fcbe 	bl	c0c <Sys_GetCoreID>
    9290:	4603      	mov	r3, r0
    9292:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    9294:	4a0d      	ldr	r2, [pc, #52]	; (92cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    9296:	9b01      	ldr	r3, [sp, #4]
    9298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    929c:	1e5a      	subs	r2, r3, #1
    929e:	490b      	ldr	r1, [pc, #44]	; (92cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    92a0:	9b01      	ldr	r3, [sp, #4]
    92a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    92a6:	4a0a      	ldr	r2, [pc, #40]	; (92d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    92a8:	9b01      	ldr	r3, [sp, #4]
    92aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92ae:	f003 0301 	and.w	r3, r3, #1
    92b2:	2b00      	cmp	r3, #0
    92b4:	d106      	bne.n	92c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    92b6:	4a05      	ldr	r2, [pc, #20]	; (92cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    92b8:	9b01      	ldr	r3, [sp, #4]
    92ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92be:	2b00      	cmp	r3, #0
    92c0:	d100      	bne.n	92c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    92c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    92c4:	bf00      	nop
    92c6:	b003      	add	sp, #12
    92c8:	f85d fb04 	ldr.w	pc, [sp], #4
    92cc:	1fff8e18 	.word	0x1fff8e18
    92d0:	1fff8e14 	.word	0x1fff8e14

000092d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    92d4:	b500      	push	{lr}
    92d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    92d8:	f7f7 fc98 	bl	c0c <Sys_GetCoreID>
    92dc:	4603      	mov	r3, r0
    92de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    92e0:	4a10      	ldr	r2, [pc, #64]	; (9324 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    92e2:	9b01      	ldr	r3, [sp, #4]
    92e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92e8:	2b00      	cmp	r3, #0
    92ea:	d10d      	bne.n	9308 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    92ec:	f7f7 fbb5 	bl	a5a <Port_schm_read_msr>
    92f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    92f2:	9b00      	ldr	r3, [sp, #0]
    92f4:	f003 0301 	and.w	r3, r3, #1
    92f8:	2b00      	cmp	r3, #0
    92fa:	d100      	bne.n	92fe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    92fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    92fe:	490a      	ldr	r1, [pc, #40]	; (9328 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    9300:	9b01      	ldr	r3, [sp, #4]
    9302:	9a00      	ldr	r2, [sp, #0]
    9304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    9308:	4a06      	ldr	r2, [pc, #24]	; (9324 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    930a:	9b01      	ldr	r3, [sp, #4]
    930c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9310:	1c5a      	adds	r2, r3, #1
    9312:	4904      	ldr	r1, [pc, #16]	; (9324 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    9314:	9b01      	ldr	r3, [sp, #4]
    9316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    931a:	bf00      	nop
    931c:	b003      	add	sp, #12
    931e:	f85d fb04 	ldr.w	pc, [sp], #4
    9322:	bf00      	nop
    9324:	1fff8e20 	.word	0x1fff8e20
    9328:	1fff8e1c 	.word	0x1fff8e1c

0000932c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    932c:	b500      	push	{lr}
    932e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9330:	f7f7 fc6c 	bl	c0c <Sys_GetCoreID>
    9334:	4603      	mov	r3, r0
    9336:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    9338:	4a0d      	ldr	r2, [pc, #52]	; (9370 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    933a:	9b01      	ldr	r3, [sp, #4]
    933c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9340:	1e5a      	subs	r2, r3, #1
    9342:	490b      	ldr	r1, [pc, #44]	; (9370 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    9344:	9b01      	ldr	r3, [sp, #4]
    9346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    934a:	4a0a      	ldr	r2, [pc, #40]	; (9374 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    934c:	9b01      	ldr	r3, [sp, #4]
    934e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9352:	f003 0301 	and.w	r3, r3, #1
    9356:	2b00      	cmp	r3, #0
    9358:	d106      	bne.n	9368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    935a:	4a05      	ldr	r2, [pc, #20]	; (9370 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    935c:	9b01      	ldr	r3, [sp, #4]
    935e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9362:	2b00      	cmp	r3, #0
    9364:	d100      	bne.n	9368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9366:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9368:	bf00      	nop
    936a:	b003      	add	sp, #12
    936c:	f85d fb04 	ldr.w	pc, [sp], #4
    9370:	1fff8e20 	.word	0x1fff8e20
    9374:	1fff8e1c 	.word	0x1fff8e1c

00009378 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    9378:	b500      	push	{lr}
    937a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    937c:	f7f7 fc46 	bl	c0c <Sys_GetCoreID>
    9380:	4603      	mov	r3, r0
    9382:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    9384:	4a10      	ldr	r2, [pc, #64]	; (93c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    9386:	9b01      	ldr	r3, [sp, #4]
    9388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    938c:	2b00      	cmp	r3, #0
    938e:	d10d      	bne.n	93ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9390:	f7f7 fb63 	bl	a5a <Port_schm_read_msr>
    9394:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9396:	9b00      	ldr	r3, [sp, #0]
    9398:	f003 0301 	and.w	r3, r3, #1
    939c:	2b00      	cmp	r3, #0
    939e:	d100      	bne.n	93a2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    93a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    93a2:	490a      	ldr	r1, [pc, #40]	; (93cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    93a4:	9b01      	ldr	r3, [sp, #4]
    93a6:	9a00      	ldr	r2, [sp, #0]
    93a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    93ac:	4a06      	ldr	r2, [pc, #24]	; (93c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    93ae:	9b01      	ldr	r3, [sp, #4]
    93b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93b4:	1c5a      	adds	r2, r3, #1
    93b6:	4904      	ldr	r1, [pc, #16]	; (93c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    93b8:	9b01      	ldr	r3, [sp, #4]
    93ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    93be:	bf00      	nop
    93c0:	b003      	add	sp, #12
    93c2:	f85d fb04 	ldr.w	pc, [sp], #4
    93c6:	bf00      	nop
    93c8:	1fff8e28 	.word	0x1fff8e28
    93cc:	1fff8e24 	.word	0x1fff8e24

000093d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    93d0:	b500      	push	{lr}
    93d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    93d4:	f7f7 fc1a 	bl	c0c <Sys_GetCoreID>
    93d8:	4603      	mov	r3, r0
    93da:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    93dc:	4a0d      	ldr	r2, [pc, #52]	; (9414 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    93de:	9b01      	ldr	r3, [sp, #4]
    93e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93e4:	1e5a      	subs	r2, r3, #1
    93e6:	490b      	ldr	r1, [pc, #44]	; (9414 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    93e8:	9b01      	ldr	r3, [sp, #4]
    93ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    93ee:	4a0a      	ldr	r2, [pc, #40]	; (9418 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    93f0:	9b01      	ldr	r3, [sp, #4]
    93f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93f6:	f003 0301 	and.w	r3, r3, #1
    93fa:	2b00      	cmp	r3, #0
    93fc:	d106      	bne.n	940c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    93fe:	4a05      	ldr	r2, [pc, #20]	; (9414 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    9400:	9b01      	ldr	r3, [sp, #4]
    9402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9406:	2b00      	cmp	r3, #0
    9408:	d100      	bne.n	940c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    940a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    940c:	bf00      	nop
    940e:	b003      	add	sp, #12
    9410:	f85d fb04 	ldr.w	pc, [sp], #4
    9414:	1fff8e28 	.word	0x1fff8e28
    9418:	1fff8e24 	.word	0x1fff8e24

0000941c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    941c:	b500      	push	{lr}
    941e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9420:	f7f7 fbf4 	bl	c0c <Sys_GetCoreID>
    9424:	4603      	mov	r3, r0
    9426:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    9428:	4a10      	ldr	r2, [pc, #64]	; (946c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    942a:	9b01      	ldr	r3, [sp, #4]
    942c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9430:	2b00      	cmp	r3, #0
    9432:	d10d      	bne.n	9450 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9434:	f7f7 fb11 	bl	a5a <Port_schm_read_msr>
    9438:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    943a:	9b00      	ldr	r3, [sp, #0]
    943c:	f003 0301 	and.w	r3, r3, #1
    9440:	2b00      	cmp	r3, #0
    9442:	d100      	bne.n	9446 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9444:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    9446:	490a      	ldr	r1, [pc, #40]	; (9470 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    9448:	9b01      	ldr	r3, [sp, #4]
    944a:	9a00      	ldr	r2, [sp, #0]
    944c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    9450:	4a06      	ldr	r2, [pc, #24]	; (946c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    9452:	9b01      	ldr	r3, [sp, #4]
    9454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9458:	1c5a      	adds	r2, r3, #1
    945a:	4904      	ldr	r1, [pc, #16]	; (946c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    945c:	9b01      	ldr	r3, [sp, #4]
    945e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9462:	bf00      	nop
    9464:	b003      	add	sp, #12
    9466:	f85d fb04 	ldr.w	pc, [sp], #4
    946a:	bf00      	nop
    946c:	1fff8e30 	.word	0x1fff8e30
    9470:	1fff8e2c 	.word	0x1fff8e2c

00009474 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    9474:	b500      	push	{lr}
    9476:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9478:	f7f7 fbc8 	bl	c0c <Sys_GetCoreID>
    947c:	4603      	mov	r3, r0
    947e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    9480:	4a0d      	ldr	r2, [pc, #52]	; (94b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    9482:	9b01      	ldr	r3, [sp, #4]
    9484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9488:	1e5a      	subs	r2, r3, #1
    948a:	490b      	ldr	r1, [pc, #44]	; (94b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    948c:	9b01      	ldr	r3, [sp, #4]
    948e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    9492:	4a0a      	ldr	r2, [pc, #40]	; (94bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    9494:	9b01      	ldr	r3, [sp, #4]
    9496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    949a:	f003 0301 	and.w	r3, r3, #1
    949e:	2b00      	cmp	r3, #0
    94a0:	d106      	bne.n	94b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    94a2:	4a05      	ldr	r2, [pc, #20]	; (94b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    94a4:	9b01      	ldr	r3, [sp, #4]
    94a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94aa:	2b00      	cmp	r3, #0
    94ac:	d100      	bne.n	94b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    94ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    94b0:	bf00      	nop
    94b2:	b003      	add	sp, #12
    94b4:	f85d fb04 	ldr.w	pc, [sp], #4
    94b8:	1fff8e30 	.word	0x1fff8e30
    94bc:	1fff8e2c 	.word	0x1fff8e2c

000094c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    94c0:	b500      	push	{lr}
    94c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    94c4:	f7f7 fba2 	bl	c0c <Sys_GetCoreID>
    94c8:	4603      	mov	r3, r0
    94ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    94cc:	4a10      	ldr	r2, [pc, #64]	; (9510 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    94ce:	9b01      	ldr	r3, [sp, #4]
    94d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94d4:	2b00      	cmp	r3, #0
    94d6:	d10d      	bne.n	94f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    94d8:	f7f7 fabf 	bl	a5a <Port_schm_read_msr>
    94dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    94de:	9b00      	ldr	r3, [sp, #0]
    94e0:	f003 0301 	and.w	r3, r3, #1
    94e4:	2b00      	cmp	r3, #0
    94e6:	d100      	bne.n	94ea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    94e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    94ea:	490a      	ldr	r1, [pc, #40]	; (9514 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    94ec:	9b01      	ldr	r3, [sp, #4]
    94ee:	9a00      	ldr	r2, [sp, #0]
    94f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    94f4:	4a06      	ldr	r2, [pc, #24]	; (9510 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    94f6:	9b01      	ldr	r3, [sp, #4]
    94f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94fc:	1c5a      	adds	r2, r3, #1
    94fe:	4904      	ldr	r1, [pc, #16]	; (9510 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    9500:	9b01      	ldr	r3, [sp, #4]
    9502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9506:	bf00      	nop
    9508:	b003      	add	sp, #12
    950a:	f85d fb04 	ldr.w	pc, [sp], #4
    950e:	bf00      	nop
    9510:	1fff8e38 	.word	0x1fff8e38
    9514:	1fff8e34 	.word	0x1fff8e34

00009518 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    9518:	b500      	push	{lr}
    951a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    951c:	f7f7 fb76 	bl	c0c <Sys_GetCoreID>
    9520:	4603      	mov	r3, r0
    9522:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    9524:	4a0d      	ldr	r2, [pc, #52]	; (955c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9526:	9b01      	ldr	r3, [sp, #4]
    9528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    952c:	1e5a      	subs	r2, r3, #1
    952e:	490b      	ldr	r1, [pc, #44]	; (955c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9530:	9b01      	ldr	r3, [sp, #4]
    9532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    9536:	4a0a      	ldr	r2, [pc, #40]	; (9560 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    9538:	9b01      	ldr	r3, [sp, #4]
    953a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    953e:	f003 0301 	and.w	r3, r3, #1
    9542:	2b00      	cmp	r3, #0
    9544:	d106      	bne.n	9554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    9546:	4a05      	ldr	r2, [pc, #20]	; (955c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9548:	9b01      	ldr	r3, [sp, #4]
    954a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    954e:	2b00      	cmp	r3, #0
    9550:	d100      	bne.n	9554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9552:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9554:	bf00      	nop
    9556:	b003      	add	sp, #12
    9558:	f85d fb04 	ldr.w	pc, [sp], #4
    955c:	1fff8e38 	.word	0x1fff8e38
    9560:	1fff8e34 	.word	0x1fff8e34

00009564 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    9564:	b500      	push	{lr}
    9566:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9568:	f7f7 fb50 	bl	c0c <Sys_GetCoreID>
    956c:	4603      	mov	r3, r0
    956e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    9570:	4a10      	ldr	r2, [pc, #64]	; (95b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    9572:	9b01      	ldr	r3, [sp, #4]
    9574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9578:	2b00      	cmp	r3, #0
    957a:	d10d      	bne.n	9598 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    957c:	f7f7 fa6d 	bl	a5a <Port_schm_read_msr>
    9580:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9582:	9b00      	ldr	r3, [sp, #0]
    9584:	f003 0301 	and.w	r3, r3, #1
    9588:	2b00      	cmp	r3, #0
    958a:	d100      	bne.n	958e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    958c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    958e:	490a      	ldr	r1, [pc, #40]	; (95b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    9590:	9b01      	ldr	r3, [sp, #4]
    9592:	9a00      	ldr	r2, [sp, #0]
    9594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    9598:	4a06      	ldr	r2, [pc, #24]	; (95b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    959a:	9b01      	ldr	r3, [sp, #4]
    959c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95a0:	1c5a      	adds	r2, r3, #1
    95a2:	4904      	ldr	r1, [pc, #16]	; (95b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    95a4:	9b01      	ldr	r3, [sp, #4]
    95a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    95aa:	bf00      	nop
    95ac:	b003      	add	sp, #12
    95ae:	f85d fb04 	ldr.w	pc, [sp], #4
    95b2:	bf00      	nop
    95b4:	1fff8e40 	.word	0x1fff8e40
    95b8:	1fff8e3c 	.word	0x1fff8e3c

000095bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    95bc:	b500      	push	{lr}
    95be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    95c0:	f7f7 fb24 	bl	c0c <Sys_GetCoreID>
    95c4:	4603      	mov	r3, r0
    95c6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    95c8:	4a0d      	ldr	r2, [pc, #52]	; (9600 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    95ca:	9b01      	ldr	r3, [sp, #4]
    95cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95d0:	1e5a      	subs	r2, r3, #1
    95d2:	490b      	ldr	r1, [pc, #44]	; (9600 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    95d4:	9b01      	ldr	r3, [sp, #4]
    95d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    95da:	4a0a      	ldr	r2, [pc, #40]	; (9604 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    95dc:	9b01      	ldr	r3, [sp, #4]
    95de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95e2:	f003 0301 	and.w	r3, r3, #1
    95e6:	2b00      	cmp	r3, #0
    95e8:	d106      	bne.n	95f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    95ea:	4a05      	ldr	r2, [pc, #20]	; (9600 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    95ec:	9b01      	ldr	r3, [sp, #4]
    95ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95f2:	2b00      	cmp	r3, #0
    95f4:	d100      	bne.n	95f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    95f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    95f8:	bf00      	nop
    95fa:	b003      	add	sp, #12
    95fc:	f85d fb04 	ldr.w	pc, [sp], #4
    9600:	1fff8e40 	.word	0x1fff8e40
    9604:	1fff8e3c 	.word	0x1fff8e3c

00009608 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    9608:	b500      	push	{lr}
    960a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    960c:	f7f7 fafe 	bl	c0c <Sys_GetCoreID>
    9610:	4603      	mov	r3, r0
    9612:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    9614:	4a10      	ldr	r2, [pc, #64]	; (9658 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    9616:	9b01      	ldr	r3, [sp, #4]
    9618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    961c:	2b00      	cmp	r3, #0
    961e:	d10d      	bne.n	963c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9620:	f7f7 fa1b 	bl	a5a <Port_schm_read_msr>
    9624:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9626:	9b00      	ldr	r3, [sp, #0]
    9628:	f003 0301 	and.w	r3, r3, #1
    962c:	2b00      	cmp	r3, #0
    962e:	d100      	bne.n	9632 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9630:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    9632:	490a      	ldr	r1, [pc, #40]	; (965c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    9634:	9b01      	ldr	r3, [sp, #4]
    9636:	9a00      	ldr	r2, [sp, #0]
    9638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    963c:	4a06      	ldr	r2, [pc, #24]	; (9658 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    963e:	9b01      	ldr	r3, [sp, #4]
    9640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9644:	1c5a      	adds	r2, r3, #1
    9646:	4904      	ldr	r1, [pc, #16]	; (9658 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    9648:	9b01      	ldr	r3, [sp, #4]
    964a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    964e:	bf00      	nop
    9650:	b003      	add	sp, #12
    9652:	f85d fb04 	ldr.w	pc, [sp], #4
    9656:	bf00      	nop
    9658:	1fff8e48 	.word	0x1fff8e48
    965c:	1fff8e44 	.word	0x1fff8e44

00009660 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    9660:	b500      	push	{lr}
    9662:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9664:	f7f7 fad2 	bl	c0c <Sys_GetCoreID>
    9668:	4603      	mov	r3, r0
    966a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    966c:	4a0d      	ldr	r2, [pc, #52]	; (96a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    966e:	9b01      	ldr	r3, [sp, #4]
    9670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9674:	1e5a      	subs	r2, r3, #1
    9676:	490b      	ldr	r1, [pc, #44]	; (96a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9678:	9b01      	ldr	r3, [sp, #4]
    967a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    967e:	4a0a      	ldr	r2, [pc, #40]	; (96a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    9680:	9b01      	ldr	r3, [sp, #4]
    9682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9686:	f003 0301 	and.w	r3, r3, #1
    968a:	2b00      	cmp	r3, #0
    968c:	d106      	bne.n	969c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    968e:	4a05      	ldr	r2, [pc, #20]	; (96a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9690:	9b01      	ldr	r3, [sp, #4]
    9692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9696:	2b00      	cmp	r3, #0
    9698:	d100      	bne.n	969c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    969a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    969c:	bf00      	nop
    969e:	b003      	add	sp, #12
    96a0:	f85d fb04 	ldr.w	pc, [sp], #4
    96a4:	1fff8e48 	.word	0x1fff8e48
    96a8:	1fff8e44 	.word	0x1fff8e44

000096ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    96ac:	b500      	push	{lr}
    96ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    96b0:	f7f7 faac 	bl	c0c <Sys_GetCoreID>
    96b4:	4603      	mov	r3, r0
    96b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    96b8:	4a10      	ldr	r2, [pc, #64]	; (96fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    96ba:	9b01      	ldr	r3, [sp, #4]
    96bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96c0:	2b00      	cmp	r3, #0
    96c2:	d10d      	bne.n	96e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    96c4:	f7f7 f9c9 	bl	a5a <Port_schm_read_msr>
    96c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    96ca:	9b00      	ldr	r3, [sp, #0]
    96cc:	f003 0301 	and.w	r3, r3, #1
    96d0:	2b00      	cmp	r3, #0
    96d2:	d100      	bne.n	96d6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    96d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    96d6:	490a      	ldr	r1, [pc, #40]	; (9700 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    96d8:	9b01      	ldr	r3, [sp, #4]
    96da:	9a00      	ldr	r2, [sp, #0]
    96dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    96e0:	4a06      	ldr	r2, [pc, #24]	; (96fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    96e2:	9b01      	ldr	r3, [sp, #4]
    96e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96e8:	1c5a      	adds	r2, r3, #1
    96ea:	4904      	ldr	r1, [pc, #16]	; (96fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    96ec:	9b01      	ldr	r3, [sp, #4]
    96ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    96f2:	bf00      	nop
    96f4:	b003      	add	sp, #12
    96f6:	f85d fb04 	ldr.w	pc, [sp], #4
    96fa:	bf00      	nop
    96fc:	1fff8e50 	.word	0x1fff8e50
    9700:	1fff8e4c 	.word	0x1fff8e4c

00009704 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    9704:	b500      	push	{lr}
    9706:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9708:	f7f7 fa80 	bl	c0c <Sys_GetCoreID>
    970c:	4603      	mov	r3, r0
    970e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    9710:	4a0d      	ldr	r2, [pc, #52]	; (9748 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    9712:	9b01      	ldr	r3, [sp, #4]
    9714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9718:	1e5a      	subs	r2, r3, #1
    971a:	490b      	ldr	r1, [pc, #44]	; (9748 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    971c:	9b01      	ldr	r3, [sp, #4]
    971e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    9722:	4a0a      	ldr	r2, [pc, #40]	; (974c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    9724:	9b01      	ldr	r3, [sp, #4]
    9726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    972a:	f003 0301 	and.w	r3, r3, #1
    972e:	2b00      	cmp	r3, #0
    9730:	d106      	bne.n	9740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    9732:	4a05      	ldr	r2, [pc, #20]	; (9748 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    9734:	9b01      	ldr	r3, [sp, #4]
    9736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    973a:	2b00      	cmp	r3, #0
    973c:	d100      	bne.n	9740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    973e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9740:	bf00      	nop
    9742:	b003      	add	sp, #12
    9744:	f85d fb04 	ldr.w	pc, [sp], #4
    9748:	1fff8e50 	.word	0x1fff8e50
    974c:	1fff8e4c 	.word	0x1fff8e4c

00009750 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    9750:	b500      	push	{lr}
    9752:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9754:	f7f7 fa5a 	bl	c0c <Sys_GetCoreID>
    9758:	4603      	mov	r3, r0
    975a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    975c:	4a10      	ldr	r2, [pc, #64]	; (97a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    975e:	9b01      	ldr	r3, [sp, #4]
    9760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9764:	2b00      	cmp	r3, #0
    9766:	d10d      	bne.n	9784 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9768:	f7f7 f977 	bl	a5a <Port_schm_read_msr>
    976c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    976e:	9b00      	ldr	r3, [sp, #0]
    9770:	f003 0301 	and.w	r3, r3, #1
    9774:	2b00      	cmp	r3, #0
    9776:	d100      	bne.n	977a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9778:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    977a:	490a      	ldr	r1, [pc, #40]	; (97a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    977c:	9b01      	ldr	r3, [sp, #4]
    977e:	9a00      	ldr	r2, [sp, #0]
    9780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    9784:	4a06      	ldr	r2, [pc, #24]	; (97a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    9786:	9b01      	ldr	r3, [sp, #4]
    9788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    978c:	1c5a      	adds	r2, r3, #1
    978e:	4904      	ldr	r1, [pc, #16]	; (97a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    9790:	9b01      	ldr	r3, [sp, #4]
    9792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9796:	bf00      	nop
    9798:	b003      	add	sp, #12
    979a:	f85d fb04 	ldr.w	pc, [sp], #4
    979e:	bf00      	nop
    97a0:	1fff8e58 	.word	0x1fff8e58
    97a4:	1fff8e54 	.word	0x1fff8e54

000097a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    97a8:	b500      	push	{lr}
    97aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    97ac:	f7f7 fa2e 	bl	c0c <Sys_GetCoreID>
    97b0:	4603      	mov	r3, r0
    97b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    97b4:	4a0d      	ldr	r2, [pc, #52]	; (97ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    97b6:	9b01      	ldr	r3, [sp, #4]
    97b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97bc:	1e5a      	subs	r2, r3, #1
    97be:	490b      	ldr	r1, [pc, #44]	; (97ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    97c0:	9b01      	ldr	r3, [sp, #4]
    97c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    97c6:	4a0a      	ldr	r2, [pc, #40]	; (97f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    97c8:	9b01      	ldr	r3, [sp, #4]
    97ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97ce:	f003 0301 	and.w	r3, r3, #1
    97d2:	2b00      	cmp	r3, #0
    97d4:	d106      	bne.n	97e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    97d6:	4a05      	ldr	r2, [pc, #20]	; (97ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    97d8:	9b01      	ldr	r3, [sp, #4]
    97da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97de:	2b00      	cmp	r3, #0
    97e0:	d100      	bne.n	97e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    97e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    97e4:	bf00      	nop
    97e6:	b003      	add	sp, #12
    97e8:	f85d fb04 	ldr.w	pc, [sp], #4
    97ec:	1fff8e58 	.word	0x1fff8e58
    97f0:	1fff8e54 	.word	0x1fff8e54

000097f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    97f4:	b500      	push	{lr}
    97f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    97f8:	f7f7 fa08 	bl	c0c <Sys_GetCoreID>
    97fc:	4603      	mov	r3, r0
    97fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    9800:	4a10      	ldr	r2, [pc, #64]	; (9844 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    9802:	9b01      	ldr	r3, [sp, #4]
    9804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9808:	2b00      	cmp	r3, #0
    980a:	d10d      	bne.n	9828 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    980c:	f7f7 f925 	bl	a5a <Port_schm_read_msr>
    9810:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9812:	9b00      	ldr	r3, [sp, #0]
    9814:	f003 0301 	and.w	r3, r3, #1
    9818:	2b00      	cmp	r3, #0
    981a:	d100      	bne.n	981e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    981c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    981e:	490a      	ldr	r1, [pc, #40]	; (9848 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    9820:	9b01      	ldr	r3, [sp, #4]
    9822:	9a00      	ldr	r2, [sp, #0]
    9824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    9828:	4a06      	ldr	r2, [pc, #24]	; (9844 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    982a:	9b01      	ldr	r3, [sp, #4]
    982c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9830:	1c5a      	adds	r2, r3, #1
    9832:	4904      	ldr	r1, [pc, #16]	; (9844 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    9834:	9b01      	ldr	r3, [sp, #4]
    9836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    983a:	bf00      	nop
    983c:	b003      	add	sp, #12
    983e:	f85d fb04 	ldr.w	pc, [sp], #4
    9842:	bf00      	nop
    9844:	1fff8e60 	.word	0x1fff8e60
    9848:	1fff8e5c 	.word	0x1fff8e5c

0000984c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    984c:	b500      	push	{lr}
    984e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9850:	f7f7 f9dc 	bl	c0c <Sys_GetCoreID>
    9854:	4603      	mov	r3, r0
    9856:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    9858:	4a0d      	ldr	r2, [pc, #52]	; (9890 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    985a:	9b01      	ldr	r3, [sp, #4]
    985c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9860:	1e5a      	subs	r2, r3, #1
    9862:	490b      	ldr	r1, [pc, #44]	; (9890 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    9864:	9b01      	ldr	r3, [sp, #4]
    9866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    986a:	4a0a      	ldr	r2, [pc, #40]	; (9894 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    986c:	9b01      	ldr	r3, [sp, #4]
    986e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9872:	f003 0301 	and.w	r3, r3, #1
    9876:	2b00      	cmp	r3, #0
    9878:	d106      	bne.n	9888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    987a:	4a05      	ldr	r2, [pc, #20]	; (9890 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    987c:	9b01      	ldr	r3, [sp, #4]
    987e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9882:	2b00      	cmp	r3, #0
    9884:	d100      	bne.n	9888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9886:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9888:	bf00      	nop
    988a:	b003      	add	sp, #12
    988c:	f85d fb04 	ldr.w	pc, [sp], #4
    9890:	1fff8e60 	.word	0x1fff8e60
    9894:	1fff8e5c 	.word	0x1fff8e5c

00009898 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    9898:	b500      	push	{lr}
    989a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    989c:	f7f7 f9b6 	bl	c0c <Sys_GetCoreID>
    98a0:	4603      	mov	r3, r0
    98a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    98a4:	4a10      	ldr	r2, [pc, #64]	; (98e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    98a6:	9b01      	ldr	r3, [sp, #4]
    98a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98ac:	2b00      	cmp	r3, #0
    98ae:	d10d      	bne.n	98cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    98b0:	f7f7 f8d3 	bl	a5a <Port_schm_read_msr>
    98b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    98b6:	9b00      	ldr	r3, [sp, #0]
    98b8:	f003 0301 	and.w	r3, r3, #1
    98bc:	2b00      	cmp	r3, #0
    98be:	d100      	bne.n	98c2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    98c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    98c2:	490a      	ldr	r1, [pc, #40]	; (98ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    98c4:	9b01      	ldr	r3, [sp, #4]
    98c6:	9a00      	ldr	r2, [sp, #0]
    98c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    98cc:	4a06      	ldr	r2, [pc, #24]	; (98e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    98ce:	9b01      	ldr	r3, [sp, #4]
    98d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98d4:	1c5a      	adds	r2, r3, #1
    98d6:	4904      	ldr	r1, [pc, #16]	; (98e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    98d8:	9b01      	ldr	r3, [sp, #4]
    98da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    98de:	bf00      	nop
    98e0:	b003      	add	sp, #12
    98e2:	f85d fb04 	ldr.w	pc, [sp], #4
    98e6:	bf00      	nop
    98e8:	1fff8e68 	.word	0x1fff8e68
    98ec:	1fff8e64 	.word	0x1fff8e64

000098f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    98f0:	b500      	push	{lr}
    98f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    98f4:	f7f7 f98a 	bl	c0c <Sys_GetCoreID>
    98f8:	4603      	mov	r3, r0
    98fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    98fc:	4a0d      	ldr	r2, [pc, #52]	; (9934 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    98fe:	9b01      	ldr	r3, [sp, #4]
    9900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9904:	1e5a      	subs	r2, r3, #1
    9906:	490b      	ldr	r1, [pc, #44]	; (9934 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    9908:	9b01      	ldr	r3, [sp, #4]
    990a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    990e:	4a0a      	ldr	r2, [pc, #40]	; (9938 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    9910:	9b01      	ldr	r3, [sp, #4]
    9912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9916:	f003 0301 	and.w	r3, r3, #1
    991a:	2b00      	cmp	r3, #0
    991c:	d106      	bne.n	992c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    991e:	4a05      	ldr	r2, [pc, #20]	; (9934 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    9920:	9b01      	ldr	r3, [sp, #4]
    9922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9926:	2b00      	cmp	r3, #0
    9928:	d100      	bne.n	992c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    992a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    992c:	bf00      	nop
    992e:	b003      	add	sp, #12
    9930:	f85d fb04 	ldr.w	pc, [sp], #4
    9934:	1fff8e68 	.word	0x1fff8e68
    9938:	1fff8e64 	.word	0x1fff8e64

0000993c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00(void)
{
    993c:	b500      	push	{lr}
    993e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9940:	f7f7 f964 	bl	c0c <Sys_GetCoreID>
    9944:	4603      	mov	r3, r0
    9946:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId])
    9948:	4a10      	ldr	r2, [pc, #64]	; (998c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
    994a:	9b01      	ldr	r3, [sp, #4]
    994c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9950:	2b00      	cmp	r3, #0
    9952:	d10d      	bne.n	9970 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9954:	f7f7 f88a 	bl	a6c <Spi_schm_read_msr>
    9958:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    995a:	9b00      	ldr	r3, [sp, #0]
    995c:	f003 0301 	and.w	r3, r3, #1
    9960:	2b00      	cmp	r3, #0
    9962:	d100      	bne.n	9966 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9964:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    9966:	490a      	ldr	r1, [pc, #40]	; (9990 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x54>)
    9968:	9b01      	ldr	r3, [sp, #4]
    996a:	9a00      	ldr	r2, [sp, #0]
    996c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]++;
    9970:	4a06      	ldr	r2, [pc, #24]	; (998c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
    9972:	9b01      	ldr	r3, [sp, #4]
    9974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9978:	1c5a      	adds	r2, r3, #1
    997a:	4904      	ldr	r1, [pc, #16]	; (998c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
    997c:	9b01      	ldr	r3, [sp, #4]
    997e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9982:	bf00      	nop
    9984:	b003      	add	sp, #12
    9986:	f85d fb04 	ldr.w	pc, [sp], #4
    998a:	bf00      	nop
    998c:	1fff8e70 	.word	0x1fff8e70
    9990:	1fff8e6c 	.word	0x1fff8e6c

00009994 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00(void)
{
    9994:	b500      	push	{lr}
    9996:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9998:	f7f7 f938 	bl	c0c <Sys_GetCoreID>
    999c:	4603      	mov	r3, r0
    999e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]--;
    99a0:	4a0d      	ldr	r2, [pc, #52]	; (99d8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
    99a2:	9b01      	ldr	r3, [sp, #4]
    99a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99a8:	1e5a      	subs	r2, r3, #1
    99aa:	490b      	ldr	r1, [pc, #44]	; (99d8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
    99ac:	9b01      	ldr	r3, [sp, #4]
    99ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    99b2:	4a0a      	ldr	r2, [pc, #40]	; (99dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x48>)
    99b4:	9b01      	ldr	r3, [sp, #4]
    99b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99ba:	f003 0301 	and.w	r3, r3, #1
    99be:	2b00      	cmp	r3, #0
    99c0:	d106      	bne.n	99d0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x3c>
    99c2:	4a05      	ldr	r2, [pc, #20]	; (99d8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
    99c4:	9b01      	ldr	r3, [sp, #4]
    99c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99ca:	2b00      	cmp	r3, #0
    99cc:	d100      	bne.n	99d0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    99ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    99d0:	bf00      	nop
    99d2:	b003      	add	sp, #12
    99d4:	f85d fb04 	ldr.w	pc, [sp], #4
    99d8:	1fff8e70 	.word	0x1fff8e70
    99dc:	1fff8e6c 	.word	0x1fff8e6c

000099e0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01(void)
{
    99e0:	b500      	push	{lr}
    99e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    99e4:	f7f7 f912 	bl	c0c <Sys_GetCoreID>
    99e8:	4603      	mov	r3, r0
    99ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId])
    99ec:	4a10      	ldr	r2, [pc, #64]	; (9a30 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
    99ee:	9b01      	ldr	r3, [sp, #4]
    99f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99f4:	2b00      	cmp	r3, #0
    99f6:	d10d      	bne.n	9a14 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    99f8:	f7f7 f838 	bl	a6c <Spi_schm_read_msr>
    99fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    99fe:	9b00      	ldr	r3, [sp, #0]
    9a00:	f003 0301 	and.w	r3, r3, #1
    9a04:	2b00      	cmp	r3, #0
    9a06:	d100      	bne.n	9a0a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9a08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    9a0a:	490a      	ldr	r1, [pc, #40]	; (9a34 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x54>)
    9a0c:	9b01      	ldr	r3, [sp, #4]
    9a0e:	9a00      	ldr	r2, [sp, #0]
    9a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]++;
    9a14:	4a06      	ldr	r2, [pc, #24]	; (9a30 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
    9a16:	9b01      	ldr	r3, [sp, #4]
    9a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a1c:	1c5a      	adds	r2, r3, #1
    9a1e:	4904      	ldr	r1, [pc, #16]	; (9a30 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
    9a20:	9b01      	ldr	r3, [sp, #4]
    9a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9a26:	bf00      	nop
    9a28:	b003      	add	sp, #12
    9a2a:	f85d fb04 	ldr.w	pc, [sp], #4
    9a2e:	bf00      	nop
    9a30:	1fff8e78 	.word	0x1fff8e78
    9a34:	1fff8e74 	.word	0x1fff8e74

00009a38 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01(void)
{
    9a38:	b500      	push	{lr}
    9a3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a3c:	f7f7 f8e6 	bl	c0c <Sys_GetCoreID>
    9a40:	4603      	mov	r3, r0
    9a42:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]--;
    9a44:	4a0d      	ldr	r2, [pc, #52]	; (9a7c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
    9a46:	9b01      	ldr	r3, [sp, #4]
    9a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a4c:	1e5a      	subs	r2, r3, #1
    9a4e:	490b      	ldr	r1, [pc, #44]	; (9a7c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
    9a50:	9b01      	ldr	r3, [sp, #4]
    9a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    9a56:	4a0a      	ldr	r2, [pc, #40]	; (9a80 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x48>)
    9a58:	9b01      	ldr	r3, [sp, #4]
    9a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a5e:	f003 0301 	and.w	r3, r3, #1
    9a62:	2b00      	cmp	r3, #0
    9a64:	d106      	bne.n	9a74 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x3c>
    9a66:	4a05      	ldr	r2, [pc, #20]	; (9a7c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
    9a68:	9b01      	ldr	r3, [sp, #4]
    9a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a6e:	2b00      	cmp	r3, #0
    9a70:	d100      	bne.n	9a74 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9a72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9a74:	bf00      	nop
    9a76:	b003      	add	sp, #12
    9a78:	f85d fb04 	ldr.w	pc, [sp], #4
    9a7c:	1fff8e78 	.word	0x1fff8e78
    9a80:	1fff8e74 	.word	0x1fff8e74

00009a84 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02(void)
{
    9a84:	b500      	push	{lr}
    9a86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a88:	f7f7 f8c0 	bl	c0c <Sys_GetCoreID>
    9a8c:	4603      	mov	r3, r0
    9a8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId])
    9a90:	4a10      	ldr	r2, [pc, #64]	; (9ad4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
    9a92:	9b01      	ldr	r3, [sp, #4]
    9a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a98:	2b00      	cmp	r3, #0
    9a9a:	d10d      	bne.n	9ab8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9a9c:	f7f6 ffe6 	bl	a6c <Spi_schm_read_msr>
    9aa0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9aa2:	9b00      	ldr	r3, [sp, #0]
    9aa4:	f003 0301 	and.w	r3, r3, #1
    9aa8:	2b00      	cmp	r3, #0
    9aaa:	d100      	bne.n	9aae <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9aac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    9aae:	490a      	ldr	r1, [pc, #40]	; (9ad8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x54>)
    9ab0:	9b01      	ldr	r3, [sp, #4]
    9ab2:	9a00      	ldr	r2, [sp, #0]
    9ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]++;
    9ab8:	4a06      	ldr	r2, [pc, #24]	; (9ad4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
    9aba:	9b01      	ldr	r3, [sp, #4]
    9abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ac0:	1c5a      	adds	r2, r3, #1
    9ac2:	4904      	ldr	r1, [pc, #16]	; (9ad4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
    9ac4:	9b01      	ldr	r3, [sp, #4]
    9ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9aca:	bf00      	nop
    9acc:	b003      	add	sp, #12
    9ace:	f85d fb04 	ldr.w	pc, [sp], #4
    9ad2:	bf00      	nop
    9ad4:	1fff8e80 	.word	0x1fff8e80
    9ad8:	1fff8e7c 	.word	0x1fff8e7c

00009adc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02(void)
{
    9adc:	b500      	push	{lr}
    9ade:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9ae0:	f7f7 f894 	bl	c0c <Sys_GetCoreID>
    9ae4:	4603      	mov	r3, r0
    9ae6:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]--;
    9ae8:	4a0d      	ldr	r2, [pc, #52]	; (9b20 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
    9aea:	9b01      	ldr	r3, [sp, #4]
    9aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9af0:	1e5a      	subs	r2, r3, #1
    9af2:	490b      	ldr	r1, [pc, #44]	; (9b20 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
    9af4:	9b01      	ldr	r3, [sp, #4]
    9af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    9afa:	4a0a      	ldr	r2, [pc, #40]	; (9b24 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x48>)
    9afc:	9b01      	ldr	r3, [sp, #4]
    9afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b02:	f003 0301 	and.w	r3, r3, #1
    9b06:	2b00      	cmp	r3, #0
    9b08:	d106      	bne.n	9b18 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x3c>
    9b0a:	4a05      	ldr	r2, [pc, #20]	; (9b20 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
    9b0c:	9b01      	ldr	r3, [sp, #4]
    9b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b12:	2b00      	cmp	r3, #0
    9b14:	d100      	bne.n	9b18 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9b16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9b18:	bf00      	nop
    9b1a:	b003      	add	sp, #12
    9b1c:	f85d fb04 	ldr.w	pc, [sp], #4
    9b20:	1fff8e80 	.word	0x1fff8e80
    9b24:	1fff8e7c 	.word	0x1fff8e7c

00009b28 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03(void)
{
    9b28:	b500      	push	{lr}
    9b2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b2c:	f7f7 f86e 	bl	c0c <Sys_GetCoreID>
    9b30:	4603      	mov	r3, r0
    9b32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId])
    9b34:	4a10      	ldr	r2, [pc, #64]	; (9b78 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
    9b36:	9b01      	ldr	r3, [sp, #4]
    9b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b3c:	2b00      	cmp	r3, #0
    9b3e:	d10d      	bne.n	9b5c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9b40:	f7f6 ff94 	bl	a6c <Spi_schm_read_msr>
    9b44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9b46:	9b00      	ldr	r3, [sp, #0]
    9b48:	f003 0301 	and.w	r3, r3, #1
    9b4c:	2b00      	cmp	r3, #0
    9b4e:	d100      	bne.n	9b52 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9b50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    9b52:	490a      	ldr	r1, [pc, #40]	; (9b7c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x54>)
    9b54:	9b01      	ldr	r3, [sp, #4]
    9b56:	9a00      	ldr	r2, [sp, #0]
    9b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]++;
    9b5c:	4a06      	ldr	r2, [pc, #24]	; (9b78 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
    9b5e:	9b01      	ldr	r3, [sp, #4]
    9b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b64:	1c5a      	adds	r2, r3, #1
    9b66:	4904      	ldr	r1, [pc, #16]	; (9b78 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
    9b68:	9b01      	ldr	r3, [sp, #4]
    9b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9b6e:	bf00      	nop
    9b70:	b003      	add	sp, #12
    9b72:	f85d fb04 	ldr.w	pc, [sp], #4
    9b76:	bf00      	nop
    9b78:	1fff8e88 	.word	0x1fff8e88
    9b7c:	1fff8e84 	.word	0x1fff8e84

00009b80 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03(void)
{
    9b80:	b500      	push	{lr}
    9b82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b84:	f7f7 f842 	bl	c0c <Sys_GetCoreID>
    9b88:	4603      	mov	r3, r0
    9b8a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]--;
    9b8c:	4a0d      	ldr	r2, [pc, #52]	; (9bc4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
    9b8e:	9b01      	ldr	r3, [sp, #4]
    9b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b94:	1e5a      	subs	r2, r3, #1
    9b96:	490b      	ldr	r1, [pc, #44]	; (9bc4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
    9b98:	9b01      	ldr	r3, [sp, #4]
    9b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    9b9e:	4a0a      	ldr	r2, [pc, #40]	; (9bc8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x48>)
    9ba0:	9b01      	ldr	r3, [sp, #4]
    9ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ba6:	f003 0301 	and.w	r3, r3, #1
    9baa:	2b00      	cmp	r3, #0
    9bac:	d106      	bne.n	9bbc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x3c>
    9bae:	4a05      	ldr	r2, [pc, #20]	; (9bc4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
    9bb0:	9b01      	ldr	r3, [sp, #4]
    9bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bb6:	2b00      	cmp	r3, #0
    9bb8:	d100      	bne.n	9bbc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9bba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9bbc:	bf00      	nop
    9bbe:	b003      	add	sp, #12
    9bc0:	f85d fb04 	ldr.w	pc, [sp], #4
    9bc4:	1fff8e88 	.word	0x1fff8e88
    9bc8:	1fff8e84 	.word	0x1fff8e84

00009bcc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04(void)
{
    9bcc:	b500      	push	{lr}
    9bce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9bd0:	f7f7 f81c 	bl	c0c <Sys_GetCoreID>
    9bd4:	4603      	mov	r3, r0
    9bd6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId])
    9bd8:	4a10      	ldr	r2, [pc, #64]	; (9c1c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
    9bda:	9b01      	ldr	r3, [sp, #4]
    9bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9be0:	2b00      	cmp	r3, #0
    9be2:	d10d      	bne.n	9c00 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9be4:	f7f6 ff42 	bl	a6c <Spi_schm_read_msr>
    9be8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9bea:	9b00      	ldr	r3, [sp, #0]
    9bec:	f003 0301 	and.w	r3, r3, #1
    9bf0:	2b00      	cmp	r3, #0
    9bf2:	d100      	bne.n	9bf6 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9bf4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    9bf6:	490a      	ldr	r1, [pc, #40]	; (9c20 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x54>)
    9bf8:	9b01      	ldr	r3, [sp, #4]
    9bfa:	9a00      	ldr	r2, [sp, #0]
    9bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]++;
    9c00:	4a06      	ldr	r2, [pc, #24]	; (9c1c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
    9c02:	9b01      	ldr	r3, [sp, #4]
    9c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c08:	1c5a      	adds	r2, r3, #1
    9c0a:	4904      	ldr	r1, [pc, #16]	; (9c1c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
    9c0c:	9b01      	ldr	r3, [sp, #4]
    9c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9c12:	bf00      	nop
    9c14:	b003      	add	sp, #12
    9c16:	f85d fb04 	ldr.w	pc, [sp], #4
    9c1a:	bf00      	nop
    9c1c:	1fff8e90 	.word	0x1fff8e90
    9c20:	1fff8e8c 	.word	0x1fff8e8c

00009c24 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04(void)
{
    9c24:	b500      	push	{lr}
    9c26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c28:	f7f6 fff0 	bl	c0c <Sys_GetCoreID>
    9c2c:	4603      	mov	r3, r0
    9c2e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]--;
    9c30:	4a0d      	ldr	r2, [pc, #52]	; (9c68 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
    9c32:	9b01      	ldr	r3, [sp, #4]
    9c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c38:	1e5a      	subs	r2, r3, #1
    9c3a:	490b      	ldr	r1, [pc, #44]	; (9c68 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
    9c3c:	9b01      	ldr	r3, [sp, #4]
    9c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    9c42:	4a0a      	ldr	r2, [pc, #40]	; (9c6c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x48>)
    9c44:	9b01      	ldr	r3, [sp, #4]
    9c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c4a:	f003 0301 	and.w	r3, r3, #1
    9c4e:	2b00      	cmp	r3, #0
    9c50:	d106      	bne.n	9c60 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x3c>
    9c52:	4a05      	ldr	r2, [pc, #20]	; (9c68 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
    9c54:	9b01      	ldr	r3, [sp, #4]
    9c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c5a:	2b00      	cmp	r3, #0
    9c5c:	d100      	bne.n	9c60 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9c5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9c60:	bf00      	nop
    9c62:	b003      	add	sp, #12
    9c64:	f85d fb04 	ldr.w	pc, [sp], #4
    9c68:	1fff8e90 	.word	0x1fff8e90
    9c6c:	1fff8e8c 	.word	0x1fff8e8c

00009c70 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05(void)
{
    9c70:	b500      	push	{lr}
    9c72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c74:	f7f6 ffca 	bl	c0c <Sys_GetCoreID>
    9c78:	4603      	mov	r3, r0
    9c7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId])
    9c7c:	4a10      	ldr	r2, [pc, #64]	; (9cc0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
    9c7e:	9b01      	ldr	r3, [sp, #4]
    9c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c84:	2b00      	cmp	r3, #0
    9c86:	d10d      	bne.n	9ca4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9c88:	f7f6 fef0 	bl	a6c <Spi_schm_read_msr>
    9c8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9c8e:	9b00      	ldr	r3, [sp, #0]
    9c90:	f003 0301 	and.w	r3, r3, #1
    9c94:	2b00      	cmp	r3, #0
    9c96:	d100      	bne.n	9c9a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9c98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    9c9a:	490a      	ldr	r1, [pc, #40]	; (9cc4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x54>)
    9c9c:	9b01      	ldr	r3, [sp, #4]
    9c9e:	9a00      	ldr	r2, [sp, #0]
    9ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]++;
    9ca4:	4a06      	ldr	r2, [pc, #24]	; (9cc0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
    9ca6:	9b01      	ldr	r3, [sp, #4]
    9ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cac:	1c5a      	adds	r2, r3, #1
    9cae:	4904      	ldr	r1, [pc, #16]	; (9cc0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
    9cb0:	9b01      	ldr	r3, [sp, #4]
    9cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9cb6:	bf00      	nop
    9cb8:	b003      	add	sp, #12
    9cba:	f85d fb04 	ldr.w	pc, [sp], #4
    9cbe:	bf00      	nop
    9cc0:	1fff8e98 	.word	0x1fff8e98
    9cc4:	1fff8e94 	.word	0x1fff8e94

00009cc8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05(void)
{
    9cc8:	b500      	push	{lr}
    9cca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9ccc:	f7f6 ff9e 	bl	c0c <Sys_GetCoreID>
    9cd0:	4603      	mov	r3, r0
    9cd2:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]--;
    9cd4:	4a0d      	ldr	r2, [pc, #52]	; (9d0c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
    9cd6:	9b01      	ldr	r3, [sp, #4]
    9cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cdc:	1e5a      	subs	r2, r3, #1
    9cde:	490b      	ldr	r1, [pc, #44]	; (9d0c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
    9ce0:	9b01      	ldr	r3, [sp, #4]
    9ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    9ce6:	4a0a      	ldr	r2, [pc, #40]	; (9d10 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x48>)
    9ce8:	9b01      	ldr	r3, [sp, #4]
    9cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cee:	f003 0301 	and.w	r3, r3, #1
    9cf2:	2b00      	cmp	r3, #0
    9cf4:	d106      	bne.n	9d04 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x3c>
    9cf6:	4a05      	ldr	r2, [pc, #20]	; (9d0c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
    9cf8:	9b01      	ldr	r3, [sp, #4]
    9cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cfe:	2b00      	cmp	r3, #0
    9d00:	d100      	bne.n	9d04 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9d02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9d04:	bf00      	nop
    9d06:	b003      	add	sp, #12
    9d08:	f85d fb04 	ldr.w	pc, [sp], #4
    9d0c:	1fff8e98 	.word	0x1fff8e98
    9d10:	1fff8e94 	.word	0x1fff8e94

00009d14 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06(void)
{
    9d14:	b500      	push	{lr}
    9d16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d18:	f7f6 ff78 	bl	c0c <Sys_GetCoreID>
    9d1c:	4603      	mov	r3, r0
    9d1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId])
    9d20:	4a10      	ldr	r2, [pc, #64]	; (9d64 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
    9d22:	9b01      	ldr	r3, [sp, #4]
    9d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d28:	2b00      	cmp	r3, #0
    9d2a:	d10d      	bne.n	9d48 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9d2c:	f7f6 fe9e 	bl	a6c <Spi_schm_read_msr>
    9d30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9d32:	9b00      	ldr	r3, [sp, #0]
    9d34:	f003 0301 	and.w	r3, r3, #1
    9d38:	2b00      	cmp	r3, #0
    9d3a:	d100      	bne.n	9d3e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9d3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    9d3e:	490a      	ldr	r1, [pc, #40]	; (9d68 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x54>)
    9d40:	9b01      	ldr	r3, [sp, #4]
    9d42:	9a00      	ldr	r2, [sp, #0]
    9d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]++;
    9d48:	4a06      	ldr	r2, [pc, #24]	; (9d64 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
    9d4a:	9b01      	ldr	r3, [sp, #4]
    9d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d50:	1c5a      	adds	r2, r3, #1
    9d52:	4904      	ldr	r1, [pc, #16]	; (9d64 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
    9d54:	9b01      	ldr	r3, [sp, #4]
    9d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9d5a:	bf00      	nop
    9d5c:	b003      	add	sp, #12
    9d5e:	f85d fb04 	ldr.w	pc, [sp], #4
    9d62:	bf00      	nop
    9d64:	1fff8ea0 	.word	0x1fff8ea0
    9d68:	1fff8e9c 	.word	0x1fff8e9c

00009d6c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06(void)
{
    9d6c:	b500      	push	{lr}
    9d6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d70:	f7f6 ff4c 	bl	c0c <Sys_GetCoreID>
    9d74:	4603      	mov	r3, r0
    9d76:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]--;
    9d78:	4a0d      	ldr	r2, [pc, #52]	; (9db0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
    9d7a:	9b01      	ldr	r3, [sp, #4]
    9d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d80:	1e5a      	subs	r2, r3, #1
    9d82:	490b      	ldr	r1, [pc, #44]	; (9db0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
    9d84:	9b01      	ldr	r3, [sp, #4]
    9d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    9d8a:	4a0a      	ldr	r2, [pc, #40]	; (9db4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x48>)
    9d8c:	9b01      	ldr	r3, [sp, #4]
    9d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d92:	f003 0301 	and.w	r3, r3, #1
    9d96:	2b00      	cmp	r3, #0
    9d98:	d106      	bne.n	9da8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x3c>
    9d9a:	4a05      	ldr	r2, [pc, #20]	; (9db0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
    9d9c:	9b01      	ldr	r3, [sp, #4]
    9d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9da2:	2b00      	cmp	r3, #0
    9da4:	d100      	bne.n	9da8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9da6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9da8:	bf00      	nop
    9daa:	b003      	add	sp, #12
    9dac:	f85d fb04 	ldr.w	pc, [sp], #4
    9db0:	1fff8ea0 	.word	0x1fff8ea0
    9db4:	1fff8e9c 	.word	0x1fff8e9c

00009db8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07(void)
{
    9db8:	b500      	push	{lr}
    9dba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9dbc:	f7f6 ff26 	bl	c0c <Sys_GetCoreID>
    9dc0:	4603      	mov	r3, r0
    9dc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId])
    9dc4:	4a10      	ldr	r2, [pc, #64]	; (9e08 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
    9dc6:	9b01      	ldr	r3, [sp, #4]
    9dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dcc:	2b00      	cmp	r3, #0
    9dce:	d10d      	bne.n	9dec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9dd0:	f7f6 fe4c 	bl	a6c <Spi_schm_read_msr>
    9dd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9dd6:	9b00      	ldr	r3, [sp, #0]
    9dd8:	f003 0301 	and.w	r3, r3, #1
    9ddc:	2b00      	cmp	r3, #0
    9dde:	d100      	bne.n	9de2 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9de0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    9de2:	490a      	ldr	r1, [pc, #40]	; (9e0c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x54>)
    9de4:	9b01      	ldr	r3, [sp, #4]
    9de6:	9a00      	ldr	r2, [sp, #0]
    9de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]++;
    9dec:	4a06      	ldr	r2, [pc, #24]	; (9e08 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
    9dee:	9b01      	ldr	r3, [sp, #4]
    9df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9df4:	1c5a      	adds	r2, r3, #1
    9df6:	4904      	ldr	r1, [pc, #16]	; (9e08 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
    9df8:	9b01      	ldr	r3, [sp, #4]
    9dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9dfe:	bf00      	nop
    9e00:	b003      	add	sp, #12
    9e02:	f85d fb04 	ldr.w	pc, [sp], #4
    9e06:	bf00      	nop
    9e08:	1fff8ea8 	.word	0x1fff8ea8
    9e0c:	1fff8ea4 	.word	0x1fff8ea4

00009e10 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07(void)
{
    9e10:	b500      	push	{lr}
    9e12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e14:	f7f6 fefa 	bl	c0c <Sys_GetCoreID>
    9e18:	4603      	mov	r3, r0
    9e1a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]--;
    9e1c:	4a0d      	ldr	r2, [pc, #52]	; (9e54 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
    9e1e:	9b01      	ldr	r3, [sp, #4]
    9e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e24:	1e5a      	subs	r2, r3, #1
    9e26:	490b      	ldr	r1, [pc, #44]	; (9e54 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
    9e28:	9b01      	ldr	r3, [sp, #4]
    9e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    9e2e:	4a0a      	ldr	r2, [pc, #40]	; (9e58 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x48>)
    9e30:	9b01      	ldr	r3, [sp, #4]
    9e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e36:	f003 0301 	and.w	r3, r3, #1
    9e3a:	2b00      	cmp	r3, #0
    9e3c:	d106      	bne.n	9e4c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x3c>
    9e3e:	4a05      	ldr	r2, [pc, #20]	; (9e54 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
    9e40:	9b01      	ldr	r3, [sp, #4]
    9e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e46:	2b00      	cmp	r3, #0
    9e48:	d100      	bne.n	9e4c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9e4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9e4c:	bf00      	nop
    9e4e:	b003      	add	sp, #12
    9e50:	f85d fb04 	ldr.w	pc, [sp], #4
    9e54:	1fff8ea8 	.word	0x1fff8ea8
    9e58:	1fff8ea4 	.word	0x1fff8ea4

00009e5c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08(void)
{
    9e5c:	b500      	push	{lr}
    9e5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e60:	f7f6 fed4 	bl	c0c <Sys_GetCoreID>
    9e64:	4603      	mov	r3, r0
    9e66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId])
    9e68:	4a10      	ldr	r2, [pc, #64]	; (9eac <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
    9e6a:	9b01      	ldr	r3, [sp, #4]
    9e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e70:	2b00      	cmp	r3, #0
    9e72:	d10d      	bne.n	9e90 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9e74:	f7f6 fdfa 	bl	a6c <Spi_schm_read_msr>
    9e78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9e7a:	9b00      	ldr	r3, [sp, #0]
    9e7c:	f003 0301 	and.w	r3, r3, #1
    9e80:	2b00      	cmp	r3, #0
    9e82:	d100      	bne.n	9e86 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9e84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    9e86:	490a      	ldr	r1, [pc, #40]	; (9eb0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x54>)
    9e88:	9b01      	ldr	r3, [sp, #4]
    9e8a:	9a00      	ldr	r2, [sp, #0]
    9e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]++;
    9e90:	4a06      	ldr	r2, [pc, #24]	; (9eac <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
    9e92:	9b01      	ldr	r3, [sp, #4]
    9e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e98:	1c5a      	adds	r2, r3, #1
    9e9a:	4904      	ldr	r1, [pc, #16]	; (9eac <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
    9e9c:	9b01      	ldr	r3, [sp, #4]
    9e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9ea2:	bf00      	nop
    9ea4:	b003      	add	sp, #12
    9ea6:	f85d fb04 	ldr.w	pc, [sp], #4
    9eaa:	bf00      	nop
    9eac:	1fff8eb0 	.word	0x1fff8eb0
    9eb0:	1fff8eac 	.word	0x1fff8eac

00009eb4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08(void)
{
    9eb4:	b500      	push	{lr}
    9eb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9eb8:	f7f6 fea8 	bl	c0c <Sys_GetCoreID>
    9ebc:	4603      	mov	r3, r0
    9ebe:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]--;
    9ec0:	4a0d      	ldr	r2, [pc, #52]	; (9ef8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
    9ec2:	9b01      	ldr	r3, [sp, #4]
    9ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ec8:	1e5a      	subs	r2, r3, #1
    9eca:	490b      	ldr	r1, [pc, #44]	; (9ef8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
    9ecc:	9b01      	ldr	r3, [sp, #4]
    9ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    9ed2:	4a0a      	ldr	r2, [pc, #40]	; (9efc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x48>)
    9ed4:	9b01      	ldr	r3, [sp, #4]
    9ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9eda:	f003 0301 	and.w	r3, r3, #1
    9ede:	2b00      	cmp	r3, #0
    9ee0:	d106      	bne.n	9ef0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x3c>
    9ee2:	4a05      	ldr	r2, [pc, #20]	; (9ef8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
    9ee4:	9b01      	ldr	r3, [sp, #4]
    9ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9eea:	2b00      	cmp	r3, #0
    9eec:	d100      	bne.n	9ef0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9eee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9ef0:	bf00      	nop
    9ef2:	b003      	add	sp, #12
    9ef4:	f85d fb04 	ldr.w	pc, [sp], #4
    9ef8:	1fff8eb0 	.word	0x1fff8eb0
    9efc:	1fff8eac 	.word	0x1fff8eac

00009f00 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09(void)
{
    9f00:	b500      	push	{lr}
    9f02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f04:	f7f6 fe82 	bl	c0c <Sys_GetCoreID>
    9f08:	4603      	mov	r3, r0
    9f0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId])
    9f0c:	4a10      	ldr	r2, [pc, #64]	; (9f50 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
    9f0e:	9b01      	ldr	r3, [sp, #4]
    9f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f14:	2b00      	cmp	r3, #0
    9f16:	d10d      	bne.n	9f34 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9f18:	f7f6 fda8 	bl	a6c <Spi_schm_read_msr>
    9f1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9f1e:	9b00      	ldr	r3, [sp, #0]
    9f20:	f003 0301 	and.w	r3, r3, #1
    9f24:	2b00      	cmp	r3, #0
    9f26:	d100      	bne.n	9f2a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9f28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    9f2a:	490a      	ldr	r1, [pc, #40]	; (9f54 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x54>)
    9f2c:	9b01      	ldr	r3, [sp, #4]
    9f2e:	9a00      	ldr	r2, [sp, #0]
    9f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]++;
    9f34:	4a06      	ldr	r2, [pc, #24]	; (9f50 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
    9f36:	9b01      	ldr	r3, [sp, #4]
    9f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f3c:	1c5a      	adds	r2, r3, #1
    9f3e:	4904      	ldr	r1, [pc, #16]	; (9f50 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
    9f40:	9b01      	ldr	r3, [sp, #4]
    9f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9f46:	bf00      	nop
    9f48:	b003      	add	sp, #12
    9f4a:	f85d fb04 	ldr.w	pc, [sp], #4
    9f4e:	bf00      	nop
    9f50:	1fff8eb8 	.word	0x1fff8eb8
    9f54:	1fff8eb4 	.word	0x1fff8eb4

00009f58 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09(void)
{
    9f58:	b500      	push	{lr}
    9f5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f5c:	f7f6 fe56 	bl	c0c <Sys_GetCoreID>
    9f60:	4603      	mov	r3, r0
    9f62:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]--;
    9f64:	4a0d      	ldr	r2, [pc, #52]	; (9f9c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
    9f66:	9b01      	ldr	r3, [sp, #4]
    9f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f6c:	1e5a      	subs	r2, r3, #1
    9f6e:	490b      	ldr	r1, [pc, #44]	; (9f9c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
    9f70:	9b01      	ldr	r3, [sp, #4]
    9f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    9f76:	4a0a      	ldr	r2, [pc, #40]	; (9fa0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x48>)
    9f78:	9b01      	ldr	r3, [sp, #4]
    9f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f7e:	f003 0301 	and.w	r3, r3, #1
    9f82:	2b00      	cmp	r3, #0
    9f84:	d106      	bne.n	9f94 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x3c>
    9f86:	4a05      	ldr	r2, [pc, #20]	; (9f9c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
    9f88:	9b01      	ldr	r3, [sp, #4]
    9f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f8e:	2b00      	cmp	r3, #0
    9f90:	d100      	bne.n	9f94 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9f92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9f94:	bf00      	nop
    9f96:	b003      	add	sp, #12
    9f98:	f85d fb04 	ldr.w	pc, [sp], #4
    9f9c:	1fff8eb8 	.word	0x1fff8eb8
    9fa0:	1fff8eb4 	.word	0x1fff8eb4

00009fa4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10(void)
{
    9fa4:	b500      	push	{lr}
    9fa6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9fa8:	f7f6 fe30 	bl	c0c <Sys_GetCoreID>
    9fac:	4603      	mov	r3, r0
    9fae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId])
    9fb0:	4a10      	ldr	r2, [pc, #64]	; (9ff4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
    9fb2:	9b01      	ldr	r3, [sp, #4]
    9fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fb8:	2b00      	cmp	r3, #0
    9fba:	d10d      	bne.n	9fd8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9fbc:	f7f6 fd56 	bl	a6c <Spi_schm_read_msr>
    9fc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9fc2:	9b00      	ldr	r3, [sp, #0]
    9fc4:	f003 0301 	and.w	r3, r3, #1
    9fc8:	2b00      	cmp	r3, #0
    9fca:	d100      	bne.n	9fce <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9fcc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    9fce:	490a      	ldr	r1, [pc, #40]	; (9ff8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x54>)
    9fd0:	9b01      	ldr	r3, [sp, #4]
    9fd2:	9a00      	ldr	r2, [sp, #0]
    9fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]++;
    9fd8:	4a06      	ldr	r2, [pc, #24]	; (9ff4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
    9fda:	9b01      	ldr	r3, [sp, #4]
    9fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fe0:	1c5a      	adds	r2, r3, #1
    9fe2:	4904      	ldr	r1, [pc, #16]	; (9ff4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
    9fe4:	9b01      	ldr	r3, [sp, #4]
    9fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9fea:	bf00      	nop
    9fec:	b003      	add	sp, #12
    9fee:	f85d fb04 	ldr.w	pc, [sp], #4
    9ff2:	bf00      	nop
    9ff4:	1fff8ec0 	.word	0x1fff8ec0
    9ff8:	1fff8ebc 	.word	0x1fff8ebc

00009ffc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10(void)
{
    9ffc:	b500      	push	{lr}
    9ffe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a000:	f7f6 fe04 	bl	c0c <Sys_GetCoreID>
    a004:	4603      	mov	r3, r0
    a006:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]--;
    a008:	4a0d      	ldr	r2, [pc, #52]	; (a040 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
    a00a:	9b01      	ldr	r3, [sp, #4]
    a00c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a010:	1e5a      	subs	r2, r3, #1
    a012:	490b      	ldr	r1, [pc, #44]	; (a040 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
    a014:	9b01      	ldr	r3, [sp, #4]
    a016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    a01a:	4a0a      	ldr	r2, [pc, #40]	; (a044 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x48>)
    a01c:	9b01      	ldr	r3, [sp, #4]
    a01e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a022:	f003 0301 	and.w	r3, r3, #1
    a026:	2b00      	cmp	r3, #0
    a028:	d106      	bne.n	a038 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x3c>
    a02a:	4a05      	ldr	r2, [pc, #20]	; (a040 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
    a02c:	9b01      	ldr	r3, [sp, #4]
    a02e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a032:	2b00      	cmp	r3, #0
    a034:	d100      	bne.n	a038 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a036:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a038:	bf00      	nop
    a03a:	b003      	add	sp, #12
    a03c:	f85d fb04 	ldr.w	pc, [sp], #4
    a040:	1fff8ec0 	.word	0x1fff8ec0
    a044:	1fff8ebc 	.word	0x1fff8ebc

0000a048 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11(void)
{
    a048:	b500      	push	{lr}
    a04a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a04c:	f7f6 fdde 	bl	c0c <Sys_GetCoreID>
    a050:	4603      	mov	r3, r0
    a052:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId])
    a054:	4a10      	ldr	r2, [pc, #64]	; (a098 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
    a056:	9b01      	ldr	r3, [sp, #4]
    a058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a05c:	2b00      	cmp	r3, #0
    a05e:	d10d      	bne.n	a07c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a060:	f7f6 fd04 	bl	a6c <Spi_schm_read_msr>
    a064:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a066:	9b00      	ldr	r3, [sp, #0]
    a068:	f003 0301 	and.w	r3, r3, #1
    a06c:	2b00      	cmp	r3, #0
    a06e:	d100      	bne.n	a072 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a070:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    a072:	490a      	ldr	r1, [pc, #40]	; (a09c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x54>)
    a074:	9b01      	ldr	r3, [sp, #4]
    a076:	9a00      	ldr	r2, [sp, #0]
    a078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]++;
    a07c:	4a06      	ldr	r2, [pc, #24]	; (a098 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
    a07e:	9b01      	ldr	r3, [sp, #4]
    a080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a084:	1c5a      	adds	r2, r3, #1
    a086:	4904      	ldr	r1, [pc, #16]	; (a098 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
    a088:	9b01      	ldr	r3, [sp, #4]
    a08a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a08e:	bf00      	nop
    a090:	b003      	add	sp, #12
    a092:	f85d fb04 	ldr.w	pc, [sp], #4
    a096:	bf00      	nop
    a098:	1fff8ec8 	.word	0x1fff8ec8
    a09c:	1fff8ec4 	.word	0x1fff8ec4

0000a0a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11(void)
{
    a0a0:	b500      	push	{lr}
    a0a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a0a4:	f7f6 fdb2 	bl	c0c <Sys_GetCoreID>
    a0a8:	4603      	mov	r3, r0
    a0aa:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]--;
    a0ac:	4a0d      	ldr	r2, [pc, #52]	; (a0e4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
    a0ae:	9b01      	ldr	r3, [sp, #4]
    a0b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0b4:	1e5a      	subs	r2, r3, #1
    a0b6:	490b      	ldr	r1, [pc, #44]	; (a0e4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
    a0b8:	9b01      	ldr	r3, [sp, #4]
    a0ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    a0be:	4a0a      	ldr	r2, [pc, #40]	; (a0e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x48>)
    a0c0:	9b01      	ldr	r3, [sp, #4]
    a0c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0c6:	f003 0301 	and.w	r3, r3, #1
    a0ca:	2b00      	cmp	r3, #0
    a0cc:	d106      	bne.n	a0dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x3c>
    a0ce:	4a05      	ldr	r2, [pc, #20]	; (a0e4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
    a0d0:	9b01      	ldr	r3, [sp, #4]
    a0d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0d6:	2b00      	cmp	r3, #0
    a0d8:	d100      	bne.n	a0dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a0da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a0dc:	bf00      	nop
    a0de:	b003      	add	sp, #12
    a0e0:	f85d fb04 	ldr.w	pc, [sp], #4
    a0e4:	1fff8ec8 	.word	0x1fff8ec8
    a0e8:	1fff8ec4 	.word	0x1fff8ec4

0000a0ec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12(void)
{
    a0ec:	b500      	push	{lr}
    a0ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a0f0:	f7f6 fd8c 	bl	c0c <Sys_GetCoreID>
    a0f4:	4603      	mov	r3, r0
    a0f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId])
    a0f8:	4a10      	ldr	r2, [pc, #64]	; (a13c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
    a0fa:	9b01      	ldr	r3, [sp, #4]
    a0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a100:	2b00      	cmp	r3, #0
    a102:	d10d      	bne.n	a120 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a104:	f7f6 fcb2 	bl	a6c <Spi_schm_read_msr>
    a108:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a10a:	9b00      	ldr	r3, [sp, #0]
    a10c:	f003 0301 	and.w	r3, r3, #1
    a110:	2b00      	cmp	r3, #0
    a112:	d100      	bne.n	a116 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a114:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    a116:	490a      	ldr	r1, [pc, #40]	; (a140 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x54>)
    a118:	9b01      	ldr	r3, [sp, #4]
    a11a:	9a00      	ldr	r2, [sp, #0]
    a11c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]++;
    a120:	4a06      	ldr	r2, [pc, #24]	; (a13c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
    a122:	9b01      	ldr	r3, [sp, #4]
    a124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a128:	1c5a      	adds	r2, r3, #1
    a12a:	4904      	ldr	r1, [pc, #16]	; (a13c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
    a12c:	9b01      	ldr	r3, [sp, #4]
    a12e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a132:	bf00      	nop
    a134:	b003      	add	sp, #12
    a136:	f85d fb04 	ldr.w	pc, [sp], #4
    a13a:	bf00      	nop
    a13c:	1fff8ed0 	.word	0x1fff8ed0
    a140:	1fff8ecc 	.word	0x1fff8ecc

0000a144 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12(void)
{
    a144:	b500      	push	{lr}
    a146:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a148:	f7f6 fd60 	bl	c0c <Sys_GetCoreID>
    a14c:	4603      	mov	r3, r0
    a14e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]--;
    a150:	4a0d      	ldr	r2, [pc, #52]	; (a188 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
    a152:	9b01      	ldr	r3, [sp, #4]
    a154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a158:	1e5a      	subs	r2, r3, #1
    a15a:	490b      	ldr	r1, [pc, #44]	; (a188 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
    a15c:	9b01      	ldr	r3, [sp, #4]
    a15e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    a162:	4a0a      	ldr	r2, [pc, #40]	; (a18c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x48>)
    a164:	9b01      	ldr	r3, [sp, #4]
    a166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a16a:	f003 0301 	and.w	r3, r3, #1
    a16e:	2b00      	cmp	r3, #0
    a170:	d106      	bne.n	a180 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x3c>
    a172:	4a05      	ldr	r2, [pc, #20]	; (a188 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
    a174:	9b01      	ldr	r3, [sp, #4]
    a176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a17a:	2b00      	cmp	r3, #0
    a17c:	d100      	bne.n	a180 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a17e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a180:	bf00      	nop
    a182:	b003      	add	sp, #12
    a184:	f85d fb04 	ldr.w	pc, [sp], #4
    a188:	1fff8ed0 	.word	0x1fff8ed0
    a18c:	1fff8ecc 	.word	0x1fff8ecc

0000a190 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13(void)
{
    a190:	b500      	push	{lr}
    a192:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a194:	f7f6 fd3a 	bl	c0c <Sys_GetCoreID>
    a198:	4603      	mov	r3, r0
    a19a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId])
    a19c:	4a10      	ldr	r2, [pc, #64]	; (a1e0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
    a19e:	9b01      	ldr	r3, [sp, #4]
    a1a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1a4:	2b00      	cmp	r3, #0
    a1a6:	d10d      	bne.n	a1c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a1a8:	f7f6 fc60 	bl	a6c <Spi_schm_read_msr>
    a1ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a1ae:	9b00      	ldr	r3, [sp, #0]
    a1b0:	f003 0301 	and.w	r3, r3, #1
    a1b4:	2b00      	cmp	r3, #0
    a1b6:	d100      	bne.n	a1ba <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a1b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    a1ba:	490a      	ldr	r1, [pc, #40]	; (a1e4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x54>)
    a1bc:	9b01      	ldr	r3, [sp, #4]
    a1be:	9a00      	ldr	r2, [sp, #0]
    a1c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]++;
    a1c4:	4a06      	ldr	r2, [pc, #24]	; (a1e0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
    a1c6:	9b01      	ldr	r3, [sp, #4]
    a1c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1cc:	1c5a      	adds	r2, r3, #1
    a1ce:	4904      	ldr	r1, [pc, #16]	; (a1e0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
    a1d0:	9b01      	ldr	r3, [sp, #4]
    a1d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a1d6:	bf00      	nop
    a1d8:	b003      	add	sp, #12
    a1da:	f85d fb04 	ldr.w	pc, [sp], #4
    a1de:	bf00      	nop
    a1e0:	1fff8ed8 	.word	0x1fff8ed8
    a1e4:	1fff8ed4 	.word	0x1fff8ed4

0000a1e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13(void)
{
    a1e8:	b500      	push	{lr}
    a1ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a1ec:	f7f6 fd0e 	bl	c0c <Sys_GetCoreID>
    a1f0:	4603      	mov	r3, r0
    a1f2:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]--;
    a1f4:	4a0d      	ldr	r2, [pc, #52]	; (a22c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
    a1f6:	9b01      	ldr	r3, [sp, #4]
    a1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1fc:	1e5a      	subs	r2, r3, #1
    a1fe:	490b      	ldr	r1, [pc, #44]	; (a22c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
    a200:	9b01      	ldr	r3, [sp, #4]
    a202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    a206:	4a0a      	ldr	r2, [pc, #40]	; (a230 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x48>)
    a208:	9b01      	ldr	r3, [sp, #4]
    a20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a20e:	f003 0301 	and.w	r3, r3, #1
    a212:	2b00      	cmp	r3, #0
    a214:	d106      	bne.n	a224 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x3c>
    a216:	4a05      	ldr	r2, [pc, #20]	; (a22c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
    a218:	9b01      	ldr	r3, [sp, #4]
    a21a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a21e:	2b00      	cmp	r3, #0
    a220:	d100      	bne.n	a224 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a222:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a224:	bf00      	nop
    a226:	b003      	add	sp, #12
    a228:	f85d fb04 	ldr.w	pc, [sp], #4
    a22c:	1fff8ed8 	.word	0x1fff8ed8
    a230:	1fff8ed4 	.word	0x1fff8ed4

0000a234 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14(void)
{
    a234:	b500      	push	{lr}
    a236:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a238:	f7f6 fce8 	bl	c0c <Sys_GetCoreID>
    a23c:	4603      	mov	r3, r0
    a23e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId])
    a240:	4a10      	ldr	r2, [pc, #64]	; (a284 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
    a242:	9b01      	ldr	r3, [sp, #4]
    a244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a248:	2b00      	cmp	r3, #0
    a24a:	d10d      	bne.n	a268 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a24c:	f7f6 fc0e 	bl	a6c <Spi_schm_read_msr>
    a250:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a252:	9b00      	ldr	r3, [sp, #0]
    a254:	f003 0301 	and.w	r3, r3, #1
    a258:	2b00      	cmp	r3, #0
    a25a:	d100      	bne.n	a25e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a25c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    a25e:	490a      	ldr	r1, [pc, #40]	; (a288 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x54>)
    a260:	9b01      	ldr	r3, [sp, #4]
    a262:	9a00      	ldr	r2, [sp, #0]
    a264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]++;
    a268:	4a06      	ldr	r2, [pc, #24]	; (a284 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
    a26a:	9b01      	ldr	r3, [sp, #4]
    a26c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a270:	1c5a      	adds	r2, r3, #1
    a272:	4904      	ldr	r1, [pc, #16]	; (a284 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
    a274:	9b01      	ldr	r3, [sp, #4]
    a276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a27a:	bf00      	nop
    a27c:	b003      	add	sp, #12
    a27e:	f85d fb04 	ldr.w	pc, [sp], #4
    a282:	bf00      	nop
    a284:	1fff8ee0 	.word	0x1fff8ee0
    a288:	1fff8edc 	.word	0x1fff8edc

0000a28c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14(void)
{
    a28c:	b500      	push	{lr}
    a28e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a290:	f7f6 fcbc 	bl	c0c <Sys_GetCoreID>
    a294:	4603      	mov	r3, r0
    a296:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]--;
    a298:	4a0d      	ldr	r2, [pc, #52]	; (a2d0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
    a29a:	9b01      	ldr	r3, [sp, #4]
    a29c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2a0:	1e5a      	subs	r2, r3, #1
    a2a2:	490b      	ldr	r1, [pc, #44]	; (a2d0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
    a2a4:	9b01      	ldr	r3, [sp, #4]
    a2a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    a2aa:	4a0a      	ldr	r2, [pc, #40]	; (a2d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x48>)
    a2ac:	9b01      	ldr	r3, [sp, #4]
    a2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2b2:	f003 0301 	and.w	r3, r3, #1
    a2b6:	2b00      	cmp	r3, #0
    a2b8:	d106      	bne.n	a2c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x3c>
    a2ba:	4a05      	ldr	r2, [pc, #20]	; (a2d0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
    a2bc:	9b01      	ldr	r3, [sp, #4]
    a2be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2c2:	2b00      	cmp	r3, #0
    a2c4:	d100      	bne.n	a2c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a2c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a2c8:	bf00      	nop
    a2ca:	b003      	add	sp, #12
    a2cc:	f85d fb04 	ldr.w	pc, [sp], #4
    a2d0:	1fff8ee0 	.word	0x1fff8ee0
    a2d4:	1fff8edc 	.word	0x1fff8edc

0000a2d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15(void)
{
    a2d8:	b500      	push	{lr}
    a2da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a2dc:	f7f6 fc96 	bl	c0c <Sys_GetCoreID>
    a2e0:	4603      	mov	r3, r0
    a2e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId])
    a2e4:	4a10      	ldr	r2, [pc, #64]	; (a328 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
    a2e6:	9b01      	ldr	r3, [sp, #4]
    a2e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2ec:	2b00      	cmp	r3, #0
    a2ee:	d10d      	bne.n	a30c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a2f0:	f7f6 fbbc 	bl	a6c <Spi_schm_read_msr>
    a2f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a2f6:	9b00      	ldr	r3, [sp, #0]
    a2f8:	f003 0301 	and.w	r3, r3, #1
    a2fc:	2b00      	cmp	r3, #0
    a2fe:	d100      	bne.n	a302 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a300:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    a302:	490a      	ldr	r1, [pc, #40]	; (a32c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x54>)
    a304:	9b01      	ldr	r3, [sp, #4]
    a306:	9a00      	ldr	r2, [sp, #0]
    a308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]++;
    a30c:	4a06      	ldr	r2, [pc, #24]	; (a328 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
    a30e:	9b01      	ldr	r3, [sp, #4]
    a310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a314:	1c5a      	adds	r2, r3, #1
    a316:	4904      	ldr	r1, [pc, #16]	; (a328 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
    a318:	9b01      	ldr	r3, [sp, #4]
    a31a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a31e:	bf00      	nop
    a320:	b003      	add	sp, #12
    a322:	f85d fb04 	ldr.w	pc, [sp], #4
    a326:	bf00      	nop
    a328:	1fff8ee8 	.word	0x1fff8ee8
    a32c:	1fff8ee4 	.word	0x1fff8ee4

0000a330 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15(void)
{
    a330:	b500      	push	{lr}
    a332:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a334:	f7f6 fc6a 	bl	c0c <Sys_GetCoreID>
    a338:	4603      	mov	r3, r0
    a33a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]--;
    a33c:	4a0d      	ldr	r2, [pc, #52]	; (a374 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
    a33e:	9b01      	ldr	r3, [sp, #4]
    a340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a344:	1e5a      	subs	r2, r3, #1
    a346:	490b      	ldr	r1, [pc, #44]	; (a374 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
    a348:	9b01      	ldr	r3, [sp, #4]
    a34a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    a34e:	4a0a      	ldr	r2, [pc, #40]	; (a378 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x48>)
    a350:	9b01      	ldr	r3, [sp, #4]
    a352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a356:	f003 0301 	and.w	r3, r3, #1
    a35a:	2b00      	cmp	r3, #0
    a35c:	d106      	bne.n	a36c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x3c>
    a35e:	4a05      	ldr	r2, [pc, #20]	; (a374 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
    a360:	9b01      	ldr	r3, [sp, #4]
    a362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a366:	2b00      	cmp	r3, #0
    a368:	d100      	bne.n	a36c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a36a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a36c:	bf00      	nop
    a36e:	b003      	add	sp, #12
    a370:	f85d fb04 	ldr.w	pc, [sp], #4
    a374:	1fff8ee8 	.word	0x1fff8ee8
    a378:	1fff8ee4 	.word	0x1fff8ee4

0000a37c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16(void)
{
    a37c:	b500      	push	{lr}
    a37e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a380:	f7f6 fc44 	bl	c0c <Sys_GetCoreID>
    a384:	4603      	mov	r3, r0
    a386:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId])
    a388:	4a10      	ldr	r2, [pc, #64]	; (a3cc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
    a38a:	9b01      	ldr	r3, [sp, #4]
    a38c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a390:	2b00      	cmp	r3, #0
    a392:	d10d      	bne.n	a3b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a394:	f7f6 fb6a 	bl	a6c <Spi_schm_read_msr>
    a398:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a39a:	9b00      	ldr	r3, [sp, #0]
    a39c:	f003 0301 	and.w	r3, r3, #1
    a3a0:	2b00      	cmp	r3, #0
    a3a2:	d100      	bne.n	a3a6 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a3a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    a3a6:	490a      	ldr	r1, [pc, #40]	; (a3d0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x54>)
    a3a8:	9b01      	ldr	r3, [sp, #4]
    a3aa:	9a00      	ldr	r2, [sp, #0]
    a3ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]++;
    a3b0:	4a06      	ldr	r2, [pc, #24]	; (a3cc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
    a3b2:	9b01      	ldr	r3, [sp, #4]
    a3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3b8:	1c5a      	adds	r2, r3, #1
    a3ba:	4904      	ldr	r1, [pc, #16]	; (a3cc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
    a3bc:	9b01      	ldr	r3, [sp, #4]
    a3be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a3c2:	bf00      	nop
    a3c4:	b003      	add	sp, #12
    a3c6:	f85d fb04 	ldr.w	pc, [sp], #4
    a3ca:	bf00      	nop
    a3cc:	1fff8ef0 	.word	0x1fff8ef0
    a3d0:	1fff8eec 	.word	0x1fff8eec

0000a3d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16(void)
{
    a3d4:	b500      	push	{lr}
    a3d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a3d8:	f7f6 fc18 	bl	c0c <Sys_GetCoreID>
    a3dc:	4603      	mov	r3, r0
    a3de:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]--;
    a3e0:	4a0d      	ldr	r2, [pc, #52]	; (a418 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
    a3e2:	9b01      	ldr	r3, [sp, #4]
    a3e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3e8:	1e5a      	subs	r2, r3, #1
    a3ea:	490b      	ldr	r1, [pc, #44]	; (a418 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
    a3ec:	9b01      	ldr	r3, [sp, #4]
    a3ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    a3f2:	4a0a      	ldr	r2, [pc, #40]	; (a41c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x48>)
    a3f4:	9b01      	ldr	r3, [sp, #4]
    a3f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3fa:	f003 0301 	and.w	r3, r3, #1
    a3fe:	2b00      	cmp	r3, #0
    a400:	d106      	bne.n	a410 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x3c>
    a402:	4a05      	ldr	r2, [pc, #20]	; (a418 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
    a404:	9b01      	ldr	r3, [sp, #4]
    a406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a40a:	2b00      	cmp	r3, #0
    a40c:	d100      	bne.n	a410 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a40e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a410:	bf00      	nop
    a412:	b003      	add	sp, #12
    a414:	f85d fb04 	ldr.w	pc, [sp], #4
    a418:	1fff8ef0 	.word	0x1fff8ef0
    a41c:	1fff8eec 	.word	0x1fff8eec

0000a420 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17(void)
{
    a420:	b500      	push	{lr}
    a422:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a424:	f7f6 fbf2 	bl	c0c <Sys_GetCoreID>
    a428:	4603      	mov	r3, r0
    a42a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId])
    a42c:	4a10      	ldr	r2, [pc, #64]	; (a470 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
    a42e:	9b01      	ldr	r3, [sp, #4]
    a430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a434:	2b00      	cmp	r3, #0
    a436:	d10d      	bne.n	a454 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a438:	f7f6 fb18 	bl	a6c <Spi_schm_read_msr>
    a43c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a43e:	9b00      	ldr	r3, [sp, #0]
    a440:	f003 0301 	and.w	r3, r3, #1
    a444:	2b00      	cmp	r3, #0
    a446:	d100      	bne.n	a44a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a448:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    a44a:	490a      	ldr	r1, [pc, #40]	; (a474 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x54>)
    a44c:	9b01      	ldr	r3, [sp, #4]
    a44e:	9a00      	ldr	r2, [sp, #0]
    a450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]++;
    a454:	4a06      	ldr	r2, [pc, #24]	; (a470 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
    a456:	9b01      	ldr	r3, [sp, #4]
    a458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a45c:	1c5a      	adds	r2, r3, #1
    a45e:	4904      	ldr	r1, [pc, #16]	; (a470 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
    a460:	9b01      	ldr	r3, [sp, #4]
    a462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a466:	bf00      	nop
    a468:	b003      	add	sp, #12
    a46a:	f85d fb04 	ldr.w	pc, [sp], #4
    a46e:	bf00      	nop
    a470:	1fff8ef8 	.word	0x1fff8ef8
    a474:	1fff8ef4 	.word	0x1fff8ef4

0000a478 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17(void)
{
    a478:	b500      	push	{lr}
    a47a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a47c:	f7f6 fbc6 	bl	c0c <Sys_GetCoreID>
    a480:	4603      	mov	r3, r0
    a482:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]--;
    a484:	4a0d      	ldr	r2, [pc, #52]	; (a4bc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
    a486:	9b01      	ldr	r3, [sp, #4]
    a488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a48c:	1e5a      	subs	r2, r3, #1
    a48e:	490b      	ldr	r1, [pc, #44]	; (a4bc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
    a490:	9b01      	ldr	r3, [sp, #4]
    a492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    a496:	4a0a      	ldr	r2, [pc, #40]	; (a4c0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x48>)
    a498:	9b01      	ldr	r3, [sp, #4]
    a49a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a49e:	f003 0301 	and.w	r3, r3, #1
    a4a2:	2b00      	cmp	r3, #0
    a4a4:	d106      	bne.n	a4b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x3c>
    a4a6:	4a05      	ldr	r2, [pc, #20]	; (a4bc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
    a4a8:	9b01      	ldr	r3, [sp, #4]
    a4aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4ae:	2b00      	cmp	r3, #0
    a4b0:	d100      	bne.n	a4b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a4b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a4b4:	bf00      	nop
    a4b6:	b003      	add	sp, #12
    a4b8:	f85d fb04 	ldr.w	pc, [sp], #4
    a4bc:	1fff8ef8 	.word	0x1fff8ef8
    a4c0:	1fff8ef4 	.word	0x1fff8ef4

0000a4c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18(void)
{
    a4c4:	b500      	push	{lr}
    a4c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a4c8:	f7f6 fba0 	bl	c0c <Sys_GetCoreID>
    a4cc:	4603      	mov	r3, r0
    a4ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId])
    a4d0:	4a10      	ldr	r2, [pc, #64]	; (a514 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
    a4d2:	9b01      	ldr	r3, [sp, #4]
    a4d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4d8:	2b00      	cmp	r3, #0
    a4da:	d10d      	bne.n	a4f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a4dc:	f7f6 fac6 	bl	a6c <Spi_schm_read_msr>
    a4e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a4e2:	9b00      	ldr	r3, [sp, #0]
    a4e4:	f003 0301 	and.w	r3, r3, #1
    a4e8:	2b00      	cmp	r3, #0
    a4ea:	d100      	bne.n	a4ee <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a4ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    a4ee:	490a      	ldr	r1, [pc, #40]	; (a518 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x54>)
    a4f0:	9b01      	ldr	r3, [sp, #4]
    a4f2:	9a00      	ldr	r2, [sp, #0]
    a4f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]++;
    a4f8:	4a06      	ldr	r2, [pc, #24]	; (a514 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
    a4fa:	9b01      	ldr	r3, [sp, #4]
    a4fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a500:	1c5a      	adds	r2, r3, #1
    a502:	4904      	ldr	r1, [pc, #16]	; (a514 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
    a504:	9b01      	ldr	r3, [sp, #4]
    a506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a50a:	bf00      	nop
    a50c:	b003      	add	sp, #12
    a50e:	f85d fb04 	ldr.w	pc, [sp], #4
    a512:	bf00      	nop
    a514:	1fff8f00 	.word	0x1fff8f00
    a518:	1fff8efc 	.word	0x1fff8efc

0000a51c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18(void)
{
    a51c:	b500      	push	{lr}
    a51e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a520:	f7f6 fb74 	bl	c0c <Sys_GetCoreID>
    a524:	4603      	mov	r3, r0
    a526:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]--;
    a528:	4a0d      	ldr	r2, [pc, #52]	; (a560 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
    a52a:	9b01      	ldr	r3, [sp, #4]
    a52c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a530:	1e5a      	subs	r2, r3, #1
    a532:	490b      	ldr	r1, [pc, #44]	; (a560 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
    a534:	9b01      	ldr	r3, [sp, #4]
    a536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    a53a:	4a0a      	ldr	r2, [pc, #40]	; (a564 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x48>)
    a53c:	9b01      	ldr	r3, [sp, #4]
    a53e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a542:	f003 0301 	and.w	r3, r3, #1
    a546:	2b00      	cmp	r3, #0
    a548:	d106      	bne.n	a558 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x3c>
    a54a:	4a05      	ldr	r2, [pc, #20]	; (a560 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
    a54c:	9b01      	ldr	r3, [sp, #4]
    a54e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a552:	2b00      	cmp	r3, #0
    a554:	d100      	bne.n	a558 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a556:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a558:	bf00      	nop
    a55a:	b003      	add	sp, #12
    a55c:	f85d fb04 	ldr.w	pc, [sp], #4
    a560:	1fff8f00 	.word	0x1fff8f00
    a564:	1fff8efc 	.word	0x1fff8efc

0000a568 <Fls_ACEraseRomEnd>:
    a568:	61746144 	.word	0x61746144
    a56c:	61657220 	.word	0x61657220
    a570:	72662064 	.word	0x72662064
    a574:	65206d6f 	.word	0x65206d6f
    a578:	6f727065 	.word	0x6f727065
    a57c:	3a31206d 	.word	0x3a31206d
    a580:	25783020 	.word	0x25783020
    a584:	00000a58 	.word	0x00000a58
    a588:	61746144 	.word	0x61746144
    a58c:	61657220 	.word	0x61657220
    a590:	72662064 	.word	0x72662064
    a594:	65206d6f 	.word	0x65206d6f
    a598:	6f727065 	.word	0x6f727065
    a59c:	3a32206d 	.word	0x3a32206d
    a5a0:	25783020 	.word	0x25783020
    a5a4:	00000a58 	.word	0x00000a58
    a5a8:	6d726554 	.word	0x6d726554
    a5ac:	6c616e69 	.word	0x6c616e69
    a5b0:	00000000 	.word	0x00000000
    a5b4:	4c554e28 	.word	0x4c554e28
    a5b8:	0000294c 	.word	0x0000294c

0000a5bc <Clock_Ip_au8DividerCallbackIndex>:
    a5bc:	0e0d0c00 06030201 0a070409 000b0805     ................

0000a5cc <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000a5dc <Clock_Ip_au8XoscCallbackIndex>:
    a5dc:	00000100 00000000 00000000 00000000     ................

0000a5ec <Clock_Ip_au8IrcoscCallbackIndex>:
    a5ec:	03020100 00000004 00000000 00000000     ................

0000a5fc <Clock_Ip_au8GateCallbackIndex>:
    a5fc:	06010200 01040301 00000500 00000000     ................

0000a60c <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000a61c <Clock_Ip_au8PllCallbackIndex>:
    a61c:	00000100 00000000 00000000 00000000     ................

0000a62c <Clock_Ip_au8SelectorCallbackIndex>:
    a62c:	0a090800 03020109 07060504 00000000     ................

0000a63c <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000a64c <Clock_Ip_au8CmuCallbackIndex>:
	...

0000a65c <Clock_Ip_au8ClockFeatures>:
	...
    a66c:	01000000 00000000 00000000 00000002     ................
    a67c:	00000000 00000300 00000000 00040000     ................
    a68c:	00000000 05000000 00000000 00000000     ................
    a69c:	00000006 00000000 00000100 00000000     ................
    a6ac:	00010000 00000000 04000000 00000000     ................
    a6bc:	00000000 00000005 00000001 00000401     ................
    a6cc:	00000200 00050100 00030000 04020000     ................
    a6dc:	04000000 02000000 00000005 00000005     ................
    a6ec:	00000403 00000600 00050300 00070000     ................
    a6fc:	05000000 00000000 00000000 00000006     ................
	...
    a73c:	00050000 00000000 06000000 00000100     ................
    a74c:	00000000 00030007 00000000 00000000     ................
    a75c:	00000000 00060000 00000000 07000000     ................
    a76c:	00000100 00000000 00030008 00000000     ................
	...
    a784:	00090000 00000000 0a000000 00000100     ................
    a794:	00000000 0003000b 00000000 00000000     ................
    a7a4:	00000000 000c0000 00000000 0d000000     ................
    a7b4:	00000100 00000000 0003000e 00000000     ................
    a7c4:	00000800 00000000 00090000 00000000     ................
    a7d4:	0a000000 00000000 00000000 0000000b     ................
    a7e4:	00000000 00000b01 00000000 000b0200     ................
    a7f4:	00000000 0b030000 00000000 00000000     ................
	...
    a80c:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    a81c:	01000000 00000000 00000000 00000007     ................
    a82c:	00007300 00000700 00320000 00090000     .s........2.....
    a83c:	02000000 07000000 00000000 00000021     ............!...
    a84c:	00000009 00000400 00000900 00030000     ................
    a85c:	00070000 61000000 07000000 00000000     .......a........
    a86c:	00000024 00000007 00002500 00000700     $........%......
    a87c:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    a88c:	00000000 00000020 38000004 00003800     .... ......8.8..
    a89c:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    a8ac:	04000000 00260000 00000026 66000004     ......&.&......f
    a8bc:	00006600 00000400 00370037 00040000     .f......7.7.....
    a8cc:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    a8dc:	2e000004 00002e00 00000200 00404040     ............@@@.
    a8ec:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    a8fc:	0000006b 6c000004 00006c00 00000900     k......l.l......
    a90c:	00010000 00090000 00000000 07000000     ................
    a91c:	00000000 00000036 00000007 00003100     ....6........1..
    a92c:	00000700 00490000 00070000 4a000000     ......I........J
    a93c:	07000000 00000000 0000004b 00000007     ........K.......
    a94c:	00004c00 00000700 004d0000 00070000     .L........M.....
    a95c:	3d000000 03000000 00000000 00000000     ...=............

0000a96c <Clock_Ip_au16SelectorEntryHardwareValue>:
    a96c:	01010a03 01010001 04040002 02000603     ................
    a97c:	00010810 02020100 00000000 00000007     ................
    a98c:	00000009 00000000 00000c0e 00000000     ................
	...

0000a9c4 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    a9c4:	00020000 00000300 00000601 00000000     ................
	...

0000a9f4 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    a9f4:	00000700 00000000 02020000 01010303     ................
    aa04:	03020606 00000000 00000000 00000000     ................
	...

0000aa24 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    aa24:	00000001 00000000 02020000 01010303     ................
    aa34:	03020606 00000000 00000000 00000000     ................
	...

0000aa54 <Clock_Ip_au8DividerValueHardwareValue>:
    aa54:	00020100 00000003 00000004 00000000     ................
    aa64:	00000005 00000000 00000000 00000000     ................
    aa74:	00000006 00000000 00000000 00000000     ................
	...
    aa94:	00000007                                ....

0000aa98 <Clock_Ip_apxScgPeriphAsyncDivs>:
    aa98:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

0000aaa8 <Clock_Ip_aeSourceTypeClockName>:
    aaa8:	00000000 00000001 00000001 00000001     ................
    aab8:	00000001 00000001 00000001 00000001     ................
    aac8:	00000002 00000003 00000001 00000001     ................
    aad8:	00000001 00000001 00000002 00000002     ................
    aae8:	00000003 00000003 00000001 00000001     ................
    aaf8:	00000004 00000004 00000004 00000004     ................
	...

0000ab64 <Clock_Ip_aeHwPllName>:
    ab64:	00000009                                ....

0000ab68 <Clock_Ip_aeHwDfsName>:
    ab68:	00000057                                W...

0000ab6c <Clock_Ip_axDividerCallbacks>:
    ab6c:	00002c4d 00002c57 00002c71 00002c8b     M,..W,..q,...,..
    ab7c:	00002ca5 00002cbf 00002cd9 00002cf3     .,...,...,...,..
    ab8c:	00002d0d 00002d27 00002d41 00002d5b     .-..'-..A-..[-..
    ab9c:	00002d75 00002d8f 00002da9              u-...-...-..

0000aba8 <Clock_Ip_axDividerTriggerCallbacks>:
    aba8:	0000311d 0000311d                       .1...1..

0000abb0 <Clock_Ip_axExtOscCallbacks>:
    abb0:	00003129 00003129 00003129 00003133     )1..)1..)1..31..
    abc0:	00003129 0000313d 00003157 00003171     )1..=1..W1..q1..
    abd0:	000031f5 00003209                       .1...2..

0000abd8 <Clock_Ip_axFracDivCallbacks>:
    abd8:	000033c9 000033c9 000033d3              .3...3...3..

0000abe4 <Clock_Ip_axGateCallbacks>:
    abe4:	000033ed 000033f7 000034f7 00003511     .3...3...4...5..
    abf4:	000034a7 000034c1 00003457 00003471     .4...4..W4..q4..
    ac04:	00003407 00003421 00003547 00003561     .4..!4..G5..a5..
    ac14:	00003597 000035b1                       .5...5..

0000ac1c <Clock_Ip_axIntOscCallbacks>:
    ac1c:	0000375d 0000375d 00003767 00003771     ]7..]7..g7..q7..
    ac2c:	0000378b 000037a5 000037b9 000037d3     .7...7...7...7..
    ac3c:	000037ed 00003801 0000381b 00003835     .7...8...8..58..
    ac4c:	000038dd 000038f7 00003911              .8...8...9..

0000ac58 <Clock_Ip_axCmuCallbacks>:
    ac58:	00003ead 00003eb7 00003ec3 00003ead     .>...>...>...>..

0000ac68 <Clock_Ip_axPllCallbacks>:
    ac68:	00003ecd 00003ecd 00003ed7 00003ecd     .>...>...>...>..
    ac78:	00003ee3 00003eed 00003f07 00003f21     .>...>...?..!?..
    ac88:	00003fc5 00003fb1                       .?...?..

0000ac90 <Clock_Ip_axPcfsCallbacks>:
    ac90:	00004121                                !A..

0000ac94 <Clock_Ip_axSelectorCallbacks>:
    ac94:	0000412d 0000412d 00004137 00004151     -A..-A..7A..QA..
    aca4:	0000412d 0000416b 00004185 0000419f     -A..kA...A...A..
    acb4:	000041b9 000041d3 000041ed 00004207     .A...A...A...B..
    acc4:	00004221 0000423b 00004255 0000426f     !B..;B..UB..oB..
    acd4:	00004289 000042a3 000042bd 000042d7     .B...B...B...B..
    ace4:	000042f1 0000430b                       .B...C..

0000acec <ClockSource>:
    acec:	00000000 00000008 00000002 00000005     ................
	...
    ad04:	00000009                                ....

0000ad08 <ResetReasonArray>:
    ad08:	00000000 00000001 00000002 00000003     ................
    ad18:	00000004 00000005 00000006 00000007     ................
    ad28:	00000008 00000009 0000000a 0000000b     ................
    ad38:	0000000c 0000000d 0000000e              ............

0000ad44 <Port_au32PortCiPortBaseAddr>:
    ad44:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    ad54:	4004d000                                ...@

0000ad58 <Port_au32PortCiGpioBaseAddr>:
    ad58:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    ad68:	400ff100                                ...@

0000ad6c <Lpspi_Ip_apxBases>:
    ad6c:	4002c000 4002d000 4002e000              ...@...@...@

0000ad78 <Mcu_aClockConfigPB>:
	...
    ad80:	1c000101 04000010 01000029 00000005     ........).......
    ad90:	00000001 00000000 00000057 00000000     ........W.......
    ada0:	00000000 00000008 007a1200 00000001     ..........z.....
    adb0:	00000001 00000000 00000057 00000000     ........W.......
    adc0:	00000057 00000000 00000000 00000000     W...............
	...
    ade0:	00000019 00000005 0000001a 00000002     ................
    adf0:	0000001b 00000005 0000002a 00000005     ........*.......
    ae00:	00000028 0000000e 00000029 00000001     (.......).......
    ae10:	00000056 0000001c 00000032 0000002a     V.......2...*...
    ae20:	0000002b 00000014 0000002c 00000014     +.......,.......
    ae30:	0000002d 00000014 0000002e 00000014     -...............
    ae40:	0000003f 00000000 00000040 00000000     ?.......@.......
    ae50:	00000041 00000000 00000042 00000000     A.......B.......
    ae60:	00000031 00000000 00000045 0000000d     1.......E.......
    ae70:	00000046 00000000 00000047 00000000     F.......G.......
    ae80:	00000044 00000000 00000030 00000000     D.......0.......
    ae90:	0000003d 00000000 00000043 00000000     =.......C.......
    aea0:	00000049 00000000 0000004a 00000000     I.......J.......
    aeb0:	0000004b 00000000 00000048 00000000     K.......H.......
    aec0:	0000000c 00000001 00000000 0000000d     ................
    aed0:	00000002 00000000 0000000e 00000001     ................
    aee0:	00000000 0000000f 00000001 00000000     ................
    aef0:	0000001d 00000001 00000000 0000001e     ................
    af00:	00000008 00000000 0000001f 00000001     ................
    af10:	00000000 00000021 00000001 00000000     ....!...........
    af20:	00000022 00000002 00000000 00000023     "...........#...
    af30:	00000001 00000000 00000025 00000003     ........%.......
    af40:	00000000 00000026 00000004 00000000     ....&...........
    af50:	00000027 00000002 00000000 00000032     '...........2...
    af60:	00000001 00000000 00000048 00000001     ........H.......
    af70:	00000001 00000056 00000001 00000001     ....V...........
    af80:	00000057 00000000 00000000 00000057     W...........W...
	...
    af98:	00000057 00000000 00000000 00000057     W...........W...
	...
    afb0:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    afcc:	00000014 00007d00 00000015 00007d00     .....}.......}..
    afdc:	00000016 00007d00 00000017 00008000     .....}..........
    afec:	00000012 00000001 00000013 00000001     ................
    affc:	00000030 00000000 00000031 00000000     0.......1.......
    b00c:	00000032 00000000 00000033 00000000     2.......3.......
    b01c:	00000034 00000000 00000035 00000001     4.......5.......
    b02c:	00000036 00000000 00000037 00000001     6.......7.......
    b03c:	00000038 00000001 00000039 00000000     8.......9.......
    b04c:	0000003a 00000000 0000003b 00000000     :.......;.......
    b05c:	0000003c 00000000 0000003d 00000000     <.......=.......
    b06c:	0000003e 00000000 0000003f 00000000     >.......?.......
    b07c:	00000040 00000000 00000041 00000000     @.......A.......
    b08c:	00000042 00000000 00000043 00000000     B.......C.......
    b09c:	00000044 00000000 00000045 00000001     D.......E.......
    b0ac:	00000046 00000000 00000047 00000000     F.......G.......
    b0bc:	00000048 00000000 00000049 00000000     H.......I.......
    b0cc:	0000004a 00000000 0000004b 00000000     J.......K.......
    b0dc:	0000004c 00000001 0000004d 00000001     L.......M.......
    b0ec:	0000004e 00000000 0000004f 00000000     N.......O.......
    b0fc:	00000050 00000001 00000051 00000001     P.......Q.......
    b10c:	00000052 00000001 00000053 00000001     R.......S.......
    b11c:	00000054 00000001 00000055 00000000     T.......U.......
    b12c:	00000056 00000001 00000057 00000000     V.......W.......
    b13c:	00000000 00000057 00000000 00000057     ....W.......W...
	...

0000b170 <Lpspi_Ip_DeviceAttributes_SpiExternalDevice_0>:
    b170:	00000000 171716ee 08200000 1fff8b24     .......... .$...

0000b180 <Lpspi_Ip_DeviceAttributes_SpiExternalDevice_1>:
    b180:	00000000 171716ee 09200000 1fff8b2c     .......... .,...

0000b190 <Lpspi_Ip_PhyUnitConfig_SpiPhyUnit_0>:
	...
    b198:	03000001 00000000 00000000              ............

0000b1a4 <Mcu_Config>:
    b1a4:	0000005a 00000000 00000001 00000001     Z...............
    b1b4:	0000b400 0000ad78 0000b40c              ....x.......

0000b1c0 <OsIf_xPredefinedConfig>:
    b1c0:	00000000 02dc6c00                       .....l..

0000b1c8 <OsIf_apxPredefinedConfig>:
    b1c8:	0000b1c0                                ....

0000b1cc <Platform_uConfiguration>:
    b1cc:	0000b1d4                                ....

0000b1d0 <Platform_Config>:
    b1d0:	0000b1cc                                ....

0000b1d4 <ipwConfig>:
	...

0000b1dc <g_pin_mux_InitConfigArr>:
    b1dc:	4004a000 00000000 00000004 00000002     ...@............
    b1ec:	00000003 00000002 00000000 00000000     ................
	...
    b204:	4004a000 00000000 00000003 00000002     ...@............
    b214:	00000003 00000001 00000000 00000000     ................
	...
    b22c:	4004a000 00000000 00000002 00000002     ...@............
    b23c:	00000003 00000001 00000000 00000000     ................
	...
    b254:	4004a000 00000000 00000005 00000002     ...@............
    b264:	00000003 00000001 00000000 00000000     ................
	...
    b27c:	4004a000 00000000 00000000 00000002     ...@............
    b28c:	00000003 00000001 00000000 00000000     ................
	...

0000b2a4 <au8Port_PartitionList>:
    b2a4:	00000001                                ....

0000b2a8 <au32Port_PinToPartitionMap>:
    b2a8:	00000001 00000001 00000001 00000001     ................
    b2b8:	00000001                                ....

0000b2bc <Port_au16NoUnUsedPadsArrayDefault>:
    b2bc:	00010000 00030002 00070006 00090008     ................
    b2cc:	000c000b 000e000d 0010000f 00210011     ..............!.
    b2dc:	00270026 00290028 002b002a 002d002c     &.'.(.).*.+.,.-.
    b2ec:	002f002e 00310030 00410040 00430042     ../.0.1.@.A.B.C.
    b2fc:	00470046 00490048 004b004a 004d004c     F.G.H.I.J.K.L.M.
    b30c:	004f004e 00510050 00610060 00630062     N.O.P.Q.`.a.b.c.
    b31c:	00650064 00670066 00690068 006b006a     d.e.f.g.h.i.j.k.
    b32c:	006d006c 006f006e 00710070 00810080     l.m.n.o.p.q.....
    b33c:	00830082 00850084 00870086 00890088     ................
    b34c:	008b008a 008d008c 008f008e 00000090     ................

0000b35c <Port_UnUsedPin>:
    b35c:	00000100 00000001 00000000              ............

0000b368 <Port_aPinConfigDefault>:
    b368:	00000024 00000300 00000000 00000002     $...............
    b378:	00010000 00000023 00000300 00000000     ....#...........
    b388:	00000001 00010000 00000022 00000300     ........".......
    b398:	00000000 00000001 00010000 00000025     ............%...
    b3a8:	00000300 00000000 00000001 00010000     ................
    b3b8:	00000020 00000300 00000000 00000001      ...............
    b3c8:	00010000                                ....

0000b3cc <Port_Config>:
    b3cc:	004f0005 0000b2bc 0000b35c 0000b368     ..O.....\...h...
	...
    b3e4:	0000b2a8 0000b2a4 0000b1dc              ............

0000b3f0 <Power_Ip_RCM_ConfigPB>:
	...

0000b3f8 <Power_Ip_PMC_ConfigPB>:
    b3f8:	00000000                                ....

0000b3fc <Power_Ip_SMC_ConfigPB>:
    b3fc:	00000000                                ....

0000b400 <Power_Ip_aModeConfigPB>:
	...

0000b40c <Power_Ip_HwIPsConfigPB>:
    b40c:	0000b3f0 0000b3f8 0000b3fc              ............

0000b418 <Spi_ExternalDeviceConfig_SpiExternalDevice_0>:
	...
    b420:	0000b170 00000000                       p.......

0000b428 <Spi_ExternalDeviceConfig_SpiExternalDevice_1>:
	...
    b430:	0000b180 00000000                       ........

0000b438 <Spi_aExternalDeviceConfigList>:
    b438:	0000b418 0000b428                       ....(...

0000b440 <Spi_HwUnitConfig_SpiPhyUnit_0>:
	...
    b44c:	0000b190 00000001                       ........

0000b454 <Spi_aHwUnitConfigList>:
    b454:	0000b440                                @...

0000b458 <Spi_ChannelConfig_SpiChannel_0>:
    b458:	00000001 00000008 00000001 00000004     ................
    b468:	1fff8f08 00000000 1fff8d60              ........`...

0000b474 <Spi_ChannelConfig_SpiChannel_1>:
    b474:	00000001 00000008 00000001 00000004     ................
    b484:	1fff8f14 00000000 1fff8d64              ........d...

0000b490 <Spi_aChannelConfigList>:
    b490:	0000b458 0000b474                       X...t...

0000b498 <Spi_SpiJob_0_ChannelAssignment>:
    b498:	00000000                                ....

0000b49c <Spi_SpiJob_1_ChannelAssignment>:
    b49c:	00000001                                ....

0000b4a0 <Spi_JobConfig_SpiJob_0>:
    b4a0:	00000001 0000b498 00000000 00000000     ................
	...
    b4b8:	1fff8d58 00000000 0000b438              X.......8...

0000b4c4 <Spi_JobConfig_SpiJob_1>:
    b4c4:	00000001 0000b49c 00000000 00000000     ................
	...
    b4dc:	1fff8d5c 00000100 0000b43c              \.......<...

0000b4e8 <Spi_aJobConfigList>:
    b4e8:	0000b4a0 0000b4c4                       ........

0000b4f0 <Spi_SpiSequence_0_JobAssignment>:
    b4f0:	00000000                                ....

0000b4f4 <Spi_SpiSequence_1_JobAssignment>:
    b4f4:	00000001                                ....

0000b4f8 <Spi_SequenceConfig_SpiSequence_0>:
    b4f8:	00000001 00000000 0000b4f0 00000000     ................
    b508:	00000000                                ....

0000b50c <Spi_SequenceConfig_SpiSequence_1>:
    b50c:	00000001 00000000 0000b4f4 00000000     ................
    b51c:	00000000                                ....

0000b520 <Spi_aSequenceConfigList>:
    b520:	0000b4f8 0000b50c                       ........

0000b528 <Spi_Config>:
    b528:	00010002 00010001 00000000 0000b490     ................
    b538:	0000b4e8 0000b520 0000b438 0000b454     .... ...8...T...

0000b548 <_aInitStr.0>:
    b548:	00000000 54540000 45522052 53454747     ......TTR REGGES
    b558:	00000000                                ....

0000b55c <_aV2C.0>:
    b55c:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0000b56c <__INIT_TABLE>:
    b56c:	00000002 	.word	0x00000002
    b570:	1fff8b10 	.word	0x1fff8b10
    b574:	0000b594 	.word	0x0000b594
    b578:	0000b5b8 	.word	0x0000b5b8
    b57c:	1fff8800 	.word	0x1fff8800
    b580:	00000000 	.word	0x00000000
    b584:	00000310 	.word	0x00000310

0000b588 <__ZERO_TABLE>:
    b588:	00000001 	.word	0x00000001
    b58c:	1fff8b40 	.word	0x1fff8b40
    b590:	1fff93e0 	.word	0x1fff93e0
