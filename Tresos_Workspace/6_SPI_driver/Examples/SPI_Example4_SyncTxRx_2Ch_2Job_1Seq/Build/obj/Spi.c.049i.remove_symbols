
Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07/30 (SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07) @0dc57d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Spi_SyncTransmit/18 
  Calls: 
SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07/29 (SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07) @0dc57ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Spi_SyncTransmit/18 
  Calls: 
SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06/28 (SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06) @0dc57e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Spi_SyncTransmit/18 Spi_SyncTransmit/18 
  Calls: 
SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06/27 (SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06) @0dc57c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Spi_SyncTransmit/18 
  Calls: 
SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05/26 (SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05) @0dc57700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Spi_SetupEB/14 
  Calls: 
SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05/25 (SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05) @0dc57620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Spi_SetupEB/14 
  Calls: 
Spi_Ipw_DeInit/24 (Spi_Ipw_DeInit) @0dc57460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Spi_DeInit/13 
  Calls: 
Spi_Ipw_Init/23 (Spi_Ipw_Init) @0dc570e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Spi_Init/12 
  Calls: 
Spi_Ipw_SyncTransmit/22 (Spi_Ipw_SyncTransmit) @0dec4e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Spi_SyncJobsTranfer/8 
  Calls: 
Spi_MainFunction_Handling/21 (Spi_MainFunction_Handling) @0dec49a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Spi_Cancel/20 (Spi_Cancel) @0dec4700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Spi_axSpiSequenceState/2 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Spi_GetHWUnitStatus/19 (Spi_GetHWUnitStatus) @0dec4460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Spi_axSpiHwUnitQueueArray/0 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Spi_SyncTransmit/18 (Spi_SyncTransmit) @0dec41c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Spi_apxSpiConfigPtr/1 (read) Spi_au32SpiBusySyncHWUnitsStatus/6 (read) Spi_au32SpiSeqUsedHWUnits/5 (read) Spi_axSpiSequenceState/2 (addr) Spi_apxSpiConfigPtr/1 (read) Spi_au32SpiBusySyncHWUnitsStatus/6 (write) Spi_apxSpiConfigPtr/1 (read) Spi_au32SpiBusySyncHWUnitsStatus/6 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06/28 SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07/30 SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07/29 Spi_SyncJobsTranfer/8 SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06/28 SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06/27 
   Indirect call Num speculative call targets: 0
Spi_GetSequenceResult/17 (Spi_GetSequenceResult) @0deb4d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Spi_axSpiSequenceState/2 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Spi_GetJobResult/16 (Spi_GetJobResult) @0deb47e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Spi_axSpiJobState/3 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Spi_GetStatus/15 (Spi_GetStatus) @0deb42a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Spi_apxSpiConfigPtr/1 (read) Spi_apxSpiConfigPtr/1 (read) Spi_apxSpiConfigPtr/1 (read) Spi_au32SpiBusySyncHWUnitsStatus/6 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Spi_DeInit/13 
  Calls: Spi_GetStatusAsyncCheckHwBusy/10 
Spi_SetupEB/14 (Spi_SetupEB) @0deb4ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Spi_axSpiChannelState/4 (addr) Spi_apxSpiConfigPtr/1 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05/26 SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05/25 
Spi_DeInit/13 (Spi_DeInit) @0deb4c40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Spi_apxSpiConfigPtr/1 (read) Spi_apxSpiConfigPtr/1 (read) Spi_axSpiHwUnitQueueArray/0 (write) Spi_apxSpiConfigPtr/1 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Spi_Ipw_DeInit/24 Spi_GetStatus/15 
Spi_Init/12 (Spi_Init) @0deb49a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Spi_apxSpiConfigPtr/1 (write) Spi_apxSpiConfigPtr/1 (read) Spi_apxSpiConfigPtr/1 (read) Spi_apxSpiConfigPtr/1 (read) Spi_axSpiHwUnitQueueArray/0 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Spi_Ipw_Init/23 Spi_InitChannelsJobsSeqsState/9 Spi_CheckInit/7 
Spi_GetVersionInfo/11 (Spi_GetVersionInfo) @0deb4700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Spi_GetStatusAsyncCheckHwBusy/10 (Spi_GetStatusAsyncCheckHwBusy) @0deb4460
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Spi_apxSpiConfigPtr/1 (read) Spi_apxSpiConfigPtr/1 (read) Spi_axSpiHwUnitQueueArray/0 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Spi_GetStatus/15 
  Calls: 
Spi_InitChannelsJobsSeqsState/9 (Spi_InitChannelsJobsSeqsState) @0deb41c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Spi_apxSpiConfigPtr/1 (read) Spi_axSpiChannelState/4 (write) Spi_axSpiChannelState/4 (write) Spi_axSpiChannelState/4 (write) Spi_apxSpiConfigPtr/1 (read) Spi_apxSpiConfigPtr/1 (read) Spi_axSpiJobState/3 (write) Spi_apxSpiConfigPtr/1 (read) Spi_apxSpiConfigPtr/1 (read) Spi_axSpiSequenceState/2 (write) Spi_au32SpiSeqUsedHWUnits/5 (write) Spi_apxSpiConfigPtr/1 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Spi_Init/12 
  Calls: 
Spi_SyncJobsTranfer/8 (Spi_SyncJobsTranfer) @0dc2bee0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Spi_axSpiJobState/3 (addr) Spi_apxSpiConfigPtr/1 (read) Spi_axSpiHwUnitQueueArray/0 (write) Spi_axSpiHwUnitQueueArray/0 (write) Spi_axSpiJobState/3 (write) Spi_apxSpiConfigPtr/1 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Spi_SyncTransmit/18 
  Calls: Spi_Ipw_SyncTransmit/22 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
Spi_CheckInit/7 (Spi_CheckInit) @0dc2be00
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Spi_Init/12 
  Calls: 
Spi_au32SpiBusySyncHWUnitsStatus/6 (Spi_au32SpiBusySyncHWUnitsStatus) @0dc25ea0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Spi_GetStatus/15 (read) Spi_SyncTransmit/18 (read) Spi_SyncTransmit/18 (write) Spi_SyncTransmit/18 (write) 
  Availability: available
  Varpool flags:
Spi_au32SpiSeqUsedHWUnits/5 (Spi_au32SpiSeqUsedHWUnits) @0dc25e10
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Spi_InitChannelsJobsSeqsState/9 (write) Spi_SyncTransmit/18 (read) 
  Availability: available
  Varpool flags:
Spi_axSpiChannelState/4 (Spi_axSpiChannelState) @0dc25d80
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: Spi_InitChannelsJobsSeqsState/9 (write) Spi_InitChannelsJobsSeqsState/9 (write) Spi_InitChannelsJobsSeqsState/9 (write) Spi_SetupEB/14 (addr) 
  Availability: available
  Varpool flags:
Spi_axSpiJobState/3 (Spi_axSpiJobState) @0dc25d38
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: Spi_InitChannelsJobsSeqsState/9 (write) Spi_SyncJobsTranfer/8 (write) Spi_SyncJobsTranfer/8 (addr) Spi_GetJobResult/16 (read) 
  Availability: available
  Varpool flags:
Spi_axSpiSequenceState/2 (Spi_axSpiSequenceState) @0dc25cf0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Spi_GetSequenceResult/17 (read) Spi_SyncTransmit/18 (addr) Spi_InitChannelsJobsSeqsState/9 (write) Spi_Cancel/20 (write) 
  Availability: available
  Varpool flags:
Spi_apxSpiConfigPtr/1 (Spi_apxSpiConfigPtr) @0dc25c60
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: Spi_GetStatus/15 (read) Spi_GetStatus/15 (read) Spi_InitChannelsJobsSeqsState/9 (read) Spi_GetStatusAsyncCheckHwBusy/10 (read) Spi_Init/12 (read) Spi_GetStatus/15 (read) Spi_DeInit/13 (read) Spi_DeInit/13 (write) Spi_SyncJobsTranfer/8 (read) Spi_SyncJobsTranfer/8 (read) Spi_InitChannelsJobsSeqsState/9 (read) Spi_DeInit/13 (read) Spi_InitChannelsJobsSeqsState/9 (read) Spi_InitChannelsJobsSeqsState/9 (read) Spi_Init/12 (read) Spi_Init/12 (read) Spi_SetupEB/14 (read) Spi_GetStatusAsyncCheckHwBusy/10 (read) Spi_InitChannelsJobsSeqsState/9 (read) Spi_InitChannelsJobsSeqsState/9 (read) Spi_Init/12 (write) Spi_SyncTransmit/18 (read) Spi_SyncTransmit/18 (read) Spi_SyncTransmit/18 (read) 
  Availability: available
  Varpool flags:
Spi_axSpiHwUnitQueueArray/0 (Spi_axSpiHwUnitQueueArray) @0dc25bd0
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: Spi_GetStatusAsyncCheckHwBusy/10 (read) Spi_Init/12 (write) Spi_DeInit/13 (write) Spi_SyncJobsTranfer/8 (write) Spi_SyncJobsTranfer/8 (write) Spi_GetHWUnitStatus/19 (read) 
  Availability: available
  Varpool flags:
Spi_MainFunction_Handling ()
{
  <bb 2> :
  return;

}


Spi_Cancel (Spi_SequenceType Sequence)
{
  int _1;

  <bb 2> :
  _1 = (int) Sequence_2(D);
  Spi_axSpiSequenceState[_1].Result = 3;
  return;

}


Spi_GetHWUnitStatus (Spi_HWUnitType HWUnit)
{
  Spi_StatusType Status;
  Spi_StatusType D.6064;
  int _1;
  Spi_StatusType _6;

  <bb 2> :
  Status_2 = 0;
  _1 = (int) HWUnit_3(D);
  Status_5 = Spi_axSpiHwUnitQueueArray[_1].Status;
  _6 = Status_5;

  <bb 3> :
<L0>:
  return _6;

}


Spi_SyncTransmit (Spi_SequenceType Sequence)
{
  uint32 SpiCoreID;
  const struct Spi_JobConfigType * JobConfig;
  Spi_JobType Job;
  Spi_JobType NumJobsInSequence;
  const struct Spi_SequenceConfigType * SequenceConfig;
  Spi_JobType JobIndex;
  Spi_HWUnitType HWUnit;
  Std_ReturnType Status;
  struct Spi_SequenceStateType * SequenceState;
  Std_ReturnType D.6062;
  const struct Spi_ConfigType * _1;
  const struct Spi_SeqsConfigType * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Spi_SeqsConfigType * _5;
  int _6;
  long unsigned int _7;
  int _8;
  long unsigned int _9;
  int _10;
  long unsigned int _11;
  long unsigned int _12;
  unsigned char HWUnit.6_13;
  int _14;
  const Spi_JobType * _15;
  unsigned int _16;
  unsigned int _17;
  const Spi_JobType * _18;
  const struct Spi_ConfigType * _19;
  const struct Spi_JobsCfgType * _20;
  unsigned int _21;
  unsigned int _22;
  const struct Spi_JobsCfgType * _23;
  int _24;
  short unsigned int JobIndex.7_25;
  const Spi_JobType * _26;
  unsigned int _27;
  unsigned int _28;
  const Spi_JobType * _29;
  const struct Spi_ConfigType * _30;
  const struct Spi_JobsCfgType * _31;
  unsigned int _32;
  unsigned int _33;
  const struct Spi_JobsCfgType * _34;
  int _35;
  short unsigned int JobIndex.8_36;
  void (*<T550>) (void) _37;
  void (*<T550>) (void) _38;
  Std_ReturnType _80;

  <bb 2> :
  Status_49 = 0;
  SpiCoreID_50 = 0;
  _1 = Spi_apxSpiConfigPtr[SpiCoreID_50];
  _2 = _1->SequenceConfig;
  _3 = (unsigned int) Sequence_52(D);
  _4 = _3 * 4;
  _5 = _2 + _4;
  SequenceConfig_53 = _5->SeqConfig;
  NumJobsInSequence_54 = SequenceConfig_53->NumJobs;
  SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06 ();
  HWUnit_56 = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _6 = (int) HWUnit_42;
  _7 ={v} Spi_au32SpiBusySyncHWUnitsStatus[_6];
  _8 = (int) HWUnit_42;
  _9 = _7 << _8;
  _10 = (int) Sequence_52(D);
  _11 = Spi_au32SpiSeqUsedHWUnits[_10];
  _12 = _9 & _11;
  if (_12 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Status_81 = 1;

  <bb 5> :
  # Status_39 = PHI <Status_40(3), Status_81(4)>
  HWUnit.6_13 = HWUnit_42;
  HWUnit_82 = HWUnit.6_13 + 1;

  <bb 6> :
  # Status_40 = PHI <Status_49(2), Status_39(5)>
  # HWUnit_42 = PHI <HWUnit_56(2), HWUnit_82(5)>
  if (HWUnit_42 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (Status_40 != 1)
    goto <bb 8>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 8> :
  _14 = (int) Sequence_52(D);
  SequenceState_58 = &Spi_axSpiSequenceState[_14];
  SequenceState_58->Result = 1;
  JobIndex_60 = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  _15 = SequenceConfig_53->JobIndexList;
  _16 = (unsigned int) JobIndex_43;
  _17 = _16 * 2;
  _18 = _15 + _17;
  Job_75 = *_18;
  _19 = Spi_apxSpiConfigPtr[SpiCoreID_50];
  _20 = _19->JobConfig;
  _21 = (unsigned int) Job_75;
  _22 = _21 * 4;
  _23 = _20 + _22;
  JobConfig_76 = _23->JobCfg;
  HWUnit_77 = JobConfig_76->HWUnit;
  _24 = (int) HWUnit_77;
  Spi_au32SpiBusySyncHWUnitsStatus[_24] ={v} 1;
  JobIndex.7_25 = JobIndex_43;
  JobIndex_79 = JobIndex.7_25 + 1;

  <bb 10> :
  # JobIndex_43 = PHI <JobIndex_60(8), JobIndex_79(9)>
  if (JobIndex_43 < NumJobsInSequence_54)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06 ();
  Status_63 = Spi_SyncJobsTranfer (SequenceConfig_53, SpiCoreID_50);
  if (Status_63 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  SequenceState_58->Result = 0;
  goto <bb 14>; [INV]

  <bb 13> :
  SequenceState_58->Result = 2;

  <bb 14> :
  SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07 ();
  JobIndex_67 = 0;
  goto <bb 16>; [INV]

  <bb 15> :
  _26 = SequenceConfig_53->JobIndexList;
  _27 = (unsigned int) JobIndex_44;
  _28 = _27 * 2;
  _29 = _26 + _28;
  Job_70 = *_29;
  _30 = Spi_apxSpiConfigPtr[SpiCoreID_50];
  _31 = _30->JobConfig;
  _32 = (unsigned int) Job_70;
  _33 = _32 * 4;
  _34 = _31 + _33;
  JobConfig_71 = _34->JobCfg;
  HWUnit_72 = JobConfig_71->HWUnit;
  _35 = (int) HWUnit_72;
  Spi_au32SpiBusySyncHWUnitsStatus[_35] ={v} 0;
  JobIndex.8_36 = JobIndex_44;
  JobIndex_74 = JobIndex.8_36 + 1;

  <bb 16> :
  # JobIndex_44 = PHI <JobIndex_67(14), JobIndex_74(15)>
  if (JobIndex_44 < NumJobsInSequence_54)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07 ();
  _37 = SequenceConfig_53->EndNotification;
  if (_37 != 0B)
    goto <bb 18>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 18> :
  _38 = SequenceConfig_53->EndNotification;
  _38 ();
  goto <bb 20>; [INV]

  <bb 19> :
  SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06 ();

  <bb 20> :
  # Status_41 = PHI <Status_63(18), Status_40(19), Status_63(17)>
  _80 = Status_41;

  <bb 21> :
<L21>:
  return _80;

}


Spi_GetSequenceResult (Spi_SequenceType Sequence)
{
  Spi_SeqResultType SequenceResult;
  Spi_SeqResultType D.6048;
  int _1;
  Spi_SeqResultType _5;

  <bb 2> :
  _1 = (int) Sequence_2(D);
  SequenceResult_4 = Spi_axSpiSequenceState[_1].Result;
  _5 = SequenceResult_4;

  <bb 3> :
<L0>:
  return _5;

}


Spi_GetJobResult (Spi_JobType Job)
{
  Spi_JobResultType JobResult;
  Spi_JobResultType D.6046;
  int _1;
  Spi_JobResultType _5;

  <bb 2> :
  _1 = (int) Job_2(D);
  JobResult_4 = Spi_axSpiJobState[_1].Result;
  _5 = JobResult_4;

  <bb 3> :
<L0>:
  return _5;

}


Spi_GetStatus ()
{
  uint32 SpiCoreID;
  Spi_HWUnitType HWUnit;
  Spi_StatusType StatusFlag;
  Spi_StatusType D.6044;
  const struct Spi_ConfigType * _1;
  const struct Spi_ConfigType * _2;
  const struct Spi_PhyUnitsConfigType * _3;
  unsigned int _4;
  unsigned int _5;
  const struct Spi_PhyUnitsConfigType * _6;
  const struct Spi_HWUnitConfigType * _7;
  const struct Spi_ConfigType * _8;
  const struct Spi_PhyUnitsConfigType * _9;
  unsigned int _10;
  unsigned int _11;
  const struct Spi_PhyUnitsConfigType * _12;
  const struct Spi_HWUnitConfigType * _13;
  long unsigned int _14;
  int _15;
  long unsigned int _16;
  unsigned char HWUnit.5_17;
  Spi_StatusType _31;

  <bb 2> :
  StatusFlag_22 = 1;
  SpiCoreID_23 = 0;
  _1 = Spi_apxSpiConfigPtr[SpiCoreID_23];
  if (_1 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  StatusFlag_30 = 0;
  goto <bb 13>; [INV]

  <bb 4> :
  HWUnit_25 = 0;
  goto <bb 10>; [INV]

  <bb 5> :
  _2 = Spi_apxSpiConfigPtr[SpiCoreID_23];
  _3 = _2->HWUnitConfig;
  _4 = (unsigned int) HWUnit_20;
  _5 = _4 * 4;
  _6 = _3 + _5;
  _7 = _6->PhyUnitConfig;
  if (_7 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  _8 = Spi_apxSpiConfigPtr[SpiCoreID_23];
  _9 = _8->HWUnitConfig;
  _10 = (unsigned int) HWUnit_20;
  _11 = _10 * 4;
  _12 = _9 + _11;
  _13 = _12->PhyUnitConfig;
  _14 = _13->SpiCoreUse;
  if (SpiCoreID_23 == _14)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _15 = (int) HWUnit_20;
  _16 ={v} Spi_au32SpiBusySyncHWUnitsStatus[_15];
  if (_16 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  StatusFlag_26 = 2;
  goto <bb 11>; [INV]

  <bb 9> :
  HWUnit.5_17 = HWUnit_20;
  HWUnit_27 = HWUnit.5_17 + 1;

  <bb 10> :
  # HWUnit_20 = PHI <HWUnit_25(4), HWUnit_27(9)>
  if (HWUnit_20 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # StatusFlag_18 = PHI <StatusFlag_26(8), StatusFlag_22(10)>
  if (StatusFlag_18 != 2)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  StatusFlag_29 = Spi_GetStatusAsyncCheckHwBusy (SpiCoreID_23);

  <bb 13> :
  # StatusFlag_19 = PHI <StatusFlag_30(3), StatusFlag_18(11), StatusFlag_29(12)>
  _31 = StatusFlag_19;

  <bb 14> :
<L16>:
  return _31;

}


Spi_SetupEB (Spi_ChannelType Channel, const Spi_DataBufferType * SrcDataBufferPtr, Spi_DataBufferType * DesDataBufferPtr, Spi_NumberOfDataType Length)
{
  uint32 SpiCoreID;
  const struct Spi_ChannelConfigType * ChannelConfig;
  struct Spi_ChannelStateType * ChannelState;
  Std_ReturnType Status;
  Std_ReturnType D.6029;
  int _1;
  const struct Spi_ConfigType * _2;
  const struct Spi_ChannelsCfgType * _3;
  unsigned int _4;
  unsigned int _5;
  const struct Spi_ChannelsCfgType * _6;
  <unnamed type> _7;
  struct Spi_BufferDescriptorType * _8;
  struct Spi_BufferDescriptorType * _9;
  unsigned char _10;
  unsigned char _11;
  unsigned char _12;
  unsigned char _13;
  unsigned char _14;
  unsigned char _15;
  unsigned char _16;
  unsigned char _17;
  Std_ReturnType _41;

  <bb 2> :
  Status_22 = 0;
  SpiCoreID_23 = 0;
  _1 = (int) Channel_24(D);
  ChannelState_25 = &Spi_axSpiChannelState[_1];
  _2 = Spi_apxSpiConfigPtr[SpiCoreID_23];
  _3 = _2->ChannelConfig;
  _4 = (unsigned int) Channel_24(D);
  _5 = _4 * 4;
  _6 = _3 + _5;
  ChannelConfig_27 = _6->ChannelCfg;
  _7 = ChannelConfig_27->BufferType;
  if (_7 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Status_40 = 1;
  goto <bb 11>; [INV]

  <bb 4> :
  SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05 ();
  _8 = ChannelConfig_27->BufferDescriptor;
  _8->ExternalBufferTX = SrcDataBufferPtr_29(D);
  _9 = ChannelConfig_27->BufferDescriptor;
  _9->BufferRX = DesDataBufferPtr_31(D);
  ChannelState_25->Length = Length_33(D);
  if (SrcDataBufferPtr_29(D) == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _10 = ChannelState_25->Flags;
  _11 = _10 | 1;
  ChannelState_25->Flags = _11;
  goto <bb 7>; [INV]

  <bb 6> :
  _12 = ChannelState_25->Flags;
  _13 = _12 & 254;
  ChannelState_25->Flags = _13;

  <bb 7> :
  if (DesDataBufferPtr_31(D) == 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _14 = ChannelState_25->Flags;
  _15 = _14 | 2;
  ChannelState_25->Flags = _15;
  goto <bb 10>; [INV]

  <bb 9> :
  _16 = ChannelState_25->Flags;
  _17 = _16 & 253;
  ChannelState_25->Flags = _17;

  <bb 10> :
  SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05 ();

  <bb 11> :
  # Status_18 = PHI <Status_40(3), Status_22(10)>
  _41 = Status_18;

  <bb 12> :
<L9>:
  return _41;

}


Spi_DeInit ()
{
  uint32 SpiCoreID;
  Spi_HWUnitType HWUnit;
  Std_ReturnType TempExit;
  Std_ReturnType D.6018;
  <unnamed type> _1;
  const struct Spi_ConfigType * _2;
  const struct Spi_PhyUnitsConfigType * _3;
  unsigned int _4;
  unsigned int _5;
  const struct Spi_PhyUnitsConfigType * _6;
  const struct Spi_HWUnitConfigType * _7;
  const struct Spi_ConfigType * _8;
  const struct Spi_PhyUnitsConfigType * _9;
  unsigned int _10;
  unsigned int _11;
  const struct Spi_PhyUnitsConfigType * _12;
  const struct Spi_HWUnitConfigType * _13;
  long unsigned int _14;
  int _15;
  unsigned char HWUnit.4_16;
  Std_ReturnType _32;

  <bb 2> :
  TempExit_22 = 0;
  SpiCoreID_23 = 0;
  _1 = Spi_GetStatus ();
  if (_1 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  TempExit_31 = 1;
  goto <bb 11>; [INV]

  <bb 4> :
  HWUnit_26 = 0;
  goto <bb 9>; [INV]

  <bb 5> :
  _2 = Spi_apxSpiConfigPtr[SpiCoreID_23];
  _3 = _2->HWUnitConfig;
  _4 = (unsigned int) HWUnit_18;
  _5 = _4 * 4;
  _6 = _3 + _5;
  _7 = _6->PhyUnitConfig;
  if (_7 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _8 = Spi_apxSpiConfigPtr[SpiCoreID_23];
  _9 = _8->HWUnitConfig;
  _10 = (unsigned int) HWUnit_18;
  _11 = _10 * 4;
  _12 = _9 + _11;
  _13 = _12->PhyUnitConfig;
  _14 = _13->SpiCoreUse;
  if (SpiCoreID_23 == _14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Spi_Ipw_DeInit (HWUnit_18, SpiCoreID_23);
  _15 = (int) HWUnit_18;
  Spi_axSpiHwUnitQueueArray[_15].Status = 0;

  <bb 8> :
  HWUnit.4_16 = HWUnit_18;
  HWUnit_30 = HWUnit.4_16 + 1;

  <bb 9> :
  # HWUnit_18 = PHI <HWUnit_26(4), HWUnit_30(8)>
  if (HWUnit_18 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  Spi_apxSpiConfigPtr[SpiCoreID_23] = 0B;

  <bb 11> :
  # TempExit_17 = PHI <TempExit_31(3), TempExit_22(10)>
  _32 = TempExit_17;

  <bb 12> :
<L11>:
  return _32;

}


Spi_Init (const struct Spi_ConfigType * ConfigPtr)
{
  Std_ReturnType CheckStatus;
  uint32 SpiCoreID;
  Spi_HWUnitType HWUnit;
  const struct Spi_ConfigType * _1;
  const struct Spi_PhyUnitsConfigType * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Spi_PhyUnitsConfigType * _5;
  const struct Spi_HWUnitConfigType * _6;
  const struct Spi_ConfigType * _7;
  const struct Spi_PhyUnitsConfigType * _8;
  unsigned int _9;
  unsigned int _10;
  const struct Spi_PhyUnitsConfigType * _11;
  const struct Spi_HWUnitConfigType * _12;
  long unsigned int _13;
  const struct Spi_ConfigType * _14;
  const struct Spi_PhyUnitsConfigType * _15;
  unsigned int _16;
  unsigned int _17;
  const struct Spi_PhyUnitsConfigType * _18;
  const struct Spi_HWUnitConfigType * _19;
  int _20;
  unsigned char HWUnit.3_21;

  <bb 2> :
  CheckStatus_26 = 0;
  SpiCoreID_27 = 0;
  CheckStatus_31 = Spi_CheckInit (ConfigPtr_29(D), SpiCoreID_27);
  if (CheckStatus_31 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  Spi_apxSpiConfigPtr[SpiCoreID_27] = ConfigPtr_29(D);
  Spi_InitChannelsJobsSeqsState (SpiCoreID_27);
  HWUnit_34 = 0;
  goto <bb 8>; [INV]

  <bb 4> :
  _1 = Spi_apxSpiConfigPtr[SpiCoreID_27];
  _2 = _1->HWUnitConfig;
  _3 = (unsigned int) HWUnit_22;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = _5->PhyUnitConfig;
  if (_6 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _7 = Spi_apxSpiConfigPtr[SpiCoreID_27];
  _8 = _7->HWUnitConfig;
  _9 = (unsigned int) HWUnit_22;
  _10 = _9 * 4;
  _11 = _8 + _10;
  _12 = _11->PhyUnitConfig;
  _13 = _12->SpiCoreUse;
  if (SpiCoreID_27 == _13)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _14 = Spi_apxSpiConfigPtr[SpiCoreID_27];
  _15 = _14->HWUnitConfig;
  _16 = (unsigned int) HWUnit_22;
  _17 = _16 * 4;
  _18 = _15 + _17;
  _19 = _18->PhyUnitConfig;
  Spi_Ipw_Init (HWUnit_22, _19);
  _20 = (int) HWUnit_22;
  Spi_axSpiHwUnitQueueArray[_20].Status = 1;

  <bb 7> :
  HWUnit.3_21 = HWUnit_22;
  HWUnit_37 = HWUnit.3_21 + 1;

  <bb 8> :
  # HWUnit_22 = PHI <HWUnit_34(3), HWUnit_37(7)>
  if (HWUnit_22 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  return;

}


Spi_GetVersionInfo (struct Std_VersionInfoType * versioninfo)
{
  <bb 2> :
  versioninfo_2(D)->vendorID = 43;
  versioninfo_2(D)->moduleID = 83;
  versioninfo_2(D)->sw_major_version = 2;
  versioninfo_2(D)->sw_minor_version = 0;
  versioninfo_2(D)->sw_patch_version = 0;
  return;

}


Spi_GetStatusAsyncCheckHwBusy (uint32 SpiCoreID)
{
  Spi_HWUnitType HWUnit;
  Spi_StatusType StatusFlag;
  Spi_StatusType D.5993;
  const struct Spi_ConfigType * _1;
  const struct Spi_PhyUnitsConfigType * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Spi_PhyUnitsConfigType * _5;
  const struct Spi_HWUnitConfigType * _6;
  const struct Spi_ConfigType * _7;
  const struct Spi_PhyUnitsConfigType * _8;
  unsigned int _9;
  unsigned int _10;
  const struct Spi_PhyUnitsConfigType * _11;
  const struct Spi_HWUnitConfigType * _12;
  long unsigned int _13;
  int _14;
  <unnamed type> _15;
  unsigned char HWUnit.2_16;
  Spi_StatusType _25;

  <bb 2> :
  StatusFlag_19 = 1;
  HWUnit_20 = 0;
  goto <bb 8>; [INV]

  <bb 3> :
  _1 = Spi_apxSpiConfigPtr[SpiCoreID_22(D)];
  _2 = _1->HWUnitConfig;
  _3 = (unsigned int) HWUnit_18;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = _5->PhyUnitConfig;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _7 = Spi_apxSpiConfigPtr[SpiCoreID_22(D)];
  _8 = _7->HWUnitConfig;
  _9 = (unsigned int) HWUnit_18;
  _10 = _9 * 4;
  _11 = _8 + _10;
  _12 = _11->PhyUnitConfig;
  _13 = _12->SpiCoreUse;
  if (SpiCoreID_22(D) == _13)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _14 = (int) HWUnit_18;
  _15 = Spi_axSpiHwUnitQueueArray[_14].Status;
  if (_15 == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  StatusFlag_23 = 2;
  goto <bb 9>; [INV]

  <bb 7> :
  HWUnit.2_16 = HWUnit_18;
  HWUnit_24 = HWUnit.2_16 + 1;

  <bb 8> :
  # HWUnit_18 = PHI <HWUnit_20(2), HWUnit_24(7)>
  if (HWUnit_18 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # StatusFlag_17 = PHI <StatusFlag_23(6), StatusFlag_19(8)>
  _25 = StatusFlag_17;

  <bb 10> :
<L10>:
  return _25;

}


Spi_InitChannelsJobsSeqsState (uint32 SpiCoreID)
{
  const struct Spi_SequenceConfigType * SequenceConfig;
  const struct Spi_JobConfigType * JobConfig;
  const struct Spi_ChannelConfigType * ChannelConfig;
  uint32 Sequence;
  uint32 Job;
  uint32 Channel;
  const struct Spi_ConfigType * _1;
  const struct Spi_ChannelsCfgType * _2;
  long unsigned int _3;
  const struct Spi_ChannelsCfgType * _4;
  long unsigned int _5;
  <unnamed type> _6;
  struct Spi_BufferDescriptorType * _7;
  struct Spi_BufferDescriptorType * _8;
  short unsigned int _9;
  const struct Spi_ConfigType * _10;
  unsigned char _11;
  long unsigned int _12;
  const struct Spi_ConfigType * _13;
  const struct Spi_JobsCfgType * _14;
  long unsigned int _15;
  const struct Spi_JobsCfgType * _16;
  long unsigned int _17;
  const struct Spi_ConfigType * _18;
  short unsigned int _19;
  long unsigned int _20;
  const struct Spi_ConfigType * _21;
  const struct Spi_SeqsConfigType * _22;
  long unsigned int _23;
  const struct Spi_SeqsConfigType * _24;
  long unsigned int _25;
  const struct Spi_ConfigType * _26;
  unsigned char _27;
  long unsigned int _28;

  <bb 2> :
  Channel_39 = 0;
  goto <bb 10>; [INV]

  <bb 3> :
  _1 = Spi_apxSpiConfigPtr[SpiCoreID_41(D)];
  _2 = _1->ChannelConfig;
  _3 = Channel_29 * 4;
  _4 = _2 + _3;
  ChannelConfig_51 = _4->ChannelCfg;
  if (ChannelConfig_51 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  _5 = ChannelConfig_51->SpiCoreUse;
  if (SpiCoreID_41(D) == _5)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  _6 = ChannelConfig_51->BufferType;
  if (_6 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _7 = ChannelConfig_51->BufferDescriptor;
  _7->ExternalBufferTX = 0B;
  _8 = ChannelConfig_51->BufferDescriptor;
  _8->BufferRX = 0B;
  Spi_axSpiChannelState[Channel_29].Length = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  _9 = ChannelConfig_51->Length;
  Spi_axSpiChannelState[Channel_29].Length = _9;

  <bb 8> :
  Spi_axSpiChannelState[Channel_29].Flags = 1;

  <bb 9> :
  Channel_57 = Channel_29 + 1;

  <bb 10> :
  # Channel_29 = PHI <Channel_39(2), Channel_57(9)>
  _10 = Spi_apxSpiConfigPtr[SpiCoreID_41(D)];
  _11 = _10->SpiMaxChannel;
  _12 = (long unsigned int) _11;
  if (Channel_29 <= _12)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  Job_42 = 0;
  goto <bb 16>; [INV]

  <bb 12> :
  _13 = Spi_apxSpiConfigPtr[SpiCoreID_41(D)];
  _14 = _13->JobConfig;
  _15 = Job_30 * 4;
  _16 = _14 + _15;
  JobConfig_48 = _16->JobCfg;
  if (JobConfig_48 != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _17 = JobConfig_48->SpiCoreUse;
  if (SpiCoreID_41(D) == _17)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  Spi_axSpiJobState[Job_30].Result = 0;

  <bb 15> :
  Job_50 = Job_30 + 1;

  <bb 16> :
  # Job_30 = PHI <Job_42(11), Job_50(15)>
  _18 = Spi_apxSpiConfigPtr[SpiCoreID_41(D)];
  _19 = _18->SpiMaxJob;
  _20 = (long unsigned int) _19;
  if (Job_30 <= _20)
    goto <bb 12>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  Sequence_43 = 0;
  goto <bb 22>; [INV]

  <bb 18> :
  _21 = Spi_apxSpiConfigPtr[SpiCoreID_41(D)];
  _22 = _21->SequenceConfig;
  _23 = Sequence_31 * 4;
  _24 = _22 + _23;
  SequenceConfig_44 = _24->SeqConfig;
  if (SequenceConfig_44 != 0B)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 19> :
  _25 = SequenceConfig_44->SpiCoreUse;
  if (SpiCoreID_41(D) == _25)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  Spi_axSpiSequenceState[Sequence_31].Result = 0;
  Spi_au32SpiSeqUsedHWUnits[Sequence_31] = 4294967295;

  <bb 21> :
  Sequence_47 = Sequence_31 + 1;

  <bb 22> :
  # Sequence_31 = PHI <Sequence_43(17), Sequence_47(21)>
  _26 = Spi_apxSpiConfigPtr[SpiCoreID_41(D)];
  _27 = _26->SpiMaxSequence;
  _28 = (long unsigned int) _27;
  if (Sequence_31 <= _28)
    goto <bb 18>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  return;

}


Spi_SyncJobsTranfer (const struct Spi_SequenceConfigType * SequenceConfig, uint32 SpiCoreID)
{
  Std_ReturnType Status;
  const struct Spi_JobConfigType * JobConfig;
  struct Spi_JobStateType * JobState;
  Spi_JobType Job;
  const Spi_JobType * JobIndexList;
  Spi_JobType JobsCount;
  Std_ReturnType D.5968;
  int _1;
  const struct Spi_ConfigType * _2;
  const struct Spi_JobsCfgType * _3;
  unsigned int _4;
  unsigned int _5;
  const struct Spi_JobsCfgType * _6;
  void (*<T550>) (void) _7;
  void (*<T550>) (void) _8;
  unsigned char _9;
  int _10;
  unsigned char _11;
  int _12;
  void (*<T550>) (void) _13;
  void (*<T550>) (void) _14;
  short unsigned int _15;
  int _16;
  const struct Spi_ConfigType * _17;
  const struct Spi_JobsCfgType * _18;
  short unsigned int _19;
  unsigned int _20;
  unsigned int _21;
  const struct Spi_JobsCfgType * _22;
  void (*<T550>) (void) _23;
  void (*<T550>) (void) _24;
  short unsigned int JobsCount.0_25;
  short unsigned int JobsCount.1_26;
  Std_ReturnType _44;

  <bb 2> :
  Status_39 = 0;
  JobsCount_42 = SequenceConfig_41(D)->NumJobs;
  JobIndexList_43 = SequenceConfig_41(D)->JobIndexList;
  goto <bb 13>; [INV]

  <bb 3> :
  Job_45 = *JobIndexList_32;
  _1 = (int) Job_45;
  JobState_46 = &Spi_axSpiJobState[_1];
  JobState_46->Result = 1;
  _2 = Spi_apxSpiConfigPtr[SpiCoreID_48(D)];
  _3 = _2->JobConfig;
  _4 = (unsigned int) Job_45;
  _5 = _4 * 4;
  _6 = _3 + _5;
  JobConfig_49 = _6->JobCfg;
  _7 = JobConfig_49->StartNotification;
  if (_7 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _8 = JobConfig_49->StartNotification;
  _8 ();

  <bb 5> :
  _9 = JobConfig_49->HWUnit;
  _10 = (int) _9;
  Spi_axSpiHwUnitQueueArray[_10].Status = 2;
  Status_53 = Spi_Ipw_SyncTransmit (JobConfig_49, SpiCoreID_48(D));
  _11 = JobConfig_49->HWUnit;
  _12 = (int) _11;
  Spi_axSpiHwUnitQueueArray[_12].Status = 1;
  if (Status_53 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  JobState_46->Result = 0;
  _13 = JobConfig_49->EndNotification;
  if (_13 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 7> :
  _14 = JobConfig_49->EndNotification;
  _14 ();
  goto <bb 12>; [INV]

  <bb 8> :
  # JobsCount_27 = PHI <JobsCount_29(5), JobsCount_59(10)>
  # JobIndexList_30 = PHI <JobIndexList_32(5), JobIndexList_58(10)>
  _15 = *JobIndexList_30;
  _16 = (int) _15;
  Spi_axSpiJobState[_16].Result = 2;
  _17 = Spi_apxSpiConfigPtr[SpiCoreID_48(D)];
  _18 = _17->JobConfig;
  _19 = *JobIndexList_30;
  _20 = (unsigned int) _19;
  _21 = _20 * 4;
  _22 = _18 + _21;
  JobConfig_56 = _22->JobCfg;
  _23 = JobConfig_56->EndNotification;
  if (_23 != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _24 = JobConfig_56->EndNotification;
  _24 ();

  <bb 10> :
  JobIndexList_58 = JobIndexList_30 + 2;
  JobsCount.0_25 = JobsCount_27;
  JobsCount_59 = JobsCount.0_25 + 65535;
  if (JobsCount_59 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  JobsCount_60 = 1;

  <bb 12> :
  # JobsCount_28 = PHI <JobsCount_29(7), JobsCount_60(11), JobsCount_29(6)>
  # JobIndexList_31 = PHI <JobIndexList_32(7), JobIndexList_58(11), JobIndexList_32(6)>
  JobIndexList_63 = JobIndexList_31 + 2;
  JobsCount.1_26 = JobsCount_28;
  JobsCount_64 = JobsCount.1_26 + 65535;

  <bb 13> :
  # JobsCount_29 = PHI <JobsCount_42(2), JobsCount_64(12)>
  # JobIndexList_32 = PHI <JobIndexList_43(2), JobIndexList_63(12)>
  # Status_33 = PHI <Status_39(2), Status_53(12)>
  if (JobsCount_29 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  _44 = Status_33;

  <bb 15> :
<L17>:
  return _44;

}


Spi_CheckInit (const struct Spi_ConfigType * ConfigPtr, uint32 SpiCoreID)
{
  uint32 Sequence;
  uint32 Job;
  uint32 Channel;
  Std_ReturnType CheckStatus;
  Std_ReturnType D.6008;
  unsigned char _1;
  short unsigned int _2;
  unsigned char _3;
  long unsigned int _4;
  Std_ReturnType _16;

  <bb 2> :
  CheckStatus_7 = 0;
  _1 = ConfigPtr_9(D)->SpiMaxChannel;
  Channel_10 = (uint32) _1;
  _2 = ConfigPtr_9(D)->SpiMaxJob;
  Job_11 = (uint32) _2;
  _3 = ConfigPtr_9(D)->SpiMaxSequence;
  Sequence_12 = (uint32) _3;
  if (Channel_10 > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (Job_11 > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (Sequence_12 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  CheckStatus_13 = 1;

  <bb 6> :
  # CheckStatus_5 = PHI <CheckStatus_7(4), CheckStatus_13(5)>
  _4 = ConfigPtr_9(D)->SpiCoreUse;
  if (SpiCoreID_14(D) != _4)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  CheckStatus_15 = 1;

  <bb 8> :
  # CheckStatus_6 = PHI <CheckStatus_5(6), CheckStatus_15(7)>
  _16 = CheckStatus_6;

  <bb 9> :
<L6>:
  return _16;

}


