
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00001233 	.word	0x00001233
  10:	00001235 	.word	0x00001235
  14:	00001237 	.word	0x00001237
  18:	00001239 	.word	0x00001239
	...
  2c:	0000123b 	.word	0x0000123b
  30:	0000123d 	.word	0x0000123d
  34:	00000000 	.word	0x00000000
  38:	0000123f 	.word	0x0000123f
  3c:	00001241 	.word	0x00001241
  40:	00001243 	.word	0x00001243
  44:	00001243 	.word	0x00001243
  48:	00001243 	.word	0x00001243
  4c:	00001243 	.word	0x00001243
  50:	00001243 	.word	0x00001243
  54:	00001243 	.word	0x00001243
  58:	00001243 	.word	0x00001243
  5c:	00001243 	.word	0x00001243
  60:	00001243 	.word	0x00001243
  64:	00001243 	.word	0x00001243
  68:	00001243 	.word	0x00001243
  6c:	00001243 	.word	0x00001243
  70:	00001243 	.word	0x00001243
  74:	00001243 	.word	0x00001243
  78:	00001243 	.word	0x00001243
  7c:	00001243 	.word	0x00001243
  80:	00001243 	.word	0x00001243
  84:	00001243 	.word	0x00001243
  88:	00001243 	.word	0x00001243
  8c:	00001243 	.word	0x00001243
  90:	00001243 	.word	0x00001243
  94:	00001243 	.word	0x00001243
  98:	00001243 	.word	0x00001243
  9c:	00001243 	.word	0x00001243
  a0:	00001243 	.word	0x00001243
  a4:	00001243 	.word	0x00001243
  a8:	00001243 	.word	0x00001243
  ac:	00001243 	.word	0x00001243
  b0:	00001243 	.word	0x00001243
  b4:	00001243 	.word	0x00001243
  b8:	00001243 	.word	0x00001243
  bc:	00001243 	.word	0x00001243
  c0:	00001243 	.word	0x00001243
  c4:	00001243 	.word	0x00001243
  c8:	00001243 	.word	0x00001243
  cc:	00001243 	.word	0x00001243
  d0:	00001243 	.word	0x00001243
  d4:	00001243 	.word	0x00001243
  d8:	00001243 	.word	0x00001243
  dc:	00001243 	.word	0x00001243
  e0:	00001243 	.word	0x00001243
  e4:	00001243 	.word	0x00001243
  e8:	00001243 	.word	0x00001243
  ec:	00001243 	.word	0x00001243
  f0:	00001243 	.word	0x00001243
  f4:	00001243 	.word	0x00001243
  f8:	00001243 	.word	0x00001243
  fc:	00001243 	.word	0x00001243
 100:	00001243 	.word	0x00001243
 104:	00001243 	.word	0x00001243
 108:	00001243 	.word	0x00001243
 10c:	00001243 	.word	0x00001243
 110:	00001243 	.word	0x00001243
 114:	00001243 	.word	0x00001243
 118:	00001243 	.word	0x00001243
 11c:	00001243 	.word	0x00001243
 120:	00001243 	.word	0x00001243
 124:	00001243 	.word	0x00001243
 128:	00001243 	.word	0x00001243
 12c:	00001243 	.word	0x00001243
 130:	00001243 	.word	0x00001243
 134:	00001243 	.word	0x00001243
 138:	00001243 	.word	0x00001243
 13c:	00001243 	.word	0x00001243
 140:	00001243 	.word	0x00001243
 144:	00001243 	.word	0x00001243
 148:	00001243 	.word	0x00001243
 14c:	00001243 	.word	0x00001243
 150:	00001243 	.word	0x00001243
 154:	00001243 	.word	0x00001243
 158:	00001243 	.word	0x00001243
 15c:	00001243 	.word	0x00001243
 160:	00001243 	.word	0x00001243
 164:	00001243 	.word	0x00001243
 168:	00001243 	.word	0x00001243
 16c:	00001243 	.word	0x00001243
 170:	00001243 	.word	0x00001243
 174:	00001243 	.word	0x00001243
 178:	00001243 	.word	0x00001243
 17c:	00001243 	.word	0x00001243
 180:	00001243 	.word	0x00001243
 184:	00001243 	.word	0x00001243
 188:	00001243 	.word	0x00001243
 18c:	00001243 	.word	0x00001243
 190:	00001243 	.word	0x00001243
 194:	00001243 	.word	0x00001243
 198:	00001243 	.word	0x00001243
 19c:	00001243 	.word	0x00001243
 1a0:	00001243 	.word	0x00001243
 1a4:	00001243 	.word	0x00001243
 1a8:	00001243 	.word	0x00001243
 1ac:	00001243 	.word	0x00001243
 1b0:	00001243 	.word	0x00001243
 1b4:	00001243 	.word	0x00001243
 1b8:	00001243 	.word	0x00001243
 1bc:	00001243 	.word	0x00001243
 1c0:	00001243 	.word	0x00001243
 1c4:	00001243 	.word	0x00001243
 1c8:	00001243 	.word	0x00001243
 1cc:	00001243 	.word	0x00001243
 1d0:	00001243 	.word	0x00001243
 1d4:	00001243 	.word	0x00001243
 1d8:	00001243 	.word	0x00001243
 1dc:	00001243 	.word	0x00001243
 1e0:	00001243 	.word	0x00001243
 1e4:	00001243 	.word	0x00001243
 1e8:	00001243 	.word	0x00001243
 1ec:	00001243 	.word	0x00001243
 1f0:	00001243 	.word	0x00001243
 1f4:	00001243 	.word	0x00001243
 1f8:	00001243 	.word	0x00001243
 1fc:	00001243 	.word	0x00001243
 200:	00001243 	.word	0x00001243
 204:	00001243 	.word	0x00001243
 208:	00001243 	.word	0x00001243
 20c:	00001243 	.word	0x00001243
 210:	00001243 	.word	0x00001243
 214:	00001243 	.word	0x00001243
 218:	00001243 	.word	0x00001243
 21c:	00001243 	.word	0x00001243
 220:	00001243 	.word	0x00001243
 224:	00001243 	.word	0x00001243
 228:	00001243 	.word	0x00001243
 22c:	00001243 	.word	0x00001243
 230:	00001243 	.word	0x00001243
 234:	00001243 	.word	0x00001243
 238:	00001243 	.word	0x00001243
 23c:	00001243 	.word	0x00001243
 240:	00001243 	.word	0x00001243
 244:	00001243 	.word	0x00001243
 248:	00001243 	.word	0x00001243
 24c:	00001243 	.word	0x00001243
 250:	00001243 	.word	0x00001243
 254:	00001243 	.word	0x00001243
 258:	00001243 	.word	0x00001243
 25c:	00001243 	.word	0x00001243
 260:	00001243 	.word	0x00001243
 264:	00001243 	.word	0x00001243
 268:	00001243 	.word	0x00001243
 26c:	00001243 	.word	0x00001243
 270:	00001243 	.word	0x00001243
 274:	00001243 	.word	0x00001243
 278:	00001243 	.word	0x00001243
 27c:	00001243 	.word	0x00001243
 280:	00001243 	.word	0x00001243
 284:	00001243 	.word	0x00001243
 288:	00001243 	.word	0x00001243
 28c:	00001243 	.word	0x00001243
 290:	00001243 	.word	0x00001243
 294:	00001243 	.word	0x00001243
 298:	00001243 	.word	0x00001243
 29c:	00001243 	.word	0x00001243
 2a0:	00001243 	.word	0x00001243
 2a4:	00001243 	.word	0x00001243
 2a8:	00001243 	.word	0x00001243
 2ac:	00001243 	.word	0x00001243
 2b0:	00001243 	.word	0x00001243
 2b4:	00001243 	.word	0x00001243
 2b8:	00001243 	.word	0x00001243
 2bc:	00001243 	.word	0x00001243
 2c0:	00001243 	.word	0x00001243
 2c4:	00001243 	.word	0x00001243
 2c8:	00001243 	.word	0x00001243
 2cc:	00001243 	.word	0x00001243
 2d0:	00001243 	.word	0x00001243
 2d4:	00001243 	.word	0x00001243
 2d8:	00001243 	.word	0x00001243
 2dc:	00001243 	.word	0x00001243
 2e0:	00001243 	.word	0x00001243
 2e4:	00001243 	.word	0x00001243
 2e8:	00001243 	.word	0x00001243
 2ec:	00001243 	.word	0x00001243
 2f0:	00001243 	.word	0x00001243
 2f4:	00001243 	.word	0x00001243
 2f8:	00001243 	.word	0x00001243
 2fc:	00001243 	.word	0x00001243
 300:	00001243 	.word	0x00001243
 304:	00001243 	.word	0x00001243
 308:	00001243 	.word	0x00001243
 30c:	00001243 	.word	0x00001243

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fe0d 	bl	10a0 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fecc 	bl	1228 <startup_go_to_user_mode>
     490:	f000 fa70 	bl	974 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff91e4 	.word	0x1fff91e4

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fe17 	bl	11cc <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Delay>:
void EcuM_Init( void );

/*this is dummy delay function prepare just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     8b0:	b500      	push	{lr}
     8b2:	b087      	sub	sp, #28
     8b4:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     8b6:	9b01      	ldr	r3, [sp, #4]
     8b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8bc:	fb02 f303 	mul.w	r3, r2, r3
     8c0:	2101      	movs	r1, #1
     8c2:	4618      	mov	r0, r3
     8c4:	f001 fcbe 	bl	2244 <OsIf_MicrosToTicks>
     8c8:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     8ca:	2001      	movs	r0, #1
     8cc:	f001 fc6e 	bl	21ac <OsIf_GetCounter>
     8d0:	4603      	mov	r3, r0
     8d2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     8d4:	2300      	movs	r3, #0
     8d6:	9305      	str	r3, [sp, #20]
    do{
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8d8:	ab03      	add	r3, sp, #12
     8da:	2101      	movs	r1, #1
     8dc:	4618      	mov	r0, r3
     8de:	f001 fc7e 	bl	21de <OsIf_GetElapsed>
     8e2:	4602      	mov	r2, r0
     8e4:	9b05      	ldr	r3, [sp, #20]
     8e6:	4413      	add	r3, r2
     8e8:	9305      	str	r3, [sp, #20]
    }
    while( ElapsedTime < Timeout );
     8ea:	9a05      	ldr	r2, [sp, #20]
     8ec:	9b04      	ldr	r3, [sp, #16]
     8ee:	429a      	cmp	r2, r3
     8f0:	d3f2      	bcc.n	8d8 <Delay+0x28>
}
     8f2:	bf00      	nop
     8f4:	bf00      	nop
     8f6:	b007      	add	sp, #28
     8f8:	f85d fb04 	ldr.w	pc, [sp], #4

000008fc <CDD_UserTxConfirmation0x001>:

/*Callback function to indicate that the message was transmitted. The reference
to function shall be defined in file Autosar/CanIf/CanIf_Cdd.h, such file
must be created manualy, we define this same function notification for both Pdus*/
void CDD_UserTxConfirmation0x001( PduIdType TxPduId, Std_ReturnType result )
{
     8fc:	b082      	sub	sp, #8
     8fe:	4603      	mov	r3, r0
     900:	460a      	mov	r2, r1
     902:	f8ad 3006 	strh.w	r3, [sp, #6]
     906:	4613      	mov	r3, r2
     908:	f88d 3005 	strb.w	r3, [sp, #5]
    (void)TxPduId;
    if( result == E_OK )
     90c:	f89d 3005 	ldrb.w	r3, [sp, #5]
     910:	2b00      	cmp	r3, #0
     912:	d102      	bne.n	91a <CDD_UserTxConfirmation0x001+0x1e>
    {
        CanIf_bTxFlag = TRUE;
     914:	4b02      	ldr	r3, [pc, #8]	; (920 <CDD_UserTxConfirmation0x001+0x24>)
     916:	2201      	movs	r2, #1
     918:	701a      	strb	r2, [r3, #0]
    }
}
     91a:	bf00      	nop
     91c:	b002      	add	sp, #8
     91e:	4770      	bx	lr
     920:	1fff8b50 	.word	0x1fff8b50

00000924 <CDD_UserTxConfirmation0x002>:

/*Callback function to indicate that the message was transmitted. The reference
to function shall be defined in file Autosar/CanIf/CanIf_Cdd.h, such file
must be created manualy, we define this same function notification for both Pdus*/
void CDD_UserTxConfirmation0x002( PduIdType TxPduId, Std_ReturnType result )
{
     924:	b082      	sub	sp, #8
     926:	4603      	mov	r3, r0
     928:	460a      	mov	r2, r1
     92a:	f8ad 3006 	strh.w	r3, [sp, #6]
     92e:	4613      	mov	r3, r2
     930:	f88d 3005 	strb.w	r3, [sp, #5]
    (void)TxPduId;
    if( result == E_OK )
     934:	f89d 3005 	ldrb.w	r3, [sp, #5]
     938:	2b00      	cmp	r3, #0
     93a:	d102      	bne.n	942 <CDD_UserTxConfirmation0x002+0x1e>
    {
        CanIf_bTxFlag = TRUE;
     93c:	4b02      	ldr	r3, [pc, #8]	; (948 <CDD_UserTxConfirmation0x002+0x24>)
     93e:	2201      	movs	r2, #1
     940:	701a      	strb	r2, [r3, #0]
    }
}
     942:	bf00      	nop
     944:	b002      	add	sp, #8
     946:	4770      	bx	lr
     948:	1fff8b50 	.word	0x1fff8b50

0000094c <CDD_UserTxConfirmation0x143>:

/*Callback function to indicate that the message was transmitted. The reference
to function shall be defined in file Autosar/CanIf/CanIf_Cdd.h, such file
must be created manualy, we define this same function notification for both Pdus*/
void CDD_UserTxConfirmation0x143( PduIdType TxPduId, Std_ReturnType result )
{
     94c:	b082      	sub	sp, #8
     94e:	4603      	mov	r3, r0
     950:	460a      	mov	r2, r1
     952:	f8ad 3006 	strh.w	r3, [sp, #6]
     956:	4613      	mov	r3, r2
     958:	f88d 3005 	strb.w	r3, [sp, #5]
    (void)TxPduId;
    if( result == E_OK )
     95c:	f89d 3005 	ldrb.w	r3, [sp, #5]
     960:	2b00      	cmp	r3, #0
     962:	d102      	bne.n	96a <CDD_UserTxConfirmation0x143+0x1e>
    {
        CanIf_bTxFlag = TRUE;
     964:	4b02      	ldr	r3, [pc, #8]	; (970 <CDD_UserTxConfirmation0x143+0x24>)
     966:	2201      	movs	r2, #1
     968:	701a      	strb	r2, [r3, #0]
    }
}
     96a:	bf00      	nop
     96c:	b002      	add	sp, #8
     96e:	4770      	bx	lr
     970:	1fff8b50 	.word	0x1fff8b50

00000974 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     974:	b500      	push	{lr}
     976:	b085      	sub	sp, #20
    EcuM_Init();
     978:	f000 f946 	bl	c08 <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     97c:	f000 fdf4 	bl	1568 <SEGGER_RTT_Init>

    PduInfoType PduInfo;

    uint8 RealEvent = 0;     // Actual event of button.
     980:	2300      	movs	r3, #0
     982:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ButtonFlag = 0;    // Button Flag for Msg Tx
     986:	2300      	movs	r3, #0
     988:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Set the specified baudrate */
    if (Can_43_FLEXCAN_SetBaudrate(CanController_0, CAN_BAUDRATE_500kbps_ID ) == E_OK) {
     98c:	2102      	movs	r1, #2
     98e:	2000      	movs	r0, #0
     990:	f006 fdfa 	bl	7588 <Can_43_FLEXCAN_SetBaudrate>
     994:	4603      	mov	r3, r0
     996:	2b00      	cmp	r3, #0
     998:	d104      	bne.n	9a4 <main+0x30>
        SEGGER_RTT_printf( 0, "CAN baud rate set successfully. \n" );
     99a:	4987      	ldr	r1, [pc, #540]	; (bb8 <__BSS_SRAM_SIZE+0x68>)
     99c:	2000      	movs	r0, #0
     99e:	f001 f94b 	bl	1c38 <SEGGER_RTT_printf>
     9a2:	e003      	b.n	9ac <main+0x38>

    } else {
        SEGGER_RTT_printf( 0, "Failed to set CAN baud rate. \n" );
     9a4:	4985      	ldr	r1, [pc, #532]	; (bbc <__BSS_SRAM_SIZE+0x6c>)
     9a6:	2000      	movs	r0, #0
     9a8:	f001 f946 	bl	1c38 <SEGGER_RTT_printf>
    /* Start the CAN controller and make it active in the CAN bus network */
    /* The CAN module notifies the upper layer (CanIf_ControllerModeIndication) after 
    a successful state transition about the new state. The monitoring whether the 
    requested state is achieved is part of an upper layer module and is not part of 
    the Can module. */
    if (Can_43_FLEXCAN_SetControllerMode( CanController_0, CAN_CS_STARTED ) == E_OK) {
     9ac:	2101      	movs	r1, #1
     9ae:	2000      	movs	r0, #0
     9b0:	f006 fe22 	bl	75f8 <Can_43_FLEXCAN_SetControllerMode>
     9b4:	4603      	mov	r3, r0
     9b6:	2b00      	cmp	r3, #0
     9b8:	d104      	bne.n	9c4 <main+0x50>
        SEGGER_RTT_printf( 0, "CAN controller state machine set successfully. \n" );
     9ba:	4981      	ldr	r1, [pc, #516]	; (bc0 <__BSS_SRAM_SIZE+0x70>)
     9bc:	2000      	movs	r0, #0
     9be:	f001 f93b 	bl	1c38 <SEGGER_RTT_printf>
     9c2:	e003      	b.n	9cc <main+0x58>

    } else {
        SEGGER_RTT_printf( 0, "Failed to set CAN controller state machine. \n" );
     9c4:	497f      	ldr	r1, [pc, #508]	; (bc4 <__BSS_SRAM_SIZE+0x74>)
     9c6:	2000      	movs	r0, #0
     9c8:	f001 f936 	bl	1c38 <SEGGER_RTT_printf>
    }

    /* Set the information to transmit */
    PduInfo.SduDataPtr = Can_au8Sdu8bytes;
     9cc:	4b7e      	ldr	r3, [pc, #504]	; (bc8 <__BSS_SRAM_SIZE+0x78>)
     9ce:	9300      	str	r3, [sp, #0]
    PduInfo.SduLength = 8u;
     9d0:	2308      	movs	r3, #8
     9d2:	9302      	str	r3, [sp, #8]
    PduInfo.MetaDataPtr = NULL_PTR;
     9d4:	2300      	movs	r3, #0
     9d6:	9301      	str	r3, [sp, #4]

    while( 1u )
    {
        HwIoAb_Buttons_MainFunction();
     9d8:	f000 f9b0 	bl	d3c <HwIoAb_Buttons_MainFunction>
        Delay( 10 ); 
     9dc:	200a      	movs	r0, #10
     9de:	f7ff ff67 	bl	8b0 <Delay>

        for ( uint8 CurrentButton = 0; CurrentButton < HWIOAB_BUTTONS_MAX; CurrentButton++ )    // Checking each button and its event detected.
     9e2:	2300      	movs	r3, #0
     9e4:	f88d 300e 	strb.w	r3, [sp, #14]
     9e8:	e0a6      	b.n	b38 <main+0x1c4>
        {  
            RealEvent =  HwIoAb_Buttons_GetEvent( CurrentButton );   // Obtaining event of actual button.
     9ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
     9ee:	4618      	mov	r0, r3
     9f0:	f000 f986 	bl	d00 <HwIoAb_Buttons_GetEvent>
     9f4:	4603      	mov	r3, r0
     9f6:	f88d 300d 	strb.w	r3, [sp, #13]

            if ( RealEvent != HWIOAB_BTN_EVENT_IDLE )    // A click was detected
     9fa:	f89d 300d 	ldrb.w	r3, [sp, #13]
     9fe:	2b00      	cmp	r3, #0
     a00:	f000 8092 	beq.w	b28 <main+0x1b4>
            {
                switch( CurrentButton )
     a04:	f89d 300e 	ldrb.w	r3, [sp, #14]
     a08:	2b02      	cmp	r3, #2
     a0a:	d067      	beq.n	adc <main+0x168>
     a0c:	2b02      	cmp	r3, #2
     a0e:	f300 808d 	bgt.w	b2c <main+0x1b8>
     a12:	2b00      	cmp	r3, #0
     a14:	d002      	beq.n	a1c <main+0xa8>
     a16:	2b01      	cmp	r3, #1
     a18:	d03a      	beq.n	a90 <main+0x11c>
                            break;
                        }
                    break;
                    default :
                      // If jump here is an error
                    break;
     a1a:	e087      	b.n	b2c <main+0x1b8>
                        switch( RealEvent )
     a1c:	f89d 300d 	ldrb.w	r3, [sp, #13]
     a20:	3b01      	subs	r3, #1
     a22:	2b03      	cmp	r3, #3
     a24:	d832      	bhi.n	a8c <main+0x118>
     a26:	a201      	add	r2, pc, #4	; (adr r2, a2c <main+0xb8>)
     a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a2c:	00000a3d 	.word	0x00000a3d
     a30:	00000a5b 	.word	0x00000a5b
     a34:	00000a65 	.word	0x00000a65
     a38:	00000a6f 	.word	0x00000a6f
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_BLUE_ID );
     a3c:	2000      	movs	r0, #0
     a3e:	f000 fb07 	bl	1050 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 1 action: SINGLE_CLICK \n" );
     a42:	4962      	ldr	r1, [pc, #392]	; (bcc <__BSS_SRAM_SIZE+0x7c>)
     a44:	2000      	movs	r0, #0
     a46:	f001 f8f7 	bl	1c38 <SEGGER_RTT_printf>
                                ButtonFlag = 1;
     a4a:	2301      	movs	r3, #1
     a4c:	f88d 300f 	strb.w	r3, [sp, #15]
                                SEGGER_RTT_printf( 0, "CAN msg 0x001 transmitted at 500kbps \n" );
     a50:	495f      	ldr	r1, [pc, #380]	; (bd0 <__BSS_SRAM_SIZE+0x80>)
     a52:	2000      	movs	r0, #0
     a54:	f001 f8f0 	bl	1c38 <SEGGER_RTT_printf>
                            break;
     a58:	e019      	b.n	a8e <main+0x11a>
                                SEGGER_RTT_printf( 0, "Button 1 action: DOUBLE_CLICK \n" );
     a5a:	495e      	ldr	r1, [pc, #376]	; (bd4 <__BSS_SRAM_SIZE+0x84>)
     a5c:	2000      	movs	r0, #0
     a5e:	f001 f8eb 	bl	1c38 <SEGGER_RTT_printf>
                            break;
     a62:	e014      	b.n	a8e <main+0x11a>
                                SEGGER_RTT_printf( 0, "Button 1 action: HOLD_CLICK \n" );
     a64:	495c      	ldr	r1, [pc, #368]	; (bd8 <__BSS_SRAM_SIZE+0x88>)
     a66:	2000      	movs	r0, #0
     a68:	f001 f8e6 	bl	1c38 <SEGGER_RTT_printf>
                            break;
     a6c:	e00f      	b.n	a8e <main+0x11a>
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_GREEN_ID );
     a6e:	2002      	movs	r0, #2
     a70:	f000 faee 	bl	1050 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 1 action: RELEASE \n" );
     a74:	4959      	ldr	r1, [pc, #356]	; (bdc <__BSS_SRAM_SIZE+0x8c>)
     a76:	2000      	movs	r0, #0
     a78:	f001 f8de 	bl	1c38 <SEGGER_RTT_printf>
                                ButtonFlag = 2;
     a7c:	2302      	movs	r3, #2
     a7e:	f88d 300f 	strb.w	r3, [sp, #15]
                                SEGGER_RTT_printf( 0, "CAN msg 0x002 transmitted at 500kbps \n" );
     a82:	4957      	ldr	r1, [pc, #348]	; (be0 <__BSS_SRAM_SIZE+0x90>)
     a84:	2000      	movs	r0, #0
     a86:	f001 f8d7 	bl	1c38 <SEGGER_RTT_printf>
                            break;
     a8a:	e000      	b.n	a8e <main+0x11a>
                            break;
     a8c:	bf00      	nop
                    break;
     a8e:	e04e      	b.n	b2e <main+0x1ba>
                        switch( RealEvent )
     a90:	f89d 300d 	ldrb.w	r3, [sp, #13]
     a94:	3b01      	subs	r3, #1
     a96:	2b03      	cmp	r3, #3
     a98:	d81e      	bhi.n	ad8 <main+0x164>
     a9a:	a201      	add	r2, pc, #4	; (adr r2, aa0 <main+0x12c>)
     a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     aa0:	00000ab1 	.word	0x00000ab1
     aa4:	00000abb 	.word	0x00000abb
     aa8:	00000ac5 	.word	0x00000ac5
     aac:	00000acf 	.word	0x00000acf
                                SEGGER_RTT_printf( 0, "Button 2 action: SINGLE_CLICK \n" );
     ab0:	494c      	ldr	r1, [pc, #304]	; (be4 <__BSS_SRAM_SIZE+0x94>)
     ab2:	2000      	movs	r0, #0
     ab4:	f001 f8c0 	bl	1c38 <SEGGER_RTT_printf>
                            break;
     ab8:	e00f      	b.n	ada <main+0x166>
                                SEGGER_RTT_printf( 0, "Button 2 action: DOUBLE_CLICK \n" );
     aba:	494b      	ldr	r1, [pc, #300]	; (be8 <__BSS_SRAM_SIZE+0x98>)
     abc:	2000      	movs	r0, #0
     abe:	f001 f8bb 	bl	1c38 <SEGGER_RTT_printf>
                            break;
     ac2:	e00a      	b.n	ada <main+0x166>
                                SEGGER_RTT_printf( 0, "Button 2 action: HOLD_CLICK \n" );
     ac4:	4949      	ldr	r1, [pc, #292]	; (bec <__BSS_SRAM_SIZE+0x9c>)
     ac6:	2000      	movs	r0, #0
     ac8:	f001 f8b6 	bl	1c38 <SEGGER_RTT_printf>
                            break;
     acc:	e005      	b.n	ada <main+0x166>
                                SEGGER_RTT_printf( 0, "Button 2 action: RELEASE \n" );
     ace:	4948      	ldr	r1, [pc, #288]	; (bf0 <__BSS_SRAM_SIZE+0xa0>)
     ad0:	2000      	movs	r0, #0
     ad2:	f001 f8b1 	bl	1c38 <SEGGER_RTT_printf>
                            break;
     ad6:	e000      	b.n	ada <main+0x166>
                            break;
     ad8:	bf00      	nop
                    break;
     ada:	e028      	b.n	b2e <main+0x1ba>
                        switch( RealEvent )
     adc:	f89d 300d 	ldrb.w	r3, [sp, #13]
     ae0:	3b01      	subs	r3, #1
     ae2:	2b03      	cmp	r3, #3
     ae4:	d81e      	bhi.n	b24 <main+0x1b0>
     ae6:	a201      	add	r2, pc, #4	; (adr r2, aec <main+0x178>)
     ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     aec:	00000afd 	.word	0x00000afd
     af0:	00000b07 	.word	0x00000b07
     af4:	00000b11 	.word	0x00000b11
     af8:	00000b1b 	.word	0x00000b1b
                                SEGGER_RTT_printf( 0, "Button 3 action: SINGLE_CLICK \n" );
     afc:	493d      	ldr	r1, [pc, #244]	; (bf4 <__BSS_SRAM_SIZE+0xa4>)
     afe:	2000      	movs	r0, #0
     b00:	f001 f89a 	bl	1c38 <SEGGER_RTT_printf>
                            break;
     b04:	e00f      	b.n	b26 <main+0x1b2>
                                SEGGER_RTT_printf( 0, "Button 3 action: DOUBLE_CLICK \n" );
     b06:	493c      	ldr	r1, [pc, #240]	; (bf8 <__BSS_SRAM_SIZE+0xa8>)
     b08:	2000      	movs	r0, #0
     b0a:	f001 f895 	bl	1c38 <SEGGER_RTT_printf>
                            break;
     b0e:	e00a      	b.n	b26 <main+0x1b2>
                                SEGGER_RTT_printf( 0, "Button 3 action: HOLD_CLICK \n" );
     b10:	493a      	ldr	r1, [pc, #232]	; (bfc <__BSS_SRAM_SIZE+0xac>)
     b12:	2000      	movs	r0, #0
     b14:	f001 f890 	bl	1c38 <SEGGER_RTT_printf>
                            break;
     b18:	e005      	b.n	b26 <main+0x1b2>
                                SEGGER_RTT_printf( 0, "Button 3 action: RELEASE \n" );
     b1a:	4939      	ldr	r1, [pc, #228]	; (c00 <__BSS_SRAM_SIZE+0xb0>)
     b1c:	2000      	movs	r0, #0
     b1e:	f001 f88b 	bl	1c38 <SEGGER_RTT_printf>
                            break;
     b22:	e000      	b.n	b26 <main+0x1b2>
                            break;
     b24:	bf00      	nop
                    break;
     b26:	e002      	b.n	b2e <main+0x1ba>
                }  
            }
     b28:	bf00      	nop
     b2a:	e000      	b.n	b2e <main+0x1ba>
                    break;
     b2c:	bf00      	nop
        for ( uint8 CurrentButton = 0; CurrentButton < HWIOAB_BUTTONS_MAX; CurrentButton++ )    // Checking each button and its event detected.
     b2e:	f89d 300e 	ldrb.w	r3, [sp, #14]
     b32:	3301      	adds	r3, #1
     b34:	f88d 300e 	strb.w	r3, [sp, #14]
     b38:	f89d 300e 	ldrb.w	r3, [sp, #14]
     b3c:	2b02      	cmp	r3, #2
     b3e:	f67f af54 	bls.w	9ea <main+0x76>
        }

        if(ButtonFlag == 1)
     b42:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b46:	2b01      	cmp	r3, #1
     b48:	d112      	bne.n	b70 <__BSS_SRAM_SIZE+0x20>
        {
            ButtonFlag = 0; 
     b4a:	2300      	movs	r3, #0
     b4c:	f88d 300f 	strb.w	r3, [sp, #15]
            /* Set the FlexCAN peripheral to transmit the message, the message will be
            transmitted by the CAN interrupt, this function will call the low level
            Can_43_FLEXCAN_Write with the low level data according de PDU configured */
            CanIf_Transmit( CanIfTxPduCfg_0, &PduInfo );
     b50:	466b      	mov	r3, sp
     b52:	4619      	mov	r1, r3
     b54:	2000      	movs	r0, #0
     b56:	f00e fe1d 	bl	f794 <CanIf_Transmit>
            /* Wait until the CAN interrupt transmit message, waiting is not the
            suitable way, but good enough for ilustration purposes, flag is 
            updated by the callback function CanIf_TxConfirmation */
            while( CanIf_bTxFlag == FALSE );
     b5a:	bf00      	nop
     b5c:	4b29      	ldr	r3, [pc, #164]	; (c04 <__BSS_SRAM_SIZE+0xb4>)
     b5e:	781b      	ldrb	r3, [r3, #0]
     b60:	f083 0301 	eor.w	r3, r3, #1
     b64:	b2db      	uxtb	r3, r3
     b66:	2b00      	cmp	r3, #0
     b68:	d1f8      	bne.n	b5c <__BSS_SRAM_SIZE+0xc>
            /* Clear the Tx flag */
            CanIf_bTxFlag = FALSE;
     b6a:	4b26      	ldr	r3, [pc, #152]	; (c04 <__BSS_SRAM_SIZE+0xb4>)
     b6c:	2200      	movs	r2, #0
     b6e:	701a      	strb	r2, [r3, #0]
        }
        if(ButtonFlag == 2)
     b70:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b74:	2b02      	cmp	r3, #2
     b76:	d112      	bne.n	b9e <__BSS_SRAM_SIZE+0x4e>
        {
            ButtonFlag = 0; 
     b78:	2300      	movs	r3, #0
     b7a:	f88d 300f 	strb.w	r3, [sp, #15]
            /* Set the FlexCAN peripheral to transmit the message, the message will be
            transmitted by the CAN interrupt, this function will call the low level
            Can_43_FLEXCAN_Write with the low level data according de PDU configured */
            CanIf_Transmit( CanIfTxPduCfg_1, &PduInfo );
     b7e:	466b      	mov	r3, sp
     b80:	4619      	mov	r1, r3
     b82:	2001      	movs	r0, #1
     b84:	f00e fe06 	bl	f794 <CanIf_Transmit>
            /* Wait until the CAN interrupt transmit message, waiting is not the
            suitable way, but good enough for ilustration purposes, flag is 
            updated by the callback function CanIf_TxConfirmation */
            while( CanIf_bTxFlag == FALSE );
     b88:	bf00      	nop
     b8a:	4b1e      	ldr	r3, [pc, #120]	; (c04 <__BSS_SRAM_SIZE+0xb4>)
     b8c:	781b      	ldrb	r3, [r3, #0]
     b8e:	f083 0301 	eor.w	r3, r3, #1
     b92:	b2db      	uxtb	r3, r3
     b94:	2b00      	cmp	r3, #0
     b96:	d1f8      	bne.n	b8a <__BSS_SRAM_SIZE+0x3a>
            /* Clear the Tx flag */
            CanIf_bTxFlag = FALSE;
     b98:	4b1a      	ldr	r3, [pc, #104]	; (c04 <__BSS_SRAM_SIZE+0xb4>)
     b9a:	2200      	movs	r2, #0
     b9c:	701a      	strb	r2, [r3, #0]
        }

        /* Increase some values just for ilustration purposes */
        Can_au8Sdu8bytes[0]++;
     b9e:	4b0a      	ldr	r3, [pc, #40]	; (bc8 <__BSS_SRAM_SIZE+0x78>)
     ba0:	781b      	ldrb	r3, [r3, #0]
     ba2:	3301      	adds	r3, #1
     ba4:	b2da      	uxtb	r2, r3
     ba6:	4b08      	ldr	r3, [pc, #32]	; (bc8 <__BSS_SRAM_SIZE+0x78>)
     ba8:	701a      	strb	r2, [r3, #0]
        Can_au8Sdu8bytes[7]++;
     baa:	4b07      	ldr	r3, [pc, #28]	; (bc8 <__BSS_SRAM_SIZE+0x78>)
     bac:	79db      	ldrb	r3, [r3, #7]
     bae:	3301      	adds	r3, #1
     bb0:	b2da      	uxtb	r2, r3
     bb2:	4b05      	ldr	r3, [pc, #20]	; (bc8 <__BSS_SRAM_SIZE+0x78>)
     bb4:	71da      	strb	r2, [r3, #7]
        HwIoAb_Buttons_MainFunction();
     bb6:	e70f      	b.n	9d8 <main+0x64>
     bb8:	0000fa58 	.word	0x0000fa58
     bbc:	0000fa7c 	.word	0x0000fa7c
     bc0:	0000fa9c 	.word	0x0000fa9c
     bc4:	0000fad0 	.word	0x0000fad0
     bc8:	1fff8b10 	.word	0x1fff8b10
     bcc:	0000fb00 	.word	0x0000fb00
     bd0:	0000fb20 	.word	0x0000fb20
     bd4:	0000fb48 	.word	0x0000fb48
     bd8:	0000fb68 	.word	0x0000fb68
     bdc:	0000fb88 	.word	0x0000fb88
     be0:	0000fba4 	.word	0x0000fba4
     be4:	0000fbcc 	.word	0x0000fbcc
     be8:	0000fbec 	.word	0x0000fbec
     bec:	0000fc0c 	.word	0x0000fc0c
     bf0:	0000fc2c 	.word	0x0000fc2c
     bf4:	0000fc48 	.word	0x0000fc48
     bf8:	0000fc68 	.word	0x0000fc68
     bfc:	0000fc88 	.word	0x0000fc88
     c00:	0000fca8 	.word	0x0000fca8
     c04:	1fff8b50 	.word	0x1fff8b50

00000c08 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     c08:	b508      	push	{r3, lr}
    /* Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h */
    Mcu_Init( &Mcu_Config );
     c0a:	480e      	ldr	r0, [pc, #56]	; (c44 <EcuM_Init+0x3c>)
     c0c:	f005 f85a 	bl	5cc4 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     c10:	2000      	movs	r0, #0
     c12:	f005 f8ab 	bl	5d6c <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     c16:	2000      	movs	r0, #0
     c18:	f005 f8cc 	bl	5db4 <Mcu_SetMode>
    /* Init the internal tick reference Systick Timer */
    OsIf_Init( NULL_PTR );
     c1c:	2000      	movs	r0, #0
     c1e:	f001 fabc 	bl	219a <OsIf_Init>
    
    /* Enable and setup interrupts in use by the Can Driver */
    Platform_Init( NULL_PTR );
     c22:	2000      	movs	r0, #0
     c24:	f001 f9b6 	bl	1f94 <Platform_Init>

    /* Apply all the Pin Port microcontroller configuration */
    Port_Init( &Port_Config );
     c28:	4807      	ldr	r0, [pc, #28]	; (c48 <EcuM_Init+0x40>)
     c2a:	f005 fc4d 	bl	64c8 <Port_Init>

    /* Init the FlexCAN2 with the paramters set in Tresos WITHOUT loop back mode */
    Can_43_FLEXCAN_Init( &Can_43_FLEXCAN_Config );
     c2e:	4807      	ldr	r0, [pc, #28]	; (c4c <EcuM_Init+0x44>)
     c30:	f006 fc3c 	bl	74ac <Can_43_FLEXCAN_Init>
    CanIf_Init( &CanIf_Config );
     c34:	4806      	ldr	r0, [pc, #24]	; (c50 <EcuM_Init+0x48>)
     c36:	f00e fda3 	bl	f780 <CanIf_Init>

    /* Initializing IO Hardware Abstractions with the module ID 0 */
    IoHwAb_Init0( NULL_PTR );
     c3a:	2000      	movs	r0, #0
     c3c:	f000 fa1e 	bl	107c <IoHwAb_Init0>
}
     c40:	bf00      	nop
     c42:	bd08      	pop	{r3, pc}
     c44:	00010af4 	.word	0x00010af4
     c48:	00010fc4 	.word	0x00010fc4
     c4c:	00010668 	.word	0x00010668
     c50:	000105a0 	.word	0x000105a0

00000c54 <Can_43_FLEXCAN_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Can_43_FLEXCAN_schm_read_msr(void)
{
     c54:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     c56:	f3ef 8310 	mrs	r3, PRIMASK
     c5a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     c5c:	4623      	mov	r3, r4
}
     c5e:	4618      	mov	r0, r3
     c60:	f85d 4b04 	ldr.w	r4, [sp], #4
     c64:	4770      	bx	lr

00000c66 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     c66:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     c68:	f3ef 8310 	mrs	r3, PRIMASK
     c6c:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     c6e:	4623      	mov	r3, r4
}
     c70:	4618      	mov	r0, r3
     c72:	f85d 4b04 	ldr.w	r4, [sp], #4
     c76:	4770      	bx	lr

00000c78 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     c78:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     c7a:	f3ef 8310 	mrs	r3, PRIMASK
     c7e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     c80:	4623      	mov	r3, r4
}
     c82:	4618      	mov	r0, r3
     c84:	f85d 4b04 	ldr.w	r4, [sp], #4
     c88:	4770      	bx	lr

00000c8a <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     c8a:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     c8c:	f3ef 8310 	mrs	r3, PRIMASK
     c90:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     c92:	4623      	mov	r3, r4
}
     c94:	4618      	mov	r0, r3
     c96:	f85d 4b04 	ldr.w	r4, [sp], #4
     c9a:	4770      	bx	lr

00000c9c <HwIoAb_Buttons_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config * Buttons_Config )
{
     c9c:	b084      	sub	sp, #16
     c9e:	9001      	str	r0, [sp, #4]
    ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
     ca0:	4b16      	ldr	r3, [pc, #88]	; (cfc <HwIoAb_Buttons_Init+0x60>)
     ca2:	681b      	ldr	r3, [r3, #0]
     ca4:	2203      	movs	r2, #3
     ca6:	701a      	strb	r2, [r3, #0]
    ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
     ca8:	4b14      	ldr	r3, [pc, #80]	; (cfc <HwIoAb_Buttons_Init+0x60>)
     caa:	681b      	ldr	r3, [r3, #0]
     cac:	9a01      	ldr	r2, [sp, #4]
     cae:	605a      	str	r2, [r3, #4]

    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     cb0:	2300      	movs	r3, #0
     cb2:	f88d 300f 	strb.w	r3, [sp, #15]
     cb6:	e012      	b.n	cde <HwIoAb_Buttons_Init+0x42>
    {
        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     cb8:	4b10      	ldr	r3, [pc, #64]	; (cfc <HwIoAb_Buttons_Init+0x60>)
     cba:	681a      	ldr	r2, [r3, #0]
     cbc:	f89d 300f 	ldrb.w	r3, [sp, #15]
     cc0:	4413      	add	r3, r2
     cc2:	2200      	movs	r2, #0
     cc4:	721a      	strb	r2, [r3, #8]
        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
     cc6:	4b0d      	ldr	r3, [pc, #52]	; (cfc <HwIoAb_Buttons_Init+0x60>)
     cc8:	681a      	ldr	r2, [r3, #0]
     cca:	f89d 300f 	ldrb.w	r3, [sp, #15]
     cce:	4413      	add	r3, r2
     cd0:	2200      	movs	r2, #0
     cd2:	72da      	strb	r2, [r3, #11]
    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     cd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
     cd8:	3301      	adds	r3, #1
     cda:	f88d 300f 	strb.w	r3, [sp, #15]
     cde:	4b07      	ldr	r3, [pc, #28]	; (cfc <HwIoAb_Buttons_Init+0x60>)
     ce0:	681b      	ldr	r3, [r3, #0]
     ce2:	781b      	ldrb	r3, [r3, #0]
     ce4:	f89d 200f 	ldrb.w	r2, [sp, #15]
     ce8:	429a      	cmp	r2, r3
     cea:	d3e5      	bcc.n	cb8 <HwIoAb_Buttons_Init+0x1c>
    }

    ButtonsControl_Ptr->Buttons_init = TRUE;
     cec:	4b03      	ldr	r3, [pc, #12]	; (cfc <HwIoAb_Buttons_Init+0x60>)
     cee:	681b      	ldr	r3, [r3, #0]
     cf0:	2201      	movs	r2, #1
     cf2:	739a      	strb	r2, [r3, #14]
}
     cf4:	bf00      	nop
     cf6:	b004      	add	sp, #16
     cf8:	4770      	bx	lr
     cfa:	bf00      	nop
     cfc:	1fff8b40 	.word	0x1fff8b40

00000d00 <HwIoAb_Buttons_GetEvent>:
 * @return event Last event detected in button.
 * 
 * @note The Button ID must be valid.
 */
uint8 HwIoAb_Buttons_GetEvent( uint8 Button )
{
     d00:	b084      	sub	sp, #16
     d02:	4603      	mov	r3, r0
     d04:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 temp = 0;
     d08:	2300      	movs	r3, #0
     d0a:	f88d 300f 	strb.w	r3, [sp, #15]
    temp = ButtonsControl_Ptr->Events[Button];                      // Obtaining last event.
     d0e:	4b0a      	ldr	r3, [pc, #40]	; (d38 <HwIoAb_Buttons_GetEvent+0x38>)
     d10:	681a      	ldr	r2, [r3, #0]
     d12:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d16:	4413      	add	r3, r2
     d18:	7adb      	ldrb	r3, [r3, #11]
     d1a:	f88d 300f 	strb.w	r3, [sp, #15]
    ButtonsControl_Ptr->Events[Button] = HWIOAB_BTN_EVENT_IDLE;     // Clearing event of button.
     d1e:	4b06      	ldr	r3, [pc, #24]	; (d38 <HwIoAb_Buttons_GetEvent+0x38>)
     d20:	681a      	ldr	r2, [r3, #0]
     d22:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d26:	4413      	add	r3, r2
     d28:	2200      	movs	r2, #0
     d2a:	72da      	strb	r2, [r3, #11]
    return temp;
     d2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     d30:	4618      	mov	r0, r3
     d32:	b004      	add	sp, #16
     d34:	4770      	bx	lr
     d36:	bf00      	nop
     d38:	1fff8b40 	.word	0x1fff8b40

00000d3c <HwIoAb_Buttons_MainFunction>:
 * @note Remember that the timeout count is for detecting a hold click when the button is pressed 1 and 2 times.
 * @note Each button has its own dedicated count.
 * 
 */
void HwIoAb_Buttons_MainFunction( void )
{
     d3c:	b500      	push	{lr}
     d3e:	b083      	sub	sp, #12
    static uint32 Counters[HWIOAB_BUTTONS_MAX] = {0, 0, 0};

    for( uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++ )    // Executing state machine for each button.
     d40:	2300      	movs	r3, #0
     d42:	f88d 3007 	strb.w	r3, [sp, #7]
     d46:	e15d      	b.n	1004 <HwIoAb_Buttons_MainFunction+0x2c8>
    {
        switch( ButtonsControl_Ptr->States[i] )
     d48:	4bb5      	ldr	r3, [pc, #724]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     d4a:	681a      	ldr	r2, [r3, #0]
     d4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d50:	4413      	add	r3, r2
     d52:	7a1b      	ldrb	r3, [r3, #8]
     d54:	2b04      	cmp	r3, #4
     d56:	f200 8145 	bhi.w	fe4 <HwIoAb_Buttons_MainFunction+0x2a8>
     d5a:	a201      	add	r2, pc, #4	; (adr r2, d60 <HwIoAb_Buttons_MainFunction+0x24>)
     d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     d60:	00000d75 	.word	0x00000d75
     d64:	00000dc1 	.word	0x00000dc1
     d68:	00000ee9 	.word	0x00000ee9
     d6c:	00000f81 	.word	0x00000f81
     d70:	00000e4d 	.word	0x00000e4d
        {
            case HWIOAB_BTN_STATE_IDLE :
                // Query for the first time the button is pressed.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x0 = PRESSED
     d74:	4baa      	ldr	r3, [pc, #680]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     d76:	681b      	ldr	r3, [r3, #0]
     d78:	685a      	ldr	r2, [r3, #4]
     d7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d7e:	00db      	lsls	r3, r3, #3
     d80:	4413      	add	r3, r2
     d82:	881b      	ldrh	r3, [r3, #0]
     d84:	4618      	mov	r0, r3
     d86:	f006 f8b3 	bl	6ef0 <Dio_ReadChannel>
     d8a:	4603      	mov	r3, r0
     d8c:	4619      	mov	r1, r3
     d8e:	4ba4      	ldr	r3, [pc, #656]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     d90:	681b      	ldr	r3, [r3, #0]
     d92:	685a      	ldr	r2, [r3, #4]
     d94:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d98:	00db      	lsls	r3, r3, #3
     d9a:	4413      	add	r3, r2
     d9c:	789b      	ldrb	r3, [r3, #2]
     d9e:	4299      	cmp	r1, r3
     da0:	f040 8122 	bne.w	fe8 <HwIoAb_Buttons_MainFunction+0x2ac>
                {
                    // Start the 300ms counter if there is a press.
                    Counters[i] = 0;
     da4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     da8:	4a9e      	ldr	r2, [pc, #632]	; (1024 <HwIoAb_Buttons_MainFunction+0x2e8>)
     daa:	2100      	movs	r1, #0
     dac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_SINGLE_CLICK;
     db0:	4b9b      	ldr	r3, [pc, #620]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     db2:	681a      	ldr	r2, [r3, #0]
     db4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     db8:	4413      	add	r3, r2
     dba:	2201      	movs	r2, #1
     dbc:	721a      	strb	r2, [r3, #8]

                }
            break;
     dbe:	e113      	b.n	fe8 <HwIoAb_Buttons_MainFunction+0x2ac>
            case HWIOAB_BTN_STATE_SINGLE_CLICK :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     dc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dc4:	4a97      	ldr	r2, [pc, #604]	; (1024 <HwIoAb_Buttons_MainFunction+0x2e8>)
     dc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     dca:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dce:	320a      	adds	r2, #10
     dd0:	4994      	ldr	r1, [pc, #592]	; (1024 <HwIoAb_Buttons_MainFunction+0x2e8>)
     dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if there is a timeout, if the elapsed time is already equal or bigger than the timeout.
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     dd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dda:	4a92      	ldr	r2, [pc, #584]	; (1024 <HwIoAb_Buttons_MainFunction+0x2e8>)
     ddc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     de0:	4b8f      	ldr	r3, [pc, #572]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     de2:	681b      	ldr	r3, [r3, #0]
     de4:	6859      	ldr	r1, [r3, #4]
     de6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dea:	00db      	lsls	r3, r3, #3
     dec:	440b      	add	r3, r1
     dee:	685b      	ldr	r3, [r3, #4]
     df0:	429a      	cmp	r2, r3
     df2:	d106      	bne.n	e02 <HwIoAb_Buttons_MainFunction+0xc6>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_CLICK;
     df4:	4b8a      	ldr	r3, [pc, #552]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     df6:	681a      	ldr	r2, [r3, #0]
     df8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dfc:	4413      	add	r3, r2
     dfe:	2203      	movs	r2, #3
     e00:	721a      	strb	r2, [r3, #8]
                }

                // Query if there is a release.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     e02:	4b87      	ldr	r3, [pc, #540]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e04:	681b      	ldr	r3, [r3, #0]
     e06:	685a      	ldr	r2, [r3, #4]
     e08:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e0c:	00db      	lsls	r3, r3, #3
     e0e:	4413      	add	r3, r2
     e10:	881b      	ldrh	r3, [r3, #0]
     e12:	4618      	mov	r0, r3
     e14:	f006 f86c 	bl	6ef0 <Dio_ReadChannel>
     e18:	4603      	mov	r3, r0
     e1a:	4619      	mov	r1, r3
     e1c:	4b80      	ldr	r3, [pc, #512]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e1e:	681b      	ldr	r3, [r3, #0]
     e20:	685a      	ldr	r2, [r3, #4]
     e22:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e26:	00db      	lsls	r3, r3, #3
     e28:	4413      	add	r3, r2
     e2a:	789b      	ldrb	r3, [r3, #2]
     e2c:	2b00      	cmp	r3, #0
     e2e:	bf0c      	ite	eq
     e30:	2301      	moveq	r3, #1
     e32:	2300      	movne	r3, #0
     e34:	b2db      	uxtb	r3, r3
     e36:	4299      	cmp	r1, r3
     e38:	f040 80d8 	bne.w	fec <HwIoAb_Buttons_MainFunction+0x2b0>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_RELEASE;
     e3c:	4b78      	ldr	r3, [pc, #480]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e3e:	681a      	ldr	r2, [r3, #0]
     e40:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e44:	4413      	add	r3, r2
     e46:	2204      	movs	r2, #4
     e48:	721a      	strb	r2, [r3, #8]
                }    
            break;
     e4a:	e0cf      	b.n	fec <HwIoAb_Buttons_MainFunction+0x2b0>
            case HWIOAB_BTN_STATE_RELEASE :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     e4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e50:	4a74      	ldr	r2, [pc, #464]	; (1024 <HwIoAb_Buttons_MainFunction+0x2e8>)
     e52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     e56:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e5a:	320a      	adds	r2, #10
     e5c:	4971      	ldr	r1, [pc, #452]	; (1024 <HwIoAb_Buttons_MainFunction+0x2e8>)
     e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if timeout, if timeout is a single click.
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     e62:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e66:	4a6f      	ldr	r2, [pc, #444]	; (1024 <HwIoAb_Buttons_MainFunction+0x2e8>)
     e68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     e6c:	4b6c      	ldr	r3, [pc, #432]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e6e:	681b      	ldr	r3, [r3, #0]
     e70:	6859      	ldr	r1, [r3, #4]
     e72:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e76:	00db      	lsls	r3, r3, #3
     e78:	440b      	add	r3, r1
     e7a:	685b      	ldr	r3, [r3, #4]
     e7c:	429a      	cmp	r2, r3
     e7e:	d10d      	bne.n	e9c <HwIoAb_Buttons_MainFunction+0x160>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_SINGLE_CLICK;
     e80:	4b67      	ldr	r3, [pc, #412]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e82:	681a      	ldr	r2, [r3, #0]
     e84:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e88:	4413      	add	r3, r2
     e8a:	2201      	movs	r2, #1
     e8c:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     e8e:	4b64      	ldr	r3, [pc, #400]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e90:	681a      	ldr	r2, [r3, #0]
     e92:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e96:	4413      	add	r3, r2
     e98:	2200      	movs	r2, #0
     e9a:	721a      	strb	r2, [r3, #8]
                } 

                // Query if a press, if press start 300ms counter again.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x0 = PRESSED
     e9c:	4b60      	ldr	r3, [pc, #384]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e9e:	681b      	ldr	r3, [r3, #0]
     ea0:	685a      	ldr	r2, [r3, #4]
     ea2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ea6:	00db      	lsls	r3, r3, #3
     ea8:	4413      	add	r3, r2
     eaa:	881b      	ldrh	r3, [r3, #0]
     eac:	4618      	mov	r0, r3
     eae:	f006 f81f 	bl	6ef0 <Dio_ReadChannel>
     eb2:	4603      	mov	r3, r0
     eb4:	4619      	mov	r1, r3
     eb6:	4b5a      	ldr	r3, [pc, #360]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     eb8:	681b      	ldr	r3, [r3, #0]
     eba:	685a      	ldr	r2, [r3, #4]
     ebc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ec0:	00db      	lsls	r3, r3, #3
     ec2:	4413      	add	r3, r2
     ec4:	789b      	ldrb	r3, [r3, #2]
     ec6:	4299      	cmp	r1, r3
     ec8:	f040 8092 	bne.w	ff0 <HwIoAb_Buttons_MainFunction+0x2b4>
                {
                    // Restart the 300ms counter if there is a press.
                    Counters[i] = 0;
     ecc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ed0:	4a54      	ldr	r2, [pc, #336]	; (1024 <HwIoAb_Buttons_MainFunction+0x2e8>)
     ed2:	2100      	movs	r1, #0
     ed4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_DOUBLE_CLICK;
     ed8:	4b51      	ldr	r3, [pc, #324]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     eda:	681a      	ldr	r2, [r3, #0]
     edc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ee0:	4413      	add	r3, r2
     ee2:	2202      	movs	r2, #2
     ee4:	721a      	strb	r2, [r3, #8]
                } 
            break;
     ee6:	e083      	b.n	ff0 <HwIoAb_Buttons_MainFunction+0x2b4>
            case HWIOAB_BTN_STATE_DOUBLE_CLICK :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     ee8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eec:	4a4d      	ldr	r2, [pc, #308]	; (1024 <HwIoAb_Buttons_MainFunction+0x2e8>)
     eee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     ef2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ef6:	320a      	adds	r2, #10
     ef8:	494a      	ldr	r1, [pc, #296]	; (1024 <HwIoAb_Buttons_MainFunction+0x2e8>)
     efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if timeout, if timeout is hold 
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     efe:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f02:	4a48      	ldr	r2, [pc, #288]	; (1024 <HwIoAb_Buttons_MainFunction+0x2e8>)
     f04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     f08:	4b45      	ldr	r3, [pc, #276]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f0a:	681b      	ldr	r3, [r3, #0]
     f0c:	6859      	ldr	r1, [r3, #4]
     f0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f12:	00db      	lsls	r3, r3, #3
     f14:	440b      	add	r3, r1
     f16:	685b      	ldr	r3, [r3, #4]
     f18:	429a      	cmp	r2, r3
     f1a:	d106      	bne.n	f2a <HwIoAb_Buttons_MainFunction+0x1ee>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_CLICK;
     f1c:	4b40      	ldr	r3, [pc, #256]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f1e:	681a      	ldr	r2, [r3, #0]
     f20:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f24:	4413      	add	r3, r2
     f26:	2203      	movs	r2, #3
     f28:	721a      	strb	r2, [r3, #8]
                } 

                // Query if release, if release is a double click
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     f2a:	4b3d      	ldr	r3, [pc, #244]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f2c:	681b      	ldr	r3, [r3, #0]
     f2e:	685a      	ldr	r2, [r3, #4]
     f30:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f34:	00db      	lsls	r3, r3, #3
     f36:	4413      	add	r3, r2
     f38:	881b      	ldrh	r3, [r3, #0]
     f3a:	4618      	mov	r0, r3
     f3c:	f005 ffd8 	bl	6ef0 <Dio_ReadChannel>
     f40:	4603      	mov	r3, r0
     f42:	4619      	mov	r1, r3
     f44:	4b36      	ldr	r3, [pc, #216]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f46:	681b      	ldr	r3, [r3, #0]
     f48:	685a      	ldr	r2, [r3, #4]
     f4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f4e:	00db      	lsls	r3, r3, #3
     f50:	4413      	add	r3, r2
     f52:	789b      	ldrb	r3, [r3, #2]
     f54:	2b00      	cmp	r3, #0
     f56:	bf0c      	ite	eq
     f58:	2301      	moveq	r3, #1
     f5a:	2300      	movne	r3, #0
     f5c:	b2db      	uxtb	r3, r3
     f5e:	4299      	cmp	r1, r3
     f60:	d148      	bne.n	ff4 <HwIoAb_Buttons_MainFunction+0x2b8>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_DOUBLE_CLICK;
     f62:	4b2f      	ldr	r3, [pc, #188]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f64:	681a      	ldr	r2, [r3, #0]
     f66:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f6a:	4413      	add	r3, r2
     f6c:	2202      	movs	r2, #2
     f6e:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     f70:	4b2b      	ldr	r3, [pc, #172]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f72:	681a      	ldr	r2, [r3, #0]
     f74:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f78:	4413      	add	r3, r2
     f7a:	2200      	movs	r2, #0
     f7c:	721a      	strb	r2, [r3, #8]
                } 
            break;
     f7e:	e039      	b.n	ff4 <HwIoAb_Buttons_MainFunction+0x2b8>
            case HWIOAB_BTN_STATE_HOLD_CLICK :
                ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_HOLD_CLICK;
     f80:	4b27      	ldr	r3, [pc, #156]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f82:	681a      	ldr	r2, [r3, #0]
     f84:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f88:	4413      	add	r3, r2
     f8a:	2203      	movs	r2, #3
     f8c:	72da      	strb	r2, [r3, #11]
                // If state jumps here is a hold click, wait until botton is released and go back to IDLE
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     f8e:	4b24      	ldr	r3, [pc, #144]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f90:	681b      	ldr	r3, [r3, #0]
     f92:	685a      	ldr	r2, [r3, #4]
     f94:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f98:	00db      	lsls	r3, r3, #3
     f9a:	4413      	add	r3, r2
     f9c:	881b      	ldrh	r3, [r3, #0]
     f9e:	4618      	mov	r0, r3
     fa0:	f005 ffa6 	bl	6ef0 <Dio_ReadChannel>
     fa4:	4603      	mov	r3, r0
     fa6:	4619      	mov	r1, r3
     fa8:	4b1d      	ldr	r3, [pc, #116]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     faa:	681b      	ldr	r3, [r3, #0]
     fac:	685a      	ldr	r2, [r3, #4]
     fae:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fb2:	00db      	lsls	r3, r3, #3
     fb4:	4413      	add	r3, r2
     fb6:	789b      	ldrb	r3, [r3, #2]
     fb8:	2b00      	cmp	r3, #0
     fba:	bf0c      	ite	eq
     fbc:	2301      	moveq	r3, #1
     fbe:	2300      	movne	r3, #0
     fc0:	b2db      	uxtb	r3, r3
     fc2:	4299      	cmp	r1, r3
     fc4:	d118      	bne.n	ff8 <HwIoAb_Buttons_MainFunction+0x2bc>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_RELEASE;
     fc6:	4b16      	ldr	r3, [pc, #88]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     fc8:	681a      	ldr	r2, [r3, #0]
     fca:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fce:	4413      	add	r3, r2
     fd0:	2204      	movs	r2, #4
     fd2:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     fd4:	4b12      	ldr	r3, [pc, #72]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
     fd6:	681a      	ldr	r2, [r3, #0]
     fd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fdc:	4413      	add	r3, r2
     fde:	2200      	movs	r2, #0
     fe0:	721a      	strb	r2, [r3, #8]
                }
            break;
     fe2:	e009      	b.n	ff8 <HwIoAb_Buttons_MainFunction+0x2bc>
            default :
              // If jump here is an error
            break;
     fe4:	bf00      	nop
     fe6:	e008      	b.n	ffa <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     fe8:	bf00      	nop
     fea:	e006      	b.n	ffa <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     fec:	bf00      	nop
     fee:	e004      	b.n	ffa <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     ff0:	bf00      	nop
     ff2:	e002      	b.n	ffa <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     ff4:	bf00      	nop
     ff6:	e000      	b.n	ffa <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     ff8:	bf00      	nop
    for( uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++ )    // Executing state machine for each button.
     ffa:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ffe:	3301      	adds	r3, #1
    1000:	f88d 3007 	strb.w	r3, [sp, #7]
    1004:	4b06      	ldr	r3, [pc, #24]	; (1020 <HwIoAb_Buttons_MainFunction+0x2e4>)
    1006:	681b      	ldr	r3, [r3, #0]
    1008:	781b      	ldrb	r3, [r3, #0]
    100a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    100e:	429a      	cmp	r2, r3
    1010:	f4ff ae9a 	bcc.w	d48 <HwIoAb_Buttons_MainFunction+0xc>
        }
    }
}   
    1014:	bf00      	nop
    1016:	bf00      	nop
    1018:	b003      	add	sp, #12
    101a:	f85d fb04 	ldr.w	pc, [sp], #4
    101e:	bf00      	nop
    1020:	1fff8b40 	.word	0x1fff8b40
    1024:	1fff91cc 	.word	0x1fff91cc

00001028 <HwIoAb_Leds_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Leds_Config Pointer to configuration array.
 */
void HwIoAb_Leds_Init( const HwIoAb_Leds_Config * Leds_Config )
{
    1028:	b082      	sub	sp, #8
    102a:	9001      	str	r0, [sp, #4]
    LedsControl_Ptr->Leds = HWIOAB_LEDS_MAX;
    102c:	4b07      	ldr	r3, [pc, #28]	; (104c <HwIoAb_Leds_Init+0x24>)
    102e:	681b      	ldr	r3, [r3, #0]
    1030:	220b      	movs	r2, #11
    1032:	701a      	strb	r2, [r3, #0]
    LedsControl_Ptr->LedsConfig_Ptr = Leds_Config;
    1034:	4b05      	ldr	r3, [pc, #20]	; (104c <HwIoAb_Leds_Init+0x24>)
    1036:	681b      	ldr	r3, [r3, #0]
    1038:	9a01      	ldr	r2, [sp, #4]
    103a:	605a      	str	r2, [r3, #4]
    LedsControl_Ptr->Leds_init = TRUE;
    103c:	4b03      	ldr	r3, [pc, #12]	; (104c <HwIoAb_Leds_Init+0x24>)
    103e:	681b      	ldr	r3, [r3, #0]
    1040:	2201      	movs	r2, #1
    1042:	721a      	strb	r2, [r3, #8]
}
    1044:	bf00      	nop
    1046:	b002      	add	sp, #8
    1048:	4770      	bx	lr
    104a:	bf00      	nop
    104c:	1fff8b44 	.word	0x1fff8b44

00001050 <HwIoAb_Leds_TurnToggle>:
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnToggle( uint8 Led ) 
{
    1050:	b500      	push	{lr}
    1052:	b083      	sub	sp, #12
    1054:	4603      	mov	r3, r0
    1056:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_FlipChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led );
    105a:	4b07      	ldr	r3, [pc, #28]	; (1078 <HwIoAb_Leds_TurnToggle+0x28>)
    105c:	681b      	ldr	r3, [r3, #0]
    105e:	685a      	ldr	r2, [r3, #4]
    1060:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1064:	009b      	lsls	r3, r3, #2
    1066:	4413      	add	r3, r2
    1068:	881b      	ldrh	r3, [r3, #0]
    106a:	4618      	mov	r0, r3
    106c:	f005 ff6b 	bl	6f46 <Dio_FlipChannel>
}
    1070:	bf00      	nop
    1072:	b003      	add	sp, #12
    1074:	f85d fb04 	ldr.w	pc, [sp], #4
    1078:	1fff8b44 	.word	0x1fff8b44

0000107c <IoHwAb_Init0>:
 * @brief This function initialices all the IO hardware abstractions.
 * 
 * @param ConfigPtr Pointer to configuration structure instance, in this case is not used.
 */
void IoHwAb_Init0( const IoHwAb0_ConfigType* ConfigPtr ) 
{
    107c:	b500      	push	{lr}
    107e:	b083      	sub	sp, #12
    1080:	9001      	str	r0, [sp, #4]
    /* Buttons init */
    HwIoAb_Buttons_Init( &ButtonsCfg );
    1082:	4805      	ldr	r0, [pc, #20]	; (1098 <IoHwAb_Init0+0x1c>)
    1084:	f7ff fe0a 	bl	c9c <HwIoAb_Buttons_Init>
    /* RGB Leds init */
    HwIoAb_Leds_Init( &LedsCfg );
    1088:	4804      	ldr	r0, [pc, #16]	; (109c <IoHwAb_Init0+0x20>)
    108a:	f7ff ffcd 	bl	1028 <HwIoAb_Leds_Init>
    /* Pots init */
    //HwIoAb_Pots_Init( NULL_PTR );
    /* Buzzer init */
    //HwIoAb_Buzzer_Init( NULL_PTR );
}
    108e:	bf00      	nop
    1090:	b003      	add	sp, #12
    1092:	f85d fb04 	ldr.w	pc, [sp], #4
    1096:	bf00      	nop
    1098:	000104f4 	.word	0x000104f4
    109c:	0001050c 	.word	0x0001050c

000010a0 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    10a0:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    10a2:	2300      	movs	r3, #0
    10a4:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    10a6:	2300      	movs	r3, #0
    10a8:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    10aa:	2300      	movs	r3, #0
    10ac:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    10ae:	2300      	movs	r3, #0
    10b0:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    10b2:	4b44      	ldr	r3, [pc, #272]	; (11c4 <init_data_bss+0x124>)
    10b4:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    10b6:	4b44      	ldr	r3, [pc, #272]	; (11c8 <init_data_bss+0x128>)
    10b8:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    10ba:	9b05      	ldr	r3, [sp, #20]
    10bc:	681b      	ldr	r3, [r3, #0]
    10be:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    10c0:	9b05      	ldr	r3, [sp, #20]
    10c2:	3304      	adds	r3, #4
    10c4:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    10c6:	9b05      	ldr	r3, [sp, #20]
    10c8:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    10ca:	2300      	movs	r3, #0
    10cc:	9309      	str	r3, [sp, #36]	; 0x24
    10ce:	e03d      	b.n	114c <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    10d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10d2:	4613      	mov	r3, r2
    10d4:	005b      	lsls	r3, r3, #1
    10d6:	4413      	add	r3, r2
    10d8:	009b      	lsls	r3, r3, #2
    10da:	461a      	mov	r2, r3
    10dc:	9b03      	ldr	r3, [sp, #12]
    10de:	4413      	add	r3, r2
    10e0:	685b      	ldr	r3, [r3, #4]
    10e2:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    10e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10e6:	4613      	mov	r3, r2
    10e8:	005b      	lsls	r3, r3, #1
    10ea:	4413      	add	r3, r2
    10ec:	009b      	lsls	r3, r3, #2
    10ee:	461a      	mov	r2, r3
    10f0:	9b03      	ldr	r3, [sp, #12]
    10f2:	4413      	add	r3, r2
    10f4:	681b      	ldr	r3, [r3, #0]
    10f6:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    10f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10fa:	4613      	mov	r3, r2
    10fc:	005b      	lsls	r3, r3, #1
    10fe:	4413      	add	r3, r2
    1100:	009b      	lsls	r3, r3, #2
    1102:	461a      	mov	r2, r3
    1104:	9b03      	ldr	r3, [sp, #12]
    1106:	4413      	add	r3, r2
    1108:	689b      	ldr	r3, [r3, #8]
    110a:	4619      	mov	r1, r3
    110c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    110e:	4613      	mov	r3, r2
    1110:	005b      	lsls	r3, r3, #1
    1112:	4413      	add	r3, r2
    1114:	009b      	lsls	r3, r3, #2
    1116:	461a      	mov	r2, r3
    1118:	9b03      	ldr	r3, [sp, #12]
    111a:	4413      	add	r3, r2
    111c:	685b      	ldr	r3, [r3, #4]
    111e:	1acb      	subs	r3, r1, r3
    1120:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    1122:	2300      	movs	r3, #0
    1124:	9308      	str	r3, [sp, #32]
    1126:	e00a      	b.n	113e <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    1128:	9a00      	ldr	r2, [sp, #0]
    112a:	9b08      	ldr	r3, [sp, #32]
    112c:	441a      	add	r2, r3
    112e:	9901      	ldr	r1, [sp, #4]
    1130:	9b08      	ldr	r3, [sp, #32]
    1132:	440b      	add	r3, r1
    1134:	7812      	ldrb	r2, [r2, #0]
    1136:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1138:	9b08      	ldr	r3, [sp, #32]
    113a:	3301      	adds	r3, #1
    113c:	9308      	str	r3, [sp, #32]
    113e:	9a08      	ldr	r2, [sp, #32]
    1140:	9b06      	ldr	r3, [sp, #24]
    1142:	429a      	cmp	r2, r3
    1144:	d3f0      	bcc.n	1128 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    1146:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1148:	3301      	adds	r3, #1
    114a:	9309      	str	r3, [sp, #36]	; 0x24
    114c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    114e:	9b07      	ldr	r3, [sp, #28]
    1150:	429a      	cmp	r2, r3
    1152:	d3bd      	bcc.n	10d0 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    1154:	9b04      	ldr	r3, [sp, #16]
    1156:	681b      	ldr	r3, [r3, #0]
    1158:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    115a:	9b04      	ldr	r3, [sp, #16]
    115c:	3304      	adds	r3, #4
    115e:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    1160:	9b04      	ldr	r3, [sp, #16]
    1162:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    1164:	2300      	movs	r3, #0
    1166:	9309      	str	r3, [sp, #36]	; 0x24
    1168:	e024      	b.n	11b4 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    116a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    116c:	00db      	lsls	r3, r3, #3
    116e:	9a02      	ldr	r2, [sp, #8]
    1170:	4413      	add	r3, r2
    1172:	681b      	ldr	r3, [r3, #0]
    1174:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    1176:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1178:	00db      	lsls	r3, r3, #3
    117a:	9a02      	ldr	r2, [sp, #8]
    117c:	4413      	add	r3, r2
    117e:	685b      	ldr	r3, [r3, #4]
    1180:	4619      	mov	r1, r3
    1182:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1184:	00db      	lsls	r3, r3, #3
    1186:	9a02      	ldr	r2, [sp, #8]
    1188:	4413      	add	r3, r2
    118a:	681b      	ldr	r3, [r3, #0]
    118c:	1acb      	subs	r3, r1, r3
    118e:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    1190:	2300      	movs	r3, #0
    1192:	9308      	str	r3, [sp, #32]
    1194:	e007      	b.n	11a6 <init_data_bss+0x106>
        {
            ram[j] = 0U;
    1196:	9a01      	ldr	r2, [sp, #4]
    1198:	9b08      	ldr	r3, [sp, #32]
    119a:	4413      	add	r3, r2
    119c:	2200      	movs	r2, #0
    119e:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    11a0:	9b08      	ldr	r3, [sp, #32]
    11a2:	3301      	adds	r3, #1
    11a4:	9308      	str	r3, [sp, #32]
    11a6:	9a08      	ldr	r2, [sp, #32]
    11a8:	9b06      	ldr	r3, [sp, #24]
    11aa:	429a      	cmp	r2, r3
    11ac:	d3f3      	bcc.n	1196 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    11ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    11b0:	3301      	adds	r3, #1
    11b2:	9309      	str	r3, [sp, #36]	; 0x24
    11b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    11b6:	9b07      	ldr	r3, [sp, #28]
    11b8:	429a      	cmp	r2, r3
    11ba:	d3d6      	bcc.n	116a <init_data_bss+0xca>
        }
    }
}
    11bc:	bf00      	nop
    11be:	bf00      	nop
    11c0:	b00a      	add	sp, #40	; 0x28
    11c2:	4770      	bx	lr
    11c4:	00011034 	.word	0x00011034
    11c8:	00011050 	.word	0x00011050

000011cc <sys_m4_cache_init>:
{
    11cc:	b084      	sub	sp, #16
    11ce:	4603      	mov	r3, r0
    11d0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    11d4:	2300      	movs	r3, #0
    11d6:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    11da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11de:	2b00      	cmp	r3, #0
    11e0:	d118      	bne.n	1214 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    11e2:	4b10      	ldr	r3, [pc, #64]	; (1224 <sys_m4_cache_init+0x58>)
    11e4:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    11e8:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    11ea:	4b0e      	ldr	r3, [pc, #56]	; (1224 <sys_m4_cache_init+0x58>)
    11ec:	681b      	ldr	r3, [r3, #0]
    11ee:	4a0d      	ldr	r2, [pc, #52]	; (1224 <sys_m4_cache_init+0x58>)
    11f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    11f4:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    11f6:	bf00      	nop
    11f8:	4b0a      	ldr	r3, [pc, #40]	; (1224 <sys_m4_cache_init+0x58>)
    11fa:	681b      	ldr	r3, [r3, #0]
    11fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    1200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    1204:	d0f8      	beq.n	11f8 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    1206:	4b07      	ldr	r3, [pc, #28]	; (1224 <sys_m4_cache_init+0x58>)
    1208:	681b      	ldr	r3, [r3, #0]
    120a:	4a06      	ldr	r2, [pc, #24]	; (1224 <sys_m4_cache_init+0x58>)
    120c:	f043 0301 	orr.w	r3, r3, #1
    1210:	6013      	str	r3, [r2, #0]
    1212:	e002      	b.n	121a <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    1214:	2301      	movs	r3, #1
    1216:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    121a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    121e:	4618      	mov	r0, r3
    1220:	b004      	add	sp, #16
    1222:	4770      	bx	lr
    1224:	e0082000 	.word	0xe0082000

00001228 <startup_go_to_user_mode>:
}
    1228:	bf00      	nop
    122a:	4770      	bx	lr

0000122c <Sys_GetCoreID>:
    return 0U;
    122c:	2300      	movs	r3, #0
}
    122e:	4618      	mov	r0, r3
    1230:	4770      	bx	lr

00001232 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    1232:	e7fe      	b.n	1232 <HardFault_Handler>

00001234 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    1234:	e7fe      	b.n	1234 <MemManage_Handler>

00001236 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    1236:	e7fe      	b.n	1236 <BusFault_Handler>

00001238 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    1238:	e7fe      	b.n	1238 <UsageFault_Handler>

0000123a <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    123a:	e7fe      	b.n	123a <SVC_Handler>

0000123c <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    123c:	e7fe      	b.n	123c <DebugMon_Handler>

0000123e <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    123e:	e7fe      	b.n	123e <PendSV_Handler>

00001240 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    1240:	e7fe      	b.n	1240 <SysTick_Handler>

00001242 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    1242:	e7fe      	b.n	1242 <undefined_handler>

00001244 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
    1244:	b500      	push	{lr}
    1246:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
    1248:	4b26      	ldr	r3, [pc, #152]	; (12e4 <_DoInit+0xa0>)
    124a:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
    124c:	22a8      	movs	r2, #168	; 0xa8
    124e:	2100      	movs	r1, #0
    1250:	9800      	ldr	r0, [sp, #0]
    1252:	f000 fd13 	bl	1c7c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1256:	9b00      	ldr	r3, [sp, #0]
    1258:	2203      	movs	r2, #3
    125a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    125c:	9b00      	ldr	r3, [sp, #0]
    125e:	2203      	movs	r2, #3
    1260:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    1262:	9b00      	ldr	r3, [sp, #0]
    1264:	4a20      	ldr	r2, [pc, #128]	; (12e8 <_DoInit+0xa4>)
    1266:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    1268:	9b00      	ldr	r3, [sp, #0]
    126a:	4a20      	ldr	r2, [pc, #128]	; (12ec <_DoInit+0xa8>)
    126c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    126e:	9b00      	ldr	r3, [sp, #0]
    1270:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1274:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    1276:	9b00      	ldr	r3, [sp, #0]
    1278:	2200      	movs	r2, #0
    127a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    127c:	9b00      	ldr	r3, [sp, #0]
    127e:	2200      	movs	r2, #0
    1280:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1282:	9b00      	ldr	r3, [sp, #0]
    1284:	2200      	movs	r2, #0
    1286:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    1288:	9b00      	ldr	r3, [sp, #0]
    128a:	4a17      	ldr	r2, [pc, #92]	; (12e8 <_DoInit+0xa4>)
    128c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    128e:	9b00      	ldr	r3, [sp, #0]
    1290:	4a17      	ldr	r2, [pc, #92]	; (12f0 <_DoInit+0xac>)
    1292:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    1294:	9b00      	ldr	r3, [sp, #0]
    1296:	2210      	movs	r2, #16
    1298:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    129a:	9b00      	ldr	r3, [sp, #0]
    129c:	2200      	movs	r2, #0
    129e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    12a0:	9b00      	ldr	r3, [sp, #0]
    12a2:	2200      	movs	r2, #0
    12a4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    12a6:	9b00      	ldr	r3, [sp, #0]
    12a8:	2200      	movs	r2, #0
    12aa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    12ac:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    12b0:	2300      	movs	r3, #0
    12b2:	9301      	str	r3, [sp, #4]
    12b4:	e00c      	b.n	12d0 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
    12b6:	9b01      	ldr	r3, [sp, #4]
    12b8:	f1c3 030f 	rsb	r3, r3, #15
    12bc:	4a0d      	ldr	r2, [pc, #52]	; (12f4 <_DoInit+0xb0>)
    12be:	5cd1      	ldrb	r1, [r2, r3]
    12c0:	9a00      	ldr	r2, [sp, #0]
    12c2:	9b01      	ldr	r3, [sp, #4]
    12c4:	4413      	add	r3, r2
    12c6:	460a      	mov	r2, r1
    12c8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    12ca:	9b01      	ldr	r3, [sp, #4]
    12cc:	3301      	adds	r3, #1
    12ce:	9301      	str	r3, [sp, #4]
    12d0:	9b01      	ldr	r3, [sp, #4]
    12d2:	2b0f      	cmp	r3, #15
    12d4:	d9ef      	bls.n	12b6 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    12d6:	f3bf 8f5f 	dmb	sy
}
    12da:	bf00      	nop
    12dc:	b003      	add	sp, #12
    12de:	f85d fb04 	ldr.w	pc, [sp], #4
    12e2:	bf00      	nop
    12e4:	1fff91e8 	.word	0x1fff91e8
    12e8:	0000fcc4 	.word	0x0000fcc4
    12ec:	1fff9290 	.word	0x1fff9290
    12f0:	1fff9690 	.word	0x1fff9690
    12f4:	00011010 	.word	0x00011010

000012f8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    12f8:	b500      	push	{lr}
    12fa:	b08b      	sub	sp, #44	; 0x2c
    12fc:	9003      	str	r0, [sp, #12]
    12fe:	9102      	str	r1, [sp, #8]
    1300:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
    1302:	2300      	movs	r3, #0
    1304:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
    1306:	9b03      	ldr	r3, [sp, #12]
    1308:	68db      	ldr	r3, [r3, #12]
    130a:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    130c:	9b03      	ldr	r3, [sp, #12]
    130e:	691b      	ldr	r3, [r3, #16]
    1310:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
    1312:	9a06      	ldr	r2, [sp, #24]
    1314:	9b07      	ldr	r3, [sp, #28]
    1316:	429a      	cmp	r2, r3
    1318:	d905      	bls.n	1326 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
    131a:	9a06      	ldr	r2, [sp, #24]
    131c:	9b07      	ldr	r3, [sp, #28]
    131e:	1ad3      	subs	r3, r2, r3
    1320:	3b01      	subs	r3, #1
    1322:	9309      	str	r3, [sp, #36]	; 0x24
    1324:	e007      	b.n	1336 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    1326:	9b03      	ldr	r3, [sp, #12]
    1328:	689a      	ldr	r2, [r3, #8]
    132a:	9906      	ldr	r1, [sp, #24]
    132c:	9b07      	ldr	r3, [sp, #28]
    132e:	1acb      	subs	r3, r1, r3
    1330:	4413      	add	r3, r2
    1332:	3b01      	subs	r3, #1
    1334:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    1336:	9b03      	ldr	r3, [sp, #12]
    1338:	689a      	ldr	r2, [r3, #8]
    133a:	9b07      	ldr	r3, [sp, #28]
    133c:	1ad3      	subs	r3, r2, r3
    133e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1340:	4293      	cmp	r3, r2
    1342:	bf28      	it	cs
    1344:	4613      	movcs	r3, r2
    1346:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    1348:	9a09      	ldr	r2, [sp, #36]	; 0x24
    134a:	9b01      	ldr	r3, [sp, #4]
    134c:	4293      	cmp	r3, r2
    134e:	bf28      	it	cs
    1350:	4613      	movcs	r3, r2
    1352:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1354:	9b03      	ldr	r3, [sp, #12]
    1356:	685a      	ldr	r2, [r3, #4]
    1358:	9b07      	ldr	r3, [sp, #28]
    135a:	4413      	add	r3, r2
    135c:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    135e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1360:	9902      	ldr	r1, [sp, #8]
    1362:	9805      	ldr	r0, [sp, #20]
    1364:	f000 fc7c 	bl	1c60 <memcpy>
    NumBytesWritten += NumBytesToWrite;
    1368:	9a08      	ldr	r2, [sp, #32]
    136a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    136c:	4413      	add	r3, r2
    136e:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
    1370:	9a02      	ldr	r2, [sp, #8]
    1372:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1374:	4413      	add	r3, r2
    1376:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
    1378:	9a01      	ldr	r2, [sp, #4]
    137a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    137c:	1ad3      	subs	r3, r2, r3
    137e:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
    1380:	9a07      	ldr	r2, [sp, #28]
    1382:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1384:	4413      	add	r3, r2
    1386:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
    1388:	9b03      	ldr	r3, [sp, #12]
    138a:	689b      	ldr	r3, [r3, #8]
    138c:	9a07      	ldr	r2, [sp, #28]
    138e:	429a      	cmp	r2, r3
    1390:	d101      	bne.n	1396 <_WriteBlocking+0x9e>
      WrOff = 0u;
    1392:	2300      	movs	r3, #0
    1394:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1396:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    139a:	9b03      	ldr	r3, [sp, #12]
    139c:	9a07      	ldr	r2, [sp, #28]
    139e:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
    13a0:	9b01      	ldr	r3, [sp, #4]
    13a2:	2b00      	cmp	r3, #0
    13a4:	d1b2      	bne.n	130c <_WriteBlocking+0x14>
  return NumBytesWritten;
    13a6:	9b08      	ldr	r3, [sp, #32]
}
    13a8:	4618      	mov	r0, r3
    13aa:	b00b      	add	sp, #44	; 0x2c
    13ac:	f85d fb04 	ldr.w	pc, [sp], #4

000013b0 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    13b0:	b500      	push	{lr}
    13b2:	b089      	sub	sp, #36	; 0x24
    13b4:	9003      	str	r0, [sp, #12]
    13b6:	9102      	str	r1, [sp, #8]
    13b8:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
    13ba:	9b03      	ldr	r3, [sp, #12]
    13bc:	68db      	ldr	r3, [r3, #12]
    13be:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
    13c0:	9b03      	ldr	r3, [sp, #12]
    13c2:	689a      	ldr	r2, [r3, #8]
    13c4:	9b07      	ldr	r3, [sp, #28]
    13c6:	1ad3      	subs	r3, r2, r3
    13c8:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
    13ca:	9a06      	ldr	r2, [sp, #24]
    13cc:	9b01      	ldr	r3, [sp, #4]
    13ce:	429a      	cmp	r2, r3
    13d0:	d911      	bls.n	13f6 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    13d2:	9b03      	ldr	r3, [sp, #12]
    13d4:	685a      	ldr	r2, [r3, #4]
    13d6:	9b07      	ldr	r3, [sp, #28]
    13d8:	4413      	add	r3, r2
    13da:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    13dc:	9a01      	ldr	r2, [sp, #4]
    13de:	9902      	ldr	r1, [sp, #8]
    13e0:	9804      	ldr	r0, [sp, #16]
    13e2:	f000 fc3d 	bl	1c60 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    13e6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    13ea:	9a07      	ldr	r2, [sp, #28]
    13ec:	9b01      	ldr	r3, [sp, #4]
    13ee:	441a      	add	r2, r3
    13f0:	9b03      	ldr	r3, [sp, #12]
    13f2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
    13f4:	e01f      	b.n	1436 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
    13f6:	9b06      	ldr	r3, [sp, #24]
    13f8:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    13fa:	9b03      	ldr	r3, [sp, #12]
    13fc:	685a      	ldr	r2, [r3, #4]
    13fe:	9b07      	ldr	r3, [sp, #28]
    1400:	4413      	add	r3, r2
    1402:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    1404:	9a05      	ldr	r2, [sp, #20]
    1406:	9902      	ldr	r1, [sp, #8]
    1408:	9804      	ldr	r0, [sp, #16]
    140a:	f000 fc29 	bl	1c60 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    140e:	9a01      	ldr	r2, [sp, #4]
    1410:	9b06      	ldr	r3, [sp, #24]
    1412:	1ad3      	subs	r3, r2, r3
    1414:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    1416:	9b03      	ldr	r3, [sp, #12]
    1418:	685b      	ldr	r3, [r3, #4]
    141a:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    141c:	9a02      	ldr	r2, [sp, #8]
    141e:	9b06      	ldr	r3, [sp, #24]
    1420:	4413      	add	r3, r2
    1422:	9a05      	ldr	r2, [sp, #20]
    1424:	4619      	mov	r1, r3
    1426:	9804      	ldr	r0, [sp, #16]
    1428:	f000 fc1a 	bl	1c60 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    142c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    1430:	9b03      	ldr	r3, [sp, #12]
    1432:	9a05      	ldr	r2, [sp, #20]
    1434:	60da      	str	r2, [r3, #12]
}
    1436:	bf00      	nop
    1438:	b009      	add	sp, #36	; 0x24
    143a:	f85d fb04 	ldr.w	pc, [sp], #4

0000143e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    143e:	b086      	sub	sp, #24
    1440:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    1442:	9b01      	ldr	r3, [sp, #4]
    1444:	691b      	ldr	r3, [r3, #16]
    1446:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
    1448:	9b01      	ldr	r3, [sp, #4]
    144a:	68db      	ldr	r3, [r3, #12]
    144c:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
    144e:	9a04      	ldr	r2, [sp, #16]
    1450:	9b03      	ldr	r3, [sp, #12]
    1452:	429a      	cmp	r2, r3
    1454:	d808      	bhi.n	1468 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    1456:	9b01      	ldr	r3, [sp, #4]
    1458:	689a      	ldr	r2, [r3, #8]
    145a:	9b03      	ldr	r3, [sp, #12]
    145c:	1ad2      	subs	r2, r2, r3
    145e:	9b04      	ldr	r3, [sp, #16]
    1460:	4413      	add	r3, r2
    1462:	3b01      	subs	r3, #1
    1464:	9305      	str	r3, [sp, #20]
    1466:	e004      	b.n	1472 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
    1468:	9a04      	ldr	r2, [sp, #16]
    146a:	9b03      	ldr	r3, [sp, #12]
    146c:	1ad3      	subs	r3, r2, r3
    146e:	3b01      	subs	r3, #1
    1470:	9305      	str	r3, [sp, #20]
  }
  return r;
    1472:	9b05      	ldr	r3, [sp, #20]
}
    1474:	4618      	mov	r0, r3
    1476:	b006      	add	sp, #24
    1478:	4770      	bx	lr
	...

0000147c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    147c:	b500      	push	{lr}
    147e:	b089      	sub	sp, #36	; 0x24
    1480:	9003      	str	r0, [sp, #12]
    1482:	9102      	str	r1, [sp, #8]
    1484:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
    1486:	9b02      	ldr	r3, [sp, #8]
    1488:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    148a:	9b03      	ldr	r3, [sp, #12]
    148c:	1c5a      	adds	r2, r3, #1
    148e:	4613      	mov	r3, r2
    1490:	005b      	lsls	r3, r3, #1
    1492:	4413      	add	r3, r2
    1494:	00db      	lsls	r3, r3, #3
    1496:	4a20      	ldr	r2, [pc, #128]	; (1518 <SEGGER_RTT_WriteNoLock+0x9c>)
    1498:	4413      	add	r3, r2
    149a:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    149c:	9b05      	ldr	r3, [sp, #20]
    149e:	695b      	ldr	r3, [r3, #20]
    14a0:	2b02      	cmp	r3, #2
    14a2:	d029      	beq.n	14f8 <SEGGER_RTT_WriteNoLock+0x7c>
    14a4:	2b02      	cmp	r3, #2
    14a6:	d82e      	bhi.n	1506 <SEGGER_RTT_WriteNoLock+0x8a>
    14a8:	2b00      	cmp	r3, #0
    14aa:	d002      	beq.n	14b2 <SEGGER_RTT_WriteNoLock+0x36>
    14ac:	2b01      	cmp	r3, #1
    14ae:	d013      	beq.n	14d8 <SEGGER_RTT_WriteNoLock+0x5c>
    14b0:	e029      	b.n	1506 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    14b2:	9805      	ldr	r0, [sp, #20]
    14b4:	f7ff ffc3 	bl	143e <_GetAvailWriteSpace>
    14b8:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
    14ba:	9a04      	ldr	r2, [sp, #16]
    14bc:	9b01      	ldr	r3, [sp, #4]
    14be:	429a      	cmp	r2, r3
    14c0:	d202      	bcs.n	14c8 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
    14c2:	2300      	movs	r3, #0
    14c4:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    14c6:	e021      	b.n	150c <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
    14c8:	9b01      	ldr	r3, [sp, #4]
    14ca:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    14cc:	9a01      	ldr	r2, [sp, #4]
    14ce:	9906      	ldr	r1, [sp, #24]
    14d0:	9805      	ldr	r0, [sp, #20]
    14d2:	f7ff ff6d 	bl	13b0 <_WriteNoCheck>
    break;
    14d6:	e019      	b.n	150c <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    14d8:	9805      	ldr	r0, [sp, #20]
    14da:	f7ff ffb0 	bl	143e <_GetAvailWriteSpace>
    14de:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    14e0:	9a01      	ldr	r2, [sp, #4]
    14e2:	9b04      	ldr	r3, [sp, #16]
    14e4:	4293      	cmp	r3, r2
    14e6:	bf28      	it	cs
    14e8:	4613      	movcs	r3, r2
    14ea:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
    14ec:	9a07      	ldr	r2, [sp, #28]
    14ee:	9906      	ldr	r1, [sp, #24]
    14f0:	9805      	ldr	r0, [sp, #20]
    14f2:	f7ff ff5d 	bl	13b0 <_WriteNoCheck>
    break;
    14f6:	e009      	b.n	150c <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    14f8:	9a01      	ldr	r2, [sp, #4]
    14fa:	9906      	ldr	r1, [sp, #24]
    14fc:	9805      	ldr	r0, [sp, #20]
    14fe:	f7ff fefb 	bl	12f8 <_WriteBlocking>
    1502:	9007      	str	r0, [sp, #28]
    break;
    1504:	e002      	b.n	150c <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
    1506:	2300      	movs	r3, #0
    1508:	9307      	str	r3, [sp, #28]
    break;
    150a:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    150c:	9b07      	ldr	r3, [sp, #28]
}
    150e:	4618      	mov	r0, r3
    1510:	b009      	add	sp, #36	; 0x24
    1512:	f85d fb04 	ldr.w	pc, [sp], #4
    1516:	bf00      	nop
    1518:	1fff91e8 	.word	0x1fff91e8

0000151c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    151c:	b500      	push	{lr}
    151e:	b089      	sub	sp, #36	; 0x24
    1520:	9003      	str	r0, [sp, #12]
    1522:	9102      	str	r1, [sp, #8]
    1524:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
    1526:	4b0f      	ldr	r3, [pc, #60]	; (1564 <SEGGER_RTT_Write+0x48>)
    1528:	9307      	str	r3, [sp, #28]
    152a:	9b07      	ldr	r3, [sp, #28]
    152c:	781b      	ldrb	r3, [r3, #0]
    152e:	b2db      	uxtb	r3, r3
    1530:	2b53      	cmp	r3, #83	; 0x53
    1532:	d001      	beq.n	1538 <SEGGER_RTT_Write+0x1c>
    1534:	f7ff fe86 	bl	1244 <_DoInit>
  SEGGER_RTT_LOCK();
    1538:	f3ef 8311 	mrs	r3, BASEPRI
    153c:	f04f 0120 	mov.w	r1, #32
    1540:	f381 8811 	msr	BASEPRI, r1
    1544:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    1546:	9a01      	ldr	r2, [sp, #4]
    1548:	9902      	ldr	r1, [sp, #8]
    154a:	9803      	ldr	r0, [sp, #12]
    154c:	f7ff ff96 	bl	147c <SEGGER_RTT_WriteNoLock>
    1550:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
    1552:	9b06      	ldr	r3, [sp, #24]
    1554:	f383 8811 	msr	BASEPRI, r3
  return Status;
    1558:	9b05      	ldr	r3, [sp, #20]
}
    155a:	4618      	mov	r0, r3
    155c:	b009      	add	sp, #36	; 0x24
    155e:	f85d fb04 	ldr.w	pc, [sp], #4
    1562:	bf00      	nop
    1564:	1fff91e8 	.word	0x1fff91e8

00001568 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    1568:	b508      	push	{r3, lr}
  _DoInit();
    156a:	f7ff fe6b 	bl	1244 <_DoInit>
}
    156e:	bf00      	nop
    1570:	bd08      	pop	{r3, pc}

00001572 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    1572:	b500      	push	{lr}
    1574:	b085      	sub	sp, #20
    1576:	9001      	str	r0, [sp, #4]
    1578:	460b      	mov	r3, r1
    157a:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    157e:	9b01      	ldr	r3, [sp, #4]
    1580:	689b      	ldr	r3, [r3, #8]
    1582:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    1584:	9b03      	ldr	r3, [sp, #12]
    1586:	1c5a      	adds	r2, r3, #1
    1588:	9b01      	ldr	r3, [sp, #4]
    158a:	685b      	ldr	r3, [r3, #4]
    158c:	429a      	cmp	r2, r3
    158e:	d80f      	bhi.n	15b0 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    1590:	9b01      	ldr	r3, [sp, #4]
    1592:	681a      	ldr	r2, [r3, #0]
    1594:	9b03      	ldr	r3, [sp, #12]
    1596:	4413      	add	r3, r2
    1598:	f89d 2003 	ldrb.w	r2, [sp, #3]
    159c:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    159e:	9b03      	ldr	r3, [sp, #12]
    15a0:	1c5a      	adds	r2, r3, #1
    15a2:	9b01      	ldr	r3, [sp, #4]
    15a4:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    15a6:	9b01      	ldr	r3, [sp, #4]
    15a8:	68db      	ldr	r3, [r3, #12]
    15aa:	1c5a      	adds	r2, r3, #1
    15ac:	9b01      	ldr	r3, [sp, #4]
    15ae:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    15b0:	9b01      	ldr	r3, [sp, #4]
    15b2:	689a      	ldr	r2, [r3, #8]
    15b4:	9b01      	ldr	r3, [sp, #4]
    15b6:	685b      	ldr	r3, [r3, #4]
    15b8:	429a      	cmp	r2, r3
    15ba:	d115      	bne.n	15e8 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    15bc:	9b01      	ldr	r3, [sp, #4]
    15be:	6918      	ldr	r0, [r3, #16]
    15c0:	9b01      	ldr	r3, [sp, #4]
    15c2:	6819      	ldr	r1, [r3, #0]
    15c4:	9b01      	ldr	r3, [sp, #4]
    15c6:	689b      	ldr	r3, [r3, #8]
    15c8:	461a      	mov	r2, r3
    15ca:	f7ff ffa7 	bl	151c <SEGGER_RTT_Write>
    15ce:	4602      	mov	r2, r0
    15d0:	9b01      	ldr	r3, [sp, #4]
    15d2:	689b      	ldr	r3, [r3, #8]
    15d4:	429a      	cmp	r2, r3
    15d6:	d004      	beq.n	15e2 <_StoreChar+0x70>
      p->ReturnValue = -1;
    15d8:	9b01      	ldr	r3, [sp, #4]
    15da:	f04f 32ff 	mov.w	r2, #4294967295
    15de:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    15e0:	e002      	b.n	15e8 <_StoreChar+0x76>
      p->Cnt = 0u;
    15e2:	9b01      	ldr	r3, [sp, #4]
    15e4:	2200      	movs	r2, #0
    15e6:	609a      	str	r2, [r3, #8]
}
    15e8:	bf00      	nop
    15ea:	b005      	add	sp, #20
    15ec:	f85d fb04 	ldr.w	pc, [sp], #4

000015f0 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    15f0:	b500      	push	{lr}
    15f2:	b08b      	sub	sp, #44	; 0x2c
    15f4:	9003      	str	r0, [sp, #12]
    15f6:	9102      	str	r1, [sp, #8]
    15f8:	9201      	str	r2, [sp, #4]
    15fa:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    15fc:	9b02      	ldr	r3, [sp, #8]
    15fe:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    1600:	2301      	movs	r3, #1
    1602:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    1604:	2301      	movs	r3, #1
    1606:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1608:	e007      	b.n	161a <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    160a:	9a08      	ldr	r2, [sp, #32]
    160c:	9b01      	ldr	r3, [sp, #4]
    160e:	fbb2 f3f3 	udiv	r3, r2, r3
    1612:	9308      	str	r3, [sp, #32]
    Width++;
    1614:	9b07      	ldr	r3, [sp, #28]
    1616:	3301      	adds	r3, #1
    1618:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    161a:	9a08      	ldr	r2, [sp, #32]
    161c:	9b01      	ldr	r3, [sp, #4]
    161e:	429a      	cmp	r2, r3
    1620:	d2f3      	bcs.n	160a <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    1622:	9a00      	ldr	r2, [sp, #0]
    1624:	9b07      	ldr	r3, [sp, #28]
    1626:	429a      	cmp	r2, r3
    1628:	d901      	bls.n	162e <_PrintUnsigned+0x3e>
    Width = NumDigits;
    162a:	9b00      	ldr	r3, [sp, #0]
    162c:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    162e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1630:	f003 0301 	and.w	r3, r3, #1
    1634:	2b00      	cmp	r3, #0
    1636:	d128      	bne.n	168a <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    163a:	2b00      	cmp	r3, #0
    163c:	d025      	beq.n	168a <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    163e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1640:	f003 0302 	and.w	r3, r3, #2
    1644:	2b00      	cmp	r3, #0
    1646:	d006      	beq.n	1656 <_PrintUnsigned+0x66>
    1648:	9b00      	ldr	r3, [sp, #0]
    164a:	2b00      	cmp	r3, #0
    164c:	d103      	bne.n	1656 <_PrintUnsigned+0x66>
        c = '0';
    164e:	2330      	movs	r3, #48	; 0x30
    1650:	f88d 301b 	strb.w	r3, [sp, #27]
    1654:	e002      	b.n	165c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1656:	2320      	movs	r3, #32
    1658:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    165c:	e00c      	b.n	1678 <_PrintUnsigned+0x88>
        FieldWidth--;
    165e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1660:	3b01      	subs	r3, #1
    1662:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1664:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1668:	4619      	mov	r1, r3
    166a:	9803      	ldr	r0, [sp, #12]
    166c:	f7ff ff81 	bl	1572 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1670:	9b03      	ldr	r3, [sp, #12]
    1672:	68db      	ldr	r3, [r3, #12]
    1674:	2b00      	cmp	r3, #0
    1676:	db07      	blt.n	1688 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    167a:	2b00      	cmp	r3, #0
    167c:	d005      	beq.n	168a <_PrintUnsigned+0x9a>
    167e:	9a07      	ldr	r2, [sp, #28]
    1680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1682:	429a      	cmp	r2, r3
    1684:	d3eb      	bcc.n	165e <_PrintUnsigned+0x6e>
    1686:	e000      	b.n	168a <_PrintUnsigned+0x9a>
          break;
    1688:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    168a:	9b03      	ldr	r3, [sp, #12]
    168c:	68db      	ldr	r3, [r3, #12]
    168e:	2b00      	cmp	r3, #0
    1690:	db55      	blt.n	173e <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1692:	9b00      	ldr	r3, [sp, #0]
    1694:	2b01      	cmp	r3, #1
    1696:	d903      	bls.n	16a0 <_PrintUnsigned+0xb0>
        NumDigits--;
    1698:	9b00      	ldr	r3, [sp, #0]
    169a:	3b01      	subs	r3, #1
    169c:	9300      	str	r3, [sp, #0]
    169e:	e009      	b.n	16b4 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    16a0:	9a02      	ldr	r2, [sp, #8]
    16a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16a4:	fbb2 f3f3 	udiv	r3, r2, r3
    16a8:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    16aa:	9a05      	ldr	r2, [sp, #20]
    16ac:	9b01      	ldr	r3, [sp, #4]
    16ae:	429a      	cmp	r2, r3
    16b0:	d200      	bcs.n	16b4 <_PrintUnsigned+0xc4>
          break;
    16b2:	e005      	b.n	16c0 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    16b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16b6:	9a01      	ldr	r2, [sp, #4]
    16b8:	fb02 f303 	mul.w	r3, r2, r3
    16bc:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    16be:	e7e8      	b.n	1692 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    16c0:	9a02      	ldr	r2, [sp, #8]
    16c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16c4:	fbb2 f3f3 	udiv	r3, r2, r3
    16c8:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    16ca:	9b05      	ldr	r3, [sp, #20]
    16cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    16ce:	fb02 f303 	mul.w	r3, r2, r3
    16d2:	9a02      	ldr	r2, [sp, #8]
    16d4:	1ad3      	subs	r3, r2, r3
    16d6:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    16d8:	4a1b      	ldr	r2, [pc, #108]	; (1748 <_PrintUnsigned+0x158>)
    16da:	9b05      	ldr	r3, [sp, #20]
    16dc:	4413      	add	r3, r2
    16de:	781b      	ldrb	r3, [r3, #0]
    16e0:	4619      	mov	r1, r3
    16e2:	9803      	ldr	r0, [sp, #12]
    16e4:	f7ff ff45 	bl	1572 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    16e8:	9b03      	ldr	r3, [sp, #12]
    16ea:	68db      	ldr	r3, [r3, #12]
    16ec:	2b00      	cmp	r3, #0
    16ee:	db08      	blt.n	1702 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    16f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    16f2:	9b01      	ldr	r3, [sp, #4]
    16f4:	fbb2 f3f3 	udiv	r3, r2, r3
    16f8:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    16fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16fc:	2b00      	cmp	r3, #0
    16fe:	d1df      	bne.n	16c0 <_PrintUnsigned+0xd0>
    1700:	e000      	b.n	1704 <_PrintUnsigned+0x114>
        break;
    1702:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1704:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1706:	f003 0301 	and.w	r3, r3, #1
    170a:	2b00      	cmp	r3, #0
    170c:	d017      	beq.n	173e <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    170e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1710:	2b00      	cmp	r3, #0
    1712:	d014      	beq.n	173e <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1714:	e00a      	b.n	172c <_PrintUnsigned+0x13c>
          FieldWidth--;
    1716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1718:	3b01      	subs	r3, #1
    171a:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    171c:	2120      	movs	r1, #32
    171e:	9803      	ldr	r0, [sp, #12]
    1720:	f7ff ff27 	bl	1572 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1724:	9b03      	ldr	r3, [sp, #12]
    1726:	68db      	ldr	r3, [r3, #12]
    1728:	2b00      	cmp	r3, #0
    172a:	db07      	blt.n	173c <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    172c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    172e:	2b00      	cmp	r3, #0
    1730:	d005      	beq.n	173e <_PrintUnsigned+0x14e>
    1732:	9a07      	ldr	r2, [sp, #28]
    1734:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1736:	429a      	cmp	r2, r3
    1738:	d3ed      	bcc.n	1716 <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    173a:	e000      	b.n	173e <_PrintUnsigned+0x14e>
            break;
    173c:	bf00      	nop
}
    173e:	bf00      	nop
    1740:	b00b      	add	sp, #44	; 0x2c
    1742:	f85d fb04 	ldr.w	pc, [sp], #4
    1746:	bf00      	nop
    1748:	00011024 	.word	0x00011024

0000174c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    174c:	b500      	push	{lr}
    174e:	b089      	sub	sp, #36	; 0x24
    1750:	9005      	str	r0, [sp, #20]
    1752:	9104      	str	r1, [sp, #16]
    1754:	9203      	str	r2, [sp, #12]
    1756:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1758:	9b04      	ldr	r3, [sp, #16]
    175a:	2b00      	cmp	r3, #0
    175c:	bfb8      	it	lt
    175e:	425b      	neglt	r3, r3
    1760:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1762:	2301      	movs	r3, #1
    1764:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1766:	e007      	b.n	1778 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1768:	9b03      	ldr	r3, [sp, #12]
    176a:	9a06      	ldr	r2, [sp, #24]
    176c:	fb92 f3f3 	sdiv	r3, r2, r3
    1770:	9306      	str	r3, [sp, #24]
    Width++;
    1772:	9b07      	ldr	r3, [sp, #28]
    1774:	3301      	adds	r3, #1
    1776:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1778:	9b03      	ldr	r3, [sp, #12]
    177a:	9a06      	ldr	r2, [sp, #24]
    177c:	429a      	cmp	r2, r3
    177e:	daf3      	bge.n	1768 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1780:	9a02      	ldr	r2, [sp, #8]
    1782:	9b07      	ldr	r3, [sp, #28]
    1784:	429a      	cmp	r2, r3
    1786:	d901      	bls.n	178c <_PrintInt+0x40>
    Width = NumDigits;
    1788:	9b02      	ldr	r3, [sp, #8]
    178a:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    178c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    178e:	2b00      	cmp	r3, #0
    1790:	d00a      	beq.n	17a8 <_PrintInt+0x5c>
    1792:	9b04      	ldr	r3, [sp, #16]
    1794:	2b00      	cmp	r3, #0
    1796:	db04      	blt.n	17a2 <_PrintInt+0x56>
    1798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    179a:	f003 0304 	and.w	r3, r3, #4
    179e:	2b00      	cmp	r3, #0
    17a0:	d002      	beq.n	17a8 <_PrintInt+0x5c>
    FieldWidth--;
    17a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    17a4:	3b01      	subs	r3, #1
    17a6:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    17a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    17aa:	f003 0302 	and.w	r3, r3, #2
    17ae:	2b00      	cmp	r3, #0
    17b0:	d002      	beq.n	17b8 <_PrintInt+0x6c>
    17b2:	9b02      	ldr	r3, [sp, #8]
    17b4:	2b00      	cmp	r3, #0
    17b6:	d01c      	beq.n	17f2 <_PrintInt+0xa6>
    17b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    17ba:	f003 0301 	and.w	r3, r3, #1
    17be:	2b00      	cmp	r3, #0
    17c0:	d117      	bne.n	17f2 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    17c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    17c4:	2b00      	cmp	r3, #0
    17c6:	d014      	beq.n	17f2 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    17c8:	e00a      	b.n	17e0 <_PrintInt+0x94>
        FieldWidth--;
    17ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    17cc:	3b01      	subs	r3, #1
    17ce:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    17d0:	2120      	movs	r1, #32
    17d2:	9805      	ldr	r0, [sp, #20]
    17d4:	f7ff fecd 	bl	1572 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    17d8:	9b05      	ldr	r3, [sp, #20]
    17da:	68db      	ldr	r3, [r3, #12]
    17dc:	2b00      	cmp	r3, #0
    17de:	db07      	blt.n	17f0 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    17e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    17e2:	2b00      	cmp	r3, #0
    17e4:	d005      	beq.n	17f2 <_PrintInt+0xa6>
    17e6:	9a07      	ldr	r2, [sp, #28]
    17e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    17ea:	429a      	cmp	r2, r3
    17ec:	d3ed      	bcc.n	17ca <_PrintInt+0x7e>
    17ee:	e000      	b.n	17f2 <_PrintInt+0xa6>
          break;
    17f0:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    17f2:	9b05      	ldr	r3, [sp, #20]
    17f4:	68db      	ldr	r3, [r3, #12]
    17f6:	2b00      	cmp	r3, #0
    17f8:	db4a      	blt.n	1890 <_PrintInt+0x144>
    if (v < 0) {
    17fa:	9b04      	ldr	r3, [sp, #16]
    17fc:	2b00      	cmp	r3, #0
    17fe:	da07      	bge.n	1810 <_PrintInt+0xc4>
      v = -v;
    1800:	9b04      	ldr	r3, [sp, #16]
    1802:	425b      	negs	r3, r3
    1804:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    1806:	212d      	movs	r1, #45	; 0x2d
    1808:	9805      	ldr	r0, [sp, #20]
    180a:	f7ff feb2 	bl	1572 <_StoreChar>
    180e:	e008      	b.n	1822 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1812:	f003 0304 	and.w	r3, r3, #4
    1816:	2b00      	cmp	r3, #0
    1818:	d003      	beq.n	1822 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    181a:	212b      	movs	r1, #43	; 0x2b
    181c:	9805      	ldr	r0, [sp, #20]
    181e:	f7ff fea8 	bl	1572 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1822:	9b05      	ldr	r3, [sp, #20]
    1824:	68db      	ldr	r3, [r3, #12]
    1826:	2b00      	cmp	r3, #0
    1828:	db32      	blt.n	1890 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    182a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    182c:	f003 0302 	and.w	r3, r3, #2
    1830:	2b00      	cmp	r3, #0
    1832:	d01f      	beq.n	1874 <_PrintInt+0x128>
    1834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1836:	f003 0301 	and.w	r3, r3, #1
    183a:	2b00      	cmp	r3, #0
    183c:	d11a      	bne.n	1874 <_PrintInt+0x128>
    183e:	9b02      	ldr	r3, [sp, #8]
    1840:	2b00      	cmp	r3, #0
    1842:	d117      	bne.n	1874 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1846:	2b00      	cmp	r3, #0
    1848:	d014      	beq.n	1874 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    184a:	e00a      	b.n	1862 <_PrintInt+0x116>
            FieldWidth--;
    184c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    184e:	3b01      	subs	r3, #1
    1850:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1852:	2130      	movs	r1, #48	; 0x30
    1854:	9805      	ldr	r0, [sp, #20]
    1856:	f7ff fe8c 	bl	1572 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    185a:	9b05      	ldr	r3, [sp, #20]
    185c:	68db      	ldr	r3, [r3, #12]
    185e:	2b00      	cmp	r3, #0
    1860:	db07      	blt.n	1872 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1864:	2b00      	cmp	r3, #0
    1866:	d005      	beq.n	1874 <_PrintInt+0x128>
    1868:	9a07      	ldr	r2, [sp, #28]
    186a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    186c:	429a      	cmp	r2, r3
    186e:	d3ed      	bcc.n	184c <_PrintInt+0x100>
    1870:	e000      	b.n	1874 <_PrintInt+0x128>
              break;
    1872:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1874:	9b05      	ldr	r3, [sp, #20]
    1876:	68db      	ldr	r3, [r3, #12]
    1878:	2b00      	cmp	r3, #0
    187a:	db09      	blt.n	1890 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    187c:	9904      	ldr	r1, [sp, #16]
    187e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1880:	9301      	str	r3, [sp, #4]
    1882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1884:	9300      	str	r3, [sp, #0]
    1886:	9b02      	ldr	r3, [sp, #8]
    1888:	9a03      	ldr	r2, [sp, #12]
    188a:	9805      	ldr	r0, [sp, #20]
    188c:	f7ff feb0 	bl	15f0 <_PrintUnsigned>
      }
    }
  }
}
    1890:	bf00      	nop
    1892:	b009      	add	sp, #36	; 0x24
    1894:	f85d fb04 	ldr.w	pc, [sp], #4

00001898 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1898:	b500      	push	{lr}
    189a:	b0a3      	sub	sp, #140	; 0x8c
    189c:	9005      	str	r0, [sp, #20]
    189e:	9104      	str	r1, [sp, #16]
    18a0:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    18a2:	ab06      	add	r3, sp, #24
    18a4:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    18a6:	2340      	movs	r3, #64	; 0x40
    18a8:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    18aa:	2300      	movs	r3, #0
    18ac:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    18ae:	9b05      	ldr	r3, [sp, #20]
    18b0:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    18b2:	2300      	movs	r3, #0
    18b4:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    18b6:	9b04      	ldr	r3, [sp, #16]
    18b8:	781b      	ldrb	r3, [r3, #0]
    18ba:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    18be:	9b04      	ldr	r3, [sp, #16]
    18c0:	3301      	adds	r3, #1
    18c2:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    18c4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    18c8:	2b00      	cmp	r3, #0
    18ca:	f000 819c 	beq.w	1c06 <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    18ce:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    18d2:	2b25      	cmp	r3, #37	; 0x25
    18d4:	f040 818b 	bne.w	1bee <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    18d8:	2300      	movs	r3, #0
    18da:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    18dc:	2301      	movs	r3, #1
    18de:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    18e0:	9b04      	ldr	r3, [sp, #16]
    18e2:	781b      	ldrb	r3, [r3, #0]
    18e4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    18e8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    18ec:	3b23      	subs	r3, #35	; 0x23
    18ee:	2b0d      	cmp	r3, #13
    18f0:	d83e      	bhi.n	1970 <SEGGER_RTT_vprintf+0xd8>
    18f2:	a201      	add	r2, pc, #4	; (adr r2, 18f8 <SEGGER_RTT_vprintf+0x60>)
    18f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    18f8:	00001961 	.word	0x00001961
    18fc:	00001971 	.word	0x00001971
    1900:	00001971 	.word	0x00001971
    1904:	00001971 	.word	0x00001971
    1908:	00001971 	.word	0x00001971
    190c:	00001971 	.word	0x00001971
    1910:	00001971 	.word	0x00001971
    1914:	00001971 	.word	0x00001971
    1918:	00001951 	.word	0x00001951
    191c:	00001971 	.word	0x00001971
    1920:	00001931 	.word	0x00001931
    1924:	00001971 	.word	0x00001971
    1928:	00001971 	.word	0x00001971
    192c:	00001941 	.word	0x00001941
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1930:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1932:	f043 0301 	orr.w	r3, r3, #1
    1936:	931e      	str	r3, [sp, #120]	; 0x78
    1938:	9b04      	ldr	r3, [sp, #16]
    193a:	3301      	adds	r3, #1
    193c:	9304      	str	r3, [sp, #16]
    193e:	e01a      	b.n	1976 <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1940:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1942:	f043 0302 	orr.w	r3, r3, #2
    1946:	931e      	str	r3, [sp, #120]	; 0x78
    1948:	9b04      	ldr	r3, [sp, #16]
    194a:	3301      	adds	r3, #1
    194c:	9304      	str	r3, [sp, #16]
    194e:	e012      	b.n	1976 <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1950:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1952:	f043 0304 	orr.w	r3, r3, #4
    1956:	931e      	str	r3, [sp, #120]	; 0x78
    1958:	9b04      	ldr	r3, [sp, #16]
    195a:	3301      	adds	r3, #1
    195c:	9304      	str	r3, [sp, #16]
    195e:	e00a      	b.n	1976 <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1960:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1962:	f043 0308 	orr.w	r3, r3, #8
    1966:	931e      	str	r3, [sp, #120]	; 0x78
    1968:	9b04      	ldr	r3, [sp, #16]
    196a:	3301      	adds	r3, #1
    196c:	9304      	str	r3, [sp, #16]
    196e:	e002      	b.n	1976 <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1970:	2300      	movs	r3, #0
    1972:	9320      	str	r3, [sp, #128]	; 0x80
    1974:	bf00      	nop
        }
      } while (v);
    1976:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1978:	2b00      	cmp	r3, #0
    197a:	d1b1      	bne.n	18e0 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    197c:	2300      	movs	r3, #0
    197e:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1980:	9b04      	ldr	r3, [sp, #16]
    1982:	781b      	ldrb	r3, [r3, #0]
    1984:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1988:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    198c:	2b2f      	cmp	r3, #47	; 0x2f
    198e:	d912      	bls.n	19b6 <SEGGER_RTT_vprintf+0x11e>
    1990:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1994:	2b39      	cmp	r3, #57	; 0x39
    1996:	d80e      	bhi.n	19b6 <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1998:	9b04      	ldr	r3, [sp, #16]
    199a:	3301      	adds	r3, #1
    199c:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    199e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    19a0:	4613      	mov	r3, r2
    19a2:	009b      	lsls	r3, r3, #2
    19a4:	4413      	add	r3, r2
    19a6:	005b      	lsls	r3, r3, #1
    19a8:	461a      	mov	r2, r3
    19aa:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    19ae:	4413      	add	r3, r2
    19b0:	3b30      	subs	r3, #48	; 0x30
    19b2:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    19b4:	e7e4      	b.n	1980 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    19b6:	2300      	movs	r3, #0
    19b8:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    19ba:	9b04      	ldr	r3, [sp, #16]
    19bc:	781b      	ldrb	r3, [r3, #0]
    19be:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    19c2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    19c6:	2b2e      	cmp	r3, #46	; 0x2e
    19c8:	d11d      	bne.n	1a06 <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    19ca:	9b04      	ldr	r3, [sp, #16]
    19cc:	3301      	adds	r3, #1
    19ce:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    19d0:	9b04      	ldr	r3, [sp, #16]
    19d2:	781b      	ldrb	r3, [r3, #0]
    19d4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    19d8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    19dc:	2b2f      	cmp	r3, #47	; 0x2f
    19de:	d912      	bls.n	1a06 <SEGGER_RTT_vprintf+0x16e>
    19e0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    19e4:	2b39      	cmp	r3, #57	; 0x39
    19e6:	d80e      	bhi.n	1a06 <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    19e8:	9b04      	ldr	r3, [sp, #16]
    19ea:	3301      	adds	r3, #1
    19ec:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    19ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    19f0:	4613      	mov	r3, r2
    19f2:	009b      	lsls	r3, r3, #2
    19f4:	4413      	add	r3, r2
    19f6:	005b      	lsls	r3, r3, #1
    19f8:	461a      	mov	r2, r3
    19fa:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    19fe:	4413      	add	r3, r2
    1a00:	3b30      	subs	r3, #48	; 0x30
    1a02:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1a04:	e7e4      	b.n	19d0 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    1a06:	9b04      	ldr	r3, [sp, #16]
    1a08:	781b      	ldrb	r3, [r3, #0]
    1a0a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    1a0e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1a12:	2b6c      	cmp	r3, #108	; 0x6c
    1a14:	d003      	beq.n	1a1e <SEGGER_RTT_vprintf+0x186>
    1a16:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1a1a:	2b68      	cmp	r3, #104	; 0x68
    1a1c:	d107      	bne.n	1a2e <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    1a1e:	9b04      	ldr	r3, [sp, #16]
    1a20:	3301      	adds	r3, #1
    1a22:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1a24:	9b04      	ldr	r3, [sp, #16]
    1a26:	781b      	ldrb	r3, [r3, #0]
    1a28:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    1a2c:	e7ef      	b.n	1a0e <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    1a2e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1a32:	2b25      	cmp	r3, #37	; 0x25
    1a34:	f000 80d0 	beq.w	1bd8 <SEGGER_RTT_vprintf+0x340>
    1a38:	2b25      	cmp	r3, #37	; 0x25
    1a3a:	f2c0 80d3 	blt.w	1be4 <SEGGER_RTT_vprintf+0x34c>
    1a3e:	2b78      	cmp	r3, #120	; 0x78
    1a40:	f300 80d0 	bgt.w	1be4 <SEGGER_RTT_vprintf+0x34c>
    1a44:	2b58      	cmp	r3, #88	; 0x58
    1a46:	f2c0 80cd 	blt.w	1be4 <SEGGER_RTT_vprintf+0x34c>
    1a4a:	3b58      	subs	r3, #88	; 0x58
    1a4c:	2b20      	cmp	r3, #32
    1a4e:	f200 80c9 	bhi.w	1be4 <SEGGER_RTT_vprintf+0x34c>
    1a52:	a201      	add	r2, pc, #4	; (adr r2, 1a58 <SEGGER_RTT_vprintf+0x1c0>)
    1a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1a58:	00001b49 	.word	0x00001b49
    1a5c:	00001be5 	.word	0x00001be5
    1a60:	00001be5 	.word	0x00001be5
    1a64:	00001be5 	.word	0x00001be5
    1a68:	00001be5 	.word	0x00001be5
    1a6c:	00001be5 	.word	0x00001be5
    1a70:	00001be5 	.word	0x00001be5
    1a74:	00001be5 	.word	0x00001be5
    1a78:	00001be5 	.word	0x00001be5
    1a7c:	00001be5 	.word	0x00001be5
    1a80:	00001be5 	.word	0x00001be5
    1a84:	00001add 	.word	0x00001add
    1a88:	00001b01 	.word	0x00001b01
    1a8c:	00001be5 	.word	0x00001be5
    1a90:	00001be5 	.word	0x00001be5
    1a94:	00001be5 	.word	0x00001be5
    1a98:	00001be5 	.word	0x00001be5
    1a9c:	00001be5 	.word	0x00001be5
    1aa0:	00001be5 	.word	0x00001be5
    1aa4:	00001be5 	.word	0x00001be5
    1aa8:	00001be5 	.word	0x00001be5
    1aac:	00001be5 	.word	0x00001be5
    1ab0:	00001be5 	.word	0x00001be5
    1ab4:	00001be5 	.word	0x00001be5
    1ab8:	00001bb5 	.word	0x00001bb5
    1abc:	00001be5 	.word	0x00001be5
    1ac0:	00001be5 	.word	0x00001be5
    1ac4:	00001b6d 	.word	0x00001b6d
    1ac8:	00001be5 	.word	0x00001be5
    1acc:	00001b25 	.word	0x00001b25
    1ad0:	00001be5 	.word	0x00001be5
    1ad4:	00001be5 	.word	0x00001be5
    1ad8:	00001b49 	.word	0x00001b49
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    1adc:	9b03      	ldr	r3, [sp, #12]
    1ade:	681b      	ldr	r3, [r3, #0]
    1ae0:	1d19      	adds	r1, r3, #4
    1ae2:	9a03      	ldr	r2, [sp, #12]
    1ae4:	6011      	str	r1, [r2, #0]
    1ae6:	681b      	ldr	r3, [r3, #0]
    1ae8:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    1aea:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1aec:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    1af0:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    1af4:	ab16      	add	r3, sp, #88	; 0x58
    1af6:	4611      	mov	r1, r2
    1af8:	4618      	mov	r0, r3
    1afa:	f7ff fd3a 	bl	1572 <_StoreChar>
        break;
    1afe:	e072      	b.n	1be6 <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    1b00:	9b03      	ldr	r3, [sp, #12]
    1b02:	681b      	ldr	r3, [r3, #0]
    1b04:	1d19      	adds	r1, r3, #4
    1b06:	9a03      	ldr	r2, [sp, #12]
    1b08:	6011      	str	r1, [r2, #0]
    1b0a:	681b      	ldr	r3, [r3, #0]
    1b0c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    1b0e:	a816      	add	r0, sp, #88	; 0x58
    1b10:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1b12:	9301      	str	r3, [sp, #4]
    1b14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1b16:	9300      	str	r3, [sp, #0]
    1b18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1b1a:	220a      	movs	r2, #10
    1b1c:	9920      	ldr	r1, [sp, #128]	; 0x80
    1b1e:	f7ff fe15 	bl	174c <_PrintInt>
        break;
    1b22:	e060      	b.n	1be6 <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    1b24:	9b03      	ldr	r3, [sp, #12]
    1b26:	681b      	ldr	r3, [r3, #0]
    1b28:	1d19      	adds	r1, r3, #4
    1b2a:	9a03      	ldr	r2, [sp, #12]
    1b2c:	6011      	str	r1, [r2, #0]
    1b2e:	681b      	ldr	r3, [r3, #0]
    1b30:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    1b32:	9920      	ldr	r1, [sp, #128]	; 0x80
    1b34:	a816      	add	r0, sp, #88	; 0x58
    1b36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1b38:	9301      	str	r3, [sp, #4]
    1b3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1b3c:	9300      	str	r3, [sp, #0]
    1b3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1b40:	220a      	movs	r2, #10
    1b42:	f7ff fd55 	bl	15f0 <_PrintUnsigned>
        break;
    1b46:	e04e      	b.n	1be6 <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1b48:	9b03      	ldr	r3, [sp, #12]
    1b4a:	681b      	ldr	r3, [r3, #0]
    1b4c:	1d19      	adds	r1, r3, #4
    1b4e:	9a03      	ldr	r2, [sp, #12]
    1b50:	6011      	str	r1, [r2, #0]
    1b52:	681b      	ldr	r3, [r3, #0]
    1b54:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    1b56:	9920      	ldr	r1, [sp, #128]	; 0x80
    1b58:	a816      	add	r0, sp, #88	; 0x58
    1b5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1b5c:	9301      	str	r3, [sp, #4]
    1b5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1b60:	9300      	str	r3, [sp, #0]
    1b62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1b64:	2210      	movs	r2, #16
    1b66:	f7ff fd43 	bl	15f0 <_PrintUnsigned>
        break;
    1b6a:	e03c      	b.n	1be6 <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    1b6c:	9b03      	ldr	r3, [sp, #12]
    1b6e:	681b      	ldr	r3, [r3, #0]
    1b70:	1d19      	adds	r1, r3, #4
    1b72:	9a03      	ldr	r2, [sp, #12]
    1b74:	6011      	str	r1, [r2, #0]
    1b76:	681b      	ldr	r3, [r3, #0]
    1b78:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    1b7a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1b7c:	2b00      	cmp	r3, #0
    1b7e:	d101      	bne.n	1b84 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    1b80:	4b2c      	ldr	r3, [pc, #176]	; (1c34 <SEGGER_RTT_vprintf+0x39c>)
    1b82:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    1b84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1b86:	781b      	ldrb	r3, [r3, #0]
    1b88:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    1b8c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1b8e:	3301      	adds	r3, #1
    1b90:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    1b92:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1b96:	2b00      	cmp	r3, #0
    1b98:	d00a      	beq.n	1bb0 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    1b9a:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1b9e:	ab16      	add	r3, sp, #88	; 0x58
    1ba0:	4611      	mov	r1, r2
    1ba2:	4618      	mov	r0, r3
    1ba4:	f7ff fce5 	bl	1572 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1ba8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1baa:	2b00      	cmp	r3, #0
    1bac:	daea      	bge.n	1b84 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    1bae:	e01a      	b.n	1be6 <SEGGER_RTT_vprintf+0x34e>
              break;
    1bb0:	bf00      	nop
        break;
    1bb2:	e018      	b.n	1be6 <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    1bb4:	9b03      	ldr	r3, [sp, #12]
    1bb6:	681b      	ldr	r3, [r3, #0]
    1bb8:	1d19      	adds	r1, r3, #4
    1bba:	9a03      	ldr	r2, [sp, #12]
    1bbc:	6011      	str	r1, [r2, #0]
    1bbe:	681b      	ldr	r3, [r3, #0]
    1bc0:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    1bc2:	9920      	ldr	r1, [sp, #128]	; 0x80
    1bc4:	a816      	add	r0, sp, #88	; 0x58
    1bc6:	2300      	movs	r3, #0
    1bc8:	9301      	str	r3, [sp, #4]
    1bca:	2308      	movs	r3, #8
    1bcc:	9300      	str	r3, [sp, #0]
    1bce:	2308      	movs	r3, #8
    1bd0:	2210      	movs	r2, #16
    1bd2:	f7ff fd0d 	bl	15f0 <_PrintUnsigned>
        break;
    1bd6:	e006      	b.n	1be6 <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1bd8:	ab16      	add	r3, sp, #88	; 0x58
    1bda:	2125      	movs	r1, #37	; 0x25
    1bdc:	4618      	mov	r0, r3
    1bde:	f7ff fcc8 	bl	1572 <_StoreChar>
        break;
    1be2:	e000      	b.n	1be6 <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    1be4:	bf00      	nop
      }
      sFormat++;
    1be6:	9b04      	ldr	r3, [sp, #16]
    1be8:	3301      	adds	r3, #1
    1bea:	9304      	str	r3, [sp, #16]
    1bec:	e006      	b.n	1bfc <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    1bee:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1bf2:	ab16      	add	r3, sp, #88	; 0x58
    1bf4:	4611      	mov	r1, r2
    1bf6:	4618      	mov	r0, r3
    1bf8:	f7ff fcbb 	bl	1572 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    1bfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1bfe:	2b00      	cmp	r3, #0
    1c00:	f6bf ae59 	bge.w	18b6 <SEGGER_RTT_vprintf+0x1e>
    1c04:	e000      	b.n	1c08 <SEGGER_RTT_vprintf+0x370>
      break;
    1c06:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    1c08:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1c0a:	2b00      	cmp	r3, #0
    1c0c:	dd0c      	ble.n	1c28 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    1c0e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1c10:	2b00      	cmp	r3, #0
    1c12:	d005      	beq.n	1c20 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    1c14:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1c16:	ab06      	add	r3, sp, #24
    1c18:	4619      	mov	r1, r3
    1c1a:	9805      	ldr	r0, [sp, #20]
    1c1c:	f7ff fc7e 	bl	151c <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1c20:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1c22:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1c24:	4413      	add	r3, r2
    1c26:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1c28:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    1c2a:	4618      	mov	r0, r3
    1c2c:	b023      	add	sp, #140	; 0x8c
    1c2e:	f85d fb04 	ldr.w	pc, [sp], #4
    1c32:	bf00      	nop
    1c34:	0000fcd0 	.word	0x0000fcd0

00001c38 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1c38:	b40e      	push	{r1, r2, r3}
    1c3a:	b500      	push	{lr}
    1c3c:	b084      	sub	sp, #16
    1c3e:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1c40:	ab06      	add	r3, sp, #24
    1c42:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1c44:	ab02      	add	r3, sp, #8
    1c46:	461a      	mov	r2, r3
    1c48:	9905      	ldr	r1, [sp, #20]
    1c4a:	9801      	ldr	r0, [sp, #4]
    1c4c:	f7ff fe24 	bl	1898 <SEGGER_RTT_vprintf>
    1c50:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    1c52:	9b03      	ldr	r3, [sp, #12]
}
    1c54:	4618      	mov	r0, r3
    1c56:	b004      	add	sp, #16
    1c58:	f85d eb04 	ldr.w	lr, [sp], #4
    1c5c:	b003      	add	sp, #12
    1c5e:	4770      	bx	lr

00001c60 <memcpy>:
    1c60:	440a      	add	r2, r1
    1c62:	4291      	cmp	r1, r2
    1c64:	f100 33ff 	add.w	r3, r0, #4294967295
    1c68:	d100      	bne.n	1c6c <memcpy+0xc>
    1c6a:	4770      	bx	lr
    1c6c:	b510      	push	{r4, lr}
    1c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c72:	f803 4f01 	strb.w	r4, [r3, #1]!
    1c76:	4291      	cmp	r1, r2
    1c78:	d1f9      	bne.n	1c6e <memcpy+0xe>
    1c7a:	bd10      	pop	{r4, pc}

00001c7c <memset>:
    1c7c:	4402      	add	r2, r0
    1c7e:	4603      	mov	r3, r0
    1c80:	4293      	cmp	r3, r2
    1c82:	d100      	bne.n	1c86 <memset+0xa>
    1c84:	4770      	bx	lr
    1c86:	f803 1b01 	strb.w	r1, [r3], #1
    1c8a:	e7f9      	b.n	1c80 <memset+0x4>

00001c8c <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1c8c:	b086      	sub	sp, #24
    1c8e:	9003      	str	r0, [sp, #12]
    1c90:	9102      	str	r1, [sp, #8]
    1c92:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    1c94:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1c98:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    1c9c:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    1c9e:	9b01      	ldr	r3, [sp, #4]
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	d007      	beq.n	1cb4 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    1ca4:	9b03      	ldr	r3, [sp, #12]
    1ca6:	3310      	adds	r3, #16
    1ca8:	009b      	lsls	r3, r3, #2
    1caa:	9a05      	ldr	r2, [sp, #20]
    1cac:	4413      	add	r3, r2
    1cae:	681a      	ldr	r2, [r3, #0]
    1cb0:	9b01      	ldr	r3, [sp, #4]
    1cb2:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    1cb4:	9b03      	ldr	r3, [sp, #12]
    1cb6:	3310      	adds	r3, #16
    1cb8:	009b      	lsls	r3, r3, #2
    1cba:	9a05      	ldr	r2, [sp, #20]
    1cbc:	4413      	add	r3, r2
    1cbe:	9a02      	ldr	r2, [sp, #8]
    1cc0:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    1cc2:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    1cc6:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    1cca:	bf00      	nop
    1ccc:	b006      	add	sp, #24
    1cce:	4770      	bx	lr

00001cd0 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1cd0:	b082      	sub	sp, #8
    1cd2:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1cd4:	9b01      	ldr	r3, [sp, #4]
    1cd6:	f003 021f 	and.w	r2, r3, #31
    1cda:	4905      	ldr	r1, [pc, #20]	; (1cf0 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    1cdc:	9b01      	ldr	r3, [sp, #4]
    1cde:	095b      	lsrs	r3, r3, #5
    1ce0:	2001      	movs	r0, #1
    1ce2:	fa00 f202 	lsl.w	r2, r0, r2
    1ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1cea:	bf00      	nop
    1cec:	b002      	add	sp, #8
    1cee:	4770      	bx	lr
    1cf0:	e000e100 	.word	0xe000e100

00001cf4 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1cf4:	b082      	sub	sp, #8
    1cf6:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1cf8:	9b01      	ldr	r3, [sp, #4]
    1cfa:	f003 021f 	and.w	r2, r3, #31
    1cfe:	4906      	ldr	r1, [pc, #24]	; (1d18 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    1d00:	9b01      	ldr	r3, [sp, #4]
    1d02:	095b      	lsrs	r3, r3, #5
    1d04:	2001      	movs	r0, #1
    1d06:	fa00 f202 	lsl.w	r2, r0, r2
    1d0a:	3320      	adds	r3, #32
    1d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1d10:	bf00      	nop
    1d12:	b002      	add	sp, #8
    1d14:	4770      	bx	lr
    1d16:	bf00      	nop
    1d18:	e000e100 	.word	0xe000e100

00001d1c <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1d1c:	b084      	sub	sp, #16
    1d1e:	9001      	str	r0, [sp, #4]
    1d20:	460b      	mov	r3, r1
    1d22:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1d26:	2304      	movs	r3, #4
    1d28:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    1d2c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1d30:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d34:	fa02 f103 	lsl.w	r1, r2, r3
    1d38:	4a04      	ldr	r2, [pc, #16]	; (1d4c <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    1d3a:	9b01      	ldr	r3, [sp, #4]
    1d3c:	b2c9      	uxtb	r1, r1
    1d3e:	4413      	add	r3, r2
    1d40:	460a      	mov	r2, r1
    1d42:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    1d46:	bf00      	nop
    1d48:	b004      	add	sp, #16
    1d4a:	4770      	bx	lr
    1d4c:	e000e100 	.word	0xe000e100

00001d50 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    1d50:	b084      	sub	sp, #16
    1d52:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1d54:	2304      	movs	r3, #4
    1d56:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    1d5a:	4a09      	ldr	r2, [pc, #36]	; (1d80 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    1d5c:	9b01      	ldr	r3, [sp, #4]
    1d5e:	4413      	add	r3, r2
    1d60:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    1d64:	b2db      	uxtb	r3, r3
    1d66:	461a      	mov	r2, r3
    1d68:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d6c:	fa42 f303 	asr.w	r3, r2, r3
    1d70:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    1d74:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    1d78:	4618      	mov	r0, r3
    1d7a:	b004      	add	sp, #16
    1d7c:	4770      	bx	lr
    1d7e:	bf00      	nop
    1d80:	e000e100 	.word	0xe000e100

00001d84 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    1d84:	b082      	sub	sp, #8
    1d86:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1d88:	9b01      	ldr	r3, [sp, #4]
    1d8a:	f003 021f 	and.w	r2, r3, #31
    1d8e:	4906      	ldr	r1, [pc, #24]	; (1da8 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    1d90:	9b01      	ldr	r3, [sp, #4]
    1d92:	095b      	lsrs	r3, r3, #5
    1d94:	2001      	movs	r0, #1
    1d96:	fa00 f202 	lsl.w	r2, r0, r2
    1d9a:	3360      	adds	r3, #96	; 0x60
    1d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    1da0:	bf00      	nop
    1da2:	b002      	add	sp, #8
    1da4:	4770      	bx	lr
    1da6:	bf00      	nop
    1da8:	e000e100 	.word	0xe000e100

00001dac <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1dac:	b500      	push	{lr}
    1dae:	b085      	sub	sp, #20
    1db0:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1db2:	2300      	movs	r3, #0
    1db4:	9303      	str	r3, [sp, #12]
    1db6:	e05d      	b.n	1e74 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1db8:	9b01      	ldr	r3, [sp, #4]
    1dba:	6859      	ldr	r1, [r3, #4]
    1dbc:	9a03      	ldr	r2, [sp, #12]
    1dbe:	4613      	mov	r3, r2
    1dc0:	005b      	lsls	r3, r3, #1
    1dc2:	4413      	add	r3, r2
    1dc4:	009b      	lsls	r3, r3, #2
    1dc6:	440b      	add	r3, r1
    1dc8:	681b      	ldr	r3, [r3, #0]
    1dca:	4618      	mov	r0, r3
    1dcc:	f000 f899 	bl	1f02 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1dd0:	9b01      	ldr	r3, [sp, #4]
    1dd2:	6859      	ldr	r1, [r3, #4]
    1dd4:	9a03      	ldr	r2, [sp, #12]
    1dd6:	4613      	mov	r3, r2
    1dd8:	005b      	lsls	r3, r3, #1
    1dda:	4413      	add	r3, r2
    1ddc:	009b      	lsls	r3, r3, #2
    1dde:	440b      	add	r3, r1
    1de0:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1de2:	9b01      	ldr	r3, [sp, #4]
    1de4:	6859      	ldr	r1, [r3, #4]
    1de6:	9a03      	ldr	r2, [sp, #12]
    1de8:	4613      	mov	r3, r2
    1dea:	005b      	lsls	r3, r3, #1
    1dec:	4413      	add	r3, r2
    1dee:	009b      	lsls	r3, r3, #2
    1df0:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1df2:	795b      	ldrb	r3, [r3, #5]
    1df4:	4619      	mov	r1, r3
    1df6:	f000 f869 	bl	1ecc <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1dfa:	9b01      	ldr	r3, [sp, #4]
    1dfc:	6859      	ldr	r1, [r3, #4]
    1dfe:	9a03      	ldr	r2, [sp, #12]
    1e00:	4613      	mov	r3, r2
    1e02:	005b      	lsls	r3, r3, #1
    1e04:	4413      	add	r3, r2
    1e06:	009b      	lsls	r3, r3, #2
    1e08:	440b      	add	r3, r1
    1e0a:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1e0c:	9b01      	ldr	r3, [sp, #4]
    1e0e:	6859      	ldr	r1, [r3, #4]
    1e10:	9a03      	ldr	r2, [sp, #12]
    1e12:	4613      	mov	r3, r2
    1e14:	005b      	lsls	r3, r3, #1
    1e16:	4413      	add	r3, r2
    1e18:	009b      	lsls	r3, r3, #2
    1e1a:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1e1c:	689b      	ldr	r3, [r3, #8]
    1e1e:	2200      	movs	r2, #0
    1e20:	4619      	mov	r1, r3
    1e22:	f000 f831 	bl	1e88 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1e26:	9b01      	ldr	r3, [sp, #4]
    1e28:	6859      	ldr	r1, [r3, #4]
    1e2a:	9a03      	ldr	r2, [sp, #12]
    1e2c:	4613      	mov	r3, r2
    1e2e:	005b      	lsls	r3, r3, #1
    1e30:	4413      	add	r3, r2
    1e32:	009b      	lsls	r3, r3, #2
    1e34:	440b      	add	r3, r1
    1e36:	791b      	ldrb	r3, [r3, #4]
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d00c      	beq.n	1e56 <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1e3c:	9b01      	ldr	r3, [sp, #4]
    1e3e:	6859      	ldr	r1, [r3, #4]
    1e40:	9a03      	ldr	r2, [sp, #12]
    1e42:	4613      	mov	r3, r2
    1e44:	005b      	lsls	r3, r3, #1
    1e46:	4413      	add	r3, r2
    1e48:	009b      	lsls	r3, r3, #2
    1e4a:	440b      	add	r3, r1
    1e4c:	681b      	ldr	r3, [r3, #0]
    1e4e:	4618      	mov	r0, r3
    1e50:	f000 f828 	bl	1ea4 <IntCtrl_Ip_EnableIrq>
    1e54:	e00b      	b.n	1e6e <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1e56:	9b01      	ldr	r3, [sp, #4]
    1e58:	6859      	ldr	r1, [r3, #4]
    1e5a:	9a03      	ldr	r2, [sp, #12]
    1e5c:	4613      	mov	r3, r2
    1e5e:	005b      	lsls	r3, r3, #1
    1e60:	4413      	add	r3, r2
    1e62:	009b      	lsls	r3, r3, #2
    1e64:	440b      	add	r3, r1
    1e66:	681b      	ldr	r3, [r3, #0]
    1e68:	4618      	mov	r0, r3
    1e6a:	f000 f825 	bl	1eb8 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1e6e:	9b03      	ldr	r3, [sp, #12]
    1e70:	3301      	adds	r3, #1
    1e72:	9303      	str	r3, [sp, #12]
    1e74:	9b01      	ldr	r3, [sp, #4]
    1e76:	681b      	ldr	r3, [r3, #0]
    1e78:	9a03      	ldr	r2, [sp, #12]
    1e7a:	429a      	cmp	r2, r3
    1e7c:	d39c      	bcc.n	1db8 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    1e7e:	2300      	movs	r3, #0
}
    1e80:	4618      	mov	r0, r3
    1e82:	b005      	add	sp, #20
    1e84:	f85d fb04 	ldr.w	pc, [sp], #4

00001e88 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1e88:	b500      	push	{lr}
    1e8a:	b085      	sub	sp, #20
    1e8c:	9003      	str	r0, [sp, #12]
    1e8e:	9102      	str	r1, [sp, #8]
    1e90:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    1e92:	9a01      	ldr	r2, [sp, #4]
    1e94:	9902      	ldr	r1, [sp, #8]
    1e96:	9803      	ldr	r0, [sp, #12]
    1e98:	f7ff fef8 	bl	1c8c <IntCtrl_Ip_InstallHandlerPrivileged>
}
    1e9c:	bf00      	nop
    1e9e:	b005      	add	sp, #20
    1ea0:	f85d fb04 	ldr.w	pc, [sp], #4

00001ea4 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    1ea4:	b500      	push	{lr}
    1ea6:	b083      	sub	sp, #12
    1ea8:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    1eaa:	9801      	ldr	r0, [sp, #4]
    1eac:	f7ff ff10 	bl	1cd0 <IntCtrl_Ip_EnableIrqPrivileged>
}
    1eb0:	bf00      	nop
    1eb2:	b003      	add	sp, #12
    1eb4:	f85d fb04 	ldr.w	pc, [sp], #4

00001eb8 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    1eb8:	b500      	push	{lr}
    1eba:	b083      	sub	sp, #12
    1ebc:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    1ebe:	9801      	ldr	r0, [sp, #4]
    1ec0:	f7ff ff18 	bl	1cf4 <IntCtrl_Ip_DisableIrqPrivileged>
}
    1ec4:	bf00      	nop
    1ec6:	b003      	add	sp, #12
    1ec8:	f85d fb04 	ldr.w	pc, [sp], #4

00001ecc <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1ecc:	b500      	push	{lr}
    1ece:	b083      	sub	sp, #12
    1ed0:	9001      	str	r0, [sp, #4]
    1ed2:	460b      	mov	r3, r1
    1ed4:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1ed8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1edc:	4619      	mov	r1, r3
    1ede:	9801      	ldr	r0, [sp, #4]
    1ee0:	f7ff ff1c 	bl	1d1c <IntCtrl_Ip_SetPriorityPrivileged>
}
    1ee4:	bf00      	nop
    1ee6:	b003      	add	sp, #12
    1ee8:	f85d fb04 	ldr.w	pc, [sp], #4

00001eec <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    1eec:	b500      	push	{lr}
    1eee:	b083      	sub	sp, #12
    1ef0:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    1ef2:	9801      	ldr	r0, [sp, #4]
    1ef4:	f7ff ff2c 	bl	1d50 <IntCtrl_Ip_GetPriorityPrivileged>
    1ef8:	4603      	mov	r3, r0
}
    1efa:	4618      	mov	r0, r3
    1efc:	b003      	add	sp, #12
    1efe:	f85d fb04 	ldr.w	pc, [sp], #4

00001f02 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    1f02:	b500      	push	{lr}
    1f04:	b083      	sub	sp, #12
    1f06:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    1f08:	9801      	ldr	r0, [sp, #4]
    1f0a:	f7ff ff3b 	bl	1d84 <IntCtrl_Ip_ClearPendingPrivileged>
}
    1f0e:	bf00      	nop
    1f10:	b003      	add	sp, #12
    1f12:	f85d fb04 	ldr.w	pc, [sp], #4
    1f16:	bf00      	nop

00001f18 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1f18:	b500      	push	{lr}
    1f1a:	b083      	sub	sp, #12
    1f1c:	9001      	str	r0, [sp, #4]
    1f1e:	460b      	mov	r3, r1
    1f20:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1f24:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1f28:	2b00      	cmp	r3, #0
    1f2a:	d003      	beq.n	1f34 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    1f2c:	9801      	ldr	r0, [sp, #4]
    1f2e:	f7ff ffb9 	bl	1ea4 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    1f32:	e002      	b.n	1f3a <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1f34:	9801      	ldr	r0, [sp, #4]
    1f36:	f7ff ffbf 	bl	1eb8 <IntCtrl_Ip_DisableIrq>
}
    1f3a:	bf00      	nop
    1f3c:	b003      	add	sp, #12
    1f3e:	f85d fb04 	ldr.w	pc, [sp], #4

00001f42 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1f42:	b500      	push	{lr}
    1f44:	b083      	sub	sp, #12
    1f46:	9001      	str	r0, [sp, #4]
    1f48:	460b      	mov	r3, r1
    1f4a:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    1f4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1f52:	4619      	mov	r1, r3
    1f54:	9801      	ldr	r0, [sp, #4]
    1f56:	f7ff ffb9 	bl	1ecc <IntCtrl_Ip_SetPriority>
}
    1f5a:	bf00      	nop
    1f5c:	b003      	add	sp, #12
    1f5e:	f85d fb04 	ldr.w	pc, [sp], #4

00001f62 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    1f62:	b500      	push	{lr}
    1f64:	b083      	sub	sp, #12
    1f66:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1f68:	9801      	ldr	r0, [sp, #4]
    1f6a:	f7ff ffbf 	bl	1eec <IntCtrl_Ip_GetPriority>
    1f6e:	4603      	mov	r3, r0
}
    1f70:	4618      	mov	r0, r3
    1f72:	b003      	add	sp, #12
    1f74:	f85d fb04 	ldr.w	pc, [sp], #4

00001f78 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1f78:	b500      	push	{lr}
    1f7a:	b085      	sub	sp, #20
    1f7c:	9003      	str	r0, [sp, #12]
    1f7e:	9102      	str	r1, [sp, #8]
    1f80:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1f82:	9a01      	ldr	r2, [sp, #4]
    1f84:	9902      	ldr	r1, [sp, #8]
    1f86:	9803      	ldr	r0, [sp, #12]
    1f88:	f7ff ff7e 	bl	1e88 <IntCtrl_Ip_InstallHandler>
}
    1f8c:	bf00      	nop
    1f8e:	b005      	add	sp, #20
    1f90:	f85d fb04 	ldr.w	pc, [sp], #4

00001f94 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    1f94:	b500      	push	{lr}
    1f96:	b085      	sub	sp, #20
    1f98:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    1f9a:	2300      	movs	r3, #0
    1f9c:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    1fa0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1fa4:	4a05      	ldr	r2, [pc, #20]	; (1fbc <Platform_Init+0x28>)
    1fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1faa:	681b      	ldr	r3, [r3, #0]
    1fac:	4618      	mov	r0, r3
    1fae:	f000 f8c7 	bl	2140 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    1fb2:	bf00      	nop
    1fb4:	b005      	add	sp, #20
    1fb6:	f85d fb04 	ldr.w	pc, [sp], #4
    1fba:	bf00      	nop
    1fbc:	00010b20 	.word	0x00010b20

00001fc0 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1fc0:	b500      	push	{lr}
    1fc2:	b085      	sub	sp, #20
    1fc4:	9001      	str	r0, [sp, #4]
    1fc6:	460b      	mov	r3, r1
    1fc8:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1fcc:	2300      	movs	r3, #0
    1fce:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    1fd2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1fd6:	4619      	mov	r1, r3
    1fd8:	9801      	ldr	r0, [sp, #4]
    1fda:	f7ff ff9d 	bl	1f18 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    1fde:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1fe2:	4618      	mov	r0, r3
    1fe4:	b005      	add	sp, #20
    1fe6:	f85d fb04 	ldr.w	pc, [sp], #4

00001fea <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1fea:	b500      	push	{lr}
    1fec:	b085      	sub	sp, #20
    1fee:	9001      	str	r0, [sp, #4]
    1ff0:	460b      	mov	r3, r1
    1ff2:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1ff6:	2300      	movs	r3, #0
    1ff8:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    1ffc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2000:	4619      	mov	r1, r3
    2002:	9801      	ldr	r0, [sp, #4]
    2004:	f7ff ff9d 	bl	1f42 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    2008:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    200c:	4618      	mov	r0, r3
    200e:	b005      	add	sp, #20
    2010:	f85d fb04 	ldr.w	pc, [sp], #4

00002014 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    2014:	b500      	push	{lr}
    2016:	b085      	sub	sp, #20
    2018:	9001      	str	r0, [sp, #4]
    201a:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    201c:	2300      	movs	r3, #0
    201e:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    2022:	9801      	ldr	r0, [sp, #4]
    2024:	f7ff ff9d 	bl	1f62 <Platform_Ipw_GetIrqPriority>
    2028:	4603      	mov	r3, r0
    202a:	461a      	mov	r2, r3
    202c:	9b00      	ldr	r3, [sp, #0]
    202e:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    2030:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    2034:	4618      	mov	r0, r3
    2036:	b005      	add	sp, #20
    2038:	f85d fb04 	ldr.w	pc, [sp], #4

0000203c <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    203c:	b500      	push	{lr}
    203e:	b087      	sub	sp, #28
    2040:	9003      	str	r0, [sp, #12]
    2042:	9102      	str	r1, [sp, #8]
    2044:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2046:	2300      	movs	r3, #0
    2048:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    204c:	9a01      	ldr	r2, [sp, #4]
    204e:	9902      	ldr	r1, [sp, #8]
    2050:	9803      	ldr	r0, [sp, #12]
    2052:	f7ff ff91 	bl	1f78 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    2056:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    205a:	4618      	mov	r0, r3
    205c:	b007      	add	sp, #28
    205e:	f85d fb04 	ldr.w	pc, [sp], #4
    2062:	bf00      	nop

00002064 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    2064:	b500      	push	{lr}
    2066:	b085      	sub	sp, #20
    2068:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    206a:	2300      	movs	r3, #0
    206c:	9303      	str	r3, [sp, #12]
    206e:	e05d      	b.n	212c <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2070:	9b01      	ldr	r3, [sp, #4]
    2072:	6859      	ldr	r1, [r3, #4]
    2074:	9a03      	ldr	r2, [sp, #12]
    2076:	4613      	mov	r3, r2
    2078:	005b      	lsls	r3, r3, #1
    207a:	4413      	add	r3, r2
    207c:	009b      	lsls	r3, r3, #2
    207e:	440b      	add	r3, r1
    2080:	681b      	ldr	r3, [r3, #0]
    2082:	4618      	mov	r0, r3
    2084:	f7ff ff3d 	bl	1f02 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2088:	9b01      	ldr	r3, [sp, #4]
    208a:	6859      	ldr	r1, [r3, #4]
    208c:	9a03      	ldr	r2, [sp, #12]
    208e:	4613      	mov	r3, r2
    2090:	005b      	lsls	r3, r3, #1
    2092:	4413      	add	r3, r2
    2094:	009b      	lsls	r3, r3, #2
    2096:	440b      	add	r3, r1
    2098:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    209a:	9b01      	ldr	r3, [sp, #4]
    209c:	6859      	ldr	r1, [r3, #4]
    209e:	9a03      	ldr	r2, [sp, #12]
    20a0:	4613      	mov	r3, r2
    20a2:	005b      	lsls	r3, r3, #1
    20a4:	4413      	add	r3, r2
    20a6:	009b      	lsls	r3, r3, #2
    20a8:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    20aa:	795b      	ldrb	r3, [r3, #5]
    20ac:	4619      	mov	r1, r3
    20ae:	f7ff ff0d 	bl	1ecc <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    20b2:	9b01      	ldr	r3, [sp, #4]
    20b4:	6859      	ldr	r1, [r3, #4]
    20b6:	9a03      	ldr	r2, [sp, #12]
    20b8:	4613      	mov	r3, r2
    20ba:	005b      	lsls	r3, r3, #1
    20bc:	4413      	add	r3, r2
    20be:	009b      	lsls	r3, r3, #2
    20c0:	440b      	add	r3, r1
    20c2:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    20c4:	9b01      	ldr	r3, [sp, #4]
    20c6:	6859      	ldr	r1, [r3, #4]
    20c8:	9a03      	ldr	r2, [sp, #12]
    20ca:	4613      	mov	r3, r2
    20cc:	005b      	lsls	r3, r3, #1
    20ce:	4413      	add	r3, r2
    20d0:	009b      	lsls	r3, r3, #2
    20d2:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    20d4:	689b      	ldr	r3, [r3, #8]
    20d6:	2200      	movs	r2, #0
    20d8:	4619      	mov	r1, r3
    20da:	f7ff fed5 	bl	1e88 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    20de:	9b01      	ldr	r3, [sp, #4]
    20e0:	6859      	ldr	r1, [r3, #4]
    20e2:	9a03      	ldr	r2, [sp, #12]
    20e4:	4613      	mov	r3, r2
    20e6:	005b      	lsls	r3, r3, #1
    20e8:	4413      	add	r3, r2
    20ea:	009b      	lsls	r3, r3, #2
    20ec:	440b      	add	r3, r1
    20ee:	791b      	ldrb	r3, [r3, #4]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d00c      	beq.n	210e <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    20f4:	9b01      	ldr	r3, [sp, #4]
    20f6:	6859      	ldr	r1, [r3, #4]
    20f8:	9a03      	ldr	r2, [sp, #12]
    20fa:	4613      	mov	r3, r2
    20fc:	005b      	lsls	r3, r3, #1
    20fe:	4413      	add	r3, r2
    2100:	009b      	lsls	r3, r3, #2
    2102:	440b      	add	r3, r1
    2104:	681b      	ldr	r3, [r3, #0]
    2106:	4618      	mov	r0, r3
    2108:	f7ff fecc 	bl	1ea4 <IntCtrl_Ip_EnableIrq>
    210c:	e00b      	b.n	2126 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    210e:	9b01      	ldr	r3, [sp, #4]
    2110:	6859      	ldr	r1, [r3, #4]
    2112:	9a03      	ldr	r2, [sp, #12]
    2114:	4613      	mov	r3, r2
    2116:	005b      	lsls	r3, r3, #1
    2118:	4413      	add	r3, r2
    211a:	009b      	lsls	r3, r3, #2
    211c:	440b      	add	r3, r1
    211e:	681b      	ldr	r3, [r3, #0]
    2120:	4618      	mov	r0, r3
    2122:	f7ff fec9 	bl	1eb8 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2126:	9b03      	ldr	r3, [sp, #12]
    2128:	3301      	adds	r3, #1
    212a:	9303      	str	r3, [sp, #12]
    212c:	9b01      	ldr	r3, [sp, #4]
    212e:	681b      	ldr	r3, [r3, #0]
    2130:	9a03      	ldr	r2, [sp, #12]
    2132:	429a      	cmp	r2, r3
    2134:	d39c      	bcc.n	2070 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    2136:	2300      	movs	r3, #0
}
    2138:	4618      	mov	r0, r3
    213a:	b005      	add	sp, #20
    213c:	f85d fb04 	ldr.w	pc, [sp], #4

00002140 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    2140:	b500      	push	{lr}
    2142:	b085      	sub	sp, #20
    2144:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    2146:	2300      	movs	r3, #0
    2148:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    214c:	9b01      	ldr	r3, [sp, #4]
    214e:	681b      	ldr	r3, [r3, #0]
    2150:	2b00      	cmp	r3, #0
    2152:	d007      	beq.n	2164 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    2154:	9b01      	ldr	r3, [sp, #4]
    2156:	681b      	ldr	r3, [r3, #0]
    2158:	4618      	mov	r0, r3
    215a:	f7ff ff83 	bl	2064 <Platform_Ipw_InitIntCtrl>
    215e:	4603      	mov	r3, r0
    2160:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    2164:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2168:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    216a:	bf00      	nop
    216c:	b005      	add	sp, #20
    216e:	f85d fb04 	ldr.w	pc, [sp], #4

00002172 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    2172:	2300      	movs	r3, #0
}
    2174:	4618      	mov	r0, r3
    2176:	4770      	bx	lr

00002178 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    2178:	b082      	sub	sp, #8
    217a:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    217c:	2301      	movs	r3, #1
}
    217e:	4618      	mov	r0, r3
    2180:	b002      	add	sp, #8
    2182:	4770      	bx	lr

00002184 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    2184:	b082      	sub	sp, #8
    2186:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    2188:	bf00      	nop
    218a:	b002      	add	sp, #8
    218c:	4770      	bx	lr

0000218e <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    218e:	b082      	sub	sp, #8
    2190:	9001      	str	r0, [sp, #4]
    return Micros;
    2192:	9b01      	ldr	r3, [sp, #4]
}
    2194:	4618      	mov	r0, r3
    2196:	b002      	add	sp, #8
    2198:	4770      	bx	lr

0000219a <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    219a:	b500      	push	{lr}
    219c:	b083      	sub	sp, #12
    219e:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    21a0:	f000 f86c 	bl	227c <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    21a4:	bf00      	nop
    21a6:	b003      	add	sp, #12
    21a8:	f85d fb04 	ldr.w	pc, [sp], #4

000021ac <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    21ac:	b500      	push	{lr}
    21ae:	b085      	sub	sp, #20
    21b0:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    21b2:	2300      	movs	r3, #0
    21b4:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    21b6:	9b01      	ldr	r3, [sp, #4]
    21b8:	2b00      	cmp	r3, #0
    21ba:	d003      	beq.n	21c4 <OsIf_GetCounter+0x18>
    21bc:	9b01      	ldr	r3, [sp, #4]
    21be:	2b01      	cmp	r3, #1
    21c0:	d004      	beq.n	21cc <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    21c2:	e007      	b.n	21d4 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    21c4:	f7ff ffd5 	bl	2172 <OsIf_Timer_Dummy_GetCounter>
    21c8:	9003      	str	r0, [sp, #12]
            break;
    21ca:	e003      	b.n	21d4 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    21cc:	f000 f872 	bl	22b4 <OsIf_Timer_System_GetCounter>
    21d0:	9003      	str	r0, [sp, #12]
            break;
    21d2:	bf00      	nop
    }

    return Value;
    21d4:	9b03      	ldr	r3, [sp, #12]
}
    21d6:	4618      	mov	r0, r3
    21d8:	b005      	add	sp, #20
    21da:	f85d fb04 	ldr.w	pc, [sp], #4

000021de <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    21de:	b500      	push	{lr}
    21e0:	b085      	sub	sp, #20
    21e2:	9001      	str	r0, [sp, #4]
    21e4:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    21e6:	2300      	movs	r3, #0
    21e8:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    21ea:	9b00      	ldr	r3, [sp, #0]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d003      	beq.n	21f8 <OsIf_GetElapsed+0x1a>
    21f0:	9b00      	ldr	r3, [sp, #0]
    21f2:	2b01      	cmp	r3, #1
    21f4:	d005      	beq.n	2202 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    21f6:	e009      	b.n	220c <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    21f8:	9801      	ldr	r0, [sp, #4]
    21fa:	f7ff ffbd 	bl	2178 <OsIf_Timer_Dummy_GetElapsed>
    21fe:	9003      	str	r0, [sp, #12]
            break;
    2200:	e004      	b.n	220c <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    2202:	9801      	ldr	r0, [sp, #4]
    2204:	f000 f864 	bl	22d0 <OsIf_Timer_System_GetElapsed>
    2208:	9003      	str	r0, [sp, #12]
            break;
    220a:	bf00      	nop
    }

    return Value;
    220c:	9b03      	ldr	r3, [sp, #12]
}
    220e:	4618      	mov	r0, r3
    2210:	b005      	add	sp, #20
    2212:	f85d fb04 	ldr.w	pc, [sp], #4

00002216 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    2216:	b500      	push	{lr}
    2218:	b083      	sub	sp, #12
    221a:	9001      	str	r0, [sp, #4]
    221c:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    221e:	9b00      	ldr	r3, [sp, #0]
    2220:	2b00      	cmp	r3, #0
    2222:	d003      	beq.n	222c <OsIf_SetTimerFrequency+0x16>
    2224:	9b00      	ldr	r3, [sp, #0]
    2226:	2b01      	cmp	r3, #1
    2228:	d004      	beq.n	2234 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    222a:	e007      	b.n	223c <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    222c:	9801      	ldr	r0, [sp, #4]
    222e:	f7ff ffa9 	bl	2184 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    2232:	e003      	b.n	223c <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    2234:	9801      	ldr	r0, [sp, #4]
    2236:	f000 f85b 	bl	22f0 <OsIf_Timer_System_SetTimerFrequency>
            break;
    223a:	bf00      	nop
    }
}
    223c:	bf00      	nop
    223e:	b003      	add	sp, #12
    2240:	f85d fb04 	ldr.w	pc, [sp], #4

00002244 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    2244:	b500      	push	{lr}
    2246:	b085      	sub	sp, #20
    2248:	9001      	str	r0, [sp, #4]
    224a:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    224c:	2300      	movs	r3, #0
    224e:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    2250:	9b00      	ldr	r3, [sp, #0]
    2252:	2b00      	cmp	r3, #0
    2254:	d003      	beq.n	225e <OsIf_MicrosToTicks+0x1a>
    2256:	9b00      	ldr	r3, [sp, #0]
    2258:	2b01      	cmp	r3, #1
    225a:	d005      	beq.n	2268 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    225c:	e009      	b.n	2272 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    225e:	9801      	ldr	r0, [sp, #4]
    2260:	f7ff ff95 	bl	218e <OsIf_Timer_Dummy_MicrosToTicks>
    2264:	9003      	str	r0, [sp, #12]
            break;
    2266:	e004      	b.n	2272 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    2268:	9801      	ldr	r0, [sp, #4]
    226a:	f000 f84f 	bl	230c <OsIf_Timer_System_MicrosToTicks>
    226e:	9003      	str	r0, [sp, #12]
            break;
    2270:	bf00      	nop
    }

    return Value;
    2272:	9b03      	ldr	r3, [sp, #12]
}
    2274:	4618      	mov	r0, r3
    2276:	b005      	add	sp, #20
    2278:	f85d fb04 	ldr.w	pc, [sp], #4

0000227c <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    227c:	b500      	push	{lr}
    227e:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    2280:	2300      	movs	r3, #0
    2282:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    2284:	4a09      	ldr	r2, [pc, #36]	; (22ac <OsIf_Timer_System_Init+0x30>)
    2286:	9b01      	ldr	r3, [sp, #4]
    2288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    228c:	685a      	ldr	r2, [r3, #4]
    228e:	4908      	ldr	r1, [pc, #32]	; (22b0 <OsIf_Timer_System_Init+0x34>)
    2290:	9b01      	ldr	r3, [sp, #4]
    2292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    2296:	4a06      	ldr	r2, [pc, #24]	; (22b0 <OsIf_Timer_System_Init+0x34>)
    2298:	9b01      	ldr	r3, [sp, #4]
    229a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    229e:	4618      	mov	r0, r3
    22a0:	f000 f868 	bl	2374 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    22a4:	bf00      	nop
    22a6:	b003      	add	sp, #12
    22a8:	f85d fb04 	ldr.w	pc, [sp], #4
    22ac:	00010b18 	.word	0x00010b18
    22b0:	1fff8b54 	.word	0x1fff8b54

000022b4 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    22b4:	b500      	push	{lr}
    22b6:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    22b8:	2300      	movs	r3, #0
    22ba:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    22bc:	2300      	movs	r3, #0
    22be:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    22c0:	f000 f86c 	bl	239c <OsIf_Timer_System_Internal_GetCounter>
    22c4:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    22c6:	9b01      	ldr	r3, [sp, #4]
}
    22c8:	4618      	mov	r0, r3
    22ca:	b003      	add	sp, #12
    22cc:	f85d fb04 	ldr.w	pc, [sp], #4

000022d0 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    22d0:	b500      	push	{lr}
    22d2:	b085      	sub	sp, #20
    22d4:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    22d6:	2300      	movs	r3, #0
    22d8:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    22da:	2300      	movs	r3, #0
    22dc:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    22de:	9801      	ldr	r0, [sp, #4]
    22e0:	f000 f864 	bl	23ac <OsIf_Timer_System_Internal_GetElapsed>
    22e4:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    22e6:	9b03      	ldr	r3, [sp, #12]
}
    22e8:	4618      	mov	r0, r3
    22ea:	b005      	add	sp, #20
    22ec:	f85d fb04 	ldr.w	pc, [sp], #4

000022f0 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    22f0:	b084      	sub	sp, #16
    22f2:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    22f4:	2300      	movs	r3, #0
    22f6:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    22f8:	4903      	ldr	r1, [pc, #12]	; (2308 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    22fa:	9b03      	ldr	r3, [sp, #12]
    22fc:	9a01      	ldr	r2, [sp, #4]
    22fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    2302:	bf00      	nop
    2304:	b004      	add	sp, #16
    2306:	4770      	bx	lr
    2308:	1fff8b54 	.word	0x1fff8b54

0000230c <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    230c:	b5f0      	push	{r4, r5, r6, r7, lr}
    230e:	b087      	sub	sp, #28
    2310:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    2312:	2100      	movs	r1, #0
    2314:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    2316:	2100      	movs	r1, #0
    2318:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    231a:	9901      	ldr	r1, [sp, #4]
    231c:	2000      	movs	r0, #0
    231e:	460e      	mov	r6, r1
    2320:	4607      	mov	r7, r0
    2322:	4812      	ldr	r0, [pc, #72]	; (236c <OsIf_Timer_System_MicrosToTicks+0x60>)
    2324:	9904      	ldr	r1, [sp, #16]
    2326:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    232a:	2000      	movs	r0, #0
    232c:	460c      	mov	r4, r1
    232e:	4605      	mov	r5, r0
    2330:	fb04 f007 	mul.w	r0, r4, r7
    2334:	fb06 f105 	mul.w	r1, r6, r5
    2338:	4401      	add	r1, r0
    233a:	fba6 2304 	umull	r2, r3, r6, r4
    233e:	4419      	add	r1, r3
    2340:	460b      	mov	r3, r1
    2342:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2346:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    234a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    234e:	4a08      	ldr	r2, [pc, #32]	; (2370 <OsIf_Timer_System_MicrosToTicks+0x64>)
    2350:	f04f 0300 	mov.w	r3, #0
    2354:	f7fe f926 	bl	5a4 <__aeabi_uldivmod>
    2358:	4602      	mov	r2, r0
    235a:	460b      	mov	r3, r1
    235c:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    2360:	9b02      	ldr	r3, [sp, #8]
    2362:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    2364:	9b05      	ldr	r3, [sp, #20]
}
    2366:	4618      	mov	r0, r3
    2368:	b007      	add	sp, #28
    236a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    236c:	1fff8b54 	.word	0x1fff8b54
    2370:	000f4240 	.word	0x000f4240

00002374 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    2374:	b082      	sub	sp, #8
    2376:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    2378:	4b07      	ldr	r3, [pc, #28]	; (2398 <OsIf_Timer_System_Internal_Init+0x24>)
    237a:	2200      	movs	r2, #0
    237c:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    237e:	4b06      	ldr	r3, [pc, #24]	; (2398 <OsIf_Timer_System_Internal_Init+0x24>)
    2380:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2384:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    2386:	4b04      	ldr	r3, [pc, #16]	; (2398 <OsIf_Timer_System_Internal_Init+0x24>)
    2388:	2200      	movs	r2, #0
    238a:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    238c:	4b02      	ldr	r3, [pc, #8]	; (2398 <OsIf_Timer_System_Internal_Init+0x24>)
    238e:	2205      	movs	r2, #5
    2390:	601a      	str	r2, [r3, #0]
}
    2392:	bf00      	nop
    2394:	b002      	add	sp, #8
    2396:	4770      	bx	lr
    2398:	e000e010 	.word	0xe000e010

0000239c <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    239c:	4b02      	ldr	r3, [pc, #8]	; (23a8 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    239e:	689b      	ldr	r3, [r3, #8]
    23a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    23a4:	4618      	mov	r0, r3
    23a6:	4770      	bx	lr
    23a8:	e000e010 	.word	0xe000e010

000023ac <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    23ac:	b084      	sub	sp, #16
    23ae:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    23b0:	4b10      	ldr	r3, [pc, #64]	; (23f4 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    23b2:	689b      	ldr	r3, [r3, #8]
    23b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    23b8:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    23ba:	2300      	movs	r3, #0
    23bc:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    23be:	9b01      	ldr	r3, [sp, #4]
    23c0:	681b      	ldr	r3, [r3, #0]
    23c2:	9a02      	ldr	r2, [sp, #8]
    23c4:	429a      	cmp	r2, r3
    23c6:	d909      	bls.n	23dc <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    23c8:	9b01      	ldr	r3, [sp, #4]
    23ca:	681a      	ldr	r2, [r3, #0]
    23cc:	9b02      	ldr	r3, [sp, #8]
    23ce:	1ad3      	subs	r3, r2, r3
    23d0:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    23d4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    23d8:	9303      	str	r3, [sp, #12]
    23da:	e004      	b.n	23e6 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    23dc:	9b01      	ldr	r3, [sp, #4]
    23de:	681a      	ldr	r2, [r3, #0]
    23e0:	9b02      	ldr	r3, [sp, #8]
    23e2:	1ad3      	subs	r3, r2, r3
    23e4:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    23e6:	9b01      	ldr	r3, [sp, #4]
    23e8:	9a02      	ldr	r2, [sp, #8]
    23ea:	601a      	str	r2, [r3, #0]

    return dif;
    23ec:	9b03      	ldr	r3, [sp, #12]
}
    23ee:	4618      	mov	r0, r3
    23f0:	b004      	add	sp, #16
    23f2:	4770      	bx	lr
    23f4:	e000e010 	.word	0xe000e010

000023f8 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    23f8:	b082      	sub	sp, #8
    23fa:	9001      	str	r0, [sp, #4]
    23fc:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    23fe:	bf00      	nop
    2400:	b002      	add	sp, #8
    2402:	4770      	bx	lr

00002404 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    2404:	b500      	push	{lr}
    2406:	b085      	sub	sp, #20
    2408:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    240a:	4b24      	ldr	r3, [pc, #144]	; (249c <Clock_Ip_UpdateDriverContext+0x98>)
    240c:	2201      	movs	r2, #1
    240e:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2410:	4b23      	ldr	r3, [pc, #140]	; (24a0 <Clock_Ip_UpdateDriverContext+0x9c>)
    2412:	681b      	ldr	r3, [r3, #0]
    2414:	2102      	movs	r1, #2
    2416:	4618      	mov	r0, r3
    2418:	f003 fc32 	bl	5c80 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    241c:	2300      	movs	r3, #0
    241e:	f88d 300f 	strb.w	r3, [sp, #15]
    2422:	e015      	b.n	2450 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    2424:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2428:	9a01      	ldr	r2, [sp, #4]
    242a:	334a      	adds	r3, #74	; 0x4a
    242c:	00db      	lsls	r3, r3, #3
    242e:	4413      	add	r3, r2
    2430:	6858      	ldr	r0, [r3, #4]
    2432:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2436:	9a01      	ldr	r2, [sp, #4]
    2438:	334a      	adds	r3, #74	; 0x4a
    243a:	00db      	lsls	r3, r3, #3
    243c:	4413      	add	r3, r2
    243e:	689b      	ldr	r3, [r3, #8]
    2440:	4619      	mov	r1, r3
    2442:	f001 fadc 	bl	39fe <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2446:	f89d 300f 	ldrb.w	r3, [sp, #15]
    244a:	3301      	adds	r3, #1
    244c:	f88d 300f 	strb.w	r3, [sp, #15]
    2450:	9b01      	ldr	r3, [sp, #4]
    2452:	7bdb      	ldrb	r3, [r3, #15]
    2454:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2458:	429a      	cmp	r2, r3
    245a:	d3e3      	bcc.n	2424 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    245c:	f000 f824 	bl	24a8 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2460:	2301      	movs	r3, #1
    2462:	f88d 300f 	strb.w	r3, [sp, #15]
    2466:	e00e      	b.n	2486 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    2468:	f89d 200f 	ldrb.w	r2, [sp, #15]
    246c:	9b01      	ldr	r3, [sp, #4]
    246e:	327e      	adds	r2, #126	; 0x7e
    2470:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    2474:	490b      	ldr	r1, [pc, #44]	; (24a4 <Clock_Ip_UpdateDriverContext+0xa0>)
    2476:	f89d 200f 	ldrb.w	r2, [sp, #15]
    247a:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    247c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2480:	3301      	adds	r3, #1
    2482:	f88d 300f 	strb.w	r3, [sp, #15]
    2486:	9b01      	ldr	r3, [sp, #4]
    2488:	7cdb      	ldrb	r3, [r3, #19]
    248a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    248e:	429a      	cmp	r2, r3
    2490:	d3ea      	bcc.n	2468 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    2492:	bf00      	nop
    2494:	bf00      	nop
    2496:	b005      	add	sp, #20
    2498:	f85d fb04 	ldr.w	pc, [sp], #4
    249c:	1fff8b18 	.word	0x1fff8b18
    24a0:	1fff8b58 	.word	0x1fff8b58
    24a4:	1fff8b64 	.word	0x1fff8b64

000024a8 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    24a8:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    24aa:	4b23      	ldr	r3, [pc, #140]	; (2538 <Clock_Ip_CallEmptyCallbacks+0x90>)
    24ac:	781b      	ldrb	r3, [r3, #0]
    24ae:	f083 0301 	eor.w	r3, r3, #1
    24b2:	b2db      	uxtb	r3, r3
    24b4:	2b00      	cmp	r3, #0
    24b6:	d03d      	beq.n	2534 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    24b8:	4b1f      	ldr	r3, [pc, #124]	; (2538 <Clock_Ip_CallEmptyCallbacks+0x90>)
    24ba:	2201      	movs	r2, #1
    24bc:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    24be:	4b1f      	ldr	r3, [pc, #124]	; (253c <Clock_Ip_CallEmptyCallbacks+0x94>)
    24c0:	685b      	ldr	r3, [r3, #4]
    24c2:	2100      	movs	r1, #0
    24c4:	2000      	movs	r0, #0
    24c6:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    24c8:	4b1c      	ldr	r3, [pc, #112]	; (253c <Clock_Ip_CallEmptyCallbacks+0x94>)
    24ca:	689b      	ldr	r3, [r3, #8]
    24cc:	2057      	movs	r0, #87	; 0x57
    24ce:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    24d0:	4b1b      	ldr	r3, [pc, #108]	; (2540 <Clock_Ip_CallEmptyCallbacks+0x98>)
    24d2:	681b      	ldr	r3, [r3, #0]
    24d4:	2000      	movs	r0, #0
    24d6:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    24d8:	4b1a      	ldr	r3, [pc, #104]	; (2544 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    24da:	681b      	ldr	r3, [r3, #0]
    24dc:	2000      	movs	r0, #0
    24de:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    24e0:	4b19      	ldr	r3, [pc, #100]	; (2548 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    24e2:	681b      	ldr	r3, [r3, #0]
    24e4:	2000      	movs	r0, #0
    24e6:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    24e8:	4b18      	ldr	r3, [pc, #96]	; (254c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    24ea:	685b      	ldr	r3, [r3, #4]
    24ec:	2000      	movs	r0, #0
    24ee:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    24f0:	4b16      	ldr	r3, [pc, #88]	; (254c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    24f2:	689b      	ldr	r3, [r3, #8]
    24f4:	2057      	movs	r0, #87	; 0x57
    24f6:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    24f8:	4b15      	ldr	r3, [pc, #84]	; (2550 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    24fa:	681b      	ldr	r3, [r3, #0]
    24fc:	2000      	movs	r0, #0
    24fe:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    2500:	4b13      	ldr	r3, [pc, #76]	; (2550 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2502:	685b      	ldr	r3, [r3, #4]
    2504:	2100      	movs	r1, #0
    2506:	2057      	movs	r0, #87	; 0x57
    2508:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    250a:	4b12      	ldr	r3, [pc, #72]	; (2554 <Clock_Ip_CallEmptyCallbacks+0xac>)
    250c:	681b      	ldr	r3, [r3, #0]
    250e:	2000      	movs	r0, #0
    2510:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2512:	4b11      	ldr	r3, [pc, #68]	; (2558 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2514:	685b      	ldr	r3, [r3, #4]
    2516:	2000      	movs	r0, #0
    2518:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    251a:	4b0f      	ldr	r3, [pc, #60]	; (2558 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    251c:	689b      	ldr	r3, [r3, #8]
    251e:	2057      	movs	r0, #87	; 0x57
    2520:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2522:	4b0e      	ldr	r3, [pc, #56]	; (255c <Clock_Ip_CallEmptyCallbacks+0xb4>)
    2524:	685b      	ldr	r3, [r3, #4]
    2526:	2000      	movs	r0, #0
    2528:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    252a:	4b0d      	ldr	r3, [pc, #52]	; (2560 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    252c:	681b      	ldr	r3, [r3, #0]
    252e:	2100      	movs	r1, #0
    2530:	2000      	movs	r0, #0
    2532:	4798      	blx	r3
    }
}
    2534:	bf00      	nop
    2536:	bd08      	pop	{r3, pc}
    2538:	1fff8b5c 	.word	0x1fff8b5c
    253c:	00010374 	.word	0x00010374
    2540:	00010288 	.word	0x00010288
    2544:	000102c4 	.word	0x000102c4
    2548:	000102cc 	.word	0x000102cc
    254c:	000102f4 	.word	0x000102f4
    2550:	00010300 	.word	0x00010300
    2554:	00010338 	.word	0x00010338
    2558:	00010384 	.word	0x00010384
    255c:	000103b0 	.word	0x000103b0
    2560:	000103ac 	.word	0x000103ac

00002564 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    2564:	b500      	push	{lr}
    2566:	b085      	sub	sp, #20
    2568:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    256a:	9b01      	ldr	r3, [sp, #4]
    256c:	7adb      	ldrb	r3, [r3, #11]
    256e:	9303      	str	r3, [sp, #12]
    2570:	e01f      	b.n	25b2 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2572:	9b03      	ldr	r3, [sp, #12]
    2574:	1e5a      	subs	r2, r3, #1
    2576:	9b01      	ldr	r3, [sp, #4]
    2578:	320d      	adds	r2, #13
    257a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    257e:	495a      	ldr	r1, [pc, #360]	; (26e8 <Clock_Ip_ResetClockConfiguration+0x184>)
    2580:	4613      	mov	r3, r2
    2582:	00db      	lsls	r3, r3, #3
    2584:	4413      	add	r3, r2
    2586:	440b      	add	r3, r1
    2588:	3301      	adds	r3, #1
    258a:	781b      	ldrb	r3, [r3, #0]
    258c:	461a      	mov	r2, r3
    258e:	4b57      	ldr	r3, [pc, #348]	; (26ec <Clock_Ip_ResetClockConfiguration+0x188>)
    2590:	5c9b      	ldrb	r3, [r3, r2]
    2592:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    2594:	4a56      	ldr	r2, [pc, #344]	; (26f0 <Clock_Ip_ResetClockConfiguration+0x18c>)
    2596:	9b02      	ldr	r3, [sp, #8]
    2598:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    259c:	9a03      	ldr	r2, [sp, #12]
    259e:	3a01      	subs	r2, #1
    25a0:	320d      	adds	r2, #13
    25a2:	00d2      	lsls	r2, r2, #3
    25a4:	9901      	ldr	r1, [sp, #4]
    25a6:	440a      	add	r2, r1
    25a8:	4610      	mov	r0, r2
    25aa:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    25ac:	9b03      	ldr	r3, [sp, #12]
    25ae:	3b01      	subs	r3, #1
    25b0:	9303      	str	r3, [sp, #12]
    25b2:	9b03      	ldr	r3, [sp, #12]
    25b4:	2b00      	cmp	r3, #0
    25b6:	d1dc      	bne.n	2572 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    25b8:	9b01      	ldr	r3, [sp, #4]
    25ba:	7b9b      	ldrb	r3, [r3, #14]
    25bc:	9303      	str	r3, [sp, #12]
    25be:	e026      	b.n	260e <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    25c0:	9b03      	ldr	r3, [sp, #12]
    25c2:	3b01      	subs	r3, #1
    25c4:	9a01      	ldr	r2, [sp, #4]
    25c6:	3324      	adds	r3, #36	; 0x24
    25c8:	011b      	lsls	r3, r3, #4
    25ca:	4413      	add	r3, r2
    25cc:	3304      	adds	r3, #4
    25ce:	681a      	ldr	r2, [r3, #0]
    25d0:	4945      	ldr	r1, [pc, #276]	; (26e8 <Clock_Ip_ResetClockConfiguration+0x184>)
    25d2:	4613      	mov	r3, r2
    25d4:	00db      	lsls	r3, r3, #3
    25d6:	4413      	add	r3, r2
    25d8:	440b      	add	r3, r1
    25da:	3301      	adds	r3, #1
    25dc:	781b      	ldrb	r3, [r3, #0]
    25de:	461a      	mov	r2, r3
    25e0:	4b44      	ldr	r3, [pc, #272]	; (26f4 <Clock_Ip_ResetClockConfiguration+0x190>)
    25e2:	5c9b      	ldrb	r3, [r3, r2]
    25e4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    25e6:	4944      	ldr	r1, [pc, #272]	; (26f8 <Clock_Ip_ResetClockConfiguration+0x194>)
    25e8:	9a02      	ldr	r2, [sp, #8]
    25ea:	4613      	mov	r3, r2
    25ec:	005b      	lsls	r3, r3, #1
    25ee:	4413      	add	r3, r2
    25f0:	009b      	lsls	r3, r3, #2
    25f2:	440b      	add	r3, r1
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	9a03      	ldr	r2, [sp, #12]
    25f8:	3a01      	subs	r2, #1
    25fa:	3224      	adds	r2, #36	; 0x24
    25fc:	0112      	lsls	r2, r2, #4
    25fe:	9901      	ldr	r1, [sp, #4]
    2600:	440a      	add	r2, r1
    2602:	3204      	adds	r2, #4
    2604:	4610      	mov	r0, r2
    2606:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2608:	9b03      	ldr	r3, [sp, #12]
    260a:	3b01      	subs	r3, #1
    260c:	9303      	str	r3, [sp, #12]
    260e:	9b03      	ldr	r3, [sp, #12]
    2610:	2b00      	cmp	r3, #0
    2612:	d1d5      	bne.n	25c0 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2614:	9b01      	ldr	r3, [sp, #4]
    2616:	7a9b      	ldrb	r3, [r3, #10]
    2618:	9303      	str	r3, [sp, #12]
    261a:	e02a      	b.n	2672 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    261c:	9b03      	ldr	r3, [sp, #12]
    261e:	1e5a      	subs	r2, r3, #1
    2620:	9901      	ldr	r1, [sp, #4]
    2622:	4613      	mov	r3, r2
    2624:	009b      	lsls	r3, r3, #2
    2626:	4413      	add	r3, r2
    2628:	00db      	lsls	r3, r3, #3
    262a:	440b      	add	r3, r1
    262c:	3340      	adds	r3, #64	; 0x40
    262e:	681a      	ldr	r2, [r3, #0]
    2630:	492d      	ldr	r1, [pc, #180]	; (26e8 <Clock_Ip_ResetClockConfiguration+0x184>)
    2632:	4613      	mov	r3, r2
    2634:	00db      	lsls	r3, r3, #3
    2636:	4413      	add	r3, r2
    2638:	440b      	add	r3, r1
    263a:	3301      	adds	r3, #1
    263c:	781b      	ldrb	r3, [r3, #0]
    263e:	461a      	mov	r2, r3
    2640:	4b2e      	ldr	r3, [pc, #184]	; (26fc <Clock_Ip_ResetClockConfiguration+0x198>)
    2642:	5c9b      	ldrb	r3, [r3, r2]
    2644:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2646:	492e      	ldr	r1, [pc, #184]	; (2700 <Clock_Ip_ResetClockConfiguration+0x19c>)
    2648:	9a02      	ldr	r2, [sp, #8]
    264a:	4613      	mov	r3, r2
    264c:	009b      	lsls	r3, r3, #2
    264e:	4413      	add	r3, r2
    2650:	009b      	lsls	r3, r3, #2
    2652:	440b      	add	r3, r1
    2654:	6819      	ldr	r1, [r3, #0]
    2656:	9b03      	ldr	r3, [sp, #12]
    2658:	1e5a      	subs	r2, r3, #1
    265a:	4613      	mov	r3, r2
    265c:	009b      	lsls	r3, r3, #2
    265e:	4413      	add	r3, r2
    2660:	00db      	lsls	r3, r3, #3
    2662:	3340      	adds	r3, #64	; 0x40
    2664:	9a01      	ldr	r2, [sp, #4]
    2666:	4413      	add	r3, r2
    2668:	4618      	mov	r0, r3
    266a:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    266c:	9b03      	ldr	r3, [sp, #12]
    266e:	3b01      	subs	r3, #1
    2670:	9303      	str	r3, [sp, #12]
    2672:	9b03      	ldr	r3, [sp, #12]
    2674:	2b00      	cmp	r3, #0
    2676:	d1d1      	bne.n	261c <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2678:	9b01      	ldr	r3, [sp, #4]
    267a:	7a5b      	ldrb	r3, [r3, #9]
    267c:	9303      	str	r3, [sp, #12]
    267e:	e02b      	b.n	26d8 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2680:	9b03      	ldr	r3, [sp, #12]
    2682:	1e5a      	subs	r2, r3, #1
    2684:	9901      	ldr	r1, [sp, #4]
    2686:	4613      	mov	r3, r2
    2688:	009b      	lsls	r3, r3, #2
    268a:	4413      	add	r3, r2
    268c:	009b      	lsls	r3, r3, #2
    268e:	440b      	add	r3, r1
    2690:	332c      	adds	r3, #44	; 0x2c
    2692:	681a      	ldr	r2, [r3, #0]
    2694:	4914      	ldr	r1, [pc, #80]	; (26e8 <Clock_Ip_ResetClockConfiguration+0x184>)
    2696:	4613      	mov	r3, r2
    2698:	00db      	lsls	r3, r3, #3
    269a:	4413      	add	r3, r2
    269c:	440b      	add	r3, r1
    269e:	3301      	adds	r3, #1
    26a0:	781b      	ldrb	r3, [r3, #0]
    26a2:	461a      	mov	r2, r3
    26a4:	4b17      	ldr	r3, [pc, #92]	; (2704 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    26a6:	5c9b      	ldrb	r3, [r3, r2]
    26a8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    26aa:	4917      	ldr	r1, [pc, #92]	; (2708 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    26ac:	9a02      	ldr	r2, [sp, #8]
    26ae:	4613      	mov	r3, r2
    26b0:	009b      	lsls	r3, r3, #2
    26b2:	4413      	add	r3, r2
    26b4:	009b      	lsls	r3, r3, #2
    26b6:	440b      	add	r3, r1
    26b8:	6819      	ldr	r1, [r3, #0]
    26ba:	9b03      	ldr	r3, [sp, #12]
    26bc:	1e5a      	subs	r2, r3, #1
    26be:	4613      	mov	r3, r2
    26c0:	009b      	lsls	r3, r3, #2
    26c2:	4413      	add	r3, r2
    26c4:	009b      	lsls	r3, r3, #2
    26c6:	3328      	adds	r3, #40	; 0x28
    26c8:	9a01      	ldr	r2, [sp, #4]
    26ca:	4413      	add	r3, r2
    26cc:	3304      	adds	r3, #4
    26ce:	4618      	mov	r0, r3
    26d0:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    26d2:	9b03      	ldr	r3, [sp, #12]
    26d4:	3b01      	subs	r3, #1
    26d6:	9303      	str	r3, [sp, #12]
    26d8:	9b03      	ldr	r3, [sp, #12]
    26da:	2b00      	cmp	r3, #0
    26dc:	d1d0      	bne.n	2680 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    26de:	bf00      	nop
    26e0:	bf00      	nop
    26e2:	b005      	add	sp, #20
    26e4:	f85d fb04 	ldr.w	pc, [sp], #4
    26e8:	0000fd78 	.word	0x0000fd78
    26ec:	0000fd48 	.word	0x0000fd48
    26f0:	000103b0 	.word	0x000103b0
    26f4:	0000fd28 	.word	0x0000fd28
    26f8:	000102f4 	.word	0x000102f4
    26fc:	0000fd38 	.word	0x0000fd38
    2700:	00010384 	.word	0x00010384
    2704:	0000fcf8 	.word	0x0000fcf8
    2708:	000102cc 	.word	0x000102cc

0000270c <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    270c:	b500      	push	{lr}
    270e:	b085      	sub	sp, #20
    2710:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2712:	2301      	movs	r3, #1
    2714:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2716:	9801      	ldr	r0, [sp, #4]
    2718:	f000 f818 	bl	274c <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    271c:	4b0a      	ldr	r3, [pc, #40]	; (2748 <Clock_Ip_Init+0x3c>)
    271e:	781b      	ldrb	r3, [r3, #0]
    2720:	2b00      	cmp	r3, #0
    2722:	d00a      	beq.n	273a <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2724:	f000 fb74 	bl	2e10 <Clock_Ip_GetPllStatus>
    2728:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    272a:	9b02      	ldr	r3, [sp, #8]
    272c:	2b00      	cmp	r3, #0
    272e:	d106      	bne.n	273e <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2730:	f000 fbf2 	bl	2f18 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2734:	2300      	movs	r3, #0
    2736:	9303      	str	r3, [sp, #12]
    2738:	e001      	b.n	273e <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    273a:	2300      	movs	r3, #0
    273c:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    273e:	9b03      	ldr	r3, [sp, #12]
}
    2740:	4618      	mov	r0, r3
    2742:	b005      	add	sp, #20
    2744:	f85d fb04 	ldr.w	pc, [sp], #4
    2748:	1fff8b60 	.word	0x1fff8b60

0000274c <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    274c:	b510      	push	{r4, lr}
    274e:	b084      	sub	sp, #16
    2750:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2752:	4a9f      	ldr	r2, [pc, #636]	; (29d0 <Clock_Ip_InitClock+0x284>)
    2754:	9b01      	ldr	r3, [sp, #4]
    2756:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2758:	2101      	movs	r1, #1
    275a:	9801      	ldr	r0, [sp, #4]
    275c:	f003 fa90 	bl	5c80 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2760:	4b9b      	ldr	r3, [pc, #620]	; (29d0 <Clock_Ip_InitClock+0x284>)
    2762:	681b      	ldr	r3, [r3, #0]
    2764:	2b00      	cmp	r3, #0
    2766:	d030      	beq.n	27ca <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2768:	2300      	movs	r3, #0
    276a:	9303      	str	r3, [sp, #12]
    276c:	e027      	b.n	27be <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    276e:	9901      	ldr	r1, [sp, #4]
    2770:	9a03      	ldr	r2, [sp, #12]
    2772:	4613      	mov	r3, r2
    2774:	009b      	lsls	r3, r3, #2
    2776:	4413      	add	r3, r2
    2778:	009b      	lsls	r3, r3, #2
    277a:	440b      	add	r3, r1
    277c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2780:	681a      	ldr	r2, [r3, #0]
    2782:	4994      	ldr	r1, [pc, #592]	; (29d4 <Clock_Ip_InitClock+0x288>)
    2784:	4613      	mov	r3, r2
    2786:	00db      	lsls	r3, r3, #3
    2788:	4413      	add	r3, r2
    278a:	440b      	add	r3, r1
    278c:	3301      	adds	r3, #1
    278e:	781b      	ldrb	r3, [r3, #0]
    2790:	461a      	mov	r2, r3
    2792:	4b91      	ldr	r3, [pc, #580]	; (29d8 <Clock_Ip_InitClock+0x28c>)
    2794:	5c9b      	ldrb	r3, [r3, r2]
    2796:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2798:	4a90      	ldr	r2, [pc, #576]	; (29dc <Clock_Ip_InitClock+0x290>)
    279a:	9b02      	ldr	r3, [sp, #8]
    279c:	011b      	lsls	r3, r3, #4
    279e:	4413      	add	r3, r2
    27a0:	6819      	ldr	r1, [r3, #0]
    27a2:	9a03      	ldr	r2, [sp, #12]
    27a4:	4613      	mov	r3, r2
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	4413      	add	r3, r2
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    27b0:	9a01      	ldr	r2, [sp, #4]
    27b2:	4413      	add	r3, r2
    27b4:	4618      	mov	r0, r3
    27b6:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    27b8:	9b03      	ldr	r3, [sp, #12]
    27ba:	3301      	adds	r3, #1
    27bc:	9303      	str	r3, [sp, #12]
    27be:	9b01      	ldr	r3, [sp, #4]
    27c0:	7c9b      	ldrb	r3, [r3, #18]
    27c2:	461a      	mov	r2, r3
    27c4:	9b03      	ldr	r3, [sp, #12]
    27c6:	4293      	cmp	r3, r2
    27c8:	d3d1      	bcc.n	276e <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    27ca:	9801      	ldr	r0, [sp, #4]
    27cc:	f7ff feca 	bl	2564 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    27d0:	2300      	movs	r3, #0
    27d2:	9303      	str	r3, [sp, #12]
    27d4:	e029      	b.n	282a <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    27d6:	9901      	ldr	r1, [sp, #4]
    27d8:	9a03      	ldr	r2, [sp, #12]
    27da:	4613      	mov	r3, r2
    27dc:	005b      	lsls	r3, r3, #1
    27de:	4413      	add	r3, r2
    27e0:	009b      	lsls	r3, r3, #2
    27e2:	440b      	add	r3, r1
    27e4:	3314      	adds	r3, #20
    27e6:	681a      	ldr	r2, [r3, #0]
    27e8:	497a      	ldr	r1, [pc, #488]	; (29d4 <Clock_Ip_InitClock+0x288>)
    27ea:	4613      	mov	r3, r2
    27ec:	00db      	lsls	r3, r3, #3
    27ee:	4413      	add	r3, r2
    27f0:	440b      	add	r3, r1
    27f2:	3301      	adds	r3, #1
    27f4:	781b      	ldrb	r3, [r3, #0]
    27f6:	461a      	mov	r2, r3
    27f8:	4b79      	ldr	r3, [pc, #484]	; (29e0 <Clock_Ip_InitClock+0x294>)
    27fa:	5c9b      	ldrb	r3, [r3, r2]
    27fc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    27fe:	4979      	ldr	r1, [pc, #484]	; (29e4 <Clock_Ip_InitClock+0x298>)
    2800:	9a02      	ldr	r2, [sp, #8]
    2802:	4613      	mov	r3, r2
    2804:	005b      	lsls	r3, r3, #1
    2806:	4413      	add	r3, r2
    2808:	009b      	lsls	r3, r3, #2
    280a:	440b      	add	r3, r1
    280c:	6819      	ldr	r1, [r3, #0]
    280e:	9a03      	ldr	r2, [sp, #12]
    2810:	4613      	mov	r3, r2
    2812:	005b      	lsls	r3, r3, #1
    2814:	4413      	add	r3, r2
    2816:	009b      	lsls	r3, r3, #2
    2818:	3310      	adds	r3, #16
    281a:	9a01      	ldr	r2, [sp, #4]
    281c:	4413      	add	r3, r2
    281e:	3304      	adds	r3, #4
    2820:	4618      	mov	r0, r3
    2822:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2824:	9b03      	ldr	r3, [sp, #12]
    2826:	3301      	adds	r3, #1
    2828:	9303      	str	r3, [sp, #12]
    282a:	9b01      	ldr	r3, [sp, #4]
    282c:	7a1b      	ldrb	r3, [r3, #8]
    282e:	461a      	mov	r2, r3
    2830:	9b03      	ldr	r3, [sp, #12]
    2832:	4293      	cmp	r3, r2
    2834:	d3cf      	bcc.n	27d6 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2836:	2300      	movs	r3, #0
    2838:	9303      	str	r3, [sp, #12]
    283a:	e02a      	b.n	2892 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    283c:	9901      	ldr	r1, [sp, #4]
    283e:	9a03      	ldr	r2, [sp, #12]
    2840:	4613      	mov	r3, r2
    2842:	009b      	lsls	r3, r3, #2
    2844:	4413      	add	r3, r2
    2846:	009b      	lsls	r3, r3, #2
    2848:	440b      	add	r3, r1
    284a:	332c      	adds	r3, #44	; 0x2c
    284c:	681a      	ldr	r2, [r3, #0]
    284e:	4961      	ldr	r1, [pc, #388]	; (29d4 <Clock_Ip_InitClock+0x288>)
    2850:	4613      	mov	r3, r2
    2852:	00db      	lsls	r3, r3, #3
    2854:	4413      	add	r3, r2
    2856:	440b      	add	r3, r1
    2858:	3301      	adds	r3, #1
    285a:	781b      	ldrb	r3, [r3, #0]
    285c:	461a      	mov	r2, r3
    285e:	4b62      	ldr	r3, [pc, #392]	; (29e8 <Clock_Ip_InitClock+0x29c>)
    2860:	5c9b      	ldrb	r3, [r3, r2]
    2862:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2864:	4961      	ldr	r1, [pc, #388]	; (29ec <Clock_Ip_InitClock+0x2a0>)
    2866:	9a02      	ldr	r2, [sp, #8]
    2868:	4613      	mov	r3, r2
    286a:	009b      	lsls	r3, r3, #2
    286c:	4413      	add	r3, r2
    286e:	009b      	lsls	r3, r3, #2
    2870:	440b      	add	r3, r1
    2872:	3304      	adds	r3, #4
    2874:	6819      	ldr	r1, [r3, #0]
    2876:	9a03      	ldr	r2, [sp, #12]
    2878:	4613      	mov	r3, r2
    287a:	009b      	lsls	r3, r3, #2
    287c:	4413      	add	r3, r2
    287e:	009b      	lsls	r3, r3, #2
    2880:	3328      	adds	r3, #40	; 0x28
    2882:	9a01      	ldr	r2, [sp, #4]
    2884:	4413      	add	r3, r2
    2886:	3304      	adds	r3, #4
    2888:	4618      	mov	r0, r3
    288a:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    288c:	9b03      	ldr	r3, [sp, #12]
    288e:	3301      	adds	r3, #1
    2890:	9303      	str	r3, [sp, #12]
    2892:	9b01      	ldr	r3, [sp, #4]
    2894:	7a5b      	ldrb	r3, [r3, #9]
    2896:	461a      	mov	r2, r3
    2898:	9b03      	ldr	r3, [sp, #12]
    289a:	4293      	cmp	r3, r2
    289c:	d3ce      	bcc.n	283c <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    289e:	9801      	ldr	r0, [sp, #4]
    28a0:	f7ff fdb0 	bl	2404 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    28a4:	2300      	movs	r3, #0
    28a6:	9303      	str	r3, [sp, #12]
    28a8:	e028      	b.n	28fc <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    28aa:	9901      	ldr	r1, [sp, #4]
    28ac:	9a03      	ldr	r2, [sp, #12]
    28ae:	4613      	mov	r3, r2
    28b0:	009b      	lsls	r3, r3, #2
    28b2:	4413      	add	r3, r2
    28b4:	009b      	lsls	r3, r3, #2
    28b6:	440b      	add	r3, r1
    28b8:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    28bc:	681a      	ldr	r2, [r3, #0]
    28be:	4945      	ldr	r1, [pc, #276]	; (29d4 <Clock_Ip_InitClock+0x288>)
    28c0:	4613      	mov	r3, r2
    28c2:	00db      	lsls	r3, r3, #3
    28c4:	4413      	add	r3, r2
    28c6:	440b      	add	r3, r1
    28c8:	3301      	adds	r3, #1
    28ca:	781b      	ldrb	r3, [r3, #0]
    28cc:	461a      	mov	r2, r3
    28ce:	4b48      	ldr	r3, [pc, #288]	; (29f0 <Clock_Ip_InitClock+0x2a4>)
    28d0:	5c9b      	ldrb	r3, [r3, r2]
    28d2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    28d4:	4a47      	ldr	r2, [pc, #284]	; (29f4 <Clock_Ip_InitClock+0x2a8>)
    28d6:	9b02      	ldr	r3, [sp, #8]
    28d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    28dc:	9a03      	ldr	r2, [sp, #12]
    28de:	4613      	mov	r3, r2
    28e0:	009b      	lsls	r3, r3, #2
    28e2:	4413      	add	r3, r2
    28e4:	009b      	lsls	r3, r3, #2
    28e6:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    28ea:	9a01      	ldr	r2, [sp, #4]
    28ec:	4413      	add	r3, r2
    28ee:	3304      	adds	r3, #4
    28f0:	9903      	ldr	r1, [sp, #12]
    28f2:	4618      	mov	r0, r3
    28f4:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    28f6:	9b03      	ldr	r3, [sp, #12]
    28f8:	3301      	adds	r3, #1
    28fa:	9303      	str	r3, [sp, #12]
    28fc:	9b01      	ldr	r3, [sp, #4]
    28fe:	7c5b      	ldrb	r3, [r3, #17]
    2900:	461a      	mov	r2, r3
    2902:	9b03      	ldr	r3, [sp, #12]
    2904:	4293      	cmp	r3, r2
    2906:	d3d0      	bcc.n	28aa <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2908:	2300      	movs	r3, #0
    290a:	9303      	str	r3, [sp, #12]
    290c:	e026      	b.n	295c <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    290e:	9901      	ldr	r1, [sp, #4]
    2910:	9a03      	ldr	r2, [sp, #12]
    2912:	4613      	mov	r3, r2
    2914:	005b      	lsls	r3, r3, #1
    2916:	4413      	add	r3, r2
    2918:	009b      	lsls	r3, r3, #2
    291a:	440b      	add	r3, r1
    291c:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2920:	681a      	ldr	r2, [r3, #0]
    2922:	492c      	ldr	r1, [pc, #176]	; (29d4 <Clock_Ip_InitClock+0x288>)
    2924:	4613      	mov	r3, r2
    2926:	00db      	lsls	r3, r3, #3
    2928:	4413      	add	r3, r2
    292a:	440b      	add	r3, r1
    292c:	3301      	adds	r3, #1
    292e:	781b      	ldrb	r3, [r3, #0]
    2930:	461a      	mov	r2, r3
    2932:	4b31      	ldr	r3, [pc, #196]	; (29f8 <Clock_Ip_InitClock+0x2ac>)
    2934:	5c9b      	ldrb	r3, [r3, r2]
    2936:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2938:	4a30      	ldr	r2, [pc, #192]	; (29fc <Clock_Ip_InitClock+0x2b0>)
    293a:	9b02      	ldr	r3, [sp, #8]
    293c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2940:	9a03      	ldr	r2, [sp, #12]
    2942:	4613      	mov	r3, r2
    2944:	005b      	lsls	r3, r3, #1
    2946:	4413      	add	r3, r2
    2948:	009b      	lsls	r3, r3, #2
    294a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    294e:	9a01      	ldr	r2, [sp, #4]
    2950:	4413      	add	r3, r2
    2952:	4618      	mov	r0, r3
    2954:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2956:	9b03      	ldr	r3, [sp, #12]
    2958:	3301      	adds	r3, #1
    295a:	9303      	str	r3, [sp, #12]
    295c:	9b01      	ldr	r3, [sp, #4]
    295e:	7b5b      	ldrb	r3, [r3, #13]
    2960:	461a      	mov	r2, r3
    2962:	9b03      	ldr	r3, [sp, #12]
    2964:	4293      	cmp	r3, r2
    2966:	d3d2      	bcc.n	290e <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2968:	2300      	movs	r3, #0
    296a:	9303      	str	r3, [sp, #12]
    296c:	e026      	b.n	29bc <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    296e:	9901      	ldr	r1, [sp, #4]
    2970:	9a03      	ldr	r2, [sp, #12]
    2972:	4613      	mov	r3, r2
    2974:	005b      	lsls	r3, r3, #1
    2976:	4413      	add	r3, r2
    2978:	009b      	lsls	r3, r3, #2
    297a:	440b      	add	r3, r1
    297c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2980:	681a      	ldr	r2, [r3, #0]
    2982:	4914      	ldr	r1, [pc, #80]	; (29d4 <Clock_Ip_InitClock+0x288>)
    2984:	4613      	mov	r3, r2
    2986:	00db      	lsls	r3, r3, #3
    2988:	4413      	add	r3, r2
    298a:	440b      	add	r3, r1
    298c:	3301      	adds	r3, #1
    298e:	781b      	ldrb	r3, [r3, #0]
    2990:	461a      	mov	r2, r3
    2992:	4b1b      	ldr	r3, [pc, #108]	; (2a00 <Clock_Ip_InitClock+0x2b4>)
    2994:	5c9b      	ldrb	r3, [r3, r2]
    2996:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    2998:	4a1a      	ldr	r2, [pc, #104]	; (2a04 <Clock_Ip_InitClock+0x2b8>)
    299a:	9b02      	ldr	r3, [sp, #8]
    299c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    29a0:	9a03      	ldr	r2, [sp, #12]
    29a2:	4613      	mov	r3, r2
    29a4:	005b      	lsls	r3, r3, #1
    29a6:	4413      	add	r3, r2
    29a8:	009b      	lsls	r3, r3, #2
    29aa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    29ae:	9a01      	ldr	r2, [sp, #4]
    29b0:	4413      	add	r3, r2
    29b2:	4618      	mov	r0, r3
    29b4:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    29b6:	9b03      	ldr	r3, [sp, #12]
    29b8:	3301      	adds	r3, #1
    29ba:	9303      	str	r3, [sp, #12]
    29bc:	9b01      	ldr	r3, [sp, #4]
    29be:	7b1b      	ldrb	r3, [r3, #12]
    29c0:	461a      	mov	r2, r3
    29c2:	9b03      	ldr	r3, [sp, #12]
    29c4:	4293      	cmp	r3, r2
    29c6:	d3d2      	bcc.n	296e <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    29c8:	2300      	movs	r3, #0
    29ca:	9303      	str	r3, [sp, #12]
    29cc:	e044      	b.n	2a58 <Clock_Ip_InitClock+0x30c>
    29ce:	bf00      	nop
    29d0:	1fff8b58 	.word	0x1fff8b58
    29d4:	0000fd78 	.word	0x0000fd78
    29d8:	0000fd68 	.word	0x0000fd68
    29dc:	00010374 	.word	0x00010374
    29e0:	0000fd08 	.word	0x0000fd08
    29e4:	00010338 	.word	0x00010338
    29e8:	0000fcf8 	.word	0x0000fcf8
    29ec:	000102cc 	.word	0x000102cc
    29f0:	0000fd58 	.word	0x0000fd58
    29f4:	000103ac 	.word	0x000103ac
    29f8:	0000fce8 	.word	0x0000fce8
    29fc:	000102c4 	.word	0x000102c4
    2a00:	0000fcd8 	.word	0x0000fcd8
    2a04:	00010288 	.word	0x00010288
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2a08:	9901      	ldr	r1, [sp, #4]
    2a0a:	9a03      	ldr	r2, [sp, #12]
    2a0c:	4613      	mov	r3, r2
    2a0e:	005b      	lsls	r3, r3, #1
    2a10:	4413      	add	r3, r2
    2a12:	009b      	lsls	r3, r3, #2
    2a14:	440b      	add	r3, r1
    2a16:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2a1a:	681a      	ldr	r2, [r3, #0]
    2a1c:	49ac      	ldr	r1, [pc, #688]	; (2cd0 <Clock_Ip_InitClock+0x584>)
    2a1e:	4613      	mov	r3, r2
    2a20:	00db      	lsls	r3, r3, #3
    2a22:	4413      	add	r3, r2
    2a24:	440b      	add	r3, r1
    2a26:	3301      	adds	r3, #1
    2a28:	781b      	ldrb	r3, [r3, #0]
    2a2a:	461a      	mov	r2, r3
    2a2c:	4ba9      	ldr	r3, [pc, #676]	; (2cd4 <Clock_Ip_InitClock+0x588>)
    2a2e:	5c9b      	ldrb	r3, [r3, r2]
    2a30:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    2a32:	4aa9      	ldr	r2, [pc, #676]	; (2cd8 <Clock_Ip_InitClock+0x58c>)
    2a34:	9b02      	ldr	r3, [sp, #8]
    2a36:	00db      	lsls	r3, r3, #3
    2a38:	4413      	add	r3, r2
    2a3a:	6859      	ldr	r1, [r3, #4]
    2a3c:	9a03      	ldr	r2, [sp, #12]
    2a3e:	4613      	mov	r3, r2
    2a40:	005b      	lsls	r3, r3, #1
    2a42:	4413      	add	r3, r2
    2a44:	009b      	lsls	r3, r3, #2
    2a46:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2a4a:	9a01      	ldr	r2, [sp, #4]
    2a4c:	4413      	add	r3, r2
    2a4e:	4618      	mov	r0, r3
    2a50:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2a52:	9b03      	ldr	r3, [sp, #12]
    2a54:	3301      	adds	r3, #1
    2a56:	9303      	str	r3, [sp, #12]
    2a58:	9b01      	ldr	r3, [sp, #4]
    2a5a:	7b5b      	ldrb	r3, [r3, #13]
    2a5c:	461a      	mov	r2, r3
    2a5e:	9b03      	ldr	r3, [sp, #12]
    2a60:	4293      	cmp	r3, r2
    2a62:	d3d1      	bcc.n	2a08 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2a64:	2300      	movs	r3, #0
    2a66:	9303      	str	r3, [sp, #12]
    2a68:	e029      	b.n	2abe <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2a6a:	9901      	ldr	r1, [sp, #4]
    2a6c:	9a03      	ldr	r2, [sp, #12]
    2a6e:	4613      	mov	r3, r2
    2a70:	009b      	lsls	r3, r3, #2
    2a72:	4413      	add	r3, r2
    2a74:	00db      	lsls	r3, r3, #3
    2a76:	440b      	add	r3, r1
    2a78:	3340      	adds	r3, #64	; 0x40
    2a7a:	681a      	ldr	r2, [r3, #0]
    2a7c:	4994      	ldr	r1, [pc, #592]	; (2cd0 <Clock_Ip_InitClock+0x584>)
    2a7e:	4613      	mov	r3, r2
    2a80:	00db      	lsls	r3, r3, #3
    2a82:	4413      	add	r3, r2
    2a84:	440b      	add	r3, r1
    2a86:	3301      	adds	r3, #1
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	461a      	mov	r2, r3
    2a8c:	4b93      	ldr	r3, [pc, #588]	; (2cdc <Clock_Ip_InitClock+0x590>)
    2a8e:	5c9b      	ldrb	r3, [r3, r2]
    2a90:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    2a92:	4993      	ldr	r1, [pc, #588]	; (2ce0 <Clock_Ip_InitClock+0x594>)
    2a94:	9a02      	ldr	r2, [sp, #8]
    2a96:	4613      	mov	r3, r2
    2a98:	009b      	lsls	r3, r3, #2
    2a9a:	4413      	add	r3, r2
    2a9c:	009b      	lsls	r3, r3, #2
    2a9e:	440b      	add	r3, r1
    2aa0:	3304      	adds	r3, #4
    2aa2:	6819      	ldr	r1, [r3, #0]
    2aa4:	9a03      	ldr	r2, [sp, #12]
    2aa6:	4613      	mov	r3, r2
    2aa8:	009b      	lsls	r3, r3, #2
    2aaa:	4413      	add	r3, r2
    2aac:	00db      	lsls	r3, r3, #3
    2aae:	3340      	adds	r3, #64	; 0x40
    2ab0:	9a01      	ldr	r2, [sp, #4]
    2ab2:	4413      	add	r3, r2
    2ab4:	4618      	mov	r0, r3
    2ab6:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2ab8:	9b03      	ldr	r3, [sp, #12]
    2aba:	3301      	adds	r3, #1
    2abc:	9303      	str	r3, [sp, #12]
    2abe:	9b01      	ldr	r3, [sp, #4]
    2ac0:	7a9b      	ldrb	r3, [r3, #10]
    2ac2:	461a      	mov	r2, r3
    2ac4:	9b03      	ldr	r3, [sp, #12]
    2ac6:	4293      	cmp	r3, r2
    2ac8:	d3cf      	bcc.n	2a6a <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2aca:	2300      	movs	r3, #0
    2acc:	9303      	str	r3, [sp, #12]
    2ace:	e029      	b.n	2b24 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2ad0:	9901      	ldr	r1, [sp, #4]
    2ad2:	9a03      	ldr	r2, [sp, #12]
    2ad4:	4613      	mov	r3, r2
    2ad6:	009b      	lsls	r3, r3, #2
    2ad8:	4413      	add	r3, r2
    2ada:	009b      	lsls	r3, r3, #2
    2adc:	440b      	add	r3, r1
    2ade:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2ae2:	681a      	ldr	r2, [r3, #0]
    2ae4:	497a      	ldr	r1, [pc, #488]	; (2cd0 <Clock_Ip_InitClock+0x584>)
    2ae6:	4613      	mov	r3, r2
    2ae8:	00db      	lsls	r3, r3, #3
    2aea:	4413      	add	r3, r2
    2aec:	440b      	add	r3, r1
    2aee:	3301      	adds	r3, #1
    2af0:	781b      	ldrb	r3, [r3, #0]
    2af2:	461a      	mov	r2, r3
    2af4:	4b7b      	ldr	r3, [pc, #492]	; (2ce4 <Clock_Ip_InitClock+0x598>)
    2af6:	5c9b      	ldrb	r3, [r3, r2]
    2af8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    2afa:	4a7b      	ldr	r2, [pc, #492]	; (2ce8 <Clock_Ip_InitClock+0x59c>)
    2afc:	9b02      	ldr	r3, [sp, #8]
    2afe:	011b      	lsls	r3, r3, #4
    2b00:	4413      	add	r3, r2
    2b02:	3304      	adds	r3, #4
    2b04:	681c      	ldr	r4, [r3, #0]
    2b06:	9a03      	ldr	r2, [sp, #12]
    2b08:	4613      	mov	r3, r2
    2b0a:	009b      	lsls	r3, r3, #2
    2b0c:	4413      	add	r3, r2
    2b0e:	009b      	lsls	r3, r3, #2
    2b10:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2b14:	9a01      	ldr	r2, [sp, #4]
    2b16:	4413      	add	r3, r2
    2b18:	9903      	ldr	r1, [sp, #12]
    2b1a:	4618      	mov	r0, r3
    2b1c:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2b1e:	9b03      	ldr	r3, [sp, #12]
    2b20:	3301      	adds	r3, #1
    2b22:	9303      	str	r3, [sp, #12]
    2b24:	9b01      	ldr	r3, [sp, #4]
    2b26:	7c9b      	ldrb	r3, [r3, #18]
    2b28:	461a      	mov	r2, r3
    2b2a:	9b03      	ldr	r3, [sp, #12]
    2b2c:	4293      	cmp	r3, r2
    2b2e:	d3cf      	bcc.n	2ad0 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2b30:	2300      	movs	r3, #0
    2b32:	9303      	str	r3, [sp, #12]
    2b34:	e02a      	b.n	2b8c <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2b36:	9901      	ldr	r1, [sp, #4]
    2b38:	9a03      	ldr	r2, [sp, #12]
    2b3a:	4613      	mov	r3, r2
    2b3c:	009b      	lsls	r3, r3, #2
    2b3e:	4413      	add	r3, r2
    2b40:	009b      	lsls	r3, r3, #2
    2b42:	440b      	add	r3, r1
    2b44:	332c      	adds	r3, #44	; 0x2c
    2b46:	681a      	ldr	r2, [r3, #0]
    2b48:	4961      	ldr	r1, [pc, #388]	; (2cd0 <Clock_Ip_InitClock+0x584>)
    2b4a:	4613      	mov	r3, r2
    2b4c:	00db      	lsls	r3, r3, #3
    2b4e:	4413      	add	r3, r2
    2b50:	440b      	add	r3, r1
    2b52:	3301      	adds	r3, #1
    2b54:	781b      	ldrb	r3, [r3, #0]
    2b56:	461a      	mov	r2, r3
    2b58:	4b64      	ldr	r3, [pc, #400]	; (2cec <Clock_Ip_InitClock+0x5a0>)
    2b5a:	5c9b      	ldrb	r3, [r3, r2]
    2b5c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    2b5e:	4964      	ldr	r1, [pc, #400]	; (2cf0 <Clock_Ip_InitClock+0x5a4>)
    2b60:	9a02      	ldr	r2, [sp, #8]
    2b62:	4613      	mov	r3, r2
    2b64:	009b      	lsls	r3, r3, #2
    2b66:	4413      	add	r3, r2
    2b68:	009b      	lsls	r3, r3, #2
    2b6a:	440b      	add	r3, r1
    2b6c:	3308      	adds	r3, #8
    2b6e:	6819      	ldr	r1, [r3, #0]
    2b70:	9a03      	ldr	r2, [sp, #12]
    2b72:	4613      	mov	r3, r2
    2b74:	009b      	lsls	r3, r3, #2
    2b76:	4413      	add	r3, r2
    2b78:	009b      	lsls	r3, r3, #2
    2b7a:	3328      	adds	r3, #40	; 0x28
    2b7c:	9a01      	ldr	r2, [sp, #4]
    2b7e:	4413      	add	r3, r2
    2b80:	3304      	adds	r3, #4
    2b82:	4618      	mov	r0, r3
    2b84:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2b86:	9b03      	ldr	r3, [sp, #12]
    2b88:	3301      	adds	r3, #1
    2b8a:	9303      	str	r3, [sp, #12]
    2b8c:	9b01      	ldr	r3, [sp, #4]
    2b8e:	7a5b      	ldrb	r3, [r3, #9]
    2b90:	461a      	mov	r2, r3
    2b92:	9b03      	ldr	r3, [sp, #12]
    2b94:	4293      	cmp	r3, r2
    2b96:	d3ce      	bcc.n	2b36 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2b98:	2300      	movs	r3, #0
    2b9a:	9303      	str	r3, [sp, #12]
    2b9c:	e029      	b.n	2bf2 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2b9e:	9901      	ldr	r1, [sp, #4]
    2ba0:	9a03      	ldr	r2, [sp, #12]
    2ba2:	4613      	mov	r3, r2
    2ba4:	009b      	lsls	r3, r3, #2
    2ba6:	4413      	add	r3, r2
    2ba8:	00db      	lsls	r3, r3, #3
    2baa:	440b      	add	r3, r1
    2bac:	3340      	adds	r3, #64	; 0x40
    2bae:	681a      	ldr	r2, [r3, #0]
    2bb0:	4947      	ldr	r1, [pc, #284]	; (2cd0 <Clock_Ip_InitClock+0x584>)
    2bb2:	4613      	mov	r3, r2
    2bb4:	00db      	lsls	r3, r3, #3
    2bb6:	4413      	add	r3, r2
    2bb8:	440b      	add	r3, r1
    2bba:	3301      	adds	r3, #1
    2bbc:	781b      	ldrb	r3, [r3, #0]
    2bbe:	461a      	mov	r2, r3
    2bc0:	4b46      	ldr	r3, [pc, #280]	; (2cdc <Clock_Ip_InitClock+0x590>)
    2bc2:	5c9b      	ldrb	r3, [r3, r2]
    2bc4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    2bc6:	4946      	ldr	r1, [pc, #280]	; (2ce0 <Clock_Ip_InitClock+0x594>)
    2bc8:	9a02      	ldr	r2, [sp, #8]
    2bca:	4613      	mov	r3, r2
    2bcc:	009b      	lsls	r3, r3, #2
    2bce:	4413      	add	r3, r2
    2bd0:	009b      	lsls	r3, r3, #2
    2bd2:	440b      	add	r3, r1
    2bd4:	330c      	adds	r3, #12
    2bd6:	6819      	ldr	r1, [r3, #0]
    2bd8:	9a03      	ldr	r2, [sp, #12]
    2bda:	4613      	mov	r3, r2
    2bdc:	009b      	lsls	r3, r3, #2
    2bde:	4413      	add	r3, r2
    2be0:	00db      	lsls	r3, r3, #3
    2be2:	3340      	adds	r3, #64	; 0x40
    2be4:	9a01      	ldr	r2, [sp, #4]
    2be6:	4413      	add	r3, r2
    2be8:	4618      	mov	r0, r3
    2bea:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2bec:	9b03      	ldr	r3, [sp, #12]
    2bee:	3301      	adds	r3, #1
    2bf0:	9303      	str	r3, [sp, #12]
    2bf2:	9b01      	ldr	r3, [sp, #4]
    2bf4:	7a9b      	ldrb	r3, [r3, #10]
    2bf6:	461a      	mov	r2, r3
    2bf8:	9b03      	ldr	r3, [sp, #12]
    2bfa:	4293      	cmp	r3, r2
    2bfc:	d3cf      	bcc.n	2b9e <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2bfe:	2300      	movs	r3, #0
    2c00:	9303      	str	r3, [sp, #12]
    2c02:	e025      	b.n	2c50 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2c04:	9a01      	ldr	r2, [sp, #4]
    2c06:	9b03      	ldr	r3, [sp, #12]
    2c08:	3324      	adds	r3, #36	; 0x24
    2c0a:	011b      	lsls	r3, r3, #4
    2c0c:	4413      	add	r3, r2
    2c0e:	3304      	adds	r3, #4
    2c10:	681a      	ldr	r2, [r3, #0]
    2c12:	492f      	ldr	r1, [pc, #188]	; (2cd0 <Clock_Ip_InitClock+0x584>)
    2c14:	4613      	mov	r3, r2
    2c16:	00db      	lsls	r3, r3, #3
    2c18:	4413      	add	r3, r2
    2c1a:	440b      	add	r3, r1
    2c1c:	3301      	adds	r3, #1
    2c1e:	781b      	ldrb	r3, [r3, #0]
    2c20:	461a      	mov	r2, r3
    2c22:	4b34      	ldr	r3, [pc, #208]	; (2cf4 <Clock_Ip_InitClock+0x5a8>)
    2c24:	5c9b      	ldrb	r3, [r3, r2]
    2c26:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2c28:	4933      	ldr	r1, [pc, #204]	; (2cf8 <Clock_Ip_InitClock+0x5ac>)
    2c2a:	9a02      	ldr	r2, [sp, #8]
    2c2c:	4613      	mov	r3, r2
    2c2e:	005b      	lsls	r3, r3, #1
    2c30:	4413      	add	r3, r2
    2c32:	009b      	lsls	r3, r3, #2
    2c34:	440b      	add	r3, r1
    2c36:	3304      	adds	r3, #4
    2c38:	681b      	ldr	r3, [r3, #0]
    2c3a:	9a03      	ldr	r2, [sp, #12]
    2c3c:	3224      	adds	r2, #36	; 0x24
    2c3e:	0112      	lsls	r2, r2, #4
    2c40:	9901      	ldr	r1, [sp, #4]
    2c42:	440a      	add	r2, r1
    2c44:	3204      	adds	r2, #4
    2c46:	4610      	mov	r0, r2
    2c48:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2c4a:	9b03      	ldr	r3, [sp, #12]
    2c4c:	3301      	adds	r3, #1
    2c4e:	9303      	str	r3, [sp, #12]
    2c50:	9b01      	ldr	r3, [sp, #4]
    2c52:	7b9b      	ldrb	r3, [r3, #14]
    2c54:	461a      	mov	r2, r3
    2c56:	9b03      	ldr	r3, [sp, #12]
    2c58:	4293      	cmp	r3, r2
    2c5a:	d3d3      	bcc.n	2c04 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2c5c:	4b27      	ldr	r3, [pc, #156]	; (2cfc <Clock_Ip_InitClock+0x5b0>)
    2c5e:	2200      	movs	r2, #0
    2c60:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    2c62:	4b26      	ldr	r3, [pc, #152]	; (2cfc <Clock_Ip_InitClock+0x5b0>)
    2c64:	2200      	movs	r2, #0
    2c66:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    2c68:	4b24      	ldr	r3, [pc, #144]	; (2cfc <Clock_Ip_InitClock+0x5b0>)
    2c6a:	2201      	movs	r2, #1
    2c6c:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    2c6e:	4b23      	ldr	r3, [pc, #140]	; (2cfc <Clock_Ip_InitClock+0x5b0>)
    2c70:	2200      	movs	r2, #0
    2c72:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    2c74:	f000 fa9c 	bl	31b0 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2c78:	2300      	movs	r3, #0
    2c7a:	9303      	str	r3, [sp, #12]
    2c7c:	e04c      	b.n	2d18 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    2c7e:	9a01      	ldr	r2, [sp, #4]
    2c80:	9b03      	ldr	r3, [sp, #12]
    2c82:	330d      	adds	r3, #13
    2c84:	00db      	lsls	r3, r3, #3
    2c86:	4413      	add	r3, r2
    2c88:	685b      	ldr	r3, [r3, #4]
    2c8a:	4a1d      	ldr	r2, [pc, #116]	; (2d00 <Clock_Ip_InitClock+0x5b4>)
    2c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2c90:	2b03      	cmp	r3, #3
    2c92:	d03b      	beq.n	2d0c <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2c94:	9b01      	ldr	r3, [sp, #4]
    2c96:	9a03      	ldr	r2, [sp, #12]
    2c98:	320d      	adds	r2, #13
    2c9a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2c9e:	490c      	ldr	r1, [pc, #48]	; (2cd0 <Clock_Ip_InitClock+0x584>)
    2ca0:	4613      	mov	r3, r2
    2ca2:	00db      	lsls	r3, r3, #3
    2ca4:	4413      	add	r3, r2
    2ca6:	440b      	add	r3, r1
    2ca8:	3301      	adds	r3, #1
    2caa:	781b      	ldrb	r3, [r3, #0]
    2cac:	461a      	mov	r2, r3
    2cae:	4b15      	ldr	r3, [pc, #84]	; (2d04 <Clock_Ip_InitClock+0x5b8>)
    2cb0:	5c9b      	ldrb	r3, [r3, r2]
    2cb2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    2cb4:	4a14      	ldr	r2, [pc, #80]	; (2d08 <Clock_Ip_InitClock+0x5bc>)
    2cb6:	9b02      	ldr	r3, [sp, #8]
    2cb8:	00db      	lsls	r3, r3, #3
    2cba:	4413      	add	r3, r2
    2cbc:	685b      	ldr	r3, [r3, #4]
    2cbe:	9a03      	ldr	r2, [sp, #12]
    2cc0:	320d      	adds	r2, #13
    2cc2:	00d2      	lsls	r2, r2, #3
    2cc4:	9901      	ldr	r1, [sp, #4]
    2cc6:	440a      	add	r2, r1
    2cc8:	4610      	mov	r0, r2
    2cca:	4798      	blx	r3
    2ccc:	e021      	b.n	2d12 <Clock_Ip_InitClock+0x5c6>
    2cce:	bf00      	nop
    2cd0:	0000fd78 	.word	0x0000fd78
    2cd4:	0000fce8 	.word	0x0000fce8
    2cd8:	000102c4 	.word	0x000102c4
    2cdc:	0000fd38 	.word	0x0000fd38
    2ce0:	00010384 	.word	0x00010384
    2ce4:	0000fd68 	.word	0x0000fd68
    2ce8:	00010374 	.word	0x00010374
    2cec:	0000fcf8 	.word	0x0000fcf8
    2cf0:	000102cc 	.word	0x000102cc
    2cf4:	0000fd28 	.word	0x0000fd28
    2cf8:	000102f4 	.word	0x000102f4
    2cfc:	1fff8b60 	.word	0x1fff8b60
    2d00:	000101c4 	.word	0x000101c4
    2d04:	0000fd48 	.word	0x0000fd48
    2d08:	000103b0 	.word	0x000103b0
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    2d0c:	4b3a      	ldr	r3, [pc, #232]	; (2df8 <Clock_Ip_InitClock+0x6ac>)
    2d0e:	2201      	movs	r2, #1
    2d10:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2d12:	9b03      	ldr	r3, [sp, #12]
    2d14:	3301      	adds	r3, #1
    2d16:	9303      	str	r3, [sp, #12]
    2d18:	9b01      	ldr	r3, [sp, #4]
    2d1a:	7adb      	ldrb	r3, [r3, #11]
    2d1c:	461a      	mov	r2, r3
    2d1e:	9b03      	ldr	r3, [sp, #12]
    2d20:	4293      	cmp	r3, r2
    2d22:	d3ac      	bcc.n	2c7e <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2d24:	4b34      	ldr	r3, [pc, #208]	; (2df8 <Clock_Ip_InitClock+0x6ac>)
    2d26:	781b      	ldrb	r3, [r3, #0]
    2d28:	f083 0301 	eor.w	r3, r3, #1
    2d2c:	b2db      	uxtb	r3, r3
    2d2e:	2b00      	cmp	r3, #0
    2d30:	d05e      	beq.n	2df0 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2d32:	2300      	movs	r3, #0
    2d34:	9303      	str	r3, [sp, #12]
    2d36:	e01f      	b.n	2d78 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2d38:	9a01      	ldr	r2, [sp, #4]
    2d3a:	9b03      	ldr	r3, [sp, #12]
    2d3c:	334e      	adds	r3, #78	; 0x4e
    2d3e:	00db      	lsls	r3, r3, #3
    2d40:	4413      	add	r3, r2
    2d42:	685a      	ldr	r2, [r3, #4]
    2d44:	492d      	ldr	r1, [pc, #180]	; (2dfc <Clock_Ip_InitClock+0x6b0>)
    2d46:	4613      	mov	r3, r2
    2d48:	00db      	lsls	r3, r3, #3
    2d4a:	4413      	add	r3, r2
    2d4c:	440b      	add	r3, r1
    2d4e:	3301      	adds	r3, #1
    2d50:	781b      	ldrb	r3, [r3, #0]
    2d52:	461a      	mov	r2, r3
    2d54:	4b2a      	ldr	r3, [pc, #168]	; (2e00 <Clock_Ip_InitClock+0x6b4>)
    2d56:	5c9b      	ldrb	r3, [r3, r2]
    2d58:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    2d5a:	4a2a      	ldr	r2, [pc, #168]	; (2e04 <Clock_Ip_InitClock+0x6b8>)
    2d5c:	9b02      	ldr	r3, [sp, #8]
    2d5e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2d62:	9a03      	ldr	r2, [sp, #12]
    2d64:	324e      	adds	r2, #78	; 0x4e
    2d66:	00d2      	lsls	r2, r2, #3
    2d68:	9901      	ldr	r1, [sp, #4]
    2d6a:	440a      	add	r2, r1
    2d6c:	3204      	adds	r2, #4
    2d6e:	4610      	mov	r0, r2
    2d70:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2d72:	9b03      	ldr	r3, [sp, #12]
    2d74:	3301      	adds	r3, #1
    2d76:	9303      	str	r3, [sp, #12]
    2d78:	9b01      	ldr	r3, [sp, #4]
    2d7a:	7c1b      	ldrb	r3, [r3, #16]
    2d7c:	461a      	mov	r2, r3
    2d7e:	9b03      	ldr	r3, [sp, #12]
    2d80:	4293      	cmp	r3, r2
    2d82:	d3d9      	bcc.n	2d38 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2d84:	2300      	movs	r3, #0
    2d86:	9303      	str	r3, [sp, #12]
    2d88:	e028      	b.n	2ddc <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2d8a:	9901      	ldr	r1, [sp, #4]
    2d8c:	9a03      	ldr	r2, [sp, #12]
    2d8e:	4613      	mov	r3, r2
    2d90:	009b      	lsls	r3, r3, #2
    2d92:	4413      	add	r3, r2
    2d94:	009b      	lsls	r3, r3, #2
    2d96:	440b      	add	r3, r1
    2d98:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2d9c:	681a      	ldr	r2, [r3, #0]
    2d9e:	4917      	ldr	r1, [pc, #92]	; (2dfc <Clock_Ip_InitClock+0x6b0>)
    2da0:	4613      	mov	r3, r2
    2da2:	00db      	lsls	r3, r3, #3
    2da4:	4413      	add	r3, r2
    2da6:	440b      	add	r3, r1
    2da8:	3301      	adds	r3, #1
    2daa:	781b      	ldrb	r3, [r3, #0]
    2dac:	461a      	mov	r2, r3
    2dae:	4b16      	ldr	r3, [pc, #88]	; (2e08 <Clock_Ip_InitClock+0x6bc>)
    2db0:	5c9b      	ldrb	r3, [r3, r2]
    2db2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2db4:	4a15      	ldr	r2, [pc, #84]	; (2e0c <Clock_Ip_InitClock+0x6c0>)
    2db6:	9b02      	ldr	r3, [sp, #8]
    2db8:	011b      	lsls	r3, r3, #4
    2dba:	4413      	add	r3, r2
    2dbc:	330c      	adds	r3, #12
    2dbe:	6819      	ldr	r1, [r3, #0]
    2dc0:	9a03      	ldr	r2, [sp, #12]
    2dc2:	4613      	mov	r3, r2
    2dc4:	009b      	lsls	r3, r3, #2
    2dc6:	4413      	add	r3, r2
    2dc8:	009b      	lsls	r3, r3, #2
    2dca:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2dce:	9a01      	ldr	r2, [sp, #4]
    2dd0:	4413      	add	r3, r2
    2dd2:	4618      	mov	r0, r3
    2dd4:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2dd6:	9b03      	ldr	r3, [sp, #12]
    2dd8:	3301      	adds	r3, #1
    2dda:	9303      	str	r3, [sp, #12]
    2ddc:	9b01      	ldr	r3, [sp, #4]
    2dde:	7c9b      	ldrb	r3, [r3, #18]
    2de0:	461a      	mov	r2, r3
    2de2:	9b03      	ldr	r3, [sp, #12]
    2de4:	4293      	cmp	r3, r2
    2de6:	d3d0      	bcc.n	2d8a <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2de8:	2104      	movs	r1, #4
    2dea:	9801      	ldr	r0, [sp, #4]
    2dec:	f002 ff48 	bl	5c80 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    2df0:	bf00      	nop
    2df2:	b004      	add	sp, #16
    2df4:	bd10      	pop	{r4, pc}
    2df6:	bf00      	nop
    2df8:	1fff8b60 	.word	0x1fff8b60
    2dfc:	0000fd78 	.word	0x0000fd78
    2e00:	0000fd18 	.word	0x0000fd18
    2e04:	00010300 	.word	0x00010300
    2e08:	0000fd68 	.word	0x0000fd68
    2e0c:	00010374 	.word	0x00010374

00002e10 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    2e10:	b500      	push	{lr}
    2e12:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2e14:	2302      	movs	r3, #2
    2e16:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2e18:	2300      	movs	r3, #0
    2e1a:	9304      	str	r3, [sp, #16]
    2e1c:	e02c      	b.n	2e78 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    2e1e:	4a36      	ldr	r2, [pc, #216]	; (2ef8 <Clock_Ip_GetPllStatus+0xe8>)
    2e20:	9b04      	ldr	r3, [sp, #16]
    2e22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2e26:	4935      	ldr	r1, [pc, #212]	; (2efc <Clock_Ip_GetPllStatus+0xec>)
    2e28:	4613      	mov	r3, r2
    2e2a:	00db      	lsls	r3, r3, #3
    2e2c:	4413      	add	r3, r2
    2e2e:	440b      	add	r3, r1
    2e30:	3301      	adds	r3, #1
    2e32:	781b      	ldrb	r3, [r3, #0]
    2e34:	461a      	mov	r2, r3
    2e36:	4b32      	ldr	r3, [pc, #200]	; (2f00 <Clock_Ip_GetPllStatus+0xf0>)
    2e38:	5c9b      	ldrb	r3, [r3, r2]
    2e3a:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2e3c:	4931      	ldr	r1, [pc, #196]	; (2f04 <Clock_Ip_GetPllStatus+0xf4>)
    2e3e:	9a03      	ldr	r2, [sp, #12]
    2e40:	4613      	mov	r3, r2
    2e42:	009b      	lsls	r3, r3, #2
    2e44:	4413      	add	r3, r2
    2e46:	009b      	lsls	r3, r3, #2
    2e48:	440b      	add	r3, r1
    2e4a:	3308      	adds	r3, #8
    2e4c:	681b      	ldr	r3, [r3, #0]
    2e4e:	492a      	ldr	r1, [pc, #168]	; (2ef8 <Clock_Ip_GetPllStatus+0xe8>)
    2e50:	9a04      	ldr	r2, [sp, #16]
    2e52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2e56:	4610      	mov	r0, r2
    2e58:	4798      	blx	r3
    2e5a:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2e5c:	9b02      	ldr	r3, [sp, #8]
    2e5e:	2b01      	cmp	r3, #1
    2e60:	d102      	bne.n	2e68 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2e62:	2301      	movs	r3, #1
    2e64:	9305      	str	r3, [sp, #20]
            break;
    2e66:	e00d      	b.n	2e84 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2e68:	9b02      	ldr	r3, [sp, #8]
    2e6a:	2b02      	cmp	r3, #2
    2e6c:	d101      	bne.n	2e72 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2e6e:	2300      	movs	r3, #0
    2e70:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2e72:	9b04      	ldr	r3, [sp, #16]
    2e74:	3301      	adds	r3, #1
    2e76:	9304      	str	r3, [sp, #16]
    2e78:	4b23      	ldr	r3, [pc, #140]	; (2f08 <Clock_Ip_GetPllStatus+0xf8>)
    2e7a:	789b      	ldrb	r3, [r3, #2]
    2e7c:	461a      	mov	r2, r3
    2e7e:	9b04      	ldr	r3, [sp, #16]
    2e80:	4293      	cmp	r3, r2
    2e82:	d3cc      	bcc.n	2e1e <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2e84:	9b05      	ldr	r3, [sp, #20]
    2e86:	2b00      	cmp	r3, #0
    2e88:	d130      	bne.n	2eec <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2e8a:	2300      	movs	r3, #0
    2e8c:	9304      	str	r3, [sp, #16]
    2e8e:	e027      	b.n	2ee0 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2e90:	4a1e      	ldr	r2, [pc, #120]	; (2f0c <Clock_Ip_GetPllStatus+0xfc>)
    2e92:	9b04      	ldr	r3, [sp, #16]
    2e94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2e98:	4918      	ldr	r1, [pc, #96]	; (2efc <Clock_Ip_GetPllStatus+0xec>)
    2e9a:	4613      	mov	r3, r2
    2e9c:	00db      	lsls	r3, r3, #3
    2e9e:	4413      	add	r3, r2
    2ea0:	440b      	add	r3, r1
    2ea2:	3301      	adds	r3, #1
    2ea4:	781b      	ldrb	r3, [r3, #0]
    2ea6:	461a      	mov	r2, r3
    2ea8:	4b19      	ldr	r3, [pc, #100]	; (2f10 <Clock_Ip_GetPllStatus+0x100>)
    2eaa:	5c9b      	ldrb	r3, [r3, r2]
    2eac:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2eae:	4919      	ldr	r1, [pc, #100]	; (2f14 <Clock_Ip_GetPllStatus+0x104>)
    2eb0:	9a03      	ldr	r2, [sp, #12]
    2eb2:	4613      	mov	r3, r2
    2eb4:	005b      	lsls	r3, r3, #1
    2eb6:	4413      	add	r3, r2
    2eb8:	009b      	lsls	r3, r3, #2
    2eba:	440b      	add	r3, r1
    2ebc:	3308      	adds	r3, #8
    2ebe:	681b      	ldr	r3, [r3, #0]
    2ec0:	4912      	ldr	r1, [pc, #72]	; (2f0c <Clock_Ip_GetPllStatus+0xfc>)
    2ec2:	9a04      	ldr	r2, [sp, #16]
    2ec4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2ec8:	4610      	mov	r0, r2
    2eca:	4798      	blx	r3
    2ecc:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    2ece:	9b01      	ldr	r3, [sp, #4]
    2ed0:	2b01      	cmp	r3, #1
    2ed2:	d102      	bne.n	2eda <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2ed4:	2301      	movs	r3, #1
    2ed6:	9305      	str	r3, [sp, #20]
                break;
    2ed8:	e008      	b.n	2eec <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2eda:	9b04      	ldr	r3, [sp, #16]
    2edc:	3301      	adds	r3, #1
    2ede:	9304      	str	r3, [sp, #16]
    2ee0:	4b09      	ldr	r3, [pc, #36]	; (2f08 <Clock_Ip_GetPllStatus+0xf8>)
    2ee2:	78db      	ldrb	r3, [r3, #3]
    2ee4:	461a      	mov	r2, r3
    2ee6:	9b04      	ldr	r3, [sp, #16]
    2ee8:	4293      	cmp	r3, r2
    2eea:	d3d1      	bcc.n	2e90 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2eec:	9b05      	ldr	r3, [sp, #20]
}
    2eee:	4618      	mov	r0, r3
    2ef0:	b007      	add	sp, #28
    2ef2:	f85d fb04 	ldr.w	pc, [sp], #4
    2ef6:	bf00      	nop
    2ef8:	00010280 	.word	0x00010280
    2efc:	0000fd78 	.word	0x0000fd78
    2f00:	0000fd38 	.word	0x0000fd38
    2f04:	00010384 	.word	0x00010384
    2f08:	1fff8b60 	.word	0x1fff8b60
    2f0c:	00010284 	.word	0x00010284
    2f10:	0000fd28 	.word	0x0000fd28
    2f14:	000102f4 	.word	0x000102f4

00002f18 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2f18:	b500      	push	{lr}
    2f1a:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2f1c:	4b55      	ldr	r3, [pc, #340]	; (3074 <Clock_Ip_DistributePll+0x15c>)
    2f1e:	681b      	ldr	r3, [r3, #0]
    2f20:	2b00      	cmp	r3, #0
    2f22:	f000 80a2 	beq.w	306a <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2f26:	2300      	movs	r3, #0
    2f28:	9301      	str	r3, [sp, #4]
    2f2a:	e02c      	b.n	2f86 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2f2c:	4b51      	ldr	r3, [pc, #324]	; (3074 <Clock_Ip_DistributePll+0x15c>)
    2f2e:	681a      	ldr	r2, [r3, #0]
    2f30:	9b01      	ldr	r3, [sp, #4]
    2f32:	330d      	adds	r3, #13
    2f34:	00db      	lsls	r3, r3, #3
    2f36:	4413      	add	r3, r2
    2f38:	685b      	ldr	r3, [r3, #4]
    2f3a:	4a4f      	ldr	r2, [pc, #316]	; (3078 <Clock_Ip_DistributePll+0x160>)
    2f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2f40:	2b03      	cmp	r3, #3
    2f42:	d11d      	bne.n	2f80 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2f44:	4b4b      	ldr	r3, [pc, #300]	; (3074 <Clock_Ip_DistributePll+0x15c>)
    2f46:	681b      	ldr	r3, [r3, #0]
    2f48:	9a01      	ldr	r2, [sp, #4]
    2f4a:	320d      	adds	r2, #13
    2f4c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2f50:	494a      	ldr	r1, [pc, #296]	; (307c <Clock_Ip_DistributePll+0x164>)
    2f52:	4613      	mov	r3, r2
    2f54:	00db      	lsls	r3, r3, #3
    2f56:	4413      	add	r3, r2
    2f58:	440b      	add	r3, r1
    2f5a:	3301      	adds	r3, #1
    2f5c:	781b      	ldrb	r3, [r3, #0]
    2f5e:	461a      	mov	r2, r3
    2f60:	4b47      	ldr	r3, [pc, #284]	; (3080 <Clock_Ip_DistributePll+0x168>)
    2f62:	5c9b      	ldrb	r3, [r3, r2]
    2f64:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2f66:	4a47      	ldr	r2, [pc, #284]	; (3084 <Clock_Ip_DistributePll+0x16c>)
    2f68:	9b00      	ldr	r3, [sp, #0]
    2f6a:	00db      	lsls	r3, r3, #3
    2f6c:	4413      	add	r3, r2
    2f6e:	685b      	ldr	r3, [r3, #4]
    2f70:	4a40      	ldr	r2, [pc, #256]	; (3074 <Clock_Ip_DistributePll+0x15c>)
    2f72:	6811      	ldr	r1, [r2, #0]
    2f74:	9a01      	ldr	r2, [sp, #4]
    2f76:	320d      	adds	r2, #13
    2f78:	00d2      	lsls	r2, r2, #3
    2f7a:	440a      	add	r2, r1
    2f7c:	4610      	mov	r0, r2
    2f7e:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2f80:	9b01      	ldr	r3, [sp, #4]
    2f82:	3301      	adds	r3, #1
    2f84:	9301      	str	r3, [sp, #4]
    2f86:	4b3b      	ldr	r3, [pc, #236]	; (3074 <Clock_Ip_DistributePll+0x15c>)
    2f88:	681b      	ldr	r3, [r3, #0]
    2f8a:	7adb      	ldrb	r3, [r3, #11]
    2f8c:	461a      	mov	r2, r3
    2f8e:	9b01      	ldr	r3, [sp, #4]
    2f90:	4293      	cmp	r3, r2
    2f92:	d3cb      	bcc.n	2f2c <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2f94:	4b3c      	ldr	r3, [pc, #240]	; (3088 <Clock_Ip_DistributePll+0x170>)
    2f96:	781b      	ldrb	r3, [r3, #0]
    2f98:	2b00      	cmp	r3, #0
    2f9a:	d066      	beq.n	306a <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2f9c:	2300      	movs	r3, #0
    2f9e:	9301      	str	r3, [sp, #4]
    2fa0:	e021      	b.n	2fe6 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2fa2:	4b34      	ldr	r3, [pc, #208]	; (3074 <Clock_Ip_DistributePll+0x15c>)
    2fa4:	681a      	ldr	r2, [r3, #0]
    2fa6:	9b01      	ldr	r3, [sp, #4]
    2fa8:	334e      	adds	r3, #78	; 0x4e
    2faa:	00db      	lsls	r3, r3, #3
    2fac:	4413      	add	r3, r2
    2fae:	685a      	ldr	r2, [r3, #4]
    2fb0:	4932      	ldr	r1, [pc, #200]	; (307c <Clock_Ip_DistributePll+0x164>)
    2fb2:	4613      	mov	r3, r2
    2fb4:	00db      	lsls	r3, r3, #3
    2fb6:	4413      	add	r3, r2
    2fb8:	440b      	add	r3, r1
    2fba:	3301      	adds	r3, #1
    2fbc:	781b      	ldrb	r3, [r3, #0]
    2fbe:	461a      	mov	r2, r3
    2fc0:	4b32      	ldr	r3, [pc, #200]	; (308c <Clock_Ip_DistributePll+0x174>)
    2fc2:	5c9b      	ldrb	r3, [r3, r2]
    2fc4:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2fc6:	4a32      	ldr	r2, [pc, #200]	; (3090 <Clock_Ip_DistributePll+0x178>)
    2fc8:	9b00      	ldr	r3, [sp, #0]
    2fca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2fce:	4a29      	ldr	r2, [pc, #164]	; (3074 <Clock_Ip_DistributePll+0x15c>)
    2fd0:	6811      	ldr	r1, [r2, #0]
    2fd2:	9a01      	ldr	r2, [sp, #4]
    2fd4:	324e      	adds	r2, #78	; 0x4e
    2fd6:	00d2      	lsls	r2, r2, #3
    2fd8:	440a      	add	r2, r1
    2fda:	3204      	adds	r2, #4
    2fdc:	4610      	mov	r0, r2
    2fde:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2fe0:	9b01      	ldr	r3, [sp, #4]
    2fe2:	3301      	adds	r3, #1
    2fe4:	9301      	str	r3, [sp, #4]
    2fe6:	4b23      	ldr	r3, [pc, #140]	; (3074 <Clock_Ip_DistributePll+0x15c>)
    2fe8:	681b      	ldr	r3, [r3, #0]
    2fea:	7c1b      	ldrb	r3, [r3, #16]
    2fec:	461a      	mov	r2, r3
    2fee:	9b01      	ldr	r3, [sp, #4]
    2ff0:	4293      	cmp	r3, r2
    2ff2:	d3d6      	bcc.n	2fa2 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2ff4:	2300      	movs	r3, #0
    2ff6:	9301      	str	r3, [sp, #4]
    2ff8:	e02a      	b.n	3050 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2ffa:	4b1e      	ldr	r3, [pc, #120]	; (3074 <Clock_Ip_DistributePll+0x15c>)
    2ffc:	6819      	ldr	r1, [r3, #0]
    2ffe:	9a01      	ldr	r2, [sp, #4]
    3000:	4613      	mov	r3, r2
    3002:	009b      	lsls	r3, r3, #2
    3004:	4413      	add	r3, r2
    3006:	009b      	lsls	r3, r3, #2
    3008:	440b      	add	r3, r1
    300a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    300e:	681a      	ldr	r2, [r3, #0]
    3010:	491a      	ldr	r1, [pc, #104]	; (307c <Clock_Ip_DistributePll+0x164>)
    3012:	4613      	mov	r3, r2
    3014:	00db      	lsls	r3, r3, #3
    3016:	4413      	add	r3, r2
    3018:	440b      	add	r3, r1
    301a:	3301      	adds	r3, #1
    301c:	781b      	ldrb	r3, [r3, #0]
    301e:	461a      	mov	r2, r3
    3020:	4b1c      	ldr	r3, [pc, #112]	; (3094 <Clock_Ip_DistributePll+0x17c>)
    3022:	5c9b      	ldrb	r3, [r3, r2]
    3024:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    3026:	4a1c      	ldr	r2, [pc, #112]	; (3098 <Clock_Ip_DistributePll+0x180>)
    3028:	9b00      	ldr	r3, [sp, #0]
    302a:	011b      	lsls	r3, r3, #4
    302c:	4413      	add	r3, r2
    302e:	330c      	adds	r3, #12
    3030:	6819      	ldr	r1, [r3, #0]
    3032:	4b10      	ldr	r3, [pc, #64]	; (3074 <Clock_Ip_DistributePll+0x15c>)
    3034:	6818      	ldr	r0, [r3, #0]
    3036:	9a01      	ldr	r2, [sp, #4]
    3038:	4613      	mov	r3, r2
    303a:	009b      	lsls	r3, r3, #2
    303c:	4413      	add	r3, r2
    303e:	009b      	lsls	r3, r3, #2
    3040:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3044:	4403      	add	r3, r0
    3046:	4618      	mov	r0, r3
    3048:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    304a:	9b01      	ldr	r3, [sp, #4]
    304c:	3301      	adds	r3, #1
    304e:	9301      	str	r3, [sp, #4]
    3050:	4b08      	ldr	r3, [pc, #32]	; (3074 <Clock_Ip_DistributePll+0x15c>)
    3052:	681b      	ldr	r3, [r3, #0]
    3054:	7c9b      	ldrb	r3, [r3, #18]
    3056:	461a      	mov	r2, r3
    3058:	9b01      	ldr	r3, [sp, #4]
    305a:	4293      	cmp	r3, r2
    305c:	d3cd      	bcc.n	2ffa <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    305e:	4b05      	ldr	r3, [pc, #20]	; (3074 <Clock_Ip_DistributePll+0x15c>)
    3060:	681b      	ldr	r3, [r3, #0]
    3062:	2104      	movs	r1, #4
    3064:	4618      	mov	r0, r3
    3066:	f002 fe0b 	bl	5c80 <Clock_Ip_Command>
        }
    }
}
    306a:	bf00      	nop
    306c:	b003      	add	sp, #12
    306e:	f85d fb04 	ldr.w	pc, [sp], #4
    3072:	bf00      	nop
    3074:	1fff8b58 	.word	0x1fff8b58
    3078:	000101c4 	.word	0x000101c4
    307c:	0000fd78 	.word	0x0000fd78
    3080:	0000fd48 	.word	0x0000fd48
    3084:	000103b0 	.word	0x000103b0
    3088:	1fff8b60 	.word	0x1fff8b60
    308c:	0000fd18 	.word	0x0000fd18
    3090:	00010300 	.word	0x00010300
    3094:	0000fd68 	.word	0x0000fd68
    3098:	00010374 	.word	0x00010374

0000309c <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    309c:	b500      	push	{lr}
    309e:	b085      	sub	sp, #20
    30a0:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    30a2:	490c      	ldr	r1, [pc, #48]	; (30d4 <Clock_Ip_DisableClockMonitor+0x38>)
    30a4:	9a01      	ldr	r2, [sp, #4]
    30a6:	4613      	mov	r3, r2
    30a8:	00db      	lsls	r3, r3, #3
    30aa:	4413      	add	r3, r2
    30ac:	440b      	add	r3, r1
    30ae:	3301      	adds	r3, #1
    30b0:	781b      	ldrb	r3, [r3, #0]
    30b2:	461a      	mov	r2, r3
    30b4:	4b08      	ldr	r3, [pc, #32]	; (30d8 <Clock_Ip_DisableClockMonitor+0x3c>)
    30b6:	5c9b      	ldrb	r3, [r3, r2]
    30b8:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    30ba:	4a08      	ldr	r2, [pc, #32]	; (30dc <Clock_Ip_DisableClockMonitor+0x40>)
    30bc:	9b03      	ldr	r3, [sp, #12]
    30be:	011b      	lsls	r3, r3, #4
    30c0:	4413      	add	r3, r2
    30c2:	3308      	adds	r3, #8
    30c4:	681b      	ldr	r3, [r3, #0]
    30c6:	9801      	ldr	r0, [sp, #4]
    30c8:	4798      	blx	r3
}
    30ca:	bf00      	nop
    30cc:	b005      	add	sp, #20
    30ce:	f85d fb04 	ldr.w	pc, [sp], #4
    30d2:	bf00      	nop
    30d4:	0000fd78 	.word	0x0000fd78
    30d8:	0000fd68 	.word	0x0000fd68
    30dc:	00010374 	.word	0x00010374

000030e0 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    30e0:	b082      	sub	sp, #8
    30e2:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    30e4:	4a02      	ldr	r2, [pc, #8]	; (30f0 <Clock_Ip_InstallNotificationsCallback+0x10>)
    30e6:	9b01      	ldr	r3, [sp, #4]
    30e8:	6013      	str	r3, [r2, #0]
}
    30ea:	bf00      	nop
    30ec:	b002      	add	sp, #8
    30ee:	4770      	bx	lr
    30f0:	1fff8b1c 	.word	0x1fff8b1c

000030f4 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    30f4:	b500      	push	{lr}
    30f6:	b085      	sub	sp, #20
    30f8:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    30fa:	490c      	ldr	r1, [pc, #48]	; (312c <Clock_Ip_DisableModuleClock+0x38>)
    30fc:	9a01      	ldr	r2, [sp, #4]
    30fe:	4613      	mov	r3, r2
    3100:	00db      	lsls	r3, r3, #3
    3102:	4413      	add	r3, r2
    3104:	440b      	add	r3, r1
    3106:	3301      	adds	r3, #1
    3108:	781b      	ldrb	r3, [r3, #0]
    310a:	461a      	mov	r2, r3
    310c:	4b08      	ldr	r3, [pc, #32]	; (3130 <Clock_Ip_DisableModuleClock+0x3c>)
    310e:	5c9b      	ldrb	r3, [r3, r2]
    3110:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    3112:	4a08      	ldr	r2, [pc, #32]	; (3134 <Clock_Ip_DisableModuleClock+0x40>)
    3114:	9b03      	ldr	r3, [sp, #12]
    3116:	00db      	lsls	r3, r3, #3
    3118:	4413      	add	r3, r2
    311a:	685b      	ldr	r3, [r3, #4]
    311c:	2101      	movs	r1, #1
    311e:	9801      	ldr	r0, [sp, #4]
    3120:	4798      	blx	r3
}
    3122:	bf00      	nop
    3124:	b005      	add	sp, #20
    3126:	f85d fb04 	ldr.w	pc, [sp], #4
    312a:	bf00      	nop
    312c:	0000fd78 	.word	0x0000fd78
    3130:	0000fd18 	.word	0x0000fd18
    3134:	00010300 	.word	0x00010300

00003138 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    3138:	b500      	push	{lr}
    313a:	b085      	sub	sp, #20
    313c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    313e:	490c      	ldr	r1, [pc, #48]	; (3170 <Clock_Ip_EnableModuleClock+0x38>)
    3140:	9a01      	ldr	r2, [sp, #4]
    3142:	4613      	mov	r3, r2
    3144:	00db      	lsls	r3, r3, #3
    3146:	4413      	add	r3, r2
    3148:	440b      	add	r3, r1
    314a:	3301      	adds	r3, #1
    314c:	781b      	ldrb	r3, [r3, #0]
    314e:	461a      	mov	r2, r3
    3150:	4b08      	ldr	r3, [pc, #32]	; (3174 <Clock_Ip_EnableModuleClock+0x3c>)
    3152:	5c9b      	ldrb	r3, [r3, r2]
    3154:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    3156:	4a08      	ldr	r2, [pc, #32]	; (3178 <Clock_Ip_EnableModuleClock+0x40>)
    3158:	9b03      	ldr	r3, [sp, #12]
    315a:	00db      	lsls	r3, r3, #3
    315c:	4413      	add	r3, r2
    315e:	685b      	ldr	r3, [r3, #4]
    3160:	2100      	movs	r1, #0
    3162:	9801      	ldr	r0, [sp, #4]
    3164:	4798      	blx	r3
}
    3166:	bf00      	nop
    3168:	b005      	add	sp, #20
    316a:	f85d fb04 	ldr.w	pc, [sp], #4
    316e:	bf00      	nop
    3170:	0000fd78 	.word	0x0000fd78
    3174:	0000fd18 	.word	0x0000fd18
    3178:	00010300 	.word	0x00010300

0000317c <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    317c:	b500      	push	{lr}
    317e:	b083      	sub	sp, #12
    3180:	9001      	str	r0, [sp, #4]
    3182:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    3184:	4b08      	ldr	r3, [pc, #32]	; (31a8 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    3186:	2200      	movs	r2, #0
    3188:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    318a:	4b08      	ldr	r3, [pc, #32]	; (31ac <Clock_Ip_PowerModeChangeNotification+0x30>)
    318c:	681b      	ldr	r3, [r3, #0]
    318e:	2102      	movs	r1, #2
    3190:	4618      	mov	r0, r3
    3192:	f002 fd75 	bl	5c80 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    3196:	9900      	ldr	r1, [sp, #0]
    3198:	9801      	ldr	r0, [sp, #4]
    319a:	f002 fc51 	bl	5a40 <Clock_Ip_ClockPowerModeChangeNotification>
}
    319e:	bf00      	nop
    31a0:	b003      	add	sp, #12
    31a2:	f85d fb04 	ldr.w	pc, [sp], #4
    31a6:	bf00      	nop
    31a8:	1fff8b18 	.word	0x1fff8b18
    31ac:	1fff8b58 	.word	0x1fff8b58

000031b0 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    31b0:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    31b2:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    31b6:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    31b8:	4b06      	ldr	r3, [pc, #24]	; (31d4 <Clock_Ip_SetWaitStates+0x24>)
    31ba:	785b      	ldrb	r3, [r3, #1]
    31bc:	2b00      	cmp	r3, #0
    31be:	d005      	beq.n	31cc <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    31c0:	9b01      	ldr	r3, [sp, #4]
    31c2:	3b01      	subs	r3, #1
    31c4:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    31c6:	9b01      	ldr	r3, [sp, #4]
    31c8:	2b00      	cmp	r3, #0
    31ca:	d1f9      	bne.n	31c0 <Clock_Ip_SetWaitStates+0x10>
    }
}
    31cc:	bf00      	nop
    31ce:	b002      	add	sp, #8
    31d0:	4770      	bx	lr
    31d2:	bf00      	nop
    31d4:	1fff8b60 	.word	0x1fff8b60

000031d8 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    31d8:	b500      	push	{lr}
    31da:	b083      	sub	sp, #12
    31dc:	9001      	str	r0, [sp, #4]
    31de:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    31e0:	4b04      	ldr	r3, [pc, #16]	; (31f4 <Clock_Ip_ReportClockErrors+0x1c>)
    31e2:	681b      	ldr	r3, [r3, #0]
    31e4:	9900      	ldr	r1, [sp, #0]
    31e6:	9801      	ldr	r0, [sp, #4]
    31e8:	4798      	blx	r3
}
    31ea:	bf00      	nop
    31ec:	b003      	add	sp, #12
    31ee:	f85d fb04 	ldr.w	pc, [sp], #4
    31f2:	bf00      	nop
    31f4:	1fff8b1c 	.word	0x1fff8b1c

000031f8 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    31f8:	b500      	push	{lr}
    31fa:	b085      	sub	sp, #20
    31fc:	9003      	str	r0, [sp, #12]
    31fe:	9102      	str	r1, [sp, #8]
    3200:	9201      	str	r2, [sp, #4]
    3202:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    3204:	2000      	movs	r0, #0
    3206:	f7fe ffd1 	bl	21ac <OsIf_GetCounter>
    320a:	4602      	mov	r2, r0
    320c:	9b03      	ldr	r3, [sp, #12]
    320e:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    3210:	9b02      	ldr	r3, [sp, #8]
    3212:	2200      	movs	r2, #0
    3214:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    3216:	2100      	movs	r1, #0
    3218:	9800      	ldr	r0, [sp, #0]
    321a:	f7ff f813 	bl	2244 <OsIf_MicrosToTicks>
    321e:	4602      	mov	r2, r0
    3220:	9b01      	ldr	r3, [sp, #4]
    3222:	601a      	str	r2, [r3, #0]
}
    3224:	bf00      	nop
    3226:	b005      	add	sp, #20
    3228:	f85d fb04 	ldr.w	pc, [sp], #4

0000322c <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    322c:	b500      	push	{lr}
    322e:	b087      	sub	sp, #28
    3230:	9003      	str	r0, [sp, #12]
    3232:	9102      	str	r1, [sp, #8]
    3234:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    3236:	2300      	movs	r3, #0
    3238:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    323c:	2100      	movs	r1, #0
    323e:	9803      	ldr	r0, [sp, #12]
    3240:	f7fe ffcd 	bl	21de <OsIf_GetElapsed>
    3244:	4602      	mov	r2, r0
    3246:	9b02      	ldr	r3, [sp, #8]
    3248:	681b      	ldr	r3, [r3, #0]
    324a:	441a      	add	r2, r3
    324c:	9b02      	ldr	r3, [sp, #8]
    324e:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    3250:	9b02      	ldr	r3, [sp, #8]
    3252:	681b      	ldr	r3, [r3, #0]
    3254:	9a01      	ldr	r2, [sp, #4]
    3256:	429a      	cmp	r2, r3
    3258:	d802      	bhi.n	3260 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    325a:	2301      	movs	r3, #1
    325c:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    3260:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    3264:	4618      	mov	r0, r3
    3266:	b007      	add	sp, #28
    3268:	f85d fb04 	ldr.w	pc, [sp], #4

0000326c <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    326c:	b082      	sub	sp, #8
    326e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3270:	bf00      	nop
    3272:	b002      	add	sp, #8
    3274:	4770      	bx	lr

00003276 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    3276:	b500      	push	{lr}
    3278:	b083      	sub	sp, #12
    327a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    327c:	9b01      	ldr	r3, [sp, #4]
    327e:	2b00      	cmp	r3, #0
    3280:	d002      	beq.n	3288 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    3282:	9801      	ldr	r0, [sp, #4]
    3284:	f000 f8ad 	bl	33e2 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3288:	bf00      	nop
    328a:	b003      	add	sp, #12
    328c:	f85d fb04 	ldr.w	pc, [sp], #4

00003290 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    3290:	b500      	push	{lr}
    3292:	b083      	sub	sp, #12
    3294:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3296:	9b01      	ldr	r3, [sp, #4]
    3298:	2b00      	cmp	r3, #0
    329a:	d002      	beq.n	32a2 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    329c:	9801      	ldr	r0, [sp, #4]
    329e:	f000 f8cd 	bl	343c <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32a2:	bf00      	nop
    32a4:	b003      	add	sp, #12
    32a6:	f85d fb04 	ldr.w	pc, [sp], #4

000032aa <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    32aa:	b500      	push	{lr}
    32ac:	b083      	sub	sp, #12
    32ae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32b0:	9b01      	ldr	r3, [sp, #4]
    32b2:	2b00      	cmp	r3, #0
    32b4:	d002      	beq.n	32bc <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    32b6:	9801      	ldr	r0, [sp, #4]
    32b8:	f000 f8ee 	bl	3498 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32bc:	bf00      	nop
    32be:	b003      	add	sp, #12
    32c0:	f85d fb04 	ldr.w	pc, [sp], #4

000032c4 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    32c4:	b500      	push	{lr}
    32c6:	b083      	sub	sp, #12
    32c8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32ca:	9b01      	ldr	r3, [sp, #4]
    32cc:	2b00      	cmp	r3, #0
    32ce:	d002      	beq.n	32d6 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    32d0:	9801      	ldr	r0, [sp, #4]
    32d2:	f000 f8f9 	bl	34c8 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32d6:	bf00      	nop
    32d8:	b003      	add	sp, #12
    32da:	f85d fb04 	ldr.w	pc, [sp], #4

000032de <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    32de:	b500      	push	{lr}
    32e0:	b083      	sub	sp, #12
    32e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32e4:	9b01      	ldr	r3, [sp, #4]
    32e6:	2b00      	cmp	r3, #0
    32e8:	d002      	beq.n	32f0 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    32ea:	9801      	ldr	r0, [sp, #4]
    32ec:	f000 f904 	bl	34f8 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32f0:	bf00      	nop
    32f2:	b003      	add	sp, #12
    32f4:	f85d fb04 	ldr.w	pc, [sp], #4

000032f8 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    32f8:	b500      	push	{lr}
    32fa:	b083      	sub	sp, #12
    32fc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32fe:	9b01      	ldr	r3, [sp, #4]
    3300:	2b00      	cmp	r3, #0
    3302:	d002      	beq.n	330a <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    3304:	9801      	ldr	r0, [sp, #4]
    3306:	f000 f90f 	bl	3528 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    330a:	bf00      	nop
    330c:	b003      	add	sp, #12
    330e:	f85d fb04 	ldr.w	pc, [sp], #4

00003312 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3312:	b500      	push	{lr}
    3314:	b083      	sub	sp, #12
    3316:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3318:	9b01      	ldr	r3, [sp, #4]
    331a:	2b00      	cmp	r3, #0
    331c:	d002      	beq.n	3324 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    331e:	9801      	ldr	r0, [sp, #4]
    3320:	f000 f91a 	bl	3558 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3324:	bf00      	nop
    3326:	b003      	add	sp, #12
    3328:	f85d fb04 	ldr.w	pc, [sp], #4

0000332c <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    332c:	b500      	push	{lr}
    332e:	b083      	sub	sp, #12
    3330:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3332:	9b01      	ldr	r3, [sp, #4]
    3334:	2b00      	cmp	r3, #0
    3336:	d002      	beq.n	333e <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    3338:	9801      	ldr	r0, [sp, #4]
    333a:	f000 f925 	bl	3588 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    333e:	bf00      	nop
    3340:	b003      	add	sp, #12
    3342:	f85d fb04 	ldr.w	pc, [sp], #4

00003346 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3346:	b500      	push	{lr}
    3348:	b083      	sub	sp, #12
    334a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    334c:	9b01      	ldr	r3, [sp, #4]
    334e:	2b00      	cmp	r3, #0
    3350:	d002      	beq.n	3358 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    3352:	9801      	ldr	r0, [sp, #4]
    3354:	f000 f930 	bl	35b8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3358:	bf00      	nop
    335a:	b003      	add	sp, #12
    335c:	f85d fb04 	ldr.w	pc, [sp], #4

00003360 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3360:	b500      	push	{lr}
    3362:	b083      	sub	sp, #12
    3364:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3366:	9b01      	ldr	r3, [sp, #4]
    3368:	2b00      	cmp	r3, #0
    336a:	d002      	beq.n	3372 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    336c:	9801      	ldr	r0, [sp, #4]
    336e:	f000 f93b 	bl	35e8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3372:	bf00      	nop
    3374:	b003      	add	sp, #12
    3376:	f85d fb04 	ldr.w	pc, [sp], #4

0000337a <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    337a:	b500      	push	{lr}
    337c:	b083      	sub	sp, #12
    337e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3380:	9b01      	ldr	r3, [sp, #4]
    3382:	2b00      	cmp	r3, #0
    3384:	d002      	beq.n	338c <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    3386:	9801      	ldr	r0, [sp, #4]
    3388:	f000 f946 	bl	3618 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    338c:	bf00      	nop
    338e:	b003      	add	sp, #12
    3390:	f85d fb04 	ldr.w	pc, [sp], #4

00003394 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    3394:	b500      	push	{lr}
    3396:	b083      	sub	sp, #12
    3398:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    339a:	9b01      	ldr	r3, [sp, #4]
    339c:	2b00      	cmp	r3, #0
    339e:	d002      	beq.n	33a6 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    33a0:	9801      	ldr	r0, [sp, #4]
    33a2:	f000 f951 	bl	3648 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33a6:	bf00      	nop
    33a8:	b003      	add	sp, #12
    33aa:	f85d fb04 	ldr.w	pc, [sp], #4

000033ae <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    33ae:	b500      	push	{lr}
    33b0:	b083      	sub	sp, #12
    33b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33b4:	9b01      	ldr	r3, [sp, #4]
    33b6:	2b00      	cmp	r3, #0
    33b8:	d002      	beq.n	33c0 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    33ba:	9801      	ldr	r0, [sp, #4]
    33bc:	f000 f95e 	bl	367c <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33c0:	bf00      	nop
    33c2:	b003      	add	sp, #12
    33c4:	f85d fb04 	ldr.w	pc, [sp], #4

000033c8 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    33c8:	b500      	push	{lr}
    33ca:	b083      	sub	sp, #12
    33cc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33ce:	9b01      	ldr	r3, [sp, #4]
    33d0:	2b00      	cmp	r3, #0
    33d2:	d002      	beq.n	33da <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    33d4:	9801      	ldr	r0, [sp, #4]
    33d6:	f000 f98b 	bl	36f0 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33da:	bf00      	nop
    33dc:	b003      	add	sp, #12
    33de:	f85d fb04 	ldr.w	pc, [sp], #4

000033e2 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    33e2:	b086      	sub	sp, #24
    33e4:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    33e6:	9b01      	ldr	r3, [sp, #4]
    33e8:	681a      	ldr	r2, [r3, #0]
    33ea:	4911      	ldr	r1, [pc, #68]	; (3430 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    33ec:	4613      	mov	r3, r2
    33ee:	00db      	lsls	r3, r3, #3
    33f0:	4413      	add	r3, r2
    33f2:	440b      	add	r3, r1
    33f4:	781b      	ldrb	r3, [r3, #0]
    33f6:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    33f8:	9b01      	ldr	r3, [sp, #4]
    33fa:	685b      	ldr	r3, [r3, #4]
    33fc:	4a0d      	ldr	r2, [pc, #52]	; (3434 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    33fe:	5cd3      	ldrb	r3, [r2, r3]
    3400:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3402:	4a0d      	ldr	r2, [pc, #52]	; (3438 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3404:	9b05      	ldr	r3, [sp, #20]
    3406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    340a:	681b      	ldr	r3, [r3, #0]
    340c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    340e:	9b03      	ldr	r3, [sp, #12]
    3410:	f023 0307 	bic.w	r3, r3, #7
    3414:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    3416:	9a03      	ldr	r2, [sp, #12]
    3418:	9b04      	ldr	r3, [sp, #16]
    341a:	4313      	orrs	r3, r2
    341c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    341e:	4a06      	ldr	r2, [pc, #24]	; (3438 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3420:	9b05      	ldr	r3, [sp, #20]
    3422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3426:	9a03      	ldr	r2, [sp, #12]
    3428:	601a      	str	r2, [r3, #0]
}
    342a:	bf00      	nop
    342c:	b006      	add	sp, #24
    342e:	4770      	bx	lr
    3430:	0000fd78 	.word	0x0000fd78
    3434:	00010170 	.word	0x00010170
    3438:	000101b4 	.word	0x000101b4

0000343c <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    343c:	b086      	sub	sp, #24
    343e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3440:	9b01      	ldr	r3, [sp, #4]
    3442:	681a      	ldr	r2, [r3, #0]
    3444:	4911      	ldr	r1, [pc, #68]	; (348c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    3446:	4613      	mov	r3, r2
    3448:	00db      	lsls	r3, r3, #3
    344a:	4413      	add	r3, r2
    344c:	440b      	add	r3, r1
    344e:	781b      	ldrb	r3, [r3, #0]
    3450:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3452:	9b01      	ldr	r3, [sp, #4]
    3454:	685b      	ldr	r3, [r3, #4]
    3456:	4a0e      	ldr	r2, [pc, #56]	; (3490 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    3458:	5cd3      	ldrb	r3, [r2, r3]
    345a:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    345c:	4a0d      	ldr	r2, [pc, #52]	; (3494 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    345e:	9b05      	ldr	r3, [sp, #20]
    3460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3464:	681b      	ldr	r3, [r3, #0]
    3466:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    3468:	9b03      	ldr	r3, [sp, #12]
    346a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    346e:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    3470:	9b04      	ldr	r3, [sp, #16]
    3472:	021b      	lsls	r3, r3, #8
    3474:	9a03      	ldr	r2, [sp, #12]
    3476:	4313      	orrs	r3, r2
    3478:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    347a:	4a06      	ldr	r2, [pc, #24]	; (3494 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    347c:	9b05      	ldr	r3, [sp, #20]
    347e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3482:	9a03      	ldr	r2, [sp, #12]
    3484:	601a      	str	r2, [r3, #0]
}
    3486:	bf00      	nop
    3488:	b006      	add	sp, #24
    348a:	4770      	bx	lr
    348c:	0000fd78 	.word	0x0000fd78
    3490:	00010170 	.word	0x00010170
    3494:	000101b4 	.word	0x000101b4

00003498 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3498:	b084      	sub	sp, #16
    349a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    349c:	4b09      	ldr	r3, [pc, #36]	; (34c4 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    349e:	695b      	ldr	r3, [r3, #20]
    34a0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    34a2:	9b03      	ldr	r3, [sp, #12]
    34a4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    34a8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    34aa:	9b01      	ldr	r3, [sp, #4]
    34ac:	685b      	ldr	r3, [r3, #4]
    34ae:	3b01      	subs	r3, #1
    34b0:	041b      	lsls	r3, r3, #16
    34b2:	9a03      	ldr	r2, [sp, #12]
    34b4:	4313      	orrs	r3, r2
    34b6:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    34b8:	4a02      	ldr	r2, [pc, #8]	; (34c4 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    34ba:	9b03      	ldr	r3, [sp, #12]
    34bc:	6153      	str	r3, [r2, #20]
}
    34be:	bf00      	nop
    34c0:	b004      	add	sp, #16
    34c2:	4770      	bx	lr
    34c4:	40064000 	.word	0x40064000

000034c8 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    34c8:	b084      	sub	sp, #16
    34ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    34cc:	4b09      	ldr	r3, [pc, #36]	; (34f4 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    34ce:	695b      	ldr	r3, [r3, #20]
    34d0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    34d2:	9b03      	ldr	r3, [sp, #12]
    34d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    34d8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    34da:	9b01      	ldr	r3, [sp, #4]
    34dc:	685b      	ldr	r3, [r3, #4]
    34de:	3b01      	subs	r3, #1
    34e0:	011b      	lsls	r3, r3, #4
    34e2:	9a03      	ldr	r2, [sp, #12]
    34e4:	4313      	orrs	r3, r2
    34e6:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    34e8:	4a02      	ldr	r2, [pc, #8]	; (34f4 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    34ea:	9b03      	ldr	r3, [sp, #12]
    34ec:	6153      	str	r3, [r2, #20]
}
    34ee:	bf00      	nop
    34f0:	b004      	add	sp, #16
    34f2:	4770      	bx	lr
    34f4:	40064000 	.word	0x40064000

000034f8 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    34f8:	b084      	sub	sp, #16
    34fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    34fc:	4b09      	ldr	r3, [pc, #36]	; (3524 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    34fe:	695b      	ldr	r3, [r3, #20]
    3500:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    3502:	9b03      	ldr	r3, [sp, #12]
    3504:	f023 030f 	bic.w	r3, r3, #15
    3508:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    350a:	9b01      	ldr	r3, [sp, #4]
    350c:	685b      	ldr	r3, [r3, #4]
    350e:	3b01      	subs	r3, #1
    3510:	9a03      	ldr	r2, [sp, #12]
    3512:	4313      	orrs	r3, r2
    3514:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3516:	4a03      	ldr	r2, [pc, #12]	; (3524 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3518:	9b03      	ldr	r3, [sp, #12]
    351a:	6153      	str	r3, [r2, #20]
}
    351c:	bf00      	nop
    351e:	b004      	add	sp, #16
    3520:	4770      	bx	lr
    3522:	bf00      	nop
    3524:	40064000 	.word	0x40064000

00003528 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3528:	b084      	sub	sp, #16
    352a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    352c:	4b09      	ldr	r3, [pc, #36]	; (3554 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    352e:	699b      	ldr	r3, [r3, #24]
    3530:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    3532:	9b03      	ldr	r3, [sp, #12]
    3534:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3538:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    353a:	9b01      	ldr	r3, [sp, #4]
    353c:	685b      	ldr	r3, [r3, #4]
    353e:	3b01      	subs	r3, #1
    3540:	041b      	lsls	r3, r3, #16
    3542:	9a03      	ldr	r2, [sp, #12]
    3544:	4313      	orrs	r3, r2
    3546:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3548:	4a02      	ldr	r2, [pc, #8]	; (3554 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    354a:	9b03      	ldr	r3, [sp, #12]
    354c:	6193      	str	r3, [r2, #24]
}
    354e:	bf00      	nop
    3550:	b004      	add	sp, #16
    3552:	4770      	bx	lr
    3554:	40064000 	.word	0x40064000

00003558 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3558:	b084      	sub	sp, #16
    355a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    355c:	4b09      	ldr	r3, [pc, #36]	; (3584 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    355e:	699b      	ldr	r3, [r3, #24]
    3560:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    3562:	9b03      	ldr	r3, [sp, #12]
    3564:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3568:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    356a:	9b01      	ldr	r3, [sp, #4]
    356c:	685b      	ldr	r3, [r3, #4]
    356e:	3b01      	subs	r3, #1
    3570:	011b      	lsls	r3, r3, #4
    3572:	9a03      	ldr	r2, [sp, #12]
    3574:	4313      	orrs	r3, r2
    3576:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3578:	4a02      	ldr	r2, [pc, #8]	; (3584 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    357a:	9b03      	ldr	r3, [sp, #12]
    357c:	6193      	str	r3, [r2, #24]
}
    357e:	bf00      	nop
    3580:	b004      	add	sp, #16
    3582:	4770      	bx	lr
    3584:	40064000 	.word	0x40064000

00003588 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3588:	b084      	sub	sp, #16
    358a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    358c:	4b09      	ldr	r3, [pc, #36]	; (35b4 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    358e:	699b      	ldr	r3, [r3, #24]
    3590:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    3592:	9b03      	ldr	r3, [sp, #12]
    3594:	f023 030f 	bic.w	r3, r3, #15
    3598:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    359a:	9b01      	ldr	r3, [sp, #4]
    359c:	685b      	ldr	r3, [r3, #4]
    359e:	3b01      	subs	r3, #1
    35a0:	9a03      	ldr	r2, [sp, #12]
    35a2:	4313      	orrs	r3, r2
    35a4:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    35a6:	4a03      	ldr	r2, [pc, #12]	; (35b4 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    35a8:	9b03      	ldr	r3, [sp, #12]
    35aa:	6193      	str	r3, [r2, #24]
}
    35ac:	bf00      	nop
    35ae:	b004      	add	sp, #16
    35b0:	4770      	bx	lr
    35b2:	bf00      	nop
    35b4:	40064000 	.word	0x40064000

000035b8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    35b8:	b084      	sub	sp, #16
    35ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    35bc:	4b09      	ldr	r3, [pc, #36]	; (35e4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    35be:	69db      	ldr	r3, [r3, #28]
    35c0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    35c2:	9b03      	ldr	r3, [sp, #12]
    35c4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    35c8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    35ca:	9b01      	ldr	r3, [sp, #4]
    35cc:	685b      	ldr	r3, [r3, #4]
    35ce:	3b01      	subs	r3, #1
    35d0:	041b      	lsls	r3, r3, #16
    35d2:	9a03      	ldr	r2, [sp, #12]
    35d4:	4313      	orrs	r3, r2
    35d6:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    35d8:	4a02      	ldr	r2, [pc, #8]	; (35e4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    35da:	9b03      	ldr	r3, [sp, #12]
    35dc:	61d3      	str	r3, [r2, #28]
}
    35de:	bf00      	nop
    35e0:	b004      	add	sp, #16
    35e2:	4770      	bx	lr
    35e4:	40064000 	.word	0x40064000

000035e8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    35e8:	b084      	sub	sp, #16
    35ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    35ec:	4b09      	ldr	r3, [pc, #36]	; (3614 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    35ee:	69db      	ldr	r3, [r3, #28]
    35f0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    35f2:	9b03      	ldr	r3, [sp, #12]
    35f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    35f8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    35fa:	9b01      	ldr	r3, [sp, #4]
    35fc:	685b      	ldr	r3, [r3, #4]
    35fe:	3b01      	subs	r3, #1
    3600:	011b      	lsls	r3, r3, #4
    3602:	9a03      	ldr	r2, [sp, #12]
    3604:	4313      	orrs	r3, r2
    3606:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3608:	4a02      	ldr	r2, [pc, #8]	; (3614 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    360a:	9b03      	ldr	r3, [sp, #12]
    360c:	61d3      	str	r3, [r2, #28]
}
    360e:	bf00      	nop
    3610:	b004      	add	sp, #16
    3612:	4770      	bx	lr
    3614:	40064000 	.word	0x40064000

00003618 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3618:	b084      	sub	sp, #16
    361a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    361c:	4b09      	ldr	r3, [pc, #36]	; (3644 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    361e:	69db      	ldr	r3, [r3, #28]
    3620:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    3622:	9b03      	ldr	r3, [sp, #12]
    3624:	f023 030f 	bic.w	r3, r3, #15
    3628:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    362a:	9b01      	ldr	r3, [sp, #4]
    362c:	685b      	ldr	r3, [r3, #4]
    362e:	3b01      	subs	r3, #1
    3630:	9a03      	ldr	r2, [sp, #12]
    3632:	4313      	orrs	r3, r2
    3634:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3636:	4a03      	ldr	r2, [pc, #12]	; (3644 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3638:	9b03      	ldr	r3, [sp, #12]
    363a:	61d3      	str	r3, [r2, #28]
}
    363c:	bf00      	nop
    363e:	b004      	add	sp, #16
    3640:	4770      	bx	lr
    3642:	bf00      	nop
    3644:	40064000 	.word	0x40064000

00003648 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3648:	b084      	sub	sp, #16
    364a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    364c:	4b0a      	ldr	r3, [pc, #40]	; (3678 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    364e:	685b      	ldr	r3, [r3, #4]
    3650:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3652:	9b03      	ldr	r3, [sp, #12]
    3654:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3658:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    365a:	9b01      	ldr	r3, [sp, #4]
    365c:	685b      	ldr	r3, [r3, #4]
    365e:	3b01      	subs	r3, #1
    3660:	021b      	lsls	r3, r3, #8
    3662:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3666:	9a03      	ldr	r2, [sp, #12]
    3668:	4313      	orrs	r3, r2
    366a:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    366c:	4a02      	ldr	r2, [pc, #8]	; (3678 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    366e:	9b03      	ldr	r3, [sp, #12]
    3670:	6053      	str	r3, [r2, #4]
}
    3672:	bf00      	nop
    3674:	b004      	add	sp, #16
    3676:	4770      	bx	lr
    3678:	40048000 	.word	0x40048000

0000367c <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    367c:	b084      	sub	sp, #16
    367e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3680:	4919      	ldr	r1, [pc, #100]	; (36e8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3682:	9b01      	ldr	r3, [sp, #4]
    3684:	681a      	ldr	r2, [r3, #0]
    3686:	4819      	ldr	r0, [pc, #100]	; (36ec <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3688:	4613      	mov	r3, r2
    368a:	00db      	lsls	r3, r3, #3
    368c:	4413      	add	r3, r2
    368e:	4403      	add	r3, r0
    3690:	3305      	adds	r3, #5
    3692:	781b      	ldrb	r3, [r3, #0]
    3694:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3698:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    369a:	9b03      	ldr	r3, [sp, #12]
    369c:	f023 030f 	bic.w	r3, r3, #15
    36a0:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    36a2:	9b01      	ldr	r3, [sp, #4]
    36a4:	685b      	ldr	r3, [r3, #4]
    36a6:	3b01      	subs	r3, #1
    36a8:	f003 0307 	and.w	r3, r3, #7
    36ac:	9a03      	ldr	r2, [sp, #12]
    36ae:	4313      	orrs	r3, r2
    36b0:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    36b2:	9b01      	ldr	r3, [sp, #4]
    36b4:	7a1b      	ldrb	r3, [r3, #8]
    36b6:	3b01      	subs	r3, #1
    36b8:	00db      	lsls	r3, r3, #3
    36ba:	f003 0308 	and.w	r3, r3, #8
    36be:	9a03      	ldr	r2, [sp, #12]
    36c0:	4313      	orrs	r3, r2
    36c2:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    36c4:	4908      	ldr	r1, [pc, #32]	; (36e8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    36c6:	9b01      	ldr	r3, [sp, #4]
    36c8:	681a      	ldr	r2, [r3, #0]
    36ca:	4808      	ldr	r0, [pc, #32]	; (36ec <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    36cc:	4613      	mov	r3, r2
    36ce:	00db      	lsls	r3, r3, #3
    36d0:	4413      	add	r3, r2
    36d2:	4403      	add	r3, r0
    36d4:	3305      	adds	r3, #5
    36d6:	781b      	ldrb	r3, [r3, #0]
    36d8:	461a      	mov	r2, r3
    36da:	9b03      	ldr	r3, [sp, #12]
    36dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    36e0:	bf00      	nop
    36e2:	b004      	add	sp, #16
    36e4:	4770      	bx	lr
    36e6:	bf00      	nop
    36e8:	40065000 	.word	0x40065000
    36ec:	0000fd78 	.word	0x0000fd78

000036f0 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    36f0:	b084      	sub	sp, #16
    36f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    36f4:	4b10      	ldr	r3, [pc, #64]	; (3738 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    36f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    36f8:	4a0f      	ldr	r2, [pc, #60]	; (3738 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    36fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    36fe:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3700:	4b0d      	ldr	r3, [pc, #52]	; (3738 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3704:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3706:	9b03      	ldr	r3, [sp, #12]
    3708:	f023 030f 	bic.w	r3, r3, #15
    370c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    370e:	9b01      	ldr	r3, [sp, #4]
    3710:	685b      	ldr	r3, [r3, #4]
    3712:	3b01      	subs	r3, #1
    3714:	005b      	lsls	r3, r3, #1
    3716:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    371a:	9b01      	ldr	r3, [sp, #4]
    371c:	7a1b      	ldrb	r3, [r3, #8]
    371e:	3b01      	subs	r3, #1
    3720:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3724:	4313      	orrs	r3, r2
    3726:	9a03      	ldr	r2, [sp, #12]
    3728:	4313      	orrs	r3, r2
    372a:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    372c:	4a02      	ldr	r2, [pc, #8]	; (3738 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    372e:	9b03      	ldr	r3, [sp, #12]
    3730:	6693      	str	r3, [r2, #104]	; 0x68
}
    3732:	bf00      	nop
    3734:	b004      	add	sp, #16
    3736:	4770      	bx	lr
    3738:	40048000 	.word	0x40048000

0000373c <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    373c:	b082      	sub	sp, #8
    373e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3740:	bf00      	nop
    3742:	b002      	add	sp, #8
    3744:	4770      	bx	lr
	...

00003748 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3748:	b082      	sub	sp, #8
    374a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    374c:	bf00      	nop
    374e:	b002      	add	sp, #8
    3750:	4770      	bx	lr

00003752 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3752:	b082      	sub	sp, #8
    3754:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3756:	bf00      	nop
    3758:	b002      	add	sp, #8
    375a:	4770      	bx	lr

0000375c <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    375c:	b500      	push	{lr}
    375e:	b083      	sub	sp, #12
    3760:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3762:	9b01      	ldr	r3, [sp, #4]
    3764:	2b00      	cmp	r3, #0
    3766:	d002      	beq.n	376e <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3768:	9801      	ldr	r0, [sp, #4]
    376a:	f000 f86a 	bl	3842 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    376e:	bf00      	nop
    3770:	b003      	add	sp, #12
    3772:	f85d fb04 	ldr.w	pc, [sp], #4

00003776 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3776:	b500      	push	{lr}
    3778:	b083      	sub	sp, #12
    377a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    377c:	9b01      	ldr	r3, [sp, #4]
    377e:	2b00      	cmp	r3, #0
    3780:	d002      	beq.n	3788 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    3782:	9801      	ldr	r0, [sp, #4]
    3784:	f000 f884 	bl	3890 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3788:	bf00      	nop
    378a:	b003      	add	sp, #12
    378c:	f85d fb04 	ldr.w	pc, [sp], #4

00003790 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3790:	b500      	push	{lr}
    3792:	b089      	sub	sp, #36	; 0x24
    3794:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3796:	2300      	movs	r3, #0
    3798:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    379c:	9b01      	ldr	r3, [sp, #4]
    379e:	2b00      	cmp	r3, #0
    37a0:	d031      	beq.n	3806 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    37a2:	4b1b      	ldr	r3, [pc, #108]	; (3810 <Clock_Ip_CompleteSOSC+0x80>)
    37a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    37a8:	f003 0301 	and.w	r3, r3, #1
    37ac:	2b00      	cmp	r3, #0
    37ae:	d02a      	beq.n	3806 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    37b0:	aa03      	add	r2, sp, #12
    37b2:	a904      	add	r1, sp, #16
    37b4:	a805      	add	r0, sp, #20
    37b6:	f24c 3350 	movw	r3, #50000	; 0xc350
    37ba:	f7ff fd1d 	bl	31f8 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    37be:	4b14      	ldr	r3, [pc, #80]	; (3810 <Clock_Ip_CompleteSOSC+0x80>)
    37c0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    37c4:	0e1b      	lsrs	r3, r3, #24
    37c6:	f003 0301 	and.w	r3, r3, #1
    37ca:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    37cc:	9a03      	ldr	r2, [sp, #12]
    37ce:	a904      	add	r1, sp, #16
    37d0:	ab05      	add	r3, sp, #20
    37d2:	4618      	mov	r0, r3
    37d4:	f7ff fd2a 	bl	322c <Clock_Ip_TimeoutExpired>
    37d8:	4603      	mov	r3, r0
    37da:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    37de:	9b06      	ldr	r3, [sp, #24]
    37e0:	2b00      	cmp	r3, #0
    37e2:	d106      	bne.n	37f2 <Clock_Ip_CompleteSOSC+0x62>
    37e4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    37e8:	f083 0301 	eor.w	r3, r3, #1
    37ec:	b2db      	uxtb	r3, r3
    37ee:	2b00      	cmp	r3, #0
    37f0:	d1e5      	bne.n	37be <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    37f2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    37f6:	2b00      	cmp	r3, #0
    37f8:	d005      	beq.n	3806 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    37fa:	9b01      	ldr	r3, [sp, #4]
    37fc:	681b      	ldr	r3, [r3, #0]
    37fe:	4619      	mov	r1, r3
    3800:	2001      	movs	r0, #1
    3802:	f7ff fce9 	bl	31d8 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    3806:	bf00      	nop
    3808:	b009      	add	sp, #36	; 0x24
    380a:	f85d fb04 	ldr.w	pc, [sp], #4
    380e:	bf00      	nop
    3810:	40064000 	.word	0x40064000

00003814 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3814:	b500      	push	{lr}
    3816:	b083      	sub	sp, #12
    3818:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    381a:	9801      	ldr	r0, [sp, #4]
    381c:	f000 f8c0 	bl	39a0 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3820:	bf00      	nop
    3822:	b003      	add	sp, #12
    3824:	f85d fb04 	ldr.w	pc, [sp], #4

00003828 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3828:	b500      	push	{lr}
    382a:	b083      	sub	sp, #12
    382c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    382e:	9b01      	ldr	r3, [sp, #4]
    3830:	2b00      	cmp	r3, #0
    3832:	d002      	beq.n	383a <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3834:	9801      	ldr	r0, [sp, #4]
    3836:	f000 f8c3 	bl	39c0 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    383a:	bf00      	nop
    383c:	b003      	add	sp, #12
    383e:	f85d fb04 	ldr.w	pc, [sp], #4

00003842 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3842:	b082      	sub	sp, #8
    3844:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3846:	4b11      	ldr	r3, [pc, #68]	; (388c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3848:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    384c:	4a0f      	ldr	r2, [pc, #60]	; (388c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    384e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3852:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    3856:	4b0d      	ldr	r3, [pc, #52]	; (388c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3858:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    385c:	4a0b      	ldr	r2, [pc, #44]	; (388c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    385e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3862:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    3866:	4b09      	ldr	r3, [pc, #36]	; (388c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3868:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    386c:	4a07      	ldr	r2, [pc, #28]	; (388c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    386e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3872:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    3876:	4b05      	ldr	r3, [pc, #20]	; (388c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3878:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    387c:	4a03      	ldr	r2, [pc, #12]	; (388c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    387e:	f023 0301 	bic.w	r3, r3, #1
    3882:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3886:	bf00      	nop
    3888:	b002      	add	sp, #8
    388a:	4770      	bx	lr
    388c:	40064000 	.word	0x40064000

00003890 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3890:	b082      	sub	sp, #8
    3892:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    3894:	9b01      	ldr	r3, [sp, #4]
    3896:	891b      	ldrh	r3, [r3, #8]
    3898:	2b01      	cmp	r3, #1
    389a:	d174      	bne.n	3986 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    389c:	9b01      	ldr	r3, [sp, #4]
    389e:	7bdb      	ldrb	r3, [r3, #15]
    38a0:	2b00      	cmp	r3, #0
    38a2:	d002      	beq.n	38aa <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    38a4:	2b01      	cmp	r3, #1
    38a6:	d009      	beq.n	38bc <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    38a8:	e011      	b.n	38ce <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    38aa:	4b39      	ldr	r3, [pc, #228]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    38ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    38b0:	4a37      	ldr	r2, [pc, #220]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    38b2:	f023 0308 	bic.w	r3, r3, #8
    38b6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    38ba:	e008      	b.n	38ce <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    38bc:	4b34      	ldr	r3, [pc, #208]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    38be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    38c2:	4a33      	ldr	r2, [pc, #204]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    38c4:	f043 0308 	orr.w	r3, r3, #8
    38c8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    38cc:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    38ce:	4b30      	ldr	r3, [pc, #192]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    38d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    38d4:	4a2e      	ldr	r2, [pc, #184]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    38d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    38da:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    38de:	9b01      	ldr	r3, [sp, #4]
    38e0:	685b      	ldr	r3, [r3, #4]
    38e2:	4a2c      	ldr	r2, [pc, #176]	; (3994 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    38e4:	4293      	cmp	r3, r2
    38e6:	d90d      	bls.n	3904 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    38e8:	9b01      	ldr	r3, [sp, #4]
    38ea:	685b      	ldr	r3, [r3, #4]
    38ec:	4a2a      	ldr	r2, [pc, #168]	; (3998 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    38ee:	4293      	cmp	r3, r2
    38f0:	d208      	bcs.n	3904 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    38f2:	4b27      	ldr	r3, [pc, #156]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    38f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    38f8:	4a25      	ldr	r2, [pc, #148]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    38fa:	f043 0320 	orr.w	r3, r3, #32
    38fe:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3902:	e007      	b.n	3914 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3904:	4b22      	ldr	r3, [pc, #136]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3906:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    390a:	4a21      	ldr	r2, [pc, #132]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    390c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3910:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3914:	9b01      	ldr	r3, [sp, #4]
    3916:	7b1b      	ldrb	r3, [r3, #12]
    3918:	2b00      	cmp	r3, #0
    391a:	d108      	bne.n	392e <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    391c:	4b1c      	ldr	r3, [pc, #112]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    391e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3922:	4a1b      	ldr	r2, [pc, #108]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3924:	f043 0304 	orr.w	r3, r3, #4
    3928:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    392c:	e007      	b.n	393e <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    392e:	4b18      	ldr	r3, [pc, #96]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3930:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3934:	4a16      	ldr	r2, [pc, #88]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3936:	f023 0304 	bic.w	r3, r3, #4
    393a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    393e:	9b01      	ldr	r3, [sp, #4]
    3940:	7c1b      	ldrb	r3, [r3, #16]
    3942:	2b02      	cmp	r3, #2
    3944:	d011      	beq.n	396a <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3946:	2b02      	cmp	r3, #2
    3948:	dc14      	bgt.n	3974 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    394a:	2b00      	cmp	r3, #0
    394c:	d002      	beq.n	3954 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    394e:	2b01      	cmp	r3, #1
    3950:	d005      	beq.n	395e <Clock_Ip_SetSOSC_TrustedCall+0xce>
    3952:	e00f      	b.n	3974 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3954:	4b0e      	ldr	r3, [pc, #56]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3956:	2201      	movs	r2, #1
    3958:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    395c:	e014      	b.n	3988 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    395e:	4b0c      	ldr	r3, [pc, #48]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3960:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3964:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3968:	e00e      	b.n	3988 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    396a:	4b09      	ldr	r3, [pc, #36]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    396c:	4a0b      	ldr	r2, [pc, #44]	; (399c <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    396e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    3972:	e009      	b.n	3988 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3974:	4b06      	ldr	r3, [pc, #24]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3976:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    397a:	4a05      	ldr	r2, [pc, #20]	; (3990 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    397c:	f043 0301 	orr.w	r3, r3, #1
    3980:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3984:	e000      	b.n	3988 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    3986:	bf00      	nop
}
    3988:	bf00      	nop
    398a:	b002      	add	sp, #8
    398c:	4770      	bx	lr
    398e:	bf00      	nop
    3990:	40064000 	.word	0x40064000
    3994:	003d08ff 	.word	0x003d08ff
    3998:	007a1200 	.word	0x007a1200
    399c:	00030001 	.word	0x00030001

000039a0 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    39a0:	b082      	sub	sp, #8
    39a2:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    39a4:	4b05      	ldr	r3, [pc, #20]	; (39bc <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    39a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    39aa:	4a04      	ldr	r2, [pc, #16]	; (39bc <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    39ac:	f023 0301 	bic.w	r3, r3, #1
    39b0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    39b4:	bf00      	nop
    39b6:	b002      	add	sp, #8
    39b8:	4770      	bx	lr
    39ba:	bf00      	nop
    39bc:	40064000 	.word	0x40064000

000039c0 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    39c0:	b082      	sub	sp, #8
    39c2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    39c4:	9b01      	ldr	r3, [sp, #4]
    39c6:	891b      	ldrh	r3, [r3, #8]
    39c8:	2b01      	cmp	r3, #1
    39ca:	d107      	bne.n	39dc <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    39cc:	4b05      	ldr	r3, [pc, #20]	; (39e4 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    39ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    39d2:	4a04      	ldr	r2, [pc, #16]	; (39e4 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    39d4:	f043 0301 	orr.w	r3, r3, #1
    39d8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    39dc:	bf00      	nop
    39de:	b002      	add	sp, #8
    39e0:	4770      	bx	lr
    39e2:	bf00      	nop
    39e4:	40064000 	.word	0x40064000

000039e8 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    39e8:	b082      	sub	sp, #8
    39ea:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    39ec:	bf00      	nop
    39ee:	b002      	add	sp, #8
    39f0:	4770      	bx	lr

000039f2 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    39f2:	b082      	sub	sp, #8
    39f4:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    39f6:	2300      	movs	r3, #0
}
    39f8:	4618      	mov	r0, r3
    39fa:	b002      	add	sp, #8
    39fc:	4770      	bx	lr

000039fe <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    39fe:	b082      	sub	sp, #8
    3a00:	9001      	str	r0, [sp, #4]
    3a02:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3a04:	bf00      	nop
    3a06:	b002      	add	sp, #8
    3a08:	4770      	bx	lr
	...

00003a0c <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    3a0c:	b082      	sub	sp, #8
    3a0e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3a10:	bf00      	nop
    3a12:	b002      	add	sp, #8
    3a14:	4770      	bx	lr

00003a16 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    3a16:	b082      	sub	sp, #8
    3a18:	9001      	str	r0, [sp, #4]
    3a1a:	460b      	mov	r3, r1
    3a1c:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    3a20:	bf00      	nop
    3a22:	b002      	add	sp, #8
    3a24:	4770      	bx	lr

00003a26 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    3a26:	b500      	push	{lr}
    3a28:	b083      	sub	sp, #12
    3a2a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a2c:	9b01      	ldr	r3, [sp, #4]
    3a2e:	2b00      	cmp	r3, #0
    3a30:	d002      	beq.n	3a38 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    3a32:	9801      	ldr	r0, [sp, #4]
    3a34:	f000 f8e7 	bl	3c06 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a38:	bf00      	nop
    3a3a:	b003      	add	sp, #12
    3a3c:	f85d fb04 	ldr.w	pc, [sp], #4

00003a40 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3a40:	b500      	push	{lr}
    3a42:	b085      	sub	sp, #20
    3a44:	9001      	str	r0, [sp, #4]
    3a46:	460b      	mov	r3, r1
    3a48:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3a4c:	9b01      	ldr	r3, [sp, #4]
    3a4e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3a50:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3a54:	2b00      	cmp	r3, #0
    3a56:	d003      	beq.n	3a60 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3a58:	2300      	movs	r3, #0
    3a5a:	f8ad 300c 	strh.w	r3, [sp, #12]
    3a5e:	e002      	b.n	3a66 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3a60:	2301      	movs	r3, #1
    3a62:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    3a66:	ab02      	add	r3, sp, #8
    3a68:	4618      	mov	r0, r3
    3a6a:	f7ff ffdc 	bl	3a26 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    3a6e:	bf00      	nop
    3a70:	b005      	add	sp, #20
    3a72:	f85d fb04 	ldr.w	pc, [sp], #4

00003a76 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    3a76:	b500      	push	{lr}
    3a78:	b083      	sub	sp, #12
    3a7a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a7c:	9b01      	ldr	r3, [sp, #4]
    3a7e:	2b00      	cmp	r3, #0
    3a80:	d002      	beq.n	3a88 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    3a82:	9801      	ldr	r0, [sp, #4]
    3a84:	f000 f8d6 	bl	3c34 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a88:	bf00      	nop
    3a8a:	b003      	add	sp, #12
    3a8c:	f85d fb04 	ldr.w	pc, [sp], #4

00003a90 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3a90:	b500      	push	{lr}
    3a92:	b085      	sub	sp, #20
    3a94:	9001      	str	r0, [sp, #4]
    3a96:	460b      	mov	r3, r1
    3a98:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3a9c:	9b01      	ldr	r3, [sp, #4]
    3a9e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3aa0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3aa4:	2b00      	cmp	r3, #0
    3aa6:	d003      	beq.n	3ab0 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    3aa8:	2300      	movs	r3, #0
    3aaa:	f8ad 300c 	strh.w	r3, [sp, #12]
    3aae:	e002      	b.n	3ab6 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3ab0:	2301      	movs	r3, #1
    3ab2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    3ab6:	ab02      	add	r3, sp, #8
    3ab8:	4618      	mov	r0, r3
    3aba:	f7ff ffdc 	bl	3a76 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    3abe:	bf00      	nop
    3ac0:	b005      	add	sp, #20
    3ac2:	f85d fb04 	ldr.w	pc, [sp], #4

00003ac6 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    3ac6:	b500      	push	{lr}
    3ac8:	b083      	sub	sp, #12
    3aca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3acc:	9b01      	ldr	r3, [sp, #4]
    3ace:	2b00      	cmp	r3, #0
    3ad0:	d002      	beq.n	3ad8 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    3ad2:	9801      	ldr	r0, [sp, #4]
    3ad4:	f000 f8c6 	bl	3c64 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ad8:	bf00      	nop
    3ada:	b003      	add	sp, #12
    3adc:	f85d fb04 	ldr.w	pc, [sp], #4

00003ae0 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3ae0:	b500      	push	{lr}
    3ae2:	b085      	sub	sp, #20
    3ae4:	9001      	str	r0, [sp, #4]
    3ae6:	460b      	mov	r3, r1
    3ae8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3aec:	9b01      	ldr	r3, [sp, #4]
    3aee:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3af0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3af4:	2b00      	cmp	r3, #0
    3af6:	d003      	beq.n	3b00 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    3af8:	2300      	movs	r3, #0
    3afa:	f8ad 300c 	strh.w	r3, [sp, #12]
    3afe:	e002      	b.n	3b06 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3b00:	2301      	movs	r3, #1
    3b02:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    3b06:	ab02      	add	r3, sp, #8
    3b08:	4618      	mov	r0, r3
    3b0a:	f7ff ffdc 	bl	3ac6 <Clock_Ip_ClockSetSimClkoutEnable>
}
    3b0e:	bf00      	nop
    3b10:	b005      	add	sp, #20
    3b12:	f85d fb04 	ldr.w	pc, [sp], #4

00003b16 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    3b16:	b500      	push	{lr}
    3b18:	b083      	sub	sp, #12
    3b1a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b1c:	9b01      	ldr	r3, [sp, #4]
    3b1e:	2b00      	cmp	r3, #0
    3b20:	d002      	beq.n	3b28 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    3b22:	9801      	ldr	r0, [sp, #4]
    3b24:	f000 f8b6 	bl	3c94 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b28:	bf00      	nop
    3b2a:	b003      	add	sp, #12
    3b2c:	f85d fb04 	ldr.w	pc, [sp], #4

00003b30 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3b30:	b500      	push	{lr}
    3b32:	b085      	sub	sp, #20
    3b34:	9001      	str	r0, [sp, #4]
    3b36:	460b      	mov	r3, r1
    3b38:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3b3c:	9b01      	ldr	r3, [sp, #4]
    3b3e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3b40:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3b44:	2b00      	cmp	r3, #0
    3b46:	d003      	beq.n	3b50 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3b48:	2300      	movs	r3, #0
    3b4a:	f8ad 300c 	strh.w	r3, [sp, #12]
    3b4e:	e002      	b.n	3b56 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3b50:	2301      	movs	r3, #1
    3b52:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    3b56:	ab02      	add	r3, sp, #8
    3b58:	4618      	mov	r0, r3
    3b5a:	f7ff ffdc 	bl	3b16 <Clock_Ip_ClockSetPccCgcEnable>
}
    3b5e:	bf00      	nop
    3b60:	b005      	add	sp, #20
    3b62:	f85d fb04 	ldr.w	pc, [sp], #4

00003b66 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    3b66:	b500      	push	{lr}
    3b68:	b083      	sub	sp, #12
    3b6a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b6c:	9b01      	ldr	r3, [sp, #4]
    3b6e:	2b00      	cmp	r3, #0
    3b70:	d002      	beq.n	3b78 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    3b72:	9801      	ldr	r0, [sp, #4]
    3b74:	f000 f8bc 	bl	3cf0 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b78:	bf00      	nop
    3b7a:	b003      	add	sp, #12
    3b7c:	f85d fb04 	ldr.w	pc, [sp], #4

00003b80 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    3b80:	b500      	push	{lr}
    3b82:	b085      	sub	sp, #20
    3b84:	9001      	str	r0, [sp, #4]
    3b86:	460b      	mov	r3, r1
    3b88:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3b8c:	9b01      	ldr	r3, [sp, #4]
    3b8e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3b90:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3b94:	2b00      	cmp	r3, #0
    3b96:	d003      	beq.n	3ba0 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    3b98:	2300      	movs	r3, #0
    3b9a:	f8ad 300c 	strh.w	r3, [sp, #12]
    3b9e:	e002      	b.n	3ba6 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3ba0:	2301      	movs	r3, #1
    3ba2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    3ba6:	ab02      	add	r3, sp, #8
    3ba8:	4618      	mov	r0, r3
    3baa:	f7ff ffdc 	bl	3b66 <Clock_Ip_ClockSetSimGate>
}
    3bae:	bf00      	nop
    3bb0:	b005      	add	sp, #20
    3bb2:	f85d fb04 	ldr.w	pc, [sp], #4

00003bb6 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    3bb6:	b500      	push	{lr}
    3bb8:	b083      	sub	sp, #12
    3bba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bbc:	9b01      	ldr	r3, [sp, #4]
    3bbe:	2b00      	cmp	r3, #0
    3bc0:	d002      	beq.n	3bc8 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    3bc2:	9801      	ldr	r0, [sp, #4]
    3bc4:	f000 f8c0 	bl	3d48 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bc8:	bf00      	nop
    3bca:	b003      	add	sp, #12
    3bcc:	f85d fb04 	ldr.w	pc, [sp], #4

00003bd0 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3bd0:	b500      	push	{lr}
    3bd2:	b085      	sub	sp, #20
    3bd4:	9001      	str	r0, [sp, #4]
    3bd6:	460b      	mov	r3, r1
    3bd8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3bdc:	9b01      	ldr	r3, [sp, #4]
    3bde:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3be0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3be4:	2b00      	cmp	r3, #0
    3be6:	d003      	beq.n	3bf0 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    3be8:	2300      	movs	r3, #0
    3bea:	f8ad 300c 	strh.w	r3, [sp, #12]
    3bee:	e002      	b.n	3bf6 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3bf0:	2301      	movs	r3, #1
    3bf2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    3bf6:	ab02      	add	r3, sp, #8
    3bf8:	4618      	mov	r0, r3
    3bfa:	f7ff ffdc 	bl	3bb6 <Clock_Ip_ClockSetSimTraceEnable>
}
    3bfe:	bf00      	nop
    3c00:	b005      	add	sp, #20
    3c02:	f85d fb04 	ldr.w	pc, [sp], #4

00003c06 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3c06:	b084      	sub	sp, #16
    3c08:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3c0a:	4b09      	ldr	r3, [pc, #36]	; (3c30 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3c0c:	691b      	ldr	r3, [r3, #16]
    3c0e:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    3c10:	9b03      	ldr	r3, [sp, #12]
    3c12:	f023 0301 	bic.w	r3, r3, #1
    3c16:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3c18:	9b01      	ldr	r3, [sp, #4]
    3c1a:	889b      	ldrh	r3, [r3, #4]
    3c1c:	461a      	mov	r2, r3
    3c1e:	9b03      	ldr	r3, [sp, #12]
    3c20:	4313      	orrs	r3, r2
    3c22:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3c24:	4a02      	ldr	r2, [pc, #8]	; (3c30 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3c26:	9b03      	ldr	r3, [sp, #12]
    3c28:	6113      	str	r3, [r2, #16]
}
    3c2a:	bf00      	nop
    3c2c:	b004      	add	sp, #16
    3c2e:	4770      	bx	lr
    3c30:	40048000 	.word	0x40048000

00003c34 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3c34:	b084      	sub	sp, #16
    3c36:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3c38:	4b09      	ldr	r3, [pc, #36]	; (3c60 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3c3a:	691b      	ldr	r3, [r3, #16]
    3c3c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    3c3e:	9b03      	ldr	r3, [sp, #12]
    3c40:	f023 0302 	bic.w	r3, r3, #2
    3c44:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3c46:	9b01      	ldr	r3, [sp, #4]
    3c48:	889b      	ldrh	r3, [r3, #4]
    3c4a:	005b      	lsls	r3, r3, #1
    3c4c:	9a03      	ldr	r2, [sp, #12]
    3c4e:	4313      	orrs	r3, r2
    3c50:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3c52:	4a03      	ldr	r2, [pc, #12]	; (3c60 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3c54:	9b03      	ldr	r3, [sp, #12]
    3c56:	6113      	str	r3, [r2, #16]
}
    3c58:	bf00      	nop
    3c5a:	b004      	add	sp, #16
    3c5c:	4770      	bx	lr
    3c5e:	bf00      	nop
    3c60:	40048000 	.word	0x40048000

00003c64 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3c64:	b084      	sub	sp, #16
    3c66:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3c68:	4b09      	ldr	r3, [pc, #36]	; (3c90 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3c6a:	685b      	ldr	r3, [r3, #4]
    3c6c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    3c6e:	9b03      	ldr	r3, [sp, #12]
    3c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3c74:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    3c76:	9b01      	ldr	r3, [sp, #4]
    3c78:	889b      	ldrh	r3, [r3, #4]
    3c7a:	02db      	lsls	r3, r3, #11
    3c7c:	9a03      	ldr	r2, [sp, #12]
    3c7e:	4313      	orrs	r3, r2
    3c80:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3c82:	4a03      	ldr	r2, [pc, #12]	; (3c90 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3c84:	9b03      	ldr	r3, [sp, #12]
    3c86:	6053      	str	r3, [r2, #4]
}
    3c88:	bf00      	nop
    3c8a:	b004      	add	sp, #16
    3c8c:	4770      	bx	lr
    3c8e:	bf00      	nop
    3c90:	40048000 	.word	0x40048000

00003c94 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3c94:	b084      	sub	sp, #16
    3c96:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    3c98:	4913      	ldr	r1, [pc, #76]	; (3ce8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3c9a:	9b01      	ldr	r3, [sp, #4]
    3c9c:	681a      	ldr	r2, [r3, #0]
    3c9e:	4813      	ldr	r0, [pc, #76]	; (3cec <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3ca0:	4613      	mov	r3, r2
    3ca2:	00db      	lsls	r3, r3, #3
    3ca4:	4413      	add	r3, r2
    3ca6:	4403      	add	r3, r0
    3ca8:	3306      	adds	r3, #6
    3caa:	781b      	ldrb	r3, [r3, #0]
    3cac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3cb0:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    3cb2:	9b03      	ldr	r3, [sp, #12]
    3cb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    3cb8:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    3cba:	9b01      	ldr	r3, [sp, #4]
    3cbc:	889b      	ldrh	r3, [r3, #4]
    3cbe:	079b      	lsls	r3, r3, #30
    3cc0:	9a03      	ldr	r2, [sp, #12]
    3cc2:	4313      	orrs	r3, r2
    3cc4:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    3cc6:	4908      	ldr	r1, [pc, #32]	; (3ce8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3cc8:	9b01      	ldr	r3, [sp, #4]
    3cca:	681a      	ldr	r2, [r3, #0]
    3ccc:	4807      	ldr	r0, [pc, #28]	; (3cec <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3cce:	4613      	mov	r3, r2
    3cd0:	00db      	lsls	r3, r3, #3
    3cd2:	4413      	add	r3, r2
    3cd4:	4403      	add	r3, r0
    3cd6:	3306      	adds	r3, #6
    3cd8:	781b      	ldrb	r3, [r3, #0]
    3cda:	461a      	mov	r2, r3
    3cdc:	9b03      	ldr	r3, [sp, #12]
    3cde:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    3ce2:	bf00      	nop
    3ce4:	b004      	add	sp, #16
    3ce6:	4770      	bx	lr
    3ce8:	40065000 	.word	0x40065000
    3cec:	0000fd78 	.word	0x0000fd78

00003cf0 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3cf0:	b086      	sub	sp, #24
    3cf2:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    3cf4:	9b01      	ldr	r3, [sp, #4]
    3cf6:	889b      	ldrh	r3, [r3, #4]
    3cf8:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    3cfa:	9b01      	ldr	r3, [sp, #4]
    3cfc:	681a      	ldr	r2, [r3, #0]
    3cfe:	4910      	ldr	r1, [pc, #64]	; (3d40 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    3d00:	4613      	mov	r3, r2
    3d02:	00db      	lsls	r3, r3, #3
    3d04:	4413      	add	r3, r2
    3d06:	440b      	add	r3, r1
    3d08:	3306      	adds	r3, #6
    3d0a:	781b      	ldrb	r3, [r3, #0]
    3d0c:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    3d0e:	4b0d      	ldr	r3, [pc, #52]	; (3d44 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3d12:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3d14:	2201      	movs	r2, #1
    3d16:	9b04      	ldr	r3, [sp, #16]
    3d18:	fa02 f303 	lsl.w	r3, r2, r3
    3d1c:	43db      	mvns	r3, r3
    3d1e:	9a03      	ldr	r2, [sp, #12]
    3d20:	4013      	ands	r3, r2
    3d22:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3d24:	9a05      	ldr	r2, [sp, #20]
    3d26:	9b04      	ldr	r3, [sp, #16]
    3d28:	fa02 f303 	lsl.w	r3, r2, r3
    3d2c:	9a03      	ldr	r2, [sp, #12]
    3d2e:	4313      	orrs	r3, r2
    3d30:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    3d32:	4a04      	ldr	r2, [pc, #16]	; (3d44 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3d34:	9b03      	ldr	r3, [sp, #12]
    3d36:	6413      	str	r3, [r2, #64]	; 0x40
}
    3d38:	bf00      	nop
    3d3a:	b006      	add	sp, #24
    3d3c:	4770      	bx	lr
    3d3e:	bf00      	nop
    3d40:	0000fd78 	.word	0x0000fd78
    3d44:	40048000 	.word	0x40048000

00003d48 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3d48:	b084      	sub	sp, #16
    3d4a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3d4c:	4b0a      	ldr	r3, [pc, #40]	; (3d78 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3d50:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    3d52:	9b01      	ldr	r3, [sp, #4]
    3d54:	889b      	ldrh	r3, [r3, #4]
    3d56:	2b01      	cmp	r3, #1
    3d58:	d104      	bne.n	3d64 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    3d5a:	9b03      	ldr	r3, [sp, #12]
    3d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3d60:	9303      	str	r3, [sp, #12]
    3d62:	e003      	b.n	3d6c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3d64:	9b03      	ldr	r3, [sp, #12]
    3d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3d6a:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3d6c:	4a02      	ldr	r2, [pc, #8]	; (3d78 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3d6e:	9b03      	ldr	r3, [sp, #12]
    3d70:	6693      	str	r3, [r2, #104]	; 0x68
}
    3d72:	bf00      	nop
    3d74:	b004      	add	sp, #16
    3d76:	4770      	bx	lr
    3d78:	40048000 	.word	0x40048000

00003d7c <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3d7c:	b082      	sub	sp, #8
    3d7e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3d80:	bf00      	nop
    3d82:	b002      	add	sp, #8
    3d84:	4770      	bx	lr

00003d86 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    3d86:	b082      	sub	sp, #8
    3d88:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3d8a:	bf00      	nop
    3d8c:	b002      	add	sp, #8
    3d8e:	4770      	bx	lr

00003d90 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3d90:	b500      	push	{lr}
    3d92:	b083      	sub	sp, #12
    3d94:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d96:	9b01      	ldr	r3, [sp, #4]
    3d98:	2b00      	cmp	r3, #0
    3d9a:	d002      	beq.n	3da2 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    3d9c:	9801      	ldr	r0, [sp, #4]
    3d9e:	f000 f8d1 	bl	3f44 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3da2:	bf00      	nop
    3da4:	b003      	add	sp, #12
    3da6:	f85d fb04 	ldr.w	pc, [sp], #4

00003daa <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3daa:	b500      	push	{lr}
    3dac:	b083      	sub	sp, #12
    3dae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3db0:	9b01      	ldr	r3, [sp, #4]
    3db2:	2b00      	cmp	r3, #0
    3db4:	d002      	beq.n	3dbc <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    3db6:	9801      	ldr	r0, [sp, #4]
    3db8:	f000 f950 	bl	405c <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3dbc:	bf00      	nop
    3dbe:	b003      	add	sp, #12
    3dc0:	f85d fb04 	ldr.w	pc, [sp], #4

00003dc4 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3dc4:	b500      	push	{lr}
    3dc6:	b083      	sub	sp, #12
    3dc8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    3dca:	9801      	ldr	r0, [sp, #4]
    3dcc:	f000 f98e 	bl	40ec <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3dd0:	bf00      	nop
    3dd2:	b003      	add	sp, #12
    3dd4:	f85d fb04 	ldr.w	pc, [sp], #4

00003dd8 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3dd8:	b500      	push	{lr}
    3dda:	b083      	sub	sp, #12
    3ddc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3dde:	9b01      	ldr	r3, [sp, #4]
    3de0:	2b00      	cmp	r3, #0
    3de2:	d002      	beq.n	3dea <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3de4:	9801      	ldr	r0, [sp, #4]
    3de6:	f000 f999 	bl	411c <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3dea:	bf00      	nop
    3dec:	b003      	add	sp, #12
    3dee:	f85d fb04 	ldr.w	pc, [sp], #4

00003df2 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3df2:	b500      	push	{lr}
    3df4:	b083      	sub	sp, #12
    3df6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3df8:	9b01      	ldr	r3, [sp, #4]
    3dfa:	2b00      	cmp	r3, #0
    3dfc:	d002      	beq.n	3e04 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    3dfe:	9801      	ldr	r0, [sp, #4]
    3e00:	f000 f9b0 	bl	4164 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e04:	bf00      	nop
    3e06:	b003      	add	sp, #12
    3e08:	f85d fb04 	ldr.w	pc, [sp], #4

00003e0c <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3e0c:	b500      	push	{lr}
    3e0e:	b083      	sub	sp, #12
    3e10:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    3e12:	9801      	ldr	r0, [sp, #4]
    3e14:	f000 f9ba 	bl	418c <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3e18:	bf00      	nop
    3e1a:	b003      	add	sp, #12
    3e1c:	f85d fb04 	ldr.w	pc, [sp], #4

00003e20 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3e20:	b500      	push	{lr}
    3e22:	b083      	sub	sp, #12
    3e24:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e26:	9b01      	ldr	r3, [sp, #4]
    3e28:	2b00      	cmp	r3, #0
    3e2a:	d002      	beq.n	3e32 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3e2c:	9801      	ldr	r0, [sp, #4]
    3e2e:	f000 f9bd 	bl	41ac <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e32:	bf00      	nop
    3e34:	b003      	add	sp, #12
    3e36:	f85d fb04 	ldr.w	pc, [sp], #4

00003e3a <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3e3a:	b500      	push	{lr}
    3e3c:	b083      	sub	sp, #12
    3e3e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e40:	9b01      	ldr	r3, [sp, #4]
    3e42:	2b00      	cmp	r3, #0
    3e44:	d002      	beq.n	3e4c <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3e46:	9801      	ldr	r0, [sp, #4]
    3e48:	f000 f9d4 	bl	41f4 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e4c:	bf00      	nop
    3e4e:	b003      	add	sp, #12
    3e50:	f85d fb04 	ldr.w	pc, [sp], #4

00003e54 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3e54:	b500      	push	{lr}
    3e56:	b083      	sub	sp, #12
    3e58:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3e5a:	9801      	ldr	r0, [sp, #4]
    3e5c:	f000 f9de 	bl	421c <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3e60:	bf00      	nop
    3e62:	b003      	add	sp, #12
    3e64:	f85d fb04 	ldr.w	pc, [sp], #4

00003e68 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3e68:	b500      	push	{lr}
    3e6a:	b089      	sub	sp, #36	; 0x24
    3e6c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3e6e:	2300      	movs	r3, #0
    3e70:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3e74:	4b20      	ldr	r3, [pc, #128]	; (3ef8 <SetInputSouceSytemClock+0x90>)
    3e76:	695b      	ldr	r3, [r3, #20]
    3e78:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3e7a:	9b06      	ldr	r3, [sp, #24]
    3e7c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3e80:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3e82:	9b01      	ldr	r3, [sp, #4]
    3e84:	061b      	lsls	r3, r3, #24
    3e86:	9a06      	ldr	r2, [sp, #24]
    3e88:	4313      	orrs	r3, r2
    3e8a:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3e8c:	4a1a      	ldr	r2, [pc, #104]	; (3ef8 <SetInputSouceSytemClock+0x90>)
    3e8e:	9b06      	ldr	r3, [sp, #24]
    3e90:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3e92:	aa02      	add	r2, sp, #8
    3e94:	a903      	add	r1, sp, #12
    3e96:	a804      	add	r0, sp, #16
    3e98:	f24c 3350 	movw	r3, #50000	; 0xc350
    3e9c:	f7ff f9ac 	bl	31f8 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3ea0:	4b15      	ldr	r3, [pc, #84]	; (3ef8 <SetInputSouceSytemClock+0x90>)
    3ea2:	691b      	ldr	r3, [r3, #16]
    3ea4:	0e1b      	lsrs	r3, r3, #24
    3ea6:	f003 030f 	and.w	r3, r3, #15
    3eaa:	9a01      	ldr	r2, [sp, #4]
    3eac:	429a      	cmp	r2, r3
    3eae:	bf0c      	ite	eq
    3eb0:	2301      	moveq	r3, #1
    3eb2:	2300      	movne	r3, #0
    3eb4:	b2db      	uxtb	r3, r3
    3eb6:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3eb8:	9a02      	ldr	r2, [sp, #8]
    3eba:	a903      	add	r1, sp, #12
    3ebc:	ab04      	add	r3, sp, #16
    3ebe:	4618      	mov	r0, r3
    3ec0:	f7ff f9b4 	bl	322c <Clock_Ip_TimeoutExpired>
    3ec4:	4603      	mov	r3, r0
    3ec6:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    3eca:	9b05      	ldr	r3, [sp, #20]
    3ecc:	2b00      	cmp	r3, #0
    3ece:	d106      	bne.n	3ede <SetInputSouceSytemClock+0x76>
    3ed0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ed4:	f083 0301 	eor.w	r3, r3, #1
    3ed8:	b2db      	uxtb	r3, r3
    3eda:	2b00      	cmp	r3, #0
    3edc:	d1e0      	bne.n	3ea0 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    3ede:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d003      	beq.n	3eee <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3ee6:	2105      	movs	r1, #5
    3ee8:	2001      	movs	r0, #1
    3eea:	f7ff f975 	bl	31d8 <Clock_Ip_ReportClockErrors>
    }
}
    3eee:	bf00      	nop
    3ef0:	b009      	add	sp, #36	; 0x24
    3ef2:	f85d fb04 	ldr.w	pc, [sp], #4
    3ef6:	bf00      	nop
    3ef8:	40064000 	.word	0x40064000

00003efc <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3efc:	b500      	push	{lr}
    3efe:	b083      	sub	sp, #12
    3f00:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f02:	9b01      	ldr	r3, [sp, #4]
    3f04:	2b00      	cmp	r3, #0
    3f06:	d002      	beq.n	3f0e <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3f08:	9801      	ldr	r0, [sp, #4]
    3f0a:	f000 f997 	bl	423c <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f0e:	bf00      	nop
    3f10:	b003      	add	sp, #12
    3f12:	f85d fb04 	ldr.w	pc, [sp], #4

00003f16 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3f16:	b500      	push	{lr}
    3f18:	b083      	sub	sp, #12
    3f1a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f1c:	9b01      	ldr	r3, [sp, #4]
    3f1e:	2b00      	cmp	r3, #0
    3f20:	d002      	beq.n	3f28 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    3f22:	9801      	ldr	r0, [sp, #4]
    3f24:	f000 fa7e 	bl	4424 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f28:	bf00      	nop
    3f2a:	b003      	add	sp, #12
    3f2c:	f85d fb04 	ldr.w	pc, [sp], #4

00003f30 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3f30:	b500      	push	{lr}
    3f32:	b083      	sub	sp, #12
    3f34:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3f36:	9801      	ldr	r0, [sp, #4]
    3f38:	f000 fab8 	bl	44ac <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3f3c:	bf00      	nop
    3f3e:	b003      	add	sp, #12
    3f40:	f85d fb04 	ldr.w	pc, [sp], #4

00003f44 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3f44:	b500      	push	{lr}
    3f46:	b08b      	sub	sp, #44	; 0x2c
    3f48:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3f4a:	2300      	movs	r3, #0
    3f4c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3f50:	9b01      	ldr	r3, [sp, #4]
    3f52:	2b00      	cmp	r3, #0
    3f54:	d10b      	bne.n	3f6e <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3f56:	2305      	movs	r3, #5
    3f58:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3f5a:	2301      	movs	r3, #1
    3f5c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3f60:	2301      	movs	r3, #1
    3f62:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3f66:	2301      	movs	r3, #1
    3f68:	f88d 3010 	strb.w	r3, [sp, #16]
    3f6c:	e00e      	b.n	3f8c <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3f6e:	9b01      	ldr	r3, [sp, #4]
    3f70:	681b      	ldr	r3, [r3, #0]
    3f72:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3f74:	9b01      	ldr	r3, [sp, #4]
    3f76:	79db      	ldrb	r3, [r3, #7]
    3f78:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3f7c:	9b01      	ldr	r3, [sp, #4]
    3f7e:	889b      	ldrh	r3, [r3, #4]
    3f80:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3f84:	9b01      	ldr	r3, [sp, #4]
    3f86:	7a1b      	ldrb	r3, [r3, #8]
    3f88:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3f8c:	4b32      	ldr	r3, [pc, #200]	; (4058 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3f8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3f92:	4a31      	ldr	r2, [pc, #196]	; (4058 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3f94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3f98:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3f9c:	4b2e      	ldr	r3, [pc, #184]	; (4058 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3f9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3fa2:	4a2d      	ldr	r2, [pc, #180]	; (4058 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3fa4:	f023 0301 	bic.w	r3, r3, #1
    3fa8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3fac:	4b2a      	ldr	r3, [pc, #168]	; (4058 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3fae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3fb2:	4a29      	ldr	r2, [pc, #164]	; (4058 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3fb4:	f023 0304 	bic.w	r3, r3, #4
    3fb8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3fbc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3fc0:	2b01      	cmp	r3, #1
    3fc2:	d144      	bne.n	404e <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3fc4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3fc8:	4a23      	ldr	r2, [pc, #140]	; (4058 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3fca:	f003 0301 	and.w	r3, r3, #1
    3fce:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3fd2:	4b21      	ldr	r3, [pc, #132]	; (4058 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3fd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3fd8:	4a1f      	ldr	r2, [pc, #124]	; (4058 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3fda:	f043 0301 	orr.w	r3, r3, #1
    3fde:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    3fe2:	4b1d      	ldr	r3, [pc, #116]	; (4058 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3fe4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3fe8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3fec:	009b      	lsls	r3, r3, #2
    3fee:	f003 0304 	and.w	r3, r3, #4
    3ff2:	4919      	ldr	r1, [pc, #100]	; (4058 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3ff4:	4313      	orrs	r3, r2
    3ff6:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3ffa:	aa05      	add	r2, sp, #20
    3ffc:	a906      	add	r1, sp, #24
    3ffe:	a807      	add	r0, sp, #28
    4000:	f24c 3350 	movw	r3, #50000	; 0xc350
    4004:	f7ff f8f8 	bl	31f8 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    4008:	4b13      	ldr	r3, [pc, #76]	; (4058 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    400a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    400e:	0e1b      	lsrs	r3, r3, #24
    4010:	f003 0301 	and.w	r3, r3, #1
    4014:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4016:	9a05      	ldr	r2, [sp, #20]
    4018:	a906      	add	r1, sp, #24
    401a:	ab07      	add	r3, sp, #28
    401c:	4618      	mov	r0, r3
    401e:	f7ff f905 	bl	322c <Clock_Ip_TimeoutExpired>
    4022:	4603      	mov	r3, r0
    4024:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4028:	9b08      	ldr	r3, [sp, #32]
    402a:	2b00      	cmp	r3, #0
    402c:	d106      	bne.n	403c <Clock_Ip_SetSirc_TrustedCall+0xf8>
    402e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4032:	f083 0301 	eor.w	r3, r3, #1
    4036:	b2db      	uxtb	r3, r3
    4038:	2b00      	cmp	r3, #0
    403a:	d1e5      	bne.n	4008 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    403c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4040:	2b00      	cmp	r3, #0
    4042:	d004      	beq.n	404e <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    4044:	9b02      	ldr	r3, [sp, #8]
    4046:	4619      	mov	r1, r3
    4048:	2001      	movs	r0, #1
    404a:	f7ff f8c5 	bl	31d8 <Clock_Ip_ReportClockErrors>
        }
    }
}
    404e:	bf00      	nop
    4050:	b00b      	add	sp, #44	; 0x2c
    4052:	f85d fb04 	ldr.w	pc, [sp], #4
    4056:	bf00      	nop
    4058:	40064000 	.word	0x40064000

0000405c <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    405c:	b500      	push	{lr}
    405e:	b089      	sub	sp, #36	; 0x24
    4060:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4062:	2300      	movs	r3, #0
    4064:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    4068:	4b1f      	ldr	r3, [pc, #124]	; (40e8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    406a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    406e:	4a1e      	ldr	r2, [pc, #120]	; (40e8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4070:	f043 0301 	orr.w	r3, r3, #1
    4074:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    4078:	4b1b      	ldr	r3, [pc, #108]	; (40e8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    407a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    407e:	4a1a      	ldr	r2, [pc, #104]	; (40e8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4080:	f043 0304 	orr.w	r3, r3, #4
    4084:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4088:	aa03      	add	r2, sp, #12
    408a:	a904      	add	r1, sp, #16
    408c:	a805      	add	r0, sp, #20
    408e:	f24c 3350 	movw	r3, #50000	; 0xc350
    4092:	f7ff f8b1 	bl	31f8 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    4096:	4b14      	ldr	r3, [pc, #80]	; (40e8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4098:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    409c:	0e1b      	lsrs	r3, r3, #24
    409e:	f003 0301 	and.w	r3, r3, #1
    40a2:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    40a4:	9a03      	ldr	r2, [sp, #12]
    40a6:	a904      	add	r1, sp, #16
    40a8:	ab05      	add	r3, sp, #20
    40aa:	4618      	mov	r0, r3
    40ac:	f7ff f8be 	bl	322c <Clock_Ip_TimeoutExpired>
    40b0:	4603      	mov	r3, r0
    40b2:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    40b6:	9b06      	ldr	r3, [sp, #24]
    40b8:	2b00      	cmp	r3, #0
    40ba:	d106      	bne.n	40ca <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    40bc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    40c0:	f083 0301 	eor.w	r3, r3, #1
    40c4:	b2db      	uxtb	r3, r3
    40c6:	2b00      	cmp	r3, #0
    40c8:	d1e5      	bne.n	4096 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    40ca:	f89d 301f 	ldrb.w	r3, [sp, #31]
    40ce:	2b00      	cmp	r3, #0
    40d0:	d005      	beq.n	40de <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    40d2:	9b01      	ldr	r3, [sp, #4]
    40d4:	681b      	ldr	r3, [r3, #0]
    40d6:	4619      	mov	r1, r3
    40d8:	2001      	movs	r0, #1
    40da:	f7ff f87d 	bl	31d8 <Clock_Ip_ReportClockErrors>
    }
}
    40de:	bf00      	nop
    40e0:	b009      	add	sp, #36	; 0x24
    40e2:	f85d fb04 	ldr.w	pc, [sp], #4
    40e6:	bf00      	nop
    40e8:	40064000 	.word	0x40064000

000040ec <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    40ec:	b082      	sub	sp, #8
    40ee:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    40f0:	4b09      	ldr	r3, [pc, #36]	; (4118 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    40f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    40f6:	4a08      	ldr	r2, [pc, #32]	; (4118 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    40f8:	f023 0301 	bic.w	r3, r3, #1
    40fc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4100:	4b05      	ldr	r3, [pc, #20]	; (4118 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4102:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4106:	4a04      	ldr	r2, [pc, #16]	; (4118 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4108:	f023 0304 	bic.w	r3, r3, #4
    410c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4110:	bf00      	nop
    4112:	b002      	add	sp, #8
    4114:	4770      	bx	lr
    4116:	bf00      	nop
    4118:	40064000 	.word	0x40064000

0000411c <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    411c:	b082      	sub	sp, #8
    411e:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4120:	4b0f      	ldr	r3, [pc, #60]	; (4160 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4122:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4126:	4a0e      	ldr	r2, [pc, #56]	; (4160 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4128:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    412c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4130:	4b0b      	ldr	r3, [pc, #44]	; (4160 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4132:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4136:	4a0a      	ldr	r2, [pc, #40]	; (4160 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4138:	f023 0304 	bic.w	r3, r3, #4
    413c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    4140:	4b07      	ldr	r3, [pc, #28]	; (4160 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4142:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4146:	9b01      	ldr	r3, [sp, #4]
    4148:	7a1b      	ldrb	r3, [r3, #8]
    414a:	009b      	lsls	r3, r3, #2
    414c:	f003 0304 	and.w	r3, r3, #4
    4150:	4903      	ldr	r1, [pc, #12]	; (4160 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4152:	4313      	orrs	r3, r2
    4154:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    4158:	bf00      	nop
    415a:	b002      	add	sp, #8
    415c:	4770      	bx	lr
    415e:	bf00      	nop
    4160:	40064000 	.word	0x40064000

00004164 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4164:	b082      	sub	sp, #8
    4166:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    4168:	9b01      	ldr	r3, [sp, #4]
    416a:	889b      	ldrh	r3, [r3, #4]
    416c:	2b01      	cmp	r3, #1
    416e:	d107      	bne.n	4180 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    4170:	4b05      	ldr	r3, [pc, #20]	; (4188 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    4172:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4176:	4a04      	ldr	r2, [pc, #16]	; (4188 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    4178:	f043 0304 	orr.w	r3, r3, #4
    417c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    4180:	bf00      	nop
    4182:	b002      	add	sp, #8
    4184:	4770      	bx	lr
    4186:	bf00      	nop
    4188:	40064000 	.word	0x40064000

0000418c <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    418c:	b082      	sub	sp, #8
    418e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4190:	4b05      	ldr	r3, [pc, #20]	; (41a8 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    4192:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4196:	4a04      	ldr	r2, [pc, #16]	; (41a8 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    4198:	f023 0304 	bic.w	r3, r3, #4
    419c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    41a0:	bf00      	nop
    41a2:	b002      	add	sp, #8
    41a4:	4770      	bx	lr
    41a6:	bf00      	nop
    41a8:	40064000 	.word	0x40064000

000041ac <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    41ac:	b082      	sub	sp, #8
    41ae:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    41b0:	4b0f      	ldr	r3, [pc, #60]	; (41f0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    41b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    41b6:	4a0e      	ldr	r2, [pc, #56]	; (41f0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    41b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    41bc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    41c0:	4b0b      	ldr	r3, [pc, #44]	; (41f0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    41c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    41c6:	4a0a      	ldr	r2, [pc, #40]	; (41f0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    41c8:	f023 0302 	bic.w	r3, r3, #2
    41cc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    41d0:	4b07      	ldr	r3, [pc, #28]	; (41f0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    41d2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    41d6:	9b01      	ldr	r3, [sp, #4]
    41d8:	7a5b      	ldrb	r3, [r3, #9]
    41da:	005b      	lsls	r3, r3, #1
    41dc:	f003 0302 	and.w	r3, r3, #2
    41e0:	4903      	ldr	r1, [pc, #12]	; (41f0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    41e2:	4313      	orrs	r3, r2
    41e4:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    41e8:	bf00      	nop
    41ea:	b002      	add	sp, #8
    41ec:	4770      	bx	lr
    41ee:	bf00      	nop
    41f0:	40064000 	.word	0x40064000

000041f4 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    41f4:	b082      	sub	sp, #8
    41f6:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    41f8:	9b01      	ldr	r3, [sp, #4]
    41fa:	889b      	ldrh	r3, [r3, #4]
    41fc:	2b01      	cmp	r3, #1
    41fe:	d107      	bne.n	4210 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    4200:	4b05      	ldr	r3, [pc, #20]	; (4218 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    4202:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4206:	4a04      	ldr	r2, [pc, #16]	; (4218 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    4208:	f043 0302 	orr.w	r3, r3, #2
    420c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    4210:	bf00      	nop
    4212:	b002      	add	sp, #8
    4214:	4770      	bx	lr
    4216:	bf00      	nop
    4218:	40064000 	.word	0x40064000

0000421c <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    421c:	b082      	sub	sp, #8
    421e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    4220:	4b05      	ldr	r3, [pc, #20]	; (4238 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4222:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4226:	4a04      	ldr	r2, [pc, #16]	; (4238 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4228:	f023 0302 	bic.w	r3, r3, #2
    422c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4230:	bf00      	nop
    4232:	b002      	add	sp, #8
    4234:	4770      	bx	lr
    4236:	bf00      	nop
    4238:	40064000 	.word	0x40064000

0000423c <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    423c:	b500      	push	{lr}
    423e:	b08b      	sub	sp, #44	; 0x2c
    4240:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4242:	9b01      	ldr	r3, [sp, #4]
    4244:	681a      	ldr	r2, [r3, #0]
    4246:	4975      	ldr	r1, [pc, #468]	; (441c <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    4248:	4613      	mov	r3, r2
    424a:	00db      	lsls	r3, r3, #3
    424c:	4413      	add	r3, r2
    424e:	440b      	add	r3, r1
    4250:	781b      	ldrb	r3, [r3, #0]
    4252:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    4254:	2300      	movs	r3, #0
    4256:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    425a:	2300      	movs	r3, #0
    425c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    4260:	4b6f      	ldr	r3, [pc, #444]	; (4420 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4262:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4266:	4a6e      	ldr	r2, [pc, #440]	; (4420 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4268:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    426c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    4270:	4b6b      	ldr	r3, [pc, #428]	; (4420 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4272:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    427a:	2b00      	cmp	r3, #0
    427c:	d07d      	beq.n	437a <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    427e:	9b01      	ldr	r3, [sp, #4]
    4280:	79db      	ldrb	r3, [r3, #7]
    4282:	461a      	mov	r2, r3
    4284:	4b66      	ldr	r3, [pc, #408]	; (4420 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4286:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    428a:	f003 0303 	and.w	r3, r3, #3
    428e:	429a      	cmp	r2, r3
    4290:	d10b      	bne.n	42aa <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    4292:	9b01      	ldr	r3, [sp, #4]
    4294:	799b      	ldrb	r3, [r3, #6]
    4296:	461a      	mov	r2, r3
    4298:	4b61      	ldr	r3, [pc, #388]	; (4420 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    429a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    429e:	08db      	lsrs	r3, r3, #3
    42a0:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    42a4:	429a      	cmp	r2, r3
    42a6:	f000 80b4 	beq.w	4412 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    42aa:	4b5d      	ldr	r3, [pc, #372]	; (4420 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    42ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    42b0:	f003 0301 	and.w	r3, r3, #1
    42b4:	2b00      	cmp	r3, #0
    42b6:	d105      	bne.n	42c4 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    42b8:	2301      	movs	r3, #1
    42ba:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    42be:	2000      	movs	r0, #0
    42c0:	f7ff fd66 	bl	3d90 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    42c4:	2002      	movs	r0, #2
    42c6:	f7ff fdcf 	bl	3e68 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    42ca:	4b55      	ldr	r3, [pc, #340]	; (4420 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    42cc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    42d0:	4a53      	ldr	r2, [pc, #332]	; (4420 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    42d2:	f023 0301 	bic.w	r3, r3, #1
    42d6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    42da:	9b01      	ldr	r3, [sp, #4]
    42dc:	889b      	ldrh	r3, [r3, #4]
    42de:	2b01      	cmp	r3, #1
    42e0:	f040 8097 	bne.w	4412 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    42e4:	9b01      	ldr	r3, [sp, #4]
    42e6:	79db      	ldrb	r3, [r3, #7]
    42e8:	4a4d      	ldr	r2, [pc, #308]	; (4420 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    42ea:	f003 0303 	and.w	r3, r3, #3
    42ee:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    42f2:	4b4b      	ldr	r3, [pc, #300]	; (4420 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    42f4:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    42f8:	9b01      	ldr	r3, [sp, #4]
    42fa:	799b      	ldrb	r3, [r3, #6]
    42fc:	00db      	lsls	r3, r3, #3
    42fe:	f003 0308 	and.w	r3, r3, #8
    4302:	4313      	orrs	r3, r2
    4304:	4a46      	ldr	r2, [pc, #280]	; (4420 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4306:	f043 0301 	orr.w	r3, r3, #1
    430a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    430e:	aa03      	add	r2, sp, #12
    4310:	a904      	add	r1, sp, #16
    4312:	a805      	add	r0, sp, #20
    4314:	f24c 3350 	movw	r3, #50000	; 0xc350
    4318:	f7fe ff6e 	bl	31f8 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    431c:	4b40      	ldr	r3, [pc, #256]	; (4420 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    431e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4322:	0e1b      	lsrs	r3, r3, #24
    4324:	f003 0301 	and.w	r3, r3, #1
    4328:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    432a:	9a03      	ldr	r2, [sp, #12]
    432c:	a904      	add	r1, sp, #16
    432e:	ab05      	add	r3, sp, #20
    4330:	4618      	mov	r0, r3
    4332:	f7fe ff7b 	bl	322c <Clock_Ip_TimeoutExpired>
    4336:	4603      	mov	r3, r0
    4338:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    433c:	9b06      	ldr	r3, [sp, #24]
    433e:	2b00      	cmp	r3, #0
    4340:	d106      	bne.n	4350 <Clock_Ip_SetFirc_TrustedCall+0x114>
    4342:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4346:	f083 0301 	eor.w	r3, r3, #1
    434a:	b2db      	uxtb	r3, r3
    434c:	2b00      	cmp	r3, #0
    434e:	d1e5      	bne.n	431c <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    4350:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4354:	2b00      	cmp	r3, #0
    4356:	d005      	beq.n	4364 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4358:	9b01      	ldr	r3, [sp, #4]
    435a:	681b      	ldr	r3, [r3, #0]
    435c:	4619      	mov	r1, r3
    435e:	2001      	movs	r0, #1
    4360:	f7fe ff3a 	bl	31d8 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    4364:	2003      	movs	r0, #3
    4366:	f7ff fd7f 	bl	3e68 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    436a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    436e:	2b00      	cmp	r3, #0
    4370:	d04f      	beq.n	4412 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    4372:	2002      	movs	r0, #2
    4374:	f7ff fd26 	bl	3dc4 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    4378:	e04b      	b.n	4412 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    437a:	4b29      	ldr	r3, [pc, #164]	; (4420 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    437c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4380:	4a27      	ldr	r2, [pc, #156]	; (4420 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4382:	f023 0301 	bic.w	r3, r3, #1
    4386:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    438a:	9b01      	ldr	r3, [sp, #4]
    438c:	889b      	ldrh	r3, [r3, #4]
    438e:	2b01      	cmp	r3, #1
    4390:	d13f      	bne.n	4412 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4392:	9b01      	ldr	r3, [sp, #4]
    4394:	79db      	ldrb	r3, [r3, #7]
    4396:	4a22      	ldr	r2, [pc, #136]	; (4420 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4398:	f003 0303 	and.w	r3, r3, #3
    439c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    43a0:	4b1f      	ldr	r3, [pc, #124]	; (4420 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    43a2:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    43a6:	9b01      	ldr	r3, [sp, #4]
    43a8:	799b      	ldrb	r3, [r3, #6]
    43aa:	00db      	lsls	r3, r3, #3
    43ac:	f003 0308 	and.w	r3, r3, #8
    43b0:	4313      	orrs	r3, r2
    43b2:	4a1b      	ldr	r2, [pc, #108]	; (4420 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    43b4:	f043 0301 	orr.w	r3, r3, #1
    43b8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    43bc:	aa03      	add	r2, sp, #12
    43be:	a904      	add	r1, sp, #16
    43c0:	a805      	add	r0, sp, #20
    43c2:	f24c 3350 	movw	r3, #50000	; 0xc350
    43c6:	f7fe ff17 	bl	31f8 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    43ca:	4b15      	ldr	r3, [pc, #84]	; (4420 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    43cc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    43d0:	0e1b      	lsrs	r3, r3, #24
    43d2:	f003 0301 	and.w	r3, r3, #1
    43d6:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    43d8:	9a03      	ldr	r2, [sp, #12]
    43da:	a904      	add	r1, sp, #16
    43dc:	ab05      	add	r3, sp, #20
    43de:	4618      	mov	r0, r3
    43e0:	f7fe ff24 	bl	322c <Clock_Ip_TimeoutExpired>
    43e4:	4603      	mov	r3, r0
    43e6:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    43ea:	9b06      	ldr	r3, [sp, #24]
    43ec:	2b00      	cmp	r3, #0
    43ee:	d106      	bne.n	43fe <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    43f0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    43f4:	f083 0301 	eor.w	r3, r3, #1
    43f8:	b2db      	uxtb	r3, r3
    43fa:	2b00      	cmp	r3, #0
    43fc:	d1e5      	bne.n	43ca <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    43fe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4402:	2b00      	cmp	r3, #0
    4404:	d005      	beq.n	4412 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4406:	9b01      	ldr	r3, [sp, #4]
    4408:	681b      	ldr	r3, [r3, #0]
    440a:	4619      	mov	r1, r3
    440c:	2001      	movs	r0, #1
    440e:	f7fe fee3 	bl	31d8 <Clock_Ip_ReportClockErrors>
}
    4412:	bf00      	nop
    4414:	b00b      	add	sp, #44	; 0x2c
    4416:	f85d fb04 	ldr.w	pc, [sp], #4
    441a:	bf00      	nop
    441c:	0000fd78 	.word	0x0000fd78
    4420:	40064000 	.word	0x40064000

00004424 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4424:	b500      	push	{lr}
    4426:	b089      	sub	sp, #36	; 0x24
    4428:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    442a:	2300      	movs	r3, #0
    442c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    4430:	9b01      	ldr	r3, [sp, #4]
    4432:	889b      	ldrh	r3, [r3, #4]
    4434:	2b01      	cmp	r3, #1
    4436:	d132      	bne.n	449e <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    4438:	4b1b      	ldr	r3, [pc, #108]	; (44a8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    443a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    443e:	4a1a      	ldr	r2, [pc, #104]	; (44a8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4440:	f043 0301 	orr.w	r3, r3, #1
    4444:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4448:	aa03      	add	r2, sp, #12
    444a:	a904      	add	r1, sp, #16
    444c:	a805      	add	r0, sp, #20
    444e:	f24c 3350 	movw	r3, #50000	; 0xc350
    4452:	f7fe fed1 	bl	31f8 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4456:	4b14      	ldr	r3, [pc, #80]	; (44a8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4458:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    445c:	0e1b      	lsrs	r3, r3, #24
    445e:	f003 0301 	and.w	r3, r3, #1
    4462:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4464:	9a03      	ldr	r2, [sp, #12]
    4466:	a904      	add	r1, sp, #16
    4468:	ab05      	add	r3, sp, #20
    446a:	4618      	mov	r0, r3
    446c:	f7fe fede 	bl	322c <Clock_Ip_TimeoutExpired>
    4470:	4603      	mov	r3, r0
    4472:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4476:	9b06      	ldr	r3, [sp, #24]
    4478:	2b00      	cmp	r3, #0
    447a:	d106      	bne.n	448a <Clock_Ip_EnableFirc_TrustedCall+0x66>
    447c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4480:	f083 0301 	eor.w	r3, r3, #1
    4484:	b2db      	uxtb	r3, r3
    4486:	2b00      	cmp	r3, #0
    4488:	d1e5      	bne.n	4456 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    448a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    448e:	2b00      	cmp	r3, #0
    4490:	d005      	beq.n	449e <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4492:	9b01      	ldr	r3, [sp, #4]
    4494:	681b      	ldr	r3, [r3, #0]
    4496:	4619      	mov	r1, r3
    4498:	2001      	movs	r0, #1
    449a:	f7fe fe9d 	bl	31d8 <Clock_Ip_ReportClockErrors>
        }
    }
}
    449e:	bf00      	nop
    44a0:	b009      	add	sp, #36	; 0x24
    44a2:	f85d fb04 	ldr.w	pc, [sp], #4
    44a6:	bf00      	nop
    44a8:	40064000 	.word	0x40064000

000044ac <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    44ac:	b082      	sub	sp, #8
    44ae:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    44b0:	4b05      	ldr	r3, [pc, #20]	; (44c8 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    44b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    44b6:	4a04      	ldr	r2, [pc, #16]	; (44c8 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    44b8:	f023 0301 	bic.w	r3, r3, #1
    44bc:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    44c0:	bf00      	nop
    44c2:	b002      	add	sp, #8
    44c4:	4770      	bx	lr
    44c6:	bf00      	nop
    44c8:	40064000 	.word	0x40064000

000044cc <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    44cc:	b082      	sub	sp, #8
    44ce:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    44d0:	bf00      	nop
    44d2:	b002      	add	sp, #8
    44d4:	4770      	bx	lr

000044d6 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    44d6:	b082      	sub	sp, #8
    44d8:	9001      	str	r0, [sp, #4]
    44da:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    44dc:	bf00      	nop
    44de:	b002      	add	sp, #8
    44e0:	4770      	bx	lr

000044e2 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    44e2:	b082      	sub	sp, #8
    44e4:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    44e6:	bf00      	nop
    44e8:	b002      	add	sp, #8
    44ea:	4770      	bx	lr

000044ec <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    44ec:	b082      	sub	sp, #8
    44ee:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    44f0:	bf00      	nop
    44f2:	b002      	add	sp, #8
    44f4:	4770      	bx	lr

000044f6 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    44f6:	b082      	sub	sp, #8
    44f8:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    44fa:	2302      	movs	r3, #2
}
    44fc:	4618      	mov	r0, r3
    44fe:	b002      	add	sp, #8
    4500:	4770      	bx	lr

00004502 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    4502:	b082      	sub	sp, #8
    4504:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    4506:	bf00      	nop
    4508:	b002      	add	sp, #8
    450a:	4770      	bx	lr

0000450c <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    450c:	b500      	push	{lr}
    450e:	b083      	sub	sp, #12
    4510:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4512:	9b01      	ldr	r3, [sp, #4]
    4514:	2b00      	cmp	r3, #0
    4516:	d002      	beq.n	451e <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    4518:	9801      	ldr	r0, [sp, #4]
    451a:	f000 f870 	bl	45fe <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    451e:	bf00      	nop
    4520:	b003      	add	sp, #12
    4522:	f85d fb04 	ldr.w	pc, [sp], #4

00004526 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    4526:	b500      	push	{lr}
    4528:	b083      	sub	sp, #12
    452a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    452c:	9b01      	ldr	r3, [sp, #4]
    452e:	2b00      	cmp	r3, #0
    4530:	d002      	beq.n	4538 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    4532:	9801      	ldr	r0, [sp, #4]
    4534:	f000 f89a 	bl	466c <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4538:	bf00      	nop
    453a:	b003      	add	sp, #12
    453c:	f85d fb04 	ldr.w	pc, [sp], #4

00004540 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4540:	b500      	push	{lr}
    4542:	b089      	sub	sp, #36	; 0x24
    4544:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    4546:	2301      	movs	r3, #1
    4548:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    454a:	2300      	movs	r3, #0
    454c:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    4550:	4b1e      	ldr	r3, [pc, #120]	; (45cc <Clock_Ip_CompleteSpll+0x8c>)
    4552:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4556:	f003 0301 	and.w	r3, r3, #1
    455a:	2b00      	cmp	r3, #0
    455c:	d02f      	beq.n	45be <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    455e:	aa02      	add	r2, sp, #8
    4560:	a903      	add	r1, sp, #12
    4562:	a804      	add	r0, sp, #16
    4564:	f24c 3350 	movw	r3, #50000	; 0xc350
    4568:	f7fe fe46 	bl	31f8 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    456c:	4b17      	ldr	r3, [pc, #92]	; (45cc <Clock_Ip_CompleteSpll+0x8c>)
    456e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4572:	0e1b      	lsrs	r3, r3, #24
    4574:	f003 0301 	and.w	r3, r3, #1
    4578:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    457a:	9a02      	ldr	r2, [sp, #8]
    457c:	a903      	add	r1, sp, #12
    457e:	ab04      	add	r3, sp, #16
    4580:	4618      	mov	r0, r3
    4582:	f7fe fe53 	bl	322c <Clock_Ip_TimeoutExpired>
    4586:	4603      	mov	r3, r0
    4588:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    458c:	9b05      	ldr	r3, [sp, #20]
    458e:	2b00      	cmp	r3, #0
    4590:	d106      	bne.n	45a0 <Clock_Ip_CompleteSpll+0x60>
    4592:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4596:	f083 0301 	eor.w	r3, r3, #1
    459a:	b2db      	uxtb	r3, r3
    459c:	2b00      	cmp	r3, #0
    459e:	d1e5      	bne.n	456c <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    45a0:	f89d 301b 	ldrb.w	r3, [sp, #27]
    45a4:	f083 0301 	eor.w	r3, r3, #1
    45a8:	b2db      	uxtb	r3, r3
    45aa:	2b00      	cmp	r3, #0
    45ac:	d002      	beq.n	45b4 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    45ae:	2302      	movs	r3, #2
    45b0:	9307      	str	r3, [sp, #28]
    45b2:	e006      	b.n	45c2 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    45b4:	9901      	ldr	r1, [sp, #4]
    45b6:	2001      	movs	r0, #1
    45b8:	f7fe fe0e 	bl	31d8 <Clock_Ip_ReportClockErrors>
    45bc:	e001      	b.n	45c2 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    45be:	2300      	movs	r3, #0
    45c0:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    45c2:	9b07      	ldr	r3, [sp, #28]
}
    45c4:	4618      	mov	r0, r3
    45c6:	b009      	add	sp, #36	; 0x24
    45c8:	f85d fb04 	ldr.w	pc, [sp], #4
    45cc:	40064000 	.word	0x40064000

000045d0 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    45d0:	b500      	push	{lr}
    45d2:	b083      	sub	sp, #12
    45d4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    45d6:	9801      	ldr	r0, [sp, #4]
    45d8:	f000 f886 	bl	46e8 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    45dc:	bf00      	nop
    45de:	b003      	add	sp, #12
    45e0:	f85d fb04 	ldr.w	pc, [sp], #4

000045e4 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    45e4:	b500      	push	{lr}
    45e6:	b083      	sub	sp, #12
    45e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45ea:	9b01      	ldr	r3, [sp, #4]
    45ec:	2b00      	cmp	r3, #0
    45ee:	d002      	beq.n	45f6 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    45f0:	9801      	ldr	r0, [sp, #4]
    45f2:	f000 f891 	bl	4718 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45f6:	bf00      	nop
    45f8:	b003      	add	sp, #12
    45fa:	f85d fb04 	ldr.w	pc, [sp], #4

000045fe <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    45fe:	b082      	sub	sp, #8
    4600:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4602:	4b19      	ldr	r3, [pc, #100]	; (4668 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4604:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4608:	4a17      	ldr	r2, [pc, #92]	; (4668 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    460a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    460e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    4612:	4b15      	ldr	r3, [pc, #84]	; (4668 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4614:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4618:	4a13      	ldr	r2, [pc, #76]	; (4668 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    461a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    461e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    4622:	4b11      	ldr	r3, [pc, #68]	; (4668 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4624:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4628:	4a0f      	ldr	r2, [pc, #60]	; (4668 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    462a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    462e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4632:	4b0d      	ldr	r3, [pc, #52]	; (4668 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4634:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4638:	4a0b      	ldr	r2, [pc, #44]	; (4668 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    463a:	f023 0301 	bic.w	r3, r3, #1
    463e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4642:	4b09      	ldr	r3, [pc, #36]	; (4668 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4644:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4648:	4a07      	ldr	r2, [pc, #28]	; (4668 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    464a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    464e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4652:	4b05      	ldr	r3, [pc, #20]	; (4668 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4654:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4658:	4a03      	ldr	r2, [pc, #12]	; (4668 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    465a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    465e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4662:	bf00      	nop
    4664:	b002      	add	sp, #8
    4666:	4770      	bx	lr
    4668:	40064000 	.word	0x40064000

0000466c <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    466c:	b082      	sub	sp, #8
    466e:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4670:	9b01      	ldr	r3, [sp, #4]
    4672:	889b      	ldrh	r3, [r3, #4]
    4674:	2b01      	cmp	r3, #1
    4676:	d12f      	bne.n	46d8 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4678:	4b1a      	ldr	r3, [pc, #104]	; (46e4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    467a:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    467e:	9b01      	ldr	r3, [sp, #4]
    4680:	7b5b      	ldrb	r3, [r3, #13]
    4682:	3b01      	subs	r3, #1
    4684:	021b      	lsls	r3, r3, #8
    4686:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    468a:	9b01      	ldr	r3, [sp, #4]
    468c:	7d1b      	ldrb	r3, [r3, #20]
    468e:	3b10      	subs	r3, #16
    4690:	041b      	lsls	r3, r3, #16
    4692:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4696:	430b      	orrs	r3, r1
    4698:	4912      	ldr	r1, [pc, #72]	; (46e4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    469a:	4313      	orrs	r3, r2
    469c:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    46a0:	9b01      	ldr	r3, [sp, #4]
    46a2:	7fdb      	ldrb	r3, [r3, #31]
    46a4:	2b02      	cmp	r3, #2
    46a6:	d011      	beq.n	46cc <Clock_Ip_SetSpll_TrustedCall+0x60>
    46a8:	2b02      	cmp	r3, #2
    46aa:	dc17      	bgt.n	46dc <Clock_Ip_SetSpll_TrustedCall+0x70>
    46ac:	2b00      	cmp	r3, #0
    46ae:	d002      	beq.n	46b6 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    46b0:	2b01      	cmp	r3, #1
    46b2:	d005      	beq.n	46c0 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    46b4:	e012      	b.n	46dc <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    46b6:	4b0b      	ldr	r3, [pc, #44]	; (46e4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    46b8:	2200      	movs	r2, #0
    46ba:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    46be:	e00e      	b.n	46de <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    46c0:	4b08      	ldr	r3, [pc, #32]	; (46e4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    46c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    46c6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    46ca:	e008      	b.n	46de <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    46cc:	4b05      	ldr	r3, [pc, #20]	; (46e4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    46ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    46d2:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    46d6:	e002      	b.n	46de <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    46d8:	bf00      	nop
    46da:	e000      	b.n	46de <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    46dc:	bf00      	nop
}
    46de:	bf00      	nop
    46e0:	b002      	add	sp, #8
    46e2:	4770      	bx	lr
    46e4:	40064000 	.word	0x40064000

000046e8 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    46e8:	b082      	sub	sp, #8
    46ea:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    46ec:	4b09      	ldr	r3, [pc, #36]	; (4714 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    46ee:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    46f2:	4a08      	ldr	r2, [pc, #32]	; (4714 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    46f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    46f8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    46fc:	4b05      	ldr	r3, [pc, #20]	; (4714 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    46fe:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4702:	4a04      	ldr	r2, [pc, #16]	; (4714 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4704:	f023 0301 	bic.w	r3, r3, #1
    4708:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    470c:	bf00      	nop
    470e:	b002      	add	sp, #8
    4710:	4770      	bx	lr
    4712:	bf00      	nop
    4714:	40064000 	.word	0x40064000

00004718 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4718:	b082      	sub	sp, #8
    471a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    471c:	9b01      	ldr	r3, [sp, #4]
    471e:	889b      	ldrh	r3, [r3, #4]
    4720:	2b01      	cmp	r3, #1
    4722:	d107      	bne.n	4734 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4724:	4b05      	ldr	r3, [pc, #20]	; (473c <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4726:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    472a:	4a04      	ldr	r2, [pc, #16]	; (473c <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    472c:	f043 0301 	orr.w	r3, r3, #1
    4730:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4734:	bf00      	nop
    4736:	b002      	add	sp, #8
    4738:	4770      	bx	lr
    473a:	bf00      	nop
    473c:	40064000 	.word	0x40064000

00004740 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4740:	b082      	sub	sp, #8
    4742:	9001      	str	r0, [sp, #4]
    4744:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4746:	bf00      	nop
    4748:	b002      	add	sp, #8
    474a:	4770      	bx	lr

0000474c <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    474c:	b082      	sub	sp, #8
    474e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4750:	bf00      	nop
    4752:	b002      	add	sp, #8
    4754:	4770      	bx	lr

00004756 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4756:	b500      	push	{lr}
    4758:	b083      	sub	sp, #12
    475a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    475c:	9b01      	ldr	r3, [sp, #4]
    475e:	2b00      	cmp	r3, #0
    4760:	d002      	beq.n	4768 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4762:	9801      	ldr	r0, [sp, #4]
    4764:	f000 f8ee 	bl	4944 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4768:	bf00      	nop
    476a:	b003      	add	sp, #12
    476c:	f85d fb04 	ldr.w	pc, [sp], #4

00004770 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4770:	b500      	push	{lr}
    4772:	b083      	sub	sp, #12
    4774:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4776:	9b01      	ldr	r3, [sp, #4]
    4778:	2b00      	cmp	r3, #0
    477a:	d002      	beq.n	4782 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    477c:	9801      	ldr	r0, [sp, #4]
    477e:	f000 f8ff 	bl	4980 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4782:	bf00      	nop
    4784:	b003      	add	sp, #12
    4786:	f85d fb04 	ldr.w	pc, [sp], #4

0000478a <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    478a:	b500      	push	{lr}
    478c:	b083      	sub	sp, #12
    478e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4790:	9b01      	ldr	r3, [sp, #4]
    4792:	2b00      	cmp	r3, #0
    4794:	d002      	beq.n	479c <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    4796:	9801      	ldr	r0, [sp, #4]
    4798:	f000 f912 	bl	49c0 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    479c:	bf00      	nop
    479e:	b003      	add	sp, #12
    47a0:	f85d fb04 	ldr.w	pc, [sp], #4

000047a4 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    47a4:	b500      	push	{lr}
    47a6:	b083      	sub	sp, #12
    47a8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    47aa:	9b01      	ldr	r3, [sp, #4]
    47ac:	2b00      	cmp	r3, #0
    47ae:	d002      	beq.n	47b6 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    47b0:	9801      	ldr	r0, [sp, #4]
    47b2:	f000 f925 	bl	4a00 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    47b6:	bf00      	nop
    47b8:	b003      	add	sp, #12
    47ba:	f85d fb04 	ldr.w	pc, [sp], #4

000047be <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    47be:	b500      	push	{lr}
    47c0:	b083      	sub	sp, #12
    47c2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    47c4:	9b01      	ldr	r3, [sp, #4]
    47c6:	2b00      	cmp	r3, #0
    47c8:	d002      	beq.n	47d0 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    47ca:	9801      	ldr	r0, [sp, #4]
    47cc:	f000 f936 	bl	4a3c <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    47d0:	bf00      	nop
    47d2:	b003      	add	sp, #12
    47d4:	f85d fb04 	ldr.w	pc, [sp], #4

000047d8 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    47d8:	b500      	push	{lr}
    47da:	b083      	sub	sp, #12
    47dc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    47de:	9b01      	ldr	r3, [sp, #4]
    47e0:	2b00      	cmp	r3, #0
    47e2:	d002      	beq.n	47ea <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    47e4:	9801      	ldr	r0, [sp, #4]
    47e6:	f000 f949 	bl	4a7c <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    47ea:	bf00      	nop
    47ec:	b003      	add	sp, #12
    47ee:	f85d fb04 	ldr.w	pc, [sp], #4

000047f2 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    47f2:	b500      	push	{lr}
    47f4:	b083      	sub	sp, #12
    47f6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    47f8:	9b01      	ldr	r3, [sp, #4]
    47fa:	2b00      	cmp	r3, #0
    47fc:	d002      	beq.n	4804 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    47fe:	9801      	ldr	r0, [sp, #4]
    4800:	f000 f958 	bl	4ab4 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4804:	bf00      	nop
    4806:	b003      	add	sp, #12
    4808:	f85d fb04 	ldr.w	pc, [sp], #4

0000480c <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    480c:	b500      	push	{lr}
    480e:	b083      	sub	sp, #12
    4810:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4812:	9b01      	ldr	r3, [sp, #4]
    4814:	2b00      	cmp	r3, #0
    4816:	d002      	beq.n	481e <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4818:	9801      	ldr	r0, [sp, #4]
    481a:	f000 f969 	bl	4af0 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    481e:	bf00      	nop
    4820:	b003      	add	sp, #12
    4822:	f85d fb04 	ldr.w	pc, [sp], #4

00004826 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4826:	b500      	push	{lr}
    4828:	b083      	sub	sp, #12
    482a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    482c:	9b01      	ldr	r3, [sp, #4]
    482e:	2b00      	cmp	r3, #0
    4830:	d002      	beq.n	4838 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    4832:	9801      	ldr	r0, [sp, #4]
    4834:	f000 f978 	bl	4b28 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4838:	bf00      	nop
    483a:	b003      	add	sp, #12
    483c:	f85d fb04 	ldr.w	pc, [sp], #4

00004840 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4840:	b500      	push	{lr}
    4842:	b083      	sub	sp, #12
    4844:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4846:	9b01      	ldr	r3, [sp, #4]
    4848:	2b00      	cmp	r3, #0
    484a:	d002      	beq.n	4852 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    484c:	9801      	ldr	r0, [sp, #4]
    484e:	f000 f989 	bl	4b64 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4852:	bf00      	nop
    4854:	b003      	add	sp, #12
    4856:	f85d fb04 	ldr.w	pc, [sp], #4

0000485a <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    485a:	b500      	push	{lr}
    485c:	b083      	sub	sp, #12
    485e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4860:	9b01      	ldr	r3, [sp, #4]
    4862:	2b00      	cmp	r3, #0
    4864:	d002      	beq.n	486c <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    4866:	9801      	ldr	r0, [sp, #4]
    4868:	f000 f998 	bl	4b9c <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    486c:	bf00      	nop
    486e:	b003      	add	sp, #12
    4870:	f85d fb04 	ldr.w	pc, [sp], #4

00004874 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4874:	b500      	push	{lr}
    4876:	b083      	sub	sp, #12
    4878:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    487a:	9b01      	ldr	r3, [sp, #4]
    487c:	2b00      	cmp	r3, #0
    487e:	d002      	beq.n	4886 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4880:	9801      	ldr	r0, [sp, #4]
    4882:	f000 f9a9 	bl	4bd8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4886:	bf00      	nop
    4888:	b003      	add	sp, #12
    488a:	f85d fb04 	ldr.w	pc, [sp], #4

0000488e <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    488e:	b500      	push	{lr}
    4890:	b083      	sub	sp, #12
    4892:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4894:	9b01      	ldr	r3, [sp, #4]
    4896:	2b00      	cmp	r3, #0
    4898:	d002      	beq.n	48a0 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    489a:	9801      	ldr	r0, [sp, #4]
    489c:	f000 f9e6 	bl	4c6c <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    48a0:	bf00      	nop
    48a2:	b003      	add	sp, #12
    48a4:	f85d fb04 	ldr.w	pc, [sp], #4

000048a8 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    48a8:	b500      	push	{lr}
    48aa:	b083      	sub	sp, #12
    48ac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    48ae:	9b01      	ldr	r3, [sp, #4]
    48b0:	2b00      	cmp	r3, #0
    48b2:	d002      	beq.n	48ba <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    48b4:	9801      	ldr	r0, [sp, #4]
    48b6:	f000 fa25 	bl	4d04 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    48ba:	bf00      	nop
    48bc:	b003      	add	sp, #12
    48be:	f85d fb04 	ldr.w	pc, [sp], #4

000048c2 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    48c2:	b500      	push	{lr}
    48c4:	b083      	sub	sp, #12
    48c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    48c8:	9b01      	ldr	r3, [sp, #4]
    48ca:	2b00      	cmp	r3, #0
    48cc:	d002      	beq.n	48d4 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    48ce:	9801      	ldr	r0, [sp, #4]
    48d0:	f000 fa2a 	bl	4d28 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    48d4:	bf00      	nop
    48d6:	b003      	add	sp, #12
    48d8:	f85d fb04 	ldr.w	pc, [sp], #4

000048dc <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    48dc:	b500      	push	{lr}
    48de:	b083      	sub	sp, #12
    48e0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    48e2:	9b01      	ldr	r3, [sp, #4]
    48e4:	2b00      	cmp	r3, #0
    48e6:	d002      	beq.n	48ee <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    48e8:	9801      	ldr	r0, [sp, #4]
    48ea:	f000 fa3b 	bl	4d64 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    48ee:	bf00      	nop
    48f0:	b003      	add	sp, #12
    48f2:	f85d fb04 	ldr.w	pc, [sp], #4

000048f6 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    48f6:	b500      	push	{lr}
    48f8:	b083      	sub	sp, #12
    48fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    48fc:	9b01      	ldr	r3, [sp, #4]
    48fe:	2b00      	cmp	r3, #0
    4900:	d002      	beq.n	4908 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    4902:	9801      	ldr	r0, [sp, #4]
    4904:	f000 fa56 	bl	4db4 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4908:	bf00      	nop
    490a:	b003      	add	sp, #12
    490c:	f85d fb04 	ldr.w	pc, [sp], #4

00004910 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4910:	b500      	push	{lr}
    4912:	b083      	sub	sp, #12
    4914:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4916:	9b01      	ldr	r3, [sp, #4]
    4918:	2b00      	cmp	r3, #0
    491a:	d002      	beq.n	4922 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    491c:	9801      	ldr	r0, [sp, #4]
    491e:	f000 fa79 	bl	4e14 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4922:	bf00      	nop
    4924:	b003      	add	sp, #12
    4926:	f85d fb04 	ldr.w	pc, [sp], #4

0000492a <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    492a:	b500      	push	{lr}
    492c:	b083      	sub	sp, #12
    492e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4930:	9b01      	ldr	r3, [sp, #4]
    4932:	2b00      	cmp	r3, #0
    4934:	d002      	beq.n	493c <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4936:	9801      	ldr	r0, [sp, #4]
    4938:	f000 fa8a 	bl	4e50 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    493c:	bf00      	nop
    493e:	b003      	add	sp, #12
    4940:	f85d fb04 	ldr.w	pc, [sp], #4

00004944 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4944:	b084      	sub	sp, #16
    4946:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4948:	4b0b      	ldr	r3, [pc, #44]	; (4978 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    494a:	795b      	ldrb	r3, [r3, #5]
    494c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    494e:	4b0b      	ldr	r3, [pc, #44]	; (497c <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4950:	695b      	ldr	r3, [r3, #20]
    4952:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4954:	9b02      	ldr	r3, [sp, #8]
    4956:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    495a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    495c:	9b03      	ldr	r3, [sp, #12]
    495e:	061b      	lsls	r3, r3, #24
    4960:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4964:	9a02      	ldr	r2, [sp, #8]
    4966:	4313      	orrs	r3, r2
    4968:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    496a:	4a04      	ldr	r2, [pc, #16]	; (497c <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    496c:	9b02      	ldr	r3, [sp, #8]
    496e:	6153      	str	r3, [r2, #20]
}
    4970:	bf00      	nop
    4972:	b004      	add	sp, #16
    4974:	4770      	bx	lr
    4976:	bf00      	nop
    4978:	000100e0 	.word	0x000100e0
    497c:	40064000 	.word	0x40064000

00004980 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4980:	b084      	sub	sp, #16
    4982:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4984:	9b01      	ldr	r3, [sp, #4]
    4986:	685b      	ldr	r3, [r3, #4]
    4988:	4a0b      	ldr	r2, [pc, #44]	; (49b8 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    498a:	5cd3      	ldrb	r3, [r2, r3]
    498c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    498e:	4b0b      	ldr	r3, [pc, #44]	; (49bc <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4990:	695b      	ldr	r3, [r3, #20]
    4992:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4994:	9b02      	ldr	r3, [sp, #8]
    4996:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    499a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    499c:	9b03      	ldr	r3, [sp, #12]
    499e:	061b      	lsls	r3, r3, #24
    49a0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    49a4:	9a02      	ldr	r2, [sp, #8]
    49a6:	4313      	orrs	r3, r2
    49a8:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    49aa:	4a04      	ldr	r2, [pc, #16]	; (49bc <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    49ac:	9b02      	ldr	r3, [sp, #8]
    49ae:	6153      	str	r3, [r2, #20]
}
    49b0:	bf00      	nop
    49b2:	b004      	add	sp, #16
    49b4:	4770      	bx	lr
    49b6:	bf00      	nop
    49b8:	000100e0 	.word	0x000100e0
    49bc:	40064000 	.word	0x40064000

000049c0 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    49c0:	b084      	sub	sp, #16
    49c2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    49c4:	9b01      	ldr	r3, [sp, #4]
    49c6:	685b      	ldr	r3, [r3, #4]
    49c8:	4a0b      	ldr	r2, [pc, #44]	; (49f8 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    49ca:	5cd3      	ldrb	r3, [r2, r3]
    49cc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    49ce:	4b0b      	ldr	r3, [pc, #44]	; (49fc <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    49d0:	699b      	ldr	r3, [r3, #24]
    49d2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    49d4:	9b02      	ldr	r3, [sp, #8]
    49d6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    49da:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    49dc:	9b03      	ldr	r3, [sp, #12]
    49de:	061b      	lsls	r3, r3, #24
    49e0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    49e4:	9a02      	ldr	r2, [sp, #8]
    49e6:	4313      	orrs	r3, r2
    49e8:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    49ea:	4a04      	ldr	r2, [pc, #16]	; (49fc <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    49ec:	9b02      	ldr	r3, [sp, #8]
    49ee:	6193      	str	r3, [r2, #24]
}
    49f0:	bf00      	nop
    49f2:	b004      	add	sp, #16
    49f4:	4770      	bx	lr
    49f6:	bf00      	nop
    49f8:	000100e0 	.word	0x000100e0
    49fc:	40064000 	.word	0x40064000

00004a00 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a00:	b084      	sub	sp, #16
    4a02:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a04:	4b0b      	ldr	r3, [pc, #44]	; (4a34 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    4a06:	795b      	ldrb	r3, [r3, #5]
    4a08:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    4a0a:	4b0b      	ldr	r3, [pc, #44]	; (4a38 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4a0c:	69db      	ldr	r3, [r3, #28]
    4a0e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4a10:	9b02      	ldr	r3, [sp, #8]
    4a12:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4a16:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4a18:	9b03      	ldr	r3, [sp, #12]
    4a1a:	061b      	lsls	r3, r3, #24
    4a1c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4a20:	9a02      	ldr	r2, [sp, #8]
    4a22:	4313      	orrs	r3, r2
    4a24:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4a26:	4a04      	ldr	r2, [pc, #16]	; (4a38 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4a28:	9b02      	ldr	r3, [sp, #8]
    4a2a:	61d3      	str	r3, [r2, #28]
}
    4a2c:	bf00      	nop
    4a2e:	b004      	add	sp, #16
    4a30:	4770      	bx	lr
    4a32:	bf00      	nop
    4a34:	000100e0 	.word	0x000100e0
    4a38:	40064000 	.word	0x40064000

00004a3c <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a3c:	b084      	sub	sp, #16
    4a3e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a40:	9b01      	ldr	r3, [sp, #4]
    4a42:	685b      	ldr	r3, [r3, #4]
    4a44:	4a0b      	ldr	r2, [pc, #44]	; (4a74 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    4a46:	5cd3      	ldrb	r3, [r2, r3]
    4a48:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    4a4a:	4b0b      	ldr	r3, [pc, #44]	; (4a78 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4a4c:	69db      	ldr	r3, [r3, #28]
    4a4e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4a50:	9b02      	ldr	r3, [sp, #8]
    4a52:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4a56:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4a58:	9b03      	ldr	r3, [sp, #12]
    4a5a:	061b      	lsls	r3, r3, #24
    4a5c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4a60:	9a02      	ldr	r2, [sp, #8]
    4a62:	4313      	orrs	r3, r2
    4a64:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4a66:	4a04      	ldr	r2, [pc, #16]	; (4a78 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4a68:	9b02      	ldr	r3, [sp, #8]
    4a6a:	61d3      	str	r3, [r2, #28]
}
    4a6c:	bf00      	nop
    4a6e:	b004      	add	sp, #16
    4a70:	4770      	bx	lr
    4a72:	bf00      	nop
    4a74:	000100e0 	.word	0x000100e0
    4a78:	40064000 	.word	0x40064000

00004a7c <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a7c:	b084      	sub	sp, #16
    4a7e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a80:	4b0a      	ldr	r3, [pc, #40]	; (4aac <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    4a82:	7b9b      	ldrb	r3, [r3, #14]
    4a84:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4a86:	4b0a      	ldr	r3, [pc, #40]	; (4ab0 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4a88:	691b      	ldr	r3, [r3, #16]
    4a8a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4a8c:	9b02      	ldr	r3, [sp, #8]
    4a8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4a92:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4a94:	9b03      	ldr	r3, [sp, #12]
    4a96:	011b      	lsls	r3, r3, #4
    4a98:	9a02      	ldr	r2, [sp, #8]
    4a9a:	4313      	orrs	r3, r2
    4a9c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4a9e:	4a04      	ldr	r2, [pc, #16]	; (4ab0 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4aa0:	9b02      	ldr	r3, [sp, #8]
    4aa2:	6113      	str	r3, [r2, #16]
}
    4aa4:	bf00      	nop
    4aa6:	b004      	add	sp, #16
    4aa8:	4770      	bx	lr
    4aaa:	bf00      	nop
    4aac:	00010088 	.word	0x00010088
    4ab0:	40048000 	.word	0x40048000

00004ab4 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4ab4:	b084      	sub	sp, #16
    4ab6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4ab8:	9b01      	ldr	r3, [sp, #4]
    4aba:	685b      	ldr	r3, [r3, #4]
    4abc:	4a0a      	ldr	r2, [pc, #40]	; (4ae8 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    4abe:	5cd3      	ldrb	r3, [r2, r3]
    4ac0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    4ac2:	4b0a      	ldr	r3, [pc, #40]	; (4aec <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4ac4:	691b      	ldr	r3, [r3, #16]
    4ac6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4ac8:	9b02      	ldr	r3, [sp, #8]
    4aca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4ace:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4ad0:	9b03      	ldr	r3, [sp, #12]
    4ad2:	011b      	lsls	r3, r3, #4
    4ad4:	9a02      	ldr	r2, [sp, #8]
    4ad6:	4313      	orrs	r3, r2
    4ad8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4ada:	4a04      	ldr	r2, [pc, #16]	; (4aec <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4adc:	9b02      	ldr	r3, [sp, #8]
    4ade:	6113      	str	r3, [r2, #16]
}
    4ae0:	bf00      	nop
    4ae2:	b004      	add	sp, #16
    4ae4:	4770      	bx	lr
    4ae6:	bf00      	nop
    4ae8:	00010088 	.word	0x00010088
    4aec:	40048000 	.word	0x40048000

00004af0 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4af0:	b084      	sub	sp, #16
    4af2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4af4:	4b0a      	ldr	r3, [pc, #40]	; (4b20 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    4af6:	785b      	ldrb	r3, [r3, #1]
    4af8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4afa:	4b0a      	ldr	r3, [pc, #40]	; (4b24 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4afc:	691b      	ldr	r3, [r3, #16]
    4afe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4b00:	9b02      	ldr	r3, [sp, #8]
    4b02:	f023 030c 	bic.w	r3, r3, #12
    4b06:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4b08:	9b03      	ldr	r3, [sp, #12]
    4b0a:	009b      	lsls	r3, r3, #2
    4b0c:	9a02      	ldr	r2, [sp, #8]
    4b0e:	4313      	orrs	r3, r2
    4b10:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4b12:	4a04      	ldr	r2, [pc, #16]	; (4b24 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4b14:	9b02      	ldr	r3, [sp, #8]
    4b16:	6113      	str	r3, [r2, #16]
}
    4b18:	bf00      	nop
    4b1a:	b004      	add	sp, #16
    4b1c:	4770      	bx	lr
    4b1e:	bf00      	nop
    4b20:	00010140 	.word	0x00010140
    4b24:	40048000 	.word	0x40048000

00004b28 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4b28:	b084      	sub	sp, #16
    4b2a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4b2c:	9b01      	ldr	r3, [sp, #4]
    4b2e:	685b      	ldr	r3, [r3, #4]
    4b30:	4a0a      	ldr	r2, [pc, #40]	; (4b5c <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    4b32:	5cd3      	ldrb	r3, [r2, r3]
    4b34:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4b36:	4b0a      	ldr	r3, [pc, #40]	; (4b60 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4b38:	691b      	ldr	r3, [r3, #16]
    4b3a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4b3c:	9b02      	ldr	r3, [sp, #8]
    4b3e:	f023 030c 	bic.w	r3, r3, #12
    4b42:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4b44:	9b03      	ldr	r3, [sp, #12]
    4b46:	009b      	lsls	r3, r3, #2
    4b48:	9a02      	ldr	r2, [sp, #8]
    4b4a:	4313      	orrs	r3, r2
    4b4c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4b4e:	4a04      	ldr	r2, [pc, #16]	; (4b60 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4b50:	9b02      	ldr	r3, [sp, #8]
    4b52:	6113      	str	r3, [r2, #16]
}
    4b54:	bf00      	nop
    4b56:	b004      	add	sp, #16
    4b58:	4770      	bx	lr
    4b5a:	bf00      	nop
    4b5c:	00010140 	.word	0x00010140
    4b60:	40048000 	.word	0x40048000

00004b64 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4b64:	b084      	sub	sp, #16
    4b66:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4b68:	4b0a      	ldr	r3, [pc, #40]	; (4b94 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    4b6a:	795b      	ldrb	r3, [r3, #5]
    4b6c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    4b6e:	4b0a      	ldr	r3, [pc, #40]	; (4b98 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4b70:	6a1b      	ldr	r3, [r3, #32]
    4b72:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4b74:	9b02      	ldr	r3, [sp, #8]
    4b76:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4b7a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4b7c:	9b03      	ldr	r3, [sp, #12]
    4b7e:	061b      	lsls	r3, r3, #24
    4b80:	9a02      	ldr	r2, [sp, #8]
    4b82:	4313      	orrs	r3, r2
    4b84:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4b86:	4a04      	ldr	r2, [pc, #16]	; (4b98 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4b88:	9b02      	ldr	r3, [sp, #8]
    4b8a:	6213      	str	r3, [r2, #32]
}
    4b8c:	bf00      	nop
    4b8e:	b004      	add	sp, #16
    4b90:	4770      	bx	lr
    4b92:	bf00      	nop
    4b94:	000100e0 	.word	0x000100e0
    4b98:	40064000 	.word	0x40064000

00004b9c <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4b9c:	b084      	sub	sp, #16
    4b9e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4ba0:	9b01      	ldr	r3, [sp, #4]
    4ba2:	685b      	ldr	r3, [r3, #4]
    4ba4:	4a0a      	ldr	r2, [pc, #40]	; (4bd0 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    4ba6:	5cd3      	ldrb	r3, [r2, r3]
    4ba8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    4baa:	4b0a      	ldr	r3, [pc, #40]	; (4bd4 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4bac:	6a1b      	ldr	r3, [r3, #32]
    4bae:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4bb0:	9b02      	ldr	r3, [sp, #8]
    4bb2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4bb6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4bb8:	9b03      	ldr	r3, [sp, #12]
    4bba:	061b      	lsls	r3, r3, #24
    4bbc:	9a02      	ldr	r2, [sp, #8]
    4bbe:	4313      	orrs	r3, r2
    4bc0:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4bc2:	4a04      	ldr	r2, [pc, #16]	; (4bd4 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4bc4:	9b02      	ldr	r3, [sp, #8]
    4bc6:	6213      	str	r3, [r2, #32]
}
    4bc8:	bf00      	nop
    4bca:	b004      	add	sp, #16
    4bcc:	4770      	bx	lr
    4bce:	bf00      	nop
    4bd0:	000100e0 	.word	0x000100e0
    4bd4:	40064000 	.word	0x40064000

00004bd8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4bd8:	b086      	sub	sp, #24
    4bda:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4bdc:	4b20      	ldr	r3, [pc, #128]	; (4c60 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    4bde:	795b      	ldrb	r3, [r3, #5]
    4be0:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4be2:	9b01      	ldr	r3, [sp, #4]
    4be4:	681a      	ldr	r2, [r3, #0]
    4be6:	491f      	ldr	r1, [pc, #124]	; (4c64 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    4be8:	4613      	mov	r3, r2
    4bea:	00db      	lsls	r3, r3, #3
    4bec:	4413      	add	r3, r2
    4bee:	440b      	add	r3, r1
    4bf0:	781b      	ldrb	r3, [r3, #0]
    4bf2:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4bf4:	4b1c      	ldr	r3, [pc, #112]	; (4c68 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4bf6:	68db      	ldr	r3, [r3, #12]
    4bf8:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4bfa:	9b03      	ldr	r3, [sp, #12]
    4bfc:	2b03      	cmp	r3, #3
    4bfe:	d813      	bhi.n	4c28 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4c00:	9b03      	ldr	r3, [sp, #12]
    4c02:	005b      	lsls	r3, r3, #1
    4c04:	3318      	adds	r3, #24
    4c06:	2203      	movs	r2, #3
    4c08:	fa02 f303 	lsl.w	r3, r2, r3
    4c0c:	43db      	mvns	r3, r3
    4c0e:	9a05      	ldr	r2, [sp, #20]
    4c10:	4013      	ands	r3, r2
    4c12:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4c14:	9b03      	ldr	r3, [sp, #12]
    4c16:	005b      	lsls	r3, r3, #1
    4c18:	3318      	adds	r3, #24
    4c1a:	9a04      	ldr	r2, [sp, #16]
    4c1c:	fa02 f303 	lsl.w	r3, r2, r3
    4c20:	9a05      	ldr	r2, [sp, #20]
    4c22:	4313      	orrs	r3, r2
    4c24:	9305      	str	r3, [sp, #20]
    4c26:	e014      	b.n	4c52 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4c28:	9b03      	ldr	r3, [sp, #12]
    4c2a:	3b04      	subs	r3, #4
    4c2c:	005b      	lsls	r3, r3, #1
    4c2e:	3310      	adds	r3, #16
    4c30:	2203      	movs	r2, #3
    4c32:	fa02 f303 	lsl.w	r3, r2, r3
    4c36:	43db      	mvns	r3, r3
    4c38:	9a05      	ldr	r2, [sp, #20]
    4c3a:	4013      	ands	r3, r2
    4c3c:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4c3e:	9b03      	ldr	r3, [sp, #12]
    4c40:	3b04      	subs	r3, #4
    4c42:	005b      	lsls	r3, r3, #1
    4c44:	3310      	adds	r3, #16
    4c46:	9a04      	ldr	r2, [sp, #16]
    4c48:	fa02 f303 	lsl.w	r3, r2, r3
    4c4c:	9a05      	ldr	r2, [sp, #20]
    4c4e:	4313      	orrs	r3, r2
    4c50:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4c52:	4a05      	ldr	r2, [pc, #20]	; (4c68 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4c54:	9b05      	ldr	r3, [sp, #20]
    4c56:	60d3      	str	r3, [r2, #12]
}
    4c58:	bf00      	nop
    4c5a:	b006      	add	sp, #24
    4c5c:	4770      	bx	lr
    4c5e:	bf00      	nop
    4c60:	00010088 	.word	0x00010088
    4c64:	0000fd78 	.word	0x0000fd78
    4c68:	40048000 	.word	0x40048000

00004c6c <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4c6c:	b086      	sub	sp, #24
    4c6e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4c70:	9b01      	ldr	r3, [sp, #4]
    4c72:	685b      	ldr	r3, [r3, #4]
    4c74:	4a20      	ldr	r2, [pc, #128]	; (4cf8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    4c76:	5cd3      	ldrb	r3, [r2, r3]
    4c78:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4c7a:	9b01      	ldr	r3, [sp, #4]
    4c7c:	681a      	ldr	r2, [r3, #0]
    4c7e:	491f      	ldr	r1, [pc, #124]	; (4cfc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    4c80:	4613      	mov	r3, r2
    4c82:	00db      	lsls	r3, r3, #3
    4c84:	4413      	add	r3, r2
    4c86:	440b      	add	r3, r1
    4c88:	781b      	ldrb	r3, [r3, #0]
    4c8a:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4c8c:	4b1c      	ldr	r3, [pc, #112]	; (4d00 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4c8e:	68db      	ldr	r3, [r3, #12]
    4c90:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4c92:	9b03      	ldr	r3, [sp, #12]
    4c94:	2b03      	cmp	r3, #3
    4c96:	d813      	bhi.n	4cc0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4c98:	9b03      	ldr	r3, [sp, #12]
    4c9a:	005b      	lsls	r3, r3, #1
    4c9c:	3318      	adds	r3, #24
    4c9e:	2203      	movs	r2, #3
    4ca0:	fa02 f303 	lsl.w	r3, r2, r3
    4ca4:	43db      	mvns	r3, r3
    4ca6:	9a05      	ldr	r2, [sp, #20]
    4ca8:	4013      	ands	r3, r2
    4caa:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4cac:	9b03      	ldr	r3, [sp, #12]
    4cae:	005b      	lsls	r3, r3, #1
    4cb0:	3318      	adds	r3, #24
    4cb2:	9a04      	ldr	r2, [sp, #16]
    4cb4:	fa02 f303 	lsl.w	r3, r2, r3
    4cb8:	9a05      	ldr	r2, [sp, #20]
    4cba:	4313      	orrs	r3, r2
    4cbc:	9305      	str	r3, [sp, #20]
    4cbe:	e014      	b.n	4cea <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4cc0:	9b03      	ldr	r3, [sp, #12]
    4cc2:	3b04      	subs	r3, #4
    4cc4:	005b      	lsls	r3, r3, #1
    4cc6:	3310      	adds	r3, #16
    4cc8:	2203      	movs	r2, #3
    4cca:	fa02 f303 	lsl.w	r3, r2, r3
    4cce:	43db      	mvns	r3, r3
    4cd0:	9a05      	ldr	r2, [sp, #20]
    4cd2:	4013      	ands	r3, r2
    4cd4:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4cd6:	9b03      	ldr	r3, [sp, #12]
    4cd8:	3b04      	subs	r3, #4
    4cda:	005b      	lsls	r3, r3, #1
    4cdc:	3310      	adds	r3, #16
    4cde:	9a04      	ldr	r2, [sp, #16]
    4ce0:	fa02 f303 	lsl.w	r3, r2, r3
    4ce4:	9a05      	ldr	r2, [sp, #20]
    4ce6:	4313      	orrs	r3, r2
    4ce8:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4cea:	4a05      	ldr	r2, [pc, #20]	; (4d00 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4cec:	9b05      	ldr	r3, [sp, #20]
    4cee:	60d3      	str	r3, [r2, #12]
}
    4cf0:	bf00      	nop
    4cf2:	b006      	add	sp, #24
    4cf4:	4770      	bx	lr
    4cf6:	bf00      	nop
    4cf8:	00010088 	.word	0x00010088
    4cfc:	0000fd78 	.word	0x0000fd78
    4d00:	40048000 	.word	0x40048000

00004d04 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4d04:	b084      	sub	sp, #16
    4d06:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4d08:	4b06      	ldr	r3, [pc, #24]	; (4d24 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4d0a:	685b      	ldr	r3, [r3, #4]
    4d0c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    4d0e:	9b03      	ldr	r3, [sp, #12]
    4d10:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4d14:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4d16:	4a03      	ldr	r2, [pc, #12]	; (4d24 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4d18:	9b03      	ldr	r3, [sp, #12]
    4d1a:	6053      	str	r3, [r2, #4]
}
    4d1c:	bf00      	nop
    4d1e:	b004      	add	sp, #16
    4d20:	4770      	bx	lr
    4d22:	bf00      	nop
    4d24:	40048000 	.word	0x40048000

00004d28 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4d28:	b084      	sub	sp, #16
    4d2a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4d2c:	9b01      	ldr	r3, [sp, #4]
    4d2e:	685b      	ldr	r3, [r3, #4]
    4d30:	4a0a      	ldr	r2, [pc, #40]	; (4d5c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    4d32:	5cd3      	ldrb	r3, [r2, r3]
    4d34:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    4d36:	4b0a      	ldr	r3, [pc, #40]	; (4d60 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4d38:	685b      	ldr	r3, [r3, #4]
    4d3a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4d3c:	9b02      	ldr	r3, [sp, #8]
    4d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4d42:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4d44:	9b03      	ldr	r3, [sp, #12]
    4d46:	011b      	lsls	r3, r3, #4
    4d48:	9a02      	ldr	r2, [sp, #8]
    4d4a:	4313      	orrs	r3, r2
    4d4c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    4d4e:	4a04      	ldr	r2, [pc, #16]	; (4d60 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4d50:	9b02      	ldr	r3, [sp, #8]
    4d52:	6053      	str	r3, [r2, #4]
}
    4d54:	bf00      	nop
    4d56:	b004      	add	sp, #16
    4d58:	4770      	bx	lr
    4d5a:	bf00      	nop
    4d5c:	00010088 	.word	0x00010088
    4d60:	40048000 	.word	0x40048000

00004d64 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4d64:	b084      	sub	sp, #16
    4d66:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4d68:	9b01      	ldr	r3, [sp, #4]
    4d6a:	681a      	ldr	r2, [r3, #0]
    4d6c:	490f      	ldr	r1, [pc, #60]	; (4dac <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    4d6e:	4613      	mov	r3, r2
    4d70:	00db      	lsls	r3, r3, #3
    4d72:	4413      	add	r3, r2
    4d74:	440b      	add	r3, r1
    4d76:	3304      	adds	r3, #4
    4d78:	781b      	ldrb	r3, [r3, #0]
    4d7a:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4d7c:	4a0c      	ldr	r2, [pc, #48]	; (4db0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4d7e:	9b03      	ldr	r3, [sp, #12]
    4d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4d84:	490a      	ldr	r1, [pc, #40]	; (4db0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4d86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    4d8a:	9b03      	ldr	r3, [sp, #12]
    4d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4d90:	4a07      	ldr	r2, [pc, #28]	; (4db0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4d92:	9b03      	ldr	r3, [sp, #12]
    4d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4d98:	4905      	ldr	r1, [pc, #20]	; (4db0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4d9a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    4d9e:	9b03      	ldr	r3, [sp, #12]
    4da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4da4:	bf00      	nop
    4da6:	b004      	add	sp, #16
    4da8:	4770      	bx	lr
    4daa:	bf00      	nop
    4dac:	0000fd78 	.word	0x0000fd78
    4db0:	40065000 	.word	0x40065000

00004db4 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4db4:	b086      	sub	sp, #24
    4db6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4db8:	9b01      	ldr	r3, [sp, #4]
    4dba:	681a      	ldr	r2, [r3, #0]
    4dbc:	4912      	ldr	r1, [pc, #72]	; (4e08 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    4dbe:	4613      	mov	r3, r2
    4dc0:	00db      	lsls	r3, r3, #3
    4dc2:	4413      	add	r3, r2
    4dc4:	440b      	add	r3, r1
    4dc6:	3304      	adds	r3, #4
    4dc8:	781b      	ldrb	r3, [r3, #0]
    4dca:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4dcc:	9b01      	ldr	r3, [sp, #4]
    4dce:	685b      	ldr	r3, [r3, #4]
    4dd0:	4a0e      	ldr	r2, [pc, #56]	; (4e0c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    4dd2:	5cd3      	ldrb	r3, [r2, r3]
    4dd4:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4dd6:	4a0e      	ldr	r2, [pc, #56]	; (4e10 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4dd8:	9b05      	ldr	r3, [sp, #20]
    4dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4dde:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    4de0:	9b03      	ldr	r3, [sp, #12]
    4de2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    4de6:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4de8:	9b04      	ldr	r3, [sp, #16]
    4dea:	061b      	lsls	r3, r3, #24
    4dec:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    4df0:	9a03      	ldr	r2, [sp, #12]
    4df2:	4313      	orrs	r3, r2
    4df4:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    4df6:	4906      	ldr	r1, [pc, #24]	; (4e10 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4df8:	9b05      	ldr	r3, [sp, #20]
    4dfa:	9a03      	ldr	r2, [sp, #12]
    4dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4e00:	bf00      	nop
    4e02:	b006      	add	sp, #24
    4e04:	4770      	bx	lr
    4e06:	bf00      	nop
    4e08:	0000fd78 	.word	0x0000fd78
    4e0c:	00010110 	.word	0x00010110
    4e10:	40065000 	.word	0x40065000

00004e14 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4e14:	b084      	sub	sp, #16
    4e16:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4e18:	4b0b      	ldr	r3, [pc, #44]	; (4e48 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4e1a:	7f1b      	ldrb	r3, [r3, #28]
    4e1c:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    4e1e:	4b0b      	ldr	r3, [pc, #44]	; (4e4c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4e20:	685b      	ldr	r3, [r3, #4]
    4e22:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4e24:	9b02      	ldr	r3, [sp, #8]
    4e26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4e2a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4e2c:	9b03      	ldr	r3, [sp, #12]
    4e2e:	031b      	lsls	r3, r3, #12
    4e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4e34:	9a02      	ldr	r2, [sp, #8]
    4e36:	4313      	orrs	r3, r2
    4e38:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4e3a:	4a04      	ldr	r2, [pc, #16]	; (4e4c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4e3c:	9b02      	ldr	r3, [sp, #8]
    4e3e:	6053      	str	r3, [r2, #4]
}
    4e40:	bf00      	nop
    4e42:	b004      	add	sp, #16
    4e44:	4770      	bx	lr
    4e46:	bf00      	nop
    4e48:	00010088 	.word	0x00010088
    4e4c:	40048000 	.word	0x40048000

00004e50 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4e50:	b084      	sub	sp, #16
    4e52:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4e54:	9b01      	ldr	r3, [sp, #4]
    4e56:	685b      	ldr	r3, [r3, #4]
    4e58:	4a0b      	ldr	r2, [pc, #44]	; (4e88 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4e5a:	5cd3      	ldrb	r3, [r2, r3]
    4e5c:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4e5e:	4b0b      	ldr	r3, [pc, #44]	; (4e8c <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4e60:	685b      	ldr	r3, [r3, #4]
    4e62:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4e64:	9b02      	ldr	r3, [sp, #8]
    4e66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4e6a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4e6c:	9b03      	ldr	r3, [sp, #12]
    4e6e:	031b      	lsls	r3, r3, #12
    4e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4e74:	9a02      	ldr	r2, [sp, #8]
    4e76:	4313      	orrs	r3, r2
    4e78:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4e7a:	4a04      	ldr	r2, [pc, #16]	; (4e8c <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4e7c:	9b02      	ldr	r3, [sp, #8]
    4e7e:	6053      	str	r3, [r2, #4]
}
    4e80:	bf00      	nop
    4e82:	b004      	add	sp, #16
    4e84:	4770      	bx	lr
    4e86:	bf00      	nop
    4e88:	00010088 	.word	0x00010088
    4e8c:	40048000 	.word	0x40048000

00004e90 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4e90:	b500      	push	{lr}
    4e92:	b085      	sub	sp, #20
    4e94:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4e96:	2300      	movs	r3, #0
    4e98:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4e9c:	9b01      	ldr	r3, [sp, #4]
    4e9e:	2b00      	cmp	r3, #0
    4ea0:	d037      	beq.n	4f12 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4ea2:	2300      	movs	r3, #0
    4ea4:	9303      	str	r3, [sp, #12]
    4ea6:	e02b      	b.n	4f00 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4ea8:	4b29      	ldr	r3, [pc, #164]	; (4f50 <DisableSafeClock+0xc0>)
    4eaa:	6819      	ldr	r1, [r3, #0]
    4eac:	9a03      	ldr	r2, [sp, #12]
    4eae:	4613      	mov	r3, r2
    4eb0:	005b      	lsls	r3, r3, #1
    4eb2:	4413      	add	r3, r2
    4eb4:	009b      	lsls	r3, r3, #2
    4eb6:	440b      	add	r3, r1
    4eb8:	3314      	adds	r3, #20
    4eba:	681b      	ldr	r3, [r3, #0]
    4ebc:	2b05      	cmp	r3, #5
    4ebe:	d11c      	bne.n	4efa <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4ec0:	2301      	movs	r3, #1
    4ec2:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4ec6:	4b22      	ldr	r3, [pc, #136]	; (4f50 <DisableSafeClock+0xc0>)
    4ec8:	6819      	ldr	r1, [r3, #0]
    4eca:	9a03      	ldr	r2, [sp, #12]
    4ecc:	4613      	mov	r3, r2
    4ece:	005b      	lsls	r3, r3, #1
    4ed0:	4413      	add	r3, r2
    4ed2:	009b      	lsls	r3, r3, #2
    4ed4:	440b      	add	r3, r1
    4ed6:	3318      	adds	r3, #24
    4ed8:	881b      	ldrh	r3, [r3, #0]
    4eda:	2b00      	cmp	r3, #0
    4edc:	d118      	bne.n	4f10 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4ede:	4b1d      	ldr	r3, [pc, #116]	; (4f54 <DisableSafeClock+0xc4>)
    4ee0:	791b      	ldrb	r3, [r3, #4]
    4ee2:	4619      	mov	r1, r3
    4ee4:	4a1c      	ldr	r2, [pc, #112]	; (4f58 <DisableSafeClock+0xc8>)
    4ee6:	460b      	mov	r3, r1
    4ee8:	005b      	lsls	r3, r3, #1
    4eea:	440b      	add	r3, r1
    4eec:	009b      	lsls	r3, r3, #2
    4eee:	4413      	add	r3, r2
    4ef0:	3308      	adds	r3, #8
    4ef2:	681b      	ldr	r3, [r3, #0]
    4ef4:	2005      	movs	r0, #5
    4ef6:	4798      	blx	r3
                }
                break;
    4ef8:	e00a      	b.n	4f10 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4efa:	9b03      	ldr	r3, [sp, #12]
    4efc:	3301      	adds	r3, #1
    4efe:	9303      	str	r3, [sp, #12]
    4f00:	4b13      	ldr	r3, [pc, #76]	; (4f50 <DisableSafeClock+0xc0>)
    4f02:	681b      	ldr	r3, [r3, #0]
    4f04:	7a1b      	ldrb	r3, [r3, #8]
    4f06:	461a      	mov	r2, r3
    4f08:	9b03      	ldr	r3, [sp, #12]
    4f0a:	4293      	cmp	r3, r2
    4f0c:	d3cc      	bcc.n	4ea8 <DisableSafeClock+0x18>
    4f0e:	e000      	b.n	4f12 <DisableSafeClock+0x82>
                break;
    4f10:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    4f12:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4f16:	f083 0301 	eor.w	r3, r3, #1
    4f1a:	b2db      	uxtb	r3, r3
    4f1c:	2b00      	cmp	r3, #0
    4f1e:	d013      	beq.n	4f48 <DisableSafeClock+0xb8>
    4f20:	4b0e      	ldr	r3, [pc, #56]	; (4f5c <DisableSafeClock+0xcc>)
    4f22:	781b      	ldrb	r3, [r3, #0]
    4f24:	f083 0301 	eor.w	r3, r3, #1
    4f28:	b2db      	uxtb	r3, r3
    4f2a:	2b00      	cmp	r3, #0
    4f2c:	d00c      	beq.n	4f48 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4f2e:	4b09      	ldr	r3, [pc, #36]	; (4f54 <DisableSafeClock+0xc4>)
    4f30:	791b      	ldrb	r3, [r3, #4]
    4f32:	4619      	mov	r1, r3
    4f34:	4a08      	ldr	r2, [pc, #32]	; (4f58 <DisableSafeClock+0xc8>)
    4f36:	460b      	mov	r3, r1
    4f38:	005b      	lsls	r3, r3, #1
    4f3a:	440b      	add	r3, r1
    4f3c:	009b      	lsls	r3, r3, #2
    4f3e:	4413      	add	r3, r2
    4f40:	3308      	adds	r3, #8
    4f42:	681b      	ldr	r3, [r3, #0]
    4f44:	2005      	movs	r0, #5
    4f46:	4798      	blx	r3
    }
}
    4f48:	bf00      	nop
    4f4a:	b005      	add	sp, #20
    4f4c:	f85d fb04 	ldr.w	pc, [sp], #4
    4f50:	1fff8bbc 	.word	0x1fff8bbc
    4f54:	0000fd08 	.word	0x0000fd08
    4f58:	00010338 	.word	0x00010338
    4f5c:	1fff8b20 	.word	0x1fff8b20

00004f60 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4f60:	4b06      	ldr	r3, [pc, #24]	; (4f7c <SetFircToResetValue_TrustedCall+0x1c>)
    4f62:	2200      	movs	r2, #0
    4f64:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4f68:	4b04      	ldr	r3, [pc, #16]	; (4f7c <SetFircToResetValue_TrustedCall+0x1c>)
    4f6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4f6e:	4a03      	ldr	r2, [pc, #12]	; (4f7c <SetFircToResetValue_TrustedCall+0x1c>)
    4f70:	f043 0301 	orr.w	r3, r3, #1
    4f74:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4f78:	bf00      	nop
    4f7a:	4770      	bx	lr
    4f7c:	40064000 	.word	0x40064000

00004f80 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4f80:	b084      	sub	sp, #16
    4f82:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4f84:	2303      	movs	r3, #3
    4f86:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4f88:	2300      	movs	r3, #0
    4f8a:	9302      	str	r3, [sp, #8]
    4f8c:	e028      	b.n	4fe0 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4f8e:	9b01      	ldr	r3, [sp, #4]
    4f90:	9a02      	ldr	r2, [sp, #8]
    4f92:	320d      	adds	r2, #13
    4f94:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4f98:	2b28      	cmp	r3, #40	; 0x28
    4f9a:	d10b      	bne.n	4fb4 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4f9c:	9a01      	ldr	r2, [sp, #4]
    4f9e:	9b02      	ldr	r3, [sp, #8]
    4fa0:	330d      	adds	r3, #13
    4fa2:	00db      	lsls	r3, r3, #3
    4fa4:	4413      	add	r3, r2
    4fa6:	685b      	ldr	r3, [r3, #4]
    4fa8:	4a2b      	ldr	r2, [pc, #172]	; (5058 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4faa:	5cd3      	ldrb	r3, [r2, r3]
    4fac:	011b      	lsls	r3, r3, #4
    4fae:	9a03      	ldr	r2, [sp, #12]
    4fb0:	4313      	orrs	r3, r2
    4fb2:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4fb4:	9b01      	ldr	r3, [sp, #4]
    4fb6:	9a02      	ldr	r2, [sp, #8]
    4fb8:	320d      	adds	r2, #13
    4fba:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4fbe:	2b29      	cmp	r3, #41	; 0x29
    4fc0:	d10b      	bne.n	4fda <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4fc2:	9a01      	ldr	r2, [sp, #4]
    4fc4:	9b02      	ldr	r3, [sp, #8]
    4fc6:	330d      	adds	r3, #13
    4fc8:	00db      	lsls	r3, r3, #3
    4fca:	4413      	add	r3, r2
    4fcc:	685b      	ldr	r3, [r3, #4]
    4fce:	4a23      	ldr	r2, [pc, #140]	; (505c <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4fd0:	5cd3      	ldrb	r3, [r2, r3]
    4fd2:	009b      	lsls	r3, r3, #2
    4fd4:	9a03      	ldr	r2, [sp, #12]
    4fd6:	4313      	orrs	r3, r2
    4fd8:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4fda:	9b02      	ldr	r3, [sp, #8]
    4fdc:	3301      	adds	r3, #1
    4fde:	9302      	str	r3, [sp, #8]
    4fe0:	9b01      	ldr	r3, [sp, #4]
    4fe2:	7adb      	ldrb	r3, [r3, #11]
    4fe4:	461a      	mov	r2, r3
    4fe6:	9b02      	ldr	r3, [sp, #8]
    4fe8:	4293      	cmp	r3, r2
    4fea:	d3d0      	bcc.n	4f8e <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4fec:	2300      	movs	r3, #0
    4fee:	9302      	str	r3, [sp, #8]
    4ff0:	e026      	b.n	5040 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    4ff2:	9a01      	ldr	r2, [sp, #4]
    4ff4:	9b02      	ldr	r3, [sp, #8]
    4ff6:	334e      	adds	r3, #78	; 0x4e
    4ff8:	00db      	lsls	r3, r3, #3
    4ffa:	4413      	add	r3, r2
    4ffc:	685b      	ldr	r3, [r3, #4]
    4ffe:	2b12      	cmp	r3, #18
    5000:	d109      	bne.n	5016 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    5002:	9a01      	ldr	r2, [sp, #4]
    5004:	9b02      	ldr	r3, [sp, #8]
    5006:	334e      	adds	r3, #78	; 0x4e
    5008:	00db      	lsls	r3, r3, #3
    500a:	4413      	add	r3, r2
    500c:	891b      	ldrh	r3, [r3, #8]
    500e:	005b      	lsls	r3, r3, #1
    5010:	9a03      	ldr	r2, [sp, #12]
    5012:	4313      	orrs	r3, r2
    5014:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    5016:	9a01      	ldr	r2, [sp, #4]
    5018:	9b02      	ldr	r3, [sp, #8]
    501a:	334e      	adds	r3, #78	; 0x4e
    501c:	00db      	lsls	r3, r3, #3
    501e:	4413      	add	r3, r2
    5020:	685b      	ldr	r3, [r3, #4]
    5022:	2b13      	cmp	r3, #19
    5024:	d109      	bne.n	503a <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    5026:	9a01      	ldr	r2, [sp, #4]
    5028:	9b02      	ldr	r3, [sp, #8]
    502a:	334e      	adds	r3, #78	; 0x4e
    502c:	00db      	lsls	r3, r3, #3
    502e:	4413      	add	r3, r2
    5030:	891b      	ldrh	r3, [r3, #8]
    5032:	461a      	mov	r2, r3
    5034:	9b03      	ldr	r3, [sp, #12]
    5036:	4313      	orrs	r3, r2
    5038:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    503a:	9b02      	ldr	r3, [sp, #8]
    503c:	3301      	adds	r3, #1
    503e:	9302      	str	r3, [sp, #8]
    5040:	9b01      	ldr	r3, [sp, #4]
    5042:	7c1b      	ldrb	r3, [r3, #16]
    5044:	461a      	mov	r2, r3
    5046:	9b02      	ldr	r3, [sp, #8]
    5048:	4293      	cmp	r3, r2
    504a:	d3d2      	bcc.n	4ff2 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    504c:	4a04      	ldr	r2, [pc, #16]	; (5060 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    504e:	9b03      	ldr	r3, [sp, #12]
    5050:	6113      	str	r3, [r2, #16]
}
    5052:	bf00      	nop
    5054:	b004      	add	sp, #16
    5056:	4770      	bx	lr
    5058:	00010088 	.word	0x00010088
    505c:	00010140 	.word	0x00010140
    5060:	40048000 	.word	0x40048000

00005064 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    5064:	b500      	push	{lr}
    5066:	b089      	sub	sp, #36	; 0x24
    5068:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    506a:	2300      	movs	r3, #0
    506c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    5070:	4a21      	ldr	r2, [pc, #132]	; (50f8 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    5072:	9b01      	ldr	r3, [sp, #4]
    5074:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    5076:	4b21      	ldr	r3, [pc, #132]	; (50fc <Clock_Ip_SpecificPlatformInitClock+0x98>)
    5078:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    507c:	f003 0301 	and.w	r3, r3, #1
    5080:	2b00      	cmp	r3, #0
    5082:	d12e      	bne.n	50e2 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    5084:	4b1e      	ldr	r3, [pc, #120]	; (5100 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    5086:	2200      	movs	r2, #0
    5088:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    508a:	f7ff ff69 	bl	4f60 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    508e:	aa03      	add	r2, sp, #12
    5090:	a904      	add	r1, sp, #16
    5092:	a805      	add	r0, sp, #20
    5094:	f24c 3350 	movw	r3, #50000	; 0xc350
    5098:	f7fe f8ae 	bl	31f8 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    509c:	4b17      	ldr	r3, [pc, #92]	; (50fc <Clock_Ip_SpecificPlatformInitClock+0x98>)
    509e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    50a2:	0e1b      	lsrs	r3, r3, #24
    50a4:	f003 0301 	and.w	r3, r3, #1
    50a8:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    50aa:	9a03      	ldr	r2, [sp, #12]
    50ac:	a904      	add	r1, sp, #16
    50ae:	ab05      	add	r3, sp, #20
    50b0:	4618      	mov	r0, r3
    50b2:	f7fe f8bb 	bl	322c <Clock_Ip_TimeoutExpired>
    50b6:	4603      	mov	r3, r0
    50b8:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    50bc:	9b06      	ldr	r3, [sp, #24]
    50be:	2b00      	cmp	r3, #0
    50c0:	d106      	bne.n	50d0 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    50c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    50c6:	f083 0301 	eor.w	r3, r3, #1
    50ca:	b2db      	uxtb	r3, r3
    50cc:	2b00      	cmp	r3, #0
    50ce:	d1e5      	bne.n	509c <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    50d0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    50d4:	2b00      	cmp	r3, #0
    50d6:	d007      	beq.n	50e8 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    50d8:	2105      	movs	r1, #5
    50da:	2001      	movs	r0, #1
    50dc:	f7fe f87c 	bl	31d8 <Clock_Ip_ReportClockErrors>
    50e0:	e002      	b.n	50e8 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    50e2:	4b07      	ldr	r3, [pc, #28]	; (5100 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    50e4:	2201      	movs	r2, #1
    50e6:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    50e8:	9801      	ldr	r0, [sp, #4]
    50ea:	f7ff ff49 	bl	4f80 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    50ee:	bf00      	nop
    50f0:	b009      	add	sp, #36	; 0x24
    50f2:	f85d fb04 	ldr.w	pc, [sp], #4
    50f6:	bf00      	nop
    50f8:	1fff8bbc 	.word	0x1fff8bbc
    50fc:	40064000 	.word	0x40064000
    5100:	1fff8b20 	.word	0x1fff8b20

00005104 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    5104:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    5106:	2300      	movs	r3, #0
    5108:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    510a:	4b29      	ldr	r3, [pc, #164]	; (51b0 <getFircConfig+0xac>)
    510c:	681b      	ldr	r3, [r3, #0]
    510e:	2b00      	cmp	r3, #0
    5110:	d024      	beq.n	515c <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5112:	2300      	movs	r3, #0
    5114:	9301      	str	r3, [sp, #4]
    5116:	e01a      	b.n	514e <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    5118:	4b25      	ldr	r3, [pc, #148]	; (51b0 <getFircConfig+0xac>)
    511a:	6819      	ldr	r1, [r3, #0]
    511c:	9a01      	ldr	r2, [sp, #4]
    511e:	4613      	mov	r3, r2
    5120:	005b      	lsls	r3, r3, #1
    5122:	4413      	add	r3, r2
    5124:	009b      	lsls	r3, r3, #2
    5126:	440b      	add	r3, r1
    5128:	3314      	adds	r3, #20
    512a:	681b      	ldr	r3, [r3, #0]
    512c:	2b05      	cmp	r3, #5
    512e:	d10b      	bne.n	5148 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    5130:	4b1f      	ldr	r3, [pc, #124]	; (51b0 <getFircConfig+0xac>)
    5132:	6819      	ldr	r1, [r3, #0]
    5134:	9a01      	ldr	r2, [sp, #4]
    5136:	4613      	mov	r3, r2
    5138:	005b      	lsls	r3, r3, #1
    513a:	4413      	add	r3, r2
    513c:	009b      	lsls	r3, r3, #2
    513e:	3310      	adds	r3, #16
    5140:	440b      	add	r3, r1
    5142:	3304      	adds	r3, #4
    5144:	9300      	str	r3, [sp, #0]
                break;
    5146:	e009      	b.n	515c <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5148:	9b01      	ldr	r3, [sp, #4]
    514a:	3301      	adds	r3, #1
    514c:	9301      	str	r3, [sp, #4]
    514e:	4b18      	ldr	r3, [pc, #96]	; (51b0 <getFircConfig+0xac>)
    5150:	681b      	ldr	r3, [r3, #0]
    5152:	7a1b      	ldrb	r3, [r3, #8]
    5154:	461a      	mov	r2, r3
    5156:	9b01      	ldr	r3, [sp, #4]
    5158:	4293      	cmp	r3, r2
    515a:	d3dd      	bcc.n	5118 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    515c:	9b00      	ldr	r3, [sp, #0]
    515e:	2b00      	cmp	r3, #0
    5160:	d121      	bne.n	51a6 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    5162:	4b14      	ldr	r3, [pc, #80]	; (51b4 <getFircConfig+0xb0>)
    5164:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    5166:	4b13      	ldr	r3, [pc, #76]	; (51b4 <getFircConfig+0xb0>)
    5168:	2205      	movs	r2, #5
    516a:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    516c:	4b12      	ldr	r3, [pc, #72]	; (51b8 <getFircConfig+0xb4>)
    516e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5172:	b29b      	uxth	r3, r3
    5174:	f003 0301 	and.w	r3, r3, #1
    5178:	b29a      	uxth	r2, r3
    517a:	4b0e      	ldr	r3, [pc, #56]	; (51b4 <getFircConfig+0xb0>)
    517c:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    517e:	4b0e      	ldr	r3, [pc, #56]	; (51b8 <getFircConfig+0xb4>)
    5180:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    5184:	b2db      	uxtb	r3, r3
    5186:	f003 0303 	and.w	r3, r3, #3
    518a:	b2da      	uxtb	r2, r3
    518c:	4b09      	ldr	r3, [pc, #36]	; (51b4 <getFircConfig+0xb0>)
    518e:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    5190:	4b09      	ldr	r3, [pc, #36]	; (51b8 <getFircConfig+0xb4>)
    5192:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5196:	b2db      	uxtb	r3, r3
    5198:	10db      	asrs	r3, r3, #3
    519a:	b2db      	uxtb	r3, r3
    519c:	f003 0301 	and.w	r3, r3, #1
    51a0:	b2da      	uxtb	r2, r3
    51a2:	4b04      	ldr	r3, [pc, #16]	; (51b4 <getFircConfig+0xb0>)
    51a4:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    51a6:	9b00      	ldr	r3, [sp, #0]
}
    51a8:	4618      	mov	r0, r3
    51aa:	b002      	add	sp, #8
    51ac:	4770      	bx	lr
    51ae:	bf00      	nop
    51b0:	1fff8bbc 	.word	0x1fff8bbc
    51b4:	1fff8c28 	.word	0x1fff8c28
    51b8:	40064000 	.word	0x40064000

000051bc <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    51bc:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    51be:	2300      	movs	r3, #0
    51c0:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    51c2:	4b20      	ldr	r3, [pc, #128]	; (5244 <getSoscConfig+0x88>)
    51c4:	681b      	ldr	r3, [r3, #0]
    51c6:	2b00      	cmp	r3, #0
    51c8:	d024      	beq.n	5214 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    51ca:	2300      	movs	r3, #0
    51cc:	9301      	str	r3, [sp, #4]
    51ce:	e01a      	b.n	5206 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    51d0:	4b1c      	ldr	r3, [pc, #112]	; (5244 <getSoscConfig+0x88>)
    51d2:	6819      	ldr	r1, [r3, #0]
    51d4:	9a01      	ldr	r2, [sp, #4]
    51d6:	4613      	mov	r3, r2
    51d8:	009b      	lsls	r3, r3, #2
    51da:	4413      	add	r3, r2
    51dc:	009b      	lsls	r3, r3, #2
    51de:	440b      	add	r3, r1
    51e0:	332c      	adds	r3, #44	; 0x2c
    51e2:	681b      	ldr	r3, [r3, #0]
    51e4:	2b08      	cmp	r3, #8
    51e6:	d10b      	bne.n	5200 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    51e8:	4b16      	ldr	r3, [pc, #88]	; (5244 <getSoscConfig+0x88>)
    51ea:	6819      	ldr	r1, [r3, #0]
    51ec:	9a01      	ldr	r2, [sp, #4]
    51ee:	4613      	mov	r3, r2
    51f0:	009b      	lsls	r3, r3, #2
    51f2:	4413      	add	r3, r2
    51f4:	009b      	lsls	r3, r3, #2
    51f6:	3328      	adds	r3, #40	; 0x28
    51f8:	440b      	add	r3, r1
    51fa:	3304      	adds	r3, #4
    51fc:	9300      	str	r3, [sp, #0]
                break;
    51fe:	e009      	b.n	5214 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    5200:	9b01      	ldr	r3, [sp, #4]
    5202:	3301      	adds	r3, #1
    5204:	9301      	str	r3, [sp, #4]
    5206:	4b0f      	ldr	r3, [pc, #60]	; (5244 <getSoscConfig+0x88>)
    5208:	681b      	ldr	r3, [r3, #0]
    520a:	7a5b      	ldrb	r3, [r3, #9]
    520c:	461a      	mov	r2, r3
    520e:	9b01      	ldr	r3, [sp, #4]
    5210:	4293      	cmp	r3, r2
    5212:	d3dd      	bcc.n	51d0 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5214:	9b00      	ldr	r3, [sp, #0]
    5216:	2b00      	cmp	r3, #0
    5218:	d110      	bne.n	523c <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    521a:	4b0b      	ldr	r3, [pc, #44]	; (5248 <getSoscConfig+0x8c>)
    521c:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    521e:	4b0a      	ldr	r3, [pc, #40]	; (5248 <getSoscConfig+0x8c>)
    5220:	2208      	movs	r2, #8
    5222:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    5224:	4b09      	ldr	r3, [pc, #36]	; (524c <getSoscConfig+0x90>)
    5226:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    522a:	b29b      	uxth	r3, r3
    522c:	f003 0301 	and.w	r3, r3, #1
    5230:	b29a      	uxth	r2, r3
    5232:	4b05      	ldr	r3, [pc, #20]	; (5248 <getSoscConfig+0x8c>)
    5234:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    5236:	4b04      	ldr	r3, [pc, #16]	; (5248 <getSoscConfig+0x8c>)
    5238:	4a05      	ldr	r2, [pc, #20]	; (5250 <getSoscConfig+0x94>)
    523a:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    523c:	9b00      	ldr	r3, [sp, #0]
}
    523e:	4618      	mov	r0, r3
    5240:	b002      	add	sp, #8
    5242:	4770      	bx	lr
    5244:	1fff8bbc 	.word	0x1fff8bbc
    5248:	1fff8c34 	.word	0x1fff8c34
    524c:	40064000 	.word	0x40064000
    5250:	02625a00 	.word	0x02625a00

00005254 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    5254:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    5256:	2300      	movs	r3, #0
    5258:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    525a:	4b28      	ldr	r3, [pc, #160]	; (52fc <getSpllConfig+0xa8>)
    525c:	681b      	ldr	r3, [r3, #0]
    525e:	2b00      	cmp	r3, #0
    5260:	d023      	beq.n	52aa <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    5262:	2300      	movs	r3, #0
    5264:	9301      	str	r3, [sp, #4]
    5266:	e019      	b.n	529c <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    5268:	4b24      	ldr	r3, [pc, #144]	; (52fc <getSpllConfig+0xa8>)
    526a:	6819      	ldr	r1, [r3, #0]
    526c:	9a01      	ldr	r2, [sp, #4]
    526e:	4613      	mov	r3, r2
    5270:	009b      	lsls	r3, r3, #2
    5272:	4413      	add	r3, r2
    5274:	00db      	lsls	r3, r3, #3
    5276:	440b      	add	r3, r1
    5278:	3340      	adds	r3, #64	; 0x40
    527a:	681b      	ldr	r3, [r3, #0]
    527c:	2b09      	cmp	r3, #9
    527e:	d10a      	bne.n	5296 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    5280:	4b1e      	ldr	r3, [pc, #120]	; (52fc <getSpllConfig+0xa8>)
    5282:	6819      	ldr	r1, [r3, #0]
    5284:	9a01      	ldr	r2, [sp, #4]
    5286:	4613      	mov	r3, r2
    5288:	009b      	lsls	r3, r3, #2
    528a:	4413      	add	r3, r2
    528c:	00db      	lsls	r3, r3, #3
    528e:	3340      	adds	r3, #64	; 0x40
    5290:	440b      	add	r3, r1
    5292:	9300      	str	r3, [sp, #0]
                break;
    5294:	e009      	b.n	52aa <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    5296:	9b01      	ldr	r3, [sp, #4]
    5298:	3301      	adds	r3, #1
    529a:	9301      	str	r3, [sp, #4]
    529c:	4b17      	ldr	r3, [pc, #92]	; (52fc <getSpllConfig+0xa8>)
    529e:	681b      	ldr	r3, [r3, #0]
    52a0:	7a9b      	ldrb	r3, [r3, #10]
    52a2:	461a      	mov	r2, r3
    52a4:	9b01      	ldr	r3, [sp, #4]
    52a6:	4293      	cmp	r3, r2
    52a8:	d3de      	bcc.n	5268 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    52aa:	9b00      	ldr	r3, [sp, #0]
    52ac:	2b00      	cmp	r3, #0
    52ae:	d121      	bne.n	52f4 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    52b0:	4b13      	ldr	r3, [pc, #76]	; (5300 <getSpllConfig+0xac>)
    52b2:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    52b4:	4b12      	ldr	r3, [pc, #72]	; (5300 <getSpllConfig+0xac>)
    52b6:	2209      	movs	r2, #9
    52b8:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    52ba:	4b12      	ldr	r3, [pc, #72]	; (5304 <getSpllConfig+0xb0>)
    52bc:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    52c0:	b29b      	uxth	r3, r3
    52c2:	f003 0301 	and.w	r3, r3, #1
    52c6:	b29a      	uxth	r2, r3
    52c8:	4b0d      	ldr	r3, [pc, #52]	; (5300 <getSpllConfig+0xac>)
    52ca:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    52cc:	4b0d      	ldr	r3, [pc, #52]	; (5304 <getSpllConfig+0xb0>)
    52ce:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    52d2:	0a1b      	lsrs	r3, r3, #8
    52d4:	b2db      	uxtb	r3, r3
    52d6:	f003 0307 	and.w	r3, r3, #7
    52da:	b2da      	uxtb	r2, r3
    52dc:	4b08      	ldr	r3, [pc, #32]	; (5300 <getSpllConfig+0xac>)
    52de:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    52e0:	4b08      	ldr	r3, [pc, #32]	; (5304 <getSpllConfig+0xb0>)
    52e2:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    52e6:	0c1b      	lsrs	r3, r3, #16
    52e8:	b2db      	uxtb	r3, r3
    52ea:	f003 031f 	and.w	r3, r3, #31
    52ee:	b2da      	uxtb	r2, r3
    52f0:	4b03      	ldr	r3, [pc, #12]	; (5300 <getSpllConfig+0xac>)
    52f2:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    52f4:	9b00      	ldr	r3, [sp, #0]
}
    52f6:	4618      	mov	r0, r3
    52f8:	b002      	add	sp, #8
    52fa:	4770      	bx	lr
    52fc:	1fff8bbc 	.word	0x1fff8bbc
    5300:	1fff8c48 	.word	0x1fff8c48
    5304:	40064000 	.word	0x40064000

00005308 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    5308:	b086      	sub	sp, #24
    530a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    530c:	2300      	movs	r3, #0
    530e:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    5310:	9b01      	ldr	r3, [sp, #4]
    5312:	2b1b      	cmp	r3, #27
    5314:	d00f      	beq.n	5336 <getSelectorConfig+0x2e>
    5316:	9b01      	ldr	r3, [sp, #4]
    5318:	2b1b      	cmp	r3, #27
    531a:	d80f      	bhi.n	533c <getSelectorConfig+0x34>
    531c:	9b01      	ldr	r3, [sp, #4]
    531e:	2b19      	cmp	r3, #25
    5320:	d003      	beq.n	532a <getSelectorConfig+0x22>
    5322:	9b01      	ldr	r3, [sp, #4]
    5324:	2b1a      	cmp	r3, #26
    5326:	d003      	beq.n	5330 <getSelectorConfig+0x28>
    5328:	e008      	b.n	533c <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    532a:	2300      	movs	r3, #0
    532c:	9304      	str	r3, [sp, #16]
            break;
    532e:	e008      	b.n	5342 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    5330:	2301      	movs	r3, #1
    5332:	9304      	str	r3, [sp, #16]
            break;
    5334:	e005      	b.n	5342 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    5336:	2302      	movs	r3, #2
    5338:	9304      	str	r3, [sp, #16]
            break;
    533a:	e002      	b.n	5342 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    533c:	2300      	movs	r3, #0
    533e:	9304      	str	r3, [sp, #16]
            break;
    5340:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5342:	4b36      	ldr	r3, [pc, #216]	; (541c <getSelectorConfig+0x114>)
    5344:	681b      	ldr	r3, [r3, #0]
    5346:	2b00      	cmp	r3, #0
    5348:	d01d      	beq.n	5386 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    534a:	2300      	movs	r3, #0
    534c:	9303      	str	r3, [sp, #12]
    534e:	e013      	b.n	5378 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    5350:	4b32      	ldr	r3, [pc, #200]	; (541c <getSelectorConfig+0x114>)
    5352:	681b      	ldr	r3, [r3, #0]
    5354:	9a03      	ldr	r2, [sp, #12]
    5356:	320d      	adds	r2, #13
    5358:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    535c:	9a01      	ldr	r2, [sp, #4]
    535e:	429a      	cmp	r2, r3
    5360:	d107      	bne.n	5372 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    5362:	4b2e      	ldr	r3, [pc, #184]	; (541c <getSelectorConfig+0x114>)
    5364:	681a      	ldr	r2, [r3, #0]
    5366:	9b03      	ldr	r3, [sp, #12]
    5368:	330d      	adds	r3, #13
    536a:	00db      	lsls	r3, r3, #3
    536c:	4413      	add	r3, r2
    536e:	9305      	str	r3, [sp, #20]
                break;
    5370:	e009      	b.n	5386 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    5372:	9b03      	ldr	r3, [sp, #12]
    5374:	3301      	adds	r3, #1
    5376:	9303      	str	r3, [sp, #12]
    5378:	4b28      	ldr	r3, [pc, #160]	; (541c <getSelectorConfig+0x114>)
    537a:	681b      	ldr	r3, [r3, #0]
    537c:	7adb      	ldrb	r3, [r3, #11]
    537e:	461a      	mov	r2, r3
    5380:	9b03      	ldr	r3, [sp, #12]
    5382:	4293      	cmp	r3, r2
    5384:	d3e4      	bcc.n	5350 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5386:	9b05      	ldr	r3, [sp, #20]
    5388:	2b00      	cmp	r3, #0
    538a:	d140      	bne.n	540e <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    538c:	9b04      	ldr	r3, [sp, #16]
    538e:	00db      	lsls	r3, r3, #3
    5390:	4a23      	ldr	r2, [pc, #140]	; (5420 <getSelectorConfig+0x118>)
    5392:	4413      	add	r3, r2
    5394:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    5396:	4922      	ldr	r1, [pc, #136]	; (5420 <getSelectorConfig+0x118>)
    5398:	9b04      	ldr	r3, [sp, #16]
    539a:	9a01      	ldr	r2, [sp, #4]
    539c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    53a0:	9b01      	ldr	r3, [sp, #4]
    53a2:	2b1b      	cmp	r3, #27
    53a4:	d025      	beq.n	53f2 <getSelectorConfig+0xea>
    53a6:	9b01      	ldr	r3, [sp, #4]
    53a8:	2b1b      	cmp	r3, #27
    53aa:	d832      	bhi.n	5412 <getSelectorConfig+0x10a>
    53ac:	9b01      	ldr	r3, [sp, #4]
    53ae:	2b19      	cmp	r3, #25
    53b0:	d003      	beq.n	53ba <getSelectorConfig+0xb2>
    53b2:	9b01      	ldr	r3, [sp, #4]
    53b4:	2b1a      	cmp	r3, #26
    53b6:	d00e      	beq.n	53d6 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    53b8:	e02b      	b.n	5412 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    53ba:	4b1a      	ldr	r3, [pc, #104]	; (5424 <getSelectorConfig+0x11c>)
    53bc:	695b      	ldr	r3, [r3, #20]
    53be:	0e1b      	lsrs	r3, r3, #24
    53c0:	f003 030f 	and.w	r3, r3, #15
    53c4:	4a18      	ldr	r2, [pc, #96]	; (5428 <getSelectorConfig+0x120>)
    53c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    53ca:	4915      	ldr	r1, [pc, #84]	; (5420 <getSelectorConfig+0x118>)
    53cc:	9b04      	ldr	r3, [sp, #16]
    53ce:	00db      	lsls	r3, r3, #3
    53d0:	440b      	add	r3, r1
    53d2:	605a      	str	r2, [r3, #4]
                break;
    53d4:	e01e      	b.n	5414 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    53d6:	4b13      	ldr	r3, [pc, #76]	; (5424 <getSelectorConfig+0x11c>)
    53d8:	699b      	ldr	r3, [r3, #24]
    53da:	0e1b      	lsrs	r3, r3, #24
    53dc:	f003 030f 	and.w	r3, r3, #15
    53e0:	4a11      	ldr	r2, [pc, #68]	; (5428 <getSelectorConfig+0x120>)
    53e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    53e6:	490e      	ldr	r1, [pc, #56]	; (5420 <getSelectorConfig+0x118>)
    53e8:	9b04      	ldr	r3, [sp, #16]
    53ea:	00db      	lsls	r3, r3, #3
    53ec:	440b      	add	r3, r1
    53ee:	605a      	str	r2, [r3, #4]
                break;
    53f0:	e010      	b.n	5414 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    53f2:	4b0c      	ldr	r3, [pc, #48]	; (5424 <getSelectorConfig+0x11c>)
    53f4:	69db      	ldr	r3, [r3, #28]
    53f6:	0e1b      	lsrs	r3, r3, #24
    53f8:	f003 030f 	and.w	r3, r3, #15
    53fc:	4a0a      	ldr	r2, [pc, #40]	; (5428 <getSelectorConfig+0x120>)
    53fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5402:	4907      	ldr	r1, [pc, #28]	; (5420 <getSelectorConfig+0x118>)
    5404:	9b04      	ldr	r3, [sp, #16]
    5406:	00db      	lsls	r3, r3, #3
    5408:	440b      	add	r3, r1
    540a:	605a      	str	r2, [r3, #4]
                break;
    540c:	e002      	b.n	5414 <getSelectorConfig+0x10c>
        }
    }
    540e:	bf00      	nop
    5410:	e000      	b.n	5414 <getSelectorConfig+0x10c>
                break;
    5412:	bf00      	nop

    return ReturnValue;
    5414:	9b05      	ldr	r3, [sp, #20]
}
    5416:	4618      	mov	r0, r3
    5418:	b006      	add	sp, #24
    541a:	4770      	bx	lr
    541c:	1fff8bbc 	.word	0x1fff8bbc
    5420:	1fff8c70 	.word	0x1fff8c70
    5424:	40064000 	.word	0x40064000
    5428:	00010408 	.word	0x00010408

0000542c <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    542c:	b086      	sub	sp, #24
    542e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5430:	2300      	movs	r3, #0
    5432:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5434:	2300      	movs	r3, #0
    5436:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5438:	9b01      	ldr	r3, [sp, #4]
    543a:	2b1f      	cmp	r3, #31
    543c:	d00f      	beq.n	545e <getCoreDividerConfig+0x32>
    543e:	9b01      	ldr	r3, [sp, #4]
    5440:	2b1f      	cmp	r3, #31
    5442:	d80f      	bhi.n	5464 <getCoreDividerConfig+0x38>
    5444:	9b01      	ldr	r3, [sp, #4]
    5446:	2b1d      	cmp	r3, #29
    5448:	d003      	beq.n	5452 <getCoreDividerConfig+0x26>
    544a:	9b01      	ldr	r3, [sp, #4]
    544c:	2b1e      	cmp	r3, #30
    544e:	d003      	beq.n	5458 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5450:	e008      	b.n	5464 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5452:	2300      	movs	r3, #0
    5454:	9304      	str	r3, [sp, #16]
            break;
    5456:	e006      	b.n	5466 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5458:	2301      	movs	r3, #1
    545a:	9304      	str	r3, [sp, #16]
            break;
    545c:	e003      	b.n	5466 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    545e:	2302      	movs	r3, #2
    5460:	9304      	str	r3, [sp, #16]
            break;
    5462:	e000      	b.n	5466 <getCoreDividerConfig+0x3a>
                break;
    5464:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5466:	4b41      	ldr	r3, [pc, #260]	; (556c <getCoreDividerConfig+0x140>)
    5468:	681b      	ldr	r3, [r3, #0]
    546a:	2b00      	cmp	r3, #0
    546c:	d026      	beq.n	54bc <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    546e:	2300      	movs	r3, #0
    5470:	9303      	str	r3, [sp, #12]
    5472:	e01c      	b.n	54ae <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5474:	4b3d      	ldr	r3, [pc, #244]	; (556c <getCoreDividerConfig+0x140>)
    5476:	6819      	ldr	r1, [r3, #0]
    5478:	9a03      	ldr	r2, [sp, #12]
    547a:	4613      	mov	r3, r2
    547c:	005b      	lsls	r3, r3, #1
    547e:	4413      	add	r3, r2
    5480:	009b      	lsls	r3, r3, #2
    5482:	440b      	add	r3, r1
    5484:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5488:	681b      	ldr	r3, [r3, #0]
    548a:	9a01      	ldr	r2, [sp, #4]
    548c:	429a      	cmp	r2, r3
    548e:	d10b      	bne.n	54a8 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5490:	4b36      	ldr	r3, [pc, #216]	; (556c <getCoreDividerConfig+0x140>)
    5492:	6819      	ldr	r1, [r3, #0]
    5494:	9a03      	ldr	r2, [sp, #12]
    5496:	4613      	mov	r3, r2
    5498:	005b      	lsls	r3, r3, #1
    549a:	4413      	add	r3, r2
    549c:	009b      	lsls	r3, r3, #2
    549e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    54a2:	440b      	add	r3, r1
    54a4:	9305      	str	r3, [sp, #20]
                break;
    54a6:	e009      	b.n	54bc <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    54a8:	9b03      	ldr	r3, [sp, #12]
    54aa:	3301      	adds	r3, #1
    54ac:	9303      	str	r3, [sp, #12]
    54ae:	4b2f      	ldr	r3, [pc, #188]	; (556c <getCoreDividerConfig+0x140>)
    54b0:	681b      	ldr	r3, [r3, #0]
    54b2:	7b1b      	ldrb	r3, [r3, #12]
    54b4:	461a      	mov	r2, r3
    54b6:	9b03      	ldr	r3, [sp, #12]
    54b8:	4293      	cmp	r3, r2
    54ba:	d3db      	bcc.n	5474 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    54bc:	9b05      	ldr	r3, [sp, #20]
    54be:	2b00      	cmp	r3, #0
    54c0:	d14d      	bne.n	555e <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    54c2:	9a04      	ldr	r2, [sp, #16]
    54c4:	4613      	mov	r3, r2
    54c6:	005b      	lsls	r3, r3, #1
    54c8:	4413      	add	r3, r2
    54ca:	009b      	lsls	r3, r3, #2
    54cc:	4a28      	ldr	r2, [pc, #160]	; (5570 <getCoreDividerConfig+0x144>)
    54ce:	4413      	add	r3, r2
    54d0:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    54d2:	4927      	ldr	r1, [pc, #156]	; (5570 <getCoreDividerConfig+0x144>)
    54d4:	9a04      	ldr	r2, [sp, #16]
    54d6:	4613      	mov	r3, r2
    54d8:	005b      	lsls	r3, r3, #1
    54da:	4413      	add	r3, r2
    54dc:	009b      	lsls	r3, r3, #2
    54de:	440b      	add	r3, r1
    54e0:	9a01      	ldr	r2, [sp, #4]
    54e2:	601a      	str	r2, [r3, #0]
        switch(Name)
    54e4:	9b01      	ldr	r3, [sp, #4]
    54e6:	2b1f      	cmp	r3, #31
    54e8:	d029      	beq.n	553e <getCoreDividerConfig+0x112>
    54ea:	9b01      	ldr	r3, [sp, #4]
    54ec:	2b1f      	cmp	r3, #31
    54ee:	d838      	bhi.n	5562 <getCoreDividerConfig+0x136>
    54f0:	9b01      	ldr	r3, [sp, #4]
    54f2:	2b1d      	cmp	r3, #29
    54f4:	d003      	beq.n	54fe <getCoreDividerConfig+0xd2>
    54f6:	9b01      	ldr	r3, [sp, #4]
    54f8:	2b1e      	cmp	r3, #30
    54fa:	d010      	beq.n	551e <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    54fc:	e031      	b.n	5562 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    54fe:	4b1d      	ldr	r3, [pc, #116]	; (5574 <getCoreDividerConfig+0x148>)
    5500:	695b      	ldr	r3, [r3, #20]
    5502:	0c1b      	lsrs	r3, r3, #16
    5504:	f003 030f 	and.w	r3, r3, #15
    5508:	1c59      	adds	r1, r3, #1
    550a:	4819      	ldr	r0, [pc, #100]	; (5570 <getCoreDividerConfig+0x144>)
    550c:	9a04      	ldr	r2, [sp, #16]
    550e:	4613      	mov	r3, r2
    5510:	005b      	lsls	r3, r3, #1
    5512:	4413      	add	r3, r2
    5514:	009b      	lsls	r3, r3, #2
    5516:	4403      	add	r3, r0
    5518:	3304      	adds	r3, #4
    551a:	6019      	str	r1, [r3, #0]
                break;
    551c:	e022      	b.n	5564 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    551e:	4b15      	ldr	r3, [pc, #84]	; (5574 <getCoreDividerConfig+0x148>)
    5520:	699b      	ldr	r3, [r3, #24]
    5522:	0c1b      	lsrs	r3, r3, #16
    5524:	f003 030f 	and.w	r3, r3, #15
    5528:	1c59      	adds	r1, r3, #1
    552a:	4811      	ldr	r0, [pc, #68]	; (5570 <getCoreDividerConfig+0x144>)
    552c:	9a04      	ldr	r2, [sp, #16]
    552e:	4613      	mov	r3, r2
    5530:	005b      	lsls	r3, r3, #1
    5532:	4413      	add	r3, r2
    5534:	009b      	lsls	r3, r3, #2
    5536:	4403      	add	r3, r0
    5538:	3304      	adds	r3, #4
    553a:	6019      	str	r1, [r3, #0]
                break;
    553c:	e012      	b.n	5564 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    553e:	4b0d      	ldr	r3, [pc, #52]	; (5574 <getCoreDividerConfig+0x148>)
    5540:	69db      	ldr	r3, [r3, #28]
    5542:	0c1b      	lsrs	r3, r3, #16
    5544:	f003 030f 	and.w	r3, r3, #15
    5548:	1c59      	adds	r1, r3, #1
    554a:	4809      	ldr	r0, [pc, #36]	; (5570 <getCoreDividerConfig+0x144>)
    554c:	9a04      	ldr	r2, [sp, #16]
    554e:	4613      	mov	r3, r2
    5550:	005b      	lsls	r3, r3, #1
    5552:	4413      	add	r3, r2
    5554:	009b      	lsls	r3, r3, #2
    5556:	4403      	add	r3, r0
    5558:	3304      	adds	r3, #4
    555a:	6019      	str	r1, [r3, #0]
                break;
    555c:	e002      	b.n	5564 <getCoreDividerConfig+0x138>
        }
    }
    555e:	bf00      	nop
    5560:	e000      	b.n	5564 <getCoreDividerConfig+0x138>
                break;
    5562:	bf00      	nop

    return ReturnValue;
    5564:	9b05      	ldr	r3, [sp, #20]
}
    5566:	4618      	mov	r0, r3
    5568:	b006      	add	sp, #24
    556a:	4770      	bx	lr
    556c:	1fff8bbc 	.word	0x1fff8bbc
    5570:	1fff8c88 	.word	0x1fff8c88
    5574:	40064000 	.word	0x40064000

00005578 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    5578:	b086      	sub	sp, #24
    557a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    557c:	2300      	movs	r3, #0
    557e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5580:	2300      	movs	r3, #0
    5582:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5584:	9b01      	ldr	r3, [sp, #4]
    5586:	2b23      	cmp	r3, #35	; 0x23
    5588:	d00f      	beq.n	55aa <getBusDividerConfig+0x32>
    558a:	9b01      	ldr	r3, [sp, #4]
    558c:	2b23      	cmp	r3, #35	; 0x23
    558e:	d80f      	bhi.n	55b0 <getBusDividerConfig+0x38>
    5590:	9b01      	ldr	r3, [sp, #4]
    5592:	2b21      	cmp	r3, #33	; 0x21
    5594:	d003      	beq.n	559e <getBusDividerConfig+0x26>
    5596:	9b01      	ldr	r3, [sp, #4]
    5598:	2b22      	cmp	r3, #34	; 0x22
    559a:	d003      	beq.n	55a4 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    559c:	e008      	b.n	55b0 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    559e:	2300      	movs	r3, #0
    55a0:	9304      	str	r3, [sp, #16]
            break;
    55a2:	e006      	b.n	55b2 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    55a4:	2301      	movs	r3, #1
    55a6:	9304      	str	r3, [sp, #16]
            break;
    55a8:	e003      	b.n	55b2 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    55aa:	2302      	movs	r3, #2
    55ac:	9304      	str	r3, [sp, #16]
            break;
    55ae:	e000      	b.n	55b2 <getBusDividerConfig+0x3a>
                break;
    55b0:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    55b2:	4b41      	ldr	r3, [pc, #260]	; (56b8 <getBusDividerConfig+0x140>)
    55b4:	681b      	ldr	r3, [r3, #0]
    55b6:	2b00      	cmp	r3, #0
    55b8:	d026      	beq.n	5608 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    55ba:	2300      	movs	r3, #0
    55bc:	9303      	str	r3, [sp, #12]
    55be:	e01c      	b.n	55fa <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    55c0:	4b3d      	ldr	r3, [pc, #244]	; (56b8 <getBusDividerConfig+0x140>)
    55c2:	6819      	ldr	r1, [r3, #0]
    55c4:	9a03      	ldr	r2, [sp, #12]
    55c6:	4613      	mov	r3, r2
    55c8:	005b      	lsls	r3, r3, #1
    55ca:	4413      	add	r3, r2
    55cc:	009b      	lsls	r3, r3, #2
    55ce:	440b      	add	r3, r1
    55d0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    55d4:	681b      	ldr	r3, [r3, #0]
    55d6:	9a01      	ldr	r2, [sp, #4]
    55d8:	429a      	cmp	r2, r3
    55da:	d10b      	bne.n	55f4 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    55dc:	4b36      	ldr	r3, [pc, #216]	; (56b8 <getBusDividerConfig+0x140>)
    55de:	6819      	ldr	r1, [r3, #0]
    55e0:	9a03      	ldr	r2, [sp, #12]
    55e2:	4613      	mov	r3, r2
    55e4:	005b      	lsls	r3, r3, #1
    55e6:	4413      	add	r3, r2
    55e8:	009b      	lsls	r3, r3, #2
    55ea:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    55ee:	440b      	add	r3, r1
    55f0:	9305      	str	r3, [sp, #20]
                break;
    55f2:	e009      	b.n	5608 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    55f4:	9b03      	ldr	r3, [sp, #12]
    55f6:	3301      	adds	r3, #1
    55f8:	9303      	str	r3, [sp, #12]
    55fa:	4b2f      	ldr	r3, [pc, #188]	; (56b8 <getBusDividerConfig+0x140>)
    55fc:	681b      	ldr	r3, [r3, #0]
    55fe:	7b1b      	ldrb	r3, [r3, #12]
    5600:	461a      	mov	r2, r3
    5602:	9b03      	ldr	r3, [sp, #12]
    5604:	4293      	cmp	r3, r2
    5606:	d3db      	bcc.n	55c0 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5608:	9b05      	ldr	r3, [sp, #20]
    560a:	2b00      	cmp	r3, #0
    560c:	d14d      	bne.n	56aa <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    560e:	9a04      	ldr	r2, [sp, #16]
    5610:	4613      	mov	r3, r2
    5612:	005b      	lsls	r3, r3, #1
    5614:	4413      	add	r3, r2
    5616:	009b      	lsls	r3, r3, #2
    5618:	4a28      	ldr	r2, [pc, #160]	; (56bc <getBusDividerConfig+0x144>)
    561a:	4413      	add	r3, r2
    561c:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    561e:	4927      	ldr	r1, [pc, #156]	; (56bc <getBusDividerConfig+0x144>)
    5620:	9a04      	ldr	r2, [sp, #16]
    5622:	4613      	mov	r3, r2
    5624:	005b      	lsls	r3, r3, #1
    5626:	4413      	add	r3, r2
    5628:	009b      	lsls	r3, r3, #2
    562a:	440b      	add	r3, r1
    562c:	9a01      	ldr	r2, [sp, #4]
    562e:	601a      	str	r2, [r3, #0]
        switch(Name)
    5630:	9b01      	ldr	r3, [sp, #4]
    5632:	2b23      	cmp	r3, #35	; 0x23
    5634:	d029      	beq.n	568a <getBusDividerConfig+0x112>
    5636:	9b01      	ldr	r3, [sp, #4]
    5638:	2b23      	cmp	r3, #35	; 0x23
    563a:	d838      	bhi.n	56ae <getBusDividerConfig+0x136>
    563c:	9b01      	ldr	r3, [sp, #4]
    563e:	2b21      	cmp	r3, #33	; 0x21
    5640:	d003      	beq.n	564a <getBusDividerConfig+0xd2>
    5642:	9b01      	ldr	r3, [sp, #4]
    5644:	2b22      	cmp	r3, #34	; 0x22
    5646:	d010      	beq.n	566a <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5648:	e031      	b.n	56ae <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    564a:	4b1d      	ldr	r3, [pc, #116]	; (56c0 <getBusDividerConfig+0x148>)
    564c:	695b      	ldr	r3, [r3, #20]
    564e:	091b      	lsrs	r3, r3, #4
    5650:	f003 030f 	and.w	r3, r3, #15
    5654:	1c59      	adds	r1, r3, #1
    5656:	4819      	ldr	r0, [pc, #100]	; (56bc <getBusDividerConfig+0x144>)
    5658:	9a04      	ldr	r2, [sp, #16]
    565a:	4613      	mov	r3, r2
    565c:	005b      	lsls	r3, r3, #1
    565e:	4413      	add	r3, r2
    5660:	009b      	lsls	r3, r3, #2
    5662:	4403      	add	r3, r0
    5664:	3304      	adds	r3, #4
    5666:	6019      	str	r1, [r3, #0]
                break;
    5668:	e022      	b.n	56b0 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    566a:	4b15      	ldr	r3, [pc, #84]	; (56c0 <getBusDividerConfig+0x148>)
    566c:	699b      	ldr	r3, [r3, #24]
    566e:	091b      	lsrs	r3, r3, #4
    5670:	f003 030f 	and.w	r3, r3, #15
    5674:	1c59      	adds	r1, r3, #1
    5676:	4811      	ldr	r0, [pc, #68]	; (56bc <getBusDividerConfig+0x144>)
    5678:	9a04      	ldr	r2, [sp, #16]
    567a:	4613      	mov	r3, r2
    567c:	005b      	lsls	r3, r3, #1
    567e:	4413      	add	r3, r2
    5680:	009b      	lsls	r3, r3, #2
    5682:	4403      	add	r3, r0
    5684:	3304      	adds	r3, #4
    5686:	6019      	str	r1, [r3, #0]
                break;
    5688:	e012      	b.n	56b0 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    568a:	4b0d      	ldr	r3, [pc, #52]	; (56c0 <getBusDividerConfig+0x148>)
    568c:	69db      	ldr	r3, [r3, #28]
    568e:	091b      	lsrs	r3, r3, #4
    5690:	f003 030f 	and.w	r3, r3, #15
    5694:	1c59      	adds	r1, r3, #1
    5696:	4809      	ldr	r0, [pc, #36]	; (56bc <getBusDividerConfig+0x144>)
    5698:	9a04      	ldr	r2, [sp, #16]
    569a:	4613      	mov	r3, r2
    569c:	005b      	lsls	r3, r3, #1
    569e:	4413      	add	r3, r2
    56a0:	009b      	lsls	r3, r3, #2
    56a2:	4403      	add	r3, r0
    56a4:	3304      	adds	r3, #4
    56a6:	6019      	str	r1, [r3, #0]
                break;
    56a8:	e002      	b.n	56b0 <getBusDividerConfig+0x138>
        }
    }
    56aa:	bf00      	nop
    56ac:	e000      	b.n	56b0 <getBusDividerConfig+0x138>
                break;
    56ae:	bf00      	nop

    return ReturnValue;
    56b0:	9b05      	ldr	r3, [sp, #20]
}
    56b2:	4618      	mov	r0, r3
    56b4:	b006      	add	sp, #24
    56b6:	4770      	bx	lr
    56b8:	1fff8bbc 	.word	0x1fff8bbc
    56bc:	1fff8cac 	.word	0x1fff8cac
    56c0:	40064000 	.word	0x40064000

000056c4 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    56c4:	b086      	sub	sp, #24
    56c6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    56c8:	2300      	movs	r3, #0
    56ca:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    56cc:	2300      	movs	r3, #0
    56ce:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    56d0:	9b01      	ldr	r3, [sp, #4]
    56d2:	2b27      	cmp	r3, #39	; 0x27
    56d4:	d00f      	beq.n	56f6 <getSlowDividerConfig+0x32>
    56d6:	9b01      	ldr	r3, [sp, #4]
    56d8:	2b27      	cmp	r3, #39	; 0x27
    56da:	d80f      	bhi.n	56fc <getSlowDividerConfig+0x38>
    56dc:	9b01      	ldr	r3, [sp, #4]
    56de:	2b25      	cmp	r3, #37	; 0x25
    56e0:	d003      	beq.n	56ea <getSlowDividerConfig+0x26>
    56e2:	9b01      	ldr	r3, [sp, #4]
    56e4:	2b26      	cmp	r3, #38	; 0x26
    56e6:	d003      	beq.n	56f0 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    56e8:	e008      	b.n	56fc <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    56ea:	2300      	movs	r3, #0
    56ec:	9304      	str	r3, [sp, #16]
            break;
    56ee:	e006      	b.n	56fe <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    56f0:	2301      	movs	r3, #1
    56f2:	9304      	str	r3, [sp, #16]
            break;
    56f4:	e003      	b.n	56fe <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    56f6:	2302      	movs	r3, #2
    56f8:	9304      	str	r3, [sp, #16]
            break;
    56fa:	e000      	b.n	56fe <getSlowDividerConfig+0x3a>
                break;
    56fc:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    56fe:	4b40      	ldr	r3, [pc, #256]	; (5800 <getSlowDividerConfig+0x13c>)
    5700:	681b      	ldr	r3, [r3, #0]
    5702:	2b00      	cmp	r3, #0
    5704:	d026      	beq.n	5754 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5706:	2300      	movs	r3, #0
    5708:	9303      	str	r3, [sp, #12]
    570a:	e01c      	b.n	5746 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    570c:	4b3c      	ldr	r3, [pc, #240]	; (5800 <getSlowDividerConfig+0x13c>)
    570e:	6819      	ldr	r1, [r3, #0]
    5710:	9a03      	ldr	r2, [sp, #12]
    5712:	4613      	mov	r3, r2
    5714:	005b      	lsls	r3, r3, #1
    5716:	4413      	add	r3, r2
    5718:	009b      	lsls	r3, r3, #2
    571a:	440b      	add	r3, r1
    571c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5720:	681b      	ldr	r3, [r3, #0]
    5722:	9a01      	ldr	r2, [sp, #4]
    5724:	429a      	cmp	r2, r3
    5726:	d10b      	bne.n	5740 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5728:	4b35      	ldr	r3, [pc, #212]	; (5800 <getSlowDividerConfig+0x13c>)
    572a:	6819      	ldr	r1, [r3, #0]
    572c:	9a03      	ldr	r2, [sp, #12]
    572e:	4613      	mov	r3, r2
    5730:	005b      	lsls	r3, r3, #1
    5732:	4413      	add	r3, r2
    5734:	009b      	lsls	r3, r3, #2
    5736:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    573a:	440b      	add	r3, r1
    573c:	9305      	str	r3, [sp, #20]
                break;
    573e:	e009      	b.n	5754 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5740:	9b03      	ldr	r3, [sp, #12]
    5742:	3301      	adds	r3, #1
    5744:	9303      	str	r3, [sp, #12]
    5746:	4b2e      	ldr	r3, [pc, #184]	; (5800 <getSlowDividerConfig+0x13c>)
    5748:	681b      	ldr	r3, [r3, #0]
    574a:	7b1b      	ldrb	r3, [r3, #12]
    574c:	461a      	mov	r2, r3
    574e:	9b03      	ldr	r3, [sp, #12]
    5750:	4293      	cmp	r3, r2
    5752:	d3db      	bcc.n	570c <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5754:	9b05      	ldr	r3, [sp, #20]
    5756:	2b00      	cmp	r3, #0
    5758:	d14a      	bne.n	57f0 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    575a:	9a04      	ldr	r2, [sp, #16]
    575c:	4613      	mov	r3, r2
    575e:	005b      	lsls	r3, r3, #1
    5760:	4413      	add	r3, r2
    5762:	009b      	lsls	r3, r3, #2
    5764:	4a27      	ldr	r2, [pc, #156]	; (5804 <getSlowDividerConfig+0x140>)
    5766:	4413      	add	r3, r2
    5768:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    576a:	4926      	ldr	r1, [pc, #152]	; (5804 <getSlowDividerConfig+0x140>)
    576c:	9a04      	ldr	r2, [sp, #16]
    576e:	4613      	mov	r3, r2
    5770:	005b      	lsls	r3, r3, #1
    5772:	4413      	add	r3, r2
    5774:	009b      	lsls	r3, r3, #2
    5776:	440b      	add	r3, r1
    5778:	9a01      	ldr	r2, [sp, #4]
    577a:	601a      	str	r2, [r3, #0]
        switch(Name)
    577c:	9b01      	ldr	r3, [sp, #4]
    577e:	2b27      	cmp	r3, #39	; 0x27
    5780:	d027      	beq.n	57d2 <getSlowDividerConfig+0x10e>
    5782:	9b01      	ldr	r3, [sp, #4]
    5784:	2b27      	cmp	r3, #39	; 0x27
    5786:	d835      	bhi.n	57f4 <getSlowDividerConfig+0x130>
    5788:	9b01      	ldr	r3, [sp, #4]
    578a:	2b25      	cmp	r3, #37	; 0x25
    578c:	d003      	beq.n	5796 <getSlowDividerConfig+0xd2>
    578e:	9b01      	ldr	r3, [sp, #4]
    5790:	2b26      	cmp	r3, #38	; 0x26
    5792:	d00f      	beq.n	57b4 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5794:	e02e      	b.n	57f4 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    5796:	4b1c      	ldr	r3, [pc, #112]	; (5808 <getSlowDividerConfig+0x144>)
    5798:	695b      	ldr	r3, [r3, #20]
    579a:	f003 030f 	and.w	r3, r3, #15
    579e:	1c59      	adds	r1, r3, #1
    57a0:	4818      	ldr	r0, [pc, #96]	; (5804 <getSlowDividerConfig+0x140>)
    57a2:	9a04      	ldr	r2, [sp, #16]
    57a4:	4613      	mov	r3, r2
    57a6:	005b      	lsls	r3, r3, #1
    57a8:	4413      	add	r3, r2
    57aa:	009b      	lsls	r3, r3, #2
    57ac:	4403      	add	r3, r0
    57ae:	3304      	adds	r3, #4
    57b0:	6019      	str	r1, [r3, #0]
                break;
    57b2:	e020      	b.n	57f6 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    57b4:	4b14      	ldr	r3, [pc, #80]	; (5808 <getSlowDividerConfig+0x144>)
    57b6:	699b      	ldr	r3, [r3, #24]
    57b8:	f003 030f 	and.w	r3, r3, #15
    57bc:	1c59      	adds	r1, r3, #1
    57be:	4811      	ldr	r0, [pc, #68]	; (5804 <getSlowDividerConfig+0x140>)
    57c0:	9a04      	ldr	r2, [sp, #16]
    57c2:	4613      	mov	r3, r2
    57c4:	005b      	lsls	r3, r3, #1
    57c6:	4413      	add	r3, r2
    57c8:	009b      	lsls	r3, r3, #2
    57ca:	4403      	add	r3, r0
    57cc:	3304      	adds	r3, #4
    57ce:	6019      	str	r1, [r3, #0]
                break;
    57d0:	e011      	b.n	57f6 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    57d2:	4b0d      	ldr	r3, [pc, #52]	; (5808 <getSlowDividerConfig+0x144>)
    57d4:	69db      	ldr	r3, [r3, #28]
    57d6:	f003 030f 	and.w	r3, r3, #15
    57da:	1c59      	adds	r1, r3, #1
    57dc:	4809      	ldr	r0, [pc, #36]	; (5804 <getSlowDividerConfig+0x140>)
    57de:	9a04      	ldr	r2, [sp, #16]
    57e0:	4613      	mov	r3, r2
    57e2:	005b      	lsls	r3, r3, #1
    57e4:	4413      	add	r3, r2
    57e6:	009b      	lsls	r3, r3, #2
    57e8:	4403      	add	r3, r0
    57ea:	3304      	adds	r3, #4
    57ec:	6019      	str	r1, [r3, #0]
                break;
    57ee:	e002      	b.n	57f6 <getSlowDividerConfig+0x132>
        }
    }
    57f0:	bf00      	nop
    57f2:	e000      	b.n	57f6 <getSlowDividerConfig+0x132>
                break;
    57f4:	bf00      	nop

    return ReturnValue;
    57f6:	9b05      	ldr	r3, [sp, #20]
}
    57f8:	4618      	mov	r0, r3
    57fa:	b006      	add	sp, #24
    57fc:	4770      	bx	lr
    57fe:	bf00      	nop
    5800:	1fff8bbc 	.word	0x1fff8bbc
    5804:	1fff8cd0 	.word	0x1fff8cd0
    5808:	40064000 	.word	0x40064000

0000580c <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    580c:	b500      	push	{lr}
    580e:	b083      	sub	sp, #12
    5810:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    5812:	4b64      	ldr	r3, [pc, #400]	; (59a4 <Clock_Ip_ClockInitializeObjects+0x198>)
    5814:	781b      	ldrb	r3, [r3, #0]
    5816:	f083 0301 	eor.w	r3, r3, #1
    581a:	b2db      	uxtb	r3, r3
    581c:	2b00      	cmp	r3, #0
    581e:	d05b      	beq.n	58d8 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5820:	4b60      	ldr	r3, [pc, #384]	; (59a4 <Clock_Ip_ClockInitializeObjects+0x198>)
    5822:	2201      	movs	r2, #1
    5824:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5826:	4b60      	ldr	r3, [pc, #384]	; (59a8 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5828:	785b      	ldrb	r3, [r3, #1]
    582a:	461a      	mov	r2, r3
    582c:	4613      	mov	r3, r2
    582e:	009b      	lsls	r3, r3, #2
    5830:	4413      	add	r3, r2
    5832:	009b      	lsls	r3, r3, #2
    5834:	4a5d      	ldr	r2, [pc, #372]	; (59ac <Clock_Ip_ClockInitializeObjects+0x1a0>)
    5836:	4413      	add	r3, r2
    5838:	4a5d      	ldr	r2, [pc, #372]	; (59b0 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    583a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    583c:	4b5d      	ldr	r3, [pc, #372]	; (59b4 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    583e:	785b      	ldrb	r3, [r3, #1]
    5840:	461a      	mov	r2, r3
    5842:	4613      	mov	r3, r2
    5844:	009b      	lsls	r3, r3, #2
    5846:	4413      	add	r3, r2
    5848:	009b      	lsls	r3, r3, #2
    584a:	4a5b      	ldr	r2, [pc, #364]	; (59b8 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    584c:	4413      	add	r3, r2
    584e:	4a5b      	ldr	r2, [pc, #364]	; (59bc <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5850:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    5852:	4b5b      	ldr	r3, [pc, #364]	; (59c0 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5854:	791b      	ldrb	r3, [r3, #4]
    5856:	461a      	mov	r2, r3
    5858:	4613      	mov	r3, r2
    585a:	005b      	lsls	r3, r3, #1
    585c:	4413      	add	r3, r2
    585e:	009b      	lsls	r3, r3, #2
    5860:	4a58      	ldr	r2, [pc, #352]	; (59c4 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    5862:	4413      	add	r3, r2
    5864:	4a58      	ldr	r2, [pc, #352]	; (59c8 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    5866:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5868:	4b58      	ldr	r3, [pc, #352]	; (59cc <Clock_Ip_ClockInitializeObjects+0x1c0>)
    586a:	795b      	ldrb	r3, [r3, #5]
    586c:	00db      	lsls	r3, r3, #3
    586e:	4a58      	ldr	r2, [pc, #352]	; (59d0 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5870:	4413      	add	r3, r2
    5872:	4a58      	ldr	r2, [pc, #352]	; (59d4 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    5874:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    5876:	4b55      	ldr	r3, [pc, #340]	; (59cc <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5878:	79db      	ldrb	r3, [r3, #7]
    587a:	00db      	lsls	r3, r3, #3
    587c:	4a54      	ldr	r2, [pc, #336]	; (59d0 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    587e:	4413      	add	r3, r2
    5880:	4a55      	ldr	r2, [pc, #340]	; (59d8 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    5882:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    5884:	4b55      	ldr	r3, [pc, #340]	; (59dc <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5886:	799b      	ldrb	r3, [r3, #6]
    5888:	009b      	lsls	r3, r3, #2
    588a:	4a55      	ldr	r2, [pc, #340]	; (59e0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    588c:	4413      	add	r3, r2
    588e:	4a55      	ldr	r2, [pc, #340]	; (59e4 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5890:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    5892:	4b52      	ldr	r3, [pc, #328]	; (59dc <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5894:	7a1b      	ldrb	r3, [r3, #8]
    5896:	009b      	lsls	r3, r3, #2
    5898:	4a51      	ldr	r2, [pc, #324]	; (59e0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    589a:	4413      	add	r3, r2
    589c:	4a52      	ldr	r2, [pc, #328]	; (59e8 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    589e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    58a0:	4b4e      	ldr	r3, [pc, #312]	; (59dc <Clock_Ip_ClockInitializeObjects+0x1d0>)
    58a2:	7a5b      	ldrb	r3, [r3, #9]
    58a4:	009b      	lsls	r3, r3, #2
    58a6:	4a4e      	ldr	r2, [pc, #312]	; (59e0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    58a8:	4413      	add	r3, r2
    58aa:	4a50      	ldr	r2, [pc, #320]	; (59ec <Clock_Ip_ClockInitializeObjects+0x1e0>)
    58ac:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    58ae:	4b4b      	ldr	r3, [pc, #300]	; (59dc <Clock_Ip_ClockInitializeObjects+0x1d0>)
    58b0:	7adb      	ldrb	r3, [r3, #11]
    58b2:	009b      	lsls	r3, r3, #2
    58b4:	4a4a      	ldr	r2, [pc, #296]	; (59e0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    58b6:	4413      	add	r3, r2
    58b8:	4a4d      	ldr	r2, [pc, #308]	; (59f0 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    58ba:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    58bc:	4b47      	ldr	r3, [pc, #284]	; (59dc <Clock_Ip_ClockInitializeObjects+0x1d0>)
    58be:	7b1b      	ldrb	r3, [r3, #12]
    58c0:	009b      	lsls	r3, r3, #2
    58c2:	4a47      	ldr	r2, [pc, #284]	; (59e0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    58c4:	4413      	add	r3, r2
    58c6:	4a4b      	ldr	r2, [pc, #300]	; (59f4 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    58c8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    58ca:	4b44      	ldr	r3, [pc, #272]	; (59dc <Clock_Ip_ClockInitializeObjects+0x1d0>)
    58cc:	7b9b      	ldrb	r3, [r3, #14]
    58ce:	009b      	lsls	r3, r3, #2
    58d0:	4a43      	ldr	r2, [pc, #268]	; (59e0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    58d2:	4413      	add	r3, r2
    58d4:	4a48      	ldr	r2, [pc, #288]	; (59f8 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    58d6:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    58d8:	4b48      	ldr	r3, [pc, #288]	; (59fc <Clock_Ip_ClockInitializeObjects+0x1f0>)
    58da:	781b      	ldrb	r3, [r3, #0]
    58dc:	2b00      	cmp	r3, #0
    58de:	d002      	beq.n	58e6 <Clock_Ip_ClockInitializeObjects+0xda>
    58e0:	9b01      	ldr	r3, [sp, #4]
    58e2:	2b00      	cmp	r3, #0
    58e4:	d003      	beq.n	58ee <Clock_Ip_ClockInitializeObjects+0xe2>
    58e6:	4b46      	ldr	r3, [pc, #280]	; (5a00 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    58e8:	781b      	ldrb	r3, [r3, #0]
    58ea:	2b00      	cmp	r3, #0
    58ec:	d056      	beq.n	599c <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    58ee:	f7ff fc09 	bl	5104 <getFircConfig>
    58f2:	4603      	mov	r3, r0
    58f4:	4a43      	ldr	r2, [pc, #268]	; (5a04 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    58f6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    58f8:	f7ff fc60 	bl	51bc <getSoscConfig>
    58fc:	4603      	mov	r3, r0
    58fe:	4a42      	ldr	r2, [pc, #264]	; (5a08 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5900:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    5902:	f7ff fca7 	bl	5254 <getSpllConfig>
    5906:	4603      	mov	r3, r0
    5908:	4a40      	ldr	r2, [pc, #256]	; (5a0c <Clock_Ip_ClockInitializeObjects+0x200>)
    590a:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    590c:	2019      	movs	r0, #25
    590e:	f7ff fcfb 	bl	5308 <getSelectorConfig>
    5912:	4603      	mov	r3, r0
    5914:	4a3e      	ldr	r2, [pc, #248]	; (5a10 <Clock_Ip_ClockInitializeObjects+0x204>)
    5916:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5918:	201a      	movs	r0, #26
    591a:	f7ff fcf5 	bl	5308 <getSelectorConfig>
    591e:	4603      	mov	r3, r0
    5920:	4a3c      	ldr	r2, [pc, #240]	; (5a14 <Clock_Ip_ClockInitializeObjects+0x208>)
    5922:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5924:	201b      	movs	r0, #27
    5926:	f7ff fcef 	bl	5308 <getSelectorConfig>
    592a:	4603      	mov	r3, r0
    592c:	4a3a      	ldr	r2, [pc, #232]	; (5a18 <Clock_Ip_ClockInitializeObjects+0x20c>)
    592e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5930:	201d      	movs	r0, #29
    5932:	f7ff fd7b 	bl	542c <getCoreDividerConfig>
    5936:	4603      	mov	r3, r0
    5938:	4a38      	ldr	r2, [pc, #224]	; (5a1c <Clock_Ip_ClockInitializeObjects+0x210>)
    593a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    593c:	201e      	movs	r0, #30
    593e:	f7ff fd75 	bl	542c <getCoreDividerConfig>
    5942:	4603      	mov	r3, r0
    5944:	4a36      	ldr	r2, [pc, #216]	; (5a20 <Clock_Ip_ClockInitializeObjects+0x214>)
    5946:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5948:	201f      	movs	r0, #31
    594a:	f7ff fd6f 	bl	542c <getCoreDividerConfig>
    594e:	4603      	mov	r3, r0
    5950:	4a34      	ldr	r2, [pc, #208]	; (5a24 <Clock_Ip_ClockInitializeObjects+0x218>)
    5952:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5954:	2021      	movs	r0, #33	; 0x21
    5956:	f7ff fe0f 	bl	5578 <getBusDividerConfig>
    595a:	4603      	mov	r3, r0
    595c:	4a32      	ldr	r2, [pc, #200]	; (5a28 <Clock_Ip_ClockInitializeObjects+0x21c>)
    595e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5960:	2022      	movs	r0, #34	; 0x22
    5962:	f7ff fe09 	bl	5578 <getBusDividerConfig>
    5966:	4603      	mov	r3, r0
    5968:	4a30      	ldr	r2, [pc, #192]	; (5a2c <Clock_Ip_ClockInitializeObjects+0x220>)
    596a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    596c:	2023      	movs	r0, #35	; 0x23
    596e:	f7ff fe03 	bl	5578 <getBusDividerConfig>
    5972:	4603      	mov	r3, r0
    5974:	4a2e      	ldr	r2, [pc, #184]	; (5a30 <Clock_Ip_ClockInitializeObjects+0x224>)
    5976:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    5978:	2025      	movs	r0, #37	; 0x25
    597a:	f7ff fea3 	bl	56c4 <getSlowDividerConfig>
    597e:	4603      	mov	r3, r0
    5980:	4a2c      	ldr	r2, [pc, #176]	; (5a34 <Clock_Ip_ClockInitializeObjects+0x228>)
    5982:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    5984:	2026      	movs	r0, #38	; 0x26
    5986:	f7ff fe9d 	bl	56c4 <getSlowDividerConfig>
    598a:	4603      	mov	r3, r0
    598c:	4a2a      	ldr	r2, [pc, #168]	; (5a38 <Clock_Ip_ClockInitializeObjects+0x22c>)
    598e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5990:	2027      	movs	r0, #39	; 0x27
    5992:	f7ff fe97 	bl	56c4 <getSlowDividerConfig>
    5996:	4603      	mov	r3, r0
    5998:	4a28      	ldr	r2, [pc, #160]	; (5a3c <Clock_Ip_ClockInitializeObjects+0x230>)
    599a:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    599c:	bf00      	nop
    599e:	b003      	add	sp, #12
    59a0:	f85d fb04 	ldr.w	pc, [sp], #4
    59a4:	1fff8cf4 	.word	0x1fff8cf4
    59a8:	0000fd38 	.word	0x0000fd38
    59ac:	00010384 	.word	0x00010384
    59b0:	1fff8bc0 	.word	0x1fff8bc0
    59b4:	0000fcf8 	.word	0x0000fcf8
    59b8:	000102cc 	.word	0x000102cc
    59bc:	1fff8bc4 	.word	0x1fff8bc4
    59c0:	0000fd08 	.word	0x0000fd08
    59c4:	00010338 	.word	0x00010338
    59c8:	1fff8bc8 	.word	0x1fff8bc8
    59cc:	0000fd48 	.word	0x0000fd48
    59d0:	000103b0 	.word	0x000103b0
    59d4:	1fff8bcc 	.word	0x1fff8bcc
    59d8:	1fff8c08 	.word	0x1fff8c08
    59dc:	0000fcd8 	.word	0x0000fcd8
    59e0:	00010288 	.word	0x00010288
    59e4:	1fff8bd0 	.word	0x1fff8bd0
    59e8:	1fff8c0c 	.word	0x1fff8c0c
    59ec:	1fff8bd4 	.word	0x1fff8bd4
    59f0:	1fff8c10 	.word	0x1fff8c10
    59f4:	1fff8bd8 	.word	0x1fff8bd8
    59f8:	1fff8c14 	.word	0x1fff8c14
    59fc:	1fff8b21 	.word	0x1fff8b21
    5a00:	1fff8b18 	.word	0x1fff8b18
    5a04:	1fff8bdc 	.word	0x1fff8bdc
    5a08:	1fff8be0 	.word	0x1fff8be0
    5a0c:	1fff8be4 	.word	0x1fff8be4
    5a10:	1fff8be8 	.word	0x1fff8be8
    5a14:	1fff8bec 	.word	0x1fff8bec
    5a18:	1fff8c18 	.word	0x1fff8c18
    5a1c:	1fff8bf0 	.word	0x1fff8bf0
    5a20:	1fff8bf4 	.word	0x1fff8bf4
    5a24:	1fff8c1c 	.word	0x1fff8c1c
    5a28:	1fff8bf8 	.word	0x1fff8bf8
    5a2c:	1fff8bfc 	.word	0x1fff8bfc
    5a30:	1fff8c20 	.word	0x1fff8c20
    5a34:	1fff8c00 	.word	0x1fff8c00
    5a38:	1fff8c04 	.word	0x1fff8c04
    5a3c:	1fff8c24 	.word	0x1fff8c24

00005a40 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5a40:	b500      	push	{lr}
    5a42:	b083      	sub	sp, #12
    5a44:	9001      	str	r0, [sp, #4]
    5a46:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5a48:	9b01      	ldr	r3, [sp, #4]
    5a4a:	2b03      	cmp	r3, #3
    5a4c:	f000 8090 	beq.w	5b70 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    5a50:	9b01      	ldr	r3, [sp, #4]
    5a52:	2b03      	cmp	r3, #3
    5a54:	f200 80d3 	bhi.w	5bfe <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5a58:	9b01      	ldr	r3, [sp, #4]
    5a5a:	2b00      	cmp	r3, #0
    5a5c:	d040      	beq.n	5ae0 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    5a5e:	9b01      	ldr	r3, [sp, #4]
    5a60:	3b01      	subs	r3, #1
    5a62:	2b01      	cmp	r3, #1
    5a64:	f200 80cb 	bhi.w	5bfe <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    5a68:	9b00      	ldr	r3, [sp, #0]
    5a6a:	2b00      	cmp	r3, #0
    5a6c:	f040 80c9 	bne.w	5c02 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    5a70:	4b68      	ldr	r3, [pc, #416]	; (5c14 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5a72:	2200      	movs	r2, #0
    5a74:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    5a76:	4b68      	ldr	r3, [pc, #416]	; (5c18 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5a78:	681b      	ldr	r3, [r3, #0]
    5a7a:	685b      	ldr	r3, [r3, #4]
    5a7c:	4a67      	ldr	r2, [pc, #412]	; (5c1c <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    5a7e:	6812      	ldr	r2, [r2, #0]
    5a80:	4610      	mov	r0, r2
    5a82:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    5a84:	4b66      	ldr	r3, [pc, #408]	; (5c20 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5a86:	681b      	ldr	r3, [r3, #0]
    5a88:	681b      	ldr	r3, [r3, #0]
    5a8a:	4a66      	ldr	r2, [pc, #408]	; (5c24 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    5a8c:	6812      	ldr	r2, [r2, #0]
    5a8e:	4610      	mov	r0, r2
    5a90:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    5a92:	4b65      	ldr	r3, [pc, #404]	; (5c28 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5a94:	681b      	ldr	r3, [r3, #0]
    5a96:	681b      	ldr	r3, [r3, #0]
    5a98:	4a64      	ldr	r2, [pc, #400]	; (5c2c <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    5a9a:	6812      	ldr	r2, [r2, #0]
    5a9c:	4610      	mov	r0, r2
    5a9e:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    5aa0:	4b63      	ldr	r3, [pc, #396]	; (5c30 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5aa2:	681b      	ldr	r3, [r3, #0]
    5aa4:	681b      	ldr	r3, [r3, #0]
    5aa6:	4a63      	ldr	r2, [pc, #396]	; (5c34 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    5aa8:	6812      	ldr	r2, [r2, #0]
    5aaa:	4610      	mov	r0, r2
    5aac:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    5aae:	4b62      	ldr	r3, [pc, #392]	; (5c38 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5ab0:	681b      	ldr	r3, [r3, #0]
    5ab2:	691b      	ldr	r3, [r3, #16]
    5ab4:	4a61      	ldr	r2, [pc, #388]	; (5c3c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5ab6:	6812      	ldr	r2, [r2, #0]
    5ab8:	6812      	ldr	r2, [r2, #0]
    5aba:	4610      	mov	r0, r2
    5abc:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    5abe:	4b60      	ldr	r3, [pc, #384]	; (5c40 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5ac0:	681b      	ldr	r3, [r3, #0]
    5ac2:	68db      	ldr	r3, [r3, #12]
    5ac4:	4a5f      	ldr	r2, [pc, #380]	; (5c44 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5ac6:	6812      	ldr	r2, [r2, #0]
    5ac8:	6812      	ldr	r2, [r2, #0]
    5aca:	4610      	mov	r0, r2
    5acc:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    5ace:	4b5e      	ldr	r3, [pc, #376]	; (5c48 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5ad0:	681b      	ldr	r3, [r3, #0]
    5ad2:	689b      	ldr	r3, [r3, #8]
    5ad4:	4a5d      	ldr	r2, [pc, #372]	; (5c4c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5ad6:	6812      	ldr	r2, [r2, #0]
    5ad8:	6812      	ldr	r2, [r2, #0]
    5ada:	4610      	mov	r0, r2
    5adc:	4798      	blx	r3
            }
        }
        break;
    5ade:	e090      	b.n	5c02 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5ae0:	9b00      	ldr	r3, [sp, #0]
    5ae2:	2b02      	cmp	r3, #2
    5ae4:	f040 808f 	bne.w	5c06 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5ae8:	4b4a      	ldr	r3, [pc, #296]	; (5c14 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5aea:	2201      	movs	r2, #1
    5aec:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5aee:	4b56      	ldr	r3, [pc, #344]	; (5c48 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5af0:	681b      	ldr	r3, [r3, #0]
    5af2:	685b      	ldr	r3, [r3, #4]
    5af4:	4a55      	ldr	r2, [pc, #340]	; (5c4c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5af6:	6812      	ldr	r2, [r2, #0]
    5af8:	4610      	mov	r0, r2
    5afa:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5afc:	4b50      	ldr	r3, [pc, #320]	; (5c40 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5afe:	681b      	ldr	r3, [r3, #0]
    5b00:	691b      	ldr	r3, [r3, #16]
    5b02:	4a50      	ldr	r2, [pc, #320]	; (5c44 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5b04:	6812      	ldr	r2, [r2, #0]
    5b06:	4610      	mov	r0, r2
    5b08:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5b0a:	4b4d      	ldr	r3, [pc, #308]	; (5c40 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5b0c:	681b      	ldr	r3, [r3, #0]
    5b0e:	689b      	ldr	r3, [r3, #8]
    5b10:	4a4c      	ldr	r2, [pc, #304]	; (5c44 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5b12:	6812      	ldr	r2, [r2, #0]
    5b14:	4610      	mov	r0, r2
    5b16:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5b18:	4b47      	ldr	r3, [pc, #284]	; (5c38 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5b1a:	681b      	ldr	r3, [r3, #0]
    5b1c:	68db      	ldr	r3, [r3, #12]
    5b1e:	4a47      	ldr	r2, [pc, #284]	; (5c3c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5b20:	6812      	ldr	r2, [r2, #0]
    5b22:	4610      	mov	r0, r2
    5b24:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5b26:	4b44      	ldr	r3, [pc, #272]	; (5c38 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5b28:	681b      	ldr	r3, [r3, #0]
    5b2a:	689b      	ldr	r3, [r3, #8]
    5b2c:	4a43      	ldr	r2, [pc, #268]	; (5c3c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5b2e:	6812      	ldr	r2, [r2, #0]
    5b30:	6812      	ldr	r2, [r2, #0]
    5b32:	4610      	mov	r0, r2
    5b34:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    5b36:	4b38      	ldr	r3, [pc, #224]	; (5c18 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5b38:	681b      	ldr	r3, [r3, #0]
    5b3a:	685b      	ldr	r3, [r3, #4]
    5b3c:	4a44      	ldr	r2, [pc, #272]	; (5c50 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    5b3e:	6812      	ldr	r2, [r2, #0]
    5b40:	4610      	mov	r0, r2
    5b42:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5b44:	4b36      	ldr	r3, [pc, #216]	; (5c20 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5b46:	681b      	ldr	r3, [r3, #0]
    5b48:	681b      	ldr	r3, [r3, #0]
    5b4a:	4a42      	ldr	r2, [pc, #264]	; (5c54 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5b4c:	6812      	ldr	r2, [r2, #0]
    5b4e:	4610      	mov	r0, r2
    5b50:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    5b52:	4b35      	ldr	r3, [pc, #212]	; (5c28 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5b54:	681b      	ldr	r3, [r3, #0]
    5b56:	681b      	ldr	r3, [r3, #0]
    5b58:	4a3f      	ldr	r2, [pc, #252]	; (5c58 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    5b5a:	6812      	ldr	r2, [r2, #0]
    5b5c:	4610      	mov	r0, r2
    5b5e:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5b60:	4b33      	ldr	r3, [pc, #204]	; (5c30 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5b62:	681b      	ldr	r3, [r3, #0]
    5b64:	681b      	ldr	r3, [r3, #0]
    5b66:	4a3d      	ldr	r2, [pc, #244]	; (5c5c <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    5b68:	6812      	ldr	r2, [r2, #0]
    5b6a:	4610      	mov	r0, r2
    5b6c:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5b6e:	e04a      	b.n	5c06 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5b70:	9b00      	ldr	r3, [sp, #0]
    5b72:	2b02      	cmp	r3, #2
    5b74:	d149      	bne.n	5c0a <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5b76:	4b27      	ldr	r3, [pc, #156]	; (5c14 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5b78:	2201      	movs	r2, #1
    5b7a:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5b7c:	4b32      	ldr	r3, [pc, #200]	; (5c48 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5b7e:	681b      	ldr	r3, [r3, #0]
    5b80:	685b      	ldr	r3, [r3, #4]
    5b82:	4a32      	ldr	r2, [pc, #200]	; (5c4c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5b84:	6812      	ldr	r2, [r2, #0]
    5b86:	4610      	mov	r0, r2
    5b88:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5b8a:	4b2d      	ldr	r3, [pc, #180]	; (5c40 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5b8c:	681b      	ldr	r3, [r3, #0]
    5b8e:	691b      	ldr	r3, [r3, #16]
    5b90:	4a2c      	ldr	r2, [pc, #176]	; (5c44 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5b92:	6812      	ldr	r2, [r2, #0]
    5b94:	4610      	mov	r0, r2
    5b96:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5b98:	4b29      	ldr	r3, [pc, #164]	; (5c40 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5b9a:	681b      	ldr	r3, [r3, #0]
    5b9c:	689b      	ldr	r3, [r3, #8]
    5b9e:	4a29      	ldr	r2, [pc, #164]	; (5c44 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5ba0:	6812      	ldr	r2, [r2, #0]
    5ba2:	4610      	mov	r0, r2
    5ba4:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5ba6:	4b24      	ldr	r3, [pc, #144]	; (5c38 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5ba8:	681b      	ldr	r3, [r3, #0]
    5baa:	68db      	ldr	r3, [r3, #12]
    5bac:	4a23      	ldr	r2, [pc, #140]	; (5c3c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5bae:	6812      	ldr	r2, [r2, #0]
    5bb0:	4610      	mov	r0, r2
    5bb2:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5bb4:	4b20      	ldr	r3, [pc, #128]	; (5c38 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5bb6:	681b      	ldr	r3, [r3, #0]
    5bb8:	689b      	ldr	r3, [r3, #8]
    5bba:	4a20      	ldr	r2, [pc, #128]	; (5c3c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5bbc:	6812      	ldr	r2, [r2, #0]
    5bbe:	6812      	ldr	r2, [r2, #0]
    5bc0:	4610      	mov	r0, r2
    5bc2:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    5bc4:	4b26      	ldr	r3, [pc, #152]	; (5c60 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    5bc6:	681b      	ldr	r3, [r3, #0]
    5bc8:	685b      	ldr	r3, [r3, #4]
    5bca:	4a26      	ldr	r2, [pc, #152]	; (5c64 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    5bcc:	6812      	ldr	r2, [r2, #0]
    5bce:	4610      	mov	r0, r2
    5bd0:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    5bd2:	4b25      	ldr	r3, [pc, #148]	; (5c68 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5bd4:	681b      	ldr	r3, [r3, #0]
    5bd6:	681b      	ldr	r3, [r3, #0]
    5bd8:	4a24      	ldr	r2, [pc, #144]	; (5c6c <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    5bda:	6812      	ldr	r2, [r2, #0]
    5bdc:	4610      	mov	r0, r2
    5bde:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    5be0:	4b23      	ldr	r3, [pc, #140]	; (5c70 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    5be2:	681b      	ldr	r3, [r3, #0]
    5be4:	681b      	ldr	r3, [r3, #0]
    5be6:	4a23      	ldr	r2, [pc, #140]	; (5c74 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    5be8:	6812      	ldr	r2, [r2, #0]
    5bea:	4610      	mov	r0, r2
    5bec:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    5bee:	4b22      	ldr	r3, [pc, #136]	; (5c78 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    5bf0:	681b      	ldr	r3, [r3, #0]
    5bf2:	681b      	ldr	r3, [r3, #0]
    5bf4:	4a21      	ldr	r2, [pc, #132]	; (5c7c <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    5bf6:	6812      	ldr	r2, [r2, #0]
    5bf8:	4610      	mov	r0, r2
    5bfa:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5bfc:	e005      	b.n	5c0a <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    5bfe:	bf00      	nop
    5c00:	e004      	b.n	5c0c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5c02:	bf00      	nop
    5c04:	e002      	b.n	5c0c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5c06:	bf00      	nop
    5c08:	e000      	b.n	5c0c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5c0a:	bf00      	nop
    }

}
    5c0c:	bf00      	nop
    5c0e:	b003      	add	sp, #12
    5c10:	f85d fb04 	ldr.w	pc, [sp], #4
    5c14:	1fff8b21 	.word	0x1fff8b21
    5c18:	1fff8bcc 	.word	0x1fff8bcc
    5c1c:	1fff8bec 	.word	0x1fff8bec
    5c20:	1fff8bd0 	.word	0x1fff8bd0
    5c24:	1fff8bf4 	.word	0x1fff8bf4
    5c28:	1fff8bd4 	.word	0x1fff8bd4
    5c2c:	1fff8bfc 	.word	0x1fff8bfc
    5c30:	1fff8bd8 	.word	0x1fff8bd8
    5c34:	1fff8c04 	.word	0x1fff8c04
    5c38:	1fff8bc0 	.word	0x1fff8bc0
    5c3c:	1fff8be4 	.word	0x1fff8be4
    5c40:	1fff8bc4 	.word	0x1fff8bc4
    5c44:	1fff8be0 	.word	0x1fff8be0
    5c48:	1fff8bc8 	.word	0x1fff8bc8
    5c4c:	1fff8bdc 	.word	0x1fff8bdc
    5c50:	1fff8be8 	.word	0x1fff8be8
    5c54:	1fff8bf0 	.word	0x1fff8bf0
    5c58:	1fff8bf8 	.word	0x1fff8bf8
    5c5c:	1fff8c00 	.word	0x1fff8c00
    5c60:	1fff8c08 	.word	0x1fff8c08
    5c64:	1fff8c18 	.word	0x1fff8c18
    5c68:	1fff8c0c 	.word	0x1fff8c0c
    5c6c:	1fff8c1c 	.word	0x1fff8c1c
    5c70:	1fff8c10 	.word	0x1fff8c10
    5c74:	1fff8c20 	.word	0x1fff8c20
    5c78:	1fff8c14 	.word	0x1fff8c14
    5c7c:	1fff8c24 	.word	0x1fff8c24

00005c80 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    5c80:	b500      	push	{lr}
    5c82:	b083      	sub	sp, #12
    5c84:	9001      	str	r0, [sp, #4]
    5c86:	9100      	str	r1, [sp, #0]
    switch(Command)
    5c88:	9b00      	ldr	r3, [sp, #0]
    5c8a:	2b04      	cmp	r3, #4
    5c8c:	d010      	beq.n	5cb0 <Clock_Ip_Command+0x30>
    5c8e:	9b00      	ldr	r3, [sp, #0]
    5c90:	2b04      	cmp	r3, #4
    5c92:	d811      	bhi.n	5cb8 <Clock_Ip_Command+0x38>
    5c94:	9b00      	ldr	r3, [sp, #0]
    5c96:	2b01      	cmp	r3, #1
    5c98:	d006      	beq.n	5ca8 <Clock_Ip_Command+0x28>
    5c9a:	9b00      	ldr	r3, [sp, #0]
    5c9c:	2b02      	cmp	r3, #2
    5c9e:	d10b      	bne.n	5cb8 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    5ca0:	9801      	ldr	r0, [sp, #4]
    5ca2:	f7ff fdb3 	bl	580c <Clock_Ip_ClockInitializeObjects>
            break;
    5ca6:	e008      	b.n	5cba <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    5ca8:	9801      	ldr	r0, [sp, #4]
    5caa:	f7ff f9db 	bl	5064 <Clock_Ip_SpecificPlatformInitClock>
            break;
    5cae:	e004      	b.n	5cba <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5cb0:	9801      	ldr	r0, [sp, #4]
    5cb2:	f7ff f8ed 	bl	4e90 <DisableSafeClock>
            break;
    5cb6:	e000      	b.n	5cba <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    5cb8:	bf00      	nop
    }
}
    5cba:	bf00      	nop
    5cbc:	b003      	add	sp, #12
    5cbe:	f85d fb04 	ldr.w	pc, [sp], #4
    5cc2:	bf00      	nop

00005cc4 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5cc4:	b500      	push	{lr}
    5cc6:	b085      	sub	sp, #20
    5cc8:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    5cca:	4a20      	ldr	r2, [pc, #128]	; (5d4c <Mcu_Init+0x88>)
    5ccc:	9b01      	ldr	r3, [sp, #4]
    5cce:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5cd0:	2300      	movs	r3, #0
    5cd2:	9303      	str	r3, [sp, #12]
    5cd4:	e010      	b.n	5cf8 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5cd6:	4b1d      	ldr	r3, [pc, #116]	; (5d4c <Mcu_Init+0x88>)
    5cd8:	681b      	ldr	r3, [r3, #0]
    5cda:	6919      	ldr	r1, [r3, #16]
    5cdc:	9a03      	ldr	r2, [sp, #12]
    5cde:	4613      	mov	r3, r2
    5ce0:	005b      	lsls	r3, r3, #1
    5ce2:	4413      	add	r3, r2
    5ce4:	009b      	lsls	r3, r3, #2
    5ce6:	440b      	add	r3, r1
    5ce8:	681b      	ldr	r3, [r3, #0]
    5cea:	9a03      	ldr	r2, [sp, #12]
    5cec:	b2d1      	uxtb	r1, r2
    5cee:	4a18      	ldr	r2, [pc, #96]	; (5d50 <Mcu_Init+0x8c>)
    5cf0:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5cf2:	9b03      	ldr	r3, [sp, #12]
    5cf4:	3301      	adds	r3, #1
    5cf6:	9303      	str	r3, [sp, #12]
    5cf8:	4b14      	ldr	r3, [pc, #80]	; (5d4c <Mcu_Init+0x88>)
    5cfa:	681b      	ldr	r3, [r3, #0]
    5cfc:	689b      	ldr	r3, [r3, #8]
    5cfe:	9a03      	ldr	r2, [sp, #12]
    5d00:	429a      	cmp	r2, r3
    5d02:	d3e8      	bcc.n	5cd6 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5d04:	2300      	movs	r3, #0
    5d06:	9303      	str	r3, [sp, #12]
    5d08:	e010      	b.n	5d2c <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    5d0a:	4b10      	ldr	r3, [pc, #64]	; (5d4c <Mcu_Init+0x88>)
    5d0c:	681b      	ldr	r3, [r3, #0]
    5d0e:	6959      	ldr	r1, [r3, #20]
    5d10:	9a03      	ldr	r2, [sp, #12]
    5d12:	4613      	mov	r3, r2
    5d14:	01db      	lsls	r3, r3, #7
    5d16:	1a9b      	subs	r3, r3, r2
    5d18:	00db      	lsls	r3, r3, #3
    5d1a:	440b      	add	r3, r1
    5d1c:	681b      	ldr	r3, [r3, #0]
    5d1e:	9a03      	ldr	r2, [sp, #12]
    5d20:	b2d1      	uxtb	r1, r2
    5d22:	4a0c      	ldr	r2, [pc, #48]	; (5d54 <Mcu_Init+0x90>)
    5d24:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5d26:	9b03      	ldr	r3, [sp, #12]
    5d28:	3301      	adds	r3, #1
    5d2a:	9303      	str	r3, [sp, #12]
    5d2c:	4b07      	ldr	r3, [pc, #28]	; (5d4c <Mcu_Init+0x88>)
    5d2e:	681b      	ldr	r3, [r3, #0]
    5d30:	68db      	ldr	r3, [r3, #12]
    5d32:	9a03      	ldr	r2, [sp, #12]
    5d34:	429a      	cmp	r2, r3
    5d36:	d3e8      	bcc.n	5d0a <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5d38:	4b04      	ldr	r3, [pc, #16]	; (5d4c <Mcu_Init+0x88>)
    5d3a:	681b      	ldr	r3, [r3, #0]
    5d3c:	699b      	ldr	r3, [r3, #24]
    5d3e:	4618      	mov	r0, r3
    5d40:	f000 f88a 	bl	5e58 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5d44:	bf00      	nop
    5d46:	b005      	add	sp, #20
    5d48:	f85d fb04 	ldr.w	pc, [sp], #4
    5d4c:	1fff8d00 	.word	0x1fff8d00
    5d50:	1fff8cfc 	.word	0x1fff8cfc
    5d54:	1fff8cf8 	.word	0x1fff8cf8

00005d58 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5d58:	b084      	sub	sp, #16
    5d5a:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5d5c:	2301      	movs	r3, #1
    5d5e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5d62:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5d66:	4618      	mov	r0, r3
    5d68:	b004      	add	sp, #16
    5d6a:	4770      	bx	lr

00005d6c <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5d6c:	b500      	push	{lr}
    5d6e:	b085      	sub	sp, #20
    5d70:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5d72:	4a0e      	ldr	r2, [pc, #56]	; (5dac <Mcu_InitClock+0x40>)
    5d74:	9b01      	ldr	r3, [sp, #4]
    5d76:	4413      	add	r3, r2
    5d78:	781b      	ldrb	r3, [r3, #0]
    5d7a:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    5d7e:	4b0c      	ldr	r3, [pc, #48]	; (5db0 <Mcu_InitClock+0x44>)
    5d80:	681b      	ldr	r3, [r3, #0]
    5d82:	6959      	ldr	r1, [r3, #20]
    5d84:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5d88:	4613      	mov	r3, r2
    5d8a:	01db      	lsls	r3, r3, #7
    5d8c:	1a9b      	subs	r3, r3, r2
    5d8e:	00db      	lsls	r3, r3, #3
    5d90:	440b      	add	r3, r1
    5d92:	4618      	mov	r0, r3
    5d94:	f000 f86a 	bl	5e6c <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5d98:	2300      	movs	r3, #0
    5d9a:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    5d9e:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    5da2:	4618      	mov	r0, r3
    5da4:	b005      	add	sp, #20
    5da6:	f85d fb04 	ldr.w	pc, [sp], #4
    5daa:	bf00      	nop
    5dac:	1fff8cf8 	.word	0x1fff8cf8
    5db0:	1fff8d00 	.word	0x1fff8d00

00005db4 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5db4:	b500      	push	{lr}
    5db6:	b085      	sub	sp, #20
    5db8:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    5dba:	4a0d      	ldr	r2, [pc, #52]	; (5df0 <Mcu_SetMode+0x3c>)
    5dbc:	9b01      	ldr	r3, [sp, #4]
    5dbe:	4413      	add	r3, r2
    5dc0:	781b      	ldrb	r3, [r3, #0]
    5dc2:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    5dc6:	f008 fa3b 	bl	e240 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    5dca:	4b0a      	ldr	r3, [pc, #40]	; (5df4 <Mcu_SetMode+0x40>)
    5dcc:	681b      	ldr	r3, [r3, #0]
    5dce:	6919      	ldr	r1, [r3, #16]
    5dd0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5dd4:	4613      	mov	r3, r2
    5dd6:	005b      	lsls	r3, r3, #1
    5dd8:	4413      	add	r3, r2
    5dda:	009b      	lsls	r3, r3, #2
    5ddc:	440b      	add	r3, r1
    5dde:	4618      	mov	r0, r3
    5de0:	f000 f84e 	bl	5e80 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5de4:	f008 fa58 	bl	e298 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5de8:	bf00      	nop
    5dea:	b005      	add	sp, #20
    5dec:	f85d fb04 	ldr.w	pc, [sp], #4
    5df0:	1fff8cfc 	.word	0x1fff8cfc
    5df4:	1fff8d00 	.word	0x1fff8d00

00005df8 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5df8:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    5dfa:	2302      	movs	r3, #2
    5dfc:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    5dfe:	9b01      	ldr	r3, [sp, #4]
}
    5e00:	4618      	mov	r0, r3
    5e02:	b002      	add	sp, #8
    5e04:	4770      	bx	lr

00005e06 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5e06:	b500      	push	{lr}
    5e08:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5e0a:	f000 f843 	bl	5e94 <Mcu_Ipw_GetResetReason>
    5e0e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    5e10:	9b01      	ldr	r3, [sp, #4]
}
    5e12:	4618      	mov	r0, r3
    5e14:	b003      	add	sp, #12
    5e16:	f85d fb04 	ldr.w	pc, [sp], #4

00005e1a <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5e1a:	b500      	push	{lr}
    5e1c:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    5e1e:	f000 f83f 	bl	5ea0 <Mcu_Ipw_GetResetRawValue>
    5e22:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5e24:	9b01      	ldr	r3, [sp, #4]
}
    5e26:	4618      	mov	r0, r3
    5e28:	b003      	add	sp, #12
    5e2a:	f85d fb04 	ldr.w	pc, [sp], #4

00005e2e <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5e2e:	b500      	push	{lr}
    5e30:	b083      	sub	sp, #12
    5e32:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5e34:	9801      	ldr	r0, [sp, #4]
    5e36:	f000 f839 	bl	5eac <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5e3a:	bf00      	nop
    5e3c:	b003      	add	sp, #12
    5e3e:	f85d fb04 	ldr.w	pc, [sp], #4

00005e42 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5e42:	b082      	sub	sp, #8
    5e44:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5e46:	4b03      	ldr	r3, [pc, #12]	; (5e54 <Mcu_ClkSrcFailureNotification+0x12>)
    5e48:	681b      	ldr	r3, [r3, #0]
    5e4a:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5e4c:	bf00      	nop
    5e4e:	b002      	add	sp, #8
    5e50:	4770      	bx	lr
    5e52:	bf00      	nop
    5e54:	1fff8d00 	.word	0x1fff8d00

00005e58 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5e58:	b500      	push	{lr}
    5e5a:	b083      	sub	sp, #12
    5e5c:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5e5e:	9801      	ldr	r0, [sp, #4]
    5e60:	f000 f882 	bl	5f68 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5e64:	bf00      	nop
    5e66:	b003      	add	sp, #12
    5e68:	f85d fb04 	ldr.w	pc, [sp], #4

00005e6c <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5e6c:	b500      	push	{lr}
    5e6e:	b083      	sub	sp, #12
    5e70:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5e72:	9801      	ldr	r0, [sp, #4]
    5e74:	f7fc fc6a 	bl	274c <Clock_Ip_InitClock>
}
    5e78:	bf00      	nop
    5e7a:	b003      	add	sp, #12
    5e7c:	f85d fb04 	ldr.w	pc, [sp], #4

00005e80 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5e80:	b500      	push	{lr}
    5e82:	b083      	sub	sp, #12
    5e84:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5e86:	9801      	ldr	r0, [sp, #4]
    5e88:	f000 f820 	bl	5ecc <Power_Ip_SetMode>
}
    5e8c:	bf00      	nop
    5e8e:	b003      	add	sp, #12
    5e90:	f85d fb04 	ldr.w	pc, [sp], #4

00005e94 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5e94:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5e96:	f000 f84f 	bl	5f38 <Power_Ip_GetResetReason>
    5e9a:	4603      	mov	r3, r0
}
    5e9c:	4618      	mov	r0, r3
    5e9e:	bd08      	pop	{r3, pc}

00005ea0 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5ea0:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5ea2:	f000 f857 	bl	5f54 <Power_Ip_GetResetRawValue>
    5ea6:	4603      	mov	r3, r0
}
    5ea8:	4618      	mov	r0, r3
    5eaa:	bd08      	pop	{r3, pc}

00005eac <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5eac:	b500      	push	{lr}
    5eae:	b083      	sub	sp, #12
    5eb0:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5eb2:	9b01      	ldr	r3, [sp, #4]
    5eb4:	2b00      	cmp	r3, #0
    5eb6:	d102      	bne.n	5ebe <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5eb8:	f000 f86c 	bl	5f94 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5ebc:	e001      	b.n	5ec2 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    5ebe:	f000 f86e 	bl	5f9e <Power_Ip_EnableSleepOnExit>
}
    5ec2:	bf00      	nop
    5ec4:	b003      	add	sp, #12
    5ec6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005ecc <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5ecc:	b500      	push	{lr}
    5ece:	b085      	sub	sp, #20
    5ed0:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5ed2:	9b01      	ldr	r3, [sp, #4]
    5ed4:	685b      	ldr	r3, [r3, #4]
    5ed6:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5ed8:	9802      	ldr	r0, [sp, #8]
    5eda:	f000 f9f5 	bl	62c8 <Power_Ip_SMC_ModeCheckEntry>
    5ede:	4603      	mov	r3, r0
    5ee0:	2b00      	cmp	r3, #0
    5ee2:	d002      	beq.n	5eea <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5ee4:	2301      	movs	r3, #1
    5ee6:	9303      	str	r3, [sp, #12]
    5ee8:	e003      	b.n	5ef2 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5eea:	9801      	ldr	r0, [sp, #4]
    5eec:	f000 fa1e 	bl	632c <Power_Ip_SMC_ModeConfig>
    5ef0:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    5ef2:	9b03      	ldr	r3, [sp, #12]
    5ef4:	2b01      	cmp	r3, #1
    5ef6:	d103      	bne.n	5f00 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5ef8:	21ff      	movs	r1, #255	; 0xff
    5efa:	2003      	movs	r0, #3
    5efc:	f000 f8f4 	bl	60e8 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    5f00:	bf00      	nop
    5f02:	b005      	add	sp, #20
    5f04:	f85d fb04 	ldr.w	pc, [sp], #4

00005f08 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5f08:	b084      	sub	sp, #16
    5f0a:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5f0c:	230c      	movs	r3, #12
    5f0e:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    5f10:	4a08      	ldr	r2, [pc, #32]	; (5f34 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5f12:	9b01      	ldr	r3, [sp, #4]
    5f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f18:	2b0e      	cmp	r3, #14
    5f1a:	d805      	bhi.n	5f28 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5f1c:	4a05      	ldr	r2, [pc, #20]	; (5f34 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5f1e:	9b01      	ldr	r3, [sp, #4]
    5f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f24:	9303      	str	r3, [sp, #12]
    5f26:	e001      	b.n	5f2c <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5f28:	230c      	movs	r3, #12
    5f2a:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5f2c:	9b03      	ldr	r3, [sp, #12]
}
    5f2e:	4618      	mov	r0, r3
    5f30:	b004      	add	sp, #16
    5f32:	4770      	bx	lr
    5f34:	00010424 	.word	0x00010424

00005f38 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5f38:	b500      	push	{lr}
    5f3a:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5f3c:	f000 f940 	bl	61c0 <Power_Ip_RCM_GetResetReason>
    5f40:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5f42:	9801      	ldr	r0, [sp, #4]
    5f44:	f7ff ffe0 	bl	5f08 <Power_Ip_ConvertIntergeToResetType>
    5f48:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5f4a:	9b00      	ldr	r3, [sp, #0]
}
    5f4c:	4618      	mov	r0, r3
    5f4e:	b003      	add	sp, #12
    5f50:	f85d fb04 	ldr.w	pc, [sp], #4

00005f54 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5f54:	b500      	push	{lr}
    5f56:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5f58:	f000 f98a 	bl	6270 <Power_Ip_RCM_GetResetRawValue>
    5f5c:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5f5e:	9b01      	ldr	r3, [sp, #4]
}
    5f60:	4618      	mov	r0, r3
    5f62:	b003      	add	sp, #12
    5f64:	f85d fb04 	ldr.w	pc, [sp], #4

00005f68 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5f68:	b500      	push	{lr}
    5f6a:	b083      	sub	sp, #12
    5f6c:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5f6e:	9b01      	ldr	r3, [sp, #4]
    5f70:	681b      	ldr	r3, [r3, #0]
    5f72:	4618      	mov	r0, r3
    5f74:	f000 f90e 	bl	6194 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5f78:	9b01      	ldr	r3, [sp, #4]
    5f7a:	685b      	ldr	r3, [r3, #4]
    5f7c:	4618      	mov	r0, r3
    5f7e:	f000 f86d 	bl	605c <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5f82:	9b01      	ldr	r3, [sp, #4]
    5f84:	689b      	ldr	r3, [r3, #8]
    5f86:	4618      	mov	r0, r3
    5f88:	f000 f990 	bl	62ac <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5f8c:	bf00      	nop
    5f8e:	b003      	add	sp, #12
    5f90:	f85d fb04 	ldr.w	pc, [sp], #4

00005f94 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5f94:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5f96:	f000 f811 	bl	5fbc <Power_Ip_CM4_DisableSleepOnExit>
}
    5f9a:	bf00      	nop
    5f9c:	bd08      	pop	{r3, pc}

00005f9e <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5f9e:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5fa0:	f000 f820 	bl	5fe4 <Power_Ip_CM4_EnableSleepOnExit>
}
    5fa4:	bf00      	nop
    5fa6:	bd08      	pop	{r3, pc}

00005fa8 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5fa8:	b082      	sub	sp, #8
    5faa:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5fac:	4a02      	ldr	r2, [pc, #8]	; (5fb8 <Power_Ip_InstallNotificationsCallback+0x10>)
    5fae:	9b01      	ldr	r3, [sp, #4]
    5fb0:	6013      	str	r3, [r2, #0]
}
    5fb2:	bf00      	nop
    5fb4:	b002      	add	sp, #8
    5fb6:	4770      	bx	lr
    5fb8:	1fff8b24 	.word	0x1fff8b24

00005fbc <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5fbc:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5fbe:	2300      	movs	r3, #0
    5fc0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5fc2:	4b07      	ldr	r3, [pc, #28]	; (5fe0 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5fc4:	681b      	ldr	r3, [r3, #0]
    5fc6:	685b      	ldr	r3, [r3, #4]
    5fc8:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5fca:	9b01      	ldr	r3, [sp, #4]
    5fcc:	f023 0302 	bic.w	r3, r3, #2
    5fd0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5fd2:	4b03      	ldr	r3, [pc, #12]	; (5fe0 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5fd4:	681b      	ldr	r3, [r3, #0]
    5fd6:	9a01      	ldr	r2, [sp, #4]
    5fd8:	605a      	str	r2, [r3, #4]
}
    5fda:	bf00      	nop
    5fdc:	b002      	add	sp, #8
    5fde:	4770      	bx	lr
    5fe0:	1fff8b28 	.word	0x1fff8b28

00005fe4 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5fe4:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5fe6:	2300      	movs	r3, #0
    5fe8:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5fea:	4b07      	ldr	r3, [pc, #28]	; (6008 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5fec:	681b      	ldr	r3, [r3, #0]
    5fee:	685b      	ldr	r3, [r3, #4]
    5ff0:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    5ff2:	9b01      	ldr	r3, [sp, #4]
    5ff4:	f043 0302 	orr.w	r3, r3, #2
    5ff8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5ffa:	4b03      	ldr	r3, [pc, #12]	; (6008 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5ffc:	681b      	ldr	r3, [r3, #0]
    5ffe:	9a01      	ldr	r2, [sp, #4]
    6000:	605a      	str	r2, [r3, #4]
}
    6002:	bf00      	nop
    6004:	b002      	add	sp, #8
    6006:	4770      	bx	lr
    6008:	1fff8b28 	.word	0x1fff8b28

0000600c <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    600c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    600e:	2300      	movs	r3, #0
    6010:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6012:	4b07      	ldr	r3, [pc, #28]	; (6030 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6014:	681b      	ldr	r3, [r3, #0]
    6016:	685b      	ldr	r3, [r3, #4]
    6018:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    601a:	9b01      	ldr	r3, [sp, #4]
    601c:	f043 0304 	orr.w	r3, r3, #4
    6020:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6022:	4b03      	ldr	r3, [pc, #12]	; (6030 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6024:	681b      	ldr	r3, [r3, #0]
    6026:	9a01      	ldr	r2, [sp, #4]
    6028:	605a      	str	r2, [r3, #4]
}
    602a:	bf00      	nop
    602c:	b002      	add	sp, #8
    602e:	4770      	bx	lr
    6030:	1fff8b28 	.word	0x1fff8b28

00006034 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    6034:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6036:	2300      	movs	r3, #0
    6038:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    603a:	4b07      	ldr	r3, [pc, #28]	; (6058 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    603c:	681b      	ldr	r3, [r3, #0]
    603e:	685b      	ldr	r3, [r3, #4]
    6040:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    6042:	9b01      	ldr	r3, [sp, #4]
    6044:	f023 0304 	bic.w	r3, r3, #4
    6048:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    604a:	4b03      	ldr	r3, [pc, #12]	; (6058 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    604c:	681b      	ldr	r3, [r3, #0]
    604e:	9a01      	ldr	r2, [sp, #4]
    6050:	605a      	str	r2, [r3, #4]
}
    6052:	bf00      	nop
    6054:	b002      	add	sp, #8
    6056:	4770      	bx	lr
    6058:	1fff8b28 	.word	0x1fff8b28

0000605c <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    605c:	b084      	sub	sp, #16
    605e:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    6060:	4b20      	ldr	r3, [pc, #128]	; (60e4 <Power_Ip_PMC_PowerInit+0x88>)
    6062:	781b      	ldrb	r3, [r3, #0]
    6064:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    6068:	f89d 300f 	ldrb.w	r3, [sp, #15]
    606c:	f003 030f 	and.w	r3, r3, #15
    6070:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    6074:	9b01      	ldr	r3, [sp, #4]
    6076:	781a      	ldrb	r2, [r3, #0]
    6078:	f89d 300f 	ldrb.w	r3, [sp, #15]
    607c:	4313      	orrs	r3, r2
    607e:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    6082:	4a18      	ldr	r2, [pc, #96]	; (60e4 <Power_Ip_PMC_PowerInit+0x88>)
    6084:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6088:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    608a:	4b16      	ldr	r3, [pc, #88]	; (60e4 <Power_Ip_PMC_PowerInit+0x88>)
    608c:	785b      	ldrb	r3, [r3, #1]
    608e:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    6092:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6096:	f003 031f 	and.w	r3, r3, #31
    609a:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    609e:	9b01      	ldr	r3, [sp, #4]
    60a0:	785a      	ldrb	r2, [r3, #1]
    60a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60a6:	4313      	orrs	r3, r2
    60a8:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    60ac:	4a0d      	ldr	r2, [pc, #52]	; (60e4 <Power_Ip_PMC_PowerInit+0x88>)
    60ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60b2:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    60b4:	4b0b      	ldr	r3, [pc, #44]	; (60e4 <Power_Ip_PMC_PowerInit+0x88>)
    60b6:	789b      	ldrb	r3, [r3, #2]
    60b8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    60bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
    60c4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    60c8:	9b01      	ldr	r3, [sp, #4]
    60ca:	789a      	ldrb	r2, [r3, #2]
    60cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60d0:	4313      	orrs	r3, r2
    60d2:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    60d6:	4a03      	ldr	r2, [pc, #12]	; (60e4 <Power_Ip_PMC_PowerInit+0x88>)
    60d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60dc:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    60de:	bf00      	nop
    60e0:	b004      	add	sp, #16
    60e2:	4770      	bx	lr
    60e4:	4007d000 	.word	0x4007d000

000060e8 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    60e8:	b500      	push	{lr}
    60ea:	b083      	sub	sp, #12
    60ec:	9001      	str	r0, [sp, #4]
    60ee:	460b      	mov	r3, r1
    60f0:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    60f4:	4b05      	ldr	r3, [pc, #20]	; (610c <Power_Ip_ReportPowerErrors+0x24>)
    60f6:	681b      	ldr	r3, [r3, #0]
    60f8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    60fc:	4611      	mov	r1, r2
    60fe:	9801      	ldr	r0, [sp, #4]
    6100:	4798      	blx	r3
}
    6102:	bf00      	nop
    6104:	b003      	add	sp, #12
    6106:	f85d fb04 	ldr.w	pc, [sp], #4
    610a:	bf00      	nop
    610c:	1fff8b24 	.word	0x1fff8b24

00006110 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6110:	b082      	sub	sp, #8
    6112:	9001      	str	r0, [sp, #4]
    6114:	460b      	mov	r3, r1
    6116:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    611a:	bf00      	nop
    611c:	b002      	add	sp, #8
    611e:	4770      	bx	lr

00006120 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    6120:	b500      	push	{lr}
    6122:	b085      	sub	sp, #20
    6124:	9003      	str	r0, [sp, #12]
    6126:	9102      	str	r1, [sp, #8]
    6128:	9201      	str	r2, [sp, #4]
    612a:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    612c:	2000      	movs	r0, #0
    612e:	f7fc f83d 	bl	21ac <OsIf_GetCounter>
    6132:	4602      	mov	r2, r0
    6134:	9b03      	ldr	r3, [sp, #12]
    6136:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    6138:	9b02      	ldr	r3, [sp, #8]
    613a:	2200      	movs	r2, #0
    613c:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    613e:	2100      	movs	r1, #0
    6140:	9800      	ldr	r0, [sp, #0]
    6142:	f7fc f87f 	bl	2244 <OsIf_MicrosToTicks>
    6146:	4602      	mov	r2, r0
    6148:	9b01      	ldr	r3, [sp, #4]
    614a:	601a      	str	r2, [r3, #0]
}
    614c:	bf00      	nop
    614e:	b005      	add	sp, #20
    6150:	f85d fb04 	ldr.w	pc, [sp], #4

00006154 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    6154:	b500      	push	{lr}
    6156:	b087      	sub	sp, #28
    6158:	9003      	str	r0, [sp, #12]
    615a:	9102      	str	r1, [sp, #8]
    615c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    615e:	2300      	movs	r3, #0
    6160:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    6164:	2100      	movs	r1, #0
    6166:	9803      	ldr	r0, [sp, #12]
    6168:	f7fc f839 	bl	21de <OsIf_GetElapsed>
    616c:	4602      	mov	r2, r0
    616e:	9b02      	ldr	r3, [sp, #8]
    6170:	681b      	ldr	r3, [r3, #0]
    6172:	441a      	add	r2, r3
    6174:	9b02      	ldr	r3, [sp, #8]
    6176:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    6178:	9b02      	ldr	r3, [sp, #8]
    617a:	681b      	ldr	r3, [r3, #0]
    617c:	9a01      	ldr	r2, [sp, #4]
    617e:	429a      	cmp	r2, r3
    6180:	d802      	bhi.n	6188 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    6182:	2301      	movs	r3, #1
    6184:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    6188:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    618c:	4618      	mov	r0, r3
    618e:	b007      	add	sp, #28
    6190:	f85d fb04 	ldr.w	pc, [sp], #4

00006194 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    6194:	b082      	sub	sp, #8
    6196:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    6198:	9b01      	ldr	r3, [sp, #4]
    619a:	681a      	ldr	r2, [r3, #0]
    619c:	4907      	ldr	r1, [pc, #28]	; (61bc <Power_Ip_RCM_ResetInit+0x28>)
    619e:	f641 7307 	movw	r3, #7943	; 0x1f07
    61a2:	4013      	ands	r3, r2
    61a4:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    61a6:	9b01      	ldr	r3, [sp, #4]
    61a8:	685a      	ldr	r2, [r3, #4]
    61aa:	4904      	ldr	r1, [pc, #16]	; (61bc <Power_Ip_RCM_ResetInit+0x28>)
    61ac:	f642 73ff 	movw	r3, #12287	; 0x2fff
    61b0:	4013      	ands	r3, r2
    61b2:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    61b4:	bf00      	nop
    61b6:	b002      	add	sp, #8
    61b8:	4770      	bx	lr
    61ba:	bf00      	nop
    61bc:	4007f000 	.word	0x4007f000

000061c0 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    61c0:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    61c2:	230c      	movs	r3, #12
    61c4:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    61c6:	2300      	movs	r3, #0
    61c8:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    61ca:	2300      	movs	r3, #0
    61cc:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    61ce:	2300      	movs	r3, #0
    61d0:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    61d2:	4b25      	ldr	r3, [pc, #148]	; (6268 <Power_Ip_RCM_GetResetReason+0xa8>)
    61d4:	699a      	ldr	r2, [r3, #24]
    61d6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    61da:	4013      	ands	r3, r2
    61dc:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    61de:	9b03      	ldr	r3, [sp, #12]
    61e0:	2b00      	cmp	r3, #0
    61e2:	d008      	beq.n	61f6 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    61e4:	4920      	ldr	r1, [pc, #128]	; (6268 <Power_Ip_RCM_GetResetReason+0xa8>)
    61e6:	9a03      	ldr	r2, [sp, #12]
    61e8:	f642 73ee 	movw	r3, #12270	; 0x2fee
    61ec:	4013      	ands	r3, r2
    61ee:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    61f0:	4a1e      	ldr	r2, [pc, #120]	; (626c <Power_Ip_RCM_GetResetReason+0xac>)
    61f2:	9b03      	ldr	r3, [sp, #12]
    61f4:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    61f6:	4b1d      	ldr	r3, [pc, #116]	; (626c <Power_Ip_RCM_GetResetReason+0xac>)
    61f8:	681b      	ldr	r3, [r3, #0]
    61fa:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    61fc:	9a02      	ldr	r2, [sp, #8]
    61fe:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6202:	4013      	ands	r3, r2
    6204:	2b82      	cmp	r3, #130	; 0x82
    6206:	d102      	bne.n	620e <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    6208:	2305      	movs	r3, #5
    620a:	9307      	str	r3, [sp, #28]
    620c:	e027      	b.n	625e <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    620e:	2300      	movs	r3, #0
    6210:	9306      	str	r3, [sp, #24]
    6212:	e021      	b.n	6258 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    6214:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6218:	9b06      	ldr	r3, [sp, #24]
    621a:	fa22 f303 	lsr.w	r3, r2, r3
    621e:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    6220:	9a01      	ldr	r2, [sp, #4]
    6222:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    6226:	4013      	ands	r3, r2
    6228:	2b00      	cmp	r3, #0
    622a:	d012      	beq.n	6252 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    622c:	9a01      	ldr	r2, [sp, #4]
    622e:	9b02      	ldr	r3, [sp, #8]
    6230:	4013      	ands	r3, r2
    6232:	2b00      	cmp	r3, #0
    6234:	d00a      	beq.n	624c <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    6236:	9b05      	ldr	r3, [sp, #20]
    6238:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    623a:	9b04      	ldr	r3, [sp, #16]
    623c:	3301      	adds	r3, #1
    623e:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    6240:	9b04      	ldr	r3, [sp, #16]
    6242:	2b01      	cmp	r3, #1
    6244:	d902      	bls.n	624c <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    6246:	230d      	movs	r3, #13
    6248:	9307      	str	r3, [sp, #28]
                        break;
    624a:	e008      	b.n	625e <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    624c:	9b05      	ldr	r3, [sp, #20]
    624e:	3301      	adds	r3, #1
    6250:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    6252:	9b06      	ldr	r3, [sp, #24]
    6254:	3301      	adds	r3, #1
    6256:	9306      	str	r3, [sp, #24]
    6258:	9b06      	ldr	r3, [sp, #24]
    625a:	2b1f      	cmp	r3, #31
    625c:	d9da      	bls.n	6214 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    625e:	9b07      	ldr	r3, [sp, #28]
}
    6260:	4618      	mov	r0, r3
    6262:	b008      	add	sp, #32
    6264:	4770      	bx	lr
    6266:	bf00      	nop
    6268:	4007f000 	.word	0x4007f000
    626c:	1fff8d04 	.word	0x1fff8d04

00006270 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    6270:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6272:	4b0c      	ldr	r3, [pc, #48]	; (62a4 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6274:	699a      	ldr	r2, [r3, #24]
    6276:	f642 73ee 	movw	r3, #12270	; 0x2fee
    627a:	4013      	ands	r3, r2
    627c:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    627e:	9b01      	ldr	r3, [sp, #4]
    6280:	2b00      	cmp	r3, #0
    6282:	d008      	beq.n	6296 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6284:	4907      	ldr	r1, [pc, #28]	; (62a4 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6286:	9a01      	ldr	r2, [sp, #4]
    6288:	f642 73ee 	movw	r3, #12270	; 0x2fee
    628c:	4013      	ands	r3, r2
    628e:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6290:	4a05      	ldr	r2, [pc, #20]	; (62a8 <Power_Ip_RCM_GetResetRawValue+0x38>)
    6292:	9b01      	ldr	r3, [sp, #4]
    6294:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    6296:	4b04      	ldr	r3, [pc, #16]	; (62a8 <Power_Ip_RCM_GetResetRawValue+0x38>)
    6298:	681b      	ldr	r3, [r3, #0]
    629a:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    629c:	9b00      	ldr	r3, [sp, #0]
}
    629e:	4618      	mov	r0, r3
    62a0:	b002      	add	sp, #8
    62a2:	4770      	bx	lr
    62a4:	4007f000 	.word	0x4007f000
    62a8:	1fff8d04 	.word	0x1fff8d04

000062ac <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    62ac:	b082      	sub	sp, #8
    62ae:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    62b0:	9b01      	ldr	r3, [sp, #4]
    62b2:	681b      	ldr	r3, [r3, #0]
    62b4:	4a03      	ldr	r2, [pc, #12]	; (62c4 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    62b6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    62ba:	6093      	str	r3, [r2, #8]
}
    62bc:	bf00      	nop
    62be:	b002      	add	sp, #8
    62c0:	4770      	bx	lr
    62c2:	bf00      	nop
    62c4:	4007e000 	.word	0x4007e000

000062c8 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    62c8:	b084      	sub	sp, #16
    62ca:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    62cc:	2301      	movs	r3, #1
    62ce:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    62d0:	4b15      	ldr	r3, [pc, #84]	; (6328 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    62d2:	695b      	ldr	r3, [r3, #20]
    62d4:	b2db      	uxtb	r3, r3
    62d6:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    62d8:	9b01      	ldr	r3, [sp, #4]
    62da:	2b02      	cmp	r3, #2
    62dc:	d012      	beq.n	6304 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    62de:	9b01      	ldr	r3, [sp, #4]
    62e0:	2b02      	cmp	r3, #2
    62e2:	d818      	bhi.n	6316 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    62e4:	9b01      	ldr	r3, [sp, #4]
    62e6:	2b00      	cmp	r3, #0
    62e8:	d003      	beq.n	62f2 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    62ea:	9b01      	ldr	r3, [sp, #4]
    62ec:	2b01      	cmp	r3, #1
    62ee:	d003      	beq.n	62f8 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    62f0:	e011      	b.n	6316 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    62f2:	2300      	movs	r3, #0
    62f4:	9303      	str	r3, [sp, #12]
            break;
    62f6:	e013      	b.n	6320 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    62f8:	9b02      	ldr	r3, [sp, #8]
    62fa:	2b01      	cmp	r3, #1
    62fc:	d10d      	bne.n	631a <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    62fe:	2300      	movs	r3, #0
    6300:	9303      	str	r3, [sp, #12]
            break;
    6302:	e00a      	b.n	631a <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    6304:	9b02      	ldr	r3, [sp, #8]
    6306:	2b01      	cmp	r3, #1
    6308:	d002      	beq.n	6310 <Power_Ip_SMC_ModeCheckEntry+0x48>
    630a:	9b02      	ldr	r3, [sp, #8]
    630c:	2b10      	cmp	r3, #16
    630e:	d106      	bne.n	631e <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    6310:	2300      	movs	r3, #0
    6312:	9303      	str	r3, [sp, #12]
            break;
    6314:	e003      	b.n	631e <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    6316:	bf00      	nop
    6318:	e002      	b.n	6320 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    631a:	bf00      	nop
    631c:	e000      	b.n	6320 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    631e:	bf00      	nop
        }
    }

    return PowerModeCheck;
    6320:	9b03      	ldr	r3, [sp, #12]
}
    6322:	4618      	mov	r0, r3
    6324:	b004      	add	sp, #16
    6326:	4770      	bx	lr
    6328:	4007e000 	.word	0x4007e000

0000632c <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    632c:	b500      	push	{lr}
    632e:	b08b      	sub	sp, #44	; 0x2c
    6330:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    6332:	2300      	movs	r3, #0
    6334:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    6336:	2300      	movs	r3, #0
    6338:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    633a:	2300      	movs	r3, #0
    633c:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    6340:	9b01      	ldr	r3, [sp, #4]
    6342:	685b      	ldr	r3, [r3, #4]
    6344:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    6346:	9b08      	ldr	r3, [sp, #32]
    6348:	2b02      	cmp	r3, #2
    634a:	d076      	beq.n	643a <Power_Ip_SMC_ModeConfig+0x10e>
    634c:	9b08      	ldr	r3, [sp, #32]
    634e:	2b02      	cmp	r3, #2
    6350:	f200 80ab 	bhi.w	64aa <Power_Ip_SMC_ModeConfig+0x17e>
    6354:	9b08      	ldr	r3, [sp, #32]
    6356:	2b00      	cmp	r3, #0
    6358:	d003      	beq.n	6362 <Power_Ip_SMC_ModeConfig+0x36>
    635a:	9b08      	ldr	r3, [sp, #32]
    635c:	2b01      	cmp	r3, #1
    635e:	d034      	beq.n	63ca <Power_Ip_SMC_ModeConfig+0x9e>
    6360:	e0a3      	b.n	64aa <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    6362:	4b58      	ldr	r3, [pc, #352]	; (64c4 <Power_Ip_SMC_ModeConfig+0x198>)
    6364:	68db      	ldr	r3, [r3, #12]
    6366:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6368:	9b06      	ldr	r3, [sp, #24]
    636a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    636e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    6370:	4a54      	ldr	r2, [pc, #336]	; (64c4 <Power_Ip_SMC_ModeConfig+0x198>)
    6372:	9b06      	ldr	r3, [sp, #24]
    6374:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6376:	aa02      	add	r2, sp, #8
    6378:	a903      	add	r1, sp, #12
    637a:	a804      	add	r0, sp, #16
    637c:	f24c 3350 	movw	r3, #50000	; 0xc350
    6380:	f7ff fece 	bl	6120 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6384:	9a02      	ldr	r2, [sp, #8]
    6386:	a903      	add	r1, sp, #12
    6388:	ab04      	add	r3, sp, #16
    638a:	4618      	mov	r0, r3
    638c:	f7ff fee2 	bl	6154 <Power_Ip_TimeoutExpired>
    6390:	4603      	mov	r3, r0
    6392:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    6396:	4b4b      	ldr	r3, [pc, #300]	; (64c4 <Power_Ip_SMC_ModeConfig+0x198>)
    6398:	695b      	ldr	r3, [r3, #20]
    639a:	f003 0301 	and.w	r3, r3, #1
    639e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    63a0:	9b05      	ldr	r3, [sp, #20]
    63a2:	2b01      	cmp	r3, #1
    63a4:	d006      	beq.n	63b4 <Power_Ip_SMC_ModeConfig+0x88>
    63a6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    63aa:	f083 0301 	eor.w	r3, r3, #1
    63ae:	b2db      	uxtb	r3, r3
    63b0:	2b00      	cmp	r3, #0
    63b2:	d1e7      	bne.n	6384 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    63b4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    63b8:	2b00      	cmp	r3, #0
    63ba:	d079      	beq.n	64b0 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    63bc:	2301      	movs	r3, #1
    63be:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    63c0:	21ff      	movs	r1, #255	; 0xff
    63c2:	2000      	movs	r0, #0
    63c4:	f7ff fe90 	bl	60e8 <Power_Ip_ReportPowerErrors>
            }

            break;
    63c8:	e072      	b.n	64b0 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    63ca:	4b3e      	ldr	r3, [pc, #248]	; (64c4 <Power_Ip_SMC_ModeConfig+0x198>)
    63cc:	68db      	ldr	r3, [r3, #12]
    63ce:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    63d0:	9b06      	ldr	r3, [sp, #24]
    63d2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    63d6:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    63d8:	9b06      	ldr	r3, [sp, #24]
    63da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    63de:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    63e0:	4a38      	ldr	r2, [pc, #224]	; (64c4 <Power_Ip_SMC_ModeConfig+0x198>)
    63e2:	9b06      	ldr	r3, [sp, #24]
    63e4:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    63e6:	aa02      	add	r2, sp, #8
    63e8:	a903      	add	r1, sp, #12
    63ea:	a804      	add	r0, sp, #16
    63ec:	f24c 3350 	movw	r3, #50000	; 0xc350
    63f0:	f7ff fe96 	bl	6120 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    63f4:	9a02      	ldr	r2, [sp, #8]
    63f6:	a903      	add	r1, sp, #12
    63f8:	ab04      	add	r3, sp, #16
    63fa:	4618      	mov	r0, r3
    63fc:	f7ff feaa 	bl	6154 <Power_Ip_TimeoutExpired>
    6400:	4603      	mov	r3, r0
    6402:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    6406:	4b2f      	ldr	r3, [pc, #188]	; (64c4 <Power_Ip_SMC_ModeConfig+0x198>)
    6408:	695b      	ldr	r3, [r3, #20]
    640a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    640e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6410:	9b05      	ldr	r3, [sp, #20]
    6412:	2b80      	cmp	r3, #128	; 0x80
    6414:	d006      	beq.n	6424 <Power_Ip_SMC_ModeConfig+0xf8>
    6416:	f89d 301f 	ldrb.w	r3, [sp, #31]
    641a:	f083 0301 	eor.w	r3, r3, #1
    641e:	b2db      	uxtb	r3, r3
    6420:	2b00      	cmp	r3, #0
    6422:	d1e7      	bne.n	63f4 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    6424:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6428:	2b00      	cmp	r3, #0
    642a:	d043      	beq.n	64b4 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    642c:	2301      	movs	r3, #1
    642e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6430:	21ff      	movs	r1, #255	; 0xff
    6432:	2000      	movs	r0, #0
    6434:	f7ff fe58 	bl	60e8 <Power_Ip_ReportPowerErrors>
            }

            break;
    6438:	e03c      	b.n	64b4 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    643a:	4b22      	ldr	r3, [pc, #136]	; (64c4 <Power_Ip_SMC_ModeConfig+0x198>)
    643c:	68db      	ldr	r3, [r3, #12]
    643e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6440:	9b06      	ldr	r3, [sp, #24]
    6442:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6446:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    6448:	9b06      	ldr	r3, [sp, #24]
    644a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    644e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6450:	4a1c      	ldr	r2, [pc, #112]	; (64c4 <Power_Ip_SMC_ModeConfig+0x198>)
    6452:	9b06      	ldr	r3, [sp, #24]
    6454:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6456:	aa02      	add	r2, sp, #8
    6458:	a903      	add	r1, sp, #12
    645a:	a804      	add	r0, sp, #16
    645c:	f24c 3350 	movw	r3, #50000	; 0xc350
    6460:	f7ff fe5e 	bl	6120 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6464:	9a02      	ldr	r2, [sp, #8]
    6466:	a903      	add	r1, sp, #12
    6468:	ab04      	add	r3, sp, #16
    646a:	4618      	mov	r0, r3
    646c:	f7ff fe72 	bl	6154 <Power_Ip_TimeoutExpired>
    6470:	4603      	mov	r3, r0
    6472:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    6476:	4b13      	ldr	r3, [pc, #76]	; (64c4 <Power_Ip_SMC_ModeConfig+0x198>)
    6478:	695b      	ldr	r3, [r3, #20]
    647a:	f003 0304 	and.w	r3, r3, #4
    647e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6480:	9b05      	ldr	r3, [sp, #20]
    6482:	2b04      	cmp	r3, #4
    6484:	d006      	beq.n	6494 <Power_Ip_SMC_ModeConfig+0x168>
    6486:	f89d 301f 	ldrb.w	r3, [sp, #31]
    648a:	f083 0301 	eor.w	r3, r3, #1
    648e:	b2db      	uxtb	r3, r3
    6490:	2b00      	cmp	r3, #0
    6492:	d1e7      	bne.n	6464 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    6494:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6498:	2b00      	cmp	r3, #0
    649a:	d00d      	beq.n	64b8 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    649c:	2301      	movs	r3, #1
    649e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    64a0:	21ff      	movs	r1, #255	; 0xff
    64a2:	2000      	movs	r0, #0
    64a4:	f7ff fe20 	bl	60e8 <Power_Ip_ReportPowerErrors>
            }

            break;
    64a8:	e006      	b.n	64b8 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    64aa:	2301      	movs	r3, #1
    64ac:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    64ae:	e004      	b.n	64ba <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    64b0:	bf00      	nop
    64b2:	e002      	b.n	64ba <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    64b4:	bf00      	nop
    64b6:	e000      	b.n	64ba <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    64b8:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    64ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    64bc:	4618      	mov	r0, r3
    64be:	b00b      	add	sp, #44	; 0x2c
    64c0:	f85d fb04 	ldr.w	pc, [sp], #4
    64c4:	4007e000 	.word	0x4007e000

000064c8 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    64c8:	b500      	push	{lr}
    64ca:	b085      	sub	sp, #20
    64cc:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    64ce:	9b01      	ldr	r3, [sp, #4]
    64d0:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    64d2:	9803      	ldr	r0, [sp, #12]
    64d4:	f000 fbc8 	bl	6c68 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    64d8:	4a03      	ldr	r2, [pc, #12]	; (64e8 <Port_Init+0x20>)
    64da:	9b03      	ldr	r3, [sp, #12]
    64dc:	6013      	str	r3, [r2, #0]
        }
    }
}
    64de:	bf00      	nop
    64e0:	b005      	add	sp, #20
    64e2:	f85d fb04 	ldr.w	pc, [sp], #4
    64e6:	bf00      	nop
    64e8:	1fff8d08 	.word	0x1fff8d08

000064ec <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    64ec:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    64ee:	4b03      	ldr	r3, [pc, #12]	; (64fc <Port_RefreshPortDirection+0x10>)
    64f0:	681b      	ldr	r3, [r3, #0]
    64f2:	4618      	mov	r0, r3
    64f4:	f000 fc10 	bl	6d18 <Port_Ipw_RefreshPortDirection>
    }
}
    64f8:	bf00      	nop
    64fa:	bd08      	pop	{r3, pc}
    64fc:	1fff8d08 	.word	0x1fff8d08

00006500 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    6500:	b086      	sub	sp, #24
    6502:	9003      	str	r0, [sp, #12]
    6504:	9102      	str	r1, [sp, #8]
    6506:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    6508:	23ff      	movs	r3, #255	; 0xff
    650a:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    650c:	9b03      	ldr	r3, [sp, #12]
    650e:	4a39      	ldr	r2, [pc, #228]	; (65f4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    6510:	4293      	cmp	r3, r2
    6512:	d151      	bne.n	65b8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    6514:	9b02      	ldr	r3, [sp, #8]
    6516:	2b10      	cmp	r3, #16
    6518:	d867      	bhi.n	65ea <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    651a:	a201      	add	r2, pc, #4	; (adr r2, 6520 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6520:	00006565 	.word	0x00006565
    6524:	00006573 	.word	0x00006573
    6528:	000065eb 	.word	0x000065eb
    652c:	000065eb 	.word	0x000065eb
    6530:	000065eb 	.word	0x000065eb
    6534:	000065eb 	.word	0x000065eb
    6538:	000065eb 	.word	0x000065eb
    653c:	000065eb 	.word	0x000065eb
    6540:	000065eb 	.word	0x000065eb
    6544:	000065eb 	.word	0x000065eb
    6548:	000065eb 	.word	0x000065eb
    654c:	000065eb 	.word	0x000065eb
    6550:	000065eb 	.word	0x000065eb
    6554:	00006581 	.word	0x00006581
    6558:	0000658f 	.word	0x0000658f
    655c:	0000659d 	.word	0x0000659d
    6560:	000065ab 	.word	0x000065ab
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    6564:	2301      	movs	r3, #1
    6566:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6568:	9a05      	ldr	r2, [sp, #20]
    656a:	9b01      	ldr	r3, [sp, #4]
    656c:	4313      	orrs	r3, r2
    656e:	9305      	str	r3, [sp, #20]
                break;
    6570:	e03c      	b.n	65ec <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    6572:	2302      	movs	r3, #2
    6574:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6576:	9a05      	ldr	r2, [sp, #20]
    6578:	9b01      	ldr	r3, [sp, #4]
    657a:	4313      	orrs	r3, r2
    657c:	9305      	str	r3, [sp, #20]
                break;
    657e:	e035      	b.n	65ec <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    6580:	2304      	movs	r3, #4
    6582:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6584:	9a05      	ldr	r2, [sp, #20]
    6586:	9b01      	ldr	r3, [sp, #4]
    6588:	4313      	orrs	r3, r2
    658a:	9305      	str	r3, [sp, #20]
                break;
    658c:	e02e      	b.n	65ec <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    658e:	2308      	movs	r3, #8
    6590:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6592:	9a05      	ldr	r2, [sp, #20]
    6594:	9b01      	ldr	r3, [sp, #4]
    6596:	4313      	orrs	r3, r2
    6598:	9305      	str	r3, [sp, #20]
                break;
    659a:	e027      	b.n	65ec <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    659c:	230e      	movs	r3, #14
    659e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    65a0:	9a05      	ldr	r2, [sp, #20]
    65a2:	9b01      	ldr	r3, [sp, #4]
    65a4:	4013      	ands	r3, r2
    65a6:	9305      	str	r3, [sp, #20]
                break;
    65a8:	e020      	b.n	65ec <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    65aa:	230d      	movs	r3, #13
    65ac:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    65ae:	9a05      	ldr	r2, [sp, #20]
    65b0:	9b01      	ldr	r3, [sp, #4]
    65b2:	4013      	ands	r3, r2
    65b4:	9305      	str	r3, [sp, #20]
                break;
    65b6:	e019      	b.n	65ec <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    65b8:	9b03      	ldr	r3, [sp, #12]
    65ba:	4a0f      	ldr	r2, [pc, #60]	; (65f8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    65bc:	4293      	cmp	r3, r2
    65be:	d115      	bne.n	65ec <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    65c0:	9b02      	ldr	r3, [sp, #8]
    65c2:	2b00      	cmp	r3, #0
    65c4:	d003      	beq.n	65ce <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    65c6:	9b02      	ldr	r3, [sp, #8]
    65c8:	2b01      	cmp	r3, #1
    65ca:	d007      	beq.n	65dc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    65cc:	e00e      	b.n	65ec <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    65ce:	230b      	movs	r3, #11
    65d0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    65d2:	9a05      	ldr	r2, [sp, #20]
    65d4:	9b01      	ldr	r3, [sp, #4]
    65d6:	4013      	ands	r3, r2
    65d8:	9305      	str	r3, [sp, #20]
                break;
    65da:	e007      	b.n	65ec <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    65dc:	2307      	movs	r3, #7
    65de:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    65e0:	9a05      	ldr	r2, [sp, #20]
    65e2:	9b01      	ldr	r3, [sp, #4]
    65e4:	4013      	ands	r3, r2
    65e6:	9305      	str	r3, [sp, #20]
                break;
    65e8:	e000      	b.n	65ec <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    65ea:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    65ec:	9b05      	ldr	r3, [sp, #20]
}
    65ee:	4618      	mov	r0, r3
    65f0:	b006      	add	sp, #24
    65f2:	4770      	bx	lr
    65f4:	4004a000 	.word	0x4004a000
    65f8:	4004b000 	.word	0x4004b000

000065fc <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    65fc:	b500      	push	{lr}
    65fe:	b089      	sub	sp, #36	; 0x24
    6600:	9003      	str	r0, [sp, #12]
    6602:	9102      	str	r1, [sp, #8]
    6604:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    6606:	9b01      	ldr	r3, [sp, #4]
    6608:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    660a:	9b01      	ldr	r3, [sp, #4]
    660c:	2b08      	cmp	r3, #8
    660e:	d121      	bne.n	6654 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    6610:	4b13      	ldr	r3, [pc, #76]	; (6660 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6612:	685b      	ldr	r3, [r3, #4]
    6614:	f003 030f 	and.w	r3, r3, #15
    6618:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    661a:	9a06      	ldr	r2, [sp, #24]
    661c:	9902      	ldr	r1, [sp, #8]
    661e:	9803      	ldr	r0, [sp, #12]
    6620:	f7ff ff6e 	bl	6500 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6624:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    6626:	9b05      	ldr	r3, [sp, #20]
    6628:	2bff      	cmp	r3, #255	; 0xff
    662a:	d011      	beq.n	6650 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    662c:	f008 f898 	bl	e760 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6630:	4b0b      	ldr	r3, [pc, #44]	; (6660 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6632:	685b      	ldr	r3, [r3, #4]
    6634:	4a0a      	ldr	r2, [pc, #40]	; (6660 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6636:	f023 030f 	bic.w	r3, r3, #15
    663a:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    663c:	4b08      	ldr	r3, [pc, #32]	; (6660 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    663e:	685a      	ldr	r2, [r3, #4]
    6640:	9b05      	ldr	r3, [sp, #20]
    6642:	f003 030f 	and.w	r3, r3, #15
    6646:	4906      	ldr	r1, [pc, #24]	; (6660 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6648:	4313      	orrs	r3, r2
    664a:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    664c:	f008 f8b4 	bl	e7b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6650:	2300      	movs	r3, #0
    6652:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6654:	9b07      	ldr	r3, [sp, #28]
}
    6656:	4618      	mov	r0, r3
    6658:	b009      	add	sp, #36	; 0x24
    665a:	f85d fb04 	ldr.w	pc, [sp], #4
    665e:	bf00      	nop
    6660:	40048000 	.word	0x40048000

00006664 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6664:	b500      	push	{lr}
    6666:	b087      	sub	sp, #28
    6668:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    666a:	2300      	movs	r3, #0
    666c:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    666e:	2300      	movs	r3, #0
    6670:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    6672:	2300      	movs	r3, #0
    6674:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    6676:	9b01      	ldr	r3, [sp, #4]
    6678:	68db      	ldr	r3, [r3, #12]
    667a:	2b02      	cmp	r3, #2
    667c:	d00a      	beq.n	6694 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    667e:	9b05      	ldr	r3, [sp, #20]
    6680:	f043 0302 	orr.w	r3, r3, #2
    6684:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    6686:	9b01      	ldr	r3, [sp, #4]
    6688:	68db      	ldr	r3, [r3, #12]
    668a:	f003 0301 	and.w	r3, r3, #1
    668e:	9a05      	ldr	r2, [sp, #20]
    6690:	4313      	orrs	r3, r2
    6692:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    6694:	9b01      	ldr	r3, [sp, #4]
    6696:	699b      	ldr	r3, [r3, #24]
    6698:	019b      	lsls	r3, r3, #6
    669a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    669e:	9a05      	ldr	r2, [sp, #20]
    66a0:	4313      	orrs	r3, r2
    66a2:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    66a4:	9b01      	ldr	r3, [sp, #4]
    66a6:	6a1b      	ldr	r3, [r3, #32]
    66a8:	03db      	lsls	r3, r3, #15
    66aa:	b29b      	uxth	r3, r3
    66ac:	9a05      	ldr	r2, [sp, #20]
    66ae:	4313      	orrs	r3, r2
    66b0:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    66b2:	9b01      	ldr	r3, [sp, #4]
    66b4:	7f1b      	ldrb	r3, [r3, #28]
    66b6:	2b00      	cmp	r3, #0
    66b8:	d001      	beq.n	66be <Port_Ci_Port_Ip_PinInit+0x5a>
    66ba:	2310      	movs	r3, #16
    66bc:	e000      	b.n	66c0 <Port_Ci_Port_Ip_PinInit+0x5c>
    66be:	2300      	movs	r3, #0
    66c0:	9a05      	ldr	r2, [sp, #20]
    66c2:	4313      	orrs	r3, r2
    66c4:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    66c6:	9b01      	ldr	r3, [sp, #4]
    66c8:	691b      	ldr	r3, [r3, #16]
    66ca:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    66cc:	9b01      	ldr	r3, [sp, #4]
    66ce:	6818      	ldr	r0, [r3, #0]
    66d0:	9b01      	ldr	r3, [sp, #4]
    66d2:	689b      	ldr	r3, [r3, #8]
    66d4:	9a04      	ldr	r2, [sp, #16]
    66d6:	4619      	mov	r1, r3
    66d8:	f7ff ff90 	bl	65fc <Port_Ci_Port_Ip_ConfigureInterleave>
    66dc:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    66de:	9b03      	ldr	r3, [sp, #12]
    66e0:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    66e2:	9b04      	ldr	r3, [sp, #16]
    66e4:	021b      	lsls	r3, r3, #8
    66e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    66ea:	9a05      	ldr	r2, [sp, #20]
    66ec:	4313      	orrs	r3, r2
    66ee:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    66f0:	f007 fe9c 	bl	e42c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    66f4:	9b01      	ldr	r3, [sp, #4]
    66f6:	681b      	ldr	r3, [r3, #0]
    66f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    66fc:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    66fe:	9b01      	ldr	r3, [sp, #4]
    6700:	689b      	ldr	r3, [r3, #8]
    6702:	2201      	movs	r2, #1
    6704:	fa02 f303 	lsl.w	r3, r2, r3
    6708:	43db      	mvns	r3, r3
    670a:	9a02      	ldr	r2, [sp, #8]
    670c:	4013      	ands	r3, r2
    670e:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    6710:	9b01      	ldr	r3, [sp, #4]
    6712:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6716:	2b00      	cmp	r3, #0
    6718:	d001      	beq.n	671e <Port_Ci_Port_Ip_PinInit+0xba>
    671a:	2201      	movs	r2, #1
    671c:	e000      	b.n	6720 <Port_Ci_Port_Ip_PinInit+0xbc>
    671e:	2200      	movs	r2, #0
    6720:	9b01      	ldr	r3, [sp, #4]
    6722:	689b      	ldr	r3, [r3, #8]
    6724:	fa02 f303 	lsl.w	r3, r2, r3
    6728:	9a02      	ldr	r2, [sp, #8]
    672a:	4313      	orrs	r3, r2
    672c:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    672e:	9b01      	ldr	r3, [sp, #4]
    6730:	681b      	ldr	r3, [r3, #0]
    6732:	9a02      	ldr	r2, [sp, #8]
    6734:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6738:	f007 fea4 	bl	e484 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    673c:	9b04      	ldr	r3, [sp, #16]
    673e:	2b01      	cmp	r3, #1
    6740:	d16d      	bne.n	681e <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6742:	9b01      	ldr	r3, [sp, #4]
    6744:	695b      	ldr	r3, [r3, #20]
    6746:	2b02      	cmp	r3, #2
    6748:	d138      	bne.n	67bc <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    674a:	9b01      	ldr	r3, [sp, #4]
    674c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6750:	2b01      	cmp	r3, #1
    6752:	d10f      	bne.n	6774 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6754:	f007 febc 	bl	e4d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6758:	9b01      	ldr	r3, [sp, #4]
    675a:	685b      	ldr	r3, [r3, #4]
    675c:	6859      	ldr	r1, [r3, #4]
    675e:	9b01      	ldr	r3, [sp, #4]
    6760:	689b      	ldr	r3, [r3, #8]
    6762:	2201      	movs	r2, #1
    6764:	409a      	lsls	r2, r3
    6766:	9b01      	ldr	r3, [sp, #4]
    6768:	685b      	ldr	r3, [r3, #4]
    676a:	430a      	orrs	r2, r1
    676c:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    676e:	f007 fedb 	bl	e528 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    6772:	e013      	b.n	679c <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6774:	9b01      	ldr	r3, [sp, #4]
    6776:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    677a:	2b00      	cmp	r3, #0
    677c:	d10e      	bne.n	679c <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    677e:	f007 fef9 	bl	e574 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    6782:	9b01      	ldr	r3, [sp, #4]
    6784:	685b      	ldr	r3, [r3, #4]
    6786:	6899      	ldr	r1, [r3, #8]
    6788:	9b01      	ldr	r3, [sp, #4]
    678a:	689b      	ldr	r3, [r3, #8]
    678c:	2201      	movs	r2, #1
    678e:	409a      	lsls	r2, r3
    6790:	9b01      	ldr	r3, [sp, #4]
    6792:	685b      	ldr	r3, [r3, #4]
    6794:	430a      	orrs	r2, r1
    6796:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6798:	f007 ff18 	bl	e5cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    679c:	f007 ff3c 	bl	e618 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    67a0:	9b01      	ldr	r3, [sp, #4]
    67a2:	685b      	ldr	r3, [r3, #4]
    67a4:	6959      	ldr	r1, [r3, #20]
    67a6:	9b01      	ldr	r3, [sp, #4]
    67a8:	689b      	ldr	r3, [r3, #8]
    67aa:	2201      	movs	r2, #1
    67ac:	409a      	lsls	r2, r3
    67ae:	9b01      	ldr	r3, [sp, #4]
    67b0:	685b      	ldr	r3, [r3, #4]
    67b2:	430a      	orrs	r2, r1
    67b4:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    67b6:	f007 ff5b 	bl	e670 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    67ba:	e030      	b.n	681e <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    67bc:	f007 ff2c 	bl	e618 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    67c0:	9b01      	ldr	r3, [sp, #4]
    67c2:	685b      	ldr	r3, [r3, #4]
    67c4:	6959      	ldr	r1, [r3, #20]
    67c6:	9b01      	ldr	r3, [sp, #4]
    67c8:	689b      	ldr	r3, [r3, #8]
    67ca:	2201      	movs	r2, #1
    67cc:	fa02 f303 	lsl.w	r3, r2, r3
    67d0:	43da      	mvns	r2, r3
    67d2:	9b01      	ldr	r3, [sp, #4]
    67d4:	685b      	ldr	r3, [r3, #4]
    67d6:	400a      	ands	r2, r1
    67d8:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    67da:	f007 ff49 	bl	e670 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    67de:	f007 ff6d 	bl	e6bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    67e2:	9b01      	ldr	r3, [sp, #4]
    67e4:	685b      	ldr	r3, [r3, #4]
    67e6:	6999      	ldr	r1, [r3, #24]
    67e8:	9b01      	ldr	r3, [sp, #4]
    67ea:	689b      	ldr	r3, [r3, #8]
    67ec:	2201      	movs	r2, #1
    67ee:	fa02 f303 	lsl.w	r3, r2, r3
    67f2:	43da      	mvns	r2, r3
    67f4:	9b01      	ldr	r3, [sp, #4]
    67f6:	685b      	ldr	r3, [r3, #4]
    67f8:	400a      	ands	r2, r1
    67fa:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    67fc:	9b01      	ldr	r3, [sp, #4]
    67fe:	695b      	ldr	r3, [r3, #20]
    6800:	2b03      	cmp	r3, #3
    6802:	d10a      	bne.n	681a <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6804:	9b01      	ldr	r3, [sp, #4]
    6806:	685b      	ldr	r3, [r3, #4]
    6808:	6999      	ldr	r1, [r3, #24]
    680a:	9b01      	ldr	r3, [sp, #4]
    680c:	689b      	ldr	r3, [r3, #8]
    680e:	2201      	movs	r2, #1
    6810:	409a      	lsls	r2, r3
    6812:	9b01      	ldr	r3, [sp, #4]
    6814:	685b      	ldr	r3, [r3, #4]
    6816:	430a      	orrs	r2, r1
    6818:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    681a:	f007 ff7b 	bl	e714 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    681e:	9b01      	ldr	r3, [sp, #4]
    6820:	681b      	ldr	r3, [r3, #0]
    6822:	9a01      	ldr	r2, [sp, #4]
    6824:	6892      	ldr	r2, [r2, #8]
    6826:	9905      	ldr	r1, [sp, #20]
    6828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    682c:	bf00      	nop
    682e:	b007      	add	sp, #28
    6830:	f85d fb04 	ldr.w	pc, [sp], #4

00006834 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6834:	b500      	push	{lr}
    6836:	b085      	sub	sp, #20
    6838:	9001      	str	r0, [sp, #4]
    683a:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    683c:	2300      	movs	r3, #0
    683e:	9303      	str	r3, [sp, #12]
    6840:	e00d      	b.n	685e <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6842:	9a03      	ldr	r2, [sp, #12]
    6844:	4613      	mov	r3, r2
    6846:	009b      	lsls	r3, r3, #2
    6848:	4413      	add	r3, r2
    684a:	00db      	lsls	r3, r3, #3
    684c:	461a      	mov	r2, r3
    684e:	9b00      	ldr	r3, [sp, #0]
    6850:	4413      	add	r3, r2
    6852:	4618      	mov	r0, r3
    6854:	f7ff ff06 	bl	6664 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6858:	9b03      	ldr	r3, [sp, #12]
    685a:	3301      	adds	r3, #1
    685c:	9303      	str	r3, [sp, #12]
    685e:	9a03      	ldr	r2, [sp, #12]
    6860:	9b01      	ldr	r3, [sp, #4]
    6862:	429a      	cmp	r2, r3
    6864:	d3ed      	bcc.n	6842 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    6866:	2300      	movs	r3, #0
}
    6868:	4618      	mov	r0, r3
    686a:	b005      	add	sp, #20
    686c:	f85d fb04 	ldr.w	pc, [sp], #4

00006870 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6870:	b500      	push	{lr}
    6872:	b087      	sub	sp, #28
    6874:	9003      	str	r0, [sp, #12]
    6876:	9102      	str	r1, [sp, #8]
    6878:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    687a:	9a01      	ldr	r2, [sp, #4]
    687c:	9902      	ldr	r1, [sp, #8]
    687e:	9803      	ldr	r0, [sp, #12]
    6880:	f7ff febc 	bl	65fc <Port_Ci_Port_Ip_ConfigureInterleave>
    6884:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    6886:	f007 ffbd 	bl	e804 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    688a:	9b03      	ldr	r3, [sp, #12]
    688c:	9a02      	ldr	r2, [sp, #8]
    688e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6892:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    6894:	9b04      	ldr	r3, [sp, #16]
    6896:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    689a:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    689c:	9b05      	ldr	r3, [sp, #20]
    689e:	021b      	lsls	r3, r3, #8
    68a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    68a4:	9a04      	ldr	r2, [sp, #16]
    68a6:	4313      	orrs	r3, r2
    68a8:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    68aa:	9b03      	ldr	r3, [sp, #12]
    68ac:	9a02      	ldr	r2, [sp, #8]
    68ae:	9904      	ldr	r1, [sp, #16]
    68b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    68b4:	f007 ffd2 	bl	e85c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    68b8:	bf00      	nop
    68ba:	b007      	add	sp, #28
    68bc:	f85d fb04 	ldr.w	pc, [sp], #4

000068c0 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    68c0:	b500      	push	{lr}
    68c2:	b083      	sub	sp, #12
    68c4:	9001      	str	r0, [sp, #4]
    68c6:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    68c8:	f007 ffee 	bl	e8a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    68cc:	9b01      	ldr	r3, [sp, #4]
    68ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    68d2:	2101      	movs	r1, #1
    68d4:	9b00      	ldr	r3, [sp, #0]
    68d6:	fa01 f303 	lsl.w	r3, r1, r3
    68da:	431a      	orrs	r2, r3
    68dc:	9b01      	ldr	r3, [sp, #4]
    68de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    68e2:	f008 f80d 	bl	e900 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    68e6:	bf00      	nop
    68e8:	b003      	add	sp, #12
    68ea:	f85d fb04 	ldr.w	pc, [sp], #4

000068ee <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    68ee:	b500      	push	{lr}
    68f0:	b083      	sub	sp, #12
    68f2:	9001      	str	r0, [sp, #4]
    68f4:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    68f6:	f008 f829 	bl	e94c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    68fa:	9b01      	ldr	r3, [sp, #4]
    68fc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6900:	2101      	movs	r1, #1
    6902:	9b00      	ldr	r3, [sp, #0]
    6904:	fa01 f303 	lsl.w	r3, r1, r3
    6908:	43db      	mvns	r3, r3
    690a:	401a      	ands	r2, r3
    690c:	9b01      	ldr	r3, [sp, #4]
    690e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    6912:	f008 f847 	bl	e9a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6916:	bf00      	nop
    6918:	b003      	add	sp, #12
    691a:	f85d fb04 	ldr.w	pc, [sp], #4

0000691e <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    691e:	b082      	sub	sp, #8
    6920:	9001      	str	r0, [sp, #4]
    6922:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6924:	9b00      	ldr	r3, [sp, #0]
    6926:	785b      	ldrb	r3, [r3, #1]
    6928:	f003 0201 	and.w	r2, r3, #1
    692c:	9b01      	ldr	r3, [sp, #4]
    692e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6932:	9b00      	ldr	r3, [sp, #0]
    6934:	789b      	ldrb	r3, [r3, #2]
    6936:	f003 021f 	and.w	r2, r3, #31
    693a:	9b01      	ldr	r3, [sp, #4]
    693c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6940:	bf00      	nop
    6942:	b002      	add	sp, #8
    6944:	4770      	bx	lr

00006946 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6946:	b086      	sub	sp, #24
    6948:	9003      	str	r0, [sp, #12]
    694a:	9301      	str	r3, [sp, #4]
    694c:	460b      	mov	r3, r1
    694e:	f8ad 300a 	strh.w	r3, [sp, #10]
    6952:	4613      	mov	r3, r2
    6954:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6958:	2300      	movs	r3, #0
    695a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    695e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6962:	f043 0301 	orr.w	r3, r3, #1
    6966:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    696a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    696e:	f043 0302 	orr.w	r3, r3, #2
    6972:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    6976:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    697a:	f043 0310 	orr.w	r3, r3, #16
    697e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    6982:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    698a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    698e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6992:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    6996:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    699a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    699e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    69a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    69a6:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    69aa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    69ae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    69b2:	4013      	ands	r3, r2
    69b4:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    69b8:	9b01      	ldr	r3, [sp, #4]
    69ba:	2b00      	cmp	r3, #0
    69bc:	d003      	beq.n	69c6 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    69be:	9b01      	ldr	r3, [sp, #4]
    69c0:	2b01      	cmp	r3, #1
    69c2:	d00a      	beq.n	69da <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    69c4:	e013      	b.n	69ee <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    69c6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    69ca:	041a      	lsls	r2, r3, #16
    69cc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69d0:	431a      	orrs	r2, r3
    69d2:	9b03      	ldr	r3, [sp, #12]
    69d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    69d8:	e009      	b.n	69ee <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    69da:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    69de:	041a      	lsls	r2, r3, #16
    69e0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69e4:	431a      	orrs	r2, r3
    69e6:	9b03      	ldr	r3, [sp, #12]
    69e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    69ec:	bf00      	nop
    }
}
    69ee:	bf00      	nop
    69f0:	b006      	add	sp, #24
    69f2:	4770      	bx	lr

000069f4 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    69f4:	b500      	push	{lr}
    69f6:	b087      	sub	sp, #28
    69f8:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    69fa:	9b01      	ldr	r3, [sp, #4]
    69fc:	885b      	ldrh	r3, [r3, #2]
    69fe:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6a02:	9b01      	ldr	r3, [sp, #4]
    6a04:	689b      	ldr	r3, [r3, #8]
    6a06:	7a1b      	ldrb	r3, [r3, #8]
    6a08:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6a0c:	9b01      	ldr	r3, [sp, #4]
    6a0e:	689b      	ldr	r3, [r3, #8]
    6a10:	681b      	ldr	r3, [r3, #0]
    6a12:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6a14:	9b01      	ldr	r3, [sp, #4]
    6a16:	689b      	ldr	r3, [r3, #8]
    6a18:	685b      	ldr	r3, [r3, #4]
    6a1a:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6a1c:	2300      	movs	r3, #0
    6a1e:	f8ad 3016 	strh.w	r3, [sp, #22]
    6a22:	e111      	b.n	6c48 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6a24:	9b02      	ldr	r3, [sp, #8]
    6a26:	2b02      	cmp	r3, #2
    6a28:	d169      	bne.n	6afe <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6a2a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6a2e:	2b01      	cmp	r3, #1
    6a30:	d11a      	bne.n	6a68 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6a32:	9b01      	ldr	r3, [sp, #4]
    6a34:	685a      	ldr	r2, [r3, #4]
    6a36:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a3a:	005b      	lsls	r3, r3, #1
    6a3c:	4413      	add	r3, r2
    6a3e:	881b      	ldrh	r3, [r3, #0]
    6a40:	f003 021f 	and.w	r2, r3, #31
    6a44:	9b01      	ldr	r3, [sp, #4]
    6a46:	6859      	ldr	r1, [r3, #4]
    6a48:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a4c:	005b      	lsls	r3, r3, #1
    6a4e:	440b      	add	r3, r1
    6a50:	881b      	ldrh	r3, [r3, #0]
    6a52:	095b      	lsrs	r3, r3, #5
    6a54:	b29b      	uxth	r3, r3
    6a56:	4619      	mov	r1, r3
    6a58:	4b81      	ldr	r3, [pc, #516]	; (6c60 <Port_Ipw_Init_UnusedPins+0x26c>)
    6a5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6a5e:	2101      	movs	r1, #1
    6a60:	fa01 f202 	lsl.w	r2, r1, r2
    6a64:	605a      	str	r2, [r3, #4]
    6a66:	e01d      	b.n	6aa4 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6a68:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6a6c:	2b00      	cmp	r3, #0
    6a6e:	d119      	bne.n	6aa4 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6a70:	9b01      	ldr	r3, [sp, #4]
    6a72:	685a      	ldr	r2, [r3, #4]
    6a74:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a78:	005b      	lsls	r3, r3, #1
    6a7a:	4413      	add	r3, r2
    6a7c:	881b      	ldrh	r3, [r3, #0]
    6a7e:	f003 021f 	and.w	r2, r3, #31
    6a82:	9b01      	ldr	r3, [sp, #4]
    6a84:	6859      	ldr	r1, [r3, #4]
    6a86:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a8a:	005b      	lsls	r3, r3, #1
    6a8c:	440b      	add	r3, r1
    6a8e:	881b      	ldrh	r3, [r3, #0]
    6a90:	095b      	lsrs	r3, r3, #5
    6a92:	b29b      	uxth	r3, r3
    6a94:	4619      	mov	r1, r3
    6a96:	4b72      	ldr	r3, [pc, #456]	; (6c60 <Port_Ipw_Init_UnusedPins+0x26c>)
    6a98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6a9c:	2101      	movs	r1, #1
    6a9e:	fa01 f202 	lsl.w	r2, r1, r2
    6aa2:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6aa4:	f007 ffa4 	bl	e9f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6aa8:	9b01      	ldr	r3, [sp, #4]
    6aaa:	685a      	ldr	r2, [r3, #4]
    6aac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ab0:	005b      	lsls	r3, r3, #1
    6ab2:	4413      	add	r3, r2
    6ab4:	881b      	ldrh	r3, [r3, #0]
    6ab6:	095b      	lsrs	r3, r3, #5
    6ab8:	b29b      	uxth	r3, r3
    6aba:	461a      	mov	r2, r3
    6abc:	4b68      	ldr	r3, [pc, #416]	; (6c60 <Port_Ipw_Init_UnusedPins+0x26c>)
    6abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6ac2:	6959      	ldr	r1, [r3, #20]
    6ac4:	9b01      	ldr	r3, [sp, #4]
    6ac6:	685a      	ldr	r2, [r3, #4]
    6ac8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6acc:	005b      	lsls	r3, r3, #1
    6ace:	4413      	add	r3, r2
    6ad0:	881b      	ldrh	r3, [r3, #0]
    6ad2:	f003 031f 	and.w	r3, r3, #31
    6ad6:	2201      	movs	r2, #1
    6ad8:	409a      	lsls	r2, r3
    6ada:	9b01      	ldr	r3, [sp, #4]
    6adc:	6858      	ldr	r0, [r3, #4]
    6ade:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ae2:	005b      	lsls	r3, r3, #1
    6ae4:	4403      	add	r3, r0
    6ae6:	881b      	ldrh	r3, [r3, #0]
    6ae8:	095b      	lsrs	r3, r3, #5
    6aea:	b29b      	uxth	r3, r3
    6aec:	4618      	mov	r0, r3
    6aee:	4b5c      	ldr	r3, [pc, #368]	; (6c60 <Port_Ipw_Init_UnusedPins+0x26c>)
    6af0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6af4:	430a      	orrs	r2, r1
    6af6:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6af8:	f007 ffa6 	bl	ea48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6afc:	e086      	b.n	6c0c <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6afe:	f007 ff77 	bl	e9f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    6b02:	9b01      	ldr	r3, [sp, #4]
    6b04:	685a      	ldr	r2, [r3, #4]
    6b06:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b0a:	005b      	lsls	r3, r3, #1
    6b0c:	4413      	add	r3, r2
    6b0e:	881b      	ldrh	r3, [r3, #0]
    6b10:	095b      	lsrs	r3, r3, #5
    6b12:	b29b      	uxth	r3, r3
    6b14:	461a      	mov	r2, r3
    6b16:	4b52      	ldr	r3, [pc, #328]	; (6c60 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b1c:	6959      	ldr	r1, [r3, #20]
    6b1e:	9b01      	ldr	r3, [sp, #4]
    6b20:	685a      	ldr	r2, [r3, #4]
    6b22:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b26:	005b      	lsls	r3, r3, #1
    6b28:	4413      	add	r3, r2
    6b2a:	881b      	ldrh	r3, [r3, #0]
    6b2c:	f003 031f 	and.w	r3, r3, #31
    6b30:	2201      	movs	r2, #1
    6b32:	fa02 f303 	lsl.w	r3, r2, r3
    6b36:	43da      	mvns	r2, r3
    6b38:	9b01      	ldr	r3, [sp, #4]
    6b3a:	6858      	ldr	r0, [r3, #4]
    6b3c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b40:	005b      	lsls	r3, r3, #1
    6b42:	4403      	add	r3, r0
    6b44:	881b      	ldrh	r3, [r3, #0]
    6b46:	095b      	lsrs	r3, r3, #5
    6b48:	b29b      	uxth	r3, r3
    6b4a:	4618      	mov	r0, r3
    6b4c:	4b44      	ldr	r3, [pc, #272]	; (6c60 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b4e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6b52:	400a      	ands	r2, r1
    6b54:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6b56:	f007 ff77 	bl	ea48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    6b5a:	f007 ff9b 	bl	ea94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6b5e:	9b01      	ldr	r3, [sp, #4]
    6b60:	685a      	ldr	r2, [r3, #4]
    6b62:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b66:	005b      	lsls	r3, r3, #1
    6b68:	4413      	add	r3, r2
    6b6a:	881b      	ldrh	r3, [r3, #0]
    6b6c:	095b      	lsrs	r3, r3, #5
    6b6e:	b29b      	uxth	r3, r3
    6b70:	461a      	mov	r2, r3
    6b72:	4b3b      	ldr	r3, [pc, #236]	; (6c60 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b78:	6999      	ldr	r1, [r3, #24]
    6b7a:	9b01      	ldr	r3, [sp, #4]
    6b7c:	685a      	ldr	r2, [r3, #4]
    6b7e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b82:	005b      	lsls	r3, r3, #1
    6b84:	4413      	add	r3, r2
    6b86:	881b      	ldrh	r3, [r3, #0]
    6b88:	f003 031f 	and.w	r3, r3, #31
    6b8c:	2201      	movs	r2, #1
    6b8e:	fa02 f303 	lsl.w	r3, r2, r3
    6b92:	43da      	mvns	r2, r3
    6b94:	9b01      	ldr	r3, [sp, #4]
    6b96:	6858      	ldr	r0, [r3, #4]
    6b98:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b9c:	005b      	lsls	r3, r3, #1
    6b9e:	4403      	add	r3, r0
    6ba0:	881b      	ldrh	r3, [r3, #0]
    6ba2:	095b      	lsrs	r3, r3, #5
    6ba4:	b29b      	uxth	r3, r3
    6ba6:	4618      	mov	r0, r3
    6ba8:	4b2d      	ldr	r3, [pc, #180]	; (6c60 <Port_Ipw_Init_UnusedPins+0x26c>)
    6baa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6bae:	400a      	ands	r2, r1
    6bb0:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6bb2:	9b02      	ldr	r3, [sp, #8]
    6bb4:	2b03      	cmp	r3, #3
    6bb6:	d127      	bne.n	6c08 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6bb8:	9b01      	ldr	r3, [sp, #4]
    6bba:	685a      	ldr	r2, [r3, #4]
    6bbc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bc0:	005b      	lsls	r3, r3, #1
    6bc2:	4413      	add	r3, r2
    6bc4:	881b      	ldrh	r3, [r3, #0]
    6bc6:	095b      	lsrs	r3, r3, #5
    6bc8:	b29b      	uxth	r3, r3
    6bca:	461a      	mov	r2, r3
    6bcc:	4b24      	ldr	r3, [pc, #144]	; (6c60 <Port_Ipw_Init_UnusedPins+0x26c>)
    6bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6bd2:	6999      	ldr	r1, [r3, #24]
    6bd4:	9b01      	ldr	r3, [sp, #4]
    6bd6:	685a      	ldr	r2, [r3, #4]
    6bd8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bdc:	005b      	lsls	r3, r3, #1
    6bde:	4413      	add	r3, r2
    6be0:	881b      	ldrh	r3, [r3, #0]
    6be2:	f003 031f 	and.w	r3, r3, #31
    6be6:	2201      	movs	r2, #1
    6be8:	409a      	lsls	r2, r3
    6bea:	9b01      	ldr	r3, [sp, #4]
    6bec:	6858      	ldr	r0, [r3, #4]
    6bee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bf2:	005b      	lsls	r3, r3, #1
    6bf4:	4403      	add	r3, r0
    6bf6:	881b      	ldrh	r3, [r3, #0]
    6bf8:	095b      	lsrs	r3, r3, #5
    6bfa:	b29b      	uxth	r3, r3
    6bfc:	4618      	mov	r0, r3
    6bfe:	4b18      	ldr	r3, [pc, #96]	; (6c60 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c00:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6c04:	430a      	orrs	r2, r1
    6c06:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6c08:	f007 ff70 	bl	eaec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6c0c:	9b01      	ldr	r3, [sp, #4]
    6c0e:	685a      	ldr	r2, [r3, #4]
    6c10:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c14:	005b      	lsls	r3, r3, #1
    6c16:	4413      	add	r3, r2
    6c18:	881b      	ldrh	r3, [r3, #0]
    6c1a:	095b      	lsrs	r3, r3, #5
    6c1c:	b29b      	uxth	r3, r3
    6c1e:	461a      	mov	r2, r3
    6c20:	4b10      	ldr	r3, [pc, #64]	; (6c64 <Port_Ipw_Init_UnusedPins+0x270>)
    6c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6c26:	9a01      	ldr	r2, [sp, #4]
    6c28:	6851      	ldr	r1, [r2, #4]
    6c2a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6c2e:	0052      	lsls	r2, r2, #1
    6c30:	440a      	add	r2, r1
    6c32:	8812      	ldrh	r2, [r2, #0]
    6c34:	f002 021f 	and.w	r2, r2, #31
    6c38:	9903      	ldr	r1, [sp, #12]
    6c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6c3e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c42:	3301      	adds	r3, #1
    6c44:	f8ad 3016 	strh.w	r3, [sp, #22]
    6c48:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6c4c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6c50:	429a      	cmp	r2, r3
    6c52:	f4ff aee7 	bcc.w	6a24 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6c56:	bf00      	nop
    6c58:	bf00      	nop
    6c5a:	b007      	add	sp, #28
    6c5c:	f85d fb04 	ldr.w	pc, [sp], #4
    6c60:	00010474 	.word	0x00010474
    6c64:	00010460 	.word	0x00010460

00006c68 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6c68:	b500      	push	{lr}
    6c6a:	b085      	sub	sp, #20
    6c6c:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    6c6e:	9b01      	ldr	r3, [sp, #4]
    6c70:	7c1b      	ldrb	r3, [r3, #16]
    6c72:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6c76:	2300      	movs	r3, #0
    6c78:	f8ad 300e 	strh.w	r3, [sp, #14]
    6c7c:	e035      	b.n	6cea <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    6c7e:	9b01      	ldr	r3, [sp, #4]
    6c80:	695a      	ldr	r2, [r3, #20]
    6c82:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6c86:	00db      	lsls	r3, r3, #3
    6c88:	4413      	add	r3, r2
    6c8a:	781b      	ldrb	r3, [r3, #0]
    6c8c:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6c90:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6c94:	4a1f      	ldr	r2, [pc, #124]	; (6d14 <Port_Ipw_Init+0xac>)
    6c96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6c9a:	9b01      	ldr	r3, [sp, #4]
    6c9c:	695a      	ldr	r2, [r3, #20]
    6c9e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6ca2:	00db      	lsls	r3, r3, #3
    6ca4:	4413      	add	r3, r2
    6ca6:	4619      	mov	r1, r3
    6ca8:	f7ff fe39 	bl	691e <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6cac:	f008 f88c 	bl	edc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6cb0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6cb4:	4a17      	ldr	r2, [pc, #92]	; (6d14 <Port_Ipw_Init+0xac>)
    6cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cba:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    6cbe:	9b01      	ldr	r3, [sp, #4]
    6cc0:	695a      	ldr	r2, [r3, #20]
    6cc2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6cc6:	00db      	lsls	r3, r3, #3
    6cc8:	4413      	add	r3, r2
    6cca:	685a      	ldr	r2, [r3, #4]
    6ccc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6cd0:	4810      	ldr	r0, [pc, #64]	; (6d14 <Port_Ipw_Init+0xac>)
    6cd2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6cd6:	430a      	orrs	r2, r1
    6cd8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    6cdc:	f008 f8a0 	bl	ee20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6ce0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6ce4:	3301      	adds	r3, #1
    6ce6:	f8ad 300e 	strh.w	r3, [sp, #14]
    6cea:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6cee:	b29b      	uxth	r3, r3
    6cf0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6cf4:	429a      	cmp	r2, r3
    6cf6:	d3c2      	bcc.n	6c7e <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6cf8:	9b01      	ldr	r3, [sp, #4]
    6cfa:	6a1b      	ldr	r3, [r3, #32]
    6cfc:	4619      	mov	r1, r3
    6cfe:	2010      	movs	r0, #16
    6d00:	f7ff fd98 	bl	6834 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6d04:	9801      	ldr	r0, [sp, #4]
    6d06:	f7ff fe75 	bl	69f4 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    6d0a:	bf00      	nop
    6d0c:	b005      	add	sp, #20
    6d0e:	f85d fb04 	ldr.w	pc, [sp], #4
    6d12:	bf00      	nop
    6d14:	00010460 	.word	0x00010460

00006d18 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    6d18:	b500      	push	{lr}
    6d1a:	b085      	sub	sp, #20
    6d1c:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    6d1e:	9b01      	ldr	r3, [sp, #4]
    6d20:	881b      	ldrh	r3, [r3, #0]
    6d22:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6d26:	2300      	movs	r3, #0
    6d28:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d2c:	e0d2      	b.n	6ed4 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    6d2e:	9b01      	ldr	r3, [sp, #4]
    6d30:	68d9      	ldr	r1, [r3, #12]
    6d32:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6d36:	4613      	mov	r3, r2
    6d38:	009b      	lsls	r3, r3, #2
    6d3a:	4413      	add	r3, r2
    6d3c:	009b      	lsls	r3, r3, #2
    6d3e:	440b      	add	r3, r1
    6d40:	7c5b      	ldrb	r3, [r3, #17]
    6d42:	f083 0301 	eor.w	r3, r3, #1
    6d46:	b2db      	uxtb	r3, r3
    6d48:	2b00      	cmp	r3, #0
    6d4a:	f000 80be 	beq.w	6eca <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    6d4e:	9b01      	ldr	r3, [sp, #4]
    6d50:	68d9      	ldr	r1, [r3, #12]
    6d52:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6d56:	4613      	mov	r3, r2
    6d58:	009b      	lsls	r3, r3, #2
    6d5a:	4413      	add	r3, r2
    6d5c:	009b      	lsls	r3, r3, #2
    6d5e:	440b      	add	r3, r1
    6d60:	7c1b      	ldrb	r3, [r3, #16]
    6d62:	2b00      	cmp	r3, #0
    6d64:	f000 80b1 	beq.w	6eca <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    6d68:	9b01      	ldr	r3, [sp, #4]
    6d6a:	68d9      	ldr	r1, [r3, #12]
    6d6c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6d70:	4613      	mov	r3, r2
    6d72:	009b      	lsls	r3, r3, #2
    6d74:	4413      	add	r3, r2
    6d76:	009b      	lsls	r3, r3, #2
    6d78:	440b      	add	r3, r1
    6d7a:	881b      	ldrh	r3, [r3, #0]
    6d7c:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6d80:	9b01      	ldr	r3, [sp, #4]
    6d82:	68d9      	ldr	r1, [r3, #12]
    6d84:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6d88:	4613      	mov	r3, r2
    6d8a:	009b      	lsls	r3, r3, #2
    6d8c:	4413      	add	r3, r2
    6d8e:	009b      	lsls	r3, r3, #2
    6d90:	440b      	add	r3, r1
    6d92:	68db      	ldr	r3, [r3, #12]
    6d94:	2b02      	cmp	r3, #2
    6d96:	d11d      	bne.n	6dd4 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6d98:	f008 f95e 	bl	f058 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6d9c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6da0:	095b      	lsrs	r3, r3, #5
    6da2:	b29b      	uxth	r3, r3
    6da4:	461a      	mov	r2, r3
    6da6:	4b51      	ldr	r3, [pc, #324]	; (6eec <Port_Ipw_RefreshPortDirection+0x1d4>)
    6da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6dac:	6959      	ldr	r1, [r3, #20]
    6dae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6db2:	f003 031f 	and.w	r3, r3, #31
    6db6:	2201      	movs	r2, #1
    6db8:	409a      	lsls	r2, r3
    6dba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6dbe:	095b      	lsrs	r3, r3, #5
    6dc0:	b29b      	uxth	r3, r3
    6dc2:	4618      	mov	r0, r3
    6dc4:	4b49      	ldr	r3, [pc, #292]	; (6eec <Port_Ipw_RefreshPortDirection+0x1d4>)
    6dc6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6dca:	430a      	orrs	r2, r1
    6dcc:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6dce:	f008 f96f 	bl	f0b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    6dd2:	e07a      	b.n	6eca <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    6dd4:	9b01      	ldr	r3, [sp, #4]
    6dd6:	68d9      	ldr	r1, [r3, #12]
    6dd8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6ddc:	4613      	mov	r3, r2
    6dde:	009b      	lsls	r3, r3, #2
    6de0:	4413      	add	r3, r2
    6de2:	009b      	lsls	r3, r3, #2
    6de4:	440b      	add	r3, r1
    6de6:	68db      	ldr	r3, [r3, #12]
    6de8:	2b01      	cmp	r3, #1
    6dea:	d00b      	beq.n	6e04 <Port_Ipw_RefreshPortDirection+0xec>
    6dec:	9b01      	ldr	r3, [sp, #4]
    6dee:	68d9      	ldr	r1, [r3, #12]
    6df0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6df4:	4613      	mov	r3, r2
    6df6:	009b      	lsls	r3, r3, #2
    6df8:	4413      	add	r3, r2
    6dfa:	009b      	lsls	r3, r3, #2
    6dfc:	440b      	add	r3, r1
    6dfe:	68db      	ldr	r3, [r3, #12]
    6e00:	2b03      	cmp	r3, #3
    6e02:	d162      	bne.n	6eca <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6e04:	f008 f928 	bl	f058 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6e08:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e0c:	095b      	lsrs	r3, r3, #5
    6e0e:	b29b      	uxth	r3, r3
    6e10:	461a      	mov	r2, r3
    6e12:	4b36      	ldr	r3, [pc, #216]	; (6eec <Port_Ipw_RefreshPortDirection+0x1d4>)
    6e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6e18:	6959      	ldr	r1, [r3, #20]
    6e1a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e1e:	f003 031f 	and.w	r3, r3, #31
    6e22:	2201      	movs	r2, #1
    6e24:	fa02 f303 	lsl.w	r3, r2, r3
    6e28:	43da      	mvns	r2, r3
    6e2a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e2e:	095b      	lsrs	r3, r3, #5
    6e30:	b29b      	uxth	r3, r3
    6e32:	4618      	mov	r0, r3
    6e34:	4b2d      	ldr	r3, [pc, #180]	; (6eec <Port_Ipw_RefreshPortDirection+0x1d4>)
    6e36:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6e3a:	400a      	ands	r2, r1
    6e3c:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6e3e:	f008 f937 	bl	f0b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    6e42:	f008 f95b 	bl	f0fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6e46:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e4a:	095b      	lsrs	r3, r3, #5
    6e4c:	b29b      	uxth	r3, r3
    6e4e:	461a      	mov	r2, r3
    6e50:	4b26      	ldr	r3, [pc, #152]	; (6eec <Port_Ipw_RefreshPortDirection+0x1d4>)
    6e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6e56:	6999      	ldr	r1, [r3, #24]
    6e58:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e5c:	f003 031f 	and.w	r3, r3, #31
    6e60:	2201      	movs	r2, #1
    6e62:	fa02 f303 	lsl.w	r3, r2, r3
    6e66:	43da      	mvns	r2, r3
    6e68:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e6c:	095b      	lsrs	r3, r3, #5
    6e6e:	b29b      	uxth	r3, r3
    6e70:	4618      	mov	r0, r3
    6e72:	4b1e      	ldr	r3, [pc, #120]	; (6eec <Port_Ipw_RefreshPortDirection+0x1d4>)
    6e74:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6e78:	400a      	ands	r2, r1
    6e7a:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6e7c:	9b01      	ldr	r3, [sp, #4]
    6e7e:	68d9      	ldr	r1, [r3, #12]
    6e80:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6e84:	4613      	mov	r3, r2
    6e86:	009b      	lsls	r3, r3, #2
    6e88:	4413      	add	r3, r2
    6e8a:	009b      	lsls	r3, r3, #2
    6e8c:	440b      	add	r3, r1
    6e8e:	68db      	ldr	r3, [r3, #12]
    6e90:	2b03      	cmp	r3, #3
    6e92:	d118      	bne.n	6ec6 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6e94:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e98:	095b      	lsrs	r3, r3, #5
    6e9a:	b29b      	uxth	r3, r3
    6e9c:	461a      	mov	r2, r3
    6e9e:	4b13      	ldr	r3, [pc, #76]	; (6eec <Port_Ipw_RefreshPortDirection+0x1d4>)
    6ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6ea4:	6999      	ldr	r1, [r3, #24]
    6ea6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6eaa:	f003 031f 	and.w	r3, r3, #31
    6eae:	2201      	movs	r2, #1
    6eb0:	409a      	lsls	r2, r3
    6eb2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6eb6:	095b      	lsrs	r3, r3, #5
    6eb8:	b29b      	uxth	r3, r3
    6eba:	4618      	mov	r0, r3
    6ebc:	4b0b      	ldr	r3, [pc, #44]	; (6eec <Port_Ipw_RefreshPortDirection+0x1d4>)
    6ebe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6ec2:	430a      	orrs	r2, r1
    6ec4:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    6ec6:	f008 f945 	bl	f154 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6eca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6ece:	3301      	adds	r3, #1
    6ed0:	f8ad 300e 	strh.w	r3, [sp, #14]
    6ed4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6ed8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6edc:	429a      	cmp	r2, r3
    6ede:	f4ff af26 	bcc.w	6d2e <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    6ee2:	bf00      	nop
    6ee4:	bf00      	nop
    6ee6:	b005      	add	sp, #20
    6ee8:	f85d fb04 	ldr.w	pc, [sp], #4
    6eec:	00010474 	.word	0x00010474

00006ef0 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6ef0:	b500      	push	{lr}
    6ef2:	b085      	sub	sp, #20
    6ef4:	4603      	mov	r3, r0
    6ef6:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6efa:	2300      	movs	r3, #0
    6efc:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    6f00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6f04:	4618      	mov	r0, r3
    6f06:	f000 f871 	bl	6fec <Dio_Ipw_ReadChannel>
    6f0a:	4603      	mov	r3, r0
    6f0c:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    6f10:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6f14:	4618      	mov	r0, r3
    6f16:	b005      	add	sp, #20
    6f18:	f85d fb04 	ldr.w	pc, [sp], #4

00006f1c <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    6f1c:	b500      	push	{lr}
    6f1e:	b083      	sub	sp, #12
    6f20:	4603      	mov	r3, r0
    6f22:	460a      	mov	r2, r1
    6f24:	f8ad 3006 	strh.w	r3, [sp, #6]
    6f28:	4613      	mov	r3, r2
    6f2a:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    6f2e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6f32:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6f36:	4611      	mov	r1, r2
    6f38:	4618      	mov	r0, r3
    6f3a:	f000 f87d 	bl	7038 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    6f3e:	bf00      	nop
    6f40:	b003      	add	sp, #12
    6f42:	f85d fb04 	ldr.w	pc, [sp], #4

00006f46 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6f46:	b500      	push	{lr}
    6f48:	b085      	sub	sp, #20
    6f4a:	4603      	mov	r3, r0
    6f4c:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6f50:	2300      	movs	r3, #0
    6f52:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    6f56:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6f5a:	4618      	mov	r0, r3
    6f5c:	f000 f892 	bl	7084 <Dio_Ipw_FlipChannel>
    6f60:	4603      	mov	r3, r0
    6f62:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    6f66:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6f6a:	4618      	mov	r0, r3
    6f6c:	b005      	add	sp, #20
    6f6e:	f85d fb04 	ldr.w	pc, [sp], #4

00006f72 <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    6f72:	b500      	push	{lr}
    6f74:	b085      	sub	sp, #20
    6f76:	4603      	mov	r3, r0
    6f78:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6f7c:	2300      	movs	r3, #0
    6f7e:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    6f80:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f84:	4618      	mov	r0, r3
    6f86:	f000 f8b3 	bl	70f0 <Dio_Ipw_ReadPort>
    6f8a:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    6f8c:	9b03      	ldr	r3, [sp, #12]
}
    6f8e:	4618      	mov	r0, r3
    6f90:	b005      	add	sp, #20
    6f92:	f85d fb04 	ldr.w	pc, [sp], #4

00006f96 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6f96:	b500      	push	{lr}
    6f98:	b083      	sub	sp, #12
    6f9a:	4603      	mov	r3, r0
    6f9c:	9100      	str	r1, [sp, #0]
    6f9e:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    6fa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6fa6:	9900      	ldr	r1, [sp, #0]
    6fa8:	4618      	mov	r0, r3
    6faa:	f000 f8b9 	bl	7120 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    6fae:	bf00      	nop
    6fb0:	b003      	add	sp, #12
    6fb2:	f85d fb04 	ldr.w	pc, [sp], #4

00006fb6 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    6fb6:	b500      	push	{lr}
    6fb8:	b085      	sub	sp, #20
    6fba:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6fbc:	2300      	movs	r3, #0
    6fbe:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    6fc0:	9801      	ldr	r0, [sp, #4]
    6fc2:	f000 f8c5 	bl	7150 <Dio_Ipw_ReadChannelGroup>
    6fc6:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    6fc8:	9b03      	ldr	r3, [sp, #12]
}
    6fca:	4618      	mov	r0, r3
    6fcc:	b005      	add	sp, #20
    6fce:	f85d fb04 	ldr.w	pc, [sp], #4

00006fd2 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    6fd2:	b500      	push	{lr}
    6fd4:	b083      	sub	sp, #12
    6fd6:	9001      	str	r0, [sp, #4]
    6fd8:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    6fda:	9900      	ldr	r1, [sp, #0]
    6fdc:	9801      	ldr	r0, [sp, #4]
    6fde:	f000 f8d7 	bl	7190 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    6fe2:	bf00      	nop
    6fe4:	b003      	add	sp, #12
    6fe6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00006fec <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6fec:	b500      	push	{lr}
    6fee:	b087      	sub	sp, #28
    6ff0:	4603      	mov	r3, r0
    6ff2:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    6ff6:	2300      	movs	r3, #0
    6ff8:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6ffc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7000:	095b      	lsrs	r3, r3, #5
    7002:	b29b      	uxth	r3, r3
    7004:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    7006:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    700a:	f003 031f 	and.w	r3, r3, #31
    700e:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    7010:	4a08      	ldr	r2, [pc, #32]	; (7034 <Dio_Ipw_ReadChannel+0x48>)
    7012:	9b04      	ldr	r3, [sp, #16]
    7014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7018:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    701a:	9903      	ldr	r1, [sp, #12]
    701c:	9802      	ldr	r0, [sp, #8]
    701e:	f000 f940 	bl	72a2 <Gpio_Dio_Ip_ReadPin>
    7022:	4603      	mov	r3, r0
    7024:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    7028:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    702c:	4618      	mov	r0, r3
    702e:	b007      	add	sp, #28
    7030:	f85d fb04 	ldr.w	pc, [sp], #4
    7034:	1fff8b2c 	.word	0x1fff8b2c

00007038 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    7038:	b500      	push	{lr}
    703a:	b087      	sub	sp, #28
    703c:	4603      	mov	r3, r0
    703e:	460a      	mov	r2, r1
    7040:	f8ad 3006 	strh.w	r3, [sp, #6]
    7044:	4613      	mov	r3, r2
    7046:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    704a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    704e:	095b      	lsrs	r3, r3, #5
    7050:	b29b      	uxth	r3, r3
    7052:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    7054:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7058:	f003 031f 	and.w	r3, r3, #31
    705c:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    705e:	4a08      	ldr	r2, [pc, #32]	; (7080 <Dio_Ipw_WriteChannel+0x48>)
    7060:	9b05      	ldr	r3, [sp, #20]
    7062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7066:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    7068:	f89d 3005 	ldrb.w	r3, [sp, #5]
    706c:	461a      	mov	r2, r3
    706e:	9904      	ldr	r1, [sp, #16]
    7070:	9803      	ldr	r0, [sp, #12]
    7072:	f000 f8b7 	bl	71e4 <Gpio_Dio_Ip_WritePin>
}
    7076:	bf00      	nop
    7078:	b007      	add	sp, #28
    707a:	f85d fb04 	ldr.w	pc, [sp], #4
    707e:	bf00      	nop
    7080:	1fff8b2c 	.word	0x1fff8b2c

00007084 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    7084:	b500      	push	{lr}
    7086:	b089      	sub	sp, #36	; 0x24
    7088:	4603      	mov	r3, r0
    708a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    708e:	2300      	movs	r3, #0
    7090:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    7094:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7098:	095b      	lsrs	r3, r3, #5
    709a:	b29b      	uxth	r3, r3
    709c:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    709e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    70a2:	f003 031f 	and.w	r3, r3, #31
    70a6:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    70a8:	4a10      	ldr	r2, [pc, #64]	; (70ec <Dio_Ipw_FlipChannel+0x68>)
    70aa:	9b06      	ldr	r3, [sp, #24]
    70ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70b0:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    70b2:	2201      	movs	r2, #1
    70b4:	9b05      	ldr	r3, [sp, #20]
    70b6:	fa02 f303 	lsl.w	r3, r2, r3
    70ba:	4619      	mov	r1, r3
    70bc:	9804      	ldr	r0, [sp, #16]
    70be:	f000 f8dc 	bl	727a <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    70c2:	9804      	ldr	r0, [sp, #16]
    70c4:	f000 f8bc 	bl	7240 <Gpio_Dio_Ip_GetPinsOutput>
    70c8:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    70ca:	2201      	movs	r2, #1
    70cc:	9b05      	ldr	r3, [sp, #20]
    70ce:	409a      	lsls	r2, r3
    70d0:	9b03      	ldr	r3, [sp, #12]
    70d2:	401a      	ands	r2, r3
    70d4:	9b05      	ldr	r3, [sp, #20]
    70d6:	fa22 f303 	lsr.w	r3, r2, r3
    70da:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    70de:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    70e2:	4618      	mov	r0, r3
    70e4:	b009      	add	sp, #36	; 0x24
    70e6:	f85d fb04 	ldr.w	pc, [sp], #4
    70ea:	bf00      	nop
    70ec:	1fff8b2c 	.word	0x1fff8b2c

000070f0 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    70f0:	b500      	push	{lr}
    70f2:	b085      	sub	sp, #20
    70f4:	4603      	mov	r3, r0
    70f6:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    70fa:	2300      	movs	r3, #0
    70fc:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    70fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7102:	4a06      	ldr	r2, [pc, #24]	; (711c <Dio_Ipw_ReadPort+0x2c>)
    7104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7108:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    710a:	9802      	ldr	r0, [sp, #8]
    710c:	f000 f8be 	bl	728c <Gpio_Dio_Ip_ReadPins>
    7110:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    7112:	9b03      	ldr	r3, [sp, #12]
}
    7114:	4618      	mov	r0, r3
    7116:	b005      	add	sp, #20
    7118:	f85d fb04 	ldr.w	pc, [sp], #4
    711c:	1fff8b2c 	.word	0x1fff8b2c

00007120 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    7120:	b500      	push	{lr}
    7122:	b085      	sub	sp, #20
    7124:	4603      	mov	r3, r0
    7126:	9100      	str	r1, [sp, #0]
    7128:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    712c:	9b00      	ldr	r3, [sp, #0]
    712e:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    7130:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7134:	4a05      	ldr	r2, [pc, #20]	; (714c <Dio_Ipw_WritePort+0x2c>)
    7136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    713a:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    713c:	9903      	ldr	r1, [sp, #12]
    713e:	9802      	ldr	r0, [sp, #8]
    7140:	f000 f875 	bl	722e <Gpio_Dio_Ip_WritePins>
}
    7144:	bf00      	nop
    7146:	b005      	add	sp, #20
    7148:	f85d fb04 	ldr.w	pc, [sp], #4
    714c:	1fff8b2c 	.word	0x1fff8b2c

00007150 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    7150:	b500      	push	{lr}
    7152:	b087      	sub	sp, #28
    7154:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    7156:	2300      	movs	r3, #0
    7158:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    715a:	9b01      	ldr	r3, [sp, #4]
    715c:	781b      	ldrb	r3, [r3, #0]
    715e:	461a      	mov	r2, r3
    7160:	4b0a      	ldr	r3, [pc, #40]	; (718c <Dio_Ipw_ReadChannelGroup+0x3c>)
    7162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7166:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    7168:	9804      	ldr	r0, [sp, #16]
    716a:	f000 f88f 	bl	728c <Gpio_Dio_Ip_ReadPins>
    716e:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    7170:	9b01      	ldr	r3, [sp, #4]
    7172:	685a      	ldr	r2, [r3, #4]
    7174:	9b03      	ldr	r3, [sp, #12]
    7176:	4013      	ands	r3, r2
    7178:	9a01      	ldr	r2, [sp, #4]
    717a:	7852      	ldrb	r2, [r2, #1]
    717c:	40d3      	lsrs	r3, r2
    717e:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    7180:	9b05      	ldr	r3, [sp, #20]
}
    7182:	4618      	mov	r0, r3
    7184:	b007      	add	sp, #28
    7186:	f85d fb04 	ldr.w	pc, [sp], #4
    718a:	bf00      	nop
    718c:	1fff8b2c 	.word	0x1fff8b2c

00007190 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    7190:	b500      	push	{lr}
    7192:	b087      	sub	sp, #28
    7194:	9001      	str	r0, [sp, #4]
    7196:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    7198:	9b01      	ldr	r3, [sp, #4]
    719a:	781b      	ldrb	r3, [r3, #0]
    719c:	461a      	mov	r2, r3
    719e:	4b10      	ldr	r3, [pc, #64]	; (71e0 <Dio_Ipw_WriteChannelGroup+0x50>)
    71a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    71a4:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    71a6:	9b01      	ldr	r3, [sp, #4]
    71a8:	785b      	ldrb	r3, [r3, #1]
    71aa:	461a      	mov	r2, r3
    71ac:	9b00      	ldr	r3, [sp, #0]
    71ae:	fa03 f202 	lsl.w	r2, r3, r2
    71b2:	9b01      	ldr	r3, [sp, #4]
    71b4:	685b      	ldr	r3, [r3, #4]
    71b6:	4013      	ands	r3, r2
    71b8:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    71ba:	9904      	ldr	r1, [sp, #16]
    71bc:	9805      	ldr	r0, [sp, #20]
    71be:	f000 f84a 	bl	7256 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    71c2:	9b04      	ldr	r3, [sp, #16]
    71c4:	43da      	mvns	r2, r3
    71c6:	9b01      	ldr	r3, [sp, #4]
    71c8:	685b      	ldr	r3, [r3, #4]
    71ca:	4013      	ands	r3, r2
    71cc:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    71ce:	9903      	ldr	r1, [sp, #12]
    71d0:	9805      	ldr	r0, [sp, #20]
    71d2:	f000 f849 	bl	7268 <Gpio_Dio_Ip_ClearPins>

}
    71d6:	bf00      	nop
    71d8:	b007      	add	sp, #28
    71da:	f85d fb04 	ldr.w	pc, [sp], #4
    71de:	bf00      	nop
    71e0:	1fff8b2c 	.word	0x1fff8b2c

000071e4 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    71e4:	b500      	push	{lr}
    71e6:	b087      	sub	sp, #28
    71e8:	9003      	str	r0, [sp, #12]
    71ea:	9102      	str	r1, [sp, #8]
    71ec:	4613      	mov	r3, r2
    71ee:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    71f2:	f006 ff81 	bl	e0f8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    71f6:	9b03      	ldr	r3, [sp, #12]
    71f8:	681b      	ldr	r3, [r3, #0]
    71fa:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    71fc:	2201      	movs	r2, #1
    71fe:	9b02      	ldr	r3, [sp, #8]
    7200:	fa02 f303 	lsl.w	r3, r2, r3
    7204:	43db      	mvns	r3, r3
    7206:	9a05      	ldr	r2, [sp, #20]
    7208:	4013      	ands	r3, r2
    720a:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    720c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7210:	9b02      	ldr	r3, [sp, #8]
    7212:	fa02 f303 	lsl.w	r3, r2, r3
    7216:	9a05      	ldr	r2, [sp, #20]
    7218:	4313      	orrs	r3, r2
    721a:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    721c:	9b03      	ldr	r3, [sp, #12]
    721e:	9a05      	ldr	r2, [sp, #20]
    7220:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    7222:	f006 ff95 	bl	e150 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    7226:	bf00      	nop
    7228:	b007      	add	sp, #28
    722a:	f85d fb04 	ldr.w	pc, [sp], #4

0000722e <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    722e:	b082      	sub	sp, #8
    7230:	9001      	str	r0, [sp, #4]
    7232:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    7234:	9b01      	ldr	r3, [sp, #4]
    7236:	9a00      	ldr	r2, [sp, #0]
    7238:	601a      	str	r2, [r3, #0]
}
    723a:	bf00      	nop
    723c:	b002      	add	sp, #8
    723e:	4770      	bx	lr

00007240 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    7240:	b084      	sub	sp, #16
    7242:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    7244:	2300      	movs	r3, #0
    7246:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    7248:	9b01      	ldr	r3, [sp, #4]
    724a:	681b      	ldr	r3, [r3, #0]
    724c:	9303      	str	r3, [sp, #12]
    return returnValue;
    724e:	9b03      	ldr	r3, [sp, #12]
}
    7250:	4618      	mov	r0, r3
    7252:	b004      	add	sp, #16
    7254:	4770      	bx	lr

00007256 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    7256:	b082      	sub	sp, #8
    7258:	9001      	str	r0, [sp, #4]
    725a:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    725c:	9b01      	ldr	r3, [sp, #4]
    725e:	9a00      	ldr	r2, [sp, #0]
    7260:	605a      	str	r2, [r3, #4]
}
    7262:	bf00      	nop
    7264:	b002      	add	sp, #8
    7266:	4770      	bx	lr

00007268 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    7268:	b082      	sub	sp, #8
    726a:	9001      	str	r0, [sp, #4]
    726c:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    726e:	9b01      	ldr	r3, [sp, #4]
    7270:	9a00      	ldr	r2, [sp, #0]
    7272:	609a      	str	r2, [r3, #8]
}
    7274:	bf00      	nop
    7276:	b002      	add	sp, #8
    7278:	4770      	bx	lr

0000727a <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    727a:	b082      	sub	sp, #8
    727c:	9001      	str	r0, [sp, #4]
    727e:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    7280:	9b01      	ldr	r3, [sp, #4]
    7282:	9a00      	ldr	r2, [sp, #0]
    7284:	60da      	str	r2, [r3, #12]
}
    7286:	bf00      	nop
    7288:	b002      	add	sp, #8
    728a:	4770      	bx	lr

0000728c <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    728c:	b084      	sub	sp, #16
    728e:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    7290:	2300      	movs	r3, #0
    7292:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    7294:	9b01      	ldr	r3, [sp, #4]
    7296:	691b      	ldr	r3, [r3, #16]
    7298:	9303      	str	r3, [sp, #12]
    return returnValue;
    729a:	9b03      	ldr	r3, [sp, #12]
}
    729c:	4618      	mov	r0, r3
    729e:	b004      	add	sp, #16
    72a0:	4770      	bx	lr

000072a2 <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    72a2:	b084      	sub	sp, #16
    72a4:	9001      	str	r0, [sp, #4]
    72a6:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    72a8:	2300      	movs	r3, #0
    72aa:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    72ae:	9b01      	ldr	r3, [sp, #4]
    72b0:	691a      	ldr	r2, [r3, #16]
    72b2:	2101      	movs	r1, #1
    72b4:	9b00      	ldr	r3, [sp, #0]
    72b6:	fa01 f303 	lsl.w	r3, r1, r3
    72ba:	401a      	ands	r2, r3
    72bc:	9b00      	ldr	r3, [sp, #0]
    72be:	fa22 f303 	lsr.w	r3, r2, r3
    72c2:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    72c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    72ca:	4618      	mov	r0, r3
    72cc:	b004      	add	sp, #16
    72ce:	4770      	bx	lr

000072d0 <Can_IsControllersBusy>:
        }
    }
#endif /* CAN_43_FLEXCAN_MAINFUNCTION_MULTIPLE_READ == STD_ON */

static boolean Can_IsControllersBusy(uint32 u32CoreId)
{
    72d0:	b084      	sub	sp, #16
    72d2:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    72d4:	2300      	movs	r3, #0
    72d6:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    72da:	2300      	movs	r3, #0
    72dc:	f88d 300e 	strb.w	r3, [sp, #14]

    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    72e0:	2300      	movs	r3, #0
    72e2:	f88d 300e 	strb.w	r3, [sp, #14]
    72e6:	e01b      	b.n	7320 <Can_IsControllersBusy+0x50>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    72e8:	4a12      	ldr	r2, [pc, #72]	; (7334 <Can_IsControllersBusy+0x64>)
    72ea:	9b01      	ldr	r3, [sp, #4]
    72ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72f0:	695a      	ldr	r2, [r3, #20]
    72f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    72f6:	009b      	lsls	r3, r3, #2
    72f8:	4413      	add	r3, r2
    72fa:	681b      	ldr	r3, [r3, #0]
    72fc:	2b00      	cmp	r3, #0
    72fe:	d00a      	beq.n	7316 <Can_IsControllersBusy+0x46>
        {
            if (CAN_CS_UNINIT != Can_eControllerState[u8ControllerID])
    7300:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7304:	4a0c      	ldr	r2, [pc, #48]	; (7338 <Can_IsControllersBusy+0x68>)
    7306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    730a:	2b00      	cmp	r3, #0
    730c:	d003      	beq.n	7316 <Can_IsControllersBusy+0x46>
                *   The function Can_Init shall raise the error CAN_E_TRANSITION if the CAN
                *   controllers are not in state UNINIT.
                */
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_TRANSITION);
            #endif
                bCtrlBusy = TRUE;
    730e:	2301      	movs	r3, #1
    7310:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    7314:	e008      	b.n	7328 <Can_IsControllersBusy+0x58>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    7316:	f89d 300e 	ldrb.w	r3, [sp, #14]
    731a:	3301      	adds	r3, #1
    731c:	f88d 300e 	strb.w	r3, [sp, #14]
    7320:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7324:	2b00      	cmp	r3, #0
    7326:	d0df      	beq.n	72e8 <Can_IsControllersBusy+0x18>
            }
        }
    }

    return bCtrlBusy;
    7328:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    732c:	4618      	mov	r0, r3
    732e:	b004      	add	sp, #16
    7330:	4770      	bx	lr
    7332:	bf00      	nop
    7334:	1fff8d14 	.word	0x1fff8d14
    7338:	1fff8d10 	.word	0x1fff8d10

0000733c <Can_InitControllers>:

static void Can_InitControllers(uint32 u32CoreId)
{
    733c:	b500      	push	{lr}
    733e:	b085      	sub	sp, #20
    7340:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    7342:	2300      	movs	r3, #0
    7344:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    7348:	2300      	movs	r3, #0
    734a:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    734e:	2300      	movs	r3, #0
    7350:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    7352:	2300      	movs	r3, #0
    7354:	f88d 300e 	strb.w	r3, [sp, #14]
    7358:	e035      	b.n	73c6 <Can_InitControllers+0x8a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    735a:	4a30      	ldr	r2, [pc, #192]	; (741c <Can_InitControllers+0xe0>)
    735c:	9b01      	ldr	r3, [sp, #4]
    735e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7362:	695a      	ldr	r2, [r3, #20]
    7364:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7368:	009b      	lsls	r3, r3, #2
    736a:	4413      	add	r3, r2
    736c:	681b      	ldr	r3, [r3, #0]
    736e:	2b00      	cmp	r3, #0
    7370:	d024      	beq.n	73bc <Can_InitControllers+0x80>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    7372:	4a2a      	ldr	r2, [pc, #168]	; (741c <Can_InitControllers+0xe0>)
    7374:	9b01      	ldr	r3, [sp, #4]
    7376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    737a:	695a      	ldr	r2, [r3, #20]
    737c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7380:	009b      	lsls	r3, r3, #2
    7382:	4413      	add	r3, r2
    7384:	681b      	ldr	r3, [r3, #0]
    7386:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    7388:	9b02      	ldr	r3, [sp, #8]
    738a:	7a1b      	ldrb	r3, [r3, #8]
    738c:	2b00      	cmp	r3, #0
    738e:	d015      	beq.n	73bc <Can_InitControllers+0x80>
                */
            #if ((CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) || (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON))
                Can_au16BaudrateIDConfig[u8ControllerID] = Can_pController->Can_u16DefaultBaudrateID;
            #endif
                /* Reset interrupt level to default value after re-init */
                Can_au8DisableInterruptLevel[u8ControllerID] = 0U;
    7390:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7394:	4a22      	ldr	r2, [pc, #136]	; (7420 <Can_InitControllers+0xe4>)
    7396:	2100      	movs	r1, #0
    7398:	54d1      	strb	r1, [r2, r3]
            #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
                Can_apxCtrlConfigIcomIndex[u8ControllerID] = NULL_PTR;
            #endif
                /* Init the controller */
                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_Init(Can_pController))
    739a:	9802      	ldr	r0, [sp, #8]
    739c:	f001 f830 	bl	8400 <Can_43_FLEXCAN_Ipw_Init>
    73a0:	4603      	mov	r3, r0
    73a2:	2b00      	cmp	r3, #0
    73a4:	d106      	bne.n	73b4 <Can_InitControllers+0x78>
                {
                    Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    73a6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    73aa:	4a1e      	ldr	r2, [pc, #120]	; (7424 <Can_InitControllers+0xe8>)
    73ac:	2102      	movs	r1, #2
    73ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    73b2:	e003      	b.n	73bc <Can_InitControllers+0x80>
                else
                {
                    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_INIT_FAILED);
                    #endif
                    bCtrlBusy = TRUE;
    73b4:	2301      	movs	r3, #1
    73b6:	f88d 300f 	strb.w	r3, [sp, #15]
                    break;
    73ba:	e008      	b.n	73ce <Can_InitControllers+0x92>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    73bc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    73c0:	3301      	adds	r3, #1
    73c2:	f88d 300e 	strb.w	r3, [sp, #14]
    73c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    73ca:	2b00      	cmp	r3, #0
    73cc:	d0c5      	beq.n	735a <Can_InitControllers+0x1e>
    }
    /*
    *  [SWS_Can_00246] After initializing all controllers inside the HW Unit, the function Can_Init
    *   shall change the module state to CAN_READY.
    */
    if (TRUE == bCtrlBusy)
    73ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    73d2:	2b00      	cmp	r3, #0
    73d4:	d01e      	beq.n	7414 <Can_InitControllers+0xd8>
    {
        /* Init failed due to one or more controllers failed, reset status of all  core's current controllers */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    73d6:	2300      	movs	r3, #0
    73d8:	f88d 300e 	strb.w	r3, [sp, #14]
    73dc:	e016      	b.n	740c <Can_InitControllers+0xd0>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    73de:	4a0f      	ldr	r2, [pc, #60]	; (741c <Can_InitControllers+0xe0>)
    73e0:	9b01      	ldr	r3, [sp, #4]
    73e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73e6:	695a      	ldr	r2, [r3, #20]
    73e8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    73ec:	009b      	lsls	r3, r3, #2
    73ee:	4413      	add	r3, r2
    73f0:	681b      	ldr	r3, [r3, #0]
    73f2:	2b00      	cmp	r3, #0
    73f4:	d005      	beq.n	7402 <Can_InitControllers+0xc6>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    73f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    73fa:	4a0a      	ldr	r2, [pc, #40]	; (7424 <Can_InitControllers+0xe8>)
    73fc:	2100      	movs	r1, #0
    73fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    7402:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7406:	3301      	adds	r3, #1
    7408:	f88d 300e 	strb.w	r3, [sp, #14]
    740c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7410:	2b00      	cmp	r3, #0
    7412:	d0e4      	beq.n	73de <Can_InitControllers+0xa2>
    else
    {
        Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_READY;
    }
#endif
}
    7414:	bf00      	nop
    7416:	b005      	add	sp, #20
    7418:	f85d fb04 	ldr.w	pc, [sp], #4
    741c:	1fff8d14 	.word	0x1fff8d14
    7420:	1fff8d0c 	.word	0x1fff8d0c
    7424:	1fff8d10 	.word	0x1fff8d10

00007428 <Can_DeInitControllers>:
    return bResult;
}
#endif

static void Can_DeInitControllers(uint32 u32CoreId)
{
    7428:	b500      	push	{lr}
    742a:	b085      	sub	sp, #20
    742c:	9001      	str	r0, [sp, #4]
    uint8 u8ControllerID = 0U;
    742e:	2300      	movs	r3, #0
    7430:	f88d 300f 	strb.w	r3, [sp, #15]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7434:	2300      	movs	r3, #0
    7436:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    7438:	2300      	movs	r3, #0
    743a:	f88d 300f 	strb.w	r3, [sp, #15]
    743e:	e028      	b.n	7492 <Can_DeInitControllers+0x6a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    7440:	4a18      	ldr	r2, [pc, #96]	; (74a4 <Can_DeInitControllers+0x7c>)
    7442:	9b01      	ldr	r3, [sp, #4]
    7444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7448:	695a      	ldr	r2, [r3, #20]
    744a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    744e:	009b      	lsls	r3, r3, #2
    7450:	4413      	add	r3, r2
    7452:	681b      	ldr	r3, [r3, #0]
    7454:	2b00      	cmp	r3, #0
    7456:	d017      	beq.n	7488 <Can_DeInitControllers+0x60>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    7458:	4a12      	ldr	r2, [pc, #72]	; (74a4 <Can_DeInitControllers+0x7c>)
    745a:	9b01      	ldr	r3, [sp, #4]
    745c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7460:	695a      	ldr	r2, [r3, #20]
    7462:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7466:	009b      	lsls	r3, r3, #2
    7468:	4413      	add	r3, r2
    746a:	681b      	ldr	r3, [r3, #0]
    746c:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    746e:	9b02      	ldr	r3, [sp, #8]
    7470:	7a1b      	ldrb	r3, [r3, #8]
    7472:	2b00      	cmp	r3, #0
    7474:	d008      	beq.n	7488 <Can_DeInitControllers+0x60>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    7476:	f89d 300f 	ldrb.w	r3, [sp, #15]
    747a:	4a0b      	ldr	r2, [pc, #44]	; (74a8 <Can_DeInitControllers+0x80>)
    747c:	2100      	movs	r1, #0
    747e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                Can_43_FLEXCAN_Ipw_DeInit(Can_pController);
    7482:	9802      	ldr	r0, [sp, #8]
    7484:	f001 f8cc 	bl	8620 <Can_43_FLEXCAN_Ipw_DeInit>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    7488:	f89d 300f 	ldrb.w	r3, [sp, #15]
    748c:	3301      	adds	r3, #1
    748e:	f88d 300f 	strb.w	r3, [sp, #15]
    7492:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7496:	2b00      	cmp	r3, #0
    7498:	d0d2      	beq.n	7440 <Can_DeInitControllers+0x18>
            }
        }
    }
}
    749a:	bf00      	nop
    749c:	bf00      	nop
    749e:	b005      	add	sp, #20
    74a0:	f85d fb04 	ldr.w	pc, [sp], #4
    74a4:	1fff8d14 	.word	0x1fff8d14
    74a8:	1fff8d10 	.word	0x1fff8d10

000074ac <Can_43_FLEXCAN_Init>:
* @api
*/

/* implements     Can_Init_Activity */
void Can_43_FLEXCAN_Init(const Can_43_FLEXCAN_ConfigType * Config)
{
    74ac:	b500      	push	{lr}
    74ae:	b085      	sub	sp, #20
    74b0:	9001      	str	r0, [sp, #4]
    uint32 u32CoreId = 0U;
    74b2:	2300      	movs	r3, #0
    74b4:	9303      	str	r3, [sp, #12]
    boolean bCtrlBusy = FALSE;
    74b6:	2300      	movs	r3, #0
    74b8:	f88d 300b 	strb.w	r3, [sp, #11]
#if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
    boolean bValidCoreID = FALSE;
#endif

    u32CoreId = Can_GetCoreID();
    74bc:	2300      	movs	r3, #0
    74be:	9303      	str	r3, [sp, #12]
        #if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
            if (u32CoreId == Config->Can_u32CoreID)
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Copy pointer to current Can Driver configuration. */
                Can_apxConfig[u32CoreId] = Config;
    74c0:	490c      	ldr	r1, [pc, #48]	; (74f4 <Can_43_FLEXCAN_Init+0x48>)
    74c2:	9b03      	ldr	r3, [sp, #12]
    74c4:	9a01      	ldr	r2, [sp, #4]
    74c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (TRUE == bValidCoreID)
            {
#endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Fault Injection point to allow to test SWS_Can_00408 */
                MCAL_FAULT_INJECTION_POINT(CAN_FIP_1_CHANGE_DRIVER_TO_UNINITIALIZED);
                bCtrlBusy = Can_IsControllersBusy(u32CoreId);
    74ca:	9803      	ldr	r0, [sp, #12]
    74cc:	f7ff ff00 	bl	72d0 <Can_IsControllersBusy>
    74d0:	4603      	mov	r3, r0
    74d2:	f88d 300b 	strb.w	r3, [sp, #11]
                if (FALSE == bCtrlBusy)
    74d6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    74da:	f083 0301 	eor.w	r3, r3, #1
    74de:	b2db      	uxtb	r3, r3
    74e0:	2b00      	cmp	r3, #0
    74e2:	d002      	beq.n	74ea <Can_43_FLEXCAN_Init+0x3e>
                {
                    Can_InitControllers(u32CoreId);
    74e4:	9803      	ldr	r0, [sp, #12]
    74e6:	f7ff ff29 	bl	733c <Can_InitControllers>

#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif /* (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) */
}
    74ea:	bf00      	nop
    74ec:	b005      	add	sp, #20
    74ee:	f85d fb04 	ldr.w	pc, [sp], #4
    74f2:	bf00      	nop
    74f4:	1fff8d14 	.word	0x1fff8d14

000074f8 <Can_43_FLEXCAN_DeInit>:
* @post           Can_DeInit shall de-initialize all the controllers and set the driver in UNINIT state.
*
*/
/* implements     Can_DeInit_Activity */
void Can_43_FLEXCAN_DeInit(void)
{
    74f8:	b500      	push	{lr}
    74fa:	b083      	sub	sp, #12
    /* Variable for indexing the controllers. */
    uint8 u8ControllerID = 0U;
    74fc:	2300      	movs	r3, #0
    74fe:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean bCtrlBusy = FALSE;
    7502:	2300      	movs	r3, #0
    7504:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 u32CoreId = 0U;
    7508:	2300      	movs	r3, #0
    750a:	9300      	str	r3, [sp, #0]

    u32CoreId = Can_GetCoreID();
    750c:	2300      	movs	r3, #0
    750e:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Loop through all Can controllers configured based CanControllerId parameter. */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    7510:	2300      	movs	r3, #0
    7512:	f88d 3007 	strb.w	r3, [sp, #7]
    7516:	e01b      	b.n	7550 <Can_43_FLEXCAN_DeInit+0x58>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    7518:	4a19      	ldr	r2, [pc, #100]	; (7580 <Can_43_FLEXCAN_DeInit+0x88>)
    751a:	9b00      	ldr	r3, [sp, #0]
    751c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7520:	695a      	ldr	r2, [r3, #20]
    7522:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7526:	009b      	lsls	r3, r3, #2
    7528:	4413      	add	r3, r2
    752a:	681b      	ldr	r3, [r3, #0]
    752c:	2b00      	cmp	r3, #0
    752e:	d00a      	beq.n	7546 <Can_43_FLEXCAN_DeInit+0x4e>
            {
                if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    7530:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7534:	4a13      	ldr	r2, [pc, #76]	; (7584 <Can_43_FLEXCAN_DeInit+0x8c>)
    7536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    753a:	2b01      	cmp	r3, #1
    753c:	d103      	bne.n	7546 <Can_43_FLEXCAN_DeInit+0x4e>
                    *   if any of the CAN controllers is in state STARTED.
                    */
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_DEINIT, (uint8)CAN_43_FLEXCAN_E_TRANSITION);
                #endif
                    /* Controller is busy */
                    bCtrlBusy =  TRUE;
    753e:	2301      	movs	r3, #1
    7540:	f88d 3006 	strb.w	r3, [sp, #6]
                    /* Skipping the loop if any of Can Controller is in state STARTED */
                    break;
    7544:	e008      	b.n	7558 <Can_43_FLEXCAN_DeInit+0x60>
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    7546:	f89d 3007 	ldrb.w	r3, [sp, #7]
    754a:	3301      	adds	r3, #1
    754c:	f88d 3007 	strb.w	r3, [sp, #7]
    7550:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7554:	2b00      	cmp	r3, #0
    7556:	d0df      	beq.n	7518 <Can_43_FLEXCAN_DeInit+0x20>
                }
            }
        }
        /* All Controllers are not busy */
        if (FALSE == bCtrlBusy)
    7558:	f89d 3006 	ldrb.w	r3, [sp, #6]
    755c:	f083 0301 	eor.w	r3, r3, #1
    7560:	b2db      	uxtb	r3, r3
    7562:	2b00      	cmp	r3, #0
    7564:	d007      	beq.n	7576 <Can_43_FLEXCAN_DeInit+0x7e>
            *   [SWS_Can_91010] The function Can_DeInit shall change the module state to
            *   CAN_UNINIT before de-initializing all controllers inside the HW unit
            */
            Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_UNINIT;
        #endif
            Can_DeInitControllers(u32CoreId);
    7566:	9800      	ldr	r0, [sp, #0]
    7568:	f7ff ff5e 	bl	7428 <Can_DeInitControllers>
            Can_apxConfig[u32CoreId] = NULL_PTR;
    756c:	4a04      	ldr	r2, [pc, #16]	; (7580 <Can_43_FLEXCAN_DeInit+0x88>)
    756e:	9b00      	ldr	r3, [sp, #0]
    7570:	2100      	movs	r1, #0
    7572:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
}
    7576:	bf00      	nop
    7578:	b003      	add	sp, #12
    757a:	f85d fb04 	ldr.w	pc, [sp], #4
    757e:	bf00      	nop
    7580:	1fff8d14 	.word	0x1fff8d14
    7584:	1fff8d10 	.word	0x1fff8d10

00007588 <Can_43_FLEXCAN_SetBaudrate>:
    Std_ReturnType Can_43_FLEXCAN_SetBaudrate
    (
        uint8 Controller,
        uint16 BaudRateConfigID
    )
    {
    7588:	b500      	push	{lr}
    758a:	b087      	sub	sp, #28
    758c:	4603      	mov	r3, r0
    758e:	460a      	mov	r2, r1
    7590:	f88d 3007 	strb.w	r3, [sp, #7]
    7594:	4613      	mov	r3, r2
    7596:	f8ad 3004 	strh.w	r3, [sp, #4]
        /* Returns the result of CAN set baudrate */
        Std_ReturnType eRetVal = (Std_ReturnType)E_NOT_OK;
    759a:	2301      	movs	r3, #1
    759c:	f88d 3017 	strb.w	r3, [sp, #23]
        uint32 u32CoreId = 0U;
    75a0:	2300      	movs	r3, #0
    75a2:	9304      	str	r3, [sp, #16]
        const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    75a4:	2300      	movs	r3, #0
    75a6:	9303      	str	r3, [sp, #12]

        u32CoreId = Can_GetCoreID();
    75a8:	2300      	movs	r3, #0
    75aa:	9304      	str	r3, [sp, #16]
    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_BAUDRATE))
        {
    #endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    75ac:	4a10      	ldr	r2, [pc, #64]	; (75f0 <Can_43_FLEXCAN_SetBaudrate+0x68>)
    75ae:	9b04      	ldr	r3, [sp, #16]
    75b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75b4:	695a      	ldr	r2, [r3, #20]
    75b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75ba:	009b      	lsls	r3, r3, #2
    75bc:	4413      	add	r3, r2
    75be:	681b      	ldr	r3, [r3, #0]
    75c0:	9303      	str	r3, [sp, #12]
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_BAUDRATE, CAN_43_FLEXCAN_E_PARAM_BAUDRATE);
                    }
                    else
                    {
                #endif
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    75c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75c6:	4a0b      	ldr	r2, [pc, #44]	; (75f4 <Can_43_FLEXCAN_SetBaudrate+0x6c>)
    75c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75cc:	2b02      	cmp	r3, #2
    75ce:	d108      	bne.n	75e2 <Can_43_FLEXCAN_SetBaudrate+0x5a>
                        {
                            eRetVal = Can_43_FLEXCAN_Ipw_SetBaudrate(Can_pController, BaudRateConfigID);
    75d0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    75d4:	4619      	mov	r1, r3
    75d6:	9803      	ldr	r0, [sp, #12]
    75d8:	f001 f82e 	bl	8638 <Can_43_FLEXCAN_Ipw_SetBaudrate>
    75dc:	4603      	mov	r3, r0
    75de:	f88d 3017 	strb.w	r3, [sp, #23]
                        }
    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    }
        }
    #endif
        return eRetVal;
    75e2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    }
    75e6:	4618      	mov	r0, r3
    75e8:	b007      	add	sp, #28
    75ea:	f85d fb04 	ldr.w	pc, [sp], #4
    75ee:	bf00      	nop
    75f0:	1fff8d14 	.word	0x1fff8d14
    75f4:	1fff8d10 	.word	0x1fff8d10

000075f8 <Can_43_FLEXCAN_SetControllerMode>:
*
* @api
*/
/* implements     Can_SetControllerMode_Activity */
Std_ReturnType Can_43_FLEXCAN_SetControllerMode(uint8 Controller, Can_ControllerStateType Transition)
{
    75f8:	b500      	push	{lr}
    75fa:	b087      	sub	sp, #28
    75fc:	4603      	mov	r3, r0
    75fe:	9100      	str	r1, [sp, #0]
    7600:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    7604:	2301      	movs	r3, #1
    7606:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    760a:	2300      	movs	r3, #0
    760c:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    760e:	2300      	movs	r3, #0
    7610:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    7612:	2300      	movs	r3, #0
    7614:	9304      	str	r3, [sp, #16]
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE))
    {
#endif
                Can_pController = (const Can_43_FLEXCAN_ControllerConfigType *)(Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    7616:	4a47      	ldr	r2, [pc, #284]	; (7734 <Can_43_FLEXCAN_SetControllerMode+0x13c>)
    7618:	9b04      	ldr	r3, [sp, #16]
    761a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    761e:	695a      	ldr	r2, [r3, #20]
    7620:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7624:	009b      	lsls	r3, r3, #2
    7626:	4413      	add	r3, r2
    7628:	681b      	ldr	r3, [r3, #0]
    762a:	9303      	str	r3, [sp, #12]
                /*
                *   [SWS_Can_00017] The function Can_SetControllerMode shall perform software
                *   triggered state transitions of the CAN controller State machine.
                */
                switch (Transition)
    762c:	9b00      	ldr	r3, [sp, #0]
    762e:	2b03      	cmp	r3, #3
    7630:	d05d      	beq.n	76ee <Can_43_FLEXCAN_SetControllerMode+0xf6>
    7632:	9b00      	ldr	r3, [sp, #0]
    7634:	2b03      	cmp	r3, #3
    7636:	d874      	bhi.n	7722 <Can_43_FLEXCAN_SetControllerMode+0x12a>
    7638:	9b00      	ldr	r3, [sp, #0]
    763a:	2b01      	cmp	r3, #1
    763c:	d003      	beq.n	7646 <Can_43_FLEXCAN_SetControllerMode+0x4e>
    763e:	9b00      	ldr	r3, [sp, #0]
    7640:	2b02      	cmp	r3, #2
    7642:	d01d      	beq.n	7680 <Can_43_FLEXCAN_SetControllerMode+0x88>
                        *   has been requested, the function Can_SetControllerMode shall raise the error CAN_E_TRANSITION and
                        *   return E_NOT_OK
                        */
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_TRANSITION);
                    #endif
                        break;
    7644:	e06d      	b.n	7722 <Can_43_FLEXCAN_SetControllerMode+0x12a>
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    7646:	f89d 3007 	ldrb.w	r3, [sp, #7]
    764a:	4a3b      	ldr	r2, [pc, #236]	; (7738 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    764c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7650:	2b02      	cmp	r3, #2
    7652:	d168      	bne.n	7726 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStartMode(Can_pController))
    7654:	9803      	ldr	r0, [sp, #12]
    7656:	f001 f8f5 	bl	8844 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>
    765a:	4603      	mov	r3, r0
    765c:	2b00      	cmp	r3, #0
    765e:	d162      	bne.n	7726 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                                Can_eControllerState[Controller] = CAN_CS_STARTED;
    7660:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7664:	4a34      	ldr	r2, [pc, #208]	; (7738 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    7666:	2101      	movs	r1, #1
    7668:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STARTED);
    766c:	9b03      	ldr	r3, [sp, #12]
    766e:	781b      	ldrb	r3, [r3, #0]
    7670:	2101      	movs	r1, #1
    7672:	4618      	mov	r0, r3
    7674:	f008 f9a6 	bl	f9c4 <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    7678:	2300      	movs	r3, #0
    767a:	f88d 3017 	strb.w	r3, [sp, #23]
                        break;
    767e:	e052      	b.n	7726 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                        switch (Can_eControllerState[Controller])
    7680:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7684:	4a2c      	ldr	r2, [pc, #176]	; (7738 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    7686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    768a:	2b01      	cmp	r3, #1
    768c:	d005      	beq.n	769a <Can_43_FLEXCAN_SetControllerMode+0xa2>
    768e:	2b00      	cmp	r3, #0
    7690:	d029      	beq.n	76e6 <Can_43_FLEXCAN_SetControllerMode+0xee>
    7692:	3b02      	subs	r3, #2
    7694:	2b01      	cmp	r3, #1
    7696:	d826      	bhi.n	76e6 <Can_43_FLEXCAN_SetControllerMode+0xee>
    7698:	e015      	b.n	76c6 <Can_43_FLEXCAN_SetControllerMode+0xce>
                                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    769a:	9803      	ldr	r0, [sp, #12]
    769c:	f001 f940 	bl	8920 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    76a0:	4603      	mov	r3, r0
    76a2:	2b00      	cmp	r3, #0
    76a4:	d121      	bne.n	76ea <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                    Can_eControllerState[Controller] = CAN_CS_STOPPED;
    76a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76aa:	4a23      	ldr	r2, [pc, #140]	; (7738 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    76ac:	2102      	movs	r1, #2
    76ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                    CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    76b2:	9b03      	ldr	r3, [sp, #12]
    76b4:	781b      	ldrb	r3, [r3, #0]
    76b6:	2102      	movs	r1, #2
    76b8:	4618      	mov	r0, r3
    76ba:	f008 f983 	bl	f9c4 <CanIf_ControllerModeIndication>
                                    eRetVal = E_OK;
    76be:	2300      	movs	r3, #0
    76c0:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    76c4:	e011      	b.n	76ea <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                Can_eControllerState[Controller] = CAN_CS_STOPPED;
    76c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76ca:	4a1b      	ldr	r2, [pc, #108]	; (7738 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    76cc:	2102      	movs	r1, #2
    76ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    76d2:	9b03      	ldr	r3, [sp, #12]
    76d4:	781b      	ldrb	r3, [r3, #0]
    76d6:	2102      	movs	r1, #2
    76d8:	4618      	mov	r0, r3
    76da:	f008 f973 	bl	f9c4 <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    76de:	2300      	movs	r3, #0
    76e0:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    76e4:	e002      	b.n	76ec <Can_43_FLEXCAN_SetControllerMode+0xf4>
                                break;
    76e6:	bf00      	nop
    76e8:	e01e      	b.n	7728 <Can_43_FLEXCAN_SetControllerMode+0x130>
                                break;
    76ea:	bf00      	nop
                        break;
    76ec:	e01c      	b.n	7728 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        switch (Can_eControllerState[Controller])
    76ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76f2:	4a11      	ldr	r2, [pc, #68]	; (7738 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    76f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76f8:	3b02      	subs	r3, #2
    76fa:	2b01      	cmp	r3, #1
    76fc:	d80f      	bhi.n	771e <Can_43_FLEXCAN_SetControllerMode+0x126>
                                Can_eControllerState[Controller] = CAN_CS_SLEEP;
    76fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7702:	4a0d      	ldr	r2, [pc, #52]	; (7738 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    7704:	2103      	movs	r1, #3
    7706:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_SLEEP);
    770a:	9b03      	ldr	r3, [sp, #12]
    770c:	781b      	ldrb	r3, [r3, #0]
    770e:	2103      	movs	r1, #3
    7710:	4618      	mov	r0, r3
    7712:	f008 f957 	bl	f9c4 <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    7716:	2300      	movs	r3, #0
    7718:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    771c:	e000      	b.n	7720 <Can_43_FLEXCAN_SetControllerMode+0x128>
                                break;
    771e:	bf00      	nop
                        break;
    7720:	e002      	b.n	7728 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    7722:	bf00      	nop
    7724:	e000      	b.n	7728 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    7726:	bf00      	nop
                    }
                }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eRetVal;
    7728:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    772c:	4618      	mov	r0, r3
    772e:	b007      	add	sp, #28
    7730:	f85d fb04 	ldr.w	pc, [sp], #4
    7734:	1fff8d14 	.word	0x1fff8d14
    7738:	1fff8d10 	.word	0x1fff8d10

0000773c <Can_43_FLEXCAN_DisableControllerInterrupts>:
*
* @api
*/
/* implements     Can_DisableControllerInterrupts_Activity */
void Can_43_FLEXCAN_DisableControllerInterrupts(uint8 Controller)
{
    773c:	b500      	push	{lr}
    773e:	b085      	sub	sp, #20
    7740:	4603      	mov	r3, r0
    7742:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    7746:	2300      	movs	r3, #0
    7748:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    774a:	2300      	movs	r3, #0
    774c:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    774e:	2300      	movs	r3, #0
    7750:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    7752:	4a10      	ldr	r2, [pc, #64]	; (7794 <Can_43_FLEXCAN_DisableControllerInterrupts+0x58>)
    7754:	9b03      	ldr	r3, [sp, #12]
    7756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    775a:	695a      	ldr	r2, [r3, #20]
    775c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7760:	009b      	lsls	r3, r3, #2
    7762:	4413      	add	r3, r2
    7764:	681b      	ldr	r3, [r3, #0]
    7766:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    7768:	f005 fe0c 	bl	d384 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_au8DisableInterruptLevel[Controller] += 1U;
    776c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7770:	4a09      	ldr	r2, [pc, #36]	; (7798 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    7772:	5cd2      	ldrb	r2, [r2, r3]
    7774:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7778:	3201      	adds	r2, #1
    777a:	b2d1      	uxtb	r1, r2
    777c:	4a06      	ldr	r2, [pc, #24]	; (7798 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    777e:	54d1      	strb	r1, [r2, r3]
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    7780:	f005 fe2c 	bl	d3dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(Can_pController);
    7784:	9802      	ldr	r0, [sp, #8]
    7786:	f001 f949 	bl	8a1c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    778a:	bf00      	nop
    778c:	b005      	add	sp, #20
    778e:	f85d fb04 	ldr.w	pc, [sp], #4
    7792:	bf00      	nop
    7794:	1fff8d14 	.word	0x1fff8d14
    7798:	1fff8d0c 	.word	0x1fff8d0c

0000779c <Can_43_FLEXCAN_EnableControllerInterrupts>:
*
* @api
*/
/* implements     Can_EnableControllerInterrupts_Activity */
void Can_43_FLEXCAN_EnableControllerInterrupts(uint8 Controller)
{
    779c:	b500      	push	{lr}
    779e:	b085      	sub	sp, #20
    77a0:	4603      	mov	r3, r0
    77a2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    77a6:	2300      	movs	r3, #0
    77a8:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    77aa:	2300      	movs	r3, #0
    77ac:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    77ae:	2300      	movs	r3, #0
    77b0:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    77b2:	4a16      	ldr	r2, [pc, #88]	; (780c <Can_43_FLEXCAN_EnableControllerInterrupts+0x70>)
    77b4:	9b03      	ldr	r3, [sp, #12]
    77b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77ba:	695a      	ldr	r2, [r3, #20]
    77bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77c0:	009b      	lsls	r3, r3, #2
    77c2:	4413      	add	r3, r2
    77c4:	681b      	ldr	r3, [r3, #0]
    77c6:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    77c8:	f005 fe2e 	bl	d428 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>
                if (Can_au8DisableInterruptLevel[Controller] > 0U)
    77cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77d0:	4a0f      	ldr	r2, [pc, #60]	; (7810 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    77d2:	5cd3      	ldrb	r3, [r2, r3]
    77d4:	2b00      	cmp	r3, #0
    77d6:	d009      	beq.n	77ec <Can_43_FLEXCAN_EnableControllerInterrupts+0x50>
                {
                    Can_au8DisableInterruptLevel[Controller] -= 1U;
    77d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77dc:	4a0c      	ldr	r2, [pc, #48]	; (7810 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    77de:	5cd2      	ldrb	r2, [r2, r3]
    77e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77e4:	3a01      	subs	r2, #1
    77e6:	b2d1      	uxtb	r1, r2
    77e8:	4a09      	ldr	r2, [pc, #36]	; (7810 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    77ea:	54d1      	strb	r1, [r2, r3]
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    77ec:	f005 fe48 	bl	d480 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>

                if (0U == Can_au8DisableInterruptLevel[Controller])
    77f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77f4:	4a06      	ldr	r2, [pc, #24]	; (7810 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    77f6:	5cd3      	ldrb	r3, [r2, r3]
    77f8:	2b00      	cmp	r3, #0
    77fa:	d102      	bne.n	7802 <Can_43_FLEXCAN_EnableControllerInterrupts+0x66>
                {
                    Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(Can_pController);
    77fc:	9802      	ldr	r0, [sp, #8]
    77fe:	f001 f937 	bl	8a70 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    7802:	bf00      	nop
    7804:	b005      	add	sp, #20
    7806:	f85d fb04 	ldr.w	pc, [sp], #4
    780a:	bf00      	nop
    780c:	1fff8d14 	.word	0x1fff8d14
    7810:	1fff8d0c 	.word	0x1fff8d0c

00007814 <Can_43_FLEXCAN_GetControllerErrorState>:
Std_ReturnType Can_43_FLEXCAN_GetControllerErrorState
(
    uint8 ControllerId,
    Can_ErrorStateType * ErrorStatePtr
)
{
    7814:	b500      	push	{lr}
    7816:	b087      	sub	sp, #28
    7818:	4603      	mov	r3, r0
    781a:	9100      	str	r1, [sp, #0]
    781c:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    7820:	2301      	movs	r3, #1
    7822:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 errorState = 0U;
    7826:	2300      	movs	r3, #0
    7828:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 u32CoreId = 0U;
    782c:	2300      	movs	r3, #0
    782e:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7830:	2300      	movs	r3, #0
    7832:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    7834:	2300      	movs	r3, #0
    7836:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_ERROR_STATE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    7838:	4a18      	ldr	r2, [pc, #96]	; (789c <Can_43_FLEXCAN_GetControllerErrorState+0x88>)
    783a:	9b04      	ldr	r3, [sp, #16]
    783c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7840:	695a      	ldr	r2, [r3, #20]
    7842:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7846:	009b      	lsls	r3, r3, #2
    7848:	4413      	add	r3, r2
    784a:	681b      	ldr	r3, [r3, #0]
    784c:	9303      	str	r3, [sp, #12]
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerErrorState(Can_pController, &errorState);
    784e:	f10d 030b 	add.w	r3, sp, #11
    7852:	4619      	mov	r1, r3
    7854:	9803      	ldr	r0, [sp, #12]
    7856:	f001 f937 	bl	8ac8 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>
    785a:	4603      	mov	r3, r0
    785c:	f88d 3017 	strb.w	r3, [sp, #23]
                    if(eRetVal == (Std_ReturnType)E_OK)
    7860:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7864:	2b00      	cmp	r3, #0
    7866:	d112      	bne.n	788e <Can_43_FLEXCAN_GetControllerErrorState+0x7a>
                    {
                        switch (errorState)
    7868:	f89d 300b 	ldrb.w	r3, [sp, #11]
    786c:	2b00      	cmp	r3, #0
    786e:	d002      	beq.n	7876 <Can_43_FLEXCAN_GetControllerErrorState+0x62>
    7870:	2b01      	cmp	r3, #1
    7872:	d004      	beq.n	787e <Can_43_FLEXCAN_GetControllerErrorState+0x6a>
    7874:	e007      	b.n	7886 <Can_43_FLEXCAN_GetControllerErrorState+0x72>
                        {
                            case 0x00U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_ACTIVE;
    7876:	9b00      	ldr	r3, [sp, #0]
    7878:	2200      	movs	r2, #0
    787a:	601a      	str	r2, [r3, #0]
                                break;
    787c:	e008      	b.n	7890 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            case 0x01U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_PASSIVE;
    787e:	9b00      	ldr	r3, [sp, #0]
    7880:	2201      	movs	r2, #1
    7882:	601a      	str	r2, [r3, #0]
                                break;
    7884:	e004      	b.n	7890 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            default:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_BUSOFF;
    7886:	9b00      	ldr	r3, [sp, #0]
    7888:	2202      	movs	r2, #2
    788a:	601a      	str	r2, [r3, #0]
                                break;
    788c:	e000      	b.n	7890 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                        }
                    }
    788e:	bf00      	nop
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                }
    }
#endif
    return eRetVal;
    7890:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7894:	4618      	mov	r0, r3
    7896:	b007      	add	sp, #28
    7898:	f85d fb04 	ldr.w	pc, [sp], #4
    789c:	1fff8d14 	.word	0x1fff8d14

000078a0 <Can_43_FLEXCAN_GetControllerMode>:
Std_ReturnType Can_43_FLEXCAN_GetControllerMode
(
    uint8 Controller,
    Can_ControllerStateType * ControllerModePtr
)
{
    78a0:	b084      	sub	sp, #16
    78a2:	4603      	mov	r3, r0
    78a4:	9100      	str	r1, [sp, #0]
    78a6:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    78aa:	2301      	movs	r3, #1
    78ac:	f88d 300f 	strb.w	r3, [sp, #15]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    *ControllerModePtr = Can_eControllerState[Controller];
    78b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78b4:	4a06      	ldr	r2, [pc, #24]	; (78d0 <Can_43_FLEXCAN_GetControllerMode+0x30>)
    78b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    78ba:	9b00      	ldr	r3, [sp, #0]
    78bc:	601a      	str	r2, [r3, #0]
                    eRetVal = E_OK;
    78be:	2300      	movs	r3, #0
    78c0:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    78c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    78c8:	4618      	mov	r0, r3
    78ca:	b004      	add	sp, #16
    78cc:	4770      	bx	lr
    78ce:	bf00      	nop
    78d0:	1fff8d10 	.word	0x1fff8d10

000078d4 <Can_43_FLEXCAN_GetControllerRxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerRxErrorCounter
(
    uint8 ControllerId,
    uint8 * RxErrorCounterPtr
)
{
    78d4:	b500      	push	{lr}
    78d6:	b087      	sub	sp, #28
    78d8:	4603      	mov	r3, r0
    78da:	9100      	str	r1, [sp, #0]
    78dc:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    78e0:	2301      	movs	r3, #1
    78e2:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    78e6:	2300      	movs	r3, #0
    78e8:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    78ea:	2300      	movs	r3, #0
    78ec:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    78ee:	2300      	movs	r3, #0
    78f0:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_RX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    78f2:	4a0c      	ldr	r2, [pc, #48]	; (7924 <Can_43_FLEXCAN_GetControllerRxErrorCounter+0x50>)
    78f4:	9b04      	ldr	r3, [sp, #16]
    78f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78fa:	695a      	ldr	r2, [r3, #20]
    78fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7900:	009b      	lsls	r3, r3, #2
    7902:	4413      	add	r3, r2
    7904:	681b      	ldr	r3, [r3, #0]
    7906:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00515]: When the API Can_GetControllerRxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Rx error counter
                    *   register of Can Controller and shall return the Rx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(Can_pController, RxErrorCounterPtr);
    7908:	9900      	ldr	r1, [sp, #0]
    790a:	9803      	ldr	r0, [sp, #12]
    790c:	f001 f907 	bl	8b1e <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>
    7910:	4603      	mov	r3, r0
    7912:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    7916:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    791a:	4618      	mov	r0, r3
    791c:	b007      	add	sp, #28
    791e:	f85d fb04 	ldr.w	pc, [sp], #4
    7922:	bf00      	nop
    7924:	1fff8d14 	.word	0x1fff8d14

00007928 <Can_43_FLEXCAN_GetControllerTxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerTxErrorCounter
(
    uint8 ControllerId,
    uint8 * TxErrorCounterPtr
)
{
    7928:	b500      	push	{lr}
    792a:	b087      	sub	sp, #28
    792c:	4603      	mov	r3, r0
    792e:	9100      	str	r1, [sp, #0]
    7930:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    7934:	2301      	movs	r3, #1
    7936:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    793a:	2300      	movs	r3, #0
    793c:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    793e:	2300      	movs	r3, #0
    7940:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    7942:	2300      	movs	r3, #0
    7944:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_TX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    7946:	4a0c      	ldr	r2, [pc, #48]	; (7978 <Can_43_FLEXCAN_GetControllerTxErrorCounter+0x50>)
    7948:	9b04      	ldr	r3, [sp, #16]
    794a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    794e:	695a      	ldr	r2, [r3, #20]
    7950:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7954:	009b      	lsls	r3, r3, #2
    7956:	4413      	add	r3, r2
    7958:	681b      	ldr	r3, [r3, #0]
    795a:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00520]: When the API Can_GetControllerTxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Tx error counter
                    *   register of Can Controller and shall return the Tx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(Can_pController, TxErrorCounterPtr);
    795c:	9900      	ldr	r1, [sp, #0]
    795e:	9803      	ldr	r0, [sp, #12]
    7960:	f001 f8cb 	bl	8afa <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>
    7964:	4603      	mov	r3, r0
    7966:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    796a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    796e:	4618      	mov	r0, r3
    7970:	b007      	add	sp, #28
    7972:	f85d fb04 	ldr.w	pc, [sp], #4
    7976:	bf00      	nop
    7978:	1fff8d14 	.word	0x1fff8d14

0000797c <Can_43_FLEXCAN_Write>:
Std_ReturnType Can_43_FLEXCAN_Write
(
    Can_HwHandleType Hth,
    const Can_PduType * PduInfo
)
{
    797c:	b500      	push	{lr}
    797e:	b089      	sub	sp, #36	; 0x24
    7980:	4603      	mov	r3, r0
    7982:	9100      	str	r1, [sp, #0]
    7984:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType eRetVal = E_NOT_OK;
    7988:	2301      	movs	r3, #1
    798a:	f88d 301f 	strb.w	r3, [sp, #31]
    uint8 u8ControllerID = 0U;
    798e:	2300      	movs	r3, #0
    7990:	f88d 301e 	strb.w	r3, [sp, #30]
    uint32 u32CoreId = 0U;
    7994:	2300      	movs	r3, #0
    7996:	9306      	str	r3, [sp, #24]
    Can_HwHandleType HwObjectID = 0U;
    7998:	2300      	movs	r3, #0
    799a:	f8ad 3016 	strh.w	r3, [sp, #22]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    799e:	2300      	movs	r3, #0
    79a0:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    79a2:	2300      	movs	r3, #0
    79a4:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    79a6:	2300      	movs	r3, #0
    79a8:	9306      	str	r3, [sp, #24]
    HwObjectID = Hth;
    79aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    79ae:	f8ad 3016 	strh.w	r3, [sp, #22]
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_WRITE, CAN_43_FLEXCAN_E_PARAM_POINTER);
            }
            else
            {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pHwObjIDToCtrlIDMap[HwObjectID];
    79b2:	4a1d      	ldr	r2, [pc, #116]	; (7a28 <Can_43_FLEXCAN_Write+0xac>)
    79b4:	9b06      	ldr	r3, [sp, #24]
    79b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79ba:	68da      	ldr	r2, [r3, #12]
    79bc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    79c0:	4413      	add	r3, r2
    79c2:	781b      	ldrb	r3, [r3, #0]
    79c4:	f88d 301e 	strb.w	r3, [sp, #30]
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    79c8:	4a17      	ldr	r2, [pc, #92]	; (7a28 <Can_43_FLEXCAN_Write+0xac>)
    79ca:	9b06      	ldr	r3, [sp, #24]
    79cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79d0:	695a      	ldr	r2, [r3, #20]
    79d2:	f89d 301e 	ldrb.w	r3, [sp, #30]
    79d6:	009b      	lsls	r3, r3, #2
    79d8:	4413      	add	r3, r2
    79da:	681b      	ldr	r3, [r3, #0]
    79dc:	9304      	str	r3, [sp, #16]
                if (NULL_PTR != Can_pController)
    79de:	9b04      	ldr	r3, [sp, #16]
    79e0:	2b00      	cmp	r3, #0
    79e2:	d01b      	beq.n	7a1c <Can_43_FLEXCAN_Write+0xa0>
                {
                    Can_pHwObject = &((Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID]);
    79e4:	4a10      	ldr	r2, [pc, #64]	; (7a28 <Can_43_FLEXCAN_Write+0xac>)
    79e6:	9b06      	ldr	r3, [sp, #24]
    79e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79ec:	6919      	ldr	r1, [r3, #16]
    79ee:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    79f2:	4613      	mov	r3, r2
    79f4:	00db      	lsls	r3, r3, #3
    79f6:	4413      	add	r3, r2
    79f8:	009b      	lsls	r3, r3, #2
    79fa:	440b      	add	r3, r1
    79fc:	9303      	str	r3, [sp, #12]
                #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    if ((TRUE == Can_ValidatePdu(Can_pController, Can_pHwObject, PduInfo)) && (CAN_CS_STARTED == Can_eControllerState[u8ControllerID]))
                #else
                    /* avoid unexpected behaviour when accessing to RAM */
                    if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    79fe:	f89d 301e 	ldrb.w	r3, [sp, #30]
    7a02:	4a0a      	ldr	r2, [pc, #40]	; (7a2c <Can_43_FLEXCAN_Write+0xb0>)
    7a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a08:	2b01      	cmp	r3, #1
    7a0a:	d107      	bne.n	7a1c <Can_43_FLEXCAN_Write+0xa0>
                            eRetVal = CAN_BUSY;
                        }
                        else
                        {
                    #endif
                            eRetVal = Can_43_FLEXCAN_Ipw_Write(Can_pController, Can_pHwObject, PduInfo);
    7a0c:	9a00      	ldr	r2, [sp, #0]
    7a0e:	9903      	ldr	r1, [sp, #12]
    7a10:	9804      	ldr	r0, [sp, #16]
    7a12:	f001 f896 	bl	8b42 <Can_43_FLEXCAN_Ipw_Write>
    7a16:	4603      	mov	r3, r0
    7a18:	f88d 301f 	strb.w	r3, [sp, #31]
                }
            #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
            }
    }
#endif
    return eRetVal;
    7a1c:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    7a20:	4618      	mov	r0, r3
    7a22:	b009      	add	sp, #36	; 0x24
    7a24:	f85d fb04 	ldr.w	pc, [sp], #4
    7a28:	1fff8d14 	.word	0x1fff8d14
    7a2c:	1fff8d10 	.word	0x1fff8d10

00007a30 <Can_43_FLEXCAN_MainFunction_Write>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON */
    }
    7a30:	bf00      	nop
    7a32:	4770      	bx	lr

00007a34 <Can_43_FLEXCAN_MainFunction_Read>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON */
    }
    7a34:	bf00      	nop
    7a36:	4770      	bx	lr

00007a38 <Can_43_FLEXCAN_MainFunction_BusOff>:
            }
            u8ControllerID++;
        }
    }
#endif /* CAN_43_FLEXCAN_BUSOFF_POLLING_SUPPORT == STD_ON */
}
    7a38:	bf00      	nop
    7a3a:	4770      	bx	lr

00007a3c <Can_43_FLEXCAN_MainFunction_Mode>:
*
* @api
*/
/* implements     Can_MainFunction_Mode_Activity */
void Can_43_FLEXCAN_MainFunction_Mode(void)
{
    7a3c:	b500      	push	{lr}
    7a3e:	b085      	sub	sp, #20
    uint8 u8ControllerID = 0U;
    7a40:	2300      	movs	r3, #0
    7a42:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32CoreId = 0U;
    7a46:	2300      	movs	r3, #0
    7a48:	9302      	str	r3, [sp, #8]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7a4a:	2300      	movs	r3, #0
    7a4c:	9301      	str	r3, [sp, #4]

    u32CoreId = Can_GetCoreID();
    7a4e:	2300      	movs	r3, #0
    7a50:	9302      	str	r3, [sp, #8]
    if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    7a52:	4a17      	ldr	r2, [pc, #92]	; (7ab0 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    7a54:	9b02      	ldr	r3, [sp, #8]
    7a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a5a:	2b00      	cmp	r3, #0
    7a5c:	d024      	beq.n	7aa8 <Can_43_FLEXCAN_MainFunction_Mode+0x6c>
    {
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    7a5e:	e01f      	b.n	7aa0 <Can_43_FLEXCAN_MainFunction_Mode+0x64>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    7a60:	4a13      	ldr	r2, [pc, #76]	; (7ab0 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    7a62:	9b02      	ldr	r3, [sp, #8]
    7a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a68:	695a      	ldr	r2, [r3, #20]
    7a6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7a6e:	009b      	lsls	r3, r3, #2
    7a70:	4413      	add	r3, r2
    7a72:	681b      	ldr	r3, [r3, #0]
    7a74:	9301      	str	r3, [sp, #4]
            if (NULL_PTR != Can_pController)
    7a76:	9b01      	ldr	r3, [sp, #4]
    7a78:	2b00      	cmp	r3, #0
    7a7a:	d00c      	beq.n	7a96 <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
            {
                if (TRUE == Can_pController->Can_bActivation)
    7a7c:	9b01      	ldr	r3, [sp, #4]
    7a7e:	7a1b      	ldrb	r3, [r3, #8]
    7a80:	2b00      	cmp	r3, #0
    7a82:	d008      	beq.n	7a96 <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
                {
                    Can_43_FLEXCAN_Ipw_MainFunction_Mode(Can_pController, &Can_eControllerState[u8ControllerID]);
    7a84:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7a88:	009b      	lsls	r3, r3, #2
    7a8a:	4a0a      	ldr	r2, [pc, #40]	; (7ab4 <Can_43_FLEXCAN_MainFunction_Mode+0x78>)
    7a8c:	4413      	add	r3, r2
    7a8e:	4619      	mov	r1, r3
    7a90:	9801      	ldr	r0, [sp, #4]
    7a92:	f001 f95c 	bl	8d4e <Can_43_FLEXCAN_Ipw_MainFunction_Mode>
                }
            }
            u8ControllerID++;
    7a96:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7a9a:	3301      	adds	r3, #1
    7a9c:	f88d 300f 	strb.w	r3, [sp, #15]
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    7aa0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7aa4:	2b00      	cmp	r3, #0
    7aa6:	d0db      	beq.n	7a60 <Can_43_FLEXCAN_MainFunction_Mode+0x24>
        }
    }
}
    7aa8:	bf00      	nop
    7aaa:	b005      	add	sp, #20
    7aac:	f85d fb04 	ldr.w	pc, [sp], #4
    7ab0:	1fff8d14 	.word	0x1fff8d14
    7ab4:	1fff8d10 	.word	0x1fff8d10

00007ab8 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>:
(
    uint8 u8CtrlOffset,
    uint8 u8MbIdx,
    Can_43_FLEXCAN_MbType mbType
)
{
    7ab8:	b500      	push	{lr}
    7aba:	b087      	sub	sp, #28
    7abc:	4603      	mov	r3, r0
    7abe:	9200      	str	r2, [sp, #0]
    7ac0:	f88d 3007 	strb.w	r3, [sp, #7]
    7ac4:	460b      	mov	r3, r1
    7ac6:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 u8ControllerID = 0U;
    7aca:	2300      	movs	r3, #0
    7acc:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    7ad0:	2300      	movs	r3, #0
    7ad2:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7ad4:	2300      	movs	r3, #0
    7ad6:	9303      	str	r3, [sp, #12]

    MCAL_FAULT_INJECTION_POINT(CAN_FIP_2_CHANGE_DRIVER_TO_UNINITIALIZED);
    u32CoreId = Can_GetCoreID();
    7ad8:	2300      	movs	r3, #0
    7ada:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    7adc:	4a16      	ldr	r2, [pc, #88]	; (7b38 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    7ade:	9b04      	ldr	r3, [sp, #16]
    7ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ae4:	2b00      	cmp	r3, #0
    7ae6:	d022      	beq.n	7b2e <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    7ae8:	4a13      	ldr	r2, [pc, #76]	; (7b38 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    7aea:	9b04      	ldr	r3, [sp, #16]
    7aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7af0:	689a      	ldr	r2, [r3, #8]
    7af2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7af6:	4413      	add	r3, r2
    7af8:	781b      	ldrb	r3, [r3, #0]
    7afa:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    7afe:	4a0e      	ldr	r2, [pc, #56]	; (7b38 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    7b00:	9b04      	ldr	r3, [sp, #16]
    7b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b06:	695a      	ldr	r2, [r3, #20]
    7b08:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7b0c:	009b      	lsls	r3, r3, #2
    7b0e:	4413      	add	r3, r2
    7b10:	681b      	ldr	r3, [r3, #0]
    7b12:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    7b14:	9b03      	ldr	r3, [sp, #12]
    7b16:	2b00      	cmp	r3, #0
    7b18:	d009      	beq.n	7b2e <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
        {
            Can_43_FLEXCAN_Ipw_ProcessHwObject(Can_pController, (Can_apxConfig[u32CoreId]), u8MbIdx, mbType);
    7b1a:	4a07      	ldr	r2, [pc, #28]	; (7b38 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    7b1c:	9b04      	ldr	r3, [sp, #16]
    7b1e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    7b22:	f89d 2006 	ldrb.w	r2, [sp, #6]
    7b26:	9b00      	ldr	r3, [sp, #0]
    7b28:	9803      	ldr	r0, [sp, #12]
    7b2a:	f001 f946 	bl	8dba <Can_43_FLEXCAN_Ipw_ProcessHwObject>
        }

    }
}
    7b2e:	bf00      	nop
    7b30:	b007      	add	sp, #28
    7b32:	f85d fb04 	ldr.w	pc, [sp], #4
    7b36:	bf00      	nop
    7b38:	1fff8d14 	.word	0x1fff8d14

00007b3c <Can_43_FLEXCAN_ProcessBusOffInterrupt>:
*/
void Can_43_FLEXCAN_ProcessBusOffInterrupt
(
    uint8 u8CtrlOffset
)
{
    7b3c:	b500      	push	{lr}
    7b3e:	b087      	sub	sp, #28
    7b40:	4603      	mov	r3, r0
    7b42:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 u8ControllerID = 0U;
    7b46:	2300      	movs	r3, #0
    7b48:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    7b4c:	2300      	movs	r3, #0
    7b4e:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7b50:	2300      	movs	r3, #0
    7b52:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    7b54:	2300      	movs	r3, #0
    7b56:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    7b58:	4a19      	ldr	r2, [pc, #100]	; (7bc0 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    7b5a:	9b04      	ldr	r3, [sp, #16]
    7b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b60:	2b00      	cmp	r3, #0
    7b62:	d029      	beq.n	7bb8 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    7b64:	4a16      	ldr	r2, [pc, #88]	; (7bc0 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    7b66:	9b04      	ldr	r3, [sp, #16]
    7b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b6c:	689a      	ldr	r2, [r3, #8]
    7b6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b72:	4413      	add	r3, r2
    7b74:	781b      	ldrb	r3, [r3, #0]
    7b76:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    7b7a:	4a11      	ldr	r2, [pc, #68]	; (7bc0 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    7b7c:	9b04      	ldr	r3, [sp, #16]
    7b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b82:	695a      	ldr	r2, [r3, #20]
    7b84:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7b88:	009b      	lsls	r3, r3, #2
    7b8a:	4413      	add	r3, r2
    7b8c:	681b      	ldr	r3, [r3, #0]
    7b8e:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    7b90:	9b03      	ldr	r3, [sp, #12]
    7b92:	2b00      	cmp	r3, #0
    7b94:	d010      	beq.n	7bb8 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
        {
            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    7b96:	9803      	ldr	r0, [sp, #12]
    7b98:	f000 fec2 	bl	8920 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    7b9c:	4603      	mov	r3, r0
    7b9e:	2b00      	cmp	r3, #0
    7ba0:	d10a      	bne.n	7bb8 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    7ba2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7ba6:	4a07      	ldr	r2, [pc, #28]	; (7bc4 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x88>)
    7ba8:	2102      	movs	r1, #2
    7baa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                CanIf_ControllerBusOff(Can_pController->Can_u8AbstControllerID);
    7bae:	9b03      	ldr	r3, [sp, #12]
    7bb0:	781b      	ldrb	r3, [r3, #0]
    7bb2:	4618      	mov	r0, r3
    7bb4:	f007 ff0e 	bl	f9d4 <CanIf_ControllerBusOff>
            }
        }
    }
}
    7bb8:	bf00      	nop
    7bba:	b007      	add	sp, #28
    7bbc:	f85d fb04 	ldr.w	pc, [sp], #4
    7bc0:	1fff8d14 	.word	0x1fff8d14
    7bc4:	1fff8d10 	.word	0x1fff8d10

00007bc8 <Can_Ipw_ParseData>:
    PduInfoType * CanIf_PduInfo,
    Flexcan_Ip_MsgBuffType * pReceivedDataBuffer,
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
)
{
    7bc8:	b500      	push	{lr}
    7bca:	b085      	sub	sp, #20
    7bcc:	9003      	str	r0, [sp, #12]
    7bce:	9102      	str	r1, [sp, #8]
    7bd0:	9201      	str	r2, [sp, #4]
    7bd2:	9300      	str	r3, [sp, #0]
    CanIf_Mailbox->CanId = pReceivedDataBuffer->msgId;
    7bd4:	9b01      	ldr	r3, [sp, #4]
    7bd6:	685a      	ldr	r2, [r3, #4]
    7bd8:	9b03      	ldr	r3, [sp, #12]
    7bda:	601a      	str	r2, [r3, #0]
    * convert the ID to a standardized format since the Upper layer (CANIF) does not know
    * whether the received CAN frame is a Standard CAN frame or Extended CAN frame.
    * In case of an Extended CAN frame, MSB of a received CAN frame ID needs to be
    * made as ‘1’ to mark the received CAN frame as Extended.⌋
    */
    if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_IDE_MASK) != 0U)
    7bdc:	9b01      	ldr	r3, [sp, #4]
    7bde:	681b      	ldr	r3, [r3, #0]
    7be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    7be4:	2b00      	cmp	r3, #0
    7be6:	d005      	beq.n	7bf4 <Can_Ipw_ParseData+0x2c>
    {
        CanIf_Mailbox->CanId |= (uint32)0x80000000U;
    7be8:	9b03      	ldr	r3, [sp, #12]
    7bea:	681b      	ldr	r3, [r3, #0]
    7bec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    7bf0:	9b03      	ldr	r3, [sp, #12]
    7bf2:	601a      	str	r2, [r3, #0]
    }

    if (CAN_RX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    7bf4:	9b06      	ldr	r3, [sp, #24]
    7bf6:	699b      	ldr	r3, [r3, #24]
    7bf8:	2b00      	cmp	r3, #0
    7bfa:	d10c      	bne.n	7c16 <Can_Ipw_ParseData+0x4e>
    {
        /* Check if Mb Overrun */
        if ((uint32)(0x06000000U) == (pReceivedDataBuffer->cs & CAN_IPW_CS_CODE_MASK))
    7bfc:	9b01      	ldr	r3, [sp, #4]
    7bfe:	681b      	ldr	r3, [r3, #0]
    7c00:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    7c04:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    7c08:	d105      	bne.n	7c16 <Can_Ipw_ParseData+0x4e>
        {
            (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    7c0a:	2301      	movs	r3, #1
    7c0c:	2208      	movs	r2, #8
    7c0e:	2100      	movs	r1, #0
    7c10:	2050      	movs	r0, #80	; 0x50
    7c12:	f007 fd3f 	bl	f694 <Det_ReportRuntimeError>
        }
    }

    /* when legacy fifo enabled, FD must be disabled */
    if (CAN_RX_LEGACY_FIFO != Can_pHwObjectConfig->Can_eReceiveType)
    7c16:	9b06      	ldr	r3, [sp, #24]
    7c18:	699b      	ldr	r3, [r3, #24]
    7c1a:	2b01      	cmp	r3, #1
    7c1c:	d009      	beq.n	7c32 <Can_Ipw_ParseData+0x6a>
    {
        /*
        * [SWS_Can_00501] ⌈ CanDrv shall indicate whether the received message is a
        * conventional CAN frame or a CAN FD frame as described in Can_IdType.⌋
        */
        if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_EDL_MASK) != 0U)
    7c1e:	9b01      	ldr	r3, [sp, #4]
    7c20:	681b      	ldr	r3, [r3, #0]
    7c22:	2b00      	cmp	r3, #0
    7c24:	da05      	bge.n	7c32 <Can_Ipw_ParseData+0x6a>
        {
            CanIf_Mailbox->CanId |= (uint32)0x40000000U;
    7c26:	9b03      	ldr	r3, [sp, #12]
    7c28:	681b      	ldr	r3, [r3, #0]
    7c2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    7c2e:	9b03      	ldr	r3, [sp, #12]
    7c30:	601a      	str	r2, [r3, #0]
        }
    }

    if (Can_pHwObjectConfig->Can_u8PayloadLength <= pReceivedDataBuffer->dataLen)
    7c32:	9b06      	ldr	r3, [sp, #24]
    7c34:	7c1a      	ldrb	r2, [r3, #16]
    7c36:	9b01      	ldr	r3, [sp, #4]
    7c38:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    7c3c:	429a      	cmp	r2, r3
    7c3e:	d805      	bhi.n	7c4c <Can_Ipw_ParseData+0x84>
    {
        CanIf_PduInfo->SduLength = Can_pHwObjectConfig->Can_u8PayloadLength;
    7c40:	9b06      	ldr	r3, [sp, #24]
    7c42:	7c1b      	ldrb	r3, [r3, #16]
    7c44:	461a      	mov	r2, r3
    7c46:	9b02      	ldr	r3, [sp, #8]
    7c48:	609a      	str	r2, [r3, #8]
    7c4a:	e005      	b.n	7c58 <Can_Ipw_ParseData+0x90>
    }
    else
    {
        CanIf_PduInfo->SduLength = pReceivedDataBuffer->dataLen;
    7c4c:	9b01      	ldr	r3, [sp, #4]
    7c4e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    7c52:	461a      	mov	r2, r3
    7c54:	9b02      	ldr	r3, [sp, #8]
    7c56:	609a      	str	r2, [r3, #8]
                                                      CanIf_PduInfo->SduLength, \
                                                      &pReceivedDataBuffer->data[0]) \
                                                     )
    {
#endif
    CanIf_Mailbox->Hoh = Can_pHwObjectConfig->Can_HwObjectID;
    7c58:	9b06      	ldr	r3, [sp, #24]
    7c5a:	881a      	ldrh	r2, [r3, #0]
    7c5c:	9b03      	ldr	r3, [sp, #12]
    7c5e:	809a      	strh	r2, [r3, #4]
    CanIf_Mailbox->ControllerId = Can_pControllerConfig->Can_u8AbstControllerID;
    7c60:	9b00      	ldr	r3, [sp, #0]
    7c62:	781a      	ldrb	r2, [r3, #0]
    7c64:	9b03      	ldr	r3, [sp, #12]
    7c66:	719a      	strb	r2, [r3, #6]
    CanIf_PduInfo->SduDataPtr = &pReceivedDataBuffer->data[0];
    7c68:	9b01      	ldr	r3, [sp, #4]
    7c6a:	f103 0208 	add.w	r2, r3, #8
    7c6e:	9b02      	ldr	r3, [sp, #8]
    7c70:	601a      	str	r2, [r3, #0]
    CanIf_RxIndication(CanIf_Mailbox, CanIf_PduInfo);
    7c72:	9902      	ldr	r1, [sp, #8]
    7c74:	9803      	ldr	r0, [sp, #12]
    7c76:	f007 fe3b 	bl	f8f0 <CanIf_RxIndication>
#if (CAN_43_FLEXCAN_LPDU_CALLOUT_SUPPORT == STD_ON)
    }
#endif
}
    7c7a:	bf00      	nop
    7c7c:	b005      	add	sp, #20
    7c7e:	f85d fb04 	ldr.w	pc, [sp], #4

00007c82 <Can_Ipw_InitLegacyFifoFilter>:

static void Can_Ipw_InitLegacyFifoFilter(const Can_43_FLEXCAN_ControllerConfigType * Can_pController, const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject)
{
    7c82:	b500      	push	{lr}
    7c84:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    7c88:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7c8c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7c90:	6018      	str	r0, [r3, #0]
    7c92:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7c96:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7c9a:	6019      	str	r1, [r3, #0]
    uint8 u8FilterIdx=0U;
    7c9c:	2300      	movs	r3, #0
    7c9e:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    uint8 u8HwFilterCount = 0U;
    7ca2:	2300      	movs	r3, #0
    7ca4:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
    uint32 u32HwFilterMask = (uint32)0x00000000U;
    7ca8:	2300      	movs	r3, #0
    7caa:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    /* The max FIFO id filter affected by Rx individual masks*/
    uint8 u8FiFoFilterIndvCount = 0U;
    7cae:	2300      	movs	r3, #0
    7cb0:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    Flexcan_Ip_RxFifoIdElementFormatType eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    7cb4:	2300      	movs	r3, #0
    7cb6:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
    /* Need to alocate a filter array with elemnets no as defined in HwObject */
    Flexcan_Ip_IdTableType RxFifoFilters[128];

    if (((Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U) <= 32U)
    7cba:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7cbe:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7cc2:	681b      	ldr	r3, [r3, #0]
    7cc4:	7c9b      	ldrb	r3, [r3, #18]
    7cc6:	089b      	lsrs	r3, r3, #2
    7cc8:	b2db      	uxtb	r3, r3
    7cca:	3306      	adds	r3, #6
    7ccc:	2b20      	cmp	r3, #32
    7cce:	d80b      	bhi.n	7ce8 <Can_Ipw_InitLegacyFifoFilter+0x66>
    {
        u8FiFoFilterIndvCount = (Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U;
    7cd0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7cd4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7cd8:	681b      	ldr	r3, [r3, #0]
    7cda:	7c9b      	ldrb	r3, [r3, #18]
    7cdc:	089b      	lsrs	r3, r3, #2
    7cde:	b2db      	uxtb	r3, r3
    7ce0:	3306      	adds	r3, #6
    7ce2:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    7ce6:	e002      	b.n	7cee <Can_Ipw_InitLegacyFifoFilter+0x6c>
    }
    else
    {
        u8FiFoFilterIndvCount = 32U;
    7ce8:	2320      	movs	r3, #32
    7cea:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    }
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    7cee:	2300      	movs	r3, #0
    7cf0:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    7cf4:	e169      	b.n	7fca <Can_Ipw_InitLegacyFifoFilter+0x348>
    {
            if (CAN_LEGACY_FIFO_FORMAT_A == Can_pController->Can_eLegacyAcceptanceMode)
    7cf6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7cfa:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7cfe:	681b      	ldr	r3, [r3, #0]
    7d00:	691b      	ldr	r3, [r3, #16]
    7d02:	2b00      	cmp	r3, #0
    7d04:	d13a      	bne.n	7d7c <Can_Ipw_InitLegacyFifoFilter+0xfa>
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount;
    7d06:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7d0a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7d0e:	681b      	ldr	r3, [r3, #0]
    7d10:	7c9b      	ldrb	r3, [r3, #18]
    7d12:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC0000000U;
    7d16:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    7d1a:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    7d1e:	2300      	movs	r3, #0
    7d20:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    7d24:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7d28:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7d2c:	681b      	ldr	r3, [r3, #0]
    7d2e:	689b      	ldr	r3, [r3, #8]
    7d30:	2b00      	cmp	r3, #0
    7d32:	d011      	beq.n	7d58 <Can_Ipw_InitLegacyFifoFilter+0xd6>
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_EXT_SHIFT;
    7d34:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7d38:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7d3c:	681b      	ldr	r3, [r3, #0]
    7d3e:	695a      	ldr	r2, [r3, #20]
    7d40:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7d44:	00db      	lsls	r3, r3, #3
    7d46:	4413      	add	r3, r2
    7d48:	685b      	ldr	r3, [r3, #4]
    7d4a:	005b      	lsls	r3, r3, #1
    7d4c:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7d50:	4313      	orrs	r3, r2
    7d52:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7d56:	e126      	b.n	7fa6 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_STD_SHIFT;
    7d58:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7d5c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7d60:	681b      	ldr	r3, [r3, #0]
    7d62:	695a      	ldr	r2, [r3, #20]
    7d64:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7d68:	00db      	lsls	r3, r3, #3
    7d6a:	4413      	add	r3, r2
    7d6c:	685b      	ldr	r3, [r3, #4]
    7d6e:	04db      	lsls	r3, r3, #19
    7d70:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7d74:	4313      	orrs	r3, r2
    7d76:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7d7a:	e114      	b.n	7fa6 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else if (CAN_LEGACY_FIFO_FORMAT_B == Can_pController->Can_eLegacyAcceptanceMode)
    7d7c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7d80:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7d84:	681b      	ldr	r3, [r3, #0]
    7d86:	691b      	ldr	r3, [r3, #16]
    7d88:	2b01      	cmp	r3, #1
    7d8a:	d160      	bne.n	7e4e <Can_Ipw_InitLegacyFifoFilter+0x1cc>
            {
                u8HwFilterCount = Can_pHwObject->Can_u8HwFilterCount * 2U ;
    7d8c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7d90:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7d94:	681b      	ldr	r3, [r3, #0]
    7d96:	7c9b      	ldrb	r3, [r3, #18]
    7d98:	005b      	lsls	r3, r3, #1
    7d9a:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC000C000U;
    7d9e:	f04f 23c0 	mov.w	r3, #3221274624	; 0xc000c000
    7da2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_B;
    7da6:	2301      	movs	r3, #1
    7da8:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    7dac:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7db0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7db4:	681b      	ldr	r3, [r3, #0]
    7db6:	689b      	ldr	r3, [r3, #8]
    7db8:	2b00      	cmp	r3, #0
    7dba:	d024      	beq.n	7e06 <Can_Ipw_InitLegacyFifoFilter+0x184>
                {
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT1;
    7dbc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7dc0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7dc4:	681b      	ldr	r3, [r3, #0]
    7dc6:	695a      	ldr	r2, [r3, #20]
    7dc8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7dcc:	011b      	lsls	r3, r3, #4
    7dce:	4413      	add	r3, r2
    7dd0:	685b      	ldr	r3, [r3, #4]
    7dd2:	0bdb      	lsrs	r3, r3, #15
    7dd4:	041b      	lsls	r3, r3, #16
    7dd6:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7dda:	4313      	orrs	r3, r2
    7ddc:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT2;
    7de0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7de4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7de8:	681b      	ldr	r3, [r3, #0]
    7dea:	695a      	ldr	r2, [r3, #20]
    7dec:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7df0:	011b      	lsls	r3, r3, #4
    7df2:	3308      	adds	r3, #8
    7df4:	4413      	add	r3, r2
    7df6:	685b      	ldr	r3, [r3, #4]
    7df8:	0bdb      	lsrs	r3, r3, #15
    7dfa:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7dfe:	4313      	orrs	r3, r2
    7e00:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7e04:	e0cf      	b.n	7fa6 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT1;
    7e06:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7e0a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7e0e:	681b      	ldr	r3, [r3, #0]
    7e10:	695a      	ldr	r2, [r3, #20]
    7e12:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7e16:	011b      	lsls	r3, r3, #4
    7e18:	4413      	add	r3, r2
    7e1a:	685b      	ldr	r3, [r3, #4]
    7e1c:	04db      	lsls	r3, r3, #19
    7e1e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7e22:	4313      	orrs	r3, r2
    7e24:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT2;
    7e28:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7e2c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7e30:	681b      	ldr	r3, [r3, #0]
    7e32:	695a      	ldr	r2, [r3, #20]
    7e34:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7e38:	011b      	lsls	r3, r3, #4
    7e3a:	3308      	adds	r3, #8
    7e3c:	4413      	add	r3, r2
    7e3e:	685b      	ldr	r3, [r3, #4]
    7e40:	00db      	lsls	r3, r3, #3
    7e42:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7e46:	4313      	orrs	r3, r2
    7e48:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7e4c:	e0ab      	b.n	7fa6 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else /*CAN_LEGACY_FIFO_FORMAT_C == Can_pController->Can_eLegacyAcceptanceMode */
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount * 4U ;
    7e4e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7e52:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7e56:	681b      	ldr	r3, [r3, #0]
    7e58:	7c9b      	ldrb	r3, [r3, #18]
    7e5a:	009b      	lsls	r3, r3, #2
    7e5c:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0x00000000U;
    7e60:	2300      	movs	r3, #0
    7e62:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_C;
    7e66:	2302      	movs	r3, #2
    7e68:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    7e6c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7e70:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7e74:	681b      	ldr	r3, [r3, #0]
    7e76:	689b      	ldr	r3, [r3, #8]
    7e78:	2b00      	cmp	r3, #0
    7e7a:	d04a      	beq.n	7f12 <Can_Ipw_InitLegacyFifoFilter+0x290>
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    7e7c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7e80:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7e84:	681b      	ldr	r3, [r3, #0]
    7e86:	695a      	ldr	r2, [r3, #20]
    7e88:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7e8c:	015b      	lsls	r3, r3, #5
    7e8e:	4413      	add	r3, r2
    7e90:	685b      	ldr	r3, [r3, #4]
    7e92:	0d5b      	lsrs	r3, r3, #21
    7e94:	061b      	lsls	r3, r3, #24
    7e96:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7e9a:	4313      	orrs	r3, r2
    7e9c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    7ea0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7ea4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7ea8:	681b      	ldr	r3, [r3, #0]
    7eaa:	695a      	ldr	r2, [r3, #20]
    7eac:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7eb0:	015b      	lsls	r3, r3, #5
    7eb2:	3308      	adds	r3, #8
    7eb4:	4413      	add	r3, r2
    7eb6:	685b      	ldr	r3, [r3, #4]
    7eb8:	0d5b      	lsrs	r3, r3, #21
    7eba:	041b      	lsls	r3, r3, #16
    7ebc:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7ec0:	4313      	orrs	r3, r2
    7ec2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    7ec6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7eca:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7ece:	681b      	ldr	r3, [r3, #0]
    7ed0:	695a      	ldr	r2, [r3, #20]
    7ed2:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7ed6:	015b      	lsls	r3, r3, #5
    7ed8:	3310      	adds	r3, #16
    7eda:	4413      	add	r3, r2
    7edc:	685b      	ldr	r3, [r3, #4]
    7ede:	0d5b      	lsrs	r3, r3, #21
    7ee0:	021b      	lsls	r3, r3, #8
    7ee2:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7ee6:	4313      	orrs	r3, r2
    7ee8:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    7eec:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7ef0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7ef4:	681b      	ldr	r3, [r3, #0]
    7ef6:	695a      	ldr	r2, [r3, #20]
    7ef8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7efc:	015b      	lsls	r3, r3, #5
    7efe:	3318      	adds	r3, #24
    7f00:	4413      	add	r3, r2
    7f02:	685b      	ldr	r3, [r3, #4]
    7f04:	0d5b      	lsrs	r3, r3, #21
    7f06:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7f0a:	4313      	orrs	r3, r2
    7f0c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7f10:	e049      	b.n	7fa6 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    7f12:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7f16:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7f1a:	681b      	ldr	r3, [r3, #0]
    7f1c:	695a      	ldr	r2, [r3, #20]
    7f1e:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7f22:	015b      	lsls	r3, r3, #5
    7f24:	4413      	add	r3, r2
    7f26:	685b      	ldr	r3, [r3, #4]
    7f28:	08db      	lsrs	r3, r3, #3
    7f2a:	061b      	lsls	r3, r3, #24
    7f2c:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7f30:	4313      	orrs	r3, r2
    7f32:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    7f36:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7f3a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7f3e:	681b      	ldr	r3, [r3, #0]
    7f40:	695a      	ldr	r2, [r3, #20]
    7f42:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7f46:	015b      	lsls	r3, r3, #5
    7f48:	3308      	adds	r3, #8
    7f4a:	4413      	add	r3, r2
    7f4c:	685b      	ldr	r3, [r3, #4]
    7f4e:	08db      	lsrs	r3, r3, #3
    7f50:	041b      	lsls	r3, r3, #16
    7f52:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7f56:	4313      	orrs	r3, r2
    7f58:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    7f5c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7f60:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7f64:	681b      	ldr	r3, [r3, #0]
    7f66:	695a      	ldr	r2, [r3, #20]
    7f68:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7f6c:	015b      	lsls	r3, r3, #5
    7f6e:	3310      	adds	r3, #16
    7f70:	4413      	add	r3, r2
    7f72:	685b      	ldr	r3, [r3, #4]
    7f74:	08db      	lsrs	r3, r3, #3
    7f76:	021b      	lsls	r3, r3, #8
    7f78:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7f7c:	4313      	orrs	r3, r2
    7f7e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    7f82:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7f86:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7f8a:	681b      	ldr	r3, [r3, #0]
    7f8c:	695a      	ldr	r2, [r3, #20]
    7f8e:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7f92:	015b      	lsls	r3, r3, #5
    7f94:	3318      	adds	r3, #24
    7f96:	4413      	add	r3, r2
    7f98:	685b      	ldr	r3, [r3, #4]
    7f9a:	08db      	lsrs	r3, r3, #3
    7f9c:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7fa0:	4313      	orrs	r3, r2
    7fa2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                }
            }
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, u8FilterIdx, u32HwFilterMask);
    7fa6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7faa:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7fae:	681b      	ldr	r3, [r3, #0]
    7fb0:	789b      	ldrb	r3, [r3, #2]
    7fb2:	f89d 1417 	ldrb.w	r1, [sp, #1047]	; 0x417
    7fb6:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7fba:	4618      	mov	r0, r3
    7fbc:	f002 fe76 	bl	acac <FlexCAN_Ip_SetRxIndividualMask_Privileged>
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    7fc0:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7fc4:	3301      	adds	r3, #1
    7fc6:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    7fca:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    7fce:	f89d 340f 	ldrb.w	r3, [sp, #1039]	; 0x40f
    7fd2:	429a      	cmp	r2, r3
    7fd4:	d20a      	bcs.n	7fec <Can_Ipw_InitLegacyFifoFilter+0x36a>
    7fd6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7fda:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7fde:	681b      	ldr	r3, [r3, #0]
    7fe0:	7c9b      	ldrb	r3, [r3, #18]
    7fe2:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    7fe6:	429a      	cmp	r2, r3
    7fe8:	f4ff ae85 	bcc.w	7cf6 <Can_Ipw_InitLegacyFifoFilter+0x74>
    }

    (void)FlexCAN_Ip_SetRxFifoGlobalMask(Can_pController->Can_u8ControllerOffset, Can_pController->Can_u32LegacyGlobalMask);
    7fec:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7ff0:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7ff4:	681b      	ldr	r3, [r3, #0]
    7ff6:	789a      	ldrb	r2, [r3, #2]
    7ff8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7ffc:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    8000:	681b      	ldr	r3, [r3, #0]
    8002:	68db      	ldr	r3, [r3, #12]
    8004:	4619      	mov	r1, r3
    8006:	4610      	mov	r0, r2
    8008:	f002 fe9e 	bl	ad48 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>
    
    if (u8HwFilterCount != 0U)
    800c:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    8010:	2b00      	cmp	r3, #0
    8012:	d054      	beq.n	80be <Can_Ipw_InitLegacyFifoFilter+0x43c>
    {
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    8014:	2300      	movs	r3, #0
    8016:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    801a:	e03e      	b.n	809a <Can_Ipw_InitLegacyFifoFilter+0x418>
        {
            RxFifoFilters[u8FilterIdx].id = Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterCode;
    801c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    8020:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    8024:	681b      	ldr	r3, [r3, #0]
    8026:	695a      	ldr	r2, [r3, #20]
    8028:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    802c:	00db      	lsls	r3, r3, #3
    802e:	441a      	add	r2, r3
    8030:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    8034:	6812      	ldr	r2, [r2, #0]
    8036:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
    803a:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
    803e:	00db      	lsls	r3, r3, #3
    8040:	440b      	add	r3, r1
    8042:	605a      	str	r2, [r3, #4]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    8044:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    8048:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    804c:	681b      	ldr	r3, [r3, #0]
    804e:	689b      	ldr	r3, [r3, #8]
    8050:	2b00      	cmp	r3, #0
    8052:	d00a      	beq.n	806a <Can_Ipw_InitLegacyFifoFilter+0x3e8>
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = TRUE;
    8054:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    8058:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    805c:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    8060:	00db      	lsls	r3, r3, #3
    8062:	4413      	add	r3, r2
    8064:	2201      	movs	r2, #1
    8066:	705a      	strb	r2, [r3, #1]
    8068:	e009      	b.n	807e <Can_Ipw_InitLegacyFifoFilter+0x3fc>
            }
            else
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = FALSE;
    806a:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    806e:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    8072:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    8076:	00db      	lsls	r3, r3, #3
    8078:	4413      	add	r3, r2
    807a:	2200      	movs	r2, #0
    807c:	705a      	strb	r2, [r3, #1]
            }
            RxFifoFilters[u8FilterIdx].isRemoteFrame = FALSE;
    807e:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    8082:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    8086:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
    808a:	2100      	movs	r1, #0
    808c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    8090:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    8094:	3301      	adds	r3, #1
    8096:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    809a:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    809e:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    80a2:	429a      	cmp	r2, r3
    80a4:	d3ba      	bcc.n	801c <Can_Ipw_InitLegacyFifoFilter+0x39a>
        }

        (void)FlexCAN_Ip_ConfigRxFifo(Can_pController->Can_u8ControllerOffset, eElementFormat, RxFifoFilters);
    80a6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    80aa:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    80ae:	681b      	ldr	r3, [r3, #0]
    80b0:	789b      	ldrb	r3, [r3, #2]
    80b2:	aa02      	add	r2, sp, #8
    80b4:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    80b8:	4618      	mov	r0, r3
    80ba:	f002 f9da 	bl	a472 <FlexCAN_Ip_ConfigRxFifo_Privileged>
    }
    
}
    80be:	bf00      	nop
    80c0:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    80c4:	f85d fb04 	ldr.w	pc, [sp], #4

000080c8 <Can_Ipw_InitBaudrate>:

#endif /* (CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON) */

/* Init baudrate for controller */
static void Can_Ipw_InitBaudrate(const Can_43_FLEXCAN_ControllerConfigType * ControllerConfig)
{
    80c8:	b510      	push	{r4, lr}
    80ca:	b088      	sub	sp, #32
    80cc:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    uint16 BaudRateConfigID = Can_au16ControllerBaudRateSel[ControllerConfig->Can_u8ControllerID];
    80ce:	9b01      	ldr	r3, [sp, #4]
    80d0:	785b      	ldrb	r3, [r3, #1]
    80d2:	461a      	mov	r2, r3
    80d4:	4b58      	ldr	r3, [pc, #352]	; (8238 <Can_Ipw_InitBaudrate+0x170>)
    80d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    80da:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON))
    #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
        if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[ControllerConfig->Can_u8ControllerID])
        {
    #endif
            FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16Prescaler;
    80de:	9b01      	ldr	r3, [sp, #4]
    80e0:	6a1a      	ldr	r2, [r3, #32]
    80e2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    80e6:	2116      	movs	r1, #22
    80e8:	fb01 f303 	mul.w	r3, r1, r3
    80ec:	4413      	add	r3, r2
    80ee:	88db      	ldrh	r3, [r3, #6]
    80f0:	9305      	str	r3, [sp, #20]
        {
            FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16PrescalerAlternate;
        }
    #endif

        FlexCANTimeSeg.propSeg    = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PropSeg;
    80f2:	9b01      	ldr	r3, [sp, #4]
    80f4:	6a1a      	ldr	r2, [r3, #32]
    80f6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    80fa:	2116      	movs	r1, #22
    80fc:	fb01 f303 	mul.w	r3, r1, r3
    8100:	4413      	add	r3, r2
    8102:	789b      	ldrb	r3, [r3, #2]
    8104:	9302      	str	r3, [sp, #8]
        FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
    8106:	9b01      	ldr	r3, [sp, #4]
    8108:	6a1a      	ldr	r2, [r3, #32]
    810a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    810e:	2116      	movs	r1, #22
    8110:	fb01 f303 	mul.w	r3, r1, r3
    8114:	4413      	add	r3, r2
    8116:	78db      	ldrb	r3, [r3, #3]
    8118:	9303      	str	r3, [sp, #12]
        FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
    811a:	9b01      	ldr	r3, [sp, #4]
    811c:	6a1a      	ldr	r2, [r3, #32]
    811e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8122:	2116      	movs	r1, #22
    8124:	fb01 f303 	mul.w	r3, r1, r3
    8128:	4413      	add	r3, r2
    812a:	791b      	ldrb	r3, [r3, #4]
    812c:	9304      	str	r3, [sp, #16]
        FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
    812e:	9b01      	ldr	r3, [sp, #4]
    8130:	6a1a      	ldr	r2, [r3, #32]
    8132:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8136:	2116      	movs	r1, #22
    8138:	fb01 f303 	mul.w	r3, r1, r3
    813c:	4413      	add	r3, r2
    813e:	7a1b      	ldrb	r3, [r3, #8]
    8140:	9306      	str	r3, [sp, #24]
        (void)FlexCAN_Ip_SetBitrate(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
    8142:	9b01      	ldr	r3, [sp, #4]
    8144:	789b      	ldrb	r3, [r3, #2]
    8146:	a902      	add	r1, sp, #8
    8148:	2200      	movs	r2, #0
    814a:	4618      	mov	r0, r3
    814c:	f003 f842 	bl	b1d4 <FlexCAN_Ip_SetBitrate_Privileged>
#endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
        if (TRUE == ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    8150:	9b01      	ldr	r3, [sp, #4]
    8152:	6a1a      	ldr	r2, [r3, #32]
    8154:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8158:	2116      	movs	r1, #22
    815a:	fb01 f303 	mul.w	r3, r1, r3
    815e:	4413      	add	r3, r2
    8160:	785b      	ldrb	r3, [r3, #1]
    8162:	2b00      	cmp	r3, #0
    8164:	d057      	beq.n	8216 <Can_Ipw_InitBaudrate+0x14e>
    #if ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON))
        #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
            if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[ControllerConfig->Can_u8ControllerID])
            {
        #endif
                FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16Prescaler;
    8166:	9b01      	ldr	r3, [sp, #4]
    8168:	6a1a      	ldr	r2, [r3, #32]
    816a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    816e:	2116      	movs	r1, #22
    8170:	fb01 f303 	mul.w	r3, r1, r3
    8174:	4413      	add	r3, r2
    8176:	89db      	ldrh	r3, [r3, #14]
    8178:	9305      	str	r3, [sp, #20]
            else
            {
                FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16PrescalerAlternate;
            }
        #endif
            FlexCANTimeSeg.propSeg    = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PropSeg;
    817a:	9b01      	ldr	r3, [sp, #4]
    817c:	6a1a      	ldr	r2, [r3, #32]
    817e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8182:	2116      	movs	r1, #22
    8184:	fb01 f303 	mul.w	r3, r1, r3
    8188:	4413      	add	r3, r2
    818a:	7a9b      	ldrb	r3, [r3, #10]
    818c:	9302      	str	r3, [sp, #8]
            FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg1;
    818e:	9b01      	ldr	r3, [sp, #4]
    8190:	6a1a      	ldr	r2, [r3, #32]
    8192:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8196:	2116      	movs	r1, #22
    8198:	fb01 f303 	mul.w	r3, r1, r3
    819c:	4413      	add	r3, r2
    819e:	7adb      	ldrb	r3, [r3, #11]
    81a0:	9303      	str	r3, [sp, #12]
            FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
    81a2:	9b01      	ldr	r3, [sp, #4]
    81a4:	6a1a      	ldr	r2, [r3, #32]
    81a6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    81aa:	2116      	movs	r1, #22
    81ac:	fb01 f303 	mul.w	r3, r1, r3
    81b0:	4413      	add	r3, r2
    81b2:	7b1b      	ldrb	r3, [r3, #12]
    81b4:	9304      	str	r3, [sp, #16]
            FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;
    81b6:	9b01      	ldr	r3, [sp, #4]
    81b8:	6a1a      	ldr	r2, [r3, #32]
    81ba:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    81be:	2116      	movs	r1, #22
    81c0:	fb01 f303 	mul.w	r3, r1, r3
    81c4:	4413      	add	r3, r2
    81c6:	7c1b      	ldrb	r3, [r3, #16]
    81c8:	9306      	str	r3, [sp, #24]

            (void)FlexCAN_Ip_SetBitrateCbt(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    81ca:	9b01      	ldr	r3, [sp, #4]
    81cc:	7898      	ldrb	r0, [r3, #2]
    81ce:	9b01      	ldr	r3, [sp, #4]
    81d0:	6a1a      	ldr	r2, [r3, #32]
    81d2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    81d6:	2116      	movs	r1, #22
    81d8:	fb01 f303 	mul.w	r3, r1, r3
    81dc:	4413      	add	r3, r2
    81de:	781a      	ldrb	r2, [r3, #0]
    81e0:	ab02      	add	r3, sp, #8
    81e2:	4619      	mov	r1, r3
    81e4:	f003 f8c0 	bl	b368 <FlexCAN_Ip_SetBitrateCbt_Privileged>
    #endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
            (void)FlexCAN_Ip_SetTDCOffset(ControllerConfig->Can_u8ControllerOffset, \
    81e8:	9b01      	ldr	r3, [sp, #4]
    81ea:	7898      	ldrb	r0, [r3, #2]
    81ec:	9b01      	ldr	r3, [sp, #4]
    81ee:	6a1a      	ldr	r2, [r3, #32]
    81f0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    81f4:	2116      	movs	r1, #22
    81f6:	fb01 f303 	mul.w	r3, r1, r3
    81fa:	4413      	add	r3, r2
    81fc:	7cd9      	ldrb	r1, [r3, #19]
    81fe:	9b01      	ldr	r3, [sp, #4]
    8200:	6a1a      	ldr	r2, [r3, #32]
    8202:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8206:	2416      	movs	r4, #22
    8208:	fb04 f303 	mul.w	r3, r4, r3
    820c:	4413      	add	r3, r2
    820e:	7d1b      	ldrb	r3, [r3, #20]
    8210:	461a      	mov	r2, r3
    8212:	f003 f913 	bl	b43c <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(ControllerConfig->Can_u8ControllerOffset, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    8216:	9b01      	ldr	r3, [sp, #4]
    8218:	7898      	ldrb	r0, [r3, #2]
    821a:	9b01      	ldr	r3, [sp, #4]
    821c:	6a1a      	ldr	r2, [r3, #32]
    821e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8222:	2116      	movs	r1, #22
    8224:	fb01 f303 	mul.w	r3, r1, r3
    8228:	4413      	add	r3, r2
    822a:	7c9b      	ldrb	r3, [r3, #18]
    822c:	4619      	mov	r1, r3
    822e:	f003 f959 	bl	b4e4 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
}
    8232:	bf00      	nop
    8234:	b008      	add	sp, #32
    8236:	bd10      	pop	{r4, pc}
    8238:	1fff8fb8 	.word	0x1fff8fb8

0000823c <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    823c:	b500      	push	{lr}
    823e:	b087      	sub	sp, #28
    8240:	9003      	str	r0, [sp, #12]
    8242:	9102      	str	r1, [sp, #8]
    8244:	4613      	mov	r3, r2
    8246:	f88d 3007 	strb.w	r3, [sp, #7]
        Can_HwHandleType u8HwObjectID = 0U;
    824a:	2300      	movs	r3, #0
    824c:	f8ad 3016 	strh.w	r3, [sp, #22]

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    8250:	9b03      	ldr	r3, [sp, #12]
    8252:	785b      	ldrb	r3, [r3, #1]
    8254:	461a      	mov	r2, r3
    8256:	f89d 3007 	ldrb.w	r3, [sp, #7]
    825a:	491c      	ldr	r1, [pc, #112]	; (82cc <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x90>)
    825c:	0152      	lsls	r2, r2, #5
    825e:	4413      	add	r3, r2
    8260:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    8264:	f8ad 3016 	strh.w	r3, [sp, #22]
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    8268:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    826c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8270:	4293      	cmp	r3, r2
    8272:	d027      	beq.n	82c4 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
    8274:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    8278:	4613      	mov	r3, r2
    827a:	00db      	lsls	r3, r3, #3
    827c:	4413      	add	r3, r2
    827e:	009b      	lsls	r3, r3, #2
    8280:	461a      	mov	r2, r3
    8282:	9b02      	ldr	r3, [sp, #8]
    8284:	4413      	add	r3, r2
    8286:	7b1b      	ldrb	r3, [r3, #12]
    8288:	f083 0301 	eor.w	r3, r3, #1
    828c:	b2db      	uxtb	r3, r3
    828e:	2b00      	cmp	r3, #0
    8290:	d018      	beq.n	82c4 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
        {
            if (CAN_TX_NORMAL == Can_pHwObjectConfig[u8HwObjectID].Can_eReceiveType)
    8292:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    8296:	4613      	mov	r3, r2
    8298:	00db      	lsls	r3, r3, #3
    829a:	4413      	add	r3, r2
    829c:	009b      	lsls	r3, r3, #2
    829e:	461a      	mov	r2, r3
    82a0:	9b02      	ldr	r3, [sp, #8]
    82a2:	4413      	add	r3, r2
    82a4:	699b      	ldr	r3, [r3, #24]
    82a6:	2b03      	cmp	r3, #3
    82a8:	d10c      	bne.n	82c4 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
            {
                CanIf_TxConfirmation(Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx]);
    82aa:	9b03      	ldr	r3, [sp, #12]
    82ac:	785b      	ldrb	r3, [r3, #1]
    82ae:	461a      	mov	r2, r3
    82b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82b4:	4906      	ldr	r1, [pc, #24]	; (82d0 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x94>)
    82b6:	0152      	lsls	r2, r2, #5
    82b8:	4413      	add	r3, r2
    82ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    82be:	4618      	mov	r0, r3
    82c0:	f007 fae2 	bl	f888 <CanIf_TxConfirmation>
            }
        }
    }
    82c4:	bf00      	nop
    82c6:	b007      	add	sp, #28
    82c8:	f85d fb04 	ldr.w	pc, [sp], #4
    82cc:	1fff8f78 	.word	0x1fff8f78
    82d0:	1fff8f38 	.word	0x1fff8f38

000082d4 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    82d4:	b500      	push	{lr}
    82d6:	b08f      	sub	sp, #60	; 0x3c
    82d8:	9005      	str	r0, [sp, #20]
    82da:	9104      	str	r1, [sp, #16]
    82dc:	4613      	mov	r3, r2
    82de:	f88d 300f 	strb.w	r3, [sp, #15]
        Can_HwHandleType u8HwObjectID = 0U;
    82e2:	2300      	movs	r3, #0
    82e4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        Can_HwType CanIf_Mailbox;
        PduInfoType CanIf_PduInfo;
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    82e8:	2300      	movs	r3, #0
    82ea:	930c      	str	r3, [sp, #48]	; 0x30
        Flexcan_Ip_MsgBuffType * pReceivedDataBuffer = NULL_PTR;
    82ec:	2300      	movs	r3, #0
    82ee:	930b      	str	r3, [sp, #44]	; 0x2c

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    82f0:	9b05      	ldr	r3, [sp, #20]
    82f2:	785b      	ldrb	r3, [r3, #1]
    82f4:	461a      	mov	r2, r3
    82f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    82fa:	493f      	ldr	r1, [pc, #252]	; (83f8 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x124>)
    82fc:	0152      	lsls	r2, r2, #5
    82fe:	4413      	add	r3, r2
    8300:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    8304:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    8308:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    830c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8310:	4293      	cmp	r3, r2
    8312:	d06c      	beq.n	83ee <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
    8314:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    8318:	4613      	mov	r3, r2
    831a:	00db      	lsls	r3, r3, #3
    831c:	4413      	add	r3, r2
    831e:	009b      	lsls	r3, r3, #2
    8320:	461a      	mov	r2, r3
    8322:	9b04      	ldr	r3, [sp, #16]
    8324:	4413      	add	r3, r2
    8326:	7b1b      	ldrb	r3, [r3, #12]
    8328:	f083 0301 	eor.w	r3, r3, #1
    832c:	b2db      	uxtb	r3, r3
    832e:	2b00      	cmp	r3, #0
    8330:	d05d      	beq.n	83ee <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
        {
            Can_pHwObject = &Can_pHwObjectConfig[u8HwObjectID];
    8332:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    8336:	4613      	mov	r3, r2
    8338:	00db      	lsls	r3, r3, #3
    833a:	4413      	add	r3, r2
    833c:	009b      	lsls	r3, r3, #2
    833e:	461a      	mov	r2, r3
    8340:	9b04      	ldr	r3, [sp, #16]
    8342:	4413      	add	r3, r2
    8344:	930c      	str	r3, [sp, #48]	; 0x30

            if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    8346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8348:	699b      	ldr	r3, [r3, #24]
    834a:	2b00      	cmp	r3, #0
    834c:	d118      	bne.n	8380 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xac>
            {
                pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    834e:	4a2b      	ldr	r2, [pc, #172]	; (83fc <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x128>)
    8350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8352:	7f1b      	ldrb	r3, [r3, #28]
    8354:	011b      	lsls	r3, r3, #4
    8356:	4413      	add	r3, r2
    8358:	681b      	ldr	r3, [r3, #0]
    835a:	930b      	str	r3, [sp, #44]	; 0x2c
                Can_Ipw_ParseData(&CanIf_Mailbox, \
    835c:	a906      	add	r1, sp, #24
    835e:	a809      	add	r0, sp, #36	; 0x24
    8360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8362:	9300      	str	r3, [sp, #0]
    8364:	9b05      	ldr	r3, [sp, #20]
    8366:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8368:	f7ff fc2e 	bl	7bc8 <Can_Ipw_ParseData>
                                  pReceivedDataBuffer, \
                                  Can_pControllerConfig, \
                                  Can_pHwObject \
                                 );
                /* ready to receive in next time */
                (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    836c:	9b05      	ldr	r3, [sp, #20]
    836e:	7898      	ldrb	r0, [r3, #2]
    8370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8372:	7f19      	ldrb	r1, [r3, #28]
    8374:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8376:	7b1b      	ldrb	r3, [r3, #12]
    8378:	2200      	movs	r2, #0
    837a:	f001 ff49 	bl	a210 <FlexCAN_Ip_Receive>
            else
            {
                /* prevent misra */
            }
        }
    }
    837e:	e036      	b.n	83ee <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
            else if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    8380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8382:	699b      	ldr	r3, [r3, #24]
    8384:	2b01      	cmp	r3, #1
    8386:	d132      	bne.n	83ee <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                if ((uint8)7U == u8MbIdx)
    8388:	f89d 300f 	ldrb.w	r3, [sp, #15]
    838c:	2b07      	cmp	r3, #7
    838e:	d10d      	bne.n	83ac <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xd8>
                    (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    8390:	2301      	movs	r3, #1
    8392:	2208      	movs	r2, #8
    8394:	2100      	movs	r1, #0
    8396:	2050      	movs	r0, #80	; 0x50
    8398:	f007 f97c 	bl	f694 <Det_ReportRuntimeError>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoOvfNotif)
    839c:	9b05      	ldr	r3, [sp, #20]
    839e:	699b      	ldr	r3, [r3, #24]
    83a0:	2b00      	cmp	r3, #0
    83a2:	d024      	beq.n	83ee <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                        Can_pControllerConfig->Can_pLegacyFiFoOvfNotif();
    83a4:	9b05      	ldr	r3, [sp, #20]
    83a6:	699b      	ldr	r3, [r3, #24]
    83a8:	4798      	blx	r3
    }
    83aa:	e020      	b.n	83ee <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                else if ((uint8)6U == u8MbIdx)
    83ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    83b0:	2b06      	cmp	r3, #6
    83b2:	d107      	bne.n	83c4 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xf0>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoWarnNotif)
    83b4:	9b05      	ldr	r3, [sp, #20]
    83b6:	695b      	ldr	r3, [r3, #20]
    83b8:	2b00      	cmp	r3, #0
    83ba:	d018      	beq.n	83ee <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                        Can_pControllerConfig->Can_pLegacyFiFoWarnNotif();
    83bc:	9b05      	ldr	r3, [sp, #20]
    83be:	695b      	ldr	r3, [r3, #20]
    83c0:	4798      	blx	r3
    }
    83c2:	e014      	b.n	83ee <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                    pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    83c4:	4a0d      	ldr	r2, [pc, #52]	; (83fc <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x128>)
    83c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    83c8:	7f1b      	ldrb	r3, [r3, #28]
    83ca:	011b      	lsls	r3, r3, #4
    83cc:	4413      	add	r3, r2
    83ce:	681b      	ldr	r3, [r3, #0]
    83d0:	930b      	str	r3, [sp, #44]	; 0x2c
                    Can_Ipw_ParseData(&CanIf_Mailbox, \
    83d2:	a906      	add	r1, sp, #24
    83d4:	a809      	add	r0, sp, #36	; 0x24
    83d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    83d8:	9300      	str	r3, [sp, #0]
    83da:	9b05      	ldr	r3, [sp, #20]
    83dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    83de:	f7ff fbf3 	bl	7bc8 <Can_Ipw_ParseData>
                    (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    83e2:	9b05      	ldr	r3, [sp, #20]
    83e4:	789b      	ldrb	r3, [r3, #2]
    83e6:	2100      	movs	r1, #0
    83e8:	4618      	mov	r0, r3
    83ea:	f002 f80f 	bl	a40c <FlexCAN_Ip_RxFifo>
    }
    83ee:	bf00      	nop
    83f0:	b00f      	add	sp, #60	; 0x3c
    83f2:	f85d fb04 	ldr.w	pc, [sp], #4
    83f6:	bf00      	nop
    83f8:	1fff8f78 	.word	0x1fff8f78
    83fc:	1fff8d18 	.word	0x1fff8d18

00008400 <Can_43_FLEXCAN_Ipw_Init>:
#endif /* (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON) */
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
Std_ReturnType Can_43_FLEXCAN_Ipw_Init(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8400:	b510      	push	{r4, lr}
    8402:	b084      	sub	sp, #16
    8404:	9001      	str	r0, [sp, #4]
    Std_ReturnType eRetVal = (Std_ReturnType)FLEXCAN_STATUS_ERROR;
    8406:	2301      	movs	r3, #1
    8408:	f88d 300c 	strb.w	r3, [sp, #12]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    /* The Index of Hoh in a group that refer to a controller */
    uint8 u8HwObjRefIdx = 0U;
    840c:	2300      	movs	r3, #0
    840e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ObjIdx = 0U;
    8412:	2300      	movs	r3, #0
    8414:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    8418:	2300      	movs	r3, #0
    841a:	9302      	str	r3, [sp, #8]
    uint8 u8HwBufferCount = 0U;
    841c:	2300      	movs	r3, #0
    841e:	f88d 300d 	strb.w	r3, [sp, #13]
#endif

#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID] = Can_pControllerConfig->Can_u16DefaultBaudrateID;
    8422:	9b01      	ldr	r3, [sp, #4]
    8424:	785b      	ldrb	r3, [r3, #1]
    8426:	461a      	mov	r2, r3
    8428:	9b01      	ldr	r3, [sp, #4]
    842a:	8b99      	ldrh	r1, [r3, #28]
    842c:	4b78      	ldr	r3, [pc, #480]	; (8610 <Can_43_FLEXCAN_Ipw_Init+0x210>)
    842e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    {
        Can_Ipw_u32Seconds = 0U;
    }
#endif
    /* @violates @ref Can_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    eRetVal = (Std_ReturnType)Call_Can_FlexCan_Init(Can_pControllerConfig->Can_u8ControllerOffset, Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);
    8432:	9b01      	ldr	r3, [sp, #4]
    8434:	7898      	ldrb	r0, [r3, #2]
    8436:	4977      	ldr	r1, [pc, #476]	; (8614 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    8438:	9b01      	ldr	r3, [sp, #4]
    843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    843c:	681b      	ldr	r3, [r3, #0]
    843e:	461a      	mov	r2, r3
    8440:	f001 fdda 	bl	9ff8 <FlexCAN_Ip_Init_Privileged>
    8444:	4603      	mov	r3, r0
    8446:	f88d 300c 	strb.w	r3, [sp, #12]
    
    /* by defaut, enable interrupt when setcontroller to start */
    Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    844a:	9b01      	ldr	r3, [sp, #4]
    844c:	785b      	ldrb	r3, [r3, #1]
    844e:	461a      	mov	r2, r3
    8450:	4b71      	ldr	r3, [pc, #452]	; (8618 <Can_43_FLEXCAN_Ipw_Init+0x218>)
    8452:	2101      	movs	r1, #1
    8454:	5499      	strb	r1, [r3, r2]
    if ((Std_ReturnType)FLEXCAN_STATUS_SUCCESS == eRetVal)
    8456:	f89d 300c 	ldrb.w	r3, [sp, #12]
    845a:	2b00      	cmp	r3, #0
    845c:	d13b      	bne.n	84d6 <Can_43_FLEXCAN_Ipw_Init+0xd6>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    845e:	9b01      	ldr	r3, [sp, #4]
    8460:	789b      	ldrb	r3, [r3, #2]
    8462:	4618      	mov	r0, r3
    8464:	f003 f8fc 	bl	b660 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* If the FlexCAN_Init retuns SUCCESS then the module is already in freezemode, and FlexCAN_Ip_SetTDCOffset and FlexCAN_Ip_SetTxArbitrationStartDelay will always retun success */
        if (Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bFDFrame)
    8468:	9b01      	ldr	r3, [sp, #4]
    846a:	6a1a      	ldr	r2, [r3, #32]
    846c:	9b01      	ldr	r3, [sp, #4]
    846e:	8b9b      	ldrh	r3, [r3, #28]
    8470:	4619      	mov	r1, r3
    8472:	2316      	movs	r3, #22
    8474:	fb01 f303 	mul.w	r3, r1, r3
    8478:	4413      	add	r3, r2
    847a:	785b      	ldrb	r3, [r3, #1]
    847c:	2b00      	cmp	r3, #0
    847e:	d018      	beq.n	84b2 <Can_43_FLEXCAN_Ipw_Init+0xb2>
        {
            (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    8480:	9b01      	ldr	r3, [sp, #4]
    8482:	7898      	ldrb	r0, [r3, #2]
    8484:	9b01      	ldr	r3, [sp, #4]
    8486:	6a1a      	ldr	r2, [r3, #32]
    8488:	9b01      	ldr	r3, [sp, #4]
    848a:	8b9b      	ldrh	r3, [r3, #28]
    848c:	4619      	mov	r1, r3
    848e:	2316      	movs	r3, #22
    8490:	fb01 f303 	mul.w	r3, r1, r3
    8494:	4413      	add	r3, r2
    8496:	7cd9      	ldrb	r1, [r3, #19]
    8498:	9b01      	ldr	r3, [sp, #4]
    849a:	6a1a      	ldr	r2, [r3, #32]
    849c:	9b01      	ldr	r3, [sp, #4]
    849e:	8b9b      	ldrh	r3, [r3, #28]
    84a0:	461c      	mov	r4, r3
    84a2:	2316      	movs	r3, #22
    84a4:	fb04 f303 	mul.w	r3, r4, r3
    84a8:	4413      	add	r3, r2
    84aa:	7d1b      	ldrb	r3, [r3, #20]
    84ac:	461a      	mov	r2, r3
    84ae:	f002 ffc5 	bl	b43c <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bTrcvDelayEnable, \
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, \
    84b2:	9b01      	ldr	r3, [sp, #4]
    84b4:	7898      	ldrb	r0, [r3, #2]
    84b6:	9b01      	ldr	r3, [sp, #4]
    84b8:	6a1a      	ldr	r2, [r3, #32]
    84ba:	9b01      	ldr	r3, [sp, #4]
    84bc:	8b9b      	ldrh	r3, [r3, #28]
    84be:	4619      	mov	r1, r3
    84c0:	2316      	movs	r3, #22
    84c2:	fb01 f303 	mul.w	r3, r1, r3
    84c6:	4413      	add	r3, r2
    84c8:	7c9b      	ldrb	r3, [r3, #18]
    84ca:	4619      	mov	r1, r3
    84cc:	f003 f80a 	bl	b4e4 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
                                                    Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TxArbitrationStartDelay);
        
        /* Init all Rx objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    84d0:	9801      	ldr	r0, [sp, #4]
    84d2:	f000 fbe5 	bl	8ca0 <Can_Ipw_InitRx>
    }

#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    84d6:	2300      	movs	r3, #0
    84d8:	f88d 300d 	strb.w	r3, [sp, #13]
    84dc:	e010      	b.n	8500 <Can_43_FLEXCAN_Ipw_Init+0x100>
    {
        Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8HwBufferCount] = CAN_43_FLEXCAN_HWOBJ_UNMAPPED;
    84de:	9b01      	ldr	r3, [sp, #4]
    84e0:	785b      	ldrb	r3, [r3, #1]
    84e2:	461a      	mov	r2, r3
    84e4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    84e8:	494c      	ldr	r1, [pc, #304]	; (861c <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    84ea:	0152      	lsls	r2, r2, #5
    84ec:	4413      	add	r3, r2
    84ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
    84f2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    84f6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    84fa:	3301      	adds	r3, #1
    84fc:	f88d 300d 	strb.w	r3, [sp, #13]
    8500:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8504:	2b1f      	cmp	r3, #31
    8506:	d9ea      	bls.n	84de <Can_43_FLEXCAN_Ipw_Init+0xde>
    }
    /* Map MB index to hardware object ID */
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    8508:	2300      	movs	r3, #0
    850a:	f88d 300f 	strb.w	r3, [sp, #15]
    850e:	e06b      	b.n	85e8 <Can_43_FLEXCAN_Ipw_Init+0x1e8>
    {
        Can_pHwObject = Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    8510:	9b01      	ldr	r3, [sp, #4]
    8512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8514:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8518:	009b      	lsls	r3, r3, #2
    851a:	4413      	add	r3, r2
    851c:	681b      	ldr	r3, [r3, #0]
    851e:	9302      	str	r3, [sp, #8]
        switch (Can_pHwObject->Can_eReceiveType)
    8520:	9b02      	ldr	r3, [sp, #8]
    8522:	699b      	ldr	r3, [r3, #24]
    8524:	2b03      	cmp	r3, #3
    8526:	d006      	beq.n	8536 <Can_43_FLEXCAN_Ipw_Init+0x136>
    8528:	2b03      	cmp	r3, #3
    852a:	d857      	bhi.n	85dc <Can_43_FLEXCAN_Ipw_Init+0x1dc>
    852c:	2b00      	cmp	r3, #0
    852e:	d023      	beq.n	8578 <Can_43_FLEXCAN_Ipw_Init+0x178>
    8530:	2b01      	cmp	r3, #1
    8532:	d02f      	beq.n	8594 <Can_43_FLEXCAN_Ipw_Init+0x194>
                break;
            }
            default:
            {
                /* don't map for enhance fifo object because of out of message buffer memory */
                break;
    8534:	e052      	b.n	85dc <Can_43_FLEXCAN_Ipw_Init+0x1dc>
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    8536:	2300      	movs	r3, #0
    8538:	f88d 300e 	strb.w	r3, [sp, #14]
    853c:	e015      	b.n	856a <Can_43_FLEXCAN_Ipw_Init+0x16a>
                    Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex + u8ObjIdx] = Can_pHwObject->Can_HwObjectID;
    853e:	9b01      	ldr	r3, [sp, #4]
    8540:	785b      	ldrb	r3, [r3, #1]
    8542:	461c      	mov	r4, r3
    8544:	9b02      	ldr	r3, [sp, #8]
    8546:	7f1b      	ldrb	r3, [r3, #28]
    8548:	461a      	mov	r2, r3
    854a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    854e:	4413      	add	r3, r2
    8550:	9a02      	ldr	r2, [sp, #8]
    8552:	8810      	ldrh	r0, [r2, #0]
    8554:	4931      	ldr	r1, [pc, #196]	; (861c <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    8556:	0162      	lsls	r2, r4, #5
    8558:	4413      	add	r3, r2
    855a:	4602      	mov	r2, r0
    855c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    8560:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8564:	3301      	adds	r3, #1
    8566:	f88d 300e 	strb.w	r3, [sp, #14]
    856a:	9b02      	ldr	r3, [sp, #8]
    856c:	7b9b      	ldrb	r3, [r3, #14]
    856e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    8572:	429a      	cmp	r2, r3
    8574:	d3e3      	bcc.n	853e <Can_43_FLEXCAN_Ipw_Init+0x13e>
                break;
    8576:	e032      	b.n	85de <Can_43_FLEXCAN_Ipw_Init+0x1de>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    8578:	9b01      	ldr	r3, [sp, #4]
    857a:	785b      	ldrb	r3, [r3, #1]
    857c:	461c      	mov	r4, r3
    857e:	9b02      	ldr	r3, [sp, #8]
    8580:	7f1b      	ldrb	r3, [r3, #28]
    8582:	4618      	mov	r0, r3
    8584:	9b02      	ldr	r3, [sp, #8]
    8586:	8819      	ldrh	r1, [r3, #0]
    8588:	4a24      	ldr	r2, [pc, #144]	; (861c <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    858a:	0163      	lsls	r3, r4, #5
    858c:	4403      	add	r3, r0
    858e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                break;
    8592:	e024      	b.n	85de <Can_43_FLEXCAN_Ipw_Init+0x1de>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    8594:	9b01      	ldr	r3, [sp, #4]
    8596:	785b      	ldrb	r3, [r3, #1]
    8598:	461c      	mov	r4, r3
    859a:	9b02      	ldr	r3, [sp, #8]
    859c:	7f1b      	ldrb	r3, [r3, #28]
    859e:	4618      	mov	r0, r3
    85a0:	9b02      	ldr	r3, [sp, #8]
    85a2:	8819      	ldrh	r1, [r3, #0]
    85a4:	4a1d      	ldr	r2, [pc, #116]	; (861c <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    85a6:	0163      	lsls	r3, r4, #5
    85a8:	4403      	add	r3, r0
    85aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][6U] = Can_pHwObject->Can_HwObjectID;
    85ae:	9b01      	ldr	r3, [sp, #4]
    85b0:	785b      	ldrb	r3, [r3, #1]
    85b2:	4618      	mov	r0, r3
    85b4:	9b02      	ldr	r3, [sp, #8]
    85b6:	8819      	ldrh	r1, [r3, #0]
    85b8:	4a18      	ldr	r2, [pc, #96]	; (861c <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    85ba:	0183      	lsls	r3, r0, #6
    85bc:	4413      	add	r3, r2
    85be:	330c      	adds	r3, #12
    85c0:	460a      	mov	r2, r1
    85c2:	801a      	strh	r2, [r3, #0]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][7U] = Can_pHwObject->Can_HwObjectID;
    85c4:	9b01      	ldr	r3, [sp, #4]
    85c6:	785b      	ldrb	r3, [r3, #1]
    85c8:	4618      	mov	r0, r3
    85ca:	9b02      	ldr	r3, [sp, #8]
    85cc:	8819      	ldrh	r1, [r3, #0]
    85ce:	4a13      	ldr	r2, [pc, #76]	; (861c <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    85d0:	0183      	lsls	r3, r0, #6
    85d2:	4413      	add	r3, r2
    85d4:	330e      	adds	r3, #14
    85d6:	460a      	mov	r2, r1
    85d8:	801a      	strh	r2, [r3, #0]
                break;
    85da:	e000      	b.n	85de <Can_43_FLEXCAN_Ipw_Init+0x1de>
                break;
    85dc:	bf00      	nop
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    85de:	f89d 300f 	ldrb.w	r3, [sp, #15]
    85e2:	3301      	adds	r3, #1
    85e4:	f88d 300f 	strb.w	r3, [sp, #15]
    85e8:	9b01      	ldr	r3, [sp, #4]
    85ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    85ee:	f89d 200f 	ldrb.w	r2, [sp, #15]
    85f2:	429a      	cmp	r2, r3
    85f4:	d38c      	bcc.n	8510 <Can_43_FLEXCAN_Ipw_Init+0x110>
            }
        }
    }
#endif /* MB_INTERRUPT_SUPPORT */
    eRetVal = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    85f6:	9b01      	ldr	r3, [sp, #4]
    85f8:	789b      	ldrb	r3, [r3, #2]
    85fa:	4618      	mov	r0, r3
    85fc:	f002 fd80 	bl	b100 <FlexCAN_Ip_SetStopMode_Privileged>
    8600:	4603      	mov	r3, r0
    8602:	f88d 300c 	strb.w	r3, [sp, #12]

    return (Std_ReturnType)eRetVal;
    8606:	f89d 300c 	ldrb.w	r3, [sp, #12]
}
    860a:	4618      	mov	r0, r3
    860c:	b004      	add	sp, #16
    860e:	bd10      	pop	{r4, pc}
    8610:	1fff8fb8 	.word	0x1fff8fb8
    8614:	1fff8d18 	.word	0x1fff8d18
    8618:	1fff8fbc 	.word	0x1fff8fbc
    861c:	1fff8f78 	.word	0x1fff8f78

00008620 <Can_43_FLEXCAN_Ipw_DeInit>:

/**
*   @brief      De-Initialize Controller
*/
void Can_43_FLEXCAN_Ipw_DeInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8620:	b500      	push	{lr}
    8622:	b083      	sub	sp, #12
    8624:	9001      	str	r0, [sp, #4]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    (void)FlexCAN_Ip_Deinit(Can_pControllerConfig->Can_u8ControllerOffset);
    8626:	9b01      	ldr	r3, [sp, #4]
    8628:	789b      	ldrb	r3, [r3, #2]
    862a:	4618      	mov	r0, r3
    862c:	f002 fbd4 	bl	add8 <FlexCAN_Ip_Deinit_Privileged>
}
    8630:	bf00      	nop
    8632:	b003      	add	sp, #12
    8634:	f85d fb04 	ldr.w	pc, [sp], #4

00008638 <Can_43_FLEXCAN_Ipw_SetBaudrate>:
    Std_ReturnType Can_43_FLEXCAN_Ipw_SetBaudrate
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        uint16 BaudRateConfigID
    )
    {
    8638:	b510      	push	{r4, lr}
    863a:	b088      	sub	sp, #32
    863c:	9001      	str	r0, [sp, #4]
    863e:	460b      	mov	r3, r1
    8640:	f8ad 3002 	strh.w	r3, [sp, #2]
        Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    8644:	2301      	movs	r3, #1
    8646:	9307      	str	r3, [sp, #28]
        Flexcan_Ip_TimeSegmentType FlexCANTimeSeg;

        eRetVal = FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset);
    8648:	9b01      	ldr	r3, [sp, #4]
    864a:	789b      	ldrb	r3, [r3, #2]
    864c:	4618      	mov	r0, r3
    864e:	f002 fb01 	bl	ac54 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    8652:	9007      	str	r0, [sp, #28]
        if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    8654:	9b07      	ldr	r3, [sp, #28]
    8656:	2b00      	cmp	r3, #0
    8658:	f040 80bb 	bne.w	87d2 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x19a>
        {
        #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
            if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[Can_pControllerConfig->Can_u8ControllerID])
            {
        #endif
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16Prescaler;
    865c:	9b01      	ldr	r3, [sp, #4]
    865e:	6a1a      	ldr	r2, [r3, #32]
    8660:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8664:	2116      	movs	r1, #22
    8666:	fb01 f303 	mul.w	r3, r1, r3
    866a:	4413      	add	r3, r2
    866c:	88db      	ldrh	r3, [r3, #6]
    866e:	9305      	str	r3, [sp, #20]
            {
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16PrescalerAlternate;
            }
        #endif

            FlexCANTimeSeg.propSeg    = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PropSeg;
    8670:	9b01      	ldr	r3, [sp, #4]
    8672:	6a1a      	ldr	r2, [r3, #32]
    8674:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8678:	2116      	movs	r1, #22
    867a:	fb01 f303 	mul.w	r3, r1, r3
    867e:	4413      	add	r3, r2
    8680:	789b      	ldrb	r3, [r3, #2]
    8682:	9302      	str	r3, [sp, #8]
            FlexCANTimeSeg.phaseSeg1  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
    8684:	9b01      	ldr	r3, [sp, #4]
    8686:	6a1a      	ldr	r2, [r3, #32]
    8688:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    868c:	2116      	movs	r1, #22
    868e:	fb01 f303 	mul.w	r3, r1, r3
    8692:	4413      	add	r3, r2
    8694:	78db      	ldrb	r3, [r3, #3]
    8696:	9303      	str	r3, [sp, #12]
            FlexCANTimeSeg.phaseSeg2  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
    8698:	9b01      	ldr	r3, [sp, #4]
    869a:	6a1a      	ldr	r2, [r3, #32]
    869c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    86a0:	2116      	movs	r1, #22
    86a2:	fb01 f303 	mul.w	r3, r1, r3
    86a6:	4413      	add	r3, r2
    86a8:	791b      	ldrb	r3, [r3, #4]
    86aa:	9304      	str	r3, [sp, #16]
            FlexCANTimeSeg.rJumpwidth = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
    86ac:	9b01      	ldr	r3, [sp, #4]
    86ae:	6a1a      	ldr	r2, [r3, #32]
    86b0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    86b4:	2116      	movs	r1, #22
    86b6:	fb01 f303 	mul.w	r3, r1, r3
    86ba:	4413      	add	r3, r2
    86bc:	7a1b      	ldrb	r3, [r3, #8]
    86be:	9306      	str	r3, [sp, #24]

            
            (void)FlexCAN_Ip_SetBitrate(Can_pControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
    86c0:	9b01      	ldr	r3, [sp, #4]
    86c2:	789b      	ldrb	r3, [r3, #2]
    86c4:	a902      	add	r1, sp, #8
    86c6:	2200      	movs	r2, #0
    86c8:	4618      	mov	r0, r3
    86ca:	f002 fd83 	bl	b1d4 <FlexCAN_Ip_SetBitrate_Privileged>
        #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
            if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[Can_pControllerConfig->Can_u8ControllerID])
            {
        #endif
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16Prescaler;
    86ce:	9b01      	ldr	r3, [sp, #4]
    86d0:	6a1a      	ldr	r2, [r3, #32]
    86d2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    86d6:	2116      	movs	r1, #22
    86d8:	fb01 f303 	mul.w	r3, r1, r3
    86dc:	4413      	add	r3, r2
    86de:	89db      	ldrh	r3, [r3, #14]
    86e0:	9305      	str	r3, [sp, #20]
            {
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16PrescalerAlternate;
            }
        #endif

            if (TRUE == Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    86e2:	9b01      	ldr	r3, [sp, #4]
    86e4:	6a1a      	ldr	r2, [r3, #32]
    86e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    86ea:	2116      	movs	r1, #22
    86ec:	fb01 f303 	mul.w	r3, r1, r3
    86f0:	4413      	add	r3, r2
    86f2:	785b      	ldrb	r3, [r3, #1]
    86f4:	2b00      	cmp	r3, #0
    86f6:	d04d      	beq.n	8794 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x15c>
            {
                FlexCANTimeSeg.propSeg    = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PropSeg;
    86f8:	9b01      	ldr	r3, [sp, #4]
    86fa:	6a1a      	ldr	r2, [r3, #32]
    86fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8700:	2116      	movs	r1, #22
    8702:	fb01 f303 	mul.w	r3, r1, r3
    8706:	4413      	add	r3, r2
    8708:	7a9b      	ldrb	r3, [r3, #10]
    870a:	9302      	str	r3, [sp, #8]
                FlexCANTimeSeg.phaseSeg1  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg1;
    870c:	9b01      	ldr	r3, [sp, #4]
    870e:	6a1a      	ldr	r2, [r3, #32]
    8710:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8714:	2116      	movs	r1, #22
    8716:	fb01 f303 	mul.w	r3, r1, r3
    871a:	4413      	add	r3, r2
    871c:	7adb      	ldrb	r3, [r3, #11]
    871e:	9303      	str	r3, [sp, #12]
                FlexCANTimeSeg.phaseSeg2  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
    8720:	9b01      	ldr	r3, [sp, #4]
    8722:	6a1a      	ldr	r2, [r3, #32]
    8724:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8728:	2116      	movs	r1, #22
    872a:	fb01 f303 	mul.w	r3, r1, r3
    872e:	4413      	add	r3, r2
    8730:	7b1b      	ldrb	r3, [r3, #12]
    8732:	9304      	str	r3, [sp, #16]
                FlexCANTimeSeg.rJumpwidth = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;
    8734:	9b01      	ldr	r3, [sp, #4]
    8736:	6a1a      	ldr	r2, [r3, #32]
    8738:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    873c:	2116      	movs	r1, #22
    873e:	fb01 f303 	mul.w	r3, r1, r3
    8742:	4413      	add	r3, r2
    8744:	7c1b      	ldrb	r3, [r3, #16]
    8746:	9306      	str	r3, [sp, #24]

                (void)FlexCAN_Ip_SetBitrateCbt(Can_pControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    8748:	9b01      	ldr	r3, [sp, #4]
    874a:	7898      	ldrb	r0, [r3, #2]
    874c:	9b01      	ldr	r3, [sp, #4]
    874e:	6a1a      	ldr	r2, [r3, #32]
    8750:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8754:	2116      	movs	r1, #22
    8756:	fb01 f303 	mul.w	r3, r1, r3
    875a:	4413      	add	r3, r2
    875c:	781a      	ldrb	r2, [r3, #0]
    875e:	ab02      	add	r3, sp, #8
    8760:	4619      	mov	r1, r3
    8762:	f002 fe01 	bl	b368 <FlexCAN_Ip_SetBitrateCbt_Privileged>

                (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    8766:	9b01      	ldr	r3, [sp, #4]
    8768:	7898      	ldrb	r0, [r3, #2]
    876a:	9b01      	ldr	r3, [sp, #4]
    876c:	6a1a      	ldr	r2, [r3, #32]
    876e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8772:	2116      	movs	r1, #22
    8774:	fb01 f303 	mul.w	r3, r1, r3
    8778:	4413      	add	r3, r2
    877a:	7cd9      	ldrb	r1, [r3, #19]
    877c:	9b01      	ldr	r3, [sp, #4]
    877e:	6a1a      	ldr	r2, [r3, #32]
    8780:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8784:	2416      	movs	r4, #22
    8786:	fb04 f303 	mul.w	r3, r4, r3
    878a:	4413      	add	r3, r2
    878c:	7d1b      	ldrb	r3, [r3, #20]
    878e:	461a      	mov	r2, r3
    8790:	f002 fe54 	bl	b43c <FlexCAN_Ip_SetTDCOffset_Privileged>
                                            Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                            Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset \
                                            );
            }

            (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    8794:	9b01      	ldr	r3, [sp, #4]
    8796:	7898      	ldrb	r0, [r3, #2]
    8798:	9b01      	ldr	r3, [sp, #4]
    879a:	6a1a      	ldr	r2, [r3, #32]
    879c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    87a0:	2116      	movs	r1, #22
    87a2:	fb01 f303 	mul.w	r3, r1, r3
    87a6:	4413      	add	r3, r2
    87a8:	7c9b      	ldrb	r3, [r3, #18]
    87aa:	4619      	mov	r1, r3
    87ac:	f002 fe9a 	bl	b4e4 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>

            eRetVal = FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    87b0:	9b01      	ldr	r3, [sp, #4]
    87b2:	789b      	ldrb	r3, [r3, #2]
    87b4:	4618      	mov	r0, r3
    87b6:	f002 fca3 	bl	b100 <FlexCAN_Ip_SetStopMode_Privileged>
    87ba:	9007      	str	r0, [sp, #28]
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    87bc:	9b07      	ldr	r3, [sp, #28]
    87be:	2b00      	cmp	r3, #0
    87c0:	d107      	bne.n	87d2 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x19a>
            {
                Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID] = BaudRateConfigID;
    87c2:	9b01      	ldr	r3, [sp, #4]
    87c4:	785b      	ldrb	r3, [r3, #1]
    87c6:	4619      	mov	r1, r3
    87c8:	4a06      	ldr	r2, [pc, #24]	; (87e4 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x1ac>)
    87ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    87ce:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            }
        }
        return ((FLEXCAN_STATUS_SUCCESS == eRetVal) ? ((Std_ReturnType)E_OK) : ((Std_ReturnType)E_NOT_OK));
    87d2:	9b07      	ldr	r3, [sp, #28]
    87d4:	2b00      	cmp	r3, #0
    87d6:	bf14      	ite	ne
    87d8:	2301      	movne	r3, #1
    87da:	2300      	moveq	r3, #0
    87dc:	b2db      	uxtb	r3, r3
    }
    87de:	4618      	mov	r0, r3
    87e0:	b008      	add	sp, #32
    87e2:	bd10      	pop	{r4, pc}
    87e4:	1fff8fb8 	.word	0x1fff8fb8

000087e8 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>:

/**
*   @brief      Set Error Initialization and set Controller to start Mode.
*/
static Std_ReturnType Can_43_FLEXCAN_Ipw_SetControlerErrorInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    87e8:	b500      	push	{lr}
    87ea:	b085      	sub	sp, #20
    87ec:	9001      	str	r0, [sp, #4]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_SUCCESS;
    87ee:	2300      	movs	r3, #0
    87f0:	9303      	str	r3, [sp, #12]

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    87f2:	9b01      	ldr	r3, [sp, #4]
    87f4:	785b      	ldrb	r3, [r3, #1]
    87f6:	461a      	mov	r2, r3
    87f8:	4b11      	ldr	r3, [pc, #68]	; (8840 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x58>)
    87fa:	5c9b      	ldrb	r3, [r3, r2]
    87fc:	2b00      	cmp	r3, #0
    87fe:	d012      	beq.n	8826 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x3e>
    {
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    8800:	9b01      	ldr	r3, [sp, #4]
    8802:	7a5b      	ldrb	r3, [r3, #9]
    8804:	f083 0301 	eor.w	r3, r3, #1
    8808:	b2db      	uxtb	r3, r3
    880a:	2b00      	cmp	r3, #0
    880c:	d006      	beq.n	881c <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x34>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    880e:	9b01      	ldr	r3, [sp, #4]
    8810:	789b      	ldrb	r3, [r3, #2]
    8812:	2201      	movs	r2, #1
    8814:	2104      	movs	r1, #4
    8816:	4618      	mov	r0, r3
    8818:	f002 ff4e 	bl	b6b8 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    881c:	9b01      	ldr	r3, [sp, #4]
    881e:	789b      	ldrb	r3, [r3, #2]
    8820:	4618      	mov	r0, r3
    8822:	f002 feef 	bl	b604 <FlexCAN_Ip_EnableInterrupts_Privileged>
    }
    eRetVal = FlexCAN_Ip_SetStartMode(Can_pControllerConfig->Can_u8ControllerOffset);
    8826:	9b01      	ldr	r3, [sp, #4]
    8828:	789b      	ldrb	r3, [r3, #2]
    882a:	4618      	mov	r0, r3
    882c:	f002 fc48 	bl	b0c0 <FlexCAN_Ip_SetStartMode_Privileged>
    8830:	9003      	str	r0, [sp, #12]

    return (Std_ReturnType)eRetVal;
    8832:	9b03      	ldr	r3, [sp, #12]
    8834:	b2db      	uxtb	r3, r3
}
    8836:	4618      	mov	r0, r3
    8838:	b005      	add	sp, #20
    883a:	f85d fb04 	ldr.w	pc, [sp], #4
    883e:	bf00      	nop
    8840:	1fff8fbc 	.word	0x1fff8fbc

00008844 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>:

/**
*   @brief      Set Controller to participate the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStartMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8844:	b500      	push	{lr}
    8846:	b087      	sub	sp, #28
    8848:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    uint8 u8HwObjRefIdx = 0U;
    884a:	2300      	movs	r3, #0
    884c:	f88d 3017 	strb.w	r3, [sp, #23]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    8850:	2300      	movs	r3, #0
    8852:	9303      	str	r3, [sp, #12]
        {
            Can_Ipw_u32CurrentCompareVal = Stm_Ip_GetCompareValue(CAN_43_FLEXCAN_TS_STM_INSTANCE, CAN_43_FLEXCAN_TS_STM_CHANNEL);
        }
    }
#endif
    eRetVal = FlexCAN_Ip_Init(Can_pControllerConfig->Can_u8ControllerOffset, \
    8854:	9b01      	ldr	r3, [sp, #4]
    8856:	7898      	ldrb	r0, [r3, #2]
    8858:	4930      	ldr	r1, [pc, #192]	; (891c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xd8>)
    885a:	9b01      	ldr	r3, [sp, #4]
    885c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    885e:	681b      	ldr	r3, [r3, #0]
    8860:	461a      	mov	r2, r3
    8862:	f001 fbc9 	bl	9ff8 <FlexCAN_Ip_Init_Privileged>
    8866:	9004      	str	r0, [sp, #16]
                                                    Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], \
                                                    Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);

    if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    8868:	9b04      	ldr	r3, [sp, #16]
    886a:	2b00      	cmp	r3, #0
    886c:	d14f      	bne.n	890e <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xca>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    886e:	9b01      	ldr	r3, [sp, #4]
    8870:	789b      	ldrb	r3, [r3, #2]
    8872:	4618      	mov	r0, r3
    8874:	f002 fef4 	bl	b660 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* Re-Init baudrate */
        Can_Ipw_InitBaudrate(Can_pControllerConfig);
    8878:	9801      	ldr	r0, [sp, #4]
    887a:	f7ff fc25 	bl	80c8 <Can_Ipw_InitBaudrate>

        /* Re-Init all Rx Objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    887e:	9801      	ldr	r0, [sp, #4]
    8880:	f000 fa0e 	bl	8ca0 <Can_Ipw_InitRx>
            Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][MbIdx] = FALSE;
        }
    #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */

    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    8884:	2300      	movs	r3, #0
    8886:	f88d 3017 	strb.w	r3, [sp, #23]
    888a:	e02f      	b.n	88ec <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
        {
            Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    888c:	9b01      	ldr	r3, [sp, #4]
    888e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8890:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8894:	009b      	lsls	r3, r3, #2
    8896:	4413      	add	r3, r2
    8898:	681b      	ldr	r3, [r3, #0]
    889a:	9303      	str	r3, [sp, #12]

            if (FALSE == Can_pHwObject->Can_bHwObjectUsesPolling)
    889c:	9b03      	ldr	r3, [sp, #12]
    889e:	7b1b      	ldrb	r3, [r3, #12]
    88a0:	f083 0301 	eor.w	r3, r3, #1
    88a4:	b2db      	uxtb	r3, r3
    88a6:	2b00      	cmp	r3, #0
    88a8:	d018      	beq.n	88dc <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x98>
            {
                switch (Can_pHwObject->Can_eReceiveType)
    88aa:	9b03      	ldr	r3, [sp, #12]
    88ac:	699b      	ldr	r3, [r3, #24]
    88ae:	2b00      	cmp	r3, #0
    88b0:	d003      	beq.n	88ba <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x76>
    88b2:	3b01      	subs	r3, #1
    88b4:	2b01      	cmp	r3, #1
    88b6:	d813      	bhi.n	88e0 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9c>
    88b8:	e009      	b.n	88ce <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x8a>
                {
                    case CAN_RX_NORMAL:
                    {
                        (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    88ba:	9b01      	ldr	r3, [sp, #4]
    88bc:	7898      	ldrb	r0, [r3, #2]
    88be:	9b03      	ldr	r3, [sp, #12]
    88c0:	7f19      	ldrb	r1, [r3, #28]
    88c2:	9b03      	ldr	r3, [sp, #12]
    88c4:	7b1b      	ldrb	r3, [r3, #12]
    88c6:	2200      	movs	r2, #0
    88c8:	f001 fca2 	bl	a210 <FlexCAN_Ip_Receive>
                                                 Can_pHwObject->Can_u8HwBufferIndex, \
                                                 NULL_PTR, \
                                                 Can_pHwObject->Can_bHwObjectUsesPolling \
                                                );
                        break;
    88cc:	e009      	b.n	88e2 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->pDmaDstAddr);
                        }
                        else
                    #endif
                        {
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    88ce:	9b01      	ldr	r3, [sp, #4]
    88d0:	789b      	ldrb	r3, [r3, #2]
    88d2:	2100      	movs	r1, #0
    88d4:	4618      	mov	r0, r3
    88d6:	f001 fd99 	bl	a40c <FlexCAN_Ip_RxFifo>
                        }
                        break;
    88da:	e002      	b.n	88e2 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                    {
                        /* nothing to do(TX object) */
                        break;
                    }
                }
            }
    88dc:	bf00      	nop
    88de:	e000      	b.n	88e2 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                        break;
    88e0:	bf00      	nop
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    88e2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    88e6:	3301      	adds	r3, #1
    88e8:	f88d 3017 	strb.w	r3, [sp, #23]
    88ec:	9b01      	ldr	r3, [sp, #4]
    88ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    88f2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    88f6:	429a      	cmp	r2, r3
    88f8:	d3c8      	bcc.n	888c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x48>
        }
    #endif /* CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON */
        eRetVal = ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControlerErrorInit(Can_pControllerConfig)) ? (FLEXCAN_STATUS_SUCCESS) : (FLEXCAN_STATUS_ERROR);
    88fa:	9801      	ldr	r0, [sp, #4]
    88fc:	f7ff ff74 	bl	87e8 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>
    8900:	4603      	mov	r3, r0
    8902:	2b00      	cmp	r3, #0
    8904:	bf14      	ite	ne
    8906:	2301      	movne	r3, #1
    8908:	2300      	moveq	r3, #0
    890a:	b2db      	uxtb	r3, r3
    890c:	9304      	str	r3, [sp, #16]
    }
    return (Std_ReturnType)eRetVal;
    890e:	9b04      	ldr	r3, [sp, #16]
    8910:	b2db      	uxtb	r3, r3
}
    8912:	4618      	mov	r0, r3
    8914:	b007      	add	sp, #28
    8916:	f85d fb04 	ldr.w	pc, [sp], #4
    891a:	bf00      	nop
    891c:	1fff8d18 	.word	0x1fff8d18

00008920 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>:

/**
*   @brief      Set Controller to stop participating the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStopMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8920:	b500      	push	{lr}
    8922:	b085      	sub	sp, #20
    8924:	9001      	str	r0, [sp, #4]
    * that are not allowed in the new state. ⌋
    * [SWS_Can_00426] ⌈ Disabling of CAN interrupts shall not be executed, when CAN
    * interrupts have been disabled by function Can_DisableControllerInterrupts.⌋
    */
    Std_ReturnType eReturnValue;
    uint8 u8HwObjRefIdx = 0U;
    8926:	2300      	movs	r3, #0
    8928:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    uint8 u8Idx = 0U;
    892c:	2300      	movs	r3, #0
    892e:	f88d 300d 	strb.w	r3, [sp, #13]

    if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset))
    8932:	9b01      	ldr	r3, [sp, #4]
    8934:	789b      	ldrb	r3, [r3, #2]
    8936:	4618      	mov	r0, r3
    8938:	f002 f98c 	bl	ac54 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    893c:	4603      	mov	r3, r0
    893e:	2b00      	cmp	r3, #0
    8940:	d160      	bne.n	8a04 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xe4>
    {
    #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_ConfigPN(Can_pControllerConfig->Can_u8ControllerOffset, FALSE, NULL_PTR);
    #endif

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    8942:	9b01      	ldr	r3, [sp, #4]
    8944:	785b      	ldrb	r3, [r3, #1]
    8946:	461a      	mov	r2, r3
    8948:	4b33      	ldr	r3, [pc, #204]	; (8a18 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xf8>)
    894a:	5c9b      	ldrb	r3, [r3, r2]
    894c:	2b00      	cmp	r3, #0
    894e:	d012      	beq.n	8976 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
    {
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    8950:	9b01      	ldr	r3, [sp, #4]
    8952:	789b      	ldrb	r3, [r3, #2]
    8954:	4618      	mov	r0, r3
    8956:	f002 fe83 	bl	b660 <FlexCAN_Ip_DisableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    895a:	9b01      	ldr	r3, [sp, #4]
    895c:	7a5b      	ldrb	r3, [r3, #9]
    895e:	f083 0301 	eor.w	r3, r3, #1
    8962:	b2db      	uxtb	r3, r3
    8964:	2b00      	cmp	r3, #0
    8966:	d006      	beq.n	8976 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    8968:	9b01      	ldr	r3, [sp, #4]
    896a:	789b      	ldrb	r3, [r3, #2]
    896c:	2200      	movs	r2, #0
    896e:	2104      	movs	r1, #4
    8970:	4618      	mov	r0, r3
    8972:	f002 fea1 	bl	b6b8 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    8976:	2300      	movs	r3, #0
    8978:	f88d 300e 	strb.w	r3, [sp, #14]
    897c:	e032      	b.n	89e4 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xc4>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    897e:	9b01      	ldr	r3, [sp, #4]
    8980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8982:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8986:	009b      	lsls	r3, r3, #2
    8988:	4413      	add	r3, r2
    898a:	681b      	ldr	r3, [r3, #0]
    898c:	9302      	str	r3, [sp, #8]

        if (CAN_TX_NORMAL == Can_pHwObject->Can_eReceiveType)
    898e:	9b02      	ldr	r3, [sp, #8]
    8990:	699b      	ldr	r3, [r3, #24]
    8992:	2b03      	cmp	r3, #3
    8994:	d119      	bne.n	89ca <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xaa>
        {
            u8Idx = 0U;
    8996:	2300      	movs	r3, #0
    8998:	f88d 300d 	strb.w	r3, [sp, #13]
            do
            {
                (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex + u8Idx);
    899c:	9b01      	ldr	r3, [sp, #4]
    899e:	7898      	ldrb	r0, [r3, #2]
    89a0:	9b02      	ldr	r3, [sp, #8]
    89a2:	7f1a      	ldrb	r2, [r3, #28]
    89a4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    89a8:	4413      	add	r3, r2
    89aa:	b2db      	uxtb	r3, r3
    89ac:	4619      	mov	r1, r3
    89ae:	f002 ff09 	bl	b7c4 <FlexCAN_Ip_AbortTransfer>
                u8Idx++;
    89b2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    89b6:	3301      	adds	r3, #1
    89b8:	f88d 300d 	strb.w	r3, [sp, #13]
            }while (u8Idx < Can_pHwObject->Can_u8ObjectCount);
    89bc:	9b02      	ldr	r3, [sp, #8]
    89be:	7b9b      	ldrb	r3, [r3, #14]
    89c0:	f89d 200d 	ldrb.w	r2, [sp, #13]
    89c4:	429a      	cmp	r2, r3
    89c6:	d3e9      	bcc.n	899c <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x7c>
    89c8:	e007      	b.n	89da <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xba>
        }
        else
        {
            (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex);
    89ca:	9b01      	ldr	r3, [sp, #4]
    89cc:	789a      	ldrb	r2, [r3, #2]
    89ce:	9b02      	ldr	r3, [sp, #8]
    89d0:	7f1b      	ldrb	r3, [r3, #28]
    89d2:	4619      	mov	r1, r3
    89d4:	4610      	mov	r0, r2
    89d6:	f002 fef5 	bl	b7c4 <FlexCAN_Ip_AbortTransfer>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    89da:	f89d 300e 	ldrb.w	r3, [sp, #14]
    89de:	3301      	adds	r3, #1
    89e0:	f88d 300e 	strb.w	r3, [sp, #14]
    89e4:	9b01      	ldr	r3, [sp, #4]
    89e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    89ea:	f89d 200e 	ldrb.w	r2, [sp, #14]
    89ee:	429a      	cmp	r2, r3
    89f0:	d3c5      	bcc.n	897e <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x5e>
        }
    }
    eReturnValue = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    89f2:	9b01      	ldr	r3, [sp, #4]
    89f4:	789b      	ldrb	r3, [r3, #2]
    89f6:	4618      	mov	r0, r3
    89f8:	f002 fb82 	bl	b100 <FlexCAN_Ip_SetStopMode_Privileged>
    89fc:	4603      	mov	r3, r0
    89fe:	f88d 300f 	strb.w	r3, [sp, #15]
    8a02:	e002      	b.n	8a0a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xea>
    }
    else
    {
        eReturnValue = E_NOT_OK;
    8a04:	2301      	movs	r3, #1
    8a06:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return eReturnValue;
    8a0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8a0e:	4618      	mov	r0, r3
    8a10:	b005      	add	sp, #20
    8a12:	f85d fb04 	ldr.w	pc, [sp], #4
    8a16:	bf00      	nop
    8a18:	1fff8fbc 	.word	0x1fff8fbc

00008a1c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>:
/**
*   @brief      Disable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8a1c:	b500      	push	{lr}
    8a1e:	b083      	sub	sp, #12
    8a20:	9001      	str	r0, [sp, #4]
    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    8a22:	9b01      	ldr	r3, [sp, #4]
    8a24:	785b      	ldrb	r3, [r3, #1]
    8a26:	461a      	mov	r2, r3
    8a28:	4b10      	ldr	r3, [pc, #64]	; (8a6c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    8a2a:	5c9b      	ldrb	r3, [r3, r2]
    8a2c:	2b00      	cmp	r3, #0
    8a2e:	d018      	beq.n	8a62 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    8a30:	9b01      	ldr	r3, [sp, #4]
    8a32:	789b      	ldrb	r3, [r3, #2]
    8a34:	4618      	mov	r0, r3
    8a36:	f002 fe13 	bl	b660 <FlexCAN_Ip_DisableInterrupts_Privileged>
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = FALSE;
    8a3a:	9b01      	ldr	r3, [sp, #4]
    8a3c:	785b      	ldrb	r3, [r3, #1]
    8a3e:	461a      	mov	r2, r3
    8a40:	4b0a      	ldr	r3, [pc, #40]	; (8a6c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    8a42:	2100      	movs	r1, #0
    8a44:	5499      	strb	r1, [r3, r2]
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    8a46:	9b01      	ldr	r3, [sp, #4]
    8a48:	7a5b      	ldrb	r3, [r3, #9]
    8a4a:	f083 0301 	eor.w	r3, r3, #1
    8a4e:	b2db      	uxtb	r3, r3
    8a50:	2b00      	cmp	r3, #0
    8a52:	d006      	beq.n	8a62 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    8a54:	9b01      	ldr	r3, [sp, #4]
    8a56:	789b      	ldrb	r3, [r3, #2]
    8a58:	2200      	movs	r2, #0
    8a5a:	2104      	movs	r1, #4
    8a5c:	4618      	mov	r0, r3
    8a5e:	f002 fe2b 	bl	b6b8 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
}
    8a62:	bf00      	nop
    8a64:	b003      	add	sp, #12
    8a66:	f85d fb04 	ldr.w	pc, [sp], #4
    8a6a:	bf00      	nop
    8a6c:	1fff8fbc 	.word	0x1fff8fbc

00008a70 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>:

/**
*   @brief      Enable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8a70:	b500      	push	{lr}
    8a72:	b083      	sub	sp, #12
    8a74:	9001      	str	r0, [sp, #4]
    /*
    * [SWS_Can_00208] ⌈ The function Can_EnableControllerInterrupts shall perform no
    * action when Can_DisableControllerInterrupts has not been called before.⌋
    */
    if (FALSE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    8a76:	9b01      	ldr	r3, [sp, #4]
    8a78:	785b      	ldrb	r3, [r3, #1]
    8a7a:	461a      	mov	r2, r3
    8a7c:	4b11      	ldr	r3, [pc, #68]	; (8ac4 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    8a7e:	5c9b      	ldrb	r3, [r3, r2]
    8a80:	f083 0301 	eor.w	r3, r3, #1
    8a84:	b2db      	uxtb	r3, r3
    8a86:	2b00      	cmp	r3, #0
    8a88:	d018      	beq.n	8abc <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x4c>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    8a8a:	9b01      	ldr	r3, [sp, #4]
    8a8c:	789b      	ldrb	r3, [r3, #2]
    8a8e:	4618      	mov	r0, r3
    8a90:	f002 fdb8 	bl	b604 <FlexCAN_Ip_EnableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    8a94:	9b01      	ldr	r3, [sp, #4]
    8a96:	7a5b      	ldrb	r3, [r3, #9]
    8a98:	f083 0301 	eor.w	r3, r3, #1
    8a9c:	b2db      	uxtb	r3, r3
    8a9e:	2b00      	cmp	r3, #0
    8aa0:	d006      	beq.n	8ab0 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x40>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    8aa2:	9b01      	ldr	r3, [sp, #4]
    8aa4:	789b      	ldrb	r3, [r3, #2]
    8aa6:	2201      	movs	r2, #1
    8aa8:	2104      	movs	r1, #4
    8aaa:	4618      	mov	r0, r3
    8aac:	f002 fe04 	bl	b6b8 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        /* update status */
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    8ab0:	9b01      	ldr	r3, [sp, #4]
    8ab2:	785b      	ldrb	r3, [r3, #1]
    8ab4:	461a      	mov	r2, r3
    8ab6:	4b03      	ldr	r3, [pc, #12]	; (8ac4 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    8ab8:	2101      	movs	r1, #1
    8aba:	5499      	strb	r1, [r3, r2]
    }
}
    8abc:	bf00      	nop
    8abe:	b003      	add	sp, #12
    8ac0:	f85d fb04 	ldr.w	pc, [sp], #4
    8ac4:	1fff8fbc 	.word	0x1fff8fbc

00008ac8 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>:

/**
*   @brief      Get Controller Error State
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerErrorState(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    8ac8:	b500      	push	{lr}
    8aca:	b085      	sub	sp, #20
    8acc:	9001      	str	r0, [sp, #4]
    8ace:	9100      	str	r1, [sp, #0]
    uint32 Error = 0U;
    8ad0:	2300      	movs	r3, #0
    8ad2:	9303      	str	r3, [sp, #12]

    Error = FlexCAN_Ip_GetErrorStatus(Can_pControllerConfig->Can_u8ControllerOffset);
    8ad4:	9b01      	ldr	r3, [sp, #4]
    8ad6:	789b      	ldrb	r3, [r3, #2]
    8ad8:	4618      	mov	r0, r3
    8ada:	f001 fe87 	bl	a7ec <FlexCAN_Ip_GetErrorStatus>
    8ade:	9003      	str	r0, [sp, #12]

    *pValue = (uint8)((Error & FLEXCAN_ESR1_FLTCONF_MASK)>>FLEXCAN_ESR1_FLTCONF_SHIFT);
    8ae0:	9b03      	ldr	r3, [sp, #12]
    8ae2:	091b      	lsrs	r3, r3, #4
    8ae4:	b2db      	uxtb	r3, r3
    8ae6:	f003 0303 	and.w	r3, r3, #3
    8aea:	b2da      	uxtb	r2, r3
    8aec:	9b00      	ldr	r3, [sp, #0]
    8aee:	701a      	strb	r2, [r3, #0]
    return E_OK;
    8af0:	2300      	movs	r3, #0
}
    8af2:	4618      	mov	r0, r3
    8af4:	b005      	add	sp, #20
    8af6:	f85d fb04 	ldr.w	pc, [sp], #4

00008afa <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>:

/**
*   @brief      Get Controller Tx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    8afa:	b500      	push	{lr}
    8afc:	b083      	sub	sp, #12
    8afe:	9001      	str	r0, [sp, #4]
    8b00:	9100      	str	r1, [sp, #0]
     *pValue = FlexCAN_Ip_GetControllerTxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    8b02:	9b01      	ldr	r3, [sp, #4]
    8b04:	789b      	ldrb	r3, [r3, #2]
    8b06:	4618      	mov	r0, r3
    8b08:	f001 fe82 	bl	a810 <FlexCAN_Ip_GetControllerTxErrorCounter>
    8b0c:	4603      	mov	r3, r0
    8b0e:	461a      	mov	r2, r3
    8b10:	9b00      	ldr	r3, [sp, #0]
    8b12:	701a      	strb	r2, [r3, #0]
     return E_OK;
    8b14:	2300      	movs	r3, #0
}
    8b16:	4618      	mov	r0, r3
    8b18:	b003      	add	sp, #12
    8b1a:	f85d fb04 	ldr.w	pc, [sp], #4

00008b1e <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>:

/**
*   @brief      Get Controller Rx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    8b1e:	b500      	push	{lr}
    8b20:	b083      	sub	sp, #12
    8b22:	9001      	str	r0, [sp, #4]
    8b24:	9100      	str	r1, [sp, #0]

    *pValue = FlexCAN_Ip_GetControllerRxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    8b26:	9b01      	ldr	r3, [sp, #4]
    8b28:	789b      	ldrb	r3, [r3, #2]
    8b2a:	4618      	mov	r0, r3
    8b2c:	f001 fe82 	bl	a834 <FlexCAN_Ip_GetControllerRxErrorCounter>
    8b30:	4603      	mov	r3, r0
    8b32:	461a      	mov	r2, r3
    8b34:	9b00      	ldr	r3, [sp, #0]
    8b36:	701a      	strb	r2, [r3, #0]
    return E_OK;
    8b38:	2300      	movs	r3, #0
}
    8b3a:	4618      	mov	r0, r3
    8b3c:	b003      	add	sp, #12
    8b3e:	f85d fb04 	ldr.w	pc, [sp], #4

00008b42 <Can_43_FLEXCAN_Ipw_Write>:
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
    const Can_PduType * PduInfo
)
{
    8b42:	b510      	push	{r4, lr}
    8b44:	b08c      	sub	sp, #48	; 0x30
    8b46:	9005      	str	r0, [sp, #20]
    8b48:	9104      	str	r1, [sp, #16]
    8b4a:	9203      	str	r2, [sp, #12]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    8b4c:	2301      	movs	r3, #1
    8b4e:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_DataInfoType DataInfo;
    uint8 u8ObjIdx = 0U;
    8b50:	2300      	movs	r3, #0
    8b52:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
#if (CAN_43_FLEXCAN_TRIGGER_TRANSMIT_USED == STD_ON)
    PduInfoType CanIf_PduInfo;
    uint8 Data[64U];
#endif

    DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    8b56:	2300      	movs	r3, #0
    8b58:	9306      	str	r3, [sp, #24]
    DataInfo.data_length = 0U;
    8b5a:	2300      	movs	r3, #0
    8b5c:	9307      	str	r3, [sp, #28]
    DataInfo.fd_padding = 0U;
    8b5e:	2300      	movs	r3, #0
    8b60:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    DataInfo.fd_enable = FALSE;
    8b64:	2300      	movs	r3, #0
    8b66:	f88d 3020 	strb.w	r3, [sp, #32]
    DataInfo.enable_brs = FALSE;
    8b6a:	2300      	movs	r3, #0
    8b6c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    DataInfo.is_remote = FALSE;
    8b70:	2300      	movs	r3, #0
    8b72:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    DataInfo.is_polling = FALSE;
    8b76:	2300      	movs	r3, #0
    8b78:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (CAN_TX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    8b7c:	9b04      	ldr	r3, [sp, #16]
    8b7e:	699b      	ldr	r3, [r3, #24]
    8b80:	2b03      	cmp	r3, #3
    8b82:	d177      	bne.n	8c74 <Can_43_FLEXCAN_Ipw_Write+0x132>
    {
        DataInfo.msg_id_type = ((PduInfo->id & CAN_43_FLEXCAN_EXTENDED_ID_U32) != 0U) ? FLEXCAN_MSG_ID_EXT : FLEXCAN_MSG_ID_STD;
    8b84:	9b03      	ldr	r3, [sp, #12]
    8b86:	681b      	ldr	r3, [r3, #0]
    8b88:	0fdb      	lsrs	r3, r3, #31
    8b8a:	9306      	str	r3, [sp, #24]
        if (Can_pHwObjectConfig->Can_u8PayloadLength <=  PduInfo->length)
    8b8c:	9b04      	ldr	r3, [sp, #16]
    8b8e:	7c1a      	ldrb	r2, [r3, #16]
    8b90:	9b03      	ldr	r3, [sp, #12]
    8b92:	799b      	ldrb	r3, [r3, #6]
    8b94:	429a      	cmp	r2, r3
    8b96:	d803      	bhi.n	8ba0 <Can_43_FLEXCAN_Ipw_Write+0x5e>
        {
            DataInfo.data_length = Can_pHwObjectConfig->Can_u8PayloadLength;
    8b98:	9b04      	ldr	r3, [sp, #16]
    8b9a:	7c1b      	ldrb	r3, [r3, #16]
    8b9c:	9307      	str	r3, [sp, #28]
    8b9e:	e002      	b.n	8ba6 <Can_43_FLEXCAN_Ipw_Write+0x64>
        }
        else
        {
            DataInfo.data_length = PduInfo->length;
    8ba0:	9b03      	ldr	r3, [sp, #12]
    8ba2:	799b      	ldrb	r3, [r3, #6]
    8ba4:	9307      	str	r3, [sp, #28]
        }
#if (CAN_43_FLEXCAN_FEATURE_HAS_FD == STD_ON)
        DataInfo.fd_padding = Can_pHwObjectConfig->Can_u8PaddingValue;
    8ba6:	9b04      	ldr	r3, [sp, #16]
    8ba8:	7c5b      	ldrb	r3, [r3, #17]
    8baa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        DataInfo.fd_enable = ((PduInfo->id & CAN_43_FLEXCAN_FD_FRAME_U32) != 0U) ? TRUE : FALSE;
    8bae:	9b03      	ldr	r3, [sp, #12]
    8bb0:	681b      	ldr	r3, [r3, #0]
    8bb2:	0f9b      	lsrs	r3, r3, #30
    8bb4:	f003 0301 	and.w	r3, r3, #1
    8bb8:	2b00      	cmp	r3, #0
    8bba:	bf14      	ite	ne
    8bbc:	2301      	movne	r3, #1
    8bbe:	2300      	moveq	r3, #0
    8bc0:	b2db      	uxtb	r3, r3
    8bc2:	f88d 3020 	strb.w	r3, [sp, #32]
    #if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
            DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID]].Can_bBitRateSwitch;
    8bc6:	9b05      	ldr	r3, [sp, #20]
    8bc8:	6a1a      	ldr	r2, [r3, #32]
    8bca:	9b05      	ldr	r3, [sp, #20]
    8bcc:	785b      	ldrb	r3, [r3, #1]
    8bce:	4619      	mov	r1, r3
    8bd0:	4b31      	ldr	r3, [pc, #196]	; (8c98 <Can_43_FLEXCAN_Ipw_Write+0x156>)
    8bd2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    8bd6:	4619      	mov	r1, r3
    8bd8:	2316      	movs	r3, #22
    8bda:	fb01 f303 	mul.w	r3, r1, r3
    8bde:	4413      	add	r3, r2
    8be0:	781b      	ldrb	r3, [r3, #0]
    8be2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    #else
        DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bBitRateSwitch;
    #endif
#endif
        DataInfo.is_remote = FALSE;
    8be6:	2300      	movs	r3, #0
    8be8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        DataInfo.is_polling = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
    8bec:	9b04      	ldr	r3, [sp, #16]
    8bee:	7b1b      	ldrb	r3, [r3, #12]
    8bf0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        do
        {
            eRetVal = FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx);
    8bf4:	9b05      	ldr	r3, [sp, #20]
    8bf6:	7898      	ldrb	r0, [r3, #2]
    8bf8:	9b04      	ldr	r3, [sp, #16]
    8bfa:	7f1a      	ldrb	r2, [r3, #28]
    8bfc:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8c00:	4413      	add	r3, r2
    8c02:	b2db      	uxtb	r3, r3
    8c04:	4619      	mov	r1, r3
    8c06:	f001 fcdf 	bl	a5c8 <FlexCAN_Ip_GetTransferStatus>
    8c0a:	900b      	str	r0, [sp, #44]	; 0x2c
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    8c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8c0e:	2b00      	cmp	r3, #0
    8c10:	d122      	bne.n	8c58 <Can_43_FLEXCAN_Ipw_Write+0x116>
            {
                #if ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))
                Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = PduInfo->swPduHandle;
    8c12:	9b05      	ldr	r3, [sp, #20]
    8c14:	785b      	ldrb	r3, [r3, #1]
    8c16:	461c      	mov	r4, r3
    8c18:	9b04      	ldr	r3, [sp, #16]
    8c1a:	7f1b      	ldrb	r3, [r3, #28]
    8c1c:	461a      	mov	r2, r3
    8c1e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8c22:	4413      	add	r3, r2
    8c24:	9a03      	ldr	r2, [sp, #12]
    8c26:	8890      	ldrh	r0, [r2, #4]
    8c28:	491c      	ldr	r1, [pc, #112]	; (8c9c <Can_43_FLEXCAN_Ipw_Write+0x15a>)
    8c2a:	0162      	lsls	r2, r4, #5
    8c2c:	4413      	add	r3, r2
    8c2e:	4602      	mov	r2, r0
    8c30:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    }
                }
                else
                {
            #endif
                    eRetVal = FlexCAN_Ip_Send(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx, &DataInfo, PduInfo->id, PduInfo->sdu);
    8c34:	9b05      	ldr	r3, [sp, #20]
    8c36:	7898      	ldrb	r0, [r3, #2]
    8c38:	9b04      	ldr	r3, [sp, #16]
    8c3a:	7f1a      	ldrb	r2, [r3, #28]
    8c3c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8c40:	4413      	add	r3, r2
    8c42:	b2d9      	uxtb	r1, r3
    8c44:	9b03      	ldr	r3, [sp, #12]
    8c46:	681c      	ldr	r4, [r3, #0]
    8c48:	9b03      	ldr	r3, [sp, #12]
    8c4a:	689b      	ldr	r3, [r3, #8]
    8c4c:	aa06      	add	r2, sp, #24
    8c4e:	9300      	str	r3, [sp, #0]
    8c50:	4623      	mov	r3, r4
    8c52:	f001 fa4d 	bl	a0f0 <FlexCAN_Ip_Send>
    8c56:	900b      	str	r0, [sp, #44]	; 0x2c
                /* Revert to FALSE due to the MB was not transmitted successfully */
                Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = FALSE;
            }
            #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */
            }
            u8ObjIdx++;
    8c58:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8c5c:	3301      	adds	r3, #1
    8c5e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        } while ((u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount) && (FLEXCAN_STATUS_BUSY == eRetVal));
    8c62:	9b04      	ldr	r3, [sp, #16]
    8c64:	7b9b      	ldrb	r3, [r3, #14]
    8c66:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    8c6a:	429a      	cmp	r2, r3
    8c6c:	d202      	bcs.n	8c74 <Can_43_FLEXCAN_Ipw_Write+0x132>
    8c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8c70:	2b02      	cmp	r3, #2
    8c72:	d0bf      	beq.n	8bf4 <Can_43_FLEXCAN_Ipw_Write+0xb2>
    }

    if ((FLEXCAN_STATUS_SUCCESS != eRetVal) && (FLEXCAN_STATUS_BUSY != eRetVal))
    8c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8c76:	2b00      	cmp	r3, #0
    8c78:	d004      	beq.n	8c84 <Can_43_FLEXCAN_Ipw_Write+0x142>
    8c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8c7c:	2b02      	cmp	r3, #2
    8c7e:	d001      	beq.n	8c84 <Can_43_FLEXCAN_Ipw_Write+0x142>
    {
        eRetVal = FLEXCAN_STATUS_ERROR;
    8c80:	2301      	movs	r3, #1
    8c82:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    return ((FLEXCAN_STATUS_BUSY == eRetVal) ? ((Std_ReturnType)CAN_BUSY) : ((Std_ReturnType)eRetVal));
    8c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8c86:	2b02      	cmp	r3, #2
    8c88:	d002      	beq.n	8c90 <Can_43_FLEXCAN_Ipw_Write+0x14e>
    8c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8c8c:	b2db      	uxtb	r3, r3
    8c8e:	e000      	b.n	8c92 <Can_43_FLEXCAN_Ipw_Write+0x150>
    8c90:	2302      	movs	r3, #2
}
    8c92:	4618      	mov	r0, r3
    8c94:	b00c      	add	sp, #48	; 0x30
    8c96:	bd10      	pop	{r4, pc}
    8c98:	1fff8fb8 	.word	0x1fff8fb8
    8c9c:	1fff8f38 	.word	0x1fff8f38

00008ca0 <Can_Ipw_InitRx>:

static void Can_Ipw_InitRx(const Can_43_FLEXCAN_ControllerConfigType * Can_pController)
{
    8ca0:	b500      	push	{lr}
    8ca2:	b089      	sub	sp, #36	; 0x24
    8ca4:	9001      	str	r0, [sp, #4]
    uint8 u8HwObjRefIdx = 0U;
    8ca6:	2300      	movs	r3, #0
    8ca8:	f88d 301f 	strb.w	r3, [sp, #31]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    Flexcan_Ip_DataInfoType DataInfo;

    /* This function just is called only if controller is in freeze mode */
    /* Always enable individual mask , Already in freeze mode */
    (void)FlexCAN_Ip_SetRxMaskType(Can_pController->Can_u8ControllerOffset, FLEXCAN_RX_MASK_INDIVIDUAL);
    8cac:	9b01      	ldr	r3, [sp, #4]
    8cae:	789b      	ldrb	r3, [r3, #2]
    8cb0:	2101      	movs	r1, #1
    8cb2:	4618      	mov	r0, r3
    8cb4:	f002 fa42 	bl	b13c <FlexCAN_Ip_SetRxMaskType_Privileged>

    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    8cb8:	2300      	movs	r3, #0
    8cba:	f88d 301f 	strb.w	r3, [sp, #31]
    8cbe:	e03a      	b.n	8d36 <Can_Ipw_InitRx+0x96>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pController->Can_ppHwObject[u8HwObjRefIdx];
    8cc0:	9b01      	ldr	r3, [sp, #4]
    8cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8cc4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8cc8:	009b      	lsls	r3, r3, #2
    8cca:	4413      	add	r3, r2
    8ccc:	681b      	ldr	r3, [r3, #0]
    8cce:	9306      	str	r3, [sp, #24]

        if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    8cd0:	9b06      	ldr	r3, [sp, #24]
    8cd2:	699b      	ldr	r3, [r3, #24]
    8cd4:	2b00      	cmp	r3, #0
    8cd6:	d121      	bne.n	8d1c <Can_Ipw_InitRx+0x7c>
        {
            DataInfo.fd_enable = FALSE;
    8cd8:	2300      	movs	r3, #0
    8cda:	f88d 3010 	strb.w	r3, [sp, #16]
            DataInfo.data_length = 0U;
    8cde:	2300      	movs	r3, #0
    8ce0:	9303      	str	r3, [sp, #12]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    8ce2:	9b06      	ldr	r3, [sp, #24]
    8ce4:	689b      	ldr	r3, [r3, #8]
    8ce6:	2b00      	cmp	r3, #0
    8ce8:	d002      	beq.n	8cf0 <Can_Ipw_InitRx+0x50>
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_EXT;
    8cea:	2301      	movs	r3, #1
    8cec:	9302      	str	r3, [sp, #8]
    8cee:	e001      	b.n	8cf4 <Can_Ipw_InitRx+0x54>
            }
            else
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    8cf0:	2300      	movs	r3, #0
    8cf2:	9302      	str	r3, [sp, #8]
            }
            (void)FlexCAN_Ip_ConfigRxMb(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, &DataInfo, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterCode);
    8cf4:	9b01      	ldr	r3, [sp, #4]
    8cf6:	7898      	ldrb	r0, [r3, #2]
    8cf8:	9b06      	ldr	r3, [sp, #24]
    8cfa:	7f19      	ldrb	r1, [r3, #28]
    8cfc:	9b06      	ldr	r3, [sp, #24]
    8cfe:	695b      	ldr	r3, [r3, #20]
    8d00:	681b      	ldr	r3, [r3, #0]
    8d02:	aa02      	add	r2, sp, #8
    8d04:	f001 fa40 	bl	a188 <FlexCAN_Ip_ConfigRxMb>
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterMask);
    8d08:	9b01      	ldr	r3, [sp, #4]
    8d0a:	7898      	ldrb	r0, [r3, #2]
    8d0c:	9b06      	ldr	r3, [sp, #24]
    8d0e:	7f19      	ldrb	r1, [r3, #28]
    8d10:	9b06      	ldr	r3, [sp, #24]
    8d12:	695b      	ldr	r3, [r3, #20]
    8d14:	685b      	ldr	r3, [r3, #4]
    8d16:	461a      	mov	r2, r3
    8d18:	f001 ffc8 	bl	acac <FlexCAN_Ip_SetRxIndividualMask_Privileged>
        }

        if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    8d1c:	9b06      	ldr	r3, [sp, #24]
    8d1e:	699b      	ldr	r3, [r3, #24]
    8d20:	2b01      	cmp	r3, #1
    8d22:	d103      	bne.n	8d2c <Can_Ipw_InitRx+0x8c>
        {
            Can_Ipw_InitLegacyFifoFilter(Can_pController, Can_pHwObject);
    8d24:	9906      	ldr	r1, [sp, #24]
    8d26:	9801      	ldr	r0, [sp, #4]
    8d28:	f7fe ffab 	bl	7c82 <Can_Ipw_InitLegacyFifoFilter>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    8d2c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8d30:	3301      	adds	r3, #1
    8d32:	f88d 301f 	strb.w	r3, [sp, #31]
    8d36:	9b01      	ldr	r3, [sp, #4]
    8d38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    8d3c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    8d40:	429a      	cmp	r2, r3
    8d42:	d3bd      	bcc.n	8cc0 <Can_Ipw_InitRx+0x20>
        }
    }
}
    8d44:	bf00      	nop
    8d46:	bf00      	nop
    8d48:	b009      	add	sp, #36	; 0x24
    8d4a:	f85d fb04 	ldr.w	pc, [sp], #4

00008d4e <Can_43_FLEXCAN_Ipw_MainFunction_Mode>:
void Can_43_FLEXCAN_Ipw_MainFunction_Mode
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    Can_ControllerStateType * Can_pControllerState
)
{
    8d4e:	b500      	push	{lr}
    8d50:	b083      	sub	sp, #12
    8d52:	9001      	str	r0, [sp, #4]
    8d54:	9100      	str	r1, [sp, #0]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    if (CAN_CS_STARTED == *Can_pControllerState)
    8d56:	9b00      	ldr	r3, [sp, #0]
    8d58:	681b      	ldr	r3, [r3, #0]
    8d5a:	2b01      	cmp	r3, #1
    8d5c:	d114      	bne.n	8d88 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x3a>
    {
        if (FALSE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    8d5e:	9b01      	ldr	r3, [sp, #4]
    8d60:	789b      	ldrb	r3, [r3, #2]
    8d62:	4618      	mov	r0, r3
    8d64:	f002 f994 	bl	b090 <FlexCAN_Ip_GetStartMode_Privileged>
    8d68:	4603      	mov	r3, r0
    8d6a:	f083 0301 	eor.w	r3, r3, #1
    8d6e:	b2db      	uxtb	r3, r3
    8d70:	2b00      	cmp	r3, #0
    8d72:	d01e      	beq.n	8db2 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        {
            *Can_pControllerState = CAN_CS_STOPPED;
    8d74:	9b00      	ldr	r3, [sp, #0]
    8d76:	2202      	movs	r2, #2
    8d78:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STOPPED);
    8d7a:	9b01      	ldr	r3, [sp, #4]
    8d7c:	781b      	ldrb	r3, [r3, #0]
    8d7e:	2102      	movs	r1, #2
    8d80:	4618      	mov	r0, r3
    8d82:	f006 fe1f 	bl	f9c4 <CanIf_ControllerModeIndication>
    }
    else
    {
        /* nothing to do */
    }
}
    8d86:	e014      	b.n	8db2 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
    else if (CAN_CS_STOPPED == *Can_pControllerState)
    8d88:	9b00      	ldr	r3, [sp, #0]
    8d8a:	681b      	ldr	r3, [r3, #0]
    8d8c:	2b02      	cmp	r3, #2
    8d8e:	d110      	bne.n	8db2 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        if (TRUE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    8d90:	9b01      	ldr	r3, [sp, #4]
    8d92:	789b      	ldrb	r3, [r3, #2]
    8d94:	4618      	mov	r0, r3
    8d96:	f002 f97b 	bl	b090 <FlexCAN_Ip_GetStartMode_Privileged>
    8d9a:	4603      	mov	r3, r0
    8d9c:	2b00      	cmp	r3, #0
    8d9e:	d008      	beq.n	8db2 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
            *Can_pControllerState = CAN_CS_STARTED;
    8da0:	9b00      	ldr	r3, [sp, #0]
    8da2:	2201      	movs	r2, #1
    8da4:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STARTED);
    8da6:	9b01      	ldr	r3, [sp, #4]
    8da8:	781b      	ldrb	r3, [r3, #0]
    8daa:	2101      	movs	r1, #1
    8dac:	4618      	mov	r0, r3
    8dae:	f006 fe09 	bl	f9c4 <CanIf_ControllerModeIndication>
}
    8db2:	bf00      	nop
    8db4:	b003      	add	sp, #12
    8db6:	f85d fb04 	ldr.w	pc, [sp], #4

00008dba <Can_43_FLEXCAN_Ipw_ProcessHwObject>:
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_ConfigType * Can_pConfig,
        uint8 u8MbIdx,
        Can_43_FLEXCAN_MbType mbType
    )
    {
    8dba:	b500      	push	{lr}
    8dbc:	b085      	sub	sp, #20
    8dbe:	9003      	str	r0, [sp, #12]
    8dc0:	9102      	str	r1, [sp, #8]
    8dc2:	9300      	str	r3, [sp, #0]
    8dc4:	4613      	mov	r3, r2
    8dc6:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (mbType)
    8dca:	9b00      	ldr	r3, [sp, #0]
    8dcc:	2b03      	cmp	r3, #3
    8dce:	d009      	beq.n	8de4 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x2a>
    8dd0:	9b00      	ldr	r3, [sp, #0]
    8dd2:	2b03      	cmp	r3, #3
    8dd4:	d821      	bhi.n	8e1a <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
    8dd6:	9b00      	ldr	r3, [sp, #0]
    8dd8:	2b00      	cmp	r3, #0
    8dda:	d00c      	beq.n	8df6 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x3c>
    8ddc:	9b00      	ldr	r3, [sp, #0]
    8dde:	2b01      	cmp	r3, #1
    8de0:	d012      	beq.n	8e08 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x4e>
                break;
            }
            default:
            {
                /* prevent misra */
                break;
    8de2:	e01a      	b.n	8e1a <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
                Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    8de4:	9b02      	ldr	r3, [sp, #8]
    8de6:	691b      	ldr	r3, [r3, #16]
    8de8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8dec:	4619      	mov	r1, r3
    8dee:	9803      	ldr	r0, [sp, #12]
    8df0:	f7ff fa24 	bl	823c <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>
                break;
    8df4:	e012      	b.n	8e1c <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    8df6:	9b02      	ldr	r3, [sp, #8]
    8df8:	691b      	ldr	r3, [r3, #16]
    8dfa:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8dfe:	4619      	mov	r1, r3
    8e00:	9803      	ldr	r0, [sp, #12]
    8e02:	f7ff fa67 	bl	82d4 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    8e06:	e009      	b.n	8e1c <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                    Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    8e08:	9b02      	ldr	r3, [sp, #8]
    8e0a:	691b      	ldr	r3, [r3, #16]
    8e0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8e10:	4619      	mov	r1, r3
    8e12:	9803      	ldr	r0, [sp, #12]
    8e14:	f7ff fa5e 	bl	82d4 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    8e18:	e000      	b.n	8e1c <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                break;
    8e1a:	bf00      	nop
            }
        }
    }
    8e1c:	bf00      	nop
    8e1e:	b005      	add	sp, #20
    8e20:	f85d fb04 	ldr.w	pc, [sp], #4

00008e24 <Can_43_FLEXCAN_CommonIrqCallback>:
void Can_43_FLEXCAN_CommonIrqCallback(uint8 u8Instance,
                           Flexcan_Ip_EventType event,
                           uint32 u32buffIdx,
                           const Flexcan_Ip_StateType *driverState
                          )
{
    8e24:	b500      	push	{lr}
    8e26:	b085      	sub	sp, #20
    8e28:	9102      	str	r1, [sp, #8]
    8e2a:	9201      	str	r2, [sp, #4]
    8e2c:	9300      	str	r3, [sp, #0]
    8e2e:	4603      	mov	r3, r0
    8e30:	f88d 300f 	strb.w	r3, [sp, #15]
    else
    {
#endif /* CAN_43_FLEXCAN_FEATURE_HAS_ENHANCED_RX_FIFO */
    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        /* This callback is just used for interrupt buffter */
        if (FALSE == (driverState->mbs[u32buffIdx].isPolling))
    8e34:	9a00      	ldr	r2, [sp, #0]
    8e36:	9b01      	ldr	r3, [sp, #4]
    8e38:	011b      	lsls	r3, r3, #4
    8e3a:	4413      	add	r3, r2
    8e3c:	3308      	adds	r3, #8
    8e3e:	781b      	ldrb	r3, [r3, #0]
    8e40:	f083 0301 	eor.w	r3, r3, #1
    8e44:	b2db      	uxtb	r3, r3
    8e46:	2b00      	cmp	r3, #0
    8e48:	d03b      	beq.n	8ec2 <Can_43_FLEXCAN_CommonIrqCallback+0x9e>
    8e4a:	9b02      	ldr	r3, [sp, #8]
    8e4c:	2b04      	cmp	r3, #4
    8e4e:	d83a      	bhi.n	8ec6 <Can_43_FLEXCAN_CommonIrqCallback+0xa2>
    8e50:	a201      	add	r2, pc, #4	; (adr r2, 8e58 <Can_43_FLEXCAN_CommonIrqCallback+0x34>)
    8e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8e56:	bf00      	nop
    8e58:	00008e7f 	.word	0x00008e7f
    8e5c:	00008e91 	.word	0x00008e91
    8e60:	00008ea3 	.word	0x00008ea3
    8e64:	00008eb3 	.word	0x00008eb3
    8e68:	00008e6d 	.word	0x00008e6d
        {
            switch (event)
            {
                case FLEXCAN_EVENT_TX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_TX_NORMAL);
    8e6c:	9b01      	ldr	r3, [sp, #4]
    8e6e:	b2d9      	uxtb	r1, r3
    8e70:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8e74:	2203      	movs	r2, #3
    8e76:	4618      	mov	r0, r3
    8e78:	f7fe fe1e 	bl	7ab8 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8e7c:	e024      	b.n	8ec8 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_NORMAL);
    8e7e:	9b01      	ldr	r3, [sp, #4]
    8e80:	b2d9      	uxtb	r1, r3
    8e82:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8e86:	2200      	movs	r2, #0
    8e88:	4618      	mov	r0, r3
    8e8a:	f7fe fe15 	bl	7ab8 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8e8e:	e01b      	b.n	8ec8 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_LEGACY_FIFO);
    8e90:	9b01      	ldr	r3, [sp, #4]
    8e92:	b2d9      	uxtb	r1, r3
    8e94:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8e98:	2201      	movs	r2, #1
    8e9a:	4618      	mov	r0, r3
    8e9c:	f7fe fe0c 	bl	7ab8 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8ea0:	e012      	b.n	8ec8 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_WARNING:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 6U, CAN_RX_LEGACY_FIFO);
    8ea2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8ea6:	2201      	movs	r2, #1
    8ea8:	2106      	movs	r1, #6
    8eaa:	4618      	mov	r0, r3
    8eac:	f7fe fe04 	bl	7ab8 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8eb0:	e00a      	b.n	8ec8 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_OVERFLOW:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 7U, CAN_RX_LEGACY_FIFO);
    8eb2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8eb6:	2201      	movs	r2, #1
    8eb8:	2107      	movs	r1, #7
    8eba:	4618      	mov	r0, r3
    8ebc:	f7fe fdfc 	bl	7ab8 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8ec0:	e002      	b.n	8ec8 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                {
                    /* nothing to do */
                    break;
                }
            }
        }
    8ec2:	bf00      	nop
    8ec4:	e000      	b.n	8ec8 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                    break;
    8ec6:	bf00      	nop
        Can_43_FLEXCAN_ProcessPNInterrupt(u8Instance);
    }
#endif /* (CAN_43_FLEXCAN_FEATURE_HAS_PRETENDED_NETWORKING == STD_ON) */
    (void)u32buffIdx;
    (void)driverState;
}
    8ec8:	bf00      	nop
    8eca:	b005      	add	sp, #20
    8ecc:	f85d fb04 	ldr.w	pc, [sp], #4

00008ed0 <Can_43_FLEXCAN_ErrorIrqCallback>:
void Can_43_FLEXCAN_ErrorIrqCallback(uint8 u8Instance,
                          Flexcan_Ip_EventType event,
                          uint32 u32ErrStatus,
                          const Flexcan_Ip_StateType *driverState
                         )
{
    8ed0:	b500      	push	{lr}
    8ed2:	b085      	sub	sp, #20
    8ed4:	9102      	str	r1, [sp, #8]
    8ed6:	9201      	str	r2, [sp, #4]
    8ed8:	9300      	str	r3, [sp, #0]
    8eda:	4603      	mov	r3, r0
    8edc:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) driverState; /* not used yet */
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON)
    (void) u32ErrStatus; /* prevent compiler warning */
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON) */

    switch (event)
    8ee0:	9b02      	ldr	r3, [sp, #8]
    8ee2:	2b07      	cmp	r3, #7
    8ee4:	d105      	bne.n	8ef2 <Can_43_FLEXCAN_ErrorIrqCallback+0x22>
        }
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON) */
        /* this function is called for both interrupt & polling */
        case FLEXCAN_EVENT_BUSOFF:
        {
            Can_43_FLEXCAN_ProcessBusOffInterrupt(u8Instance);
    8ee6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8eea:	4618      	mov	r0, r3
    8eec:	f7fe fe26 	bl	7b3c <Can_43_FLEXCAN_ProcessBusOffInterrupt>
            break;
    8ef0:	e000      	b.n	8ef4 <Can_43_FLEXCAN_ErrorIrqCallback+0x24>
        }
        default:
        {
            /* nothing to do */
            break;
    8ef2:	bf00      	nop
        }
    }
}
    8ef4:	bf00      	nop
    8ef6:	b005      	add	sp, #20
    8ef8:	f85d fb04 	ldr.w	pc, [sp], #4

00008efc <FlexCAN_SetRxFifoGlobalMask>:
 *
 * @param[in]   base  The FlexCAN base address
 * @param[in]   Mask     Sets mask
 */
static inline void FlexCAN_SetRxFifoGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    8efc:	b082      	sub	sp, #8
    8efe:	9001      	str	r0, [sp, #4]
    8f00:	9100      	str	r1, [sp, #0]
    (base->RXFGMASK) = Mask;
    8f02:	9b01      	ldr	r3, [sp, #4]
    8f04:	9a00      	ldr	r2, [sp, #0]
    8f06:	649a      	str	r2, [r3, #72]	; 0x48
}
    8f08:	bf00      	nop
    8f0a:	b002      	add	sp, #8
    8f0c:	4770      	bx	lr

00008f0e <FlexCAN_SetTDCOffset>:
 */
static inline void FlexCAN_SetTDCOffset(FLEXCAN_Type * base,
                                        boolean enable,
                                        uint8 offset
                                       )
{
    8f0e:	b084      	sub	sp, #16
    8f10:	9001      	str	r0, [sp, #4]
    8f12:	460b      	mov	r3, r1
    8f14:	f88d 3003 	strb.w	r3, [sp, #3]
    8f18:	4613      	mov	r3, r2
    8f1a:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 tmp;

    tmp = base->FDCTRL;
    8f1e:	9b01      	ldr	r3, [sp, #4]
    8f20:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    8f24:	9303      	str	r3, [sp, #12]
    tmp &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    8f26:	9b03      	ldr	r3, [sp, #12]
    8f28:	f423 431f 	bic.w	r3, r3, #40704	; 0x9f00
    8f2c:	9303      	str	r3, [sp, #12]

    if (enable)
    8f2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8f32:	2b00      	cmp	r3, #0
    8f34:	d00b      	beq.n	8f4e <FlexCAN_SetTDCOffset+0x40>
    {
        tmp = tmp | FLEXCAN_FDCTRL_TDCEN_MASK;
    8f36:	9b03      	ldr	r3, [sp, #12]
    8f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8f3c:	9303      	str	r3, [sp, #12]
        tmp = tmp | FLEXCAN_FDCTRL_TDCOFF(offset);
    8f3e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8f42:	021b      	lsls	r3, r3, #8
    8f44:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    8f48:	9a03      	ldr	r2, [sp, #12]
    8f4a:	4313      	orrs	r3, r2
    8f4c:	9303      	str	r3, [sp, #12]
    }

    base->FDCTRL = tmp;
    8f4e:	9b01      	ldr	r3, [sp, #4]
    8f50:	9a03      	ldr	r2, [sp, #12]
    8f52:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    8f56:	bf00      	nop
    8f58:	b004      	add	sp, #16
    8f5a:	4770      	bx	lr

00008f5c <FlexCAN_IsEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsEnabled(const FLEXCAN_Type * pBase)
{
    8f5c:	b082      	sub	sp, #8
    8f5e:	9001      	str	r0, [sp, #4]
    return (((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U) ? FALSE : TRUE;
    8f60:	9b01      	ldr	r3, [sp, #4]
    8f62:	681b      	ldr	r3, [r3, #0]
    8f64:	43db      	mvns	r3, r3
    8f66:	0fdb      	lsrs	r3, r3, #31
    8f68:	b2db      	uxtb	r3, r3
}
    8f6a:	4618      	mov	r0, r3
    8f6c:	b002      	add	sp, #8
    8f6e:	4770      	bx	lr

00008f70 <FlexCAN_SetFDEnabled>:
 */
static inline void FlexCAN_SetFDEnabled(FLEXCAN_Type * base,
                                        boolean enableFD,
                                        boolean enableBRS
                                       )
{
    8f70:	b082      	sub	sp, #8
    8f72:	9001      	str	r0, [sp, #4]
    8f74:	460b      	mov	r3, r1
    8f76:	f88d 3003 	strb.w	r3, [sp, #3]
    8f7a:	4613      	mov	r3, r2
    8f7c:	f88d 3002 	strb.w	r3, [sp, #2]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FDEN_MASK) | FLEXCAN_MCR_FDEN(enableFD ? 1UL : 0UL);
    8f80:	9b01      	ldr	r3, [sp, #4]
    8f82:	681b      	ldr	r3, [r3, #0]
    8f84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    8f88:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8f8c:	2a00      	cmp	r2, #0
    8f8e:	d002      	beq.n	8f96 <FlexCAN_SetFDEnabled+0x26>
    8f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8f94:	e000      	b.n	8f98 <FlexCAN_SetFDEnabled+0x28>
    8f96:	2200      	movs	r2, #0
    8f98:	431a      	orrs	r2, r3
    8f9a:	9b01      	ldr	r3, [sp, #4]
    8f9c:	601a      	str	r2, [r3, #0]

    /* Enable BitRate Switch support from BRS_TX_MB field or ignore it */
    base->FDCTRL = (base->FDCTRL & ~FLEXCAN_FDCTRL_FDRATE_MASK) | FLEXCAN_FDCTRL_FDRATE(enableBRS ? 1UL : 0UL);
    8f9e:	9b01      	ldr	r3, [sp, #4]
    8fa0:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    8fa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    8fa8:	f89d 2002 	ldrb.w	r2, [sp, #2]
    8fac:	2a00      	cmp	r2, #0
    8fae:	d002      	beq.n	8fb6 <FlexCAN_SetFDEnabled+0x46>
    8fb0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8fb4:	e000      	b.n	8fb8 <FlexCAN_SetFDEnabled+0x48>
    8fb6:	2200      	movs	r2, #0
    8fb8:	431a      	orrs	r2, r3
    8fba:	9b01      	ldr	r3, [sp, #4]
    8fbc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00

    /* Disable Transmission Delay Compensation by default */
    base->FDCTRL &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    8fc0:	9b01      	ldr	r3, [sp, #4]
    8fc2:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    8fc6:	f423 421f 	bic.w	r2, r3, #40704	; 0x9f00
    8fca:	9b01      	ldr	r3, [sp, #4]
    8fcc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    8fd0:	bf00      	nop
    8fd2:	b002      	add	sp, #8
    8fd4:	4770      	bx	lr

00008fd6 <FlexCAN_SetListenOnlyMode>:
 *
 * @param   base    The FlexCAN base address
 * @param   enable  TRUE to enable; FALSE to disable
 */
static inline void FlexCAN_SetListenOnlyMode(FLEXCAN_Type * base, boolean enableListenOnly)
{
    8fd6:	b082      	sub	sp, #8
    8fd8:	9001      	str	r0, [sp, #4]
    8fda:	460b      	mov	r3, r1
    8fdc:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(enableListenOnly ? 1UL : 0UL);
    8fe0:	9b01      	ldr	r3, [sp, #4]
    8fe2:	685b      	ldr	r3, [r3, #4]
    8fe4:	f023 0308 	bic.w	r3, r3, #8
    8fe8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8fec:	2a00      	cmp	r2, #0
    8fee:	d001      	beq.n	8ff4 <FlexCAN_SetListenOnlyMode+0x1e>
    8ff0:	2208      	movs	r2, #8
    8ff2:	e000      	b.n	8ff6 <FlexCAN_SetListenOnlyMode+0x20>
    8ff4:	2200      	movs	r2, #0
    8ff6:	431a      	orrs	r2, r3
    8ff8:	9b01      	ldr	r3, [sp, #4]
    8ffa:	605a      	str	r2, [r3, #4]
}
    8ffc:	bf00      	nop
    8ffe:	b002      	add	sp, #8
    9000:	4770      	bx	lr

00009002 <FlexCAN_UnlockRxMsgBuff>:
 * @brief Unlocks the FlexCAN Rx message buffer.
 *
 * @param   base     The FlexCAN base address
 */
static inline void FlexCAN_UnlockRxMsgBuff(const FLEXCAN_Type * base)
{
    9002:	b082      	sub	sp, #8
    9004:	9001      	str	r0, [sp, #4]
    /* Unlock the mailbox by reading the free running timer */
    (void)base->TIMER;
    9006:	9b01      	ldr	r3, [sp, #4]
    9008:	689b      	ldr	r3, [r3, #8]
}
    900a:	bf00      	nop
    900c:	b002      	add	sp, #8
    900e:	4770      	bx	lr

00009010 <FlexCAN_ClearMsgBuffIntStatusFlag>:
 *
 * @param   base        The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 */
static inline void FlexCAN_ClearMsgBuffIntStatusFlag(FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    9010:	b084      	sub	sp, #16
    9012:	9001      	str	r0, [sp, #4]
    9014:	9100      	str	r1, [sp, #0]
    uint32 flag = ((uint32)1U << (msgBuffIdx % 32U));
    9016:	9b00      	ldr	r3, [sp, #0]
    9018:	f003 031f 	and.w	r3, r3, #31
    901c:	2201      	movs	r2, #1
    901e:	fa02 f303 	lsl.w	r3, r2, r3
    9022:	9303      	str	r3, [sp, #12]

    /* Clear the corresponding message buffer interrupt flag*/
    if (msgBuffIdx < 32U)
    9024:	9b00      	ldr	r3, [sp, #0]
    9026:	2b1f      	cmp	r3, #31
    9028:	d802      	bhi.n	9030 <FlexCAN_ClearMsgBuffIntStatusFlag+0x20>
    {
        (base->IFLAG1) = (flag);
    902a:	9b01      	ldr	r3, [sp, #4]
    902c:	9a03      	ldr	r2, [sp, #12]
    902e:	631a      	str	r2, [r3, #48]	; 0x30
    else
    {
        (base->IFLAG4) = (flag);
    }
#endif
}
    9030:	bf00      	nop
    9032:	b004      	add	sp, #16
    9034:	4770      	bx	lr

00009036 <FlexCAN_GetBuffStatusFlag>:
 * @param   base                The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 * @return  flag        The value of interrupt flag of the message buffer.
 */
static inline uint8 FlexCAN_GetBuffStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    9036:	b084      	sub	sp, #16
    9038:	9001      	str	r0, [sp, #4]
    903a:	9100      	str	r1, [sp, #0]
    uint32 flag = 0U;
    903c:	2300      	movs	r3, #0
    903e:	9303      	str	r3, [sp, #12]

    if (msgBuffIdx < 32U)
    9040:	9b00      	ldr	r3, [sp, #0]
    9042:	2b1f      	cmp	r3, #31
    9044:	d80e      	bhi.n	9064 <FlexCAN_GetBuffStatusFlag+0x2e>
    {
        flag = ((base->IFLAG1 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    9046:	9b01      	ldr	r3, [sp, #4]
    9048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    904a:	9b00      	ldr	r3, [sp, #0]
    904c:	f003 031f 	and.w	r3, r3, #31
    9050:	2101      	movs	r1, #1
    9052:	fa01 f303 	lsl.w	r3, r1, r3
    9056:	401a      	ands	r2, r3
    9058:	9b00      	ldr	r3, [sp, #0]
    905a:	f003 031f 	and.w	r3, r3, #31
    905e:	fa22 f303 	lsr.w	r3, r2, r3
    9062:	9303      	str	r3, [sp, #12]
    {
        flag = ((base->IFLAG4 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    }
#endif

    return (uint8)flag;
    9064:	9b03      	ldr	r3, [sp, #12]
    9066:	b2db      	uxtb	r3, r3
}
    9068:	4618      	mov	r0, r3
    906a:	b004      	add	sp, #16
    906c:	4770      	bx	lr

0000906e <FlexCAN_SetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetFDTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    906e:	b082      	sub	sp, #8
    9070:	9001      	str	r0, [sp, #4]
    9072:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* Set FlexCAN time segments*/
    (base->FDCBT) = ((base->FDCBT) & ~((FLEXCAN_FDCBT_FPROPSEG_MASK | FLEXCAN_FDCBT_FPSEG2_MASK |
    9074:	9b01      	ldr	r3, [sp, #4]
    9076:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    907a:	4b15      	ldr	r3, [pc, #84]	; (90d0 <FlexCAN_SetFDTimeSegments+0x62>)
    907c:	4013      	ands	r3, r2
    907e:	9a01      	ldr	r2, [sp, #4]
    9080:	f8c2 3c04 	str.w	r3, [r2, #3076]	; 0xc04
                                        FLEXCAN_FDCBT_FPSEG1_MASK | FLEXCAN_FDCBT_FPRESDIV_MASK
                                       ) | FLEXCAN_FDCBT_FRJW_MASK
                                      )
                    );

    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    9084:	9b01      	ldr	r3, [sp, #4]
    9086:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    908a:	9b00      	ldr	r3, [sp, #0]
    908c:	681b      	ldr	r3, [r3, #0]
    908e:	029b      	lsls	r3, r3, #10
    9090:	f403 41f8 	and.w	r1, r3, #31744	; 0x7c00
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    9094:	9b00      	ldr	r3, [sp, #0]
    9096:	689b      	ldr	r3, [r3, #8]
    9098:	f003 0307 	and.w	r3, r3, #7
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    909c:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    909e:	9b00      	ldr	r3, [sp, #0]
    90a0:	685b      	ldr	r3, [r3, #4]
    90a2:	015b      	lsls	r3, r3, #5
    90a4:	b2db      	uxtb	r3, r3
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    90a6:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    90a8:	9b00      	ldr	r3, [sp, #0]
    90aa:	68db      	ldr	r3, [r3, #12]
    90ac:	0518      	lsls	r0, r3, #20
    90ae:	4b09      	ldr	r3, [pc, #36]	; (90d4 <FlexCAN_SetFDTimeSegments+0x66>)
    90b0:	4003      	ands	r3, r0
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    90b2:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FRJW(timeSeg->rJumpwidth)
    90b4:	9b00      	ldr	r3, [sp, #0]
    90b6:	691b      	ldr	r3, [r3, #16]
    90b8:	041b      	lsls	r3, r3, #16
    90ba:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    90be:	430b      	orrs	r3, r1
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    90c0:	431a      	orrs	r2, r3
    90c2:	9b01      	ldr	r3, [sp, #4]
    90c4:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
                                     )
                    );
}
    90c8:	bf00      	nop
    90ca:	b002      	add	sp, #8
    90cc:	4770      	bx	lr
    90ce:	bf00      	nop
    90d0:	c0088318 	.word	0xc0088318
    90d4:	3ff00000 	.word	0x3ff00000

000090d8 <FlexCAN_SetTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    90d8:	b082      	sub	sp, #8
    90da:	9001      	str	r0, [sp, #4]
    90dc:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    (base->CTRL1) = ((base->CTRL1) & ~((FLEXCAN_CTRL1_PROPSEG_MASK | FLEXCAN_CTRL1_PSEG2_MASK |
    90de:	9b01      	ldr	r3, [sp, #4]
    90e0:	685a      	ldr	r2, [r3, #4]
    90e2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    90e6:	4013      	ands	r3, r2
    90e8:	9a01      	ldr	r2, [sp, #4]
    90ea:	6053      	str	r3, [r2, #4]
                                        FLEXCAN_CTRL1_PSEG1_MASK | FLEXCAN_CTRL1_PRESDIV_MASK
                                       ) | FLEXCAN_CTRL1_RJW_MASK
                                      )
                    );

    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    90ec:	9b01      	ldr	r3, [sp, #4]
    90ee:	685a      	ldr	r2, [r3, #4]
    90f0:	9b00      	ldr	r3, [sp, #0]
    90f2:	681b      	ldr	r3, [r3, #0]
    90f4:	f003 0107 	and.w	r1, r3, #7
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    90f8:	9b00      	ldr	r3, [sp, #0]
    90fa:	689b      	ldr	r3, [r3, #8]
    90fc:	041b      	lsls	r3, r3, #16
    90fe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    9102:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    9104:	9b00      	ldr	r3, [sp, #0]
    9106:	685b      	ldr	r3, [r3, #4]
    9108:	04db      	lsls	r3, r3, #19
    910a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    910e:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    9110:	9b00      	ldr	r3, [sp, #0]
    9112:	68db      	ldr	r3, [r3, #12]
    9114:	061b      	lsls	r3, r3, #24
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    9116:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_RJW(timeSeg->rJumpwidth)
    9118:	9b00      	ldr	r3, [sp, #0]
    911a:	691b      	ldr	r3, [r3, #16]
    911c:	059b      	lsls	r3, r3, #22
    911e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    9122:	430b      	orrs	r3, r1
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    9124:	431a      	orrs	r2, r3
    9126:	9b01      	ldr	r3, [sp, #4]
    9128:	605a      	str	r2, [r3, #4]
                                     )
                    );
}
    912a:	bf00      	nop
    912c:	b002      	add	sp, #8
    912e:	4770      	bx	lr

00009130 <FlexCAN_SetExtendedTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetExtendedTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    9130:	b082      	sub	sp, #8
    9132:	9001      	str	r0, [sp, #4]
    9134:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* If extended bit time definitions are enabled, use CBT register */
    (base->CBT) = ((base->CBT) & ~((FLEXCAN_CBT_EPROPSEG_MASK | FLEXCAN_CBT_EPSEG2_MASK |
    9136:	9b01      	ldr	r3, [sp, #4]
    9138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    913a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
    913e:	9b01      	ldr	r3, [sp, #4]
    9140:	651a      	str	r2, [r3, #80]	; 0x50
                                    FLEXCAN_CBT_EPSEG1_MASK | FLEXCAN_CBT_EPRESDIV_MASK
                                   ) | FLEXCAN_CBT_ERJW_MASK
                                  )
                  );

    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    9142:	9b01      	ldr	r3, [sp, #4]
    9144:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    9146:	9b00      	ldr	r3, [sp, #0]
    9148:	681b      	ldr	r3, [r3, #0]
    914a:	029b      	lsls	r3, r3, #10
    914c:	b299      	uxth	r1, r3
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    914e:	9b00      	ldr	r3, [sp, #0]
    9150:	689b      	ldr	r3, [r3, #8]
    9152:	f003 031f 	and.w	r3, r3, #31
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    9156:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    9158:	9b00      	ldr	r3, [sp, #0]
    915a:	685b      	ldr	r3, [r3, #4]
    915c:	015b      	lsls	r3, r3, #5
    915e:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    9162:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    9164:	9b00      	ldr	r3, [sp, #0]
    9166:	68db      	ldr	r3, [r3, #12]
    9168:	0558      	lsls	r0, r3, #21
    916a:	4b07      	ldr	r3, [pc, #28]	; (9188 <FlexCAN_SetExtendedTimeSegments+0x58>)
    916c:	4003      	ands	r3, r0
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    916e:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_ERJW(timeSeg->rJumpwidth)
    9170:	9b00      	ldr	r3, [sp, #0]
    9172:	691b      	ldr	r3, [r3, #16]
    9174:	041b      	lsls	r3, r3, #16
    9176:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    917a:	430b      	orrs	r3, r1
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    917c:	431a      	orrs	r2, r3
    917e:	9b01      	ldr	r3, [sp, #4]
    9180:	651a      	str	r2, [r3, #80]	; 0x50
                                 )
                  );
}
    9182:	bf00      	nop
    9184:	b002      	add	sp, #8
    9186:	4770      	bx	lr
    9188:	7fe00000 	.word	0x7fe00000

0000918c <FlexCAN_GetExtendedTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetExtendedTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    918c:	b082      	sub	sp, #8
    918e:	9001      	str	r0, [sp, #4]
    9190:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CBT) & FLEXCAN_CBT_EPRESDIV_MASK) >> FLEXCAN_CBT_EPRESDIV_SHIFT;
    9192:	9b01      	ldr	r3, [sp, #4]
    9194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    9196:	0d5b      	lsrs	r3, r3, #21
    9198:	f3c3 0209 	ubfx	r2, r3, #0, #10
    919c:	9b00      	ldr	r3, [sp, #0]
    919e:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CBT) & FLEXCAN_CBT_EPROPSEG_MASK) >> FLEXCAN_CBT_EPROPSEG_SHIFT;
    91a0:	9b01      	ldr	r3, [sp, #4]
    91a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    91a4:	0a9b      	lsrs	r3, r3, #10
    91a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    91aa:	9b00      	ldr	r3, [sp, #0]
    91ac:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CBT) & FLEXCAN_CBT_EPSEG1_MASK) >> FLEXCAN_CBT_EPSEG1_SHIFT;
    91ae:	9b01      	ldr	r3, [sp, #4]
    91b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    91b2:	095b      	lsrs	r3, r3, #5
    91b4:	f003 021f 	and.w	r2, r3, #31
    91b8:	9b00      	ldr	r3, [sp, #0]
    91ba:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CBT) & FLEXCAN_CBT_EPSEG2_MASK) >> FLEXCAN_CBT_EPSEG2_SHIFT;
    91bc:	9b01      	ldr	r3, [sp, #4]
    91be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    91c0:	f003 021f 	and.w	r2, r3, #31
    91c4:	9b00      	ldr	r3, [sp, #0]
    91c6:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CBT) & FLEXCAN_CBT_ERJW_MASK) >> FLEXCAN_CBT_ERJW_SHIFT;
    91c8:	9b01      	ldr	r3, [sp, #4]
    91ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    91cc:	0c1b      	lsrs	r3, r3, #16
    91ce:	f003 021f 	and.w	r2, r3, #31
    91d2:	9b00      	ldr	r3, [sp, #0]
    91d4:	611a      	str	r2, [r3, #16]
}
    91d6:	bf00      	nop
    91d8:	b002      	add	sp, #8
    91da:	4770      	bx	lr

000091dc <FlexCAN_GetTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    91dc:	b082      	sub	sp, #8
    91de:	9001      	str	r0, [sp, #4]
    91e0:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CTRL1) & FLEXCAN_CTRL1_PRESDIV_MASK) >> FLEXCAN_CTRL1_PRESDIV_SHIFT;
    91e2:	9b01      	ldr	r3, [sp, #4]
    91e4:	685b      	ldr	r3, [r3, #4]
    91e6:	0e1b      	lsrs	r3, r3, #24
    91e8:	b2da      	uxtb	r2, r3
    91ea:	9b00      	ldr	r3, [sp, #0]
    91ec:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CTRL1) & FLEXCAN_CTRL1_PROPSEG_MASK) >> FLEXCAN_CTRL1_PROPSEG_SHIFT;
    91ee:	9b01      	ldr	r3, [sp, #4]
    91f0:	685b      	ldr	r3, [r3, #4]
    91f2:	f003 0207 	and.w	r2, r3, #7
    91f6:	9b00      	ldr	r3, [sp, #0]
    91f8:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG1_MASK) >> FLEXCAN_CTRL1_PSEG1_SHIFT;
    91fa:	9b01      	ldr	r3, [sp, #4]
    91fc:	685b      	ldr	r3, [r3, #4]
    91fe:	0cdb      	lsrs	r3, r3, #19
    9200:	f003 0207 	and.w	r2, r3, #7
    9204:	9b00      	ldr	r3, [sp, #0]
    9206:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG2_MASK) >> FLEXCAN_CTRL1_PSEG2_SHIFT;
    9208:	9b01      	ldr	r3, [sp, #4]
    920a:	685b      	ldr	r3, [r3, #4]
    920c:	0c1b      	lsrs	r3, r3, #16
    920e:	f003 0207 	and.w	r2, r3, #7
    9212:	9b00      	ldr	r3, [sp, #0]
    9214:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CTRL1) & FLEXCAN_CTRL1_RJW_MASK) >> FLEXCAN_CTRL1_RJW_SHIFT;
    9216:	9b01      	ldr	r3, [sp, #4]
    9218:	685b      	ldr	r3, [r3, #4]
    921a:	0d9b      	lsrs	r3, r3, #22
    921c:	f003 0203 	and.w	r2, r3, #3
    9220:	9b00      	ldr	r3, [sp, #0]
    9222:	611a      	str	r2, [r3, #16]
}
    9224:	bf00      	nop
    9226:	b002      	add	sp, #8
    9228:	4770      	bx	lr

0000922a <FlexCAN_GetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetFDTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    922a:	b082      	sub	sp, #8
    922c:	9001      	str	r0, [sp, #4]
    922e:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->FDCBT) & FLEXCAN_FDCBT_FPRESDIV_MASK) >> FLEXCAN_FDCBT_FPRESDIV_SHIFT;
    9230:	9b01      	ldr	r3, [sp, #4]
    9232:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    9236:	0d1b      	lsrs	r3, r3, #20
    9238:	f3c3 0209 	ubfx	r2, r3, #0, #10
    923c:	9b00      	ldr	r3, [sp, #0]
    923e:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->FDCBT) & FLEXCAN_FDCBT_FPROPSEG_MASK) >> FLEXCAN_FDCBT_FPROPSEG_SHIFT;
    9240:	9b01      	ldr	r3, [sp, #4]
    9242:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    9246:	0a9b      	lsrs	r3, r3, #10
    9248:	f003 021f 	and.w	r2, r3, #31
    924c:	9b00      	ldr	r3, [sp, #0]
    924e:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG1_MASK) >> FLEXCAN_FDCBT_FPSEG1_SHIFT;
    9250:	9b01      	ldr	r3, [sp, #4]
    9252:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    9256:	095b      	lsrs	r3, r3, #5
    9258:	f003 0207 	and.w	r2, r3, #7
    925c:	9b00      	ldr	r3, [sp, #0]
    925e:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG2_MASK) >> FLEXCAN_FDCBT_FPSEG2_SHIFT;
    9260:	9b01      	ldr	r3, [sp, #4]
    9262:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    9266:	f003 0207 	and.w	r2, r3, #7
    926a:	9b00      	ldr	r3, [sp, #0]
    926c:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->FDCBT) & FLEXCAN_FDCBT_FRJW_MASK) >> FLEXCAN_FDCBT_FRJW_SHIFT;
    926e:	9b01      	ldr	r3, [sp, #4]
    9270:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    9274:	0c1b      	lsrs	r3, r3, #16
    9276:	f003 0207 	and.w	r2, r3, #7
    927a:	9b00      	ldr	r3, [sp, #0]
    927c:	611a      	str	r2, [r3, #16]
}
    927e:	bf00      	nop
    9280:	b002      	add	sp, #8
    9282:	4770      	bx	lr

00009284 <FlexCAN_IsExCbtEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsExCbtEnabled(const FLEXCAN_Type * pBase)
{
    9284:	b082      	sub	sp, #8
    9286:	9001      	str	r0, [sp, #4]
    return (0U == ((pBase->CBT & FLEXCAN_CBT_BTF_MASK) >> FLEXCAN_CBT_BTF_SHIFT)) ? FALSE : TRUE;
    9288:	9b01      	ldr	r3, [sp, #4]
    928a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    928c:	0fdb      	lsrs	r3, r3, #31
    928e:	b2db      	uxtb	r3, r3
}
    9290:	4618      	mov	r0, r3
    9292:	b002      	add	sp, #8
    9294:	4770      	bx	lr

00009296 <FlexCAN_EnableExtCbt>:
 *
 * @param   base    The FlexCAN base address
 * @param   enableCBT Enable/Disable use of Extent Time Segments
 */
static inline void FlexCAN_EnableExtCbt(FLEXCAN_Type * base, boolean enableCBT)
{   /* Enable the use of extended bit time definitions */
    9296:	b082      	sub	sp, #8
    9298:	9001      	str	r0, [sp, #4]
    929a:	460b      	mov	r3, r1
    929c:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CBT = (base->CBT & ~FLEXCAN_CBT_BTF_MASK) | FLEXCAN_CBT_BTF(enableCBT ? 1UL : 0UL);
    92a0:	9b01      	ldr	r3, [sp, #4]
    92a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    92a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    92a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    92ac:	2a00      	cmp	r2, #0
    92ae:	d002      	beq.n	92b6 <FlexCAN_EnableExtCbt+0x20>
    92b0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    92b4:	e000      	b.n	92b8 <FlexCAN_EnableExtCbt+0x22>
    92b6:	2200      	movs	r2, #0
    92b8:	431a      	orrs	r2, r3
    92ba:	9b01      	ldr	r3, [sp, #4]
    92bc:	651a      	str	r2, [r3, #80]	; 0x50
}
    92be:	bf00      	nop
    92c0:	b002      	add	sp, #8
    92c2:	4770      	bx	lr

000092c4 <FlexCAN_SetSelfReception>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Enable/Disable Self Reception
 */
static inline void FlexCAN_SetSelfReception(FLEXCAN_Type * base, boolean enable)
{
    92c4:	b082      	sub	sp, #8
    92c6:	9001      	str	r0, [sp, #4]
    92c8:	460b      	mov	r3, r1
    92ca:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    92ce:	9b01      	ldr	r3, [sp, #4]
    92d0:	681b      	ldr	r3, [r3, #0]
    92d2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    92d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    92da:	2a00      	cmp	r2, #0
    92dc:	d001      	beq.n	92e2 <FlexCAN_SetSelfReception+0x1e>
    92de:	2200      	movs	r2, #0
    92e0:	e001      	b.n	92e6 <FlexCAN_SetSelfReception+0x22>
    92e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    92e6:	431a      	orrs	r2, r3
    92e8:	9b01      	ldr	r3, [sp, #4]
    92ea:	601a      	str	r2, [r3, #0]
}
    92ec:	bf00      	nop
    92ee:	b002      	add	sp, #8
    92f0:	4770      	bx	lr

000092f2 <FlexCAN_IsFDEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsFDEnabled(const FLEXCAN_Type * base)
{
    92f2:	b082      	sub	sp, #8
    92f4:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    92f6:	9b01      	ldr	r3, [sp, #4]
    92f8:	681b      	ldr	r3, [r3, #0]
    92fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    92fe:	2b00      	cmp	r3, #0
    9300:	bf14      	ite	ne
    9302:	2301      	movne	r3, #1
    9304:	2300      	moveq	r3, #0
    9306:	b2db      	uxtb	r3, r3
}
    9308:	4618      	mov	r0, r3
    930a:	b002      	add	sp, #8
    930c:	4770      	bx	lr

0000930e <FlexCAN_IsListenOnlyModeEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsListenOnlyModeEnabled(const FLEXCAN_Type * base)
{
    930e:	b082      	sub	sp, #8
    9310:	9001      	str	r0, [sp, #4]
    return (((base->CTRL1 & (FLEXCAN_CTRL1_LOM_MASK)) != 0U) ? TRUE : FALSE);
    9312:	9b01      	ldr	r3, [sp, #4]
    9314:	685b      	ldr	r3, [r3, #4]
    9316:	f003 0308 	and.w	r3, r3, #8
    931a:	2b00      	cmp	r3, #0
    931c:	bf14      	ite	ne
    931e:	2301      	movne	r3, #1
    9320:	2300      	moveq	r3, #0
    9322:	b2db      	uxtb	r3, r3
}
    9324:	4618      	mov	r0, r3
    9326:	b002      	add	sp, #8
    9328:	4770      	bx	lr

0000932a <RxFifoOcuppiedLastMsgBuff>:
 *
 * @param   x    Number of Configured RxFIFO Filters
 * @return  number of last MB occupied by RxFIFO
 */
static inline uint32 RxFifoOcuppiedLastMsgBuff(uint8 x)
{
    932a:	b082      	sub	sp, #8
    932c:	4603      	mov	r3, r0
    932e:	f88d 3007 	strb.w	r3, [sp, #7]
    return 5U + (((((uint32)x) + 1U) * 8U) / 4U);
    9332:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9336:	3301      	adds	r3, #1
    9338:	00db      	lsls	r3, r3, #3
    933a:	089b      	lsrs	r3, r3, #2
    933c:	3305      	adds	r3, #5
}
    933e:	4618      	mov	r0, r3
    9340:	b002      	add	sp, #8
    9342:	4770      	bx	lr

00009344 <FlexCAN_SetClkSrc>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Specifies if The CAN engine clock source is the oscillator clock(FALSE) or peripheral clock(TRUE).
 */
static inline void FlexCAN_SetClkSrc(FLEXCAN_Type * base, boolean enable)
{
    9344:	b082      	sub	sp, #8
    9346:	9001      	str	r0, [sp, #4]
    9348:	460b      	mov	r3, r1
    934a:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_CLKSRC_MASK) | FLEXCAN_CTRL1_CLKSRC(enable ? 1UL : 0UL);
    934e:	9b01      	ldr	r3, [sp, #4]
    9350:	685b      	ldr	r3, [r3, #4]
    9352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    9356:	f89d 2003 	ldrb.w	r2, [sp, #3]
    935a:	2a00      	cmp	r2, #0
    935c:	d002      	beq.n	9364 <FlexCAN_SetClkSrc+0x20>
    935e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    9362:	e000      	b.n	9366 <FlexCAN_SetClkSrc+0x22>
    9364:	2200      	movs	r2, #0
    9366:	431a      	orrs	r2, r3
    9368:	9b01      	ldr	r3, [sp, #4]
    936a:	605a      	str	r2, [r3, #4]
}
    936c:	bf00      	nop
    936e:	b002      	add	sp, #8
    9370:	4770      	bx	lr

00009372 <FlexCAN_GetMsgBuffIntStatusFlag>:
 * @param   base  The FlexCAN base address
 * @param   msgBuffIdx       Index of the message buffer
 * @return  the individual Message Buffer interrupt flag (0 and 1 are the flag value)
 */
static inline uint8 FlexCAN_GetMsgBuffIntStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    9372:	b084      	sub	sp, #16
    9374:	9001      	str	r0, [sp, #4]
    9376:	9100      	str	r1, [sp, #0]
    /* TODO: This need to be protected multithread access*/
    uint8 flag = 0;
    9378:	2300      	movs	r3, #0
    937a:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 mask;

    if (msgBuffIdx < 32U)
    937e:	9b00      	ldr	r3, [sp, #0]
    9380:	2b1f      	cmp	r3, #31
    9382:	d810      	bhi.n	93a6 <FlexCAN_GetMsgBuffIntStatusFlag+0x34>
    {
        mask = base->IMASK1 & FLEXCAN_IMASK1_BUF31TO0M_MASK;
    9384:	9b01      	ldr	r3, [sp, #4]
    9386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9388:	9302      	str	r3, [sp, #8]
        flag = (uint8)(((base->IFLAG1 & mask) >> (msgBuffIdx % 32U)) & 1U);
    938a:	9b01      	ldr	r3, [sp, #4]
    938c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    938e:	9b02      	ldr	r3, [sp, #8]
    9390:	401a      	ands	r2, r3
    9392:	9b00      	ldr	r3, [sp, #0]
    9394:	f003 031f 	and.w	r3, r3, #31
    9398:	fa22 f303 	lsr.w	r3, r2, r3
    939c:	b2db      	uxtb	r3, r3
    939e:	f003 0301 	and.w	r3, r3, #1
    93a2:	f88d 300f 	strb.w	r3, [sp, #15]
        mask = base->IMASK4 & FLEXCAN_IMASK4_BUF127TO96M_MASK;
        flag = (uint8)(((base->IFLAG4 & mask) >> (msgBuffIdx % 32U)) & 1U);
    }
#endif

    return flag;
    93a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    93aa:	4618      	mov	r0, r3
    93ac:	b004      	add	sp, #16
    93ae:	4770      	bx	lr

000093b0 <FlexCAN_SetRxMsgBuffGlobalMask>:
 *
 * @param   base  The FlexCAN base address
 * @param   Mask  Mask Value
 */
static inline void FlexCAN_SetRxMsgBuffGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    93b0:	b082      	sub	sp, #8
    93b2:	9001      	str	r0, [sp, #4]
    93b4:	9100      	str	r1, [sp, #0]
    (base->RXMGMASK) = Mask;
    93b6:	9b01      	ldr	r3, [sp, #4]
    93b8:	9a00      	ldr	r2, [sp, #0]
    93ba:	611a      	str	r2, [r3, #16]
}
    93bc:	bf00      	nop
    93be:	b002      	add	sp, #8
    93c0:	4770      	bx	lr

000093c2 <FlexCAN_SetRxIndividualMask>:
 */
static inline void FlexCAN_SetRxIndividualMask(FLEXCAN_Type * base,
                                               uint32 msgBuffIdx,
                                               uint32 mask
                                              )
{
    93c2:	b084      	sub	sp, #16
    93c4:	9003      	str	r0, [sp, #12]
    93c6:	9102      	str	r1, [sp, #8]
    93c8:	9201      	str	r2, [sp, #4]
    base->RXIMR[msgBuffIdx] = mask;
    93ca:	9b03      	ldr	r3, [sp, #12]
    93cc:	9a02      	ldr	r2, [sp, #8]
    93ce:	f502 7208 	add.w	r2, r2, #544	; 0x220
    93d2:	9901      	ldr	r1, [sp, #4]
    93d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    93d8:	bf00      	nop
    93da:	b004      	add	sp, #16
    93dc:	4770      	bx	lr

000093de <FlexCAN_SetTxArbitrationStartDelay>:
 *
 * @param   base  The FlexCAN base address
 * @param   tasd  The Tx arbitration start delay value
 */
static inline void FlexCAN_SetTxArbitrationStartDelay(FLEXCAN_Type * base, uint8 tasd)
{
    93de:	b082      	sub	sp, #8
    93e0:	9001      	str	r0, [sp, #4]
    93e2:	460b      	mov	r3, r1
    93e4:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_TASD_MASK) | FLEXCAN_CTRL2_TASD(tasd);
    93e8:	9b01      	ldr	r3, [sp, #4]
    93ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    93ec:	f423 0278 	bic.w	r2, r3, #16252928	; 0xf80000
    93f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    93f4:	04db      	lsls	r3, r3, #19
    93f6:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
    93fa:	431a      	orrs	r2, r3
    93fc:	9b01      	ldr	r3, [sp, #4]
    93fe:	635a      	str	r2, [r3, #52]	; 0x34
}
    9400:	bf00      	nop
    9402:	b002      	add	sp, #8
    9404:	4770      	bx	lr

00009406 <FlexCAN_SetRxMaskType>:
 *
 * @param   base  The FlexCAN base address
 * @param   type         The FlexCAN Rx mask type
 */
static inline void FlexCAN_SetRxMaskType(FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
    9406:	b082      	sub	sp, #8
    9408:	9001      	str	r0, [sp, #4]
    940a:	9100      	str	r1, [sp, #0]
    /* Set RX masking type (RX global mask or RX individual mask)*/
    if (FLEXCAN_RX_MASK_GLOBAL == type)
    940c:	9b00      	ldr	r3, [sp, #0]
    940e:	2b00      	cmp	r3, #0
    9410:	d106      	bne.n	9420 <FlexCAN_SetRxMaskType+0x1a>
    {
        /* Enable Global RX masking */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(0U);
    9412:	9b01      	ldr	r3, [sp, #4]
    9414:	681b      	ldr	r3, [r3, #0]
    9416:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    941a:	9b01      	ldr	r3, [sp, #4]
    941c:	601a      	str	r2, [r3, #0]
    else
    {
        /* Enable Individual Rx Masking and Queue */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    }
}
    941e:	e005      	b.n	942c <FlexCAN_SetRxMaskType+0x26>
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    9420:	9b01      	ldr	r3, [sp, #4]
    9422:	681b      	ldr	r3, [r3, #0]
    9424:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    9428:	9b01      	ldr	r3, [sp, #4]
    942a:	601a      	str	r2, [r3, #0]
}
    942c:	bf00      	nop
    942e:	b002      	add	sp, #8
    9430:	4770      	bx	lr

00009432 <FlexCAN_SetRegDefaultVal>:
 * @brief Will set Flexcan Peripheral Register to default val.
 *
 * @param   base    The FlexCAN base address
 */
static inline void FlexCAN_SetRegDefaultVal(FLEXCAN_Type * base)
{
    9432:	b500      	push	{lr}
    9434:	b083      	sub	sp, #12
    9436:	9001      	str	r0, [sp, #4]
        base->ERFCR = FLEXCAN_IP_ERFCR_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    9438:	9801      	ldr	r0, [sp, #4]
    943a:	f002 ff85 	bl	c348 <FlexCAN_IsFDAvailable>
    943e:	4603      	mov	r3, r0
    9440:	2b00      	cmp	r3, #0
    9442:	d007      	beq.n	9454 <FlexCAN_SetRegDefaultVal+0x22>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    9444:	9b01      	ldr	r3, [sp, #4]
    9446:	2200      	movs	r2, #0
    9448:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    944c:	9b01      	ldr	r3, [sp, #4]
    944e:	4a12      	ldr	r2, [pc, #72]	; (9498 <FlexCAN_SetRegDefaultVal+0x66>)
    9450:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    {
        base->IFLAG2 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
        base->IMASK2 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */
    base->IFLAG1 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
    9454:	9b01      	ldr	r3, [sp, #4]
    9456:	f04f 32ff 	mov.w	r2, #4294967295
    945a:	631a      	str	r2, [r3, #48]	; 0x30
    base->IMASK1 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    945c:	9b01      	ldr	r3, [sp, #4]
    945e:	2200      	movs	r2, #0
    9460:	629a      	str	r2, [r3, #40]	; 0x28
    base->CBT = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    9462:	9b01      	ldr	r3, [sp, #4]
    9464:	2200      	movs	r2, #0
    9466:	651a      	str	r2, [r3, #80]	; 0x50
    base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    9468:	9b01      	ldr	r3, [sp, #4]
    946a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    946e:	635a      	str	r2, [r3, #52]	; 0x34
    base->ESR1 = FLEXCAN_IP_ESR1_DEFAULT_VALUE_U32;
    9470:	9b01      	ldr	r3, [sp, #4]
    9472:	4a0a      	ldr	r2, [pc, #40]	; (949c <FlexCAN_SetRegDefaultVal+0x6a>)
    9474:	621a      	str	r2, [r3, #32]
    base->ECR = FLEXCAN_IP_ECR_DEFAULT_VALUE_U32;
    9476:	9b01      	ldr	r3, [sp, #4]
    9478:	2200      	movs	r2, #0
    947a:	61da      	str	r2, [r3, #28]
    base->TIMER = FLEXCAN_IP_TIMER_DEFAULT_VALUE_U32;
    947c:	9b01      	ldr	r3, [sp, #4]
    947e:	2200      	movs	r2, #0
    9480:	609a      	str	r2, [r3, #8]
    base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    9482:	9b01      	ldr	r3, [sp, #4]
    9484:	2200      	movs	r2, #0
    9486:	605a      	str	r2, [r3, #4]
    base->EPRS  = FLEXCAN_IP_EPRS_DEFAULT_VALUE_U32;
    base->ENCBT = FLEXCAN_IP_ENCBT_DEFAULT_VALUE_U32;
    base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
    base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
    base->MCR = FLEXCAN_IP_MCR_DEFAULT_VALUE_U32;
    9488:	9b01      	ldr	r3, [sp, #4]
    948a:	4a05      	ldr	r2, [pc, #20]	; (94a0 <FlexCAN_SetRegDefaultVal+0x6e>)
    948c:	601a      	str	r2, [r3, #0]
}
    948e:	bf00      	nop
    9490:	b003      	add	sp, #12
    9492:	f85d fb04 	ldr.w	pc, [sp], #4
    9496:	bf00      	nop
    9498:	80004100 	.word	0x80004100
    949c:	0003b006 	.word	0x0003b006
    94a0:	d890000f 	.word	0xd890000f

000094a4 <FlexCAN_InitRxFifo>:
 * Description   : Initialize fifo and dma if requested.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitRxFifo(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    94a4:	b500      	push	{lr}
    94a6:	b085      	sub	sp, #20
    94a8:	9001      	str	r0, [sp, #4]
    94aa:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    94ac:	2300      	movs	r3, #0
    94ae:	9303      	str	r3, [sp, #12]

    /* Enable RxFIFO feature, if requested. This might fail if the FD mode is enabled. */
    if (Flexcan_Ip_pData->is_rx_fifo_needed)
    94b0:	9b00      	ldr	r3, [sp, #0]
    94b2:	7a1b      	ldrb	r3, [r3, #8]
    94b4:	2b00      	cmp	r3, #0
    94b6:	d006      	beq.n	94c6 <FlexCAN_InitRxFifo+0x22>
    {
        eResult = FlexCAN_EnableRxFifo(pBase, (uint32)Flexcan_Ip_pData->num_id_filters);
    94b8:	9b00      	ldr	r3, [sp, #0]
    94ba:	685b      	ldr	r3, [r3, #4]
    94bc:	4619      	mov	r1, r3
    94be:	9801      	ldr	r0, [sp, #4]
    94c0:	f002 fefe 	bl	c2c0 <FlexCAN_EnableRxFifo>
    94c4:	9003      	str	r0, [sp, #12]
        FlexCAN_SetRxFifoDMA(pBase, FALSE);
    }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    return eResult;
    94c6:	9b03      	ldr	r3, [sp, #12]
}
    94c8:	4618      	mov	r0, r3
    94ca:	b005      	add	sp, #20
    94cc:	f85d fb04 	ldr.w	pc, [sp], #4

000094d0 <FlexCAN_InitCtroll>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitCtroll(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    94d0:	b500      	push	{lr}
    94d2:	b085      	sub	sp, #20
    94d4:	9001      	str	r0, [sp, #4]
    94d6:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    94d8:	2300      	movs	r3, #0
    94da:	9303      	str	r3, [sp, #12]
    /* Disable the self reception feature if FlexCAN is not in loopback mode. */
    if (Flexcan_Ip_pData->flexcanMode != FLEXCAN_LOOPBACK_MODE)
    94dc:	9b00      	ldr	r3, [sp, #0]
    94de:	68db      	ldr	r3, [r3, #12]
    94e0:	2b02      	cmp	r3, #2
    94e2:	d003      	beq.n	94ec <FlexCAN_InitCtroll+0x1c>
    {
        FlexCAN_SetSelfReception(pBase, FALSE);
    94e4:	2100      	movs	r1, #0
    94e6:	9801      	ldr	r0, [sp, #4]
    94e8:	f7ff feec 	bl	92c4 <FlexCAN_SetSelfReception>
    }

    /* Init legacy fifo, enhanced fifo if requested. */
    eResult = FlexCAN_InitRxFifo(pBase, Flexcan_Ip_pData);
    94ec:	9900      	ldr	r1, [sp, #0]
    94ee:	9801      	ldr	r0, [sp, #4]
    94f0:	f7ff ffd8 	bl	94a4 <FlexCAN_InitRxFifo>
    94f4:	9003      	str	r0, [sp, #12]
    if (eResult != FLEXCAN_STATUS_SUCCESS)
    94f6:	9b03      	ldr	r3, [sp, #12]
    94f8:	2b00      	cmp	r3, #0
    94fa:	d006      	beq.n	950a <FlexCAN_InitCtroll+0x3a>
    {
        /* To enter Disable Mode requires FreezMode first */
        (void)FlexCAN_EnterFreezeMode(pBase);
    94fc:	9801      	ldr	r0, [sp, #4]
    94fe:	f002 fd03 	bl	bf08 <FlexCAN_EnterFreezeMode>
        (void)FlexCAN_Disable(pBase);
    9502:	9801      	ldr	r0, [sp, #4]
    9504:	f002 fdca 	bl	c09c <FlexCAN_Disable>
    9508:	e00b      	b.n	9522 <FlexCAN_InitCtroll+0x52>
    }
    else
    {
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set payload size. */
        FlexCAN_SetPayloadSize(pBase, &Flexcan_Ip_pData->payload);
    950a:	9b00      	ldr	r3, [sp, #0]
    950c:	3314      	adds	r3, #20
    950e:	4619      	mov	r1, r3
    9510:	9801      	ldr	r0, [sp, #4]
    9512:	f002 ff3b 	bl	c38c <FlexCAN_SetPayloadSize>
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
            (void)FlexCAN_Disable(pBase);
        }
    #else
        (void)FlexCAN_SetMaxMsgBuffNum(pBase, Flexcan_Ip_pData->max_num_mb);
    9516:	9b00      	ldr	r3, [sp, #0]
    9518:	681b      	ldr	r3, [r3, #0]
    951a:	4619      	mov	r1, r3
    951c:	9801      	ldr	r0, [sp, #4]
    951e:	f003 fab7 	bl	ca90 <FlexCAN_SetMaxMsgBuffNum>
    #endif /* FLEXCAN_IP_DEV_ERROR_DETECT */
    }
    return eResult;
    9522:	9b03      	ldr	r3, [sp, #12]
}
    9524:	4618      	mov	r0, r3
    9526:	b005      	add	sp, #20
    9528:	f85d fb04 	ldr.w	pc, [sp], #4

0000952c <FlexCAN_InitController>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitController(uint8 Instance, FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    952c:	b500      	push	{lr}
    952e:	b087      	sub	sp, #28
    9530:	4603      	mov	r3, r0
    9532:	9102      	str	r1, [sp, #8]
    9534:	9201      	str	r2, [sp, #4]
    9536:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    953a:	2300      	movs	r3, #0
    953c:	9305      	str	r3, [sp, #20]

    if (FlexCAN_IsEnabled(pBase))
    953e:	9802      	ldr	r0, [sp, #8]
    9540:	f7ff fd0c 	bl	8f5c <FlexCAN_IsEnabled>
    9544:	4603      	mov	r3, r0
    9546:	2b00      	cmp	r3, #0
    9548:	d00a      	beq.n	9560 <FlexCAN_InitController+0x34>
    {
        /* To enter Disable Mode requires FreezMode first */
        eResult = FlexCAN_EnterFreezeMode(pBase);
    954a:	9802      	ldr	r0, [sp, #8]
    954c:	f002 fcdc 	bl	bf08 <FlexCAN_EnterFreezeMode>
    9550:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == eResult)
    9552:	9b05      	ldr	r3, [sp, #20]
    9554:	2b00      	cmp	r3, #0
    9556:	d103      	bne.n	9560 <FlexCAN_InitController+0x34>
        {
            eResult = FlexCAN_Disable(pBase);
    9558:	9802      	ldr	r0, [sp, #8]
    955a:	f002 fd9f 	bl	c09c <FlexCAN_Disable>
    955e:	9005      	str	r0, [sp, #20]
        }
    }

    if (FLEXCAN_STATUS_SUCCESS == eResult)
    9560:	9b05      	ldr	r3, [sp, #20]
    9562:	2b00      	cmp	r3, #0
    9564:	d137      	bne.n	95d6 <FlexCAN_InitController+0xaa>
    {
    #if (FLEXCAN_IP_FEATURE_HAS_PE_CLKSRC_SELECT == STD_ON)
        /* Select a source clock for the FlexCAN engine */
        FlexCAN_SetClkSrc(pBase, Flexcan_Ip_pData->is_pe_clock);
    9566:	9b01      	ldr	r3, [sp, #4]
    9568:	7e5b      	ldrb	r3, [r3, #25]
    956a:	4619      	mov	r1, r3
    956c:	9802      	ldr	r0, [sp, #8]
    956e:	f7ff fee9 	bl	9344 <FlexCAN_SetClkSrc>
    #endif
        /* Enable FlexCAN Module need to perform SoftReset & ClearRam */
        pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    9572:	9b02      	ldr	r3, [sp, #8]
    9574:	681b      	ldr	r3, [r3, #0]
    9576:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    957a:	9b02      	ldr	r3, [sp, #8]
    957c:	601a      	str	r2, [r3, #0]
        /* Initialize FLEXCAN device */
        eResult = FlexCAN_Init(pBase);
    957e:	9802      	ldr	r0, [sp, #8]
    9580:	f002 fe28 	bl	c1d4 <FlexCAN_Init>
    9584:	9005      	str	r0, [sp, #20]
        if (eResult != FLEXCAN_STATUS_SUCCESS)
    9586:	9b05      	ldr	r3, [sp, #20]
    9588:	2b00      	cmp	r3, #0
    958a:	d006      	beq.n	959a <FlexCAN_InitController+0x6e>
        {
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
    958c:	9802      	ldr	r0, [sp, #8]
    958e:	f002 fcbb 	bl	bf08 <FlexCAN_EnterFreezeMode>
            (void)FlexCAN_Disable(pBase);
    9592:	9802      	ldr	r0, [sp, #8]
    9594:	f002 fd82 	bl	c09c <FlexCAN_Disable>
    9598:	e01d      	b.n	95d6 <FlexCAN_InitController+0xaa>
            /* Disable the Protection again because is enabled by soft reset */
            FlexCAN_DisableMemErrorDetection(pBase);
        #endif

        #if defined(CAN_FEATURE_S32K1XX)
            if (TRUE == FlexCAN_IsFDAvailable(pBase))
    959a:	9802      	ldr	r0, [sp, #8]
    959c:	f002 fed4 	bl	c348 <FlexCAN_IsFDAvailable>
    95a0:	4603      	mov	r3, r0
    95a2:	2b00      	cmp	r3, #0
    95a4:	d007      	beq.n	95b6 <FlexCAN_InitController+0x8a>
            {
        #endif /* defined(CAN_FEATURE_S32K1XX) */
                /* Enable/Disable FD and check FD was set as expected. Setting FD as enabled
                 * might fail if the current CAN instance does not support FD. */
                FlexCAN_SetFDEnabled(pBase, Flexcan_Ip_pData->fd_enable, Flexcan_Ip_pData->bitRateSwitch);
    95a6:	9b01      	ldr	r3, [sp, #4]
    95a8:	7e19      	ldrb	r1, [r3, #24]
    95aa:	9b01      	ldr	r3, [sp, #4]
    95ac:	7edb      	ldrb	r3, [r3, #27]
    95ae:	461a      	mov	r2, r3
    95b0:	9802      	ldr	r0, [sp, #8]
    95b2:	f7ff fcdd 	bl	8f70 <FlexCAN_SetFDEnabled>
                }*/
        #if defined(CAN_FEATURE_S32K1XX)
            }
        #endif /* defined(CAN_FEATURE_S32K1XX) */
            /* configure depends on controller options. */
            FlexCAN_ConfigCtrlOptions(pBase, Flexcan_Ip_pData->ctrlOptions);
    95b6:	9b01      	ldr	r3, [sp, #4]
    95b8:	691b      	ldr	r3, [r3, #16]
    95ba:	4619      	mov	r1, r3
    95bc:	9802      	ldr	r0, [sp, #8]
    95be:	f003 fdeb 	bl	d198 <FlexCAN_ConfigCtrlOptions>
            /* reset Imask buffers */
            FlexCAN_ResetImaskBuff(Instance);
    95c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    95c6:	4618      	mov	r0, r3
    95c8:	f003 fe56 	bl	d278 <FlexCAN_ResetImaskBuff>
            eResult = FlexCAN_InitCtroll(pBase, Flexcan_Ip_pData);
    95cc:	9901      	ldr	r1, [sp, #4]
    95ce:	9802      	ldr	r0, [sp, #8]
    95d0:	f7ff ff7e 	bl	94d0 <FlexCAN_InitCtroll>
    95d4:	9005      	str	r0, [sp, #20]
        }
    }
    return eResult;
    95d6:	9b05      	ldr	r3, [sp, #20]
}
    95d8:	4618      	mov	r0, r3
    95da:	b007      	add	sp, #28
    95dc:	f85d fb04 	ldr.w	pc, [sp], #4

000095e0 <FlexCAN_InitBaudrate>:
 * Description   : Init baudrate for given controller.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_InitBaudrate(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    95e0:	b500      	push	{lr}
    95e2:	b083      	sub	sp, #12
    95e4:	9001      	str	r0, [sp, #4]
    95e6:	9100      	str	r1, [sp, #0]
    /* Enable the use of extended bit time definitions */
    FlexCAN_EnableExtCbt(pBase, Flexcan_Ip_pData->fd_enable);
    95e8:	9b00      	ldr	r3, [sp, #0]
    95ea:	7e1b      	ldrb	r3, [r3, #24]
    95ec:	4619      	mov	r1, r3
    95ee:	9801      	ldr	r0, [sp, #4]
    95f0:	f7ff fe51 	bl	9296 <FlexCAN_EnableExtCbt>
        /* Disable Enhanced CBT time segments */
        pBase->CTRL2 &= ~FLEXCAN_CTRL2_BTE_MASK;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set bit rate. */
        if (Flexcan_Ip_pData->fd_enable)
    95f4:	9b00      	ldr	r3, [sp, #0]
    95f6:	7e1b      	ldrb	r3, [r3, #24]
    95f8:	2b00      	cmp	r3, #0
    95fa:	d00c      	beq.n	9616 <FlexCAN_InitBaudrate+0x36>
        {
            /* Write Normal bit time configuration to CBT register */
            FlexCAN_SetExtendedTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    95fc:	9b00      	ldr	r3, [sp, #0]
    95fe:	331c      	adds	r3, #28
    9600:	4619      	mov	r1, r3
    9602:	9801      	ldr	r0, [sp, #4]
    9604:	f7ff fd94 	bl	9130 <FlexCAN_SetExtendedTimeSegments>
            /* Write Data bit time configuration to FDCBT register */
            FlexCAN_SetFDTimeSegments(pBase, &Flexcan_Ip_pData->bitrate_cbt);
    9608:	9b00      	ldr	r3, [sp, #0]
    960a:	3330      	adds	r3, #48	; 0x30
    960c:	4619      	mov	r1, r3
    960e:	9801      	ldr	r0, [sp, #4]
    9610:	f7ff fd2d 	bl	906e <FlexCAN_SetFDTimeSegments>
            /* Write Normal bit time configuration to CTRL1 register */
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
        }
#endif
    }
}
    9614:	e005      	b.n	9622 <FlexCAN_InitBaudrate+0x42>
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    9616:	9b00      	ldr	r3, [sp, #0]
    9618:	331c      	adds	r3, #28
    961a:	4619      	mov	r1, r3
    961c:	9801      	ldr	r0, [sp, #4]
    961e:	f7ff fd5b 	bl	90d8 <FlexCAN_SetTimeSegments>
}
    9622:	bf00      	nop
    9624:	b003      	add	sp, #12
    9626:	f85d fb04 	ldr.w	pc, [sp], #4

0000962a <FlexCAN_ProccessLegacyRxFIFO>:
 * Description   : This function will process the enhanced RxFIFO in blocking mode.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_ProccessLegacyRxFIFO(uint8 u8Instance, uint32 u32TimeoutMs)
{
    962a:	b500      	push	{lr}
    962c:	b08d      	sub	sp, #52	; 0x34
    962e:	4603      	mov	r3, r0
    9630:	9102      	str	r1, [sp, #8]
    9632:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    9636:	2300      	movs	r3, #0
    9638:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    963a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    963e:	4a46      	ldr	r2, [pc, #280]	; (9758 <FlexCAN_ProccessLegacyRxFIFO+0x12e>)
    9640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9644:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9646:	f89d 300f 	ldrb.w	r3, [sp, #15]
    964a:	4a44      	ldr	r2, [pc, #272]	; (975c <FlexCAN_ProccessLegacyRxFIFO+0x132>)
    964c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9650:	9307      	str	r3, [sp, #28]
    uint32 timeStart = 0U;
    9652:	2300      	movs	r3, #0
    9654:	9305      	str	r3, [sp, #20]
    uint32 timeElapsed = 0U;
    9656:	2300      	movs	r3, #0
    9658:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    965a:	9b02      	ldr	r3, [sp, #8]
    965c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9660:	fb02 f303 	mul.w	r3, r2, r3
    9664:	2100      	movs	r1, #0
    9666:	4618      	mov	r0, r3
    9668:	f7f8 fdec 	bl	2244 <OsIf_MicrosToTicks>
    966c:	9006      	str	r0, [sp, #24]
    uint32 u32intType = 0U;
    966e:	2300      	movs	r3, #0
    9670:	9309      	str	r3, [sp, #36]	; 0x24

        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9672:	2000      	movs	r0, #0
    9674:	f7f8 fd9a 	bl	21ac <OsIf_GetCounter>
    9678:	4603      	mov	r3, r0
    967a:	9305      	str	r3, [sp, #20]

        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    967c:	e02a      	b.n	96d4 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
        {
            if (FLEXCAN_RXFIFO_USING_POLLING == pState->transferType)
    967e:	9b08      	ldr	r3, [sp, #32]
    9680:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    9684:	2b01      	cmp	r3, #1
    9686:	d115      	bne.n	96b4 <FlexCAN_ProccessLegacyRxFIFO+0x8a>
            {
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    9688:	2307      	movs	r3, #7
    968a:	9309      	str	r3, [sp, #36]	; 0x24
    968c:	e00f      	b.n	96ae <FlexCAN_ProccessLegacyRxFIFO+0x84>
                     u32intType >= FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE; \
                     u32intType--)
                {
                    if (FlexCAN_GetBuffStatusFlag(pBase, u32intType) != 0U)
    968e:	9909      	ldr	r1, [sp, #36]	; 0x24
    9690:	9807      	ldr	r0, [sp, #28]
    9692:	f7ff fcd0 	bl	9036 <FlexCAN_GetBuffStatusFlag>
    9696:	4603      	mov	r3, r0
    9698:	2b00      	cmp	r3, #0
    969a:	d005      	beq.n	96a8 <FlexCAN_ProccessLegacyRxFIFO+0x7e>
                    {
                        FlexCAN_IRQHandlerRxFIFO(u8Instance, u32intType);
    969c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    96a0:	9909      	ldr	r1, [sp, #36]	; 0x24
    96a2:	4618      	mov	r0, r3
    96a4:	f000 fb06 	bl	9cb4 <FlexCAN_IRQHandlerRxFIFO>
                     u32intType--)
    96a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    96aa:	3b01      	subs	r3, #1
    96ac:	9309      	str	r3, [sp, #36]	; 0x24
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    96ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    96b0:	2b04      	cmp	r3, #4
    96b2:	d8ec      	bhi.n	968e <FlexCAN_ProccessLegacyRxFIFO+0x64>
                    }
                }
            }

            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    96b4:	ab05      	add	r3, sp, #20
    96b6:	2100      	movs	r1, #0
    96b8:	4618      	mov	r0, r3
    96ba:	f7f8 fd90 	bl	21de <OsIf_GetElapsed>
    96be:	4602      	mov	r2, r0
    96c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    96c2:	4413      	add	r3, r2
    96c4:	930a      	str	r3, [sp, #40]	; 0x28
            if (timeElapsed >= mS2Ticks)
    96c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    96c8:	9b06      	ldr	r3, [sp, #24]
    96ca:	429a      	cmp	r2, r3
    96cc:	d302      	bcc.n	96d4 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
            {
                eResult = FLEXCAN_STATUS_TIMEOUT;
    96ce:	2303      	movs	r3, #3
    96d0:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    96d2:	e003      	b.n	96dc <FlexCAN_ProccessLegacyRxFIFO+0xb2>
        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    96d4:	9b08      	ldr	r3, [sp, #32]
    96d6:	685b      	ldr	r3, [r3, #4]
    96d8:	2b01      	cmp	r3, #1
    96da:	d0d0      	beq.n	967e <FlexCAN_ProccessLegacyRxFIFO+0x54>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == eResult) && (FLEXCAN_RXFIFO_USING_POLLING != pState->transferType))
    96dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    96de:	2b03      	cmp	r3, #3
    96e0:	d125      	bne.n	972e <FlexCAN_ProccessLegacyRxFIFO+0x104>
    96e2:	9b08      	ldr	r3, [sp, #32]
    96e4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    96e8:	2b01      	cmp	r3, #1
    96ea:	d020      	beq.n	972e <FlexCAN_ProccessLegacyRxFIFO+0x104>
        {
            /* Disable RX FIFO interrupts*/
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, pState->isIntActive);
    96ec:	9b08      	ldr	r3, [sp, #32]
    96ee:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    96f2:	f89d 100f 	ldrb.w	r1, [sp, #15]
    96f6:	9300      	str	r3, [sp, #0]
    96f8:	2300      	movs	r3, #0
    96fa:	2205      	movs	r2, #5
    96fc:	9807      	ldr	r0, [sp, #28]
    96fe:	f002 feef 	bl	c4e0 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, pState->isIntActive);
    9702:	9b08      	ldr	r3, [sp, #32]
    9704:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9708:	f89d 100f 	ldrb.w	r1, [sp, #15]
    970c:	9300      	str	r3, [sp, #0]
    970e:	2300      	movs	r3, #0
    9710:	2206      	movs	r2, #6
    9712:	9807      	ldr	r0, [sp, #28]
    9714:	f002 fee4 	bl	c4e0 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, pState->isIntActive);
    9718:	9b08      	ldr	r3, [sp, #32]
    971a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    971e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9722:	9300      	str	r3, [sp, #0]
    9724:	2300      	movs	r3, #0
    9726:	2207      	movs	r2, #7
    9728:	9807      	ldr	r0, [sp, #28]
    972a:	f002 fed9 	bl	c4e0 <FlexCAN_SetMsgBuffIntCmd>
                (void)Dma_Ip_SetLogicChannelCommand(pState->rxFifoDMAChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            }
#endif
        }

        switch (pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    972e:	9b08      	ldr	r3, [sp, #32]
    9730:	685b      	ldr	r3, [r3, #4]
    9732:	2b00      	cmp	r3, #0
    9734:	d005      	beq.n	9742 <FlexCAN_ProccessLegacyRxFIFO+0x118>
    9736:	2b01      	cmp	r3, #1
    9738:	d106      	bne.n	9748 <FlexCAN_ProccessLegacyRxFIFO+0x11e>
        {
            case FLEXCAN_MB_RX_BUSY:
                pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    973a:	9b08      	ldr	r3, [sp, #32]
    973c:	2200      	movs	r2, #0
    973e:	605a      	str	r2, [r3, #4]
                break;
    9740:	e005      	b.n	974e <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_IDLE:
                eResult = FLEXCAN_STATUS_SUCCESS;
    9742:	2300      	movs	r3, #0
    9744:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    9746:	e002      	b.n	974e <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_DMA_ERROR:
                eResult = FLEXCAN_STATUS_ERROR;
                break;
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
            default:
                eResult = FLEXCAN_STATUS_ERROR;
    9748:	2301      	movs	r3, #1
    974a:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    974c:	bf00      	nop
        }

    return eResult;
    974e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    9750:	4618      	mov	r0, r3
    9752:	b00d      	add	sp, #52	; 0x34
    9754:	f85d fb04 	ldr.w	pc, [sp], #4
    9758:	1fff8fc0 	.word	0x1fff8fc0
    975c:	00010488 	.word	0x00010488

00009760 <FlexCAN_StartRxMessageBufferData>:
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageBufferData(uint8 instance,
                                                              uint8 mb_idx,
                                                              Flexcan_Ip_MsgBuffType * data,
                                                              boolean isPolling
                                                             )
{
    9760:	b084      	sub	sp, #16
    9762:	9200      	str	r2, [sp, #0]
    9764:	461a      	mov	r2, r3
    9766:	4603      	mov	r3, r0
    9768:	f88d 3007 	strb.w	r3, [sp, #7]
    976c:	460b      	mov	r3, r1
    976e:	f88d 3006 	strb.w	r3, [sp, #6]
    9772:	4613      	mov	r3, r2
    9774:	f88d 3005 	strb.w	r3, [sp, #5]

    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9778:	2300      	movs	r3, #0
    977a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    977c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9780:	4a15      	ldr	r2, [pc, #84]	; (97d8 <FlexCAN_StartRxMessageBufferData+0x78>)
    9782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9786:	9302      	str	r3, [sp, #8]
    }
    else
    {
#endif
        /* Start receiving mailbox */
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    9788:	f89d 3006 	ldrb.w	r3, [sp, #6]
    978c:	9a02      	ldr	r2, [sp, #8]
    978e:	011b      	lsls	r3, r3, #4
    9790:	4413      	add	r3, r2
    9792:	3304      	adds	r3, #4
    9794:	681b      	ldr	r3, [r3, #0]
    9796:	2b00      	cmp	r3, #0
    9798:	d002      	beq.n	97a0 <FlexCAN_StartRxMessageBufferData+0x40>
        {
            result = FLEXCAN_STATUS_BUSY;
    979a:	2302      	movs	r3, #2
    979c:	9303      	str	r3, [sp, #12]
    979e:	e017      	b.n	97d0 <FlexCAN_StartRxMessageBufferData+0x70>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_RX_BUSY;
    97a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    97a4:	9a02      	ldr	r2, [sp, #8]
    97a6:	011b      	lsls	r3, r3, #4
    97a8:	4413      	add	r3, r2
    97aa:	3304      	adds	r3, #4
    97ac:	2201      	movs	r2, #1
    97ae:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].pMBmessage = data;
    97b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    97b4:	9a02      	ldr	r2, [sp, #8]
    97b6:	011b      	lsls	r3, r3, #4
    97b8:	4413      	add	r3, r2
    97ba:	9a00      	ldr	r2, [sp, #0]
    97bc:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = isPolling;
    97be:	f89d 3006 	ldrb.w	r3, [sp, #6]
    97c2:	9a02      	ldr	r2, [sp, #8]
    97c4:	011b      	lsls	r3, r3, #4
    97c6:	4413      	add	r3, r2
    97c8:	3308      	adds	r3, #8
    97ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
    97ce:	701a      	strb	r2, [r3, #0]
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    97d0:	9b03      	ldr	r3, [sp, #12]
}
    97d2:	4618      	mov	r0, r3
    97d4:	b004      	add	sp, #16
    97d6:	4770      	bx	lr
    97d8:	1fff8fc0 	.word	0x1fff8fc0

000097dc <FlexCAN_StartSendData>:
                                                   uint8 mb_idx,
                                                   const Flexcan_Ip_DataInfoType * tx_info,
                                                   uint32 msg_id,
                                                   const uint8 * mb_data
                                                  )
{
    97dc:	b500      	push	{lr}
    97de:	b08f      	sub	sp, #60	; 0x3c
    97e0:	9204      	str	r2, [sp, #16]
    97e2:	9303      	str	r3, [sp, #12]
    97e4:	4603      	mov	r3, r0
    97e6:	f88d 3017 	strb.w	r3, [sp, #23]
    97ea:	460b      	mov	r3, r1
    97ec:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    97f0:	2300      	movs	r3, #0
    97f2:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[Flexcan_Ip_u8Instance];
    97f4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    97f8:	4a38      	ldr	r2, [pc, #224]	; (98dc <FlexCAN_StartSendData+0x100>)
    97fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97fe:	930c      	str	r3, [sp, #48]	; 0x30
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    9800:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9804:	4a36      	ldr	r2, [pc, #216]	; (98e0 <FlexCAN_StartSendData+0x104>)
    9806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    980a:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    980c:	2300      	movs	r3, #0
    980e:	930a      	str	r3, [sp, #40]	; 0x28
        eResult = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
    else
    {
#endif
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    9810:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9814:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9816:	011b      	lsls	r3, r3, #4
    9818:	4413      	add	r3, r2
    981a:	3304      	adds	r3, #4
    981c:	681b      	ldr	r3, [r3, #0]
    981e:	2b00      	cmp	r3, #0
    9820:	d002      	beq.n	9828 <FlexCAN_StartSendData+0x4c>
        {
            eResult = FLEXCAN_STATUS_BUSY;
    9822:	2302      	movs	r3, #2
    9824:	930d      	str	r3, [sp, #52]	; 0x34
    9826:	e053      	b.n	98d0 <FlexCAN_StartSendData+0xf4>
        }
        else
        {
            /* Clear message buffer flag */
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9828:	f89d 3016 	ldrb.w	r3, [sp, #22]
    982c:	4619      	mov	r1, r3
    982e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9830:	f7ff fbee 	bl	9010 <FlexCAN_ClearMsgBuffIntStatusFlag>

            state->mbs[mb_idx].state = FLEXCAN_MB_TX_BUSY;
    9834:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9838:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    983a:	011b      	lsls	r3, r3, #4
    983c:	4413      	add	r3, r2
    983e:	3304      	adds	r3, #4
    9840:	2202      	movs	r2, #2
    9842:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].time_stamp = 0U;
    9844:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9848:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    984a:	011b      	lsls	r3, r3, #4
    984c:	4413      	add	r3, r2
    984e:	330c      	adds	r3, #12
    9850:	2200      	movs	r2, #0
    9852:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = tx_info->is_polling;
    9854:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9858:	9a04      	ldr	r2, [sp, #16]
    985a:	7b11      	ldrb	r1, [r2, #12]
    985c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    985e:	011b      	lsls	r3, r3, #4
    9860:	4413      	add	r3, r2
    9862:	3308      	adds	r3, #8
    9864:	460a      	mov	r2, r1
    9866:	701a      	strb	r2, [r3, #0]
            state->mbs[mb_idx].isRemote = tx_info->is_remote;
    9868:	f89d 3016 	ldrb.w	r3, [sp, #22]
    986c:	9a04      	ldr	r2, [sp, #16]
    986e:	7ad1      	ldrb	r1, [r2, #11]
    9870:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9872:	011b      	lsls	r3, r3, #4
    9874:	4413      	add	r3, r2
    9876:	3309      	adds	r3, #9
    9878:	460a      	mov	r2, r1
    987a:	701a      	strb	r2, [r3, #0]

            cs.dataLen = tx_info->data_length;
    987c:	9b04      	ldr	r3, [sp, #16]
    987e:	685b      	ldr	r3, [r3, #4]
    9880:	9308      	str	r3, [sp, #32]

            cs.msgIdType = tx_info->msg_id_type;
    9882:	9b04      	ldr	r3, [sp, #16]
    9884:	681b      	ldr	r3, [r3, #0]
    9886:	9307      	str	r3, [sp, #28]

        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            cs.fd_enable = tx_info->fd_enable;
    9888:	9b04      	ldr	r3, [sp, #16]
    988a:	7a1b      	ldrb	r3, [r3, #8]
    988c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            cs.fd_padding = tx_info->fd_padding;
    9890:	9b04      	ldr	r3, [sp, #16]
    9892:	7a5b      	ldrb	r3, [r3, #9]
    9894:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
            cs.enable_brs = tx_info->enable_brs;
    9898:	9b04      	ldr	r3, [sp, #16]
    989a:	7a9b      	ldrb	r3, [r3, #10]
    989c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        #endif

            if (tx_info->is_remote)
    98a0:	9b04      	ldr	r3, [sp, #16]
    98a2:	7adb      	ldrb	r3, [r3, #11]
    98a4:	2b00      	cmp	r3, #0
    98a6:	d002      	beq.n	98ae <FlexCAN_StartSendData+0xd2>
            {
                cs.code = (uint32)FLEXCAN_TX_REMOTE;
    98a8:	231c      	movs	r3, #28
    98aa:	9306      	str	r3, [sp, #24]
    98ac:	e001      	b.n	98b2 <FlexCAN_StartSendData+0xd6>
            }
            else
            {
                cs.code = (uint32)FLEXCAN_TX_DATA;
    98ae:	230c      	movs	r3, #12
    98b0:	9306      	str	r3, [sp, #24]
            }
            pMbAddr = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    98b2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    98b6:	4619      	mov	r1, r3
    98b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    98ba:	f002 fa89 	bl	bdd0 <FlexCAN_GetMsgBuffRegion>
    98be:	900a      	str	r0, [sp, #40]	; 0x28
            FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, FALSE);
    98c0:	a906      	add	r1, sp, #24
    98c2:	2300      	movs	r3, #0
    98c4:	9300      	str	r3, [sp, #0]
    98c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    98c8:	9a03      	ldr	r2, [sp, #12]
    98ca:	980a      	ldr	r0, [sp, #40]	; 0x28
    98cc:	f002 ffd2 	bl	c874 <FlexCAN_SetTxMsgBuff>
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    98d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    98d2:	4618      	mov	r0, r3
    98d4:	b00f      	add	sp, #60	; 0x3c
    98d6:	f85d fb04 	ldr.w	pc, [sp], #4
    98da:	bf00      	nop
    98dc:	1fff8fc0 	.word	0x1fff8fc0
    98e0:	00010488 	.word	0x00010488

000098e4 <FlexCAN_StartRxMessageFifoData>:
 * receiving data and enabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageFifoData(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    98e4:	b500      	push	{lr}
    98e6:	b089      	sub	sp, #36	; 0x24
    98e8:	4603      	mov	r3, r0
    98ea:	9102      	str	r1, [sp, #8]
    98ec:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = NULL_PTR;
    98f0:	2300      	movs	r3, #0
    98f2:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StateType * state = NULL_PTR;
    98f4:	2300      	movs	r3, #0
    98f6:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    98f8:	2300      	movs	r3, #0
    98fa:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base = Flexcan_Ip_apxBase[instance];
    98fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9900:	4a26      	ldr	r2, [pc, #152]	; (999c <FlexCAN_StartRxMessageFifoData+0xb8>)
    9902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9906:	9306      	str	r3, [sp, #24]
    state = Flexcan_Ip_apxState[instance];
    9908:	f89d 300f 	ldrb.w	r3, [sp, #15]
    990c:	4a24      	ldr	r2, [pc, #144]	; (99a0 <FlexCAN_StartRxMessageFifoData+0xbc>)
    990e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9912:	9305      	str	r3, [sp, #20]
    #endif
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    /* Start receiving fifo */
    if (state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state == FLEXCAN_MB_RX_BUSY)
    9914:	9b05      	ldr	r3, [sp, #20]
    9916:	685b      	ldr	r3, [r3, #4]
    9918:	2b01      	cmp	r3, #1
    991a:	d102      	bne.n	9922 <FlexCAN_StartRxMessageFifoData+0x3e>
    {
        eResult = FLEXCAN_STATUS_BUSY;
    991c:	2302      	movs	r3, #2
    991e:	9307      	str	r3, [sp, #28]
    9920:	e036      	b.n	9990 <FlexCAN_StartRxMessageFifoData+0xac>
    }
    else
    {
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_RX_BUSY;
    9922:	9b05      	ldr	r3, [sp, #20]
    9924:	2201      	movs	r2, #1
    9926:	605a      	str	r2, [r3, #4]
    if (FLEXCAN_RXFIFO_USING_POLLING == state->transferType)
    9928:	9b05      	ldr	r3, [sp, #20]
    992a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    992e:	2b01      	cmp	r3, #1
    9930:	d102      	bne.n	9938 <FlexCAN_StartRxMessageFifoData+0x54>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    9932:	9b05      	ldr	r3, [sp, #20]
    9934:	2201      	movs	r2, #1
    9936:	721a      	strb	r2, [r3, #8]
    }

    /* This will get filled by the interrupt handler */
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = data;
    9938:	9b05      	ldr	r3, [sp, #20]
    993a:	9a02      	ldr	r2, [sp, #8]
    993c:	601a      	str	r2, [r3, #0]

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    993e:	9b05      	ldr	r3, [sp, #20]
    9940:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    9944:	2b00      	cmp	r3, #0
    9946:	d123      	bne.n	9990 <FlexCAN_StartRxMessageFifoData+0xac>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = FALSE;
    9948:	9b05      	ldr	r3, [sp, #20]
    994a:	2200      	movs	r2, #0
    994c:	721a      	strb	r2, [r3, #8]
        /* Enable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, TRUE, state->isIntActive);
    994e:	9b05      	ldr	r3, [sp, #20]
    9950:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9954:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9958:	9300      	str	r3, [sp, #0]
    995a:	2301      	movs	r3, #1
    995c:	2206      	movs	r2, #6
    995e:	9806      	ldr	r0, [sp, #24]
    9960:	f002 fdbe 	bl	c4e0 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, TRUE, state->isIntActive);
    9964:	9b05      	ldr	r3, [sp, #20]
    9966:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    996a:	f89d 100f 	ldrb.w	r1, [sp, #15]
    996e:	9300      	str	r3, [sp, #0]
    9970:	2301      	movs	r3, #1
    9972:	2207      	movs	r2, #7
    9974:	9806      	ldr	r0, [sp, #24]
    9976:	f002 fdb3 	bl	c4e0 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, TRUE, state->isIntActive);
    997a:	9b05      	ldr	r3, [sp, #20]
    997c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9980:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9984:	9300      	str	r3, [sp, #0]
    9986:	2301      	movs	r3, #1
    9988:	2205      	movs	r2, #5
    998a:	9806      	ldr	r0, [sp, #24]
    998c:	f002 fda8 	bl	c4e0 <FlexCAN_SetMsgBuffIntCmd>
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    9990:	9b07      	ldr	r3, [sp, #28]
}
    9992:	4618      	mov	r0, r3
    9994:	b009      	add	sp, #36	; 0x24
    9996:	f85d fb04 	ldr.w	pc, [sp], #4
    999a:	bf00      	nop
    999c:	00010488 	.word	0x00010488
    99a0:	1fff8fc0 	.word	0x1fff8fc0

000099a4 <FlexCAN_IRQHandlerRxMB>:
 *
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerRxMB(uint8 instance, uint32 mb_idx)
{
    99a4:	b510      	push	{r4, lr}
    99a6:	b09e      	sub	sp, #120	; 0x78
    99a8:	4603      	mov	r3, r0
    99aa:	9102      	str	r1, [sp, #8]
    99ac:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    99b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    99b4:	4a70      	ldr	r2, [pc, #448]	; (9b78 <FlexCAN_IRQHandlerRxMB+0x1d4>)
    99b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99ba:	931c      	str	r3, [sp, #112]	; 0x70
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    99bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    99c0:	4a6e      	ldr	r2, [pc, #440]	; (9b7c <FlexCAN_IRQHandlerRxMB+0x1d8>)
    99c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99c6:	931b      	str	r3, [sp, #108]	; 0x6c
    Flexcan_Ip_MsgBuffType data;
    boolean bCurrentIntStat = FALSE;
    99c8:	2300      	movs	r3, #0
    99ca:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[mb_idx].pMBmessage  */
    if (NULL_PTR == state->mbs[mb_idx].pMBmessage)
    99ce:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    99d0:	9b02      	ldr	r3, [sp, #8]
    99d2:	011b      	lsls	r3, r3, #4
    99d4:	4413      	add	r3, r2
    99d6:	681b      	ldr	r3, [r3, #0]
    99d8:	2b00      	cmp	r3, #0
    99da:	d105      	bne.n	99e8 <FlexCAN_IRQHandlerRxMB+0x44>
    {
        state->mbs[mb_idx].pMBmessage = &data;
    99dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    99de:	9b02      	ldr	r3, [sp, #8]
    99e0:	011b      	lsls	r3, r3, #4
    99e2:	4413      	add	r3, r2
    99e4:	aa05      	add	r2, sp, #20
    99e6:	601a      	str	r2, [r3, #0]
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    boolean bIsCriticalSectionNeeded = FALSE;
    99e8:	2300      	movs	r3, #0
    99ea:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77

    /* Expectation: the sequence will not be interrupted when it already in interupt context */
    if (TRUE == state->mbs[mb_idx].isPolling)
    99ee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    99f0:	9b02      	ldr	r3, [sp, #8]
    99f2:	011b      	lsls	r3, r3, #4
    99f4:	4413      	add	r3, r2
    99f6:	3308      	adds	r3, #8
    99f8:	781b      	ldrb	r3, [r3, #0]
    99fa:	2b00      	cmp	r3, #0
    99fc:	d008      	beq.n	9a10 <FlexCAN_IRQHandlerRxMB+0x6c>
        if ((state->bIsLegacyFifoEn ||  state->bIsEnhancedFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #else
        if ((state->bIsLegacyFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    #elif defined (ERR_IPV_FLEXCAN_E050246)
        if (state->bIsLegacyFifoEn)
    99fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9a00:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    9a04:	2b00      	cmp	r3, #0
    9a06:	d003      	beq.n	9a10 <FlexCAN_IRQHandlerRxMB+0x6c>
    #endif
        {
            bIsCriticalSectionNeeded = TRUE;
    9a08:	2301      	movs	r3, #1
    9a0a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
            /* Disable all IRQs */
            OsIf_SuspendAllInterrupts();
    9a0e:	b672      	cpsid	i
        }
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    /* Lock RX message buffer and RX FIFO*/
    FlexCAN_LockRxMsgBuff(base, mb_idx);
    9a10:	9902      	ldr	r1, [sp, #8]
    9a12:	981c      	ldr	r0, [sp, #112]	; 0x70
    9a14:	f002 fd55 	bl	c4c2 <FlexCAN_LockRxMsgBuff>

    /* Get RX MB field values*/
    FlexCAN_GetMsgBuff(base, mb_idx, state->mbs[mb_idx].pMBmessage);
    9a18:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9a1a:	9b02      	ldr	r3, [sp, #8]
    9a1c:	011b      	lsls	r3, r3, #4
    9a1e:	4413      	add	r3, r2
    9a20:	681b      	ldr	r3, [r3, #0]
    9a22:	461a      	mov	r2, r3
    9a24:	9902      	ldr	r1, [sp, #8]
    9a26:	981c      	ldr	r0, [sp, #112]	; 0x70
    9a28:	f002 fe7a 	bl	c720 <FlexCAN_GetMsgBuff>

    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9a2c:	9902      	ldr	r1, [sp, #8]
    9a2e:	981c      	ldr	r0, [sp, #112]	; 0x70
    9a30:	f7ff faee 	bl	9010 <FlexCAN_ClearMsgBuffIntStatusFlag>

#if defined (ERR_IPV_FLEXCAN_E050246)
    /* the CODE field is updated with an incorrect value when MBx is locked by software for more than 20 CAN bit times and FIFO enable.
    When the CODE field is corrupted, it's probably updated with any value that is invalid. Except EMPTY, FULL and OVERRUN other values can not make MB unlocked and move-in process. */
    if ((state->bIsLegacyFifoEn) && \
    9a34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9a36:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    9a3a:	2b00      	cmp	r3, #0
    9a3c:	d032      	beq.n	9aa4 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    9a3e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9a40:	9b02      	ldr	r3, [sp, #8]
    9a42:	011b      	lsls	r3, r3, #4
    9a44:	4413      	add	r3, r2
    9a46:	681b      	ldr	r3, [r3, #0]
    9a48:	681b      	ldr	r3, [r3, #0]
    9a4a:	0e1b      	lsrs	r3, r3, #24
    9a4c:	f003 030f 	and.w	r3, r3, #15
    if ((state->bIsLegacyFifoEn) && \
    9a50:	2b02      	cmp	r3, #2
    9a52:	d027      	beq.n	9aa4 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    9a54:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9a56:	9b02      	ldr	r3, [sp, #8]
    9a58:	011b      	lsls	r3, r3, #4
    9a5a:	4413      	add	r3, r2
    9a5c:	681b      	ldr	r3, [r3, #0]
    9a5e:	681b      	ldr	r3, [r3, #0]
    9a60:	0e1b      	lsrs	r3, r3, #24
    9a62:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    9a66:	2b04      	cmp	r3, #4
    9a68:	d01c      	beq.n	9aa4 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_OVERRUN != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)))
    9a6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9a6c:	9b02      	ldr	r3, [sp, #8]
    9a6e:	011b      	lsls	r3, r3, #4
    9a70:	4413      	add	r3, r2
    9a72:	681b      	ldr	r3, [r3, #0]
    9a74:	681b      	ldr	r3, [r3, #0]
    9a76:	0e1b      	lsrs	r3, r3, #24
    9a78:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    9a7c:	2b06      	cmp	r3, #6
    9a7e:	d011      	beq.n	9aa4 <FlexCAN_IRQHandlerRxMB+0x100>
    {
        /* Update the cs code for next sequence move in MB.
        A CPU write into the C/S word also unlocks the MB */
        volatile uint32 *flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    9a80:	9902      	ldr	r1, [sp, #8]
    9a82:	981c      	ldr	r0, [sp, #112]	; 0x70
    9a84:	f002 f9a4 	bl	bdd0 <FlexCAN_GetMsgBuffRegion>
    9a88:	9019      	str	r0, [sp, #100]	; 0x64
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    9a8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9a8c:	681b      	ldr	r3, [r3, #0]
    9a8e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    9a92:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9a94:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (((uint32)FLEXCAN_RX_EMPTY) << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    9a96:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9a98:	681b      	ldr	r3, [r3, #0]
    9a9a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    9a9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9aa0:	601a      	str	r2, [r3, #0]
    {
    9aa2:	e002      	b.n	9aaa <FlexCAN_IRQHandlerRxMB+0x106>
    }
    else
#endif
    {
    /* Unlock RX message buffer and RX FIFO*/
    FlexCAN_UnlockRxMsgBuff(base);
    9aa4:	981c      	ldr	r0, [sp, #112]	; 0x70
    9aa6:	f7ff faac 	bl	9002 <FlexCAN_UnlockRxMsgBuff>
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    /* To ensure that interrupts are resumed when they are suspended */
    if (TRUE == bIsCriticalSectionNeeded)
    9aaa:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    9aae:	2b00      	cmp	r3, #0
    9ab0:	d000      	beq.n	9ab4 <FlexCAN_IRQHandlerRxMB+0x110>
    {
        /* Enable all IRQs */
        OsIf_ResumeAllInterrupts();
    9ab2:	b662      	cpsie	i
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9ab4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9ab6:	9b02      	ldr	r3, [sp, #8]
    9ab8:	011b      	lsls	r3, r3, #4
    9aba:	4413      	add	r3, r2
    9abc:	3304      	adds	r3, #4
    9abe:	2200      	movs	r2, #0
    9ac0:	601a      	str	r2, [r3, #0]

    bCurrentIntStat = state->mbs[mb_idx].isPolling;
    9ac2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9ac4:	9b02      	ldr	r3, [sp, #8]
    9ac6:	011b      	lsls	r3, r3, #4
    9ac8:	4413      	add	r3, r2
    9aca:	3308      	adds	r3, #8
    9acc:	781b      	ldrb	r3, [r3, #0]
    9ace:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* Invoke callback */
    if (state->callback != NULL_PTR)
    9ad2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9ad4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    9ad8:	2b00      	cmp	r3, #0
    9ada:	d008      	beq.n	9aee <FlexCAN_IRQHandlerRxMB+0x14a>
    {
        state->callback(instance, FLEXCAN_EVENT_RX_COMPLETE, mb_idx, state);
    9adc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9ade:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9ae2:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9ae6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9ae8:	9a02      	ldr	r2, [sp, #8]
    9aea:	2100      	movs	r1, #0
    9aec:	47a0      	blx	r4
    }

    if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state) && (FALSE == state->mbs[mb_idx].isPolling))
    9aee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9af0:	9b02      	ldr	r3, [sp, #8]
    9af2:	011b      	lsls	r3, r3, #4
    9af4:	4413      	add	r3, r2
    9af6:	3304      	adds	r3, #4
    9af8:	681b      	ldr	r3, [r3, #0]
    9afa:	2b00      	cmp	r3, #0
    9afc:	d11e      	bne.n	9b3c <FlexCAN_IRQHandlerRxMB+0x198>
    9afe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9b00:	9b02      	ldr	r3, [sp, #8]
    9b02:	011b      	lsls	r3, r3, #4
    9b04:	4413      	add	r3, r2
    9b06:	3308      	adds	r3, #8
    9b08:	781b      	ldrb	r3, [r3, #0]
    9b0a:	f083 0301 	eor.w	r3, r3, #1
    9b0e:	b2db      	uxtb	r3, r3
    9b10:	2b00      	cmp	r3, #0
    9b12:	d013      	beq.n	9b3c <FlexCAN_IRQHandlerRxMB+0x198>
    {
        /* callback is not called, need to reset to default value */
        state->mbs[mb_idx].isPolling = TRUE;
    9b14:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9b16:	9b02      	ldr	r3, [sp, #8]
    9b18:	011b      	lsls	r3, r3, #4
    9b1a:	4413      	add	r3, r2
    9b1c:	3308      	adds	r3, #8
    9b1e:	2201      	movs	r2, #1
    9b20:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    9b22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9b24:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9b28:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9b2c:	9300      	str	r3, [sp, #0]
    9b2e:	2300      	movs	r3, #0
    9b30:	9a02      	ldr	r2, [sp, #8]
    9b32:	981c      	ldr	r0, [sp, #112]	; 0x70
    9b34:	f002 fcd4 	bl	c4e0 <FlexCAN_SetMsgBuffIntCmd>
    9b38:	bf00      	nop
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    9b3a:	e019      	b.n	9b70 <FlexCAN_IRQHandlerRxMB+0x1cc>
    else if ((FALSE == bCurrentIntStat) && (TRUE == state->mbs[mb_idx].isPolling))
    9b3c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
    9b40:	f083 0301 	eor.w	r3, r3, #1
    9b44:	b2db      	uxtb	r3, r3
    9b46:	2b00      	cmp	r3, #0
    9b48:	d012      	beq.n	9b70 <FlexCAN_IRQHandlerRxMB+0x1cc>
    9b4a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9b4c:	9b02      	ldr	r3, [sp, #8]
    9b4e:	011b      	lsls	r3, r3, #4
    9b50:	4413      	add	r3, r2
    9b52:	3308      	adds	r3, #8
    9b54:	781b      	ldrb	r3, [r3, #0]
    9b56:	2b00      	cmp	r3, #0
    9b58:	d00a      	beq.n	9b70 <FlexCAN_IRQHandlerRxMB+0x1cc>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    9b5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9b5c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9b60:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9b64:	9300      	str	r3, [sp, #0]
    9b66:	2300      	movs	r3, #0
    9b68:	9a02      	ldr	r2, [sp, #8]
    9b6a:	981c      	ldr	r0, [sp, #112]	; 0x70
    9b6c:	f002 fcb8 	bl	c4e0 <FlexCAN_SetMsgBuffIntCmd>
}
    9b70:	bf00      	nop
    9b72:	b01e      	add	sp, #120	; 0x78
    9b74:	bd10      	pop	{r4, pc}
    9b76:	bf00      	nop
    9b78:	00010488 	.word	0x00010488
    9b7c:	1fff8fc0 	.word	0x1fff8fc0

00009b80 <FlexCAN_IRQHandlerTxMB>:
 * note: just using in interrupt mode
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerTxMB(uint8 u8Instance, uint32 u32MbIdx)
{
    9b80:	b510      	push	{r4, lr}
    9b82:	b09a      	sub	sp, #104	; 0x68
    9b84:	4603      	mov	r3, r0
    9b86:	9102      	str	r1, [sp, #8]
    9b88:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9b8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b90:	4a46      	ldr	r2, [pc, #280]	; (9cac <FlexCAN_IRQHandlerTxMB+0x12c>)
    9b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b96:	9319      	str	r3, [sp, #100]	; 0x64
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    9b98:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b9c:	4a44      	ldr	r2, [pc, #272]	; (9cb0 <FlexCAN_IRQHandlerTxMB+0x130>)
    9b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ba2:	9318      	str	r3, [sp, #96]	; 0x60
    Flexcan_Ip_MsgBuffType mb;
    mb.cs = 0U;
    9ba4:	2300      	movs	r3, #0
    9ba6:	9304      	str	r3, [sp, #16]
    mb.time_stamp = 0U;
    9ba8:	2300      	movs	r3, #0
    9baa:	9317      	str	r3, [sp, #92]	; 0x5c
    if (pState->mbs[u32MbIdx].isRemote)
    9bac:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9bae:	9b02      	ldr	r3, [sp, #8]
    9bb0:	011b      	lsls	r3, r3, #4
    9bb2:	4413      	add	r3, r2
    9bb4:	3309      	adds	r3, #9
    9bb6:	781b      	ldrb	r3, [r3, #0]
    9bb8:	2b00      	cmp	r3, #0
    9bba:	d01e      	beq.n	9bfa <FlexCAN_IRQHandlerTxMB+0x7a>
    {
        FlexCAN_LockRxMsgBuff(pBase, u32MbIdx);
    9bbc:	9902      	ldr	r1, [sp, #8]
    9bbe:	9819      	ldr	r0, [sp, #100]	; 0x64
    9bc0:	f002 fc7f 	bl	c4c2 <FlexCAN_LockRxMsgBuff>
        FlexCAN_GetMsgBuff(pBase, u32MbIdx, &mb);
    9bc4:	ab04      	add	r3, sp, #16
    9bc6:	461a      	mov	r2, r3
    9bc8:	9902      	ldr	r1, [sp, #8]
    9bca:	9819      	ldr	r0, [sp, #100]	; 0x64
    9bcc:	f002 fda8 	bl	c720 <FlexCAN_GetMsgBuff>
        FlexCAN_UnlockRxMsgBuff(pBase);
    9bd0:	9819      	ldr	r0, [sp, #100]	; 0x64
    9bd2:	f7ff fa16 	bl	9002 <FlexCAN_UnlockRxMsgBuff>
        pState->mbs[u32MbIdx].time_stamp = mb.time_stamp;
    9bd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9bd8:	9918      	ldr	r1, [sp, #96]	; 0x60
    9bda:	9b02      	ldr	r3, [sp, #8]
    9bdc:	011b      	lsls	r3, r3, #4
    9bde:	440b      	add	r3, r1
    9be0:	330c      	adds	r3, #12
    9be2:	601a      	str	r2, [r3, #0]
        /* If the frame was a remote frame, clear the flag only if the response was
        * not received yet. If the response was received, leave the flag set in order
        * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
        if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    9be4:	9b04      	ldr	r3, [sp, #16]
    9be6:	0e1b      	lsrs	r3, r3, #24
    9be8:	f003 030f 	and.w	r3, r3, #15
    9bec:	2b04      	cmp	r3, #4
    9bee:	d116      	bne.n	9c1e <FlexCAN_IRQHandlerTxMB+0x9e>
        {
            FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    9bf0:	9902      	ldr	r1, [sp, #8]
    9bf2:	9819      	ldr	r0, [sp, #100]	; 0x64
    9bf4:	f7ff fa0c 	bl	9010 <FlexCAN_ClearMsgBuffIntStatusFlag>
    9bf8:	e011      	b.n	9c1e <FlexCAN_IRQHandlerTxMB+0x9e>
        }
    }
    else
    {
        pState->mbs[u32MbIdx].time_stamp = FlexCAN_GetMsgBuffTimestamp(pBase, u32MbIdx);
    9bfa:	9902      	ldr	r1, [sp, #8]
    9bfc:	9819      	ldr	r0, [sp, #100]	; 0x64
    9bfe:	f002 fd7b 	bl	c6f8 <FlexCAN_GetMsgBuffTimestamp>
    9c02:	4601      	mov	r1, r0
    9c04:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9c06:	9b02      	ldr	r3, [sp, #8]
    9c08:	011b      	lsls	r3, r3, #4
    9c0a:	4413      	add	r3, r2
    9c0c:	330c      	adds	r3, #12
    9c0e:	6019      	str	r1, [r3, #0]
        FlexCAN_UnlockRxMsgBuff(pBase);
    9c10:	9819      	ldr	r0, [sp, #100]	; 0x64
    9c12:	f7ff f9f6 	bl	9002 <FlexCAN_UnlockRxMsgBuff>
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    9c16:	9902      	ldr	r1, [sp, #8]
    9c18:	9819      	ldr	r0, [sp, #100]	; 0x64
    9c1a:	f7ff f9f9 	bl	9010 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }

    pState->mbs[u32MbIdx].state = FLEXCAN_MB_IDLE;
    9c1e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9c20:	9b02      	ldr	r3, [sp, #8]
    9c22:	011b      	lsls	r3, r3, #4
    9c24:	4413      	add	r3, r2
    9c26:	3304      	adds	r3, #4
    9c28:	2200      	movs	r2, #0
    9c2a:	601a      	str	r2, [r3, #0]

    /* Invoke callback */
    if (pState->callback != NULL_PTR)
    9c2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9c2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    9c32:	2b00      	cmp	r3, #0
    9c34:	d008      	beq.n	9c48 <FlexCAN_IRQHandlerTxMB+0xc8>
    {
        pState->callback(u8Instance, FLEXCAN_EVENT_TX_COMPLETE, u32MbIdx, pState);
    9c36:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9c38:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9c3c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9c40:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9c42:	9a02      	ldr	r2, [sp, #8]
    9c44:	2104      	movs	r1, #4
    9c46:	47a0      	blx	r4
    }

    if (FLEXCAN_MB_IDLE == pState->mbs[u32MbIdx].state)
    9c48:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9c4a:	9b02      	ldr	r3, [sp, #8]
    9c4c:	011b      	lsls	r3, r3, #4
    9c4e:	4413      	add	r3, r2
    9c50:	3304      	adds	r3, #4
    9c52:	681b      	ldr	r3, [r3, #0]
    9c54:	2b00      	cmp	r3, #0
    9c56:	d112      	bne.n	9c7e <FlexCAN_IRQHandlerTxMB+0xfe>
    {
        /* callback is not called, need to reset to default value */
        pState->mbs[u32MbIdx].isPolling = TRUE;
    9c58:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9c5a:	9b02      	ldr	r3, [sp, #8]
    9c5c:	011b      	lsls	r3, r3, #4
    9c5e:	4413      	add	r3, r2
    9c60:	3308      	adds	r3, #8
    9c62:	2201      	movs	r2, #1
    9c64:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    9c66:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9c68:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9c6c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9c70:	9300      	str	r3, [sp, #0]
    9c72:	2300      	movs	r3, #0
    9c74:	9a02      	ldr	r2, [sp, #8]
    9c76:	9819      	ldr	r0, [sp, #100]	; 0x64
    9c78:	f002 fc32 	bl	c4e0 <FlexCAN_SetMsgBuffIntCmd>
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    9c7c:	e012      	b.n	9ca4 <FlexCAN_IRQHandlerTxMB+0x124>
    else if (TRUE == pState->mbs[u32MbIdx].isPolling)
    9c7e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9c80:	9b02      	ldr	r3, [sp, #8]
    9c82:	011b      	lsls	r3, r3, #4
    9c84:	4413      	add	r3, r2
    9c86:	3308      	adds	r3, #8
    9c88:	781b      	ldrb	r3, [r3, #0]
    9c8a:	2b00      	cmp	r3, #0
    9c8c:	d00a      	beq.n	9ca4 <FlexCAN_IRQHandlerTxMB+0x124>
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    9c8e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9c90:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9c94:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9c98:	9300      	str	r3, [sp, #0]
    9c9a:	2300      	movs	r3, #0
    9c9c:	9a02      	ldr	r2, [sp, #8]
    9c9e:	9819      	ldr	r0, [sp, #100]	; 0x64
    9ca0:	f002 fc1e 	bl	c4e0 <FlexCAN_SetMsgBuffIntCmd>
}
    9ca4:	bf00      	nop
    9ca6:	b01a      	add	sp, #104	; 0x68
    9ca8:	bd10      	pop	{r4, pc}
    9caa:	bf00      	nop
    9cac:	00010488 	.word	0x00010488
    9cb0:	1fff8fc0 	.word	0x1fff8fc0

00009cb4 <FlexCAN_IRQHandlerRxFIFO>:
 * Function Name : FlexCAN_IRQHandlerRxFIFO
 * Description   : Process IRQHandler in case of RxFIFO mode selection for CAN interface.
 *
 *END**************************************************************************/
static inline void FlexCAN_IRQHandlerRxFIFO(uint8 instance, uint32 mb_idx)
{
    9cb4:	b510      	push	{r4, lr}
    9cb6:	b098      	sub	sp, #96	; 0x60
    9cb8:	4603      	mov	r3, r0
    9cba:	9100      	str	r1, [sp, #0]
    9cbc:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9cc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9cc4:	4a3c      	ldr	r2, [pc, #240]	; (9db8 <FlexCAN_IRQHandlerRxFIFO+0x104>)
    9cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cca:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9ccc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9cd0:	4a3a      	ldr	r2, [pc, #232]	; (9dbc <FlexCAN_IRQHandlerRxFIFO+0x108>)
    9cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cd6:	9316      	str	r3, [sp, #88]	; 0x58
    Flexcan_Ip_MsgBuffType data;

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage  */
    if (NULL_PTR == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage)
    9cd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9cda:	681b      	ldr	r3, [r3, #0]
    9cdc:	2b00      	cmp	r3, #0
    9cde:	d102      	bne.n	9ce6 <FlexCAN_IRQHandlerRxFIFO+0x32>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = &data;
    9ce0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9ce2:	aa02      	add	r2, sp, #8
    9ce4:	601a      	str	r2, [r3, #0]
    }
    switch (mb_idx)
    9ce6:	9b00      	ldr	r3, [sp, #0]
    9ce8:	2b07      	cmp	r3, #7
    9cea:	d048      	beq.n	9d7e <FlexCAN_IRQHandlerRxFIFO+0xca>
    9cec:	9b00      	ldr	r3, [sp, #0]
    9cee:	2b07      	cmp	r3, #7
    9cf0:	d858      	bhi.n	9da4 <FlexCAN_IRQHandlerRxFIFO+0xf0>
    9cf2:	9b00      	ldr	r3, [sp, #0]
    9cf4:	2b05      	cmp	r3, #5
    9cf6:	d003      	beq.n	9d00 <FlexCAN_IRQHandlerRxFIFO+0x4c>
    9cf8:	9b00      	ldr	r3, [sp, #0]
    9cfa:	2b06      	cmp	r3, #6
    9cfc:	d02c      	beq.n	9d58 <FlexCAN_IRQHandlerRxFIFO+0xa4>
            }

            break;
        default:
            /* Do Nothing */
            break;
    9cfe:	e051      	b.n	9da4 <FlexCAN_IRQHandlerRxFIFO+0xf0>
            if (FLEXCAN_MB_RX_BUSY == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    9d00:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d02:	685b      	ldr	r3, [r3, #4]
    9d04:	2b01      	cmp	r3, #1
    9d06:	d14f      	bne.n	9da8 <FlexCAN_IRQHandlerRxFIFO+0xf4>
                FlexCAN_ReadRxFifo(base, state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage);
    9d08:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d0a:	681b      	ldr	r3, [r3, #0]
    9d0c:	4619      	mov	r1, r3
    9d0e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9d10:	f003 f98d 	bl	d02e <FlexCAN_ReadRxFifo>
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9d14:	9900      	ldr	r1, [sp, #0]
    9d16:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9d18:	f7ff f97a 	bl	9010 <FlexCAN_ClearMsgBuffIntStatusFlag>
                state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    9d1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d1e:	2200      	movs	r2, #0
    9d20:	605a      	str	r2, [r3, #4]
                if (state->callback != NULL_PTR)
    9d22:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    9d28:	2b00      	cmp	r3, #0
    9d2a:	d008      	beq.n	9d3e <FlexCAN_IRQHandlerRxFIFO+0x8a>
                    state->callback(instance, FLEXCAN_EVENT_RXFIFO_COMPLETE, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    9d2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d2e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9d32:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9d36:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d38:	2200      	movs	r2, #0
    9d3a:	2101      	movs	r1, #1
    9d3c:	47a0      	blx	r4
                if (FLEXCAN_MB_IDLE == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    9d3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d40:	685b      	ldr	r3, [r3, #4]
    9d42:	2b00      	cmp	r3, #0
    9d44:	d130      	bne.n	9da8 <FlexCAN_IRQHandlerRxFIFO+0xf4>
                    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    9d46:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d48:	2201      	movs	r2, #1
    9d4a:	721a      	strb	r2, [r3, #8]
                    FlexCAN_CompleteRxMessageFifoData(instance);
    9d4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9d50:	4618      	mov	r0, r3
    9d52:	f000 fc61 	bl	a618 <FlexCAN_CompleteRxMessageFifoData>
            break;
    9d56:	e027      	b.n	9da8 <FlexCAN_IRQHandlerRxFIFO+0xf4>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9d58:	9900      	ldr	r1, [sp, #0]
    9d5a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9d5c:	f7ff f958 	bl	9010 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    9d60:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    9d66:	2b00      	cmp	r3, #0
    9d68:	d020      	beq.n	9dac <FlexCAN_IRQHandlerRxFIFO+0xf8>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_WARNING, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    9d6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d6c:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9d70:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9d74:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d76:	2200      	movs	r2, #0
    9d78:	2102      	movs	r1, #2
    9d7a:	47a0      	blx	r4
            break;
    9d7c:	e016      	b.n	9dac <FlexCAN_IRQHandlerRxFIFO+0xf8>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9d7e:	9900      	ldr	r1, [sp, #0]
    9d80:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9d82:	f7ff f945 	bl	9010 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    9d86:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    9d8c:	2b00      	cmp	r3, #0
    9d8e:	d00f      	beq.n	9db0 <FlexCAN_IRQHandlerRxFIFO+0xfc>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_OVERFLOW, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    9d90:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d92:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9d96:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9d9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d9c:	2200      	movs	r2, #0
    9d9e:	2103      	movs	r1, #3
    9da0:	47a0      	blx	r4
            break;
    9da2:	e005      	b.n	9db0 <FlexCAN_IRQHandlerRxFIFO+0xfc>
            break;
    9da4:	bf00      	nop
    9da6:	e004      	b.n	9db2 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    9da8:	bf00      	nop
    9daa:	e002      	b.n	9db2 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    9dac:	bf00      	nop
    9dae:	e000      	b.n	9db2 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    9db0:	bf00      	nop
    }
}
    9db2:	bf00      	nop
    9db4:	b018      	add	sp, #96	; 0x60
    9db6:	bd10      	pop	{r4, pc}
    9db8:	00010488 	.word	0x00010488
    9dbc:	1fff8fc0 	.word	0x1fff8fc0

00009dc0 <FlexCAN_AbortTxTransfer>:
 * Description   : Abort transfer for Tx buffer.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_AbortTxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    9dc0:	b500      	push	{lr}
    9dc2:	b08b      	sub	sp, #44	; 0x2c
    9dc4:	4603      	mov	r3, r0
    9dc6:	460a      	mov	r2, r1
    9dc8:	f88d 3007 	strb.w	r3, [sp, #7]
    9dcc:	4613      	mov	r3, r2
    9dce:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9dd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9dd6:	4a3c      	ldr	r2, [pc, #240]	; (9ec8 <FlexCAN_AbortTxTransfer+0x108>)
    9dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ddc:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    9dde:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9de2:	4a3a      	ldr	r2, [pc, #232]	; (9ecc <FlexCAN_AbortTxTransfer+0x10c>)
    9de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9de8:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9dea:	2300      	movs	r3, #0
    9dec:	9309      	str	r3, [sp, #36]	; 0x24

    uint32 timeStart = 0U;
    9dee:	2300      	movs	r3, #0
    9df0:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    9df2:	2300      	movs	r3, #0
    9df4:	9308      	str	r3, [sp, #32]
    uint32 flexcan_mb_config = 0;
    9df6:	2300      	movs	r3, #0
    9df8:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = 0U;
    9dfa:	2300      	movs	r3, #0
    9dfc:	9304      	str	r3, [sp, #16]
    volatile uint32 * flexcan_mb = NULL_PTR;
    9dfe:	2300      	movs	r3, #0
    9e00:	9303      	str	r3, [sp, #12]

    flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    9e02:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9e06:	4619      	mov	r1, r3
    9e08:	9807      	ldr	r0, [sp, #28]
    9e0a:	f001 ffe1 	bl	bdd0 <FlexCAN_GetMsgBuffRegion>
    9e0e:	9003      	str	r0, [sp, #12]
    flexcan_mb_config = * flexcan_mb;
    9e10:	9b03      	ldr	r3, [sp, #12]
    9e12:	681b      	ldr	r3, [r3, #0]
    9e14:	9305      	str	r3, [sp, #20]
    /* Reset the code */
    flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    9e16:	9b05      	ldr	r3, [sp, #20]
    9e18:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9e1c:	9305      	str	r3, [sp, #20]
    flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    9e1e:	9b05      	ldr	r3, [sp, #20]
    9e20:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    9e24:	9305      	str	r3, [sp, #20]
    *flexcan_mb = flexcan_mb_config;
    9e26:	9b03      	ldr	r3, [sp, #12]
    9e28:	9a05      	ldr	r2, [sp, #20]
    9e2a:	601a      	str	r2, [r3, #0]

    /* Wait to finish abort operation */
    uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9e2c:	2100      	movs	r1, #0
    9e2e:	4828      	ldr	r0, [pc, #160]	; (9ed0 <FlexCAN_AbortTxTransfer+0x110>)
    9e30:	f7f8 fa08 	bl	2244 <OsIf_MicrosToTicks>
    9e34:	9004      	str	r0, [sp, #16]
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9e36:	2000      	movs	r0, #0
    9e38:	f7f8 f9b8 	bl	21ac <OsIf_GetCounter>
    9e3c:	4603      	mov	r3, r0
    9e3e:	9302      	str	r3, [sp, #8]
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    9e40:	e00f      	b.n	9e62 <FlexCAN_AbortTxTransfer+0xa2>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9e42:	ab02      	add	r3, sp, #8
    9e44:	2100      	movs	r1, #0
    9e46:	4618      	mov	r0, r3
    9e48:	f7f8 f9c9 	bl	21de <OsIf_GetElapsed>
    9e4c:	4602      	mov	r2, r0
    9e4e:	9b08      	ldr	r3, [sp, #32]
    9e50:	4413      	add	r3, r2
    9e52:	9308      	str	r3, [sp, #32]
        if (timeElapsed >= uS2Ticks)
    9e54:	9a08      	ldr	r2, [sp, #32]
    9e56:	9b04      	ldr	r3, [sp, #16]
    9e58:	429a      	cmp	r2, r3
    9e5a:	d302      	bcc.n	9e62 <FlexCAN_AbortTxTransfer+0xa2>
        {
            result = FLEXCAN_STATUS_TIMEOUT;
    9e5c:	2303      	movs	r3, #3
    9e5e:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    9e60:	e008      	b.n	9e74 <FlexCAN_AbortTxTransfer+0xb4>
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    9e62:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9e66:	4619      	mov	r1, r3
    9e68:	9807      	ldr	r0, [sp, #28]
    9e6a:	f7ff f8e4 	bl	9036 <FlexCAN_GetBuffStatusFlag>
    9e6e:	4603      	mov	r3, r0
    9e70:	2b00      	cmp	r3, #0
    9e72:	d0e6      	beq.n	9e42 <FlexCAN_AbortTxTransfer+0x82>
        }
    }
    if (result != FLEXCAN_STATUS_TIMEOUT)
    9e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9e76:	2b03      	cmp	r3, #3
    9e78:	d012      	beq.n	9ea0 <FlexCAN_AbortTxTransfer+0xe0>
    {
        flexcan_mb_config = *flexcan_mb;
    9e7a:	9b03      	ldr	r3, [sp, #12]
    9e7c:	681b      	ldr	r3, [r3, #0]
    9e7e:	9305      	str	r3, [sp, #20]
        /* Check if the MBs have been safely Inactivated */
        if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    9e80:	9b05      	ldr	r3, [sp, #20]
    9e82:	0e1b      	lsrs	r3, r3, #24
    9e84:	f003 030f 	and.w	r3, r3, #15
    9e88:	2b08      	cmp	r3, #8
    9e8a:	d101      	bne.n	9e90 <FlexCAN_AbortTxTransfer+0xd0>
        {
            /* Transmission have occurred */
            result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    9e8c:	2305      	movs	r3, #5
    9e8e:	9309      	str	r3, [sp, #36]	; 0x24
        }

        if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    9e90:	9b05      	ldr	r3, [sp, #20]
    9e92:	0e1b      	lsrs	r3, r3, #24
    9e94:	f003 030f 	and.w	r3, r3, #15
    9e98:	2b09      	cmp	r3, #9
    9e9a:	d101      	bne.n	9ea0 <FlexCAN_AbortTxTransfer+0xe0>
        {
            /* Transmission have been aborted */
            result = FLEXCAN_STATUS_SUCCESS;
    9e9c:	2300      	movs	r3, #0
    9e9e:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    9ea0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9ea4:	4619      	mov	r1, r3
    9ea6:	9807      	ldr	r0, [sp, #28]
    9ea8:	f7ff f8b2 	bl	9010 <FlexCAN_ClearMsgBuffIntStatusFlag>
    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9eac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9eb0:	9a06      	ldr	r2, [sp, #24]
    9eb2:	011b      	lsls	r3, r3, #4
    9eb4:	4413      	add	r3, r2
    9eb6:	3304      	adds	r3, #4
    9eb8:	2200      	movs	r2, #0
    9eba:	601a      	str	r2, [r3, #0]

    return result;
    9ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    9ebe:	4618      	mov	r0, r3
    9ec0:	b00b      	add	sp, #44	; 0x2c
    9ec2:	f85d fb04 	ldr.w	pc, [sp], #4
    9ec6:	bf00      	nop
    9ec8:	00010488 	.word	0x00010488
    9ecc:	1fff8fc0 	.word	0x1fff8fc0
    9ed0:	000f4240 	.word	0x000f4240

00009ed4 <FlexCAN_AbortRxTransfer>:
 * Description   : Abort transfer for Rx normal or legacy fifo if enabled.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static void FlexCAN_AbortRxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    9ed4:	b500      	push	{lr}
    9ed6:	b089      	sub	sp, #36	; 0x24
    9ed8:	4603      	mov	r3, r0
    9eda:	460a      	mov	r2, r1
    9edc:	f88d 3007 	strb.w	r3, [sp, #7]
    9ee0:	4613      	mov	r3, r2
    9ee2:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9ee6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9eea:	4a41      	ldr	r2, [pc, #260]	; (9ff0 <FlexCAN_AbortRxTransfer+0x11c>)
    9eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ef0:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    9ef2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9ef6:	4a3f      	ldr	r2, [pc, #252]	; (9ff4 <FlexCAN_AbortRxTransfer+0x120>)
    9ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9efc:	9306      	str	r3, [sp, #24]
    uint8 val1 = 0U;
    9efe:	2300      	movs	r3, #0
    9f00:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 val2 = 0U;
    9f04:	2300      	movs	r3, #0
    9f06:	9304      	str	r3, [sp, #16]
    uint32 flexcan_mb_config = 0;
    9f08:	2300      	movs	r3, #0
    9f0a:	9303      	str	r3, [sp, #12]
    volatile uint32 * flexcan_mb = NULL_PTR;
    9f0c:	2300      	movs	r3, #0
    9f0e:	9302      	str	r3, [sp, #8]

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9f10:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f14:	9a06      	ldr	r2, [sp, #24]
    9f16:	011b      	lsls	r3, r3, #4
    9f18:	4413      	add	r3, r2
    9f1a:	3304      	adds	r3, #4
    9f1c:	2200      	movs	r2, #0
    9f1e:	601a      	str	r2, [r3, #0]
    /* Check if fifo enabled */
    if (TRUE == state->bIsLegacyFifoEn)
    9f20:	9b06      	ldr	r3, [sp, #24]
    9f22:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    9f26:	2b00      	cmp	r3, #0
    9f28:	d03c      	beq.n	9fa4 <FlexCAN_AbortRxTransfer+0xd0>
    {
        /* Get the number of RX FIFO Filters*/
        val1 = (uint8)(((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    9f2a:	9b07      	ldr	r3, [sp, #28]
    9f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9f2e:	0e1b      	lsrs	r3, r3, #24
    9f30:	b2db      	uxtb	r3, r3
    9f32:	f003 030f 	and.w	r3, r3, #15
    9f36:	f88d 3017 	strb.w	r3, [sp, #23]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        val2 = RxFifoOcuppiedLastMsgBuff(val1);
    9f3a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9f3e:	4618      	mov	r0, r3
    9f40:	f7ff f9f3 	bl	932a <RxFifoOcuppiedLastMsgBuff>
    9f44:	9004      	str	r0, [sp, #16]
        if (mb_idx > val2)
    9f46:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f4a:	9a04      	ldr	r2, [sp, #16]
    9f4c:	429a      	cmp	r2, r3
    9f4e:	d21b      	bcs.n	9f88 <FlexCAN_AbortRxTransfer+0xb4>
        {
            /* This operation is not allowed for MB that are part of RxFIFO */
            flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    9f50:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f54:	4619      	mov	r1, r3
    9f56:	9807      	ldr	r0, [sp, #28]
    9f58:	f001 ff3a 	bl	bdd0 <FlexCAN_GetMsgBuffRegion>
    9f5c:	9002      	str	r0, [sp, #8]
            flexcan_mb_config = * flexcan_mb;
    9f5e:	9b02      	ldr	r3, [sp, #8]
    9f60:	681b      	ldr	r3, [r3, #0]
    9f62:	9303      	str	r3, [sp, #12]
            /* Reset the code and unlock the MB */
            flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    9f64:	9b03      	ldr	r3, [sp, #12]
    9f66:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9f6a:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
            *flexcan_mb = flexcan_mb_config;
    9f6c:	9b02      	ldr	r3, [sp, #8]
    9f6e:	9a03      	ldr	r2, [sp, #12]
    9f70:	601a      	str	r2, [r3, #0]
            /* Reconfigure The MB as left by RxMBconfig */
            flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    9f72:	9b03      	ldr	r3, [sp, #12]
    9f74:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9f78:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    9f7a:	9b03      	ldr	r3, [sp, #12]
    9f7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    9f80:	9303      	str	r3, [sp, #12]
            *flexcan_mb = flexcan_mb_config;
    9f82:	9b02      	ldr	r3, [sp, #8]
    9f84:	9a03      	ldr	r2, [sp, #12]
    9f86:	601a      	str	r2, [r3, #0]
        }
        if (FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    9f88:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f8c:	2b00      	cmp	r3, #0
    9f8e:	d125      	bne.n	9fdc <FlexCAN_AbortRxTransfer+0x108>
        {
            FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, state->isIntActive);
    9f90:	9b06      	ldr	r3, [sp, #24]
    9f92:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9f96:	f89d 1007 	ldrb.w	r1, [sp, #7]
    9f9a:	2205      	movs	r2, #5
    9f9c:	9807      	ldr	r0, [sp, #28]
    9f9e:	f002 faf5 	bl	c58c <FLEXCAN_ClearMsgBuffIntCmd>
    9fa2:	e01b      	b.n	9fdc <FlexCAN_AbortRxTransfer+0x108>
        }
    }
    else
    {
        /* This operation is not allowed for MB that are part of RxFIFO */
        flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    9fa4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9fa8:	4619      	mov	r1, r3
    9faa:	9807      	ldr	r0, [sp, #28]
    9fac:	f001 ff10 	bl	bdd0 <FlexCAN_GetMsgBuffRegion>
    9fb0:	9002      	str	r0, [sp, #8]
        flexcan_mb_config = * flexcan_mb;
    9fb2:	9b02      	ldr	r3, [sp, #8]
    9fb4:	681b      	ldr	r3, [r3, #0]
    9fb6:	9303      	str	r3, [sp, #12]
        /* Reset the code and unlock the MB */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    9fb8:	9b03      	ldr	r3, [sp, #12]
    9fba:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9fbe:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
        *flexcan_mb = flexcan_mb_config;
    9fc0:	9b02      	ldr	r3, [sp, #8]
    9fc2:	9a03      	ldr	r2, [sp, #12]
    9fc4:	601a      	str	r2, [r3, #0]
        /* Reconfigure The MB as left by RxMBconfig */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    9fc6:	9b03      	ldr	r3, [sp, #12]
    9fc8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9fcc:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    9fce:	9b03      	ldr	r3, [sp, #12]
    9fd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    9fd4:	9303      	str	r3, [sp, #12]
        *flexcan_mb = flexcan_mb_config;
    9fd6:	9b02      	ldr	r3, [sp, #8]
    9fd8:	9a03      	ldr	r2, [sp, #12]
    9fda:	601a      	str	r2, [r3, #0]
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    9fdc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9fe0:	4619      	mov	r1, r3
    9fe2:	9807      	ldr	r0, [sp, #28]
    9fe4:	f7ff f814 	bl	9010 <FlexCAN_ClearMsgBuffIntStatusFlag>
}
    9fe8:	bf00      	nop
    9fea:	b009      	add	sp, #36	; 0x24
    9fec:	f85d fb04 	ldr.w	pc, [sp], #4
    9ff0:	00010488 	.word	0x00010488
    9ff4:	1fff8fc0 	.word	0x1fff8fc0

00009ff8 <FlexCAN_Ip_Init_Privileged>:
/* implements FlexCAN_Ip_Init_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Init_Privileged(uint8 Flexcan_Ip_u8Instance,
                                                 Flexcan_Ip_StateType * Flexcan_Ip_pState,
                                                 const Flexcan_Ip_ConfigType * Flexcan_Ip_pData
                                                )
{
    9ff8:	b500      	push	{lr}
    9ffa:	b089      	sub	sp, #36	; 0x24
    9ffc:	4603      	mov	r3, r0
    9ffe:	9102      	str	r1, [sp, #8]
    a000:	9201      	str	r2, [sp, #4]
    a002:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    a006:	2300      	movs	r3, #0
    a008:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    a00a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a00e:	4a36      	ldr	r2, [pc, #216]	; (a0e8 <FlexCAN_Ip_Init_Privileged+0xf0>)
    a010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a014:	9305      	str	r3, [sp, #20]
    {
        OsIf_Trusted_Call1param(FlexCAN_SetUserAccessAllowed, pBase);
    }
#endif

    eResult = FlexCAN_InitController(Flexcan_Ip_u8Instance, pBase, Flexcan_Ip_pData);
    a016:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a01a:	9a01      	ldr	r2, [sp, #4]
    a01c:	9905      	ldr	r1, [sp, #20]
    a01e:	4618      	mov	r0, r3
    a020:	f7ff fa84 	bl	952c <FlexCAN_InitController>
    a024:	9006      	str	r0, [sp, #24]
    if (FLEXCAN_STATUS_SUCCESS == eResult)
    a026:	9b06      	ldr	r3, [sp, #24]
    a028:	2b00      	cmp	r3, #0
    a02a:	d158      	bne.n	a0de <FlexCAN_Ip_Init_Privileged+0xe6>
    {
        /* Init Baudrate */
        FlexCAN_InitBaudrate(pBase, Flexcan_Ip_pData);
    a02c:	9901      	ldr	r1, [sp, #4]
    a02e:	9805      	ldr	r0, [sp, #20]
    a030:	f7ff fad6 	bl	95e0 <FlexCAN_InitBaudrate>
        /* Select mode */
        FlexCAN_SetOperationMode(pBase, Flexcan_Ip_pData->flexcanMode);
    a034:	9b01      	ldr	r3, [sp, #4]
    a036:	68db      	ldr	r3, [r3, #12]
    a038:	4619      	mov	r1, r3
    a03a:	9805      	ldr	r0, [sp, #20]
    a03c:	f002 fdb8 	bl	cbb0 <FlexCAN_SetOperationMode>

#if (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON)
        FlexCAN_ConfigTimestamp(Flexcan_Ip_u8Instance, pBase, (const Flexcan_Ip_TimeStampConfigType *)(&Flexcan_Ip_pData->time_stamp));
#endif   /* (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON) */

        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    a040:	2300      	movs	r3, #0
    a042:	9307      	str	r3, [sp, #28]
    a044:	e01d      	b.n	a082 <FlexCAN_Ip_Init_Privileged+0x8a>
        {
            /* Check if blocking need to be any more present in sync\async discussions */
            /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
            Flexcan_Ip_pState->mbs[i].isPolling = TRUE;
    a046:	9a02      	ldr	r2, [sp, #8]
    a048:	9b07      	ldr	r3, [sp, #28]
    a04a:	011b      	lsls	r3, r3, #4
    a04c:	4413      	add	r3, r2
    a04e:	3308      	adds	r3, #8
    a050:	2201      	movs	r2, #1
    a052:	701a      	strb	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].pMBmessage = NULL_PTR;
    a054:	9a02      	ldr	r2, [sp, #8]
    a056:	9b07      	ldr	r3, [sp, #28]
    a058:	011b      	lsls	r3, r3, #4
    a05a:	4413      	add	r3, r2
    a05c:	2200      	movs	r2, #0
    a05e:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].state = FLEXCAN_MB_IDLE;
    a060:	9a02      	ldr	r2, [sp, #8]
    a062:	9b07      	ldr	r3, [sp, #28]
    a064:	011b      	lsls	r3, r3, #4
    a066:	4413      	add	r3, r2
    a068:	3304      	adds	r3, #4
    a06a:	2200      	movs	r2, #0
    a06c:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].time_stamp = 0U;
    a06e:	9a02      	ldr	r2, [sp, #8]
    a070:	9b07      	ldr	r3, [sp, #28]
    a072:	011b      	lsls	r3, r3, #4
    a074:	4413      	add	r3, r2
    a076:	330c      	adds	r3, #12
    a078:	2200      	movs	r2, #0
    a07a:	601a      	str	r2, [r3, #0]
        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    a07c:	9b07      	ldr	r3, [sp, #28]
    a07e:	3301      	adds	r3, #1
    a080:	9307      	str	r3, [sp, #28]
    a082:	9b07      	ldr	r3, [sp, #28]
    a084:	2b1f      	cmp	r3, #31
    a086:	d9de      	bls.n	a046 <FlexCAN_Ip_Init_Privileged+0x4e>
        /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
        Flexcan_Ip_pState->enhancedFifoOutput.isPolling = TRUE;
        Flexcan_Ip_pState->enhancedFifoOutput.state = FLEXCAN_MB_IDLE;
#endif

        Flexcan_Ip_pState->transferType = Flexcan_Ip_pData->transfer_type;
    a088:	9b01      	ldr	r3, [sp, #4]
    a08a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    a08c:	9b02      	ldr	r3, [sp, #8]
    a08e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        Flexcan_Ip_pState->u32NumOfMbTransferByDMA = Flexcan_Ip_pData->num_enhanced_watermark;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

        /* Clear Callbacks in case of autovariables garbage */
        Flexcan_Ip_pState->callback = Flexcan_Ip_pData->Callback;
    a092:	9b01      	ldr	r3, [sp, #4]
    a094:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a096:	9b02      	ldr	r3, [sp, #8]
    a098:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        Flexcan_Ip_pState->callbackParam = NULL_PTR;
    a09c:	9b02      	ldr	r3, [sp, #8]
    a09e:	2200      	movs	r2, #0
    a0a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        Flexcan_Ip_pState->error_callback = Flexcan_Ip_pData->ErrorCallback;
    a0a4:	9b01      	ldr	r3, [sp, #4]
    a0a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    a0a8:	9b02      	ldr	r3, [sp, #8]
    a0aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        Flexcan_Ip_pState->errorCallbackParam = NULL_PTR;
    a0ae:	9b02      	ldr	r3, [sp, #8]
    a0b0:	2200      	movs	r2, #0
    a0b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        Flexcan_Ip_pState->bIsLegacyFifoEn = Flexcan_Ip_pData->is_rx_fifo_needed;
    a0b6:	9b01      	ldr	r3, [sp, #4]
    a0b8:	7a1a      	ldrb	r2, [r3, #8]
    a0ba:	9b02      	ldr	r3, [sp, #8]
    a0bc:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
        Flexcan_Ip_pState->bIsEnhancedFifoEn = Flexcan_Ip_pData->is_enhanced_rx_fifo_needed;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
        Flexcan_Ip_pState->u32MaxMbNum = Flexcan_Ip_pData->max_num_mb;
    a0c0:	9b01      	ldr	r3, [sp, #4]
    a0c2:	681a      	ldr	r2, [r3, #0]
    a0c4:	9b02      	ldr	r3, [sp, #8]
    a0c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        Flexcan_Ip_pState->isIntActive = TRUE;
    a0ca:	9b02      	ldr	r3, [sp, #8]
    a0cc:	2201      	movs	r2, #1
    a0ce:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        /* Save runtime structure pointers so irq handler can point to the correct state structure */
        Flexcan_Ip_apxState[Flexcan_Ip_u8Instance] = Flexcan_Ip_pState;
    a0d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a0d6:	4905      	ldr	r1, [pc, #20]	; (a0ec <FlexCAN_Ip_Init_Privileged+0xf4>)
    a0d8:	9a02      	ldr	r2, [sp, #8]
    a0da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    return eResult;
    a0de:	9b06      	ldr	r3, [sp, #24]
}
    a0e0:	4618      	mov	r0, r3
    a0e2:	b009      	add	sp, #36	; 0x24
    a0e4:	f85d fb04 	ldr.w	pc, [sp], #4
    a0e8:	00010488 	.word	0x00010488
    a0ec:	1fff8fc0 	.word	0x1fff8fc0

0000a0f0 <FlexCAN_Ip_Send>:
                                      uint8 mb_idx,
                                      const Flexcan_Ip_DataInfoType * tx_info,
                                      uint32 msg_id,
                                      const uint8 * mb_data
                                     )
{
    a0f0:	b500      	push	{lr}
    a0f2:	b08b      	sub	sp, #44	; 0x2c
    a0f4:	9204      	str	r2, [sp, #16]
    a0f6:	9303      	str	r3, [sp, #12]
    a0f8:	4603      	mov	r3, r0
    a0fa:	f88d 3017 	strb.w	r3, [sp, #23]
    a0fe:	460b      	mov	r3, r1
    a100:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    a104:	2301      	movs	r3, #1
    a106:	9309      	str	r3, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a108:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a10c:	4a1c      	ldr	r2, [pc, #112]	; (a180 <FlexCAN_Ip_Send+0x90>)
    a10e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a112:	9308      	str	r3, [sp, #32]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a114:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a118:	4a1a      	ldr	r2, [pc, #104]	; (a184 <FlexCAN_Ip_Send+0x94>)
    a11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a11e:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif
    if (!FlexCAN_IsListenOnlyModeEnabled(base))
    a120:	9808      	ldr	r0, [sp, #32]
    a122:	f7ff f8f4 	bl	930e <FlexCAN_IsListenOnlyModeEnabled>
    a126:	4603      	mov	r3, r0
    a128:	f083 0301 	eor.w	r3, r3, #1
    a12c:	b2db      	uxtb	r3, r3
    a12e:	2b00      	cmp	r3, #0
    a130:	d021      	beq.n	a176 <FlexCAN_Ip_Send+0x86>
    {
        result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    a132:	f89d 1016 	ldrb.w	r1, [sp, #22]
    a136:	f89d 0017 	ldrb.w	r0, [sp, #23]
    a13a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a13c:	9300      	str	r3, [sp, #0]
    a13e:	9b03      	ldr	r3, [sp, #12]
    a140:	9a04      	ldr	r2, [sp, #16]
    a142:	f7ff fb4b 	bl	97dc <FlexCAN_StartSendData>
    a146:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        if ((FLEXCAN_STATUS_SUCCESS ==  result) && (FALSE == tx_info->is_polling))
    a148:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a14a:	2b00      	cmp	r3, #0
    a14c:	d113      	bne.n	a176 <FlexCAN_Ip_Send+0x86>
    a14e:	9b04      	ldr	r3, [sp, #16]
    a150:	7b1b      	ldrb	r3, [r3, #12]
    a152:	f083 0301 	eor.w	r3, r3, #1
    a156:	b2db      	uxtb	r3, r3
    a158:	2b00      	cmp	r3, #0
    a15a:	d00c      	beq.n	a176 <FlexCAN_Ip_Send+0x86>
        {
            /* Enable message buffer interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    a15c:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a160:	9b07      	ldr	r3, [sp, #28]
    a162:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a166:	f89d 1017 	ldrb.w	r1, [sp, #23]
    a16a:	9300      	str	r3, [sp, #0]
    a16c:	2301      	movs	r3, #1
    a16e:	9808      	ldr	r0, [sp, #32]
    a170:	f002 f9b6 	bl	c4e0 <FlexCAN_SetMsgBuffIntCmd>
    a174:	9009      	str	r0, [sp, #36]	; 0x24
        }
#endif
    }
    return result;
    a176:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    a178:	4618      	mov	r0, r3
    a17a:	b00b      	add	sp, #44	; 0x2c
    a17c:	f85d fb04 	ldr.w	pc, [sp], #4
    a180:	00010488 	.word	0x00010488
    a184:	1fff8fc0 	.word	0x1fff8fc0

0000a188 <FlexCAN_Ip_ConfigRxMb>:
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxMb(uint8 instance,
                                            uint8 mb_idx,
                                            const Flexcan_Ip_DataInfoType * rx_info,
                                            uint32 msg_id
                                           )
{
    a188:	b500      	push	{lr}
    a18a:	b08b      	sub	sp, #44	; 0x2c
    a18c:	9202      	str	r2, [sp, #8]
    a18e:	9301      	str	r3, [sp, #4]
    a190:	4603      	mov	r3, r0
    a192:	f88d 300f 	strb.w	r3, [sp, #15]
    a196:	460b      	mov	r3, r1
    a198:	f88d 300e 	strb.w	r3, [sp, #14]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    a19c:	2300      	movs	r3, #0
    a19e:	9309      	str	r3, [sp, #36]	; 0x24
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a1a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a1a4:	4a19      	ldr	r2, [pc, #100]	; (a20c <FlexCAN_Ip_ConfigRxMb+0x84>)
    a1a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1aa:	9308      	str	r3, [sp, #32]
    }
    else
    {
#endif
        /* Clear the message buffer flag if previous remained triggered */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a1ac:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1b0:	4619      	mov	r1, r3
    a1b2:	9808      	ldr	r0, [sp, #32]
    a1b4:	f7fe ff2c 	bl	9010 <FlexCAN_ClearMsgBuffIntStatusFlag>

        cs.dataLen = rx_info->data_length;
    a1b8:	9b02      	ldr	r3, [sp, #8]
    a1ba:	685b      	ldr	r3, [r3, #4]
    a1bc:	9306      	str	r3, [sp, #24]
        cs.msgIdType = rx_info->msg_id_type;
    a1be:	9b02      	ldr	r3, [sp, #8]
    a1c0:	681b      	ldr	r3, [r3, #0]
    a1c2:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = rx_info->fd_enable;
    a1c4:	9b02      	ldr	r3, [sp, #8]
    a1c6:	7a1b      	ldrb	r3, [r3, #8]
    a1c8:	f88d 301c 	strb.w	r3, [sp, #28]
    #endif

        /* Initialize rx mb*/
        cs.code = (uint32)FLEXCAN_RX_NOT_USED;
    a1cc:	230f      	movs	r3, #15
    a1ce:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    a1d0:	f89d 100e 	ldrb.w	r1, [sp, #14]
    a1d4:	aa04      	add	r2, sp, #16
    a1d6:	9b01      	ldr	r3, [sp, #4]
    a1d8:	9808      	ldr	r0, [sp, #32]
    a1da:	f002 fa25 	bl	c628 <FlexCAN_SetRxMsgBuff>

        /* Initialize receive MB*/
        cs.code = (uint32)FLEXCAN_RX_INACTIVE;
    a1de:	2300      	movs	r3, #0
    a1e0:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    a1e2:	f89d 100e 	ldrb.w	r1, [sp, #14]
    a1e6:	aa04      	add	r2, sp, #16
    a1e8:	9b01      	ldr	r3, [sp, #4]
    a1ea:	9808      	ldr	r0, [sp, #32]
    a1ec:	f002 fa1c 	bl	c628 <FlexCAN_SetRxMsgBuff>

        /* Set up FlexCAN message buffer fields for receiving data*/
        cs.code = (uint32)FLEXCAN_RX_EMPTY;
    a1f0:	2304      	movs	r3, #4
    a1f2:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    a1f4:	f89d 100e 	ldrb.w	r1, [sp, #14]
    a1f8:	aa04      	add	r2, sp, #16
    a1fa:	9b01      	ldr	r3, [sp, #4]
    a1fc:	9808      	ldr	r0, [sp, #32]
    a1fe:	f002 fa13 	bl	c628 <FlexCAN_SetRxMsgBuff>
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    a202:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    a204:	4618      	mov	r0, r3
    a206:	b00b      	add	sp, #44	; 0x2c
    a208:	f85d fb04 	ldr.w	pc, [sp], #4
    a20c:	00010488 	.word	0x00010488

0000a210 <FlexCAN_Ip_Receive>:
Flexcan_Ip_StatusType FlexCAN_Ip_Receive(uint8 instance,
                                         uint8 mb_idx,
                                         Flexcan_Ip_MsgBuffType * data,
                                         boolean isPolling
                                        )
{
    a210:	b500      	push	{lr}
    a212:	b089      	sub	sp, #36	; 0x24
    a214:	9202      	str	r2, [sp, #8]
    a216:	461a      	mov	r2, r3
    a218:	4603      	mov	r3, r0
    a21a:	f88d 300f 	strb.w	r3, [sp, #15]
    a21e:	460b      	mov	r3, r1
    a220:	f88d 300e 	strb.w	r3, [sp, #14]
    a224:	4613      	mov	r3, r2
    a226:	f88d 300d 	strb.w	r3, [sp, #13]

    Flexcan_Ip_StatusType result;
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a22a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a22e:	4a18      	ldr	r2, [pc, #96]	; (a290 <FlexCAN_Ip_Receive+0x80>)
    a230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a234:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a236:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a23a:	4a16      	ldr	r2, [pc, #88]	; (a294 <FlexCAN_Ip_Receive+0x84>)
    a23c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a240:	9305      	str	r3, [sp, #20]
#endif
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    #endif

    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    a242:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a246:	f89d 100e 	ldrb.w	r1, [sp, #14]
    a24a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a24e:	9a02      	ldr	r2, [sp, #8]
    a250:	f7ff fa86 	bl	9760 <FlexCAN_StartRxMessageBufferData>
    a254:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    a256:	9b07      	ldr	r3, [sp, #28]
    a258:	2b00      	cmp	r3, #0
    a25a:	d113      	bne.n	a284 <FlexCAN_Ip_Receive+0x74>
    a25c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a260:	f083 0301 	eor.w	r3, r3, #1
    a264:	b2db      	uxtb	r3, r3
    a266:	2b00      	cmp	r3, #0
    a268:	d00c      	beq.n	a284 <FlexCAN_Ip_Receive+0x74>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    a26a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a26e:	9b05      	ldr	r3, [sp, #20]
    a270:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a274:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a278:	9300      	str	r3, [sp, #0]
    a27a:	2301      	movs	r3, #1
    a27c:	9806      	ldr	r0, [sp, #24]
    a27e:	f002 f92f 	bl	c4e0 <FlexCAN_SetMsgBuffIntCmd>
    a282:	9007      	str	r0, [sp, #28]
    }
#endif
    return result;
    a284:	9b07      	ldr	r3, [sp, #28]
}
    a286:	4618      	mov	r0, r3
    a288:	b009      	add	sp, #36	; 0x24
    a28a:	f85d fb04 	ldr.w	pc, [sp], #4
    a28e:	bf00      	nop
    a290:	00010488 	.word	0x00010488
    a294:	1fff8fc0 	.word	0x1fff8fc0

0000a298 <FlexCAN_Ip_ReceiveBlocking>:
                                                 uint8 mb_idx,
                                                 Flexcan_Ip_MsgBuffType * data,
                                                 boolean isPolling,
                                                 uint32 u32TimeoutMs
                                                )
{
    a298:	b500      	push	{lr}
    a29a:	b08b      	sub	sp, #44	; 0x2c
    a29c:	9202      	str	r2, [sp, #8]
    a29e:	461a      	mov	r2, r3
    a2a0:	4603      	mov	r3, r0
    a2a2:	f88d 300f 	strb.w	r3, [sp, #15]
    a2a6:	460b      	mov	r3, r1
    a2a8:	f88d 300e 	strb.w	r3, [sp, #14]
    a2ac:	4613      	mov	r3, r2
    a2ae:	f88d 300d 	strb.w	r3, [sp, #13]
    Flexcan_Ip_StatusType result;
    uint32 timeStart = 0U;
    a2b2:	2300      	movs	r3, #0
    a2b4:	9304      	str	r3, [sp, #16]
    uint32 timeElapsed = 0U;
    a2b6:	2300      	movs	r3, #0
    a2b8:	9308      	str	r3, [sp, #32]
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a2ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a2bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a2c0:	fb02 f303 	mul.w	r3, r2, r3
    a2c4:	2100      	movs	r1, #0
    a2c6:	4618      	mov	r0, r3
    a2c8:	f7f7 ffbc 	bl	2244 <OsIf_MicrosToTicks>
    a2cc:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a2ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a2d2:	4a4c      	ldr	r2, [pc, #304]	; (a404 <FlexCAN_Ip_ReceiveBlocking+0x16c>)
    a2d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2d8:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a2da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a2de:	4a4a      	ldr	r2, [pc, #296]	; (a408 <FlexCAN_Ip_ReceiveBlocking+0x170>)
    a2e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2e4:	9305      	str	r3, [sp, #20]
#else
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    a2e6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a2ea:	f89d 100e 	ldrb.w	r1, [sp, #14]
    a2ee:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a2f2:	9a02      	ldr	r2, [sp, #8]
    a2f4:	f7ff fa34 	bl	9760 <FlexCAN_StartRxMessageBufferData>
    a2f8:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    a2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a2fc:	2b00      	cmp	r3, #0
    a2fe:	d113      	bne.n	a328 <FlexCAN_Ip_ReceiveBlocking+0x90>
    a300:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a304:	f083 0301 	eor.w	r3, r3, #1
    a308:	b2db      	uxtb	r3, r3
    a30a:	2b00      	cmp	r3, #0
    a30c:	d00c      	beq.n	a328 <FlexCAN_Ip_ReceiveBlocking+0x90>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    a30e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a312:	9b06      	ldr	r3, [sp, #24]
    a314:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a318:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a31c:	9300      	str	r3, [sp, #0]
    a31e:	2301      	movs	r3, #1
    a320:	9805      	ldr	r0, [sp, #20]
    a322:	f002 f8dd 	bl	c4e0 <FlexCAN_SetMsgBuffIntCmd>
    a326:	9009      	str	r0, [sp, #36]	; 0x24
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    a328:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a32a:	2b00      	cmp	r3, #0
    a32c:	d133      	bne.n	a396 <FlexCAN_Ip_ReceiveBlocking+0xfe>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a32e:	2000      	movs	r0, #0
    a330:	f7f7 ff3c 	bl	21ac <OsIf_GetCounter>
    a334:	4603      	mov	r3, r0
    a336:	9304      	str	r3, [sp, #16]
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    a338:	e024      	b.n	a384 <FlexCAN_Ip_ReceiveBlocking+0xec>
        {
            if (TRUE == isPolling)
    a33a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a33e:	2b00      	cmp	r3, #0
    a340:	d010      	beq.n	a364 <FlexCAN_Ip_ReceiveBlocking+0xcc>
            {
                if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    a342:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a346:	4619      	mov	r1, r3
    a348:	9805      	ldr	r0, [sp, #20]
    a34a:	f7fe fe74 	bl	9036 <FlexCAN_GetBuffStatusFlag>
    a34e:	4603      	mov	r3, r0
    a350:	2b00      	cmp	r3, #0
    a352:	d007      	beq.n	a364 <FlexCAN_Ip_ReceiveBlocking+0xcc>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    a354:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a358:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a35c:	4611      	mov	r1, r2
    a35e:	4618      	mov	r0, r3
    a360:	f7ff fb20 	bl	99a4 <FlexCAN_IRQHandlerRxMB>
                }
            }
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a364:	ab04      	add	r3, sp, #16
    a366:	2100      	movs	r1, #0
    a368:	4618      	mov	r0, r3
    a36a:	f7f7 ff38 	bl	21de <OsIf_GetElapsed>
    a36e:	4602      	mov	r2, r0
    a370:	9b08      	ldr	r3, [sp, #32]
    a372:	4413      	add	r3, r2
    a374:	9308      	str	r3, [sp, #32]
            if (timeElapsed >= mS2Ticks)
    a376:	9a08      	ldr	r2, [sp, #32]
    a378:	9b07      	ldr	r3, [sp, #28]
    a37a:	429a      	cmp	r2, r3
    a37c:	d302      	bcc.n	a384 <FlexCAN_Ip_ReceiveBlocking+0xec>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    a37e:	2303      	movs	r3, #3
    a380:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    a382:	e008      	b.n	a396 <FlexCAN_Ip_ReceiveBlocking+0xfe>
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    a384:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a388:	9a06      	ldr	r2, [sp, #24]
    a38a:	011b      	lsls	r3, r3, #4
    a38c:	4413      	add	r3, r2
    a38e:	3304      	adds	r3, #4
    a390:	681b      	ldr	r3, [r3, #0]
    a392:	2b01      	cmp	r3, #1
    a394:	d0d1      	beq.n	a33a <FlexCAN_Ip_ReceiveBlocking+0xa2>
            }
        }
    }

    if ((FLEXCAN_STATUS_TIMEOUT == result) && (FALSE == isPolling))
    a396:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a398:	2b03      	cmp	r3, #3
    a39a:	d112      	bne.n	a3c2 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    a39c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a3a0:	f083 0301 	eor.w	r3, r3, #1
    a3a4:	b2db      	uxtb	r3, r3
    a3a6:	2b00      	cmp	r3, #0
    a3a8:	d00b      	beq.n	a3c2 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    {
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        /* Disable Mb interrupt*/
       (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    a3aa:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a3ae:	9b06      	ldr	r3, [sp, #24]
    a3b0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a3b4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a3b8:	9300      	str	r3, [sp, #0]
    a3ba:	2300      	movs	r3, #0
    a3bc:	9805      	ldr	r0, [sp, #20]
    a3be:	f002 f88f 	bl	c4e0 <FlexCAN_SetMsgBuffIntCmd>
#endif
    }

    if ((FLEXCAN_STATUS_BUFF_OUT_OF_RANGE != result) && (FLEXCAN_STATUS_BUSY != result))
    a3c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a3c4:	2b04      	cmp	r3, #4
    a3c6:	d018      	beq.n	a3fa <FlexCAN_Ip_ReceiveBlocking+0x162>
    a3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a3ca:	2b02      	cmp	r3, #2
    a3cc:	d015      	beq.n	a3fa <FlexCAN_Ip_ReceiveBlocking+0x162>
    {
        if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state))
    a3ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a3d2:	9a06      	ldr	r2, [sp, #24]
    a3d4:	011b      	lsls	r3, r3, #4
    a3d6:	4413      	add	r3, r2
    a3d8:	3304      	adds	r3, #4
    a3da:	681b      	ldr	r3, [r3, #0]
    a3dc:	2b00      	cmp	r3, #0
    a3de:	d102      	bne.n	a3e6 <FlexCAN_Ip_ReceiveBlocking+0x14e>
        {
            result = FLEXCAN_STATUS_SUCCESS;
    a3e0:	2300      	movs	r3, #0
    a3e2:	9309      	str	r3, [sp, #36]	; 0x24
    a3e4:	e009      	b.n	a3fa <FlexCAN_Ip_ReceiveBlocking+0x162>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    a3e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a3ea:	9a06      	ldr	r2, [sp, #24]
    a3ec:	011b      	lsls	r3, r3, #4
    a3ee:	4413      	add	r3, r2
    a3f0:	3304      	adds	r3, #4
    a3f2:	2200      	movs	r2, #0
    a3f4:	601a      	str	r2, [r3, #0]
            result = FLEXCAN_STATUS_TIMEOUT;
    a3f6:	2303      	movs	r3, #3
    a3f8:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    return result;
    a3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    a3fc:	4618      	mov	r0, r3
    a3fe:	b00b      	add	sp, #44	; 0x2c
    a400:	f85d fb04 	ldr.w	pc, [sp], #4
    a404:	1fff8fc0 	.word	0x1fff8fc0
    a408:	00010488 	.word	0x00010488

0000a40c <FlexCAN_Ip_RxFifo>:
 * after the frame was received and read into the specified buffer.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_RxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifo(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    a40c:	b500      	push	{lr}
    a40e:	b085      	sub	sp, #20
    a410:	4603      	mov	r3, r0
    a412:	9100      	str	r1, [sp, #0]
    a414:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a418:	2300      	movs	r3, #0
    a41a:	9303      	str	r3, [sp, #12]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    a41c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a420:	9900      	ldr	r1, [sp, #0]
    a422:	4618      	mov	r0, r3
    a424:	f7ff fa5e 	bl	98e4 <FlexCAN_StartRxMessageFifoData>
    a428:	9003      	str	r0, [sp, #12]
    }
    return result;
    a42a:	9b03      	ldr	r3, [sp, #12]
}
    a42c:	4618      	mov	r0, r3
    a42e:	b005      	add	sp, #20
    a430:	f85d fb04 	ldr.w	pc, [sp], #4

0000a434 <FlexCAN_Ip_RxFifoBlocking>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_RxFifoBlocking_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifoBlocking(uint8 instance, Flexcan_Ip_MsgBuffType *data, uint32 timeout)
{
    a434:	b500      	push	{lr}
    a436:	b087      	sub	sp, #28
    a438:	4603      	mov	r3, r0
    a43a:	9102      	str	r1, [sp, #8]
    a43c:	9201      	str	r2, [sp, #4]
    a43e:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a442:	2300      	movs	r3, #0
    a444:	9305      	str	r3, [sp, #20]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    a446:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a44a:	9902      	ldr	r1, [sp, #8]
    a44c:	4618      	mov	r0, r3
    a44e:	f7ff fa49 	bl	98e4 <FlexCAN_StartRxMessageFifoData>
    a452:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == result)
    a454:	9b05      	ldr	r3, [sp, #20]
    a456:	2b00      	cmp	r3, #0
    a458:	d106      	bne.n	a468 <FlexCAN_Ip_RxFifoBlocking+0x34>
        {
            result = FlexCAN_ProccessLegacyRxFIFO(instance, timeout);
    a45a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a45e:	9901      	ldr	r1, [sp, #4]
    a460:	4618      	mov	r0, r3
    a462:	f7ff f8e2 	bl	962a <FlexCAN_ProccessLegacyRxFIFO>
    a466:	9005      	str	r0, [sp, #20]
        }
    }
    return result;
    a468:	9b05      	ldr	r3, [sp, #20]
}
    a46a:	4618      	mov	r0, r3
    a46c:	b007      	add	sp, #28
    a46e:	f85d fb04 	ldr.w	pc, [sp], #4

0000a472 <FlexCAN_Ip_ConfigRxFifo_Privileged>:
/* implements FlexCAN_Ip_ConfigRxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxFifo_Privileged(uint8 instance,
                                                         Flexcan_Ip_RxFifoIdElementFormatType id_format,
                                                         const Flexcan_Ip_IdTableType * id_filter_table
                                                        )
{
    a472:	b500      	push	{lr}
    a474:	b089      	sub	sp, #36	; 0x24
    a476:	4603      	mov	r3, r0
    a478:	9102      	str	r1, [sp, #8]
    a47a:	9201      	str	r2, [sp, #4]
    a47c:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a480:	2300      	movs	r3, #0
    a482:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a484:	2300      	movs	r3, #0
    a486:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a488:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a48c:	4a1c      	ldr	r2, [pc, #112]	; (a500 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x8e>)
    a48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a492:	9305      	str	r3, [sp, #20]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a494:	9805      	ldr	r0, [sp, #20]
    a496:	f7fe fd61 	bl	8f5c <FlexCAN_IsEnabled>
    a49a:	4603      	mov	r3, r0
    a49c:	2b00      	cmp	r3, #0
    a49e:	bf14      	ite	ne
    a4a0:	2301      	movne	r3, #1
    a4a2:	2300      	moveq	r3, #0
    a4a4:	b2db      	uxtb	r3, r3
    a4a6:	f083 0301 	eor.w	r3, r3, #1
    a4aa:	b2db      	uxtb	r3, r3
    a4ac:	f88d 3013 	strb.w	r3, [sp, #19]
    a4b0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a4b4:	f003 0301 	and.w	r3, r3, #1
    a4b8:	f88d 3013 	strb.w	r3, [sp, #19]

    if (TRUE == disabled)
    a4bc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a4c0:	2b00      	cmp	r3, #0
    a4c2:	d003      	beq.n	a4cc <FlexCAN_Ip_ConfigRxFifo_Privileged+0x5a>
    {
        result = FlexCAN_Enable(pBase);
    a4c4:	9805      	ldr	r0, [sp, #20]
    a4c6:	f001 fd6b 	bl	bfa0 <FlexCAN_Enable>
    a4ca:	9007      	str	r0, [sp, #28]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    a4cc:	9b07      	ldr	r3, [sp, #28]
    a4ce:	2b00      	cmp	r3, #0
    a4d0:	d104      	bne.n	a4dc <FlexCAN_Ip_ConfigRxFifo_Privileged+0x6a>
    {
        /* Initialize rx fifo*/
        FlexCAN_SetRxFifoFilter(pBase, id_format, id_filter_table);
    a4d2:	9a01      	ldr	r2, [sp, #4]
    a4d4:	9902      	ldr	r1, [sp, #8]
    a4d6:	9805      	ldr	r0, [sp, #20]
    a4d8:	f002 fba5 	bl	cc26 <FlexCAN_SetRxFifoFilter>
    }

    if (TRUE == disabled)
    a4dc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a4e0:	2b00      	cmp	r3, #0
    a4e2:	d008      	beq.n	a4f6 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
    {
        status = FlexCAN_Disable(pBase);
    a4e4:	9805      	ldr	r0, [sp, #20]
    a4e6:	f001 fdd9 	bl	c09c <FlexCAN_Disable>
    a4ea:	9006      	str	r0, [sp, #24]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a4ec:	9b06      	ldr	r3, [sp, #24]
    a4ee:	2b00      	cmp	r3, #0
    a4f0:	d001      	beq.n	a4f6 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
        {
            result = status;
    a4f2:	9b06      	ldr	r3, [sp, #24]
    a4f4:	9307      	str	r3, [sp, #28]
        }
    }

    return result;
    a4f6:	9b07      	ldr	r3, [sp, #28]
}
    a4f8:	4618      	mov	r0, r3
    a4fa:	b009      	add	sp, #36	; 0x24
    a4fc:	f85d fb04 	ldr.w	pc, [sp], #4
    a500:	00010488 	.word	0x00010488

0000a504 <FlexCAN_Ip_ConfigRemoteResponseMb>:
                                                        uint8 mb_idx,
                                                        const Flexcan_Ip_DataInfoType *tx_info,
                                                        uint32 msg_id,
                                                        const uint8 *mb_data
                                                       )
{
    a504:	b500      	push	{lr}
    a506:	b08f      	sub	sp, #60	; 0x3c
    a508:	9204      	str	r2, [sp, #16]
    a50a:	9303      	str	r3, [sp, #12]
    a50c:	4603      	mov	r3, r0
    a50e:	f88d 3017 	strb.w	r3, [sp, #23]
    a512:	460b      	mov	r3, r1
    a514:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a518:	2300      	movs	r3, #0
    a51a:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a51c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a520:	4a27      	ldr	r2, [pc, #156]	; (a5c0 <FlexCAN_Ip_ConfigRemoteResponseMb+0xbc>)
    a522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a526:	930c      	str	r3, [sp, #48]	; 0x30
    const Flexcan_Ip_StateType * const state = Flexcan_Ip_apxState[instance];
    a528:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a52c:	4a25      	ldr	r2, [pc, #148]	; (a5c4 <FlexCAN_Ip_ConfigRemoteResponseMb+0xc0>)
    a52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a532:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    a534:	2300      	movs	r3, #0
    a536:	930a      	str	r3, [sp, #40]	; 0x28
    if (TRUE == FlexCAN_IsMbOutOfRange(pBase, mb_idx, state->bIsLegacyFifoEn, state->u32MaxMbNum))
    {
        result = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    a538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a53a:	2b00      	cmp	r3, #0
    a53c:	d13a      	bne.n	a5b4 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
    {
        /* Initialize transmit mb*/
        cs.dataLen = tx_info->data_length;
    a53e:	9b04      	ldr	r3, [sp, #16]
    a540:	685b      	ldr	r3, [r3, #4]
    a542:	9308      	str	r3, [sp, #32]
        cs.msgIdType = tx_info->msg_id_type;
    a544:	9b04      	ldr	r3, [sp, #16]
    a546:	681b      	ldr	r3, [r3, #0]
    a548:	9307      	str	r3, [sp, #28]
        cs.code = (uint32)FLEXCAN_RX_RANSWER;
    a54a:	230a      	movs	r3, #10
    a54c:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = FALSE;
    a54e:	2300      	movs	r3, #0
    a550:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        cs.enable_brs = FALSE;
    a554:	2300      	movs	r3, #0
    a556:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        cs.fd_padding = 0x00U;
    a55a:	2300      	movs	r3, #0
    a55c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
#endif
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    a560:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a564:	4619      	mov	r1, r3
    a566:	980c      	ldr	r0, [sp, #48]	; 0x30
    a568:	f7fe fd52 	bl	9010 <FlexCAN_ClearMsgBuffIntStatusFlag>
        pMbAddr = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    a56c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a570:	4619      	mov	r1, r3
    a572:	980c      	ldr	r0, [sp, #48]	; 0x30
    a574:	f001 fc2c 	bl	bdd0 <FlexCAN_GetMsgBuffRegion>
    a578:	900a      	str	r0, [sp, #40]	; 0x28
        FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, tx_info->is_remote);
    a57a:	9b04      	ldr	r3, [sp, #16]
    a57c:	7adb      	ldrb	r3, [r3, #11]
    a57e:	a906      	add	r1, sp, #24
    a580:	9300      	str	r3, [sp, #0]
    a582:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a584:	9a03      	ldr	r2, [sp, #12]
    a586:	980a      	ldr	r0, [sp, #40]	; 0x28
    a588:	f002 f974 	bl	c874 <FlexCAN_SetTxMsgBuff>
        if (FALSE == tx_info->is_polling)
    a58c:	9b04      	ldr	r3, [sp, #16]
    a58e:	7b1b      	ldrb	r3, [r3, #12]
    a590:	f083 0301 	eor.w	r3, r3, #1
    a594:	b2db      	uxtb	r3, r3
    a596:	2b00      	cmp	r3, #0
    a598:	d00c      	beq.n	a5b4 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
        {
            /* Enable MB interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(pBase, instance, mb_idx, TRUE, state->isIntActive);
    a59a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a59e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5a0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a5a4:	f89d 1017 	ldrb.w	r1, [sp, #23]
    a5a8:	9300      	str	r3, [sp, #0]
    a5aa:	2301      	movs	r3, #1
    a5ac:	980c      	ldr	r0, [sp, #48]	; 0x30
    a5ae:	f001 ff97 	bl	c4e0 <FlexCAN_SetMsgBuffIntCmd>
    a5b2:	900d      	str	r0, [sp, #52]	; 0x34
        }
    }
    return result;
    a5b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    a5b6:	4618      	mov	r0, r3
    a5b8:	b00f      	add	sp, #60	; 0x3c
    a5ba:	f85d fb04 	ldr.w	pc, [sp], #4
    a5be:	bf00      	nop
    a5c0:	00010488 	.word	0x00010488
    a5c4:	1fff8fc0 	.word	0x1fff8fc0

0000a5c8 <FlexCAN_Ip_GetTransferStatus>:
 * or complete (success). In case Enhanced Rx Fifo, mb_idx will be 255.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetTransferStatus_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_GetTransferStatus(uint8 instance, uint8 mb_idx)
{
    a5c8:	b084      	sub	sp, #16
    a5ca:	4603      	mov	r3, r0
    a5cc:	460a      	mov	r2, r1
    a5ce:	f88d 3007 	strb.w	r3, [sp, #7]
    a5d2:	4613      	mov	r3, r2
    a5d4:	f88d 3006 	strb.w	r3, [sp, #6]

    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a5d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a5dc:	4a0d      	ldr	r2, [pc, #52]	; (a614 <FlexCAN_Ip_GetTransferStatus+0x4c>)
    a5de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5e2:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_ERROR;
    a5e4:	2301      	movs	r3, #1
    a5e6:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
#endif

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    a5e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a5ec:	2b1f      	cmp	r3, #31
    a5ee:	d80d      	bhi.n	a60c <FlexCAN_Ip_GetTransferStatus+0x44>
    {
        if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    a5f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a5f4:	9a02      	ldr	r2, [sp, #8]
    a5f6:	011b      	lsls	r3, r3, #4
    a5f8:	4413      	add	r3, r2
    a5fa:	3304      	adds	r3, #4
    a5fc:	681b      	ldr	r3, [r3, #0]
    a5fe:	2b00      	cmp	r3, #0
    a600:	d102      	bne.n	a608 <FlexCAN_Ip_GetTransferStatus+0x40>
        {
            status = FLEXCAN_STATUS_SUCCESS;
    a602:	2300      	movs	r3, #0
    a604:	9303      	str	r3, [sp, #12]
    a606:	e001      	b.n	a60c <FlexCAN_Ip_GetTransferStatus+0x44>
            status = FLEXCAN_STATUS_ERROR;
        }
#endif
        else
        {
            status = FLEXCAN_STATUS_BUSY;
    a608:	2302      	movs	r3, #2
    a60a:	9303      	str	r3, [sp, #12]
            status = FLEXCAN_STATUS_BUSY;
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return status;
    a60c:	9b03      	ldr	r3, [sp, #12]
}
    a60e:	4618      	mov	r0, r3
    a610:	b004      	add	sp, #16
    a612:	4770      	bx	lr
    a614:	1fff8fc0 	.word	0x1fff8fc0

0000a618 <FlexCAN_CompleteRxMessageFifoData>:
 * data and disabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_CompleteRxMessageFifoData(uint8 instance)
{
    a618:	b500      	push	{lr}
    a61a:	b087      	sub	sp, #28
    a61c:	4603      	mov	r3, r0
    a61e:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a622:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a626:	4a1d      	ldr	r2, [pc, #116]	; (a69c <FlexCAN_CompleteRxMessageFifoData+0x84>)
    a628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a62c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a62e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a632:	4a1b      	ldr	r2, [pc, #108]	; (a6a0 <FlexCAN_CompleteRxMessageFifoData+0x88>)
    a634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a638:	9304      	str	r3, [sp, #16]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    a63a:	9b04      	ldr	r3, [sp, #16]
    a63c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    a640:	2b00      	cmp	r3, #0
    a642:	d120      	bne.n	a686 <FlexCAN_CompleteRxMessageFifoData+0x6e>
    {
        /* Disable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, state->isIntActive);
    a644:	9b04      	ldr	r3, [sp, #16]
    a646:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a64a:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a64e:	9300      	str	r3, [sp, #0]
    a650:	2300      	movs	r3, #0
    a652:	2205      	movs	r2, #5
    a654:	9805      	ldr	r0, [sp, #20]
    a656:	f001 ff43 	bl	c4e0 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, state->isIntActive);
    a65a:	9b04      	ldr	r3, [sp, #16]
    a65c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a660:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a664:	9300      	str	r3, [sp, #0]
    a666:	2300      	movs	r3, #0
    a668:	2206      	movs	r2, #6
    a66a:	9805      	ldr	r0, [sp, #20]
    a66c:	f001 ff38 	bl	c4e0 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, state->isIntActive);
    a670:	9b04      	ldr	r3, [sp, #16]
    a672:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a676:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a67a:	9300      	str	r3, [sp, #0]
    a67c:	2300      	movs	r3, #0
    a67e:	2207      	movs	r2, #7
    a680:	9805      	ldr	r0, [sp, #20]
    a682:	f001 ff2d 	bl	c4e0 <FlexCAN_SetMsgBuffIntCmd>
    {
        /* do nothing when transferType is POLLING */
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    /* Clear fifo message*/
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = NULL_PTR;
    a686:	9b04      	ldr	r3, [sp, #16]
    a688:	2200      	movs	r2, #0
    a68a:	601a      	str	r2, [r3, #0]
            state->callback(instance, FLEXCAN_EVENT_DMA_ERROR, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
        }
    }

#else
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    a68c:	9b04      	ldr	r3, [sp, #16]
    a68e:	2200      	movs	r2, #0
    a690:	605a      	str	r2, [r3, #4]
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
}
    a692:	bf00      	nop
    a694:	b007      	add	sp, #28
    a696:	f85d fb04 	ldr.w	pc, [sp], #4
    a69a:	bf00      	nop
    a69c:	00010488 	.word	0x00010488
    a6a0:	1fff8fc0 	.word	0x1fff8fc0

0000a6a4 <FlexCAN_IRQHandler>:
    uint32 endMbIdx
    #if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    ,boolean bEnhancedFifoExisted
    #endif
)
{
    a6a4:	b500      	push	{lr}
    a6a6:	b08b      	sub	sp, #44	; 0x2c
    a6a8:	4603      	mov	r3, r0
    a6aa:	9102      	str	r1, [sp, #8]
    a6ac:	9201      	str	r2, [sp, #4]
    a6ae:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32MbHandle = 0U;
    a6b2:	2300      	movs	r3, #0
    a6b4:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 flag_reg = 0;
    a6b6:	2300      	movs	r3, #0
    a6b8:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a6ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a6be:	4a3f      	ldr	r2, [pc, #252]	; (a7bc <FlexCAN_IRQHandler+0x118>)
    a6c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6c4:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a6c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a6ca:	4a3d      	ldr	r2, [pc, #244]	; (a7c0 <FlexCAN_IRQHandler+0x11c>)
    a6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6d0:	9305      	str	r3, [sp, #20]

    /* Get the interrupts that are enabled and ready */
    uint32 mb_idx = endMbIdx;
    a6d2:	9b01      	ldr	r3, [sp, #4]
    a6d4:	9307      	str	r3, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(endMbIdx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM);
#endif
    /* Check if instance initialized */
    if (NULL_PTR != state)
    a6d6:	9b05      	ldr	r3, [sp, #20]
    a6d8:	2b00      	cmp	r3, #0
    a6da:	d05c      	beq.n	a796 <FlexCAN_IRQHandler+0xf2>
    {
        flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    a6dc:	9907      	ldr	r1, [sp, #28]
    a6de:	9806      	ldr	r0, [sp, #24]
    a6e0:	f7fe fe47 	bl	9372 <FlexCAN_GetMsgBuffIntStatusFlag>
    a6e4:	4603      	mov	r3, r0
    a6e6:	9308      	str	r3, [sp, #32]

        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    a6e8:	e008      	b.n	a6fc <FlexCAN_IRQHandler+0x58>
        {
            mb_idx--;
    a6ea:	9b07      	ldr	r3, [sp, #28]
    a6ec:	3b01      	subs	r3, #1
    a6ee:	9307      	str	r3, [sp, #28]
            flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    a6f0:	9907      	ldr	r1, [sp, #28]
    a6f2:	9806      	ldr	r0, [sp, #24]
    a6f4:	f7fe fe3d 	bl	9372 <FlexCAN_GetMsgBuffIntStatusFlag>
    a6f8:	4603      	mov	r3, r0
    a6fa:	9308      	str	r3, [sp, #32]
        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    a6fc:	9b08      	ldr	r3, [sp, #32]
    a6fe:	2b00      	cmp	r3, #0
    a700:	d103      	bne.n	a70a <FlexCAN_IRQHandler+0x66>
    a702:	9a07      	ldr	r2, [sp, #28]
    a704:	9b02      	ldr	r3, [sp, #8]
    a706:	429a      	cmp	r2, r3
    a708:	d8ef      	bhi.n	a6ea <FlexCAN_IRQHandler+0x46>
        }

        /* Check Tx/Rx interrupt flag and clear the interrupt */
        if (flag_reg != 0U)
    a70a:	9b08      	ldr	r3, [sp, #32]
    a70c:	2b00      	cmp	r3, #0
    a70e:	d050      	beq.n	a7b2 <FlexCAN_IRQHandler+0x10e>
        {
            /* For legacy fifo, mb handler is FLEXCAN_IP_MB_HANDLE_RXFIFO(0) */
            u32MbHandle = mb_idx;
    a710:	9b07      	ldr	r3, [sp, #28]
    a712:	9309      	str	r3, [sp, #36]	; 0x24

            if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    a714:	9b05      	ldr	r3, [sp, #20]
    a716:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    a71a:	2b00      	cmp	r3, #0
    a71c:	d00b      	beq.n	a736 <FlexCAN_IRQHandler+0x92>
    a71e:	9b07      	ldr	r3, [sp, #28]
    a720:	2b07      	cmp	r3, #7
    a722:	d808      	bhi.n	a736 <FlexCAN_IRQHandler+0x92>
            {
                FlexCAN_IRQHandlerRxFIFO(instance, mb_idx);
    a724:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a728:	9907      	ldr	r1, [sp, #28]
    a72a:	4618      	mov	r0, r3
    a72c:	f7ff fac2 	bl	9cb4 <FlexCAN_IRQHandlerRxFIFO>
                u32MbHandle = (uint32)FLEXCAN_IP_MB_HANDLE_RXFIFO;
    a730:	2300      	movs	r3, #0
    a732:	9309      	str	r3, [sp, #36]	; 0x24
    a734:	e00d      	b.n	a752 <FlexCAN_IRQHandler+0xae>
            }
            else
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[u32MbHandle].state)
    a736:	9a05      	ldr	r2, [sp, #20]
    a738:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a73a:	011b      	lsls	r3, r3, #4
    a73c:	4413      	add	r3, r2
    a73e:	3304      	adds	r3, #4
    a740:	681b      	ldr	r3, [r3, #0]
    a742:	2b01      	cmp	r3, #1
    a744:	d105      	bne.n	a752 <FlexCAN_IRQHandler+0xae>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    a746:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a74a:	9907      	ldr	r1, [sp, #28]
    a74c:	4618      	mov	r0, r3
    a74e:	f7ff f929 	bl	99a4 <FlexCAN_IRQHandlerRxMB>
                }
            }

            /* Check mailbox completed transmission */
            if (FLEXCAN_MB_TX_BUSY == state->mbs[u32MbHandle].state)
    a752:	9a05      	ldr	r2, [sp, #20]
    a754:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a756:	011b      	lsls	r3, r3, #4
    a758:	4413      	add	r3, r2
    a75a:	3304      	adds	r3, #4
    a75c:	681b      	ldr	r3, [r3, #0]
    a75e:	2b02      	cmp	r3, #2
    a760:	d105      	bne.n	a76e <FlexCAN_IRQHandler+0xca>
            {
                FlexCAN_IRQHandlerTxMB(instance, mb_idx);
    a762:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a766:	9907      	ldr	r1, [sp, #28]
    a768:	4618      	mov	r0, r3
    a76a:	f7ff fa09 	bl	9b80 <FlexCAN_IRQHandlerTxMB>
            }

            /* Check for spurious interrupt */
            if (FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx) != 0U)
    a76e:	9907      	ldr	r1, [sp, #28]
    a770:	9806      	ldr	r0, [sp, #24]
    a772:	f7fe fdfe 	bl	9372 <FlexCAN_GetMsgBuffIntStatusFlag>
    a776:	4603      	mov	r3, r0
    a778:	2b00      	cmp	r3, #0
    a77a:	d01a      	beq.n	a7b2 <FlexCAN_IRQHandler+0x10e>
            {
                if (state->mbs[u32MbHandle].state == FLEXCAN_MB_IDLE)
    a77c:	9a05      	ldr	r2, [sp, #20]
    a77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a780:	011b      	lsls	r3, r3, #4
    a782:	4413      	add	r3, r2
    a784:	3304      	adds	r3, #4
    a786:	681b      	ldr	r3, [r3, #0]
    a788:	2b00      	cmp	r3, #0
    a78a:	d112      	bne.n	a7b2 <FlexCAN_IRQHandler+0x10e>
                {
                    /* In case of desynchronized status of the MB to avoid trapping in ISR
                    * clear the MB flag */
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a78c:	9907      	ldr	r1, [sp, #28]
    a78e:	9806      	ldr	r0, [sp, #24]
    a790:	f7fe fc3e 	bl	9010 <FlexCAN_ClearMsgBuffIntStatusFlag>
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_UNDERFLOW);
        }
    #endif /* End of (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    }
}
    a794:	e00d      	b.n	a7b2 <FlexCAN_IRQHandler+0x10e>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    a796:	9b02      	ldr	r3, [sp, #8]
    a798:	9307      	str	r3, [sp, #28]
    a79a:	e006      	b.n	a7aa <FlexCAN_IRQHandler+0x106>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a79c:	9907      	ldr	r1, [sp, #28]
    a79e:	9806      	ldr	r0, [sp, #24]
    a7a0:	f7fe fc36 	bl	9010 <FlexCAN_ClearMsgBuffIntStatusFlag>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    a7a4:	9b07      	ldr	r3, [sp, #28]
    a7a6:	3301      	adds	r3, #1
    a7a8:	9307      	str	r3, [sp, #28]
    a7aa:	9a07      	ldr	r2, [sp, #28]
    a7ac:	9b01      	ldr	r3, [sp, #4]
    a7ae:	429a      	cmp	r2, r3
    a7b0:	d9f4      	bls.n	a79c <FlexCAN_IRQHandler+0xf8>
}
    a7b2:	bf00      	nop
    a7b4:	b00b      	add	sp, #44	; 0x2c
    a7b6:	f85d fb04 	ldr.w	pc, [sp], #4
    a7ba:	bf00      	nop
    a7bc:	00010488 	.word	0x00010488
    a7c0:	1fff8fc0 	.word	0x1fff8fc0

0000a7c4 <FlexCAN_Ip_ClearErrorStatus>:
 *                 transmission of a CAN frame.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearErrorStatus_Activity */
void FlexCAN_Ip_ClearErrorStatus(uint8 instance, uint32 error)
{
    a7c4:	b084      	sub	sp, #16
    a7c6:	4603      	mov	r3, r0
    a7c8:	9100      	str	r1, [sp, #0]
    a7ca:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a7ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a7d2:	4a05      	ldr	r2, [pc, #20]	; (a7e8 <FlexCAN_Ip_ClearErrorStatus+0x24>)
    a7d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7d8:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base->ESR1 = error;
    a7da:	9b03      	ldr	r3, [sp, #12]
    a7dc:	9a00      	ldr	r2, [sp, #0]
    a7de:	621a      	str	r2, [r3, #32]
}
    a7e0:	bf00      	nop
    a7e2:	b004      	add	sp, #16
    a7e4:	4770      	bx	lr
    a7e6:	bf00      	nop
    a7e8:	00010488 	.word	0x00010488

0000a7ec <FlexCAN_Ip_GetErrorStatus>:
 *                 transmission of a CAN frame and some general status of the device.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetErrorStatus_Activity */
uint32 FlexCAN_Ip_GetErrorStatus(uint8 instance)
{
    a7ec:	b084      	sub	sp, #16
    a7ee:	4603      	mov	r3, r0
    a7f0:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a7f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a7f8:	4a04      	ldr	r2, [pc, #16]	; (a80c <FlexCAN_Ip_GetErrorStatus+0x20>)
    a7fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7fe:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint32)(base->ESR1);
    a800:	9b03      	ldr	r3, [sp, #12]
    a802:	6a1b      	ldr	r3, [r3, #32]
}
    a804:	4618      	mov	r0, r3
    a806:	b004      	add	sp, #16
    a808:	4770      	bx	lr
    a80a:	bf00      	nop
    a80c:	00010488 	.word	0x00010488

0000a810 <FlexCAN_Ip_GetControllerTxErrorCounter>:
 *                 transmitted messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerTxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerTxErrorCounter(uint8 instance)
{
    a810:	b084      	sub	sp, #16
    a812:	4603      	mov	r3, r0
    a814:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a818:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a81c:	4a04      	ldr	r2, [pc, #16]	; (a830 <FlexCAN_Ip_GetControllerTxErrorCounter+0x20>)
    a81e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a822:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_TXERRCNT_MASK) >> FLEXCAN_ECR_TXERRCNT_SHIFT);
    a824:	9b03      	ldr	r3, [sp, #12]
    a826:	69db      	ldr	r3, [r3, #28]
    a828:	b2db      	uxtb	r3, r3
}
    a82a:	4618      	mov	r0, r3
    a82c:	b004      	add	sp, #16
    a82e:	4770      	bx	lr
    a830:	00010488 	.word	0x00010488

0000a834 <FlexCAN_Ip_GetControllerRxErrorCounter>:
 *                 received messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerRxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerRxErrorCounter(uint8 instance)
{
    a834:	b084      	sub	sp, #16
    a836:	4603      	mov	r3, r0
    a838:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a83c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a840:	4a05      	ldr	r2, [pc, #20]	; (a858 <FlexCAN_Ip_GetControllerRxErrorCounter+0x24>)
    a842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a846:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_RXERRCNT_MASK) >> FLEXCAN_ECR_RXERRCNT_SHIFT);
    a848:	9b03      	ldr	r3, [sp, #12]
    a84a:	69db      	ldr	r3, [r3, #28]
    a84c:	0a1b      	lsrs	r3, r3, #8
    a84e:	b2db      	uxtb	r3, r3
}
    a850:	4618      	mov	r0, r3
    a852:	b004      	add	sp, #16
    a854:	4770      	bx	lr
    a856:	bf00      	nop
    a858:	00010488 	.word	0x00010488

0000a85c <FlexCAN_Error_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements  CAN_X_ERROR_ISR_Activity */
void FlexCAN_Error_IRQHandler(uint8 instance)
{
    a85c:	b510      	push	{r4, lr}
    a85e:	b086      	sub	sp, #24
    a860:	4603      	mov	r3, r0
    a862:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a866:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a86a:	4a29      	ldr	r2, [pc, #164]	; (a910 <FlexCAN_Error_IRQHandler+0xb4>)
    a86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a870:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a872:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a876:	4a27      	ldr	r2, [pc, #156]	; (a914 <FlexCAN_Error_IRQHandler+0xb8>)
    a878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a87c:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    a87e:	2300      	movs	r3, #0
    a880:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check if the instance initialized */
    if (NULL_PTR != state)
    a882:	9b03      	ldr	r3, [sp, #12]
    a884:	2b00      	cmp	r3, #0
    a886:	d03d      	beq.n	a904 <FlexCAN_Error_IRQHandler+0xa8>
    {
        /* Get error status to get value updated */
        u32ErrStatus = pBase->ESR1;
    a888:	9b04      	ldr	r3, [sp, #16]
    a88a:	6a1b      	ldr	r3, [r3, #32]
    a88c:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_MASK))) && ((uint32)0U != (pBase->CTRL1 & ((uint32)FLEXCAN_CTRL1_ERRMSK_MASK))))
    a88e:	9b05      	ldr	r3, [sp, #20]
    a890:	f003 0302 	and.w	r3, r3, #2
    a894:	2b00      	cmp	r3, #0
    a896:	d019      	beq.n	a8cc <FlexCAN_Error_IRQHandler+0x70>
    a898:	9b04      	ldr	r3, [sp, #16]
    a89a:	685b      	ldr	r3, [r3, #4]
    a89c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    a8a0:	2b00      	cmp	r3, #0
    a8a2:	d013      	beq.n	a8cc <FlexCAN_Error_IRQHandler+0x70>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_MASK;
    a8a4:	9b04      	ldr	r3, [sp, #16]
    a8a6:	2202      	movs	r2, #2
    a8a8:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a8aa:	9b03      	ldr	r3, [sp, #12]
    a8ac:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a8b0:	2b00      	cmp	r3, #0
    a8b2:	d00b      	beq.n	a8cc <FlexCAN_Error_IRQHandler+0x70>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR, u32ErrStatus, state);
    a8b4:	9b03      	ldr	r3, [sp, #12]
    a8b6:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a8ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a8be:	9b03      	ldr	r3, [sp, #12]
    a8c0:	9a05      	ldr	r2, [sp, #20]
    a8c2:	2105      	movs	r1, #5
    a8c4:	47a0      	blx	r4
            #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = pBase->ESR1;
    a8c6:	9b04      	ldr	r3, [sp, #16]
    a8c8:	6a1b      	ldr	r3, [r3, #32]
    a8ca:	9305      	str	r3, [sp, #20]
            }
        }

    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Check if this is spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_FAST_MASK))) && ((uint32)0U != (pBase->CTRL2 & ((uint32)FLEXCAN_CTRL2_ERRMSK_FAST_MASK))))
    a8cc:	9b05      	ldr	r3, [sp, #20]
    a8ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    a8d2:	2b00      	cmp	r3, #0
    a8d4:	d019      	beq.n	a90a <FlexCAN_Error_IRQHandler+0xae>
    a8d6:	9b04      	ldr	r3, [sp, #16]
    a8d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a8da:	2b00      	cmp	r3, #0
    a8dc:	da15      	bge.n	a90a <FlexCAN_Error_IRQHandler+0xae>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_FAST_MASK;
    a8de:	9b04      	ldr	r3, [sp, #16]
    a8e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    a8e4:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a8e6:	9b03      	ldr	r3, [sp, #12]
    a8e8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a8ec:	2b00      	cmp	r3, #0
    a8ee:	d00c      	beq.n	a90a <FlexCAN_Error_IRQHandler+0xae>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR_FAST, u32ErrStatus, state);
    a8f0:	9b03      	ldr	r3, [sp, #12]
    a8f2:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a8f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a8fa:	9b03      	ldr	r3, [sp, #12]
    a8fc:	9a05      	ldr	r2, [sp, #20]
    a8fe:	2106      	movs	r1, #6
    a900:	47a0      	blx	r4
    }
    else
    {
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    }
}
    a902:	e002      	b.n	a90a <FlexCAN_Error_IRQHandler+0xae>
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    a904:	9b04      	ldr	r3, [sp, #16]
    a906:	4a04      	ldr	r2, [pc, #16]	; (a918 <FlexCAN_Error_IRQHandler+0xbc>)
    a908:	621a      	str	r2, [r3, #32]
}
    a90a:	bf00      	nop
    a90c:	b006      	add	sp, #24
    a90e:	bd10      	pop	{r4, pc}
    a910:	00010488 	.word	0x00010488
    a914:	1fff8fc0 	.word	0x1fff8fc0
    a918:	00300002 	.word	0x00300002

0000a91c <FlexCAN_BusOff_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements CAN_X_BUSOFF_ISR_Activity */
void FlexCAN_BusOff_IRQHandler(uint8 instance)
{
    a91c:	b510      	push	{r4, lr}
    a91e:	b086      	sub	sp, #24
    a920:	4603      	mov	r3, r0
    a922:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a926:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a92a:	4a3a      	ldr	r2, [pc, #232]	; (aa14 <FlexCAN_BusOff_IRQHandler+0xf8>)
    a92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a930:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a932:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a936:	4a38      	ldr	r2, [pc, #224]	; (aa18 <FlexCAN_BusOff_IRQHandler+0xfc>)
    a938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a93c:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    a93e:	2300      	movs	r3, #0
    a940:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check If Driver initialized */
    if (NULL_PTR != state)
    a942:	9b03      	ldr	r3, [sp, #12]
    a944:	2b00      	cmp	r3, #0
    a946:	d05f      	beq.n	aa08 <FlexCAN_BusOff_IRQHandler+0xec>
    {
        /* Get error status to get value updated */
        u32ErrStatus = base->ESR1;
    a948:	9b04      	ldr	r3, [sp, #16]
    a94a:	6a1b      	ldr	r3, [r3, #32]
    a94c:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_TWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_TWRNMSK_MASK))))
    a94e:	9b05      	ldr	r3, [sp, #20]
    a950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    a954:	2b00      	cmp	r3, #0
    a956:	d01a      	beq.n	a98e <FlexCAN_BusOff_IRQHandler+0x72>
    a958:	9b04      	ldr	r3, [sp, #16]
    a95a:	685b      	ldr	r3, [r3, #4]
    a95c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    a960:	2b00      	cmp	r3, #0
    a962:	d014      	beq.n	a98e <FlexCAN_BusOff_IRQHandler+0x72>
        {
            base->ESR1 = FLEXCAN_ESR1_TWRNINT_MASK;
    a964:	9b04      	ldr	r3, [sp, #16]
    a966:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a96a:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a96c:	9b03      	ldr	r3, [sp, #12]
    a96e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a972:	2b00      	cmp	r3, #0
    a974:	d00b      	beq.n	a98e <FlexCAN_BusOff_IRQHandler+0x72>
            {
                state->error_callback(instance, FLEXCAN_EVENT_TX_WARNING, u32ErrStatus, state);
    a976:	9b03      	ldr	r3, [sp, #12]
    a978:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a97c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a980:	9b03      	ldr	r3, [sp, #12]
    a982:	9a05      	ldr	r2, [sp, #20]
    a984:	2109      	movs	r1, #9
    a986:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    a988:	9b04      	ldr	r3, [sp, #16]
    a98a:	6a1b      	ldr	r3, [r3, #32]
    a98c:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_RWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_RWRNMSK_MASK))))
    a98e:	9b05      	ldr	r3, [sp, #20]
    a990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    a994:	2b00      	cmp	r3, #0
    a996:	d01a      	beq.n	a9ce <FlexCAN_BusOff_IRQHandler+0xb2>
    a998:	9b04      	ldr	r3, [sp, #16]
    a99a:	685b      	ldr	r3, [r3, #4]
    a99c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a9a0:	2b00      	cmp	r3, #0
    a9a2:	d014      	beq.n	a9ce <FlexCAN_BusOff_IRQHandler+0xb2>
        {
            base->ESR1 = FLEXCAN_ESR1_RWRNINT_MASK;
    a9a4:	9b04      	ldr	r3, [sp, #16]
    a9a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a9aa:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a9ac:	9b03      	ldr	r3, [sp, #12]
    a9ae:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a9b2:	2b00      	cmp	r3, #0
    a9b4:	d00b      	beq.n	a9ce <FlexCAN_BusOff_IRQHandler+0xb2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_RX_WARNING, u32ErrStatus, state);
    a9b6:	9b03      	ldr	r3, [sp, #12]
    a9b8:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a9bc:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a9c0:	9b03      	ldr	r3, [sp, #12]
    a9c2:	9a05      	ldr	r2, [sp, #20]
    a9c4:	2108      	movs	r1, #8
    a9c6:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    a9c8:	9b04      	ldr	r3, [sp, #16]
    a9ca:	6a1b      	ldr	r3, [r3, #32]
    a9cc:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_BOFFINT_MASK))) && ((uint32)0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_BOFFMSK_MASK))))
    a9ce:	9b05      	ldr	r3, [sp, #20]
    a9d0:	f003 0304 	and.w	r3, r3, #4
    a9d4:	2b00      	cmp	r3, #0
    a9d6:	d01a      	beq.n	aa0e <FlexCAN_BusOff_IRQHandler+0xf2>
    a9d8:	9b04      	ldr	r3, [sp, #16]
    a9da:	685b      	ldr	r3, [r3, #4]
    a9dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a9e0:	2b00      	cmp	r3, #0
    a9e2:	d014      	beq.n	aa0e <FlexCAN_BusOff_IRQHandler+0xf2>
        {
            base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    a9e4:	9b04      	ldr	r3, [sp, #16]
    a9e6:	2204      	movs	r2, #4
    a9e8:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a9ea:	9b03      	ldr	r3, [sp, #12]
    a9ec:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a9f0:	2b00      	cmp	r3, #0
    a9f2:	d00c      	beq.n	aa0e <FlexCAN_BusOff_IRQHandler+0xf2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    a9f4:	9b03      	ldr	r3, [sp, #12]
    a9f6:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a9fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a9fe:	9b03      	ldr	r3, [sp, #12]
    aa00:	9a05      	ldr	r2, [sp, #20]
    aa02:	2107      	movs	r1, #7
    aa04:	47a0      	blx	r4
    }
    else
    {
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    }
}
    aa06:	e002      	b.n	aa0e <FlexCAN_BusOff_IRQHandler+0xf2>
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    aa08:	9b04      	ldr	r3, [sp, #16]
    aa0a:	4a04      	ldr	r2, [pc, #16]	; (aa1c <FlexCAN_BusOff_IRQHandler+0x100>)
    aa0c:	621a      	str	r2, [r3, #32]
}
    aa0e:	bf00      	nop
    aa10:	b006      	add	sp, #24
    aa12:	bd10      	pop	{r4, pc}
    aa14:	00010488 	.word	0x00010488
    aa18:	1fff8fc0 	.word	0x1fff8fc0
    aa1c:	000b0004 	.word	0x000b0004

0000aa20 <FlexCAN_Ip_SendBlocking>:
                                              const Flexcan_Ip_DataInfoType * tx_info,
                                              uint32 msg_id,
                                              const uint8 * mb_data,
                                              uint32 timeout_ms
                                             )
{
    aa20:	b500      	push	{lr}
    aa22:	b091      	sub	sp, #68	; 0x44
    aa24:	9204      	str	r2, [sp, #16]
    aa26:	9303      	str	r3, [sp, #12]
    aa28:	4603      	mov	r3, r0
    aa2a:	f88d 3017 	strb.w	r3, [sp, #23]
    aa2e:	460b      	mov	r3, r1
    aa30:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    aa34:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aa38:	4a5f      	ldr	r2, [pc, #380]	; (abb8 <FlexCAN_Ip_SendBlocking+0x198>)
    aa3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa3e:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    aa40:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aa44:	4a5d      	ldr	r2, [pc, #372]	; (abbc <FlexCAN_Ip_SendBlocking+0x19c>)
    aa46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa4a:	930c      	str	r3, [sp, #48]	; 0x30

    uint32 timeStart = 0U;
    aa4c:	2300      	movs	r3, #0
    aa4e:	9307      	str	r3, [sp, #28]
    uint32 timeElapsed = 0U;
    aa50:	2300      	movs	r3, #0
    aa52:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 mS2Ticks = OsIf_MicrosToTicks((timeout_ms * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    aa54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aa56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    aa5a:	fb02 f303 	mul.w	r3, r2, r3
    aa5e:	2100      	movs	r1, #0
    aa60:	4618      	mov	r0, r3
    aa62:	f7f7 fbef 	bl	2244 <OsIf_MicrosToTicks>
    aa66:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32 uS2Ticks = 0U;
    aa68:	2300      	movs	r3, #0
    aa6a:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 flexcan_mb_config = 0;
    aa6c:	2300      	movs	r3, #0
    aa6e:	9309      	str	r3, [sp, #36]	; 0x24

    volatile uint32 * flexcan_mb = NULL_PTR;
    aa70:	2300      	movs	r3, #0
    aa72:	9308      	str	r3, [sp, #32]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif

    result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    aa74:	f89d 1016 	ldrb.w	r1, [sp, #22]
    aa78:	f89d 0017 	ldrb.w	r0, [sp, #23]
    aa7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    aa7e:	9300      	str	r3, [sp, #0]
    aa80:	9b03      	ldr	r3, [sp, #12]
    aa82:	9a04      	ldr	r2, [sp, #16]
    aa84:	f7fe feaa 	bl	97dc <FlexCAN_StartSendData>
    aa88:	900f      	str	r0, [sp, #60]	; 0x3c

    if (FLEXCAN_STATUS_SUCCESS == result)
    aa8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aa8c:	2b00      	cmp	r3, #0
    aa8e:	f040 808d 	bne.w	abac <FlexCAN_Ip_SendBlocking+0x18c>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    aa92:	2000      	movs	r0, #0
    aa94:	f7f7 fb8a 	bl	21ac <OsIf_GetCounter>
    aa98:	4603      	mov	r3, r0
    aa9a:	9307      	str	r3, [sp, #28]
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    aa9c:	e00f      	b.n	aabe <FlexCAN_Ip_SendBlocking+0x9e>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    aa9e:	ab07      	add	r3, sp, #28
    aaa0:	2100      	movs	r1, #0
    aaa2:	4618      	mov	r0, r3
    aaa4:	f7f7 fb9b 	bl	21de <OsIf_GetElapsed>
    aaa8:	4602      	mov	r2, r0
    aaaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    aaac:	4413      	add	r3, r2
    aaae:	930e      	str	r3, [sp, #56]	; 0x38
            if (timeElapsed >= mS2Ticks)
    aab0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    aab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aab4:	429a      	cmp	r2, r3
    aab6:	d302      	bcc.n	aabe <FlexCAN_Ip_SendBlocking+0x9e>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    aab8:	2303      	movs	r3, #3
    aaba:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
    aabc:	e008      	b.n	aad0 <FlexCAN_Ip_SendBlocking+0xb0>
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    aabe:	f89d 3016 	ldrb.w	r3, [sp, #22]
    aac2:	4619      	mov	r1, r3
    aac4:	980d      	ldr	r0, [sp, #52]	; 0x34
    aac6:	f7fe fab6 	bl	9036 <FlexCAN_GetBuffStatusFlag>
    aaca:	4603      	mov	r3, r0
    aacc:	2b01      	cmp	r3, #1
    aace:	d1e6      	bne.n	aa9e <FlexCAN_Ip_SendBlocking+0x7e>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == result) && (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE))
    aad0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aad2:	2b03      	cmp	r3, #3
    aad4:	d15c      	bne.n	ab90 <FlexCAN_Ip_SendBlocking+0x170>
    aad6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    aada:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    aadc:	011b      	lsls	r3, r3, #4
    aade:	4413      	add	r3, r2
    aae0:	3304      	adds	r3, #4
    aae2:	681b      	ldr	r3, [r3, #0]
    aae4:	2b00      	cmp	r3, #0
    aae6:	d053      	beq.n	ab90 <FlexCAN_Ip_SendBlocking+0x170>
        {
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    aae8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    aaec:	4619      	mov	r1, r3
    aaee:	980d      	ldr	r0, [sp, #52]	; 0x34
    aaf0:	f7fe fa8e 	bl	9010 <FlexCAN_ClearMsgBuffIntStatusFlag>
                flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    aaf4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    aaf8:	4619      	mov	r1, r3
    aafa:	980d      	ldr	r0, [sp, #52]	; 0x34
    aafc:	f001 f968 	bl	bdd0 <FlexCAN_GetMsgBuffRegion>
    ab00:	9008      	str	r0, [sp, #32]
                flexcan_mb_config = * flexcan_mb;
    ab02:	9b08      	ldr	r3, [sp, #32]
    ab04:	681b      	ldr	r3, [r3, #0]
    ab06:	9309      	str	r3, [sp, #36]	; 0x24
                /* Reset the code */
                flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    ab08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ab0a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    ab0e:	9309      	str	r3, [sp, #36]	; 0x24
                flexcan_mb_config |= ((uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    ab10:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ab12:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    ab16:	9309      	str	r3, [sp, #36]	; 0x24
                *flexcan_mb = flexcan_mb_config;
    ab18:	9b08      	ldr	r3, [sp, #32]
    ab1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ab1c:	601a      	str	r2, [r3, #0]

                /* Wait to finish abort operation */
                uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ab1e:	2100      	movs	r1, #0
    ab20:	4827      	ldr	r0, [pc, #156]	; (abc0 <FlexCAN_Ip_SendBlocking+0x1a0>)
    ab22:	f7f7 fb8f 	bl	2244 <OsIf_MicrosToTicks>
    ab26:	900a      	str	r0, [sp, #40]	; 0x28
                timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ab28:	2000      	movs	r0, #0
    ab2a:	f7f7 fb3f 	bl	21ac <OsIf_GetCounter>
    ab2e:	4603      	mov	r3, r0
    ab30:	9307      	str	r3, [sp, #28]
                 timeElapsed = 0U;
    ab32:	2300      	movs	r3, #0
    ab34:	930e      	str	r3, [sp, #56]	; 0x38
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    ab36:	e00f      	b.n	ab58 <FlexCAN_Ip_SendBlocking+0x138>
                {
                    timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ab38:	ab07      	add	r3, sp, #28
    ab3a:	2100      	movs	r1, #0
    ab3c:	4618      	mov	r0, r3
    ab3e:	f7f7 fb4e 	bl	21de <OsIf_GetElapsed>
    ab42:	4602      	mov	r2, r0
    ab44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ab46:	4413      	add	r3, r2
    ab48:	930e      	str	r3, [sp, #56]	; 0x38
                    if (timeElapsed >= uS2Ticks)
    ab4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ab4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ab4e:	429a      	cmp	r2, r3
    ab50:	d302      	bcc.n	ab58 <FlexCAN_Ip_SendBlocking+0x138>
                    {
                        result = FLEXCAN_STATUS_TIMEOUT;
    ab52:	2303      	movs	r3, #3
    ab54:	930f      	str	r3, [sp, #60]	; 0x3c
                        break;
    ab56:	e008      	b.n	ab6a <FlexCAN_Ip_SendBlocking+0x14a>
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    ab58:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ab5c:	4619      	mov	r1, r3
    ab5e:	980d      	ldr	r0, [sp, #52]	; 0x34
    ab60:	f7fe fa69 	bl	9036 <FlexCAN_GetBuffStatusFlag>
    ab64:	4603      	mov	r3, r0
    ab66:	2b00      	cmp	r3, #0
    ab68:	d0e6      	beq.n	ab38 <FlexCAN_Ip_SendBlocking+0x118>
                    }
                }

                flexcan_mb_config = *flexcan_mb;
    ab6a:	9b08      	ldr	r3, [sp, #32]
    ab6c:	681b      	ldr	r3, [r3, #0]
    ab6e:	9309      	str	r3, [sp, #36]	; 0x24
                /* Check if the MBs have been safely Inactivated */
                if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    ab70:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ab72:	0e1b      	lsrs	r3, r3, #24
    ab74:	f003 030f 	and.w	r3, r3, #15
    ab78:	2b08      	cmp	r3, #8
    ab7a:	d101      	bne.n	ab80 <FlexCAN_Ip_SendBlocking+0x160>
                {
                    /* Transmission have occurred */
                    result = FLEXCAN_STATUS_SUCCESS;
    ab7c:	2300      	movs	r3, #0
    ab7e:	930f      	str	r3, [sp, #60]	; 0x3c
                }

                if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    ab80:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ab82:	0e1b      	lsrs	r3, r3, #24
    ab84:	f003 030f 	and.w	r3, r3, #15
    ab88:	2b09      	cmp	r3, #9
    ab8a:	d101      	bne.n	ab90 <FlexCAN_Ip_SendBlocking+0x170>
                {
                    /* Transmission have been aborted */
                    result = FLEXCAN_STATUS_TIMEOUT;
    ab8c:	2303      	movs	r3, #3
    ab8e:	930f      	str	r3, [sp, #60]	; 0x3c
                }
        }

        /* Clear message buffer flag */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    ab90:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ab94:	4619      	mov	r1, r3
    ab96:	980d      	ldr	r0, [sp, #52]	; 0x34
    ab98:	f7fe fa3a 	bl	9010 <FlexCAN_ClearMsgBuffIntStatusFlag>

        state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    ab9c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    aba0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    aba2:	011b      	lsls	r3, r3, #4
    aba4:	4413      	add	r3, r2
    aba6:	3304      	adds	r3, #4
    aba8:	2200      	movs	r2, #0
    abaa:	601a      	str	r2, [r3, #0]
    }
    return result;
    abac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
    abae:	4618      	mov	r0, r3
    abb0:	b011      	add	sp, #68	; 0x44
    abb2:	f85d fb04 	ldr.w	pc, [sp], #4
    abb6:	bf00      	nop
    abb8:	00010488 	.word	0x00010488
    abbc:	1fff8fc0 	.word	0x1fff8fc0
    abc0:	000f4240 	.word	0x000f4240

0000abc4 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_SetRxMbGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMbGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    abc4:	b500      	push	{lr}
    abc6:	b087      	sub	sp, #28
    abc8:	4603      	mov	r3, r0
    abca:	9100      	str	r1, [sp, #0]
    abcc:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    abd0:	2300      	movs	r3, #0
    abd2:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    abd4:	2300      	movs	r3, #0
    abd6:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    abd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    abdc:	4a1c      	ldr	r2, [pc, #112]	; (ac50 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x8c>)
    abde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abe2:	9303      	str	r3, [sp, #12]
#endif

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    abe4:	9803      	ldr	r0, [sp, #12]
    abe6:	f7fe f9b9 	bl	8f5c <FlexCAN_IsEnabled>
    abea:	4603      	mov	r3, r0
    abec:	2b00      	cmp	r3, #0
    abee:	bf14      	ite	ne
    abf0:	2301      	movne	r3, #1
    abf2:	2300      	moveq	r3, #0
    abf4:	b2db      	uxtb	r3, r3
    abf6:	f083 0301 	eor.w	r3, r3, #1
    abfa:	b2db      	uxtb	r3, r3
    abfc:	f88d 300b 	strb.w	r3, [sp, #11]
    ac00:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ac04:	f003 0301 	and.w	r3, r3, #1
    ac08:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    ac0c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ac10:	2b00      	cmp	r3, #0
    ac12:	d003      	beq.n	ac1c <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    ac14:	9803      	ldr	r0, [sp, #12]
    ac16:	f001 f9c3 	bl	bfa0 <FlexCAN_Enable>
    ac1a:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    ac1c:	9b05      	ldr	r3, [sp, #20]
    ac1e:	2b00      	cmp	r3, #0
    ac20:	d103      	bne.n	ac2a <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxMsgBuffGlobalMask(pBase, mask);
    ac22:	9900      	ldr	r1, [sp, #0]
    ac24:	9803      	ldr	r0, [sp, #12]
    ac26:	f7fe fbc3 	bl	93b0 <FlexCAN_SetRxMsgBuffGlobalMask>
    }

    if (TRUE == disabled)
    ac2a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ac2e:	2b00      	cmp	r3, #0
    ac30:	d008      	beq.n	ac44 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    ac32:	9803      	ldr	r0, [sp, #12]
    ac34:	f001 fa32 	bl	c09c <FlexCAN_Disable>
    ac38:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    ac3a:	9b04      	ldr	r3, [sp, #16]
    ac3c:	2b00      	cmp	r3, #0
    ac3e:	d001      	beq.n	ac44 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
        {
            result = status;
    ac40:	9b04      	ldr	r3, [sp, #16]
    ac42:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    ac44:	9b05      	ldr	r3, [sp, #20]
}
    ac46:	4618      	mov	r0, r3
    ac48:	b007      	add	sp, #28
    ac4a:	f85d fb04 	ldr.w	pc, [sp], #4
    ac4e:	bf00      	nop
    ac50:	00010488 	.word	0x00010488

0000ac54 <FlexCAN_Ip_EnterFreezeMode_Privileged>:
 * Description   : Enter Driver In freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnterFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnterFreezeMode_Privileged(uint8 instance)
{
    ac54:	b500      	push	{lr}
    ac56:	b085      	sub	sp, #20
    ac58:	4603      	mov	r3, r0
    ac5a:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    ac5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac62:	4a06      	ldr	r2, [pc, #24]	; (ac7c <FlexCAN_Ip_EnterFreezeMode_Privileged+0x28>)
    ac64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac68:	9303      	str	r3, [sp, #12]
        return FlexCAN_EnterFreezeMode(base);
    ac6a:	9803      	ldr	r0, [sp, #12]
    ac6c:	f001 f94c 	bl	bf08 <FlexCAN_EnterFreezeMode>
    ac70:	4603      	mov	r3, r0
}
    ac72:	4618      	mov	r0, r3
    ac74:	b005      	add	sp, #20
    ac76:	f85d fb04 	ldr.w	pc, [sp], #4
    ac7a:	bf00      	nop
    ac7c:	00010488 	.word	0x00010488

0000ac80 <FlexCAN_Ip_ExitFreezeMode_Privileged>:
 * Description   : Exit Driver from freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ExitFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ExitFreezeMode_Privileged(uint8 instance)
{
    ac80:	b500      	push	{lr}
    ac82:	b085      	sub	sp, #20
    ac84:	4603      	mov	r3, r0
    ac86:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    ac8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac8e:	4a06      	ldr	r2, [pc, #24]	; (aca8 <FlexCAN_Ip_ExitFreezeMode_Privileged+0x28>)
    ac90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac94:	9303      	str	r3, [sp, #12]
        return FlexCAN_ExitFreezeMode(base);
    ac96:	9803      	ldr	r0, [sp, #12]
    ac98:	f001 f9be 	bl	c018 <FlexCAN_ExitFreezeMode>
    ac9c:	4603      	mov	r3, r0
}
    ac9e:	4618      	mov	r0, r3
    aca0:	b005      	add	sp, #20
    aca2:	f85d fb04 	ldr.w	pc, [sp], #4
    aca6:	bf00      	nop
    aca8:	00010488 	.word	0x00010488

0000acac <FlexCAN_Ip_SetRxIndividualMask_Privileged>:
 * Description   : Set Rx individual mask as absolute value provided by mask parameter
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxIndividualMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxIndividualMask_Privileged(uint8 instance, uint8 mb_idx, uint32 mask)
{
    acac:	b500      	push	{lr}
    acae:	b087      	sub	sp, #28
    acb0:	4603      	mov	r3, r0
    acb2:	9200      	str	r2, [sp, #0]
    acb4:	f88d 3007 	strb.w	r3, [sp, #7]
    acb8:	460b      	mov	r3, r1
    acba:	f88d 3006 	strb.w	r3, [sp, #6]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    acbe:	2300      	movs	r3, #0
    acc0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    acc2:	2300      	movs	r3, #0
    acc4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    acc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    acca:	4a1e      	ldr	r2, [pc, #120]	; (ad44 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x98>)
    accc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acd0:	9303      	str	r3, [sp, #12]
    }
    else
    {
#endif

    boolean disabled = !FlexCAN_IsEnabled(pBase);
    acd2:	9803      	ldr	r0, [sp, #12]
    acd4:	f7fe f942 	bl	8f5c <FlexCAN_IsEnabled>
    acd8:	4603      	mov	r3, r0
    acda:	2b00      	cmp	r3, #0
    acdc:	bf14      	ite	ne
    acde:	2301      	movne	r3, #1
    ace0:	2300      	moveq	r3, #0
    ace2:	b2db      	uxtb	r3, r3
    ace4:	f083 0301 	eor.w	r3, r3, #1
    ace8:	b2db      	uxtb	r3, r3
    acea:	f88d 300b 	strb.w	r3, [sp, #11]
    acee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    acf2:	f003 0301 	and.w	r3, r3, #1
    acf6:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    acfa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    acfe:	2b00      	cmp	r3, #0
    ad00:	d003      	beq.n	ad0a <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    ad02:	9803      	ldr	r0, [sp, #12]
    ad04:	f001 f94c 	bl	bfa0 <FlexCAN_Enable>
    ad08:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    ad0a:	9b05      	ldr	r3, [sp, #20]
    ad0c:	2b00      	cmp	r3, #0
    ad0e:	d106      	bne.n	ad1e <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x72>
    {
        FlexCAN_SetRxIndividualMask(pBase, mb_idx, mask);
    ad10:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ad14:	9a00      	ldr	r2, [sp, #0]
    ad16:	4619      	mov	r1, r3
    ad18:	9803      	ldr	r0, [sp, #12]
    ad1a:	f7fe fb52 	bl	93c2 <FlexCAN_SetRxIndividualMask>
    }

    if (TRUE == disabled)
    ad1e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad22:	2b00      	cmp	r3, #0
    ad24:	d008      	beq.n	ad38 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    ad26:	9803      	ldr	r0, [sp, #12]
    ad28:	f001 f9b8 	bl	c09c <FlexCAN_Disable>
    ad2c:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    ad2e:	9b04      	ldr	r3, [sp, #16]
    ad30:	2b00      	cmp	r3, #0
    ad32:	d001      	beq.n	ad38 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
        {
            result = status;
    ad34:	9b04      	ldr	r3, [sp, #16]
    ad36:	9305      	str	r3, [sp, #20]
        }
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    ad38:	9b05      	ldr	r3, [sp, #20]
}
    ad3a:	4618      	mov	r0, r3
    ad3c:	b007      	add	sp, #28
    ad3e:	f85d fb04 	ldr.w	pc, [sp], #4
    ad42:	bf00      	nop
    ad44:	00010488 	.word	0x00010488

0000ad48 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>:
 * Description   : Set RxFifo Global Mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxFifoGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxFifoGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    ad48:	b500      	push	{lr}
    ad4a:	b087      	sub	sp, #28
    ad4c:	4603      	mov	r3, r0
    ad4e:	9100      	str	r1, [sp, #0]
    ad50:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ad54:	2300      	movs	r3, #0
    ad56:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    ad58:	2300      	movs	r3, #0
    ad5a:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    ad5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ad60:	4a1c      	ldr	r2, [pc, #112]	; (add4 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x8c>)
    ad62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad66:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    ad68:	9803      	ldr	r0, [sp, #12]
    ad6a:	f7fe f8f7 	bl	8f5c <FlexCAN_IsEnabled>
    ad6e:	4603      	mov	r3, r0
    ad70:	2b00      	cmp	r3, #0
    ad72:	bf14      	ite	ne
    ad74:	2301      	movne	r3, #1
    ad76:	2300      	moveq	r3, #0
    ad78:	b2db      	uxtb	r3, r3
    ad7a:	f083 0301 	eor.w	r3, r3, #1
    ad7e:	b2db      	uxtb	r3, r3
    ad80:	f88d 300b 	strb.w	r3, [sp, #11]
    ad84:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad88:	f003 0301 	and.w	r3, r3, #1
    ad8c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    ad90:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad94:	2b00      	cmp	r3, #0
    ad96:	d003      	beq.n	ada0 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    ad98:	9803      	ldr	r0, [sp, #12]
    ad9a:	f001 f901 	bl	bfa0 <FlexCAN_Enable>
    ad9e:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    ada0:	9b05      	ldr	r3, [sp, #20]
    ada2:	2b00      	cmp	r3, #0
    ada4:	d103      	bne.n	adae <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxFifoGlobalMask(pBase, mask);
    ada6:	9900      	ldr	r1, [sp, #0]
    ada8:	9803      	ldr	r0, [sp, #12]
    adaa:	f7fe f8a7 	bl	8efc <FlexCAN_SetRxFifoGlobalMask>
    }

    if (TRUE == disabled)
    adae:	f89d 300b 	ldrb.w	r3, [sp, #11]
    adb2:	2b00      	cmp	r3, #0
    adb4:	d008      	beq.n	adc8 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    adb6:	9803      	ldr	r0, [sp, #12]
    adb8:	f001 f970 	bl	c09c <FlexCAN_Disable>
    adbc:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    adbe:	9b04      	ldr	r3, [sp, #16]
    adc0:	2b00      	cmp	r3, #0
    adc2:	d001      	beq.n	adc8 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
        {
            result = status;
    adc4:	9b04      	ldr	r3, [sp, #16]
    adc6:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    adc8:	9b05      	ldr	r3, [sp, #20]
}
    adca:	4618      	mov	r0, r3
    adcc:	b007      	add	sp, #28
    adce:	f85d fb04 	ldr.w	pc, [sp], #4
    add2:	bf00      	nop
    add4:	00010488 	.word	0x00010488

0000add8 <FlexCAN_Ip_Deinit_Privileged>:
 * This function will disable all FlexCAN interrupts, and disable the FlexCAN.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_Deinit_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Deinit_Privileged(uint8 instance)
{
    add8:	b500      	push	{lr}
    adda:	b085      	sub	sp, #20
    addc:	4603      	mov	r3, r0
    adde:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    ade2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ade6:	4a0e      	ldr	r2, [pc, #56]	; (ae20 <FlexCAN_Ip_Deinit_Privileged+0x48>)
    ade8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adec:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Enter Freeze Mode Required before to enter Disabled Mode */
    result = FlexCAN_EnterFreezeMode(base);
    adee:	9803      	ldr	r0, [sp, #12]
    adf0:	f001 f88a 	bl	bf08 <FlexCAN_EnterFreezeMode>
    adf4:	9002      	str	r0, [sp, #8]
    if (FLEXCAN_STATUS_SUCCESS == result)
    adf6:	9b02      	ldr	r3, [sp, #8]
    adf8:	2b00      	cmp	r3, #0
    adfa:	d10b      	bne.n	ae14 <FlexCAN_Ip_Deinit_Privileged+0x3c>
    {
        /* Reset registers */
        FlexCAN_SetRegDefaultVal(base);
    adfc:	9803      	ldr	r0, [sp, #12]
    adfe:	f7fe fb18 	bl	9432 <FlexCAN_SetRegDefaultVal>
        /* wait for disable */
        (void)FlexCAN_Disable(base);
    ae02:	9803      	ldr	r0, [sp, #12]
    ae04:	f001 f94a 	bl	c09c <FlexCAN_Disable>
        /* Clear state pointer that is checked by FLEXCAN_DRV_Init */
        Flexcan_Ip_apxState[instance] = NULL_PTR;
    ae08:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae0c:	4a05      	ldr	r2, [pc, #20]	; (ae24 <FlexCAN_Ip_Deinit_Privileged+0x4c>)
    ae0e:	2100      	movs	r1, #0
    ae10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OsIf_Trusted_Call1param(FlexCAN_ClrUserAccessAllowed, base);
        }
    #endif
    }

    return result;
    ae14:	9b02      	ldr	r3, [sp, #8]
}
    ae16:	4618      	mov	r0, r3
    ae18:	b005      	add	sp, #20
    ae1a:	f85d fb04 	ldr.w	pc, [sp], #4
    ae1e:	bf00      	nop
    ae20:	00010488 	.word	0x00010488
    ae24:	1fff8fc0 	.word	0x1fff8fc0

0000ae28 <FlexCAN_Ip_MainFunctionRead>:
 * This function read the messages received as pulling or if the Interrupts are disabled.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionRead_Activity */
void FlexCAN_Ip_MainFunctionRead(uint8 instance, uint8 mb_idx)
{
    ae28:	b500      	push	{lr}
    ae2a:	b085      	sub	sp, #20
    ae2c:	4603      	mov	r3, r0
    ae2e:	460a      	mov	r2, r1
    ae30:	f88d 3007 	strb.w	r3, [sp, #7]
    ae34:	4613      	mov	r3, r2
    ae36:	f88d 3006 	strb.w	r3, [sp, #6]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    ae3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae3e:	4a22      	ldr	r2, [pc, #136]	; (aec8 <FlexCAN_Ip_MainFunctionRead+0xa0>)
    ae40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae44:	9303      	str	r3, [sp, #12]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    ae46:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae4a:	4a20      	ldr	r2, [pc, #128]	; (aecc <FlexCAN_Ip_MainFunctionRead+0xa4>)
    ae4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae50:	9302      	str	r3, [sp, #8]
        }
    }
    else
    {
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
        if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    ae52:	9b02      	ldr	r3, [sp, #8]
    ae54:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    ae58:	2b00      	cmp	r3, #0
    ae5a:	d015      	beq.n	ae88 <FlexCAN_Ip_MainFunctionRead+0x60>
    ae5c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ae60:	2b07      	cmp	r3, #7
    ae62:	d811      	bhi.n	ae88 <FlexCAN_Ip_MainFunctionRead+0x60>
        {
            /* just process available legacy fifo event only */
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    ae64:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ae68:	2b00      	cmp	r3, #0
    ae6a:	d128      	bne.n	aebe <FlexCAN_Ip_MainFunctionRead+0x96>
            {
                if (FlexCAN_GetBuffStatusFlag(base, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE) != 0U)
    ae6c:	2105      	movs	r1, #5
    ae6e:	9803      	ldr	r0, [sp, #12]
    ae70:	f7fe f8e1 	bl	9036 <FlexCAN_GetBuffStatusFlag>
    ae74:	4603      	mov	r3, r0
    ae76:	2b00      	cmp	r3, #0
    ae78:	d021      	beq.n	aebe <FlexCAN_Ip_MainFunctionRead+0x96>
                {
                    FlexCAN_IRQHandlerRxFIFO(instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE);
    ae7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae7e:	2105      	movs	r1, #5
    ae80:	4618      	mov	r0, r3
    ae82:	f7fe ff17 	bl	9cb4 <FlexCAN_IRQHandlerRxFIFO>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    ae86:	e01a      	b.n	aebe <FlexCAN_Ip_MainFunctionRead+0x96>
                }
            }
        }
        else
        {
            if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    ae88:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ae8c:	4619      	mov	r1, r3
    ae8e:	9803      	ldr	r0, [sp, #12]
    ae90:	f7fe f8d1 	bl	9036 <FlexCAN_GetBuffStatusFlag>
    ae94:	4603      	mov	r3, r0
    ae96:	2b00      	cmp	r3, #0
    ae98:	d012      	beq.n	aec0 <FlexCAN_Ip_MainFunctionRead+0x98>
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    ae9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ae9e:	9a02      	ldr	r2, [sp, #8]
    aea0:	011b      	lsls	r3, r3, #4
    aea2:	4413      	add	r3, r2
    aea4:	3304      	adds	r3, #4
    aea6:	681b      	ldr	r3, [r3, #0]
    aea8:	2b01      	cmp	r3, #1
    aeaa:	d109      	bne.n	aec0 <FlexCAN_Ip_MainFunctionRead+0x98>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    aeac:	f89d 2006 	ldrb.w	r2, [sp, #6]
    aeb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aeb4:	4611      	mov	r1, r2
    aeb6:	4618      	mov	r0, r3
    aeb8:	f7fe fd74 	bl	99a4 <FlexCAN_IRQHandlerRxMB>
            }
        }
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
}
    aebc:	e000      	b.n	aec0 <FlexCAN_Ip_MainFunctionRead+0x98>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    aebe:	bf00      	nop
}
    aec0:	bf00      	nop
    aec2:	b005      	add	sp, #20
    aec4:	f85d fb04 	ldr.w	pc, [sp], #4
    aec8:	00010488 	.word	0x00010488
    aecc:	1fff8fc0 	.word	0x1fff8fc0

0000aed0 <FlexCAN_Ip_MainFunctionBusOff_Privileged>:
 * This function check the bus off event.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionBusOff_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_MainFunctionBusOff_Privileged(uint8 instance)
{
    aed0:	b510      	push	{r4, lr}
    aed2:	b086      	sub	sp, #24
    aed4:	4603      	mov	r3, r0
    aed6:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    aeda:	2301      	movs	r3, #1
    aedc:	9305      	str	r3, [sp, #20]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    aede:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aee2:	4a15      	ldr	r2, [pc, #84]	; (af38 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x68>)
    aee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aee8:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    aeea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aeee:	4a13      	ldr	r2, [pc, #76]	; (af3c <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x6c>)
    aef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aef4:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    aef6:	2300      	movs	r3, #0
    aef8:	9302      	str	r3, [sp, #8]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Get error status */
    u32ErrStatus = base->ESR1;
    aefa:	9b04      	ldr	r3, [sp, #16]
    aefc:	6a1b      	ldr	r3, [r3, #32]
    aefe:	9302      	str	r3, [sp, #8]

    if (0U != (u32ErrStatus & FLEXCAN_ESR1_BOFFINT_MASK))
    af00:	9b02      	ldr	r3, [sp, #8]
    af02:	f003 0304 	and.w	r3, r3, #4
    af06:	2b00      	cmp	r3, #0
    af08:	d012      	beq.n	af30 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x60>
    {
        /* Invoke callback */
        if (state->error_callback != NULL_PTR)
    af0a:	9b03      	ldr	r3, [sp, #12]
    af0c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    af10:	2b00      	cmp	r3, #0
    af12:	d008      	beq.n	af26 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x56>
        {
            state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    af14:	9b03      	ldr	r3, [sp, #12]
    af16:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    af1a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    af1e:	9b03      	ldr	r3, [sp, #12]
    af20:	9a02      	ldr	r2, [sp, #8]
    af22:	2107      	movs	r1, #7
    af24:	47a0      	blx	r4
        }
        /* Clear BusOff Status Flag */
        base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    af26:	9b04      	ldr	r3, [sp, #16]
    af28:	2204      	movs	r2, #4
    af2a:	621a      	str	r2, [r3, #32]
        eRetVal = FLEXCAN_STATUS_SUCCESS;
    af2c:	2300      	movs	r3, #0
    af2e:	9305      	str	r3, [sp, #20]
    }
    return eRetVal;
    af30:	9b05      	ldr	r3, [sp, #20]
}
    af32:	4618      	mov	r0, r3
    af34:	b006      	add	sp, #24
    af36:	bd10      	pop	{r4, pc}
    af38:	00010488 	.word	0x00010488
    af3c:	1fff8fc0 	.word	0x1fff8fc0

0000af40 <FlexCAN_Ip_MainFunctionWrite>:
 * This function check the message if have been sent.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionWrite_Activity */
void FlexCAN_Ip_MainFunctionWrite(uint8 instance, uint8 mb_idx)
{
    af40:	b510      	push	{r4, lr}
    af42:	b098      	sub	sp, #96	; 0x60
    af44:	4603      	mov	r3, r0
    af46:	460a      	mov	r2, r1
    af48:	f88d 3007 	strb.w	r3, [sp, #7]
    af4c:	4613      	mov	r3, r2
    af4e:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    af52:	f89d 3007 	ldrb.w	r3, [sp, #7]
    af56:	4a3f      	ldr	r2, [pc, #252]	; (b054 <FlexCAN_Ip_MainFunctionWrite+0x114>)
    af58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af5c:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    af5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    af62:	4a3d      	ldr	r2, [pc, #244]	; (b058 <FlexCAN_Ip_MainFunctionWrite+0x118>)
    af64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af68:	9316      	str	r3, [sp, #88]	; 0x58

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    af6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    af6e:	4619      	mov	r1, r3
    af70:	9817      	ldr	r0, [sp, #92]	; 0x5c
    af72:	f7fe f860 	bl	9036 <FlexCAN_GetBuffStatusFlag>
    af76:	4603      	mov	r3, r0
    af78:	2b00      	cmp	r3, #0
    af7a:	d068      	beq.n	b04e <FlexCAN_Ip_MainFunctionWrite+0x10e>
    {
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    af7c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    af80:	9a16      	ldr	r2, [sp, #88]	; 0x58
    af82:	011b      	lsls	r3, r3, #4
    af84:	4413      	add	r3, r2
    af86:	3304      	adds	r3, #4
    af88:	681b      	ldr	r3, [r3, #0]
    af8a:	2b02      	cmp	r3, #2
    af8c:	d15f      	bne.n	b04e <FlexCAN_Ip_MainFunctionWrite+0x10e>
        {
            if (state->mbs[mb_idx].isRemote)
    af8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    af92:	9a16      	ldr	r2, [sp, #88]	; 0x58
    af94:	011b      	lsls	r3, r3, #4
    af96:	4413      	add	r3, r2
    af98:	3309      	adds	r3, #9
    af9a:	781b      	ldrb	r3, [r3, #0]
    af9c:	2b00      	cmp	r3, #0
    af9e:	d028      	beq.n	aff2 <FlexCAN_Ip_MainFunctionWrite+0xb2>
            {
                Flexcan_Ip_MsgBuffType mb;
                mb.cs = 0U;
    afa0:	2300      	movs	r3, #0
    afa2:	9302      	str	r3, [sp, #8]
                mb.time_stamp = 0U;
    afa4:	2300      	movs	r3, #0
    afa6:	9315      	str	r3, [sp, #84]	; 0x54
                FlexCAN_LockRxMsgBuff(base, mb_idx);
    afa8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    afac:	4619      	mov	r1, r3
    afae:	9817      	ldr	r0, [sp, #92]	; 0x5c
    afb0:	f001 fa87 	bl	c4c2 <FlexCAN_LockRxMsgBuff>
                FlexCAN_GetMsgBuff(base, mb_idx, &mb);
    afb4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    afb8:	aa02      	add	r2, sp, #8
    afba:	4619      	mov	r1, r3
    afbc:	9817      	ldr	r0, [sp, #92]	; 0x5c
    afbe:	f001 fbaf 	bl	c720 <FlexCAN_GetMsgBuff>
                FlexCAN_UnlockRxMsgBuff(base);
    afc2:	9817      	ldr	r0, [sp, #92]	; 0x5c
    afc4:	f7fe f81d 	bl	9002 <FlexCAN_UnlockRxMsgBuff>
                state->mbs[mb_idx].time_stamp = mb.time_stamp;
    afc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    afcc:	9a15      	ldr	r2, [sp, #84]	; 0x54
    afce:	9916      	ldr	r1, [sp, #88]	; 0x58
    afd0:	011b      	lsls	r3, r3, #4
    afd2:	440b      	add	r3, r1
    afd4:	330c      	adds	r3, #12
    afd6:	601a      	str	r2, [r3, #0]
                /* If the frame was a remote frame, clear the flag only if the response was
                * not received yet. If the response was received, leave the flag set in order
                * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
                if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    afd8:	9b02      	ldr	r3, [sp, #8]
    afda:	0e1b      	lsrs	r3, r3, #24
    afdc:	f003 030f 	and.w	r3, r3, #15
    afe0:	2b04      	cmp	r3, #4
    afe2:	d11d      	bne.n	b020 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                {
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    afe4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    afe8:	4619      	mov	r1, r3
    afea:	9817      	ldr	r0, [sp, #92]	; 0x5c
    afec:	f7fe f810 	bl	9010 <FlexCAN_ClearMsgBuffIntStatusFlag>
    aff0:	e016      	b.n	b020 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                }
            }
            else
            {
                state->mbs[mb_idx].time_stamp = FlexCAN_GetMsgBuffTimestamp(base, mb_idx);
    aff2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aff6:	f89d 4006 	ldrb.w	r4, [sp, #6]
    affa:	4619      	mov	r1, r3
    affc:	9817      	ldr	r0, [sp, #92]	; 0x5c
    affe:	f001 fb7b 	bl	c6f8 <FlexCAN_GetMsgBuffTimestamp>
    b002:	4601      	mov	r1, r0
    b004:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b006:	0123      	lsls	r3, r4, #4
    b008:	4413      	add	r3, r2
    b00a:	330c      	adds	r3, #12
    b00c:	6019      	str	r1, [r3, #0]
                FlexCAN_UnlockRxMsgBuff(base);
    b00e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b010:	f7fd fff7 	bl	9002 <FlexCAN_UnlockRxMsgBuff>
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    b014:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b018:	4619      	mov	r1, r3
    b01a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b01c:	f7fd fff8 	bl	9010 <FlexCAN_ClearMsgBuffIntStatusFlag>
            }

            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    b020:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b024:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b026:	011b      	lsls	r3, r3, #4
    b028:	4413      	add	r3, r2
    b02a:	3304      	adds	r3, #4
    b02c:	2200      	movs	r2, #0
    b02e:	601a      	str	r2, [r3, #0]

            /* Invoke callback */
            if (state->callback != NULL_PTR)
    b030:	9b16      	ldr	r3, [sp, #88]	; 0x58
    b032:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    b036:	2b00      	cmp	r3, #0
    b038:	d009      	beq.n	b04e <FlexCAN_Ip_MainFunctionWrite+0x10e>
            {
                state->callback(instance, FLEXCAN_EVENT_TX_COMPLETE, mb_idx, state);
    b03a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    b03c:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    b040:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b044:	f89d 0007 	ldrb.w	r0, [sp, #7]
    b048:	9b16      	ldr	r3, [sp, #88]	; 0x58
    b04a:	2104      	movs	r1, #4
    b04c:	47a0      	blx	r4
            }
        }
    }
}
    b04e:	bf00      	nop
    b050:	b018      	add	sp, #96	; 0x60
    b052:	bd10      	pop	{r4, pc}
    b054:	00010488 	.word	0x00010488
    b058:	1fff8fc0 	.word	0x1fff8fc0

0000b05c <FlexCAN_Ip_GetStopMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STOPPED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStopMode_Activity */
boolean FlexCAN_Ip_GetStopMode_Privileged(uint8 instance)
{
    b05c:	b084      	sub	sp, #16
    b05e:	4603      	mov	r3, r0
    b060:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    b064:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b068:	4a08      	ldr	r2, [pc, #32]	; (b08c <FlexCAN_Ip_GetStopMode_Privileged+0x30>)
    b06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b06e:	9303      	str	r3, [sp, #12]
    return ((FLEXCAN_MCR_LPMACK_MASK == (base->MCR & FLEXCAN_MCR_LPMACK_MASK)) ? TRUE : FALSE);
    b070:	9b03      	ldr	r3, [sp, #12]
    b072:	681b      	ldr	r3, [r3, #0]
    b074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    b078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    b07c:	bf0c      	ite	eq
    b07e:	2301      	moveq	r3, #1
    b080:	2300      	movne	r3, #0
    b082:	b2db      	uxtb	r3, r3
}
    b084:	4618      	mov	r0, r3
    b086:	b004      	add	sp, #16
    b088:	4770      	bx	lr
    b08a:	bf00      	nop
    b08c:	00010488 	.word	0x00010488

0000b090 <FlexCAN_Ip_GetStartMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STARTED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStartMode_Activity */
boolean FlexCAN_Ip_GetStartMode_Privileged(uint8 instance)
{
    b090:	b084      	sub	sp, #16
    b092:	4603      	mov	r3, r0
    b094:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    b098:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b09c:	4a07      	ldr	r2, [pc, #28]	; (b0bc <FlexCAN_Ip_GetStartMode_Privileged+0x2c>)
    b09e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0a2:	9303      	str	r3, [sp, #12]
    return ((0U == (base->MCR & (FLEXCAN_MCR_LPMACK_MASK | FLEXCAN_MCR_FRZACK_MASK))) ? TRUE : FALSE);
    b0a4:	9b03      	ldr	r3, [sp, #12]
    b0a6:	681b      	ldr	r3, [r3, #0]
    b0a8:	f003 7388 	and.w	r3, r3, #17825792	; 0x1100000
    b0ac:	2b00      	cmp	r3, #0
    b0ae:	bf0c      	ite	eq
    b0b0:	2301      	moveq	r3, #1
    b0b2:	2300      	movne	r3, #0
    b0b4:	b2db      	uxtb	r3, r3
}
    b0b6:	4618      	mov	r0, r3
    b0b8:	b004      	add	sp, #16
    b0ba:	4770      	bx	lr
    b0bc:	00010488 	.word	0x00010488

0000b0c0 <FlexCAN_Ip_SetStartMode_Privileged>:
 * Description   : Set the FlexCAN instance in START mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStartMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStartMode_Privileged(uint8 instance)
{
    b0c0:	b500      	push	{lr}
    b0c2:	b085      	sub	sp, #20
    b0c4:	4603      	mov	r3, r0
    b0c6:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b0ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b0ce:	4a0b      	ldr	r2, [pc, #44]	; (b0fc <FlexCAN_Ip_SetStartMode_Privileged+0x3c>)
    b0d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0d4:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    b0d6:	f002 fb93 	bl	d800 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>
    /* Enable Flexcan Module */
    pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    b0da:	9b03      	ldr	r3, [sp, #12]
    b0dc:	681b      	ldr	r3, [r3, #0]
    b0de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    b0e2:	9b03      	ldr	r3, [sp, #12]
    b0e4:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    b0e6:	f002 fbb7 	bl	d858 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>

    return (FlexCAN_ExitFreezeMode(pBase));
    b0ea:	9803      	ldr	r0, [sp, #12]
    b0ec:	f000 ff94 	bl	c018 <FlexCAN_ExitFreezeMode>
    b0f0:	4603      	mov	r3, r0
}
    b0f2:	4618      	mov	r0, r3
    b0f4:	b005      	add	sp, #20
    b0f6:	f85d fb04 	ldr.w	pc, [sp], #4
    b0fa:	bf00      	nop
    b0fc:	00010488 	.word	0x00010488

0000b100 <FlexCAN_Ip_SetStopMode_Privileged>:
 * Description   : Set the FlexCAN instance in STOP mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStopMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStopMode_Privileged(uint8 instance)
{
    b100:	b500      	push	{lr}
    b102:	b085      	sub	sp, #20
    b104:	4603      	mov	r3, r0
    b106:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b10a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b10e:	4a0a      	ldr	r2, [pc, #40]	; (b138 <FlexCAN_Ip_SetStopMode_Privileged+0x38>)
    b110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b114:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status;
    status = FlexCAN_EnterFreezeMode(pBase);
    b116:	9802      	ldr	r0, [sp, #8]
    b118:	f000 fef6 	bl	bf08 <FlexCAN_EnterFreezeMode>
    b11c:	9003      	str	r0, [sp, #12]
    if (FLEXCAN_STATUS_SUCCESS == status)
    b11e:	9b03      	ldr	r3, [sp, #12]
    b120:	2b00      	cmp	r3, #0
    b122:	d103      	bne.n	b12c <FlexCAN_Ip_SetStopMode_Privileged+0x2c>

        /* TODO: reset MB status */

        /* TODO: disable all interrupt */

        status = FlexCAN_Disable(pBase);
    b124:	9802      	ldr	r0, [sp, #8]
    b126:	f000 ffb9 	bl	c09c <FlexCAN_Disable>
    b12a:	9003      	str	r0, [sp, #12]
    }
    return status;
    b12c:	9b03      	ldr	r3, [sp, #12]
}
    b12e:	4618      	mov	r0, r3
    b130:	b005      	add	sp, #20
    b132:	f85d fb04 	ldr.w	pc, [sp], #4
    b136:	bf00      	nop
    b138:	00010488 	.word	0x00010488

0000b13c <FlexCAN_Ip_SetRxMaskType_Privileged>:
 * mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxMaskType_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMaskType_Privileged(uint8 instance, Flexcan_Ip_RxMaskType type)
{
    b13c:	b500      	push	{lr}
    b13e:	b087      	sub	sp, #28
    b140:	4603      	mov	r3, r0
    b142:	9100      	str	r1, [sp, #0]
    b144:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b148:	2300      	movs	r3, #0
    b14a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b14c:	2300      	movs	r3, #0
    b14e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b150:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b154:	4a1e      	ldr	r2, [pc, #120]	; (b1d0 <FlexCAN_Ip_SetRxMaskType_Privileged+0x94>)
    b156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b15a:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b15c:	9803      	ldr	r0, [sp, #12]
    b15e:	f7fd fefd 	bl	8f5c <FlexCAN_IsEnabled>
    b162:	4603      	mov	r3, r0
    b164:	2b00      	cmp	r3, #0
    b166:	bf14      	ite	ne
    b168:	2301      	movne	r3, #1
    b16a:	2300      	moveq	r3, #0
    b16c:	b2db      	uxtb	r3, r3
    b16e:	f083 0301 	eor.w	r3, r3, #1
    b172:	b2db      	uxtb	r3, r3
    b174:	f88d 300b 	strb.w	r3, [sp, #11]
    b178:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b17c:	f003 0301 	and.w	r3, r3, #1
    b180:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b184:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b188:	2b00      	cmp	r3, #0
    b18a:	d003      	beq.n	b194 <FlexCAN_Ip_SetRxMaskType_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    b18c:	9803      	ldr	r0, [sp, #12]
    b18e:	f000 ff07 	bl	bfa0 <FlexCAN_Enable>
    b192:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b194:	9b05      	ldr	r3, [sp, #20]
    b196:	2b00      	cmp	r3, #0
    b198:	d107      	bne.n	b1aa <FlexCAN_Ip_SetRxMaskType_Privileged+0x6e>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    b19a:	f002 fb83 	bl	d8a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
        FlexCAN_SetRxMaskType(pBase, type);
    b19e:	9900      	ldr	r1, [sp, #0]
    b1a0:	9803      	ldr	r0, [sp, #12]
    b1a2:	f7fe f930 	bl	9406 <FlexCAN_SetRxMaskType>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    b1a6:	f002 fba9 	bl	d8fc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
    }

    if (TRUE == disabled)
    b1aa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b1ae:	2b00      	cmp	r3, #0
    b1b0:	d008      	beq.n	b1c4 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
    {
        status = FlexCAN_Disable(pBase);
    b1b2:	9803      	ldr	r0, [sp, #12]
    b1b4:	f000 ff72 	bl	c09c <FlexCAN_Disable>
    b1b8:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b1ba:	9b04      	ldr	r3, [sp, #16]
    b1bc:	2b00      	cmp	r3, #0
    b1be:	d001      	beq.n	b1c4 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
        {
            result = status;
    b1c0:	9b04      	ldr	r3, [sp, #16]
    b1c2:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b1c4:	9b05      	ldr	r3, [sp, #20]
}
    b1c6:	4618      	mov	r0, r3
    b1c8:	b007      	add	sp, #28
    b1ca:	f85d fb04 	ldr.w	pc, [sp], #4
    b1ce:	bf00      	nop
    b1d0:	00010488 	.word	0x00010488

0000b1d4 <FlexCAN_Ip_SetBitrate_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrate_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrate_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
    b1d4:	b500      	push	{lr}
    b1d6:	b087      	sub	sp, #28
    b1d8:	4603      	mov	r3, r0
    b1da:	9100      	str	r1, [sp, #0]
    b1dc:	f88d 3007 	strb.w	r3, [sp, #7]
    b1e0:	4613      	mov	r3, r2
    b1e2:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b1e6:	2300      	movs	r3, #0
    b1e8:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b1ea:	2300      	movs	r3, #0
    b1ec:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b1ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b1f2:	4a1c      	ldr	r2, [pc, #112]	; (b264 <FlexCAN_Ip_SetBitrate_Privileged+0x90>)
    b1f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1f8:	9303      	str	r3, [sp, #12]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    b1fa:	9b03      	ldr	r3, [sp, #12]
    b1fc:	681b      	ldr	r3, [r3, #0]
    b1fe:	0fdb      	lsrs	r3, r3, #31
    b200:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_OFF)
    (void)enhExt;
#endif
    if (TRUE == disabled)
    b204:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b208:	2b00      	cmp	r3, #0
    b20a:	d003      	beq.n	b214 <FlexCAN_Ip_SetBitrate_Privileged+0x40>
    {
        result = FlexCAN_Enable(pBase);
    b20c:	9803      	ldr	r0, [sp, #12]
    b20e:	f000 fec7 	bl	bfa0 <FlexCAN_Enable>
    b212:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b214:	9b05      	ldr	r3, [sp, #20]
    b216:	2b00      	cmp	r3, #0
    b218:	d112      	bne.n	b240 <FlexCAN_Ip_SetBitrate_Privileged+0x6c>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    b21a:	f002 fd2f 	bl	dc7c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
            FlexCAN_SetEnhancedNominalTimeSegments(pBase, bitrate);
        }
        else
#endif
        {
            if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    b21e:	9803      	ldr	r0, [sp, #12]
    b220:	f7fe f830 	bl	9284 <FlexCAN_IsExCbtEnabled>
    b224:	4603      	mov	r3, r0
    b226:	2b00      	cmp	r3, #0
    b228:	d004      	beq.n	b234 <FlexCAN_Ip_SetBitrate_Privileged+0x60>
            {
                FlexCAN_SetExtendedTimeSegments(pBase, bitrate);
    b22a:	9900      	ldr	r1, [sp, #0]
    b22c:	9803      	ldr	r0, [sp, #12]
    b22e:	f7fd ff7f 	bl	9130 <FlexCAN_SetExtendedTimeSegments>
    b232:	e003      	b.n	b23c <FlexCAN_Ip_SetBitrate_Privileged+0x68>
            }
            else
            {
                FlexCAN_SetTimeSegments(pBase, bitrate);
    b234:	9900      	ldr	r1, [sp, #0]
    b236:	9803      	ldr	r0, [sp, #12]
    b238:	f7fd ff4e 	bl	90d8 <FlexCAN_SetTimeSegments>
            }
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    b23c:	f002 fd4a 	bl	dcd4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
    }

    if (TRUE == disabled)
    b240:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b244:	2b00      	cmp	r3, #0
    b246:	d008      	beq.n	b25a <FlexCAN_Ip_SetBitrate_Privileged+0x86>
    {
        status = FlexCAN_Disable(pBase);
    b248:	9803      	ldr	r0, [sp, #12]
    b24a:	f000 ff27 	bl	c09c <FlexCAN_Disable>
    b24e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b250:	9b04      	ldr	r3, [sp, #16]
    b252:	2b00      	cmp	r3, #0
    b254:	d001      	beq.n	b25a <FlexCAN_Ip_SetBitrate_Privileged+0x86>
        {
            result = status;
    b256:	9b04      	ldr	r3, [sp, #16]
    b258:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b25a:	9b05      	ldr	r3, [sp, #20]
}
    b25c:	4618      	mov	r0, r3
    b25e:	b007      	add	sp, #28
    b260:	f85d fb04 	ldr.w	pc, [sp], #4
    b264:	00010488 	.word	0x00010488

0000b268 <FlexCAN_Ip_GetBitrate>:
 * or the arbitration phase of FD frames.
 *
 *END**************************************************************************/
 /* implements   FlexCAN_Ip_GetBitrate_Activity */
boolean FlexCAN_Ip_GetBitrate(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    b268:	b500      	push	{lr}
    b26a:	b085      	sub	sp, #20
    b26c:	4603      	mov	r3, r0
    b26e:	9100      	str	r1, [sp, #0]
    b270:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b274:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b278:	4a0d      	ldr	r2, [pc, #52]	; (b2b0 <FlexCAN_Ip_GetBitrate+0x48>)
    b27a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b27e:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    b280:	2300      	movs	r3, #0
    b282:	f88d 300b 	strb.w	r3, [sp, #11]
        FlexCAN_GetEnhancedNominalTimeSegments(pBase, bitrate);
    }
    else
#endif
    {
        if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    b286:	9803      	ldr	r0, [sp, #12]
    b288:	f7fd fffc 	bl	9284 <FlexCAN_IsExCbtEnabled>
    b28c:	4603      	mov	r3, r0
    b28e:	2b00      	cmp	r3, #0
    b290:	d004      	beq.n	b29c <FlexCAN_Ip_GetBitrate+0x34>
        {
            /* Get the Extended time segments*/
            FlexCAN_GetExtendedTimeSegments(pBase, bitrate);
    b292:	9900      	ldr	r1, [sp, #0]
    b294:	9803      	ldr	r0, [sp, #12]
    b296:	f7fd ff79 	bl	918c <FlexCAN_GetExtendedTimeSegments>
    b29a:	e003      	b.n	b2a4 <FlexCAN_Ip_GetBitrate+0x3c>
        }
        else
        {
            /* Get the time segments*/
            FlexCAN_GetTimeSegments(pBase, bitrate);
    b29c:	9900      	ldr	r1, [sp, #0]
    b29e:	9803      	ldr	r0, [sp, #12]
    b2a0:	f7fd ff9c 	bl	91dc <FlexCAN_GetTimeSegments>
        }
    }
    return enhCbt;
    b2a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    b2a8:	4618      	mov	r0, r3
    b2aa:	b005      	add	sp, #20
    b2ac:	f85d fb04 	ldr.w	pc, [sp], #4
    b2b0:	00010488 	.word	0x00010488

0000b2b4 <FlexCAN_Ip_ClearTDCFail>:
 * Description   : This function clear the TDC Fail flag.
 *
 *END**************************************************************************/
/* implements   FlexCAN_Ip_ClearTDCFail_Activity */
void FlexCAN_Ip_ClearTDCFail(uint8 u8Instance)
{
    b2b4:	b500      	push	{lr}
    b2b6:	b085      	sub	sp, #20
    b2b8:	4603      	mov	r3, r0
    b2ba:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b2be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b2c2:	4a0a      	ldr	r2, [pc, #40]	; (b2ec <FlexCAN_Ip_ClearTDCFail+0x38>)
    b2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2c8:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    b2ca:	f002 fb3d 	bl	d948 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
        pBase->ETDC |=  FLEXCAN_ETDC_ETDCFAIL_MASK;
    }
    else
#endif
    {
        pBase->FDCTRL |= FLEXCAN_FDCTRL_TDCFAIL_MASK;
    b2ce:	9b03      	ldr	r3, [sp, #12]
    b2d0:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b2d4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    b2d8:	9b03      	ldr	r3, [sp, #12]
    b2da:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    b2de:	f002 fb5f 	bl	d9a0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
}
    b2e2:	bf00      	nop
    b2e4:	b005      	add	sp, #20
    b2e6:	f85d fb04 	ldr.w	pc, [sp], #4
    b2ea:	bf00      	nop
    b2ec:	00010488 	.word	0x00010488

0000b2f0 <FlexCAN_Ip_GetTDCFail>:
 *
 *END**************************************************************************/

/* implements    FlexCAN_Ip_GetTDCFail_Activity */
boolean FlexCAN_Ip_GetTDCFail(uint8 u8Instance)
{
    b2f0:	b084      	sub	sp, #16
    b2f2:	4603      	mov	r3, r0
    b2f4:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean value=FALSE;
    b2f8:	2300      	movs	r3, #0
    b2fa:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b2fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b302:	4a0a      	ldr	r2, [pc, #40]	; (b32c <FlexCAN_Ip_GetTDCFail+0x3c>)
    b304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b308:	9302      	str	r3, [sp, #8]
        value = ((pBase->ETDC & FLEXCAN_ETDC_ETDCFAIL_MASK) == FLEXCAN_ETDC_ETDCFAIL_MASK) ? TRUE : FALSE;
    }
    else
#endif
    {
        value = ((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCFAIL_MASK) == FLEXCAN_FDCTRL_TDCFAIL_MASK) ? TRUE : FALSE;
    b30a:	9b02      	ldr	r3, [sp, #8]
    b30c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    b314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    b318:	bf0c      	ite	eq
    b31a:	2301      	moveq	r3, #1
    b31c:	2300      	movne	r3, #0
    b31e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    b322:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    b326:	4618      	mov	r0, r3
    b328:	b004      	add	sp, #16
    b32a:	4770      	bx	lr
    b32c:	00010488 	.word	0x00010488

0000b330 <FlexCAN_Ip_GetTDCValue>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_GetTDCValue_Activity */
uint8 FlexCAN_Ip_GetTDCValue(uint8 u8Instance)
{
    b330:	b084      	sub	sp, #16
    b332:	4603      	mov	r3, r0
    b334:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 value = 0;
    b338:	2300      	movs	r3, #0
    b33a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b33e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b342:	4a08      	ldr	r2, [pc, #32]	; (b364 <FlexCAN_Ip_GetTDCValue+0x34>)
    b344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b348:	9302      	str	r3, [sp, #8]
        value = (uint8)((pBase->ETDC& FLEXCAN_ETDC_ETDCVAL_MASK) >> FLEXCAN_ETDC_ETDCVAL_SHIFT);
    }
    else
#endif
    {
        value = (uint8)((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCVAL_MASK) >> FLEXCAN_FDCTRL_TDCVAL_SHIFT);
    b34a:	9b02      	ldr	r3, [sp, #8]
    b34c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b350:	b2db      	uxtb	r3, r3
    b352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b356:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    b35a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    b35e:	4618      	mov	r0, r3
    b360:	b004      	add	sp, #16
    b362:	4770      	bx	lr
    b364:	00010488 	.word	0x00010488

0000b368 <FlexCAN_Ip_SetBitrateCbt_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrateCbt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrateCbt_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
    b368:	b500      	push	{lr}
    b36a:	b087      	sub	sp, #28
    b36c:	4603      	mov	r3, r0
    b36e:	9100      	str	r1, [sp, #0]
    b370:	f88d 3007 	strb.w	r3, [sp, #7]
    b374:	4613      	mov	r3, r2
    b376:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b37a:	2300      	movs	r3, #0
    b37c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b37e:	2300      	movs	r3, #0
    b380:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b382:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b386:	4a1e      	ldr	r2, [pc, #120]	; (b400 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x98>)
    b388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b38c:	9303      	str	r3, [sp, #12]
    boolean fd_enable = FlexCAN_IsFDEnabled(pBase);
    b38e:	9803      	ldr	r0, [sp, #12]
    b390:	f7fd ffaf 	bl	92f2 <FlexCAN_IsFDEnabled>
    b394:	4603      	mov	r3, r0
    b396:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    b39a:	9b03      	ldr	r3, [sp, #12]
    b39c:	681b      	ldr	r3, [r3, #0]
    b39e:	0fdb      	lsrs	r3, r3, #31
    b3a0:	f88d 300a 	strb.w	r3, [sp, #10]

    if (TRUE == disabled)
    b3a4:	f89d 300a 	ldrb.w	r3, [sp, #10]
    b3a8:	2b00      	cmp	r3, #0
    b3aa:	d003      	beq.n	b3b4 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x4c>
    {
        result = FlexCAN_Enable(pBase);
    b3ac:	9803      	ldr	r0, [sp, #12]
    b3ae:	f000 fdf7 	bl	bfa0 <FlexCAN_Enable>
    b3b2:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b3b4:	9b05      	ldr	r3, [sp, #20]
    b3b6:	2b00      	cmp	r3, #0
    b3b8:	d10f      	bne.n	b3da <FlexCAN_Ip_SetBitrateCbt_Privileged+0x72>
    {
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_ON)
        boolean enhCbt = FlexCAN_IsEnhCbtEnabled(pBase);
#endif
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    b3ba:	f002 fcb1 	bl	dd20 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
        FlexCAN_SetFDEnabled(pBase, fd_enable, bitRateSwitch);
    b3be:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b3c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b3c6:	4619      	mov	r1, r3
    b3c8:	9803      	ldr	r0, [sp, #12]
    b3ca:	f7fd fdd1 	bl	8f70 <FlexCAN_SetFDEnabled>
        }
        else
#endif
        {
            /* Set time segments*/
            FlexCAN_SetFDTimeSegments(pBase, bitrate);
    b3ce:	9900      	ldr	r1, [sp, #0]
    b3d0:	9803      	ldr	r0, [sp, #12]
    b3d2:	f7fd fe4c 	bl	906e <FlexCAN_SetFDTimeSegments>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    b3d6:	f002 fccf 	bl	dd78 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
    }

    if (TRUE == disabled)
    b3da:	f89d 300a 	ldrb.w	r3, [sp, #10]
    b3de:	2b00      	cmp	r3, #0
    b3e0:	d008      	beq.n	b3f4 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    b3e2:	9803      	ldr	r0, [sp, #12]
    b3e4:	f000 fe5a 	bl	c09c <FlexCAN_Disable>
    b3e8:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b3ea:	9b04      	ldr	r3, [sp, #16]
    b3ec:	2b00      	cmp	r3, #0
    b3ee:	d001      	beq.n	b3f4 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
        {
            result = status;
    b3f0:	9b04      	ldr	r3, [sp, #16]
    b3f2:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b3f4:	9b05      	ldr	r3, [sp, #20]
}
    b3f6:	4618      	mov	r0, r3
    b3f8:	b007      	add	sp, #28
    b3fa:	f85d fb04 	ldr.w	pc, [sp], #4
    b3fe:	bf00      	nop
    b400:	00010488 	.word	0x00010488

0000b404 <FlexCAN_Ip_GetBitrateFD>:
 * of FD frames.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBitrateFD_Activity */
boolean FlexCAN_Ip_GetBitrateFD(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    b404:	b500      	push	{lr}
    b406:	b085      	sub	sp, #20
    b408:	4603      	mov	r3, r0
    b40a:	9100      	str	r1, [sp, #0]
    b40c:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b410:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b414:	4a08      	ldr	r2, [pc, #32]	; (b438 <FlexCAN_Ip_GetBitrateFD+0x34>)
    b416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b41a:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    b41c:	2300      	movs	r3, #0
    b41e:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    else
#endif
    {
        /* Get the time segments*/
        FlexCAN_GetFDTimeSegments(pBase, bitrate);
    b422:	9900      	ldr	r1, [sp, #0]
    b424:	9803      	ldr	r0, [sp, #12]
    b426:	f7fd ff00 	bl	922a <FlexCAN_GetFDTimeSegments>
    }
    return enhCbt;
    b42a:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    b42e:	4618      	mov	r0, r3
    b430:	b005      	add	sp, #20
    b432:	f85d fb04 	ldr.w	pc, [sp], #4
    b436:	bf00      	nop
    b438:	00010488 	.word	0x00010488

0000b43c <FlexCAN_Ip_SetTDCOffset_Privileged>:
 * the Transceiver Delay Compensation Offset.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTDCOffset_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTDCOffset_Privileged(uint8 instance, boolean enable, uint8 offset)
{
    b43c:	b500      	push	{lr}
    b43e:	b087      	sub	sp, #28
    b440:	4603      	mov	r3, r0
    b442:	f88d 3007 	strb.w	r3, [sp, #7]
    b446:	460b      	mov	r3, r1
    b448:	f88d 3006 	strb.w	r3, [sp, #6]
    b44c:	4613      	mov	r3, r2
    b44e:	f88d 3005 	strb.w	r3, [sp, #5]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b452:	2300      	movs	r3, #0
    b454:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b456:	2300      	movs	r3, #0
    b458:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b45a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b45e:	4a20      	ldr	r2, [pc, #128]	; (b4e0 <FlexCAN_Ip_SetTDCOffset_Privileged+0xa4>)
    b460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b464:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b466:	9803      	ldr	r0, [sp, #12]
    b468:	f7fd fd78 	bl	8f5c <FlexCAN_IsEnabled>
    b46c:	4603      	mov	r3, r0
    b46e:	2b00      	cmp	r3, #0
    b470:	bf14      	ite	ne
    b472:	2301      	movne	r3, #1
    b474:	2300      	moveq	r3, #0
    b476:	b2db      	uxtb	r3, r3
    b478:	f083 0301 	eor.w	r3, r3, #1
    b47c:	b2db      	uxtb	r3, r3
    b47e:	f88d 300b 	strb.w	r3, [sp, #11]
    b482:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b486:	f003 0301 	and.w	r3, r3, #1
    b48a:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b48e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b492:	2b00      	cmp	r3, #0
    b494:	d003      	beq.n	b49e <FlexCAN_Ip_SetTDCOffset_Privileged+0x62>
    {
        result = FlexCAN_Enable(pBase);
    b496:	9803      	ldr	r0, [sp, #12]
    b498:	f000 fd82 	bl	bfa0 <FlexCAN_Enable>
    b49c:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b49e:	9b05      	ldr	r3, [sp, #20]
    b4a0:	2b00      	cmp	r3, #0
    b4a2:	d10b      	bne.n	b4bc <FlexCAN_Ip_SetTDCOffset_Privileged+0x80>
    {
        /* Check if enhaced CBT is Enabled */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    b4a4:	f002 fc8e 	bl	ddc4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        }
        else
#endif
        {
            /* Enable/Disable TDC and set the TDC Offset */
            FlexCAN_SetTDCOffset(pBase, enable, offset);
    b4a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b4ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b4b0:	4619      	mov	r1, r3
    b4b2:	9803      	ldr	r0, [sp, #12]
    b4b4:	f7fd fd2b 	bl	8f0e <FlexCAN_SetTDCOffset>
        }
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    b4b8:	f002 fcb0 	bl	de1c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        /* Check if enhaced CBT is Enabled */
    }

    if (TRUE == disabled)
    b4bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b4c0:	2b00      	cmp	r3, #0
    b4c2:	d008      	beq.n	b4d6 <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
    {
        status = FlexCAN_Disable(pBase);
    b4c4:	9803      	ldr	r0, [sp, #12]
    b4c6:	f000 fde9 	bl	c09c <FlexCAN_Disable>
    b4ca:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b4cc:	9b04      	ldr	r3, [sp, #16]
    b4ce:	2b00      	cmp	r3, #0
    b4d0:	d001      	beq.n	b4d6 <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
        {
            result = status;
    b4d2:	9b04      	ldr	r3, [sp, #16]
    b4d4:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    b4d6:	9b05      	ldr	r3, [sp, #20]
}
    b4d8:	4618      	mov	r0, r3
    b4da:	b007      	add	sp, #28
    b4dc:	f85d fb04 	ldr.w	pc, [sp], #4
    b4e0:	00010488 	.word	0x00010488

0000b4e4 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>:
 * be delayed from the first bit of CRC field on CAN bus.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTxArbitrationStartDelay_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged(uint8 instance,  uint8 value)
{
    b4e4:	b500      	push	{lr}
    b4e6:	b087      	sub	sp, #28
    b4e8:	4603      	mov	r3, r0
    b4ea:	460a      	mov	r2, r1
    b4ec:	f88d 3007 	strb.w	r3, [sp, #7]
    b4f0:	4613      	mov	r3, r2
    b4f2:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b4f6:	2300      	movs	r3, #0
    b4f8:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b4fa:	2300      	movs	r3, #0
    b4fc:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b4fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b502:	4a1f      	ldr	r2, [pc, #124]	; (b580 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x9c>)
    b504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b508:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b50a:	9803      	ldr	r0, [sp, #12]
    b50c:	f7fd fd26 	bl	8f5c <FlexCAN_IsEnabled>
    b510:	4603      	mov	r3, r0
    b512:	2b00      	cmp	r3, #0
    b514:	bf14      	ite	ne
    b516:	2301      	movne	r3, #1
    b518:	2300      	moveq	r3, #0
    b51a:	b2db      	uxtb	r3, r3
    b51c:	f083 0301 	eor.w	r3, r3, #1
    b520:	b2db      	uxtb	r3, r3
    b522:	f88d 300b 	strb.w	r3, [sp, #11]
    b526:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b52a:	f003 0301 	and.w	r3, r3, #1
    b52e:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b532:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b536:	2b00      	cmp	r3, #0
    b538:	d003      	beq.n	b542 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    b53a:	9803      	ldr	r0, [sp, #12]
    b53c:	f000 fd30 	bl	bfa0 <FlexCAN_Enable>
    b540:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b542:	9b05      	ldr	r3, [sp, #20]
    b544:	2b00      	cmp	r3, #0
    b546:	d109      	bne.n	b55c <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    b548:	f002 fc8e 	bl	de68 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
        FlexCAN_SetTxArbitrationStartDelay(pBase, value);
    b54c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b550:	4619      	mov	r1, r3
    b552:	9803      	ldr	r0, [sp, #12]
    b554:	f7fd ff43 	bl	93de <FlexCAN_SetTxArbitrationStartDelay>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    b558:	f002 fcb2 	bl	dec0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
    }

    if (TRUE == disabled)
    b55c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b560:	2b00      	cmp	r3, #0
    b562:	d008      	beq.n	b576 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    b564:	9803      	ldr	r0, [sp, #12]
    b566:	f000 fd99 	bl	c09c <FlexCAN_Disable>
    b56a:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b56c:	9b04      	ldr	r3, [sp, #16]
    b56e:	2b00      	cmp	r3, #0
    b570:	d001      	beq.n	b576 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
        {
            result = status;
    b572:	9b04      	ldr	r3, [sp, #16]
    b574:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b576:	9b05      	ldr	r3, [sp, #20]
}
    b578:	4618      	mov	r0, r3
    b57a:	b007      	add	sp, #28
    b57c:	f85d fb04 	ldr.w	pc, [sp], #4
    b580:	00010488 	.word	0x00010488

0000b584 <FlexCAN_Ip_GetBuffStatusFlag>:
 * In case of a complete operation this flag is set.
 * In case msgBuff is 255 will return Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBuffStatusFlag_Activity */
boolean FlexCAN_Ip_GetBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    b584:	b500      	push	{lr}
    b586:	b085      	sub	sp, #20
    b588:	4603      	mov	r3, r0
    b58a:	460a      	mov	r2, r1
    b58c:	f88d 3007 	strb.w	r3, [sp, #7]
    b590:	4613      	mov	r3, r2
    b592:	f88d 3006 	strb.w	r3, [sp, #6]
    boolean returnResult;
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b596:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b59a:	4a0b      	ldr	r2, [pc, #44]	; (b5c8 <FlexCAN_Ip_GetBuffStatusFlag+0x44>)
    b59c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5a0:	9303      	str	r3, [sp, #12]
        returnResult = ((1U == FlexCAN_GetEnhancedRxFIFOStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW)) ? TRUE : FALSE);
    }
    else
#endif
    {
        returnResult = ((1U == FlexCAN_GetBuffStatusFlag(pBase, msgBuffIdx)) ? TRUE : FALSE);
    b5a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b5a6:	4619      	mov	r1, r3
    b5a8:	9803      	ldr	r0, [sp, #12]
    b5aa:	f7fd fd44 	bl	9036 <FlexCAN_GetBuffStatusFlag>
    b5ae:	4603      	mov	r3, r0
    b5b0:	2b01      	cmp	r3, #1
    b5b2:	bf0c      	ite	eq
    b5b4:	2301      	moveq	r3, #1
    b5b6:	2300      	movne	r3, #0
    b5b8:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    return returnResult;
    b5bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    b5c0:	4618      	mov	r0, r3
    b5c2:	b005      	add	sp, #20
    b5c4:	f85d fb04 	ldr.w	pc, [sp], #4
    b5c8:	00010488 	.word	0x00010488

0000b5cc <FlexCAN_Ip_ClearBuffStatusFlag>:
 * Description   : Clear FlexCAN Message Buffer Status Flag.
 * In case msgBuff is 255 will clear Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearBuffStatusFlag_Activity */
void FlexCAN_Ip_ClearBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    b5cc:	b500      	push	{lr}
    b5ce:	b085      	sub	sp, #20
    b5d0:	4603      	mov	r3, r0
    b5d2:	460a      	mov	r2, r1
    b5d4:	f88d 3007 	strb.w	r3, [sp, #7]
    b5d8:	4613      	mov	r3, r2
    b5da:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b5de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b5e2:	4a07      	ldr	r2, [pc, #28]	; (b600 <FlexCAN_Ip_ClearBuffStatusFlag+0x34>)
    b5e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5e8:	9303      	str	r3, [sp, #12]
        FlexCAN_ClearEnhancedRxFifoIntStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
    }
    else
#endif
    {
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, msgBuffIdx);
    b5ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b5ee:	4619      	mov	r1, r3
    b5f0:	9803      	ldr	r0, [sp, #12]
    b5f2:	f7fd fd0d 	bl	9010 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }
}
    b5f6:	bf00      	nop
    b5f8:	b005      	add	sp, #20
    b5fa:	f85d fb04 	ldr.w	pc, [sp], #4
    b5fe:	bf00      	nop
    b600:	00010488 	.word	0x00010488

0000b604 <FlexCAN_Ip_EnableInterrupts_Privileged>:
 * Description   : Enable all mb interrupts configured.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnableInterrupts_Privileged(uint8 u8Instance)
{
    b604:	b500      	push	{lr}
    b606:	b087      	sub	sp, #28
    b608:	4603      	mov	r3, r0
    b60a:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b60e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b612:	4a11      	ldr	r2, [pc, #68]	; (b658 <FlexCAN_Ip_EnableInterrupts_Privileged+0x54>)
    b614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b618:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    b61a:	2301      	movs	r3, #1
    b61c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    b61e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b622:	4a0e      	ldr	r2, [pc, #56]	; (b65c <FlexCAN_Ip_EnableInterrupts_Privileged+0x58>)
    b624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b628:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    b62a:	9804      	ldr	r0, [sp, #16]
    b62c:	f7fd fc96 	bl	8f5c <FlexCAN_IsEnabled>
    b630:	4603      	mov	r3, r0
    b632:	2b00      	cmp	r3, #0
    b634:	d00b      	beq.n	b64e <FlexCAN_Ip_EnableInterrupts_Privileged+0x4a>
    {
        FlexCAN_EnableInterrupts(pBase, u8Instance);
    b636:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b63a:	4619      	mov	r1, r3
    b63c:	9804      	ldr	r0, [sp, #16]
    b63e:	f000 ffe1 	bl	c604 <FlexCAN_EnableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, TRUE);
            }
        }
    #endif
        state->isIntActive = TRUE;
    b642:	9b03      	ldr	r3, [sp, #12]
    b644:	2201      	movs	r2, #1
    b646:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    b64a:	2300      	movs	r3, #0
    b64c:	9305      	str	r3, [sp, #20]
    }

    return result;
    b64e:	9b05      	ldr	r3, [sp, #20]
}
    b650:	4618      	mov	r0, r3
    b652:	b007      	add	sp, #28
    b654:	f85d fb04 	ldr.w	pc, [sp], #4
    b658:	00010488 	.word	0x00010488
    b65c:	1fff8fc0 	.word	0x1fff8fc0

0000b660 <FlexCAN_Ip_DisableInterrupts_Privileged>:
 * Description   : Enable all interrupts configured.
 *
 *END**************************************************************************/
 /* implements FlexCAN_Ip_DisableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_DisableInterrupts_Privileged(uint8 u8Instance)
{
    b660:	b500      	push	{lr}
    b662:	b087      	sub	sp, #28
    b664:	4603      	mov	r3, r0
    b666:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b66a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b66e:	4a10      	ldr	r2, [pc, #64]	; (b6b0 <FlexCAN_Ip_DisableInterrupts_Privileged+0x50>)
    b670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b674:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    b676:	2301      	movs	r3, #1
    b678:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    b67a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b67e:	4a0d      	ldr	r2, [pc, #52]	; (b6b4 <FlexCAN_Ip_DisableInterrupts_Privileged+0x54>)
    b680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b684:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    b686:	9804      	ldr	r0, [sp, #16]
    b688:	f7fd fc68 	bl	8f5c <FlexCAN_IsEnabled>
    b68c:	4603      	mov	r3, r0
    b68e:	2b00      	cmp	r3, #0
    b690:	d008      	beq.n	b6a4 <FlexCAN_Ip_DisableInterrupts_Privileged+0x44>
    {
        FlexCAN_DisableInterrupts(pBase);
    b692:	9804      	ldr	r0, [sp, #16]
    b694:	f000 ffae 	bl	c5f4 <FlexCAN_DisableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, FALSE);
            }
        }
#endif
        state->isIntActive = FALSE;
    b698:	9b03      	ldr	r3, [sp, #12]
    b69a:	2200      	movs	r2, #0
    b69c:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    b6a0:	2300      	movs	r3, #0
    b6a2:	9305      	str	r3, [sp, #20]
    }

    return result;
    b6a4:	9b05      	ldr	r3, [sp, #20]
}
    b6a6:	4618      	mov	r0, r3
    b6a8:	b007      	add	sp, #28
    b6aa:	f85d fb04 	ldr.w	pc, [sp], #4
    b6ae:	bf00      	nop
    b6b0:	00010488 	.word	0x00010488
    b6b4:	1fff8fc0 	.word	0x1fff8fc0

0000b6b8 <FlexCAN_Ip_SetErrorInt_Privileged>:
 * Description   : Enable\Disable Error or BusOff Interrupt
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetErrorInt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetErrorInt_Privileged(uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
    b6b8:	b500      	push	{lr}
    b6ba:	b087      	sub	sp, #28
    b6bc:	4603      	mov	r3, r0
    b6be:	9100      	str	r1, [sp, #0]
    b6c0:	f88d 3007 	strb.w	r3, [sp, #7]
    b6c4:	4613      	mov	r3, r2
    b6c6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b6ca:	2300      	movs	r3, #0
    b6cc:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b6ce:	2300      	movs	r3, #0
    b6d0:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b6d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b6d6:	4a3a      	ldr	r2, [pc, #232]	; (b7c0 <FlexCAN_Ip_SetErrorInt_Privileged+0x108>)
    b6d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6dc:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b6de:	9803      	ldr	r0, [sp, #12]
    b6e0:	f7fd fc3c 	bl	8f5c <FlexCAN_IsEnabled>
    b6e4:	4603      	mov	r3, r0
    b6e6:	2b00      	cmp	r3, #0
    b6e8:	bf14      	ite	ne
    b6ea:	2301      	movne	r3, #1
    b6ec:	2300      	moveq	r3, #0
    b6ee:	b2db      	uxtb	r3, r3
    b6f0:	f083 0301 	eor.w	r3, r3, #1
    b6f4:	b2db      	uxtb	r3, r3
    b6f6:	f88d 300b 	strb.w	r3, [sp, #11]
    b6fa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b6fe:	f003 0301 	and.w	r3, r3, #1
    b702:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b706:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b70a:	2b00      	cmp	r3, #0
    b70c:	d003      	beq.n	b716 <FlexCAN_Ip_SetErrorInt_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    b70e:	9803      	ldr	r0, [sp, #12]
    b710:	f000 fc46 	bl	bfa0 <FlexCAN_Enable>
    b714:	9005      	str	r0, [sp, #20]
    }

    if (FLEXCAN_STATUS_SUCCESS == result)
    b716:	9b05      	ldr	r3, [sp, #20]
    b718:	2b00      	cmp	r3, #0
    b71a:	d13c      	bne.n	b796 <FlexCAN_Ip_SetErrorInt_Privileged+0xde>
    b71c:	9b00      	ldr	r3, [sp, #0]
    b71e:	2b04      	cmp	r3, #4
    b720:	d83b      	bhi.n	b79a <FlexCAN_Ip_SetErrorInt_Privileged+0xe2>
    b722:	a201      	add	r2, pc, #4	; (adr r2, b728 <FlexCAN_Ip_SetErrorInt_Privileged+0x70>)
    b724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b728:	0000b773 	.word	0x0000b773
    b72c:	0000b785 	.word	0x0000b785
    b730:	0000b74f 	.word	0x0000b74f
    b734:	0000b761 	.word	0x0000b761
    b738:	0000b73d 	.word	0x0000b73d
    {
        switch (type)
        {
            case FLEXCAN_IP_INT_BUSOFF:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_BUSOFF, enable);
    b73c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b740:	461a      	mov	r2, r3
    b742:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    b746:	9803      	ldr	r0, [sp, #12]
    b748:	f000 fce8 	bl	c11c <FlexCAN_SetErrIntCmd>
                break;
    b74c:	e026      	b.n	b79c <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR, enable);
    b74e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b752:	461a      	mov	r2, r3
    b754:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    b758:	9803      	ldr	r0, [sp, #12]
    b75a:	f000 fcdf 	bl	c11c <FlexCAN_SetErrIntCmd>
                break;
    b75e:	e01d      	b.n	b79c <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR_FAST :
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR_FAST, enable);
    b760:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b764:	461a      	mov	r2, r3
    b766:	f244 0101 	movw	r1, #16385	; 0x4001
    b76a:	9803      	ldr	r0, [sp, #12]
    b76c:	f000 fcd6 	bl	c11c <FlexCAN_SetErrIntCmd>
                break;
    b770:	e014      	b.n	b79c <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_RX_WARNING, enable);
    b772:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b776:	461a      	mov	r2, r3
    b778:	f44f 6180 	mov.w	r1, #1024	; 0x400
    b77c:	9803      	ldr	r0, [sp, #12]
    b77e:	f000 fccd 	bl	c11c <FlexCAN_SetErrIntCmd>
                }
                break;
    b782:	e00b      	b.n	b79c <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_TX_WARNING, enable);
    b784:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b788:	461a      	mov	r2, r3
    b78a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    b78e:	9803      	ldr	r0, [sp, #12]
    b790:	f000 fcc4 	bl	c11c <FlexCAN_SetErrIntCmd>
                }
                break;
    b794:	e002      	b.n	b79c <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    /* Should not get here */
                #endif
                break;
            }
        }
    }
    b796:	bf00      	nop
    b798:	e000      	b.n	b79c <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                break;
    b79a:	bf00      	nop

    if (TRUE == disabled)
    b79c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b7a0:	2b00      	cmp	r3, #0
    b7a2:	d008      	beq.n	b7b6 <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
    {
        status = FlexCAN_Disable(pBase);
    b7a4:	9803      	ldr	r0, [sp, #12]
    b7a6:	f000 fc79 	bl	c09c <FlexCAN_Disable>
    b7aa:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b7ac:	9b04      	ldr	r3, [sp, #16]
    b7ae:	2b00      	cmp	r3, #0
    b7b0:	d001      	beq.n	b7b6 <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
        {
            result = status;
    b7b2:	9b04      	ldr	r3, [sp, #16]
    b7b4:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b7b6:	9b05      	ldr	r3, [sp, #20]
}
    b7b8:	4618      	mov	r0, r3
    b7ba:	b007      	add	sp, #28
    b7bc:	f85d fb04 	ldr.w	pc, [sp], #4
    b7c0:	00010488 	.word	0x00010488

0000b7c4 <FlexCAN_Ip_AbortTransfer>:
 * receiver.
 *
 *END**************************************************************************/
/* implements    FlexCAN_Ip_AbortTransfer_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_AbortTransfer(uint8 u8Instance, uint8 mb_idx)
{
    b7c4:	b500      	push	{lr}
    b7c6:	b087      	sub	sp, #28
    b7c8:	4603      	mov	r3, r0
    b7ca:	460a      	mov	r2, r1
    b7cc:	f88d 3007 	strb.w	r3, [sp, #7]
    b7d0:	4613      	mov	r3, r2
    b7d2:	f88d 3006 	strb.w	r3, [sp, #6]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
        DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
    #endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b7d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b7da:	4a27      	ldr	r2, [pc, #156]	; (b878 <FlexCAN_Ip_AbortTransfer+0xb4>)
    b7dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7e0:	9304      	str	r3, [sp, #16]
#if ((FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON))
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
#else
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    b7e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b7e6:	4a25      	ldr	r2, [pc, #148]	; (b87c <FlexCAN_Ip_AbortTransfer+0xb8>)
    b7e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7ec:	9303      	str	r3, [sp, #12]
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON) */
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b7ee:	2300      	movs	r3, #0
    b7f0:	9305      	str	r3, [sp, #20]

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    b7f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b7f6:	2b1f      	cmp	r3, #31
    b7f8:	d838      	bhi.n	b86c <FlexCAN_Ip_AbortTransfer+0xa8>
    {

    if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    b7fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b7fe:	9a03      	ldr	r2, [sp, #12]
    b800:	011b      	lsls	r3, r3, #4
    b802:	4413      	add	r3, r2
    b804:	3304      	adds	r3, #4
    b806:	681b      	ldr	r3, [r3, #0]
    b808:	2b00      	cmp	r3, #0
    b80a:	d102      	bne.n	b812 <FlexCAN_Ip_AbortTransfer+0x4e>
    {
        result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    b80c:	2305      	movs	r3, #5
    b80e:	9305      	str	r3, [sp, #20]
    b810:	e02c      	b.n	b86c <FlexCAN_Ip_AbortTransfer+0xa8>
    }
    else
    {
        FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, mb_idx, state->isIntActive);
    b812:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b816:	9b03      	ldr	r3, [sp, #12]
    b818:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    b81c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    b820:	9804      	ldr	r0, [sp, #16]
    b822:	f000 feb3 	bl	c58c <FLEXCAN_ClearMsgBuffIntCmd>
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    b826:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b82a:	9a03      	ldr	r2, [sp, #12]
    b82c:	011b      	lsls	r3, r3, #4
    b82e:	4413      	add	r3, r2
    b830:	3304      	adds	r3, #4
    b832:	681b      	ldr	r3, [r3, #0]
    b834:	2b02      	cmp	r3, #2
    b836:	d108      	bne.n	b84a <FlexCAN_Ip_AbortTransfer+0x86>
        {
            result = FlexCAN_AbortTxTransfer(u8Instance, mb_idx);
    b838:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b83c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b840:	4611      	mov	r1, r2
    b842:	4618      	mov	r0, r3
    b844:	f7fe fabc 	bl	9dc0 <FlexCAN_AbortTxTransfer>
    b848:	9005      	str	r0, [sp, #20]
        }

        if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    b84a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b84e:	9a03      	ldr	r2, [sp, #12]
    b850:	011b      	lsls	r3, r3, #4
    b852:	4413      	add	r3, r2
    b854:	3304      	adds	r3, #4
    b856:	681b      	ldr	r3, [r3, #0]
    b858:	2b01      	cmp	r3, #1
    b85a:	d107      	bne.n	b86c <FlexCAN_Ip_AbortTransfer+0xa8>
        {
            FlexCAN_AbortRxTransfer(u8Instance, mb_idx);
    b85c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b860:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b864:	4611      	mov	r1, r2
    b866:	4618      	mov	r0, r3
    b868:	f7fe fb34 	bl	9ed4 <FlexCAN_AbortRxTransfer>
        }
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
#endif /* if FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return result;
    b86c:	9b05      	ldr	r3, [sp, #20]
}
    b86e:	4618      	mov	r0, r3
    b870:	b007      	add	sp, #28
    b872:	f85d fb04 	ldr.w	pc, [sp], #4
    b876:	bf00      	nop
    b878:	00010488 	.word	0x00010488
    b87c:	1fff8fc0 	.word	0x1fff8fc0

0000b880 <FlexCAN_Ip_SetRxMb14Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb14Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb14Mask_Privileged(uint8 instance, uint32 mask)
{
    b880:	b500      	push	{lr}
    b882:	b087      	sub	sp, #28
    b884:	4603      	mov	r3, r0
    b886:	9100      	str	r1, [sp, #0]
    b888:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b88c:	2300      	movs	r3, #0
    b88e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b890:	2300      	movs	r3, #0
    b892:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b894:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b898:	4a1b      	ldr	r2, [pc, #108]	; (b908 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x88>)
    b89a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b89e:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b8a0:	9803      	ldr	r0, [sp, #12]
    b8a2:	f7fd fb5b 	bl	8f5c <FlexCAN_IsEnabled>
    b8a6:	4603      	mov	r3, r0
    b8a8:	2b00      	cmp	r3, #0
    b8aa:	bf14      	ite	ne
    b8ac:	2301      	movne	r3, #1
    b8ae:	2300      	moveq	r3, #0
    b8b0:	b2db      	uxtb	r3, r3
    b8b2:	f083 0301 	eor.w	r3, r3, #1
    b8b6:	b2db      	uxtb	r3, r3
    b8b8:	f88d 300b 	strb.w	r3, [sp, #11]
    b8bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b8c0:	f003 0301 	and.w	r3, r3, #1
    b8c4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b8c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b8cc:	2b00      	cmp	r3, #0
    b8ce:	d003      	beq.n	b8d8 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    b8d0:	9803      	ldr	r0, [sp, #12]
    b8d2:	f000 fb65 	bl	bfa0 <FlexCAN_Enable>
    b8d6:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    b8d8:	9b05      	ldr	r3, [sp, #20]
    b8da:	2b00      	cmp	r3, #0
    b8dc:	d102      	bne.n	b8e4 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x64>
    {
        pBase->RX14MASK = mask;
    b8de:	9b03      	ldr	r3, [sp, #12]
    b8e0:	9a00      	ldr	r2, [sp, #0]
    b8e2:	615a      	str	r2, [r3, #20]
    }
    if (TRUE == disabled)
    b8e4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b8e8:	2b00      	cmp	r3, #0
    b8ea:	d008      	beq.n	b8fe <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    b8ec:	9803      	ldr	r0, [sp, #12]
    b8ee:	f000 fbd5 	bl	c09c <FlexCAN_Disable>
    b8f2:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b8f4:	9b04      	ldr	r3, [sp, #16]
    b8f6:	2b00      	cmp	r3, #0
    b8f8:	d001      	beq.n	b8fe <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
        {
            result = status;
    b8fa:	9b04      	ldr	r3, [sp, #16]
    b8fc:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b8fe:	9b05      	ldr	r3, [sp, #20]
}
    b900:	4618      	mov	r0, r3
    b902:	b007      	add	sp, #28
    b904:	f85d fb04 	ldr.w	pc, [sp], #4
    b908:	00010488 	.word	0x00010488

0000b90c <FlexCAN_Ip_SetRxMb15Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb15Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb15Mask_Privileged(uint8 instance, uint32 mask)
{
    b90c:	b500      	push	{lr}
    b90e:	b087      	sub	sp, #28
    b910:	4603      	mov	r3, r0
    b912:	9100      	str	r1, [sp, #0]
    b914:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b918:	2300      	movs	r3, #0
    b91a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b91c:	2300      	movs	r3, #0
    b91e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b920:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b924:	4a1b      	ldr	r2, [pc, #108]	; (b994 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x88>)
    b926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b92a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b92c:	9803      	ldr	r0, [sp, #12]
    b92e:	f7fd fb15 	bl	8f5c <FlexCAN_IsEnabled>
    b932:	4603      	mov	r3, r0
    b934:	2b00      	cmp	r3, #0
    b936:	bf14      	ite	ne
    b938:	2301      	movne	r3, #1
    b93a:	2300      	moveq	r3, #0
    b93c:	b2db      	uxtb	r3, r3
    b93e:	f083 0301 	eor.w	r3, r3, #1
    b942:	b2db      	uxtb	r3, r3
    b944:	f88d 300b 	strb.w	r3, [sp, #11]
    b948:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b94c:	f003 0301 	and.w	r3, r3, #1
    b950:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b954:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b958:	2b00      	cmp	r3, #0
    b95a:	d003      	beq.n	b964 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    b95c:	9803      	ldr	r0, [sp, #12]
    b95e:	f000 fb1f 	bl	bfa0 <FlexCAN_Enable>
    b962:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    b964:	9b05      	ldr	r3, [sp, #20]
    b966:	2b00      	cmp	r3, #0
    b968:	d102      	bne.n	b970 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x64>
    {
        pBase->RX15MASK = mask;
    b96a:	9b03      	ldr	r3, [sp, #12]
    b96c:	9a00      	ldr	r2, [sp, #0]
    b96e:	619a      	str	r2, [r3, #24]
    }

    if (TRUE == disabled)
    b970:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b974:	2b00      	cmp	r3, #0
    b976:	d008      	beq.n	b98a <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    b978:	9803      	ldr	r0, [sp, #12]
    b97a:	f000 fb8f 	bl	c09c <FlexCAN_Disable>
    b97e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b980:	9b04      	ldr	r3, [sp, #16]
    b982:	2b00      	cmp	r3, #0
    b984:	d001      	beq.n	b98a <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
        {
            result = status;
    b986:	9b04      	ldr	r3, [sp, #16]
    b988:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b98a:	9b05      	ldr	r3, [sp, #20]
}
    b98c:	4618      	mov	r0, r3
    b98e:	b007      	add	sp, #28
    b990:	f85d fb04 	ldr.w	pc, [sp], #4
    b994:	00010488 	.word	0x00010488

0000b998 <FlexCAN_Ip_SetListenOnlyMode_Privileged>:
 * This function will enable or disable Listen Only mode.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_SetListenOnlyMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetListenOnlyMode_Privileged(uint8 instance, const boolean enable)
{
    b998:	b500      	push	{lr}
    b99a:	b087      	sub	sp, #28
    b99c:	4603      	mov	r3, r0
    b99e:	460a      	mov	r2, r1
    b9a0:	f88d 3007 	strb.w	r3, [sp, #7]
    b9a4:	4613      	mov	r3, r2
    b9a6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b9aa:	2300      	movs	r3, #0
    b9ac:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b9ae:	2300      	movs	r3, #0
    b9b0:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b9b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b9b6:	4a1f      	ldr	r2, [pc, #124]	; (ba34 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x9c>)
    b9b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9bc:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b9be:	9803      	ldr	r0, [sp, #12]
    b9c0:	f7fd facc 	bl	8f5c <FlexCAN_IsEnabled>
    b9c4:	4603      	mov	r3, r0
    b9c6:	2b00      	cmp	r3, #0
    b9c8:	bf14      	ite	ne
    b9ca:	2301      	movne	r3, #1
    b9cc:	2300      	moveq	r3, #0
    b9ce:	b2db      	uxtb	r3, r3
    b9d0:	f083 0301 	eor.w	r3, r3, #1
    b9d4:	b2db      	uxtb	r3, r3
    b9d6:	f88d 300b 	strb.w	r3, [sp, #11]
    b9da:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b9de:	f003 0301 	and.w	r3, r3, #1
    b9e2:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b9e6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b9ea:	2b00      	cmp	r3, #0
    b9ec:	d003      	beq.n	b9f6 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    b9ee:	9803      	ldr	r0, [sp, #12]
    b9f0:	f000 fad6 	bl	bfa0 <FlexCAN_Enable>
    b9f4:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b9f6:	9b05      	ldr	r3, [sp, #20]
    b9f8:	2b00      	cmp	r3, #0
    b9fa:	d109      	bne.n	ba10 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    b9fc:	f001 fff6 	bl	d9ec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
        FlexCAN_SetListenOnlyMode(pBase, enable);
    ba00:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ba04:	4619      	mov	r1, r3
    ba06:	9803      	ldr	r0, [sp, #12]
    ba08:	f7fd fae5 	bl	8fd6 <FlexCAN_SetListenOnlyMode>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    ba0c:	f002 f81a 	bl	da44 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
    }

    if (TRUE == disabled)
    ba10:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ba14:	2b00      	cmp	r3, #0
    ba16:	d008      	beq.n	ba2a <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    ba18:	9803      	ldr	r0, [sp, #12]
    ba1a:	f000 fb3f 	bl	c09c <FlexCAN_Disable>
    ba1e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    ba20:	9b04      	ldr	r3, [sp, #16]
    ba22:	2b00      	cmp	r3, #0
    ba24:	d001      	beq.n	ba2a <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
        {
            result = status;
    ba26:	9b04      	ldr	r3, [sp, #16]
    ba28:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    ba2a:	9b05      	ldr	r3, [sp, #20]
}
    ba2c:	4618      	mov	r0, r3
    ba2e:	b007      	add	sp, #28
    ba30:	f85d fb04 	ldr.w	pc, [sp], #4
    ba34:	00010488 	.word	0x00010488

0000ba38 <FlexCAN_Ip_GetListenOnlyMode>:
 * Description   : Check if Listen Only mode is ENABLE.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_GetListenOnlyMode_Activity */
boolean FlexCAN_Ip_GetListenOnlyMode(uint8 instance)
{
    ba38:	b500      	push	{lr}
    ba3a:	b085      	sub	sp, #20
    ba3c:	4603      	mov	r3, r0
    ba3e:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    ba42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ba46:	4a06      	ldr	r2, [pc, #24]	; (ba60 <FlexCAN_Ip_GetListenOnlyMode+0x28>)
    ba48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba4c:	9303      	str	r3, [sp, #12]
    return FlexCAN_IsListenOnlyModeEnabled(base);
    ba4e:	9803      	ldr	r0, [sp, #12]
    ba50:	f7fd fc5d 	bl	930e <FlexCAN_IsListenOnlyModeEnabled>
    ba54:	4603      	mov	r3, r0
}
    ba56:	4618      	mov	r0, r3
    ba58:	b005      	add	sp, #20
    ba5a:	f85d fb04 	ldr.w	pc, [sp], #4
    ba5e:	bf00      	nop
    ba60:	00010488 	.word	0x00010488

0000ba64 <FlexCAN_Ip_ManualBusOffRecovery>:
 * Description   : Recover manually from bus-off if possible.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_ManualBusOffRecovery_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ManualBusOffRecovery(uint8 Instance)
{
    ba64:	b500      	push	{lr}
    ba66:	b089      	sub	sp, #36	; 0x24
    ba68:	4603      	mov	r3, r0
    ba6a:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * Base = Flexcan_Ip_apxBase[Instance];
    ba6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ba72:	4a27      	ldr	r2, [pc, #156]	; (bb10 <FlexCAN_Ip_ManualBusOffRecovery+0xac>)
    ba74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba78:	9305      	str	r3, [sp, #20]
    uint32 timeStart = 0U;
    ba7a:	2300      	movs	r3, #0
    ba7c:	9303      	str	r3, [sp, #12]
    uint32 timeElapsed = 0U;
    ba7e:	2300      	movs	r3, #0
    ba80:	9307      	str	r3, [sp, #28]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ba82:	2100      	movs	r1, #0
    ba84:	4823      	ldr	r0, [pc, #140]	; (bb14 <FlexCAN_Ip_ManualBusOffRecovery+0xb0>)
    ba86:	f7f6 fbdd 	bl	2244 <OsIf_MicrosToTicks>
    ba8a:	9004      	str	r0, [sp, #16]
    Flexcan_Ip_StatusType RetVal = FLEXCAN_STATUS_ERROR;
    ba8c:	2301      	movs	r3, #1
    ba8e:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Recover from bus-off when Automatic recovering from Bus Off state disabled. */
    if ((Base->CTRL1 & FLEXCAN_CTRL1_BOFFREC_MASK) != 0U)
    ba90:	9b05      	ldr	r3, [sp, #20]
    ba92:	685b      	ldr	r3, [r3, #4]
    ba94:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ba98:	2b00      	cmp	r3, #0
    ba9a:	d033      	beq.n	bb04 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
    {
        RetVal = FLEXCAN_STATUS_SUCCESS;
    ba9c:	2300      	movs	r3, #0
    ba9e:	9306      	str	r3, [sp, #24]
        /* return success if the controller is not in bus-off */
        if ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    baa0:	9b05      	ldr	r3, [sp, #20]
    baa2:	6a1b      	ldr	r3, [r3, #32]
    baa4:	f003 0320 	and.w	r3, r3, #32
    baa8:	2b00      	cmp	r3, #0
    baaa:	d02b      	beq.n	bb04 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
        {
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    baac:	f002 fad2 	bl	e054 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* negate to recover from bus-off */
            Base->CTRL1 &= ~FLEXCAN_CTRL1_BOFFREC_MASK;
    bab0:	9b05      	ldr	r3, [sp, #20]
    bab2:	685b      	ldr	r3, [r3, #4]
    bab4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    bab8:	9b05      	ldr	r3, [sp, #20]
    baba:	605a      	str	r2, [r3, #4]
            /* re-assert to disable bus-off auto reocvery */
            Base->CTRL1 |= FLEXCAN_CTRL1_BOFFREC_MASK;
    babc:	9b05      	ldr	r3, [sp, #20]
    babe:	685b      	ldr	r3, [r3, #4]
    bac0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    bac4:	9b05      	ldr	r3, [sp, #20]
    bac6:	605a      	str	r2, [r3, #4]
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    bac8:	f002 faf0 	bl	e0ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* Wait till exit bus-off */
            timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bacc:	2000      	movs	r0, #0
    bace:	f7f6 fb6d 	bl	21ac <OsIf_GetCounter>
    bad2:	4603      	mov	r3, r0
    bad4:	9303      	str	r3, [sp, #12]

            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    bad6:	e00f      	b.n	baf8 <FlexCAN_Ip_ManualBusOffRecovery+0x94>
            {
                timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bad8:	ab03      	add	r3, sp, #12
    bada:	2100      	movs	r1, #0
    badc:	4618      	mov	r0, r3
    bade:	f7f6 fb7e 	bl	21de <OsIf_GetElapsed>
    bae2:	4602      	mov	r2, r0
    bae4:	9b07      	ldr	r3, [sp, #28]
    bae6:	4413      	add	r3, r2
    bae8:	9307      	str	r3, [sp, #28]
                if (timeElapsed >= uS2Ticks)
    baea:	9a07      	ldr	r2, [sp, #28]
    baec:	9b04      	ldr	r3, [sp, #16]
    baee:	429a      	cmp	r2, r3
    baf0:	d302      	bcc.n	baf8 <FlexCAN_Ip_ManualBusOffRecovery+0x94>
                {
                    RetVal = FLEXCAN_STATUS_TIMEOUT;
    baf2:	2303      	movs	r3, #3
    baf4:	9306      	str	r3, [sp, #24]
                    break;
    baf6:	e005      	b.n	bb04 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    baf8:	9b05      	ldr	r3, [sp, #20]
    bafa:	6a1b      	ldr	r3, [r3, #32]
    bafc:	f003 0320 	and.w	r3, r3, #32
    bb00:	2b00      	cmp	r3, #0
    bb02:	d1e9      	bne.n	bad8 <FlexCAN_Ip_ManualBusOffRecovery+0x74>
                }
            }
        }
    }

    return RetVal;
    bb04:	9b06      	ldr	r3, [sp, #24]
}
    bb06:	4618      	mov	r0, r3
    bb08:	b009      	add	sp, #36	; 0x24
    bb0a:	f85d fb04 	ldr.w	pc, [sp], #4
    bb0e:	bf00      	nop
    bb10:	00010488 	.word	0x00010488
    bb14:	000f4240 	.word	0x000f4240

0000bb18 <FlexCAN_SetSelfReception>:
{
    bb18:	b082      	sub	sp, #8
    bb1a:	9001      	str	r0, [sp, #4]
    bb1c:	460b      	mov	r3, r1
    bb1e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    bb22:	9b01      	ldr	r3, [sp, #4]
    bb24:	681b      	ldr	r3, [r3, #0]
    bb26:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    bb2a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bb2e:	2a00      	cmp	r2, #0
    bb30:	d001      	beq.n	bb36 <FlexCAN_SetSelfReception+0x1e>
    bb32:	2200      	movs	r2, #0
    bb34:	e001      	b.n	bb3a <FlexCAN_SetSelfReception+0x22>
    bb36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    bb3a:	431a      	orrs	r2, r3
    bb3c:	9b01      	ldr	r3, [sp, #4]
    bb3e:	601a      	str	r2, [r3, #0]
}
    bb40:	bf00      	nop
    bb42:	b002      	add	sp, #8
    bb44:	4770      	bx	lr

0000bb46 <FlexCAN_IsFDEnabled>:
{
    bb46:	b082      	sub	sp, #8
    bb48:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    bb4a:	9b01      	ldr	r3, [sp, #4]
    bb4c:	681b      	ldr	r3, [r3, #0]
    bb4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    bb52:	2b00      	cmp	r3, #0
    bb54:	bf14      	ite	ne
    bb56:	2301      	movne	r3, #1
    bb58:	2300      	moveq	r3, #0
    bb5a:	b2db      	uxtb	r3, r3
}
    bb5c:	4618      	mov	r0, r3
    bb5e:	b002      	add	sp, #8
    bb60:	4770      	bx	lr

0000bb62 <FlexCAN_SetIsoCan>:
{
    bb62:	b082      	sub	sp, #8
    bb64:	9001      	str	r0, [sp, #4]
    bb66:	460b      	mov	r3, r1
    bb68:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ISOCANFDEN_MASK) | FLEXCAN_CTRL2_ISOCANFDEN(enable ? 1UL : 0UL);
    bb6c:	9b01      	ldr	r3, [sp, #4]
    bb6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bb70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    bb74:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bb78:	2a00      	cmp	r2, #0
    bb7a:	d002      	beq.n	bb82 <FlexCAN_SetIsoCan+0x20>
    bb7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    bb80:	e000      	b.n	bb84 <FlexCAN_SetIsoCan+0x22>
    bb82:	2200      	movs	r2, #0
    bb84:	431a      	orrs	r2, r3
    bb86:	9b01      	ldr	r3, [sp, #4]
    bb88:	635a      	str	r2, [r3, #52]	; 0x34
}
    bb8a:	bf00      	nop
    bb8c:	b002      	add	sp, #8
    bb8e:	4770      	bx	lr

0000bb90 <FlexCAN_SetEntireFrameArbitrationFieldComparison>:
{
    bb90:	b082      	sub	sp, #8
    bb92:	9001      	str	r0, [sp, #4]
    bb94:	460b      	mov	r3, r1
    bb96:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EACEN_MASK) | FLEXCAN_CTRL2_EACEN(enable ? 1UL : 0UL);
    bb9a:	9b01      	ldr	r3, [sp, #4]
    bb9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bb9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    bba2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bba6:	2a00      	cmp	r2, #0
    bba8:	d002      	beq.n	bbb0 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x20>
    bbaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    bbae:	e000      	b.n	bbb2 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x22>
    bbb0:	2200      	movs	r2, #0
    bbb2:	431a      	orrs	r2, r3
    bbb4:	9b01      	ldr	r3, [sp, #4]
    bbb6:	635a      	str	r2, [r3, #52]	; 0x34
}
    bbb8:	bf00      	nop
    bbba:	b002      	add	sp, #8
    bbbc:	4770      	bx	lr

0000bbbe <FlexCAN_SetProtocolException>:
{
    bbbe:	b082      	sub	sp, #8
    bbc0:	9001      	str	r0, [sp, #4]
    bbc2:	460b      	mov	r3, r1
    bbc4:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_PREXCEN_MASK) | FLEXCAN_CTRL2_PREXCEN(enable ? 1UL : 0UL);
    bbc8:	9b01      	ldr	r3, [sp, #4]
    bbca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bbcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    bbd0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bbd4:	2a00      	cmp	r2, #0
    bbd6:	d002      	beq.n	bbde <FlexCAN_SetProtocolException+0x20>
    bbd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    bbdc:	e000      	b.n	bbe0 <FlexCAN_SetProtocolException+0x22>
    bbde:	2200      	movs	r2, #0
    bbe0:	431a      	orrs	r2, r3
    bbe2:	9b01      	ldr	r3, [sp, #4]
    bbe4:	635a      	str	r2, [r3, #52]	; 0x34
}
    bbe6:	bf00      	nop
    bbe8:	b002      	add	sp, #8
    bbea:	4770      	bx	lr

0000bbec <FlexCAN_SetRemoteReqStore>:
{
    bbec:	b082      	sub	sp, #8
    bbee:	9001      	str	r0, [sp, #4]
    bbf0:	460b      	mov	r3, r1
    bbf2:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RRS_MASK) | FLEXCAN_CTRL2_RRS(enable ? 1UL : 0UL);
    bbf6:	9b01      	ldr	r3, [sp, #4]
    bbf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bbfa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    bbfe:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bc02:	2a00      	cmp	r2, #0
    bc04:	d002      	beq.n	bc0c <FlexCAN_SetRemoteReqStore+0x20>
    bc06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    bc0a:	e000      	b.n	bc0e <FlexCAN_SetRemoteReqStore+0x22>
    bc0c:	2200      	movs	r2, #0
    bc0e:	431a      	orrs	r2, r3
    bc10:	9b01      	ldr	r3, [sp, #4]
    bc12:	635a      	str	r2, [r3, #52]	; 0x34
}
    bc14:	bf00      	nop
    bc16:	b002      	add	sp, #8
    bc18:	4770      	bx	lr

0000bc1a <FlexCAN_SetBusOffAutorecovery>:
{
    bc1a:	b082      	sub	sp, #8
    bc1c:	9001      	str	r0, [sp, #4]
    bc1e:	460b      	mov	r3, r1
    bc20:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_BOFFREC_MASK) | FLEXCAN_CTRL1_BOFFREC(enable ? 0UL : 1UL);
    bc24:	9b01      	ldr	r3, [sp, #4]
    bc26:	685b      	ldr	r3, [r3, #4]
    bc28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    bc2c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bc30:	2a00      	cmp	r2, #0
    bc32:	d001      	beq.n	bc38 <FlexCAN_SetBusOffAutorecovery+0x1e>
    bc34:	2200      	movs	r2, #0
    bc36:	e000      	b.n	bc3a <FlexCAN_SetBusOffAutorecovery+0x20>
    bc38:	2240      	movs	r2, #64	; 0x40
    bc3a:	431a      	orrs	r2, r3
    bc3c:	9b01      	ldr	r3, [sp, #4]
    bc3e:	605a      	str	r2, [r3, #4]
}
    bc40:	bf00      	nop
    bc42:	b002      	add	sp, #8
    bc44:	4770      	bx	lr

0000bc46 <FlexCAN_SetEdgeFilter>:
{
    bc46:	b082      	sub	sp, #8
    bc48:	9001      	str	r0, [sp, #4]
    bc4a:	460b      	mov	r3, r1
    bc4c:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EDFLTDIS_MASK) | FLEXCAN_CTRL2_EDFLTDIS(enable ? 0UL : 1UL);
    bc50:	9b01      	ldr	r3, [sp, #4]
    bc52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bc54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    bc58:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bc5c:	2a00      	cmp	r2, #0
    bc5e:	d001      	beq.n	bc64 <FlexCAN_SetEdgeFilter+0x1e>
    bc60:	2200      	movs	r2, #0
    bc62:	e001      	b.n	bc68 <FlexCAN_SetEdgeFilter+0x22>
    bc64:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bc68:	431a      	orrs	r2, r3
    bc6a:	9b01      	ldr	r3, [sp, #4]
    bc6c:	635a      	str	r2, [r3, #52]	; 0x34
}
    bc6e:	bf00      	nop
    bc70:	b002      	add	sp, #8
    bc72:	4770      	bx	lr

0000bc74 <FlexCAN_CanBitSampling>:
{
    bc74:	b082      	sub	sp, #8
    bc76:	9001      	str	r0, [sp, #4]
    bc78:	460b      	mov	r3, r1
    bc7a:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_SMP_MASK) | FLEXCAN_CTRL1_SMP(enable ? 1UL : 0UL);
    bc7e:	9b01      	ldr	r3, [sp, #4]
    bc80:	685b      	ldr	r3, [r3, #4]
    bc82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    bc86:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bc8a:	2a00      	cmp	r2, #0
    bc8c:	d001      	beq.n	bc92 <FlexCAN_CanBitSampling+0x1e>
    bc8e:	2280      	movs	r2, #128	; 0x80
    bc90:	e000      	b.n	bc94 <FlexCAN_CanBitSampling+0x20>
    bc92:	2200      	movs	r2, #0
    bc94:	431a      	orrs	r2, r3
    bc96:	9b01      	ldr	r3, [sp, #4]
    bc98:	605a      	str	r2, [r3, #4]
}
    bc9a:	bf00      	nop
    bc9c:	b002      	add	sp, #8
    bc9e:	4770      	bx	lr

0000bca0 <FlexCAN_ComputeDLCValue>:
 * Function Name: FLEXCAN_ComputeDLCValue
 * Description  : Computes the DLC field value, given a payload size (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_ComputeDLCValue(uint8 payloadSize)
{
    bca0:	b084      	sub	sp, #16
    bca2:	4603      	mov	r3, r0
    bca4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 ret = 0xFFU;                   /* 0,  1,  2,  3,  4,  5,  6,  7,  8, */
    bca8:	23ff      	movs	r3, #255	; 0xff
    bcaa:	9303      	str	r3, [sp, #12]
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES
                                          };

    if (payloadSize <= 64U)
    bcac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bcb0:	2b40      	cmp	r3, #64	; 0x40
    bcb2:	d804      	bhi.n	bcbe <FlexCAN_ComputeDLCValue+0x1e>
    {
        ret = payload_code[payloadSize];
    bcb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bcb8:	4a03      	ldr	r2, [pc, #12]	; (bcc8 <FlexCAN_ComputeDLCValue+0x28>)
    bcba:	5cd3      	ldrb	r3, [r2, r3]
    bcbc:	9303      	str	r3, [sp, #12]
    else
    {
        /* The argument is not a valid payload size will return 0xFF*/
    }

    return (uint8)ret;
    bcbe:	9b03      	ldr	r3, [sp, #12]
    bcc0:	b2db      	uxtb	r3, r3
}
    bcc2:	4618      	mov	r0, r3
    bcc4:	b004      	add	sp, #16
    bcc6:	4770      	bx	lr
    bcc8:	00010494 	.word	0x00010494

0000bccc <FlexCAN_ClearRAM>:
 * Function Name : FLEXCAN_ClearRAM
 * Description   : Clears FlexCAN memory positions that require initialization.
 *
 *END**************************************************************************/
static void FlexCAN_ClearRAM(FLEXCAN_Type * base)
{
    bccc:	b500      	push	{lr}
    bcce:	b087      	sub	sp, #28
    bcd0:	9001      	str	r0, [sp, #4]
    uint32 databyte;
    uint32 RAM_size   = FlexCAN_GetMaxMbNum(base) * 4U;
    bcd2:	9801      	ldr	r0, [sp, #4]
    bcd4:	f000 f8f6 	bl	bec4 <FlexCAN_GetMaxMbNum>
    bcd8:	4603      	mov	r3, r0
    bcda:	009b      	lsls	r3, r3, #2
    bcdc:	9304      	str	r3, [sp, #16]
    uint32 RXIMR_size = FlexCAN_GetMaxMbNum(base);
    bcde:	9801      	ldr	r0, [sp, #4]
    bce0:	f000 f8f0 	bl	bec4 <FlexCAN_GetMaxMbNum>
    bce4:	9003      	str	r0, [sp, #12]
    /* Address of base + ram offset to point to MB start address */
    volatile uint32 * RAM = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    bce6:	9b01      	ldr	r3, [sp, #4]
    bce8:	3380      	adds	r3, #128	; 0x80
    bcea:	9302      	str	r3, [sp, #8]
    /* Clear MB region */
    for (databyte = 0U; databyte < RAM_size; databyte++)
    bcec:	2300      	movs	r3, #0
    bcee:	9305      	str	r3, [sp, #20]
    bcf0:	e008      	b.n	bd04 <FlexCAN_ClearRAM+0x38>
    {
        RAM[databyte] = 0x0U;
    bcf2:	9b05      	ldr	r3, [sp, #20]
    bcf4:	009b      	lsls	r3, r3, #2
    bcf6:	9a02      	ldr	r2, [sp, #8]
    bcf8:	4413      	add	r3, r2
    bcfa:	2200      	movs	r2, #0
    bcfc:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RAM_size; databyte++)
    bcfe:	9b05      	ldr	r3, [sp, #20]
    bd00:	3301      	adds	r3, #1
    bd02:	9305      	str	r3, [sp, #20]
    bd04:	9a05      	ldr	r2, [sp, #20]
    bd06:	9b04      	ldr	r3, [sp, #16]
    bd08:	429a      	cmp	r2, r3
    bd0a:	d3f2      	bcc.n	bcf2 <FlexCAN_ClearRAM+0x26>
    }
    RAM = (volatile uint32 *)base->RXIMR;
    bd0c:	9b01      	ldr	r3, [sp, #4]
    bd0e:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    bd12:	9302      	str	r3, [sp, #8]
    /* Clear RXIMR region */
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    bd14:	2300      	movs	r3, #0
    bd16:	9305      	str	r3, [sp, #20]
    bd18:	e008      	b.n	bd2c <FlexCAN_ClearRAM+0x60>
    {
        RAM[databyte] = 0x0U;
    bd1a:	9b05      	ldr	r3, [sp, #20]
    bd1c:	009b      	lsls	r3, r3, #2
    bd1e:	9a02      	ldr	r2, [sp, #8]
    bd20:	4413      	add	r3, r2
    bd22:	2200      	movs	r2, #0
    bd24:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    bd26:	9b05      	ldr	r3, [sp, #20]
    bd28:	3301      	adds	r3, #1
    bd2a:	9305      	str	r3, [sp, #20]
    bd2c:	9a05      	ldr	r2, [sp, #20]
    bd2e:	9b03      	ldr	r3, [sp, #12]
    bd30:	429a      	cmp	r2, r3
    bd32:	d3f2      	bcc.n	bd1a <FlexCAN_ClearRAM+0x4e>
    }
#endif
    /* Clear WRMFRZ bit in CTRL2 Register to restrict write access to memory */
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_WRMFRZ_MASK) | FLEXCAN_CTRL2_WRMFRZ(0U);
#endif /* if FLEXCAN_IP_FEATURE_HAS_MEM_ERR_DET */
}
    bd34:	bf00      	nop
    bd36:	bf00      	nop
    bd38:	b007      	add	sp, #28
    bd3a:	f85d fb04 	ldr.w	pc, [sp], #4

0000bd3e <FlexCAN_ComputePayloadSize>:
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#else
static uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
{
    bd3e:	b084      	sub	sp, #16
    bd40:	4603      	mov	r3, r0
    bd42:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ret = 8U;
    bd46:	2308      	movs	r3, #8
    bd48:	f88d 300f 	strb.w	r3, [sp, #15]

    if (dlcValue <= 8U)
    bd4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bd50:	2b08      	cmp	r3, #8
    bd52:	d804      	bhi.n	bd5e <FlexCAN_ComputePayloadSize+0x20>
    {
        ret = dlcValue;
    bd54:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bd58:	f88d 300f 	strb.w	r3, [sp, #15]
    bd5c:	e033      	b.n	bdc6 <FlexCAN_ComputePayloadSize+0x88>
    }
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    else
    {
        switch (dlcValue)
    bd5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bd62:	3b09      	subs	r3, #9
    bd64:	2b06      	cmp	r3, #6
    bd66:	d82d      	bhi.n	bdc4 <FlexCAN_ComputePayloadSize+0x86>
    bd68:	a201      	add	r2, pc, #4	; (adr r2, bd70 <FlexCAN_ComputePayloadSize+0x32>)
    bd6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bd6e:	bf00      	nop
    bd70:	0000bd8d 	.word	0x0000bd8d
    bd74:	0000bd95 	.word	0x0000bd95
    bd78:	0000bd9d 	.word	0x0000bd9d
    bd7c:	0000bda5 	.word	0x0000bda5
    bd80:	0000bdad 	.word	0x0000bdad
    bd84:	0000bdb5 	.word	0x0000bdb5
    bd88:	0000bdbd 	.word	0x0000bdbd
        {
            case FLEXCAN_IP_DLC_VALUE_12_BYTES:
                ret = 12U;
    bd8c:	230c      	movs	r3, #12
    bd8e:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    bd92:	e018      	b.n	bdc6 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_16_BYTES:
                ret = 16U;
    bd94:	2310      	movs	r3, #16
    bd96:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    bd9a:	e014      	b.n	bdc6 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_20_BYTES:
                ret = 20U;
    bd9c:	2314      	movs	r3, #20
    bd9e:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    bda2:	e010      	b.n	bdc6 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_24_BYTES:
                ret = 24U;
    bda4:	2318      	movs	r3, #24
    bda6:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    bdaa:	e00c      	b.n	bdc6 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_32_BYTES:
                ret = 32U;
    bdac:	2320      	movs	r3, #32
    bdae:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    bdb2:	e008      	b.n	bdc6 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_48_BYTES:
                ret = 48U;
    bdb4:	2330      	movs	r3, #48	; 0x30
    bdb6:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    bdba:	e004      	b.n	bdc6 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_64_BYTES:
                ret = 64U;
    bdbc:	2340      	movs	r3, #64	; 0x40
    bdbe:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    bdc2:	e000      	b.n	bdc6 <FlexCAN_ComputePayloadSize+0x88>
            default:
                /* The argument is not a valid DLC size */
                break;
    bdc4:	bf00      	nop
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    return ret;
    bdc6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    bdca:	4618      	mov	r0, r3
    bdcc:	b004      	add	sp, #16
    bdce:	4770      	bx	lr

0000bdd0 <FlexCAN_GetMsgBuffRegion>:
 * Function Name : FLEXCAN_GetMsgBuffRegion
 * Description   : Returns the start of a MB area, based on its index.
 *
 *END**************************************************************************/
volatile uint32 * FlexCAN_GetMsgBuffRegion(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    bdd0:	b500      	push	{lr}
    bdd2:	b08b      	sub	sp, #44	; 0x2c
    bdd4:	9001      	str	r0, [sp, #4]
    bdd6:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    bdd8:	2308      	movs	r3, #8
    bdda:	f88d 3020 	strb.w	r3, [sp, #32]
    uint8 mb_size = 0U;
    bdde:	2300      	movs	r3, #0
    bde0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ramBlockSize = 512U;
    bde4:	f44f 7300 	mov.w	r3, #512	; 0x200
    bde8:	9307      	str	r3, [sp, #28]
    uint16 ramBlockOffset = 0;
    bdea:	2300      	movs	r3, #0
    bdec:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    uint8 msgBuffIdxBackup = (uint8)msgBuffIdx;
    bdf0:	9b00      	ldr	r3, [sp, #0]
    bdf2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint8 i=0U;
    bdf6:	2300      	movs	r3, #0
    bdf8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    uint8 maxMbNum=0U;
    bdfc:	2300      	movs	r3, #0
    bdfe:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    uint32 mb_index=0U;
    be02:	2300      	movs	r3, #0
    be04:	9306      	str	r3, [sp, #24]
    uint8 payload_size=0U;
    be06:	2300      	movs	r3, #0
    be08:	f88d 3017 	strb.w	r3, [sp, #23]
    volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    be0c:	9b01      	ldr	r3, [sp, #4]
    be0e:	3380      	adds	r3, #128	; 0x80
    be10:	9304      	str	r3, [sp, #16]
    volatile uint32 * pAddressRet = NULL_PTR;
    be12:	2300      	movs	r3, #0
    be14:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY == STD_ON)
    volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    be16:	2300      	movs	r3, #0
    be18:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    be1c:	e02d      	b.n	be7a <FlexCAN_GetMsgBuffRegion+0xaa>
    {
        payload_size = FlexCAN_GetPayloadSize(base, i);
    be1e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    be22:	4619      	mov	r1, r3
    be24:	9801      	ldr	r0, [sp, #4]
    be26:	f000 fad1 	bl	c3cc <FlexCAN_GetPayloadSize>
    be2a:	4603      	mov	r3, r0
    be2c:	f88d 3017 	strb.w	r3, [sp, #23]
        mb_size = (uint8)(payload_size + arbitration_field_size);
    be30:	f89d 2017 	ldrb.w	r2, [sp, #23]
    be34:	f89d 3020 	ldrb.w	r3, [sp, #32]
    be38:	4413      	add	r3, r2
    be3a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        maxMbNum = (uint8)(ramBlockSize / mb_size);
    be3e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    be42:	9a07      	ldr	r2, [sp, #28]
    be44:	fbb2 f3f3 	udiv	r3, r2, r3
    be48:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        if (maxMbNum > msgBuffIdxBackup)
    be4c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    be50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    be54:	429a      	cmp	r2, r3
    be56:	d815      	bhi.n	be84 <FlexCAN_GetMsgBuffRegion+0xb4>
        {
            break;
        }
        ramBlockOffset += 128U;
    be58:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    be5c:	3380      	adds	r3, #128	; 0x80
    be5e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        msgBuffIdxBackup -= maxMbNum;
    be62:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    be66:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    be6a:	1ad3      	subs	r3, r2, r3
    be6c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    be70:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    be74:	3301      	adds	r3, #1
    be76:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    be7a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    be7e:	2b00      	cmp	r3, #0
    be80:	d0cd      	beq.n	be1e <FlexCAN_GetMsgBuffRegion+0x4e>
    be82:	e000      	b.n	be86 <FlexCAN_GetMsgBuffRegion+0xb6>
            break;
    be84:	bf00      	nop
    }
    else
#endif
    {
        /* Multiply the MB index by the MB size (in words) */
        mb_index = (uint32)ramBlockOffset + (((uint32)msgBuffIdxBackup % (uint32)maxMbNum) * ((uint32)mb_size >> 2U));
    be86:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    be8a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    be8e:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    be92:	fbb3 f0f2 	udiv	r0, r3, r2
    be96:	fb00 f202 	mul.w	r2, r0, r2
    be9a:	1a9b      	subs	r3, r3, r2
    be9c:	b2db      	uxtb	r3, r3
    be9e:	461a      	mov	r2, r3
    bea0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    bea4:	089b      	lsrs	r3, r3, #2
    bea6:	b2db      	uxtb	r3, r3
    bea8:	fb02 f303 	mul.w	r3, r2, r3
    beac:	440b      	add	r3, r1
    beae:	9306      	str	r3, [sp, #24]
        pAddressRet = &(RAM[mb_index]);
    beb0:	9b06      	ldr	r3, [sp, #24]
    beb2:	009b      	lsls	r3, r3, #2
    beb4:	9a04      	ldr	r2, [sp, #16]
    beb6:	4413      	add	r3, r2
    beb8:	9303      	str	r3, [sp, #12]
    }

    return pAddressRet;
    beba:	9b03      	ldr	r3, [sp, #12]
}
    bebc:	4618      	mov	r0, r3
    bebe:	b00b      	add	sp, #44	; 0x2c
    bec0:	f85d fb04 	ldr.w	pc, [sp], #4

0000bec4 <FlexCAN_GetMaxMbNum>:
 * Function Name : FlexCAN_GetMaxMbNum
 * Description   : Computes the maximum RAM size occupied by MBs.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMaxMbNum(const FLEXCAN_Type * base)
{
    bec4:	b084      	sub	sp, #16
    bec6:	9001      	str	r0, [sp, #4]
    uint32 i, ret = 0u;
    bec8:	2300      	movs	r3, #0
    beca:	9302      	str	r3, [sp, #8]
    static FLEXCAN_Type * const flexcanBase[] = IP_FLEXCAN_BASE_PTRS;
    static const uint32 maxMbNum[] = FLEXCAN_IP_FEATURE_MAX_MB_NUM_ARRAY;

    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    becc:	2300      	movs	r3, #0
    bece:	9303      	str	r3, [sp, #12]
    bed0:	e00e      	b.n	bef0 <FlexCAN_GetMaxMbNum+0x2c>
    {
        if (base == flexcanBase[i])
    bed2:	4a0b      	ldr	r2, [pc, #44]	; (bf00 <FlexCAN_GetMaxMbNum+0x3c>)
    bed4:	9b03      	ldr	r3, [sp, #12]
    bed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    beda:	9a01      	ldr	r2, [sp, #4]
    bedc:	429a      	cmp	r2, r3
    bede:	d104      	bne.n	beea <FlexCAN_GetMaxMbNum+0x26>
        {
            ret = maxMbNum[i];
    bee0:	4a08      	ldr	r2, [pc, #32]	; (bf04 <FlexCAN_GetMaxMbNum+0x40>)
    bee2:	9b03      	ldr	r3, [sp, #12]
    bee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bee8:	9302      	str	r3, [sp, #8]
    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    beea:	9b03      	ldr	r3, [sp, #12]
    beec:	3301      	adds	r3, #1
    beee:	9303      	str	r3, [sp, #12]
    bef0:	9b03      	ldr	r3, [sp, #12]
    bef2:	2b02      	cmp	r3, #2
    bef4:	d9ed      	bls.n	bed2 <FlexCAN_GetMaxMbNum+0xe>
        }
    }
    return ret;
    bef6:	9b02      	ldr	r3, [sp, #8]
}
    bef8:	4618      	mov	r0, r3
    befa:	b004      	add	sp, #16
    befc:	4770      	bx	lr
    befe:	bf00      	nop
    bf00:	000104d8 	.word	0x000104d8
    bf04:	000104e4 	.word	0x000104e4

0000bf08 <FlexCAN_EnterFreezeMode>:
 * Function Name : FLEXCAN_EnterFreezeMode
 * Description   : Enter the freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnterFreezeMode(FLEXCAN_Type * base)
{
    bf08:	b500      	push	{lr}
    bf0a:	b087      	sub	sp, #28
    bf0c:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    bf0e:	2300      	movs	r3, #0
    bf10:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    bf12:	2300      	movs	r3, #0
    bf14:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bf16:	2100      	movs	r1, #0
    bf18:	4820      	ldr	r0, [pc, #128]	; (bf9c <FlexCAN_EnterFreezeMode+0x94>)
    bf1a:	f7f6 f993 	bl	2244 <OsIf_MicrosToTicks>
    bf1e:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    bf20:	2300      	movs	r3, #0
    bf22:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    bf24:	f001 fad2 	bl	d4cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(1U);
    bf28:	9b01      	ldr	r3, [sp, #4]
    bf2a:	681b      	ldr	r3, [r3, #0]
    bf2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    bf30:	9b01      	ldr	r3, [sp, #4]
    bf32:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(1U);
    bf34:	9b01      	ldr	r3, [sp, #4]
    bf36:	681b      	ldr	r3, [r3, #0]
    bf38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
    bf3c:	9b01      	ldr	r3, [sp, #4]
    bf3e:	601a      	str	r2, [r3, #0]
    if (((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U)
    bf40:	9b01      	ldr	r3, [sp, #4]
    bf42:	681b      	ldr	r3, [r3, #0]
    bf44:	2b00      	cmp	r3, #0
    bf46:	da05      	bge.n	bf54 <FlexCAN_EnterFreezeMode+0x4c>
    {
        base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    bf48:	9b01      	ldr	r3, [sp, #4]
    bf4a:	681b      	ldr	r3, [r3, #0]
    bf4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    bf50:	9b01      	ldr	r3, [sp, #4]
    bf52:	601a      	str	r2, [r3, #0]
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    bf54:	f001 fae6 	bl	d524 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bf58:	2000      	movs	r0, #0
    bf5a:	f7f6 f927 	bl	21ac <OsIf_GetCounter>
    bf5e:	4603      	mov	r3, r0
    bf60:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    bf62:	e00f      	b.n	bf84 <FlexCAN_EnterFreezeMode+0x7c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bf64:	ab02      	add	r3, sp, #8
    bf66:	2100      	movs	r1, #0
    bf68:	4618      	mov	r0, r3
    bf6a:	f7f6 f938 	bl	21de <OsIf_GetElapsed>
    bf6e:	4602      	mov	r2, r0
    bf70:	9b05      	ldr	r3, [sp, #20]
    bf72:	4413      	add	r3, r2
    bf74:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    bf76:	9a05      	ldr	r2, [sp, #20]
    bf78:	9b03      	ldr	r3, [sp, #12]
    bf7a:	429a      	cmp	r2, r3
    bf7c:	d302      	bcc.n	bf84 <FlexCAN_EnterFreezeMode+0x7c>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    bf7e:	2303      	movs	r3, #3
    bf80:	9304      	str	r3, [sp, #16]
            break;
    bf82:	e005      	b.n	bf90 <FlexCAN_EnterFreezeMode+0x88>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    bf84:	9b01      	ldr	r3, [sp, #4]
    bf86:	681b      	ldr	r3, [r3, #0]
    bf88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    bf8c:	2b00      	cmp	r3, #0
    bf8e:	d0e9      	beq.n	bf64 <FlexCAN_EnterFreezeMode+0x5c>
        }
    }

    return returnResult;
    bf90:	9b04      	ldr	r3, [sp, #16]
}
    bf92:	4618      	mov	r0, r3
    bf94:	b007      	add	sp, #28
    bf96:	f85d fb04 	ldr.w	pc, [sp], #4
    bf9a:	bf00      	nop
    bf9c:	000f4240 	.word	0x000f4240

0000bfa0 <FlexCAN_Enable>:
 * Function Name : FlexCAN_Enable
 * Description   : Enable the clock for FlexCAN Module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Enable(FLEXCAN_Type * base)
{
    bfa0:	b500      	push	{lr}
    bfa2:	b087      	sub	sp, #28
    bfa4:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    bfa6:	2300      	movs	r3, #0
    bfa8:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    bfaa:	2300      	movs	r3, #0
    bfac:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bfae:	2100      	movs	r1, #0
    bfb0:	4818      	ldr	r0, [pc, #96]	; (c014 <FlexCAN_Enable+0x74>)
    bfb2:	f7f6 f947 	bl	2244 <OsIf_MicrosToTicks>
    bfb6:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    bfb8:	2300      	movs	r3, #0
    bfba:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    bfbc:	f001 fad8 	bl	d570 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>

    /* Enable Module */
    base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    bfc0:	9b01      	ldr	r3, [sp, #4]
    bfc2:	681b      	ldr	r3, [r3, #0]
    bfc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    bfc8:	9b01      	ldr	r3, [sp, #4]
    bfca:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    bfcc:	f001 fafc 	bl	d5c8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bfd0:	2000      	movs	r0, #0
    bfd2:	f7f6 f8eb 	bl	21ac <OsIf_GetCounter>
    bfd6:	4603      	mov	r3, r0
    bfd8:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    bfda:	e00f      	b.n	bffc <FlexCAN_Enable+0x5c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bfdc:	ab02      	add	r3, sp, #8
    bfde:	2100      	movs	r1, #0
    bfe0:	4618      	mov	r0, r3
    bfe2:	f7f6 f8fc 	bl	21de <OsIf_GetElapsed>
    bfe6:	4602      	mov	r2, r0
    bfe8:	9b05      	ldr	r3, [sp, #20]
    bfea:	4413      	add	r3, r2
    bfec:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    bfee:	9a05      	ldr	r2, [sp, #20]
    bff0:	9b03      	ldr	r3, [sp, #12]
    bff2:	429a      	cmp	r2, r3
    bff4:	d302      	bcc.n	bffc <FlexCAN_Enable+0x5c>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    bff6:	2303      	movs	r3, #3
    bff8:	9304      	str	r3, [sp, #16]
            break;
    bffa:	e005      	b.n	c008 <FlexCAN_Enable+0x68>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    bffc:	9b01      	ldr	r3, [sp, #4]
    bffe:	681b      	ldr	r3, [r3, #0]
    c000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    c004:	2b00      	cmp	r3, #0
    c006:	d0e9      	beq.n	bfdc <FlexCAN_Enable+0x3c>
        }
    }
    return returnValue;
    c008:	9b04      	ldr	r3, [sp, #16]
}
    c00a:	4618      	mov	r0, r3
    c00c:	b007      	add	sp, #28
    c00e:	f85d fb04 	ldr.w	pc, [sp], #4
    c012:	bf00      	nop
    c014:	000f4240 	.word	0x000f4240

0000c018 <FlexCAN_ExitFreezeMode>:
 * Function Name : FLEXCAN_ExitFreezeMode
 * Description   : Exit of freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_ExitFreezeMode(FLEXCAN_Type * base)
{
    c018:	b500      	push	{lr}
    c01a:	b087      	sub	sp, #28
    c01c:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    c01e:	2300      	movs	r3, #0
    c020:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    c022:	2300      	movs	r3, #0
    c024:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c026:	2100      	movs	r1, #0
    c028:	481b      	ldr	r0, [pc, #108]	; (c098 <FlexCAN_ExitFreezeMode+0x80>)
    c02a:	f7f6 f90b 	bl	2244 <OsIf_MicrosToTicks>
    c02e:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    c030:	2300      	movs	r3, #0
    c032:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    c034:	f001 faee 	bl	d614 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(0U);
    c038:	9b01      	ldr	r3, [sp, #4]
    c03a:	681b      	ldr	r3, [r3, #0]
    c03c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
    c040:	9b01      	ldr	r3, [sp, #4]
    c042:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(0U);
    c044:	9b01      	ldr	r3, [sp, #4]
    c046:	681b      	ldr	r3, [r3, #0]
    c048:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    c04c:	9b01      	ldr	r3, [sp, #4]
    c04e:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    c050:	f001 fb0c 	bl	d66c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    /* Wait till exit freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c054:	2000      	movs	r0, #0
    c056:	f7f6 f8a9 	bl	21ac <OsIf_GetCounter>
    c05a:	4603      	mov	r3, r0
    c05c:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    c05e:	e00f      	b.n	c080 <FlexCAN_ExitFreezeMode+0x68>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c060:	ab02      	add	r3, sp, #8
    c062:	2100      	movs	r1, #0
    c064:	4618      	mov	r0, r3
    c066:	f7f6 f8ba 	bl	21de <OsIf_GetElapsed>
    c06a:	4602      	mov	r2, r0
    c06c:	9b05      	ldr	r3, [sp, #20]
    c06e:	4413      	add	r3, r2
    c070:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    c072:	9a05      	ldr	r2, [sp, #20]
    c074:	9b03      	ldr	r3, [sp, #12]
    c076:	429a      	cmp	r2, r3
    c078:	d302      	bcc.n	c080 <FlexCAN_ExitFreezeMode+0x68>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    c07a:	2303      	movs	r3, #3
    c07c:	9304      	str	r3, [sp, #16]
            break;
    c07e:	e005      	b.n	c08c <FlexCAN_ExitFreezeMode+0x74>
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    c080:	9b01      	ldr	r3, [sp, #4]
    c082:	681b      	ldr	r3, [r3, #0]
    c084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    c088:	2b00      	cmp	r3, #0
    c08a:	d1e9      	bne.n	c060 <FlexCAN_ExitFreezeMode+0x48>
        }
    }
    return returnValue;
    c08c:	9b04      	ldr	r3, [sp, #16]
}
    c08e:	4618      	mov	r0, r3
    c090:	b007      	add	sp, #28
    c092:	f85d fb04 	ldr.w	pc, [sp], #4
    c096:	bf00      	nop
    c098:	000f4240 	.word	0x000f4240

0000c09c <FlexCAN_Disable>:
 * Description   : Disable FlexCAN module.
 * This function will disable FlexCAN module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Disable(FLEXCAN_Type * base)
{
    c09c:	b500      	push	{lr}
    c09e:	b087      	sub	sp, #28
    c0a0:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    c0a2:	2300      	movs	r3, #0
    c0a4:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    c0a6:	2300      	movs	r3, #0
    c0a8:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c0aa:	2100      	movs	r1, #0
    c0ac:	481a      	ldr	r0, [pc, #104]	; (c118 <FlexCAN_Disable+0x7c>)
    c0ae:	f7f6 f8c9 	bl	2244 <OsIf_MicrosToTicks>
    c0b2:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    c0b4:	2300      	movs	r3, #0
    c0b6:	9304      	str	r3, [sp, #16]

    /* To access the memory mapped registers */
    /* Enter disable mode (hard reset). */
    if (0U == ((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT))
    c0b8:	9b01      	ldr	r3, [sp, #4]
    c0ba:	681b      	ldr	r3, [r3, #0]
    c0bc:	2b00      	cmp	r3, #0
    c0be:	db25      	blt.n	c10c <FlexCAN_Disable+0x70>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    c0c0:	f001 fafa 	bl	d6b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Clock disable (module) */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MDIS_MASK) | FLEXCAN_MCR_MDIS(1U);
    c0c4:	9b01      	ldr	r3, [sp, #4]
    c0c6:	681b      	ldr	r3, [r3, #0]
    c0c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    c0cc:	9b01      	ldr	r3, [sp, #4]
    c0ce:	601a      	str	r2, [r3, #0]
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    c0d0:	f001 fb1e 	bl	d710 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Wait until disable mode acknowledged */
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c0d4:	2000      	movs	r0, #0
    c0d6:	f7f6 f869 	bl	21ac <OsIf_GetCounter>
    c0da:	4603      	mov	r3, r0
    c0dc:	9302      	str	r3, [sp, #8]
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    c0de:	e00f      	b.n	c100 <FlexCAN_Disable+0x64>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c0e0:	ab02      	add	r3, sp, #8
    c0e2:	2100      	movs	r1, #0
    c0e4:	4618      	mov	r0, r3
    c0e6:	f7f6 f87a 	bl	21de <OsIf_GetElapsed>
    c0ea:	4602      	mov	r2, r0
    c0ec:	9b05      	ldr	r3, [sp, #20]
    c0ee:	4413      	add	r3, r2
    c0f0:	9305      	str	r3, [sp, #20]
            if (timeElapsed >= uS2Ticks)
    c0f2:	9a05      	ldr	r2, [sp, #20]
    c0f4:	9b03      	ldr	r3, [sp, #12]
    c0f6:	429a      	cmp	r2, r3
    c0f8:	d302      	bcc.n	c100 <FlexCAN_Disable+0x64>
            {
                returnResult = FLEXCAN_STATUS_TIMEOUT;
    c0fa:	2303      	movs	r3, #3
    c0fc:	9304      	str	r3, [sp, #16]
                break;
    c0fe:	e005      	b.n	c10c <FlexCAN_Disable+0x70>
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    c100:	9b01      	ldr	r3, [sp, #4]
    c102:	681b      	ldr	r3, [r3, #0]
    c104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    c108:	2b00      	cmp	r3, #0
    c10a:	d0e9      	beq.n	c0e0 <FlexCAN_Disable+0x44>
            }
        }
    }
    return returnResult;
    c10c:	9b04      	ldr	r3, [sp, #16]
}
    c10e:	4618      	mov	r0, r3
    c110:	b007      	add	sp, #28
    c112:	f85d fb04 	ldr.w	pc, [sp], #4
    c116:	bf00      	nop
    c118:	000f4240 	.word	0x000f4240

0000c11c <FlexCAN_SetErrIntCmd>:
 * Description   : Enable the error interrupts.
 * This function will enable Error interrupt.
 *
 *END**************************************************************************/
void FlexCAN_SetErrIntCmd(FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
    c11c:	b500      	push	{lr}
    c11e:	b087      	sub	sp, #28
    c120:	9003      	str	r0, [sp, #12]
    c122:	9102      	str	r1, [sp, #8]
    c124:	4613      	mov	r3, r2
    c126:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 temp = (uint32)errType;
    c12a:	9b02      	ldr	r3, [sp, #8]
    c12c:	9305      	str	r3, [sp, #20]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    c12e:	f001 fb15 	bl	d75c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
    if (enable)
    c132:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c136:	2b00      	cmp	r3, #0
    c138:	d020      	beq.n	c17c <FlexCAN_SetErrIntCmd+0x60>
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    c13a:	9b02      	ldr	r3, [sp, #8]
    c13c:	f244 0201 	movw	r2, #16385	; 0x4001
    c140:	4293      	cmp	r3, r2
    c142:	d106      	bne.n	c152 <FlexCAN_SetErrIntCmd+0x36>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(1U);
    c144:	9b03      	ldr	r3, [sp, #12]
    c146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c148:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    c14c:	9b03      	ldr	r3, [sp, #12]
    c14e:	635a      	str	r2, [r3, #52]	; 0x34
    c150:	e03a      	b.n	c1c8 <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            if ((FLEXCAN_INT_RX_WARNING == errType) || (FLEXCAN_INT_TX_WARNING == errType))
    c152:	9b02      	ldr	r3, [sp, #8]
    c154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    c158:	d003      	beq.n	c162 <FlexCAN_SetErrIntCmd+0x46>
    c15a:	9b02      	ldr	r3, [sp, #8]
    c15c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    c160:	d105      	bne.n	c16e <FlexCAN_SetErrIntCmd+0x52>
            {
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(1U);
    c162:	9b03      	ldr	r3, [sp, #12]
    c164:	681b      	ldr	r3, [r3, #0]
    c166:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    c16a:	9b03      	ldr	r3, [sp, #12]
    c16c:	601a      	str	r2, [r3, #0]
            }
            (base->CTRL1) = ((base->CTRL1) | (temp));
    c16e:	9b03      	ldr	r3, [sp, #12]
    c170:	685a      	ldr	r2, [r3, #4]
    c172:	9b05      	ldr	r3, [sp, #20]
    c174:	431a      	orrs	r2, r3
    c176:	9b03      	ldr	r3, [sp, #12]
    c178:	605a      	str	r2, [r3, #4]
    c17a:	e025      	b.n	c1c8 <FlexCAN_SetErrIntCmd+0xac>
        }
    }
    else
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    c17c:	9b02      	ldr	r3, [sp, #8]
    c17e:	f244 0201 	movw	r2, #16385	; 0x4001
    c182:	4293      	cmp	r3, r2
    c184:	d106      	bne.n	c194 <FlexCAN_SetErrIntCmd+0x78>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(0U);
    c186:	9b03      	ldr	r3, [sp, #12]
    c188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c18a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    c18e:	9b03      	ldr	r3, [sp, #12]
    c190:	635a      	str	r2, [r3, #52]	; 0x34
    c192:	e019      	b.n	c1c8 <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            (base->CTRL1) = ((base->CTRL1) & ~(temp));
    c194:	9b03      	ldr	r3, [sp, #12]
    c196:	685a      	ldr	r2, [r3, #4]
    c198:	9b05      	ldr	r3, [sp, #20]
    c19a:	43db      	mvns	r3, r3
    c19c:	401a      	ands	r2, r3
    c19e:	9b03      	ldr	r3, [sp, #12]
    c1a0:	605a      	str	r2, [r3, #4]
            temp = base->CTRL1;
    c1a2:	9b03      	ldr	r3, [sp, #12]
    c1a4:	685b      	ldr	r3, [r3, #4]
    c1a6:	9305      	str	r3, [sp, #20]
            if ((0U == (temp & (uint32)FLEXCAN_INT_RX_WARNING)) && (0U == (temp & (uint32)FLEXCAN_INT_TX_WARNING)))
    c1a8:	9b05      	ldr	r3, [sp, #20]
    c1aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	d10a      	bne.n	c1c8 <FlexCAN_SetErrIntCmd+0xac>
    c1b2:	9b05      	ldr	r3, [sp, #20]
    c1b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    c1b8:	2b00      	cmp	r3, #0
    c1ba:	d105      	bne.n	c1c8 <FlexCAN_SetErrIntCmd+0xac>
            {
                /* If WRNEN disabled then both FLEXCAN_INT_RX_WARNING and FLEXCAN_INT_TX_WARNING will be disabled */
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(0U);
    c1bc:	9b03      	ldr	r3, [sp, #12]
    c1be:	681b      	ldr	r3, [r3, #0]
    c1c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
    c1c4:	9b03      	ldr	r3, [sp, #12]
    c1c6:	601a      	str	r2, [r3, #0]
            }
        }
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    c1c8:	f001 faf4 	bl	d7b4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
}
    c1cc:	bf00      	nop
    c1ce:	b007      	add	sp, #28
    c1d0:	f85d fb04 	ldr.w	pc, [sp], #4

0000c1d4 <FlexCAN_Init>:
 * buffers, initialize all message buffers as inactive, enable RX FIFO
 * if needed, mask all mask bits, and disable all MB interrupts.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Init(FLEXCAN_Type * base)
{
    c1d4:	b500      	push	{lr}
    c1d6:	b087      	sub	sp, #28
    c1d8:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    c1da:	2300      	movs	r3, #0
    c1dc:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    c1de:	2300      	movs	r3, #0
    c1e0:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c1e2:	2100      	movs	r1, #0
    c1e4:	4833      	ldr	r0, [pc, #204]	; (c2b4 <FlexCAN_Init+0xe0>)
    c1e6:	f7f6 f82d 	bl	2244 <OsIf_MicrosToTicks>
    c1ea:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    c1ec:	2300      	movs	r3, #0
    c1ee:	9304      	str	r3, [sp, #16]

    /* Reset the FLEXCAN */
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SOFTRST_MASK) | FLEXCAN_MCR_SOFTRST(1U);
    c1f0:	9b01      	ldr	r3, [sp, #4]
    c1f2:	681b      	ldr	r3, [r3, #0]
    c1f4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
    c1f8:	9b01      	ldr	r3, [sp, #4]
    c1fa:	601a      	str	r2, [r3, #0]
    /* Wait for reset cycle to complete */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c1fc:	2000      	movs	r0, #0
    c1fe:	f7f5 ffd5 	bl	21ac <OsIf_GetCounter>
    c202:	4603      	mov	r3, r0
    c204:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    c206:	e00f      	b.n	c228 <FlexCAN_Init+0x54>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c208:	ab02      	add	r3, sp, #8
    c20a:	2100      	movs	r1, #0
    c20c:	4618      	mov	r0, r3
    c20e:	f7f5 ffe6 	bl	21de <OsIf_GetElapsed>
    c212:	4602      	mov	r2, r0
    c214:	9b05      	ldr	r3, [sp, #20]
    c216:	4413      	add	r3, r2
    c218:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    c21a:	9a05      	ldr	r2, [sp, #20]
    c21c:	9b03      	ldr	r3, [sp, #12]
    c21e:	429a      	cmp	r2, r3
    c220:	d302      	bcc.n	c228 <FlexCAN_Init+0x54>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    c222:	2303      	movs	r3, #3
    c224:	9304      	str	r3, [sp, #16]
            break;
    c226:	e005      	b.n	c234 <FlexCAN_Init+0x60>
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    c228:	9b01      	ldr	r3, [sp, #4]
    c22a:	681b      	ldr	r3, [r3, #0]
    c22c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    c230:	2b00      	cmp	r3, #0
    c232:	d1e9      	bne.n	c208 <FlexCAN_Init+0x34>
        }
    }
    if (FLEXCAN_STATUS_SUCCESS == returnResult)
    c234:	9b04      	ldr	r3, [sp, #16]
    c236:	2b00      	cmp	r3, #0
    c238:	d136      	bne.n	c2a8 <FlexCAN_Init+0xd4>
    {
        /* Avoid Abort Transmission, use Inactive MB */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_AEN_MASK) | FLEXCAN_MCR_AEN(1U);
    c23a:	9b01      	ldr	r3, [sp, #4]
    c23c:	681b      	ldr	r3, [r3, #0]
    c23e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    c242:	9b01      	ldr	r3, [sp, #4]
    c244:	601a      	str	r2, [r3, #0]
        /* Clear FlexCAN memory */
        FlexCAN_ClearRAM(base);
    c246:	9801      	ldr	r0, [sp, #4]
    c248:	f7ff fd40 	bl	bccc <FlexCAN_ClearRAM>
        /* Rx global mask*/
        (base->RXMGMASK) = (uint32)(FLEXCAN_RXMGMASK_MG_MASK);
    c24c:	9b01      	ldr	r3, [sp, #4]
    c24e:	f04f 32ff 	mov.w	r2, #4294967295
    c252:	611a      	str	r2, [r3, #16]
        /* Rx reg 14 mask*/
        (base->RX14MASK) =  (uint32)(FLEXCAN_RX14MASK_RX14M_MASK);
    c254:	9b01      	ldr	r3, [sp, #4]
    c256:	f04f 32ff 	mov.w	r2, #4294967295
    c25a:	615a      	str	r2, [r3, #20]
        /* Rx reg 15 mask*/
        (base->RX15MASK) = (uint32)(FLEXCAN_RX15MASK_RX15M_MASK);
    c25c:	9b01      	ldr	r3, [sp, #4]
    c25e:	f04f 32ff 	mov.w	r2, #4294967295
    c262:	619a      	str	r2, [r3, #24]
        /* Disable all MB interrupts */
        (base->IMASK1) = 0x0;
    c264:	9b01      	ldr	r3, [sp, #4]
    c266:	2200      	movs	r2, #0
    c268:	629a      	str	r2, [r3, #40]	; 0x28
        /* Clear all MB interrupt flags */
        (base->IFLAG1) = FLEXCAN_IMASK1_BUF31TO0M_MASK;
    c26a:	9b01      	ldr	r3, [sp, #4]
    c26c:	f04f 32ff 	mov.w	r2, #4294967295
    c270:	631a      	str	r2, [r3, #48]	; 0x30
            (base->IMASK4) = 0x0;
            (base->IFLAG4) = FLEXCAN_IMASK4_BUF127TO96M_MASK;
        }
#endif
        /* Clear all error interrupt flags */
        (base->ESR1) = FLEXCAN_IP_ALL_INT;
    c272:	9b01      	ldr	r3, [sp, #4]
    c274:	4a10      	ldr	r2, [pc, #64]	; (c2b8 <FlexCAN_Init+0xe4>)
    c276:	621a      	str	r2, [r3, #32]
        /* clear registers which are not effected by soft reset */
        base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    c278:	9b01      	ldr	r3, [sp, #4]
    c27a:	2200      	movs	r2, #0
    c27c:	605a      	str	r2, [r3, #4]
        base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    c27e:	9b01      	ldr	r3, [sp, #4]
    c280:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    c284:	635a      	str	r2, [r3, #52]	; 0x34
        base->CBT   = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    c286:	9b01      	ldr	r3, [sp, #4]
    c288:	2200      	movs	r2, #0
    c28a:	651a      	str	r2, [r3, #80]	; 0x50
        base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
        base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    c28c:	9801      	ldr	r0, [sp, #4]
    c28e:	f000 f85b 	bl	c348 <FlexCAN_IsFDAvailable>
    c292:	4603      	mov	r3, r0
    c294:	2b00      	cmp	r3, #0
    c296:	d007      	beq.n	c2a8 <FlexCAN_Init+0xd4>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    c298:	9b01      	ldr	r3, [sp, #4]
    c29a:	2200      	movs	r2, #0
    c29c:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    c2a0:	9b01      	ldr	r3, [sp, #4]
    c2a2:	4a06      	ldr	r2, [pc, #24]	; (c2bc <FlexCAN_Init+0xe8>)
    c2a4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    #if defined(CAN_FEATURE_S32K1XX)
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
#endif /* (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON) */
    }
    return returnResult;
    c2a8:	9b04      	ldr	r3, [sp, #16]
}
    c2aa:	4618      	mov	r0, r3
    c2ac:	b007      	add	sp, #28
    c2ae:	f85d fb04 	ldr.w	pc, [sp], #4
    c2b2:	bf00      	nop
    c2b4:	000f4240 	.word	0x000f4240
    c2b8:	003b0006 	.word	0x003b0006
    c2bc:	80004100 	.word	0x80004100

0000c2c0 <FlexCAN_EnableRxFifo>:
 * This function will enable the Rx FIFO feature.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnableRxFifo(FLEXCAN_Type * base,
                                         uint32 numOfFilters)
{
    c2c0:	b500      	push	{lr}
    c2c2:	b087      	sub	sp, #28
    c2c4:	9001      	str	r0, [sp, #4]
    c2c6:	9100      	str	r1, [sp, #0]
    uint32 i;
    uint16 noOfMbx = (uint16)FlexCAN_GetMaxMbNum(base);
    c2c8:	9801      	ldr	r0, [sp, #4]
    c2ca:	f7ff fdfb 	bl	bec4 <FlexCAN_GetMaxMbNum>
    c2ce:	4603      	mov	r3, r0
    c2d0:	f8ad 300e 	strh.w	r3, [sp, #14]
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    c2d4:	2300      	movs	r3, #0
    c2d6:	9304      	str	r3, [sp, #16]

    /* RxFIFO cannot be enabled if FD is enabled */
    if (((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U)
    c2d8:	9b01      	ldr	r3, [sp, #4]
    c2da:	681b      	ldr	r3, [r3, #0]
    c2dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    c2e0:	2b00      	cmp	r3, #0
    c2e2:	d001      	beq.n	c2e8 <FlexCAN_EnableRxFifo+0x28>
    {
        stat = FLEXCAN_STATUS_ERROR;
    c2e4:	2301      	movs	r3, #1
    c2e6:	9304      	str	r3, [sp, #16]
    }
    if (FLEXCAN_STATUS_SUCCESS == stat)
    c2e8:	9b04      	ldr	r3, [sp, #16]
    c2ea:	2b00      	cmp	r3, #0
    c2ec:	d127      	bne.n	c33e <FlexCAN_EnableRxFifo+0x7e>
    {
        /* Enable RX FIFO */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_RFEN_MASK) | FLEXCAN_MCR_RFEN(1U);
    c2ee:	9b01      	ldr	r3, [sp, #4]
    c2f0:	681b      	ldr	r3, [r3, #0]
    c2f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
    c2f6:	9b01      	ldr	r3, [sp, #4]
    c2f8:	601a      	str	r2, [r3, #0]
        /* Set the number of the RX FIFO filters needed */
        base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RFFN_MASK) | ((numOfFilters << FLEXCAN_CTRL2_RFFN_SHIFT) & FLEXCAN_CTRL2_RFFN_MASK);
    c2fa:	9b01      	ldr	r3, [sp, #4]
    c2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c2fe:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    c302:	9b00      	ldr	r3, [sp, #0]
    c304:	061b      	lsls	r3, r3, #24
    c306:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    c30a:	431a      	orrs	r2, r3
    c30c:	9b01      	ldr	r3, [sp, #4]
    c30e:	635a      	str	r2, [r3, #52]	; 0x34
        /* RX FIFO global mask, take in consideration all filter fields*/
        (base->RXFGMASK) = FLEXCAN_RXFGMASK_FGM_MASK;
    c310:	9b01      	ldr	r3, [sp, #4]
    c312:	f04f 32ff 	mov.w	r2, #4294967295
    c316:	649a      	str	r2, [r3, #72]	; 0x48

        for (i = 0U; i < noOfMbx; i++)
    c318:	2300      	movs	r3, #0
    c31a:	9305      	str	r3, [sp, #20]
    c31c:	e00a      	b.n	c334 <FlexCAN_EnableRxFifo+0x74>
        {
            /* RX individual mask */
            base->RXIMR[i] = (FLEXCAN_RXIMR_MI_MASK << FLEXCAN_IP_ID_EXT_SHIFT) & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    c31e:	9b01      	ldr	r3, [sp, #4]
    c320:	9a05      	ldr	r2, [sp, #20]
    c322:	f502 7208 	add.w	r2, r2, #544	; 0x220
    c326:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    c32a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0U; i < noOfMbx; i++)
    c32e:	9b05      	ldr	r3, [sp, #20]
    c330:	3301      	adds	r3, #1
    c332:	9305      	str	r3, [sp, #20]
    c334:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c338:	9a05      	ldr	r2, [sp, #20]
    c33a:	429a      	cmp	r2, r3
    c33c:	d3ef      	bcc.n	c31e <FlexCAN_EnableRxFifo+0x5e>
        }
    }
    return stat;
    c33e:	9b04      	ldr	r3, [sp, #16]
}
    c340:	4618      	mov	r0, r3
    c342:	b007      	add	sp, #28
    c344:	f85d fb04 	ldr.w	pc, [sp], #4

0000c348 <FlexCAN_IsFDAvailable>:
 * Description   : Checks if FlexCAN has FD Support.
 * This function is private.
 *
 *END**************************************************************************/
boolean FlexCAN_IsFDAvailable(const FLEXCAN_Type * base)
{
    c348:	b084      	sub	sp, #16
    c34a:	9001      	str	r0, [sp, #4]
    uint32 i=0U;
    c34c:	2300      	movs	r3, #0
    c34e:	9303      	str	r3, [sp, #12]
    static FLEXCAN_Type * const flexcanBase[] = CAN_BASE_PTRS_HAS_FD;
    boolean returnValue = FALSE;
    c350:	2300      	movs	r3, #0
    c352:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    c356:	2300      	movs	r3, #0
    c358:	9303      	str	r3, [sp, #12]
    c35a:	e00d      	b.n	c378 <FlexCAN_IsFDAvailable+0x30>
    {
        if (base == flexcanBase[i])
    c35c:	4a0a      	ldr	r2, [pc, #40]	; (c388 <FlexCAN_IsFDAvailable+0x40>)
    c35e:	9b03      	ldr	r3, [sp, #12]
    c360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c364:	9a01      	ldr	r2, [sp, #4]
    c366:	429a      	cmp	r2, r3
    c368:	d103      	bne.n	c372 <FlexCAN_IsFDAvailable+0x2a>
        {
            returnValue = TRUE;
    c36a:	2301      	movs	r3, #1
    c36c:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
    c370:	e005      	b.n	c37e <FlexCAN_IsFDAvailable+0x36>
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    c372:	9b03      	ldr	r3, [sp, #12]
    c374:	3301      	adds	r3, #1
    c376:	9303      	str	r3, [sp, #12]
    c378:	9b03      	ldr	r3, [sp, #12]
    c37a:	2b00      	cmp	r3, #0
    c37c:	d0ee      	beq.n	c35c <FlexCAN_IsFDAvailable+0x14>
        }
    }

    return returnValue;
    c37e:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    c382:	4618      	mov	r0, r3
    c384:	b004      	add	sp, #16
    c386:	4770      	bx	lr
    c388:	000104f0 	.word	0x000104f0

0000c38c <FlexCAN_SetPayloadSize>:
 * Description   : Sets the payload size of the MBs.
 *
 *END**************************************************************************/
void FlexCAN_SetPayloadSize(FLEXCAN_Type * base,
                            const Flexcan_Ip_PayloadSizeType * payloadSize)
{
    c38c:	b500      	push	{lr}
    c38e:	b085      	sub	sp, #20
    c390:	9001      	str	r0, [sp, #4]
    c392:	9100      	str	r1, [sp, #0]
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
    DevAssert(FlexCAN_IsFDEnabled(base) || (FLEXCAN_PAYLOAD_SIZE_8 == payloadSize->payloadBlock3));
    #endif
#endif
    /* If FD is not enabled, only 8 bytes payload is supported */
    if (FlexCAN_IsFDEnabled(base))
    c394:	9801      	ldr	r0, [sp, #4]
    c396:	f7ff fbd6 	bl	bb46 <FlexCAN_IsFDEnabled>
    c39a:	4603      	mov	r3, r0
    c39c:	2b00      	cmp	r3, #0
    c39e:	d011      	beq.n	c3c4 <FlexCAN_SetPayloadSize+0x38>
    {
        tmp = base->FDCTRL;
    c3a0:	9b01      	ldr	r3, [sp, #4]
    c3a2:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    c3a6:	9303      	str	r3, [sp, #12]
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR0_MASK);
    c3a8:	9b03      	ldr	r3, [sp, #12]
    c3aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    c3ae:	9303      	str	r3, [sp, #12]
        tmp |= ((uint32)payloadSize->payloadBlock0) << FLEXCAN_FDCTRL_MBDSR0_SHIFT;
    c3b0:	9b00      	ldr	r3, [sp, #0]
    c3b2:	681b      	ldr	r3, [r3, #0]
    c3b4:	041b      	lsls	r3, r3, #16
    c3b6:	9a03      	ldr	r2, [sp, #12]
    c3b8:	4313      	orrs	r3, r2
    c3ba:	9303      	str	r3, [sp, #12]
#endif
#if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR3_MASK);
        tmp |= ((uint32)payloadSize->payloadBlock3) << FLEXCAN_FDCTRL_MBDSR3_SHIFT;
#endif
        base->FDCTRL = tmp;
    c3bc:	9b01      	ldr	r3, [sp, #4]
    c3be:	9a03      	ldr	r2, [sp, #12]
    c3c0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
}
    c3c4:	bf00      	nop
    c3c6:	b005      	add	sp, #20
    c3c8:	f85d fb04 	ldr.w	pc, [sp], #4

0000c3cc <FlexCAN_GetPayloadSize>:
 * Function Name : FLEXCAN_GetPayloadSize
 * Description   : Returns the payload size of the MBs (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_GetPayloadSize(const FLEXCAN_Type * base, uint8 mbdsrIdx)
{
    c3cc:	b500      	push	{lr}
    c3ce:	b085      	sub	sp, #20
    c3d0:	9001      	str	r0, [sp, #4]
    c3d2:	460b      	mov	r3, r1
    c3d4:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 payloadSize = 0U;
    c3d8:	2300      	movs	r3, #0
    c3da:	9303      	str	r3, [sp, #12]

#if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    c3dc:	9801      	ldr	r0, [sp, #4]
    c3de:	f7ff ffb3 	bl	c348 <FlexCAN_IsFDAvailable>
    c3e2:	4603      	mov	r3, r0
    c3e4:	2b00      	cmp	r3, #0
    c3e6:	d019      	beq.n	c41c <FlexCAN_GetPayloadSize+0x50>
    {
#endif /* defined(CAN_FEATURE_S32K1XX) */
    switch (mbdsrIdx)
    c3e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c3ec:	2b00      	cmp	r3, #0
    c3ee:	d10a      	bne.n	c406 <FlexCAN_GetPayloadSize+0x3a>
    {
        case 0 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    c3f0:	9b01      	ldr	r3, [sp, #4]
    c3f2:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    c3f6:	0c1b      	lsrs	r3, r3, #16
    c3f8:	f003 0303 	and.w	r3, r3, #3
    c3fc:	2208      	movs	r2, #8
    c3fe:	fa02 f303 	lsl.w	r3, r2, r3
    c402:	9303      	str	r3, [sp, #12]
    c404:	e00c      	b.n	c420 <FlexCAN_GetPayloadSize+0x54>
        case 2 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR2_MASK) >> FLEXCAN_FDCTRL_MBDSR2_SHIFT); } break;
    #endif
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        case 3 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR3_MASK) >> FLEXCAN_FDCTRL_MBDSR3_SHIFT); } break;
    #endif
        default :{  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    c406:	9b01      	ldr	r3, [sp, #4]
    c408:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    c40c:	0c1b      	lsrs	r3, r3, #16
    c40e:	f003 0303 	and.w	r3, r3, #3
    c412:	2208      	movs	r2, #8
    c414:	fa02 f303 	lsl.w	r3, r2, r3
    c418:	9303      	str	r3, [sp, #12]
    c41a:	e001      	b.n	c420 <FlexCAN_GetPayloadSize+0x54>
    }
    #if defined(CAN_FEATURE_S32K1XX)
    }
    else
    {
        payloadSize = 8U;
    c41c:	2308      	movs	r3, #8
    c41e:	9303      	str	r3, [sp, #12]
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
    return (uint8)payloadSize;
    c420:	9b03      	ldr	r3, [sp, #12]
    c422:	b2db      	uxtb	r3, r3
}
    c424:	4618      	mov	r0, r3
    c426:	b005      	add	sp, #20
    c428:	f85d fb04 	ldr.w	pc, [sp], #4

0000c42c <FlexCAN_GetMbPayloadSize>:



uint8 FlexCAN_GetMbPayloadSize(const FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    c42c:	b500      	push	{lr}
    c42e:	b087      	sub	sp, #28
    c430:	9001      	str	r0, [sp, #4]
    c432:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    c434:	2308      	movs	r3, #8
    c436:	f88d 3014 	strb.w	r3, [sp, #20]
    uint32 ramBlockSize = 512U;
    c43a:	f44f 7300 	mov.w	r3, #512	; 0x200
    c43e:	9304      	str	r3, [sp, #16]
    uint8 can_real_payload = 8U;
    c440:	2308      	movs	r3, #8
    c442:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 maxMbBlockNum = 0U;
    c446:	2300      	movs	r3, #0
    c448:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8 i=0U;
    c44c:	2300      	movs	r3, #0
    c44e:	f88d 3015 	strb.w	r3, [sp, #21]
    uint8 mb_size = 0U;
    c452:	2300      	movs	r3, #0
    c454:	f88d 300f 	strb.w	r3, [sp, #15]

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    c458:	2300      	movs	r3, #0
    c45a:	f88d 3015 	strb.w	r3, [sp, #21]
    c45e:	e024      	b.n	c4aa <FlexCAN_GetMbPayloadSize+0x7e>
    {
        /* Check that the number of MBs is supported based on the payload size*/
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        can_real_payload = FlexCAN_GetPayloadSize(base, i);
    c460:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c464:	4619      	mov	r1, r3
    c466:	9801      	ldr	r0, [sp, #4]
    c468:	f7ff ffb0 	bl	c3cc <FlexCAN_GetPayloadSize>
    c46c:	4603      	mov	r3, r0
    c46e:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* Else can_real_payload will remain as 8 payload size */
        mb_size = (uint8)(can_real_payload + arbitration_field_size);
    c472:	f89d 2017 	ldrb.w	r2, [sp, #23]
    c476:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c47a:	4413      	add	r3, r2
    c47c:	f88d 300f 	strb.w	r3, [sp, #15]
        maxMbBlockNum += (uint8)(ramBlockSize / mb_size);
    c480:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c484:	9a04      	ldr	r2, [sp, #16]
    c486:	fbb2 f3f3 	udiv	r3, r2, r3
    c48a:	b2da      	uxtb	r2, r3
    c48c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c490:	4413      	add	r3, r2
    c492:	f88d 3016 	strb.w	r3, [sp, #22]
        if (maxMbBlockNum > maxMsgBuffNum)
    c496:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c49a:	9a00      	ldr	r2, [sp, #0]
    c49c:	429a      	cmp	r2, r3
    c49e:	d309      	bcc.n	c4b4 <FlexCAN_GetMbPayloadSize+0x88>
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    c4a0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c4a4:	3301      	adds	r3, #1
    c4a6:	f88d 3015 	strb.w	r3, [sp, #21]
    c4aa:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c4ae:	2b00      	cmp	r3, #0
    c4b0:	d0d6      	beq.n	c460 <FlexCAN_GetMbPayloadSize+0x34>
    c4b2:	e000      	b.n	c4b6 <FlexCAN_GetMbPayloadSize+0x8a>
        {
            break;
    c4b4:	bf00      	nop
    {
        can_real_payload = 64U;
    }
 #endif

    return can_real_payload;
    c4b6:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    c4ba:	4618      	mov	r0, r3
    c4bc:	b007      	add	sp, #28
    c4be:	f85d fb04 	ldr.w	pc, [sp], #4

0000c4c2 <FlexCAN_LockRxMsgBuff>:
 * Description   : Lock the RX message buffer.
 * This function will lock the RX message buffer.
 *
 *END**************************************************************************/
void FlexCAN_LockRxMsgBuff(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    c4c2:	b500      	push	{lr}
    c4c4:	b085      	sub	sp, #20
    c4c6:	9001      	str	r0, [sp, #4]
    c4c8:	9100      	str	r1, [sp, #0]
    volatile const uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    c4ca:	9900      	ldr	r1, [sp, #0]
    c4cc:	9801      	ldr	r0, [sp, #4]
    c4ce:	f7ff fc7f 	bl	bdd0 <FlexCAN_GetMsgBuffRegion>
    c4d2:	9003      	str	r0, [sp, #12]

    /* Lock the mailbox by reading it */
    (void)*flexcan_mb;
    c4d4:	9b03      	ldr	r3, [sp, #12]
    c4d6:	681b      	ldr	r3, [r3, #0]
}
    c4d8:	bf00      	nop
    c4da:	b005      	add	sp, #20
    c4dc:	f85d fb04 	ldr.w	pc, [sp], #4

0000c4e0 <FlexCAN_SetMsgBuffIntCmd>:
                                               uint8 u8Instance,
                                               uint32 msgBuffIdx,
                                               boolean enable,
                                               boolean bIsIntActive
                                              )
{
    c4e0:	b500      	push	{lr}
    c4e2:	b087      	sub	sp, #28
    c4e4:	9003      	str	r0, [sp, #12]
    c4e6:	9201      	str	r2, [sp, #4]
    c4e8:	461a      	mov	r2, r3
    c4ea:	460b      	mov	r3, r1
    c4ec:	f88d 300b 	strb.w	r3, [sp, #11]
    c4f0:	4613      	mov	r3, r2
    c4f2:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp;
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    c4f6:	2300      	movs	r3, #0
    c4f8:	9305      	str	r3, [sp, #20]

        /* Enable the corresponding message buffer Interrupt */
        temp = 1UL << (msgBuffIdx % 32U);
    c4fa:	9b01      	ldr	r3, [sp, #4]
    c4fc:	f003 031f 	and.w	r3, r3, #31
    c500:	2201      	movs	r2, #1
    c502:	fa02 f303 	lsl.w	r3, r2, r3
    c506:	9304      	str	r3, [sp, #16]
        if (msgBuffIdx < 32U)
    c508:	9b01      	ldr	r3, [sp, #4]
    c50a:	2b1f      	cmp	r3, #31
    c50c:	d837      	bhi.n	c57e <FlexCAN_SetMsgBuffIntCmd+0x9e>
        {
            if (enable)
    c50e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c512:	2b00      	cmp	r3, #0
    c514:	d01b      	beq.n	c54e <FlexCAN_SetMsgBuffIntCmd+0x6e>
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    c516:	f001 fcf9 	bl	df0c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) | (temp));
    c51a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c51e:	4a1a      	ldr	r2, [pc, #104]	; (c588 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c520:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c524:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c528:	9a04      	ldr	r2, [sp, #16]
    c52a:	430a      	orrs	r2, r1
    c52c:	4916      	ldr	r1, [pc, #88]	; (c588 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c52e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TRUE == bIsIntActive)
    c532:	f89d 3020 	ldrb.w	r3, [sp, #32]
    c536:	2b00      	cmp	r3, #0
    c538:	d006      	beq.n	c548 <FlexCAN_SetMsgBuffIntCmd+0x68>
                {
                    base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    c53a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c53e:	4a12      	ldr	r2, [pc, #72]	; (c588 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c540:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c544:	9b03      	ldr	r3, [sp, #12]
    c546:	629a      	str	r2, [r3, #40]	; 0x28
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    c548:	f001 fd0c 	bl	df64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
    c54c:	e017      	b.n	c57e <FlexCAN_SetMsgBuffIntCmd+0x9e>
            }
            else
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    c54e:	f001 fcdd 	bl	df0c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) & ~(temp));
    c552:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c556:	4a0c      	ldr	r2, [pc, #48]	; (c588 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c558:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c55c:	9b04      	ldr	r3, [sp, #16]
    c55e:	43da      	mvns	r2, r3
    c560:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c564:	400a      	ands	r2, r1
    c566:	4908      	ldr	r1, [pc, #32]	; (c588 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    c56c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c570:	4a05      	ldr	r2, [pc, #20]	; (c588 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c572:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c576:	9b03      	ldr	r3, [sp, #12]
    c578:	629a      	str	r2, [r3, #40]	; 0x28
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    c57a:	f001 fcf3 	bl	df64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
            }
        }
#endif /* if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */

    return stat;
    c57e:	9b05      	ldr	r3, [sp, #20]
}
    c580:	4618      	mov	r0, r3
    c582:	b007      	add	sp, #28
    c584:	f85d fb04 	ldr.w	pc, [sp], #4
    c588:	1fff8fcc 	.word	0x1fff8fcc

0000c58c <FLEXCAN_ClearMsgBuffIntCmd>:
void FLEXCAN_ClearMsgBuffIntCmd(FLEXCAN_Type * pBase,
                                uint8 u8Instance,
                                uint32 mb_idx,
                                boolean bIsIntActive
                               )
{
    c58c:	b500      	push	{lr}
    c58e:	b087      	sub	sp, #28
    c590:	9003      	str	r0, [sp, #12]
    c592:	9201      	str	r2, [sp, #4]
    c594:	461a      	mov	r2, r3
    c596:	460b      	mov	r3, r1
    c598:	f88d 300b 	strb.w	r3, [sp, #11]
    c59c:	4613      	mov	r3, r2
    c59e:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp = (1UL << (mb_idx % 32U));
    c5a2:	9b01      	ldr	r3, [sp, #4]
    c5a4:	f003 031f 	and.w	r3, r3, #31
    c5a8:	2201      	movs	r2, #1
    c5aa:	fa02 f303 	lsl.w	r3, r2, r3
    c5ae:	9305      	str	r3, [sp, #20]

 /* Stop the running transfer. */
    if (mb_idx < 32U)
    c5b0:	9b01      	ldr	r3, [sp, #4]
    c5b2:	2b1f      	cmp	r3, #31
    c5b4:	d818      	bhi.n	c5e8 <FLEXCAN_ClearMsgBuffIntCmd+0x5c>
    {
          /* Start critical section: implementation depends on integrator */
          SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    c5b6:	f001 fa6b 	bl	da90 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
          FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = (pBase->IMASK1 & (~temp));
    c5ba:	9b03      	ldr	r3, [sp, #12]
    c5bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    c5be:	9b05      	ldr	r3, [sp, #20]
    c5c0:	43da      	mvns	r2, r3
    c5c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c5c6:	400a      	ands	r2, r1
    c5c8:	4909      	ldr	r1, [pc, #36]	; (c5f0 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    c5ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          if (TRUE == bIsIntActive)
    c5ce:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c5d2:	2b00      	cmp	r3, #0
    c5d4:	d006      	beq.n	c5e4 <FLEXCAN_ClearMsgBuffIntCmd+0x58>
          {
              pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    c5d6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c5da:	4a05      	ldr	r2, [pc, #20]	; (c5f0 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    c5dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c5e0:	9b03      	ldr	r3, [sp, #12]
    c5e2:	629a      	str	r2, [r3, #40]	; 0x28
          }
          /* End critical section: implementation depends on integrator */
          SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    c5e4:	f001 fa80 	bl	dae8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    }
#endif /* #if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */
}
    c5e8:	bf00      	nop
    c5ea:	b007      	add	sp, #28
    c5ec:	f85d fb04 	ldr.w	pc, [sp], #4
    c5f0:	1fff8fcc 	.word	0x1fff8fcc

0000c5f4 <FlexCAN_DisableInterrupts>:


void FlexCAN_DisableInterrupts(FLEXCAN_Type * pBase)
{
    c5f4:	b082      	sub	sp, #8
    c5f6:	9001      	str	r0, [sp, #4]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = 0U;
    c5f8:	9b01      	ldr	r3, [sp, #4]
    c5fa:	2200      	movs	r2, #0
    c5fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = 0U;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    c5fe:	bf00      	nop
    c600:	b002      	add	sp, #8
    c602:	4770      	bx	lr

0000c604 <FlexCAN_EnableInterrupts>:

void FlexCAN_EnableInterrupts(FLEXCAN_Type * pBase, uint8 u8Instance)
{
    c604:	b082      	sub	sp, #8
    c606:	9001      	str	r0, [sp, #4]
    c608:	460b      	mov	r3, r1
    c60a:	f88d 3003 	strb.w	r3, [sp, #3]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    c60e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c612:	4a04      	ldr	r2, [pc, #16]	; (c624 <FlexCAN_EnableInterrupts+0x20>)
    c614:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c618:	9b01      	ldr	r3, [sp, #4]
    c61a:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = FlexCAN_Ip_au32ImaskBuff[u8Instance][3U];
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    c61c:	bf00      	nop
    c61e:	b002      	add	sp, #8
    c620:	4770      	bx	lr
    c622:	bf00      	nop
    c624:	1fff8fcc 	.word	0x1fff8fcc

0000c628 <FlexCAN_SetRxMsgBuff>:
void FlexCAN_SetRxMsgBuff(const FLEXCAN_Type * base,
                          uint32 msgBuffIdx,
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId
                         )
{
    c628:	b500      	push	{lr}
    c62a:	b087      	sub	sp, #28
    c62c:	9003      	str	r0, [sp, #12]
    c62e:	9102      	str	r1, [sp, #8]
    c630:	9201      	str	r2, [sp, #4]
    c632:	9300      	str	r3, [sp, #0]
    volatile uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    c634:	9902      	ldr	r1, [sp, #8]
    c636:	9803      	ldr	r0, [sp, #12]
    c638:	f7ff fbca 	bl	bdd0 <FlexCAN_GetMsgBuffRegion>
    c63c:	9005      	str	r0, [sp, #20]
    volatile uint32 * flexcan_mb_id = &flexcan_mb[1];
    c63e:	9b05      	ldr	r3, [sp, #20]
    c640:	3304      	adds	r3, #4
    c642:	9304      	str	r3, [sp, #16]
    DevAssert(cs != NULL_PTR);
#endif


    /* Clean up the arbitration field area */
    *flexcan_mb = 0;
    c644:	9b05      	ldr	r3, [sp, #20]
    c646:	2200      	movs	r2, #0
    c648:	601a      	str	r2, [r3, #0]
    *flexcan_mb_id = 0;
    c64a:	9b04      	ldr	r3, [sp, #16]
    c64c:	2200      	movs	r2, #0
    c64e:	601a      	str	r2, [r3, #0]

    /* Set the ID according the format structure */
    if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    c650:	9b01      	ldr	r3, [sp, #4]
    c652:	685b      	ldr	r3, [r3, #4]
    c654:	2b01      	cmp	r3, #1
    c656:	d119      	bne.n	c68c <FlexCAN_SetRxMsgBuff+0x64>
    {
        /* Set IDE */
        *flexcan_mb |= FLEXCAN_IP_CS_IDE_MASK;
    c658:	9b05      	ldr	r3, [sp, #20]
    c65a:	681b      	ldr	r3, [r3, #0]
    c65c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    c660:	9b05      	ldr	r3, [sp, #20]
    c662:	601a      	str	r2, [r3, #0]

        /* Clear SRR bit */
        *flexcan_mb &= ~FLEXCAN_IP_CS_SRR_MASK;
    c664:	9b05      	ldr	r3, [sp, #20]
    c666:	681b      	ldr	r3, [r3, #0]
    c668:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
    c66c:	9b05      	ldr	r3, [sp, #20]
    c66e:	601a      	str	r2, [r3, #0]

        /* ID [28-0] */
        *flexcan_mb_id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    c670:	9b04      	ldr	r3, [sp, #16]
    c672:	681b      	ldr	r3, [r3, #0]
    c674:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    c678:	9b04      	ldr	r3, [sp, #16]
    c67a:	601a      	str	r2, [r3, #0]
        *flexcan_mb_id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    c67c:	9b04      	ldr	r3, [sp, #16]
    c67e:	681a      	ldr	r2, [r3, #0]
    c680:	9b00      	ldr	r3, [sp, #0]
    c682:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    c686:	431a      	orrs	r2, r3
    c688:	9b04      	ldr	r3, [sp, #16]
    c68a:	601a      	str	r2, [r3, #0]
    }

    if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    c68c:	9b01      	ldr	r3, [sp, #4]
    c68e:	685b      	ldr	r3, [r3, #4]
    c690:	2b00      	cmp	r3, #0
    c692:	d116      	bne.n	c6c2 <FlexCAN_SetRxMsgBuff+0x9a>
    {
        /* Make sure IDE and SRR are not set */
        *flexcan_mb &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    c694:	9b05      	ldr	r3, [sp, #20]
    c696:	681b      	ldr	r3, [r3, #0]
    c698:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
    c69c:	9b05      	ldr	r3, [sp, #20]
    c69e:	601a      	str	r2, [r3, #0]

        /* ID[28-18] */
        *flexcan_mb_id &= ~FLEXCAN_IP_ID_STD_MASK;
    c6a0:	9b04      	ldr	r3, [sp, #16]
    c6a2:	681b      	ldr	r3, [r3, #0]
    c6a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    c6a8:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    c6ac:	9a04      	ldr	r2, [sp, #16]
    c6ae:	6013      	str	r3, [r2, #0]
        *flexcan_mb_id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    c6b0:	9b04      	ldr	r3, [sp, #16]
    c6b2:	681a      	ldr	r2, [r3, #0]
    c6b4:	9b00      	ldr	r3, [sp, #0]
    c6b6:	0499      	lsls	r1, r3, #18
    c6b8:	4b0e      	ldr	r3, [pc, #56]	; (c6f4 <FlexCAN_SetRxMsgBuff+0xcc>)
    c6ba:	400b      	ands	r3, r1
    c6bc:	431a      	orrs	r2, r3
    c6be:	9b04      	ldr	r3, [sp, #16]
    c6c0:	601a      	str	r2, [r3, #0]
    }

    /* Set MB CODE */
    if ((uint32)FLEXCAN_RX_NOT_USED != cs->code)
    c6c2:	9b01      	ldr	r3, [sp, #4]
    c6c4:	681b      	ldr	r3, [r3, #0]
    c6c6:	2b0f      	cmp	r3, #15
    c6c8:	d00f      	beq.n	c6ea <FlexCAN_SetRxMsgBuff+0xc2>
    {
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    c6ca:	9b05      	ldr	r3, [sp, #20]
    c6cc:	681b      	ldr	r3, [r3, #0]
    c6ce:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    c6d2:	9b05      	ldr	r3, [sp, #20]
    c6d4:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    c6d6:	9b05      	ldr	r3, [sp, #20]
    c6d8:	681a      	ldr	r2, [r3, #0]
    c6da:	9b01      	ldr	r3, [sp, #4]
    c6dc:	681b      	ldr	r3, [r3, #0]
    c6de:	061b      	lsls	r3, r3, #24
    c6e0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    c6e4:	431a      	orrs	r2, r3
    c6e6:	9b05      	ldr	r3, [sp, #20]
    c6e8:	601a      	str	r2, [r3, #0]
    }
}
    c6ea:	bf00      	nop
    c6ec:	b007      	add	sp, #28
    c6ee:	f85d fb04 	ldr.w	pc, [sp], #4
    c6f2:	bf00      	nop
    c6f4:	1ffc0000 	.word	0x1ffc0000

0000c6f8 <FlexCAN_GetMsgBuffTimestamp>:
 * Function Name : FlexCAN_GetMsgBuffTimestamp
 * Description   : Get a message buffer timestamp value.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMsgBuffTimestamp(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    c6f8:	b500      	push	{lr}
    c6fa:	b085      	sub	sp, #20
    c6fc:	9001      	str	r0, [sp, #4]
    c6fe:	9100      	str	r1, [sp, #0]
    uint32 TimeStamp = 0U;
    c700:	2300      	movs	r3, #0
    c702:	9303      	str	r3, [sp, #12]
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    c704:	9900      	ldr	r1, [sp, #0]
    c706:	9801      	ldr	r0, [sp, #4]
    c708:	f7ff fb62 	bl	bdd0 <FlexCAN_GetMsgBuffRegion>
    c70c:	9002      	str	r0, [sp, #8]
        TimeStamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        TimeStamp = (uint32)((*Flexcan_Mb & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    c70e:	9b02      	ldr	r3, [sp, #8]
    c710:	681b      	ldr	r3, [r3, #0]
    c712:	b29b      	uxth	r3, r3
    c714:	9303      	str	r3, [sp, #12]
    }
    return TimeStamp;
    c716:	9b03      	ldr	r3, [sp, #12]
}
    c718:	4618      	mov	r0, r3
    c71a:	b005      	add	sp, #20
    c71c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c720 <FlexCAN_GetMsgBuff>:
 *END**************************************************************************/
void FlexCAN_GetMsgBuff(const FLEXCAN_Type * base,
                        uint32 msgBuffIdx,
                        Flexcan_Ip_MsgBuffType * msgBuff
                       )
{
    c720:	b500      	push	{lr}
    c722:	b08d      	sub	sp, #52	; 0x34
    c724:	9003      	str	r0, [sp, #12]
    c726:	9102      	str	r1, [sp, #8]
    c728:	9201      	str	r2, [sp, #4]

    uint8 i;
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    c72a:	9902      	ldr	r1, [sp, #8]
    c72c:	9803      	ldr	r0, [sp, #12]
    c72e:	f7ff fb4f 	bl	bdd0 <FlexCAN_GetMsgBuffRegion>
    c732:	900a      	str	r0, [sp, #40]	; 0x28
    volatile const uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    c734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c736:	3304      	adds	r3, #4
    c738:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const uint8 * Flexcan_Mb_Data = (volatile const uint8 *)(&Flexcan_Mb[2]);
    c73a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c73c:	3308      	adds	r3, #8
    c73e:	9308      	str	r3, [sp, #32]
    volatile const uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    c740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c742:	3308      	adds	r3, #8
    c744:	9307      	str	r3, [sp, #28]
    uint32 * MsgBuff_Data_32 = NULL_PTR;
    c746:	2300      	movs	r3, #0
    c748:	9306      	str	r3, [sp, #24]
    uint32 MbWord;

    uint8 Flexcan_Mb_Dlc_Value = (uint8)(((*Flexcan_Mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    c74a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c74c:	681b      	ldr	r3, [r3, #0]
    c74e:	0c1b      	lsrs	r3, r3, #16
    c750:	b2db      	uxtb	r3, r3
    c752:	f003 030f 	and.w	r3, r3, #15
    c756:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Payload_Size = FlexCAN_ComputePayloadSize(Flexcan_Mb_Dlc_Value);
    c75a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c75e:	4618      	mov	r0, r3
    c760:	f7ff faed 	bl	bd3e <FlexCAN_ComputePayloadSize>
    c764:	4603      	mov	r3, r0
    c766:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(msgBuff != NULL_PTR);
#endif
    /* Asign after NULL Check */
    MsgBuff_Data_32 = (uint32 *)(msgBuff->data);
    c76a:	9b01      	ldr	r3, [sp, #4]
    c76c:	3308      	adds	r3, #8
    c76e:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    /* Payload Size is based on MBDSR for 1 MBDSR corresponds 32 * 8Bytes MBs  */
    if (Payload_Size > FlexCAN_GetMbPayloadSize(base, msgBuffIdx))
    c770:	9902      	ldr	r1, [sp, #8]
    c772:	9803      	ldr	r0, [sp, #12]
    c774:	f7ff fe5a 	bl	c42c <FlexCAN_GetMbPayloadSize>
    c778:	4603      	mov	r3, r0
    c77a:	461a      	mov	r2, r3
    c77c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    c780:	4293      	cmp	r3, r2
    c782:	d906      	bls.n	c792 <FlexCAN_GetMsgBuff+0x72>
    {
        Payload_Size = FlexCAN_GetMbPayloadSize(base, msgBuffIdx);
    c784:	9902      	ldr	r1, [sp, #8]
    c786:	9803      	ldr	r0, [sp, #12]
    c788:	f7ff fe50 	bl	c42c <FlexCAN_GetMbPayloadSize>
    c78c:	4603      	mov	r3, r0
    c78e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    msgBuff->dataLen = Payload_Size;
    c792:	9b01      	ldr	r3, [sp, #4]
    c794:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    c798:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Get a MB field values */
    msgBuff->cs = *Flexcan_Mb;
    c79c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c79e:	681a      	ldr	r2, [r3, #0]
    c7a0:	9b01      	ldr	r3, [sp, #4]
    c7a2:	601a      	str	r2, [r3, #0]
    if ((msgBuff->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    c7a4:	9b01      	ldr	r3, [sp, #4]
    c7a6:	681b      	ldr	r3, [r3, #0]
    c7a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    c7ac:	2b00      	cmp	r3, #0
    c7ae:	d004      	beq.n	c7ba <FlexCAN_GetMsgBuff+0x9a>
    {
        msgBuff->msgId = (*Flexcan_Mb_Id);
    c7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c7b2:	681a      	ldr	r2, [r3, #0]
    c7b4:	9b01      	ldr	r3, [sp, #4]
    c7b6:	605a      	str	r2, [r3, #4]
    c7b8:	e004      	b.n	c7c4 <FlexCAN_GetMsgBuff+0xa4>
    }
    else
    {
        msgBuff->msgId = (*Flexcan_Mb_Id) >> FLEXCAN_IP_ID_STD_SHIFT;
    c7ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c7bc:	681b      	ldr	r3, [r3, #0]
    c7be:	0c9a      	lsrs	r2, r3, #18
    c7c0:	9b01      	ldr	r3, [sp, #4]
    c7c2:	605a      	str	r2, [r3, #4]
        msgBuff->time_stamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        msgBuff->time_stamp = (uint32)((msgBuff->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    c7c4:	9b01      	ldr	r3, [sp, #4]
    c7c6:	681b      	ldr	r3, [r3, #0]
    c7c8:	b29a      	uxth	r2, r3
    c7ca:	9b01      	ldr	r3, [sp, #4]
    c7cc:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, MsgBuff_Data_32[i >> 2U]);
        }
    }

#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    c7ce:	2300      	movs	r3, #0
    c7d0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    c7d4:	e025      	b.n	c822 <FlexCAN_GetMsgBuff+0x102>
    {
        MbWord = Flexcan_Mb_Data_32[i >> 2U];
    c7d6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c7da:	089b      	lsrs	r3, r3, #2
    c7dc:	b2db      	uxtb	r3, r3
    c7de:	009b      	lsls	r3, r3, #2
    c7e0:	9a07      	ldr	r2, [sp, #28]
    c7e2:	4413      	add	r3, r2
    c7e4:	681b      	ldr	r3, [r3, #0]
    c7e6:	9304      	str	r3, [sp, #16]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (MsgBuff_Data_32[i >> 2U]));
    c7e8:	9b04      	ldr	r3, [sp, #16]
    c7ea:	0e1a      	lsrs	r2, r3, #24
    c7ec:	9b04      	ldr	r3, [sp, #16]
    c7ee:	0a1b      	lsrs	r3, r3, #8
    c7f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    c7f4:	431a      	orrs	r2, r3
    c7f6:	9b04      	ldr	r3, [sp, #16]
    c7f8:	021b      	lsls	r3, r3, #8
    c7fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    c7fe:	ea42 0103 	orr.w	r1, r2, r3
    c802:	9b04      	ldr	r3, [sp, #16]
    c804:	061a      	lsls	r2, r3, #24
    c806:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c80a:	089b      	lsrs	r3, r3, #2
    c80c:	b2db      	uxtb	r3, r3
    c80e:	009b      	lsls	r3, r3, #2
    c810:	9806      	ldr	r0, [sp, #24]
    c812:	4403      	add	r3, r0
    c814:	430a      	orrs	r2, r1
    c816:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    c818:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c81c:	3304      	adds	r3, #4
    c81e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    c822:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    c826:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    c82a:	f023 0303 	bic.w	r3, r3, #3
    c82e:	429a      	cmp	r2, r3
    c830:	d3d1      	bcc.n	c7d6 <FlexCAN_GetMsgBuff+0xb6>
    }

#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (; i < Payload_Size; i++)
    c832:	e014      	b.n	c85e <FlexCAN_GetMsgBuff+0x13e>
    {   /* Max allowed value for index is 63 */
        msgBuff->data[i] = Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(i)];
    c834:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c838:	f083 0303 	eor.w	r3, r3, #3
    c83c:	b2db      	uxtb	r3, r3
    c83e:	461a      	mov	r2, r3
    c840:	9b08      	ldr	r3, [sp, #32]
    c842:	441a      	add	r2, r3
    c844:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c848:	7812      	ldrb	r2, [r2, #0]
    c84a:	b2d1      	uxtb	r1, r2
    c84c:	9a01      	ldr	r2, [sp, #4]
    c84e:	4413      	add	r3, r2
    c850:	460a      	mov	r2, r1
    c852:	721a      	strb	r2, [r3, #8]
    for (; i < Payload_Size; i++)
    c854:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c858:	3301      	adds	r3, #1
    c85a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    c85e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    c862:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    c866:	429a      	cmp	r2, r3
    c868:	d3e4      	bcc.n	c834 <FlexCAN_GetMsgBuff+0x114>
    }
}
    c86a:	bf00      	nop
    c86c:	bf00      	nop
    c86e:	b00d      	add	sp, #52	; 0x34
    c870:	f85d fb04 	ldr.w	pc, [sp], #4

0000c874 <FlexCAN_SetTxMsgBuff>:
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId,
                          const uint8 * msgData,
                          const boolean isRemote
                         )
{
    c874:	b500      	push	{lr}
    c876:	b08d      	sub	sp, #52	; 0x34
    c878:	9003      	str	r0, [sp, #12]
    c87a:	9102      	str	r1, [sp, #8]
    c87c:	9201      	str	r2, [sp, #4]
    c87e:	9300      	str	r3, [sp, #0]
    uint32 Flexcan_Mb_Config = 0;
    c880:	2300      	movs	r3, #0
    c882:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 DataByte;
    uint8 Dlc_Value;
    uint8 Payload_Size;
    volatile uint32 * Flexcan_Mb = pMbAddr;
    c884:	9b03      	ldr	r3, [sp, #12]
    c886:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    c888:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c88a:	3304      	adds	r3, #4
    c88c:	9308      	str	r3, [sp, #32]
    volatile uint8 * Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    c88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c890:	3308      	adds	r3, #8
    c892:	9307      	str	r3, [sp, #28]
    volatile uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    c894:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c896:	3308      	adds	r3, #8
    c898:	9306      	str	r3, [sp, #24]
    const uint32 * MsgData_32 = (const uint32*)msgData;
    c89a:	9b00      	ldr	r3, [sp, #0]
    c89c:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(cs != NULL_PTR);
    #endif

        /* Clean up the arbitration field area and set TxMB Inactive */
        *Flexcan_Mb = (uint32)((((uint32)FLEXCAN_TX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    c89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    c8a4:	601a      	str	r2, [r3, #0]
        *Flexcan_Mb_Id = 0;
    c8a6:	9b08      	ldr	r3, [sp, #32]
    c8a8:	2200      	movs	r2, #0
    c8aa:	601a      	str	r2, [r3, #0]

        /* Compute the value of the DLC field */
        Dlc_Value = FlexCAN_ComputeDLCValue((uint8)cs->dataLen);
    c8ac:	9b02      	ldr	r3, [sp, #8]
    c8ae:	689b      	ldr	r3, [r3, #8]
    c8b0:	b2db      	uxtb	r3, r3
    c8b2:	4618      	mov	r0, r3
    c8b4:	f7ff f9f4 	bl	bca0 <FlexCAN_ComputeDLCValue>
    c8b8:	4603      	mov	r3, r0
    c8ba:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Copy user's buffer into the message buffer data area */
        if (msgData != NULL_PTR)
    c8be:	9b00      	ldr	r3, [sp, #0]
    c8c0:	2b00      	cmp	r3, #0
    c8c2:	d065      	beq.n	c990 <FlexCAN_SetTxMsgBuff+0x11c>
        {
#if (defined(S32K116) || defined (S32K118))
            (void)MsgData_32;
            DataByte = FlexCAN_DataTransferTxMsgBuff(Flexcan_Mb_Data_32, cs, msgData);
#else
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    c8c4:	2300      	movs	r3, #0
    c8c6:	930a      	str	r3, [sp, #40]	; 0x28
    c8c8:	e02c      	b.n	c924 <FlexCAN_SetTxMsgBuff+0xb0>
            {
                FLEXCAN_IP_SWAP_BYTES_IN_WORD((MsgData_32[DataByte >> 2U]), (Flexcan_Mb_Data_32[DataByte >> 2U]));
    c8ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c8cc:	089b      	lsrs	r3, r3, #2
    c8ce:	009b      	lsls	r3, r3, #2
    c8d0:	9a05      	ldr	r2, [sp, #20]
    c8d2:	4413      	add	r3, r2
    c8d4:	681b      	ldr	r3, [r3, #0]
    c8d6:	0e1a      	lsrs	r2, r3, #24
    c8d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c8da:	089b      	lsrs	r3, r3, #2
    c8dc:	009b      	lsls	r3, r3, #2
    c8de:	9905      	ldr	r1, [sp, #20]
    c8e0:	440b      	add	r3, r1
    c8e2:	681b      	ldr	r3, [r3, #0]
    c8e4:	0a1b      	lsrs	r3, r3, #8
    c8e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    c8ea:	431a      	orrs	r2, r3
    c8ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c8ee:	089b      	lsrs	r3, r3, #2
    c8f0:	009b      	lsls	r3, r3, #2
    c8f2:	9905      	ldr	r1, [sp, #20]
    c8f4:	440b      	add	r3, r1
    c8f6:	681b      	ldr	r3, [r3, #0]
    c8f8:	021b      	lsls	r3, r3, #8
    c8fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    c8fe:	ea42 0103 	orr.w	r1, r2, r3
    c902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c904:	089b      	lsrs	r3, r3, #2
    c906:	009b      	lsls	r3, r3, #2
    c908:	9a05      	ldr	r2, [sp, #20]
    c90a:	4413      	add	r3, r2
    c90c:	681b      	ldr	r3, [r3, #0]
    c90e:	061a      	lsls	r2, r3, #24
    c910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c912:	089b      	lsrs	r3, r3, #2
    c914:	009b      	lsls	r3, r3, #2
    c916:	9806      	ldr	r0, [sp, #24]
    c918:	4403      	add	r3, r0
    c91a:	430a      	orrs	r2, r1
    c91c:	601a      	str	r2, [r3, #0]
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    c91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c920:	3304      	adds	r3, #4
    c922:	930a      	str	r3, [sp, #40]	; 0x28
    c924:	9b02      	ldr	r3, [sp, #8]
    c926:	689b      	ldr	r3, [r3, #8]
    c928:	f023 0303 	bic.w	r3, r3, #3
    c92c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c92e:	429a      	cmp	r2, r3
    c930:	d3cb      	bcc.n	c8ca <FlexCAN_SetTxMsgBuff+0x56>
            }
#endif /* (defined(S32K116) || defined (S32K118)) */
            for ( ; DataByte < cs->dataLen; DataByte++)
    c932:	e00c      	b.n	c94e <FlexCAN_SetTxMsgBuff+0xda>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] =  msgData[DataByte];
    c934:	9a00      	ldr	r2, [sp, #0]
    c936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c938:	441a      	add	r2, r3
    c93a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c93c:	f083 0303 	eor.w	r3, r3, #3
    c940:	9907      	ldr	r1, [sp, #28]
    c942:	440b      	add	r3, r1
    c944:	7812      	ldrb	r2, [r2, #0]
    c946:	701a      	strb	r2, [r3, #0]
            for ( ; DataByte < cs->dataLen; DataByte++)
    c948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c94a:	3301      	adds	r3, #1
    c94c:	930a      	str	r3, [sp, #40]	; 0x28
    c94e:	9b02      	ldr	r3, [sp, #8]
    c950:	689b      	ldr	r3, [r3, #8]
    c952:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c954:	429a      	cmp	r2, r3
    c956:	d3ed      	bcc.n	c934 <FlexCAN_SetTxMsgBuff+0xc0>
            }
        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            Payload_Size = FlexCAN_ComputePayloadSize(Dlc_Value);
    c958:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c95c:	4618      	mov	r0, r3
    c95e:	f7ff f9ee 	bl	bd3e <FlexCAN_ComputePayloadSize>
    c962:	4603      	mov	r3, r0
    c964:	f88d 3012 	strb.w	r3, [sp, #18]
            /* Add padding, if needed */
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    c968:	9b02      	ldr	r3, [sp, #8]
    c96a:	689b      	ldr	r3, [r3, #8]
    c96c:	930a      	str	r3, [sp, #40]	; 0x28
    c96e:	e00a      	b.n	c986 <FlexCAN_SetTxMsgBuff+0x112>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] = cs->fd_padding;
    c970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c972:	f083 0303 	eor.w	r3, r3, #3
    c976:	9a07      	ldr	r2, [sp, #28]
    c978:	4413      	add	r3, r2
    c97a:	9a02      	ldr	r2, [sp, #8]
    c97c:	7b52      	ldrb	r2, [r2, #13]
    c97e:	701a      	strb	r2, [r3, #0]
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    c980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c982:	3301      	adds	r3, #1
    c984:	930a      	str	r3, [sp, #40]	; 0x28
    c986:	f89d 3012 	ldrb.w	r3, [sp, #18]
    c98a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c98c:	429a      	cmp	r2, r3
    c98e:	d3ef      	bcc.n	c970 <FlexCAN_SetTxMsgBuff+0xfc>
            }
        #endif /* FLEXCAN_IP_FEATURE_HAS_FD */
        }
        /* Set the ID according the format structure */
        if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    c990:	9b02      	ldr	r3, [sp, #8]
    c992:	685b      	ldr	r3, [r3, #4]
    c994:	2b01      	cmp	r3, #1
    c996:	d111      	bne.n	c9bc <FlexCAN_SetTxMsgBuff+0x148>
        {
            /* ID [28-0] */
            *Flexcan_Mb_Id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    c998:	9b08      	ldr	r3, [sp, #32]
    c99a:	681b      	ldr	r3, [r3, #0]
    c99c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    c9a0:	9b08      	ldr	r3, [sp, #32]
    c9a2:	601a      	str	r2, [r3, #0]
            *Flexcan_Mb_Id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    c9a4:	9b08      	ldr	r3, [sp, #32]
    c9a6:	681a      	ldr	r2, [r3, #0]
    c9a8:	9b01      	ldr	r3, [sp, #4]
    c9aa:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    c9ae:	431a      	orrs	r2, r3
    c9b0:	9b08      	ldr	r3, [sp, #32]
    c9b2:	601a      	str	r2, [r3, #0]
            /* Set IDE and SRR bit*/
            Flexcan_Mb_Config |= (FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    c9b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9b6:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
    c9ba:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    c9bc:	9b02      	ldr	r3, [sp, #8]
    c9be:	685b      	ldr	r3, [r3, #4]
    c9c0:	2b00      	cmp	r3, #0
    c9c2:	d114      	bne.n	c9ee <FlexCAN_SetTxMsgBuff+0x17a>
        {
            /* ID[28-18] */
            *Flexcan_Mb_Id &= ~FLEXCAN_IP_ID_STD_MASK;
    c9c4:	9b08      	ldr	r3, [sp, #32]
    c9c6:	681b      	ldr	r3, [r3, #0]
    c9c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    c9cc:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    c9d0:	9a08      	ldr	r2, [sp, #32]
    c9d2:	6013      	str	r3, [r2, #0]
            *Flexcan_Mb_Id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    c9d4:	9b08      	ldr	r3, [sp, #32]
    c9d6:	681a      	ldr	r2, [r3, #0]
    c9d8:	9b01      	ldr	r3, [sp, #4]
    c9da:	0499      	lsls	r1, r3, #18
    c9dc:	4b2b      	ldr	r3, [pc, #172]	; (ca8c <FlexCAN_SetTxMsgBuff+0x218>)
    c9de:	400b      	ands	r3, r1
    c9e0:	431a      	orrs	r2, r3
    c9e2:	9b08      	ldr	r3, [sp, #32]
    c9e4:	601a      	str	r2, [r3, #0]
            /* make sure IDE and SRR are not set */
            Flexcan_Mb_Config &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    c9e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
    c9ec:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        /* Set the length of data in bytes */
        Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_DLC_MASK;
    c9ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9f0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    c9f4:	930b      	str	r3, [sp, #44]	; 0x2c
        Flexcan_Mb_Config |= ((uint32)Dlc_Value << FLEXCAN_IP_CS_DLC_SHIFT) & FLEXCAN_IP_CS_DLC_MASK;
    c9f6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c9fa:	041b      	lsls	r3, r3, #16
    c9fc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    ca00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ca02:	4313      	orrs	r3, r2
    ca04:	930b      	str	r3, [sp, #44]	; 0x2c
        /* Set MB CODE */
        if (cs->code != (uint32)FLEXCAN_TX_NOT_USED)
    ca06:	9b02      	ldr	r3, [sp, #8]
    ca08:	681b      	ldr	r3, [r3, #0]
    ca0a:	2b0f      	cmp	r3, #15
    ca0c:	d03a      	beq.n	ca84 <FlexCAN_SetTxMsgBuff+0x210>
        {
            if ((uint32)FLEXCAN_TX_REMOTE == cs->code)
    ca0e:	9b02      	ldr	r3, [sp, #8]
    ca10:	681b      	ldr	r3, [r3, #0]
    ca12:	2b1c      	cmp	r3, #28
    ca14:	d104      	bne.n	ca20 <FlexCAN_SetTxMsgBuff+0x1ac>
            {
                /* Set RTR bit */
                Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    ca16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ca1c:	930b      	str	r3, [sp, #44]	; 0x2c
    ca1e:	e007      	b.n	ca30 <FlexCAN_SetTxMsgBuff+0x1bc>
            }
            else
            {
                if (TRUE == isRemote)
    ca20:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    ca24:	2b00      	cmp	r3, #0
    ca26:	d003      	beq.n	ca30 <FlexCAN_SetTxMsgBuff+0x1bc>
                {
                    /* Set RTR bit */
                    Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    ca28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ca2e:	930b      	str	r3, [sp, #44]	; 0x2c
                }
            }
            /* Reset the code */
            Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_CODE_MASK;
    ca30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca32:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    ca36:	930b      	str	r3, [sp, #44]	; 0x2c
            /* Set the code */
            if (cs->fd_enable)
    ca38:	9b02      	ldr	r3, [sp, #8]
    ca3a:	7b1b      	ldrb	r3, [r3, #12]
    ca3c:	2b00      	cmp	r3, #0
    ca3e:	d00e      	beq.n	ca5e <FlexCAN_SetTxMsgBuff+0x1ea>
            {
                Flexcan_Mb_Config |= ((cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK) | FLEXCAN_IP_MB_EDL_MASK;
    ca40:	9b02      	ldr	r3, [sp, #8]
    ca42:	681b      	ldr	r3, [r3, #0]
    ca44:	061b      	lsls	r3, r3, #24
    ca46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    ca4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca4c:	4313      	orrs	r3, r2
    ca4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ca52:	930b      	str	r3, [sp, #44]	; 0x2c
                /* In case of FD frame not supported RTR */
                Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_RTR_MASK;
    ca54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    ca5a:	930b      	str	r3, [sp, #44]	; 0x2c
    ca5c:	e007      	b.n	ca6e <FlexCAN_SetTxMsgBuff+0x1fa>
            }
            else
            {
                Flexcan_Mb_Config |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    ca5e:	9b02      	ldr	r3, [sp, #8]
    ca60:	681b      	ldr	r3, [r3, #0]
    ca62:	061b      	lsls	r3, r3, #24
    ca64:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    ca68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ca6a:	4313      	orrs	r3, r2
    ca6c:	930b      	str	r3, [sp, #44]	; 0x2c
            }

            if (cs->enable_brs)
    ca6e:	9b02      	ldr	r3, [sp, #8]
    ca70:	7b9b      	ldrb	r3, [r3, #14]
    ca72:	2b00      	cmp	r3, #0
    ca74:	d003      	beq.n	ca7e <FlexCAN_SetTxMsgBuff+0x20a>
            {
                Flexcan_Mb_Config |= FLEXCAN_IP_MB_BRS_MASK;
    ca76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    ca7c:	930b      	str	r3, [sp, #44]	; 0x2c
            }
            *Flexcan_Mb = Flexcan_Mb_Config;
    ca7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ca80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ca82:	601a      	str	r2, [r3, #0]
        }
}
    ca84:	bf00      	nop
    ca86:	b00d      	add	sp, #52	; 0x34
    ca88:	f85d fb04 	ldr.w	pc, [sp], #4
    ca8c:	1ffc0000 	.word	0x1ffc0000

0000ca90 <FlexCAN_SetMaxMsgBuffNum>:
 * Description   : Set the number of the last Message Buffers.
 * This function will define the number of the last Message Buffers
 *
 *END***************************************************************************/
Flexcan_Ip_StatusType FlexCAN_SetMaxMsgBuffNum(FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    ca90:	b500      	push	{lr}
    ca92:	b08f      	sub	sp, #60	; 0x3c
    ca94:	9001      	str	r0, [sp, #4]
    ca96:	9100      	str	r1, [sp, #0]
    uint32 MsgBuffIdx;
    uint32 DataByte;
    const volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    ca98:	9b01      	ldr	r3, [sp, #4]
    ca9a:	3380      	adds	r3, #128	; 0x80
    ca9c:	930a      	str	r3, [sp, #40]	; 0x28
#if (STD_ON == FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY)
    const volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */
    const volatile uint32 * ValEndMbPointer = NULL_PTR;
    ca9e:	2300      	movs	r3, #0
    caa0:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 *Flexcan_Mb = NULL_PTR;
    caa2:	2300      	movs	r3, #0
    caa4:	9308      	str	r3, [sp, #32]
    volatile uint32 *Flexcan_Mb_Id   = NULL_PTR ;
    caa6:	2300      	movs	r3, #0
    caa8:	9307      	str	r3, [sp, #28]
    volatile uint8  *Flexcan_Mb_Data = NULL_PTR;
    caaa:	2300      	movs	r3, #0
    caac:	9306      	str	r3, [sp, #24]
    uint8 Arbitration_Field_Size = 8U;
    caae:	2308      	movs	r3, #8
    cab0:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, maxMsgBuffNum - (uint32)1U);
    cab4:	9b00      	ldr	r3, [sp, #0]
    cab6:	3b01      	subs	r3, #1
    cab8:	4619      	mov	r1, r3
    caba:	9801      	ldr	r0, [sp, #4]
    cabc:	f7ff fcb6 	bl	c42c <FlexCAN_GetMbPayloadSize>
    cac0:	4603      	mov	r3, r0
    cac2:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_PtrSizeType ValEndMb = 0U;
    cac6:	2300      	movs	r3, #0
    cac8:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_PtrSizeType ValEndRam = 0U;
    caca:	2300      	movs	r3, #0
    cacc:	9303      	str	r3, [sp, #12]
    Flexcan_Ip_StatusType Status = FLEXCAN_STATUS_SUCCESS;
    cace:	2300      	movs	r3, #0
    cad0:	930b      	str	r3, [sp, #44]	; 0x2c

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(maxMsgBuffNum>0U);
    #endif

    ValEndMbPointer = FlexCAN_GetMsgBuffRegion(base, (maxMsgBuffNum - (uint32)1U));
    cad2:	9b00      	ldr	r3, [sp, #0]
    cad4:	3b01      	subs	r3, #1
    cad6:	4619      	mov	r1, r3
    cad8:	9801      	ldr	r0, [sp, #4]
    cada:	f7ff f979 	bl	bdd0 <FlexCAN_GetMsgBuffRegion>
    cade:	9009      	str	r0, [sp, #36]	; 0x24

    ValEndMb = (Flexcan_Ip_PtrSizeType)ValEndMbPointer + Can_Real_Payload + Arbitration_Field_Size;
    cae0:	f89d 2016 	ldrb.w	r2, [sp, #22]
    cae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cae6:	441a      	add	r2, r3
    cae8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    caec:	4413      	add	r3, r2
    caee:	9304      	str	r3, [sp, #16]
    else
    {
        ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    }
#else
    ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    caf0:	9801      	ldr	r0, [sp, #4]
    caf2:	f7ff f9e7 	bl	bec4 <FlexCAN_GetMaxMbNum>
    caf6:	4603      	mov	r3, r0
    caf8:	011b      	lsls	r3, r3, #4
    cafa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cafc:	4413      	add	r3, r2
    cafe:	9303      	str	r3, [sp, #12]
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */

    if ((ValEndMb > ValEndRam) || (maxMsgBuffNum > FlexCAN_GetMaxMbNum(base)))
    cb00:	9a04      	ldr	r2, [sp, #16]
    cb02:	9b03      	ldr	r3, [sp, #12]
    cb04:	429a      	cmp	r2, r3
    cb06:	d806      	bhi.n	cb16 <FlexCAN_SetMaxMsgBuffNum+0x86>
    cb08:	9801      	ldr	r0, [sp, #4]
    cb0a:	f7ff f9db 	bl	bec4 <FlexCAN_GetMaxMbNum>
    cb0e:	4602      	mov	r2, r0
    cb10:	9b00      	ldr	r3, [sp, #0]
    cb12:	4293      	cmp	r3, r2
    cb14:	d901      	bls.n	cb1a <FlexCAN_SetMaxMsgBuffNum+0x8a>
    {
        Status = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    cb16:	2304      	movs	r3, #4
    cb18:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    if (FLEXCAN_STATUS_SUCCESS == Status)
    cb1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb1c:	2b00      	cmp	r3, #0
    cb1e:	d142      	bne.n	cba6 <FlexCAN_SetMaxMsgBuffNum+0x116>
    {
        /* Set the maximum number of MBs*/
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MAXMB_MASK) | (((maxMsgBuffNum-1U) << FLEXCAN_MCR_MAXMB_SHIFT) & FLEXCAN_MCR_MAXMB_MASK);
    cb20:	9b01      	ldr	r3, [sp, #4]
    cb22:	681b      	ldr	r3, [r3, #0]
    cb24:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
    cb28:	9b00      	ldr	r3, [sp, #0]
    cb2a:	3b01      	subs	r3, #1
    cb2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    cb30:	431a      	orrs	r2, r3
    cb32:	9b01      	ldr	r3, [sp, #4]
    cb34:	601a      	str	r2, [r3, #0]
        if (!(((base->MCR & FLEXCAN_MCR_RFEN_MASK) >> FLEXCAN_MCR_RFEN_SHIFT) != 0U))
    cb36:	9b01      	ldr	r3, [sp, #4]
    cb38:	681b      	ldr	r3, [r3, #0]
    cb3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    cb3e:	2b00      	cmp	r3, #0
    cb40:	d131      	bne.n	cba6 <FlexCAN_SetMaxMsgBuffNum+0x116>
        {
            /* Initialize all message buffers as inactive */
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    cb42:	2300      	movs	r3, #0
    cb44:	930d      	str	r3, [sp, #52]	; 0x34
    cb46:	e02a      	b.n	cb9e <FlexCAN_SetMaxMsgBuffNum+0x10e>
            {
                Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, MsgBuffIdx);
    cb48:	990d      	ldr	r1, [sp, #52]	; 0x34
    cb4a:	9801      	ldr	r0, [sp, #4]
    cb4c:	f7ff f940 	bl	bdd0 <FlexCAN_GetMsgBuffRegion>
    cb50:	9008      	str	r0, [sp, #32]
                Flexcan_Mb_Id   = &Flexcan_Mb[1];
    cb52:	9b08      	ldr	r3, [sp, #32]
    cb54:	3304      	adds	r3, #4
    cb56:	9307      	str	r3, [sp, #28]
                Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    cb58:	9b08      	ldr	r3, [sp, #32]
    cb5a:	3308      	adds	r3, #8
    cb5c:	9306      	str	r3, [sp, #24]
                *Flexcan_Mb = 0x0U;
    cb5e:	9b08      	ldr	r3, [sp, #32]
    cb60:	2200      	movs	r2, #0
    cb62:	601a      	str	r2, [r3, #0]
                *Flexcan_Mb_Id = 0x0U;
    cb64:	9b07      	ldr	r3, [sp, #28]
    cb66:	2200      	movs	r2, #0
    cb68:	601a      	str	r2, [r3, #0]
                Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, MsgBuffIdx);
    cb6a:	990d      	ldr	r1, [sp, #52]	; 0x34
    cb6c:	9801      	ldr	r0, [sp, #4]
    cb6e:	f7ff fc5d 	bl	c42c <FlexCAN_GetMbPayloadSize>
    cb72:	4603      	mov	r3, r0
    cb74:	f88d 3016 	strb.w	r3, [sp, #22]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    cb78:	2300      	movs	r3, #0
    cb7a:	930c      	str	r3, [sp, #48]	; 0x30
    cb7c:	e007      	b.n	cb8e <FlexCAN_SetMaxMsgBuffNum+0xfe>
                {
                   Flexcan_Mb_Data[DataByte] = 0x0U;
    cb7e:	9a06      	ldr	r2, [sp, #24]
    cb80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb82:	4413      	add	r3, r2
    cb84:	2200      	movs	r2, #0
    cb86:	701a      	strb	r2, [r3, #0]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    cb88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb8a:	3301      	adds	r3, #1
    cb8c:	930c      	str	r3, [sp, #48]	; 0x30
    cb8e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cb92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cb94:	429a      	cmp	r2, r3
    cb96:	d3f2      	bcc.n	cb7e <FlexCAN_SetMaxMsgBuffNum+0xee>
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    cb98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb9a:	3301      	adds	r3, #1
    cb9c:	930d      	str	r3, [sp, #52]	; 0x34
    cb9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cba0:	9b00      	ldr	r3, [sp, #0]
    cba2:	429a      	cmp	r2, r3
    cba4:	d3d0      	bcc.n	cb48 <FlexCAN_SetMaxMsgBuffNum+0xb8>
                }
            }
        }
    }
    return Status;
    cba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    cba8:	4618      	mov	r0, r3
    cbaa:	b00f      	add	sp, #60	; 0x3c
    cbac:	f85d fb04 	ldr.w	pc, [sp], #4

0000cbb0 <FlexCAN_SetOperationMode>:
 * Description   : Enable a FlexCAN operation mode.
 * This function will enable one of the modes listed in flexcan_operation_modes_t.
 *
 *END**************************************************************************/
void FlexCAN_SetOperationMode(FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
    cbb0:	b500      	push	{lr}
    cbb2:	b083      	sub	sp, #12
    cbb4:	9001      	str	r0, [sp, #4]
    cbb6:	9100      	str	r1, [sp, #0]
    switch (mode)
    cbb8:	9b00      	ldr	r3, [sp, #0]
    cbba:	2b02      	cmp	r3, #2
    cbbc:	d01d      	beq.n	cbfa <FlexCAN_SetOperationMode+0x4a>
    cbbe:	9b00      	ldr	r3, [sp, #0]
    cbc0:	2b02      	cmp	r3, #2
    cbc2:	d82b      	bhi.n	cc1c <FlexCAN_SetOperationMode+0x6c>
    cbc4:	9b00      	ldr	r3, [sp, #0]
    cbc6:	2b00      	cmp	r3, #0
    cbc8:	d003      	beq.n	cbd2 <FlexCAN_SetOperationMode+0x22>
    cbca:	9b00      	ldr	r3, [sp, #0]
    cbcc:	2b01      	cmp	r3, #1
    cbce:	d00d      	beq.n	cbec <FlexCAN_SetOperationMode+0x3c>
            /* Enable Self Reception */
            FlexCAN_SetSelfReception(base, TRUE);
            break;
        default:
            /* Should not get here */
            break;
    cbd0:	e024      	b.n	cc1c <FlexCAN_SetOperationMode+0x6c>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    cbd2:	9b01      	ldr	r3, [sp, #4]
    cbd4:	685b      	ldr	r3, [r3, #4]
    cbd6:	f023 0208 	bic.w	r2, r3, #8
    cbda:	9b01      	ldr	r3, [sp, #4]
    cbdc:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(0U);
    cbde:	9b01      	ldr	r3, [sp, #4]
    cbe0:	685b      	ldr	r3, [r3, #4]
    cbe2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    cbe6:	9b01      	ldr	r3, [sp, #4]
    cbe8:	605a      	str	r2, [r3, #4]
            break;
    cbea:	e018      	b.n	cc1e <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(1U);
    cbec:	9b01      	ldr	r3, [sp, #4]
    cbee:	685b      	ldr	r3, [r3, #4]
    cbf0:	f043 0208 	orr.w	r2, r3, #8
    cbf4:	9b01      	ldr	r3, [sp, #4]
    cbf6:	605a      	str	r2, [r3, #4]
            break;
    cbf8:	e011      	b.n	cc1e <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(1U);
    cbfa:	9b01      	ldr	r3, [sp, #4]
    cbfc:	685b      	ldr	r3, [r3, #4]
    cbfe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    cc02:	9b01      	ldr	r3, [sp, #4]
    cc04:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    cc06:	9b01      	ldr	r3, [sp, #4]
    cc08:	685b      	ldr	r3, [r3, #4]
    cc0a:	f023 0208 	bic.w	r2, r3, #8
    cc0e:	9b01      	ldr	r3, [sp, #4]
    cc10:	605a      	str	r2, [r3, #4]
            FlexCAN_SetSelfReception(base, TRUE);
    cc12:	2101      	movs	r1, #1
    cc14:	9801      	ldr	r0, [sp, #4]
    cc16:	f7fe ff7f 	bl	bb18 <FlexCAN_SetSelfReception>
            break;
    cc1a:	e000      	b.n	cc1e <FlexCAN_SetOperationMode+0x6e>
            break;
    cc1c:	bf00      	nop
    }
}
    cc1e:	bf00      	nop
    cc20:	b003      	add	sp, #12
    cc22:	f85d fb04 	ldr.w	pc, [sp], #4

0000cc26 <FlexCAN_SetRxFifoFilter>:
 *END**************************************************************************/
void FlexCAN_SetRxFifoFilter(FLEXCAN_Type * base,
                             Flexcan_Ip_RxFifoIdElementFormatType idFormat,
                             const Flexcan_Ip_IdTableType * idFilterTable
                            )
{
    cc26:	b500      	push	{lr}
    cc28:	b08d      	sub	sp, #52	; 0x34
    cc2a:	9003      	str	r0, [sp, #12]
    cc2c:	9102      	str	r1, [sp, #8]
    cc2e:	9201      	str	r2, [sp, #4]

    /* Set RX FIFO ID filter table elements*/
    uint32 i, j, NumOfFilters;
    uint32 Val1 = 0UL, Val2 = 0UL, Val = 0UL;
    cc30:	2300      	movs	r3, #0
    cc32:	9309      	str	r3, [sp, #36]	; 0x24
    cc34:	2300      	movs	r3, #0
    cc36:	9308      	str	r3, [sp, #32]
    cc38:	2300      	movs	r3, #0
    cc3a:	9307      	str	r3, [sp, #28]
    volatile uint32 * FilterTable = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_RX_FIFO_FILTER_TABLE_OFFSET);
    cc3c:	9b03      	ldr	r3, [sp, #12]
    cc3e:	33e0      	adds	r3, #224	; 0xe0
    cc40:	9306      	str	r3, [sp, #24]

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert((idFilterTable != NULL_PTR) || (FLEXCAN_RX_FIFO_ID_FORMAT_D == idFormat));
    #endif

    NumOfFilters = (((base->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    cc42:	9b03      	ldr	r3, [sp, #12]
    cc44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    cc46:	0e1b      	lsrs	r3, r3, #24
    cc48:	f003 030f 	and.w	r3, r3, #15
    cc4c:	9305      	str	r3, [sp, #20]
    cc4e:	9b02      	ldr	r3, [sp, #8]
    cc50:	2b03      	cmp	r3, #3
    cc52:	f200 81e7 	bhi.w	d024 <FlexCAN_SetRxFifoFilter+0x3fe>
    cc56:	a201      	add	r2, pc, #4	; (adr r2, cc5c <FlexCAN_SetRxFifoFilter+0x36>)
    cc58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cc5c:	0000cc6d 	.word	0x0000cc6d
    cc60:	0000cd07 	.word	0x0000cd07
    cc64:	0000ce41 	.word	0x0000ce41
    cc68:	0000d00f 	.word	0x0000d00f
    switch (idFormat)
    {
        case (FLEXCAN_RX_FIFO_ID_FORMAT_A):
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    cc6c:	f000 ffb4 	bl	dbd8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            /* One full ID (standard and extended) per ID Filter Table element.*/
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    cc70:	9b03      	ldr	r3, [sp, #12]
    cc72:	681b      	ldr	r3, [r3, #0]
    cc74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
            (base->MCR) =
    cc78:	9b03      	ldr	r3, [sp, #12]
    cc7a:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_A)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    cc7c:	f000 ffd8 	bl	dc30 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    cc80:	2300      	movs	r3, #0
    cc82:	930b      	str	r3, [sp, #44]	; 0x2c
    cc84:	e038      	b.n	ccf8 <FlexCAN_SetRxFifoFilter+0xd2>
            {
                Val = 0UL;
    cc86:	2300      	movs	r3, #0
    cc88:	9307      	str	r3, [sp, #28]

                if (idFilterTable[i].isRemoteFrame)
    cc8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc8c:	00db      	lsls	r3, r3, #3
    cc8e:	9a01      	ldr	r2, [sp, #4]
    cc90:	4413      	add	r3, r2
    cc92:	781b      	ldrb	r3, [r3, #0]
    cc94:	2b00      	cmp	r3, #0
    cc96:	d002      	beq.n	cc9e <FlexCAN_SetRxFifoFilter+0x78>
                {
                    Val = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    cc98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    cc9c:	9307      	str	r3, [sp, #28]
                }

                if (idFilterTable[i].isExtendedFrame)
    cc9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cca0:	00db      	lsls	r3, r3, #3
    cca2:	9a01      	ldr	r2, [sp, #4]
    cca4:	4413      	add	r3, r2
    cca6:	785b      	ldrb	r3, [r3, #1]
    cca8:	2b00      	cmp	r3, #0
    ccaa:	d013      	beq.n	ccd4 <FlexCAN_SetRxFifoFilter+0xae>
                {
                    Val |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    ccac:	9b07      	ldr	r3, [sp, #28]
    ccae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    ccb2:	9307      	str	r3, [sp, #28]
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT) &
    ccb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ccb6:	00db      	lsls	r3, r3, #3
    ccb8:	9a01      	ldr	r2, [sp, #4]
    ccba:	4413      	add	r3, r2
    ccbc:	685b      	ldr	r3, [r3, #4]
    ccbe:	005b      	lsls	r3, r3, #1
    ccc0:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
    ccc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ccc6:	009b      	lsls	r3, r3, #2
    ccc8:	9a06      	ldr	r2, [sp, #24]
    ccca:	4413      	add	r3, r2
    cccc:	9a07      	ldr	r2, [sp, #28]
    ccce:	440a      	add	r2, r1
    ccd0:	601a      	str	r2, [r3, #0]
    ccd2:	e00e      	b.n	ccf2 <FlexCAN_SetRxFifoFilter+0xcc>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK
                                           );
                }
                else
                {
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT) &
    ccd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ccd6:	00db      	lsls	r3, r3, #3
    ccd8:	9a01      	ldr	r2, [sp, #4]
    ccda:	4413      	add	r3, r2
    ccdc:	685b      	ldr	r3, [r3, #4]
    ccde:	04da      	lsls	r2, r3, #19
    cce0:	4b9d      	ldr	r3, [pc, #628]	; (cf58 <FlexCAN_SetRxFifoFilter+0x332>)
    cce2:	4013      	ands	r3, r2
    cce4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cce6:	0092      	lsls	r2, r2, #2
    cce8:	9906      	ldr	r1, [sp, #24]
    ccea:	440a      	add	r2, r1
    ccec:	9907      	ldr	r1, [sp, #28]
    ccee:	440b      	add	r3, r1
    ccf0:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    ccf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ccf4:	3301      	adds	r3, #1
    ccf6:	930b      	str	r3, [sp, #44]	; 0x2c
    ccf8:	9b05      	ldr	r3, [sp, #20]
    ccfa:	3301      	adds	r3, #1
    ccfc:	00db      	lsls	r3, r3, #3
    ccfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cd00:	429a      	cmp	r2, r3
    cd02:	d3c0      	bcc.n	cc86 <FlexCAN_SetRxFifoFilter+0x60>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_MASK
                                           );
                }
            }
            break;
    cd04:	e18f      	b.n	d026 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_B):
            /* Two full standard IDs or two partial 14-bit (standard and extended) IDs*/
            /* per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    cd06:	f000 ff67 	bl	dbd8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) | ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_B)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
    cd0a:	9b03      	ldr	r3, [sp, #12]
    cd0c:	681b      	ldr	r3, [r3, #0]
    cd0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    cd12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
            (base->MCR) =
    cd16:	9b03      	ldr	r3, [sp, #12]
    cd18:	601a      	str	r2, [r3, #0]
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    cd1a:	f000 ff89 	bl	dc30 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    cd1e:	2300      	movs	r3, #0
    cd20:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    cd22:	2300      	movs	r3, #0
    cd24:	930b      	str	r3, [sp, #44]	; 0x2c
    cd26:	e083      	b.n	ce30 <FlexCAN_SetRxFifoFilter+0x20a>
            {
                Val1 = 0U;
    cd28:	2300      	movs	r3, #0
    cd2a:	9309      	str	r3, [sp, #36]	; 0x24
                Val2 = 0U;
    cd2c:	2300      	movs	r3, #0
    cd2e:	9308      	str	r3, [sp, #32]

                if (idFilterTable[j].isRemoteFrame)
    cd30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd32:	00db      	lsls	r3, r3, #3
    cd34:	9a01      	ldr	r2, [sp, #4]
    cd36:	4413      	add	r3, r2
    cd38:	781b      	ldrb	r3, [r3, #0]
    cd3a:	2b00      	cmp	r3, #0
    cd3c:	d002      	beq.n	cd44 <FlexCAN_SetRxFifoFilter+0x11e>
                {
                    Val1 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    cd3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    cd42:	9309      	str	r3, [sp, #36]	; 0x24
                }

                if (idFilterTable[j + 1U].isRemoteFrame)
    cd44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd46:	3301      	adds	r3, #1
    cd48:	00db      	lsls	r3, r3, #3
    cd4a:	9a01      	ldr	r2, [sp, #4]
    cd4c:	4413      	add	r3, r2
    cd4e:	781b      	ldrb	r3, [r3, #0]
    cd50:	2b00      	cmp	r3, #0
    cd52:	d002      	beq.n	cd5a <FlexCAN_SetRxFifoFilter+0x134>
                {
                    Val2 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_RTR_SHIFT;
    cd54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    cd58:	9308      	str	r3, [sp, #32]
                }

                if (idFilterTable[j].isExtendedFrame)
    cd5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd5c:	00db      	lsls	r3, r3, #3
    cd5e:	9a01      	ldr	r2, [sp, #4]
    cd60:	4413      	add	r3, r2
    cd62:	785b      	ldrb	r3, [r3, #1]
    cd64:	2b00      	cmp	r3, #0
    cd66:	d014      	beq.n	cd92 <FlexCAN_SetRxFifoFilter+0x16c>
                {
                    Val1 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    cd68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    cd6e:	9309      	str	r3, [sp, #36]	; 0x24

                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    cd70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd72:	00db      	lsls	r3, r3, #3
    cd74:	9a01      	ldr	r2, [sp, #4]
    cd76:	4413      	add	r3, r2
    cd78:	685b      	ldr	r3, [r3, #4]
    cd7a:	0bdb      	lsrs	r3, r3, #15
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1
    cd7c:	041a      	lsls	r2, r3, #16
    cd7e:	4b77      	ldr	r3, [pc, #476]	; (cf5c <FlexCAN_SetRxFifoFilter+0x336>)
    cd80:	4013      	ands	r3, r2
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    cd82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cd84:	0092      	lsls	r2, r2, #2
    cd86:	9906      	ldr	r1, [sp, #24]
    cd88:	440a      	add	r2, r1
    cd8a:	9909      	ldr	r1, [sp, #36]	; 0x24
    cd8c:	440b      	add	r3, r1
    cd8e:	6013      	str	r3, [r2, #0]
    cd90:	e00e      	b.n	cdb0 <FlexCAN_SetRxFifoFilter+0x18a>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + ((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    cd92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd94:	00db      	lsls	r3, r3, #3
    cd96:	9a01      	ldr	r2, [sp, #4]
    cd98:	4413      	add	r3, r2
    cd9a:	685b      	ldr	r3, [r3, #4]
    cd9c:	04da      	lsls	r2, r3, #19
    cd9e:	4b6e      	ldr	r3, [pc, #440]	; (cf58 <FlexCAN_SetRxFifoFilter+0x332>)
    cda0:	4013      	ands	r3, r2
    cda2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cda4:	0092      	lsls	r2, r2, #2
    cda6:	9906      	ldr	r1, [sp, #24]
    cda8:	440a      	add	r2, r1
    cdaa:	9909      	ldr	r1, [sp, #36]	; 0x24
    cdac:	440b      	add	r3, r1
    cdae:	6013      	str	r3, [r2, #0]
                                              FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    cdb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cdb2:	3301      	adds	r3, #1
    cdb4:	00db      	lsls	r3, r3, #3
    cdb6:	9a01      	ldr	r2, [sp, #4]
    cdb8:	4413      	add	r3, r2
    cdba:	785b      	ldrb	r3, [r3, #1]
    cdbc:	2b00      	cmp	r3, #0
    cdbe:	d01a      	beq.n	cdf6 <FlexCAN_SetRxFifoFilter+0x1d0>
                {
                    Val2 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_IDE_SHIFT;
    cdc0:	9b08      	ldr	r3, [sp, #32]
    cdc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    cdc6:	9308      	str	r3, [sp, #32]

                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    cdc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cdca:	009b      	lsls	r3, r3, #2
    cdcc:	9a06      	ldr	r2, [sp, #24]
    cdce:	4413      	add	r3, r2
    cdd0:	6819      	ldr	r1, [r3, #0]
    cdd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cdd4:	3301      	adds	r3, #1
    cdd6:	00db      	lsls	r3, r3, #3
    cdd8:	9a01      	ldr	r2, [sp, #4]
    cdda:	4413      	add	r3, r2
    cddc:	685b      	ldr	r3, [r3, #4]
    cdde:	0bdb      	lsrs	r3, r3, #15
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2
    cde0:	f3c3 020d 	ubfx	r2, r3, #0, #14
                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    cde4:	9b08      	ldr	r3, [sp, #32]
    cde6:	441a      	add	r2, r3
    cde8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cdea:	009b      	lsls	r3, r3, #2
    cdec:	9806      	ldr	r0, [sp, #24]
    cdee:	4403      	add	r3, r0
    cdf0:	430a      	orrs	r2, r1
    cdf2:	601a      	str	r2, [r3, #0]
    cdf4:	e016      	b.n	ce24 <FlexCAN_SetRxFifoFilter+0x1fe>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val2 + ((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    cdf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cdf8:	009b      	lsls	r3, r3, #2
    cdfa:	9a06      	ldr	r2, [sp, #24]
    cdfc:	4413      	add	r3, r2
    cdfe:	6819      	ldr	r1, [r3, #0]
    ce00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce02:	3301      	adds	r3, #1
    ce04:	00db      	lsls	r3, r3, #3
    ce06:	9a01      	ldr	r2, [sp, #4]
    ce08:	4413      	add	r3, r2
    ce0a:	685b      	ldr	r3, [r3, #4]
    ce0c:	00da      	lsls	r2, r3, #3
    ce0e:	f643 73f8 	movw	r3, #16376	; 0x3ff8
    ce12:	4013      	ands	r3, r2
    ce14:	9a08      	ldr	r2, [sp, #32]
    ce16:	441a      	add	r2, r3
    ce18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce1a:	009b      	lsls	r3, r3, #2
    ce1c:	9806      	ldr	r0, [sp, #24]
    ce1e:	4403      	add	r3, r0
    ce20:	430a      	orrs	r2, r1
    ce22:	601a      	str	r2, [r3, #0]
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2
                                             );
                }

                j = j + 2U;
    ce24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce26:	3302      	adds	r3, #2
    ce28:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    ce2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce2c:	3301      	adds	r3, #1
    ce2e:	930b      	str	r3, [sp, #44]	; 0x2c
    ce30:	9b05      	ldr	r3, [sp, #20]
    ce32:	3301      	adds	r3, #1
    ce34:	00db      	lsls	r3, r3, #3
    ce36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ce38:	429a      	cmp	r2, r3
    ce3a:	f4ff af75 	bcc.w	cd28 <FlexCAN_SetRxFifoFilter+0x102>
            }
            break;
    ce3e:	e0f2      	b.n	d026 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_C):
            /* Four partial 8-bit Standard IDs per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    ce40:	f000 feca 	bl	dbd8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    ce44:	9b03      	ldr	r3, [sp, #12]
    ce46:	681b      	ldr	r3, [r3, #0]
    ce48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    ce4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
            (base->MCR) =
    ce50:	9b03      	ldr	r3, [sp, #12]
    ce52:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_C)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    ce54:	f000 feec 	bl	dc30 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    ce58:	2300      	movs	r3, #0
    ce5a:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    ce5c:	2300      	movs	r3, #0
    ce5e:	930b      	str	r3, [sp, #44]	; 0x2c
    ce60:	e0cd      	b.n	cffe <FlexCAN_SetRxFifoFilter+0x3d8>
            {
                if (idFilterTable[j].isExtendedFrame)
    ce62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce64:	00db      	lsls	r3, r3, #3
    ce66:	9a01      	ldr	r2, [sp, #4]
    ce68:	4413      	add	r3, r2
    ce6a:	785b      	ldrb	r3, [r3, #1]
    ce6c:	2b00      	cmp	r3, #0
    ce6e:	d00e      	beq.n	ce8e <FlexCAN_SetRxFifoFilter+0x268>
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    ce70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce72:	00db      	lsls	r3, r3, #3
    ce74:	9a01      	ldr	r2, [sp, #4]
    ce76:	4413      	add	r3, r2
    ce78:	685b      	ldr	r3, [r3, #4]
    ce7a:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    ce7c:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    ce7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce80:	009b      	lsls	r3, r3, #2
    ce82:	9a06      	ldr	r2, [sp, #24]
    ce84:	4413      	add	r3, r2
    ce86:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ce88:	440a      	add	r2, r1
    ce8a:	601a      	str	r2, [r3, #0]
    ce8c:	e00d      	b.n	ceaa <FlexCAN_SetRxFifoFilter+0x284>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    ce8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce90:	00db      	lsls	r3, r3, #3
    ce92:	9a01      	ldr	r2, [sp, #4]
    ce94:	4413      	add	r3, r2
    ce96:	685b      	ldr	r3, [r3, #4]
    ce98:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    ce9a:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    ce9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce9e:	009b      	lsls	r3, r3, #2
    cea0:	9a06      	ldr	r2, [sp, #24]
    cea2:	4413      	add	r3, r2
    cea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cea6:	440a      	add	r2, r1
    cea8:	601a      	str	r2, [r3, #0]
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    ceaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ceac:	3301      	adds	r3, #1
    ceae:	00db      	lsls	r3, r3, #3
    ceb0:	9a01      	ldr	r2, [sp, #4]
    ceb2:	4413      	add	r3, r2
    ceb4:	785b      	ldrb	r3, [r3, #1]
    ceb6:	2b00      	cmp	r3, #0
    ceb8:	d017      	beq.n	ceea <FlexCAN_SetRxFifoFilter+0x2c4>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    ceba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cebc:	009b      	lsls	r3, r3, #2
    cebe:	9a06      	ldr	r2, [sp, #24]
    cec0:	4413      	add	r3, r2
    cec2:	6819      	ldr	r1, [r3, #0]
    cec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cec6:	3301      	adds	r3, #1
    cec8:	00db      	lsls	r3, r3, #3
    ceca:	9a01      	ldr	r2, [sp, #4]
    cecc:	4413      	add	r3, r2
    cece:	685b      	ldr	r3, [r3, #4]
    ced0:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    ced2:	041b      	lsls	r3, r3, #16
    ced4:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    ced8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ceda:	441a      	add	r2, r3
    cedc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cede:	009b      	lsls	r3, r3, #2
    cee0:	9806      	ldr	r0, [sp, #24]
    cee2:	4403      	add	r3, r0
    cee4:	430a      	orrs	r2, r1
    cee6:	601a      	str	r2, [r3, #0]
    cee8:	e016      	b.n	cf18 <FlexCAN_SetRxFifoFilter+0x2f2>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    ceea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ceec:	009b      	lsls	r3, r3, #2
    ceee:	9a06      	ldr	r2, [sp, #24]
    cef0:	4413      	add	r3, r2
    cef2:	6819      	ldr	r1, [r3, #0]
    cef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cef6:	3301      	adds	r3, #1
    cef8:	00db      	lsls	r3, r3, #3
    cefa:	9a01      	ldr	r2, [sp, #4]
    cefc:	4413      	add	r3, r2
    cefe:	685b      	ldr	r3, [r3, #4]
    cf00:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    cf02:	041b      	lsls	r3, r3, #16
    cf04:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    cf08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf0a:	441a      	add	r2, r3
    cf0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf0e:	009b      	lsls	r3, r3, #2
    cf10:	9806      	ldr	r0, [sp, #24]
    cf12:	4403      	add	r3, r0
    cf14:	430a      	orrs	r2, r1
    cf16:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 2U].isExtendedFrame)
    cf18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf1a:	3302      	adds	r3, #2
    cf1c:	00db      	lsls	r3, r3, #3
    cf1e:	9a01      	ldr	r2, [sp, #4]
    cf20:	4413      	add	r3, r2
    cf22:	785b      	ldrb	r3, [r3, #1]
    cf24:	2b00      	cmp	r3, #0
    cf26:	d01b      	beq.n	cf60 <FlexCAN_SetRxFifoFilter+0x33a>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cf28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf2a:	009b      	lsls	r3, r3, #2
    cf2c:	9a06      	ldr	r2, [sp, #24]
    cf2e:	4413      	add	r3, r2
    cf30:	6819      	ldr	r1, [r3, #0]
    cf32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf34:	3302      	adds	r3, #2
    cf36:	00db      	lsls	r3, r3, #3
    cf38:	9a01      	ldr	r2, [sp, #4]
    cf3a:	4413      	add	r3, r2
    cf3c:	685b      	ldr	r3, [r3, #4]
    cf3e:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    cf40:	021b      	lsls	r3, r3, #8
    cf42:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cf44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf46:	441a      	add	r2, r3
    cf48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf4a:	009b      	lsls	r3, r3, #2
    cf4c:	9806      	ldr	r0, [sp, #24]
    cf4e:	4403      	add	r3, r0
    cf50:	430a      	orrs	r2, r1
    cf52:	601a      	str	r2, [r3, #0]
    cf54:	e01a      	b.n	cf8c <FlexCAN_SetRxFifoFilter+0x366>
    cf56:	bf00      	nop
    cf58:	3ff80000 	.word	0x3ff80000
    cf5c:	3fff0000 	.word	0x3fff0000
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    cf60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf62:	009b      	lsls	r3, r3, #2
    cf64:	9a06      	ldr	r2, [sp, #24]
    cf66:	4413      	add	r3, r2
    cf68:	6819      	ldr	r1, [r3, #0]
    cf6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf6c:	3302      	adds	r3, #2
    cf6e:	00db      	lsls	r3, r3, #3
    cf70:	9a01      	ldr	r2, [sp, #4]
    cf72:	4413      	add	r3, r2
    cf74:	685b      	ldr	r3, [r3, #4]
    cf76:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    cf78:	021b      	lsls	r3, r3, #8
    cf7a:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    cf7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf7e:	441a      	add	r2, r3
    cf80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf82:	009b      	lsls	r3, r3, #2
    cf84:	9806      	ldr	r0, [sp, #24]
    cf86:	4403      	add	r3, r0
    cf88:	430a      	orrs	r2, r1
    cf8a:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 3U].isExtendedFrame)
    cf8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf8e:	3303      	adds	r3, #3
    cf90:	00db      	lsls	r3, r3, #3
    cf92:	9a01      	ldr	r2, [sp, #4]
    cf94:	4413      	add	r3, r2
    cf96:	785b      	ldrb	r3, [r3, #1]
    cf98:	2b00      	cmp	r3, #0
    cf9a:	d015      	beq.n	cfc8 <FlexCAN_SetRxFifoFilter+0x3a2>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cf9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf9e:	009b      	lsls	r3, r3, #2
    cfa0:	9a06      	ldr	r2, [sp, #24]
    cfa2:	4413      	add	r3, r2
    cfa4:	6819      	ldr	r1, [r3, #0]
    cfa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cfa8:	3303      	adds	r3, #3
    cfaa:	00db      	lsls	r3, r3, #3
    cfac:	9a01      	ldr	r2, [sp, #4]
    cfae:	4413      	add	r3, r2
    cfb0:	685b      	ldr	r3, [r3, #4]
    cfb2:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    cfb4:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cfb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cfb8:	441a      	add	r2, r3
    cfba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cfbc:	009b      	lsls	r3, r3, #2
    cfbe:	9806      	ldr	r0, [sp, #24]
    cfc0:	4403      	add	r3, r0
    cfc2:	430a      	orrs	r2, r1
    cfc4:	601a      	str	r2, [r3, #0]
    cfc6:	e014      	b.n	cff2 <FlexCAN_SetRxFifoFilter+0x3cc>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 +
    cfc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cfca:	009b      	lsls	r3, r3, #2
    cfcc:	9a06      	ldr	r2, [sp, #24]
    cfce:	4413      	add	r3, r2
    cfd0:	6819      	ldr	r1, [r3, #0]
                                      (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    cfd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cfd4:	3303      	adds	r3, #3
    cfd6:	00db      	lsls	r3, r3, #3
    cfd8:	9a01      	ldr	r2, [sp, #4]
    cfda:	4413      	add	r3, r2
    cfdc:	685b      	ldr	r3, [r3, #4]
    cfde:	08db      	lsrs	r3, r3, #3
                                        FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                       ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    cfe0:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 +
    cfe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cfe4:	441a      	add	r2, r3
    cfe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cfe8:	009b      	lsls	r3, r3, #2
    cfea:	9806      	ldr	r0, [sp, #24]
    cfec:	4403      	add	r3, r0
    cfee:	430a      	orrs	r2, r1
    cff0:	601a      	str	r2, [r3, #0]
                                      );
                }

                j = j + 4U;
    cff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cff4:	3304      	adds	r3, #4
    cff6:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    cff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cffa:	3301      	adds	r3, #1
    cffc:	930b      	str	r3, [sp, #44]	; 0x2c
    cffe:	9b05      	ldr	r3, [sp, #20]
    d000:	3301      	adds	r3, #1
    d002:	00db      	lsls	r3, r3, #3
    d004:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d006:	429a      	cmp	r2, r3
    d008:	f4ff af2b 	bcc.w	ce62 <FlexCAN_SetRxFifoFilter+0x23c>
            }
            break;
    d00c:	e00b      	b.n	d026 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_D):
            /* All frames rejected.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    d00e:	f000 fde3 	bl	dbd8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    d012:	9b03      	ldr	r3, [sp, #12]
    d014:	681b      	ldr	r3, [r3, #0]
    d016:	f443 7240 	orr.w	r2, r3, #768	; 0x300
            (base->MCR) =
    d01a:	9b03      	ldr	r3, [sp, #12]
    d01c:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_D)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    d01e:	f000 fe07 	bl	dc30 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            break;
    d022:	e000      	b.n	d026 <FlexCAN_SetRxFifoFilter+0x400>
        default:
            /* Should not get here */
            break;
    d024:	bf00      	nop
    }
}
    d026:	bf00      	nop
    d028:	b00d      	add	sp, #52	; 0x34
    d02a:	f85d fb04 	ldr.w	pc, [sp], #4

0000d02e <FlexCAN_ReadRxFifo>:
 * Description   : Read Rx FIFO data.
 * This function will copy MB[0] data field into user's buffer.
 *
 *END**************************************************************************/
void FlexCAN_ReadRxFifo(const FLEXCAN_Type * base, Flexcan_Ip_MsgBuffType * rxFifo)
{
    d02e:	b500      	push	{lr}
    d030:	b08b      	sub	sp, #44	; 0x2c
    d032:	9001      	str	r0, [sp, #4]
    d034:	9100      	str	r1, [sp, #0]
    uint32 x;
    uint8 Index;
    const uint8 * p;
    #endif

    volatile const uint32 * flexcan_mb = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    d036:	9b01      	ldr	r3, [sp, #4]
    d038:	3380      	adds	r3, #128	; 0x80
    d03a:	9307      	str	r3, [sp, #28]
    volatile const uint32 * flexcan_mb_id = &flexcan_mb[1];
    d03c:	9b07      	ldr	r3, [sp, #28]
    d03e:	3304      	adds	r3, #4
    d040:	9306      	str	r3, [sp, #24]
    volatile const uint32 * flexcan_mb_data_32 = &flexcan_mb[2];
    d042:	9b07      	ldr	r3, [sp, #28]
    d044:	3308      	adds	r3, #8
    d046:	9305      	str	r3, [sp, #20]
    uint32 * msgData_32 = NULL_PTR;
    d048:	2300      	movs	r3, #0
    d04a:	9304      	str	r3, [sp, #16]
    uint8 flexcan_mb_dlc_value = (uint8)(((*flexcan_mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    d04c:	9b07      	ldr	r3, [sp, #28]
    d04e:	681b      	ldr	r3, [r3, #0]
    d050:	0c1b      	lsrs	r3, r3, #16
    d052:	b2db      	uxtb	r3, r3
    d054:	f003 030f 	and.w	r3, r3, #15
    d058:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 can_real_payload = FlexCAN_ComputePayloadSize(flexcan_mb_dlc_value);
    d05c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d060:	4618      	mov	r0, r3
    d062:	f7fe fe6c 	bl	bd3e <FlexCAN_ComputePayloadSize>
    d066:	4603      	mov	r3, r0
    d068:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(rxFifo != NULL_PTR);
    #endif
    msgData_32 = (uint32 *)(rxFifo->data);
    d06c:	9b00      	ldr	r3, [sp, #0]
    d06e:	3308      	adds	r3, #8
    d070:	9304      	str	r3, [sp, #16]
       Check if the length of received data packet bigger than the maximum length accepted,
       then processing flow shall continue with the maximum length defined by configuration.
       Legacy FIFO just support in normal mode.
    */
    /* no need to check if FD enabled or not because this function just is invoked when legacy fifo enabled only ! */
    if (can_real_payload > 8U)
    d072:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    d076:	2b08      	cmp	r3, #8
    d078:	d902      	bls.n	d080 <FlexCAN_ReadRxFifo+0x52>
    {
        can_real_payload = 8U;
    d07a:	2308      	movs	r3, #8
    d07c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }

    rxFifo->dataLen = can_real_payload;
    d080:	9b00      	ldr	r3, [sp, #0]
    d082:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    d086:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    rxFifo->cs = *flexcan_mb;
    d08a:	9b07      	ldr	r3, [sp, #28]
    d08c:	681a      	ldr	r2, [r3, #0]
    d08e:	9b00      	ldr	r3, [sp, #0]
    d090:	601a      	str	r2, [r3, #0]
    if ((rxFifo->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    d092:	9b00      	ldr	r3, [sp, #0]
    d094:	681b      	ldr	r3, [r3, #0]
    d096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    d09a:	2b00      	cmp	r3, #0
    d09c:	d004      	beq.n	d0a8 <FlexCAN_ReadRxFifo+0x7a>
    {
        rxFifo->msgId = *flexcan_mb_id;
    d09e:	9b06      	ldr	r3, [sp, #24]
    d0a0:	681a      	ldr	r2, [r3, #0]
    d0a2:	9b00      	ldr	r3, [sp, #0]
    d0a4:	605a      	str	r2, [r3, #4]
    d0a6:	e004      	b.n	d0b2 <FlexCAN_ReadRxFifo+0x84>
    }
    else
    {
        rxFifo->msgId = (*flexcan_mb_id) >> FLEXCAN_IP_ID_STD_SHIFT;
    d0a8:	9b06      	ldr	r3, [sp, #24]
    d0aa:	681b      	ldr	r3, [r3, #0]
    d0ac:	0c9a      	lsrs	r2, r3, #18
    d0ae:	9b00      	ldr	r3, [sp, #0]
    d0b0:	605a      	str	r2, [r3, #4]
    }
    /* Extract the IDHIT */
    rxFifo->id_hit = (uint8)base->RXFIR;
    d0b2:	9b01      	ldr	r3, [sp, #4]
    d0b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    d0b6:	b2da      	uxtb	r2, r3
    d0b8:	9b00      	ldr	r3, [sp, #0]
    d0ba:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    /* Extract the Time Stamp */
    rxFifo->time_stamp = (uint32)((rxFifo->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    d0be:	9b00      	ldr	r3, [sp, #0]
    d0c0:	681b      	ldr	r3, [r3, #0]
    d0c2:	b29a      	uxth	r2, r3
    d0c4:	9b00      	ldr	r3, [sp, #0]
    d0c6:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, msgData_32[DataByte >> 2U]);
        }
    }
#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
      /* Copy MB[0] data field into user's buffer */
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    d0c8:	2300      	movs	r3, #0
    d0ca:	9309      	str	r3, [sp, #36]	; 0x24
    d0cc:	e01f      	b.n	d10e <FlexCAN_ReadRxFifo+0xe0>
    {
        MbWord = flexcan_mb_data_32[DataByte >> 2U];
    d0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d0d0:	089b      	lsrs	r3, r3, #2
    d0d2:	009b      	lsls	r3, r3, #2
    d0d4:	9a05      	ldr	r2, [sp, #20]
    d0d6:	4413      	add	r3, r2
    d0d8:	681b      	ldr	r3, [r3, #0]
    d0da:	9302      	str	r3, [sp, #8]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (msgData_32[DataByte >> 2U]));
    d0dc:	9b02      	ldr	r3, [sp, #8]
    d0de:	0e1a      	lsrs	r2, r3, #24
    d0e0:	9b02      	ldr	r3, [sp, #8]
    d0e2:	0a1b      	lsrs	r3, r3, #8
    d0e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    d0e8:	431a      	orrs	r2, r3
    d0ea:	9b02      	ldr	r3, [sp, #8]
    d0ec:	021b      	lsls	r3, r3, #8
    d0ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    d0f2:	ea42 0103 	orr.w	r1, r2, r3
    d0f6:	9b02      	ldr	r3, [sp, #8]
    d0f8:	061a      	lsls	r2, r3, #24
    d0fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d0fc:	089b      	lsrs	r3, r3, #2
    d0fe:	009b      	lsls	r3, r3, #2
    d100:	9804      	ldr	r0, [sp, #16]
    d102:	4403      	add	r3, r0
    d104:	430a      	orrs	r2, r1
    d106:	601a      	str	r2, [r3, #0]
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    d108:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d10a:	3304      	adds	r3, #4
    d10c:	9309      	str	r3, [sp, #36]	; 0x24
    d10e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    d112:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d114:	429a      	cmp	r2, r3
    d116:	d3da      	bcc.n	d0ce <FlexCAN_ReadRxFifo+0xa0>
    }
#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
}
    d118:	bf00      	nop
    d11a:	bf00      	nop
    d11c:	b00b      	add	sp, #44	; 0x2c
    d11e:	f85d fb04 	ldr.w	pc, [sp], #4

0000d122 <FlexCAN_IsMbOutOfRange>:
    const FLEXCAN_Type * pBase,
    uint8 u8MbIndex,
    boolean bIsLegacyFifoEn,
    uint32 u32MaxMbNum
)
{
    d122:	b088      	sub	sp, #32
    d124:	9003      	str	r0, [sp, #12]
    d126:	9301      	str	r3, [sp, #4]
    d128:	460b      	mov	r3, r1
    d12a:	f88d 300b 	strb.w	r3, [sp, #11]
    d12e:	4613      	mov	r3, r2
    d130:	f88d 300a 	strb.w	r3, [sp, #10]
    boolean ReturnValue = FALSE;
    d134:	2300      	movs	r3, #0
    d136:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32NumOfFiFoElement = 0U;
    d13a:	2300      	movs	r3, #0
    d13c:	9306      	str	r3, [sp, #24]
    uint32 u32NumOfMbOccupiedByFiFo = 0U;
    d13e:	2300      	movs	r3, #0
    d140:	9305      	str	r3, [sp, #20]

    if (u8MbIndex >= (uint8)u32MaxMbNum)
    d142:	9b01      	ldr	r3, [sp, #4]
    d144:	b2db      	uxtb	r3, r3
    d146:	f89d 200b 	ldrb.w	r2, [sp, #11]
    d14a:	429a      	cmp	r2, r3
    d14c:	d303      	bcc.n	d156 <FlexCAN_IsMbOutOfRange+0x34>
    {
       ReturnValue = TRUE;
    d14e:	2301      	movs	r3, #1
    d150:	f88d 301f 	strb.w	r3, [sp, #31]
    d154:	e01b      	b.n	d18e <FlexCAN_IsMbOutOfRange+0x6c>
    }
    /* Check if RX FIFO is enabled*/
    else if (TRUE == bIsLegacyFifoEn)
    d156:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d15a:	2b00      	cmp	r3, #0
    d15c:	d014      	beq.n	d188 <FlexCAN_IsMbOutOfRange+0x66>
    {
        /* Get the number of RX FIFO Filters*/
        u32NumOfFiFoElement = (((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    d15e:	9b03      	ldr	r3, [sp, #12]
    d160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d162:	0e1b      	lsrs	r3, r3, #24
    d164:	f003 030f 	and.w	r3, r3, #15
    d168:	9306      	str	r3, [sp, #24]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        u32NumOfMbOccupiedByFiFo = 5U + ((((u32NumOfFiFoElement) + 1U) * 8U) / 4U);
    d16a:	9b06      	ldr	r3, [sp, #24]
    d16c:	3301      	adds	r3, #1
    d16e:	00db      	lsls	r3, r3, #3
    d170:	089b      	lsrs	r3, r3, #2
    d172:	3305      	adds	r3, #5
    d174:	9305      	str	r3, [sp, #20]
        if (u8MbIndex <= u32NumOfMbOccupiedByFiFo)
    d176:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d17a:	9a05      	ldr	r2, [sp, #20]
    d17c:	429a      	cmp	r2, r3
    d17e:	d306      	bcc.n	d18e <FlexCAN_IsMbOutOfRange+0x6c>
        {
            ReturnValue = TRUE;
    d180:	2301      	movs	r3, #1
    d182:	f88d 301f 	strb.w	r3, [sp, #31]
    d186:	e002      	b.n	d18e <FlexCAN_IsMbOutOfRange+0x6c>
        }
    }
    else
    {
        ReturnValue = FALSE;
    d188:	2300      	movs	r3, #0
    d18a:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    return ReturnValue;
    d18e:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    d192:	4618      	mov	r0, r3
    d194:	b008      	add	sp, #32
    d196:	4770      	bx	lr

0000d198 <FlexCAN_ConfigCtrlOptions>:
 * Description   : configure controller depending on options
 * note: should be call after FD configuration.
 *
 *END**************************************************************************/
void FlexCAN_ConfigCtrlOptions(FLEXCAN_Type * pBase, uint32 u32Options)
{
    d198:	b500      	push	{lr}
    d19a:	b083      	sub	sp, #12
    d19c:	9001      	str	r0, [sp, #4]
    d19e:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON)
    /* If the FD feature is enabled, in order to be ISO-compliant. */
    if ((u32Options & FLEXCAN_IP_ISO_U32) != 0U)
    d1a0:	9b00      	ldr	r3, [sp, #0]
    d1a2:	f003 0320 	and.w	r3, r3, #32
    d1a6:	2b00      	cmp	r3, #0
    d1a8:	d004      	beq.n	d1b4 <FlexCAN_ConfigCtrlOptions+0x1c>
    {
        FlexCAN_SetIsoCan(pBase, TRUE);
    d1aa:	2101      	movs	r1, #1
    d1ac:	9801      	ldr	r0, [sp, #4]
    d1ae:	f7fe fcd8 	bl	bb62 <FlexCAN_SetIsoCan>
    d1b2:	e003      	b.n	d1bc <FlexCAN_ConfigCtrlOptions+0x24>
    }
    else
    {
        /* This maybe don't have sense if the Deinit returns the state of registers at init values */
        FlexCAN_SetIsoCan(pBase, FALSE);
    d1b4:	2100      	movs	r1, #0
    d1b6:	9801      	ldr	r0, [sp, #4]
    d1b8:	f7fe fcd3 	bl	bb62 <FlexCAN_SetIsoCan>
    }
#endif /*(FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON) */
    /* Set Entire Frame Arbitration Field Comparison. */
    if ((u32Options & FLEXCAN_IP_EACEN_U32) != 0U)
    d1bc:	9b00      	ldr	r3, [sp, #0]
    d1be:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d1c2:	2b00      	cmp	r3, #0
    d1c4:	d004      	beq.n	d1d0 <FlexCAN_ConfigCtrlOptions+0x38>
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, TRUE);
    d1c6:	2101      	movs	r1, #1
    d1c8:	9801      	ldr	r0, [sp, #4]
    d1ca:	f7fe fce1 	bl	bb90 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    d1ce:	e003      	b.n	d1d8 <FlexCAN_ConfigCtrlOptions+0x40>
    }
    else
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, FALSE);
    d1d0:	2100      	movs	r1, #0
    d1d2:	9801      	ldr	r0, [sp, #4]
    d1d4:	f7fe fcdc 	bl	bb90 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    }
#if (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)
    /* Set protocol Exception */
    if ((u32Options & FLEXCAN_IP_PROTOCOL_EXCEPTION_U32) != 0U)
    d1d8:	9b00      	ldr	r3, [sp, #0]
    d1da:	f003 0308 	and.w	r3, r3, #8
    d1de:	2b00      	cmp	r3, #0
    d1e0:	d004      	beq.n	d1ec <FlexCAN_ConfigCtrlOptions+0x54>
    {
        FlexCAN_SetProtocolException(pBase, TRUE);
    d1e2:	2101      	movs	r1, #1
    d1e4:	9801      	ldr	r0, [sp, #4]
    d1e6:	f7fe fcea 	bl	bbbe <FlexCAN_SetProtocolException>
    d1ea:	e003      	b.n	d1f4 <FlexCAN_ConfigCtrlOptions+0x5c>
    }
    else
    {
        FlexCAN_SetProtocolException(pBase, FALSE);
    d1ec:	2100      	movs	r1, #0
    d1ee:	9801      	ldr	r0, [sp, #4]
    d1f0:	f7fe fce5 	bl	bbbe <FlexCAN_SetProtocolException>
    }
#endif /* Endif  (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)  */
    /* Set CAN Bit Sampling */
    if (((u32Options & FLEXCAN_IP_THREE_SAMPLES_U32) != 0U) && (0U == (pBase->MCR & FLEXCAN_MCR_FDEN_MASK)))
    d1f4:	9b00      	ldr	r3, [sp, #0]
    d1f6:	f003 0302 	and.w	r3, r3, #2
    d1fa:	2b00      	cmp	r3, #0
    d1fc:	d00a      	beq.n	d214 <FlexCAN_ConfigCtrlOptions+0x7c>
    d1fe:	9b01      	ldr	r3, [sp, #4]
    d200:	681b      	ldr	r3, [r3, #0]
    d202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    d206:	2b00      	cmp	r3, #0
    d208:	d104      	bne.n	d214 <FlexCAN_ConfigCtrlOptions+0x7c>
    {
        FlexCAN_CanBitSampling(pBase, TRUE);
    d20a:	2101      	movs	r1, #1
    d20c:	9801      	ldr	r0, [sp, #4]
    d20e:	f7fe fd31 	bl	bc74 <FlexCAN_CanBitSampling>
    d212:	e003      	b.n	d21c <FlexCAN_ConfigCtrlOptions+0x84>
    }
    else
    {
        FlexCAN_CanBitSampling(pBase, FALSE);
    d214:	2100      	movs	r1, #0
    d216:	9801      	ldr	r0, [sp, #4]
    d218:	f7fe fd2c 	bl	bc74 <FlexCAN_CanBitSampling>
    }

    /* Set AutoBusOff Recovery */
    if ((u32Options & FLEXCAN_IP_BUSOFF_RECOVERY_U32) != 0U)
    d21c:	9b00      	ldr	r3, [sp, #0]
    d21e:	f003 0304 	and.w	r3, r3, #4
    d222:	2b00      	cmp	r3, #0
    d224:	d004      	beq.n	d230 <FlexCAN_ConfigCtrlOptions+0x98>
    {
        FlexCAN_SetBusOffAutorecovery(pBase, TRUE);
    d226:	2101      	movs	r1, #1
    d228:	9801      	ldr	r0, [sp, #4]
    d22a:	f7fe fcf6 	bl	bc1a <FlexCAN_SetBusOffAutorecovery>
    d22e:	e003      	b.n	d238 <FlexCAN_ConfigCtrlOptions+0xa0>
    }
    else
    {
        FlexCAN_SetBusOffAutorecovery(pBase, FALSE);
    d230:	2100      	movs	r1, #0
    d232:	9801      	ldr	r0, [sp, #4]
    d234:	f7fe fcf1 	bl	bc1a <FlexCAN_SetBusOffAutorecovery>
    }
    /* Set Remote Request Store for received of Remote Request Frames */
    if ((u32Options & FLEXCAN_IP_REM_STORE_U32) != 0U)
    d238:	9b00      	ldr	r3, [sp, #0]
    d23a:	f003 0301 	and.w	r3, r3, #1
    d23e:	2b00      	cmp	r3, #0
    d240:	d004      	beq.n	d24c <FlexCAN_ConfigCtrlOptions+0xb4>
    {
        FlexCAN_SetRemoteReqStore(pBase, TRUE);
    d242:	2101      	movs	r1, #1
    d244:	9801      	ldr	r0, [sp, #4]
    d246:	f7fe fcd1 	bl	bbec <FlexCAN_SetRemoteReqStore>
    d24a:	e003      	b.n	d254 <FlexCAN_ConfigCtrlOptions+0xbc>
    }
    else
    {
        FlexCAN_SetRemoteReqStore(pBase, FALSE);
    d24c:	2100      	movs	r1, #0
    d24e:	9801      	ldr	r0, [sp, #4]
    d250:	f7fe fccc 	bl	bbec <FlexCAN_SetRemoteReqStore>
    }
#if (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)
    /* Set Edge Filter */
    if ((u32Options & FLEXCAN_IP_EDGE_FILTER_U32) != 0U)
    d254:	9b00      	ldr	r3, [sp, #0]
    d256:	f003 0310 	and.w	r3, r3, #16
    d25a:	2b00      	cmp	r3, #0
    d25c:	d004      	beq.n	d268 <FlexCAN_ConfigCtrlOptions+0xd0>
    {
        FlexCAN_SetEdgeFilter(pBase, TRUE);
    d25e:	2101      	movs	r1, #1
    d260:	9801      	ldr	r0, [sp, #4]
    d262:	f7fe fcf0 	bl	bc46 <FlexCAN_SetEdgeFilter>
    else
    {
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    }
#endif /* End of (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)  */
}
    d266:	e003      	b.n	d270 <FlexCAN_ConfigCtrlOptions+0xd8>
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    d268:	2100      	movs	r1, #0
    d26a:	9801      	ldr	r0, [sp, #4]
    d26c:	f7fe fceb 	bl	bc46 <FlexCAN_SetEdgeFilter>
}
    d270:	bf00      	nop
    d272:	b003      	add	sp, #12
    d274:	f85d fb04 	ldr.w	pc, [sp], #4

0000d278 <FlexCAN_ResetImaskBuff>:
 * Function Name : FlexCAN_ResetImaskBuff (uses in FlexCAN_Ip_Init function only)
 * Description   : Reset Imask Buffers.
 *
 *END**************************************************************************/
void FlexCAN_ResetImaskBuff(uint8 Instance)
{
    d278:	b084      	sub	sp, #16
    d27a:	4603      	mov	r3, r0
    d27c:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ImaskCnt = 0U;
    d280:	2300      	movs	r3, #0
    d282:	f88d 300f 	strb.w	r3, [sp, #15]

    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    d286:	2300      	movs	r3, #0
    d288:	f88d 300f 	strb.w	r3, [sp, #15]
    d28c:	e00d      	b.n	d2aa <FlexCAN_ResetImaskBuff+0x32>
    {
        FlexCAN_Ip_au32ImaskBuff[Instance][ImaskCnt] = 0U;
    d28e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d292:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d296:	4909      	ldr	r1, [pc, #36]	; (d2bc <FlexCAN_ResetImaskBuff+0x44>)
    d298:	4413      	add	r3, r2
    d29a:	2200      	movs	r2, #0
    d29c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    d2a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d2a4:	3301      	adds	r3, #1
    d2a6:	f88d 300f 	strb.w	r3, [sp, #15]
    d2aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d2ae:	2b00      	cmp	r3, #0
    d2b0:	d0ed      	beq.n	d28e <FlexCAN_ResetImaskBuff+0x16>
    }
}
    d2b2:	bf00      	nop
    d2b4:	bf00      	nop
    d2b6:	b004      	add	sp, #16
    d2b8:	4770      	bx	lr
    d2ba:	bf00      	nop
    d2bc:	1fff8fcc 	.word	0x1fff8fcc

0000d2c0 <CAN0_ORED_IRQHandler>:

#else

/* Implementation of CAN0 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN0_ORED_IRQHandler)
{
    d2c0:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(0U);
    d2c2:	2000      	movs	r0, #0
    d2c4:	f7fd fb2a 	bl	a91c <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    d2c8:	f3bf 8f4f 	dsb	sy
}
    d2cc:	bf00      	nop
    d2ce:	bd08      	pop	{r3, pc}

0000d2d0 <CAN0_Error_IRQHandler>:

/* Implementation of CAN0 handler named in startup code for processing of Errors reporting. */
ISR(CAN0_Error_IRQHandler)
{
    d2d0:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(0U);
    d2d2:	2000      	movs	r0, #0
    d2d4:	f7fd fac2 	bl	a85c <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    d2d8:	f3bf 8f4f 	dsb	sy
}
    d2dc:	bf00      	nop
    d2de:	bd08      	pop	{r3, pc}

0000d2e0 <CAN0_ORED_0_15_MB_IRQHandler>:
}
#endif
/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN0_ORED_0_15_MB_IRQHandler)
{
    d2e0:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 0U, 15U);
    d2e2:	220f      	movs	r2, #15
    d2e4:	2100      	movs	r1, #0
    d2e6:	2000      	movs	r0, #0
    d2e8:	f7fd f9dc 	bl	a6a4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    d2ec:	f3bf 8f4f 	dsb	sy
}
    d2f0:	bf00      	nop
    d2f2:	bd08      	pop	{r3, pc}

0000d2f4 <CAN0_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN0_ORED_16_31_MB_IRQHandler)
{
    d2f4:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 16U, 31U);
    d2f6:	221f      	movs	r2, #31
    d2f8:	2110      	movs	r1, #16
    d2fa:	2000      	movs	r0, #0
    d2fc:	f7fd f9d2 	bl	a6a4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    d300:	f3bf 8f4f 	dsb	sy
}
    d304:	bf00      	nop
    d306:	bd08      	pop	{r3, pc}

0000d308 <CAN1_ORED_IRQHandler>:
#endif /* (defined(S32K142W) || defined(S32K144W) || defined(S32M243) || defined(S32M244)) */

#if (FLEXCAN_INSTANCE_COUNT > 1U)
/* Implementation of CAN1 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN1_ORED_IRQHandler)
{
    d308:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(1U);
    d30a:	2001      	movs	r0, #1
    d30c:	f7fd fb06 	bl	a91c <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    d310:	f3bf 8f4f 	dsb	sy
}
    d314:	bf00      	nop
    d316:	bd08      	pop	{r3, pc}

0000d318 <CAN1_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN1_Error_IRQHandler)
{
    d318:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(1U);
    d31a:	2001      	movs	r0, #1
    d31c:	f7fd fa9e 	bl	a85c <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    d320:	f3bf 8f4f 	dsb	sy
}
    d324:	bf00      	nop
    d326:	bd08      	pop	{r3, pc}

0000d328 <CAN1_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN1_ORED_0_15_MB_IRQHandler)
{
    d328:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 0U, 15U);
    d32a:	220f      	movs	r2, #15
    d32c:	2100      	movs	r1, #0
    d32e:	2001      	movs	r0, #1
    d330:	f7fd f9b8 	bl	a6a4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    d334:	f3bf 8f4f 	dsb	sy
}
    d338:	bf00      	nop
    d33a:	bd08      	pop	{r3, pc}

0000d33c <CAN1_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN1_ORED_16_31_MB_IRQHandler)
{
    d33c:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 16U, 31U);
    d33e:	221f      	movs	r2, #31
    d340:	2110      	movs	r1, #16
    d342:	2001      	movs	r0, #1
    d344:	f7fd f9ae 	bl	a6a4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    d348:	f3bf 8f4f 	dsb	sy
}
    d34c:	bf00      	nop
    d34e:	bd08      	pop	{r3, pc}

0000d350 <CAN2_ORED_IRQHandler>:
#endif /* (FLEXCAN_INSTANCE_COUNT > 1U) */

#if (FLEXCAN_INSTANCE_COUNT > 2U)
/* Implementation of CAN2 handler named in startup code for processing of Errors and Bus Off reporting. */
ISR(CAN2_ORED_IRQHandler)
{
    d350:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(2U);
    d352:	2002      	movs	r0, #2
    d354:	f7fd fae2 	bl	a91c <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    d358:	f3bf 8f4f 	dsb	sy
}
    d35c:	bf00      	nop
    d35e:	bd08      	pop	{r3, pc}

0000d360 <CAN2_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN2_Error_IRQHandler)
{
    d360:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(2U);
    d362:	2002      	movs	r0, #2
    d364:	f7fd fa7a 	bl	a85c <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    d368:	f3bf 8f4f 	dsb	sy
}
    d36c:	bf00      	nop
    d36e:	bd08      	pop	{r3, pc}

0000d370 <CAN2_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN2 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN2_ORED_0_15_MB_IRQHandler)
{
    d370:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(2U, 0U, 15U);
    d372:	220f      	movs	r2, #15
    d374:	2100      	movs	r1, #0
    d376:	2002      	movs	r0, #2
    d378:	f7fd f994 	bl	a6a4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    d37c:	f3bf 8f4f 	dsb	sy
}
    d380:	bf00      	nop
    d382:	bd08      	pop	{r3, pc}

0000d384 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    d384:	b500      	push	{lr}
    d386:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d388:	f7f3 ff50 	bl	122c <Sys_GetCoreID>
    d38c:	4603      	mov	r3, r0
    d38e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId])
    d390:	4a10      	ldr	r2, [pc, #64]	; (d3d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    d392:	9b01      	ldr	r3, [sp, #4]
    d394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d398:	2b00      	cmp	r3, #0
    d39a:	d10d      	bne.n	d3b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d39c:	f7f3 fc5a 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    d3a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d3a2:	9b00      	ldr	r3, [sp, #0]
    d3a4:	f003 0301 	and.w	r3, r3, #1
    d3a8:	2b00      	cmp	r3, #0
    d3aa:	d100      	bne.n	d3ae <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d3ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    d3ae:	490a      	ldr	r1, [pc, #40]	; (d3d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x54>)
    d3b0:	9b01      	ldr	r3, [sp, #4]
    d3b2:	9a00      	ldr	r2, [sp, #0]
    d3b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]++;
    d3b8:	4a06      	ldr	r2, [pc, #24]	; (d3d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    d3ba:	9b01      	ldr	r3, [sp, #4]
    d3bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3c0:	1c5a      	adds	r2, r3, #1
    d3c2:	4904      	ldr	r1, [pc, #16]	; (d3d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    d3c4:	9b01      	ldr	r3, [sp, #4]
    d3c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d3ca:	bf00      	nop
    d3cc:	b003      	add	sp, #12
    d3ce:	f85d fb04 	ldr.w	pc, [sp], #4
    d3d2:	bf00      	nop
    d3d4:	1fff8fdc 	.word	0x1fff8fdc
    d3d8:	1fff8fd8 	.word	0x1fff8fd8

0000d3dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    d3dc:	b500      	push	{lr}
    d3de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d3e0:	f7f3 ff24 	bl	122c <Sys_GetCoreID>
    d3e4:	4603      	mov	r3, r0
    d3e6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]--;
    d3e8:	4a0d      	ldr	r2, [pc, #52]	; (d420 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    d3ea:	9b01      	ldr	r3, [sp, #4]
    d3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3f0:	1e5a      	subs	r2, r3, #1
    d3f2:	490b      	ldr	r1, [pc, #44]	; (d420 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    d3f4:	9b01      	ldr	r3, [sp, #4]
    d3f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    d3fa:	4a0a      	ldr	r2, [pc, #40]	; (d424 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x48>)
    d3fc:	9b01      	ldr	r3, [sp, #4]
    d3fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d402:	f003 0301 	and.w	r3, r3, #1
    d406:	2b00      	cmp	r3, #0
    d408:	d106      	bne.n	d418 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    d40a:	4a05      	ldr	r2, [pc, #20]	; (d420 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    d40c:	9b01      	ldr	r3, [sp, #4]
    d40e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d412:	2b00      	cmp	r3, #0
    d414:	d100      	bne.n	d418 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d416:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d418:	bf00      	nop
    d41a:	b003      	add	sp, #12
    d41c:	f85d fb04 	ldr.w	pc, [sp], #4
    d420:	1fff8fdc 	.word	0x1fff8fdc
    d424:	1fff8fd8 	.word	0x1fff8fd8

0000d428 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    d428:	b500      	push	{lr}
    d42a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d42c:	f7f3 fefe 	bl	122c <Sys_GetCoreID>
    d430:	4603      	mov	r3, r0
    d432:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId])
    d434:	4a10      	ldr	r2, [pc, #64]	; (d478 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    d436:	9b01      	ldr	r3, [sp, #4]
    d438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d43c:	2b00      	cmp	r3, #0
    d43e:	d10d      	bne.n	d45c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d440:	f7f3 fc08 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    d444:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d446:	9b00      	ldr	r3, [sp, #0]
    d448:	f003 0301 	and.w	r3, r3, #1
    d44c:	2b00      	cmp	r3, #0
    d44e:	d100      	bne.n	d452 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d450:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    d452:	490a      	ldr	r1, [pc, #40]	; (d47c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x54>)
    d454:	9b01      	ldr	r3, [sp, #4]
    d456:	9a00      	ldr	r2, [sp, #0]
    d458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]++;
    d45c:	4a06      	ldr	r2, [pc, #24]	; (d478 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    d45e:	9b01      	ldr	r3, [sp, #4]
    d460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d464:	1c5a      	adds	r2, r3, #1
    d466:	4904      	ldr	r1, [pc, #16]	; (d478 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    d468:	9b01      	ldr	r3, [sp, #4]
    d46a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d46e:	bf00      	nop
    d470:	b003      	add	sp, #12
    d472:	f85d fb04 	ldr.w	pc, [sp], #4
    d476:	bf00      	nop
    d478:	1fff8fe4 	.word	0x1fff8fe4
    d47c:	1fff8fe0 	.word	0x1fff8fe0

0000d480 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    d480:	b500      	push	{lr}
    d482:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d484:	f7f3 fed2 	bl	122c <Sys_GetCoreID>
    d488:	4603      	mov	r3, r0
    d48a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]--;
    d48c:	4a0d      	ldr	r2, [pc, #52]	; (d4c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    d48e:	9b01      	ldr	r3, [sp, #4]
    d490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d494:	1e5a      	subs	r2, r3, #1
    d496:	490b      	ldr	r1, [pc, #44]	; (d4c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    d498:	9b01      	ldr	r3, [sp, #4]
    d49a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    d49e:	4a0a      	ldr	r2, [pc, #40]	; (d4c8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x48>)
    d4a0:	9b01      	ldr	r3, [sp, #4]
    d4a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4a6:	f003 0301 	and.w	r3, r3, #1
    d4aa:	2b00      	cmp	r3, #0
    d4ac:	d106      	bne.n	d4bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    d4ae:	4a05      	ldr	r2, [pc, #20]	; (d4c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    d4b0:	9b01      	ldr	r3, [sp, #4]
    d4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4b6:	2b00      	cmp	r3, #0
    d4b8:	d100      	bne.n	d4bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d4ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d4bc:	bf00      	nop
    d4be:	b003      	add	sp, #12
    d4c0:	f85d fb04 	ldr.w	pc, [sp], #4
    d4c4:	1fff8fe4 	.word	0x1fff8fe4
    d4c8:	1fff8fe0 	.word	0x1fff8fe0

0000d4cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    d4cc:	b500      	push	{lr}
    d4ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4d0:	f7f3 feac 	bl	122c <Sys_GetCoreID>
    d4d4:	4603      	mov	r3, r0
    d4d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId])
    d4d8:	4a10      	ldr	r2, [pc, #64]	; (d51c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    d4da:	9b01      	ldr	r3, [sp, #4]
    d4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4e0:	2b00      	cmp	r3, #0
    d4e2:	d10d      	bne.n	d500 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d4e4:	f7f3 fbb6 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    d4e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d4ea:	9b00      	ldr	r3, [sp, #0]
    d4ec:	f003 0301 	and.w	r3, r3, #1
    d4f0:	2b00      	cmp	r3, #0
    d4f2:	d100      	bne.n	d4f6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d4f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    d4f6:	490a      	ldr	r1, [pc, #40]	; (d520 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x54>)
    d4f8:	9b01      	ldr	r3, [sp, #4]
    d4fa:	9a00      	ldr	r2, [sp, #0]
    d4fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]++;
    d500:	4a06      	ldr	r2, [pc, #24]	; (d51c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    d502:	9b01      	ldr	r3, [sp, #4]
    d504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d508:	1c5a      	adds	r2, r3, #1
    d50a:	4904      	ldr	r1, [pc, #16]	; (d51c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    d50c:	9b01      	ldr	r3, [sp, #4]
    d50e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d512:	bf00      	nop
    d514:	b003      	add	sp, #12
    d516:	f85d fb04 	ldr.w	pc, [sp], #4
    d51a:	bf00      	nop
    d51c:	1fff8fec 	.word	0x1fff8fec
    d520:	1fff8fe8 	.word	0x1fff8fe8

0000d524 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    d524:	b500      	push	{lr}
    d526:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d528:	f7f3 fe80 	bl	122c <Sys_GetCoreID>
    d52c:	4603      	mov	r3, r0
    d52e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]--;
    d530:	4a0d      	ldr	r2, [pc, #52]	; (d568 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    d532:	9b01      	ldr	r3, [sp, #4]
    d534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d538:	1e5a      	subs	r2, r3, #1
    d53a:	490b      	ldr	r1, [pc, #44]	; (d568 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    d53c:	9b01      	ldr	r3, [sp, #4]
    d53e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    d542:	4a0a      	ldr	r2, [pc, #40]	; (d56c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x48>)
    d544:	9b01      	ldr	r3, [sp, #4]
    d546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d54a:	f003 0301 	and.w	r3, r3, #1
    d54e:	2b00      	cmp	r3, #0
    d550:	d106      	bne.n	d560 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    d552:	4a05      	ldr	r2, [pc, #20]	; (d568 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    d554:	9b01      	ldr	r3, [sp, #4]
    d556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d55a:	2b00      	cmp	r3, #0
    d55c:	d100      	bne.n	d560 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d55e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d560:	bf00      	nop
    d562:	b003      	add	sp, #12
    d564:	f85d fb04 	ldr.w	pc, [sp], #4
    d568:	1fff8fec 	.word	0x1fff8fec
    d56c:	1fff8fe8 	.word	0x1fff8fe8

0000d570 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    d570:	b500      	push	{lr}
    d572:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d574:	f7f3 fe5a 	bl	122c <Sys_GetCoreID>
    d578:	4603      	mov	r3, r0
    d57a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId])
    d57c:	4a10      	ldr	r2, [pc, #64]	; (d5c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    d57e:	9b01      	ldr	r3, [sp, #4]
    d580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d584:	2b00      	cmp	r3, #0
    d586:	d10d      	bne.n	d5a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d588:	f7f3 fb64 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    d58c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d58e:	9b00      	ldr	r3, [sp, #0]
    d590:	f003 0301 	and.w	r3, r3, #1
    d594:	2b00      	cmp	r3, #0
    d596:	d100      	bne.n	d59a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d598:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    d59a:	490a      	ldr	r1, [pc, #40]	; (d5c4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x54>)
    d59c:	9b01      	ldr	r3, [sp, #4]
    d59e:	9a00      	ldr	r2, [sp, #0]
    d5a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]++;
    d5a4:	4a06      	ldr	r2, [pc, #24]	; (d5c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    d5a6:	9b01      	ldr	r3, [sp, #4]
    d5a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5ac:	1c5a      	adds	r2, r3, #1
    d5ae:	4904      	ldr	r1, [pc, #16]	; (d5c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    d5b0:	9b01      	ldr	r3, [sp, #4]
    d5b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d5b6:	bf00      	nop
    d5b8:	b003      	add	sp, #12
    d5ba:	f85d fb04 	ldr.w	pc, [sp], #4
    d5be:	bf00      	nop
    d5c0:	1fff8ff4 	.word	0x1fff8ff4
    d5c4:	1fff8ff0 	.word	0x1fff8ff0

0000d5c8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    d5c8:	b500      	push	{lr}
    d5ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5cc:	f7f3 fe2e 	bl	122c <Sys_GetCoreID>
    d5d0:	4603      	mov	r3, r0
    d5d2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]--;
    d5d4:	4a0d      	ldr	r2, [pc, #52]	; (d60c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    d5d6:	9b01      	ldr	r3, [sp, #4]
    d5d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5dc:	1e5a      	subs	r2, r3, #1
    d5de:	490b      	ldr	r1, [pc, #44]	; (d60c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    d5e0:	9b01      	ldr	r3, [sp, #4]
    d5e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    d5e6:	4a0a      	ldr	r2, [pc, #40]	; (d610 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x48>)
    d5e8:	9b01      	ldr	r3, [sp, #4]
    d5ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5ee:	f003 0301 	and.w	r3, r3, #1
    d5f2:	2b00      	cmp	r3, #0
    d5f4:	d106      	bne.n	d604 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    d5f6:	4a05      	ldr	r2, [pc, #20]	; (d60c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    d5f8:	9b01      	ldr	r3, [sp, #4]
    d5fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5fe:	2b00      	cmp	r3, #0
    d600:	d100      	bne.n	d604 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d602:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d604:	bf00      	nop
    d606:	b003      	add	sp, #12
    d608:	f85d fb04 	ldr.w	pc, [sp], #4
    d60c:	1fff8ff4 	.word	0x1fff8ff4
    d610:	1fff8ff0 	.word	0x1fff8ff0

0000d614 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    d614:	b500      	push	{lr}
    d616:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d618:	f7f3 fe08 	bl	122c <Sys_GetCoreID>
    d61c:	4603      	mov	r3, r0
    d61e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId])
    d620:	4a10      	ldr	r2, [pc, #64]	; (d664 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    d622:	9b01      	ldr	r3, [sp, #4]
    d624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d628:	2b00      	cmp	r3, #0
    d62a:	d10d      	bne.n	d648 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d62c:	f7f3 fb12 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    d630:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d632:	9b00      	ldr	r3, [sp, #0]
    d634:	f003 0301 	and.w	r3, r3, #1
    d638:	2b00      	cmp	r3, #0
    d63a:	d100      	bne.n	d63e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d63c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    d63e:	490a      	ldr	r1, [pc, #40]	; (d668 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x54>)
    d640:	9b01      	ldr	r3, [sp, #4]
    d642:	9a00      	ldr	r2, [sp, #0]
    d644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]++;
    d648:	4a06      	ldr	r2, [pc, #24]	; (d664 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    d64a:	9b01      	ldr	r3, [sp, #4]
    d64c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d650:	1c5a      	adds	r2, r3, #1
    d652:	4904      	ldr	r1, [pc, #16]	; (d664 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    d654:	9b01      	ldr	r3, [sp, #4]
    d656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d65a:	bf00      	nop
    d65c:	b003      	add	sp, #12
    d65e:	f85d fb04 	ldr.w	pc, [sp], #4
    d662:	bf00      	nop
    d664:	1fff8ffc 	.word	0x1fff8ffc
    d668:	1fff8ff8 	.word	0x1fff8ff8

0000d66c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    d66c:	b500      	push	{lr}
    d66e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d670:	f7f3 fddc 	bl	122c <Sys_GetCoreID>
    d674:	4603      	mov	r3, r0
    d676:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]--;
    d678:	4a0d      	ldr	r2, [pc, #52]	; (d6b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    d67a:	9b01      	ldr	r3, [sp, #4]
    d67c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d680:	1e5a      	subs	r2, r3, #1
    d682:	490b      	ldr	r1, [pc, #44]	; (d6b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    d684:	9b01      	ldr	r3, [sp, #4]
    d686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    d68a:	4a0a      	ldr	r2, [pc, #40]	; (d6b4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x48>)
    d68c:	9b01      	ldr	r3, [sp, #4]
    d68e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d692:	f003 0301 	and.w	r3, r3, #1
    d696:	2b00      	cmp	r3, #0
    d698:	d106      	bne.n	d6a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    d69a:	4a05      	ldr	r2, [pc, #20]	; (d6b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    d69c:	9b01      	ldr	r3, [sp, #4]
    d69e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6a2:	2b00      	cmp	r3, #0
    d6a4:	d100      	bne.n	d6a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d6a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d6a8:	bf00      	nop
    d6aa:	b003      	add	sp, #12
    d6ac:	f85d fb04 	ldr.w	pc, [sp], #4
    d6b0:	1fff8ffc 	.word	0x1fff8ffc
    d6b4:	1fff8ff8 	.word	0x1fff8ff8

0000d6b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    d6b8:	b500      	push	{lr}
    d6ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6bc:	f7f3 fdb6 	bl	122c <Sys_GetCoreID>
    d6c0:	4603      	mov	r3, r0
    d6c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId])
    d6c4:	4a10      	ldr	r2, [pc, #64]	; (d708 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    d6c6:	9b01      	ldr	r3, [sp, #4]
    d6c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6cc:	2b00      	cmp	r3, #0
    d6ce:	d10d      	bne.n	d6ec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d6d0:	f7f3 fac0 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    d6d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d6d6:	9b00      	ldr	r3, [sp, #0]
    d6d8:	f003 0301 	and.w	r3, r3, #1
    d6dc:	2b00      	cmp	r3, #0
    d6de:	d100      	bne.n	d6e2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d6e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    d6e2:	490a      	ldr	r1, [pc, #40]	; (d70c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x54>)
    d6e4:	9b01      	ldr	r3, [sp, #4]
    d6e6:	9a00      	ldr	r2, [sp, #0]
    d6e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]++;
    d6ec:	4a06      	ldr	r2, [pc, #24]	; (d708 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    d6ee:	9b01      	ldr	r3, [sp, #4]
    d6f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6f4:	1c5a      	adds	r2, r3, #1
    d6f6:	4904      	ldr	r1, [pc, #16]	; (d708 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    d6f8:	9b01      	ldr	r3, [sp, #4]
    d6fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d6fe:	bf00      	nop
    d700:	b003      	add	sp, #12
    d702:	f85d fb04 	ldr.w	pc, [sp], #4
    d706:	bf00      	nop
    d708:	1fff9004 	.word	0x1fff9004
    d70c:	1fff9000 	.word	0x1fff9000

0000d710 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    d710:	b500      	push	{lr}
    d712:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d714:	f7f3 fd8a 	bl	122c <Sys_GetCoreID>
    d718:	4603      	mov	r3, r0
    d71a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]--;
    d71c:	4a0d      	ldr	r2, [pc, #52]	; (d754 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    d71e:	9b01      	ldr	r3, [sp, #4]
    d720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d724:	1e5a      	subs	r2, r3, #1
    d726:	490b      	ldr	r1, [pc, #44]	; (d754 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    d728:	9b01      	ldr	r3, [sp, #4]
    d72a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    d72e:	4a0a      	ldr	r2, [pc, #40]	; (d758 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x48>)
    d730:	9b01      	ldr	r3, [sp, #4]
    d732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d736:	f003 0301 	and.w	r3, r3, #1
    d73a:	2b00      	cmp	r3, #0
    d73c:	d106      	bne.n	d74c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    d73e:	4a05      	ldr	r2, [pc, #20]	; (d754 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    d740:	9b01      	ldr	r3, [sp, #4]
    d742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d746:	2b00      	cmp	r3, #0
    d748:	d100      	bne.n	d74c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d74a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d74c:	bf00      	nop
    d74e:	b003      	add	sp, #12
    d750:	f85d fb04 	ldr.w	pc, [sp], #4
    d754:	1fff9004 	.word	0x1fff9004
    d758:	1fff9000 	.word	0x1fff9000

0000d75c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    d75c:	b500      	push	{lr}
    d75e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d760:	f7f3 fd64 	bl	122c <Sys_GetCoreID>
    d764:	4603      	mov	r3, r0
    d766:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId])
    d768:	4a10      	ldr	r2, [pc, #64]	; (d7ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    d76a:	9b01      	ldr	r3, [sp, #4]
    d76c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d770:	2b00      	cmp	r3, #0
    d772:	d10d      	bne.n	d790 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d774:	f7f3 fa6e 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    d778:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d77a:	9b00      	ldr	r3, [sp, #0]
    d77c:	f003 0301 	and.w	r3, r3, #1
    d780:	2b00      	cmp	r3, #0
    d782:	d100      	bne.n	d786 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d784:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    d786:	490a      	ldr	r1, [pc, #40]	; (d7b0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x54>)
    d788:	9b01      	ldr	r3, [sp, #4]
    d78a:	9a00      	ldr	r2, [sp, #0]
    d78c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]++;
    d790:	4a06      	ldr	r2, [pc, #24]	; (d7ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    d792:	9b01      	ldr	r3, [sp, #4]
    d794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d798:	1c5a      	adds	r2, r3, #1
    d79a:	4904      	ldr	r1, [pc, #16]	; (d7ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    d79c:	9b01      	ldr	r3, [sp, #4]
    d79e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d7a2:	bf00      	nop
    d7a4:	b003      	add	sp, #12
    d7a6:	f85d fb04 	ldr.w	pc, [sp], #4
    d7aa:	bf00      	nop
    d7ac:	1fff900c 	.word	0x1fff900c
    d7b0:	1fff9008 	.word	0x1fff9008

0000d7b4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    d7b4:	b500      	push	{lr}
    d7b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7b8:	f7f3 fd38 	bl	122c <Sys_GetCoreID>
    d7bc:	4603      	mov	r3, r0
    d7be:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]--;
    d7c0:	4a0d      	ldr	r2, [pc, #52]	; (d7f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    d7c2:	9b01      	ldr	r3, [sp, #4]
    d7c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7c8:	1e5a      	subs	r2, r3, #1
    d7ca:	490b      	ldr	r1, [pc, #44]	; (d7f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    d7cc:	9b01      	ldr	r3, [sp, #4]
    d7ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    d7d2:	4a0a      	ldr	r2, [pc, #40]	; (d7fc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x48>)
    d7d4:	9b01      	ldr	r3, [sp, #4]
    d7d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7da:	f003 0301 	and.w	r3, r3, #1
    d7de:	2b00      	cmp	r3, #0
    d7e0:	d106      	bne.n	d7f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    d7e2:	4a05      	ldr	r2, [pc, #20]	; (d7f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    d7e4:	9b01      	ldr	r3, [sp, #4]
    d7e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7ea:	2b00      	cmp	r3, #0
    d7ec:	d100      	bne.n	d7f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d7ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d7f0:	bf00      	nop
    d7f2:	b003      	add	sp, #12
    d7f4:	f85d fb04 	ldr.w	pc, [sp], #4
    d7f8:	1fff900c 	.word	0x1fff900c
    d7fc:	1fff9008 	.word	0x1fff9008

0000d800 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    d800:	b500      	push	{lr}
    d802:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d804:	f7f3 fd12 	bl	122c <Sys_GetCoreID>
    d808:	4603      	mov	r3, r0
    d80a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId])
    d80c:	4a10      	ldr	r2, [pc, #64]	; (d850 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    d80e:	9b01      	ldr	r3, [sp, #4]
    d810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d814:	2b00      	cmp	r3, #0
    d816:	d10d      	bne.n	d834 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d818:	f7f3 fa1c 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    d81c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d81e:	9b00      	ldr	r3, [sp, #0]
    d820:	f003 0301 	and.w	r3, r3, #1
    d824:	2b00      	cmp	r3, #0
    d826:	d100      	bne.n	d82a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d828:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    d82a:	490a      	ldr	r1, [pc, #40]	; (d854 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x54>)
    d82c:	9b01      	ldr	r3, [sp, #4]
    d82e:	9a00      	ldr	r2, [sp, #0]
    d830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]++;
    d834:	4a06      	ldr	r2, [pc, #24]	; (d850 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    d836:	9b01      	ldr	r3, [sp, #4]
    d838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d83c:	1c5a      	adds	r2, r3, #1
    d83e:	4904      	ldr	r1, [pc, #16]	; (d850 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    d840:	9b01      	ldr	r3, [sp, #4]
    d842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d846:	bf00      	nop
    d848:	b003      	add	sp, #12
    d84a:	f85d fb04 	ldr.w	pc, [sp], #4
    d84e:	bf00      	nop
    d850:	1fff9014 	.word	0x1fff9014
    d854:	1fff9010 	.word	0x1fff9010

0000d858 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    d858:	b500      	push	{lr}
    d85a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d85c:	f7f3 fce6 	bl	122c <Sys_GetCoreID>
    d860:	4603      	mov	r3, r0
    d862:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]--;
    d864:	4a0d      	ldr	r2, [pc, #52]	; (d89c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    d866:	9b01      	ldr	r3, [sp, #4]
    d868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d86c:	1e5a      	subs	r2, r3, #1
    d86e:	490b      	ldr	r1, [pc, #44]	; (d89c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    d870:	9b01      	ldr	r3, [sp, #4]
    d872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    d876:	4a0a      	ldr	r2, [pc, #40]	; (d8a0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x48>)
    d878:	9b01      	ldr	r3, [sp, #4]
    d87a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d87e:	f003 0301 	and.w	r3, r3, #1
    d882:	2b00      	cmp	r3, #0
    d884:	d106      	bne.n	d894 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    d886:	4a05      	ldr	r2, [pc, #20]	; (d89c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    d888:	9b01      	ldr	r3, [sp, #4]
    d88a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d88e:	2b00      	cmp	r3, #0
    d890:	d100      	bne.n	d894 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d892:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d894:	bf00      	nop
    d896:	b003      	add	sp, #12
    d898:	f85d fb04 	ldr.w	pc, [sp], #4
    d89c:	1fff9014 	.word	0x1fff9014
    d8a0:	1fff9010 	.word	0x1fff9010

0000d8a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    d8a4:	b500      	push	{lr}
    d8a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d8a8:	f7f3 fcc0 	bl	122c <Sys_GetCoreID>
    d8ac:	4603      	mov	r3, r0
    d8ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId])
    d8b0:	4a10      	ldr	r2, [pc, #64]	; (d8f4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    d8b2:	9b01      	ldr	r3, [sp, #4]
    d8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8b8:	2b00      	cmp	r3, #0
    d8ba:	d10d      	bne.n	d8d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d8bc:	f7f3 f9ca 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    d8c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d8c2:	9b00      	ldr	r3, [sp, #0]
    d8c4:	f003 0301 	and.w	r3, r3, #1
    d8c8:	2b00      	cmp	r3, #0
    d8ca:	d100      	bne.n	d8ce <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d8cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    d8ce:	490a      	ldr	r1, [pc, #40]	; (d8f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x54>)
    d8d0:	9b01      	ldr	r3, [sp, #4]
    d8d2:	9a00      	ldr	r2, [sp, #0]
    d8d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]++;
    d8d8:	4a06      	ldr	r2, [pc, #24]	; (d8f4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    d8da:	9b01      	ldr	r3, [sp, #4]
    d8dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8e0:	1c5a      	adds	r2, r3, #1
    d8e2:	4904      	ldr	r1, [pc, #16]	; (d8f4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    d8e4:	9b01      	ldr	r3, [sp, #4]
    d8e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d8ea:	bf00      	nop
    d8ec:	b003      	add	sp, #12
    d8ee:	f85d fb04 	ldr.w	pc, [sp], #4
    d8f2:	bf00      	nop
    d8f4:	1fff901c 	.word	0x1fff901c
    d8f8:	1fff9018 	.word	0x1fff9018

0000d8fc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    d8fc:	b500      	push	{lr}
    d8fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d900:	f7f3 fc94 	bl	122c <Sys_GetCoreID>
    d904:	4603      	mov	r3, r0
    d906:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]--;
    d908:	4a0d      	ldr	r2, [pc, #52]	; (d940 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    d90a:	9b01      	ldr	r3, [sp, #4]
    d90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d910:	1e5a      	subs	r2, r3, #1
    d912:	490b      	ldr	r1, [pc, #44]	; (d940 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    d914:	9b01      	ldr	r3, [sp, #4]
    d916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    d91a:	4a0a      	ldr	r2, [pc, #40]	; (d944 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x48>)
    d91c:	9b01      	ldr	r3, [sp, #4]
    d91e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d922:	f003 0301 	and.w	r3, r3, #1
    d926:	2b00      	cmp	r3, #0
    d928:	d106      	bne.n	d938 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    d92a:	4a05      	ldr	r2, [pc, #20]	; (d940 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    d92c:	9b01      	ldr	r3, [sp, #4]
    d92e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d932:	2b00      	cmp	r3, #0
    d934:	d100      	bne.n	d938 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d936:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d938:	bf00      	nop
    d93a:	b003      	add	sp, #12
    d93c:	f85d fb04 	ldr.w	pc, [sp], #4
    d940:	1fff901c 	.word	0x1fff901c
    d944:	1fff9018 	.word	0x1fff9018

0000d948 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    d948:	b500      	push	{lr}
    d94a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d94c:	f7f3 fc6e 	bl	122c <Sys_GetCoreID>
    d950:	4603      	mov	r3, r0
    d952:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId])
    d954:	4a10      	ldr	r2, [pc, #64]	; (d998 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    d956:	9b01      	ldr	r3, [sp, #4]
    d958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d95c:	2b00      	cmp	r3, #0
    d95e:	d10d      	bne.n	d97c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d960:	f7f3 f978 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    d964:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d966:	9b00      	ldr	r3, [sp, #0]
    d968:	f003 0301 	and.w	r3, r3, #1
    d96c:	2b00      	cmp	r3, #0
    d96e:	d100      	bne.n	d972 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d970:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    d972:	490a      	ldr	r1, [pc, #40]	; (d99c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x54>)
    d974:	9b01      	ldr	r3, [sp, #4]
    d976:	9a00      	ldr	r2, [sp, #0]
    d978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]++;
    d97c:	4a06      	ldr	r2, [pc, #24]	; (d998 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    d97e:	9b01      	ldr	r3, [sp, #4]
    d980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d984:	1c5a      	adds	r2, r3, #1
    d986:	4904      	ldr	r1, [pc, #16]	; (d998 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    d988:	9b01      	ldr	r3, [sp, #4]
    d98a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d98e:	bf00      	nop
    d990:	b003      	add	sp, #12
    d992:	f85d fb04 	ldr.w	pc, [sp], #4
    d996:	bf00      	nop
    d998:	1fff9024 	.word	0x1fff9024
    d99c:	1fff9020 	.word	0x1fff9020

0000d9a0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    d9a0:	b500      	push	{lr}
    d9a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d9a4:	f7f3 fc42 	bl	122c <Sys_GetCoreID>
    d9a8:	4603      	mov	r3, r0
    d9aa:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]--;
    d9ac:	4a0d      	ldr	r2, [pc, #52]	; (d9e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    d9ae:	9b01      	ldr	r3, [sp, #4]
    d9b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9b4:	1e5a      	subs	r2, r3, #1
    d9b6:	490b      	ldr	r1, [pc, #44]	; (d9e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    d9b8:	9b01      	ldr	r3, [sp, #4]
    d9ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    d9be:	4a0a      	ldr	r2, [pc, #40]	; (d9e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x48>)
    d9c0:	9b01      	ldr	r3, [sp, #4]
    d9c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9c6:	f003 0301 	and.w	r3, r3, #1
    d9ca:	2b00      	cmp	r3, #0
    d9cc:	d106      	bne.n	d9dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    d9ce:	4a05      	ldr	r2, [pc, #20]	; (d9e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    d9d0:	9b01      	ldr	r3, [sp, #4]
    d9d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9d6:	2b00      	cmp	r3, #0
    d9d8:	d100      	bne.n	d9dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d9da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d9dc:	bf00      	nop
    d9de:	b003      	add	sp, #12
    d9e0:	f85d fb04 	ldr.w	pc, [sp], #4
    d9e4:	1fff9024 	.word	0x1fff9024
    d9e8:	1fff9020 	.word	0x1fff9020

0000d9ec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    d9ec:	b500      	push	{lr}
    d9ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d9f0:	f7f3 fc1c 	bl	122c <Sys_GetCoreID>
    d9f4:	4603      	mov	r3, r0
    d9f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId])
    d9f8:	4a10      	ldr	r2, [pc, #64]	; (da3c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    d9fa:	9b01      	ldr	r3, [sp, #4]
    d9fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da00:	2b00      	cmp	r3, #0
    da02:	d10d      	bne.n	da20 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    da04:	f7f3 f926 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    da08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    da0a:	9b00      	ldr	r3, [sp, #0]
    da0c:	f003 0301 	and.w	r3, r3, #1
    da10:	2b00      	cmp	r3, #0
    da12:	d100      	bne.n	da16 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    da14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    da16:	490a      	ldr	r1, [pc, #40]	; (da40 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x54>)
    da18:	9b01      	ldr	r3, [sp, #4]
    da1a:	9a00      	ldr	r2, [sp, #0]
    da1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]++;
    da20:	4a06      	ldr	r2, [pc, #24]	; (da3c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    da22:	9b01      	ldr	r3, [sp, #4]
    da24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da28:	1c5a      	adds	r2, r3, #1
    da2a:	4904      	ldr	r1, [pc, #16]	; (da3c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    da2c:	9b01      	ldr	r3, [sp, #4]
    da2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    da32:	bf00      	nop
    da34:	b003      	add	sp, #12
    da36:	f85d fb04 	ldr.w	pc, [sp], #4
    da3a:	bf00      	nop
    da3c:	1fff902c 	.word	0x1fff902c
    da40:	1fff9028 	.word	0x1fff9028

0000da44 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    da44:	b500      	push	{lr}
    da46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da48:	f7f3 fbf0 	bl	122c <Sys_GetCoreID>
    da4c:	4603      	mov	r3, r0
    da4e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]--;
    da50:	4a0d      	ldr	r2, [pc, #52]	; (da88 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    da52:	9b01      	ldr	r3, [sp, #4]
    da54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da58:	1e5a      	subs	r2, r3, #1
    da5a:	490b      	ldr	r1, [pc, #44]	; (da88 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    da5c:	9b01      	ldr	r3, [sp, #4]
    da5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    da62:	4a0a      	ldr	r2, [pc, #40]	; (da8c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x48>)
    da64:	9b01      	ldr	r3, [sp, #4]
    da66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da6a:	f003 0301 	and.w	r3, r3, #1
    da6e:	2b00      	cmp	r3, #0
    da70:	d106      	bne.n	da80 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    da72:	4a05      	ldr	r2, [pc, #20]	; (da88 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    da74:	9b01      	ldr	r3, [sp, #4]
    da76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da7a:	2b00      	cmp	r3, #0
    da7c:	d100      	bne.n	da80 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    da7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    da80:	bf00      	nop
    da82:	b003      	add	sp, #12
    da84:	f85d fb04 	ldr.w	pc, [sp], #4
    da88:	1fff902c 	.word	0x1fff902c
    da8c:	1fff9028 	.word	0x1fff9028

0000da90 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    da90:	b500      	push	{lr}
    da92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da94:	f7f3 fbca 	bl	122c <Sys_GetCoreID>
    da98:	4603      	mov	r3, r0
    da9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId])
    da9c:	4a10      	ldr	r2, [pc, #64]	; (dae0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    da9e:	9b01      	ldr	r3, [sp, #4]
    daa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daa4:	2b00      	cmp	r3, #0
    daa6:	d10d      	bne.n	dac4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    daa8:	f7f3 f8d4 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    daac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    daae:	9b00      	ldr	r3, [sp, #0]
    dab0:	f003 0301 	and.w	r3, r3, #1
    dab4:	2b00      	cmp	r3, #0
    dab6:	d100      	bne.n	daba <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dab8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    daba:	490a      	ldr	r1, [pc, #40]	; (dae4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x54>)
    dabc:	9b01      	ldr	r3, [sp, #4]
    dabe:	9a00      	ldr	r2, [sp, #0]
    dac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]++;
    dac4:	4a06      	ldr	r2, [pc, #24]	; (dae0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    dac6:	9b01      	ldr	r3, [sp, #4]
    dac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dacc:	1c5a      	adds	r2, r3, #1
    dace:	4904      	ldr	r1, [pc, #16]	; (dae0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    dad0:	9b01      	ldr	r3, [sp, #4]
    dad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dad6:	bf00      	nop
    dad8:	b003      	add	sp, #12
    dada:	f85d fb04 	ldr.w	pc, [sp], #4
    dade:	bf00      	nop
    dae0:	1fff9034 	.word	0x1fff9034
    dae4:	1fff9030 	.word	0x1fff9030

0000dae8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    dae8:	b500      	push	{lr}
    daea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    daec:	f7f3 fb9e 	bl	122c <Sys_GetCoreID>
    daf0:	4603      	mov	r3, r0
    daf2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]--;
    daf4:	4a0d      	ldr	r2, [pc, #52]	; (db2c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    daf6:	9b01      	ldr	r3, [sp, #4]
    daf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dafc:	1e5a      	subs	r2, r3, #1
    dafe:	490b      	ldr	r1, [pc, #44]	; (db2c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    db00:	9b01      	ldr	r3, [sp, #4]
    db02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    db06:	4a0a      	ldr	r2, [pc, #40]	; (db30 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x48>)
    db08:	9b01      	ldr	r3, [sp, #4]
    db0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db0e:	f003 0301 	and.w	r3, r3, #1
    db12:	2b00      	cmp	r3, #0
    db14:	d106      	bne.n	db24 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    db16:	4a05      	ldr	r2, [pc, #20]	; (db2c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    db18:	9b01      	ldr	r3, [sp, #4]
    db1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db1e:	2b00      	cmp	r3, #0
    db20:	d100      	bne.n	db24 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    db22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    db24:	bf00      	nop
    db26:	b003      	add	sp, #12
    db28:	f85d fb04 	ldr.w	pc, [sp], #4
    db2c:	1fff9034 	.word	0x1fff9034
    db30:	1fff9030 	.word	0x1fff9030

0000db34 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    db34:	b500      	push	{lr}
    db36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db38:	f7f3 fb78 	bl	122c <Sys_GetCoreID>
    db3c:	4603      	mov	r3, r0
    db3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId])
    db40:	4a10      	ldr	r2, [pc, #64]	; (db84 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    db42:	9b01      	ldr	r3, [sp, #4]
    db44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db48:	2b00      	cmp	r3, #0
    db4a:	d10d      	bne.n	db68 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    db4c:	f7f3 f882 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    db50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    db52:	9b00      	ldr	r3, [sp, #0]
    db54:	f003 0301 	and.w	r3, r3, #1
    db58:	2b00      	cmp	r3, #0
    db5a:	d100      	bne.n	db5e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    db5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    db5e:	490a      	ldr	r1, [pc, #40]	; (db88 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x54>)
    db60:	9b01      	ldr	r3, [sp, #4]
    db62:	9a00      	ldr	r2, [sp, #0]
    db64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]++;
    db68:	4a06      	ldr	r2, [pc, #24]	; (db84 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    db6a:	9b01      	ldr	r3, [sp, #4]
    db6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db70:	1c5a      	adds	r2, r3, #1
    db72:	4904      	ldr	r1, [pc, #16]	; (db84 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    db74:	9b01      	ldr	r3, [sp, #4]
    db76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    db7a:	bf00      	nop
    db7c:	b003      	add	sp, #12
    db7e:	f85d fb04 	ldr.w	pc, [sp], #4
    db82:	bf00      	nop
    db84:	1fff903c 	.word	0x1fff903c
    db88:	1fff9038 	.word	0x1fff9038

0000db8c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    db8c:	b500      	push	{lr}
    db8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db90:	f7f3 fb4c 	bl	122c <Sys_GetCoreID>
    db94:	4603      	mov	r3, r0
    db96:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]--;
    db98:	4a0d      	ldr	r2, [pc, #52]	; (dbd0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    db9a:	9b01      	ldr	r3, [sp, #4]
    db9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dba0:	1e5a      	subs	r2, r3, #1
    dba2:	490b      	ldr	r1, [pc, #44]	; (dbd0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    dba4:	9b01      	ldr	r3, [sp, #4]
    dba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    dbaa:	4a0a      	ldr	r2, [pc, #40]	; (dbd4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x48>)
    dbac:	9b01      	ldr	r3, [sp, #4]
    dbae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbb2:	f003 0301 	and.w	r3, r3, #1
    dbb6:	2b00      	cmp	r3, #0
    dbb8:	d106      	bne.n	dbc8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    dbba:	4a05      	ldr	r2, [pc, #20]	; (dbd0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    dbbc:	9b01      	ldr	r3, [sp, #4]
    dbbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbc2:	2b00      	cmp	r3, #0
    dbc4:	d100      	bne.n	dbc8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dbc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dbc8:	bf00      	nop
    dbca:	b003      	add	sp, #12
    dbcc:	f85d fb04 	ldr.w	pc, [sp], #4
    dbd0:	1fff903c 	.word	0x1fff903c
    dbd4:	1fff9038 	.word	0x1fff9038

0000dbd8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    dbd8:	b500      	push	{lr}
    dbda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dbdc:	f7f3 fb26 	bl	122c <Sys_GetCoreID>
    dbe0:	4603      	mov	r3, r0
    dbe2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId])
    dbe4:	4a10      	ldr	r2, [pc, #64]	; (dc28 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    dbe6:	9b01      	ldr	r3, [sp, #4]
    dbe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbec:	2b00      	cmp	r3, #0
    dbee:	d10d      	bne.n	dc0c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dbf0:	f7f3 f830 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    dbf4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dbf6:	9b00      	ldr	r3, [sp, #0]
    dbf8:	f003 0301 	and.w	r3, r3, #1
    dbfc:	2b00      	cmp	r3, #0
    dbfe:	d100      	bne.n	dc02 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dc00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    dc02:	490a      	ldr	r1, [pc, #40]	; (dc2c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x54>)
    dc04:	9b01      	ldr	r3, [sp, #4]
    dc06:	9a00      	ldr	r2, [sp, #0]
    dc08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]++;
    dc0c:	4a06      	ldr	r2, [pc, #24]	; (dc28 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    dc0e:	9b01      	ldr	r3, [sp, #4]
    dc10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc14:	1c5a      	adds	r2, r3, #1
    dc16:	4904      	ldr	r1, [pc, #16]	; (dc28 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    dc18:	9b01      	ldr	r3, [sp, #4]
    dc1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dc1e:	bf00      	nop
    dc20:	b003      	add	sp, #12
    dc22:	f85d fb04 	ldr.w	pc, [sp], #4
    dc26:	bf00      	nop
    dc28:	1fff9044 	.word	0x1fff9044
    dc2c:	1fff9040 	.word	0x1fff9040

0000dc30 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    dc30:	b500      	push	{lr}
    dc32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc34:	f7f3 fafa 	bl	122c <Sys_GetCoreID>
    dc38:	4603      	mov	r3, r0
    dc3a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]--;
    dc3c:	4a0d      	ldr	r2, [pc, #52]	; (dc74 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    dc3e:	9b01      	ldr	r3, [sp, #4]
    dc40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc44:	1e5a      	subs	r2, r3, #1
    dc46:	490b      	ldr	r1, [pc, #44]	; (dc74 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    dc48:	9b01      	ldr	r3, [sp, #4]
    dc4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    dc4e:	4a0a      	ldr	r2, [pc, #40]	; (dc78 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x48>)
    dc50:	9b01      	ldr	r3, [sp, #4]
    dc52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc56:	f003 0301 	and.w	r3, r3, #1
    dc5a:	2b00      	cmp	r3, #0
    dc5c:	d106      	bne.n	dc6c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    dc5e:	4a05      	ldr	r2, [pc, #20]	; (dc74 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    dc60:	9b01      	ldr	r3, [sp, #4]
    dc62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc66:	2b00      	cmp	r3, #0
    dc68:	d100      	bne.n	dc6c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dc6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dc6c:	bf00      	nop
    dc6e:	b003      	add	sp, #12
    dc70:	f85d fb04 	ldr.w	pc, [sp], #4
    dc74:	1fff9044 	.word	0x1fff9044
    dc78:	1fff9040 	.word	0x1fff9040

0000dc7c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    dc7c:	b500      	push	{lr}
    dc7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc80:	f7f3 fad4 	bl	122c <Sys_GetCoreID>
    dc84:	4603      	mov	r3, r0
    dc86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId])
    dc88:	4a10      	ldr	r2, [pc, #64]	; (dccc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    dc8a:	9b01      	ldr	r3, [sp, #4]
    dc8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc90:	2b00      	cmp	r3, #0
    dc92:	d10d      	bne.n	dcb0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dc94:	f7f2 ffde 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    dc98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dc9a:	9b00      	ldr	r3, [sp, #0]
    dc9c:	f003 0301 	and.w	r3, r3, #1
    dca0:	2b00      	cmp	r3, #0
    dca2:	d100      	bne.n	dca6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dca4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    dca6:	490a      	ldr	r1, [pc, #40]	; (dcd0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x54>)
    dca8:	9b01      	ldr	r3, [sp, #4]
    dcaa:	9a00      	ldr	r2, [sp, #0]
    dcac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]++;
    dcb0:	4a06      	ldr	r2, [pc, #24]	; (dccc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    dcb2:	9b01      	ldr	r3, [sp, #4]
    dcb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcb8:	1c5a      	adds	r2, r3, #1
    dcba:	4904      	ldr	r1, [pc, #16]	; (dccc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    dcbc:	9b01      	ldr	r3, [sp, #4]
    dcbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dcc2:	bf00      	nop
    dcc4:	b003      	add	sp, #12
    dcc6:	f85d fb04 	ldr.w	pc, [sp], #4
    dcca:	bf00      	nop
    dccc:	1fff904c 	.word	0x1fff904c
    dcd0:	1fff9048 	.word	0x1fff9048

0000dcd4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    dcd4:	b500      	push	{lr}
    dcd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcd8:	f7f3 faa8 	bl	122c <Sys_GetCoreID>
    dcdc:	4603      	mov	r3, r0
    dcde:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]--;
    dce0:	4a0d      	ldr	r2, [pc, #52]	; (dd18 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    dce2:	9b01      	ldr	r3, [sp, #4]
    dce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dce8:	1e5a      	subs	r2, r3, #1
    dcea:	490b      	ldr	r1, [pc, #44]	; (dd18 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    dcec:	9b01      	ldr	r3, [sp, #4]
    dcee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    dcf2:	4a0a      	ldr	r2, [pc, #40]	; (dd1c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x48>)
    dcf4:	9b01      	ldr	r3, [sp, #4]
    dcf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcfa:	f003 0301 	and.w	r3, r3, #1
    dcfe:	2b00      	cmp	r3, #0
    dd00:	d106      	bne.n	dd10 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    dd02:	4a05      	ldr	r2, [pc, #20]	; (dd18 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    dd04:	9b01      	ldr	r3, [sp, #4]
    dd06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd0a:	2b00      	cmp	r3, #0
    dd0c:	d100      	bne.n	dd10 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dd0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dd10:	bf00      	nop
    dd12:	b003      	add	sp, #12
    dd14:	f85d fb04 	ldr.w	pc, [sp], #4
    dd18:	1fff904c 	.word	0x1fff904c
    dd1c:	1fff9048 	.word	0x1fff9048

0000dd20 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    dd20:	b500      	push	{lr}
    dd22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd24:	f7f3 fa82 	bl	122c <Sys_GetCoreID>
    dd28:	4603      	mov	r3, r0
    dd2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId])
    dd2c:	4a10      	ldr	r2, [pc, #64]	; (dd70 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    dd2e:	9b01      	ldr	r3, [sp, #4]
    dd30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd34:	2b00      	cmp	r3, #0
    dd36:	d10d      	bne.n	dd54 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dd38:	f7f2 ff8c 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    dd3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dd3e:	9b00      	ldr	r3, [sp, #0]
    dd40:	f003 0301 	and.w	r3, r3, #1
    dd44:	2b00      	cmp	r3, #0
    dd46:	d100      	bne.n	dd4a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dd48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    dd4a:	490a      	ldr	r1, [pc, #40]	; (dd74 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x54>)
    dd4c:	9b01      	ldr	r3, [sp, #4]
    dd4e:	9a00      	ldr	r2, [sp, #0]
    dd50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]++;
    dd54:	4a06      	ldr	r2, [pc, #24]	; (dd70 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    dd56:	9b01      	ldr	r3, [sp, #4]
    dd58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd5c:	1c5a      	adds	r2, r3, #1
    dd5e:	4904      	ldr	r1, [pc, #16]	; (dd70 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    dd60:	9b01      	ldr	r3, [sp, #4]
    dd62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dd66:	bf00      	nop
    dd68:	b003      	add	sp, #12
    dd6a:	f85d fb04 	ldr.w	pc, [sp], #4
    dd6e:	bf00      	nop
    dd70:	1fff9054 	.word	0x1fff9054
    dd74:	1fff9050 	.word	0x1fff9050

0000dd78 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    dd78:	b500      	push	{lr}
    dd7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd7c:	f7f3 fa56 	bl	122c <Sys_GetCoreID>
    dd80:	4603      	mov	r3, r0
    dd82:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]--;
    dd84:	4a0d      	ldr	r2, [pc, #52]	; (ddbc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    dd86:	9b01      	ldr	r3, [sp, #4]
    dd88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd8c:	1e5a      	subs	r2, r3, #1
    dd8e:	490b      	ldr	r1, [pc, #44]	; (ddbc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    dd90:	9b01      	ldr	r3, [sp, #4]
    dd92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    dd96:	4a0a      	ldr	r2, [pc, #40]	; (ddc0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x48>)
    dd98:	9b01      	ldr	r3, [sp, #4]
    dd9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd9e:	f003 0301 	and.w	r3, r3, #1
    dda2:	2b00      	cmp	r3, #0
    dda4:	d106      	bne.n	ddb4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    dda6:	4a05      	ldr	r2, [pc, #20]	; (ddbc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    dda8:	9b01      	ldr	r3, [sp, #4]
    ddaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddae:	2b00      	cmp	r3, #0
    ddb0:	d100      	bne.n	ddb4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ddb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ddb4:	bf00      	nop
    ddb6:	b003      	add	sp, #12
    ddb8:	f85d fb04 	ldr.w	pc, [sp], #4
    ddbc:	1fff9054 	.word	0x1fff9054
    ddc0:	1fff9050 	.word	0x1fff9050

0000ddc4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    ddc4:	b500      	push	{lr}
    ddc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ddc8:	f7f3 fa30 	bl	122c <Sys_GetCoreID>
    ddcc:	4603      	mov	r3, r0
    ddce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId])
    ddd0:	4a10      	ldr	r2, [pc, #64]	; (de14 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    ddd2:	9b01      	ldr	r3, [sp, #4]
    ddd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddd8:	2b00      	cmp	r3, #0
    ddda:	d10d      	bne.n	ddf8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dddc:	f7f2 ff3a 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    dde0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dde2:	9b00      	ldr	r3, [sp, #0]
    dde4:	f003 0301 	and.w	r3, r3, #1
    dde8:	2b00      	cmp	r3, #0
    ddea:	d100      	bne.n	ddee <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ddec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    ddee:	490a      	ldr	r1, [pc, #40]	; (de18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x54>)
    ddf0:	9b01      	ldr	r3, [sp, #4]
    ddf2:	9a00      	ldr	r2, [sp, #0]
    ddf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]++;
    ddf8:	4a06      	ldr	r2, [pc, #24]	; (de14 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    ddfa:	9b01      	ldr	r3, [sp, #4]
    ddfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de00:	1c5a      	adds	r2, r3, #1
    de02:	4904      	ldr	r1, [pc, #16]	; (de14 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    de04:	9b01      	ldr	r3, [sp, #4]
    de06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    de0a:	bf00      	nop
    de0c:	b003      	add	sp, #12
    de0e:	f85d fb04 	ldr.w	pc, [sp], #4
    de12:	bf00      	nop
    de14:	1fff905c 	.word	0x1fff905c
    de18:	1fff9058 	.word	0x1fff9058

0000de1c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    de1c:	b500      	push	{lr}
    de1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de20:	f7f3 fa04 	bl	122c <Sys_GetCoreID>
    de24:	4603      	mov	r3, r0
    de26:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]--;
    de28:	4a0d      	ldr	r2, [pc, #52]	; (de60 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    de2a:	9b01      	ldr	r3, [sp, #4]
    de2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de30:	1e5a      	subs	r2, r3, #1
    de32:	490b      	ldr	r1, [pc, #44]	; (de60 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    de34:	9b01      	ldr	r3, [sp, #4]
    de36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    de3a:	4a0a      	ldr	r2, [pc, #40]	; (de64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x48>)
    de3c:	9b01      	ldr	r3, [sp, #4]
    de3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de42:	f003 0301 	and.w	r3, r3, #1
    de46:	2b00      	cmp	r3, #0
    de48:	d106      	bne.n	de58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    de4a:	4a05      	ldr	r2, [pc, #20]	; (de60 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    de4c:	9b01      	ldr	r3, [sp, #4]
    de4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de52:	2b00      	cmp	r3, #0
    de54:	d100      	bne.n	de58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    de56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    de58:	bf00      	nop
    de5a:	b003      	add	sp, #12
    de5c:	f85d fb04 	ldr.w	pc, [sp], #4
    de60:	1fff905c 	.word	0x1fff905c
    de64:	1fff9058 	.word	0x1fff9058

0000de68 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    de68:	b500      	push	{lr}
    de6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de6c:	f7f3 f9de 	bl	122c <Sys_GetCoreID>
    de70:	4603      	mov	r3, r0
    de72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId])
    de74:	4a10      	ldr	r2, [pc, #64]	; (deb8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    de76:	9b01      	ldr	r3, [sp, #4]
    de78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de7c:	2b00      	cmp	r3, #0
    de7e:	d10d      	bne.n	de9c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    de80:	f7f2 fee8 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    de84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    de86:	9b00      	ldr	r3, [sp, #0]
    de88:	f003 0301 	and.w	r3, r3, #1
    de8c:	2b00      	cmp	r3, #0
    de8e:	d100      	bne.n	de92 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    de90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    de92:	490a      	ldr	r1, [pc, #40]	; (debc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x54>)
    de94:	9b01      	ldr	r3, [sp, #4]
    de96:	9a00      	ldr	r2, [sp, #0]
    de98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]++;
    de9c:	4a06      	ldr	r2, [pc, #24]	; (deb8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    de9e:	9b01      	ldr	r3, [sp, #4]
    dea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dea4:	1c5a      	adds	r2, r3, #1
    dea6:	4904      	ldr	r1, [pc, #16]	; (deb8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    dea8:	9b01      	ldr	r3, [sp, #4]
    deaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    deae:	bf00      	nop
    deb0:	b003      	add	sp, #12
    deb2:	f85d fb04 	ldr.w	pc, [sp], #4
    deb6:	bf00      	nop
    deb8:	1fff9064 	.word	0x1fff9064
    debc:	1fff9060 	.word	0x1fff9060

0000dec0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    dec0:	b500      	push	{lr}
    dec2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dec4:	f7f3 f9b2 	bl	122c <Sys_GetCoreID>
    dec8:	4603      	mov	r3, r0
    deca:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]--;
    decc:	4a0d      	ldr	r2, [pc, #52]	; (df04 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    dece:	9b01      	ldr	r3, [sp, #4]
    ded0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ded4:	1e5a      	subs	r2, r3, #1
    ded6:	490b      	ldr	r1, [pc, #44]	; (df04 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    ded8:	9b01      	ldr	r3, [sp, #4]
    deda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    dede:	4a0a      	ldr	r2, [pc, #40]	; (df08 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x48>)
    dee0:	9b01      	ldr	r3, [sp, #4]
    dee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dee6:	f003 0301 	and.w	r3, r3, #1
    deea:	2b00      	cmp	r3, #0
    deec:	d106      	bne.n	defc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    deee:	4a05      	ldr	r2, [pc, #20]	; (df04 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    def0:	9b01      	ldr	r3, [sp, #4]
    def2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    def6:	2b00      	cmp	r3, #0
    def8:	d100      	bne.n	defc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    defa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    defc:	bf00      	nop
    defe:	b003      	add	sp, #12
    df00:	f85d fb04 	ldr.w	pc, [sp], #4
    df04:	1fff9064 	.word	0x1fff9064
    df08:	1fff9060 	.word	0x1fff9060

0000df0c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    df0c:	b500      	push	{lr}
    df0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df10:	f7f3 f98c 	bl	122c <Sys_GetCoreID>
    df14:	4603      	mov	r3, r0
    df16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId])
    df18:	4a10      	ldr	r2, [pc, #64]	; (df5c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    df1a:	9b01      	ldr	r3, [sp, #4]
    df1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df20:	2b00      	cmp	r3, #0
    df22:	d10d      	bne.n	df40 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    df24:	f7f2 fe96 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    df28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    df2a:	9b00      	ldr	r3, [sp, #0]
    df2c:	f003 0301 	and.w	r3, r3, #1
    df30:	2b00      	cmp	r3, #0
    df32:	d100      	bne.n	df36 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    df34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    df36:	490a      	ldr	r1, [pc, #40]	; (df60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x54>)
    df38:	9b01      	ldr	r3, [sp, #4]
    df3a:	9a00      	ldr	r2, [sp, #0]
    df3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]++;
    df40:	4a06      	ldr	r2, [pc, #24]	; (df5c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    df42:	9b01      	ldr	r3, [sp, #4]
    df44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df48:	1c5a      	adds	r2, r3, #1
    df4a:	4904      	ldr	r1, [pc, #16]	; (df5c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    df4c:	9b01      	ldr	r3, [sp, #4]
    df4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    df52:	bf00      	nop
    df54:	b003      	add	sp, #12
    df56:	f85d fb04 	ldr.w	pc, [sp], #4
    df5a:	bf00      	nop
    df5c:	1fff906c 	.word	0x1fff906c
    df60:	1fff9068 	.word	0x1fff9068

0000df64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    df64:	b500      	push	{lr}
    df66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df68:	f7f3 f960 	bl	122c <Sys_GetCoreID>
    df6c:	4603      	mov	r3, r0
    df6e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]--;
    df70:	4a0d      	ldr	r2, [pc, #52]	; (dfa8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    df72:	9b01      	ldr	r3, [sp, #4]
    df74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df78:	1e5a      	subs	r2, r3, #1
    df7a:	490b      	ldr	r1, [pc, #44]	; (dfa8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    df7c:	9b01      	ldr	r3, [sp, #4]
    df7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    df82:	4a0a      	ldr	r2, [pc, #40]	; (dfac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x48>)
    df84:	9b01      	ldr	r3, [sp, #4]
    df86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df8a:	f003 0301 	and.w	r3, r3, #1
    df8e:	2b00      	cmp	r3, #0
    df90:	d106      	bne.n	dfa0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    df92:	4a05      	ldr	r2, [pc, #20]	; (dfa8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    df94:	9b01      	ldr	r3, [sp, #4]
    df96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df9a:	2b00      	cmp	r3, #0
    df9c:	d100      	bne.n	dfa0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    df9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dfa0:	bf00      	nop
    dfa2:	b003      	add	sp, #12
    dfa4:	f85d fb04 	ldr.w	pc, [sp], #4
    dfa8:	1fff906c 	.word	0x1fff906c
    dfac:	1fff9068 	.word	0x1fff9068

0000dfb0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    dfb0:	b500      	push	{lr}
    dfb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dfb4:	f7f3 f93a 	bl	122c <Sys_GetCoreID>
    dfb8:	4603      	mov	r3, r0
    dfba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId])
    dfbc:	4a10      	ldr	r2, [pc, #64]	; (e000 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    dfbe:	9b01      	ldr	r3, [sp, #4]
    dfc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfc4:	2b00      	cmp	r3, #0
    dfc6:	d10d      	bne.n	dfe4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dfc8:	f7f2 fe44 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    dfcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dfce:	9b00      	ldr	r3, [sp, #0]
    dfd0:	f003 0301 	and.w	r3, r3, #1
    dfd4:	2b00      	cmp	r3, #0
    dfd6:	d100      	bne.n	dfda <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dfd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    dfda:	490a      	ldr	r1, [pc, #40]	; (e004 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x54>)
    dfdc:	9b01      	ldr	r3, [sp, #4]
    dfde:	9a00      	ldr	r2, [sp, #0]
    dfe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]++;
    dfe4:	4a06      	ldr	r2, [pc, #24]	; (e000 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    dfe6:	9b01      	ldr	r3, [sp, #4]
    dfe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfec:	1c5a      	adds	r2, r3, #1
    dfee:	4904      	ldr	r1, [pc, #16]	; (e000 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    dff0:	9b01      	ldr	r3, [sp, #4]
    dff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dff6:	bf00      	nop
    dff8:	b003      	add	sp, #12
    dffa:	f85d fb04 	ldr.w	pc, [sp], #4
    dffe:	bf00      	nop
    e000:	1fff9074 	.word	0x1fff9074
    e004:	1fff9070 	.word	0x1fff9070

0000e008 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    e008:	b500      	push	{lr}
    e00a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e00c:	f7f3 f90e 	bl	122c <Sys_GetCoreID>
    e010:	4603      	mov	r3, r0
    e012:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]--;
    e014:	4a0d      	ldr	r2, [pc, #52]	; (e04c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    e016:	9b01      	ldr	r3, [sp, #4]
    e018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e01c:	1e5a      	subs	r2, r3, #1
    e01e:	490b      	ldr	r1, [pc, #44]	; (e04c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    e020:	9b01      	ldr	r3, [sp, #4]
    e022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    e026:	4a0a      	ldr	r2, [pc, #40]	; (e050 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x48>)
    e028:	9b01      	ldr	r3, [sp, #4]
    e02a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e02e:	f003 0301 	and.w	r3, r3, #1
    e032:	2b00      	cmp	r3, #0
    e034:	d106      	bne.n	e044 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    e036:	4a05      	ldr	r2, [pc, #20]	; (e04c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    e038:	9b01      	ldr	r3, [sp, #4]
    e03a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e03e:	2b00      	cmp	r3, #0
    e040:	d100      	bne.n	e044 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e042:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e044:	bf00      	nop
    e046:	b003      	add	sp, #12
    e048:	f85d fb04 	ldr.w	pc, [sp], #4
    e04c:	1fff9074 	.word	0x1fff9074
    e050:	1fff9070 	.word	0x1fff9070

0000e054 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    e054:	b500      	push	{lr}
    e056:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e058:	f7f3 f8e8 	bl	122c <Sys_GetCoreID>
    e05c:	4603      	mov	r3, r0
    e05e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId])
    e060:	4a10      	ldr	r2, [pc, #64]	; (e0a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    e062:	9b01      	ldr	r3, [sp, #4]
    e064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e068:	2b00      	cmp	r3, #0
    e06a:	d10d      	bne.n	e088 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e06c:	f7f2 fdf2 	bl	c54 <Can_43_FLEXCAN_schm_read_msr>
    e070:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e072:	9b00      	ldr	r3, [sp, #0]
    e074:	f003 0301 	and.w	r3, r3, #1
    e078:	2b00      	cmp	r3, #0
    e07a:	d100      	bne.n	e07e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e07c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    e07e:	490a      	ldr	r1, [pc, #40]	; (e0a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x54>)
    e080:	9b01      	ldr	r3, [sp, #4]
    e082:	9a00      	ldr	r2, [sp, #0]
    e084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]++;
    e088:	4a06      	ldr	r2, [pc, #24]	; (e0a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    e08a:	9b01      	ldr	r3, [sp, #4]
    e08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e090:	1c5a      	adds	r2, r3, #1
    e092:	4904      	ldr	r1, [pc, #16]	; (e0a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    e094:	9b01      	ldr	r3, [sp, #4]
    e096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e09a:	bf00      	nop
    e09c:	b003      	add	sp, #12
    e09e:	f85d fb04 	ldr.w	pc, [sp], #4
    e0a2:	bf00      	nop
    e0a4:	1fff907c 	.word	0x1fff907c
    e0a8:	1fff9078 	.word	0x1fff9078

0000e0ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    e0ac:	b500      	push	{lr}
    e0ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e0b0:	f7f3 f8bc 	bl	122c <Sys_GetCoreID>
    e0b4:	4603      	mov	r3, r0
    e0b6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]--;
    e0b8:	4a0d      	ldr	r2, [pc, #52]	; (e0f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    e0ba:	9b01      	ldr	r3, [sp, #4]
    e0bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0c0:	1e5a      	subs	r2, r3, #1
    e0c2:	490b      	ldr	r1, [pc, #44]	; (e0f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    e0c4:	9b01      	ldr	r3, [sp, #4]
    e0c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    e0ca:	4a0a      	ldr	r2, [pc, #40]	; (e0f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x48>)
    e0cc:	9b01      	ldr	r3, [sp, #4]
    e0ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0d2:	f003 0301 	and.w	r3, r3, #1
    e0d6:	2b00      	cmp	r3, #0
    e0d8:	d106      	bne.n	e0e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    e0da:	4a05      	ldr	r2, [pc, #20]	; (e0f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    e0dc:	9b01      	ldr	r3, [sp, #4]
    e0de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0e2:	2b00      	cmp	r3, #0
    e0e4:	d100      	bne.n	e0e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e0e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e0e8:	bf00      	nop
    e0ea:	b003      	add	sp, #12
    e0ec:	f85d fb04 	ldr.w	pc, [sp], #4
    e0f0:	1fff907c 	.word	0x1fff907c
    e0f4:	1fff9078 	.word	0x1fff9078

0000e0f8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    e0f8:	b500      	push	{lr}
    e0fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e0fc:	f7f3 f896 	bl	122c <Sys_GetCoreID>
    e100:	4603      	mov	r3, r0
    e102:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    e104:	4a10      	ldr	r2, [pc, #64]	; (e148 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    e106:	9b01      	ldr	r3, [sp, #4]
    e108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e10c:	2b00      	cmp	r3, #0
    e10e:	d10d      	bne.n	e12c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e110:	f7f2 fda9 	bl	c66 <Dio_schm_read_msr>
    e114:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e116:	9b00      	ldr	r3, [sp, #0]
    e118:	f003 0301 	and.w	r3, r3, #1
    e11c:	2b00      	cmp	r3, #0
    e11e:	d100      	bne.n	e122 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e120:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    e122:	490a      	ldr	r1, [pc, #40]	; (e14c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    e124:	9b01      	ldr	r3, [sp, #4]
    e126:	9a00      	ldr	r2, [sp, #0]
    e128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    e12c:	4a06      	ldr	r2, [pc, #24]	; (e148 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    e12e:	9b01      	ldr	r3, [sp, #4]
    e130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e134:	1c5a      	adds	r2, r3, #1
    e136:	4904      	ldr	r1, [pc, #16]	; (e148 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    e138:	9b01      	ldr	r3, [sp, #4]
    e13a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e13e:	bf00      	nop
    e140:	b003      	add	sp, #12
    e142:	f85d fb04 	ldr.w	pc, [sp], #4
    e146:	bf00      	nop
    e148:	1fff9084 	.word	0x1fff9084
    e14c:	1fff9080 	.word	0x1fff9080

0000e150 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    e150:	b500      	push	{lr}
    e152:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e154:	f7f3 f86a 	bl	122c <Sys_GetCoreID>
    e158:	4603      	mov	r3, r0
    e15a:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    e15c:	4a0d      	ldr	r2, [pc, #52]	; (e194 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    e15e:	9b01      	ldr	r3, [sp, #4]
    e160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e164:	1e5a      	subs	r2, r3, #1
    e166:	490b      	ldr	r1, [pc, #44]	; (e194 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    e168:	9b01      	ldr	r3, [sp, #4]
    e16a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    e16e:	4a0a      	ldr	r2, [pc, #40]	; (e198 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    e170:	9b01      	ldr	r3, [sp, #4]
    e172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e176:	f003 0301 	and.w	r3, r3, #1
    e17a:	2b00      	cmp	r3, #0
    e17c:	d106      	bne.n	e18c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    e17e:	4a05      	ldr	r2, [pc, #20]	; (e194 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    e180:	9b01      	ldr	r3, [sp, #4]
    e182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e186:	2b00      	cmp	r3, #0
    e188:	d100      	bne.n	e18c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e18a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e18c:	bf00      	nop
    e18e:	b003      	add	sp, #12
    e190:	f85d fb04 	ldr.w	pc, [sp], #4
    e194:	1fff9084 	.word	0x1fff9084
    e198:	1fff9080 	.word	0x1fff9080

0000e19c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    e19c:	b500      	push	{lr}
    e19e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e1a0:	f7f3 f844 	bl	122c <Sys_GetCoreID>
    e1a4:	4603      	mov	r3, r0
    e1a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    e1a8:	4a10      	ldr	r2, [pc, #64]	; (e1ec <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    e1aa:	9b01      	ldr	r3, [sp, #4]
    e1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1b0:	2b00      	cmp	r3, #0
    e1b2:	d10d      	bne.n	e1d0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e1b4:	f7f2 fd57 	bl	c66 <Dio_schm_read_msr>
    e1b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e1ba:	9b00      	ldr	r3, [sp, #0]
    e1bc:	f003 0301 	and.w	r3, r3, #1
    e1c0:	2b00      	cmp	r3, #0
    e1c2:	d100      	bne.n	e1c6 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e1c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    e1c6:	490a      	ldr	r1, [pc, #40]	; (e1f0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    e1c8:	9b01      	ldr	r3, [sp, #4]
    e1ca:	9a00      	ldr	r2, [sp, #0]
    e1cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    e1d0:	4a06      	ldr	r2, [pc, #24]	; (e1ec <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    e1d2:	9b01      	ldr	r3, [sp, #4]
    e1d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1d8:	1c5a      	adds	r2, r3, #1
    e1da:	4904      	ldr	r1, [pc, #16]	; (e1ec <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    e1dc:	9b01      	ldr	r3, [sp, #4]
    e1de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e1e2:	bf00      	nop
    e1e4:	b003      	add	sp, #12
    e1e6:	f85d fb04 	ldr.w	pc, [sp], #4
    e1ea:	bf00      	nop
    e1ec:	1fff908c 	.word	0x1fff908c
    e1f0:	1fff9088 	.word	0x1fff9088

0000e1f4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    e1f4:	b500      	push	{lr}
    e1f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e1f8:	f7f3 f818 	bl	122c <Sys_GetCoreID>
    e1fc:	4603      	mov	r3, r0
    e1fe:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    e200:	4a0d      	ldr	r2, [pc, #52]	; (e238 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    e202:	9b01      	ldr	r3, [sp, #4]
    e204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e208:	1e5a      	subs	r2, r3, #1
    e20a:	490b      	ldr	r1, [pc, #44]	; (e238 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    e20c:	9b01      	ldr	r3, [sp, #4]
    e20e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    e212:	4a0a      	ldr	r2, [pc, #40]	; (e23c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    e214:	9b01      	ldr	r3, [sp, #4]
    e216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e21a:	f003 0301 	and.w	r3, r3, #1
    e21e:	2b00      	cmp	r3, #0
    e220:	d106      	bne.n	e230 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    e222:	4a05      	ldr	r2, [pc, #20]	; (e238 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    e224:	9b01      	ldr	r3, [sp, #4]
    e226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e22a:	2b00      	cmp	r3, #0
    e22c:	d100      	bne.n	e230 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e22e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e230:	bf00      	nop
    e232:	b003      	add	sp, #12
    e234:	f85d fb04 	ldr.w	pc, [sp], #4
    e238:	1fff908c 	.word	0x1fff908c
    e23c:	1fff9088 	.word	0x1fff9088

0000e240 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    e240:	b500      	push	{lr}
    e242:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e244:	f7f2 fff2 	bl	122c <Sys_GetCoreID>
    e248:	4603      	mov	r3, r0
    e24a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    e24c:	4a10      	ldr	r2, [pc, #64]	; (e290 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    e24e:	9b01      	ldr	r3, [sp, #4]
    e250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e254:	2b00      	cmp	r3, #0
    e256:	d10d      	bne.n	e274 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e258:	f7f2 fd0e 	bl	c78 <Mcu_schm_read_msr>
    e25c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e25e:	9b00      	ldr	r3, [sp, #0]
    e260:	f003 0301 	and.w	r3, r3, #1
    e264:	2b00      	cmp	r3, #0
    e266:	d100      	bne.n	e26a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e268:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    e26a:	490a      	ldr	r1, [pc, #40]	; (e294 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    e26c:	9b01      	ldr	r3, [sp, #4]
    e26e:	9a00      	ldr	r2, [sp, #0]
    e270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    e274:	4a06      	ldr	r2, [pc, #24]	; (e290 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    e276:	9b01      	ldr	r3, [sp, #4]
    e278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e27c:	1c5a      	adds	r2, r3, #1
    e27e:	4904      	ldr	r1, [pc, #16]	; (e290 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    e280:	9b01      	ldr	r3, [sp, #4]
    e282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e286:	bf00      	nop
    e288:	b003      	add	sp, #12
    e28a:	f85d fb04 	ldr.w	pc, [sp], #4
    e28e:	bf00      	nop
    e290:	1fff9094 	.word	0x1fff9094
    e294:	1fff9090 	.word	0x1fff9090

0000e298 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    e298:	b500      	push	{lr}
    e29a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e29c:	f7f2 ffc6 	bl	122c <Sys_GetCoreID>
    e2a0:	4603      	mov	r3, r0
    e2a2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    e2a4:	4a0d      	ldr	r2, [pc, #52]	; (e2dc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    e2a6:	9b01      	ldr	r3, [sp, #4]
    e2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2ac:	1e5a      	subs	r2, r3, #1
    e2ae:	490b      	ldr	r1, [pc, #44]	; (e2dc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    e2b0:	9b01      	ldr	r3, [sp, #4]
    e2b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    e2b6:	4a0a      	ldr	r2, [pc, #40]	; (e2e0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    e2b8:	9b01      	ldr	r3, [sp, #4]
    e2ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2be:	f003 0301 	and.w	r3, r3, #1
    e2c2:	2b00      	cmp	r3, #0
    e2c4:	d106      	bne.n	e2d4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    e2c6:	4a05      	ldr	r2, [pc, #20]	; (e2dc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    e2c8:	9b01      	ldr	r3, [sp, #4]
    e2ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2ce:	2b00      	cmp	r3, #0
    e2d0:	d100      	bne.n	e2d4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e2d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e2d4:	bf00      	nop
    e2d6:	b003      	add	sp, #12
    e2d8:	f85d fb04 	ldr.w	pc, [sp], #4
    e2dc:	1fff9094 	.word	0x1fff9094
    e2e0:	1fff9090 	.word	0x1fff9090

0000e2e4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    e2e4:	b500      	push	{lr}
    e2e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e2e8:	f7f2 ffa0 	bl	122c <Sys_GetCoreID>
    e2ec:	4603      	mov	r3, r0
    e2ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    e2f0:	4a10      	ldr	r2, [pc, #64]	; (e334 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    e2f2:	9b01      	ldr	r3, [sp, #4]
    e2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2f8:	2b00      	cmp	r3, #0
    e2fa:	d10d      	bne.n	e318 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e2fc:	f7f2 fcbc 	bl	c78 <Mcu_schm_read_msr>
    e300:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e302:	9b00      	ldr	r3, [sp, #0]
    e304:	f003 0301 	and.w	r3, r3, #1
    e308:	2b00      	cmp	r3, #0
    e30a:	d100      	bne.n	e30e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e30c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    e30e:	490a      	ldr	r1, [pc, #40]	; (e338 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    e310:	9b01      	ldr	r3, [sp, #4]
    e312:	9a00      	ldr	r2, [sp, #0]
    e314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    e318:	4a06      	ldr	r2, [pc, #24]	; (e334 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    e31a:	9b01      	ldr	r3, [sp, #4]
    e31c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e320:	1c5a      	adds	r2, r3, #1
    e322:	4904      	ldr	r1, [pc, #16]	; (e334 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    e324:	9b01      	ldr	r3, [sp, #4]
    e326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e32a:	bf00      	nop
    e32c:	b003      	add	sp, #12
    e32e:	f85d fb04 	ldr.w	pc, [sp], #4
    e332:	bf00      	nop
    e334:	1fff909c 	.word	0x1fff909c
    e338:	1fff9098 	.word	0x1fff9098

0000e33c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    e33c:	b500      	push	{lr}
    e33e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e340:	f7f2 ff74 	bl	122c <Sys_GetCoreID>
    e344:	4603      	mov	r3, r0
    e346:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    e348:	4a0d      	ldr	r2, [pc, #52]	; (e380 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    e34a:	9b01      	ldr	r3, [sp, #4]
    e34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e350:	1e5a      	subs	r2, r3, #1
    e352:	490b      	ldr	r1, [pc, #44]	; (e380 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    e354:	9b01      	ldr	r3, [sp, #4]
    e356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    e35a:	4a0a      	ldr	r2, [pc, #40]	; (e384 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    e35c:	9b01      	ldr	r3, [sp, #4]
    e35e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e362:	f003 0301 	and.w	r3, r3, #1
    e366:	2b00      	cmp	r3, #0
    e368:	d106      	bne.n	e378 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    e36a:	4a05      	ldr	r2, [pc, #20]	; (e380 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    e36c:	9b01      	ldr	r3, [sp, #4]
    e36e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e372:	2b00      	cmp	r3, #0
    e374:	d100      	bne.n	e378 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e376:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e378:	bf00      	nop
    e37a:	b003      	add	sp, #12
    e37c:	f85d fb04 	ldr.w	pc, [sp], #4
    e380:	1fff909c 	.word	0x1fff909c
    e384:	1fff9098 	.word	0x1fff9098

0000e388 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    e388:	b500      	push	{lr}
    e38a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e38c:	f7f2 ff4e 	bl	122c <Sys_GetCoreID>
    e390:	4603      	mov	r3, r0
    e392:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    e394:	4a10      	ldr	r2, [pc, #64]	; (e3d8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    e396:	9b01      	ldr	r3, [sp, #4]
    e398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e39c:	2b00      	cmp	r3, #0
    e39e:	d10d      	bne.n	e3bc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e3a0:	f7f2 fc6a 	bl	c78 <Mcu_schm_read_msr>
    e3a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e3a6:	9b00      	ldr	r3, [sp, #0]
    e3a8:	f003 0301 	and.w	r3, r3, #1
    e3ac:	2b00      	cmp	r3, #0
    e3ae:	d100      	bne.n	e3b2 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e3b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    e3b2:	490a      	ldr	r1, [pc, #40]	; (e3dc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    e3b4:	9b01      	ldr	r3, [sp, #4]
    e3b6:	9a00      	ldr	r2, [sp, #0]
    e3b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    e3bc:	4a06      	ldr	r2, [pc, #24]	; (e3d8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    e3be:	9b01      	ldr	r3, [sp, #4]
    e3c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3c4:	1c5a      	adds	r2, r3, #1
    e3c6:	4904      	ldr	r1, [pc, #16]	; (e3d8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    e3c8:	9b01      	ldr	r3, [sp, #4]
    e3ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e3ce:	bf00      	nop
    e3d0:	b003      	add	sp, #12
    e3d2:	f85d fb04 	ldr.w	pc, [sp], #4
    e3d6:	bf00      	nop
    e3d8:	1fff90a4 	.word	0x1fff90a4
    e3dc:	1fff90a0 	.word	0x1fff90a0

0000e3e0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    e3e0:	b500      	push	{lr}
    e3e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e3e4:	f7f2 ff22 	bl	122c <Sys_GetCoreID>
    e3e8:	4603      	mov	r3, r0
    e3ea:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    e3ec:	4a0d      	ldr	r2, [pc, #52]	; (e424 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    e3ee:	9b01      	ldr	r3, [sp, #4]
    e3f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3f4:	1e5a      	subs	r2, r3, #1
    e3f6:	490b      	ldr	r1, [pc, #44]	; (e424 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    e3f8:	9b01      	ldr	r3, [sp, #4]
    e3fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    e3fe:	4a0a      	ldr	r2, [pc, #40]	; (e428 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    e400:	9b01      	ldr	r3, [sp, #4]
    e402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e406:	f003 0301 	and.w	r3, r3, #1
    e40a:	2b00      	cmp	r3, #0
    e40c:	d106      	bne.n	e41c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    e40e:	4a05      	ldr	r2, [pc, #20]	; (e424 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    e410:	9b01      	ldr	r3, [sp, #4]
    e412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e416:	2b00      	cmp	r3, #0
    e418:	d100      	bne.n	e41c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e41a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e41c:	bf00      	nop
    e41e:	b003      	add	sp, #12
    e420:	f85d fb04 	ldr.w	pc, [sp], #4
    e424:	1fff90a4 	.word	0x1fff90a4
    e428:	1fff90a0 	.word	0x1fff90a0

0000e42c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    e42c:	b500      	push	{lr}
    e42e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e430:	f7f2 fefc 	bl	122c <Sys_GetCoreID>
    e434:	4603      	mov	r3, r0
    e436:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    e438:	4a10      	ldr	r2, [pc, #64]	; (e47c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    e43a:	9b01      	ldr	r3, [sp, #4]
    e43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e440:	2b00      	cmp	r3, #0
    e442:	d10d      	bne.n	e460 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e444:	f7f2 fc21 	bl	c8a <Port_schm_read_msr>
    e448:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e44a:	9b00      	ldr	r3, [sp, #0]
    e44c:	f003 0301 	and.w	r3, r3, #1
    e450:	2b00      	cmp	r3, #0
    e452:	d100      	bne.n	e456 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e454:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    e456:	490a      	ldr	r1, [pc, #40]	; (e480 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    e458:	9b01      	ldr	r3, [sp, #4]
    e45a:	9a00      	ldr	r2, [sp, #0]
    e45c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    e460:	4a06      	ldr	r2, [pc, #24]	; (e47c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    e462:	9b01      	ldr	r3, [sp, #4]
    e464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e468:	1c5a      	adds	r2, r3, #1
    e46a:	4904      	ldr	r1, [pc, #16]	; (e47c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    e46c:	9b01      	ldr	r3, [sp, #4]
    e46e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e472:	bf00      	nop
    e474:	b003      	add	sp, #12
    e476:	f85d fb04 	ldr.w	pc, [sp], #4
    e47a:	bf00      	nop
    e47c:	1fff90ac 	.word	0x1fff90ac
    e480:	1fff90a8 	.word	0x1fff90a8

0000e484 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    e484:	b500      	push	{lr}
    e486:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e488:	f7f2 fed0 	bl	122c <Sys_GetCoreID>
    e48c:	4603      	mov	r3, r0
    e48e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    e490:	4a0d      	ldr	r2, [pc, #52]	; (e4c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    e492:	9b01      	ldr	r3, [sp, #4]
    e494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e498:	1e5a      	subs	r2, r3, #1
    e49a:	490b      	ldr	r1, [pc, #44]	; (e4c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    e49c:	9b01      	ldr	r3, [sp, #4]
    e49e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    e4a2:	4a0a      	ldr	r2, [pc, #40]	; (e4cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    e4a4:	9b01      	ldr	r3, [sp, #4]
    e4a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4aa:	f003 0301 	and.w	r3, r3, #1
    e4ae:	2b00      	cmp	r3, #0
    e4b0:	d106      	bne.n	e4c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    e4b2:	4a05      	ldr	r2, [pc, #20]	; (e4c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    e4b4:	9b01      	ldr	r3, [sp, #4]
    e4b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4ba:	2b00      	cmp	r3, #0
    e4bc:	d100      	bne.n	e4c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e4be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e4c0:	bf00      	nop
    e4c2:	b003      	add	sp, #12
    e4c4:	f85d fb04 	ldr.w	pc, [sp], #4
    e4c8:	1fff90ac 	.word	0x1fff90ac
    e4cc:	1fff90a8 	.word	0x1fff90a8

0000e4d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    e4d0:	b500      	push	{lr}
    e4d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e4d4:	f7f2 feaa 	bl	122c <Sys_GetCoreID>
    e4d8:	4603      	mov	r3, r0
    e4da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    e4dc:	4a10      	ldr	r2, [pc, #64]	; (e520 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    e4de:	9b01      	ldr	r3, [sp, #4]
    e4e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4e4:	2b00      	cmp	r3, #0
    e4e6:	d10d      	bne.n	e504 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e4e8:	f7f2 fbcf 	bl	c8a <Port_schm_read_msr>
    e4ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e4ee:	9b00      	ldr	r3, [sp, #0]
    e4f0:	f003 0301 	and.w	r3, r3, #1
    e4f4:	2b00      	cmp	r3, #0
    e4f6:	d100      	bne.n	e4fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e4f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    e4fa:	490a      	ldr	r1, [pc, #40]	; (e524 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    e4fc:	9b01      	ldr	r3, [sp, #4]
    e4fe:	9a00      	ldr	r2, [sp, #0]
    e500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    e504:	4a06      	ldr	r2, [pc, #24]	; (e520 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    e506:	9b01      	ldr	r3, [sp, #4]
    e508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e50c:	1c5a      	adds	r2, r3, #1
    e50e:	4904      	ldr	r1, [pc, #16]	; (e520 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    e510:	9b01      	ldr	r3, [sp, #4]
    e512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e516:	bf00      	nop
    e518:	b003      	add	sp, #12
    e51a:	f85d fb04 	ldr.w	pc, [sp], #4
    e51e:	bf00      	nop
    e520:	1fff90b4 	.word	0x1fff90b4
    e524:	1fff90b0 	.word	0x1fff90b0

0000e528 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    e528:	b500      	push	{lr}
    e52a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e52c:	f7f2 fe7e 	bl	122c <Sys_GetCoreID>
    e530:	4603      	mov	r3, r0
    e532:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    e534:	4a0d      	ldr	r2, [pc, #52]	; (e56c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    e536:	9b01      	ldr	r3, [sp, #4]
    e538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e53c:	1e5a      	subs	r2, r3, #1
    e53e:	490b      	ldr	r1, [pc, #44]	; (e56c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    e540:	9b01      	ldr	r3, [sp, #4]
    e542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    e546:	4a0a      	ldr	r2, [pc, #40]	; (e570 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    e548:	9b01      	ldr	r3, [sp, #4]
    e54a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e54e:	f003 0301 	and.w	r3, r3, #1
    e552:	2b00      	cmp	r3, #0
    e554:	d106      	bne.n	e564 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    e556:	4a05      	ldr	r2, [pc, #20]	; (e56c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    e558:	9b01      	ldr	r3, [sp, #4]
    e55a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e55e:	2b00      	cmp	r3, #0
    e560:	d100      	bne.n	e564 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e562:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e564:	bf00      	nop
    e566:	b003      	add	sp, #12
    e568:	f85d fb04 	ldr.w	pc, [sp], #4
    e56c:	1fff90b4 	.word	0x1fff90b4
    e570:	1fff90b0 	.word	0x1fff90b0

0000e574 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    e574:	b500      	push	{lr}
    e576:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e578:	f7f2 fe58 	bl	122c <Sys_GetCoreID>
    e57c:	4603      	mov	r3, r0
    e57e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    e580:	4a10      	ldr	r2, [pc, #64]	; (e5c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    e582:	9b01      	ldr	r3, [sp, #4]
    e584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e588:	2b00      	cmp	r3, #0
    e58a:	d10d      	bne.n	e5a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e58c:	f7f2 fb7d 	bl	c8a <Port_schm_read_msr>
    e590:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e592:	9b00      	ldr	r3, [sp, #0]
    e594:	f003 0301 	and.w	r3, r3, #1
    e598:	2b00      	cmp	r3, #0
    e59a:	d100      	bne.n	e59e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e59c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    e59e:	490a      	ldr	r1, [pc, #40]	; (e5c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    e5a0:	9b01      	ldr	r3, [sp, #4]
    e5a2:	9a00      	ldr	r2, [sp, #0]
    e5a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    e5a8:	4a06      	ldr	r2, [pc, #24]	; (e5c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    e5aa:	9b01      	ldr	r3, [sp, #4]
    e5ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5b0:	1c5a      	adds	r2, r3, #1
    e5b2:	4904      	ldr	r1, [pc, #16]	; (e5c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    e5b4:	9b01      	ldr	r3, [sp, #4]
    e5b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e5ba:	bf00      	nop
    e5bc:	b003      	add	sp, #12
    e5be:	f85d fb04 	ldr.w	pc, [sp], #4
    e5c2:	bf00      	nop
    e5c4:	1fff90bc 	.word	0x1fff90bc
    e5c8:	1fff90b8 	.word	0x1fff90b8

0000e5cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    e5cc:	b500      	push	{lr}
    e5ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5d0:	f7f2 fe2c 	bl	122c <Sys_GetCoreID>
    e5d4:	4603      	mov	r3, r0
    e5d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    e5d8:	4a0d      	ldr	r2, [pc, #52]	; (e610 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    e5da:	9b01      	ldr	r3, [sp, #4]
    e5dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5e0:	1e5a      	subs	r2, r3, #1
    e5e2:	490b      	ldr	r1, [pc, #44]	; (e610 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    e5e4:	9b01      	ldr	r3, [sp, #4]
    e5e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    e5ea:	4a0a      	ldr	r2, [pc, #40]	; (e614 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    e5ec:	9b01      	ldr	r3, [sp, #4]
    e5ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5f2:	f003 0301 	and.w	r3, r3, #1
    e5f6:	2b00      	cmp	r3, #0
    e5f8:	d106      	bne.n	e608 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    e5fa:	4a05      	ldr	r2, [pc, #20]	; (e610 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    e5fc:	9b01      	ldr	r3, [sp, #4]
    e5fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e602:	2b00      	cmp	r3, #0
    e604:	d100      	bne.n	e608 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e606:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e608:	bf00      	nop
    e60a:	b003      	add	sp, #12
    e60c:	f85d fb04 	ldr.w	pc, [sp], #4
    e610:	1fff90bc 	.word	0x1fff90bc
    e614:	1fff90b8 	.word	0x1fff90b8

0000e618 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    e618:	b500      	push	{lr}
    e61a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e61c:	f7f2 fe06 	bl	122c <Sys_GetCoreID>
    e620:	4603      	mov	r3, r0
    e622:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    e624:	4a10      	ldr	r2, [pc, #64]	; (e668 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    e626:	9b01      	ldr	r3, [sp, #4]
    e628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e62c:	2b00      	cmp	r3, #0
    e62e:	d10d      	bne.n	e64c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e630:	f7f2 fb2b 	bl	c8a <Port_schm_read_msr>
    e634:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e636:	9b00      	ldr	r3, [sp, #0]
    e638:	f003 0301 	and.w	r3, r3, #1
    e63c:	2b00      	cmp	r3, #0
    e63e:	d100      	bne.n	e642 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e640:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    e642:	490a      	ldr	r1, [pc, #40]	; (e66c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    e644:	9b01      	ldr	r3, [sp, #4]
    e646:	9a00      	ldr	r2, [sp, #0]
    e648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    e64c:	4a06      	ldr	r2, [pc, #24]	; (e668 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    e64e:	9b01      	ldr	r3, [sp, #4]
    e650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e654:	1c5a      	adds	r2, r3, #1
    e656:	4904      	ldr	r1, [pc, #16]	; (e668 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    e658:	9b01      	ldr	r3, [sp, #4]
    e65a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e65e:	bf00      	nop
    e660:	b003      	add	sp, #12
    e662:	f85d fb04 	ldr.w	pc, [sp], #4
    e666:	bf00      	nop
    e668:	1fff90c4 	.word	0x1fff90c4
    e66c:	1fff90c0 	.word	0x1fff90c0

0000e670 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    e670:	b500      	push	{lr}
    e672:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e674:	f7f2 fdda 	bl	122c <Sys_GetCoreID>
    e678:	4603      	mov	r3, r0
    e67a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    e67c:	4a0d      	ldr	r2, [pc, #52]	; (e6b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    e67e:	9b01      	ldr	r3, [sp, #4]
    e680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e684:	1e5a      	subs	r2, r3, #1
    e686:	490b      	ldr	r1, [pc, #44]	; (e6b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    e688:	9b01      	ldr	r3, [sp, #4]
    e68a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    e68e:	4a0a      	ldr	r2, [pc, #40]	; (e6b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    e690:	9b01      	ldr	r3, [sp, #4]
    e692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e696:	f003 0301 	and.w	r3, r3, #1
    e69a:	2b00      	cmp	r3, #0
    e69c:	d106      	bne.n	e6ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    e69e:	4a05      	ldr	r2, [pc, #20]	; (e6b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    e6a0:	9b01      	ldr	r3, [sp, #4]
    e6a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6a6:	2b00      	cmp	r3, #0
    e6a8:	d100      	bne.n	e6ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e6aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e6ac:	bf00      	nop
    e6ae:	b003      	add	sp, #12
    e6b0:	f85d fb04 	ldr.w	pc, [sp], #4
    e6b4:	1fff90c4 	.word	0x1fff90c4
    e6b8:	1fff90c0 	.word	0x1fff90c0

0000e6bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    e6bc:	b500      	push	{lr}
    e6be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6c0:	f7f2 fdb4 	bl	122c <Sys_GetCoreID>
    e6c4:	4603      	mov	r3, r0
    e6c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    e6c8:	4a10      	ldr	r2, [pc, #64]	; (e70c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    e6ca:	9b01      	ldr	r3, [sp, #4]
    e6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6d0:	2b00      	cmp	r3, #0
    e6d2:	d10d      	bne.n	e6f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e6d4:	f7f2 fad9 	bl	c8a <Port_schm_read_msr>
    e6d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e6da:	9b00      	ldr	r3, [sp, #0]
    e6dc:	f003 0301 	and.w	r3, r3, #1
    e6e0:	2b00      	cmp	r3, #0
    e6e2:	d100      	bne.n	e6e6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e6e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    e6e6:	490a      	ldr	r1, [pc, #40]	; (e710 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    e6e8:	9b01      	ldr	r3, [sp, #4]
    e6ea:	9a00      	ldr	r2, [sp, #0]
    e6ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    e6f0:	4a06      	ldr	r2, [pc, #24]	; (e70c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    e6f2:	9b01      	ldr	r3, [sp, #4]
    e6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6f8:	1c5a      	adds	r2, r3, #1
    e6fa:	4904      	ldr	r1, [pc, #16]	; (e70c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    e6fc:	9b01      	ldr	r3, [sp, #4]
    e6fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e702:	bf00      	nop
    e704:	b003      	add	sp, #12
    e706:	f85d fb04 	ldr.w	pc, [sp], #4
    e70a:	bf00      	nop
    e70c:	1fff90cc 	.word	0x1fff90cc
    e710:	1fff90c8 	.word	0x1fff90c8

0000e714 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    e714:	b500      	push	{lr}
    e716:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e718:	f7f2 fd88 	bl	122c <Sys_GetCoreID>
    e71c:	4603      	mov	r3, r0
    e71e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    e720:	4a0d      	ldr	r2, [pc, #52]	; (e758 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    e722:	9b01      	ldr	r3, [sp, #4]
    e724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e728:	1e5a      	subs	r2, r3, #1
    e72a:	490b      	ldr	r1, [pc, #44]	; (e758 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    e72c:	9b01      	ldr	r3, [sp, #4]
    e72e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    e732:	4a0a      	ldr	r2, [pc, #40]	; (e75c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    e734:	9b01      	ldr	r3, [sp, #4]
    e736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e73a:	f003 0301 	and.w	r3, r3, #1
    e73e:	2b00      	cmp	r3, #0
    e740:	d106      	bne.n	e750 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    e742:	4a05      	ldr	r2, [pc, #20]	; (e758 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    e744:	9b01      	ldr	r3, [sp, #4]
    e746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e74a:	2b00      	cmp	r3, #0
    e74c:	d100      	bne.n	e750 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e74e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e750:	bf00      	nop
    e752:	b003      	add	sp, #12
    e754:	f85d fb04 	ldr.w	pc, [sp], #4
    e758:	1fff90cc 	.word	0x1fff90cc
    e75c:	1fff90c8 	.word	0x1fff90c8

0000e760 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    e760:	b500      	push	{lr}
    e762:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e764:	f7f2 fd62 	bl	122c <Sys_GetCoreID>
    e768:	4603      	mov	r3, r0
    e76a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    e76c:	4a10      	ldr	r2, [pc, #64]	; (e7b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    e76e:	9b01      	ldr	r3, [sp, #4]
    e770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e774:	2b00      	cmp	r3, #0
    e776:	d10d      	bne.n	e794 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e778:	f7f2 fa87 	bl	c8a <Port_schm_read_msr>
    e77c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e77e:	9b00      	ldr	r3, [sp, #0]
    e780:	f003 0301 	and.w	r3, r3, #1
    e784:	2b00      	cmp	r3, #0
    e786:	d100      	bne.n	e78a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e788:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    e78a:	490a      	ldr	r1, [pc, #40]	; (e7b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    e78c:	9b01      	ldr	r3, [sp, #4]
    e78e:	9a00      	ldr	r2, [sp, #0]
    e790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    e794:	4a06      	ldr	r2, [pc, #24]	; (e7b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    e796:	9b01      	ldr	r3, [sp, #4]
    e798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e79c:	1c5a      	adds	r2, r3, #1
    e79e:	4904      	ldr	r1, [pc, #16]	; (e7b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    e7a0:	9b01      	ldr	r3, [sp, #4]
    e7a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e7a6:	bf00      	nop
    e7a8:	b003      	add	sp, #12
    e7aa:	f85d fb04 	ldr.w	pc, [sp], #4
    e7ae:	bf00      	nop
    e7b0:	1fff90d4 	.word	0x1fff90d4
    e7b4:	1fff90d0 	.word	0x1fff90d0

0000e7b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    e7b8:	b500      	push	{lr}
    e7ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7bc:	f7f2 fd36 	bl	122c <Sys_GetCoreID>
    e7c0:	4603      	mov	r3, r0
    e7c2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    e7c4:	4a0d      	ldr	r2, [pc, #52]	; (e7fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    e7c6:	9b01      	ldr	r3, [sp, #4]
    e7c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7cc:	1e5a      	subs	r2, r3, #1
    e7ce:	490b      	ldr	r1, [pc, #44]	; (e7fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    e7d0:	9b01      	ldr	r3, [sp, #4]
    e7d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    e7d6:	4a0a      	ldr	r2, [pc, #40]	; (e800 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    e7d8:	9b01      	ldr	r3, [sp, #4]
    e7da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7de:	f003 0301 	and.w	r3, r3, #1
    e7e2:	2b00      	cmp	r3, #0
    e7e4:	d106      	bne.n	e7f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    e7e6:	4a05      	ldr	r2, [pc, #20]	; (e7fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    e7e8:	9b01      	ldr	r3, [sp, #4]
    e7ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7ee:	2b00      	cmp	r3, #0
    e7f0:	d100      	bne.n	e7f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e7f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e7f4:	bf00      	nop
    e7f6:	b003      	add	sp, #12
    e7f8:	f85d fb04 	ldr.w	pc, [sp], #4
    e7fc:	1fff90d4 	.word	0x1fff90d4
    e800:	1fff90d0 	.word	0x1fff90d0

0000e804 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    e804:	b500      	push	{lr}
    e806:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e808:	f7f2 fd10 	bl	122c <Sys_GetCoreID>
    e80c:	4603      	mov	r3, r0
    e80e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    e810:	4a10      	ldr	r2, [pc, #64]	; (e854 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    e812:	9b01      	ldr	r3, [sp, #4]
    e814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e818:	2b00      	cmp	r3, #0
    e81a:	d10d      	bne.n	e838 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e81c:	f7f2 fa35 	bl	c8a <Port_schm_read_msr>
    e820:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e822:	9b00      	ldr	r3, [sp, #0]
    e824:	f003 0301 	and.w	r3, r3, #1
    e828:	2b00      	cmp	r3, #0
    e82a:	d100      	bne.n	e82e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e82c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    e82e:	490a      	ldr	r1, [pc, #40]	; (e858 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    e830:	9b01      	ldr	r3, [sp, #4]
    e832:	9a00      	ldr	r2, [sp, #0]
    e834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    e838:	4a06      	ldr	r2, [pc, #24]	; (e854 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    e83a:	9b01      	ldr	r3, [sp, #4]
    e83c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e840:	1c5a      	adds	r2, r3, #1
    e842:	4904      	ldr	r1, [pc, #16]	; (e854 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    e844:	9b01      	ldr	r3, [sp, #4]
    e846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e84a:	bf00      	nop
    e84c:	b003      	add	sp, #12
    e84e:	f85d fb04 	ldr.w	pc, [sp], #4
    e852:	bf00      	nop
    e854:	1fff90dc 	.word	0x1fff90dc
    e858:	1fff90d8 	.word	0x1fff90d8

0000e85c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    e85c:	b500      	push	{lr}
    e85e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e860:	f7f2 fce4 	bl	122c <Sys_GetCoreID>
    e864:	4603      	mov	r3, r0
    e866:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    e868:	4a0d      	ldr	r2, [pc, #52]	; (e8a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    e86a:	9b01      	ldr	r3, [sp, #4]
    e86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e870:	1e5a      	subs	r2, r3, #1
    e872:	490b      	ldr	r1, [pc, #44]	; (e8a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    e874:	9b01      	ldr	r3, [sp, #4]
    e876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    e87a:	4a0a      	ldr	r2, [pc, #40]	; (e8a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    e87c:	9b01      	ldr	r3, [sp, #4]
    e87e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e882:	f003 0301 	and.w	r3, r3, #1
    e886:	2b00      	cmp	r3, #0
    e888:	d106      	bne.n	e898 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    e88a:	4a05      	ldr	r2, [pc, #20]	; (e8a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    e88c:	9b01      	ldr	r3, [sp, #4]
    e88e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e892:	2b00      	cmp	r3, #0
    e894:	d100      	bne.n	e898 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e896:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e898:	bf00      	nop
    e89a:	b003      	add	sp, #12
    e89c:	f85d fb04 	ldr.w	pc, [sp], #4
    e8a0:	1fff90dc 	.word	0x1fff90dc
    e8a4:	1fff90d8 	.word	0x1fff90d8

0000e8a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    e8a8:	b500      	push	{lr}
    e8aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8ac:	f7f2 fcbe 	bl	122c <Sys_GetCoreID>
    e8b0:	4603      	mov	r3, r0
    e8b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    e8b4:	4a10      	ldr	r2, [pc, #64]	; (e8f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    e8b6:	9b01      	ldr	r3, [sp, #4]
    e8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8bc:	2b00      	cmp	r3, #0
    e8be:	d10d      	bne.n	e8dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e8c0:	f7f2 f9e3 	bl	c8a <Port_schm_read_msr>
    e8c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e8c6:	9b00      	ldr	r3, [sp, #0]
    e8c8:	f003 0301 	and.w	r3, r3, #1
    e8cc:	2b00      	cmp	r3, #0
    e8ce:	d100      	bne.n	e8d2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e8d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    e8d2:	490a      	ldr	r1, [pc, #40]	; (e8fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    e8d4:	9b01      	ldr	r3, [sp, #4]
    e8d6:	9a00      	ldr	r2, [sp, #0]
    e8d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    e8dc:	4a06      	ldr	r2, [pc, #24]	; (e8f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    e8de:	9b01      	ldr	r3, [sp, #4]
    e8e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8e4:	1c5a      	adds	r2, r3, #1
    e8e6:	4904      	ldr	r1, [pc, #16]	; (e8f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    e8e8:	9b01      	ldr	r3, [sp, #4]
    e8ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e8ee:	bf00      	nop
    e8f0:	b003      	add	sp, #12
    e8f2:	f85d fb04 	ldr.w	pc, [sp], #4
    e8f6:	bf00      	nop
    e8f8:	1fff90e4 	.word	0x1fff90e4
    e8fc:	1fff90e0 	.word	0x1fff90e0

0000e900 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    e900:	b500      	push	{lr}
    e902:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e904:	f7f2 fc92 	bl	122c <Sys_GetCoreID>
    e908:	4603      	mov	r3, r0
    e90a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    e90c:	4a0d      	ldr	r2, [pc, #52]	; (e944 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    e90e:	9b01      	ldr	r3, [sp, #4]
    e910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e914:	1e5a      	subs	r2, r3, #1
    e916:	490b      	ldr	r1, [pc, #44]	; (e944 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    e918:	9b01      	ldr	r3, [sp, #4]
    e91a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    e91e:	4a0a      	ldr	r2, [pc, #40]	; (e948 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    e920:	9b01      	ldr	r3, [sp, #4]
    e922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e926:	f003 0301 	and.w	r3, r3, #1
    e92a:	2b00      	cmp	r3, #0
    e92c:	d106      	bne.n	e93c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    e92e:	4a05      	ldr	r2, [pc, #20]	; (e944 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    e930:	9b01      	ldr	r3, [sp, #4]
    e932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e936:	2b00      	cmp	r3, #0
    e938:	d100      	bne.n	e93c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e93a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e93c:	bf00      	nop
    e93e:	b003      	add	sp, #12
    e940:	f85d fb04 	ldr.w	pc, [sp], #4
    e944:	1fff90e4 	.word	0x1fff90e4
    e948:	1fff90e0 	.word	0x1fff90e0

0000e94c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    e94c:	b500      	push	{lr}
    e94e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e950:	f7f2 fc6c 	bl	122c <Sys_GetCoreID>
    e954:	4603      	mov	r3, r0
    e956:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    e958:	4a10      	ldr	r2, [pc, #64]	; (e99c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    e95a:	9b01      	ldr	r3, [sp, #4]
    e95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e960:	2b00      	cmp	r3, #0
    e962:	d10d      	bne.n	e980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e964:	f7f2 f991 	bl	c8a <Port_schm_read_msr>
    e968:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e96a:	9b00      	ldr	r3, [sp, #0]
    e96c:	f003 0301 	and.w	r3, r3, #1
    e970:	2b00      	cmp	r3, #0
    e972:	d100      	bne.n	e976 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e974:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    e976:	490a      	ldr	r1, [pc, #40]	; (e9a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    e978:	9b01      	ldr	r3, [sp, #4]
    e97a:	9a00      	ldr	r2, [sp, #0]
    e97c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    e980:	4a06      	ldr	r2, [pc, #24]	; (e99c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    e982:	9b01      	ldr	r3, [sp, #4]
    e984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e988:	1c5a      	adds	r2, r3, #1
    e98a:	4904      	ldr	r1, [pc, #16]	; (e99c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    e98c:	9b01      	ldr	r3, [sp, #4]
    e98e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e992:	bf00      	nop
    e994:	b003      	add	sp, #12
    e996:	f85d fb04 	ldr.w	pc, [sp], #4
    e99a:	bf00      	nop
    e99c:	1fff90ec 	.word	0x1fff90ec
    e9a0:	1fff90e8 	.word	0x1fff90e8

0000e9a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    e9a4:	b500      	push	{lr}
    e9a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9a8:	f7f2 fc40 	bl	122c <Sys_GetCoreID>
    e9ac:	4603      	mov	r3, r0
    e9ae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    e9b0:	4a0d      	ldr	r2, [pc, #52]	; (e9e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    e9b2:	9b01      	ldr	r3, [sp, #4]
    e9b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9b8:	1e5a      	subs	r2, r3, #1
    e9ba:	490b      	ldr	r1, [pc, #44]	; (e9e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    e9bc:	9b01      	ldr	r3, [sp, #4]
    e9be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    e9c2:	4a0a      	ldr	r2, [pc, #40]	; (e9ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    e9c4:	9b01      	ldr	r3, [sp, #4]
    e9c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9ca:	f003 0301 	and.w	r3, r3, #1
    e9ce:	2b00      	cmp	r3, #0
    e9d0:	d106      	bne.n	e9e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    e9d2:	4a05      	ldr	r2, [pc, #20]	; (e9e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    e9d4:	9b01      	ldr	r3, [sp, #4]
    e9d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9da:	2b00      	cmp	r3, #0
    e9dc:	d100      	bne.n	e9e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e9de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e9e0:	bf00      	nop
    e9e2:	b003      	add	sp, #12
    e9e4:	f85d fb04 	ldr.w	pc, [sp], #4
    e9e8:	1fff90ec 	.word	0x1fff90ec
    e9ec:	1fff90e8 	.word	0x1fff90e8

0000e9f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    e9f0:	b500      	push	{lr}
    e9f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9f4:	f7f2 fc1a 	bl	122c <Sys_GetCoreID>
    e9f8:	4603      	mov	r3, r0
    e9fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    e9fc:	4a10      	ldr	r2, [pc, #64]	; (ea40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    e9fe:	9b01      	ldr	r3, [sp, #4]
    ea00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea04:	2b00      	cmp	r3, #0
    ea06:	d10d      	bne.n	ea24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ea08:	f7f2 f93f 	bl	c8a <Port_schm_read_msr>
    ea0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ea0e:	9b00      	ldr	r3, [sp, #0]
    ea10:	f003 0301 	and.w	r3, r3, #1
    ea14:	2b00      	cmp	r3, #0
    ea16:	d100      	bne.n	ea1a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ea18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    ea1a:	490a      	ldr	r1, [pc, #40]	; (ea44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    ea1c:	9b01      	ldr	r3, [sp, #4]
    ea1e:	9a00      	ldr	r2, [sp, #0]
    ea20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    ea24:	4a06      	ldr	r2, [pc, #24]	; (ea40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    ea26:	9b01      	ldr	r3, [sp, #4]
    ea28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea2c:	1c5a      	adds	r2, r3, #1
    ea2e:	4904      	ldr	r1, [pc, #16]	; (ea40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    ea30:	9b01      	ldr	r3, [sp, #4]
    ea32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ea36:	bf00      	nop
    ea38:	b003      	add	sp, #12
    ea3a:	f85d fb04 	ldr.w	pc, [sp], #4
    ea3e:	bf00      	nop
    ea40:	1fff90f4 	.word	0x1fff90f4
    ea44:	1fff90f0 	.word	0x1fff90f0

0000ea48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    ea48:	b500      	push	{lr}
    ea4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea4c:	f7f2 fbee 	bl	122c <Sys_GetCoreID>
    ea50:	4603      	mov	r3, r0
    ea52:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    ea54:	4a0d      	ldr	r2, [pc, #52]	; (ea8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    ea56:	9b01      	ldr	r3, [sp, #4]
    ea58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea5c:	1e5a      	subs	r2, r3, #1
    ea5e:	490b      	ldr	r1, [pc, #44]	; (ea8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    ea60:	9b01      	ldr	r3, [sp, #4]
    ea62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    ea66:	4a0a      	ldr	r2, [pc, #40]	; (ea90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    ea68:	9b01      	ldr	r3, [sp, #4]
    ea6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea6e:	f003 0301 	and.w	r3, r3, #1
    ea72:	2b00      	cmp	r3, #0
    ea74:	d106      	bne.n	ea84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    ea76:	4a05      	ldr	r2, [pc, #20]	; (ea8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    ea78:	9b01      	ldr	r3, [sp, #4]
    ea7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea7e:	2b00      	cmp	r3, #0
    ea80:	d100      	bne.n	ea84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ea82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ea84:	bf00      	nop
    ea86:	b003      	add	sp, #12
    ea88:	f85d fb04 	ldr.w	pc, [sp], #4
    ea8c:	1fff90f4 	.word	0x1fff90f4
    ea90:	1fff90f0 	.word	0x1fff90f0

0000ea94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    ea94:	b500      	push	{lr}
    ea96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea98:	f7f2 fbc8 	bl	122c <Sys_GetCoreID>
    ea9c:	4603      	mov	r3, r0
    ea9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    eaa0:	4a10      	ldr	r2, [pc, #64]	; (eae4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    eaa2:	9b01      	ldr	r3, [sp, #4]
    eaa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaa8:	2b00      	cmp	r3, #0
    eaaa:	d10d      	bne.n	eac8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eaac:	f7f2 f8ed 	bl	c8a <Port_schm_read_msr>
    eab0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eab2:	9b00      	ldr	r3, [sp, #0]
    eab4:	f003 0301 	and.w	r3, r3, #1
    eab8:	2b00      	cmp	r3, #0
    eaba:	d100      	bne.n	eabe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eabc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    eabe:	490a      	ldr	r1, [pc, #40]	; (eae8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    eac0:	9b01      	ldr	r3, [sp, #4]
    eac2:	9a00      	ldr	r2, [sp, #0]
    eac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    eac8:	4a06      	ldr	r2, [pc, #24]	; (eae4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    eaca:	9b01      	ldr	r3, [sp, #4]
    eacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ead0:	1c5a      	adds	r2, r3, #1
    ead2:	4904      	ldr	r1, [pc, #16]	; (eae4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    ead4:	9b01      	ldr	r3, [sp, #4]
    ead6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eada:	bf00      	nop
    eadc:	b003      	add	sp, #12
    eade:	f85d fb04 	ldr.w	pc, [sp], #4
    eae2:	bf00      	nop
    eae4:	1fff90fc 	.word	0x1fff90fc
    eae8:	1fff90f8 	.word	0x1fff90f8

0000eaec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    eaec:	b500      	push	{lr}
    eaee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eaf0:	f7f2 fb9c 	bl	122c <Sys_GetCoreID>
    eaf4:	4603      	mov	r3, r0
    eaf6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    eaf8:	4a0d      	ldr	r2, [pc, #52]	; (eb30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    eafa:	9b01      	ldr	r3, [sp, #4]
    eafc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb00:	1e5a      	subs	r2, r3, #1
    eb02:	490b      	ldr	r1, [pc, #44]	; (eb30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    eb04:	9b01      	ldr	r3, [sp, #4]
    eb06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    eb0a:	4a0a      	ldr	r2, [pc, #40]	; (eb34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    eb0c:	9b01      	ldr	r3, [sp, #4]
    eb0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb12:	f003 0301 	and.w	r3, r3, #1
    eb16:	2b00      	cmp	r3, #0
    eb18:	d106      	bne.n	eb28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    eb1a:	4a05      	ldr	r2, [pc, #20]	; (eb30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    eb1c:	9b01      	ldr	r3, [sp, #4]
    eb1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb22:	2b00      	cmp	r3, #0
    eb24:	d100      	bne.n	eb28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eb26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eb28:	bf00      	nop
    eb2a:	b003      	add	sp, #12
    eb2c:	f85d fb04 	ldr.w	pc, [sp], #4
    eb30:	1fff90fc 	.word	0x1fff90fc
    eb34:	1fff90f8 	.word	0x1fff90f8

0000eb38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    eb38:	b500      	push	{lr}
    eb3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb3c:	f7f2 fb76 	bl	122c <Sys_GetCoreID>
    eb40:	4603      	mov	r3, r0
    eb42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    eb44:	4a10      	ldr	r2, [pc, #64]	; (eb88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    eb46:	9b01      	ldr	r3, [sp, #4]
    eb48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb4c:	2b00      	cmp	r3, #0
    eb4e:	d10d      	bne.n	eb6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eb50:	f7f2 f89b 	bl	c8a <Port_schm_read_msr>
    eb54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eb56:	9b00      	ldr	r3, [sp, #0]
    eb58:	f003 0301 	and.w	r3, r3, #1
    eb5c:	2b00      	cmp	r3, #0
    eb5e:	d100      	bne.n	eb62 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eb60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    eb62:	490a      	ldr	r1, [pc, #40]	; (eb8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    eb64:	9b01      	ldr	r3, [sp, #4]
    eb66:	9a00      	ldr	r2, [sp, #0]
    eb68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    eb6c:	4a06      	ldr	r2, [pc, #24]	; (eb88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    eb6e:	9b01      	ldr	r3, [sp, #4]
    eb70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb74:	1c5a      	adds	r2, r3, #1
    eb76:	4904      	ldr	r1, [pc, #16]	; (eb88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    eb78:	9b01      	ldr	r3, [sp, #4]
    eb7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eb7e:	bf00      	nop
    eb80:	b003      	add	sp, #12
    eb82:	f85d fb04 	ldr.w	pc, [sp], #4
    eb86:	bf00      	nop
    eb88:	1fff9104 	.word	0x1fff9104
    eb8c:	1fff9100 	.word	0x1fff9100

0000eb90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    eb90:	b500      	push	{lr}
    eb92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb94:	f7f2 fb4a 	bl	122c <Sys_GetCoreID>
    eb98:	4603      	mov	r3, r0
    eb9a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    eb9c:	4a0d      	ldr	r2, [pc, #52]	; (ebd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    eb9e:	9b01      	ldr	r3, [sp, #4]
    eba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eba4:	1e5a      	subs	r2, r3, #1
    eba6:	490b      	ldr	r1, [pc, #44]	; (ebd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    eba8:	9b01      	ldr	r3, [sp, #4]
    ebaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    ebae:	4a0a      	ldr	r2, [pc, #40]	; (ebd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    ebb0:	9b01      	ldr	r3, [sp, #4]
    ebb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebb6:	f003 0301 	and.w	r3, r3, #1
    ebba:	2b00      	cmp	r3, #0
    ebbc:	d106      	bne.n	ebcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    ebbe:	4a05      	ldr	r2, [pc, #20]	; (ebd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    ebc0:	9b01      	ldr	r3, [sp, #4]
    ebc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebc6:	2b00      	cmp	r3, #0
    ebc8:	d100      	bne.n	ebcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ebca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ebcc:	bf00      	nop
    ebce:	b003      	add	sp, #12
    ebd0:	f85d fb04 	ldr.w	pc, [sp], #4
    ebd4:	1fff9104 	.word	0x1fff9104
    ebd8:	1fff9100 	.word	0x1fff9100

0000ebdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    ebdc:	b500      	push	{lr}
    ebde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ebe0:	f7f2 fb24 	bl	122c <Sys_GetCoreID>
    ebe4:	4603      	mov	r3, r0
    ebe6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    ebe8:	4a10      	ldr	r2, [pc, #64]	; (ec2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    ebea:	9b01      	ldr	r3, [sp, #4]
    ebec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebf0:	2b00      	cmp	r3, #0
    ebf2:	d10d      	bne.n	ec10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ebf4:	f7f2 f849 	bl	c8a <Port_schm_read_msr>
    ebf8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ebfa:	9b00      	ldr	r3, [sp, #0]
    ebfc:	f003 0301 	and.w	r3, r3, #1
    ec00:	2b00      	cmp	r3, #0
    ec02:	d100      	bne.n	ec06 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ec04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    ec06:	490a      	ldr	r1, [pc, #40]	; (ec30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    ec08:	9b01      	ldr	r3, [sp, #4]
    ec0a:	9a00      	ldr	r2, [sp, #0]
    ec0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    ec10:	4a06      	ldr	r2, [pc, #24]	; (ec2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    ec12:	9b01      	ldr	r3, [sp, #4]
    ec14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec18:	1c5a      	adds	r2, r3, #1
    ec1a:	4904      	ldr	r1, [pc, #16]	; (ec2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    ec1c:	9b01      	ldr	r3, [sp, #4]
    ec1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ec22:	bf00      	nop
    ec24:	b003      	add	sp, #12
    ec26:	f85d fb04 	ldr.w	pc, [sp], #4
    ec2a:	bf00      	nop
    ec2c:	1fff910c 	.word	0x1fff910c
    ec30:	1fff9108 	.word	0x1fff9108

0000ec34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    ec34:	b500      	push	{lr}
    ec36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec38:	f7f2 faf8 	bl	122c <Sys_GetCoreID>
    ec3c:	4603      	mov	r3, r0
    ec3e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    ec40:	4a0d      	ldr	r2, [pc, #52]	; (ec78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    ec42:	9b01      	ldr	r3, [sp, #4]
    ec44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec48:	1e5a      	subs	r2, r3, #1
    ec4a:	490b      	ldr	r1, [pc, #44]	; (ec78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    ec4c:	9b01      	ldr	r3, [sp, #4]
    ec4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    ec52:	4a0a      	ldr	r2, [pc, #40]	; (ec7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    ec54:	9b01      	ldr	r3, [sp, #4]
    ec56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec5a:	f003 0301 	and.w	r3, r3, #1
    ec5e:	2b00      	cmp	r3, #0
    ec60:	d106      	bne.n	ec70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    ec62:	4a05      	ldr	r2, [pc, #20]	; (ec78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    ec64:	9b01      	ldr	r3, [sp, #4]
    ec66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec6a:	2b00      	cmp	r3, #0
    ec6c:	d100      	bne.n	ec70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ec6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ec70:	bf00      	nop
    ec72:	b003      	add	sp, #12
    ec74:	f85d fb04 	ldr.w	pc, [sp], #4
    ec78:	1fff910c 	.word	0x1fff910c
    ec7c:	1fff9108 	.word	0x1fff9108

0000ec80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    ec80:	b500      	push	{lr}
    ec82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec84:	f7f2 fad2 	bl	122c <Sys_GetCoreID>
    ec88:	4603      	mov	r3, r0
    ec8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    ec8c:	4a10      	ldr	r2, [pc, #64]	; (ecd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    ec8e:	9b01      	ldr	r3, [sp, #4]
    ec90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec94:	2b00      	cmp	r3, #0
    ec96:	d10d      	bne.n	ecb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ec98:	f7f1 fff7 	bl	c8a <Port_schm_read_msr>
    ec9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ec9e:	9b00      	ldr	r3, [sp, #0]
    eca0:	f003 0301 	and.w	r3, r3, #1
    eca4:	2b00      	cmp	r3, #0
    eca6:	d100      	bne.n	ecaa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eca8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    ecaa:	490a      	ldr	r1, [pc, #40]	; (ecd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    ecac:	9b01      	ldr	r3, [sp, #4]
    ecae:	9a00      	ldr	r2, [sp, #0]
    ecb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    ecb4:	4a06      	ldr	r2, [pc, #24]	; (ecd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    ecb6:	9b01      	ldr	r3, [sp, #4]
    ecb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecbc:	1c5a      	adds	r2, r3, #1
    ecbe:	4904      	ldr	r1, [pc, #16]	; (ecd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    ecc0:	9b01      	ldr	r3, [sp, #4]
    ecc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ecc6:	bf00      	nop
    ecc8:	b003      	add	sp, #12
    ecca:	f85d fb04 	ldr.w	pc, [sp], #4
    ecce:	bf00      	nop
    ecd0:	1fff9114 	.word	0x1fff9114
    ecd4:	1fff9110 	.word	0x1fff9110

0000ecd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    ecd8:	b500      	push	{lr}
    ecda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ecdc:	f7f2 faa6 	bl	122c <Sys_GetCoreID>
    ece0:	4603      	mov	r3, r0
    ece2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    ece4:	4a0d      	ldr	r2, [pc, #52]	; (ed1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    ece6:	9b01      	ldr	r3, [sp, #4]
    ece8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecec:	1e5a      	subs	r2, r3, #1
    ecee:	490b      	ldr	r1, [pc, #44]	; (ed1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    ecf0:	9b01      	ldr	r3, [sp, #4]
    ecf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    ecf6:	4a0a      	ldr	r2, [pc, #40]	; (ed20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    ecf8:	9b01      	ldr	r3, [sp, #4]
    ecfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecfe:	f003 0301 	and.w	r3, r3, #1
    ed02:	2b00      	cmp	r3, #0
    ed04:	d106      	bne.n	ed14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    ed06:	4a05      	ldr	r2, [pc, #20]	; (ed1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    ed08:	9b01      	ldr	r3, [sp, #4]
    ed0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed0e:	2b00      	cmp	r3, #0
    ed10:	d100      	bne.n	ed14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ed12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ed14:	bf00      	nop
    ed16:	b003      	add	sp, #12
    ed18:	f85d fb04 	ldr.w	pc, [sp], #4
    ed1c:	1fff9114 	.word	0x1fff9114
    ed20:	1fff9110 	.word	0x1fff9110

0000ed24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    ed24:	b500      	push	{lr}
    ed26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed28:	f7f2 fa80 	bl	122c <Sys_GetCoreID>
    ed2c:	4603      	mov	r3, r0
    ed2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    ed30:	4a10      	ldr	r2, [pc, #64]	; (ed74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    ed32:	9b01      	ldr	r3, [sp, #4]
    ed34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed38:	2b00      	cmp	r3, #0
    ed3a:	d10d      	bne.n	ed58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ed3c:	f7f1 ffa5 	bl	c8a <Port_schm_read_msr>
    ed40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ed42:	9b00      	ldr	r3, [sp, #0]
    ed44:	f003 0301 	and.w	r3, r3, #1
    ed48:	2b00      	cmp	r3, #0
    ed4a:	d100      	bne.n	ed4e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ed4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    ed4e:	490a      	ldr	r1, [pc, #40]	; (ed78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    ed50:	9b01      	ldr	r3, [sp, #4]
    ed52:	9a00      	ldr	r2, [sp, #0]
    ed54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    ed58:	4a06      	ldr	r2, [pc, #24]	; (ed74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    ed5a:	9b01      	ldr	r3, [sp, #4]
    ed5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed60:	1c5a      	adds	r2, r3, #1
    ed62:	4904      	ldr	r1, [pc, #16]	; (ed74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    ed64:	9b01      	ldr	r3, [sp, #4]
    ed66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ed6a:	bf00      	nop
    ed6c:	b003      	add	sp, #12
    ed6e:	f85d fb04 	ldr.w	pc, [sp], #4
    ed72:	bf00      	nop
    ed74:	1fff911c 	.word	0x1fff911c
    ed78:	1fff9118 	.word	0x1fff9118

0000ed7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    ed7c:	b500      	push	{lr}
    ed7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed80:	f7f2 fa54 	bl	122c <Sys_GetCoreID>
    ed84:	4603      	mov	r3, r0
    ed86:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    ed88:	4a0d      	ldr	r2, [pc, #52]	; (edc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    ed8a:	9b01      	ldr	r3, [sp, #4]
    ed8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed90:	1e5a      	subs	r2, r3, #1
    ed92:	490b      	ldr	r1, [pc, #44]	; (edc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    ed94:	9b01      	ldr	r3, [sp, #4]
    ed96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    ed9a:	4a0a      	ldr	r2, [pc, #40]	; (edc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    ed9c:	9b01      	ldr	r3, [sp, #4]
    ed9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eda2:	f003 0301 	and.w	r3, r3, #1
    eda6:	2b00      	cmp	r3, #0
    eda8:	d106      	bne.n	edb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    edaa:	4a05      	ldr	r2, [pc, #20]	; (edc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    edac:	9b01      	ldr	r3, [sp, #4]
    edae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edb2:	2b00      	cmp	r3, #0
    edb4:	d100      	bne.n	edb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    edb6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    edb8:	bf00      	nop
    edba:	b003      	add	sp, #12
    edbc:	f85d fb04 	ldr.w	pc, [sp], #4
    edc0:	1fff911c 	.word	0x1fff911c
    edc4:	1fff9118 	.word	0x1fff9118

0000edc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    edc8:	b500      	push	{lr}
    edca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    edcc:	f7f2 fa2e 	bl	122c <Sys_GetCoreID>
    edd0:	4603      	mov	r3, r0
    edd2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    edd4:	4a10      	ldr	r2, [pc, #64]	; (ee18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    edd6:	9b01      	ldr	r3, [sp, #4]
    edd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eddc:	2b00      	cmp	r3, #0
    edde:	d10d      	bne.n	edfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ede0:	f7f1 ff53 	bl	c8a <Port_schm_read_msr>
    ede4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ede6:	9b00      	ldr	r3, [sp, #0]
    ede8:	f003 0301 	and.w	r3, r3, #1
    edec:	2b00      	cmp	r3, #0
    edee:	d100      	bne.n	edf2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    edf0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    edf2:	490a      	ldr	r1, [pc, #40]	; (ee1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    edf4:	9b01      	ldr	r3, [sp, #4]
    edf6:	9a00      	ldr	r2, [sp, #0]
    edf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    edfc:	4a06      	ldr	r2, [pc, #24]	; (ee18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    edfe:	9b01      	ldr	r3, [sp, #4]
    ee00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee04:	1c5a      	adds	r2, r3, #1
    ee06:	4904      	ldr	r1, [pc, #16]	; (ee18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    ee08:	9b01      	ldr	r3, [sp, #4]
    ee0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ee0e:	bf00      	nop
    ee10:	b003      	add	sp, #12
    ee12:	f85d fb04 	ldr.w	pc, [sp], #4
    ee16:	bf00      	nop
    ee18:	1fff9124 	.word	0x1fff9124
    ee1c:	1fff9120 	.word	0x1fff9120

0000ee20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    ee20:	b500      	push	{lr}
    ee22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee24:	f7f2 fa02 	bl	122c <Sys_GetCoreID>
    ee28:	4603      	mov	r3, r0
    ee2a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    ee2c:	4a0d      	ldr	r2, [pc, #52]	; (ee64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    ee2e:	9b01      	ldr	r3, [sp, #4]
    ee30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee34:	1e5a      	subs	r2, r3, #1
    ee36:	490b      	ldr	r1, [pc, #44]	; (ee64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    ee38:	9b01      	ldr	r3, [sp, #4]
    ee3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    ee3e:	4a0a      	ldr	r2, [pc, #40]	; (ee68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    ee40:	9b01      	ldr	r3, [sp, #4]
    ee42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee46:	f003 0301 	and.w	r3, r3, #1
    ee4a:	2b00      	cmp	r3, #0
    ee4c:	d106      	bne.n	ee5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    ee4e:	4a05      	ldr	r2, [pc, #20]	; (ee64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    ee50:	9b01      	ldr	r3, [sp, #4]
    ee52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee56:	2b00      	cmp	r3, #0
    ee58:	d100      	bne.n	ee5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ee5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ee5c:	bf00      	nop
    ee5e:	b003      	add	sp, #12
    ee60:	f85d fb04 	ldr.w	pc, [sp], #4
    ee64:	1fff9124 	.word	0x1fff9124
    ee68:	1fff9120 	.word	0x1fff9120

0000ee6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    ee6c:	b500      	push	{lr}
    ee6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee70:	f7f2 f9dc 	bl	122c <Sys_GetCoreID>
    ee74:	4603      	mov	r3, r0
    ee76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    ee78:	4a10      	ldr	r2, [pc, #64]	; (eebc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    ee7a:	9b01      	ldr	r3, [sp, #4]
    ee7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee80:	2b00      	cmp	r3, #0
    ee82:	d10d      	bne.n	eea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ee84:	f7f1 ff01 	bl	c8a <Port_schm_read_msr>
    ee88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ee8a:	9b00      	ldr	r3, [sp, #0]
    ee8c:	f003 0301 	and.w	r3, r3, #1
    ee90:	2b00      	cmp	r3, #0
    ee92:	d100      	bne.n	ee96 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ee94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    ee96:	490a      	ldr	r1, [pc, #40]	; (eec0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    ee98:	9b01      	ldr	r3, [sp, #4]
    ee9a:	9a00      	ldr	r2, [sp, #0]
    ee9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    eea0:	4a06      	ldr	r2, [pc, #24]	; (eebc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    eea2:	9b01      	ldr	r3, [sp, #4]
    eea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eea8:	1c5a      	adds	r2, r3, #1
    eeaa:	4904      	ldr	r1, [pc, #16]	; (eebc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    eeac:	9b01      	ldr	r3, [sp, #4]
    eeae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eeb2:	bf00      	nop
    eeb4:	b003      	add	sp, #12
    eeb6:	f85d fb04 	ldr.w	pc, [sp], #4
    eeba:	bf00      	nop
    eebc:	1fff912c 	.word	0x1fff912c
    eec0:	1fff9128 	.word	0x1fff9128

0000eec4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    eec4:	b500      	push	{lr}
    eec6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eec8:	f7f2 f9b0 	bl	122c <Sys_GetCoreID>
    eecc:	4603      	mov	r3, r0
    eece:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    eed0:	4a0d      	ldr	r2, [pc, #52]	; (ef08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    eed2:	9b01      	ldr	r3, [sp, #4]
    eed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eed8:	1e5a      	subs	r2, r3, #1
    eeda:	490b      	ldr	r1, [pc, #44]	; (ef08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    eedc:	9b01      	ldr	r3, [sp, #4]
    eede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    eee2:	4a0a      	ldr	r2, [pc, #40]	; (ef0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    eee4:	9b01      	ldr	r3, [sp, #4]
    eee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eeea:	f003 0301 	and.w	r3, r3, #1
    eeee:	2b00      	cmp	r3, #0
    eef0:	d106      	bne.n	ef00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    eef2:	4a05      	ldr	r2, [pc, #20]	; (ef08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    eef4:	9b01      	ldr	r3, [sp, #4]
    eef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eefa:	2b00      	cmp	r3, #0
    eefc:	d100      	bne.n	ef00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eefe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ef00:	bf00      	nop
    ef02:	b003      	add	sp, #12
    ef04:	f85d fb04 	ldr.w	pc, [sp], #4
    ef08:	1fff912c 	.word	0x1fff912c
    ef0c:	1fff9128 	.word	0x1fff9128

0000ef10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    ef10:	b500      	push	{lr}
    ef12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef14:	f7f2 f98a 	bl	122c <Sys_GetCoreID>
    ef18:	4603      	mov	r3, r0
    ef1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    ef1c:	4a10      	ldr	r2, [pc, #64]	; (ef60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    ef1e:	9b01      	ldr	r3, [sp, #4]
    ef20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef24:	2b00      	cmp	r3, #0
    ef26:	d10d      	bne.n	ef44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ef28:	f7f1 feaf 	bl	c8a <Port_schm_read_msr>
    ef2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ef2e:	9b00      	ldr	r3, [sp, #0]
    ef30:	f003 0301 	and.w	r3, r3, #1
    ef34:	2b00      	cmp	r3, #0
    ef36:	d100      	bne.n	ef3a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ef38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    ef3a:	490a      	ldr	r1, [pc, #40]	; (ef64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    ef3c:	9b01      	ldr	r3, [sp, #4]
    ef3e:	9a00      	ldr	r2, [sp, #0]
    ef40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    ef44:	4a06      	ldr	r2, [pc, #24]	; (ef60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    ef46:	9b01      	ldr	r3, [sp, #4]
    ef48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef4c:	1c5a      	adds	r2, r3, #1
    ef4e:	4904      	ldr	r1, [pc, #16]	; (ef60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    ef50:	9b01      	ldr	r3, [sp, #4]
    ef52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ef56:	bf00      	nop
    ef58:	b003      	add	sp, #12
    ef5a:	f85d fb04 	ldr.w	pc, [sp], #4
    ef5e:	bf00      	nop
    ef60:	1fff9134 	.word	0x1fff9134
    ef64:	1fff9130 	.word	0x1fff9130

0000ef68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    ef68:	b500      	push	{lr}
    ef6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef6c:	f7f2 f95e 	bl	122c <Sys_GetCoreID>
    ef70:	4603      	mov	r3, r0
    ef72:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    ef74:	4a0d      	ldr	r2, [pc, #52]	; (efac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    ef76:	9b01      	ldr	r3, [sp, #4]
    ef78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef7c:	1e5a      	subs	r2, r3, #1
    ef7e:	490b      	ldr	r1, [pc, #44]	; (efac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    ef80:	9b01      	ldr	r3, [sp, #4]
    ef82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    ef86:	4a0a      	ldr	r2, [pc, #40]	; (efb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    ef88:	9b01      	ldr	r3, [sp, #4]
    ef8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef8e:	f003 0301 	and.w	r3, r3, #1
    ef92:	2b00      	cmp	r3, #0
    ef94:	d106      	bne.n	efa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    ef96:	4a05      	ldr	r2, [pc, #20]	; (efac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    ef98:	9b01      	ldr	r3, [sp, #4]
    ef9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef9e:	2b00      	cmp	r3, #0
    efa0:	d100      	bne.n	efa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    efa2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    efa4:	bf00      	nop
    efa6:	b003      	add	sp, #12
    efa8:	f85d fb04 	ldr.w	pc, [sp], #4
    efac:	1fff9134 	.word	0x1fff9134
    efb0:	1fff9130 	.word	0x1fff9130

0000efb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    efb4:	b500      	push	{lr}
    efb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    efb8:	f7f2 f938 	bl	122c <Sys_GetCoreID>
    efbc:	4603      	mov	r3, r0
    efbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    efc0:	4a10      	ldr	r2, [pc, #64]	; (f004 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    efc2:	9b01      	ldr	r3, [sp, #4]
    efc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efc8:	2b00      	cmp	r3, #0
    efca:	d10d      	bne.n	efe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    efcc:	f7f1 fe5d 	bl	c8a <Port_schm_read_msr>
    efd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    efd2:	9b00      	ldr	r3, [sp, #0]
    efd4:	f003 0301 	and.w	r3, r3, #1
    efd8:	2b00      	cmp	r3, #0
    efda:	d100      	bne.n	efde <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    efdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    efde:	490a      	ldr	r1, [pc, #40]	; (f008 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    efe0:	9b01      	ldr	r3, [sp, #4]
    efe2:	9a00      	ldr	r2, [sp, #0]
    efe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    efe8:	4a06      	ldr	r2, [pc, #24]	; (f004 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    efea:	9b01      	ldr	r3, [sp, #4]
    efec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eff0:	1c5a      	adds	r2, r3, #1
    eff2:	4904      	ldr	r1, [pc, #16]	; (f004 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    eff4:	9b01      	ldr	r3, [sp, #4]
    eff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    effa:	bf00      	nop
    effc:	b003      	add	sp, #12
    effe:	f85d fb04 	ldr.w	pc, [sp], #4
    f002:	bf00      	nop
    f004:	1fff913c 	.word	0x1fff913c
    f008:	1fff9138 	.word	0x1fff9138

0000f00c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    f00c:	b500      	push	{lr}
    f00e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f010:	f7f2 f90c 	bl	122c <Sys_GetCoreID>
    f014:	4603      	mov	r3, r0
    f016:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    f018:	4a0d      	ldr	r2, [pc, #52]	; (f050 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    f01a:	9b01      	ldr	r3, [sp, #4]
    f01c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f020:	1e5a      	subs	r2, r3, #1
    f022:	490b      	ldr	r1, [pc, #44]	; (f050 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    f024:	9b01      	ldr	r3, [sp, #4]
    f026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    f02a:	4a0a      	ldr	r2, [pc, #40]	; (f054 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    f02c:	9b01      	ldr	r3, [sp, #4]
    f02e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f032:	f003 0301 	and.w	r3, r3, #1
    f036:	2b00      	cmp	r3, #0
    f038:	d106      	bne.n	f048 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    f03a:	4a05      	ldr	r2, [pc, #20]	; (f050 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    f03c:	9b01      	ldr	r3, [sp, #4]
    f03e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f042:	2b00      	cmp	r3, #0
    f044:	d100      	bne.n	f048 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f046:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f048:	bf00      	nop
    f04a:	b003      	add	sp, #12
    f04c:	f85d fb04 	ldr.w	pc, [sp], #4
    f050:	1fff913c 	.word	0x1fff913c
    f054:	1fff9138 	.word	0x1fff9138

0000f058 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    f058:	b500      	push	{lr}
    f05a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f05c:	f7f2 f8e6 	bl	122c <Sys_GetCoreID>
    f060:	4603      	mov	r3, r0
    f062:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    f064:	4a10      	ldr	r2, [pc, #64]	; (f0a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    f066:	9b01      	ldr	r3, [sp, #4]
    f068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f06c:	2b00      	cmp	r3, #0
    f06e:	d10d      	bne.n	f08c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f070:	f7f1 fe0b 	bl	c8a <Port_schm_read_msr>
    f074:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f076:	9b00      	ldr	r3, [sp, #0]
    f078:	f003 0301 	and.w	r3, r3, #1
    f07c:	2b00      	cmp	r3, #0
    f07e:	d100      	bne.n	f082 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f080:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    f082:	490a      	ldr	r1, [pc, #40]	; (f0ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    f084:	9b01      	ldr	r3, [sp, #4]
    f086:	9a00      	ldr	r2, [sp, #0]
    f088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    f08c:	4a06      	ldr	r2, [pc, #24]	; (f0a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    f08e:	9b01      	ldr	r3, [sp, #4]
    f090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f094:	1c5a      	adds	r2, r3, #1
    f096:	4904      	ldr	r1, [pc, #16]	; (f0a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    f098:	9b01      	ldr	r3, [sp, #4]
    f09a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f09e:	bf00      	nop
    f0a0:	b003      	add	sp, #12
    f0a2:	f85d fb04 	ldr.w	pc, [sp], #4
    f0a6:	bf00      	nop
    f0a8:	1fff9144 	.word	0x1fff9144
    f0ac:	1fff9140 	.word	0x1fff9140

0000f0b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    f0b0:	b500      	push	{lr}
    f0b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0b4:	f7f2 f8ba 	bl	122c <Sys_GetCoreID>
    f0b8:	4603      	mov	r3, r0
    f0ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    f0bc:	4a0d      	ldr	r2, [pc, #52]	; (f0f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    f0be:	9b01      	ldr	r3, [sp, #4]
    f0c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0c4:	1e5a      	subs	r2, r3, #1
    f0c6:	490b      	ldr	r1, [pc, #44]	; (f0f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    f0c8:	9b01      	ldr	r3, [sp, #4]
    f0ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    f0ce:	4a0a      	ldr	r2, [pc, #40]	; (f0f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    f0d0:	9b01      	ldr	r3, [sp, #4]
    f0d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0d6:	f003 0301 	and.w	r3, r3, #1
    f0da:	2b00      	cmp	r3, #0
    f0dc:	d106      	bne.n	f0ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    f0de:	4a05      	ldr	r2, [pc, #20]	; (f0f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    f0e0:	9b01      	ldr	r3, [sp, #4]
    f0e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0e6:	2b00      	cmp	r3, #0
    f0e8:	d100      	bne.n	f0ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f0ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f0ec:	bf00      	nop
    f0ee:	b003      	add	sp, #12
    f0f0:	f85d fb04 	ldr.w	pc, [sp], #4
    f0f4:	1fff9144 	.word	0x1fff9144
    f0f8:	1fff9140 	.word	0x1fff9140

0000f0fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    f0fc:	b500      	push	{lr}
    f0fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f100:	f7f2 f894 	bl	122c <Sys_GetCoreID>
    f104:	4603      	mov	r3, r0
    f106:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    f108:	4a10      	ldr	r2, [pc, #64]	; (f14c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    f10a:	9b01      	ldr	r3, [sp, #4]
    f10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f110:	2b00      	cmp	r3, #0
    f112:	d10d      	bne.n	f130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f114:	f7f1 fdb9 	bl	c8a <Port_schm_read_msr>
    f118:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f11a:	9b00      	ldr	r3, [sp, #0]
    f11c:	f003 0301 	and.w	r3, r3, #1
    f120:	2b00      	cmp	r3, #0
    f122:	d100      	bne.n	f126 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f124:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    f126:	490a      	ldr	r1, [pc, #40]	; (f150 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    f128:	9b01      	ldr	r3, [sp, #4]
    f12a:	9a00      	ldr	r2, [sp, #0]
    f12c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    f130:	4a06      	ldr	r2, [pc, #24]	; (f14c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    f132:	9b01      	ldr	r3, [sp, #4]
    f134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f138:	1c5a      	adds	r2, r3, #1
    f13a:	4904      	ldr	r1, [pc, #16]	; (f14c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    f13c:	9b01      	ldr	r3, [sp, #4]
    f13e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f142:	bf00      	nop
    f144:	b003      	add	sp, #12
    f146:	f85d fb04 	ldr.w	pc, [sp], #4
    f14a:	bf00      	nop
    f14c:	1fff914c 	.word	0x1fff914c
    f150:	1fff9148 	.word	0x1fff9148

0000f154 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    f154:	b500      	push	{lr}
    f156:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f158:	f7f2 f868 	bl	122c <Sys_GetCoreID>
    f15c:	4603      	mov	r3, r0
    f15e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    f160:	4a0d      	ldr	r2, [pc, #52]	; (f198 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    f162:	9b01      	ldr	r3, [sp, #4]
    f164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f168:	1e5a      	subs	r2, r3, #1
    f16a:	490b      	ldr	r1, [pc, #44]	; (f198 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    f16c:	9b01      	ldr	r3, [sp, #4]
    f16e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    f172:	4a0a      	ldr	r2, [pc, #40]	; (f19c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    f174:	9b01      	ldr	r3, [sp, #4]
    f176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f17a:	f003 0301 	and.w	r3, r3, #1
    f17e:	2b00      	cmp	r3, #0
    f180:	d106      	bne.n	f190 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    f182:	4a05      	ldr	r2, [pc, #20]	; (f198 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    f184:	9b01      	ldr	r3, [sp, #4]
    f186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f18a:	2b00      	cmp	r3, #0
    f18c:	d100      	bne.n	f190 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f18e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f190:	bf00      	nop
    f192:	b003      	add	sp, #12
    f194:	f85d fb04 	ldr.w	pc, [sp], #4
    f198:	1fff914c 	.word	0x1fff914c
    f19c:	1fff9148 	.word	0x1fff9148

0000f1a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    f1a0:	b500      	push	{lr}
    f1a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1a4:	f7f2 f842 	bl	122c <Sys_GetCoreID>
    f1a8:	4603      	mov	r3, r0
    f1aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    f1ac:	4a10      	ldr	r2, [pc, #64]	; (f1f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    f1ae:	9b01      	ldr	r3, [sp, #4]
    f1b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1b4:	2b00      	cmp	r3, #0
    f1b6:	d10d      	bne.n	f1d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f1b8:	f7f1 fd67 	bl	c8a <Port_schm_read_msr>
    f1bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f1be:	9b00      	ldr	r3, [sp, #0]
    f1c0:	f003 0301 	and.w	r3, r3, #1
    f1c4:	2b00      	cmp	r3, #0
    f1c6:	d100      	bne.n	f1ca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f1c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    f1ca:	490a      	ldr	r1, [pc, #40]	; (f1f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    f1cc:	9b01      	ldr	r3, [sp, #4]
    f1ce:	9a00      	ldr	r2, [sp, #0]
    f1d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    f1d4:	4a06      	ldr	r2, [pc, #24]	; (f1f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    f1d6:	9b01      	ldr	r3, [sp, #4]
    f1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1dc:	1c5a      	adds	r2, r3, #1
    f1de:	4904      	ldr	r1, [pc, #16]	; (f1f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    f1e0:	9b01      	ldr	r3, [sp, #4]
    f1e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f1e6:	bf00      	nop
    f1e8:	b003      	add	sp, #12
    f1ea:	f85d fb04 	ldr.w	pc, [sp], #4
    f1ee:	bf00      	nop
    f1f0:	1fff9154 	.word	0x1fff9154
    f1f4:	1fff9150 	.word	0x1fff9150

0000f1f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    f1f8:	b500      	push	{lr}
    f1fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1fc:	f7f2 f816 	bl	122c <Sys_GetCoreID>
    f200:	4603      	mov	r3, r0
    f202:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    f204:	4a0d      	ldr	r2, [pc, #52]	; (f23c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    f206:	9b01      	ldr	r3, [sp, #4]
    f208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f20c:	1e5a      	subs	r2, r3, #1
    f20e:	490b      	ldr	r1, [pc, #44]	; (f23c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    f210:	9b01      	ldr	r3, [sp, #4]
    f212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    f216:	4a0a      	ldr	r2, [pc, #40]	; (f240 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    f218:	9b01      	ldr	r3, [sp, #4]
    f21a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f21e:	f003 0301 	and.w	r3, r3, #1
    f222:	2b00      	cmp	r3, #0
    f224:	d106      	bne.n	f234 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    f226:	4a05      	ldr	r2, [pc, #20]	; (f23c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    f228:	9b01      	ldr	r3, [sp, #4]
    f22a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f22e:	2b00      	cmp	r3, #0
    f230:	d100      	bne.n	f234 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f232:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f234:	bf00      	nop
    f236:	b003      	add	sp, #12
    f238:	f85d fb04 	ldr.w	pc, [sp], #4
    f23c:	1fff9154 	.word	0x1fff9154
    f240:	1fff9150 	.word	0x1fff9150

0000f244 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    f244:	b500      	push	{lr}
    f246:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f248:	f7f1 fff0 	bl	122c <Sys_GetCoreID>
    f24c:	4603      	mov	r3, r0
    f24e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    f250:	4a10      	ldr	r2, [pc, #64]	; (f294 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    f252:	9b01      	ldr	r3, [sp, #4]
    f254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f258:	2b00      	cmp	r3, #0
    f25a:	d10d      	bne.n	f278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f25c:	f7f1 fd15 	bl	c8a <Port_schm_read_msr>
    f260:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f262:	9b00      	ldr	r3, [sp, #0]
    f264:	f003 0301 	and.w	r3, r3, #1
    f268:	2b00      	cmp	r3, #0
    f26a:	d100      	bne.n	f26e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f26c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    f26e:	490a      	ldr	r1, [pc, #40]	; (f298 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    f270:	9b01      	ldr	r3, [sp, #4]
    f272:	9a00      	ldr	r2, [sp, #0]
    f274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    f278:	4a06      	ldr	r2, [pc, #24]	; (f294 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    f27a:	9b01      	ldr	r3, [sp, #4]
    f27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f280:	1c5a      	adds	r2, r3, #1
    f282:	4904      	ldr	r1, [pc, #16]	; (f294 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    f284:	9b01      	ldr	r3, [sp, #4]
    f286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f28a:	bf00      	nop
    f28c:	b003      	add	sp, #12
    f28e:	f85d fb04 	ldr.w	pc, [sp], #4
    f292:	bf00      	nop
    f294:	1fff915c 	.word	0x1fff915c
    f298:	1fff9158 	.word	0x1fff9158

0000f29c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    f29c:	b500      	push	{lr}
    f29e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2a0:	f7f1 ffc4 	bl	122c <Sys_GetCoreID>
    f2a4:	4603      	mov	r3, r0
    f2a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    f2a8:	4a0d      	ldr	r2, [pc, #52]	; (f2e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    f2aa:	9b01      	ldr	r3, [sp, #4]
    f2ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2b0:	1e5a      	subs	r2, r3, #1
    f2b2:	490b      	ldr	r1, [pc, #44]	; (f2e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    f2b4:	9b01      	ldr	r3, [sp, #4]
    f2b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    f2ba:	4a0a      	ldr	r2, [pc, #40]	; (f2e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    f2bc:	9b01      	ldr	r3, [sp, #4]
    f2be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2c2:	f003 0301 	and.w	r3, r3, #1
    f2c6:	2b00      	cmp	r3, #0
    f2c8:	d106      	bne.n	f2d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    f2ca:	4a05      	ldr	r2, [pc, #20]	; (f2e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    f2cc:	9b01      	ldr	r3, [sp, #4]
    f2ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2d2:	2b00      	cmp	r3, #0
    f2d4:	d100      	bne.n	f2d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f2d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f2d8:	bf00      	nop
    f2da:	b003      	add	sp, #12
    f2dc:	f85d fb04 	ldr.w	pc, [sp], #4
    f2e0:	1fff915c 	.word	0x1fff915c
    f2e4:	1fff9158 	.word	0x1fff9158

0000f2e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    f2e8:	b500      	push	{lr}
    f2ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2ec:	f7f1 ff9e 	bl	122c <Sys_GetCoreID>
    f2f0:	4603      	mov	r3, r0
    f2f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    f2f4:	4a10      	ldr	r2, [pc, #64]	; (f338 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    f2f6:	9b01      	ldr	r3, [sp, #4]
    f2f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2fc:	2b00      	cmp	r3, #0
    f2fe:	d10d      	bne.n	f31c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f300:	f7f1 fcc3 	bl	c8a <Port_schm_read_msr>
    f304:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f306:	9b00      	ldr	r3, [sp, #0]
    f308:	f003 0301 	and.w	r3, r3, #1
    f30c:	2b00      	cmp	r3, #0
    f30e:	d100      	bne.n	f312 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f310:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    f312:	490a      	ldr	r1, [pc, #40]	; (f33c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    f314:	9b01      	ldr	r3, [sp, #4]
    f316:	9a00      	ldr	r2, [sp, #0]
    f318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    f31c:	4a06      	ldr	r2, [pc, #24]	; (f338 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    f31e:	9b01      	ldr	r3, [sp, #4]
    f320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f324:	1c5a      	adds	r2, r3, #1
    f326:	4904      	ldr	r1, [pc, #16]	; (f338 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    f328:	9b01      	ldr	r3, [sp, #4]
    f32a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f32e:	bf00      	nop
    f330:	b003      	add	sp, #12
    f332:	f85d fb04 	ldr.w	pc, [sp], #4
    f336:	bf00      	nop
    f338:	1fff9164 	.word	0x1fff9164
    f33c:	1fff9160 	.word	0x1fff9160

0000f340 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    f340:	b500      	push	{lr}
    f342:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f344:	f7f1 ff72 	bl	122c <Sys_GetCoreID>
    f348:	4603      	mov	r3, r0
    f34a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    f34c:	4a0d      	ldr	r2, [pc, #52]	; (f384 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    f34e:	9b01      	ldr	r3, [sp, #4]
    f350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f354:	1e5a      	subs	r2, r3, #1
    f356:	490b      	ldr	r1, [pc, #44]	; (f384 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    f358:	9b01      	ldr	r3, [sp, #4]
    f35a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    f35e:	4a0a      	ldr	r2, [pc, #40]	; (f388 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    f360:	9b01      	ldr	r3, [sp, #4]
    f362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f366:	f003 0301 	and.w	r3, r3, #1
    f36a:	2b00      	cmp	r3, #0
    f36c:	d106      	bne.n	f37c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    f36e:	4a05      	ldr	r2, [pc, #20]	; (f384 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    f370:	9b01      	ldr	r3, [sp, #4]
    f372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f376:	2b00      	cmp	r3, #0
    f378:	d100      	bne.n	f37c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f37a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f37c:	bf00      	nop
    f37e:	b003      	add	sp, #12
    f380:	f85d fb04 	ldr.w	pc, [sp], #4
    f384:	1fff9164 	.word	0x1fff9164
    f388:	1fff9160 	.word	0x1fff9160

0000f38c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    f38c:	b500      	push	{lr}
    f38e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f390:	f7f1 ff4c 	bl	122c <Sys_GetCoreID>
    f394:	4603      	mov	r3, r0
    f396:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    f398:	4a10      	ldr	r2, [pc, #64]	; (f3dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    f39a:	9b01      	ldr	r3, [sp, #4]
    f39c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3a0:	2b00      	cmp	r3, #0
    f3a2:	d10d      	bne.n	f3c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f3a4:	f7f1 fc71 	bl	c8a <Port_schm_read_msr>
    f3a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f3aa:	9b00      	ldr	r3, [sp, #0]
    f3ac:	f003 0301 	and.w	r3, r3, #1
    f3b0:	2b00      	cmp	r3, #0
    f3b2:	d100      	bne.n	f3b6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f3b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    f3b6:	490a      	ldr	r1, [pc, #40]	; (f3e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    f3b8:	9b01      	ldr	r3, [sp, #4]
    f3ba:	9a00      	ldr	r2, [sp, #0]
    f3bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    f3c0:	4a06      	ldr	r2, [pc, #24]	; (f3dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    f3c2:	9b01      	ldr	r3, [sp, #4]
    f3c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3c8:	1c5a      	adds	r2, r3, #1
    f3ca:	4904      	ldr	r1, [pc, #16]	; (f3dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    f3cc:	9b01      	ldr	r3, [sp, #4]
    f3ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f3d2:	bf00      	nop
    f3d4:	b003      	add	sp, #12
    f3d6:	f85d fb04 	ldr.w	pc, [sp], #4
    f3da:	bf00      	nop
    f3dc:	1fff916c 	.word	0x1fff916c
    f3e0:	1fff9168 	.word	0x1fff9168

0000f3e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    f3e4:	b500      	push	{lr}
    f3e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f3e8:	f7f1 ff20 	bl	122c <Sys_GetCoreID>
    f3ec:	4603      	mov	r3, r0
    f3ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    f3f0:	4a0d      	ldr	r2, [pc, #52]	; (f428 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    f3f2:	9b01      	ldr	r3, [sp, #4]
    f3f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3f8:	1e5a      	subs	r2, r3, #1
    f3fa:	490b      	ldr	r1, [pc, #44]	; (f428 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    f3fc:	9b01      	ldr	r3, [sp, #4]
    f3fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    f402:	4a0a      	ldr	r2, [pc, #40]	; (f42c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    f404:	9b01      	ldr	r3, [sp, #4]
    f406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f40a:	f003 0301 	and.w	r3, r3, #1
    f40e:	2b00      	cmp	r3, #0
    f410:	d106      	bne.n	f420 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    f412:	4a05      	ldr	r2, [pc, #20]	; (f428 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    f414:	9b01      	ldr	r3, [sp, #4]
    f416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f41a:	2b00      	cmp	r3, #0
    f41c:	d100      	bne.n	f420 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f41e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f420:	bf00      	nop
    f422:	b003      	add	sp, #12
    f424:	f85d fb04 	ldr.w	pc, [sp], #4
    f428:	1fff916c 	.word	0x1fff916c
    f42c:	1fff9168 	.word	0x1fff9168

0000f430 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    f430:	b500      	push	{lr}
    f432:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f434:	f7f1 fefa 	bl	122c <Sys_GetCoreID>
    f438:	4603      	mov	r3, r0
    f43a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    f43c:	4a10      	ldr	r2, [pc, #64]	; (f480 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    f43e:	9b01      	ldr	r3, [sp, #4]
    f440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f444:	2b00      	cmp	r3, #0
    f446:	d10d      	bne.n	f464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f448:	f7f1 fc1f 	bl	c8a <Port_schm_read_msr>
    f44c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f44e:	9b00      	ldr	r3, [sp, #0]
    f450:	f003 0301 	and.w	r3, r3, #1
    f454:	2b00      	cmp	r3, #0
    f456:	d100      	bne.n	f45a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f458:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    f45a:	490a      	ldr	r1, [pc, #40]	; (f484 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    f45c:	9b01      	ldr	r3, [sp, #4]
    f45e:	9a00      	ldr	r2, [sp, #0]
    f460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    f464:	4a06      	ldr	r2, [pc, #24]	; (f480 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    f466:	9b01      	ldr	r3, [sp, #4]
    f468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f46c:	1c5a      	adds	r2, r3, #1
    f46e:	4904      	ldr	r1, [pc, #16]	; (f480 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    f470:	9b01      	ldr	r3, [sp, #4]
    f472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f476:	bf00      	nop
    f478:	b003      	add	sp, #12
    f47a:	f85d fb04 	ldr.w	pc, [sp], #4
    f47e:	bf00      	nop
    f480:	1fff9174 	.word	0x1fff9174
    f484:	1fff9170 	.word	0x1fff9170

0000f488 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    f488:	b500      	push	{lr}
    f48a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f48c:	f7f1 fece 	bl	122c <Sys_GetCoreID>
    f490:	4603      	mov	r3, r0
    f492:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    f494:	4a0d      	ldr	r2, [pc, #52]	; (f4cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    f496:	9b01      	ldr	r3, [sp, #4]
    f498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f49c:	1e5a      	subs	r2, r3, #1
    f49e:	490b      	ldr	r1, [pc, #44]	; (f4cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    f4a0:	9b01      	ldr	r3, [sp, #4]
    f4a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    f4a6:	4a0a      	ldr	r2, [pc, #40]	; (f4d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    f4a8:	9b01      	ldr	r3, [sp, #4]
    f4aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4ae:	f003 0301 	and.w	r3, r3, #1
    f4b2:	2b00      	cmp	r3, #0
    f4b4:	d106      	bne.n	f4c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    f4b6:	4a05      	ldr	r2, [pc, #20]	; (f4cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    f4b8:	9b01      	ldr	r3, [sp, #4]
    f4ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4be:	2b00      	cmp	r3, #0
    f4c0:	d100      	bne.n	f4c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f4c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f4c4:	bf00      	nop
    f4c6:	b003      	add	sp, #12
    f4c8:	f85d fb04 	ldr.w	pc, [sp], #4
    f4cc:	1fff9174 	.word	0x1fff9174
    f4d0:	1fff9170 	.word	0x1fff9170

0000f4d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    f4d4:	b500      	push	{lr}
    f4d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4d8:	f7f1 fea8 	bl	122c <Sys_GetCoreID>
    f4dc:	4603      	mov	r3, r0
    f4de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    f4e0:	4a10      	ldr	r2, [pc, #64]	; (f524 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    f4e2:	9b01      	ldr	r3, [sp, #4]
    f4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4e8:	2b00      	cmp	r3, #0
    f4ea:	d10d      	bne.n	f508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f4ec:	f7f1 fbcd 	bl	c8a <Port_schm_read_msr>
    f4f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f4f2:	9b00      	ldr	r3, [sp, #0]
    f4f4:	f003 0301 	and.w	r3, r3, #1
    f4f8:	2b00      	cmp	r3, #0
    f4fa:	d100      	bne.n	f4fe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f4fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    f4fe:	490a      	ldr	r1, [pc, #40]	; (f528 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    f500:	9b01      	ldr	r3, [sp, #4]
    f502:	9a00      	ldr	r2, [sp, #0]
    f504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    f508:	4a06      	ldr	r2, [pc, #24]	; (f524 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    f50a:	9b01      	ldr	r3, [sp, #4]
    f50c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f510:	1c5a      	adds	r2, r3, #1
    f512:	4904      	ldr	r1, [pc, #16]	; (f524 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    f514:	9b01      	ldr	r3, [sp, #4]
    f516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f51a:	bf00      	nop
    f51c:	b003      	add	sp, #12
    f51e:	f85d fb04 	ldr.w	pc, [sp], #4
    f522:	bf00      	nop
    f524:	1fff917c 	.word	0x1fff917c
    f528:	1fff9178 	.word	0x1fff9178

0000f52c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    f52c:	b500      	push	{lr}
    f52e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f530:	f7f1 fe7c 	bl	122c <Sys_GetCoreID>
    f534:	4603      	mov	r3, r0
    f536:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    f538:	4a0d      	ldr	r2, [pc, #52]	; (f570 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    f53a:	9b01      	ldr	r3, [sp, #4]
    f53c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f540:	1e5a      	subs	r2, r3, #1
    f542:	490b      	ldr	r1, [pc, #44]	; (f570 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    f544:	9b01      	ldr	r3, [sp, #4]
    f546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    f54a:	4a0a      	ldr	r2, [pc, #40]	; (f574 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    f54c:	9b01      	ldr	r3, [sp, #4]
    f54e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f552:	f003 0301 	and.w	r3, r3, #1
    f556:	2b00      	cmp	r3, #0
    f558:	d106      	bne.n	f568 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    f55a:	4a05      	ldr	r2, [pc, #20]	; (f570 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    f55c:	9b01      	ldr	r3, [sp, #4]
    f55e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f562:	2b00      	cmp	r3, #0
    f564:	d100      	bne.n	f568 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f566:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f568:	bf00      	nop
    f56a:	b003      	add	sp, #12
    f56c:	f85d fb04 	ldr.w	pc, [sp], #4
    f570:	1fff917c 	.word	0x1fff917c
    f574:	1fff9178 	.word	0x1fff9178

0000f578 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    f578:	b500      	push	{lr}
    f57a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f57c:	f7f1 fe56 	bl	122c <Sys_GetCoreID>
    f580:	4603      	mov	r3, r0
    f582:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    f584:	4a10      	ldr	r2, [pc, #64]	; (f5c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    f586:	9b01      	ldr	r3, [sp, #4]
    f588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f58c:	2b00      	cmp	r3, #0
    f58e:	d10d      	bne.n	f5ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f590:	f7f1 fb7b 	bl	c8a <Port_schm_read_msr>
    f594:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f596:	9b00      	ldr	r3, [sp, #0]
    f598:	f003 0301 	and.w	r3, r3, #1
    f59c:	2b00      	cmp	r3, #0
    f59e:	d100      	bne.n	f5a2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f5a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    f5a2:	490a      	ldr	r1, [pc, #40]	; (f5cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    f5a4:	9b01      	ldr	r3, [sp, #4]
    f5a6:	9a00      	ldr	r2, [sp, #0]
    f5a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    f5ac:	4a06      	ldr	r2, [pc, #24]	; (f5c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    f5ae:	9b01      	ldr	r3, [sp, #4]
    f5b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5b4:	1c5a      	adds	r2, r3, #1
    f5b6:	4904      	ldr	r1, [pc, #16]	; (f5c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    f5b8:	9b01      	ldr	r3, [sp, #4]
    f5ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f5be:	bf00      	nop
    f5c0:	b003      	add	sp, #12
    f5c2:	f85d fb04 	ldr.w	pc, [sp], #4
    f5c6:	bf00      	nop
    f5c8:	1fff9184 	.word	0x1fff9184
    f5cc:	1fff9180 	.word	0x1fff9180

0000f5d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    f5d0:	b500      	push	{lr}
    f5d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5d4:	f7f1 fe2a 	bl	122c <Sys_GetCoreID>
    f5d8:	4603      	mov	r3, r0
    f5da:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    f5dc:	4a0d      	ldr	r2, [pc, #52]	; (f614 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    f5de:	9b01      	ldr	r3, [sp, #4]
    f5e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5e4:	1e5a      	subs	r2, r3, #1
    f5e6:	490b      	ldr	r1, [pc, #44]	; (f614 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    f5e8:	9b01      	ldr	r3, [sp, #4]
    f5ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    f5ee:	4a0a      	ldr	r2, [pc, #40]	; (f618 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    f5f0:	9b01      	ldr	r3, [sp, #4]
    f5f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5f6:	f003 0301 	and.w	r3, r3, #1
    f5fa:	2b00      	cmp	r3, #0
    f5fc:	d106      	bne.n	f60c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    f5fe:	4a05      	ldr	r2, [pc, #20]	; (f614 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    f600:	9b01      	ldr	r3, [sp, #4]
    f602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f606:	2b00      	cmp	r3, #0
    f608:	d100      	bne.n	f60c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f60a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f60c:	bf00      	nop
    f60e:	b003      	add	sp, #12
    f610:	f85d fb04 	ldr.w	pc, [sp], #4
    f614:	1fff9184 	.word	0x1fff9184
    f618:	1fff9180 	.word	0x1fff9180

0000f61c <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    f61c:	bf00      	nop
    f61e:	4770      	bx	lr

0000f620 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    f620:	b510      	push	{r4, lr}
    f622:	b084      	sub	sp, #16
    f624:	4604      	mov	r4, r0
    f626:	4608      	mov	r0, r1
    f628:	4611      	mov	r1, r2
    f62a:	461a      	mov	r2, r3
    f62c:	4623      	mov	r3, r4
    f62e:	f8ad 3006 	strh.w	r3, [sp, #6]
    f632:	4603      	mov	r3, r0
    f634:	f88d 3005 	strb.w	r3, [sp, #5]
    f638:	460b      	mov	r3, r1
    f63a:	f88d 3004 	strb.w	r3, [sp, #4]
    f63e:	4613      	mov	r3, r2
    f640:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f644:	f7f1 fdf2 	bl	122c <Sys_GetCoreID>
    f648:	4603      	mov	r3, r0
    f64a:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    f64c:	490d      	ldr	r1, [pc, #52]	; (f684 <Det_ReportError+0x64>)
    f64e:	9b03      	ldr	r3, [sp, #12]
    f650:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f654:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    f658:	4a0b      	ldr	r2, [pc, #44]	; (f688 <Det_ReportError+0x68>)
    f65a:	9b03      	ldr	r3, [sp, #12]
    f65c:	4413      	add	r3, r2
    f65e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    f662:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    f664:	4a09      	ldr	r2, [pc, #36]	; (f68c <Det_ReportError+0x6c>)
    f666:	9b03      	ldr	r3, [sp, #12]
    f668:	4413      	add	r3, r2
    f66a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    f66e:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    f670:	4a07      	ldr	r2, [pc, #28]	; (f690 <Det_ReportError+0x70>)
    f672:	9b03      	ldr	r3, [sp, #12]
    f674:	4413      	add	r3, r2
    f676:	f89d 2003 	ldrb.w	r2, [sp, #3]
    f67a:	701a      	strb	r2, [r3, #0]

    return E_OK;
    f67c:	2300      	movs	r3, #0
}
    f67e:	4618      	mov	r0, r3
    f680:	b004      	add	sp, #16
    f682:	bd10      	pop	{r4, pc}
    f684:	1fff91b0 	.word	0x1fff91b0
    f688:	1fff9188 	.word	0x1fff9188
    f68c:	1fff918c 	.word	0x1fff918c
    f690:	1fff9190 	.word	0x1fff9190

0000f694 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    f694:	b510      	push	{r4, lr}
    f696:	b084      	sub	sp, #16
    f698:	4604      	mov	r4, r0
    f69a:	4608      	mov	r0, r1
    f69c:	4611      	mov	r1, r2
    f69e:	461a      	mov	r2, r3
    f6a0:	4623      	mov	r3, r4
    f6a2:	f8ad 3006 	strh.w	r3, [sp, #6]
    f6a6:	4603      	mov	r3, r0
    f6a8:	f88d 3005 	strb.w	r3, [sp, #5]
    f6ac:	460b      	mov	r3, r1
    f6ae:	f88d 3004 	strb.w	r3, [sp, #4]
    f6b2:	4613      	mov	r3, r2
    f6b4:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6b8:	f7f1 fdb8 	bl	122c <Sys_GetCoreID>
    f6bc:	4603      	mov	r3, r0
    f6be:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    f6c0:	490d      	ldr	r1, [pc, #52]	; (f6f8 <Det_ReportRuntimeError+0x64>)
    f6c2:	9b03      	ldr	r3, [sp, #12]
    f6c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f6c8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    f6cc:	4a0b      	ldr	r2, [pc, #44]	; (f6fc <Det_ReportRuntimeError+0x68>)
    f6ce:	9b03      	ldr	r3, [sp, #12]
    f6d0:	4413      	add	r3, r2
    f6d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
    f6d6:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    f6d8:	4a09      	ldr	r2, [pc, #36]	; (f700 <Det_ReportRuntimeError+0x6c>)
    f6da:	9b03      	ldr	r3, [sp, #12]
    f6dc:	4413      	add	r3, r2
    f6de:	f89d 2004 	ldrb.w	r2, [sp, #4]
    f6e2:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    f6e4:	4a07      	ldr	r2, [pc, #28]	; (f704 <Det_ReportRuntimeError+0x70>)
    f6e6:	9b03      	ldr	r3, [sp, #12]
    f6e8:	4413      	add	r3, r2
    f6ea:	f89d 2003 	ldrb.w	r2, [sp, #3]
    f6ee:	701a      	strb	r2, [r3, #0]

    return E_OK;
    f6f0:	2300      	movs	r3, #0
}
    f6f2:	4618      	mov	r0, r3
    f6f4:	b004      	add	sp, #16
    f6f6:	bd10      	pop	{r4, pc}
    f6f8:	1fff91b4 	.word	0x1fff91b4
    f6fc:	1fff9194 	.word	0x1fff9194
    f700:	1fff9198 	.word	0x1fff9198
    f704:	1fff919c 	.word	0x1fff919c

0000f708 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    f708:	b510      	push	{r4, lr}
    f70a:	b084      	sub	sp, #16
    f70c:	4604      	mov	r4, r0
    f70e:	4608      	mov	r0, r1
    f710:	4611      	mov	r1, r2
    f712:	461a      	mov	r2, r3
    f714:	4623      	mov	r3, r4
    f716:	f8ad 3006 	strh.w	r3, [sp, #6]
    f71a:	4603      	mov	r3, r0
    f71c:	f88d 3005 	strb.w	r3, [sp, #5]
    f720:	460b      	mov	r3, r1
    f722:	f88d 3004 	strb.w	r3, [sp, #4]
    f726:	4613      	mov	r3, r2
    f728:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f72c:	f7f1 fd7e 	bl	122c <Sys_GetCoreID>
    f730:	4603      	mov	r3, r0
    f732:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
    f734:	490d      	ldr	r1, [pc, #52]	; (f76c <Det_ReportTransientFault+0x64>)
    f736:	9b03      	ldr	r3, [sp, #12]
    f738:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f73c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
    f740:	4a0b      	ldr	r2, [pc, #44]	; (f770 <Det_ReportTransientFault+0x68>)
    f742:	9b03      	ldr	r3, [sp, #12]
    f744:	4413      	add	r3, r2
    f746:	f89d 2005 	ldrb.w	r2, [sp, #5]
    f74a:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
    f74c:	4a09      	ldr	r2, [pc, #36]	; (f774 <Det_ReportTransientFault+0x6c>)
    f74e:	9b03      	ldr	r3, [sp, #12]
    f750:	4413      	add	r3, r2
    f752:	f89d 2004 	ldrb.w	r2, [sp, #4]
    f756:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
    f758:	4a07      	ldr	r2, [pc, #28]	; (f778 <Det_ReportTransientFault+0x70>)
    f75a:	9b03      	ldr	r3, [sp, #12]
    f75c:	4413      	add	r3, r2
    f75e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    f762:	701a      	strb	r2, [r3, #0]

    return E_OK;
    f764:	2300      	movs	r3, #0
}
    f766:	4618      	mov	r0, r3
    f768:	b004      	add	sp, #16
    f76a:	bd10      	pop	{r4, pc}
    f76c:	1fff91ac 	.word	0x1fff91ac
    f770:	1fff91a0 	.word	0x1fff91a0
    f774:	1fff91a4 	.word	0x1fff91a4
    f778:	1fff91a8 	.word	0x1fff91a8

0000f77c <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
    f77c:	bf00      	nop
    f77e:	4770      	bx	lr

0000f780 <CanIf_Init>:
==================================================================================================*/
#define CANIF_START_SEC_CODE
#include "CanIf_MemMap.h"

void CanIf_Init(const CanIf_ConfigType * ConfigPtr)
{
    f780:	b082      	sub	sp, #8
    f782:	9001      	str	r0, [sp, #4]
    #if (STD_ON == CANIF_PRECOMPILE_SUPPORT)
    CanIf_ConfigPtr = &CanIf_Config;
    (void)ConfigPtr;
    #else
    CanIf_ConfigPtr = ConfigPtr;
    f784:	4a02      	ldr	r2, [pc, #8]	; (f790 <CanIf_Init+0x10>)
    f786:	9b01      	ldr	r3, [sp, #4]
    f788:	6013      	str	r3, [r2, #0]
    #endif
}
    f78a:	bf00      	nop
    f78c:	b002      	add	sp, #8
    f78e:	4770      	bx	lr
    f790:	1fff91b8 	.word	0x1fff91b8

0000f794 <CanIf_Transmit>:
Std_ReturnType CanIf_Transmit
(
    PduIdType CanTxPduId,
    const PduInfoType * PduInfoPtr
)
{
    f794:	b500      	push	{lr}
    f796:	b08b      	sub	sp, #44	; 0x2c
    f798:	4603      	mov	r3, r0
    f79a:	9100      	str	r1, [sp, #0]
    f79c:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType RetVal = E_NOT_OK;
    f7a0:	2301      	movs	r3, #1
    f7a2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    Can_HwHandleType CanHth = 0U;
    f7a6:	2300      	movs	r3, #0
    f7a8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Can_PduType PduInfo;
    const CanIf_TxPduType * TxPduInfo = NULL_PTR;
    f7ac:	2300      	movs	r3, #0
    f7ae:	9308      	str	r3, [sp, #32]
    uint8 CanIfControllerId = 0U;
    f7b0:	2300      	movs	r3, #0
    f7b2:	f88d 301f 	strb.w	r3, [sp, #31]
    const CanIf_CtrlPCConfigType * CanIfController = NULL_PTR;
    f7b6:	2300      	movs	r3, #0
    f7b8:	9306      	str	r3, [sp, #24]

    if (NULL_PTR != CanIf_ConfigPtr)
    f7ba:	4b31      	ldr	r3, [pc, #196]	; (f880 <CanIf_Transmit+0xec>)
    f7bc:	681b      	ldr	r3, [r3, #0]
    f7be:	2b00      	cmp	r3, #0
    f7c0:	d057      	beq.n	f872 <CanIf_Transmit+0xde>
    {
        if (CanTxPduId < (CanIf_ConfigPtr->NumTxPdu))
    f7c2:	4b2f      	ldr	r3, [pc, #188]	; (f880 <CanIf_Transmit+0xec>)
    f7c4:	681b      	ldr	r3, [r3, #0]
    f7c6:	785b      	ldrb	r3, [r3, #1]
    f7c8:	b29b      	uxth	r3, r3
    f7ca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f7ce:	429a      	cmp	r2, r3
    f7d0:	d24f      	bcs.n	f872 <CanIf_Transmit+0xde>
        {
            TxPduInfo = &CanIf_ConfigPtr->CanIf_TxPduConfigPtr[CanTxPduId];
    f7d2:	4b2b      	ldr	r3, [pc, #172]	; (f880 <CanIf_Transmit+0xec>)
    f7d4:	681b      	ldr	r3, [r3, #0]
    f7d6:	68d9      	ldr	r1, [r3, #12]
    f7d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f7dc:	4613      	mov	r3, r2
    f7de:	009b      	lsls	r3, r3, #2
    f7e0:	4413      	add	r3, r2
    f7e2:	009b      	lsls	r3, r3, #2
    f7e4:	440b      	add	r3, r1
    f7e6:	9308      	str	r3, [sp, #32]
            CanIfControllerId = TxPduInfo->CanIfCtrlId;
    f7e8:	9b08      	ldr	r3, [sp, #32]
    f7ea:	7b9b      	ldrb	r3, [r3, #14]
    f7ec:	f88d 301f 	strb.w	r3, [sp, #31]
            CanIfController = &CanIf_PCConfig.CanIfCtrlConfigPtr[CanIfControllerId];
    f7f0:	4b24      	ldr	r3, [pc, #144]	; (f884 <CanIf_Transmit+0xf0>)
    f7f2:	685a      	ldr	r2, [r3, #4]
    f7f4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    f7f8:	00db      	lsls	r3, r3, #3
    f7fa:	4413      	add	r3, r2
    f7fc:	9306      	str	r3, [sp, #24]

            CanHth = TxPduInfo->CanHth;
    f7fe:	9b08      	ldr	r3, [sp, #32]
    f800:	899b      	ldrh	r3, [r3, #12]
    f802:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24

            PduInfo.id = TxPduInfo->CanId;
    f806:	9b08      	ldr	r3, [sp, #32]
    f808:	685b      	ldr	r3, [r3, #4]
    f80a:	9303      	str	r3, [sp, #12]
            /* Convert Id by adding two most significant bits specify the frame type */
            switch (TxPduInfo->CanFrameType)
    f80c:	9b08      	ldr	r3, [sp, #32]
    f80e:	689b      	ldr	r3, [r3, #8]
    f810:	2b03      	cmp	r3, #3
    f812:	d010      	beq.n	f836 <CanIf_Transmit+0xa2>
    f814:	2b03      	cmp	r3, #3
    f816:	d813      	bhi.n	f840 <CanIf_Transmit+0xac>
    f818:	2b00      	cmp	r3, #0
    f81a:	d002      	beq.n	f822 <CanIf_Transmit+0x8e>
    f81c:	2b01      	cmp	r3, #1
    f81e:	d005      	beq.n	f82c <CanIf_Transmit+0x98>
                    PduInfo.id |= 0x40000000U;
                    break;
                }
                default:
                {
                    break;
    f820:	e00e      	b.n	f840 <CanIf_Transmit+0xac>
                    PduInfo.id |= 0x80000000U;
    f822:	9b03      	ldr	r3, [sp, #12]
    f824:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f828:	9303      	str	r3, [sp, #12]
                    break;
    f82a:	e00a      	b.n	f842 <CanIf_Transmit+0xae>
                    PduInfo.id |= 0xC0000000U;
    f82c:	9b03      	ldr	r3, [sp, #12]
    f82e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    f832:	9303      	str	r3, [sp, #12]
                    break;
    f834:	e005      	b.n	f842 <CanIf_Transmit+0xae>
                    PduInfo.id |= 0x40000000U;
    f836:	9b03      	ldr	r3, [sp, #12]
    f838:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f83c:	9303      	str	r3, [sp, #12]
                    break;
    f83e:	e000      	b.n	f842 <CanIf_Transmit+0xae>
                    break;
    f840:	bf00      	nop
                }
            }
            
            PduInfo.length = (uint8)(PduInfoPtr->SduLength);
    f842:	9b00      	ldr	r3, [sp, #0]
    f844:	689b      	ldr	r3, [r3, #8]
    f846:	b2db      	uxtb	r3, r3
    f848:	f88d 3012 	strb.w	r3, [sp, #18]
            PduInfo.sdu = PduInfoPtr->SduDataPtr;
    f84c:	9b00      	ldr	r3, [sp, #0]
    f84e:	681b      	ldr	r3, [r3, #0]
    f850:	9305      	str	r3, [sp, #20]
            PduInfo.swPduHandle = CanTxPduId;
    f852:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f856:	f8ad 3010 	strh.w	r3, [sp, #16]

            RetVal = CanIfController->CanDrvConfigPtr->CanApi->CanWrite(CanHth, &PduInfo); 
    f85a:	9b06      	ldr	r3, [sp, #24]
    f85c:	685b      	ldr	r3, [r3, #4]
    f85e:	685b      	ldr	r3, [r3, #4]
    f860:	681b      	ldr	r3, [r3, #0]
    f862:	a903      	add	r1, sp, #12
    f864:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    f868:	4610      	mov	r0, r2
    f86a:	4798      	blx	r3
    f86c:	4603      	mov	r3, r0
    f86e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
    }
    return RetVal;
    f872:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    f876:	4618      	mov	r0, r3
    f878:	b00b      	add	sp, #44	; 0x2c
    f87a:	f85d fb04 	ldr.w	pc, [sp], #4
    f87e:	bf00      	nop
    f880:	1fff91b8 	.word	0x1fff91b8
    f884:	00010550 	.word	0x00010550

0000f888 <CanIf_TxConfirmation>:

void CanIf_TxConfirmation
(
    PduIdType CanTxPduId
)
{
    f888:	b500      	push	{lr}
    f88a:	b085      	sub	sp, #20
    f88c:	4603      	mov	r3, r0
    f88e:	f8ad 3006 	strh.w	r3, [sp, #6]
    PduIdType UserPduId;
    const CanIf_TxPduType * TxPduInfo = NULL_PTR;
    f892:	2300      	movs	r3, #0
    f894:	9303      	str	r3, [sp, #12]

    if (NULL_PTR != CanIf_ConfigPtr)
    f896:	4b15      	ldr	r3, [pc, #84]	; (f8ec <CanIf_TxConfirmation+0x64>)
    f898:	681b      	ldr	r3, [r3, #0]
    f89a:	2b00      	cmp	r3, #0
    f89c:	d021      	beq.n	f8e2 <CanIf_TxConfirmation+0x5a>
    {
        if (CanTxPduId < (CanIf_ConfigPtr->NumTxPdu))
    f89e:	4b13      	ldr	r3, [pc, #76]	; (f8ec <CanIf_TxConfirmation+0x64>)
    f8a0:	681b      	ldr	r3, [r3, #0]
    f8a2:	785b      	ldrb	r3, [r3, #1]
    f8a4:	b29b      	uxth	r3, r3
    f8a6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f8aa:	429a      	cmp	r2, r3
    f8ac:	d219      	bcs.n	f8e2 <CanIf_TxConfirmation+0x5a>
        {
            TxPduInfo = &CanIf_ConfigPtr->CanIf_TxPduConfigPtr[CanTxPduId];
    f8ae:	4b0f      	ldr	r3, [pc, #60]	; (f8ec <CanIf_TxConfirmation+0x64>)
    f8b0:	681b      	ldr	r3, [r3, #0]
    f8b2:	68d9      	ldr	r1, [r3, #12]
    f8b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f8b8:	4613      	mov	r3, r2
    f8ba:	009b      	lsls	r3, r3, #2
    f8bc:	4413      	add	r3, r2
    f8be:	009b      	lsls	r3, r3, #2
    f8c0:	440b      	add	r3, r1
    f8c2:	9303      	str	r3, [sp, #12]

            if (NULL_PTR != TxPduInfo->UserTxConfirmation)
    f8c4:	9b03      	ldr	r3, [sp, #12]
    f8c6:	691b      	ldr	r3, [r3, #16]
    f8c8:	2b00      	cmp	r3, #0
    f8ca:	d00a      	beq.n	f8e2 <CanIf_TxConfirmation+0x5a>
            {
                UserPduId = TxPduInfo->PduId;
    f8cc:	9b03      	ldr	r3, [sp, #12]
    f8ce:	881b      	ldrh	r3, [r3, #0]
    f8d0:	f8ad 300a 	strh.w	r3, [sp, #10]
                TxPduInfo->UserTxConfirmation(UserPduId, E_OK);
    f8d4:	9b03      	ldr	r3, [sp, #12]
    f8d6:	691b      	ldr	r3, [r3, #16]
    f8d8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    f8dc:	2100      	movs	r1, #0
    f8de:	4610      	mov	r0, r2
    f8e0:	4798      	blx	r3
            }
        }
    }
}
    f8e2:	bf00      	nop
    f8e4:	b005      	add	sp, #20
    f8e6:	f85d fb04 	ldr.w	pc, [sp], #4
    f8ea:	bf00      	nop
    f8ec:	1fff91b8 	.word	0x1fff91b8

0000f8f0 <CanIf_RxIndication>:
void CanIf_RxIndication
(
    const Can_HwType * Mailbox,
    const PduInfoType * PduInfoPtr
)
{
    f8f0:	b500      	push	{lr}
    f8f2:	b089      	sub	sp, #36	; 0x24
    f8f4:	9001      	str	r0, [sp, #4]
    f8f6:	9100      	str	r1, [sp, #0]
    PduIdType UserPduId = 0U;
    f8f8:	2300      	movs	r3, #0
    f8fa:	f8ad 301e 	strh.w	r3, [sp, #30]
    PduInfoType PduInfo;
    const CanIf_RxPduType * RxPduInfo = NULL_PTR;
    f8fe:	2300      	movs	r3, #0
    f900:	9306      	str	r3, [sp, #24]
    uint8 CanDrvId = 0U;
    f902:	2300      	movs	r3, #0
    f904:	f88d 3017 	strb.w	r3, [sp, #23]

    if (NULL_PTR != CanIf_ConfigPtr)
    f908:	4b2c      	ldr	r3, [pc, #176]	; (f9bc <CanIf_RxIndication+0xcc>)
    f90a:	681b      	ldr	r3, [r3, #0]
    f90c:	2b00      	cmp	r3, #0
    f90e:	d050      	beq.n	f9b2 <CanIf_RxIndication+0xc2>
    {
        if ((Mailbox->ControllerId) < (CanIf_PCConfig.NumOfCtrl))
    f910:	9b01      	ldr	r3, [sp, #4]
    f912:	799a      	ldrb	r2, [r3, #6]
    f914:	4b2a      	ldr	r3, [pc, #168]	; (f9c0 <CanIf_RxIndication+0xd0>)
    f916:	781b      	ldrb	r3, [r3, #0]
    f918:	429a      	cmp	r2, r3
    f91a:	d24a      	bcs.n	f9b2 <CanIf_RxIndication+0xc2>
        {
            if ((Mailbox->Hoh) < (CanIf_PCConfig.CanIfCtrlConfigPtr[Mailbox->ControllerId].CanDrvConfigPtr->NumCanHoh))
    f91c:	9b01      	ldr	r3, [sp, #4]
    f91e:	889a      	ldrh	r2, [r3, #4]
    f920:	4b27      	ldr	r3, [pc, #156]	; (f9c0 <CanIf_RxIndication+0xd0>)
    f922:	6859      	ldr	r1, [r3, #4]
    f924:	9b01      	ldr	r3, [sp, #4]
    f926:	799b      	ldrb	r3, [r3, #6]
    f928:	00db      	lsls	r3, r3, #3
    f92a:	440b      	add	r3, r1
    f92c:	685b      	ldr	r3, [r3, #4]
    f92e:	885b      	ldrh	r3, [r3, #2]
    f930:	429a      	cmp	r2, r3
    f932:	d23e      	bcs.n	f9b2 <CanIf_RxIndication+0xc2>
            {
                CanDrvId = CanIf_PCConfig.CanIfCtrlConfigPtr[Mailbox->ControllerId].CanDrvConfigPtr->CanDrvId;
    f934:	4b22      	ldr	r3, [pc, #136]	; (f9c0 <CanIf_RxIndication+0xd0>)
    f936:	685a      	ldr	r2, [r3, #4]
    f938:	9b01      	ldr	r3, [sp, #4]
    f93a:	799b      	ldrb	r3, [r3, #6]
    f93c:	00db      	lsls	r3, r3, #3
    f93e:	4413      	add	r3, r2
    f940:	685b      	ldr	r3, [r3, #4]
    f942:	781b      	ldrb	r3, [r3, #0]
    f944:	f88d 3017 	strb.w	r3, [sp, #23]
                RxPduInfo = CanIf_ConfigPtr->CanDrvConfigPtr[CanDrvId]->HohToRxPduMappingPtr[Mailbox->Hoh];
    f948:	4b1c      	ldr	r3, [pc, #112]	; (f9bc <CanIf_RxIndication+0xcc>)
    f94a:	681b      	ldr	r3, [r3, #0]
    f94c:	685a      	ldr	r2, [r3, #4]
    f94e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f952:	009b      	lsls	r3, r3, #2
    f954:	4413      	add	r3, r2
    f956:	681b      	ldr	r3, [r3, #0]
    f958:	681a      	ldr	r2, [r3, #0]
    f95a:	9b01      	ldr	r3, [sp, #4]
    f95c:	889b      	ldrh	r3, [r3, #4]
    f95e:	009b      	lsls	r3, r3, #2
    f960:	4413      	add	r3, r2
    f962:	681b      	ldr	r3, [r3, #0]
    f964:	9306      	str	r3, [sp, #24]
                
                /* Will discard the Can HOH if it was not referred by any CanIf RxPDU */
                if (NULL_PTR != RxPduInfo)
    f966:	9b06      	ldr	r3, [sp, #24]
    f968:	2b00      	cmp	r3, #0
    f96a:	d022      	beq.n	f9b2 <CanIf_RxIndication+0xc2>
                {
                    if (NULL_PTR != RxPduInfo->UserRxIndication)
    f96c:	9b06      	ldr	r3, [sp, #24]
    f96e:	689b      	ldr	r3, [r3, #8]
    f970:	2b00      	cmp	r3, #0
    f972:	d01e      	beq.n	f9b2 <CanIf_RxIndication+0xc2>
                    {
                        UserPduId = RxPduInfo->PduId;
    f974:	9b06      	ldr	r3, [sp, #24]
    f976:	881b      	ldrh	r3, [r3, #0]
    f978:	f8ad 301e 	strh.w	r3, [sp, #30]
                        if ((TRUE == RxPduInfo->PduLengthCheck) && (PduInfoPtr->SduLength > (RxPduInfo->PduLength)))
    f97c:	9b06      	ldr	r3, [sp, #24]
    f97e:	789b      	ldrb	r3, [r3, #2]
    f980:	2b00      	cmp	r3, #0
    f982:	d009      	beq.n	f998 <CanIf_RxIndication+0xa8>
    f984:	9b00      	ldr	r3, [sp, #0]
    f986:	689b      	ldr	r3, [r3, #8]
    f988:	9a06      	ldr	r2, [sp, #24]
    f98a:	8892      	ldrh	r2, [r2, #4]
    f98c:	4293      	cmp	r3, r2
    f98e:	d903      	bls.n	f998 <CanIf_RxIndication+0xa8>
                        {
                            PduInfo.SduLength = RxPduInfo->PduLength; /* Truncates exceeded data as configured on GUI */
    f990:	9b06      	ldr	r3, [sp, #24]
    f992:	889b      	ldrh	r3, [r3, #4]
    f994:	9304      	str	r3, [sp, #16]
    f996:	e002      	b.n	f99e <CanIf_RxIndication+0xae>
                        }
                        else
                        {
                            PduInfo.SduLength = PduInfoPtr->SduLength;
    f998:	9b00      	ldr	r3, [sp, #0]
    f99a:	689b      	ldr	r3, [r3, #8]
    f99c:	9304      	str	r3, [sp, #16]
                        }
                        PduInfo.SduDataPtr = PduInfoPtr->SduDataPtr;
    f99e:	9b00      	ldr	r3, [sp, #0]
    f9a0:	681b      	ldr	r3, [r3, #0]
    f9a2:	9302      	str	r3, [sp, #8]
                        RxPduInfo->UserRxIndication(UserPduId, &PduInfo);
    f9a4:	9b06      	ldr	r3, [sp, #24]
    f9a6:	689b      	ldr	r3, [r3, #8]
    f9a8:	a902      	add	r1, sp, #8
    f9aa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    f9ae:	4610      	mov	r0, r2
    f9b0:	4798      	blx	r3
                    }
                }
            }
        }
    }
}
    f9b2:	bf00      	nop
    f9b4:	b009      	add	sp, #36	; 0x24
    f9b6:	f85d fb04 	ldr.w	pc, [sp], #4
    f9ba:	bf00      	nop
    f9bc:	1fff91b8 	.word	0x1fff91b8
    f9c0:	00010550 	.word	0x00010550

0000f9c4 <CanIf_ControllerModeIndication>:
void CanIf_ControllerModeIndication
( 
    uint8 ControllerId, 
    Can_ControllerStateType ControllerMode 
)
{
    f9c4:	b082      	sub	sp, #8
    f9c6:	4603      	mov	r3, r0
    f9c8:	9100      	str	r1, [sp, #0]
    f9ca:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId; 
    (void)ControllerMode;
}
    f9ce:	bf00      	nop
    f9d0:	b002      	add	sp, #8
    f9d2:	4770      	bx	lr

0000f9d4 <CanIf_ControllerBusOff>:
void CanIf_ControllerBusOff
(
    uint8 ControllerId
)
{
    f9d4:	b082      	sub	sp, #8
    f9d6:	4603      	mov	r3, r0
    f9d8:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
}
    f9dc:	bf00      	nop
    f9de:	b002      	add	sp, #8
    f9e0:	4770      	bx	lr

0000f9e2 <CanIf_SetControllerMode>:

Std_ReturnType CanIf_SetControllerMode( uint8 Controller, Can_ControllerStateType Transition )
{
    f9e2:	b082      	sub	sp, #8
    f9e4:	4603      	mov	r3, r0
    f9e6:	9100      	str	r1, [sp, #0]
    f9e8:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)Controller;
    (void)Transition;
}
    f9ec:	bf00      	nop
    f9ee:	4618      	mov	r0, r3
    f9f0:	b002      	add	sp, #8
    f9f2:	4770      	bx	lr

0000f9f4 <CanIf_DisableControllerInterrupts>:
void CanIf_DisableControllerInterrupts( uint8 Controller )
{
    f9f4:	b082      	sub	sp, #8
    f9f6:	4603      	mov	r3, r0
    f9f8:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)Controller;
}
    f9fc:	bf00      	nop
    f9fe:	b002      	add	sp, #8
    fa00:	4770      	bx	lr

0000fa02 <CanIf_EnableControllerInterrupts>:
void CanIf_EnableControllerInterrupts(uint8 Controller)
{
    fa02:	b082      	sub	sp, #8
    fa04:	4603      	mov	r3, r0
    fa06:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)Controller;
}
    fa0a:	bf00      	nop
    fa0c:	b002      	add	sp, #8
    fa0e:	4770      	bx	lr

0000fa10 <CanIf_GetControllerErrorState>:
Std_ReturnType CanIf_GetControllerErrorState( uint8 ControllerId, Can_ErrorStateType * ErrorStatePtr)
{
    fa10:	b082      	sub	sp, #8
    fa12:	4603      	mov	r3, r0
    fa14:	9100      	str	r1, [sp, #0]
    fa16:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
    (void)ErrorStatePtr;
}
    fa1a:	bf00      	nop
    fa1c:	4618      	mov	r0, r3
    fa1e:	b002      	add	sp, #8
    fa20:	4770      	bx	lr

0000fa22 <CanIf_GetControllerMode>:
Std_ReturnType CanIf_GetControllerMode( uint8 Controller, Can_ControllerStateType * ControllerModePtr )
{
    fa22:	b082      	sub	sp, #8
    fa24:	4603      	mov	r3, r0
    fa26:	9100      	str	r1, [sp, #0]
    fa28:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)Controller;
    (void)ControllerModePtr;
}
    fa2c:	bf00      	nop
    fa2e:	4618      	mov	r0, r3
    fa30:	b002      	add	sp, #8
    fa32:	4770      	bx	lr

0000fa34 <CanIf_GetControllerRxErrorCounter>:
Std_ReturnType CanIf_GetControllerRxErrorCounter(uint8 ControllerId, uint8 * RxErrorCounterPtr)
{
    fa34:	b082      	sub	sp, #8
    fa36:	4603      	mov	r3, r0
    fa38:	9100      	str	r1, [sp, #0]
    fa3a:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
    (void)RxErrorCounterPtr;
}
    fa3e:	bf00      	nop
    fa40:	4618      	mov	r0, r3
    fa42:	b002      	add	sp, #8
    fa44:	4770      	bx	lr

0000fa46 <CanIf_GetControllerTxErrorCounter>:
Std_ReturnType CanIf_GetControllerTxErrorCounter( uint8 ControllerId, uint8 * TxErrorCounterPtr )
{
    fa46:	b082      	sub	sp, #8
    fa48:	4603      	mov	r3, r0
    fa4a:	9100      	str	r1, [sp, #0]
    fa4c:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
    (void)TxErrorCounterPtr;
}
    fa50:	bf00      	nop
    fa52:	4618      	mov	r0, r3
    fa54:	b002      	add	sp, #8
    fa56:	4770      	bx	lr

0000fa58 <Fls_ACEraseRomEnd>:
    fa58:	204e4143 	.word	0x204e4143
    fa5c:	64756162 	.word	0x64756162
    fa60:	74617220 	.word	0x74617220
    fa64:	65732065 	.word	0x65732065
    fa68:	75732074 	.word	0x75732074
    fa6c:	73656363 	.word	0x73656363
    fa70:	6c756673 	.word	0x6c756673
    fa74:	202e796c 	.word	0x202e796c
    fa78:	0000000a 	.word	0x0000000a
    fa7c:	6c696146 	.word	0x6c696146
    fa80:	74206465 	.word	0x74206465
    fa84:	6573206f 	.word	0x6573206f
    fa88:	41432074 	.word	0x41432074
    fa8c:	6162204e 	.word	0x6162204e
    fa90:	72206475 	.word	0x72206475
    fa94:	2e657461 	.word	0x2e657461
    fa98:	00000a20 	.word	0x00000a20
    fa9c:	204e4143 	.word	0x204e4143
    faa0:	746e6f63 	.word	0x746e6f63
    faa4:	6c6c6f72 	.word	0x6c6c6f72
    faa8:	73207265 	.word	0x73207265
    faac:	65746174 	.word	0x65746174
    fab0:	63616d20 	.word	0x63616d20
    fab4:	656e6968 	.word	0x656e6968
    fab8:	74657320 	.word	0x74657320
    fabc:	63757320 	.word	0x63757320
    fac0:	73736563 	.word	0x73736563
    fac4:	6c6c7566 	.word	0x6c6c7566
    fac8:	0a202e79 	.word	0x0a202e79
    facc:	00000000 	.word	0x00000000
    fad0:	6c696146 	.word	0x6c696146
    fad4:	74206465 	.word	0x74206465
    fad8:	6573206f 	.word	0x6573206f
    fadc:	41432074 	.word	0x41432074
    fae0:	6f63204e 	.word	0x6f63204e
    fae4:	6f72746e 	.word	0x6f72746e
    fae8:	72656c6c 	.word	0x72656c6c
    faec:	61747320 	.word	0x61747320
    faf0:	6d206574 	.word	0x6d206574
    faf4:	69686361 	.word	0x69686361
    faf8:	202e656e 	.word	0x202e656e
    fafc:	0000000a 	.word	0x0000000a
    fb00:	74747542 	.word	0x74747542
    fb04:	31206e6f 	.word	0x31206e6f
    fb08:	74636120 	.word	0x74636120
    fb0c:	3a6e6f69 	.word	0x3a6e6f69
    fb10:	4e495320 	.word	0x4e495320
    fb14:	5f454c47 	.word	0x5f454c47
    fb18:	43494c43 	.word	0x43494c43
    fb1c:	000a204b 	.word	0x000a204b
    fb20:	204e4143 	.word	0x204e4143
    fb24:	2067736d 	.word	0x2067736d
    fb28:	30307830 	.word	0x30307830
    fb2c:	72742031 	.word	0x72742031
    fb30:	6d736e61 	.word	0x6d736e61
    fb34:	65747469 	.word	0x65747469
    fb38:	74612064 	.word	0x74612064
    fb3c:	30303520 	.word	0x30303520
    fb40:	7370626b 	.word	0x7370626b
    fb44:	00000a20 	.word	0x00000a20
    fb48:	74747542 	.word	0x74747542
    fb4c:	31206e6f 	.word	0x31206e6f
    fb50:	74636120 	.word	0x74636120
    fb54:	3a6e6f69 	.word	0x3a6e6f69
    fb58:	554f4420 	.word	0x554f4420
    fb5c:	5f454c42 	.word	0x5f454c42
    fb60:	43494c43 	.word	0x43494c43
    fb64:	000a204b 	.word	0x000a204b
    fb68:	74747542 	.word	0x74747542
    fb6c:	31206e6f 	.word	0x31206e6f
    fb70:	74636120 	.word	0x74636120
    fb74:	3a6e6f69 	.word	0x3a6e6f69
    fb78:	4c4f4820 	.word	0x4c4f4820
    fb7c:	4c435f44 	.word	0x4c435f44
    fb80:	204b4349 	.word	0x204b4349
    fb84:	0000000a 	.word	0x0000000a
    fb88:	74747542 	.word	0x74747542
    fb8c:	31206e6f 	.word	0x31206e6f
    fb90:	74636120 	.word	0x74636120
    fb94:	3a6e6f69 	.word	0x3a6e6f69
    fb98:	4c455220 	.word	0x4c455220
    fb9c:	45534145 	.word	0x45534145
    fba0:	00000a20 	.word	0x00000a20
    fba4:	204e4143 	.word	0x204e4143
    fba8:	2067736d 	.word	0x2067736d
    fbac:	30307830 	.word	0x30307830
    fbb0:	72742032 	.word	0x72742032
    fbb4:	6d736e61 	.word	0x6d736e61
    fbb8:	65747469 	.word	0x65747469
    fbbc:	74612064 	.word	0x74612064
    fbc0:	30303520 	.word	0x30303520
    fbc4:	7370626b 	.word	0x7370626b
    fbc8:	00000a20 	.word	0x00000a20
    fbcc:	74747542 	.word	0x74747542
    fbd0:	32206e6f 	.word	0x32206e6f
    fbd4:	74636120 	.word	0x74636120
    fbd8:	3a6e6f69 	.word	0x3a6e6f69
    fbdc:	4e495320 	.word	0x4e495320
    fbe0:	5f454c47 	.word	0x5f454c47
    fbe4:	43494c43 	.word	0x43494c43
    fbe8:	000a204b 	.word	0x000a204b
    fbec:	74747542 	.word	0x74747542
    fbf0:	32206e6f 	.word	0x32206e6f
    fbf4:	74636120 	.word	0x74636120
    fbf8:	3a6e6f69 	.word	0x3a6e6f69
    fbfc:	554f4420 	.word	0x554f4420
    fc00:	5f454c42 	.word	0x5f454c42
    fc04:	43494c43 	.word	0x43494c43
    fc08:	000a204b 	.word	0x000a204b
    fc0c:	74747542 	.word	0x74747542
    fc10:	32206e6f 	.word	0x32206e6f
    fc14:	74636120 	.word	0x74636120
    fc18:	3a6e6f69 	.word	0x3a6e6f69
    fc1c:	4c4f4820 	.word	0x4c4f4820
    fc20:	4c435f44 	.word	0x4c435f44
    fc24:	204b4349 	.word	0x204b4349
    fc28:	0000000a 	.word	0x0000000a
    fc2c:	74747542 	.word	0x74747542
    fc30:	32206e6f 	.word	0x32206e6f
    fc34:	74636120 	.word	0x74636120
    fc38:	3a6e6f69 	.word	0x3a6e6f69
    fc3c:	4c455220 	.word	0x4c455220
    fc40:	45534145 	.word	0x45534145
    fc44:	00000a20 	.word	0x00000a20
    fc48:	74747542 	.word	0x74747542
    fc4c:	33206e6f 	.word	0x33206e6f
    fc50:	74636120 	.word	0x74636120
    fc54:	3a6e6f69 	.word	0x3a6e6f69
    fc58:	4e495320 	.word	0x4e495320
    fc5c:	5f454c47 	.word	0x5f454c47
    fc60:	43494c43 	.word	0x43494c43
    fc64:	000a204b 	.word	0x000a204b
    fc68:	74747542 	.word	0x74747542
    fc6c:	33206e6f 	.word	0x33206e6f
    fc70:	74636120 	.word	0x74636120
    fc74:	3a6e6f69 	.word	0x3a6e6f69
    fc78:	554f4420 	.word	0x554f4420
    fc7c:	5f454c42 	.word	0x5f454c42
    fc80:	43494c43 	.word	0x43494c43
    fc84:	000a204b 	.word	0x000a204b
    fc88:	74747542 	.word	0x74747542
    fc8c:	33206e6f 	.word	0x33206e6f
    fc90:	74636120 	.word	0x74636120
    fc94:	3a6e6f69 	.word	0x3a6e6f69
    fc98:	4c4f4820 	.word	0x4c4f4820
    fc9c:	4c435f44 	.word	0x4c435f44
    fca0:	204b4349 	.word	0x204b4349
    fca4:	0000000a 	.word	0x0000000a
    fca8:	74747542 	.word	0x74747542
    fcac:	33206e6f 	.word	0x33206e6f
    fcb0:	74636120 	.word	0x74636120
    fcb4:	3a6e6f69 	.word	0x3a6e6f69
    fcb8:	4c455220 	.word	0x4c455220
    fcbc:	45534145 	.word	0x45534145
    fcc0:	00000a20 	.word	0x00000a20
    fcc4:	6d726554 	.word	0x6d726554
    fcc8:	6c616e69 	.word	0x6c616e69
    fccc:	00000000 	.word	0x00000000
    fcd0:	4c554e28 	.word	0x4c554e28
    fcd4:	0000294c 	.word	0x0000294c

0000fcd8 <Clock_Ip_au8DividerCallbackIndex>:
    fcd8:	0e0d0c00 06030201 0a070409 000b0805     ................

0000fce8 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000fcf8 <Clock_Ip_au8XoscCallbackIndex>:
    fcf8:	00000100 00000000 00000000 00000000     ................

0000fd08 <Clock_Ip_au8IrcoscCallbackIndex>:
    fd08:	03020100 00000004 00000000 00000000     ................

0000fd18 <Clock_Ip_au8GateCallbackIndex>:
    fd18:	06010200 01040301 00000500 00000000     ................

0000fd28 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000fd38 <Clock_Ip_au8PllCallbackIndex>:
    fd38:	00000100 00000000 00000000 00000000     ................

0000fd48 <Clock_Ip_au8SelectorCallbackIndex>:
    fd48:	0a090800 03020109 07060504 00000000     ................

0000fd58 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000fd68 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000fd78 <Clock_Ip_au8ClockFeatures>:
	...
    fd88:	01000000 00000000 00000000 00000002     ................
    fd98:	00000000 00000300 00000000 00040000     ................
    fda8:	00000000 05000000 00000000 00000000     ................
    fdb8:	00000006 00000000 00000100 00000000     ................
    fdc8:	00010000 00000000 04000000 00000000     ................
    fdd8:	00000000 00000005 00000001 00000401     ................
    fde8:	00000200 00050100 00030000 04020000     ................
    fdf8:	04000000 02000000 00000005 00000005     ................
    fe08:	00000403 00000600 00050300 00070000     ................
    fe18:	05000000 00000000 00000000 00000006     ................
	...
    fe58:	00050000 00000000 06000000 00000100     ................
    fe68:	00000000 00030007 00000000 00000000     ................
    fe78:	00000000 00060000 00000000 07000000     ................
    fe88:	00000100 00000000 00030008 00000000     ................
	...
    fea0:	00090000 00000000 0a000000 00000100     ................
    feb0:	00000000 0003000b 00000000 00000000     ................
    fec0:	00000000 000c0000 00000000 0d000000     ................
    fed0:	00000100 00000000 0003000e 00000000     ................
    fee0:	00000800 00000000 00090000 00000000     ................
    fef0:	0a000000 00000000 00000000 0000000b     ................
    ff00:	00000000 00000b01 00000000 000b0200     ................
    ff10:	00000000 0b030000 00000000 00000000     ................
	...
    ff28:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    ff38:	01000000 00000000 00000000 00000007     ................
    ff48:	00007300 00000700 00320000 00090000     .s........2.....
    ff58:	02000000 07000000 00000000 00000021     ............!...
    ff68:	00000009 00000400 00000900 00030000     ................
    ff78:	00070000 61000000 07000000 00000000     .......a........
    ff88:	00000024 00000007 00002500 00000700     $........%......
    ff98:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    ffa8:	00000000 00000020 38000004 00003800     .... ......8.8..
    ffb8:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    ffc8:	04000000 00260000 00000026 66000004     ......&.&......f
    ffd8:	00006600 00000400 00370037 00040000     .f......7.7.....
    ffe8:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    fff8:	2e000004 00002e00 00000200 00404040     ............@@@.
   10008:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   10018:	0000006b 6c000004 00006c00 00000900     k......l.l......
   10028:	00010000 00090000 00000000 07000000     ................
   10038:	00000000 00000036 00000007 00003100     ....6........1..
   10048:	00000700 00490000 00070000 4a000000     ......I........J
   10058:	07000000 00000000 0000004b 00000007     ........K.......
   10068:	00004c00 00000700 004d0000 00070000     .L........M.....
   10078:	3d000000 03000000 00000000 00000000     ...=............

00010088 <Clock_Ip_au16SelectorEntryHardwareValue>:
   10088:	01010a03 01010001 04040002 02000603     ................
   10098:	00010810 02020100 00000000 00000007     ................
   100a8:	00000009 00000000 00000c0e 00000000     ................
	...

000100e0 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   100e0:	00020000 00000300 00000601 00000000     ................
	...

00010110 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   10110:	00000700 00000000 02020000 01010303     ................
   10120:	03020606 00000000 00000000 00000000     ................
	...

00010140 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   10140:	00000001 00000000 02020000 01010303     ................
   10150:	03020606 00000000 00000000 00000000     ................
	...

00010170 <Clock_Ip_au8DividerValueHardwareValue>:
   10170:	00020100 00000003 00000004 00000000     ................
   10180:	00000005 00000000 00000000 00000000     ................
   10190:	00000006 00000000 00000000 00000000     ................
	...
   101b0:	00000007                                ....

000101b4 <Clock_Ip_apxScgPeriphAsyncDivs>:
   101b4:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

000101c4 <Clock_Ip_aeSourceTypeClockName>:
   101c4:	00000000 00000001 00000001 00000001     ................
   101d4:	00000001 00000001 00000001 00000001     ................
   101e4:	00000002 00000003 00000001 00000001     ................
   101f4:	00000001 00000001 00000002 00000002     ................
   10204:	00000003 00000003 00000001 00000001     ................
   10214:	00000004 00000004 00000004 00000004     ................
	...

00010280 <Clock_Ip_aeHwPllName>:
   10280:	00000009                                ....

00010284 <Clock_Ip_aeHwDfsName>:
   10284:	00000057                                W...

00010288 <Clock_Ip_axDividerCallbacks>:
   10288:	0000326d 00003277 00003291 000032ab     m2..w2...2...2..
   10298:	000032c5 000032df 000032f9 00003313     .2...2...2...3..
   102a8:	0000332d 00003347 00003361 0000337b     -3..G3..a3..{3..
   102b8:	00003395 000033af 000033c9              .3...3...3..

000102c4 <Clock_Ip_axDividerTriggerCallbacks>:
   102c4:	0000373d 0000373d                       =7..=7..

000102cc <Clock_Ip_axExtOscCallbacks>:
   102cc:	00003749 00003749 00003749 00003753     I7..I7..I7..S7..
   102dc:	00003749 0000375d 00003777 00003791     I7..]7..w7...7..
   102ec:	00003815 00003829                       .8..)8..

000102f4 <Clock_Ip_axFracDivCallbacks>:
   102f4:	000039e9 000039e9 000039f3              .9...9...9..

00010300 <Clock_Ip_axGateCallbacks>:
   10300:	00003a0d 00003a17 00003b17 00003b31     .:...:...;..1;..
   10310:	00003ac7 00003ae1 00003a77 00003a91     .:...:..w:...:..
   10320:	00003a27 00003a41 00003b67 00003b81     ':..A:..g;...;..
   10330:	00003bb7 00003bd1                       .;...;..

00010338 <Clock_Ip_axIntOscCallbacks>:
   10338:	00003d7d 00003d7d 00003d87 00003d91     }=..}=...=...=..
   10348:	00003dab 00003dc5 00003dd9 00003df3     .=...=...=...=..
   10358:	00003e0d 00003e21 00003e3b 00003e55     .>..!>..;>..U>..
   10368:	00003efd 00003f17 00003f31              .>...?..1?..

00010374 <Clock_Ip_axCmuCallbacks>:
   10374:	000044cd 000044d7 000044e3 000044cd     .D...D...D...D..

00010384 <Clock_Ip_axPllCallbacks>:
   10384:	000044ed 000044ed 000044f7 000044ed     .D...D...D...D..
   10394:	00004503 0000450d 00004527 00004541     .E...E..'E..AE..
   103a4:	000045e5 000045d1                       .E...E..

000103ac <Clock_Ip_axPcfsCallbacks>:
   103ac:	00004741                                AG..

000103b0 <Clock_Ip_axSelectorCallbacks>:
   103b0:	0000474d 0000474d 00004757 00004771     MG..MG..WG..qG..
   103c0:	0000474d 0000478b 000047a5 000047bf     MG...G...G...G..
   103d0:	000047d9 000047f3 0000480d 00004827     .G...G...H..'H..
   103e0:	00004841 0000485b 00004875 0000488f     AH..[H..uH...H..
   103f0:	000048a9 000048c3 000048dd 000048f7     .H...H...H...H..
   10400:	00004911 0000492b                       .I..+I..

00010408 <ClockSource>:
   10408:	00000000 00000008 00000002 00000005     ................
	...
   10420:	00000009                                ....

00010424 <ResetReasonArray>:
   10424:	00000000 00000001 00000002 00000003     ................
   10434:	00000004 00000005 00000006 00000007     ................
   10444:	00000008 00000009 0000000a 0000000b     ................
   10454:	0000000c 0000000d 0000000e              ............

00010460 <Port_au32PortCiPortBaseAddr>:
   10460:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   10470:	4004d000                                ...@

00010474 <Port_au32PortCiGpioBaseAddr>:
   10474:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   10484:	400ff100                                ...@

00010488 <Flexcan_Ip_apxBase>:
   10488:	40024000 40025000 4002b000              .@.@.P.@...@

00010494 <payload_code.3>:
   10494:	03020100 07060504 09090908 0a0a0a09     ................
   104a4:	0b0b0b0a 0c0c0c0b 0d0d0d0c 0d0d0d0d     ................
   104b4:	0e0e0e0d 0e0e0e0e 0e0e0e0e 0e0e0e0e     ................
   104c4:	0f0f0f0e 0f0f0f0f 0f0f0f0f 0f0f0f0f     ................
   104d4:	0000000f                                ....

000104d8 <flexcanBase.2>:
   104d8:	40024000 40025000 4002b000              .@.@.P.@...@

000104e4 <maxMbNum.1>:
   104e4:	00000020 00000010 00000010               ...........

000104f0 <flexcanBase.0>:
   104f0:	40024000                                .@.@

000104f4 <ButtonsCfg>:
   104f4:	0000008c 0000012c 00000071 0000012c     ....,...q...,...
   10504:	0000000c 0000012c                       ....,...

0001050c <LedsCfg>:
   1050c:	00000060 0000006f 00000070 00010048     `...o...p...H...
   1051c:	00010049 0001004a 0001004b 0001004c     I...J...K...L...
   1052c:	0001004d 0001004e 0001004f              M...N...O...

00010538 <Can_43_FLEXCAN_Driver_P2Func>:
   10538:	0000797d 000075f9                       }y...u..

00010540 <Can_43_FLEXCAN_Driver_Config>:
   10540:	00010000 00010538                       ....8...

00010548 <CanIf_CtrlPCConfig>:
   10548:	00000000 00010540                       ....@...

00010550 <CanIf_PCConfig>:
   10550:	00000001 00010548                       ....H...

00010558 <CanIf_TxPdu>:
   10558:	00000000 00000001 00000002 00000000     ................
   10568:	000008fd 00000001 00000002 00000002     ................
   10578:	00000000 00000925 00000002 00000143     ....%.......C...
   10588:	00000002 00000000 0000094d              ........M...

00010594 <CanIf_Can_43_FLEXCAN_HohToRxPduMapping>:
   10594:	00000000                                ....

00010598 <CanIf_Can_43_FLEXCAN_DrvConfig>:
   10598:	00010594                                ....

0001059c <CanIf_CanDrvConfig>:
   1059c:	00010598                                ....

000105a0 <CanIf_Config>:
   105a0:	00000300 0001059c 00000000 00010558     ............X...

000105b0 <Can_43_FLEXCANIpwHwChannelConfig0>:
   105b0:	00010a78                                x...

000105b4 <Can_au32HwBufferAddr_Ctrl0>:
   105b4:	4002b080 4002b090 4002b0a0              ...@...@...@

000105c0 <Can_aCtrlOffsetToCtrlIDMap>:
   105c0:	0000ffff                                ....

000105c4 <Can_aHwObjIDToCtrlIDMap>:
   105c4:	00000000                                ....

000105c8 <Can_aHwObjectConfig>:
   105c8:	00000000 00000001 00000000 ff030000     ................
   105d8:	00000008 00000000 00000003 00000000     ................
   105e8:	000105b4                                ....

000105ec <Can_aBaudrateConfig_Ctrl0>:
   105ec:	04030000 001d0005 00000000 00000000     ................
	...
   10604:	00050403 0000000b 00000000 00000000     ................
   10614:	00000000 04030000 00050005 00000000     ................
	...

00010630 <Can_apHwObject_Ctrl0>:
   10630:	000105c8                                ....

00010634 <Can_aControllerConfig>:
   10634:	00020000 4002b000 00000001 ffffffff     .......@........
	...
   10650:	00030001 000105ec 000105b0 00000001     ................
   10660:	00010630                                0...

00010664 <Can_apController>:
   10664:	00010634                                4...

00010668 <Can_43_FLEXCAN_Config>:
	...
   10670:	000105c0 000105c4 000105c8 00010664     ............d...

00010680 <Mcu_aClockConfigPB>:
	...
   10688:	1c000101 04000010 01000029 00000005     ........).......
   10698:	00000001 00000000 00000057 00000000     ........W.......
   106a8:	00000000 00000008 007a1200 00000001     ..........z.....
   106b8:	00000001 00000000 00000057 00000000     ........W.......
   106c8:	00000057 00000000 00000000 00000000     W...............
	...
   106e8:	00000019 00000005 0000001a 00000002     ................
   106f8:	0000001b 00000005 0000002a 00000005     ........*.......
   10708:	00000028 0000000e 00000029 00000001     (.......).......
   10718:	00000056 0000001c 00000032 0000002a     V.......2...*...
   10728:	0000002b 00000014 0000002c 00000014     +.......,.......
   10738:	0000002d 00000014 0000002e 00000014     -...............
   10748:	0000003f 00000000 00000040 00000000     ?.......@.......
   10758:	00000041 00000000 00000042 00000000     A.......B.......
   10768:	00000031 00000000 00000045 00000000     1.......E.......
   10778:	00000046 00000000 00000047 00000000     F.......G.......
   10788:	00000044 00000000 00000030 00000000     D.......0.......
   10798:	0000003d 00000000 00000043 00000000     =.......C.......
   107a8:	00000049 00000000 0000004a 00000000     I.......J.......
   107b8:	0000004b 00000000 00000048 00000000     K.......H.......
   107c8:	0000000c 00000001 00000000 0000000d     ................
   107d8:	00000002 00000000 0000000e 00000001     ................
   107e8:	00000000 0000000f 00000001 00000000     ................
   107f8:	0000001d 00000001 00000000 0000001e     ................
   10808:	00000008 00000000 0000001f 00000001     ................
   10818:	00000000 00000021 00000001 00000000     ....!...........
   10828:	00000022 00000002 00000000 00000023     "...........#...
   10838:	00000001 00000000 00000025 00000003     ........%.......
   10848:	00000000 00000026 00000004 00000000     ....&...........
   10858:	00000027 00000002 00000000 00000032     '...........2...
   10868:	00000001 00000000 00000048 00000001     ........H.......
   10878:	00000001 00000056 00000001 00000001     ....V...........
   10888:	00000057 00000000 00000000 00000057     W...........W...
	...
   108a0:	00000057 00000000 00000000 00000057     W...........W...
	...
   108b8:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   108d4:	00000014 00007d00 00000015 00007d00     .....}.......}..
   108e4:	00000016 00007d00 00000017 00008000     .....}..........
   108f4:	00000012 00000001 00000013 00000001     ................
   10904:	00000030 00000000 00000031 00000000     0.......1.......
   10914:	00000032 00000000 00000033 00000000     2.......3.......
   10924:	00000034 00000000 00000035 00000001     4.......5.......
   10934:	00000036 00000000 00000037 00000001     6.......7.......
   10944:	00000038 00000001 00000039 00000000     8.......9.......
   10954:	0000003a 00000000 0000003b 00000000     :.......;.......
   10964:	0000003c 00000001 0000003d 00000000     <.......=.......
   10974:	0000003e 00000000 0000003f 00000000     >.......?.......
   10984:	00000040 00000000 00000041 00000000     @.......A.......
   10994:	00000042 00000000 00000043 00000000     B.......C.......
   109a4:	00000044 00000000 00000045 00000000     D.......E.......
   109b4:	00000046 00000000 00000047 00000000     F.......G.......
   109c4:	00000048 00000000 00000049 00000000     H.......I.......
   109d4:	0000004a 00000000 0000004b 00000000     J.......K.......
   109e4:	0000004c 00000001 0000004d 00000001     L.......M.......
   109f4:	0000004e 00000000 0000004f 00000000     N.......O.......
   10a04:	00000050 00000001 00000051 00000001     P.......Q.......
   10a14:	00000052 00000001 00000053 00000001     R.......S.......
   10a24:	00000054 00000001 00000055 00000000     T.......U.......
   10a34:	00000056 00000001 00000057 00000000     V.......W.......
   10a44:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00010a78 <Flexcan_aCtrlConfigPB>:
   10a78:	00000003 00000000 00000000 00000000     ................
   10a88:	00000040 00000000 00000100 00000003     @...............
   10a98:	00000004 00000005 0000000b 00000000     ................
   10aa8:	00000004 00000004 00000005 0000000b     ................
	...
   10ac0:	00008e25 00008ed1                       %.......

00010ac8 <aIrqConfiguration>:
   10ac8:	0000005c 00000f01 0000d351 0000005d     \.......Q...]...
   10ad8:	00000f01 0000d361 0000005f 00000f01     ....a..._.......
   10ae8:	0000d371                                q...

00010aec <intCtrlConfig>:
   10aec:	00000003 00010ac8                       ........

00010af4 <Mcu_Config>:
   10af4:	0000005a 00000000 00000001 00000001     Z...............
   10b04:	00010ff8 00010680 00011004              ............

00010b10 <OsIf_xPredefinedConfig>:
   10b10:	00000000 02dc6c00                       .....l..

00010b18 <OsIf_apxPredefinedConfig>:
   10b18:	00010b10                                ....

00010b1c <Platform_uConfiguration>:
   10b1c:	00010b24                                $...

00010b20 <Platform_Config>:
   10b20:	00010b1c                                ....

00010b24 <ipwConfig>:
   10b24:	00010aec 00000000                       ........

00010b2c <g_pin_mux_InitConfigArr>:
   10b2c:	4004c000 400ff0c0 00000010 00000002     ...@...@........
   10b3c:	00000001 00000002 00000000 00000000     ................
   10b4c:	00000000 00000100 4004c000 400ff0c0     ...........@...@
   10b5c:	0000000f 00000002 00000001 00000002     ................
	...
   10b78:	00000100 4004c000 400ff0c0 00000000     .......@...@....
   10b88:	00000002 00000001 00000002 00000000     ................
	...
   10ba0:	00000100 4004c000 400ff0c0 00000011     .......@...@....
   10bb0:	00000002 00000001 00000001 00000000     ................
	...
   10bcc:	4004d000 400ff100 0000000c 00000002     ...@...@........
   10bdc:	00000001 00000001 00000000 00000000     ................
	...
   10bf4:	40049000 400ff000 0000000c 00000002     ...@...@........
   10c04:	00000001 00000001 00000000 00000000     ................
	...
   10c1c:	4004b000 400ff080 00000008 00000002     ...@...@........
   10c2c:	00000001 00000002 00000000 00000000     ................
	...
   10c44:	4004b000 400ff080 00000009 00000002     ...@...@........
   10c54:	00000001 00000002 00000000 00000000     ................
	...
   10c6c:	4004b000 400ff080 0000000a 00000002     ...@...@........
   10c7c:	00000001 00000002 00000000 00000000     ................
	...
   10c94:	4004b000 400ff080 0000000b 00000002     ...@...@........
   10ca4:	00000001 00000002 00000000 00000000     ................
	...
   10cbc:	4004b000 400ff080 0000000c 00000002     ...@...@........
   10ccc:	00000001 00000002 00000000 00000000     ................
	...
   10ce4:	4004b000 400ff080 0000000d 00000002     ...@...@........
   10cf4:	00000001 00000002 00000000 00000000     ................
	...
   10d0c:	4004b000 400ff080 0000000e 00000002     ...@...@........
   10d1c:	00000001 00000002 00000000 00000000     ................
	...
   10d34:	4004b000 400ff080 0000000f 00000002     ...@...@........
   10d44:	00000001 00000002 00000000 00000000     ................
	...
   10d5c:	4004b000 00000000 00000011 00000002     ...@............
   10d6c:	00000003 00000001 00000000 00000000     ................
	...
   10d84:	4004b000 00000000 00000010 00000002     ...@............
   10d94:	00000003 00000001 00000000 00000000     ................
	...

00010dac <au8Port_PartitionList>:
   10dac:	00000001                                ....

00010db0 <au32Port_PinToPartitionMap>:
   10db0:	00000001 00000001 00000001 00000001     ................
   10dc0:	00000001 00000001 00000001 00000001     ................
   10dd0:	00000001 00000001 00000001 00000001     ................
   10de0:	00000001 00000001 00000001 00000001     ................

00010df0 <Port_au16NoUnUsedPadsArrayDefault>:
   10df0:	00010000 00030002 00070006 00090008     ................
   10e00:	000d000b 000f000e 00110010 00210020     ............ .!.
   10e10:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
   10e20:	002b002a 002d002c 002f002e 00310030     *.+.,.-.../.0.1.
   10e30:	00410040 00430042 00470046 00620061     @.A.B.C.F.G.a.b.
   10e40:	00640063 00660065 00680067 006a0069     c.d.e.f.g.h.i.j.
   10e50:	006c006b 006e006d 00810080 00830082     k.l.m.n.........
   10e60:	00850084 00870086 00890088 008b008a     ................
   10e70:	008e008d 0090008f                       ........

00010e78 <Port_UnUsedPin>:
   10e78:	00000100 00000001 00000000              ............

00010e84 <Port_aPinConfigDefault>:
   10e84:	00000070 00000100 00000001 00000002     p...............
   10e94:	00010001 00000051 00000300 00000000     ....Q...........
   10ea4:	00000001 00010000 00000050 00000300     ........P.......
   10eb4:	00000000 00000001 00010000 0000006f     ............o...
   10ec4:	00000100 00000001 00000002 00010001     ................
   10ed4:	00000060 00000100 00000001 00000002     `...............
   10ee4:	00010001 00000071 00000100 00000000     ....q...........
   10ef4:	00000001 00010001 0000008c 00000100     ................
   10f04:	00000000 00000001 00010001 0000000c     ................
   10f14:	00000100 00000000 00000001 00010001     ................
   10f24:	00000048 00000100 00000000 00000002     H...............
   10f34:	00010001 00000049 00000100 00000000     ....I...........
   10f44:	00000002 00010001 0000004a 00000100     ........J.......
   10f54:	00000000 00000002 00010001 0000004b     ............K...
   10f64:	00000100 00000000 00000002 00010001     ................
   10f74:	0000004c 00000100 00000000 00000002     L...............
   10f84:	00010001 0000004d 00000100 00000000     ....M...........
   10f94:	00000002 00010001 0000004e 00000100     ........N.......
   10fa4:	00000000 00000002 00010001 0000004f     ............O...
   10fb4:	00000100 00000000 00000002 00010001     ................

00010fc4 <Port_Config>:
   10fc4:	00440010 00010df0 00010e78 00010e84     ..D.....x.......
	...
   10fdc:	00010db0 00010dac 00010b2c              ........,...

00010fe8 <Power_Ip_RCM_ConfigPB>:
	...

00010ff0 <Power_Ip_PMC_ConfigPB>:
   10ff0:	00000000                                ....

00010ff4 <Power_Ip_SMC_ConfigPB>:
   10ff4:	00000000                                ....

00010ff8 <Power_Ip_aModeConfigPB>:
	...

00011004 <Power_Ip_HwIPsConfigPB>:
   11004:	00010fe8 00010ff0 00010ff4              ............

00011010 <_aInitStr.0>:
   11010:	00000000 54540000 45522052 53454747     ......TTR REGGES
   11020:	00000000                                ....

00011024 <_aV2C.0>:
   11024:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00011034 <__INIT_TABLE>:
   11034:	00000002 	.word	0x00000002
   11038:	1fff8b10 	.word	0x1fff8b10
   1103c:	0001105c 	.word	0x0001105c
   11040:	00011094 	.word	0x00011094
   11044:	1fff8800 	.word	0x1fff8800
   11048:	00000000 	.word	0x00000000
   1104c:	00000310 	.word	0x00000310

00011050 <__ZERO_TABLE>:
   11050:	00000001 	.word	0x00000001
   11054:	1fff8b50 	.word	0x1fff8b50
   11058:	1fff96a0 	.word	0x1fff96a0
