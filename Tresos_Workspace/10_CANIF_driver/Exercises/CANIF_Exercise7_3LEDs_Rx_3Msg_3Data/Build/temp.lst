
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000df7 	.word	0x00000df7
  10:	00000df9 	.word	0x00000df9
  14:	00000dfb 	.word	0x00000dfb
  18:	00000dfd 	.word	0x00000dfd
	...
  2c:	00000dff 	.word	0x00000dff
  30:	00000e01 	.word	0x00000e01
  34:	00000000 	.word	0x00000000
  38:	00000e03 	.word	0x00000e03
  3c:	00000e05 	.word	0x00000e05
  40:	00000e07 	.word	0x00000e07
  44:	00000e07 	.word	0x00000e07
  48:	00000e07 	.word	0x00000e07
  4c:	00000e07 	.word	0x00000e07
  50:	00000e07 	.word	0x00000e07
  54:	00000e07 	.word	0x00000e07
  58:	00000e07 	.word	0x00000e07
  5c:	00000e07 	.word	0x00000e07
  60:	00000e07 	.word	0x00000e07
  64:	00000e07 	.word	0x00000e07
  68:	00000e07 	.word	0x00000e07
  6c:	00000e07 	.word	0x00000e07
  70:	00000e07 	.word	0x00000e07
  74:	00000e07 	.word	0x00000e07
  78:	00000e07 	.word	0x00000e07
  7c:	00000e07 	.word	0x00000e07
  80:	00000e07 	.word	0x00000e07
  84:	00000e07 	.word	0x00000e07
  88:	00000e07 	.word	0x00000e07
  8c:	00000e07 	.word	0x00000e07
  90:	00000e07 	.word	0x00000e07
  94:	00000e07 	.word	0x00000e07
  98:	00000e07 	.word	0x00000e07
  9c:	00000e07 	.word	0x00000e07
  a0:	00000e07 	.word	0x00000e07
  a4:	00000e07 	.word	0x00000e07
  a8:	00000e07 	.word	0x00000e07
  ac:	00000e07 	.word	0x00000e07
  b0:	00000e07 	.word	0x00000e07
  b4:	00000e07 	.word	0x00000e07
  b8:	00000e07 	.word	0x00000e07
  bc:	00000e07 	.word	0x00000e07
  c0:	00000e07 	.word	0x00000e07
  c4:	00000e07 	.word	0x00000e07
  c8:	00000e07 	.word	0x00000e07
  cc:	00000e07 	.word	0x00000e07
  d0:	00000e07 	.word	0x00000e07
  d4:	00000e07 	.word	0x00000e07
  d8:	00000e07 	.word	0x00000e07
  dc:	00000e07 	.word	0x00000e07
  e0:	00000e07 	.word	0x00000e07
  e4:	00000e07 	.word	0x00000e07
  e8:	00000e07 	.word	0x00000e07
  ec:	00000e07 	.word	0x00000e07
  f0:	00000e07 	.word	0x00000e07
  f4:	00000e07 	.word	0x00000e07
  f8:	00000e07 	.word	0x00000e07
  fc:	00000e07 	.word	0x00000e07
 100:	00000e07 	.word	0x00000e07
 104:	00000e07 	.word	0x00000e07
 108:	00000e07 	.word	0x00000e07
 10c:	00000e07 	.word	0x00000e07
 110:	00000e07 	.word	0x00000e07
 114:	00000e07 	.word	0x00000e07
 118:	00000e07 	.word	0x00000e07
 11c:	00000e07 	.word	0x00000e07
 120:	00000e07 	.word	0x00000e07
 124:	00000e07 	.word	0x00000e07
 128:	00000e07 	.word	0x00000e07
 12c:	00000e07 	.word	0x00000e07
 130:	00000e07 	.word	0x00000e07
 134:	00000e07 	.word	0x00000e07
 138:	00000e07 	.word	0x00000e07
 13c:	00000e07 	.word	0x00000e07
 140:	00000e07 	.word	0x00000e07
 144:	00000e07 	.word	0x00000e07
 148:	00000e07 	.word	0x00000e07
 14c:	00000e07 	.word	0x00000e07
 150:	00000e07 	.word	0x00000e07
 154:	00000e07 	.word	0x00000e07
 158:	00000e07 	.word	0x00000e07
 15c:	00000e07 	.word	0x00000e07
 160:	00000e07 	.word	0x00000e07
 164:	00000e07 	.word	0x00000e07
 168:	00000e07 	.word	0x00000e07
 16c:	00000e07 	.word	0x00000e07
 170:	00000e07 	.word	0x00000e07
 174:	00000e07 	.word	0x00000e07
 178:	00000e07 	.word	0x00000e07
 17c:	00000e07 	.word	0x00000e07
 180:	00000e07 	.word	0x00000e07
 184:	00000e07 	.word	0x00000e07
 188:	00000e07 	.word	0x00000e07
 18c:	00000e07 	.word	0x00000e07
 190:	00000e07 	.word	0x00000e07
 194:	00000e07 	.word	0x00000e07
 198:	00000e07 	.word	0x00000e07
 19c:	00000e07 	.word	0x00000e07
 1a0:	00000e07 	.word	0x00000e07
 1a4:	00000e07 	.word	0x00000e07
 1a8:	00000e07 	.word	0x00000e07
 1ac:	00000e07 	.word	0x00000e07
 1b0:	00000e07 	.word	0x00000e07
 1b4:	00000e07 	.word	0x00000e07
 1b8:	00000e07 	.word	0x00000e07
 1bc:	00000e07 	.word	0x00000e07
 1c0:	00000e07 	.word	0x00000e07
 1c4:	00000e07 	.word	0x00000e07
 1c8:	00000e07 	.word	0x00000e07
 1cc:	00000e07 	.word	0x00000e07
 1d0:	00000e07 	.word	0x00000e07
 1d4:	00000e07 	.word	0x00000e07
 1d8:	00000e07 	.word	0x00000e07
 1dc:	00000e07 	.word	0x00000e07
 1e0:	00000e07 	.word	0x00000e07
 1e4:	00000e07 	.word	0x00000e07
 1e8:	00000e07 	.word	0x00000e07
 1ec:	00000e07 	.word	0x00000e07
 1f0:	00000e07 	.word	0x00000e07
 1f4:	00000e07 	.word	0x00000e07
 1f8:	00000e07 	.word	0x00000e07
 1fc:	00000e07 	.word	0x00000e07
 200:	00000e07 	.word	0x00000e07
 204:	00000e07 	.word	0x00000e07
 208:	00000e07 	.word	0x00000e07
 20c:	00000e07 	.word	0x00000e07
 210:	00000e07 	.word	0x00000e07
 214:	00000e07 	.word	0x00000e07
 218:	00000e07 	.word	0x00000e07
 21c:	00000e07 	.word	0x00000e07
 220:	00000e07 	.word	0x00000e07
 224:	00000e07 	.word	0x00000e07
 228:	00000e07 	.word	0x00000e07
 22c:	00000e07 	.word	0x00000e07
 230:	00000e07 	.word	0x00000e07
 234:	00000e07 	.word	0x00000e07
 238:	00000e07 	.word	0x00000e07
 23c:	00000e07 	.word	0x00000e07
 240:	00000e07 	.word	0x00000e07
 244:	00000e07 	.word	0x00000e07
 248:	00000e07 	.word	0x00000e07
 24c:	00000e07 	.word	0x00000e07
 250:	00000e07 	.word	0x00000e07
 254:	00000e07 	.word	0x00000e07
 258:	00000e07 	.word	0x00000e07
 25c:	00000e07 	.word	0x00000e07
 260:	00000e07 	.word	0x00000e07
 264:	00000e07 	.word	0x00000e07
 268:	00000e07 	.word	0x00000e07
 26c:	00000e07 	.word	0x00000e07
 270:	00000e07 	.word	0x00000e07
 274:	00000e07 	.word	0x00000e07
 278:	00000e07 	.word	0x00000e07
 27c:	00000e07 	.word	0x00000e07
 280:	00000e07 	.word	0x00000e07
 284:	00000e07 	.word	0x00000e07
 288:	00000e07 	.word	0x00000e07
 28c:	00000e07 	.word	0x00000e07
 290:	00000e07 	.word	0x00000e07
 294:	00000e07 	.word	0x00000e07
 298:	00000e07 	.word	0x00000e07
 29c:	00000e07 	.word	0x00000e07
 2a0:	00000e07 	.word	0x00000e07
 2a4:	00000e07 	.word	0x00000e07
 2a8:	00000e07 	.word	0x00000e07
 2ac:	00000e07 	.word	0x00000e07
 2b0:	00000e07 	.word	0x00000e07
 2b4:	00000e07 	.word	0x00000e07
 2b8:	00000e07 	.word	0x00000e07
 2bc:	00000e07 	.word	0x00000e07
 2c0:	00000e07 	.word	0x00000e07
 2c4:	00000e07 	.word	0x00000e07
 2c8:	00000e07 	.word	0x00000e07
 2cc:	00000e07 	.word	0x00000e07
 2d0:	00000e07 	.word	0x00000e07
 2d4:	00000e07 	.word	0x00000e07
 2d8:	00000e07 	.word	0x00000e07
 2dc:	00000e07 	.word	0x00000e07
 2e0:	00000e07 	.word	0x00000e07
 2e4:	00000e07 	.word	0x00000e07
 2e8:	00000e07 	.word	0x00000e07
 2ec:	00000e07 	.word	0x00000e07
 2f0:	00000e07 	.word	0x00000e07
 2f4:	00000e07 	.word	0x00000e07
 2f8:	00000e07 	.word	0x00000e07
 2fc:	00000e07 	.word	0x00000e07
 300:	00000e07 	.word	0x00000e07
 304:	00000e07 	.word	0x00000e07
 308:	00000e07 	.word	0x00000e07
 30c:	00000e07 	.word	0x00000e07

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fbef 	bl	c64 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fcae 	bl	dec <startup_go_to_user_mode>
     490:	f000 faa6 	bl	9e0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff91d0 	.word	0x1fff91d0

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fbf9 	bl	d90 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Delay>:
void EcuM_Init( void );

/*this is dummy delay function prepare just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     8b0:	b500      	push	{lr}
     8b2:	b087      	sub	sp, #28
     8b4:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     8b6:	9b01      	ldr	r3, [sp, #4]
     8b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8bc:	fb02 f303 	mul.w	r3, r2, r3
     8c0:	2101      	movs	r1, #1
     8c2:	4618      	mov	r0, r3
     8c4:	f001 faa0 	bl	1e08 <OsIf_MicrosToTicks>
     8c8:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     8ca:	2001      	movs	r0, #1
     8cc:	f001 fa50 	bl	1d70 <OsIf_GetCounter>
     8d0:	4603      	mov	r3, r0
     8d2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     8d4:	2300      	movs	r3, #0
     8d6:	9305      	str	r3, [sp, #20]
    do{
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8d8:	ab03      	add	r3, sp, #12
     8da:	2101      	movs	r1, #1
     8dc:	4618      	mov	r0, r3
     8de:	f001 fa60 	bl	1da2 <OsIf_GetElapsed>
     8e2:	4602      	mov	r2, r0
     8e4:	9b05      	ldr	r3, [sp, #20]
     8e6:	4413      	add	r3, r2
     8e8:	9305      	str	r3, [sp, #20]
    }
    while( ElapsedTime < Timeout );
     8ea:	9a05      	ldr	r2, [sp, #20]
     8ec:	9b04      	ldr	r3, [sp, #16]
     8ee:	429a      	cmp	r2, r3
     8f0:	d3f2      	bcc.n	8d8 <Delay+0x28>
}
     8f2:	bf00      	nop
     8f4:	bf00      	nop
     8f6:	b007      	add	sp, #28
     8f8:	f85d fb04 	ldr.w	pc, [sp], #4

000008fc <CDD_UserRxConfirmation0x154>:

/*Callback function to indicate that the message was received. The reference
to function shall be defined in file Autosar/CanIf/include/CanIf_Cdd.h, such file
must be created manualy*/
void CDD_UserRxConfirmation0x154( PduIdType RxPduId, const PduInfoType* PduInfoPtr )
{
     8fc:	b084      	sub	sp, #16
     8fe:	4603      	mov	r3, r0
     900:	9100      	str	r1, [sp, #0]
     902:	f8ad 3006 	strh.w	r3, [sp, #6]
    (void)RxPduId;

    /* The received message is store in PduInfoPtr->SduDataPtr */
    for(uint8 i = 0; i < 8 ; i++)
     906:	2300      	movs	r3, #0
     908:	f88d 300f 	strb.w	r3, [sp, #15]
     90c:	e00e      	b.n	92c <CDD_UserRxConfirmation0x154+0x30>
    {
        Can_au8Sdu8bytes[i] = PduInfoPtr->SduDataPtr[i];
     90e:	9b00      	ldr	r3, [sp, #0]
     910:	681a      	ldr	r2, [r3, #0]
     912:	f89d 300f 	ldrb.w	r3, [sp, #15]
     916:	441a      	add	r2, r3
     918:	f89d 300f 	ldrb.w	r3, [sp, #15]
     91c:	7811      	ldrb	r1, [r2, #0]
     91e:	4a08      	ldr	r2, [pc, #32]	; (940 <CDD_UserRxConfirmation0x154+0x44>)
     920:	54d1      	strb	r1, [r2, r3]
    for(uint8 i = 0; i < 8 ; i++)
     922:	f89d 300f 	ldrb.w	r3, [sp, #15]
     926:	3301      	adds	r3, #1
     928:	f88d 300f 	strb.w	r3, [sp, #15]
     92c:	f89d 300f 	ldrb.w	r3, [sp, #15]
     930:	2b07      	cmp	r3, #7
     932:	d9ec      	bls.n	90e <CDD_UserRxConfirmation0x154+0x12>
    }
    LEDFlag = 1;
     934:	4b03      	ldr	r3, [pc, #12]	; (944 <CDD_UserRxConfirmation0x154+0x48>)
     936:	2201      	movs	r2, #1
     938:	701a      	strb	r2, [r3, #0]
}
     93a:	bf00      	nop
     93c:	b004      	add	sp, #16
     93e:	4770      	bx	lr
     940:	1fff8b40 	.word	0x1fff8b40
     944:	1fff8b48 	.word	0x1fff8b48

00000948 <CDD_UserRxConfirmation0x233>:

/*Callback function to indicate that the message was received. The reference
to function shall be defined in file Autosar/CanIf/include/CanIf_Cdd.h, such file
must be created manualy*/
void CDD_UserRxConfirmation0x233( PduIdType RxPduId, const PduInfoType* PduInfoPtr )
{
     948:	b084      	sub	sp, #16
     94a:	4603      	mov	r3, r0
     94c:	9100      	str	r1, [sp, #0]
     94e:	f8ad 3006 	strh.w	r3, [sp, #6]
    (void)RxPduId;

    /* The received message is store in PduInfoPtr->SduDataPtr */
    for(uint8 i = 0; i < 8 ; i++)
     952:	2300      	movs	r3, #0
     954:	f88d 300f 	strb.w	r3, [sp, #15]
     958:	e00e      	b.n	978 <CDD_UserRxConfirmation0x233+0x30>
    {
        Can_au8Sdu8bytes[i] = PduInfoPtr->SduDataPtr[i];
     95a:	9b00      	ldr	r3, [sp, #0]
     95c:	681a      	ldr	r2, [r3, #0]
     95e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     962:	441a      	add	r2, r3
     964:	f89d 300f 	ldrb.w	r3, [sp, #15]
     968:	7811      	ldrb	r1, [r2, #0]
     96a:	4a08      	ldr	r2, [pc, #32]	; (98c <CDD_UserRxConfirmation0x233+0x44>)
     96c:	54d1      	strb	r1, [r2, r3]
    for(uint8 i = 0; i < 8 ; i++)
     96e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     972:	3301      	adds	r3, #1
     974:	f88d 300f 	strb.w	r3, [sp, #15]
     978:	f89d 300f 	ldrb.w	r3, [sp, #15]
     97c:	2b07      	cmp	r3, #7
     97e:	d9ec      	bls.n	95a <CDD_UserRxConfirmation0x233+0x12>
    }
    LEDFlag = 2;
     980:	4b03      	ldr	r3, [pc, #12]	; (990 <CDD_UserRxConfirmation0x233+0x48>)
     982:	2202      	movs	r2, #2
     984:	701a      	strb	r2, [r3, #0]
}
     986:	bf00      	nop
     988:	b004      	add	sp, #16
     98a:	4770      	bx	lr
     98c:	1fff8b40 	.word	0x1fff8b40
     990:	1fff8b48 	.word	0x1fff8b48

00000994 <CDD_UserRxConfirmation0x382>:

/*Callback function to indicate that the message was received. The reference
to function shall be defined in file Autosar/CanIf/include/CanIf_Cdd.h, such file
must be created manualy*/
void CDD_UserRxConfirmation0x382( PduIdType RxPduId, const PduInfoType* PduInfoPtr )
{
     994:	b084      	sub	sp, #16
     996:	4603      	mov	r3, r0
     998:	9100      	str	r1, [sp, #0]
     99a:	f8ad 3006 	strh.w	r3, [sp, #6]
    (void)RxPduId;

    /* The received message is store in PduInfoPtr->SduDataPtr */
    for(uint8 i = 0; i < 8 ; i++)
     99e:	2300      	movs	r3, #0
     9a0:	f88d 300f 	strb.w	r3, [sp, #15]
     9a4:	e00e      	b.n	9c4 <CDD_UserRxConfirmation0x382+0x30>
    {
        Can_au8Sdu8bytes[i] = PduInfoPtr->SduDataPtr[i];
     9a6:	9b00      	ldr	r3, [sp, #0]
     9a8:	681a      	ldr	r2, [r3, #0]
     9aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
     9ae:	441a      	add	r2, r3
     9b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
     9b4:	7811      	ldrb	r1, [r2, #0]
     9b6:	4a08      	ldr	r2, [pc, #32]	; (9d8 <CDD_UserRxConfirmation0x382+0x44>)
     9b8:	54d1      	strb	r1, [r2, r3]
    for(uint8 i = 0; i < 8 ; i++)
     9ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
     9be:	3301      	adds	r3, #1
     9c0:	f88d 300f 	strb.w	r3, [sp, #15]
     9c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
     9c8:	2b07      	cmp	r3, #7
     9ca:	d9ec      	bls.n	9a6 <CDD_UserRxConfirmation0x382+0x12>
    }
    LEDFlag = 3;
     9cc:	4b03      	ldr	r3, [pc, #12]	; (9dc <CDD_UserRxConfirmation0x382+0x48>)
     9ce:	2203      	movs	r2, #3
     9d0:	701a      	strb	r2, [r3, #0]
}
     9d2:	bf00      	nop
     9d4:	b004      	add	sp, #16
     9d6:	4770      	bx	lr
     9d8:	1fff8b40 	.word	0x1fff8b40
     9dc:	1fff8b48 	.word	0x1fff8b48

000009e0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     9e0:	b500      	push	{lr}
     9e2:	b083      	sub	sp, #12
    EcuM_Init();
     9e4:	f000 f886 	bl	af4 <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     9e8:	f000 fba0 	bl	112c <SEGGER_RTT_Init>

    uint32 blinkingtime = 0;
     9ec:	2300      	movs	r3, #0
     9ee:	9301      	str	r3, [sp, #4]

    /* Set the specified baudrate */
    if (Can_43_FLEXCAN_SetBaudrate(CanController_0, CAN_BAUDRATE_500kbps_ID ) == E_OK) {
     9f0:	2102      	movs	r1, #2
     9f2:	2000      	movs	r0, #0
     9f4:	f006 fbaa 	bl	714c <Can_43_FLEXCAN_SetBaudrate>
     9f8:	4603      	mov	r3, r0
     9fa:	2b00      	cmp	r3, #0
     9fc:	d104      	bne.n	a08 <main+0x28>
        SEGGER_RTT_printf( 0, "CAN baud rate set successfully. \n" );
     9fe:	4934      	ldr	r1, [pc, #208]	; (ad0 <main+0xf0>)
     a00:	2000      	movs	r0, #0
     a02:	f000 fefb 	bl	17fc <SEGGER_RTT_printf>
     a06:	e003      	b.n	a10 <main+0x30>

    } else {
        SEGGER_RTT_printf( 0, "Failed to set CAN baud rate. \n" );
     a08:	4932      	ldr	r1, [pc, #200]	; (ad4 <main+0xf4>)
     a0a:	2000      	movs	r0, #0
     a0c:	f000 fef6 	bl	17fc <SEGGER_RTT_printf>
    /* Start the CAN controller and make it active in the CAN bus network */
    /* The CAN module notifies the upper layer (CanIf_ControllerModeIndication) after 
    a successful state transition about the new state. The monitoring whether the 
    requested state is achieved is part of an upper layer module and is not part of 
    the Can module. */
    if (Can_43_FLEXCAN_SetControllerMode( CanController_0, CAN_CS_STARTED ) == E_OK) {
     a10:	2101      	movs	r1, #1
     a12:	2000      	movs	r0, #0
     a14:	f006 fbd2 	bl	71bc <Can_43_FLEXCAN_SetControllerMode>
     a18:	4603      	mov	r3, r0
     a1a:	2b00      	cmp	r3, #0
     a1c:	d104      	bne.n	a28 <main+0x48>
        SEGGER_RTT_printf( 0, "CAN controller state machine set successfully. \n" );
     a1e:	492e      	ldr	r1, [pc, #184]	; (ad8 <main+0xf8>)
     a20:	2000      	movs	r0, #0
     a22:	f000 feeb 	bl	17fc <SEGGER_RTT_printf>
     a26:	e003      	b.n	a30 <main+0x50>

    } else {
        SEGGER_RTT_printf( 0, "Failed to set CAN controller state machine. \n" );
     a28:	492c      	ldr	r1, [pc, #176]	; (adc <main+0xfc>)
     a2a:	2000      	movs	r0, #0
     a2c:	f000 fee6 	bl	17fc <SEGGER_RTT_printf>
    }

    while( 1u )
    {

        if(LEDFlag == 1)
     a30:	4b2b      	ldr	r3, [pc, #172]	; (ae0 <main+0x100>)
     a32:	781b      	ldrb	r3, [r3, #0]
     a34:	2b01      	cmp	r3, #1
     a36:	d114      	bne.n	a62 <main+0x82>
        {
            LEDFlag = 0;
     a38:	4b29      	ldr	r3, [pc, #164]	; (ae0 <main+0x100>)
     a3a:	2200      	movs	r2, #0
     a3c:	701a      	strb	r2, [r3, #0]
            /* Use the first and second byte received to determine the time for blinking */
            /* 
            Payload used for testing: 0x00 0x00 0x00 0x00 0x00 0x00 0x32 0x64 
            Byte 0: 0x64 (100), Byte 1: 0x32 (50), blinking time: 0x96 (150) ms
            */
            blinkingtime = (uint32)(Can_au8Sdu8bytes[7] + Can_au8Sdu8bytes[6]);
     a3e:	4b29      	ldr	r3, [pc, #164]	; (ae4 <main+0x104>)
     a40:	79db      	ldrb	r3, [r3, #7]
     a42:	461a      	mov	r2, r3
     a44:	4b27      	ldr	r3, [pc, #156]	; (ae4 <main+0x104>)
     a46:	799b      	ldrb	r3, [r3, #6]
     a48:	4413      	add	r3, r2
     a4a:	9301      	str	r3, [sp, #4]
            //SEGGER_RTT_printf( 0, "[Debug] Byte 0: 0x%x, Byte 1: 0x%x, blinking time: 0x%x ms \n", Can_au8Sdu8bytes[7], Can_au8Sdu8bytes[6], blinkingtime );
            SEGGER_RTT_printf( 0, "CAN msg 0x154 received at 500kbps to blink BLUE LED for: %d ms \n", blinkingtime );
     a4c:	9a01      	ldr	r2, [sp, #4]
     a4e:	4926      	ldr	r1, [pc, #152]	; (ae8 <main+0x108>)
     a50:	2000      	movs	r0, #0
     a52:	f000 fed3 	bl	17fc <SEGGER_RTT_printf>
            HwIoAb_Leds_TurnToggle( HWIOAB_LED_BLUE_ID );
     a56:	2000      	movs	r0, #0
     a58:	f000 f8dc 	bl	c14 <HwIoAb_Leds_TurnToggle>
            Delay(blinkingtime);
     a5c:	9801      	ldr	r0, [sp, #4]
     a5e:	f7ff ff27 	bl	8b0 <Delay>
        }
        if(LEDFlag == 2)
     a62:	4b1f      	ldr	r3, [pc, #124]	; (ae0 <main+0x100>)
     a64:	781b      	ldrb	r3, [r3, #0]
     a66:	2b02      	cmp	r3, #2
     a68:	d114      	bne.n	a94 <main+0xb4>
        {
            LEDFlag = 0;
     a6a:	4b1d      	ldr	r3, [pc, #116]	; (ae0 <main+0x100>)
     a6c:	2200      	movs	r2, #0
     a6e:	701a      	strb	r2, [r3, #0]
            /* Use the first and second byte received to determine the time for blinking */
            /* 
            Payload used for testing: 0x00 0x00 0x00 0x00 0x00 0x00 0xFF 0xFF 
            Byte 0: 0xFF (255), Byte 1: 0xFF (255), blinking time: 0x01FE (510) ms
            */
            blinkingtime = (uint32)(Can_au8Sdu8bytes[7] + Can_au8Sdu8bytes[6]);
     a70:	4b1c      	ldr	r3, [pc, #112]	; (ae4 <main+0x104>)
     a72:	79db      	ldrb	r3, [r3, #7]
     a74:	461a      	mov	r2, r3
     a76:	4b1b      	ldr	r3, [pc, #108]	; (ae4 <main+0x104>)
     a78:	799b      	ldrb	r3, [r3, #6]
     a7a:	4413      	add	r3, r2
     a7c:	9301      	str	r3, [sp, #4]
            //SEGGER_RTT_printf( 0, "[Debug] Byte 0: 0x%x, Byte 1: 0x%x, blinking time: 0x%x ms \n", Can_au8Sdu8bytes[7], Can_au8Sdu8bytes[6], blinkingtime );
            SEGGER_RTT_printf( 0, "CAN msg 0x233 received at 500kbps to blink RED LED for: %d ms \n", blinkingtime );
     a7e:	9a01      	ldr	r2, [sp, #4]
     a80:	491a      	ldr	r1, [pc, #104]	; (aec <main+0x10c>)
     a82:	2000      	movs	r0, #0
     a84:	f000 feba 	bl	17fc <SEGGER_RTT_printf>
            HwIoAb_Leds_TurnToggle( HWIOAB_LED_RED_ID );
     a88:	2001      	movs	r0, #1
     a8a:	f000 f8c3 	bl	c14 <HwIoAb_Leds_TurnToggle>
            Delay(blinkingtime);
     a8e:	9801      	ldr	r0, [sp, #4]
     a90:	f7ff ff0e 	bl	8b0 <Delay>
        }
        if(LEDFlag == 3)
     a94:	4b12      	ldr	r3, [pc, #72]	; (ae0 <main+0x100>)
     a96:	781b      	ldrb	r3, [r3, #0]
     a98:	2b03      	cmp	r3, #3
     a9a:	d1c9      	bne.n	a30 <main+0x50>
        {
            LEDFlag = 0;
     a9c:	4b10      	ldr	r3, [pc, #64]	; (ae0 <main+0x100>)
     a9e:	2200      	movs	r2, #0
     aa0:	701a      	strb	r2, [r3, #0]
            /* Use the first and second byte received to determine the time for blinking */
            /* 
            Payload used for testing: 0x00 0x00 0x00 0x00 0x00 0xFF 0xE6 0xFA 
            Byte 0: 0xFA (250), Byte 1: 0xE6 (230), Byte 2: 0xFF (255), blinking time: 0x02DF (735) ms
            */
            blinkingtime = (uint32)(Can_au8Sdu8bytes[7] + Can_au8Sdu8bytes[6] + Can_au8Sdu8bytes[5]);
     aa2:	4b10      	ldr	r3, [pc, #64]	; (ae4 <main+0x104>)
     aa4:	79db      	ldrb	r3, [r3, #7]
     aa6:	461a      	mov	r2, r3
     aa8:	4b0e      	ldr	r3, [pc, #56]	; (ae4 <main+0x104>)
     aaa:	799b      	ldrb	r3, [r3, #6]
     aac:	4413      	add	r3, r2
     aae:	4a0d      	ldr	r2, [pc, #52]	; (ae4 <main+0x104>)
     ab0:	7952      	ldrb	r2, [r2, #5]
     ab2:	4413      	add	r3, r2
     ab4:	9301      	str	r3, [sp, #4]
            //SEGGER_RTT_printf( 0, "[Debug] Byte 0: 0x%x, Byte 1: 0x%x, Byte 2: 0x%x, blinking time: 0x%x ms \n", Can_au8Sdu8bytes[7], Can_au8Sdu8bytes[6], Can_au8Sdu8bytes[5], blinkingtime );
            SEGGER_RTT_printf( 0, "CAN msg 0x382 received at 500kbps to blink GREEN LED for: %d ms \n", blinkingtime );
     ab6:	9a01      	ldr	r2, [sp, #4]
     ab8:	490d      	ldr	r1, [pc, #52]	; (af0 <main+0x110>)
     aba:	2000      	movs	r0, #0
     abc:	f000 fe9e 	bl	17fc <SEGGER_RTT_printf>
            HwIoAb_Leds_TurnToggle( HWIOAB_LED_GREEN_ID );
     ac0:	2002      	movs	r0, #2
     ac2:	f000 f8a7 	bl	c14 <HwIoAb_Leds_TurnToggle>
            Delay(blinkingtime);
     ac6:	9801      	ldr	r0, [sp, #4]
     ac8:	f7ff fef2 	bl	8b0 <Delay>
        if(LEDFlag == 1)
     acc:	e7b0      	b.n	a30 <main+0x50>
     ace:	bf00      	nop
     ad0:	0000f61c 	.word	0x0000f61c
     ad4:	0000f640 	.word	0x0000f640
     ad8:	0000f660 	.word	0x0000f660
     adc:	0000f694 	.word	0x0000f694
     ae0:	1fff8b48 	.word	0x1fff8b48
     ae4:	1fff8b40 	.word	0x1fff8b40
     ae8:	0000f6c4 	.word	0x0000f6c4
     aec:	0000f708 	.word	0x0000f708
     af0:	0000f748 	.word	0x0000f748

00000af4 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     af4:	b508      	push	{r3, lr}
    /* Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h */
    Mcu_Init( &Mcu_Config );
     af6:	480e      	ldr	r0, [pc, #56]	; (b30 <EcuM_Init+0x3c>)
     af8:	f004 fec6 	bl	5888 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     afc:	2000      	movs	r0, #0
     afe:	f004 ff17 	bl	5930 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     b02:	2000      	movs	r0, #0
     b04:	f004 ff38 	bl	5978 <Mcu_SetMode>
    /* Init the internal tick reference Systick Timer */
    OsIf_Init( NULL_PTR );
     b08:	2000      	movs	r0, #0
     b0a:	f001 f928 	bl	1d5e <OsIf_Init>
    
    /* Enable and setup interrupts in use by the Can Driver */
    Platform_Init( NULL_PTR );
     b0e:	2000      	movs	r0, #0
     b10:	f001 f822 	bl	1b58 <Platform_Init>

    /* Apply all the Pin Port microcontroller configuration */
    Port_Init( &Port_Config );
     b14:	4807      	ldr	r0, [pc, #28]	; (b34 <EcuM_Init+0x40>)
     b16:	f005 fab9 	bl	608c <Port_Init>

    /* Init the FlexCAN2 with the paramters set in Tresos WITHOUT loop back mode */
    Can_43_FLEXCAN_Init( &Can_43_FLEXCAN_Config );
     b1a:	4807      	ldr	r0, [pc, #28]	; (b38 <EcuM_Init+0x44>)
     b1c:	f006 faa8 	bl	7070 <Can_43_FLEXCAN_Init>
    CanIf_Init( &CanIf_Config );
     b20:	4806      	ldr	r0, [pc, #24]	; (b3c <EcuM_Init+0x48>)
     b22:	f00e fc0f 	bl	f344 <CanIf_Init>

    /* Initializing IO Hardware Abstractions with the module ID 0 */
    IoHwAb_Init0( NULL_PTR );
     b26:	2000      	movs	r0, #0
     b28:	f000 f88a 	bl	c40 <IoHwAb_Init0>
}
     b2c:	bf00      	nop
     b2e:	bd08      	pop	{r3, pc}
     b30:	00010614 	.word	0x00010614
     b34:	00010ae4 	.word	0x00010ae4
     b38:	00010188 	.word	0x00010188
     b3c:	00010058 	.word	0x00010058

00000b40 <Can_43_FLEXCAN_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Can_43_FLEXCAN_schm_read_msr(void)
{
     b40:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     b42:	f3ef 8310 	mrs	r3, PRIMASK
     b46:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     b48:	4623      	mov	r3, r4
}
     b4a:	4618      	mov	r0, r3
     b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
     b50:	4770      	bx	lr

00000b52 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     b52:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     b54:	f3ef 8310 	mrs	r3, PRIMASK
     b58:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     b5a:	4623      	mov	r3, r4
}
     b5c:	4618      	mov	r0, r3
     b5e:	f85d 4b04 	ldr.w	r4, [sp], #4
     b62:	4770      	bx	lr

00000b64 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     b64:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     b66:	f3ef 8310 	mrs	r3, PRIMASK
     b6a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     b6c:	4623      	mov	r3, r4
}
     b6e:	4618      	mov	r0, r3
     b70:	f85d 4b04 	ldr.w	r4, [sp], #4
     b74:	4770      	bx	lr

00000b76 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     b76:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     b78:	f3ef 8310 	mrs	r3, PRIMASK
     b7c:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     b7e:	4623      	mov	r3, r4
}
     b80:	4618      	mov	r0, r3
     b82:	f85d 4b04 	ldr.w	r4, [sp], #4
     b86:	4770      	bx	lr

00000b88 <HwIoAb_Buttons_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config * Buttons_Config )
{
     b88:	b084      	sub	sp, #16
     b8a:	9001      	str	r0, [sp, #4]
    ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
     b8c:	4b16      	ldr	r3, [pc, #88]	; (be8 <HwIoAb_Buttons_Init+0x60>)
     b8e:	681b      	ldr	r3, [r3, #0]
     b90:	2203      	movs	r2, #3
     b92:	701a      	strb	r2, [r3, #0]
    ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
     b94:	4b14      	ldr	r3, [pc, #80]	; (be8 <HwIoAb_Buttons_Init+0x60>)
     b96:	681b      	ldr	r3, [r3, #0]
     b98:	9a01      	ldr	r2, [sp, #4]
     b9a:	605a      	str	r2, [r3, #4]

    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     b9c:	2300      	movs	r3, #0
     b9e:	f88d 300f 	strb.w	r3, [sp, #15]
     ba2:	e012      	b.n	bca <HwIoAb_Buttons_Init+0x42>
    {
        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     ba4:	4b10      	ldr	r3, [pc, #64]	; (be8 <HwIoAb_Buttons_Init+0x60>)
     ba6:	681a      	ldr	r2, [r3, #0]
     ba8:	f89d 300f 	ldrb.w	r3, [sp, #15]
     bac:	4413      	add	r3, r2
     bae:	2200      	movs	r2, #0
     bb0:	721a      	strb	r2, [r3, #8]
        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
     bb2:	4b0d      	ldr	r3, [pc, #52]	; (be8 <HwIoAb_Buttons_Init+0x60>)
     bb4:	681a      	ldr	r2, [r3, #0]
     bb6:	f89d 300f 	ldrb.w	r3, [sp, #15]
     bba:	4413      	add	r3, r2
     bbc:	2200      	movs	r2, #0
     bbe:	72da      	strb	r2, [r3, #11]
    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     bc0:	f89d 300f 	ldrb.w	r3, [sp, #15]
     bc4:	3301      	adds	r3, #1
     bc6:	f88d 300f 	strb.w	r3, [sp, #15]
     bca:	4b07      	ldr	r3, [pc, #28]	; (be8 <HwIoAb_Buttons_Init+0x60>)
     bcc:	681b      	ldr	r3, [r3, #0]
     bce:	781b      	ldrb	r3, [r3, #0]
     bd0:	f89d 200f 	ldrb.w	r2, [sp, #15]
     bd4:	429a      	cmp	r2, r3
     bd6:	d3e5      	bcc.n	ba4 <HwIoAb_Buttons_Init+0x1c>
    }

    ButtonsControl_Ptr->Buttons_init = TRUE;
     bd8:	4b03      	ldr	r3, [pc, #12]	; (be8 <HwIoAb_Buttons_Init+0x60>)
     bda:	681b      	ldr	r3, [r3, #0]
     bdc:	2201      	movs	r2, #1
     bde:	739a      	strb	r2, [r3, #14]
}
     be0:	bf00      	nop
     be2:	b004      	add	sp, #16
     be4:	4770      	bx	lr
     be6:	bf00      	nop
     be8:	1fff8b38 	.word	0x1fff8b38

00000bec <HwIoAb_Leds_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Leds_Config Pointer to configuration array.
 */
void HwIoAb_Leds_Init( const HwIoAb_Leds_Config * Leds_Config )
{
     bec:	b082      	sub	sp, #8
     bee:	9001      	str	r0, [sp, #4]
    LedsControl_Ptr->Leds = HWIOAB_LEDS_MAX;
     bf0:	4b07      	ldr	r3, [pc, #28]	; (c10 <HwIoAb_Leds_Init+0x24>)
     bf2:	681b      	ldr	r3, [r3, #0]
     bf4:	220b      	movs	r2, #11
     bf6:	701a      	strb	r2, [r3, #0]
    LedsControl_Ptr->LedsConfig_Ptr = Leds_Config;
     bf8:	4b05      	ldr	r3, [pc, #20]	; (c10 <HwIoAb_Leds_Init+0x24>)
     bfa:	681b      	ldr	r3, [r3, #0]
     bfc:	9a01      	ldr	r2, [sp, #4]
     bfe:	605a      	str	r2, [r3, #4]
    LedsControl_Ptr->Leds_init = TRUE;
     c00:	4b03      	ldr	r3, [pc, #12]	; (c10 <HwIoAb_Leds_Init+0x24>)
     c02:	681b      	ldr	r3, [r3, #0]
     c04:	2201      	movs	r2, #1
     c06:	721a      	strb	r2, [r3, #8]
}
     c08:	bf00      	nop
     c0a:	b002      	add	sp, #8
     c0c:	4770      	bx	lr
     c0e:	bf00      	nop
     c10:	1fff8b3c 	.word	0x1fff8b3c

00000c14 <HwIoAb_Leds_TurnToggle>:
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnToggle( uint8 Led ) 
{
     c14:	b500      	push	{lr}
     c16:	b083      	sub	sp, #12
     c18:	4603      	mov	r3, r0
     c1a:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_FlipChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led );
     c1e:	4b07      	ldr	r3, [pc, #28]	; (c3c <HwIoAb_Leds_TurnToggle+0x28>)
     c20:	681b      	ldr	r3, [r3, #0]
     c22:	685a      	ldr	r2, [r3, #4]
     c24:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c28:	009b      	lsls	r3, r3, #2
     c2a:	4413      	add	r3, r2
     c2c:	881b      	ldrh	r3, [r3, #0]
     c2e:	4618      	mov	r0, r3
     c30:	f005 ff6b 	bl	6b0a <Dio_FlipChannel>
}
     c34:	bf00      	nop
     c36:	b003      	add	sp, #12
     c38:	f85d fb04 	ldr.w	pc, [sp], #4
     c3c:	1fff8b3c 	.word	0x1fff8b3c

00000c40 <IoHwAb_Init0>:
 * @brief This function initialices all the IO hardware abstractions.
 * 
 * @param ConfigPtr Pointer to configuration structure instance, in this case is not used.
 */
void IoHwAb_Init0( const IoHwAb0_ConfigType* ConfigPtr ) 
{
     c40:	b500      	push	{lr}
     c42:	b083      	sub	sp, #12
     c44:	9001      	str	r0, [sp, #4]
    /* Buttons init */
    HwIoAb_Buttons_Init( &ButtonsCfg );
     c46:	4805      	ldr	r0, [pc, #20]	; (c5c <IoHwAb_Init0+0x1c>)
     c48:	f7ff ff9e 	bl	b88 <HwIoAb_Buttons_Init>
    /* RGB Leds init */
    HwIoAb_Leds_Init( &LedsCfg );
     c4c:	4804      	ldr	r0, [pc, #16]	; (c60 <IoHwAb_Init0+0x20>)
     c4e:	f7ff ffcd 	bl	bec <HwIoAb_Leds_Init>
    /* Pots init */
    //HwIoAb_Pots_Init( NULL_PTR );
    /* Buzzer init */
    //HwIoAb_Buzzer_Init( NULL_PTR );
}
     c52:	bf00      	nop
     c54:	b003      	add	sp, #12
     c56:	f85d fb04 	ldr.w	pc, [sp], #4
     c5a:	bf00      	nop
     c5c:	0000ffbc 	.word	0x0000ffbc
     c60:	0000ffd4 	.word	0x0000ffd4

00000c64 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     c64:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     c66:	2300      	movs	r3, #0
     c68:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     c6a:	2300      	movs	r3, #0
     c6c:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     c6e:	2300      	movs	r3, #0
     c70:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     c72:	2300      	movs	r3, #0
     c74:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     c76:	4b44      	ldr	r3, [pc, #272]	; (d88 <init_data_bss+0x124>)
     c78:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     c7a:	4b44      	ldr	r3, [pc, #272]	; (d8c <init_data_bss+0x128>)
     c7c:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     c7e:	9b05      	ldr	r3, [sp, #20]
     c80:	681b      	ldr	r3, [r3, #0]
     c82:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     c84:	9b05      	ldr	r3, [sp, #20]
     c86:	3304      	adds	r3, #4
     c88:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     c8a:	9b05      	ldr	r3, [sp, #20]
     c8c:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     c8e:	2300      	movs	r3, #0
     c90:	9309      	str	r3, [sp, #36]	; 0x24
     c92:	e03d      	b.n	d10 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     c94:	9a09      	ldr	r2, [sp, #36]	; 0x24
     c96:	4613      	mov	r3, r2
     c98:	005b      	lsls	r3, r3, #1
     c9a:	4413      	add	r3, r2
     c9c:	009b      	lsls	r3, r3, #2
     c9e:	461a      	mov	r2, r3
     ca0:	9b03      	ldr	r3, [sp, #12]
     ca2:	4413      	add	r3, r2
     ca4:	685b      	ldr	r3, [r3, #4]
     ca6:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     caa:	4613      	mov	r3, r2
     cac:	005b      	lsls	r3, r3, #1
     cae:	4413      	add	r3, r2
     cb0:	009b      	lsls	r3, r3, #2
     cb2:	461a      	mov	r2, r3
     cb4:	9b03      	ldr	r3, [sp, #12]
     cb6:	4413      	add	r3, r2
     cb8:	681b      	ldr	r3, [r3, #0]
     cba:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     cbe:	4613      	mov	r3, r2
     cc0:	005b      	lsls	r3, r3, #1
     cc2:	4413      	add	r3, r2
     cc4:	009b      	lsls	r3, r3, #2
     cc6:	461a      	mov	r2, r3
     cc8:	9b03      	ldr	r3, [sp, #12]
     cca:	4413      	add	r3, r2
     ccc:	689b      	ldr	r3, [r3, #8]
     cce:	4619      	mov	r1, r3
     cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     cd2:	4613      	mov	r3, r2
     cd4:	005b      	lsls	r3, r3, #1
     cd6:	4413      	add	r3, r2
     cd8:	009b      	lsls	r3, r3, #2
     cda:	461a      	mov	r2, r3
     cdc:	9b03      	ldr	r3, [sp, #12]
     cde:	4413      	add	r3, r2
     ce0:	685b      	ldr	r3, [r3, #4]
     ce2:	1acb      	subs	r3, r1, r3
     ce4:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     ce6:	2300      	movs	r3, #0
     ce8:	9308      	str	r3, [sp, #32]
     cea:	e00a      	b.n	d02 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     cec:	9a00      	ldr	r2, [sp, #0]
     cee:	9b08      	ldr	r3, [sp, #32]
     cf0:	441a      	add	r2, r3
     cf2:	9901      	ldr	r1, [sp, #4]
     cf4:	9b08      	ldr	r3, [sp, #32]
     cf6:	440b      	add	r3, r1
     cf8:	7812      	ldrb	r2, [r2, #0]
     cfa:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     cfc:	9b08      	ldr	r3, [sp, #32]
     cfe:	3301      	adds	r3, #1
     d00:	9308      	str	r3, [sp, #32]
     d02:	9a08      	ldr	r2, [sp, #32]
     d04:	9b06      	ldr	r3, [sp, #24]
     d06:	429a      	cmp	r2, r3
     d08:	d3f0      	bcc.n	cec <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d0c:	3301      	adds	r3, #1
     d0e:	9309      	str	r3, [sp, #36]	; 0x24
     d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d12:	9b07      	ldr	r3, [sp, #28]
     d14:	429a      	cmp	r2, r3
     d16:	d3bd      	bcc.n	c94 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     d18:	9b04      	ldr	r3, [sp, #16]
     d1a:	681b      	ldr	r3, [r3, #0]
     d1c:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     d1e:	9b04      	ldr	r3, [sp, #16]
     d20:	3304      	adds	r3, #4
     d22:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     d24:	9b04      	ldr	r3, [sp, #16]
     d26:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     d28:	2300      	movs	r3, #0
     d2a:	9309      	str	r3, [sp, #36]	; 0x24
     d2c:	e024      	b.n	d78 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d30:	00db      	lsls	r3, r3, #3
     d32:	9a02      	ldr	r2, [sp, #8]
     d34:	4413      	add	r3, r2
     d36:	681b      	ldr	r3, [r3, #0]
     d38:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d3c:	00db      	lsls	r3, r3, #3
     d3e:	9a02      	ldr	r2, [sp, #8]
     d40:	4413      	add	r3, r2
     d42:	685b      	ldr	r3, [r3, #4]
     d44:	4619      	mov	r1, r3
     d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d48:	00db      	lsls	r3, r3, #3
     d4a:	9a02      	ldr	r2, [sp, #8]
     d4c:	4413      	add	r3, r2
     d4e:	681b      	ldr	r3, [r3, #0]
     d50:	1acb      	subs	r3, r1, r3
     d52:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     d54:	2300      	movs	r3, #0
     d56:	9308      	str	r3, [sp, #32]
     d58:	e007      	b.n	d6a <init_data_bss+0x106>
        {
            ram[j] = 0U;
     d5a:	9a01      	ldr	r2, [sp, #4]
     d5c:	9b08      	ldr	r3, [sp, #32]
     d5e:	4413      	add	r3, r2
     d60:	2200      	movs	r2, #0
     d62:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     d64:	9b08      	ldr	r3, [sp, #32]
     d66:	3301      	adds	r3, #1
     d68:	9308      	str	r3, [sp, #32]
     d6a:	9a08      	ldr	r2, [sp, #32]
     d6c:	9b06      	ldr	r3, [sp, #24]
     d6e:	429a      	cmp	r2, r3
     d70:	d3f3      	bcc.n	d5a <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d74:	3301      	adds	r3, #1
     d76:	9309      	str	r3, [sp, #36]	; 0x24
     d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d7a:	9b07      	ldr	r3, [sp, #28]
     d7c:	429a      	cmp	r2, r3
     d7e:	d3d6      	bcc.n	d2e <init_data_bss+0xca>
        }
    }
}
     d80:	bf00      	nop
     d82:	bf00      	nop
     d84:	b00a      	add	sp, #40	; 0x28
     d86:	4770      	bx	lr
     d88:	00010b54 	.word	0x00010b54
     d8c:	00010b70 	.word	0x00010b70

00000d90 <sys_m4_cache_init>:
{
     d90:	b084      	sub	sp, #16
     d92:	4603      	mov	r3, r0
     d94:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     d98:	2300      	movs	r3, #0
     d9a:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     d9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     da2:	2b00      	cmp	r3, #0
     da4:	d118      	bne.n	dd8 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     da6:	4b10      	ldr	r3, [pc, #64]	; (de8 <sys_m4_cache_init+0x58>)
     da8:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     dac:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     dae:	4b0e      	ldr	r3, [pc, #56]	; (de8 <sys_m4_cache_init+0x58>)
     db0:	681b      	ldr	r3, [r3, #0]
     db2:	4a0d      	ldr	r2, [pc, #52]	; (de8 <sys_m4_cache_init+0x58>)
     db4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     db8:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     dba:	bf00      	nop
     dbc:	4b0a      	ldr	r3, [pc, #40]	; (de8 <sys_m4_cache_init+0x58>)
     dbe:	681b      	ldr	r3, [r3, #0]
     dc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     dc8:	d0f8      	beq.n	dbc <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     dca:	4b07      	ldr	r3, [pc, #28]	; (de8 <sys_m4_cache_init+0x58>)
     dcc:	681b      	ldr	r3, [r3, #0]
     dce:	4a06      	ldr	r2, [pc, #24]	; (de8 <sys_m4_cache_init+0x58>)
     dd0:	f043 0301 	orr.w	r3, r3, #1
     dd4:	6013      	str	r3, [r2, #0]
     dd6:	e002      	b.n	dde <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     dd8:	2301      	movs	r3, #1
     dda:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     dde:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     de2:	4618      	mov	r0, r3
     de4:	b004      	add	sp, #16
     de6:	4770      	bx	lr
     de8:	e0082000 	.word	0xe0082000

00000dec <startup_go_to_user_mode>:
}
     dec:	bf00      	nop
     dee:	4770      	bx	lr

00000df0 <Sys_GetCoreID>:
    return 0U;
     df0:	2300      	movs	r3, #0
}
     df2:	4618      	mov	r0, r3
     df4:	4770      	bx	lr

00000df6 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     df6:	e7fe      	b.n	df6 <HardFault_Handler>

00000df8 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     df8:	e7fe      	b.n	df8 <MemManage_Handler>

00000dfa <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     dfa:	e7fe      	b.n	dfa <BusFault_Handler>

00000dfc <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     dfc:	e7fe      	b.n	dfc <UsageFault_Handler>

00000dfe <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     dfe:	e7fe      	b.n	dfe <SVC_Handler>

00000e00 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     e00:	e7fe      	b.n	e00 <DebugMon_Handler>

00000e02 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     e02:	e7fe      	b.n	e02 <PendSV_Handler>

00000e04 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     e04:	e7fe      	b.n	e04 <SysTick_Handler>

00000e06 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     e06:	e7fe      	b.n	e06 <undefined_handler>

00000e08 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     e08:	b500      	push	{lr}
     e0a:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     e0c:	4b26      	ldr	r3, [pc, #152]	; (ea8 <_DoInit+0xa0>)
     e0e:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     e10:	22a8      	movs	r2, #168	; 0xa8
     e12:	2100      	movs	r1, #0
     e14:	9800      	ldr	r0, [sp, #0]
     e16:	f000 fd13 	bl	1840 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     e1a:	9b00      	ldr	r3, [sp, #0]
     e1c:	2203      	movs	r2, #3
     e1e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     e20:	9b00      	ldr	r3, [sp, #0]
     e22:	2203      	movs	r2, #3
     e24:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     e26:	9b00      	ldr	r3, [sp, #0]
     e28:	4a20      	ldr	r2, [pc, #128]	; (eac <_DoInit+0xa4>)
     e2a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     e2c:	9b00      	ldr	r3, [sp, #0]
     e2e:	4a20      	ldr	r2, [pc, #128]	; (eb0 <_DoInit+0xa8>)
     e30:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     e32:	9b00      	ldr	r3, [sp, #0]
     e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
     e38:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     e3a:	9b00      	ldr	r3, [sp, #0]
     e3c:	2200      	movs	r2, #0
     e3e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     e40:	9b00      	ldr	r3, [sp, #0]
     e42:	2200      	movs	r2, #0
     e44:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     e46:	9b00      	ldr	r3, [sp, #0]
     e48:	2200      	movs	r2, #0
     e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     e4c:	9b00      	ldr	r3, [sp, #0]
     e4e:	4a17      	ldr	r2, [pc, #92]	; (eac <_DoInit+0xa4>)
     e50:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     e52:	9b00      	ldr	r3, [sp, #0]
     e54:	4a17      	ldr	r2, [pc, #92]	; (eb4 <_DoInit+0xac>)
     e56:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     e58:	9b00      	ldr	r3, [sp, #0]
     e5a:	2210      	movs	r2, #16
     e5c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     e5e:	9b00      	ldr	r3, [sp, #0]
     e60:	2200      	movs	r2, #0
     e62:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     e64:	9b00      	ldr	r3, [sp, #0]
     e66:	2200      	movs	r2, #0
     e68:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     e6a:	9b00      	ldr	r3, [sp, #0]
     e6c:	2200      	movs	r2, #0
     e6e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     e70:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     e74:	2300      	movs	r3, #0
     e76:	9301      	str	r3, [sp, #4]
     e78:	e00c      	b.n	e94 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     e7a:	9b01      	ldr	r3, [sp, #4]
     e7c:	f1c3 030f 	rsb	r3, r3, #15
     e80:	4a0d      	ldr	r2, [pc, #52]	; (eb8 <_DoInit+0xb0>)
     e82:	5cd1      	ldrb	r1, [r2, r3]
     e84:	9a00      	ldr	r2, [sp, #0]
     e86:	9b01      	ldr	r3, [sp, #4]
     e88:	4413      	add	r3, r2
     e8a:	460a      	mov	r2, r1
     e8c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     e8e:	9b01      	ldr	r3, [sp, #4]
     e90:	3301      	adds	r3, #1
     e92:	9301      	str	r3, [sp, #4]
     e94:	9b01      	ldr	r3, [sp, #4]
     e96:	2b0f      	cmp	r3, #15
     e98:	d9ef      	bls.n	e7a <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     e9a:	f3bf 8f5f 	dmb	sy
}
     e9e:	bf00      	nop
     ea0:	b003      	add	sp, #12
     ea2:	f85d fb04 	ldr.w	pc, [sp], #4
     ea6:	bf00      	nop
     ea8:	1fff91d4 	.word	0x1fff91d4
     eac:	0000f78c 	.word	0x0000f78c
     eb0:	1fff927c 	.word	0x1fff927c
     eb4:	1fff967c 	.word	0x1fff967c
     eb8:	00010b30 	.word	0x00010b30

00000ebc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     ebc:	b500      	push	{lr}
     ebe:	b08b      	sub	sp, #44	; 0x2c
     ec0:	9003      	str	r0, [sp, #12]
     ec2:	9102      	str	r1, [sp, #8]
     ec4:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     ec6:	2300      	movs	r3, #0
     ec8:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     eca:	9b03      	ldr	r3, [sp, #12]
     ecc:	68db      	ldr	r3, [r3, #12]
     ece:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     ed0:	9b03      	ldr	r3, [sp, #12]
     ed2:	691b      	ldr	r3, [r3, #16]
     ed4:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     ed6:	9a06      	ldr	r2, [sp, #24]
     ed8:	9b07      	ldr	r3, [sp, #28]
     eda:	429a      	cmp	r2, r3
     edc:	d905      	bls.n	eea <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     ede:	9a06      	ldr	r2, [sp, #24]
     ee0:	9b07      	ldr	r3, [sp, #28]
     ee2:	1ad3      	subs	r3, r2, r3
     ee4:	3b01      	subs	r3, #1
     ee6:	9309      	str	r3, [sp, #36]	; 0x24
     ee8:	e007      	b.n	efa <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     eea:	9b03      	ldr	r3, [sp, #12]
     eec:	689a      	ldr	r2, [r3, #8]
     eee:	9906      	ldr	r1, [sp, #24]
     ef0:	9b07      	ldr	r3, [sp, #28]
     ef2:	1acb      	subs	r3, r1, r3
     ef4:	4413      	add	r3, r2
     ef6:	3b01      	subs	r3, #1
     ef8:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	689a      	ldr	r2, [r3, #8]
     efe:	9b07      	ldr	r3, [sp, #28]
     f00:	1ad3      	subs	r3, r2, r3
     f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f04:	4293      	cmp	r3, r2
     f06:	bf28      	it	cs
     f08:	4613      	movcs	r3, r2
     f0a:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f0e:	9b01      	ldr	r3, [sp, #4]
     f10:	4293      	cmp	r3, r2
     f12:	bf28      	it	cs
     f14:	4613      	movcs	r3, r2
     f16:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     f18:	9b03      	ldr	r3, [sp, #12]
     f1a:	685a      	ldr	r2, [r3, #4]
     f1c:	9b07      	ldr	r3, [sp, #28]
     f1e:	4413      	add	r3, r2
     f20:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     f22:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f24:	9902      	ldr	r1, [sp, #8]
     f26:	9805      	ldr	r0, [sp, #20]
     f28:	f000 fc7c 	bl	1824 <memcpy>
    NumBytesWritten += NumBytesToWrite;
     f2c:	9a08      	ldr	r2, [sp, #32]
     f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f30:	4413      	add	r3, r2
     f32:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     f34:	9a02      	ldr	r2, [sp, #8]
     f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f38:	4413      	add	r3, r2
     f3a:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     f3c:	9a01      	ldr	r2, [sp, #4]
     f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f40:	1ad3      	subs	r3, r2, r3
     f42:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     f44:	9a07      	ldr	r2, [sp, #28]
     f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f48:	4413      	add	r3, r2
     f4a:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     f4c:	9b03      	ldr	r3, [sp, #12]
     f4e:	689b      	ldr	r3, [r3, #8]
     f50:	9a07      	ldr	r2, [sp, #28]
     f52:	429a      	cmp	r2, r3
     f54:	d101      	bne.n	f5a <_WriteBlocking+0x9e>
      WrOff = 0u;
     f56:	2300      	movs	r3, #0
     f58:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     f5a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     f5e:	9b03      	ldr	r3, [sp, #12]
     f60:	9a07      	ldr	r2, [sp, #28]
     f62:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     f64:	9b01      	ldr	r3, [sp, #4]
     f66:	2b00      	cmp	r3, #0
     f68:	d1b2      	bne.n	ed0 <_WriteBlocking+0x14>
  return NumBytesWritten;
     f6a:	9b08      	ldr	r3, [sp, #32]
}
     f6c:	4618      	mov	r0, r3
     f6e:	b00b      	add	sp, #44	; 0x2c
     f70:	f85d fb04 	ldr.w	pc, [sp], #4

00000f74 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     f74:	b500      	push	{lr}
     f76:	b089      	sub	sp, #36	; 0x24
     f78:	9003      	str	r0, [sp, #12]
     f7a:	9102      	str	r1, [sp, #8]
     f7c:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     f7e:	9b03      	ldr	r3, [sp, #12]
     f80:	68db      	ldr	r3, [r3, #12]
     f82:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     f84:	9b03      	ldr	r3, [sp, #12]
     f86:	689a      	ldr	r2, [r3, #8]
     f88:	9b07      	ldr	r3, [sp, #28]
     f8a:	1ad3      	subs	r3, r2, r3
     f8c:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     f8e:	9a06      	ldr	r2, [sp, #24]
     f90:	9b01      	ldr	r3, [sp, #4]
     f92:	429a      	cmp	r2, r3
     f94:	d911      	bls.n	fba <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     f96:	9b03      	ldr	r3, [sp, #12]
     f98:	685a      	ldr	r2, [r3, #4]
     f9a:	9b07      	ldr	r3, [sp, #28]
     f9c:	4413      	add	r3, r2
     f9e:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     fa0:	9a01      	ldr	r2, [sp, #4]
     fa2:	9902      	ldr	r1, [sp, #8]
     fa4:	9804      	ldr	r0, [sp, #16]
     fa6:	f000 fc3d 	bl	1824 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     faa:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     fae:	9a07      	ldr	r2, [sp, #28]
     fb0:	9b01      	ldr	r3, [sp, #4]
     fb2:	441a      	add	r2, r3
     fb4:	9b03      	ldr	r3, [sp, #12]
     fb6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     fb8:	e01f      	b.n	ffa <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     fba:	9b06      	ldr	r3, [sp, #24]
     fbc:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     fbe:	9b03      	ldr	r3, [sp, #12]
     fc0:	685a      	ldr	r2, [r3, #4]
     fc2:	9b07      	ldr	r3, [sp, #28]
     fc4:	4413      	add	r3, r2
     fc6:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     fc8:	9a05      	ldr	r2, [sp, #20]
     fca:	9902      	ldr	r1, [sp, #8]
     fcc:	9804      	ldr	r0, [sp, #16]
     fce:	f000 fc29 	bl	1824 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     fd2:	9a01      	ldr	r2, [sp, #4]
     fd4:	9b06      	ldr	r3, [sp, #24]
     fd6:	1ad3      	subs	r3, r2, r3
     fd8:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     fda:	9b03      	ldr	r3, [sp, #12]
     fdc:	685b      	ldr	r3, [r3, #4]
     fde:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     fe0:	9a02      	ldr	r2, [sp, #8]
     fe2:	9b06      	ldr	r3, [sp, #24]
     fe4:	4413      	add	r3, r2
     fe6:	9a05      	ldr	r2, [sp, #20]
     fe8:	4619      	mov	r1, r3
     fea:	9804      	ldr	r0, [sp, #16]
     fec:	f000 fc1a 	bl	1824 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     ff0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     ff4:	9b03      	ldr	r3, [sp, #12]
     ff6:	9a05      	ldr	r2, [sp, #20]
     ff8:	60da      	str	r2, [r3, #12]
}
     ffa:	bf00      	nop
     ffc:	b009      	add	sp, #36	; 0x24
     ffe:	f85d fb04 	ldr.w	pc, [sp], #4

00001002 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    1002:	b086      	sub	sp, #24
    1004:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    1006:	9b01      	ldr	r3, [sp, #4]
    1008:	691b      	ldr	r3, [r3, #16]
    100a:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
    100c:	9b01      	ldr	r3, [sp, #4]
    100e:	68db      	ldr	r3, [r3, #12]
    1010:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
    1012:	9a04      	ldr	r2, [sp, #16]
    1014:	9b03      	ldr	r3, [sp, #12]
    1016:	429a      	cmp	r2, r3
    1018:	d808      	bhi.n	102c <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    101a:	9b01      	ldr	r3, [sp, #4]
    101c:	689a      	ldr	r2, [r3, #8]
    101e:	9b03      	ldr	r3, [sp, #12]
    1020:	1ad2      	subs	r2, r2, r3
    1022:	9b04      	ldr	r3, [sp, #16]
    1024:	4413      	add	r3, r2
    1026:	3b01      	subs	r3, #1
    1028:	9305      	str	r3, [sp, #20]
    102a:	e004      	b.n	1036 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
    102c:	9a04      	ldr	r2, [sp, #16]
    102e:	9b03      	ldr	r3, [sp, #12]
    1030:	1ad3      	subs	r3, r2, r3
    1032:	3b01      	subs	r3, #1
    1034:	9305      	str	r3, [sp, #20]
  }
  return r;
    1036:	9b05      	ldr	r3, [sp, #20]
}
    1038:	4618      	mov	r0, r3
    103a:	b006      	add	sp, #24
    103c:	4770      	bx	lr
	...

00001040 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1040:	b500      	push	{lr}
    1042:	b089      	sub	sp, #36	; 0x24
    1044:	9003      	str	r0, [sp, #12]
    1046:	9102      	str	r1, [sp, #8]
    1048:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
    104a:	9b02      	ldr	r3, [sp, #8]
    104c:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    104e:	9b03      	ldr	r3, [sp, #12]
    1050:	1c5a      	adds	r2, r3, #1
    1052:	4613      	mov	r3, r2
    1054:	005b      	lsls	r3, r3, #1
    1056:	4413      	add	r3, r2
    1058:	00db      	lsls	r3, r3, #3
    105a:	4a20      	ldr	r2, [pc, #128]	; (10dc <SEGGER_RTT_WriteNoLock+0x9c>)
    105c:	4413      	add	r3, r2
    105e:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    1060:	9b05      	ldr	r3, [sp, #20]
    1062:	695b      	ldr	r3, [r3, #20]
    1064:	2b02      	cmp	r3, #2
    1066:	d029      	beq.n	10bc <SEGGER_RTT_WriteNoLock+0x7c>
    1068:	2b02      	cmp	r3, #2
    106a:	d82e      	bhi.n	10ca <SEGGER_RTT_WriteNoLock+0x8a>
    106c:	2b00      	cmp	r3, #0
    106e:	d002      	beq.n	1076 <SEGGER_RTT_WriteNoLock+0x36>
    1070:	2b01      	cmp	r3, #1
    1072:	d013      	beq.n	109c <SEGGER_RTT_WriteNoLock+0x5c>
    1074:	e029      	b.n	10ca <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1076:	9805      	ldr	r0, [sp, #20]
    1078:	f7ff ffc3 	bl	1002 <_GetAvailWriteSpace>
    107c:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
    107e:	9a04      	ldr	r2, [sp, #16]
    1080:	9b01      	ldr	r3, [sp, #4]
    1082:	429a      	cmp	r2, r3
    1084:	d202      	bcs.n	108c <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
    1086:	2300      	movs	r3, #0
    1088:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    108a:	e021      	b.n	10d0 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
    108c:	9b01      	ldr	r3, [sp, #4]
    108e:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    1090:	9a01      	ldr	r2, [sp, #4]
    1092:	9906      	ldr	r1, [sp, #24]
    1094:	9805      	ldr	r0, [sp, #20]
    1096:	f7ff ff6d 	bl	f74 <_WriteNoCheck>
    break;
    109a:	e019      	b.n	10d0 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    109c:	9805      	ldr	r0, [sp, #20]
    109e:	f7ff ffb0 	bl	1002 <_GetAvailWriteSpace>
    10a2:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    10a4:	9a01      	ldr	r2, [sp, #4]
    10a6:	9b04      	ldr	r3, [sp, #16]
    10a8:	4293      	cmp	r3, r2
    10aa:	bf28      	it	cs
    10ac:	4613      	movcs	r3, r2
    10ae:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
    10b0:	9a07      	ldr	r2, [sp, #28]
    10b2:	9906      	ldr	r1, [sp, #24]
    10b4:	9805      	ldr	r0, [sp, #20]
    10b6:	f7ff ff5d 	bl	f74 <_WriteNoCheck>
    break;
    10ba:	e009      	b.n	10d0 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    10bc:	9a01      	ldr	r2, [sp, #4]
    10be:	9906      	ldr	r1, [sp, #24]
    10c0:	9805      	ldr	r0, [sp, #20]
    10c2:	f7ff fefb 	bl	ebc <_WriteBlocking>
    10c6:	9007      	str	r0, [sp, #28]
    break;
    10c8:	e002      	b.n	10d0 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
    10ca:	2300      	movs	r3, #0
    10cc:	9307      	str	r3, [sp, #28]
    break;
    10ce:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    10d0:	9b07      	ldr	r3, [sp, #28]
}
    10d2:	4618      	mov	r0, r3
    10d4:	b009      	add	sp, #36	; 0x24
    10d6:	f85d fb04 	ldr.w	pc, [sp], #4
    10da:	bf00      	nop
    10dc:	1fff91d4 	.word	0x1fff91d4

000010e0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    10e0:	b500      	push	{lr}
    10e2:	b089      	sub	sp, #36	; 0x24
    10e4:	9003      	str	r0, [sp, #12]
    10e6:	9102      	str	r1, [sp, #8]
    10e8:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
    10ea:	4b0f      	ldr	r3, [pc, #60]	; (1128 <SEGGER_RTT_Write+0x48>)
    10ec:	9307      	str	r3, [sp, #28]
    10ee:	9b07      	ldr	r3, [sp, #28]
    10f0:	781b      	ldrb	r3, [r3, #0]
    10f2:	b2db      	uxtb	r3, r3
    10f4:	2b53      	cmp	r3, #83	; 0x53
    10f6:	d001      	beq.n	10fc <SEGGER_RTT_Write+0x1c>
    10f8:	f7ff fe86 	bl	e08 <_DoInit>
  SEGGER_RTT_LOCK();
    10fc:	f3ef 8311 	mrs	r3, BASEPRI
    1100:	f04f 0120 	mov.w	r1, #32
    1104:	f381 8811 	msr	BASEPRI, r1
    1108:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    110a:	9a01      	ldr	r2, [sp, #4]
    110c:	9902      	ldr	r1, [sp, #8]
    110e:	9803      	ldr	r0, [sp, #12]
    1110:	f7ff ff96 	bl	1040 <SEGGER_RTT_WriteNoLock>
    1114:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
    1116:	9b06      	ldr	r3, [sp, #24]
    1118:	f383 8811 	msr	BASEPRI, r3
  return Status;
    111c:	9b05      	ldr	r3, [sp, #20]
}
    111e:	4618      	mov	r0, r3
    1120:	b009      	add	sp, #36	; 0x24
    1122:	f85d fb04 	ldr.w	pc, [sp], #4
    1126:	bf00      	nop
    1128:	1fff91d4 	.word	0x1fff91d4

0000112c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    112c:	b508      	push	{r3, lr}
  _DoInit();
    112e:	f7ff fe6b 	bl	e08 <_DoInit>
}
    1132:	bf00      	nop
    1134:	bd08      	pop	{r3, pc}

00001136 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    1136:	b500      	push	{lr}
    1138:	b085      	sub	sp, #20
    113a:	9001      	str	r0, [sp, #4]
    113c:	460b      	mov	r3, r1
    113e:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    1142:	9b01      	ldr	r3, [sp, #4]
    1144:	689b      	ldr	r3, [r3, #8]
    1146:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    1148:	9b03      	ldr	r3, [sp, #12]
    114a:	1c5a      	adds	r2, r3, #1
    114c:	9b01      	ldr	r3, [sp, #4]
    114e:	685b      	ldr	r3, [r3, #4]
    1150:	429a      	cmp	r2, r3
    1152:	d80f      	bhi.n	1174 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    1154:	9b01      	ldr	r3, [sp, #4]
    1156:	681a      	ldr	r2, [r3, #0]
    1158:	9b03      	ldr	r3, [sp, #12]
    115a:	4413      	add	r3, r2
    115c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1160:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    1162:	9b03      	ldr	r3, [sp, #12]
    1164:	1c5a      	adds	r2, r3, #1
    1166:	9b01      	ldr	r3, [sp, #4]
    1168:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    116a:	9b01      	ldr	r3, [sp, #4]
    116c:	68db      	ldr	r3, [r3, #12]
    116e:	1c5a      	adds	r2, r3, #1
    1170:	9b01      	ldr	r3, [sp, #4]
    1172:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    1174:	9b01      	ldr	r3, [sp, #4]
    1176:	689a      	ldr	r2, [r3, #8]
    1178:	9b01      	ldr	r3, [sp, #4]
    117a:	685b      	ldr	r3, [r3, #4]
    117c:	429a      	cmp	r2, r3
    117e:	d115      	bne.n	11ac <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    1180:	9b01      	ldr	r3, [sp, #4]
    1182:	6918      	ldr	r0, [r3, #16]
    1184:	9b01      	ldr	r3, [sp, #4]
    1186:	6819      	ldr	r1, [r3, #0]
    1188:	9b01      	ldr	r3, [sp, #4]
    118a:	689b      	ldr	r3, [r3, #8]
    118c:	461a      	mov	r2, r3
    118e:	f7ff ffa7 	bl	10e0 <SEGGER_RTT_Write>
    1192:	4602      	mov	r2, r0
    1194:	9b01      	ldr	r3, [sp, #4]
    1196:	689b      	ldr	r3, [r3, #8]
    1198:	429a      	cmp	r2, r3
    119a:	d004      	beq.n	11a6 <_StoreChar+0x70>
      p->ReturnValue = -1;
    119c:	9b01      	ldr	r3, [sp, #4]
    119e:	f04f 32ff 	mov.w	r2, #4294967295
    11a2:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    11a4:	e002      	b.n	11ac <_StoreChar+0x76>
      p->Cnt = 0u;
    11a6:	9b01      	ldr	r3, [sp, #4]
    11a8:	2200      	movs	r2, #0
    11aa:	609a      	str	r2, [r3, #8]
}
    11ac:	bf00      	nop
    11ae:	b005      	add	sp, #20
    11b0:	f85d fb04 	ldr.w	pc, [sp], #4

000011b4 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    11b4:	b500      	push	{lr}
    11b6:	b08b      	sub	sp, #44	; 0x2c
    11b8:	9003      	str	r0, [sp, #12]
    11ba:	9102      	str	r1, [sp, #8]
    11bc:	9201      	str	r2, [sp, #4]
    11be:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    11c0:	9b02      	ldr	r3, [sp, #8]
    11c2:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    11c4:	2301      	movs	r3, #1
    11c6:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    11c8:	2301      	movs	r3, #1
    11ca:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    11cc:	e007      	b.n	11de <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    11ce:	9a08      	ldr	r2, [sp, #32]
    11d0:	9b01      	ldr	r3, [sp, #4]
    11d2:	fbb2 f3f3 	udiv	r3, r2, r3
    11d6:	9308      	str	r3, [sp, #32]
    Width++;
    11d8:	9b07      	ldr	r3, [sp, #28]
    11da:	3301      	adds	r3, #1
    11dc:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    11de:	9a08      	ldr	r2, [sp, #32]
    11e0:	9b01      	ldr	r3, [sp, #4]
    11e2:	429a      	cmp	r2, r3
    11e4:	d2f3      	bcs.n	11ce <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    11e6:	9a00      	ldr	r2, [sp, #0]
    11e8:	9b07      	ldr	r3, [sp, #28]
    11ea:	429a      	cmp	r2, r3
    11ec:	d901      	bls.n	11f2 <_PrintUnsigned+0x3e>
    Width = NumDigits;
    11ee:	9b00      	ldr	r3, [sp, #0]
    11f0:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    11f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    11f4:	f003 0301 	and.w	r3, r3, #1
    11f8:	2b00      	cmp	r3, #0
    11fa:	d128      	bne.n	124e <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    11fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    11fe:	2b00      	cmp	r3, #0
    1200:	d025      	beq.n	124e <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    1202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1204:	f003 0302 	and.w	r3, r3, #2
    1208:	2b00      	cmp	r3, #0
    120a:	d006      	beq.n	121a <_PrintUnsigned+0x66>
    120c:	9b00      	ldr	r3, [sp, #0]
    120e:	2b00      	cmp	r3, #0
    1210:	d103      	bne.n	121a <_PrintUnsigned+0x66>
        c = '0';
    1212:	2330      	movs	r3, #48	; 0x30
    1214:	f88d 301b 	strb.w	r3, [sp, #27]
    1218:	e002      	b.n	1220 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    121a:	2320      	movs	r3, #32
    121c:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1220:	e00c      	b.n	123c <_PrintUnsigned+0x88>
        FieldWidth--;
    1222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1224:	3b01      	subs	r3, #1
    1226:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1228:	f89d 301b 	ldrb.w	r3, [sp, #27]
    122c:	4619      	mov	r1, r3
    122e:	9803      	ldr	r0, [sp, #12]
    1230:	f7ff ff81 	bl	1136 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1234:	9b03      	ldr	r3, [sp, #12]
    1236:	68db      	ldr	r3, [r3, #12]
    1238:	2b00      	cmp	r3, #0
    123a:	db07      	blt.n	124c <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    123c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    123e:	2b00      	cmp	r3, #0
    1240:	d005      	beq.n	124e <_PrintUnsigned+0x9a>
    1242:	9a07      	ldr	r2, [sp, #28]
    1244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1246:	429a      	cmp	r2, r3
    1248:	d3eb      	bcc.n	1222 <_PrintUnsigned+0x6e>
    124a:	e000      	b.n	124e <_PrintUnsigned+0x9a>
          break;
    124c:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    124e:	9b03      	ldr	r3, [sp, #12]
    1250:	68db      	ldr	r3, [r3, #12]
    1252:	2b00      	cmp	r3, #0
    1254:	db55      	blt.n	1302 <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1256:	9b00      	ldr	r3, [sp, #0]
    1258:	2b01      	cmp	r3, #1
    125a:	d903      	bls.n	1264 <_PrintUnsigned+0xb0>
        NumDigits--;
    125c:	9b00      	ldr	r3, [sp, #0]
    125e:	3b01      	subs	r3, #1
    1260:	9300      	str	r3, [sp, #0]
    1262:	e009      	b.n	1278 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1264:	9a02      	ldr	r2, [sp, #8]
    1266:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1268:	fbb2 f3f3 	udiv	r3, r2, r3
    126c:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    126e:	9a05      	ldr	r2, [sp, #20]
    1270:	9b01      	ldr	r3, [sp, #4]
    1272:	429a      	cmp	r2, r3
    1274:	d200      	bcs.n	1278 <_PrintUnsigned+0xc4>
          break;
    1276:	e005      	b.n	1284 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1278:	9b09      	ldr	r3, [sp, #36]	; 0x24
    127a:	9a01      	ldr	r2, [sp, #4]
    127c:	fb02 f303 	mul.w	r3, r2, r3
    1280:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1282:	e7e8      	b.n	1256 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1284:	9a02      	ldr	r2, [sp, #8]
    1286:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1288:	fbb2 f3f3 	udiv	r3, r2, r3
    128c:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    128e:	9b05      	ldr	r3, [sp, #20]
    1290:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1292:	fb02 f303 	mul.w	r3, r2, r3
    1296:	9a02      	ldr	r2, [sp, #8]
    1298:	1ad3      	subs	r3, r2, r3
    129a:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    129c:	4a1b      	ldr	r2, [pc, #108]	; (130c <_PrintUnsigned+0x158>)
    129e:	9b05      	ldr	r3, [sp, #20]
    12a0:	4413      	add	r3, r2
    12a2:	781b      	ldrb	r3, [r3, #0]
    12a4:	4619      	mov	r1, r3
    12a6:	9803      	ldr	r0, [sp, #12]
    12a8:	f7ff ff45 	bl	1136 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    12ac:	9b03      	ldr	r3, [sp, #12]
    12ae:	68db      	ldr	r3, [r3, #12]
    12b0:	2b00      	cmp	r3, #0
    12b2:	db08      	blt.n	12c6 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    12b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    12b6:	9b01      	ldr	r3, [sp, #4]
    12b8:	fbb2 f3f3 	udiv	r3, r2, r3
    12bc:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    12be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    12c0:	2b00      	cmp	r3, #0
    12c2:	d1df      	bne.n	1284 <_PrintUnsigned+0xd0>
    12c4:	e000      	b.n	12c8 <_PrintUnsigned+0x114>
        break;
    12c6:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    12c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    12ca:	f003 0301 	and.w	r3, r3, #1
    12ce:	2b00      	cmp	r3, #0
    12d0:	d017      	beq.n	1302 <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    12d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    12d4:	2b00      	cmp	r3, #0
    12d6:	d014      	beq.n	1302 <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    12d8:	e00a      	b.n	12f0 <_PrintUnsigned+0x13c>
          FieldWidth--;
    12da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    12dc:	3b01      	subs	r3, #1
    12de:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    12e0:	2120      	movs	r1, #32
    12e2:	9803      	ldr	r0, [sp, #12]
    12e4:	f7ff ff27 	bl	1136 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    12e8:	9b03      	ldr	r3, [sp, #12]
    12ea:	68db      	ldr	r3, [r3, #12]
    12ec:	2b00      	cmp	r3, #0
    12ee:	db07      	blt.n	1300 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    12f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    12f2:	2b00      	cmp	r3, #0
    12f4:	d005      	beq.n	1302 <_PrintUnsigned+0x14e>
    12f6:	9a07      	ldr	r2, [sp, #28]
    12f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    12fa:	429a      	cmp	r2, r3
    12fc:	d3ed      	bcc.n	12da <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    12fe:	e000      	b.n	1302 <_PrintUnsigned+0x14e>
            break;
    1300:	bf00      	nop
}
    1302:	bf00      	nop
    1304:	b00b      	add	sp, #44	; 0x2c
    1306:	f85d fb04 	ldr.w	pc, [sp], #4
    130a:	bf00      	nop
    130c:	00010b44 	.word	0x00010b44

00001310 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1310:	b500      	push	{lr}
    1312:	b089      	sub	sp, #36	; 0x24
    1314:	9005      	str	r0, [sp, #20]
    1316:	9104      	str	r1, [sp, #16]
    1318:	9203      	str	r2, [sp, #12]
    131a:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    131c:	9b04      	ldr	r3, [sp, #16]
    131e:	2b00      	cmp	r3, #0
    1320:	bfb8      	it	lt
    1322:	425b      	neglt	r3, r3
    1324:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1326:	2301      	movs	r3, #1
    1328:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    132a:	e007      	b.n	133c <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    132c:	9b03      	ldr	r3, [sp, #12]
    132e:	9a06      	ldr	r2, [sp, #24]
    1330:	fb92 f3f3 	sdiv	r3, r2, r3
    1334:	9306      	str	r3, [sp, #24]
    Width++;
    1336:	9b07      	ldr	r3, [sp, #28]
    1338:	3301      	adds	r3, #1
    133a:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    133c:	9b03      	ldr	r3, [sp, #12]
    133e:	9a06      	ldr	r2, [sp, #24]
    1340:	429a      	cmp	r2, r3
    1342:	daf3      	bge.n	132c <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1344:	9a02      	ldr	r2, [sp, #8]
    1346:	9b07      	ldr	r3, [sp, #28]
    1348:	429a      	cmp	r2, r3
    134a:	d901      	bls.n	1350 <_PrintInt+0x40>
    Width = NumDigits;
    134c:	9b02      	ldr	r3, [sp, #8]
    134e:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1352:	2b00      	cmp	r3, #0
    1354:	d00a      	beq.n	136c <_PrintInt+0x5c>
    1356:	9b04      	ldr	r3, [sp, #16]
    1358:	2b00      	cmp	r3, #0
    135a:	db04      	blt.n	1366 <_PrintInt+0x56>
    135c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    135e:	f003 0304 	and.w	r3, r3, #4
    1362:	2b00      	cmp	r3, #0
    1364:	d002      	beq.n	136c <_PrintInt+0x5c>
    FieldWidth--;
    1366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1368:	3b01      	subs	r3, #1
    136a:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    136c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    136e:	f003 0302 	and.w	r3, r3, #2
    1372:	2b00      	cmp	r3, #0
    1374:	d002      	beq.n	137c <_PrintInt+0x6c>
    1376:	9b02      	ldr	r3, [sp, #8]
    1378:	2b00      	cmp	r3, #0
    137a:	d01c      	beq.n	13b6 <_PrintInt+0xa6>
    137c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    137e:	f003 0301 	and.w	r3, r3, #1
    1382:	2b00      	cmp	r3, #0
    1384:	d117      	bne.n	13b6 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    1386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1388:	2b00      	cmp	r3, #0
    138a:	d014      	beq.n	13b6 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    138c:	e00a      	b.n	13a4 <_PrintInt+0x94>
        FieldWidth--;
    138e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1390:	3b01      	subs	r3, #1
    1392:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1394:	2120      	movs	r1, #32
    1396:	9805      	ldr	r0, [sp, #20]
    1398:	f7ff fecd 	bl	1136 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    139c:	9b05      	ldr	r3, [sp, #20]
    139e:	68db      	ldr	r3, [r3, #12]
    13a0:	2b00      	cmp	r3, #0
    13a2:	db07      	blt.n	13b4 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    13a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    13a6:	2b00      	cmp	r3, #0
    13a8:	d005      	beq.n	13b6 <_PrintInt+0xa6>
    13aa:	9a07      	ldr	r2, [sp, #28]
    13ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    13ae:	429a      	cmp	r2, r3
    13b0:	d3ed      	bcc.n	138e <_PrintInt+0x7e>
    13b2:	e000      	b.n	13b6 <_PrintInt+0xa6>
          break;
    13b4:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    13b6:	9b05      	ldr	r3, [sp, #20]
    13b8:	68db      	ldr	r3, [r3, #12]
    13ba:	2b00      	cmp	r3, #0
    13bc:	db4a      	blt.n	1454 <_PrintInt+0x144>
    if (v < 0) {
    13be:	9b04      	ldr	r3, [sp, #16]
    13c0:	2b00      	cmp	r3, #0
    13c2:	da07      	bge.n	13d4 <_PrintInt+0xc4>
      v = -v;
    13c4:	9b04      	ldr	r3, [sp, #16]
    13c6:	425b      	negs	r3, r3
    13c8:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    13ca:	212d      	movs	r1, #45	; 0x2d
    13cc:	9805      	ldr	r0, [sp, #20]
    13ce:	f7ff feb2 	bl	1136 <_StoreChar>
    13d2:	e008      	b.n	13e6 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    13d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    13d6:	f003 0304 	and.w	r3, r3, #4
    13da:	2b00      	cmp	r3, #0
    13dc:	d003      	beq.n	13e6 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    13de:	212b      	movs	r1, #43	; 0x2b
    13e0:	9805      	ldr	r0, [sp, #20]
    13e2:	f7ff fea8 	bl	1136 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    13e6:	9b05      	ldr	r3, [sp, #20]
    13e8:	68db      	ldr	r3, [r3, #12]
    13ea:	2b00      	cmp	r3, #0
    13ec:	db32      	blt.n	1454 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    13ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    13f0:	f003 0302 	and.w	r3, r3, #2
    13f4:	2b00      	cmp	r3, #0
    13f6:	d01f      	beq.n	1438 <_PrintInt+0x128>
    13f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    13fa:	f003 0301 	and.w	r3, r3, #1
    13fe:	2b00      	cmp	r3, #0
    1400:	d11a      	bne.n	1438 <_PrintInt+0x128>
    1402:	9b02      	ldr	r3, [sp, #8]
    1404:	2b00      	cmp	r3, #0
    1406:	d117      	bne.n	1438 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    140a:	2b00      	cmp	r3, #0
    140c:	d014      	beq.n	1438 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    140e:	e00a      	b.n	1426 <_PrintInt+0x116>
            FieldWidth--;
    1410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1412:	3b01      	subs	r3, #1
    1414:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1416:	2130      	movs	r1, #48	; 0x30
    1418:	9805      	ldr	r0, [sp, #20]
    141a:	f7ff fe8c 	bl	1136 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    141e:	9b05      	ldr	r3, [sp, #20]
    1420:	68db      	ldr	r3, [r3, #12]
    1422:	2b00      	cmp	r3, #0
    1424:	db07      	blt.n	1436 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1428:	2b00      	cmp	r3, #0
    142a:	d005      	beq.n	1438 <_PrintInt+0x128>
    142c:	9a07      	ldr	r2, [sp, #28]
    142e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1430:	429a      	cmp	r2, r3
    1432:	d3ed      	bcc.n	1410 <_PrintInt+0x100>
    1434:	e000      	b.n	1438 <_PrintInt+0x128>
              break;
    1436:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1438:	9b05      	ldr	r3, [sp, #20]
    143a:	68db      	ldr	r3, [r3, #12]
    143c:	2b00      	cmp	r3, #0
    143e:	db09      	blt.n	1454 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    1440:	9904      	ldr	r1, [sp, #16]
    1442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1444:	9301      	str	r3, [sp, #4]
    1446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1448:	9300      	str	r3, [sp, #0]
    144a:	9b02      	ldr	r3, [sp, #8]
    144c:	9a03      	ldr	r2, [sp, #12]
    144e:	9805      	ldr	r0, [sp, #20]
    1450:	f7ff feb0 	bl	11b4 <_PrintUnsigned>
      }
    }
  }
}
    1454:	bf00      	nop
    1456:	b009      	add	sp, #36	; 0x24
    1458:	f85d fb04 	ldr.w	pc, [sp], #4

0000145c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    145c:	b500      	push	{lr}
    145e:	b0a3      	sub	sp, #140	; 0x8c
    1460:	9005      	str	r0, [sp, #20]
    1462:	9104      	str	r1, [sp, #16]
    1464:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    1466:	ab06      	add	r3, sp, #24
    1468:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    146a:	2340      	movs	r3, #64	; 0x40
    146c:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    146e:	2300      	movs	r3, #0
    1470:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    1472:	9b05      	ldr	r3, [sp, #20]
    1474:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    1476:	2300      	movs	r3, #0
    1478:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    147a:	9b04      	ldr	r3, [sp, #16]
    147c:	781b      	ldrb	r3, [r3, #0]
    147e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    1482:	9b04      	ldr	r3, [sp, #16]
    1484:	3301      	adds	r3, #1
    1486:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    1488:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    148c:	2b00      	cmp	r3, #0
    148e:	f000 819c 	beq.w	17ca <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    1492:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1496:	2b25      	cmp	r3, #37	; 0x25
    1498:	f040 818b 	bne.w	17b2 <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    149c:	2300      	movs	r3, #0
    149e:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    14a0:	2301      	movs	r3, #1
    14a2:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    14a4:	9b04      	ldr	r3, [sp, #16]
    14a6:	781b      	ldrb	r3, [r3, #0]
    14a8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    14ac:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    14b0:	3b23      	subs	r3, #35	; 0x23
    14b2:	2b0d      	cmp	r3, #13
    14b4:	d83e      	bhi.n	1534 <SEGGER_RTT_vprintf+0xd8>
    14b6:	a201      	add	r2, pc, #4	; (adr r2, 14bc <SEGGER_RTT_vprintf+0x60>)
    14b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    14bc:	00001525 	.word	0x00001525
    14c0:	00001535 	.word	0x00001535
    14c4:	00001535 	.word	0x00001535
    14c8:	00001535 	.word	0x00001535
    14cc:	00001535 	.word	0x00001535
    14d0:	00001535 	.word	0x00001535
    14d4:	00001535 	.word	0x00001535
    14d8:	00001535 	.word	0x00001535
    14dc:	00001515 	.word	0x00001515
    14e0:	00001535 	.word	0x00001535
    14e4:	000014f5 	.word	0x000014f5
    14e8:	00001535 	.word	0x00001535
    14ec:	00001535 	.word	0x00001535
    14f0:	00001505 	.word	0x00001505
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    14f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    14f6:	f043 0301 	orr.w	r3, r3, #1
    14fa:	931e      	str	r3, [sp, #120]	; 0x78
    14fc:	9b04      	ldr	r3, [sp, #16]
    14fe:	3301      	adds	r3, #1
    1500:	9304      	str	r3, [sp, #16]
    1502:	e01a      	b.n	153a <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1504:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1506:	f043 0302 	orr.w	r3, r3, #2
    150a:	931e      	str	r3, [sp, #120]	; 0x78
    150c:	9b04      	ldr	r3, [sp, #16]
    150e:	3301      	adds	r3, #1
    1510:	9304      	str	r3, [sp, #16]
    1512:	e012      	b.n	153a <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1514:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1516:	f043 0304 	orr.w	r3, r3, #4
    151a:	931e      	str	r3, [sp, #120]	; 0x78
    151c:	9b04      	ldr	r3, [sp, #16]
    151e:	3301      	adds	r3, #1
    1520:	9304      	str	r3, [sp, #16]
    1522:	e00a      	b.n	153a <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1524:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1526:	f043 0308 	orr.w	r3, r3, #8
    152a:	931e      	str	r3, [sp, #120]	; 0x78
    152c:	9b04      	ldr	r3, [sp, #16]
    152e:	3301      	adds	r3, #1
    1530:	9304      	str	r3, [sp, #16]
    1532:	e002      	b.n	153a <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1534:	2300      	movs	r3, #0
    1536:	9320      	str	r3, [sp, #128]	; 0x80
    1538:	bf00      	nop
        }
      } while (v);
    153a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    153c:	2b00      	cmp	r3, #0
    153e:	d1b1      	bne.n	14a4 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    1540:	2300      	movs	r3, #0
    1542:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1544:	9b04      	ldr	r3, [sp, #16]
    1546:	781b      	ldrb	r3, [r3, #0]
    1548:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    154c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1550:	2b2f      	cmp	r3, #47	; 0x2f
    1552:	d912      	bls.n	157a <SEGGER_RTT_vprintf+0x11e>
    1554:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1558:	2b39      	cmp	r3, #57	; 0x39
    155a:	d80e      	bhi.n	157a <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    155c:	9b04      	ldr	r3, [sp, #16]
    155e:	3301      	adds	r3, #1
    1560:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    1562:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1564:	4613      	mov	r3, r2
    1566:	009b      	lsls	r3, r3, #2
    1568:	4413      	add	r3, r2
    156a:	005b      	lsls	r3, r3, #1
    156c:	461a      	mov	r2, r3
    156e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1572:	4413      	add	r3, r2
    1574:	3b30      	subs	r3, #48	; 0x30
    1576:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    1578:	e7e4      	b.n	1544 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    157a:	2300      	movs	r3, #0
    157c:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    157e:	9b04      	ldr	r3, [sp, #16]
    1580:	781b      	ldrb	r3, [r3, #0]
    1582:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    1586:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    158a:	2b2e      	cmp	r3, #46	; 0x2e
    158c:	d11d      	bne.n	15ca <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    158e:	9b04      	ldr	r3, [sp, #16]
    1590:	3301      	adds	r3, #1
    1592:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1594:	9b04      	ldr	r3, [sp, #16]
    1596:	781b      	ldrb	r3, [r3, #0]
    1598:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    159c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    15a0:	2b2f      	cmp	r3, #47	; 0x2f
    15a2:	d912      	bls.n	15ca <SEGGER_RTT_vprintf+0x16e>
    15a4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    15a8:	2b39      	cmp	r3, #57	; 0x39
    15aa:	d80e      	bhi.n	15ca <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    15ac:	9b04      	ldr	r3, [sp, #16]
    15ae:	3301      	adds	r3, #1
    15b0:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    15b2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    15b4:	4613      	mov	r3, r2
    15b6:	009b      	lsls	r3, r3, #2
    15b8:	4413      	add	r3, r2
    15ba:	005b      	lsls	r3, r3, #1
    15bc:	461a      	mov	r2, r3
    15be:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    15c2:	4413      	add	r3, r2
    15c4:	3b30      	subs	r3, #48	; 0x30
    15c6:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    15c8:	e7e4      	b.n	1594 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    15ca:	9b04      	ldr	r3, [sp, #16]
    15cc:	781b      	ldrb	r3, [r3, #0]
    15ce:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    15d2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    15d6:	2b6c      	cmp	r3, #108	; 0x6c
    15d8:	d003      	beq.n	15e2 <SEGGER_RTT_vprintf+0x186>
    15da:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    15de:	2b68      	cmp	r3, #104	; 0x68
    15e0:	d107      	bne.n	15f2 <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    15e2:	9b04      	ldr	r3, [sp, #16]
    15e4:	3301      	adds	r3, #1
    15e6:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    15e8:	9b04      	ldr	r3, [sp, #16]
    15ea:	781b      	ldrb	r3, [r3, #0]
    15ec:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    15f0:	e7ef      	b.n	15d2 <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    15f2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    15f6:	2b25      	cmp	r3, #37	; 0x25
    15f8:	f000 80d0 	beq.w	179c <SEGGER_RTT_vprintf+0x340>
    15fc:	2b25      	cmp	r3, #37	; 0x25
    15fe:	f2c0 80d3 	blt.w	17a8 <SEGGER_RTT_vprintf+0x34c>
    1602:	2b78      	cmp	r3, #120	; 0x78
    1604:	f300 80d0 	bgt.w	17a8 <SEGGER_RTT_vprintf+0x34c>
    1608:	2b58      	cmp	r3, #88	; 0x58
    160a:	f2c0 80cd 	blt.w	17a8 <SEGGER_RTT_vprintf+0x34c>
    160e:	3b58      	subs	r3, #88	; 0x58
    1610:	2b20      	cmp	r3, #32
    1612:	f200 80c9 	bhi.w	17a8 <SEGGER_RTT_vprintf+0x34c>
    1616:	a201      	add	r2, pc, #4	; (adr r2, 161c <SEGGER_RTT_vprintf+0x1c0>)
    1618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    161c:	0000170d 	.word	0x0000170d
    1620:	000017a9 	.word	0x000017a9
    1624:	000017a9 	.word	0x000017a9
    1628:	000017a9 	.word	0x000017a9
    162c:	000017a9 	.word	0x000017a9
    1630:	000017a9 	.word	0x000017a9
    1634:	000017a9 	.word	0x000017a9
    1638:	000017a9 	.word	0x000017a9
    163c:	000017a9 	.word	0x000017a9
    1640:	000017a9 	.word	0x000017a9
    1644:	000017a9 	.word	0x000017a9
    1648:	000016a1 	.word	0x000016a1
    164c:	000016c5 	.word	0x000016c5
    1650:	000017a9 	.word	0x000017a9
    1654:	000017a9 	.word	0x000017a9
    1658:	000017a9 	.word	0x000017a9
    165c:	000017a9 	.word	0x000017a9
    1660:	000017a9 	.word	0x000017a9
    1664:	000017a9 	.word	0x000017a9
    1668:	000017a9 	.word	0x000017a9
    166c:	000017a9 	.word	0x000017a9
    1670:	000017a9 	.word	0x000017a9
    1674:	000017a9 	.word	0x000017a9
    1678:	000017a9 	.word	0x000017a9
    167c:	00001779 	.word	0x00001779
    1680:	000017a9 	.word	0x000017a9
    1684:	000017a9 	.word	0x000017a9
    1688:	00001731 	.word	0x00001731
    168c:	000017a9 	.word	0x000017a9
    1690:	000016e9 	.word	0x000016e9
    1694:	000017a9 	.word	0x000017a9
    1698:	000017a9 	.word	0x000017a9
    169c:	0000170d 	.word	0x0000170d
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    16a0:	9b03      	ldr	r3, [sp, #12]
    16a2:	681b      	ldr	r3, [r3, #0]
    16a4:	1d19      	adds	r1, r3, #4
    16a6:	9a03      	ldr	r2, [sp, #12]
    16a8:	6011      	str	r1, [r2, #0]
    16aa:	681b      	ldr	r3, [r3, #0]
    16ac:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    16ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
    16b0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    16b4:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    16b8:	ab16      	add	r3, sp, #88	; 0x58
    16ba:	4611      	mov	r1, r2
    16bc:	4618      	mov	r0, r3
    16be:	f7ff fd3a 	bl	1136 <_StoreChar>
        break;
    16c2:	e072      	b.n	17aa <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    16c4:	9b03      	ldr	r3, [sp, #12]
    16c6:	681b      	ldr	r3, [r3, #0]
    16c8:	1d19      	adds	r1, r3, #4
    16ca:	9a03      	ldr	r2, [sp, #12]
    16cc:	6011      	str	r1, [r2, #0]
    16ce:	681b      	ldr	r3, [r3, #0]
    16d0:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    16d2:	a816      	add	r0, sp, #88	; 0x58
    16d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    16d6:	9301      	str	r3, [sp, #4]
    16d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    16da:	9300      	str	r3, [sp, #0]
    16dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    16de:	220a      	movs	r2, #10
    16e0:	9920      	ldr	r1, [sp, #128]	; 0x80
    16e2:	f7ff fe15 	bl	1310 <_PrintInt>
        break;
    16e6:	e060      	b.n	17aa <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    16e8:	9b03      	ldr	r3, [sp, #12]
    16ea:	681b      	ldr	r3, [r3, #0]
    16ec:	1d19      	adds	r1, r3, #4
    16ee:	9a03      	ldr	r2, [sp, #12]
    16f0:	6011      	str	r1, [r2, #0]
    16f2:	681b      	ldr	r3, [r3, #0]
    16f4:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    16f6:	9920      	ldr	r1, [sp, #128]	; 0x80
    16f8:	a816      	add	r0, sp, #88	; 0x58
    16fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    16fc:	9301      	str	r3, [sp, #4]
    16fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1700:	9300      	str	r3, [sp, #0]
    1702:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1704:	220a      	movs	r2, #10
    1706:	f7ff fd55 	bl	11b4 <_PrintUnsigned>
        break;
    170a:	e04e      	b.n	17aa <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    170c:	9b03      	ldr	r3, [sp, #12]
    170e:	681b      	ldr	r3, [r3, #0]
    1710:	1d19      	adds	r1, r3, #4
    1712:	9a03      	ldr	r2, [sp, #12]
    1714:	6011      	str	r1, [r2, #0]
    1716:	681b      	ldr	r3, [r3, #0]
    1718:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    171a:	9920      	ldr	r1, [sp, #128]	; 0x80
    171c:	a816      	add	r0, sp, #88	; 0x58
    171e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1720:	9301      	str	r3, [sp, #4]
    1722:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1724:	9300      	str	r3, [sp, #0]
    1726:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1728:	2210      	movs	r2, #16
    172a:	f7ff fd43 	bl	11b4 <_PrintUnsigned>
        break;
    172e:	e03c      	b.n	17aa <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    1730:	9b03      	ldr	r3, [sp, #12]
    1732:	681b      	ldr	r3, [r3, #0]
    1734:	1d19      	adds	r1, r3, #4
    1736:	9a03      	ldr	r2, [sp, #12]
    1738:	6011      	str	r1, [r2, #0]
    173a:	681b      	ldr	r3, [r3, #0]
    173c:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    173e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1740:	2b00      	cmp	r3, #0
    1742:	d101      	bne.n	1748 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    1744:	4b2c      	ldr	r3, [pc, #176]	; (17f8 <SEGGER_RTT_vprintf+0x39c>)
    1746:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    1748:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    174a:	781b      	ldrb	r3, [r3, #0]
    174c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    1750:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1752:	3301      	adds	r3, #1
    1754:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    1756:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    175a:	2b00      	cmp	r3, #0
    175c:	d00a      	beq.n	1774 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    175e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1762:	ab16      	add	r3, sp, #88	; 0x58
    1764:	4611      	mov	r1, r2
    1766:	4618      	mov	r0, r3
    1768:	f7ff fce5 	bl	1136 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    176c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    176e:	2b00      	cmp	r3, #0
    1770:	daea      	bge.n	1748 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    1772:	e01a      	b.n	17aa <SEGGER_RTT_vprintf+0x34e>
              break;
    1774:	bf00      	nop
        break;
    1776:	e018      	b.n	17aa <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    1778:	9b03      	ldr	r3, [sp, #12]
    177a:	681b      	ldr	r3, [r3, #0]
    177c:	1d19      	adds	r1, r3, #4
    177e:	9a03      	ldr	r2, [sp, #12]
    1780:	6011      	str	r1, [r2, #0]
    1782:	681b      	ldr	r3, [r3, #0]
    1784:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    1786:	9920      	ldr	r1, [sp, #128]	; 0x80
    1788:	a816      	add	r0, sp, #88	; 0x58
    178a:	2300      	movs	r3, #0
    178c:	9301      	str	r3, [sp, #4]
    178e:	2308      	movs	r3, #8
    1790:	9300      	str	r3, [sp, #0]
    1792:	2308      	movs	r3, #8
    1794:	2210      	movs	r2, #16
    1796:	f7ff fd0d 	bl	11b4 <_PrintUnsigned>
        break;
    179a:	e006      	b.n	17aa <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    179c:	ab16      	add	r3, sp, #88	; 0x58
    179e:	2125      	movs	r1, #37	; 0x25
    17a0:	4618      	mov	r0, r3
    17a2:	f7ff fcc8 	bl	1136 <_StoreChar>
        break;
    17a6:	e000      	b.n	17aa <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    17a8:	bf00      	nop
      }
      sFormat++;
    17aa:	9b04      	ldr	r3, [sp, #16]
    17ac:	3301      	adds	r3, #1
    17ae:	9304      	str	r3, [sp, #16]
    17b0:	e006      	b.n	17c0 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    17b2:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    17b6:	ab16      	add	r3, sp, #88	; 0x58
    17b8:	4611      	mov	r1, r2
    17ba:	4618      	mov	r0, r3
    17bc:	f7ff fcbb 	bl	1136 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    17c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    17c2:	2b00      	cmp	r3, #0
    17c4:	f6bf ae59 	bge.w	147a <SEGGER_RTT_vprintf+0x1e>
    17c8:	e000      	b.n	17cc <SEGGER_RTT_vprintf+0x370>
      break;
    17ca:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    17cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    17ce:	2b00      	cmp	r3, #0
    17d0:	dd0c      	ble.n	17ec <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    17d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    17d4:	2b00      	cmp	r3, #0
    17d6:	d005      	beq.n	17e4 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    17d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    17da:	ab06      	add	r3, sp, #24
    17dc:	4619      	mov	r1, r3
    17de:	9805      	ldr	r0, [sp, #20]
    17e0:	f7ff fc7e 	bl	10e0 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    17e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    17e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    17e8:	4413      	add	r3, r2
    17ea:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    17ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    17ee:	4618      	mov	r0, r3
    17f0:	b023      	add	sp, #140	; 0x8c
    17f2:	f85d fb04 	ldr.w	pc, [sp], #4
    17f6:	bf00      	nop
    17f8:	0000f798 	.word	0x0000f798

000017fc <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    17fc:	b40e      	push	{r1, r2, r3}
    17fe:	b500      	push	{lr}
    1800:	b084      	sub	sp, #16
    1802:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1804:	ab06      	add	r3, sp, #24
    1806:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1808:	ab02      	add	r3, sp, #8
    180a:	461a      	mov	r2, r3
    180c:	9905      	ldr	r1, [sp, #20]
    180e:	9801      	ldr	r0, [sp, #4]
    1810:	f7ff fe24 	bl	145c <SEGGER_RTT_vprintf>
    1814:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    1816:	9b03      	ldr	r3, [sp, #12]
}
    1818:	4618      	mov	r0, r3
    181a:	b004      	add	sp, #16
    181c:	f85d eb04 	ldr.w	lr, [sp], #4
    1820:	b003      	add	sp, #12
    1822:	4770      	bx	lr

00001824 <memcpy>:
    1824:	440a      	add	r2, r1
    1826:	4291      	cmp	r1, r2
    1828:	f100 33ff 	add.w	r3, r0, #4294967295
    182c:	d100      	bne.n	1830 <memcpy+0xc>
    182e:	4770      	bx	lr
    1830:	b510      	push	{r4, lr}
    1832:	f811 4b01 	ldrb.w	r4, [r1], #1
    1836:	f803 4f01 	strb.w	r4, [r3, #1]!
    183a:	4291      	cmp	r1, r2
    183c:	d1f9      	bne.n	1832 <memcpy+0xe>
    183e:	bd10      	pop	{r4, pc}

00001840 <memset>:
    1840:	4402      	add	r2, r0
    1842:	4603      	mov	r3, r0
    1844:	4293      	cmp	r3, r2
    1846:	d100      	bne.n	184a <memset+0xa>
    1848:	4770      	bx	lr
    184a:	f803 1b01 	strb.w	r1, [r3], #1
    184e:	e7f9      	b.n	1844 <memset+0x4>

00001850 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1850:	b086      	sub	sp, #24
    1852:	9003      	str	r0, [sp, #12]
    1854:	9102      	str	r1, [sp, #8]
    1856:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    1858:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    185c:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    1860:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    1862:	9b01      	ldr	r3, [sp, #4]
    1864:	2b00      	cmp	r3, #0
    1866:	d007      	beq.n	1878 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    1868:	9b03      	ldr	r3, [sp, #12]
    186a:	3310      	adds	r3, #16
    186c:	009b      	lsls	r3, r3, #2
    186e:	9a05      	ldr	r2, [sp, #20]
    1870:	4413      	add	r3, r2
    1872:	681a      	ldr	r2, [r3, #0]
    1874:	9b01      	ldr	r3, [sp, #4]
    1876:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    1878:	9b03      	ldr	r3, [sp, #12]
    187a:	3310      	adds	r3, #16
    187c:	009b      	lsls	r3, r3, #2
    187e:	9a05      	ldr	r2, [sp, #20]
    1880:	4413      	add	r3, r2
    1882:	9a02      	ldr	r2, [sp, #8]
    1884:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    1886:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    188a:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    188e:	bf00      	nop
    1890:	b006      	add	sp, #24
    1892:	4770      	bx	lr

00001894 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1894:	b082      	sub	sp, #8
    1896:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1898:	9b01      	ldr	r3, [sp, #4]
    189a:	f003 021f 	and.w	r2, r3, #31
    189e:	4905      	ldr	r1, [pc, #20]	; (18b4 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    18a0:	9b01      	ldr	r3, [sp, #4]
    18a2:	095b      	lsrs	r3, r3, #5
    18a4:	2001      	movs	r0, #1
    18a6:	fa00 f202 	lsl.w	r2, r0, r2
    18aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    18ae:	bf00      	nop
    18b0:	b002      	add	sp, #8
    18b2:	4770      	bx	lr
    18b4:	e000e100 	.word	0xe000e100

000018b8 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    18b8:	b082      	sub	sp, #8
    18ba:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    18bc:	9b01      	ldr	r3, [sp, #4]
    18be:	f003 021f 	and.w	r2, r3, #31
    18c2:	4906      	ldr	r1, [pc, #24]	; (18dc <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    18c4:	9b01      	ldr	r3, [sp, #4]
    18c6:	095b      	lsrs	r3, r3, #5
    18c8:	2001      	movs	r0, #1
    18ca:	fa00 f202 	lsl.w	r2, r0, r2
    18ce:	3320      	adds	r3, #32
    18d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    18d4:	bf00      	nop
    18d6:	b002      	add	sp, #8
    18d8:	4770      	bx	lr
    18da:	bf00      	nop
    18dc:	e000e100 	.word	0xe000e100

000018e0 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    18e0:	b084      	sub	sp, #16
    18e2:	9001      	str	r0, [sp, #4]
    18e4:	460b      	mov	r3, r1
    18e6:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    18ea:	2304      	movs	r3, #4
    18ec:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    18f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    18f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    18f8:	fa02 f103 	lsl.w	r1, r2, r3
    18fc:	4a04      	ldr	r2, [pc, #16]	; (1910 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    18fe:	9b01      	ldr	r3, [sp, #4]
    1900:	b2c9      	uxtb	r1, r1
    1902:	4413      	add	r3, r2
    1904:	460a      	mov	r2, r1
    1906:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    190a:	bf00      	nop
    190c:	b004      	add	sp, #16
    190e:	4770      	bx	lr
    1910:	e000e100 	.word	0xe000e100

00001914 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    1914:	b084      	sub	sp, #16
    1916:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1918:	2304      	movs	r3, #4
    191a:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    191e:	4a09      	ldr	r2, [pc, #36]	; (1944 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    1920:	9b01      	ldr	r3, [sp, #4]
    1922:	4413      	add	r3, r2
    1924:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    1928:	b2db      	uxtb	r3, r3
    192a:	461a      	mov	r2, r3
    192c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1930:	fa42 f303 	asr.w	r3, r2, r3
    1934:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    1938:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    193c:	4618      	mov	r0, r3
    193e:	b004      	add	sp, #16
    1940:	4770      	bx	lr
    1942:	bf00      	nop
    1944:	e000e100 	.word	0xe000e100

00001948 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    1948:	b082      	sub	sp, #8
    194a:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    194c:	9b01      	ldr	r3, [sp, #4]
    194e:	f003 021f 	and.w	r2, r3, #31
    1952:	4906      	ldr	r1, [pc, #24]	; (196c <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    1954:	9b01      	ldr	r3, [sp, #4]
    1956:	095b      	lsrs	r3, r3, #5
    1958:	2001      	movs	r0, #1
    195a:	fa00 f202 	lsl.w	r2, r0, r2
    195e:	3360      	adds	r3, #96	; 0x60
    1960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    1964:	bf00      	nop
    1966:	b002      	add	sp, #8
    1968:	4770      	bx	lr
    196a:	bf00      	nop
    196c:	e000e100 	.word	0xe000e100

00001970 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1970:	b500      	push	{lr}
    1972:	b085      	sub	sp, #20
    1974:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1976:	2300      	movs	r3, #0
    1978:	9303      	str	r3, [sp, #12]
    197a:	e05d      	b.n	1a38 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    197c:	9b01      	ldr	r3, [sp, #4]
    197e:	6859      	ldr	r1, [r3, #4]
    1980:	9a03      	ldr	r2, [sp, #12]
    1982:	4613      	mov	r3, r2
    1984:	005b      	lsls	r3, r3, #1
    1986:	4413      	add	r3, r2
    1988:	009b      	lsls	r3, r3, #2
    198a:	440b      	add	r3, r1
    198c:	681b      	ldr	r3, [r3, #0]
    198e:	4618      	mov	r0, r3
    1990:	f000 f899 	bl	1ac6 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1994:	9b01      	ldr	r3, [sp, #4]
    1996:	6859      	ldr	r1, [r3, #4]
    1998:	9a03      	ldr	r2, [sp, #12]
    199a:	4613      	mov	r3, r2
    199c:	005b      	lsls	r3, r3, #1
    199e:	4413      	add	r3, r2
    19a0:	009b      	lsls	r3, r3, #2
    19a2:	440b      	add	r3, r1
    19a4:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    19a6:	9b01      	ldr	r3, [sp, #4]
    19a8:	6859      	ldr	r1, [r3, #4]
    19aa:	9a03      	ldr	r2, [sp, #12]
    19ac:	4613      	mov	r3, r2
    19ae:	005b      	lsls	r3, r3, #1
    19b0:	4413      	add	r3, r2
    19b2:	009b      	lsls	r3, r3, #2
    19b4:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19b6:	795b      	ldrb	r3, [r3, #5]
    19b8:	4619      	mov	r1, r3
    19ba:	f000 f869 	bl	1a90 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19be:	9b01      	ldr	r3, [sp, #4]
    19c0:	6859      	ldr	r1, [r3, #4]
    19c2:	9a03      	ldr	r2, [sp, #12]
    19c4:	4613      	mov	r3, r2
    19c6:	005b      	lsls	r3, r3, #1
    19c8:	4413      	add	r3, r2
    19ca:	009b      	lsls	r3, r3, #2
    19cc:	440b      	add	r3, r1
    19ce:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    19d0:	9b01      	ldr	r3, [sp, #4]
    19d2:	6859      	ldr	r1, [r3, #4]
    19d4:	9a03      	ldr	r2, [sp, #12]
    19d6:	4613      	mov	r3, r2
    19d8:	005b      	lsls	r3, r3, #1
    19da:	4413      	add	r3, r2
    19dc:	009b      	lsls	r3, r3, #2
    19de:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19e0:	689b      	ldr	r3, [r3, #8]
    19e2:	2200      	movs	r2, #0
    19e4:	4619      	mov	r1, r3
    19e6:	f000 f831 	bl	1a4c <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    19ea:	9b01      	ldr	r3, [sp, #4]
    19ec:	6859      	ldr	r1, [r3, #4]
    19ee:	9a03      	ldr	r2, [sp, #12]
    19f0:	4613      	mov	r3, r2
    19f2:	005b      	lsls	r3, r3, #1
    19f4:	4413      	add	r3, r2
    19f6:	009b      	lsls	r3, r3, #2
    19f8:	440b      	add	r3, r1
    19fa:	791b      	ldrb	r3, [r3, #4]
    19fc:	2b00      	cmp	r3, #0
    19fe:	d00c      	beq.n	1a1a <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a00:	9b01      	ldr	r3, [sp, #4]
    1a02:	6859      	ldr	r1, [r3, #4]
    1a04:	9a03      	ldr	r2, [sp, #12]
    1a06:	4613      	mov	r3, r2
    1a08:	005b      	lsls	r3, r3, #1
    1a0a:	4413      	add	r3, r2
    1a0c:	009b      	lsls	r3, r3, #2
    1a0e:	440b      	add	r3, r1
    1a10:	681b      	ldr	r3, [r3, #0]
    1a12:	4618      	mov	r0, r3
    1a14:	f000 f828 	bl	1a68 <IntCtrl_Ip_EnableIrq>
    1a18:	e00b      	b.n	1a32 <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a1a:	9b01      	ldr	r3, [sp, #4]
    1a1c:	6859      	ldr	r1, [r3, #4]
    1a1e:	9a03      	ldr	r2, [sp, #12]
    1a20:	4613      	mov	r3, r2
    1a22:	005b      	lsls	r3, r3, #1
    1a24:	4413      	add	r3, r2
    1a26:	009b      	lsls	r3, r3, #2
    1a28:	440b      	add	r3, r1
    1a2a:	681b      	ldr	r3, [r3, #0]
    1a2c:	4618      	mov	r0, r3
    1a2e:	f000 f825 	bl	1a7c <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a32:	9b03      	ldr	r3, [sp, #12]
    1a34:	3301      	adds	r3, #1
    1a36:	9303      	str	r3, [sp, #12]
    1a38:	9b01      	ldr	r3, [sp, #4]
    1a3a:	681b      	ldr	r3, [r3, #0]
    1a3c:	9a03      	ldr	r2, [sp, #12]
    1a3e:	429a      	cmp	r2, r3
    1a40:	d39c      	bcc.n	197c <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    1a42:	2300      	movs	r3, #0
}
    1a44:	4618      	mov	r0, r3
    1a46:	b005      	add	sp, #20
    1a48:	f85d fb04 	ldr.w	pc, [sp], #4

00001a4c <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1a4c:	b500      	push	{lr}
    1a4e:	b085      	sub	sp, #20
    1a50:	9003      	str	r0, [sp, #12]
    1a52:	9102      	str	r1, [sp, #8]
    1a54:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    1a56:	9a01      	ldr	r2, [sp, #4]
    1a58:	9902      	ldr	r1, [sp, #8]
    1a5a:	9803      	ldr	r0, [sp, #12]
    1a5c:	f7ff fef8 	bl	1850 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    1a60:	bf00      	nop
    1a62:	b005      	add	sp, #20
    1a64:	f85d fb04 	ldr.w	pc, [sp], #4

00001a68 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    1a68:	b500      	push	{lr}
    1a6a:	b083      	sub	sp, #12
    1a6c:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    1a6e:	9801      	ldr	r0, [sp, #4]
    1a70:	f7ff ff10 	bl	1894 <IntCtrl_Ip_EnableIrqPrivileged>
}
    1a74:	bf00      	nop
    1a76:	b003      	add	sp, #12
    1a78:	f85d fb04 	ldr.w	pc, [sp], #4

00001a7c <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    1a7c:	b500      	push	{lr}
    1a7e:	b083      	sub	sp, #12
    1a80:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    1a82:	9801      	ldr	r0, [sp, #4]
    1a84:	f7ff ff18 	bl	18b8 <IntCtrl_Ip_DisableIrqPrivileged>
}
    1a88:	bf00      	nop
    1a8a:	b003      	add	sp, #12
    1a8c:	f85d fb04 	ldr.w	pc, [sp], #4

00001a90 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1a90:	b500      	push	{lr}
    1a92:	b083      	sub	sp, #12
    1a94:	9001      	str	r0, [sp, #4]
    1a96:	460b      	mov	r3, r1
    1a98:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1a9c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1aa0:	4619      	mov	r1, r3
    1aa2:	9801      	ldr	r0, [sp, #4]
    1aa4:	f7ff ff1c 	bl	18e0 <IntCtrl_Ip_SetPriorityPrivileged>
}
    1aa8:	bf00      	nop
    1aaa:	b003      	add	sp, #12
    1aac:	f85d fb04 	ldr.w	pc, [sp], #4

00001ab0 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    1ab0:	b500      	push	{lr}
    1ab2:	b083      	sub	sp, #12
    1ab4:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    1ab6:	9801      	ldr	r0, [sp, #4]
    1ab8:	f7ff ff2c 	bl	1914 <IntCtrl_Ip_GetPriorityPrivileged>
    1abc:	4603      	mov	r3, r0
}
    1abe:	4618      	mov	r0, r3
    1ac0:	b003      	add	sp, #12
    1ac2:	f85d fb04 	ldr.w	pc, [sp], #4

00001ac6 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    1ac6:	b500      	push	{lr}
    1ac8:	b083      	sub	sp, #12
    1aca:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    1acc:	9801      	ldr	r0, [sp, #4]
    1ace:	f7ff ff3b 	bl	1948 <IntCtrl_Ip_ClearPendingPrivileged>
}
    1ad2:	bf00      	nop
    1ad4:	b003      	add	sp, #12
    1ad6:	f85d fb04 	ldr.w	pc, [sp], #4
    1ada:	bf00      	nop

00001adc <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1adc:	b500      	push	{lr}
    1ade:	b083      	sub	sp, #12
    1ae0:	9001      	str	r0, [sp, #4]
    1ae2:	460b      	mov	r3, r1
    1ae4:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1ae8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1aec:	2b00      	cmp	r3, #0
    1aee:	d003      	beq.n	1af8 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    1af0:	9801      	ldr	r0, [sp, #4]
    1af2:	f7ff ffb9 	bl	1a68 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    1af6:	e002      	b.n	1afe <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1af8:	9801      	ldr	r0, [sp, #4]
    1afa:	f7ff ffbf 	bl	1a7c <IntCtrl_Ip_DisableIrq>
}
    1afe:	bf00      	nop
    1b00:	b003      	add	sp, #12
    1b02:	f85d fb04 	ldr.w	pc, [sp], #4

00001b06 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1b06:	b500      	push	{lr}
    1b08:	b083      	sub	sp, #12
    1b0a:	9001      	str	r0, [sp, #4]
    1b0c:	460b      	mov	r3, r1
    1b0e:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    1b12:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1b16:	4619      	mov	r1, r3
    1b18:	9801      	ldr	r0, [sp, #4]
    1b1a:	f7ff ffb9 	bl	1a90 <IntCtrl_Ip_SetPriority>
}
    1b1e:	bf00      	nop
    1b20:	b003      	add	sp, #12
    1b22:	f85d fb04 	ldr.w	pc, [sp], #4

00001b26 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    1b26:	b500      	push	{lr}
    1b28:	b083      	sub	sp, #12
    1b2a:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1b2c:	9801      	ldr	r0, [sp, #4]
    1b2e:	f7ff ffbf 	bl	1ab0 <IntCtrl_Ip_GetPriority>
    1b32:	4603      	mov	r3, r0
}
    1b34:	4618      	mov	r0, r3
    1b36:	b003      	add	sp, #12
    1b38:	f85d fb04 	ldr.w	pc, [sp], #4

00001b3c <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1b3c:	b500      	push	{lr}
    1b3e:	b085      	sub	sp, #20
    1b40:	9003      	str	r0, [sp, #12]
    1b42:	9102      	str	r1, [sp, #8]
    1b44:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1b46:	9a01      	ldr	r2, [sp, #4]
    1b48:	9902      	ldr	r1, [sp, #8]
    1b4a:	9803      	ldr	r0, [sp, #12]
    1b4c:	f7ff ff7e 	bl	1a4c <IntCtrl_Ip_InstallHandler>
}
    1b50:	bf00      	nop
    1b52:	b005      	add	sp, #20
    1b54:	f85d fb04 	ldr.w	pc, [sp], #4

00001b58 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    1b58:	b500      	push	{lr}
    1b5a:	b085      	sub	sp, #20
    1b5c:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    1b5e:	2300      	movs	r3, #0
    1b60:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    1b64:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1b68:	4a05      	ldr	r2, [pc, #20]	; (1b80 <Platform_Init+0x28>)
    1b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1b6e:	681b      	ldr	r3, [r3, #0]
    1b70:	4618      	mov	r0, r3
    1b72:	f000 f8c7 	bl	1d04 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    1b76:	bf00      	nop
    1b78:	b005      	add	sp, #20
    1b7a:	f85d fb04 	ldr.w	pc, [sp], #4
    1b7e:	bf00      	nop
    1b80:	00010640 	.word	0x00010640

00001b84 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1b84:	b500      	push	{lr}
    1b86:	b085      	sub	sp, #20
    1b88:	9001      	str	r0, [sp, #4]
    1b8a:	460b      	mov	r3, r1
    1b8c:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1b90:	2300      	movs	r3, #0
    1b92:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    1b96:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1b9a:	4619      	mov	r1, r3
    1b9c:	9801      	ldr	r0, [sp, #4]
    1b9e:	f7ff ff9d 	bl	1adc <Platform_Ipw_SetIrq>
    }
    return RetValue;
    1ba2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1ba6:	4618      	mov	r0, r3
    1ba8:	b005      	add	sp, #20
    1baa:	f85d fb04 	ldr.w	pc, [sp], #4

00001bae <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1bae:	b500      	push	{lr}
    1bb0:	b085      	sub	sp, #20
    1bb2:	9001      	str	r0, [sp, #4]
    1bb4:	460b      	mov	r3, r1
    1bb6:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1bba:	2300      	movs	r3, #0
    1bbc:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    1bc0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1bc4:	4619      	mov	r1, r3
    1bc6:	9801      	ldr	r0, [sp, #4]
    1bc8:	f7ff ff9d 	bl	1b06 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    1bcc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1bd0:	4618      	mov	r0, r3
    1bd2:	b005      	add	sp, #20
    1bd4:	f85d fb04 	ldr.w	pc, [sp], #4

00001bd8 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    1bd8:	b500      	push	{lr}
    1bda:	b085      	sub	sp, #20
    1bdc:	9001      	str	r0, [sp, #4]
    1bde:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1be0:	2300      	movs	r3, #0
    1be2:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    1be6:	9801      	ldr	r0, [sp, #4]
    1be8:	f7ff ff9d 	bl	1b26 <Platform_Ipw_GetIrqPriority>
    1bec:	4603      	mov	r3, r0
    1bee:	461a      	mov	r2, r3
    1bf0:	9b00      	ldr	r3, [sp, #0]
    1bf2:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    1bf4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1bf8:	4618      	mov	r0, r3
    1bfa:	b005      	add	sp, #20
    1bfc:	f85d fb04 	ldr.w	pc, [sp], #4

00001c00 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1c00:	b500      	push	{lr}
    1c02:	b087      	sub	sp, #28
    1c04:	9003      	str	r0, [sp, #12]
    1c06:	9102      	str	r1, [sp, #8]
    1c08:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1c0a:	2300      	movs	r3, #0
    1c0c:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1c10:	9a01      	ldr	r2, [sp, #4]
    1c12:	9902      	ldr	r1, [sp, #8]
    1c14:	9803      	ldr	r0, [sp, #12]
    1c16:	f7ff ff91 	bl	1b3c <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1c1a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1c1e:	4618      	mov	r0, r3
    1c20:	b007      	add	sp, #28
    1c22:	f85d fb04 	ldr.w	pc, [sp], #4
    1c26:	bf00      	nop

00001c28 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1c28:	b500      	push	{lr}
    1c2a:	b085      	sub	sp, #20
    1c2c:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1c2e:	2300      	movs	r3, #0
    1c30:	9303      	str	r3, [sp, #12]
    1c32:	e05d      	b.n	1cf0 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1c34:	9b01      	ldr	r3, [sp, #4]
    1c36:	6859      	ldr	r1, [r3, #4]
    1c38:	9a03      	ldr	r2, [sp, #12]
    1c3a:	4613      	mov	r3, r2
    1c3c:	005b      	lsls	r3, r3, #1
    1c3e:	4413      	add	r3, r2
    1c40:	009b      	lsls	r3, r3, #2
    1c42:	440b      	add	r3, r1
    1c44:	681b      	ldr	r3, [r3, #0]
    1c46:	4618      	mov	r0, r3
    1c48:	f7ff ff3d 	bl	1ac6 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1c4c:	9b01      	ldr	r3, [sp, #4]
    1c4e:	6859      	ldr	r1, [r3, #4]
    1c50:	9a03      	ldr	r2, [sp, #12]
    1c52:	4613      	mov	r3, r2
    1c54:	005b      	lsls	r3, r3, #1
    1c56:	4413      	add	r3, r2
    1c58:	009b      	lsls	r3, r3, #2
    1c5a:	440b      	add	r3, r1
    1c5c:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1c5e:	9b01      	ldr	r3, [sp, #4]
    1c60:	6859      	ldr	r1, [r3, #4]
    1c62:	9a03      	ldr	r2, [sp, #12]
    1c64:	4613      	mov	r3, r2
    1c66:	005b      	lsls	r3, r3, #1
    1c68:	4413      	add	r3, r2
    1c6a:	009b      	lsls	r3, r3, #2
    1c6c:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1c6e:	795b      	ldrb	r3, [r3, #5]
    1c70:	4619      	mov	r1, r3
    1c72:	f7ff ff0d 	bl	1a90 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1c76:	9b01      	ldr	r3, [sp, #4]
    1c78:	6859      	ldr	r1, [r3, #4]
    1c7a:	9a03      	ldr	r2, [sp, #12]
    1c7c:	4613      	mov	r3, r2
    1c7e:	005b      	lsls	r3, r3, #1
    1c80:	4413      	add	r3, r2
    1c82:	009b      	lsls	r3, r3, #2
    1c84:	440b      	add	r3, r1
    1c86:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1c88:	9b01      	ldr	r3, [sp, #4]
    1c8a:	6859      	ldr	r1, [r3, #4]
    1c8c:	9a03      	ldr	r2, [sp, #12]
    1c8e:	4613      	mov	r3, r2
    1c90:	005b      	lsls	r3, r3, #1
    1c92:	4413      	add	r3, r2
    1c94:	009b      	lsls	r3, r3, #2
    1c96:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1c98:	689b      	ldr	r3, [r3, #8]
    1c9a:	2200      	movs	r2, #0
    1c9c:	4619      	mov	r1, r3
    1c9e:	f7ff fed5 	bl	1a4c <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1ca2:	9b01      	ldr	r3, [sp, #4]
    1ca4:	6859      	ldr	r1, [r3, #4]
    1ca6:	9a03      	ldr	r2, [sp, #12]
    1ca8:	4613      	mov	r3, r2
    1caa:	005b      	lsls	r3, r3, #1
    1cac:	4413      	add	r3, r2
    1cae:	009b      	lsls	r3, r3, #2
    1cb0:	440b      	add	r3, r1
    1cb2:	791b      	ldrb	r3, [r3, #4]
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	d00c      	beq.n	1cd2 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1cb8:	9b01      	ldr	r3, [sp, #4]
    1cba:	6859      	ldr	r1, [r3, #4]
    1cbc:	9a03      	ldr	r2, [sp, #12]
    1cbe:	4613      	mov	r3, r2
    1cc0:	005b      	lsls	r3, r3, #1
    1cc2:	4413      	add	r3, r2
    1cc4:	009b      	lsls	r3, r3, #2
    1cc6:	440b      	add	r3, r1
    1cc8:	681b      	ldr	r3, [r3, #0]
    1cca:	4618      	mov	r0, r3
    1ccc:	f7ff fecc 	bl	1a68 <IntCtrl_Ip_EnableIrq>
    1cd0:	e00b      	b.n	1cea <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1cd2:	9b01      	ldr	r3, [sp, #4]
    1cd4:	6859      	ldr	r1, [r3, #4]
    1cd6:	9a03      	ldr	r2, [sp, #12]
    1cd8:	4613      	mov	r3, r2
    1cda:	005b      	lsls	r3, r3, #1
    1cdc:	4413      	add	r3, r2
    1cde:	009b      	lsls	r3, r3, #2
    1ce0:	440b      	add	r3, r1
    1ce2:	681b      	ldr	r3, [r3, #0]
    1ce4:	4618      	mov	r0, r3
    1ce6:	f7ff fec9 	bl	1a7c <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1cea:	9b03      	ldr	r3, [sp, #12]
    1cec:	3301      	adds	r3, #1
    1cee:	9303      	str	r3, [sp, #12]
    1cf0:	9b01      	ldr	r3, [sp, #4]
    1cf2:	681b      	ldr	r3, [r3, #0]
    1cf4:	9a03      	ldr	r2, [sp, #12]
    1cf6:	429a      	cmp	r2, r3
    1cf8:	d39c      	bcc.n	1c34 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1cfa:	2300      	movs	r3, #0
}
    1cfc:	4618      	mov	r0, r3
    1cfe:	b005      	add	sp, #20
    1d00:	f85d fb04 	ldr.w	pc, [sp], #4

00001d04 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1d04:	b500      	push	{lr}
    1d06:	b085      	sub	sp, #20
    1d08:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1d0a:	2300      	movs	r3, #0
    1d0c:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1d10:	9b01      	ldr	r3, [sp, #4]
    1d12:	681b      	ldr	r3, [r3, #0]
    1d14:	2b00      	cmp	r3, #0
    1d16:	d007      	beq.n	1d28 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1d18:	9b01      	ldr	r3, [sp, #4]
    1d1a:	681b      	ldr	r3, [r3, #0]
    1d1c:	4618      	mov	r0, r3
    1d1e:	f7ff ff83 	bl	1c28 <Platform_Ipw_InitIntCtrl>
    1d22:	4603      	mov	r3, r0
    1d24:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1d28:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d2c:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1d2e:	bf00      	nop
    1d30:	b005      	add	sp, #20
    1d32:	f85d fb04 	ldr.w	pc, [sp], #4

00001d36 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1d36:	2300      	movs	r3, #0
}
    1d38:	4618      	mov	r0, r3
    1d3a:	4770      	bx	lr

00001d3c <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1d3c:	b082      	sub	sp, #8
    1d3e:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1d40:	2301      	movs	r3, #1
}
    1d42:	4618      	mov	r0, r3
    1d44:	b002      	add	sp, #8
    1d46:	4770      	bx	lr

00001d48 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1d48:	b082      	sub	sp, #8
    1d4a:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1d4c:	bf00      	nop
    1d4e:	b002      	add	sp, #8
    1d50:	4770      	bx	lr

00001d52 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1d52:	b082      	sub	sp, #8
    1d54:	9001      	str	r0, [sp, #4]
    return Micros;
    1d56:	9b01      	ldr	r3, [sp, #4]
}
    1d58:	4618      	mov	r0, r3
    1d5a:	b002      	add	sp, #8
    1d5c:	4770      	bx	lr

00001d5e <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1d5e:	b500      	push	{lr}
    1d60:	b083      	sub	sp, #12
    1d62:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1d64:	f000 f86c 	bl	1e40 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1d68:	bf00      	nop
    1d6a:	b003      	add	sp, #12
    1d6c:	f85d fb04 	ldr.w	pc, [sp], #4

00001d70 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1d70:	b500      	push	{lr}
    1d72:	b085      	sub	sp, #20
    1d74:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1d76:	2300      	movs	r3, #0
    1d78:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1d7a:	9b01      	ldr	r3, [sp, #4]
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d003      	beq.n	1d88 <OsIf_GetCounter+0x18>
    1d80:	9b01      	ldr	r3, [sp, #4]
    1d82:	2b01      	cmp	r3, #1
    1d84:	d004      	beq.n	1d90 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1d86:	e007      	b.n	1d98 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1d88:	f7ff ffd5 	bl	1d36 <OsIf_Timer_Dummy_GetCounter>
    1d8c:	9003      	str	r0, [sp, #12]
            break;
    1d8e:	e003      	b.n	1d98 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1d90:	f000 f872 	bl	1e78 <OsIf_Timer_System_GetCounter>
    1d94:	9003      	str	r0, [sp, #12]
            break;
    1d96:	bf00      	nop
    }

    return Value;
    1d98:	9b03      	ldr	r3, [sp, #12]
}
    1d9a:	4618      	mov	r0, r3
    1d9c:	b005      	add	sp, #20
    1d9e:	f85d fb04 	ldr.w	pc, [sp], #4

00001da2 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1da2:	b500      	push	{lr}
    1da4:	b085      	sub	sp, #20
    1da6:	9001      	str	r0, [sp, #4]
    1da8:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1daa:	2300      	movs	r3, #0
    1dac:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1dae:	9b00      	ldr	r3, [sp, #0]
    1db0:	2b00      	cmp	r3, #0
    1db2:	d003      	beq.n	1dbc <OsIf_GetElapsed+0x1a>
    1db4:	9b00      	ldr	r3, [sp, #0]
    1db6:	2b01      	cmp	r3, #1
    1db8:	d005      	beq.n	1dc6 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1dba:	e009      	b.n	1dd0 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1dbc:	9801      	ldr	r0, [sp, #4]
    1dbe:	f7ff ffbd 	bl	1d3c <OsIf_Timer_Dummy_GetElapsed>
    1dc2:	9003      	str	r0, [sp, #12]
            break;
    1dc4:	e004      	b.n	1dd0 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1dc6:	9801      	ldr	r0, [sp, #4]
    1dc8:	f000 f864 	bl	1e94 <OsIf_Timer_System_GetElapsed>
    1dcc:	9003      	str	r0, [sp, #12]
            break;
    1dce:	bf00      	nop
    }

    return Value;
    1dd0:	9b03      	ldr	r3, [sp, #12]
}
    1dd2:	4618      	mov	r0, r3
    1dd4:	b005      	add	sp, #20
    1dd6:	f85d fb04 	ldr.w	pc, [sp], #4

00001dda <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1dda:	b500      	push	{lr}
    1ddc:	b083      	sub	sp, #12
    1dde:	9001      	str	r0, [sp, #4]
    1de0:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1de2:	9b00      	ldr	r3, [sp, #0]
    1de4:	2b00      	cmp	r3, #0
    1de6:	d003      	beq.n	1df0 <OsIf_SetTimerFrequency+0x16>
    1de8:	9b00      	ldr	r3, [sp, #0]
    1dea:	2b01      	cmp	r3, #1
    1dec:	d004      	beq.n	1df8 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1dee:	e007      	b.n	1e00 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1df0:	9801      	ldr	r0, [sp, #4]
    1df2:	f7ff ffa9 	bl	1d48 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1df6:	e003      	b.n	1e00 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1df8:	9801      	ldr	r0, [sp, #4]
    1dfa:	f000 f85b 	bl	1eb4 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1dfe:	bf00      	nop
    }
}
    1e00:	bf00      	nop
    1e02:	b003      	add	sp, #12
    1e04:	f85d fb04 	ldr.w	pc, [sp], #4

00001e08 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1e08:	b500      	push	{lr}
    1e0a:	b085      	sub	sp, #20
    1e0c:	9001      	str	r0, [sp, #4]
    1e0e:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1e10:	2300      	movs	r3, #0
    1e12:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1e14:	9b00      	ldr	r3, [sp, #0]
    1e16:	2b00      	cmp	r3, #0
    1e18:	d003      	beq.n	1e22 <OsIf_MicrosToTicks+0x1a>
    1e1a:	9b00      	ldr	r3, [sp, #0]
    1e1c:	2b01      	cmp	r3, #1
    1e1e:	d005      	beq.n	1e2c <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1e20:	e009      	b.n	1e36 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1e22:	9801      	ldr	r0, [sp, #4]
    1e24:	f7ff ff95 	bl	1d52 <OsIf_Timer_Dummy_MicrosToTicks>
    1e28:	9003      	str	r0, [sp, #12]
            break;
    1e2a:	e004      	b.n	1e36 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1e2c:	9801      	ldr	r0, [sp, #4]
    1e2e:	f000 f84f 	bl	1ed0 <OsIf_Timer_System_MicrosToTicks>
    1e32:	9003      	str	r0, [sp, #12]
            break;
    1e34:	bf00      	nop
    }

    return Value;
    1e36:	9b03      	ldr	r3, [sp, #12]
}
    1e38:	4618      	mov	r0, r3
    1e3a:	b005      	add	sp, #20
    1e3c:	f85d fb04 	ldr.w	pc, [sp], #4

00001e40 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1e40:	b500      	push	{lr}
    1e42:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1e44:	2300      	movs	r3, #0
    1e46:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1e48:	4a09      	ldr	r2, [pc, #36]	; (1e70 <OsIf_Timer_System_Init+0x30>)
    1e4a:	9b01      	ldr	r3, [sp, #4]
    1e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e50:	685a      	ldr	r2, [r3, #4]
    1e52:	4908      	ldr	r1, [pc, #32]	; (1e74 <OsIf_Timer_System_Init+0x34>)
    1e54:	9b01      	ldr	r3, [sp, #4]
    1e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1e5a:	4a06      	ldr	r2, [pc, #24]	; (1e74 <OsIf_Timer_System_Init+0x34>)
    1e5c:	9b01      	ldr	r3, [sp, #4]
    1e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e62:	4618      	mov	r0, r3
    1e64:	f000 f868 	bl	1f38 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1e68:	bf00      	nop
    1e6a:	b003      	add	sp, #12
    1e6c:	f85d fb04 	ldr.w	pc, [sp], #4
    1e70:	00010638 	.word	0x00010638
    1e74:	1fff8b4c 	.word	0x1fff8b4c

00001e78 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1e78:	b500      	push	{lr}
    1e7a:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1e7c:	2300      	movs	r3, #0
    1e7e:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1e80:	2300      	movs	r3, #0
    1e82:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1e84:	f000 f86c 	bl	1f60 <OsIf_Timer_System_Internal_GetCounter>
    1e88:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1e8a:	9b01      	ldr	r3, [sp, #4]
}
    1e8c:	4618      	mov	r0, r3
    1e8e:	b003      	add	sp, #12
    1e90:	f85d fb04 	ldr.w	pc, [sp], #4

00001e94 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1e94:	b500      	push	{lr}
    1e96:	b085      	sub	sp, #20
    1e98:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1e9a:	2300      	movs	r3, #0
    1e9c:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1e9e:	2300      	movs	r3, #0
    1ea0:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1ea2:	9801      	ldr	r0, [sp, #4]
    1ea4:	f000 f864 	bl	1f70 <OsIf_Timer_System_Internal_GetElapsed>
    1ea8:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1eaa:	9b03      	ldr	r3, [sp, #12]
}
    1eac:	4618      	mov	r0, r3
    1eae:	b005      	add	sp, #20
    1eb0:	f85d fb04 	ldr.w	pc, [sp], #4

00001eb4 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1eb4:	b084      	sub	sp, #16
    1eb6:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1eb8:	2300      	movs	r3, #0
    1eba:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1ebc:	4903      	ldr	r1, [pc, #12]	; (1ecc <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1ebe:	9b03      	ldr	r3, [sp, #12]
    1ec0:	9a01      	ldr	r2, [sp, #4]
    1ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1ec6:	bf00      	nop
    1ec8:	b004      	add	sp, #16
    1eca:	4770      	bx	lr
    1ecc:	1fff8b4c 	.word	0x1fff8b4c

00001ed0 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ed2:	b087      	sub	sp, #28
    1ed4:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1ed6:	2100      	movs	r1, #0
    1ed8:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1eda:	2100      	movs	r1, #0
    1edc:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1ede:	9901      	ldr	r1, [sp, #4]
    1ee0:	2000      	movs	r0, #0
    1ee2:	460e      	mov	r6, r1
    1ee4:	4607      	mov	r7, r0
    1ee6:	4812      	ldr	r0, [pc, #72]	; (1f30 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1ee8:	9904      	ldr	r1, [sp, #16]
    1eea:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1eee:	2000      	movs	r0, #0
    1ef0:	460c      	mov	r4, r1
    1ef2:	4605      	mov	r5, r0
    1ef4:	fb04 f007 	mul.w	r0, r4, r7
    1ef8:	fb06 f105 	mul.w	r1, r6, r5
    1efc:	4401      	add	r1, r0
    1efe:	fba6 2304 	umull	r2, r3, r6, r4
    1f02:	4419      	add	r1, r3
    1f04:	460b      	mov	r3, r1
    1f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1f0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1f12:	4a08      	ldr	r2, [pc, #32]	; (1f34 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1f14:	f04f 0300 	mov.w	r3, #0
    1f18:	f7fe fb44 	bl	5a4 <__aeabi_uldivmod>
    1f1c:	4602      	mov	r2, r0
    1f1e:	460b      	mov	r3, r1
    1f20:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1f24:	9b02      	ldr	r3, [sp, #8]
    1f26:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1f28:	9b05      	ldr	r3, [sp, #20]
}
    1f2a:	4618      	mov	r0, r3
    1f2c:	b007      	add	sp, #28
    1f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f30:	1fff8b4c 	.word	0x1fff8b4c
    1f34:	000f4240 	.word	0x000f4240

00001f38 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1f38:	b082      	sub	sp, #8
    1f3a:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1f3c:	4b07      	ldr	r3, [pc, #28]	; (1f5c <OsIf_Timer_System_Internal_Init+0x24>)
    1f3e:	2200      	movs	r2, #0
    1f40:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1f42:	4b06      	ldr	r3, [pc, #24]	; (1f5c <OsIf_Timer_System_Internal_Init+0x24>)
    1f44:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1f48:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1f4a:	4b04      	ldr	r3, [pc, #16]	; (1f5c <OsIf_Timer_System_Internal_Init+0x24>)
    1f4c:	2200      	movs	r2, #0
    1f4e:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1f50:	4b02      	ldr	r3, [pc, #8]	; (1f5c <OsIf_Timer_System_Internal_Init+0x24>)
    1f52:	2205      	movs	r2, #5
    1f54:	601a      	str	r2, [r3, #0]
}
    1f56:	bf00      	nop
    1f58:	b002      	add	sp, #8
    1f5a:	4770      	bx	lr
    1f5c:	e000e010 	.word	0xe000e010

00001f60 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1f60:	4b02      	ldr	r3, [pc, #8]	; (1f6c <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1f62:	689b      	ldr	r3, [r3, #8]
    1f64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1f68:	4618      	mov	r0, r3
    1f6a:	4770      	bx	lr
    1f6c:	e000e010 	.word	0xe000e010

00001f70 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1f70:	b084      	sub	sp, #16
    1f72:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1f74:	4b10      	ldr	r3, [pc, #64]	; (1fb8 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1f76:	689b      	ldr	r3, [r3, #8]
    1f78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1f7c:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1f7e:	2300      	movs	r3, #0
    1f80:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1f82:	9b01      	ldr	r3, [sp, #4]
    1f84:	681b      	ldr	r3, [r3, #0]
    1f86:	9a02      	ldr	r2, [sp, #8]
    1f88:	429a      	cmp	r2, r3
    1f8a:	d909      	bls.n	1fa0 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1f8c:	9b01      	ldr	r3, [sp, #4]
    1f8e:	681a      	ldr	r2, [r3, #0]
    1f90:	9b02      	ldr	r3, [sp, #8]
    1f92:	1ad3      	subs	r3, r2, r3
    1f94:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1f98:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1f9c:	9303      	str	r3, [sp, #12]
    1f9e:	e004      	b.n	1faa <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1fa0:	9b01      	ldr	r3, [sp, #4]
    1fa2:	681a      	ldr	r2, [r3, #0]
    1fa4:	9b02      	ldr	r3, [sp, #8]
    1fa6:	1ad3      	subs	r3, r2, r3
    1fa8:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1faa:	9b01      	ldr	r3, [sp, #4]
    1fac:	9a02      	ldr	r2, [sp, #8]
    1fae:	601a      	str	r2, [r3, #0]

    return dif;
    1fb0:	9b03      	ldr	r3, [sp, #12]
}
    1fb2:	4618      	mov	r0, r3
    1fb4:	b004      	add	sp, #16
    1fb6:	4770      	bx	lr
    1fb8:	e000e010 	.word	0xe000e010

00001fbc <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1fbc:	b082      	sub	sp, #8
    1fbe:	9001      	str	r0, [sp, #4]
    1fc0:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1fc2:	bf00      	nop
    1fc4:	b002      	add	sp, #8
    1fc6:	4770      	bx	lr

00001fc8 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1fc8:	b500      	push	{lr}
    1fca:	b085      	sub	sp, #20
    1fcc:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1fce:	4b24      	ldr	r3, [pc, #144]	; (2060 <Clock_Ip_UpdateDriverContext+0x98>)
    1fd0:	2201      	movs	r2, #1
    1fd2:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1fd4:	4b23      	ldr	r3, [pc, #140]	; (2064 <Clock_Ip_UpdateDriverContext+0x9c>)
    1fd6:	681b      	ldr	r3, [r3, #0]
    1fd8:	2102      	movs	r1, #2
    1fda:	4618      	mov	r0, r3
    1fdc:	f003 fc32 	bl	5844 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1fe0:	2300      	movs	r3, #0
    1fe2:	f88d 300f 	strb.w	r3, [sp, #15]
    1fe6:	e015      	b.n	2014 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1fe8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1fec:	9a01      	ldr	r2, [sp, #4]
    1fee:	334a      	adds	r3, #74	; 0x4a
    1ff0:	00db      	lsls	r3, r3, #3
    1ff2:	4413      	add	r3, r2
    1ff4:	6858      	ldr	r0, [r3, #4]
    1ff6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1ffa:	9a01      	ldr	r2, [sp, #4]
    1ffc:	334a      	adds	r3, #74	; 0x4a
    1ffe:	00db      	lsls	r3, r3, #3
    2000:	4413      	add	r3, r2
    2002:	689b      	ldr	r3, [r3, #8]
    2004:	4619      	mov	r1, r3
    2006:	f001 fadc 	bl	35c2 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    200a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    200e:	3301      	adds	r3, #1
    2010:	f88d 300f 	strb.w	r3, [sp, #15]
    2014:	9b01      	ldr	r3, [sp, #4]
    2016:	7bdb      	ldrb	r3, [r3, #15]
    2018:	f89d 200f 	ldrb.w	r2, [sp, #15]
    201c:	429a      	cmp	r2, r3
    201e:	d3e3      	bcc.n	1fe8 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    2020:	f000 f824 	bl	206c <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2024:	2301      	movs	r3, #1
    2026:	f88d 300f 	strb.w	r3, [sp, #15]
    202a:	e00e      	b.n	204a <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    202c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2030:	9b01      	ldr	r3, [sp, #4]
    2032:	327e      	adds	r2, #126	; 0x7e
    2034:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    2038:	490b      	ldr	r1, [pc, #44]	; (2068 <Clock_Ip_UpdateDriverContext+0xa0>)
    203a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    203e:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2040:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2044:	3301      	adds	r3, #1
    2046:	f88d 300f 	strb.w	r3, [sp, #15]
    204a:	9b01      	ldr	r3, [sp, #4]
    204c:	7cdb      	ldrb	r3, [r3, #19]
    204e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2052:	429a      	cmp	r2, r3
    2054:	d3ea      	bcc.n	202c <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    2056:	bf00      	nop
    2058:	bf00      	nop
    205a:	b005      	add	sp, #20
    205c:	f85d fb04 	ldr.w	pc, [sp], #4
    2060:	1fff8b10 	.word	0x1fff8b10
    2064:	1fff8b50 	.word	0x1fff8b50
    2068:	1fff8b5c 	.word	0x1fff8b5c

0000206c <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    206c:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    206e:	4b23      	ldr	r3, [pc, #140]	; (20fc <Clock_Ip_CallEmptyCallbacks+0x90>)
    2070:	781b      	ldrb	r3, [r3, #0]
    2072:	f083 0301 	eor.w	r3, r3, #1
    2076:	b2db      	uxtb	r3, r3
    2078:	2b00      	cmp	r3, #0
    207a:	d03d      	beq.n	20f8 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    207c:	4b1f      	ldr	r3, [pc, #124]	; (20fc <Clock_Ip_CallEmptyCallbacks+0x90>)
    207e:	2201      	movs	r2, #1
    2080:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2082:	4b1f      	ldr	r3, [pc, #124]	; (2100 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2084:	685b      	ldr	r3, [r3, #4]
    2086:	2100      	movs	r1, #0
    2088:	2000      	movs	r0, #0
    208a:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    208c:	4b1c      	ldr	r3, [pc, #112]	; (2100 <Clock_Ip_CallEmptyCallbacks+0x94>)
    208e:	689b      	ldr	r3, [r3, #8]
    2090:	2057      	movs	r0, #87	; 0x57
    2092:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2094:	4b1b      	ldr	r3, [pc, #108]	; (2104 <Clock_Ip_CallEmptyCallbacks+0x98>)
    2096:	681b      	ldr	r3, [r3, #0]
    2098:	2000      	movs	r0, #0
    209a:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    209c:	4b1a      	ldr	r3, [pc, #104]	; (2108 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    209e:	681b      	ldr	r3, [r3, #0]
    20a0:	2000      	movs	r0, #0
    20a2:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    20a4:	4b19      	ldr	r3, [pc, #100]	; (210c <Clock_Ip_CallEmptyCallbacks+0xa0>)
    20a6:	681b      	ldr	r3, [r3, #0]
    20a8:	2000      	movs	r0, #0
    20aa:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    20ac:	4b18      	ldr	r3, [pc, #96]	; (2110 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    20ae:	685b      	ldr	r3, [r3, #4]
    20b0:	2000      	movs	r0, #0
    20b2:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    20b4:	4b16      	ldr	r3, [pc, #88]	; (2110 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    20b6:	689b      	ldr	r3, [r3, #8]
    20b8:	2057      	movs	r0, #87	; 0x57
    20ba:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    20bc:	4b15      	ldr	r3, [pc, #84]	; (2114 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    20be:	681b      	ldr	r3, [r3, #0]
    20c0:	2000      	movs	r0, #0
    20c2:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    20c4:	4b13      	ldr	r3, [pc, #76]	; (2114 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    20c6:	685b      	ldr	r3, [r3, #4]
    20c8:	2100      	movs	r1, #0
    20ca:	2057      	movs	r0, #87	; 0x57
    20cc:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    20ce:	4b12      	ldr	r3, [pc, #72]	; (2118 <Clock_Ip_CallEmptyCallbacks+0xac>)
    20d0:	681b      	ldr	r3, [r3, #0]
    20d2:	2000      	movs	r0, #0
    20d4:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    20d6:	4b11      	ldr	r3, [pc, #68]	; (211c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    20d8:	685b      	ldr	r3, [r3, #4]
    20da:	2000      	movs	r0, #0
    20dc:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    20de:	4b0f      	ldr	r3, [pc, #60]	; (211c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    20e0:	689b      	ldr	r3, [r3, #8]
    20e2:	2057      	movs	r0, #87	; 0x57
    20e4:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    20e6:	4b0e      	ldr	r3, [pc, #56]	; (2120 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    20e8:	685b      	ldr	r3, [r3, #4]
    20ea:	2000      	movs	r0, #0
    20ec:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    20ee:	4b0d      	ldr	r3, [pc, #52]	; (2124 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    20f0:	681b      	ldr	r3, [r3, #0]
    20f2:	2100      	movs	r1, #0
    20f4:	2000      	movs	r0, #0
    20f6:	4798      	blx	r3
    }
}
    20f8:	bf00      	nop
    20fa:	bd08      	pop	{r3, pc}
    20fc:	1fff8b54 	.word	0x1fff8b54
    2100:	0000fe3c 	.word	0x0000fe3c
    2104:	0000fd50 	.word	0x0000fd50
    2108:	0000fd8c 	.word	0x0000fd8c
    210c:	0000fd94 	.word	0x0000fd94
    2110:	0000fdbc 	.word	0x0000fdbc
    2114:	0000fdc8 	.word	0x0000fdc8
    2118:	0000fe00 	.word	0x0000fe00
    211c:	0000fe4c 	.word	0x0000fe4c
    2120:	0000fe78 	.word	0x0000fe78
    2124:	0000fe74 	.word	0x0000fe74

00002128 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    2128:	b500      	push	{lr}
    212a:	b085      	sub	sp, #20
    212c:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    212e:	9b01      	ldr	r3, [sp, #4]
    2130:	7adb      	ldrb	r3, [r3, #11]
    2132:	9303      	str	r3, [sp, #12]
    2134:	e01f      	b.n	2176 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2136:	9b03      	ldr	r3, [sp, #12]
    2138:	1e5a      	subs	r2, r3, #1
    213a:	9b01      	ldr	r3, [sp, #4]
    213c:	320d      	adds	r2, #13
    213e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2142:	495a      	ldr	r1, [pc, #360]	; (22ac <Clock_Ip_ResetClockConfiguration+0x184>)
    2144:	4613      	mov	r3, r2
    2146:	00db      	lsls	r3, r3, #3
    2148:	4413      	add	r3, r2
    214a:	440b      	add	r3, r1
    214c:	3301      	adds	r3, #1
    214e:	781b      	ldrb	r3, [r3, #0]
    2150:	461a      	mov	r2, r3
    2152:	4b57      	ldr	r3, [pc, #348]	; (22b0 <Clock_Ip_ResetClockConfiguration+0x188>)
    2154:	5c9b      	ldrb	r3, [r3, r2]
    2156:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    2158:	4a56      	ldr	r2, [pc, #344]	; (22b4 <Clock_Ip_ResetClockConfiguration+0x18c>)
    215a:	9b02      	ldr	r3, [sp, #8]
    215c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2160:	9a03      	ldr	r2, [sp, #12]
    2162:	3a01      	subs	r2, #1
    2164:	320d      	adds	r2, #13
    2166:	00d2      	lsls	r2, r2, #3
    2168:	9901      	ldr	r1, [sp, #4]
    216a:	440a      	add	r2, r1
    216c:	4610      	mov	r0, r2
    216e:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2170:	9b03      	ldr	r3, [sp, #12]
    2172:	3b01      	subs	r3, #1
    2174:	9303      	str	r3, [sp, #12]
    2176:	9b03      	ldr	r3, [sp, #12]
    2178:	2b00      	cmp	r3, #0
    217a:	d1dc      	bne.n	2136 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    217c:	9b01      	ldr	r3, [sp, #4]
    217e:	7b9b      	ldrb	r3, [r3, #14]
    2180:	9303      	str	r3, [sp, #12]
    2182:	e026      	b.n	21d2 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2184:	9b03      	ldr	r3, [sp, #12]
    2186:	3b01      	subs	r3, #1
    2188:	9a01      	ldr	r2, [sp, #4]
    218a:	3324      	adds	r3, #36	; 0x24
    218c:	011b      	lsls	r3, r3, #4
    218e:	4413      	add	r3, r2
    2190:	3304      	adds	r3, #4
    2192:	681a      	ldr	r2, [r3, #0]
    2194:	4945      	ldr	r1, [pc, #276]	; (22ac <Clock_Ip_ResetClockConfiguration+0x184>)
    2196:	4613      	mov	r3, r2
    2198:	00db      	lsls	r3, r3, #3
    219a:	4413      	add	r3, r2
    219c:	440b      	add	r3, r1
    219e:	3301      	adds	r3, #1
    21a0:	781b      	ldrb	r3, [r3, #0]
    21a2:	461a      	mov	r2, r3
    21a4:	4b44      	ldr	r3, [pc, #272]	; (22b8 <Clock_Ip_ResetClockConfiguration+0x190>)
    21a6:	5c9b      	ldrb	r3, [r3, r2]
    21a8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    21aa:	4944      	ldr	r1, [pc, #272]	; (22bc <Clock_Ip_ResetClockConfiguration+0x194>)
    21ac:	9a02      	ldr	r2, [sp, #8]
    21ae:	4613      	mov	r3, r2
    21b0:	005b      	lsls	r3, r3, #1
    21b2:	4413      	add	r3, r2
    21b4:	009b      	lsls	r3, r3, #2
    21b6:	440b      	add	r3, r1
    21b8:	681b      	ldr	r3, [r3, #0]
    21ba:	9a03      	ldr	r2, [sp, #12]
    21bc:	3a01      	subs	r2, #1
    21be:	3224      	adds	r2, #36	; 0x24
    21c0:	0112      	lsls	r2, r2, #4
    21c2:	9901      	ldr	r1, [sp, #4]
    21c4:	440a      	add	r2, r1
    21c6:	3204      	adds	r2, #4
    21c8:	4610      	mov	r0, r2
    21ca:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    21cc:	9b03      	ldr	r3, [sp, #12]
    21ce:	3b01      	subs	r3, #1
    21d0:	9303      	str	r3, [sp, #12]
    21d2:	9b03      	ldr	r3, [sp, #12]
    21d4:	2b00      	cmp	r3, #0
    21d6:	d1d5      	bne.n	2184 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    21d8:	9b01      	ldr	r3, [sp, #4]
    21da:	7a9b      	ldrb	r3, [r3, #10]
    21dc:	9303      	str	r3, [sp, #12]
    21de:	e02a      	b.n	2236 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    21e0:	9b03      	ldr	r3, [sp, #12]
    21e2:	1e5a      	subs	r2, r3, #1
    21e4:	9901      	ldr	r1, [sp, #4]
    21e6:	4613      	mov	r3, r2
    21e8:	009b      	lsls	r3, r3, #2
    21ea:	4413      	add	r3, r2
    21ec:	00db      	lsls	r3, r3, #3
    21ee:	440b      	add	r3, r1
    21f0:	3340      	adds	r3, #64	; 0x40
    21f2:	681a      	ldr	r2, [r3, #0]
    21f4:	492d      	ldr	r1, [pc, #180]	; (22ac <Clock_Ip_ResetClockConfiguration+0x184>)
    21f6:	4613      	mov	r3, r2
    21f8:	00db      	lsls	r3, r3, #3
    21fa:	4413      	add	r3, r2
    21fc:	440b      	add	r3, r1
    21fe:	3301      	adds	r3, #1
    2200:	781b      	ldrb	r3, [r3, #0]
    2202:	461a      	mov	r2, r3
    2204:	4b2e      	ldr	r3, [pc, #184]	; (22c0 <Clock_Ip_ResetClockConfiguration+0x198>)
    2206:	5c9b      	ldrb	r3, [r3, r2]
    2208:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    220a:	492e      	ldr	r1, [pc, #184]	; (22c4 <Clock_Ip_ResetClockConfiguration+0x19c>)
    220c:	9a02      	ldr	r2, [sp, #8]
    220e:	4613      	mov	r3, r2
    2210:	009b      	lsls	r3, r3, #2
    2212:	4413      	add	r3, r2
    2214:	009b      	lsls	r3, r3, #2
    2216:	440b      	add	r3, r1
    2218:	6819      	ldr	r1, [r3, #0]
    221a:	9b03      	ldr	r3, [sp, #12]
    221c:	1e5a      	subs	r2, r3, #1
    221e:	4613      	mov	r3, r2
    2220:	009b      	lsls	r3, r3, #2
    2222:	4413      	add	r3, r2
    2224:	00db      	lsls	r3, r3, #3
    2226:	3340      	adds	r3, #64	; 0x40
    2228:	9a01      	ldr	r2, [sp, #4]
    222a:	4413      	add	r3, r2
    222c:	4618      	mov	r0, r3
    222e:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2230:	9b03      	ldr	r3, [sp, #12]
    2232:	3b01      	subs	r3, #1
    2234:	9303      	str	r3, [sp, #12]
    2236:	9b03      	ldr	r3, [sp, #12]
    2238:	2b00      	cmp	r3, #0
    223a:	d1d1      	bne.n	21e0 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    223c:	9b01      	ldr	r3, [sp, #4]
    223e:	7a5b      	ldrb	r3, [r3, #9]
    2240:	9303      	str	r3, [sp, #12]
    2242:	e02b      	b.n	229c <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2244:	9b03      	ldr	r3, [sp, #12]
    2246:	1e5a      	subs	r2, r3, #1
    2248:	9901      	ldr	r1, [sp, #4]
    224a:	4613      	mov	r3, r2
    224c:	009b      	lsls	r3, r3, #2
    224e:	4413      	add	r3, r2
    2250:	009b      	lsls	r3, r3, #2
    2252:	440b      	add	r3, r1
    2254:	332c      	adds	r3, #44	; 0x2c
    2256:	681a      	ldr	r2, [r3, #0]
    2258:	4914      	ldr	r1, [pc, #80]	; (22ac <Clock_Ip_ResetClockConfiguration+0x184>)
    225a:	4613      	mov	r3, r2
    225c:	00db      	lsls	r3, r3, #3
    225e:	4413      	add	r3, r2
    2260:	440b      	add	r3, r1
    2262:	3301      	adds	r3, #1
    2264:	781b      	ldrb	r3, [r3, #0]
    2266:	461a      	mov	r2, r3
    2268:	4b17      	ldr	r3, [pc, #92]	; (22c8 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    226a:	5c9b      	ldrb	r3, [r3, r2]
    226c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    226e:	4917      	ldr	r1, [pc, #92]	; (22cc <Clock_Ip_ResetClockConfiguration+0x1a4>)
    2270:	9a02      	ldr	r2, [sp, #8]
    2272:	4613      	mov	r3, r2
    2274:	009b      	lsls	r3, r3, #2
    2276:	4413      	add	r3, r2
    2278:	009b      	lsls	r3, r3, #2
    227a:	440b      	add	r3, r1
    227c:	6819      	ldr	r1, [r3, #0]
    227e:	9b03      	ldr	r3, [sp, #12]
    2280:	1e5a      	subs	r2, r3, #1
    2282:	4613      	mov	r3, r2
    2284:	009b      	lsls	r3, r3, #2
    2286:	4413      	add	r3, r2
    2288:	009b      	lsls	r3, r3, #2
    228a:	3328      	adds	r3, #40	; 0x28
    228c:	9a01      	ldr	r2, [sp, #4]
    228e:	4413      	add	r3, r2
    2290:	3304      	adds	r3, #4
    2292:	4618      	mov	r0, r3
    2294:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2296:	9b03      	ldr	r3, [sp, #12]
    2298:	3b01      	subs	r3, #1
    229a:	9303      	str	r3, [sp, #12]
    229c:	9b03      	ldr	r3, [sp, #12]
    229e:	2b00      	cmp	r3, #0
    22a0:	d1d0      	bne.n	2244 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    22a2:	bf00      	nop
    22a4:	bf00      	nop
    22a6:	b005      	add	sp, #20
    22a8:	f85d fb04 	ldr.w	pc, [sp], #4
    22ac:	0000f840 	.word	0x0000f840
    22b0:	0000f810 	.word	0x0000f810
    22b4:	0000fe78 	.word	0x0000fe78
    22b8:	0000f7f0 	.word	0x0000f7f0
    22bc:	0000fdbc 	.word	0x0000fdbc
    22c0:	0000f800 	.word	0x0000f800
    22c4:	0000fe4c 	.word	0x0000fe4c
    22c8:	0000f7c0 	.word	0x0000f7c0
    22cc:	0000fd94 	.word	0x0000fd94

000022d0 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    22d0:	b500      	push	{lr}
    22d2:	b085      	sub	sp, #20
    22d4:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    22d6:	2301      	movs	r3, #1
    22d8:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    22da:	9801      	ldr	r0, [sp, #4]
    22dc:	f000 f818 	bl	2310 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    22e0:	4b0a      	ldr	r3, [pc, #40]	; (230c <Clock_Ip_Init+0x3c>)
    22e2:	781b      	ldrb	r3, [r3, #0]
    22e4:	2b00      	cmp	r3, #0
    22e6:	d00a      	beq.n	22fe <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    22e8:	f000 fb74 	bl	29d4 <Clock_Ip_GetPllStatus>
    22ec:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    22ee:	9b02      	ldr	r3, [sp, #8]
    22f0:	2b00      	cmp	r3, #0
    22f2:	d106      	bne.n	2302 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    22f4:	f000 fbf2 	bl	2adc <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    22f8:	2300      	movs	r3, #0
    22fa:	9303      	str	r3, [sp, #12]
    22fc:	e001      	b.n	2302 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    22fe:	2300      	movs	r3, #0
    2300:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    2302:	9b03      	ldr	r3, [sp, #12]
}
    2304:	4618      	mov	r0, r3
    2306:	b005      	add	sp, #20
    2308:	f85d fb04 	ldr.w	pc, [sp], #4
    230c:	1fff8b58 	.word	0x1fff8b58

00002310 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2310:	b510      	push	{r4, lr}
    2312:	b084      	sub	sp, #16
    2314:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2316:	4a9f      	ldr	r2, [pc, #636]	; (2594 <Clock_Ip_InitClock+0x284>)
    2318:	9b01      	ldr	r3, [sp, #4]
    231a:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    231c:	2101      	movs	r1, #1
    231e:	9801      	ldr	r0, [sp, #4]
    2320:	f003 fa90 	bl	5844 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2324:	4b9b      	ldr	r3, [pc, #620]	; (2594 <Clock_Ip_InitClock+0x284>)
    2326:	681b      	ldr	r3, [r3, #0]
    2328:	2b00      	cmp	r3, #0
    232a:	d030      	beq.n	238e <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    232c:	2300      	movs	r3, #0
    232e:	9303      	str	r3, [sp, #12]
    2330:	e027      	b.n	2382 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2332:	9901      	ldr	r1, [sp, #4]
    2334:	9a03      	ldr	r2, [sp, #12]
    2336:	4613      	mov	r3, r2
    2338:	009b      	lsls	r3, r3, #2
    233a:	4413      	add	r3, r2
    233c:	009b      	lsls	r3, r3, #2
    233e:	440b      	add	r3, r1
    2340:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2344:	681a      	ldr	r2, [r3, #0]
    2346:	4994      	ldr	r1, [pc, #592]	; (2598 <Clock_Ip_InitClock+0x288>)
    2348:	4613      	mov	r3, r2
    234a:	00db      	lsls	r3, r3, #3
    234c:	4413      	add	r3, r2
    234e:	440b      	add	r3, r1
    2350:	3301      	adds	r3, #1
    2352:	781b      	ldrb	r3, [r3, #0]
    2354:	461a      	mov	r2, r3
    2356:	4b91      	ldr	r3, [pc, #580]	; (259c <Clock_Ip_InitClock+0x28c>)
    2358:	5c9b      	ldrb	r3, [r3, r2]
    235a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    235c:	4a90      	ldr	r2, [pc, #576]	; (25a0 <Clock_Ip_InitClock+0x290>)
    235e:	9b02      	ldr	r3, [sp, #8]
    2360:	011b      	lsls	r3, r3, #4
    2362:	4413      	add	r3, r2
    2364:	6819      	ldr	r1, [r3, #0]
    2366:	9a03      	ldr	r2, [sp, #12]
    2368:	4613      	mov	r3, r2
    236a:	009b      	lsls	r3, r3, #2
    236c:	4413      	add	r3, r2
    236e:	009b      	lsls	r3, r3, #2
    2370:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2374:	9a01      	ldr	r2, [sp, #4]
    2376:	4413      	add	r3, r2
    2378:	4618      	mov	r0, r3
    237a:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    237c:	9b03      	ldr	r3, [sp, #12]
    237e:	3301      	adds	r3, #1
    2380:	9303      	str	r3, [sp, #12]
    2382:	9b01      	ldr	r3, [sp, #4]
    2384:	7c9b      	ldrb	r3, [r3, #18]
    2386:	461a      	mov	r2, r3
    2388:	9b03      	ldr	r3, [sp, #12]
    238a:	4293      	cmp	r3, r2
    238c:	d3d1      	bcc.n	2332 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    238e:	9801      	ldr	r0, [sp, #4]
    2390:	f7ff feca 	bl	2128 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2394:	2300      	movs	r3, #0
    2396:	9303      	str	r3, [sp, #12]
    2398:	e029      	b.n	23ee <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    239a:	9901      	ldr	r1, [sp, #4]
    239c:	9a03      	ldr	r2, [sp, #12]
    239e:	4613      	mov	r3, r2
    23a0:	005b      	lsls	r3, r3, #1
    23a2:	4413      	add	r3, r2
    23a4:	009b      	lsls	r3, r3, #2
    23a6:	440b      	add	r3, r1
    23a8:	3314      	adds	r3, #20
    23aa:	681a      	ldr	r2, [r3, #0]
    23ac:	497a      	ldr	r1, [pc, #488]	; (2598 <Clock_Ip_InitClock+0x288>)
    23ae:	4613      	mov	r3, r2
    23b0:	00db      	lsls	r3, r3, #3
    23b2:	4413      	add	r3, r2
    23b4:	440b      	add	r3, r1
    23b6:	3301      	adds	r3, #1
    23b8:	781b      	ldrb	r3, [r3, #0]
    23ba:	461a      	mov	r2, r3
    23bc:	4b79      	ldr	r3, [pc, #484]	; (25a4 <Clock_Ip_InitClock+0x294>)
    23be:	5c9b      	ldrb	r3, [r3, r2]
    23c0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    23c2:	4979      	ldr	r1, [pc, #484]	; (25a8 <Clock_Ip_InitClock+0x298>)
    23c4:	9a02      	ldr	r2, [sp, #8]
    23c6:	4613      	mov	r3, r2
    23c8:	005b      	lsls	r3, r3, #1
    23ca:	4413      	add	r3, r2
    23cc:	009b      	lsls	r3, r3, #2
    23ce:	440b      	add	r3, r1
    23d0:	6819      	ldr	r1, [r3, #0]
    23d2:	9a03      	ldr	r2, [sp, #12]
    23d4:	4613      	mov	r3, r2
    23d6:	005b      	lsls	r3, r3, #1
    23d8:	4413      	add	r3, r2
    23da:	009b      	lsls	r3, r3, #2
    23dc:	3310      	adds	r3, #16
    23de:	9a01      	ldr	r2, [sp, #4]
    23e0:	4413      	add	r3, r2
    23e2:	3304      	adds	r3, #4
    23e4:	4618      	mov	r0, r3
    23e6:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    23e8:	9b03      	ldr	r3, [sp, #12]
    23ea:	3301      	adds	r3, #1
    23ec:	9303      	str	r3, [sp, #12]
    23ee:	9b01      	ldr	r3, [sp, #4]
    23f0:	7a1b      	ldrb	r3, [r3, #8]
    23f2:	461a      	mov	r2, r3
    23f4:	9b03      	ldr	r3, [sp, #12]
    23f6:	4293      	cmp	r3, r2
    23f8:	d3cf      	bcc.n	239a <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    23fa:	2300      	movs	r3, #0
    23fc:	9303      	str	r3, [sp, #12]
    23fe:	e02a      	b.n	2456 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2400:	9901      	ldr	r1, [sp, #4]
    2402:	9a03      	ldr	r2, [sp, #12]
    2404:	4613      	mov	r3, r2
    2406:	009b      	lsls	r3, r3, #2
    2408:	4413      	add	r3, r2
    240a:	009b      	lsls	r3, r3, #2
    240c:	440b      	add	r3, r1
    240e:	332c      	adds	r3, #44	; 0x2c
    2410:	681a      	ldr	r2, [r3, #0]
    2412:	4961      	ldr	r1, [pc, #388]	; (2598 <Clock_Ip_InitClock+0x288>)
    2414:	4613      	mov	r3, r2
    2416:	00db      	lsls	r3, r3, #3
    2418:	4413      	add	r3, r2
    241a:	440b      	add	r3, r1
    241c:	3301      	adds	r3, #1
    241e:	781b      	ldrb	r3, [r3, #0]
    2420:	461a      	mov	r2, r3
    2422:	4b62      	ldr	r3, [pc, #392]	; (25ac <Clock_Ip_InitClock+0x29c>)
    2424:	5c9b      	ldrb	r3, [r3, r2]
    2426:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2428:	4961      	ldr	r1, [pc, #388]	; (25b0 <Clock_Ip_InitClock+0x2a0>)
    242a:	9a02      	ldr	r2, [sp, #8]
    242c:	4613      	mov	r3, r2
    242e:	009b      	lsls	r3, r3, #2
    2430:	4413      	add	r3, r2
    2432:	009b      	lsls	r3, r3, #2
    2434:	440b      	add	r3, r1
    2436:	3304      	adds	r3, #4
    2438:	6819      	ldr	r1, [r3, #0]
    243a:	9a03      	ldr	r2, [sp, #12]
    243c:	4613      	mov	r3, r2
    243e:	009b      	lsls	r3, r3, #2
    2440:	4413      	add	r3, r2
    2442:	009b      	lsls	r3, r3, #2
    2444:	3328      	adds	r3, #40	; 0x28
    2446:	9a01      	ldr	r2, [sp, #4]
    2448:	4413      	add	r3, r2
    244a:	3304      	adds	r3, #4
    244c:	4618      	mov	r0, r3
    244e:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2450:	9b03      	ldr	r3, [sp, #12]
    2452:	3301      	adds	r3, #1
    2454:	9303      	str	r3, [sp, #12]
    2456:	9b01      	ldr	r3, [sp, #4]
    2458:	7a5b      	ldrb	r3, [r3, #9]
    245a:	461a      	mov	r2, r3
    245c:	9b03      	ldr	r3, [sp, #12]
    245e:	4293      	cmp	r3, r2
    2460:	d3ce      	bcc.n	2400 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    2462:	9801      	ldr	r0, [sp, #4]
    2464:	f7ff fdb0 	bl	1fc8 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2468:	2300      	movs	r3, #0
    246a:	9303      	str	r3, [sp, #12]
    246c:	e028      	b.n	24c0 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    246e:	9901      	ldr	r1, [sp, #4]
    2470:	9a03      	ldr	r2, [sp, #12]
    2472:	4613      	mov	r3, r2
    2474:	009b      	lsls	r3, r3, #2
    2476:	4413      	add	r3, r2
    2478:	009b      	lsls	r3, r3, #2
    247a:	440b      	add	r3, r1
    247c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2480:	681a      	ldr	r2, [r3, #0]
    2482:	4945      	ldr	r1, [pc, #276]	; (2598 <Clock_Ip_InitClock+0x288>)
    2484:	4613      	mov	r3, r2
    2486:	00db      	lsls	r3, r3, #3
    2488:	4413      	add	r3, r2
    248a:	440b      	add	r3, r1
    248c:	3301      	adds	r3, #1
    248e:	781b      	ldrb	r3, [r3, #0]
    2490:	461a      	mov	r2, r3
    2492:	4b48      	ldr	r3, [pc, #288]	; (25b4 <Clock_Ip_InitClock+0x2a4>)
    2494:	5c9b      	ldrb	r3, [r3, r2]
    2496:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2498:	4a47      	ldr	r2, [pc, #284]	; (25b8 <Clock_Ip_InitClock+0x2a8>)
    249a:	9b02      	ldr	r3, [sp, #8]
    249c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    24a0:	9a03      	ldr	r2, [sp, #12]
    24a2:	4613      	mov	r3, r2
    24a4:	009b      	lsls	r3, r3, #2
    24a6:	4413      	add	r3, r2
    24a8:	009b      	lsls	r3, r3, #2
    24aa:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    24ae:	9a01      	ldr	r2, [sp, #4]
    24b0:	4413      	add	r3, r2
    24b2:	3304      	adds	r3, #4
    24b4:	9903      	ldr	r1, [sp, #12]
    24b6:	4618      	mov	r0, r3
    24b8:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    24ba:	9b03      	ldr	r3, [sp, #12]
    24bc:	3301      	adds	r3, #1
    24be:	9303      	str	r3, [sp, #12]
    24c0:	9b01      	ldr	r3, [sp, #4]
    24c2:	7c5b      	ldrb	r3, [r3, #17]
    24c4:	461a      	mov	r2, r3
    24c6:	9b03      	ldr	r3, [sp, #12]
    24c8:	4293      	cmp	r3, r2
    24ca:	d3d0      	bcc.n	246e <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    24cc:	2300      	movs	r3, #0
    24ce:	9303      	str	r3, [sp, #12]
    24d0:	e026      	b.n	2520 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    24d2:	9901      	ldr	r1, [sp, #4]
    24d4:	9a03      	ldr	r2, [sp, #12]
    24d6:	4613      	mov	r3, r2
    24d8:	005b      	lsls	r3, r3, #1
    24da:	4413      	add	r3, r2
    24dc:	009b      	lsls	r3, r3, #2
    24de:	440b      	add	r3, r1
    24e0:	f503 730e 	add.w	r3, r3, #568	; 0x238
    24e4:	681a      	ldr	r2, [r3, #0]
    24e6:	492c      	ldr	r1, [pc, #176]	; (2598 <Clock_Ip_InitClock+0x288>)
    24e8:	4613      	mov	r3, r2
    24ea:	00db      	lsls	r3, r3, #3
    24ec:	4413      	add	r3, r2
    24ee:	440b      	add	r3, r1
    24f0:	3301      	adds	r3, #1
    24f2:	781b      	ldrb	r3, [r3, #0]
    24f4:	461a      	mov	r2, r3
    24f6:	4b31      	ldr	r3, [pc, #196]	; (25bc <Clock_Ip_InitClock+0x2ac>)
    24f8:	5c9b      	ldrb	r3, [r3, r2]
    24fa:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    24fc:	4a30      	ldr	r2, [pc, #192]	; (25c0 <Clock_Ip_InitClock+0x2b0>)
    24fe:	9b02      	ldr	r3, [sp, #8]
    2500:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2504:	9a03      	ldr	r2, [sp, #12]
    2506:	4613      	mov	r3, r2
    2508:	005b      	lsls	r3, r3, #1
    250a:	4413      	add	r3, r2
    250c:	009b      	lsls	r3, r3, #2
    250e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2512:	9a01      	ldr	r2, [sp, #4]
    2514:	4413      	add	r3, r2
    2516:	4618      	mov	r0, r3
    2518:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    251a:	9b03      	ldr	r3, [sp, #12]
    251c:	3301      	adds	r3, #1
    251e:	9303      	str	r3, [sp, #12]
    2520:	9b01      	ldr	r3, [sp, #4]
    2522:	7b5b      	ldrb	r3, [r3, #13]
    2524:	461a      	mov	r2, r3
    2526:	9b03      	ldr	r3, [sp, #12]
    2528:	4293      	cmp	r3, r2
    252a:	d3d2      	bcc.n	24d2 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    252c:	2300      	movs	r3, #0
    252e:	9303      	str	r3, [sp, #12]
    2530:	e026      	b.n	2580 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    2532:	9901      	ldr	r1, [sp, #4]
    2534:	9a03      	ldr	r2, [sp, #12]
    2536:	4613      	mov	r3, r2
    2538:	005b      	lsls	r3, r3, #1
    253a:	4413      	add	r3, r2
    253c:	009b      	lsls	r3, r3, #2
    253e:	440b      	add	r3, r1
    2540:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2544:	681a      	ldr	r2, [r3, #0]
    2546:	4914      	ldr	r1, [pc, #80]	; (2598 <Clock_Ip_InitClock+0x288>)
    2548:	4613      	mov	r3, r2
    254a:	00db      	lsls	r3, r3, #3
    254c:	4413      	add	r3, r2
    254e:	440b      	add	r3, r1
    2550:	3301      	adds	r3, #1
    2552:	781b      	ldrb	r3, [r3, #0]
    2554:	461a      	mov	r2, r3
    2556:	4b1b      	ldr	r3, [pc, #108]	; (25c4 <Clock_Ip_InitClock+0x2b4>)
    2558:	5c9b      	ldrb	r3, [r3, r2]
    255a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    255c:	4a1a      	ldr	r2, [pc, #104]	; (25c8 <Clock_Ip_InitClock+0x2b8>)
    255e:	9b02      	ldr	r3, [sp, #8]
    2560:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    2564:	9a03      	ldr	r2, [sp, #12]
    2566:	4613      	mov	r3, r2
    2568:	005b      	lsls	r3, r3, #1
    256a:	4413      	add	r3, r2
    256c:	009b      	lsls	r3, r3, #2
    256e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2572:	9a01      	ldr	r2, [sp, #4]
    2574:	4413      	add	r3, r2
    2576:	4618      	mov	r0, r3
    2578:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    257a:	9b03      	ldr	r3, [sp, #12]
    257c:	3301      	adds	r3, #1
    257e:	9303      	str	r3, [sp, #12]
    2580:	9b01      	ldr	r3, [sp, #4]
    2582:	7b1b      	ldrb	r3, [r3, #12]
    2584:	461a      	mov	r2, r3
    2586:	9b03      	ldr	r3, [sp, #12]
    2588:	4293      	cmp	r3, r2
    258a:	d3d2      	bcc.n	2532 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    258c:	2300      	movs	r3, #0
    258e:	9303      	str	r3, [sp, #12]
    2590:	e044      	b.n	261c <Clock_Ip_InitClock+0x30c>
    2592:	bf00      	nop
    2594:	1fff8b50 	.word	0x1fff8b50
    2598:	0000f840 	.word	0x0000f840
    259c:	0000f830 	.word	0x0000f830
    25a0:	0000fe3c 	.word	0x0000fe3c
    25a4:	0000f7d0 	.word	0x0000f7d0
    25a8:	0000fe00 	.word	0x0000fe00
    25ac:	0000f7c0 	.word	0x0000f7c0
    25b0:	0000fd94 	.word	0x0000fd94
    25b4:	0000f820 	.word	0x0000f820
    25b8:	0000fe74 	.word	0x0000fe74
    25bc:	0000f7b0 	.word	0x0000f7b0
    25c0:	0000fd8c 	.word	0x0000fd8c
    25c4:	0000f7a0 	.word	0x0000f7a0
    25c8:	0000fd50 	.word	0x0000fd50
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    25cc:	9901      	ldr	r1, [sp, #4]
    25ce:	9a03      	ldr	r2, [sp, #12]
    25d0:	4613      	mov	r3, r2
    25d2:	005b      	lsls	r3, r3, #1
    25d4:	4413      	add	r3, r2
    25d6:	009b      	lsls	r3, r3, #2
    25d8:	440b      	add	r3, r1
    25da:	f503 730e 	add.w	r3, r3, #568	; 0x238
    25de:	681a      	ldr	r2, [r3, #0]
    25e0:	49ac      	ldr	r1, [pc, #688]	; (2894 <Clock_Ip_InitClock+0x584>)
    25e2:	4613      	mov	r3, r2
    25e4:	00db      	lsls	r3, r3, #3
    25e6:	4413      	add	r3, r2
    25e8:	440b      	add	r3, r1
    25ea:	3301      	adds	r3, #1
    25ec:	781b      	ldrb	r3, [r3, #0]
    25ee:	461a      	mov	r2, r3
    25f0:	4ba9      	ldr	r3, [pc, #676]	; (2898 <Clock_Ip_InitClock+0x588>)
    25f2:	5c9b      	ldrb	r3, [r3, r2]
    25f4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    25f6:	4aa9      	ldr	r2, [pc, #676]	; (289c <Clock_Ip_InitClock+0x58c>)
    25f8:	9b02      	ldr	r3, [sp, #8]
    25fa:	00db      	lsls	r3, r3, #3
    25fc:	4413      	add	r3, r2
    25fe:	6859      	ldr	r1, [r3, #4]
    2600:	9a03      	ldr	r2, [sp, #12]
    2602:	4613      	mov	r3, r2
    2604:	005b      	lsls	r3, r3, #1
    2606:	4413      	add	r3, r2
    2608:	009b      	lsls	r3, r3, #2
    260a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    260e:	9a01      	ldr	r2, [sp, #4]
    2610:	4413      	add	r3, r2
    2612:	4618      	mov	r0, r3
    2614:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2616:	9b03      	ldr	r3, [sp, #12]
    2618:	3301      	adds	r3, #1
    261a:	9303      	str	r3, [sp, #12]
    261c:	9b01      	ldr	r3, [sp, #4]
    261e:	7b5b      	ldrb	r3, [r3, #13]
    2620:	461a      	mov	r2, r3
    2622:	9b03      	ldr	r3, [sp, #12]
    2624:	4293      	cmp	r3, r2
    2626:	d3d1      	bcc.n	25cc <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2628:	2300      	movs	r3, #0
    262a:	9303      	str	r3, [sp, #12]
    262c:	e029      	b.n	2682 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    262e:	9901      	ldr	r1, [sp, #4]
    2630:	9a03      	ldr	r2, [sp, #12]
    2632:	4613      	mov	r3, r2
    2634:	009b      	lsls	r3, r3, #2
    2636:	4413      	add	r3, r2
    2638:	00db      	lsls	r3, r3, #3
    263a:	440b      	add	r3, r1
    263c:	3340      	adds	r3, #64	; 0x40
    263e:	681a      	ldr	r2, [r3, #0]
    2640:	4994      	ldr	r1, [pc, #592]	; (2894 <Clock_Ip_InitClock+0x584>)
    2642:	4613      	mov	r3, r2
    2644:	00db      	lsls	r3, r3, #3
    2646:	4413      	add	r3, r2
    2648:	440b      	add	r3, r1
    264a:	3301      	adds	r3, #1
    264c:	781b      	ldrb	r3, [r3, #0]
    264e:	461a      	mov	r2, r3
    2650:	4b93      	ldr	r3, [pc, #588]	; (28a0 <Clock_Ip_InitClock+0x590>)
    2652:	5c9b      	ldrb	r3, [r3, r2]
    2654:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    2656:	4993      	ldr	r1, [pc, #588]	; (28a4 <Clock_Ip_InitClock+0x594>)
    2658:	9a02      	ldr	r2, [sp, #8]
    265a:	4613      	mov	r3, r2
    265c:	009b      	lsls	r3, r3, #2
    265e:	4413      	add	r3, r2
    2660:	009b      	lsls	r3, r3, #2
    2662:	440b      	add	r3, r1
    2664:	3304      	adds	r3, #4
    2666:	6819      	ldr	r1, [r3, #0]
    2668:	9a03      	ldr	r2, [sp, #12]
    266a:	4613      	mov	r3, r2
    266c:	009b      	lsls	r3, r3, #2
    266e:	4413      	add	r3, r2
    2670:	00db      	lsls	r3, r3, #3
    2672:	3340      	adds	r3, #64	; 0x40
    2674:	9a01      	ldr	r2, [sp, #4]
    2676:	4413      	add	r3, r2
    2678:	4618      	mov	r0, r3
    267a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    267c:	9b03      	ldr	r3, [sp, #12]
    267e:	3301      	adds	r3, #1
    2680:	9303      	str	r3, [sp, #12]
    2682:	9b01      	ldr	r3, [sp, #4]
    2684:	7a9b      	ldrb	r3, [r3, #10]
    2686:	461a      	mov	r2, r3
    2688:	9b03      	ldr	r3, [sp, #12]
    268a:	4293      	cmp	r3, r2
    268c:	d3cf      	bcc.n	262e <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    268e:	2300      	movs	r3, #0
    2690:	9303      	str	r3, [sp, #12]
    2692:	e029      	b.n	26e8 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2694:	9901      	ldr	r1, [sp, #4]
    2696:	9a03      	ldr	r2, [sp, #12]
    2698:	4613      	mov	r3, r2
    269a:	009b      	lsls	r3, r3, #2
    269c:	4413      	add	r3, r2
    269e:	009b      	lsls	r3, r3, #2
    26a0:	440b      	add	r3, r1
    26a2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    26a6:	681a      	ldr	r2, [r3, #0]
    26a8:	497a      	ldr	r1, [pc, #488]	; (2894 <Clock_Ip_InitClock+0x584>)
    26aa:	4613      	mov	r3, r2
    26ac:	00db      	lsls	r3, r3, #3
    26ae:	4413      	add	r3, r2
    26b0:	440b      	add	r3, r1
    26b2:	3301      	adds	r3, #1
    26b4:	781b      	ldrb	r3, [r3, #0]
    26b6:	461a      	mov	r2, r3
    26b8:	4b7b      	ldr	r3, [pc, #492]	; (28a8 <Clock_Ip_InitClock+0x598>)
    26ba:	5c9b      	ldrb	r3, [r3, r2]
    26bc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    26be:	4a7b      	ldr	r2, [pc, #492]	; (28ac <Clock_Ip_InitClock+0x59c>)
    26c0:	9b02      	ldr	r3, [sp, #8]
    26c2:	011b      	lsls	r3, r3, #4
    26c4:	4413      	add	r3, r2
    26c6:	3304      	adds	r3, #4
    26c8:	681c      	ldr	r4, [r3, #0]
    26ca:	9a03      	ldr	r2, [sp, #12]
    26cc:	4613      	mov	r3, r2
    26ce:	009b      	lsls	r3, r3, #2
    26d0:	4413      	add	r3, r2
    26d2:	009b      	lsls	r3, r3, #2
    26d4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    26d8:	9a01      	ldr	r2, [sp, #4]
    26da:	4413      	add	r3, r2
    26dc:	9903      	ldr	r1, [sp, #12]
    26de:	4618      	mov	r0, r3
    26e0:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    26e2:	9b03      	ldr	r3, [sp, #12]
    26e4:	3301      	adds	r3, #1
    26e6:	9303      	str	r3, [sp, #12]
    26e8:	9b01      	ldr	r3, [sp, #4]
    26ea:	7c9b      	ldrb	r3, [r3, #18]
    26ec:	461a      	mov	r2, r3
    26ee:	9b03      	ldr	r3, [sp, #12]
    26f0:	4293      	cmp	r3, r2
    26f2:	d3cf      	bcc.n	2694 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    26f4:	2300      	movs	r3, #0
    26f6:	9303      	str	r3, [sp, #12]
    26f8:	e02a      	b.n	2750 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    26fa:	9901      	ldr	r1, [sp, #4]
    26fc:	9a03      	ldr	r2, [sp, #12]
    26fe:	4613      	mov	r3, r2
    2700:	009b      	lsls	r3, r3, #2
    2702:	4413      	add	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	440b      	add	r3, r1
    2708:	332c      	adds	r3, #44	; 0x2c
    270a:	681a      	ldr	r2, [r3, #0]
    270c:	4961      	ldr	r1, [pc, #388]	; (2894 <Clock_Ip_InitClock+0x584>)
    270e:	4613      	mov	r3, r2
    2710:	00db      	lsls	r3, r3, #3
    2712:	4413      	add	r3, r2
    2714:	440b      	add	r3, r1
    2716:	3301      	adds	r3, #1
    2718:	781b      	ldrb	r3, [r3, #0]
    271a:	461a      	mov	r2, r3
    271c:	4b64      	ldr	r3, [pc, #400]	; (28b0 <Clock_Ip_InitClock+0x5a0>)
    271e:	5c9b      	ldrb	r3, [r3, r2]
    2720:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    2722:	4964      	ldr	r1, [pc, #400]	; (28b4 <Clock_Ip_InitClock+0x5a4>)
    2724:	9a02      	ldr	r2, [sp, #8]
    2726:	4613      	mov	r3, r2
    2728:	009b      	lsls	r3, r3, #2
    272a:	4413      	add	r3, r2
    272c:	009b      	lsls	r3, r3, #2
    272e:	440b      	add	r3, r1
    2730:	3308      	adds	r3, #8
    2732:	6819      	ldr	r1, [r3, #0]
    2734:	9a03      	ldr	r2, [sp, #12]
    2736:	4613      	mov	r3, r2
    2738:	009b      	lsls	r3, r3, #2
    273a:	4413      	add	r3, r2
    273c:	009b      	lsls	r3, r3, #2
    273e:	3328      	adds	r3, #40	; 0x28
    2740:	9a01      	ldr	r2, [sp, #4]
    2742:	4413      	add	r3, r2
    2744:	3304      	adds	r3, #4
    2746:	4618      	mov	r0, r3
    2748:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    274a:	9b03      	ldr	r3, [sp, #12]
    274c:	3301      	adds	r3, #1
    274e:	9303      	str	r3, [sp, #12]
    2750:	9b01      	ldr	r3, [sp, #4]
    2752:	7a5b      	ldrb	r3, [r3, #9]
    2754:	461a      	mov	r2, r3
    2756:	9b03      	ldr	r3, [sp, #12]
    2758:	4293      	cmp	r3, r2
    275a:	d3ce      	bcc.n	26fa <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    275c:	2300      	movs	r3, #0
    275e:	9303      	str	r3, [sp, #12]
    2760:	e029      	b.n	27b6 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2762:	9901      	ldr	r1, [sp, #4]
    2764:	9a03      	ldr	r2, [sp, #12]
    2766:	4613      	mov	r3, r2
    2768:	009b      	lsls	r3, r3, #2
    276a:	4413      	add	r3, r2
    276c:	00db      	lsls	r3, r3, #3
    276e:	440b      	add	r3, r1
    2770:	3340      	adds	r3, #64	; 0x40
    2772:	681a      	ldr	r2, [r3, #0]
    2774:	4947      	ldr	r1, [pc, #284]	; (2894 <Clock_Ip_InitClock+0x584>)
    2776:	4613      	mov	r3, r2
    2778:	00db      	lsls	r3, r3, #3
    277a:	4413      	add	r3, r2
    277c:	440b      	add	r3, r1
    277e:	3301      	adds	r3, #1
    2780:	781b      	ldrb	r3, [r3, #0]
    2782:	461a      	mov	r2, r3
    2784:	4b46      	ldr	r3, [pc, #280]	; (28a0 <Clock_Ip_InitClock+0x590>)
    2786:	5c9b      	ldrb	r3, [r3, r2]
    2788:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    278a:	4946      	ldr	r1, [pc, #280]	; (28a4 <Clock_Ip_InitClock+0x594>)
    278c:	9a02      	ldr	r2, [sp, #8]
    278e:	4613      	mov	r3, r2
    2790:	009b      	lsls	r3, r3, #2
    2792:	4413      	add	r3, r2
    2794:	009b      	lsls	r3, r3, #2
    2796:	440b      	add	r3, r1
    2798:	330c      	adds	r3, #12
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	9a03      	ldr	r2, [sp, #12]
    279e:	4613      	mov	r3, r2
    27a0:	009b      	lsls	r3, r3, #2
    27a2:	4413      	add	r3, r2
    27a4:	00db      	lsls	r3, r3, #3
    27a6:	3340      	adds	r3, #64	; 0x40
    27a8:	9a01      	ldr	r2, [sp, #4]
    27aa:	4413      	add	r3, r2
    27ac:	4618      	mov	r0, r3
    27ae:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    27b0:	9b03      	ldr	r3, [sp, #12]
    27b2:	3301      	adds	r3, #1
    27b4:	9303      	str	r3, [sp, #12]
    27b6:	9b01      	ldr	r3, [sp, #4]
    27b8:	7a9b      	ldrb	r3, [r3, #10]
    27ba:	461a      	mov	r2, r3
    27bc:	9b03      	ldr	r3, [sp, #12]
    27be:	4293      	cmp	r3, r2
    27c0:	d3cf      	bcc.n	2762 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    27c2:	2300      	movs	r3, #0
    27c4:	9303      	str	r3, [sp, #12]
    27c6:	e025      	b.n	2814 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    27c8:	9a01      	ldr	r2, [sp, #4]
    27ca:	9b03      	ldr	r3, [sp, #12]
    27cc:	3324      	adds	r3, #36	; 0x24
    27ce:	011b      	lsls	r3, r3, #4
    27d0:	4413      	add	r3, r2
    27d2:	3304      	adds	r3, #4
    27d4:	681a      	ldr	r2, [r3, #0]
    27d6:	492f      	ldr	r1, [pc, #188]	; (2894 <Clock_Ip_InitClock+0x584>)
    27d8:	4613      	mov	r3, r2
    27da:	00db      	lsls	r3, r3, #3
    27dc:	4413      	add	r3, r2
    27de:	440b      	add	r3, r1
    27e0:	3301      	adds	r3, #1
    27e2:	781b      	ldrb	r3, [r3, #0]
    27e4:	461a      	mov	r2, r3
    27e6:	4b34      	ldr	r3, [pc, #208]	; (28b8 <Clock_Ip_InitClock+0x5a8>)
    27e8:	5c9b      	ldrb	r3, [r3, r2]
    27ea:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    27ec:	4933      	ldr	r1, [pc, #204]	; (28bc <Clock_Ip_InitClock+0x5ac>)
    27ee:	9a02      	ldr	r2, [sp, #8]
    27f0:	4613      	mov	r3, r2
    27f2:	005b      	lsls	r3, r3, #1
    27f4:	4413      	add	r3, r2
    27f6:	009b      	lsls	r3, r3, #2
    27f8:	440b      	add	r3, r1
    27fa:	3304      	adds	r3, #4
    27fc:	681b      	ldr	r3, [r3, #0]
    27fe:	9a03      	ldr	r2, [sp, #12]
    2800:	3224      	adds	r2, #36	; 0x24
    2802:	0112      	lsls	r2, r2, #4
    2804:	9901      	ldr	r1, [sp, #4]
    2806:	440a      	add	r2, r1
    2808:	3204      	adds	r2, #4
    280a:	4610      	mov	r0, r2
    280c:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    280e:	9b03      	ldr	r3, [sp, #12]
    2810:	3301      	adds	r3, #1
    2812:	9303      	str	r3, [sp, #12]
    2814:	9b01      	ldr	r3, [sp, #4]
    2816:	7b9b      	ldrb	r3, [r3, #14]
    2818:	461a      	mov	r2, r3
    281a:	9b03      	ldr	r3, [sp, #12]
    281c:	4293      	cmp	r3, r2
    281e:	d3d3      	bcc.n	27c8 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2820:	4b27      	ldr	r3, [pc, #156]	; (28c0 <Clock_Ip_InitClock+0x5b0>)
    2822:	2200      	movs	r2, #0
    2824:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    2826:	4b26      	ldr	r3, [pc, #152]	; (28c0 <Clock_Ip_InitClock+0x5b0>)
    2828:	2200      	movs	r2, #0
    282a:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    282c:	4b24      	ldr	r3, [pc, #144]	; (28c0 <Clock_Ip_InitClock+0x5b0>)
    282e:	2201      	movs	r2, #1
    2830:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    2832:	4b23      	ldr	r3, [pc, #140]	; (28c0 <Clock_Ip_InitClock+0x5b0>)
    2834:	2200      	movs	r2, #0
    2836:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    2838:	f000 fa9c 	bl	2d74 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    283c:	2300      	movs	r3, #0
    283e:	9303      	str	r3, [sp, #12]
    2840:	e04c      	b.n	28dc <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    2842:	9a01      	ldr	r2, [sp, #4]
    2844:	9b03      	ldr	r3, [sp, #12]
    2846:	330d      	adds	r3, #13
    2848:	00db      	lsls	r3, r3, #3
    284a:	4413      	add	r3, r2
    284c:	685b      	ldr	r3, [r3, #4]
    284e:	4a1d      	ldr	r2, [pc, #116]	; (28c4 <Clock_Ip_InitClock+0x5b4>)
    2850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2854:	2b03      	cmp	r3, #3
    2856:	d03b      	beq.n	28d0 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2858:	9b01      	ldr	r3, [sp, #4]
    285a:	9a03      	ldr	r2, [sp, #12]
    285c:	320d      	adds	r2, #13
    285e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2862:	490c      	ldr	r1, [pc, #48]	; (2894 <Clock_Ip_InitClock+0x584>)
    2864:	4613      	mov	r3, r2
    2866:	00db      	lsls	r3, r3, #3
    2868:	4413      	add	r3, r2
    286a:	440b      	add	r3, r1
    286c:	3301      	adds	r3, #1
    286e:	781b      	ldrb	r3, [r3, #0]
    2870:	461a      	mov	r2, r3
    2872:	4b15      	ldr	r3, [pc, #84]	; (28c8 <Clock_Ip_InitClock+0x5b8>)
    2874:	5c9b      	ldrb	r3, [r3, r2]
    2876:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    2878:	4a14      	ldr	r2, [pc, #80]	; (28cc <Clock_Ip_InitClock+0x5bc>)
    287a:	9b02      	ldr	r3, [sp, #8]
    287c:	00db      	lsls	r3, r3, #3
    287e:	4413      	add	r3, r2
    2880:	685b      	ldr	r3, [r3, #4]
    2882:	9a03      	ldr	r2, [sp, #12]
    2884:	320d      	adds	r2, #13
    2886:	00d2      	lsls	r2, r2, #3
    2888:	9901      	ldr	r1, [sp, #4]
    288a:	440a      	add	r2, r1
    288c:	4610      	mov	r0, r2
    288e:	4798      	blx	r3
    2890:	e021      	b.n	28d6 <Clock_Ip_InitClock+0x5c6>
    2892:	bf00      	nop
    2894:	0000f840 	.word	0x0000f840
    2898:	0000f7b0 	.word	0x0000f7b0
    289c:	0000fd8c 	.word	0x0000fd8c
    28a0:	0000f800 	.word	0x0000f800
    28a4:	0000fe4c 	.word	0x0000fe4c
    28a8:	0000f830 	.word	0x0000f830
    28ac:	0000fe3c 	.word	0x0000fe3c
    28b0:	0000f7c0 	.word	0x0000f7c0
    28b4:	0000fd94 	.word	0x0000fd94
    28b8:	0000f7f0 	.word	0x0000f7f0
    28bc:	0000fdbc 	.word	0x0000fdbc
    28c0:	1fff8b58 	.word	0x1fff8b58
    28c4:	0000fc8c 	.word	0x0000fc8c
    28c8:	0000f810 	.word	0x0000f810
    28cc:	0000fe78 	.word	0x0000fe78
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    28d0:	4b3a      	ldr	r3, [pc, #232]	; (29bc <Clock_Ip_InitClock+0x6ac>)
    28d2:	2201      	movs	r2, #1
    28d4:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    28d6:	9b03      	ldr	r3, [sp, #12]
    28d8:	3301      	adds	r3, #1
    28da:	9303      	str	r3, [sp, #12]
    28dc:	9b01      	ldr	r3, [sp, #4]
    28de:	7adb      	ldrb	r3, [r3, #11]
    28e0:	461a      	mov	r2, r3
    28e2:	9b03      	ldr	r3, [sp, #12]
    28e4:	4293      	cmp	r3, r2
    28e6:	d3ac      	bcc.n	2842 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    28e8:	4b34      	ldr	r3, [pc, #208]	; (29bc <Clock_Ip_InitClock+0x6ac>)
    28ea:	781b      	ldrb	r3, [r3, #0]
    28ec:	f083 0301 	eor.w	r3, r3, #1
    28f0:	b2db      	uxtb	r3, r3
    28f2:	2b00      	cmp	r3, #0
    28f4:	d05e      	beq.n	29b4 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    28f6:	2300      	movs	r3, #0
    28f8:	9303      	str	r3, [sp, #12]
    28fa:	e01f      	b.n	293c <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    28fc:	9a01      	ldr	r2, [sp, #4]
    28fe:	9b03      	ldr	r3, [sp, #12]
    2900:	334e      	adds	r3, #78	; 0x4e
    2902:	00db      	lsls	r3, r3, #3
    2904:	4413      	add	r3, r2
    2906:	685a      	ldr	r2, [r3, #4]
    2908:	492d      	ldr	r1, [pc, #180]	; (29c0 <Clock_Ip_InitClock+0x6b0>)
    290a:	4613      	mov	r3, r2
    290c:	00db      	lsls	r3, r3, #3
    290e:	4413      	add	r3, r2
    2910:	440b      	add	r3, r1
    2912:	3301      	adds	r3, #1
    2914:	781b      	ldrb	r3, [r3, #0]
    2916:	461a      	mov	r2, r3
    2918:	4b2a      	ldr	r3, [pc, #168]	; (29c4 <Clock_Ip_InitClock+0x6b4>)
    291a:	5c9b      	ldrb	r3, [r3, r2]
    291c:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    291e:	4a2a      	ldr	r2, [pc, #168]	; (29c8 <Clock_Ip_InitClock+0x6b8>)
    2920:	9b02      	ldr	r3, [sp, #8]
    2922:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2926:	9a03      	ldr	r2, [sp, #12]
    2928:	324e      	adds	r2, #78	; 0x4e
    292a:	00d2      	lsls	r2, r2, #3
    292c:	9901      	ldr	r1, [sp, #4]
    292e:	440a      	add	r2, r1
    2930:	3204      	adds	r2, #4
    2932:	4610      	mov	r0, r2
    2934:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2936:	9b03      	ldr	r3, [sp, #12]
    2938:	3301      	adds	r3, #1
    293a:	9303      	str	r3, [sp, #12]
    293c:	9b01      	ldr	r3, [sp, #4]
    293e:	7c1b      	ldrb	r3, [r3, #16]
    2940:	461a      	mov	r2, r3
    2942:	9b03      	ldr	r3, [sp, #12]
    2944:	4293      	cmp	r3, r2
    2946:	d3d9      	bcc.n	28fc <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2948:	2300      	movs	r3, #0
    294a:	9303      	str	r3, [sp, #12]
    294c:	e028      	b.n	29a0 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    294e:	9901      	ldr	r1, [sp, #4]
    2950:	9a03      	ldr	r2, [sp, #12]
    2952:	4613      	mov	r3, r2
    2954:	009b      	lsls	r3, r3, #2
    2956:	4413      	add	r3, r2
    2958:	009b      	lsls	r3, r3, #2
    295a:	440b      	add	r3, r1
    295c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2960:	681a      	ldr	r2, [r3, #0]
    2962:	4917      	ldr	r1, [pc, #92]	; (29c0 <Clock_Ip_InitClock+0x6b0>)
    2964:	4613      	mov	r3, r2
    2966:	00db      	lsls	r3, r3, #3
    2968:	4413      	add	r3, r2
    296a:	440b      	add	r3, r1
    296c:	3301      	adds	r3, #1
    296e:	781b      	ldrb	r3, [r3, #0]
    2970:	461a      	mov	r2, r3
    2972:	4b16      	ldr	r3, [pc, #88]	; (29cc <Clock_Ip_InitClock+0x6bc>)
    2974:	5c9b      	ldrb	r3, [r3, r2]
    2976:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2978:	4a15      	ldr	r2, [pc, #84]	; (29d0 <Clock_Ip_InitClock+0x6c0>)
    297a:	9b02      	ldr	r3, [sp, #8]
    297c:	011b      	lsls	r3, r3, #4
    297e:	4413      	add	r3, r2
    2980:	330c      	adds	r3, #12
    2982:	6819      	ldr	r1, [r3, #0]
    2984:	9a03      	ldr	r2, [sp, #12]
    2986:	4613      	mov	r3, r2
    2988:	009b      	lsls	r3, r3, #2
    298a:	4413      	add	r3, r2
    298c:	009b      	lsls	r3, r3, #2
    298e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2992:	9a01      	ldr	r2, [sp, #4]
    2994:	4413      	add	r3, r2
    2996:	4618      	mov	r0, r3
    2998:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    299a:	9b03      	ldr	r3, [sp, #12]
    299c:	3301      	adds	r3, #1
    299e:	9303      	str	r3, [sp, #12]
    29a0:	9b01      	ldr	r3, [sp, #4]
    29a2:	7c9b      	ldrb	r3, [r3, #18]
    29a4:	461a      	mov	r2, r3
    29a6:	9b03      	ldr	r3, [sp, #12]
    29a8:	4293      	cmp	r3, r2
    29aa:	d3d0      	bcc.n	294e <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    29ac:	2104      	movs	r1, #4
    29ae:	9801      	ldr	r0, [sp, #4]
    29b0:	f002 ff48 	bl	5844 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    29b4:	bf00      	nop
    29b6:	b004      	add	sp, #16
    29b8:	bd10      	pop	{r4, pc}
    29ba:	bf00      	nop
    29bc:	1fff8b58 	.word	0x1fff8b58
    29c0:	0000f840 	.word	0x0000f840
    29c4:	0000f7e0 	.word	0x0000f7e0
    29c8:	0000fdc8 	.word	0x0000fdc8
    29cc:	0000f830 	.word	0x0000f830
    29d0:	0000fe3c 	.word	0x0000fe3c

000029d4 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    29d4:	b500      	push	{lr}
    29d6:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    29d8:	2302      	movs	r3, #2
    29da:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    29dc:	2300      	movs	r3, #0
    29de:	9304      	str	r3, [sp, #16]
    29e0:	e02c      	b.n	2a3c <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    29e2:	4a36      	ldr	r2, [pc, #216]	; (2abc <Clock_Ip_GetPllStatus+0xe8>)
    29e4:	9b04      	ldr	r3, [sp, #16]
    29e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    29ea:	4935      	ldr	r1, [pc, #212]	; (2ac0 <Clock_Ip_GetPllStatus+0xec>)
    29ec:	4613      	mov	r3, r2
    29ee:	00db      	lsls	r3, r3, #3
    29f0:	4413      	add	r3, r2
    29f2:	440b      	add	r3, r1
    29f4:	3301      	adds	r3, #1
    29f6:	781b      	ldrb	r3, [r3, #0]
    29f8:	461a      	mov	r2, r3
    29fa:	4b32      	ldr	r3, [pc, #200]	; (2ac4 <Clock_Ip_GetPllStatus+0xf0>)
    29fc:	5c9b      	ldrb	r3, [r3, r2]
    29fe:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2a00:	4931      	ldr	r1, [pc, #196]	; (2ac8 <Clock_Ip_GetPllStatus+0xf4>)
    2a02:	9a03      	ldr	r2, [sp, #12]
    2a04:	4613      	mov	r3, r2
    2a06:	009b      	lsls	r3, r3, #2
    2a08:	4413      	add	r3, r2
    2a0a:	009b      	lsls	r3, r3, #2
    2a0c:	440b      	add	r3, r1
    2a0e:	3308      	adds	r3, #8
    2a10:	681b      	ldr	r3, [r3, #0]
    2a12:	492a      	ldr	r1, [pc, #168]	; (2abc <Clock_Ip_GetPllStatus+0xe8>)
    2a14:	9a04      	ldr	r2, [sp, #16]
    2a16:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2a1a:	4610      	mov	r0, r2
    2a1c:	4798      	blx	r3
    2a1e:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2a20:	9b02      	ldr	r3, [sp, #8]
    2a22:	2b01      	cmp	r3, #1
    2a24:	d102      	bne.n	2a2c <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2a26:	2301      	movs	r3, #1
    2a28:	9305      	str	r3, [sp, #20]
            break;
    2a2a:	e00d      	b.n	2a48 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2a2c:	9b02      	ldr	r3, [sp, #8]
    2a2e:	2b02      	cmp	r3, #2
    2a30:	d101      	bne.n	2a36 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2a32:	2300      	movs	r3, #0
    2a34:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2a36:	9b04      	ldr	r3, [sp, #16]
    2a38:	3301      	adds	r3, #1
    2a3a:	9304      	str	r3, [sp, #16]
    2a3c:	4b23      	ldr	r3, [pc, #140]	; (2acc <Clock_Ip_GetPllStatus+0xf8>)
    2a3e:	789b      	ldrb	r3, [r3, #2]
    2a40:	461a      	mov	r2, r3
    2a42:	9b04      	ldr	r3, [sp, #16]
    2a44:	4293      	cmp	r3, r2
    2a46:	d3cc      	bcc.n	29e2 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2a48:	9b05      	ldr	r3, [sp, #20]
    2a4a:	2b00      	cmp	r3, #0
    2a4c:	d130      	bne.n	2ab0 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2a4e:	2300      	movs	r3, #0
    2a50:	9304      	str	r3, [sp, #16]
    2a52:	e027      	b.n	2aa4 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2a54:	4a1e      	ldr	r2, [pc, #120]	; (2ad0 <Clock_Ip_GetPllStatus+0xfc>)
    2a56:	9b04      	ldr	r3, [sp, #16]
    2a58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2a5c:	4918      	ldr	r1, [pc, #96]	; (2ac0 <Clock_Ip_GetPllStatus+0xec>)
    2a5e:	4613      	mov	r3, r2
    2a60:	00db      	lsls	r3, r3, #3
    2a62:	4413      	add	r3, r2
    2a64:	440b      	add	r3, r1
    2a66:	3301      	adds	r3, #1
    2a68:	781b      	ldrb	r3, [r3, #0]
    2a6a:	461a      	mov	r2, r3
    2a6c:	4b19      	ldr	r3, [pc, #100]	; (2ad4 <Clock_Ip_GetPllStatus+0x100>)
    2a6e:	5c9b      	ldrb	r3, [r3, r2]
    2a70:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2a72:	4919      	ldr	r1, [pc, #100]	; (2ad8 <Clock_Ip_GetPllStatus+0x104>)
    2a74:	9a03      	ldr	r2, [sp, #12]
    2a76:	4613      	mov	r3, r2
    2a78:	005b      	lsls	r3, r3, #1
    2a7a:	4413      	add	r3, r2
    2a7c:	009b      	lsls	r3, r3, #2
    2a7e:	440b      	add	r3, r1
    2a80:	3308      	adds	r3, #8
    2a82:	681b      	ldr	r3, [r3, #0]
    2a84:	4912      	ldr	r1, [pc, #72]	; (2ad0 <Clock_Ip_GetPllStatus+0xfc>)
    2a86:	9a04      	ldr	r2, [sp, #16]
    2a88:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2a8c:	4610      	mov	r0, r2
    2a8e:	4798      	blx	r3
    2a90:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    2a92:	9b01      	ldr	r3, [sp, #4]
    2a94:	2b01      	cmp	r3, #1
    2a96:	d102      	bne.n	2a9e <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2a98:	2301      	movs	r3, #1
    2a9a:	9305      	str	r3, [sp, #20]
                break;
    2a9c:	e008      	b.n	2ab0 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2a9e:	9b04      	ldr	r3, [sp, #16]
    2aa0:	3301      	adds	r3, #1
    2aa2:	9304      	str	r3, [sp, #16]
    2aa4:	4b09      	ldr	r3, [pc, #36]	; (2acc <Clock_Ip_GetPllStatus+0xf8>)
    2aa6:	78db      	ldrb	r3, [r3, #3]
    2aa8:	461a      	mov	r2, r3
    2aaa:	9b04      	ldr	r3, [sp, #16]
    2aac:	4293      	cmp	r3, r2
    2aae:	d3d1      	bcc.n	2a54 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2ab0:	9b05      	ldr	r3, [sp, #20]
}
    2ab2:	4618      	mov	r0, r3
    2ab4:	b007      	add	sp, #28
    2ab6:	f85d fb04 	ldr.w	pc, [sp], #4
    2aba:	bf00      	nop
    2abc:	0000fd48 	.word	0x0000fd48
    2ac0:	0000f840 	.word	0x0000f840
    2ac4:	0000f800 	.word	0x0000f800
    2ac8:	0000fe4c 	.word	0x0000fe4c
    2acc:	1fff8b58 	.word	0x1fff8b58
    2ad0:	0000fd4c 	.word	0x0000fd4c
    2ad4:	0000f7f0 	.word	0x0000f7f0
    2ad8:	0000fdbc 	.word	0x0000fdbc

00002adc <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2adc:	b500      	push	{lr}
    2ade:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2ae0:	4b55      	ldr	r3, [pc, #340]	; (2c38 <Clock_Ip_DistributePll+0x15c>)
    2ae2:	681b      	ldr	r3, [r3, #0]
    2ae4:	2b00      	cmp	r3, #0
    2ae6:	f000 80a2 	beq.w	2c2e <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2aea:	2300      	movs	r3, #0
    2aec:	9301      	str	r3, [sp, #4]
    2aee:	e02c      	b.n	2b4a <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2af0:	4b51      	ldr	r3, [pc, #324]	; (2c38 <Clock_Ip_DistributePll+0x15c>)
    2af2:	681a      	ldr	r2, [r3, #0]
    2af4:	9b01      	ldr	r3, [sp, #4]
    2af6:	330d      	adds	r3, #13
    2af8:	00db      	lsls	r3, r3, #3
    2afa:	4413      	add	r3, r2
    2afc:	685b      	ldr	r3, [r3, #4]
    2afe:	4a4f      	ldr	r2, [pc, #316]	; (2c3c <Clock_Ip_DistributePll+0x160>)
    2b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2b04:	2b03      	cmp	r3, #3
    2b06:	d11d      	bne.n	2b44 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2b08:	4b4b      	ldr	r3, [pc, #300]	; (2c38 <Clock_Ip_DistributePll+0x15c>)
    2b0a:	681b      	ldr	r3, [r3, #0]
    2b0c:	9a01      	ldr	r2, [sp, #4]
    2b0e:	320d      	adds	r2, #13
    2b10:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2b14:	494a      	ldr	r1, [pc, #296]	; (2c40 <Clock_Ip_DistributePll+0x164>)
    2b16:	4613      	mov	r3, r2
    2b18:	00db      	lsls	r3, r3, #3
    2b1a:	4413      	add	r3, r2
    2b1c:	440b      	add	r3, r1
    2b1e:	3301      	adds	r3, #1
    2b20:	781b      	ldrb	r3, [r3, #0]
    2b22:	461a      	mov	r2, r3
    2b24:	4b47      	ldr	r3, [pc, #284]	; (2c44 <Clock_Ip_DistributePll+0x168>)
    2b26:	5c9b      	ldrb	r3, [r3, r2]
    2b28:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2b2a:	4a47      	ldr	r2, [pc, #284]	; (2c48 <Clock_Ip_DistributePll+0x16c>)
    2b2c:	9b00      	ldr	r3, [sp, #0]
    2b2e:	00db      	lsls	r3, r3, #3
    2b30:	4413      	add	r3, r2
    2b32:	685b      	ldr	r3, [r3, #4]
    2b34:	4a40      	ldr	r2, [pc, #256]	; (2c38 <Clock_Ip_DistributePll+0x15c>)
    2b36:	6811      	ldr	r1, [r2, #0]
    2b38:	9a01      	ldr	r2, [sp, #4]
    2b3a:	320d      	adds	r2, #13
    2b3c:	00d2      	lsls	r2, r2, #3
    2b3e:	440a      	add	r2, r1
    2b40:	4610      	mov	r0, r2
    2b42:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2b44:	9b01      	ldr	r3, [sp, #4]
    2b46:	3301      	adds	r3, #1
    2b48:	9301      	str	r3, [sp, #4]
    2b4a:	4b3b      	ldr	r3, [pc, #236]	; (2c38 <Clock_Ip_DistributePll+0x15c>)
    2b4c:	681b      	ldr	r3, [r3, #0]
    2b4e:	7adb      	ldrb	r3, [r3, #11]
    2b50:	461a      	mov	r2, r3
    2b52:	9b01      	ldr	r3, [sp, #4]
    2b54:	4293      	cmp	r3, r2
    2b56:	d3cb      	bcc.n	2af0 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2b58:	4b3c      	ldr	r3, [pc, #240]	; (2c4c <Clock_Ip_DistributePll+0x170>)
    2b5a:	781b      	ldrb	r3, [r3, #0]
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	d066      	beq.n	2c2e <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2b60:	2300      	movs	r3, #0
    2b62:	9301      	str	r3, [sp, #4]
    2b64:	e021      	b.n	2baa <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2b66:	4b34      	ldr	r3, [pc, #208]	; (2c38 <Clock_Ip_DistributePll+0x15c>)
    2b68:	681a      	ldr	r2, [r3, #0]
    2b6a:	9b01      	ldr	r3, [sp, #4]
    2b6c:	334e      	adds	r3, #78	; 0x4e
    2b6e:	00db      	lsls	r3, r3, #3
    2b70:	4413      	add	r3, r2
    2b72:	685a      	ldr	r2, [r3, #4]
    2b74:	4932      	ldr	r1, [pc, #200]	; (2c40 <Clock_Ip_DistributePll+0x164>)
    2b76:	4613      	mov	r3, r2
    2b78:	00db      	lsls	r3, r3, #3
    2b7a:	4413      	add	r3, r2
    2b7c:	440b      	add	r3, r1
    2b7e:	3301      	adds	r3, #1
    2b80:	781b      	ldrb	r3, [r3, #0]
    2b82:	461a      	mov	r2, r3
    2b84:	4b32      	ldr	r3, [pc, #200]	; (2c50 <Clock_Ip_DistributePll+0x174>)
    2b86:	5c9b      	ldrb	r3, [r3, r2]
    2b88:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2b8a:	4a32      	ldr	r2, [pc, #200]	; (2c54 <Clock_Ip_DistributePll+0x178>)
    2b8c:	9b00      	ldr	r3, [sp, #0]
    2b8e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2b92:	4a29      	ldr	r2, [pc, #164]	; (2c38 <Clock_Ip_DistributePll+0x15c>)
    2b94:	6811      	ldr	r1, [r2, #0]
    2b96:	9a01      	ldr	r2, [sp, #4]
    2b98:	324e      	adds	r2, #78	; 0x4e
    2b9a:	00d2      	lsls	r2, r2, #3
    2b9c:	440a      	add	r2, r1
    2b9e:	3204      	adds	r2, #4
    2ba0:	4610      	mov	r0, r2
    2ba2:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2ba4:	9b01      	ldr	r3, [sp, #4]
    2ba6:	3301      	adds	r3, #1
    2ba8:	9301      	str	r3, [sp, #4]
    2baa:	4b23      	ldr	r3, [pc, #140]	; (2c38 <Clock_Ip_DistributePll+0x15c>)
    2bac:	681b      	ldr	r3, [r3, #0]
    2bae:	7c1b      	ldrb	r3, [r3, #16]
    2bb0:	461a      	mov	r2, r3
    2bb2:	9b01      	ldr	r3, [sp, #4]
    2bb4:	4293      	cmp	r3, r2
    2bb6:	d3d6      	bcc.n	2b66 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2bb8:	2300      	movs	r3, #0
    2bba:	9301      	str	r3, [sp, #4]
    2bbc:	e02a      	b.n	2c14 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2bbe:	4b1e      	ldr	r3, [pc, #120]	; (2c38 <Clock_Ip_DistributePll+0x15c>)
    2bc0:	6819      	ldr	r1, [r3, #0]
    2bc2:	9a01      	ldr	r2, [sp, #4]
    2bc4:	4613      	mov	r3, r2
    2bc6:	009b      	lsls	r3, r3, #2
    2bc8:	4413      	add	r3, r2
    2bca:	009b      	lsls	r3, r3, #2
    2bcc:	440b      	add	r3, r1
    2bce:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2bd2:	681a      	ldr	r2, [r3, #0]
    2bd4:	491a      	ldr	r1, [pc, #104]	; (2c40 <Clock_Ip_DistributePll+0x164>)
    2bd6:	4613      	mov	r3, r2
    2bd8:	00db      	lsls	r3, r3, #3
    2bda:	4413      	add	r3, r2
    2bdc:	440b      	add	r3, r1
    2bde:	3301      	adds	r3, #1
    2be0:	781b      	ldrb	r3, [r3, #0]
    2be2:	461a      	mov	r2, r3
    2be4:	4b1c      	ldr	r3, [pc, #112]	; (2c58 <Clock_Ip_DistributePll+0x17c>)
    2be6:	5c9b      	ldrb	r3, [r3, r2]
    2be8:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2bea:	4a1c      	ldr	r2, [pc, #112]	; (2c5c <Clock_Ip_DistributePll+0x180>)
    2bec:	9b00      	ldr	r3, [sp, #0]
    2bee:	011b      	lsls	r3, r3, #4
    2bf0:	4413      	add	r3, r2
    2bf2:	330c      	adds	r3, #12
    2bf4:	6819      	ldr	r1, [r3, #0]
    2bf6:	4b10      	ldr	r3, [pc, #64]	; (2c38 <Clock_Ip_DistributePll+0x15c>)
    2bf8:	6818      	ldr	r0, [r3, #0]
    2bfa:	9a01      	ldr	r2, [sp, #4]
    2bfc:	4613      	mov	r3, r2
    2bfe:	009b      	lsls	r3, r3, #2
    2c00:	4413      	add	r3, r2
    2c02:	009b      	lsls	r3, r3, #2
    2c04:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2c08:	4403      	add	r3, r0
    2c0a:	4618      	mov	r0, r3
    2c0c:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2c0e:	9b01      	ldr	r3, [sp, #4]
    2c10:	3301      	adds	r3, #1
    2c12:	9301      	str	r3, [sp, #4]
    2c14:	4b08      	ldr	r3, [pc, #32]	; (2c38 <Clock_Ip_DistributePll+0x15c>)
    2c16:	681b      	ldr	r3, [r3, #0]
    2c18:	7c9b      	ldrb	r3, [r3, #18]
    2c1a:	461a      	mov	r2, r3
    2c1c:	9b01      	ldr	r3, [sp, #4]
    2c1e:	4293      	cmp	r3, r2
    2c20:	d3cd      	bcc.n	2bbe <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2c22:	4b05      	ldr	r3, [pc, #20]	; (2c38 <Clock_Ip_DistributePll+0x15c>)
    2c24:	681b      	ldr	r3, [r3, #0]
    2c26:	2104      	movs	r1, #4
    2c28:	4618      	mov	r0, r3
    2c2a:	f002 fe0b 	bl	5844 <Clock_Ip_Command>
        }
    }
}
    2c2e:	bf00      	nop
    2c30:	b003      	add	sp, #12
    2c32:	f85d fb04 	ldr.w	pc, [sp], #4
    2c36:	bf00      	nop
    2c38:	1fff8b50 	.word	0x1fff8b50
    2c3c:	0000fc8c 	.word	0x0000fc8c
    2c40:	0000f840 	.word	0x0000f840
    2c44:	0000f810 	.word	0x0000f810
    2c48:	0000fe78 	.word	0x0000fe78
    2c4c:	1fff8b58 	.word	0x1fff8b58
    2c50:	0000f7e0 	.word	0x0000f7e0
    2c54:	0000fdc8 	.word	0x0000fdc8
    2c58:	0000f830 	.word	0x0000f830
    2c5c:	0000fe3c 	.word	0x0000fe3c

00002c60 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2c60:	b500      	push	{lr}
    2c62:	b085      	sub	sp, #20
    2c64:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2c66:	490c      	ldr	r1, [pc, #48]	; (2c98 <Clock_Ip_DisableClockMonitor+0x38>)
    2c68:	9a01      	ldr	r2, [sp, #4]
    2c6a:	4613      	mov	r3, r2
    2c6c:	00db      	lsls	r3, r3, #3
    2c6e:	4413      	add	r3, r2
    2c70:	440b      	add	r3, r1
    2c72:	3301      	adds	r3, #1
    2c74:	781b      	ldrb	r3, [r3, #0]
    2c76:	461a      	mov	r2, r3
    2c78:	4b08      	ldr	r3, [pc, #32]	; (2c9c <Clock_Ip_DisableClockMonitor+0x3c>)
    2c7a:	5c9b      	ldrb	r3, [r3, r2]
    2c7c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2c7e:	4a08      	ldr	r2, [pc, #32]	; (2ca0 <Clock_Ip_DisableClockMonitor+0x40>)
    2c80:	9b03      	ldr	r3, [sp, #12]
    2c82:	011b      	lsls	r3, r3, #4
    2c84:	4413      	add	r3, r2
    2c86:	3308      	adds	r3, #8
    2c88:	681b      	ldr	r3, [r3, #0]
    2c8a:	9801      	ldr	r0, [sp, #4]
    2c8c:	4798      	blx	r3
}
    2c8e:	bf00      	nop
    2c90:	b005      	add	sp, #20
    2c92:	f85d fb04 	ldr.w	pc, [sp], #4
    2c96:	bf00      	nop
    2c98:	0000f840 	.word	0x0000f840
    2c9c:	0000f830 	.word	0x0000f830
    2ca0:	0000fe3c 	.word	0x0000fe3c

00002ca4 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2ca4:	b082      	sub	sp, #8
    2ca6:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2ca8:	4a02      	ldr	r2, [pc, #8]	; (2cb4 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2caa:	9b01      	ldr	r3, [sp, #4]
    2cac:	6013      	str	r3, [r2, #0]
}
    2cae:	bf00      	nop
    2cb0:	b002      	add	sp, #8
    2cb2:	4770      	bx	lr
    2cb4:	1fff8b14 	.word	0x1fff8b14

00002cb8 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2cb8:	b500      	push	{lr}
    2cba:	b085      	sub	sp, #20
    2cbc:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2cbe:	490c      	ldr	r1, [pc, #48]	; (2cf0 <Clock_Ip_DisableModuleClock+0x38>)
    2cc0:	9a01      	ldr	r2, [sp, #4]
    2cc2:	4613      	mov	r3, r2
    2cc4:	00db      	lsls	r3, r3, #3
    2cc6:	4413      	add	r3, r2
    2cc8:	440b      	add	r3, r1
    2cca:	3301      	adds	r3, #1
    2ccc:	781b      	ldrb	r3, [r3, #0]
    2cce:	461a      	mov	r2, r3
    2cd0:	4b08      	ldr	r3, [pc, #32]	; (2cf4 <Clock_Ip_DisableModuleClock+0x3c>)
    2cd2:	5c9b      	ldrb	r3, [r3, r2]
    2cd4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2cd6:	4a08      	ldr	r2, [pc, #32]	; (2cf8 <Clock_Ip_DisableModuleClock+0x40>)
    2cd8:	9b03      	ldr	r3, [sp, #12]
    2cda:	00db      	lsls	r3, r3, #3
    2cdc:	4413      	add	r3, r2
    2cde:	685b      	ldr	r3, [r3, #4]
    2ce0:	2101      	movs	r1, #1
    2ce2:	9801      	ldr	r0, [sp, #4]
    2ce4:	4798      	blx	r3
}
    2ce6:	bf00      	nop
    2ce8:	b005      	add	sp, #20
    2cea:	f85d fb04 	ldr.w	pc, [sp], #4
    2cee:	bf00      	nop
    2cf0:	0000f840 	.word	0x0000f840
    2cf4:	0000f7e0 	.word	0x0000f7e0
    2cf8:	0000fdc8 	.word	0x0000fdc8

00002cfc <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2cfc:	b500      	push	{lr}
    2cfe:	b085      	sub	sp, #20
    2d00:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2d02:	490c      	ldr	r1, [pc, #48]	; (2d34 <Clock_Ip_EnableModuleClock+0x38>)
    2d04:	9a01      	ldr	r2, [sp, #4]
    2d06:	4613      	mov	r3, r2
    2d08:	00db      	lsls	r3, r3, #3
    2d0a:	4413      	add	r3, r2
    2d0c:	440b      	add	r3, r1
    2d0e:	3301      	adds	r3, #1
    2d10:	781b      	ldrb	r3, [r3, #0]
    2d12:	461a      	mov	r2, r3
    2d14:	4b08      	ldr	r3, [pc, #32]	; (2d38 <Clock_Ip_EnableModuleClock+0x3c>)
    2d16:	5c9b      	ldrb	r3, [r3, r2]
    2d18:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2d1a:	4a08      	ldr	r2, [pc, #32]	; (2d3c <Clock_Ip_EnableModuleClock+0x40>)
    2d1c:	9b03      	ldr	r3, [sp, #12]
    2d1e:	00db      	lsls	r3, r3, #3
    2d20:	4413      	add	r3, r2
    2d22:	685b      	ldr	r3, [r3, #4]
    2d24:	2100      	movs	r1, #0
    2d26:	9801      	ldr	r0, [sp, #4]
    2d28:	4798      	blx	r3
}
    2d2a:	bf00      	nop
    2d2c:	b005      	add	sp, #20
    2d2e:	f85d fb04 	ldr.w	pc, [sp], #4
    2d32:	bf00      	nop
    2d34:	0000f840 	.word	0x0000f840
    2d38:	0000f7e0 	.word	0x0000f7e0
    2d3c:	0000fdc8 	.word	0x0000fdc8

00002d40 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2d40:	b500      	push	{lr}
    2d42:	b083      	sub	sp, #12
    2d44:	9001      	str	r0, [sp, #4]
    2d46:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2d48:	4b08      	ldr	r3, [pc, #32]	; (2d6c <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2d4a:	2200      	movs	r2, #0
    2d4c:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2d4e:	4b08      	ldr	r3, [pc, #32]	; (2d70 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2d50:	681b      	ldr	r3, [r3, #0]
    2d52:	2102      	movs	r1, #2
    2d54:	4618      	mov	r0, r3
    2d56:	f002 fd75 	bl	5844 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2d5a:	9900      	ldr	r1, [sp, #0]
    2d5c:	9801      	ldr	r0, [sp, #4]
    2d5e:	f002 fc51 	bl	5604 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2d62:	bf00      	nop
    2d64:	b003      	add	sp, #12
    2d66:	f85d fb04 	ldr.w	pc, [sp], #4
    2d6a:	bf00      	nop
    2d6c:	1fff8b10 	.word	0x1fff8b10
    2d70:	1fff8b50 	.word	0x1fff8b50

00002d74 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2d74:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2d76:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2d7a:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2d7c:	4b06      	ldr	r3, [pc, #24]	; (2d98 <Clock_Ip_SetWaitStates+0x24>)
    2d7e:	785b      	ldrb	r3, [r3, #1]
    2d80:	2b00      	cmp	r3, #0
    2d82:	d005      	beq.n	2d90 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2d84:	9b01      	ldr	r3, [sp, #4]
    2d86:	3b01      	subs	r3, #1
    2d88:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2d8a:	9b01      	ldr	r3, [sp, #4]
    2d8c:	2b00      	cmp	r3, #0
    2d8e:	d1f9      	bne.n	2d84 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2d90:	bf00      	nop
    2d92:	b002      	add	sp, #8
    2d94:	4770      	bx	lr
    2d96:	bf00      	nop
    2d98:	1fff8b58 	.word	0x1fff8b58

00002d9c <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2d9c:	b500      	push	{lr}
    2d9e:	b083      	sub	sp, #12
    2da0:	9001      	str	r0, [sp, #4]
    2da2:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2da4:	4b04      	ldr	r3, [pc, #16]	; (2db8 <Clock_Ip_ReportClockErrors+0x1c>)
    2da6:	681b      	ldr	r3, [r3, #0]
    2da8:	9900      	ldr	r1, [sp, #0]
    2daa:	9801      	ldr	r0, [sp, #4]
    2dac:	4798      	blx	r3
}
    2dae:	bf00      	nop
    2db0:	b003      	add	sp, #12
    2db2:	f85d fb04 	ldr.w	pc, [sp], #4
    2db6:	bf00      	nop
    2db8:	1fff8b14 	.word	0x1fff8b14

00002dbc <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2dbc:	b500      	push	{lr}
    2dbe:	b085      	sub	sp, #20
    2dc0:	9003      	str	r0, [sp, #12]
    2dc2:	9102      	str	r1, [sp, #8]
    2dc4:	9201      	str	r2, [sp, #4]
    2dc6:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2dc8:	2000      	movs	r0, #0
    2dca:	f7fe ffd1 	bl	1d70 <OsIf_GetCounter>
    2dce:	4602      	mov	r2, r0
    2dd0:	9b03      	ldr	r3, [sp, #12]
    2dd2:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2dd4:	9b02      	ldr	r3, [sp, #8]
    2dd6:	2200      	movs	r2, #0
    2dd8:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2dda:	2100      	movs	r1, #0
    2ddc:	9800      	ldr	r0, [sp, #0]
    2dde:	f7ff f813 	bl	1e08 <OsIf_MicrosToTicks>
    2de2:	4602      	mov	r2, r0
    2de4:	9b01      	ldr	r3, [sp, #4]
    2de6:	601a      	str	r2, [r3, #0]
}
    2de8:	bf00      	nop
    2dea:	b005      	add	sp, #20
    2dec:	f85d fb04 	ldr.w	pc, [sp], #4

00002df0 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2df0:	b500      	push	{lr}
    2df2:	b087      	sub	sp, #28
    2df4:	9003      	str	r0, [sp, #12]
    2df6:	9102      	str	r1, [sp, #8]
    2df8:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2dfa:	2300      	movs	r3, #0
    2dfc:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2e00:	2100      	movs	r1, #0
    2e02:	9803      	ldr	r0, [sp, #12]
    2e04:	f7fe ffcd 	bl	1da2 <OsIf_GetElapsed>
    2e08:	4602      	mov	r2, r0
    2e0a:	9b02      	ldr	r3, [sp, #8]
    2e0c:	681b      	ldr	r3, [r3, #0]
    2e0e:	441a      	add	r2, r3
    2e10:	9b02      	ldr	r3, [sp, #8]
    2e12:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2e14:	9b02      	ldr	r3, [sp, #8]
    2e16:	681b      	ldr	r3, [r3, #0]
    2e18:	9a01      	ldr	r2, [sp, #4]
    2e1a:	429a      	cmp	r2, r3
    2e1c:	d802      	bhi.n	2e24 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2e1e:	2301      	movs	r3, #1
    2e20:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2e24:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2e28:	4618      	mov	r0, r3
    2e2a:	b007      	add	sp, #28
    2e2c:	f85d fb04 	ldr.w	pc, [sp], #4

00002e30 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2e30:	b082      	sub	sp, #8
    2e32:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2e34:	bf00      	nop
    2e36:	b002      	add	sp, #8
    2e38:	4770      	bx	lr

00002e3a <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2e3a:	b500      	push	{lr}
    2e3c:	b083      	sub	sp, #12
    2e3e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e40:	9b01      	ldr	r3, [sp, #4]
    2e42:	2b00      	cmp	r3, #0
    2e44:	d002      	beq.n	2e4c <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2e46:	9801      	ldr	r0, [sp, #4]
    2e48:	f000 f8ad 	bl	2fa6 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e4c:	bf00      	nop
    2e4e:	b003      	add	sp, #12
    2e50:	f85d fb04 	ldr.w	pc, [sp], #4

00002e54 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2e54:	b500      	push	{lr}
    2e56:	b083      	sub	sp, #12
    2e58:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e5a:	9b01      	ldr	r3, [sp, #4]
    2e5c:	2b00      	cmp	r3, #0
    2e5e:	d002      	beq.n	2e66 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2e60:	9801      	ldr	r0, [sp, #4]
    2e62:	f000 f8cd 	bl	3000 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e66:	bf00      	nop
    2e68:	b003      	add	sp, #12
    2e6a:	f85d fb04 	ldr.w	pc, [sp], #4

00002e6e <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2e6e:	b500      	push	{lr}
    2e70:	b083      	sub	sp, #12
    2e72:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e74:	9b01      	ldr	r3, [sp, #4]
    2e76:	2b00      	cmp	r3, #0
    2e78:	d002      	beq.n	2e80 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2e7a:	9801      	ldr	r0, [sp, #4]
    2e7c:	f000 f8ee 	bl	305c <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e80:	bf00      	nop
    2e82:	b003      	add	sp, #12
    2e84:	f85d fb04 	ldr.w	pc, [sp], #4

00002e88 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2e88:	b500      	push	{lr}
    2e8a:	b083      	sub	sp, #12
    2e8c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e8e:	9b01      	ldr	r3, [sp, #4]
    2e90:	2b00      	cmp	r3, #0
    2e92:	d002      	beq.n	2e9a <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2e94:	9801      	ldr	r0, [sp, #4]
    2e96:	f000 f8f9 	bl	308c <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e9a:	bf00      	nop
    2e9c:	b003      	add	sp, #12
    2e9e:	f85d fb04 	ldr.w	pc, [sp], #4

00002ea2 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2ea2:	b500      	push	{lr}
    2ea4:	b083      	sub	sp, #12
    2ea6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ea8:	9b01      	ldr	r3, [sp, #4]
    2eaa:	2b00      	cmp	r3, #0
    2eac:	d002      	beq.n	2eb4 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2eae:	9801      	ldr	r0, [sp, #4]
    2eb0:	f000 f904 	bl	30bc <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2eb4:	bf00      	nop
    2eb6:	b003      	add	sp, #12
    2eb8:	f85d fb04 	ldr.w	pc, [sp], #4

00002ebc <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2ebc:	b500      	push	{lr}
    2ebe:	b083      	sub	sp, #12
    2ec0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ec2:	9b01      	ldr	r3, [sp, #4]
    2ec4:	2b00      	cmp	r3, #0
    2ec6:	d002      	beq.n	2ece <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2ec8:	9801      	ldr	r0, [sp, #4]
    2eca:	f000 f90f 	bl	30ec <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ece:	bf00      	nop
    2ed0:	b003      	add	sp, #12
    2ed2:	f85d fb04 	ldr.w	pc, [sp], #4

00002ed6 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2ed6:	b500      	push	{lr}
    2ed8:	b083      	sub	sp, #12
    2eda:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2edc:	9b01      	ldr	r3, [sp, #4]
    2ede:	2b00      	cmp	r3, #0
    2ee0:	d002      	beq.n	2ee8 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2ee2:	9801      	ldr	r0, [sp, #4]
    2ee4:	f000 f91a 	bl	311c <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ee8:	bf00      	nop
    2eea:	b003      	add	sp, #12
    2eec:	f85d fb04 	ldr.w	pc, [sp], #4

00002ef0 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2ef0:	b500      	push	{lr}
    2ef2:	b083      	sub	sp, #12
    2ef4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ef6:	9b01      	ldr	r3, [sp, #4]
    2ef8:	2b00      	cmp	r3, #0
    2efa:	d002      	beq.n	2f02 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2efc:	9801      	ldr	r0, [sp, #4]
    2efe:	f000 f925 	bl	314c <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f02:	bf00      	nop
    2f04:	b003      	add	sp, #12
    2f06:	f85d fb04 	ldr.w	pc, [sp], #4

00002f0a <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2f0a:	b500      	push	{lr}
    2f0c:	b083      	sub	sp, #12
    2f0e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f10:	9b01      	ldr	r3, [sp, #4]
    2f12:	2b00      	cmp	r3, #0
    2f14:	d002      	beq.n	2f1c <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2f16:	9801      	ldr	r0, [sp, #4]
    2f18:	f000 f930 	bl	317c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f1c:	bf00      	nop
    2f1e:	b003      	add	sp, #12
    2f20:	f85d fb04 	ldr.w	pc, [sp], #4

00002f24 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2f24:	b500      	push	{lr}
    2f26:	b083      	sub	sp, #12
    2f28:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f2a:	9b01      	ldr	r3, [sp, #4]
    2f2c:	2b00      	cmp	r3, #0
    2f2e:	d002      	beq.n	2f36 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2f30:	9801      	ldr	r0, [sp, #4]
    2f32:	f000 f93b 	bl	31ac <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f36:	bf00      	nop
    2f38:	b003      	add	sp, #12
    2f3a:	f85d fb04 	ldr.w	pc, [sp], #4

00002f3e <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2f3e:	b500      	push	{lr}
    2f40:	b083      	sub	sp, #12
    2f42:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f44:	9b01      	ldr	r3, [sp, #4]
    2f46:	2b00      	cmp	r3, #0
    2f48:	d002      	beq.n	2f50 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2f4a:	9801      	ldr	r0, [sp, #4]
    2f4c:	f000 f946 	bl	31dc <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f50:	bf00      	nop
    2f52:	b003      	add	sp, #12
    2f54:	f85d fb04 	ldr.w	pc, [sp], #4

00002f58 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2f58:	b500      	push	{lr}
    2f5a:	b083      	sub	sp, #12
    2f5c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f5e:	9b01      	ldr	r3, [sp, #4]
    2f60:	2b00      	cmp	r3, #0
    2f62:	d002      	beq.n	2f6a <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2f64:	9801      	ldr	r0, [sp, #4]
    2f66:	f000 f951 	bl	320c <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f6a:	bf00      	nop
    2f6c:	b003      	add	sp, #12
    2f6e:	f85d fb04 	ldr.w	pc, [sp], #4

00002f72 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2f72:	b500      	push	{lr}
    2f74:	b083      	sub	sp, #12
    2f76:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f78:	9b01      	ldr	r3, [sp, #4]
    2f7a:	2b00      	cmp	r3, #0
    2f7c:	d002      	beq.n	2f84 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2f7e:	9801      	ldr	r0, [sp, #4]
    2f80:	f000 f95e 	bl	3240 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f84:	bf00      	nop
    2f86:	b003      	add	sp, #12
    2f88:	f85d fb04 	ldr.w	pc, [sp], #4

00002f8c <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2f8c:	b500      	push	{lr}
    2f8e:	b083      	sub	sp, #12
    2f90:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f92:	9b01      	ldr	r3, [sp, #4]
    2f94:	2b00      	cmp	r3, #0
    2f96:	d002      	beq.n	2f9e <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2f98:	9801      	ldr	r0, [sp, #4]
    2f9a:	f000 f98b 	bl	32b4 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f9e:	bf00      	nop
    2fa0:	b003      	add	sp, #12
    2fa2:	f85d fb04 	ldr.w	pc, [sp], #4

00002fa6 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fa6:	b086      	sub	sp, #24
    2fa8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2faa:	9b01      	ldr	r3, [sp, #4]
    2fac:	681a      	ldr	r2, [r3, #0]
    2fae:	4911      	ldr	r1, [pc, #68]	; (2ff4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2fb0:	4613      	mov	r3, r2
    2fb2:	00db      	lsls	r3, r3, #3
    2fb4:	4413      	add	r3, r2
    2fb6:	440b      	add	r3, r1
    2fb8:	781b      	ldrb	r3, [r3, #0]
    2fba:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2fbc:	9b01      	ldr	r3, [sp, #4]
    2fbe:	685b      	ldr	r3, [r3, #4]
    2fc0:	4a0d      	ldr	r2, [pc, #52]	; (2ff8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2fc2:	5cd3      	ldrb	r3, [r2, r3]
    2fc4:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2fc6:	4a0d      	ldr	r2, [pc, #52]	; (2ffc <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2fc8:	9b05      	ldr	r3, [sp, #20]
    2fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2fce:	681b      	ldr	r3, [r3, #0]
    2fd0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2fd2:	9b03      	ldr	r3, [sp, #12]
    2fd4:	f023 0307 	bic.w	r3, r3, #7
    2fd8:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2fda:	9a03      	ldr	r2, [sp, #12]
    2fdc:	9b04      	ldr	r3, [sp, #16]
    2fde:	4313      	orrs	r3, r2
    2fe0:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2fe2:	4a06      	ldr	r2, [pc, #24]	; (2ffc <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2fe4:	9b05      	ldr	r3, [sp, #20]
    2fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2fea:	9a03      	ldr	r2, [sp, #12]
    2fec:	601a      	str	r2, [r3, #0]
}
    2fee:	bf00      	nop
    2ff0:	b006      	add	sp, #24
    2ff2:	4770      	bx	lr
    2ff4:	0000f840 	.word	0x0000f840
    2ff8:	0000fc38 	.word	0x0000fc38
    2ffc:	0000fc7c 	.word	0x0000fc7c

00003000 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3000:	b086      	sub	sp, #24
    3002:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3004:	9b01      	ldr	r3, [sp, #4]
    3006:	681a      	ldr	r2, [r3, #0]
    3008:	4911      	ldr	r1, [pc, #68]	; (3050 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    300a:	4613      	mov	r3, r2
    300c:	00db      	lsls	r3, r3, #3
    300e:	4413      	add	r3, r2
    3010:	440b      	add	r3, r1
    3012:	781b      	ldrb	r3, [r3, #0]
    3014:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3016:	9b01      	ldr	r3, [sp, #4]
    3018:	685b      	ldr	r3, [r3, #4]
    301a:	4a0e      	ldr	r2, [pc, #56]	; (3054 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    301c:	5cd3      	ldrb	r3, [r2, r3]
    301e:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3020:	4a0d      	ldr	r2, [pc, #52]	; (3058 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3022:	9b05      	ldr	r3, [sp, #20]
    3024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3028:	681b      	ldr	r3, [r3, #0]
    302a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    302c:	9b03      	ldr	r3, [sp, #12]
    302e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3032:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    3034:	9b04      	ldr	r3, [sp, #16]
    3036:	021b      	lsls	r3, r3, #8
    3038:	9a03      	ldr	r2, [sp, #12]
    303a:	4313      	orrs	r3, r2
    303c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    303e:	4a06      	ldr	r2, [pc, #24]	; (3058 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3040:	9b05      	ldr	r3, [sp, #20]
    3042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3046:	9a03      	ldr	r2, [sp, #12]
    3048:	601a      	str	r2, [r3, #0]
}
    304a:	bf00      	nop
    304c:	b006      	add	sp, #24
    304e:	4770      	bx	lr
    3050:	0000f840 	.word	0x0000f840
    3054:	0000fc38 	.word	0x0000fc38
    3058:	0000fc7c 	.word	0x0000fc7c

0000305c <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    305c:	b084      	sub	sp, #16
    305e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3060:	4b09      	ldr	r3, [pc, #36]	; (3088 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3062:	695b      	ldr	r3, [r3, #20]
    3064:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    3066:	9b03      	ldr	r3, [sp, #12]
    3068:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    306c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    306e:	9b01      	ldr	r3, [sp, #4]
    3070:	685b      	ldr	r3, [r3, #4]
    3072:	3b01      	subs	r3, #1
    3074:	041b      	lsls	r3, r3, #16
    3076:	9a03      	ldr	r2, [sp, #12]
    3078:	4313      	orrs	r3, r2
    307a:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    307c:	4a02      	ldr	r2, [pc, #8]	; (3088 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    307e:	9b03      	ldr	r3, [sp, #12]
    3080:	6153      	str	r3, [r2, #20]
}
    3082:	bf00      	nop
    3084:	b004      	add	sp, #16
    3086:	4770      	bx	lr
    3088:	40064000 	.word	0x40064000

0000308c <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    308c:	b084      	sub	sp, #16
    308e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3090:	4b09      	ldr	r3, [pc, #36]	; (30b8 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3092:	695b      	ldr	r3, [r3, #20]
    3094:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    3096:	9b03      	ldr	r3, [sp, #12]
    3098:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    309c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    309e:	9b01      	ldr	r3, [sp, #4]
    30a0:	685b      	ldr	r3, [r3, #4]
    30a2:	3b01      	subs	r3, #1
    30a4:	011b      	lsls	r3, r3, #4
    30a6:	9a03      	ldr	r2, [sp, #12]
    30a8:	4313      	orrs	r3, r2
    30aa:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    30ac:	4a02      	ldr	r2, [pc, #8]	; (30b8 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    30ae:	9b03      	ldr	r3, [sp, #12]
    30b0:	6153      	str	r3, [r2, #20]
}
    30b2:	bf00      	nop
    30b4:	b004      	add	sp, #16
    30b6:	4770      	bx	lr
    30b8:	40064000 	.word	0x40064000

000030bc <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30bc:	b084      	sub	sp, #16
    30be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    30c0:	4b09      	ldr	r3, [pc, #36]	; (30e8 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    30c2:	695b      	ldr	r3, [r3, #20]
    30c4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    30c6:	9b03      	ldr	r3, [sp, #12]
    30c8:	f023 030f 	bic.w	r3, r3, #15
    30cc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    30ce:	9b01      	ldr	r3, [sp, #4]
    30d0:	685b      	ldr	r3, [r3, #4]
    30d2:	3b01      	subs	r3, #1
    30d4:	9a03      	ldr	r2, [sp, #12]
    30d6:	4313      	orrs	r3, r2
    30d8:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    30da:	4a03      	ldr	r2, [pc, #12]	; (30e8 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    30dc:	9b03      	ldr	r3, [sp, #12]
    30de:	6153      	str	r3, [r2, #20]
}
    30e0:	bf00      	nop
    30e2:	b004      	add	sp, #16
    30e4:	4770      	bx	lr
    30e6:	bf00      	nop
    30e8:	40064000 	.word	0x40064000

000030ec <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30ec:	b084      	sub	sp, #16
    30ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    30f0:	4b09      	ldr	r3, [pc, #36]	; (3118 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    30f2:	699b      	ldr	r3, [r3, #24]
    30f4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    30f6:	9b03      	ldr	r3, [sp, #12]
    30f8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    30fc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    30fe:	9b01      	ldr	r3, [sp, #4]
    3100:	685b      	ldr	r3, [r3, #4]
    3102:	3b01      	subs	r3, #1
    3104:	041b      	lsls	r3, r3, #16
    3106:	9a03      	ldr	r2, [sp, #12]
    3108:	4313      	orrs	r3, r2
    310a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    310c:	4a02      	ldr	r2, [pc, #8]	; (3118 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    310e:	9b03      	ldr	r3, [sp, #12]
    3110:	6193      	str	r3, [r2, #24]
}
    3112:	bf00      	nop
    3114:	b004      	add	sp, #16
    3116:	4770      	bx	lr
    3118:	40064000 	.word	0x40064000

0000311c <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    311c:	b084      	sub	sp, #16
    311e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3120:	4b09      	ldr	r3, [pc, #36]	; (3148 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3122:	699b      	ldr	r3, [r3, #24]
    3124:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    3126:	9b03      	ldr	r3, [sp, #12]
    3128:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    312c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    312e:	9b01      	ldr	r3, [sp, #4]
    3130:	685b      	ldr	r3, [r3, #4]
    3132:	3b01      	subs	r3, #1
    3134:	011b      	lsls	r3, r3, #4
    3136:	9a03      	ldr	r2, [sp, #12]
    3138:	4313      	orrs	r3, r2
    313a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    313c:	4a02      	ldr	r2, [pc, #8]	; (3148 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    313e:	9b03      	ldr	r3, [sp, #12]
    3140:	6193      	str	r3, [r2, #24]
}
    3142:	bf00      	nop
    3144:	b004      	add	sp, #16
    3146:	4770      	bx	lr
    3148:	40064000 	.word	0x40064000

0000314c <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    314c:	b084      	sub	sp, #16
    314e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3150:	4b09      	ldr	r3, [pc, #36]	; (3178 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3152:	699b      	ldr	r3, [r3, #24]
    3154:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    3156:	9b03      	ldr	r3, [sp, #12]
    3158:	f023 030f 	bic.w	r3, r3, #15
    315c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    315e:	9b01      	ldr	r3, [sp, #4]
    3160:	685b      	ldr	r3, [r3, #4]
    3162:	3b01      	subs	r3, #1
    3164:	9a03      	ldr	r2, [sp, #12]
    3166:	4313      	orrs	r3, r2
    3168:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    316a:	4a03      	ldr	r2, [pc, #12]	; (3178 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    316c:	9b03      	ldr	r3, [sp, #12]
    316e:	6193      	str	r3, [r2, #24]
}
    3170:	bf00      	nop
    3172:	b004      	add	sp, #16
    3174:	4770      	bx	lr
    3176:	bf00      	nop
    3178:	40064000 	.word	0x40064000

0000317c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    317c:	b084      	sub	sp, #16
    317e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3180:	4b09      	ldr	r3, [pc, #36]	; (31a8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3182:	69db      	ldr	r3, [r3, #28]
    3184:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    3186:	9b03      	ldr	r3, [sp, #12]
    3188:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    318c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    318e:	9b01      	ldr	r3, [sp, #4]
    3190:	685b      	ldr	r3, [r3, #4]
    3192:	3b01      	subs	r3, #1
    3194:	041b      	lsls	r3, r3, #16
    3196:	9a03      	ldr	r2, [sp, #12]
    3198:	4313      	orrs	r3, r2
    319a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    319c:	4a02      	ldr	r2, [pc, #8]	; (31a8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    319e:	9b03      	ldr	r3, [sp, #12]
    31a0:	61d3      	str	r3, [r2, #28]
}
    31a2:	bf00      	nop
    31a4:	b004      	add	sp, #16
    31a6:	4770      	bx	lr
    31a8:	40064000 	.word	0x40064000

000031ac <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    31ac:	b084      	sub	sp, #16
    31ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    31b0:	4b09      	ldr	r3, [pc, #36]	; (31d8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    31b2:	69db      	ldr	r3, [r3, #28]
    31b4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    31b6:	9b03      	ldr	r3, [sp, #12]
    31b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    31bc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    31be:	9b01      	ldr	r3, [sp, #4]
    31c0:	685b      	ldr	r3, [r3, #4]
    31c2:	3b01      	subs	r3, #1
    31c4:	011b      	lsls	r3, r3, #4
    31c6:	9a03      	ldr	r2, [sp, #12]
    31c8:	4313      	orrs	r3, r2
    31ca:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    31cc:	4a02      	ldr	r2, [pc, #8]	; (31d8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    31ce:	9b03      	ldr	r3, [sp, #12]
    31d0:	61d3      	str	r3, [r2, #28]
}
    31d2:	bf00      	nop
    31d4:	b004      	add	sp, #16
    31d6:	4770      	bx	lr
    31d8:	40064000 	.word	0x40064000

000031dc <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    31dc:	b084      	sub	sp, #16
    31de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    31e0:	4b09      	ldr	r3, [pc, #36]	; (3208 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    31e2:	69db      	ldr	r3, [r3, #28]
    31e4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    31e6:	9b03      	ldr	r3, [sp, #12]
    31e8:	f023 030f 	bic.w	r3, r3, #15
    31ec:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    31ee:	9b01      	ldr	r3, [sp, #4]
    31f0:	685b      	ldr	r3, [r3, #4]
    31f2:	3b01      	subs	r3, #1
    31f4:	9a03      	ldr	r2, [sp, #12]
    31f6:	4313      	orrs	r3, r2
    31f8:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    31fa:	4a03      	ldr	r2, [pc, #12]	; (3208 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    31fc:	9b03      	ldr	r3, [sp, #12]
    31fe:	61d3      	str	r3, [r2, #28]
}
    3200:	bf00      	nop
    3202:	b004      	add	sp, #16
    3204:	4770      	bx	lr
    3206:	bf00      	nop
    3208:	40064000 	.word	0x40064000

0000320c <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    320c:	b084      	sub	sp, #16
    320e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3210:	4b0a      	ldr	r3, [pc, #40]	; (323c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3212:	685b      	ldr	r3, [r3, #4]
    3214:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3216:	9b03      	ldr	r3, [sp, #12]
    3218:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    321c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    321e:	9b01      	ldr	r3, [sp, #4]
    3220:	685b      	ldr	r3, [r3, #4]
    3222:	3b01      	subs	r3, #1
    3224:	021b      	lsls	r3, r3, #8
    3226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    322a:	9a03      	ldr	r2, [sp, #12]
    322c:	4313      	orrs	r3, r2
    322e:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3230:	4a02      	ldr	r2, [pc, #8]	; (323c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3232:	9b03      	ldr	r3, [sp, #12]
    3234:	6053      	str	r3, [r2, #4]
}
    3236:	bf00      	nop
    3238:	b004      	add	sp, #16
    323a:	4770      	bx	lr
    323c:	40048000 	.word	0x40048000

00003240 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3240:	b084      	sub	sp, #16
    3242:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3244:	4919      	ldr	r1, [pc, #100]	; (32ac <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3246:	9b01      	ldr	r3, [sp, #4]
    3248:	681a      	ldr	r2, [r3, #0]
    324a:	4819      	ldr	r0, [pc, #100]	; (32b0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    324c:	4613      	mov	r3, r2
    324e:	00db      	lsls	r3, r3, #3
    3250:	4413      	add	r3, r2
    3252:	4403      	add	r3, r0
    3254:	3305      	adds	r3, #5
    3256:	781b      	ldrb	r3, [r3, #0]
    3258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    325c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    325e:	9b03      	ldr	r3, [sp, #12]
    3260:	f023 030f 	bic.w	r3, r3, #15
    3264:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    3266:	9b01      	ldr	r3, [sp, #4]
    3268:	685b      	ldr	r3, [r3, #4]
    326a:	3b01      	subs	r3, #1
    326c:	f003 0307 	and.w	r3, r3, #7
    3270:	9a03      	ldr	r2, [sp, #12]
    3272:	4313      	orrs	r3, r2
    3274:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3276:	9b01      	ldr	r3, [sp, #4]
    3278:	7a1b      	ldrb	r3, [r3, #8]
    327a:	3b01      	subs	r3, #1
    327c:	00db      	lsls	r3, r3, #3
    327e:	f003 0308 	and.w	r3, r3, #8
    3282:	9a03      	ldr	r2, [sp, #12]
    3284:	4313      	orrs	r3, r2
    3286:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3288:	4908      	ldr	r1, [pc, #32]	; (32ac <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    328a:	9b01      	ldr	r3, [sp, #4]
    328c:	681a      	ldr	r2, [r3, #0]
    328e:	4808      	ldr	r0, [pc, #32]	; (32b0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3290:	4613      	mov	r3, r2
    3292:	00db      	lsls	r3, r3, #3
    3294:	4413      	add	r3, r2
    3296:	4403      	add	r3, r0
    3298:	3305      	adds	r3, #5
    329a:	781b      	ldrb	r3, [r3, #0]
    329c:	461a      	mov	r2, r3
    329e:	9b03      	ldr	r3, [sp, #12]
    32a0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    32a4:	bf00      	nop
    32a6:	b004      	add	sp, #16
    32a8:	4770      	bx	lr
    32aa:	bf00      	nop
    32ac:	40065000 	.word	0x40065000
    32b0:	0000f840 	.word	0x0000f840

000032b4 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    32b4:	b084      	sub	sp, #16
    32b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    32b8:	4b10      	ldr	r3, [pc, #64]	; (32fc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    32ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    32bc:	4a0f      	ldr	r2, [pc, #60]	; (32fc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    32be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    32c2:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    32c4:	4b0d      	ldr	r3, [pc, #52]	; (32fc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    32c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    32c8:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    32ca:	9b03      	ldr	r3, [sp, #12]
    32cc:	f023 030f 	bic.w	r3, r3, #15
    32d0:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    32d2:	9b01      	ldr	r3, [sp, #4]
    32d4:	685b      	ldr	r3, [r3, #4]
    32d6:	3b01      	subs	r3, #1
    32d8:	005b      	lsls	r3, r3, #1
    32da:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    32de:	9b01      	ldr	r3, [sp, #4]
    32e0:	7a1b      	ldrb	r3, [r3, #8]
    32e2:	3b01      	subs	r3, #1
    32e4:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    32e8:	4313      	orrs	r3, r2
    32ea:	9a03      	ldr	r2, [sp, #12]
    32ec:	4313      	orrs	r3, r2
    32ee:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    32f0:	4a02      	ldr	r2, [pc, #8]	; (32fc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    32f2:	9b03      	ldr	r3, [sp, #12]
    32f4:	6693      	str	r3, [r2, #104]	; 0x68
}
    32f6:	bf00      	nop
    32f8:	b004      	add	sp, #16
    32fa:	4770      	bx	lr
    32fc:	40048000 	.word	0x40048000

00003300 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3300:	b082      	sub	sp, #8
    3302:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3304:	bf00      	nop
    3306:	b002      	add	sp, #8
    3308:	4770      	bx	lr
	...

0000330c <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    330c:	b082      	sub	sp, #8
    330e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3310:	bf00      	nop
    3312:	b002      	add	sp, #8
    3314:	4770      	bx	lr

00003316 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3316:	b082      	sub	sp, #8
    3318:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    331a:	bf00      	nop
    331c:	b002      	add	sp, #8
    331e:	4770      	bx	lr

00003320 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3320:	b500      	push	{lr}
    3322:	b083      	sub	sp, #12
    3324:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3326:	9b01      	ldr	r3, [sp, #4]
    3328:	2b00      	cmp	r3, #0
    332a:	d002      	beq.n	3332 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    332c:	9801      	ldr	r0, [sp, #4]
    332e:	f000 f86a 	bl	3406 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3332:	bf00      	nop
    3334:	b003      	add	sp, #12
    3336:	f85d fb04 	ldr.w	pc, [sp], #4

0000333a <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    333a:	b500      	push	{lr}
    333c:	b083      	sub	sp, #12
    333e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3340:	9b01      	ldr	r3, [sp, #4]
    3342:	2b00      	cmp	r3, #0
    3344:	d002      	beq.n	334c <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    3346:	9801      	ldr	r0, [sp, #4]
    3348:	f000 f884 	bl	3454 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    334c:	bf00      	nop
    334e:	b003      	add	sp, #12
    3350:	f85d fb04 	ldr.w	pc, [sp], #4

00003354 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3354:	b500      	push	{lr}
    3356:	b089      	sub	sp, #36	; 0x24
    3358:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    335a:	2300      	movs	r3, #0
    335c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    3360:	9b01      	ldr	r3, [sp, #4]
    3362:	2b00      	cmp	r3, #0
    3364:	d031      	beq.n	33ca <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    3366:	4b1b      	ldr	r3, [pc, #108]	; (33d4 <Clock_Ip_CompleteSOSC+0x80>)
    3368:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    336c:	f003 0301 	and.w	r3, r3, #1
    3370:	2b00      	cmp	r3, #0
    3372:	d02a      	beq.n	33ca <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3374:	aa03      	add	r2, sp, #12
    3376:	a904      	add	r1, sp, #16
    3378:	a805      	add	r0, sp, #20
    337a:	f24c 3350 	movw	r3, #50000	; 0xc350
    337e:	f7ff fd1d 	bl	2dbc <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    3382:	4b14      	ldr	r3, [pc, #80]	; (33d4 <Clock_Ip_CompleteSOSC+0x80>)
    3384:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3388:	0e1b      	lsrs	r3, r3, #24
    338a:	f003 0301 	and.w	r3, r3, #1
    338e:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3390:	9a03      	ldr	r2, [sp, #12]
    3392:	a904      	add	r1, sp, #16
    3394:	ab05      	add	r3, sp, #20
    3396:	4618      	mov	r0, r3
    3398:	f7ff fd2a 	bl	2df0 <Clock_Ip_TimeoutExpired>
    339c:	4603      	mov	r3, r0
    339e:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    33a2:	9b06      	ldr	r3, [sp, #24]
    33a4:	2b00      	cmp	r3, #0
    33a6:	d106      	bne.n	33b6 <Clock_Ip_CompleteSOSC+0x62>
    33a8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33ac:	f083 0301 	eor.w	r3, r3, #1
    33b0:	b2db      	uxtb	r3, r3
    33b2:	2b00      	cmp	r3, #0
    33b4:	d1e5      	bne.n	3382 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    33b6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33ba:	2b00      	cmp	r3, #0
    33bc:	d005      	beq.n	33ca <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    33be:	9b01      	ldr	r3, [sp, #4]
    33c0:	681b      	ldr	r3, [r3, #0]
    33c2:	4619      	mov	r1, r3
    33c4:	2001      	movs	r0, #1
    33c6:	f7ff fce9 	bl	2d9c <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    33ca:	bf00      	nop
    33cc:	b009      	add	sp, #36	; 0x24
    33ce:	f85d fb04 	ldr.w	pc, [sp], #4
    33d2:	bf00      	nop
    33d4:	40064000 	.word	0x40064000

000033d8 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    33d8:	b500      	push	{lr}
    33da:	b083      	sub	sp, #12
    33dc:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    33de:	9801      	ldr	r0, [sp, #4]
    33e0:	f000 f8c0 	bl	3564 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    33e4:	bf00      	nop
    33e6:	b003      	add	sp, #12
    33e8:	f85d fb04 	ldr.w	pc, [sp], #4

000033ec <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    33ec:	b500      	push	{lr}
    33ee:	b083      	sub	sp, #12
    33f0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33f2:	9b01      	ldr	r3, [sp, #4]
    33f4:	2b00      	cmp	r3, #0
    33f6:	d002      	beq.n	33fe <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    33f8:	9801      	ldr	r0, [sp, #4]
    33fa:	f000 f8c3 	bl	3584 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33fe:	bf00      	nop
    3400:	b003      	add	sp, #12
    3402:	f85d fb04 	ldr.w	pc, [sp], #4

00003406 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3406:	b082      	sub	sp, #8
    3408:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    340a:	4b11      	ldr	r3, [pc, #68]	; (3450 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    340c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3410:	4a0f      	ldr	r2, [pc, #60]	; (3450 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3412:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3416:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    341a:	4b0d      	ldr	r3, [pc, #52]	; (3450 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    341c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3420:	4a0b      	ldr	r2, [pc, #44]	; (3450 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3426:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    342a:	4b09      	ldr	r3, [pc, #36]	; (3450 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    342c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3430:	4a07      	ldr	r2, [pc, #28]	; (3450 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3432:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3436:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    343a:	4b05      	ldr	r3, [pc, #20]	; (3450 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    343c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3440:	4a03      	ldr	r2, [pc, #12]	; (3450 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3442:	f023 0301 	bic.w	r3, r3, #1
    3446:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    344a:	bf00      	nop
    344c:	b002      	add	sp, #8
    344e:	4770      	bx	lr
    3450:	40064000 	.word	0x40064000

00003454 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3454:	b082      	sub	sp, #8
    3456:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    3458:	9b01      	ldr	r3, [sp, #4]
    345a:	891b      	ldrh	r3, [r3, #8]
    345c:	2b01      	cmp	r3, #1
    345e:	d174      	bne.n	354a <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    3460:	9b01      	ldr	r3, [sp, #4]
    3462:	7bdb      	ldrb	r3, [r3, #15]
    3464:	2b00      	cmp	r3, #0
    3466:	d002      	beq.n	346e <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    3468:	2b01      	cmp	r3, #1
    346a:	d009      	beq.n	3480 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    346c:	e011      	b.n	3492 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    346e:	4b39      	ldr	r3, [pc, #228]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3470:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3474:	4a37      	ldr	r2, [pc, #220]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3476:	f023 0308 	bic.w	r3, r3, #8
    347a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    347e:	e008      	b.n	3492 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    3480:	4b34      	ldr	r3, [pc, #208]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3482:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3486:	4a33      	ldr	r2, [pc, #204]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3488:	f043 0308 	orr.w	r3, r3, #8
    348c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3490:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    3492:	4b30      	ldr	r3, [pc, #192]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3494:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3498:	4a2e      	ldr	r2, [pc, #184]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    349a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    349e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    34a2:	9b01      	ldr	r3, [sp, #4]
    34a4:	685b      	ldr	r3, [r3, #4]
    34a6:	4a2c      	ldr	r2, [pc, #176]	; (3558 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    34a8:	4293      	cmp	r3, r2
    34aa:	d90d      	bls.n	34c8 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    34ac:	9b01      	ldr	r3, [sp, #4]
    34ae:	685b      	ldr	r3, [r3, #4]
    34b0:	4a2a      	ldr	r2, [pc, #168]	; (355c <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    34b2:	4293      	cmp	r3, r2
    34b4:	d208      	bcs.n	34c8 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    34b6:	4b27      	ldr	r3, [pc, #156]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    34bc:	4a25      	ldr	r2, [pc, #148]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34be:	f043 0320 	orr.w	r3, r3, #32
    34c2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    34c6:	e007      	b.n	34d8 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    34c8:	4b22      	ldr	r3, [pc, #136]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    34ce:	4a21      	ldr	r2, [pc, #132]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34d0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    34d4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    34d8:	9b01      	ldr	r3, [sp, #4]
    34da:	7b1b      	ldrb	r3, [r3, #12]
    34dc:	2b00      	cmp	r3, #0
    34de:	d108      	bne.n	34f2 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    34e0:	4b1c      	ldr	r3, [pc, #112]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    34e6:	4a1b      	ldr	r2, [pc, #108]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34e8:	f043 0304 	orr.w	r3, r3, #4
    34ec:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    34f0:	e007      	b.n	3502 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    34f2:	4b18      	ldr	r3, [pc, #96]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    34f8:	4a16      	ldr	r2, [pc, #88]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34fa:	f023 0304 	bic.w	r3, r3, #4
    34fe:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3502:	9b01      	ldr	r3, [sp, #4]
    3504:	7c1b      	ldrb	r3, [r3, #16]
    3506:	2b02      	cmp	r3, #2
    3508:	d011      	beq.n	352e <Clock_Ip_SetSOSC_TrustedCall+0xda>
    350a:	2b02      	cmp	r3, #2
    350c:	dc14      	bgt.n	3538 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    350e:	2b00      	cmp	r3, #0
    3510:	d002      	beq.n	3518 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    3512:	2b01      	cmp	r3, #1
    3514:	d005      	beq.n	3522 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    3516:	e00f      	b.n	3538 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3518:	4b0e      	ldr	r3, [pc, #56]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    351a:	2201      	movs	r2, #1
    351c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3520:	e014      	b.n	354c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3522:	4b0c      	ldr	r3, [pc, #48]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3524:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3528:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    352c:	e00e      	b.n	354c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    352e:	4b09      	ldr	r3, [pc, #36]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3530:	4a0b      	ldr	r2, [pc, #44]	; (3560 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    3532:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    3536:	e009      	b.n	354c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3538:	4b06      	ldr	r3, [pc, #24]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    353a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    353e:	4a05      	ldr	r2, [pc, #20]	; (3554 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3540:	f043 0301 	orr.w	r3, r3, #1
    3544:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3548:	e000      	b.n	354c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    354a:	bf00      	nop
}
    354c:	bf00      	nop
    354e:	b002      	add	sp, #8
    3550:	4770      	bx	lr
    3552:	bf00      	nop
    3554:	40064000 	.word	0x40064000
    3558:	003d08ff 	.word	0x003d08ff
    355c:	007a1200 	.word	0x007a1200
    3560:	00030001 	.word	0x00030001

00003564 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    3564:	b082      	sub	sp, #8
    3566:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    3568:	4b05      	ldr	r3, [pc, #20]	; (3580 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    356a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    356e:	4a04      	ldr	r2, [pc, #16]	; (3580 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3570:	f023 0301 	bic.w	r3, r3, #1
    3574:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3578:	bf00      	nop
    357a:	b002      	add	sp, #8
    357c:	4770      	bx	lr
    357e:	bf00      	nop
    3580:	40064000 	.word	0x40064000

00003584 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3584:	b082      	sub	sp, #8
    3586:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3588:	9b01      	ldr	r3, [sp, #4]
    358a:	891b      	ldrh	r3, [r3, #8]
    358c:	2b01      	cmp	r3, #1
    358e:	d107      	bne.n	35a0 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3590:	4b05      	ldr	r3, [pc, #20]	; (35a8 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3592:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3596:	4a04      	ldr	r2, [pc, #16]	; (35a8 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3598:	f043 0301 	orr.w	r3, r3, #1
    359c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    35a0:	bf00      	nop
    35a2:	b002      	add	sp, #8
    35a4:	4770      	bx	lr
    35a6:	bf00      	nop
    35a8:	40064000 	.word	0x40064000

000035ac <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    35ac:	b082      	sub	sp, #8
    35ae:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    35b0:	bf00      	nop
    35b2:	b002      	add	sp, #8
    35b4:	4770      	bx	lr

000035b6 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    35b6:	b082      	sub	sp, #8
    35b8:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    35ba:	2300      	movs	r3, #0
}
    35bc:	4618      	mov	r0, r3
    35be:	b002      	add	sp, #8
    35c0:	4770      	bx	lr

000035c2 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    35c2:	b082      	sub	sp, #8
    35c4:	9001      	str	r0, [sp, #4]
    35c6:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    35c8:	bf00      	nop
    35ca:	b002      	add	sp, #8
    35cc:	4770      	bx	lr
	...

000035d0 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    35d0:	b082      	sub	sp, #8
    35d2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    35d4:	bf00      	nop
    35d6:	b002      	add	sp, #8
    35d8:	4770      	bx	lr

000035da <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    35da:	b082      	sub	sp, #8
    35dc:	9001      	str	r0, [sp, #4]
    35de:	460b      	mov	r3, r1
    35e0:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    35e4:	bf00      	nop
    35e6:	b002      	add	sp, #8
    35e8:	4770      	bx	lr

000035ea <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    35ea:	b500      	push	{lr}
    35ec:	b083      	sub	sp, #12
    35ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    35f0:	9b01      	ldr	r3, [sp, #4]
    35f2:	2b00      	cmp	r3, #0
    35f4:	d002      	beq.n	35fc <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    35f6:	9801      	ldr	r0, [sp, #4]
    35f8:	f000 f8e7 	bl	37ca <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    35fc:	bf00      	nop
    35fe:	b003      	add	sp, #12
    3600:	f85d fb04 	ldr.w	pc, [sp], #4

00003604 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3604:	b500      	push	{lr}
    3606:	b085      	sub	sp, #20
    3608:	9001      	str	r0, [sp, #4]
    360a:	460b      	mov	r3, r1
    360c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3610:	9b01      	ldr	r3, [sp, #4]
    3612:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3614:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3618:	2b00      	cmp	r3, #0
    361a:	d003      	beq.n	3624 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    361c:	2300      	movs	r3, #0
    361e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3622:	e002      	b.n	362a <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3624:	2301      	movs	r3, #1
    3626:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    362a:	ab02      	add	r3, sp, #8
    362c:	4618      	mov	r0, r3
    362e:	f7ff ffdc 	bl	35ea <Clock_Ip_ClockSetSimLPO1KEnable>
}
    3632:	bf00      	nop
    3634:	b005      	add	sp, #20
    3636:	f85d fb04 	ldr.w	pc, [sp], #4

0000363a <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    363a:	b500      	push	{lr}
    363c:	b083      	sub	sp, #12
    363e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3640:	9b01      	ldr	r3, [sp, #4]
    3642:	2b00      	cmp	r3, #0
    3644:	d002      	beq.n	364c <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    3646:	9801      	ldr	r0, [sp, #4]
    3648:	f000 f8d6 	bl	37f8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    364c:	bf00      	nop
    364e:	b003      	add	sp, #12
    3650:	f85d fb04 	ldr.w	pc, [sp], #4

00003654 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3654:	b500      	push	{lr}
    3656:	b085      	sub	sp, #20
    3658:	9001      	str	r0, [sp, #4]
    365a:	460b      	mov	r3, r1
    365c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3660:	9b01      	ldr	r3, [sp, #4]
    3662:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3664:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3668:	2b00      	cmp	r3, #0
    366a:	d003      	beq.n	3674 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    366c:	2300      	movs	r3, #0
    366e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3672:	e002      	b.n	367a <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3674:	2301      	movs	r3, #1
    3676:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    367a:	ab02      	add	r3, sp, #8
    367c:	4618      	mov	r0, r3
    367e:	f7ff ffdc 	bl	363a <Clock_Ip_ClockSetSimLPO32KEnable>
}
    3682:	bf00      	nop
    3684:	b005      	add	sp, #20
    3686:	f85d fb04 	ldr.w	pc, [sp], #4

0000368a <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    368a:	b500      	push	{lr}
    368c:	b083      	sub	sp, #12
    368e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3690:	9b01      	ldr	r3, [sp, #4]
    3692:	2b00      	cmp	r3, #0
    3694:	d002      	beq.n	369c <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    3696:	9801      	ldr	r0, [sp, #4]
    3698:	f000 f8c6 	bl	3828 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    369c:	bf00      	nop
    369e:	b003      	add	sp, #12
    36a0:	f85d fb04 	ldr.w	pc, [sp], #4

000036a4 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    36a4:	b500      	push	{lr}
    36a6:	b085      	sub	sp, #20
    36a8:	9001      	str	r0, [sp, #4]
    36aa:	460b      	mov	r3, r1
    36ac:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    36b0:	9b01      	ldr	r3, [sp, #4]
    36b2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    36b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    36b8:	2b00      	cmp	r3, #0
    36ba:	d003      	beq.n	36c4 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    36bc:	2300      	movs	r3, #0
    36be:	f8ad 300c 	strh.w	r3, [sp, #12]
    36c2:	e002      	b.n	36ca <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    36c4:	2301      	movs	r3, #1
    36c6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    36ca:	ab02      	add	r3, sp, #8
    36cc:	4618      	mov	r0, r3
    36ce:	f7ff ffdc 	bl	368a <Clock_Ip_ClockSetSimClkoutEnable>
}
    36d2:	bf00      	nop
    36d4:	b005      	add	sp, #20
    36d6:	f85d fb04 	ldr.w	pc, [sp], #4

000036da <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    36da:	b500      	push	{lr}
    36dc:	b083      	sub	sp, #12
    36de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36e0:	9b01      	ldr	r3, [sp, #4]
    36e2:	2b00      	cmp	r3, #0
    36e4:	d002      	beq.n	36ec <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    36e6:	9801      	ldr	r0, [sp, #4]
    36e8:	f000 f8b6 	bl	3858 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36ec:	bf00      	nop
    36ee:	b003      	add	sp, #12
    36f0:	f85d fb04 	ldr.w	pc, [sp], #4

000036f4 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    36f4:	b500      	push	{lr}
    36f6:	b085      	sub	sp, #20
    36f8:	9001      	str	r0, [sp, #4]
    36fa:	460b      	mov	r3, r1
    36fc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3700:	9b01      	ldr	r3, [sp, #4]
    3702:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3704:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3708:	2b00      	cmp	r3, #0
    370a:	d003      	beq.n	3714 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    370c:	2300      	movs	r3, #0
    370e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3712:	e002      	b.n	371a <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3714:	2301      	movs	r3, #1
    3716:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    371a:	ab02      	add	r3, sp, #8
    371c:	4618      	mov	r0, r3
    371e:	f7ff ffdc 	bl	36da <Clock_Ip_ClockSetPccCgcEnable>
}
    3722:	bf00      	nop
    3724:	b005      	add	sp, #20
    3726:	f85d fb04 	ldr.w	pc, [sp], #4

0000372a <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    372a:	b500      	push	{lr}
    372c:	b083      	sub	sp, #12
    372e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3730:	9b01      	ldr	r3, [sp, #4]
    3732:	2b00      	cmp	r3, #0
    3734:	d002      	beq.n	373c <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    3736:	9801      	ldr	r0, [sp, #4]
    3738:	f000 f8bc 	bl	38b4 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    373c:	bf00      	nop
    373e:	b003      	add	sp, #12
    3740:	f85d fb04 	ldr.w	pc, [sp], #4

00003744 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    3744:	b500      	push	{lr}
    3746:	b085      	sub	sp, #20
    3748:	9001      	str	r0, [sp, #4]
    374a:	460b      	mov	r3, r1
    374c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3750:	9b01      	ldr	r3, [sp, #4]
    3752:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3754:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3758:	2b00      	cmp	r3, #0
    375a:	d003      	beq.n	3764 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    375c:	2300      	movs	r3, #0
    375e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3762:	e002      	b.n	376a <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3764:	2301      	movs	r3, #1
    3766:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    376a:	ab02      	add	r3, sp, #8
    376c:	4618      	mov	r0, r3
    376e:	f7ff ffdc 	bl	372a <Clock_Ip_ClockSetSimGate>
}
    3772:	bf00      	nop
    3774:	b005      	add	sp, #20
    3776:	f85d fb04 	ldr.w	pc, [sp], #4

0000377a <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    377a:	b500      	push	{lr}
    377c:	b083      	sub	sp, #12
    377e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3780:	9b01      	ldr	r3, [sp, #4]
    3782:	2b00      	cmp	r3, #0
    3784:	d002      	beq.n	378c <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    3786:	9801      	ldr	r0, [sp, #4]
    3788:	f000 f8c0 	bl	390c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    378c:	bf00      	nop
    378e:	b003      	add	sp, #12
    3790:	f85d fb04 	ldr.w	pc, [sp], #4

00003794 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3794:	b500      	push	{lr}
    3796:	b085      	sub	sp, #20
    3798:	9001      	str	r0, [sp, #4]
    379a:	460b      	mov	r3, r1
    379c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    37a0:	9b01      	ldr	r3, [sp, #4]
    37a2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    37a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    37a8:	2b00      	cmp	r3, #0
    37aa:	d003      	beq.n	37b4 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    37ac:	2300      	movs	r3, #0
    37ae:	f8ad 300c 	strh.w	r3, [sp, #12]
    37b2:	e002      	b.n	37ba <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    37b4:	2301      	movs	r3, #1
    37b6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    37ba:	ab02      	add	r3, sp, #8
    37bc:	4618      	mov	r0, r3
    37be:	f7ff ffdc 	bl	377a <Clock_Ip_ClockSetSimTraceEnable>
}
    37c2:	bf00      	nop
    37c4:	b005      	add	sp, #20
    37c6:	f85d fb04 	ldr.w	pc, [sp], #4

000037ca <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    37ca:	b084      	sub	sp, #16
    37cc:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    37ce:	4b09      	ldr	r3, [pc, #36]	; (37f4 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    37d0:	691b      	ldr	r3, [r3, #16]
    37d2:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    37d4:	9b03      	ldr	r3, [sp, #12]
    37d6:	f023 0301 	bic.w	r3, r3, #1
    37da:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    37dc:	9b01      	ldr	r3, [sp, #4]
    37de:	889b      	ldrh	r3, [r3, #4]
    37e0:	461a      	mov	r2, r3
    37e2:	9b03      	ldr	r3, [sp, #12]
    37e4:	4313      	orrs	r3, r2
    37e6:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    37e8:	4a02      	ldr	r2, [pc, #8]	; (37f4 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    37ea:	9b03      	ldr	r3, [sp, #12]
    37ec:	6113      	str	r3, [r2, #16]
}
    37ee:	bf00      	nop
    37f0:	b004      	add	sp, #16
    37f2:	4770      	bx	lr
    37f4:	40048000 	.word	0x40048000

000037f8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    37f8:	b084      	sub	sp, #16
    37fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    37fc:	4b09      	ldr	r3, [pc, #36]	; (3824 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    37fe:	691b      	ldr	r3, [r3, #16]
    3800:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    3802:	9b03      	ldr	r3, [sp, #12]
    3804:	f023 0302 	bic.w	r3, r3, #2
    3808:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    380a:	9b01      	ldr	r3, [sp, #4]
    380c:	889b      	ldrh	r3, [r3, #4]
    380e:	005b      	lsls	r3, r3, #1
    3810:	9a03      	ldr	r2, [sp, #12]
    3812:	4313      	orrs	r3, r2
    3814:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3816:	4a03      	ldr	r2, [pc, #12]	; (3824 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3818:	9b03      	ldr	r3, [sp, #12]
    381a:	6113      	str	r3, [r2, #16]
}
    381c:	bf00      	nop
    381e:	b004      	add	sp, #16
    3820:	4770      	bx	lr
    3822:	bf00      	nop
    3824:	40048000 	.word	0x40048000

00003828 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3828:	b084      	sub	sp, #16
    382a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    382c:	4b09      	ldr	r3, [pc, #36]	; (3854 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    382e:	685b      	ldr	r3, [r3, #4]
    3830:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    3832:	9b03      	ldr	r3, [sp, #12]
    3834:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3838:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    383a:	9b01      	ldr	r3, [sp, #4]
    383c:	889b      	ldrh	r3, [r3, #4]
    383e:	02db      	lsls	r3, r3, #11
    3840:	9a03      	ldr	r2, [sp, #12]
    3842:	4313      	orrs	r3, r2
    3844:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3846:	4a03      	ldr	r2, [pc, #12]	; (3854 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3848:	9b03      	ldr	r3, [sp, #12]
    384a:	6053      	str	r3, [r2, #4]
}
    384c:	bf00      	nop
    384e:	b004      	add	sp, #16
    3850:	4770      	bx	lr
    3852:	bf00      	nop
    3854:	40048000 	.word	0x40048000

00003858 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3858:	b084      	sub	sp, #16
    385a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    385c:	4913      	ldr	r1, [pc, #76]	; (38ac <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    385e:	9b01      	ldr	r3, [sp, #4]
    3860:	681a      	ldr	r2, [r3, #0]
    3862:	4813      	ldr	r0, [pc, #76]	; (38b0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3864:	4613      	mov	r3, r2
    3866:	00db      	lsls	r3, r3, #3
    3868:	4413      	add	r3, r2
    386a:	4403      	add	r3, r0
    386c:	3306      	adds	r3, #6
    386e:	781b      	ldrb	r3, [r3, #0]
    3870:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3874:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    3876:	9b03      	ldr	r3, [sp, #12]
    3878:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    387c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    387e:	9b01      	ldr	r3, [sp, #4]
    3880:	889b      	ldrh	r3, [r3, #4]
    3882:	079b      	lsls	r3, r3, #30
    3884:	9a03      	ldr	r2, [sp, #12]
    3886:	4313      	orrs	r3, r2
    3888:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    388a:	4908      	ldr	r1, [pc, #32]	; (38ac <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    388c:	9b01      	ldr	r3, [sp, #4]
    388e:	681a      	ldr	r2, [r3, #0]
    3890:	4807      	ldr	r0, [pc, #28]	; (38b0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3892:	4613      	mov	r3, r2
    3894:	00db      	lsls	r3, r3, #3
    3896:	4413      	add	r3, r2
    3898:	4403      	add	r3, r0
    389a:	3306      	adds	r3, #6
    389c:	781b      	ldrb	r3, [r3, #0]
    389e:	461a      	mov	r2, r3
    38a0:	9b03      	ldr	r3, [sp, #12]
    38a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    38a6:	bf00      	nop
    38a8:	b004      	add	sp, #16
    38aa:	4770      	bx	lr
    38ac:	40065000 	.word	0x40065000
    38b0:	0000f840 	.word	0x0000f840

000038b4 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    38b4:	b086      	sub	sp, #24
    38b6:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    38b8:	9b01      	ldr	r3, [sp, #4]
    38ba:	889b      	ldrh	r3, [r3, #4]
    38bc:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    38be:	9b01      	ldr	r3, [sp, #4]
    38c0:	681a      	ldr	r2, [r3, #0]
    38c2:	4910      	ldr	r1, [pc, #64]	; (3904 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    38c4:	4613      	mov	r3, r2
    38c6:	00db      	lsls	r3, r3, #3
    38c8:	4413      	add	r3, r2
    38ca:	440b      	add	r3, r1
    38cc:	3306      	adds	r3, #6
    38ce:	781b      	ldrb	r3, [r3, #0]
    38d0:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    38d2:	4b0d      	ldr	r3, [pc, #52]	; (3908 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    38d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    38d6:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    38d8:	2201      	movs	r2, #1
    38da:	9b04      	ldr	r3, [sp, #16]
    38dc:	fa02 f303 	lsl.w	r3, r2, r3
    38e0:	43db      	mvns	r3, r3
    38e2:	9a03      	ldr	r2, [sp, #12]
    38e4:	4013      	ands	r3, r2
    38e6:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    38e8:	9a05      	ldr	r2, [sp, #20]
    38ea:	9b04      	ldr	r3, [sp, #16]
    38ec:	fa02 f303 	lsl.w	r3, r2, r3
    38f0:	9a03      	ldr	r2, [sp, #12]
    38f2:	4313      	orrs	r3, r2
    38f4:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    38f6:	4a04      	ldr	r2, [pc, #16]	; (3908 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    38f8:	9b03      	ldr	r3, [sp, #12]
    38fa:	6413      	str	r3, [r2, #64]	; 0x40
}
    38fc:	bf00      	nop
    38fe:	b006      	add	sp, #24
    3900:	4770      	bx	lr
    3902:	bf00      	nop
    3904:	0000f840 	.word	0x0000f840
    3908:	40048000 	.word	0x40048000

0000390c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    390c:	b084      	sub	sp, #16
    390e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3910:	4b0a      	ldr	r3, [pc, #40]	; (393c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3914:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    3916:	9b01      	ldr	r3, [sp, #4]
    3918:	889b      	ldrh	r3, [r3, #4]
    391a:	2b01      	cmp	r3, #1
    391c:	d104      	bne.n	3928 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    391e:	9b03      	ldr	r3, [sp, #12]
    3920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3924:	9303      	str	r3, [sp, #12]
    3926:	e003      	b.n	3930 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3928:	9b03      	ldr	r3, [sp, #12]
    392a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    392e:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3930:	4a02      	ldr	r2, [pc, #8]	; (393c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3932:	9b03      	ldr	r3, [sp, #12]
    3934:	6693      	str	r3, [r2, #104]	; 0x68
}
    3936:	bf00      	nop
    3938:	b004      	add	sp, #16
    393a:	4770      	bx	lr
    393c:	40048000 	.word	0x40048000

00003940 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3940:	b082      	sub	sp, #8
    3942:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3944:	bf00      	nop
    3946:	b002      	add	sp, #8
    3948:	4770      	bx	lr

0000394a <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    394a:	b082      	sub	sp, #8
    394c:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    394e:	bf00      	nop
    3950:	b002      	add	sp, #8
    3952:	4770      	bx	lr

00003954 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3954:	b500      	push	{lr}
    3956:	b083      	sub	sp, #12
    3958:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    395a:	9b01      	ldr	r3, [sp, #4]
    395c:	2b00      	cmp	r3, #0
    395e:	d002      	beq.n	3966 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    3960:	9801      	ldr	r0, [sp, #4]
    3962:	f000 f8d1 	bl	3b08 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3966:	bf00      	nop
    3968:	b003      	add	sp, #12
    396a:	f85d fb04 	ldr.w	pc, [sp], #4

0000396e <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    396e:	b500      	push	{lr}
    3970:	b083      	sub	sp, #12
    3972:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3974:	9b01      	ldr	r3, [sp, #4]
    3976:	2b00      	cmp	r3, #0
    3978:	d002      	beq.n	3980 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    397a:	9801      	ldr	r0, [sp, #4]
    397c:	f000 f950 	bl	3c20 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3980:	bf00      	nop
    3982:	b003      	add	sp, #12
    3984:	f85d fb04 	ldr.w	pc, [sp], #4

00003988 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3988:	b500      	push	{lr}
    398a:	b083      	sub	sp, #12
    398c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    398e:	9801      	ldr	r0, [sp, #4]
    3990:	f000 f98e 	bl	3cb0 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3994:	bf00      	nop
    3996:	b003      	add	sp, #12
    3998:	f85d fb04 	ldr.w	pc, [sp], #4

0000399c <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    399c:	b500      	push	{lr}
    399e:	b083      	sub	sp, #12
    39a0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39a2:	9b01      	ldr	r3, [sp, #4]
    39a4:	2b00      	cmp	r3, #0
    39a6:	d002      	beq.n	39ae <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    39a8:	9801      	ldr	r0, [sp, #4]
    39aa:	f000 f999 	bl	3ce0 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39ae:	bf00      	nop
    39b0:	b003      	add	sp, #12
    39b2:	f85d fb04 	ldr.w	pc, [sp], #4

000039b6 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    39b6:	b500      	push	{lr}
    39b8:	b083      	sub	sp, #12
    39ba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39bc:	9b01      	ldr	r3, [sp, #4]
    39be:	2b00      	cmp	r3, #0
    39c0:	d002      	beq.n	39c8 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    39c2:	9801      	ldr	r0, [sp, #4]
    39c4:	f000 f9b0 	bl	3d28 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39c8:	bf00      	nop
    39ca:	b003      	add	sp, #12
    39cc:	f85d fb04 	ldr.w	pc, [sp], #4

000039d0 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    39d0:	b500      	push	{lr}
    39d2:	b083      	sub	sp, #12
    39d4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    39d6:	9801      	ldr	r0, [sp, #4]
    39d8:	f000 f9ba 	bl	3d50 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    39dc:	bf00      	nop
    39de:	b003      	add	sp, #12
    39e0:	f85d fb04 	ldr.w	pc, [sp], #4

000039e4 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    39e4:	b500      	push	{lr}
    39e6:	b083      	sub	sp, #12
    39e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39ea:	9b01      	ldr	r3, [sp, #4]
    39ec:	2b00      	cmp	r3, #0
    39ee:	d002      	beq.n	39f6 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    39f0:	9801      	ldr	r0, [sp, #4]
    39f2:	f000 f9bd 	bl	3d70 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39f6:	bf00      	nop
    39f8:	b003      	add	sp, #12
    39fa:	f85d fb04 	ldr.w	pc, [sp], #4

000039fe <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    39fe:	b500      	push	{lr}
    3a00:	b083      	sub	sp, #12
    3a02:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a04:	9b01      	ldr	r3, [sp, #4]
    3a06:	2b00      	cmp	r3, #0
    3a08:	d002      	beq.n	3a10 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3a0a:	9801      	ldr	r0, [sp, #4]
    3a0c:	f000 f9d4 	bl	3db8 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a10:	bf00      	nop
    3a12:	b003      	add	sp, #12
    3a14:	f85d fb04 	ldr.w	pc, [sp], #4

00003a18 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3a18:	b500      	push	{lr}
    3a1a:	b083      	sub	sp, #12
    3a1c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3a1e:	9801      	ldr	r0, [sp, #4]
    3a20:	f000 f9de 	bl	3de0 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3a24:	bf00      	nop
    3a26:	b003      	add	sp, #12
    3a28:	f85d fb04 	ldr.w	pc, [sp], #4

00003a2c <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3a2c:	b500      	push	{lr}
    3a2e:	b089      	sub	sp, #36	; 0x24
    3a30:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3a32:	2300      	movs	r3, #0
    3a34:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3a38:	4b20      	ldr	r3, [pc, #128]	; (3abc <SetInputSouceSytemClock+0x90>)
    3a3a:	695b      	ldr	r3, [r3, #20]
    3a3c:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3a3e:	9b06      	ldr	r3, [sp, #24]
    3a40:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3a44:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3a46:	9b01      	ldr	r3, [sp, #4]
    3a48:	061b      	lsls	r3, r3, #24
    3a4a:	9a06      	ldr	r2, [sp, #24]
    3a4c:	4313      	orrs	r3, r2
    3a4e:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3a50:	4a1a      	ldr	r2, [pc, #104]	; (3abc <SetInputSouceSytemClock+0x90>)
    3a52:	9b06      	ldr	r3, [sp, #24]
    3a54:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a56:	aa02      	add	r2, sp, #8
    3a58:	a903      	add	r1, sp, #12
    3a5a:	a804      	add	r0, sp, #16
    3a5c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a60:	f7ff f9ac 	bl	2dbc <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3a64:	4b15      	ldr	r3, [pc, #84]	; (3abc <SetInputSouceSytemClock+0x90>)
    3a66:	691b      	ldr	r3, [r3, #16]
    3a68:	0e1b      	lsrs	r3, r3, #24
    3a6a:	f003 030f 	and.w	r3, r3, #15
    3a6e:	9a01      	ldr	r2, [sp, #4]
    3a70:	429a      	cmp	r2, r3
    3a72:	bf0c      	ite	eq
    3a74:	2301      	moveq	r3, #1
    3a76:	2300      	movne	r3, #0
    3a78:	b2db      	uxtb	r3, r3
    3a7a:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3a7c:	9a02      	ldr	r2, [sp, #8]
    3a7e:	a903      	add	r1, sp, #12
    3a80:	ab04      	add	r3, sp, #16
    3a82:	4618      	mov	r0, r3
    3a84:	f7ff f9b4 	bl	2df0 <Clock_Ip_TimeoutExpired>
    3a88:	4603      	mov	r3, r0
    3a8a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    3a8e:	9b05      	ldr	r3, [sp, #20]
    3a90:	2b00      	cmp	r3, #0
    3a92:	d106      	bne.n	3aa2 <SetInputSouceSytemClock+0x76>
    3a94:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a98:	f083 0301 	eor.w	r3, r3, #1
    3a9c:	b2db      	uxtb	r3, r3
    3a9e:	2b00      	cmp	r3, #0
    3aa0:	d1e0      	bne.n	3a64 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    3aa2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3aa6:	2b00      	cmp	r3, #0
    3aa8:	d003      	beq.n	3ab2 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3aaa:	2105      	movs	r1, #5
    3aac:	2001      	movs	r0, #1
    3aae:	f7ff f975 	bl	2d9c <Clock_Ip_ReportClockErrors>
    }
}
    3ab2:	bf00      	nop
    3ab4:	b009      	add	sp, #36	; 0x24
    3ab6:	f85d fb04 	ldr.w	pc, [sp], #4
    3aba:	bf00      	nop
    3abc:	40064000 	.word	0x40064000

00003ac0 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3ac0:	b500      	push	{lr}
    3ac2:	b083      	sub	sp, #12
    3ac4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ac6:	9b01      	ldr	r3, [sp, #4]
    3ac8:	2b00      	cmp	r3, #0
    3aca:	d002      	beq.n	3ad2 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3acc:	9801      	ldr	r0, [sp, #4]
    3ace:	f000 f997 	bl	3e00 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ad2:	bf00      	nop
    3ad4:	b003      	add	sp, #12
    3ad6:	f85d fb04 	ldr.w	pc, [sp], #4

00003ada <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3ada:	b500      	push	{lr}
    3adc:	b083      	sub	sp, #12
    3ade:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ae0:	9b01      	ldr	r3, [sp, #4]
    3ae2:	2b00      	cmp	r3, #0
    3ae4:	d002      	beq.n	3aec <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    3ae6:	9801      	ldr	r0, [sp, #4]
    3ae8:	f000 fa7e 	bl	3fe8 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3aec:	bf00      	nop
    3aee:	b003      	add	sp, #12
    3af0:	f85d fb04 	ldr.w	pc, [sp], #4

00003af4 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3af4:	b500      	push	{lr}
    3af6:	b083      	sub	sp, #12
    3af8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3afa:	9801      	ldr	r0, [sp, #4]
    3afc:	f000 fab8 	bl	4070 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3b00:	bf00      	nop
    3b02:	b003      	add	sp, #12
    3b04:	f85d fb04 	ldr.w	pc, [sp], #4

00003b08 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b08:	b500      	push	{lr}
    3b0a:	b08b      	sub	sp, #44	; 0x2c
    3b0c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3b0e:	2300      	movs	r3, #0
    3b10:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3b14:	9b01      	ldr	r3, [sp, #4]
    3b16:	2b00      	cmp	r3, #0
    3b18:	d10b      	bne.n	3b32 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3b1a:	2305      	movs	r3, #5
    3b1c:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3b1e:	2301      	movs	r3, #1
    3b20:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3b24:	2301      	movs	r3, #1
    3b26:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3b2a:	2301      	movs	r3, #1
    3b2c:	f88d 3010 	strb.w	r3, [sp, #16]
    3b30:	e00e      	b.n	3b50 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3b32:	9b01      	ldr	r3, [sp, #4]
    3b34:	681b      	ldr	r3, [r3, #0]
    3b36:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3b38:	9b01      	ldr	r3, [sp, #4]
    3b3a:	79db      	ldrb	r3, [r3, #7]
    3b3c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3b40:	9b01      	ldr	r3, [sp, #4]
    3b42:	889b      	ldrh	r3, [r3, #4]
    3b44:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3b48:	9b01      	ldr	r3, [sp, #4]
    3b4a:	7a1b      	ldrb	r3, [r3, #8]
    3b4c:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3b50:	4b32      	ldr	r3, [pc, #200]	; (3c1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3b52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b56:	4a31      	ldr	r2, [pc, #196]	; (3c1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3b58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b5c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3b60:	4b2e      	ldr	r3, [pc, #184]	; (3c1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3b62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b66:	4a2d      	ldr	r2, [pc, #180]	; (3c1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3b68:	f023 0301 	bic.w	r3, r3, #1
    3b6c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b70:	4b2a      	ldr	r3, [pc, #168]	; (3c1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3b72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b76:	4a29      	ldr	r2, [pc, #164]	; (3c1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3b78:	f023 0304 	bic.w	r3, r3, #4
    3b7c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3b80:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3b84:	2b01      	cmp	r3, #1
    3b86:	d144      	bne.n	3c12 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3b88:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3b8c:	4a23      	ldr	r2, [pc, #140]	; (3c1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3b8e:	f003 0301 	and.w	r3, r3, #1
    3b92:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3b96:	4b21      	ldr	r3, [pc, #132]	; (3c1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3b98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b9c:	4a1f      	ldr	r2, [pc, #124]	; (3c1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3b9e:	f043 0301 	orr.w	r3, r3, #1
    3ba2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    3ba6:	4b1d      	ldr	r3, [pc, #116]	; (3c1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3ba8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3bac:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3bb0:	009b      	lsls	r3, r3, #2
    3bb2:	f003 0304 	and.w	r3, r3, #4
    3bb6:	4919      	ldr	r1, [pc, #100]	; (3c1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bb8:	4313      	orrs	r3, r2
    3bba:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3bbe:	aa05      	add	r2, sp, #20
    3bc0:	a906      	add	r1, sp, #24
    3bc2:	a807      	add	r0, sp, #28
    3bc4:	f24c 3350 	movw	r3, #50000	; 0xc350
    3bc8:	f7ff f8f8 	bl	2dbc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3bcc:	4b13      	ldr	r3, [pc, #76]	; (3c1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bd2:	0e1b      	lsrs	r3, r3, #24
    3bd4:	f003 0301 	and.w	r3, r3, #1
    3bd8:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3bda:	9a05      	ldr	r2, [sp, #20]
    3bdc:	a906      	add	r1, sp, #24
    3bde:	ab07      	add	r3, sp, #28
    3be0:	4618      	mov	r0, r3
    3be2:	f7ff f905 	bl	2df0 <Clock_Ip_TimeoutExpired>
    3be6:	4603      	mov	r3, r0
    3be8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3bec:	9b08      	ldr	r3, [sp, #32]
    3bee:	2b00      	cmp	r3, #0
    3bf0:	d106      	bne.n	3c00 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    3bf2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3bf6:	f083 0301 	eor.w	r3, r3, #1
    3bfa:	b2db      	uxtb	r3, r3
    3bfc:	2b00      	cmp	r3, #0
    3bfe:	d1e5      	bne.n	3bcc <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3c00:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3c04:	2b00      	cmp	r3, #0
    3c06:	d004      	beq.n	3c12 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3c08:	9b02      	ldr	r3, [sp, #8]
    3c0a:	4619      	mov	r1, r3
    3c0c:	2001      	movs	r0, #1
    3c0e:	f7ff f8c5 	bl	2d9c <Clock_Ip_ReportClockErrors>
        }
    }
}
    3c12:	bf00      	nop
    3c14:	b00b      	add	sp, #44	; 0x2c
    3c16:	f85d fb04 	ldr.w	pc, [sp], #4
    3c1a:	bf00      	nop
    3c1c:	40064000 	.word	0x40064000

00003c20 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c20:	b500      	push	{lr}
    3c22:	b089      	sub	sp, #36	; 0x24
    3c24:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3c26:	2300      	movs	r3, #0
    3c28:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3c2c:	4b1f      	ldr	r3, [pc, #124]	; (3cac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3c2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c32:	4a1e      	ldr	r2, [pc, #120]	; (3cac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3c34:	f043 0301 	orr.w	r3, r3, #1
    3c38:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3c3c:	4b1b      	ldr	r3, [pc, #108]	; (3cac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3c3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c42:	4a1a      	ldr	r2, [pc, #104]	; (3cac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3c44:	f043 0304 	orr.w	r3, r3, #4
    3c48:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3c4c:	aa03      	add	r2, sp, #12
    3c4e:	a904      	add	r1, sp, #16
    3c50:	a805      	add	r0, sp, #20
    3c52:	f24c 3350 	movw	r3, #50000	; 0xc350
    3c56:	f7ff f8b1 	bl	2dbc <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3c5a:	4b14      	ldr	r3, [pc, #80]	; (3cac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3c5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c60:	0e1b      	lsrs	r3, r3, #24
    3c62:	f003 0301 	and.w	r3, r3, #1
    3c66:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3c68:	9a03      	ldr	r2, [sp, #12]
    3c6a:	a904      	add	r1, sp, #16
    3c6c:	ab05      	add	r3, sp, #20
    3c6e:	4618      	mov	r0, r3
    3c70:	f7ff f8be 	bl	2df0 <Clock_Ip_TimeoutExpired>
    3c74:	4603      	mov	r3, r0
    3c76:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3c7a:	9b06      	ldr	r3, [sp, #24]
    3c7c:	2b00      	cmp	r3, #0
    3c7e:	d106      	bne.n	3c8e <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3c80:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3c84:	f083 0301 	eor.w	r3, r3, #1
    3c88:	b2db      	uxtb	r3, r3
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d1e5      	bne.n	3c5a <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3c8e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3c92:	2b00      	cmp	r3, #0
    3c94:	d005      	beq.n	3ca2 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3c96:	9b01      	ldr	r3, [sp, #4]
    3c98:	681b      	ldr	r3, [r3, #0]
    3c9a:	4619      	mov	r1, r3
    3c9c:	2001      	movs	r0, #1
    3c9e:	f7ff f87d 	bl	2d9c <Clock_Ip_ReportClockErrors>
    }
}
    3ca2:	bf00      	nop
    3ca4:	b009      	add	sp, #36	; 0x24
    3ca6:	f85d fb04 	ldr.w	pc, [sp], #4
    3caa:	bf00      	nop
    3cac:	40064000 	.word	0x40064000

00003cb0 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3cb0:	b082      	sub	sp, #8
    3cb2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3cb4:	4b09      	ldr	r3, [pc, #36]	; (3cdc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3cb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cba:	4a08      	ldr	r2, [pc, #32]	; (3cdc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3cbc:	f023 0301 	bic.w	r3, r3, #1
    3cc0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3cc4:	4b05      	ldr	r3, [pc, #20]	; (3cdc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3cc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cca:	4a04      	ldr	r2, [pc, #16]	; (3cdc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ccc:	f023 0304 	bic.w	r3, r3, #4
    3cd0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3cd4:	bf00      	nop
    3cd6:	b002      	add	sp, #8
    3cd8:	4770      	bx	lr
    3cda:	bf00      	nop
    3cdc:	40064000 	.word	0x40064000

00003ce0 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3ce0:	b082      	sub	sp, #8
    3ce2:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3ce4:	4b0f      	ldr	r3, [pc, #60]	; (3d24 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3ce6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cea:	4a0e      	ldr	r2, [pc, #56]	; (3d24 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3cec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3cf0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3cf4:	4b0b      	ldr	r3, [pc, #44]	; (3d24 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3cf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cfa:	4a0a      	ldr	r2, [pc, #40]	; (3d24 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3cfc:	f023 0304 	bic.w	r3, r3, #4
    3d00:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3d04:	4b07      	ldr	r3, [pc, #28]	; (3d24 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d06:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3d0a:	9b01      	ldr	r3, [sp, #4]
    3d0c:	7a1b      	ldrb	r3, [r3, #8]
    3d0e:	009b      	lsls	r3, r3, #2
    3d10:	f003 0304 	and.w	r3, r3, #4
    3d14:	4903      	ldr	r1, [pc, #12]	; (3d24 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d16:	4313      	orrs	r3, r2
    3d18:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3d1c:	bf00      	nop
    3d1e:	b002      	add	sp, #8
    3d20:	4770      	bx	lr
    3d22:	bf00      	nop
    3d24:	40064000 	.word	0x40064000

00003d28 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3d28:	b082      	sub	sp, #8
    3d2a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3d2c:	9b01      	ldr	r3, [sp, #4]
    3d2e:	889b      	ldrh	r3, [r3, #4]
    3d30:	2b01      	cmp	r3, #1
    3d32:	d107      	bne.n	3d44 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3d34:	4b05      	ldr	r3, [pc, #20]	; (3d4c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3d36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d3a:	4a04      	ldr	r2, [pc, #16]	; (3d4c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3d3c:	f043 0304 	orr.w	r3, r3, #4
    3d40:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3d44:	bf00      	nop
    3d46:	b002      	add	sp, #8
    3d48:	4770      	bx	lr
    3d4a:	bf00      	nop
    3d4c:	40064000 	.word	0x40064000

00003d50 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3d50:	b082      	sub	sp, #8
    3d52:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3d54:	4b05      	ldr	r3, [pc, #20]	; (3d6c <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3d56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d5a:	4a04      	ldr	r2, [pc, #16]	; (3d6c <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3d5c:	f023 0304 	bic.w	r3, r3, #4
    3d60:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3d64:	bf00      	nop
    3d66:	b002      	add	sp, #8
    3d68:	4770      	bx	lr
    3d6a:	bf00      	nop
    3d6c:	40064000 	.word	0x40064000

00003d70 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3d70:	b082      	sub	sp, #8
    3d72:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3d74:	4b0f      	ldr	r3, [pc, #60]	; (3db4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3d76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d7a:	4a0e      	ldr	r2, [pc, #56]	; (3db4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3d7c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3d80:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3d84:	4b0b      	ldr	r3, [pc, #44]	; (3db4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3d86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d8a:	4a0a      	ldr	r2, [pc, #40]	; (3db4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3d8c:	f023 0302 	bic.w	r3, r3, #2
    3d90:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3d94:	4b07      	ldr	r3, [pc, #28]	; (3db4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3d96:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3d9a:	9b01      	ldr	r3, [sp, #4]
    3d9c:	7a5b      	ldrb	r3, [r3, #9]
    3d9e:	005b      	lsls	r3, r3, #1
    3da0:	f003 0302 	and.w	r3, r3, #2
    3da4:	4903      	ldr	r1, [pc, #12]	; (3db4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3da6:	4313      	orrs	r3, r2
    3da8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3dac:	bf00      	nop
    3dae:	b002      	add	sp, #8
    3db0:	4770      	bx	lr
    3db2:	bf00      	nop
    3db4:	40064000 	.word	0x40064000

00003db8 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3db8:	b082      	sub	sp, #8
    3dba:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3dbc:	9b01      	ldr	r3, [sp, #4]
    3dbe:	889b      	ldrh	r3, [r3, #4]
    3dc0:	2b01      	cmp	r3, #1
    3dc2:	d107      	bne.n	3dd4 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3dc4:	4b05      	ldr	r3, [pc, #20]	; (3ddc <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3dc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3dca:	4a04      	ldr	r2, [pc, #16]	; (3ddc <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3dcc:	f043 0302 	orr.w	r3, r3, #2
    3dd0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3dd4:	bf00      	nop
    3dd6:	b002      	add	sp, #8
    3dd8:	4770      	bx	lr
    3dda:	bf00      	nop
    3ddc:	40064000 	.word	0x40064000

00003de0 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3de0:	b082      	sub	sp, #8
    3de2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3de4:	4b05      	ldr	r3, [pc, #20]	; (3dfc <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3de6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3dea:	4a04      	ldr	r2, [pc, #16]	; (3dfc <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3dec:	f023 0302 	bic.w	r3, r3, #2
    3df0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3df4:	bf00      	nop
    3df6:	b002      	add	sp, #8
    3df8:	4770      	bx	lr
    3dfa:	bf00      	nop
    3dfc:	40064000 	.word	0x40064000

00003e00 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e00:	b500      	push	{lr}
    3e02:	b08b      	sub	sp, #44	; 0x2c
    3e04:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3e06:	9b01      	ldr	r3, [sp, #4]
    3e08:	681a      	ldr	r2, [r3, #0]
    3e0a:	4975      	ldr	r1, [pc, #468]	; (3fe0 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3e0c:	4613      	mov	r3, r2
    3e0e:	00db      	lsls	r3, r3, #3
    3e10:	4413      	add	r3, r2
    3e12:	440b      	add	r3, r1
    3e14:	781b      	ldrb	r3, [r3, #0]
    3e16:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3e18:	2300      	movs	r3, #0
    3e1a:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3e1e:	2300      	movs	r3, #0
    3e20:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3e24:	4b6f      	ldr	r3, [pc, #444]	; (3fe4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3e26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e2a:	4a6e      	ldr	r2, [pc, #440]	; (3fe4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3e2c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3e30:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3e34:	4b6b      	ldr	r3, [pc, #428]	; (3fe4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3e36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3e3e:	2b00      	cmp	r3, #0
    3e40:	d07d      	beq.n	3f3e <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3e42:	9b01      	ldr	r3, [sp, #4]
    3e44:	79db      	ldrb	r3, [r3, #7]
    3e46:	461a      	mov	r2, r3
    3e48:	4b66      	ldr	r3, [pc, #408]	; (3fe4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3e4a:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3e4e:	f003 0303 	and.w	r3, r3, #3
    3e52:	429a      	cmp	r2, r3
    3e54:	d10b      	bne.n	3e6e <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3e56:	9b01      	ldr	r3, [sp, #4]
    3e58:	799b      	ldrb	r3, [r3, #6]
    3e5a:	461a      	mov	r2, r3
    3e5c:	4b61      	ldr	r3, [pc, #388]	; (3fe4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3e5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e62:	08db      	lsrs	r3, r3, #3
    3e64:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3e68:	429a      	cmp	r2, r3
    3e6a:	f000 80b4 	beq.w	3fd6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3e6e:	4b5d      	ldr	r3, [pc, #372]	; (3fe4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3e70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e74:	f003 0301 	and.w	r3, r3, #1
    3e78:	2b00      	cmp	r3, #0
    3e7a:	d105      	bne.n	3e88 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3e7c:	2301      	movs	r3, #1
    3e7e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3e82:	2000      	movs	r0, #0
    3e84:	f7ff fd66 	bl	3954 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3e88:	2002      	movs	r0, #2
    3e8a:	f7ff fdcf 	bl	3a2c <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3e8e:	4b55      	ldr	r3, [pc, #340]	; (3fe4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3e90:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e94:	4a53      	ldr	r2, [pc, #332]	; (3fe4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3e96:	f023 0301 	bic.w	r3, r3, #1
    3e9a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3e9e:	9b01      	ldr	r3, [sp, #4]
    3ea0:	889b      	ldrh	r3, [r3, #4]
    3ea2:	2b01      	cmp	r3, #1
    3ea4:	f040 8097 	bne.w	3fd6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3ea8:	9b01      	ldr	r3, [sp, #4]
    3eaa:	79db      	ldrb	r3, [r3, #7]
    3eac:	4a4d      	ldr	r2, [pc, #308]	; (3fe4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3eae:	f003 0303 	and.w	r3, r3, #3
    3eb2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3eb6:	4b4b      	ldr	r3, [pc, #300]	; (3fe4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3eb8:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3ebc:	9b01      	ldr	r3, [sp, #4]
    3ebe:	799b      	ldrb	r3, [r3, #6]
    3ec0:	00db      	lsls	r3, r3, #3
    3ec2:	f003 0308 	and.w	r3, r3, #8
    3ec6:	4313      	orrs	r3, r2
    3ec8:	4a46      	ldr	r2, [pc, #280]	; (3fe4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3eca:	f043 0301 	orr.w	r3, r3, #1
    3ece:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3ed2:	aa03      	add	r2, sp, #12
    3ed4:	a904      	add	r1, sp, #16
    3ed6:	a805      	add	r0, sp, #20
    3ed8:	f24c 3350 	movw	r3, #50000	; 0xc350
    3edc:	f7fe ff6e 	bl	2dbc <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3ee0:	4b40      	ldr	r3, [pc, #256]	; (3fe4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ee2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ee6:	0e1b      	lsrs	r3, r3, #24
    3ee8:	f003 0301 	and.w	r3, r3, #1
    3eec:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3eee:	9a03      	ldr	r2, [sp, #12]
    3ef0:	a904      	add	r1, sp, #16
    3ef2:	ab05      	add	r3, sp, #20
    3ef4:	4618      	mov	r0, r3
    3ef6:	f7fe ff7b 	bl	2df0 <Clock_Ip_TimeoutExpired>
    3efa:	4603      	mov	r3, r0
    3efc:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3f00:	9b06      	ldr	r3, [sp, #24]
    3f02:	2b00      	cmp	r3, #0
    3f04:	d106      	bne.n	3f14 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3f06:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3f0a:	f083 0301 	eor.w	r3, r3, #1
    3f0e:	b2db      	uxtb	r3, r3
    3f10:	2b00      	cmp	r3, #0
    3f12:	d1e5      	bne.n	3ee0 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3f14:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3f18:	2b00      	cmp	r3, #0
    3f1a:	d005      	beq.n	3f28 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3f1c:	9b01      	ldr	r3, [sp, #4]
    3f1e:	681b      	ldr	r3, [r3, #0]
    3f20:	4619      	mov	r1, r3
    3f22:	2001      	movs	r0, #1
    3f24:	f7fe ff3a 	bl	2d9c <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3f28:	2003      	movs	r0, #3
    3f2a:	f7ff fd7f 	bl	3a2c <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3f2e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3f32:	2b00      	cmp	r3, #0
    3f34:	d04f      	beq.n	3fd6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3f36:	2002      	movs	r0, #2
    3f38:	f7ff fd26 	bl	3988 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3f3c:	e04b      	b.n	3fd6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3f3e:	4b29      	ldr	r3, [pc, #164]	; (3fe4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f40:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f44:	4a27      	ldr	r2, [pc, #156]	; (3fe4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f46:	f023 0301 	bic.w	r3, r3, #1
    3f4a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3f4e:	9b01      	ldr	r3, [sp, #4]
    3f50:	889b      	ldrh	r3, [r3, #4]
    3f52:	2b01      	cmp	r3, #1
    3f54:	d13f      	bne.n	3fd6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3f56:	9b01      	ldr	r3, [sp, #4]
    3f58:	79db      	ldrb	r3, [r3, #7]
    3f5a:	4a22      	ldr	r2, [pc, #136]	; (3fe4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f5c:	f003 0303 	and.w	r3, r3, #3
    3f60:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3f64:	4b1f      	ldr	r3, [pc, #124]	; (3fe4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f66:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3f6a:	9b01      	ldr	r3, [sp, #4]
    3f6c:	799b      	ldrb	r3, [r3, #6]
    3f6e:	00db      	lsls	r3, r3, #3
    3f70:	f003 0308 	and.w	r3, r3, #8
    3f74:	4313      	orrs	r3, r2
    3f76:	4a1b      	ldr	r2, [pc, #108]	; (3fe4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f78:	f043 0301 	orr.w	r3, r3, #1
    3f7c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3f80:	aa03      	add	r2, sp, #12
    3f82:	a904      	add	r1, sp, #16
    3f84:	a805      	add	r0, sp, #20
    3f86:	f24c 3350 	movw	r3, #50000	; 0xc350
    3f8a:	f7fe ff17 	bl	2dbc <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3f8e:	4b15      	ldr	r3, [pc, #84]	; (3fe4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f90:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f94:	0e1b      	lsrs	r3, r3, #24
    3f96:	f003 0301 	and.w	r3, r3, #1
    3f9a:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3f9c:	9a03      	ldr	r2, [sp, #12]
    3f9e:	a904      	add	r1, sp, #16
    3fa0:	ab05      	add	r3, sp, #20
    3fa2:	4618      	mov	r0, r3
    3fa4:	f7fe ff24 	bl	2df0 <Clock_Ip_TimeoutExpired>
    3fa8:	4603      	mov	r3, r0
    3faa:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3fae:	9b06      	ldr	r3, [sp, #24]
    3fb0:	2b00      	cmp	r3, #0
    3fb2:	d106      	bne.n	3fc2 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3fb4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3fb8:	f083 0301 	eor.w	r3, r3, #1
    3fbc:	b2db      	uxtb	r3, r3
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d1e5      	bne.n	3f8e <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3fc2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3fc6:	2b00      	cmp	r3, #0
    3fc8:	d005      	beq.n	3fd6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3fca:	9b01      	ldr	r3, [sp, #4]
    3fcc:	681b      	ldr	r3, [r3, #0]
    3fce:	4619      	mov	r1, r3
    3fd0:	2001      	movs	r0, #1
    3fd2:	f7fe fee3 	bl	2d9c <Clock_Ip_ReportClockErrors>
}
    3fd6:	bf00      	nop
    3fd8:	b00b      	add	sp, #44	; 0x2c
    3fda:	f85d fb04 	ldr.w	pc, [sp], #4
    3fde:	bf00      	nop
    3fe0:	0000f840 	.word	0x0000f840
    3fe4:	40064000 	.word	0x40064000

00003fe8 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3fe8:	b500      	push	{lr}
    3fea:	b089      	sub	sp, #36	; 0x24
    3fec:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3fee:	2300      	movs	r3, #0
    3ff0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3ff4:	9b01      	ldr	r3, [sp, #4]
    3ff6:	889b      	ldrh	r3, [r3, #4]
    3ff8:	2b01      	cmp	r3, #1
    3ffa:	d132      	bne.n	4062 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3ffc:	4b1b      	ldr	r3, [pc, #108]	; (406c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3ffe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4002:	4a1a      	ldr	r2, [pc, #104]	; (406c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4004:	f043 0301 	orr.w	r3, r3, #1
    4008:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    400c:	aa03      	add	r2, sp, #12
    400e:	a904      	add	r1, sp, #16
    4010:	a805      	add	r0, sp, #20
    4012:	f24c 3350 	movw	r3, #50000	; 0xc350
    4016:	f7fe fed1 	bl	2dbc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    401a:	4b14      	ldr	r3, [pc, #80]	; (406c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    401c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4020:	0e1b      	lsrs	r3, r3, #24
    4022:	f003 0301 	and.w	r3, r3, #1
    4026:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4028:	9a03      	ldr	r2, [sp, #12]
    402a:	a904      	add	r1, sp, #16
    402c:	ab05      	add	r3, sp, #20
    402e:	4618      	mov	r0, r3
    4030:	f7fe fede 	bl	2df0 <Clock_Ip_TimeoutExpired>
    4034:	4603      	mov	r3, r0
    4036:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    403a:	9b06      	ldr	r3, [sp, #24]
    403c:	2b00      	cmp	r3, #0
    403e:	d106      	bne.n	404e <Clock_Ip_EnableFirc_TrustedCall+0x66>
    4040:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4044:	f083 0301 	eor.w	r3, r3, #1
    4048:	b2db      	uxtb	r3, r3
    404a:	2b00      	cmp	r3, #0
    404c:	d1e5      	bne.n	401a <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    404e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4052:	2b00      	cmp	r3, #0
    4054:	d005      	beq.n	4062 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4056:	9b01      	ldr	r3, [sp, #4]
    4058:	681b      	ldr	r3, [r3, #0]
    405a:	4619      	mov	r1, r3
    405c:	2001      	movs	r0, #1
    405e:	f7fe fe9d 	bl	2d9c <Clock_Ip_ReportClockErrors>
        }
    }
}
    4062:	bf00      	nop
    4064:	b009      	add	sp, #36	; 0x24
    4066:	f85d fb04 	ldr.w	pc, [sp], #4
    406a:	bf00      	nop
    406c:	40064000 	.word	0x40064000

00004070 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    4070:	b082      	sub	sp, #8
    4072:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    4074:	4b05      	ldr	r3, [pc, #20]	; (408c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4076:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    407a:	4a04      	ldr	r2, [pc, #16]	; (408c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    407c:	f023 0301 	bic.w	r3, r3, #1
    4080:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4084:	bf00      	nop
    4086:	b002      	add	sp, #8
    4088:	4770      	bx	lr
    408a:	bf00      	nop
    408c:	40064000 	.word	0x40064000

00004090 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    4090:	b082      	sub	sp, #8
    4092:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4094:	bf00      	nop
    4096:	b002      	add	sp, #8
    4098:	4770      	bx	lr

0000409a <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    409a:	b082      	sub	sp, #8
    409c:	9001      	str	r0, [sp, #4]
    409e:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    40a0:	bf00      	nop
    40a2:	b002      	add	sp, #8
    40a4:	4770      	bx	lr

000040a6 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    40a6:	b082      	sub	sp, #8
    40a8:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    40aa:	bf00      	nop
    40ac:	b002      	add	sp, #8
    40ae:	4770      	bx	lr

000040b0 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    40b0:	b082      	sub	sp, #8
    40b2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    40b4:	bf00      	nop
    40b6:	b002      	add	sp, #8
    40b8:	4770      	bx	lr

000040ba <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    40ba:	b082      	sub	sp, #8
    40bc:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    40be:	2302      	movs	r3, #2
}
    40c0:	4618      	mov	r0, r3
    40c2:	b002      	add	sp, #8
    40c4:	4770      	bx	lr

000040c6 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    40c6:	b082      	sub	sp, #8
    40c8:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    40ca:	bf00      	nop
    40cc:	b002      	add	sp, #8
    40ce:	4770      	bx	lr

000040d0 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    40d0:	b500      	push	{lr}
    40d2:	b083      	sub	sp, #12
    40d4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40d6:	9b01      	ldr	r3, [sp, #4]
    40d8:	2b00      	cmp	r3, #0
    40da:	d002      	beq.n	40e2 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    40dc:	9801      	ldr	r0, [sp, #4]
    40de:	f000 f870 	bl	41c2 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40e2:	bf00      	nop
    40e4:	b003      	add	sp, #12
    40e6:	f85d fb04 	ldr.w	pc, [sp], #4

000040ea <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    40ea:	b500      	push	{lr}
    40ec:	b083      	sub	sp, #12
    40ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40f0:	9b01      	ldr	r3, [sp, #4]
    40f2:	2b00      	cmp	r3, #0
    40f4:	d002      	beq.n	40fc <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    40f6:	9801      	ldr	r0, [sp, #4]
    40f8:	f000 f89a 	bl	4230 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40fc:	bf00      	nop
    40fe:	b003      	add	sp, #12
    4100:	f85d fb04 	ldr.w	pc, [sp], #4

00004104 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4104:	b500      	push	{lr}
    4106:	b089      	sub	sp, #36	; 0x24
    4108:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    410a:	2301      	movs	r3, #1
    410c:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    410e:	2300      	movs	r3, #0
    4110:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    4114:	4b1e      	ldr	r3, [pc, #120]	; (4190 <Clock_Ip_CompleteSpll+0x8c>)
    4116:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    411a:	f003 0301 	and.w	r3, r3, #1
    411e:	2b00      	cmp	r3, #0
    4120:	d02f      	beq.n	4182 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4122:	aa02      	add	r2, sp, #8
    4124:	a903      	add	r1, sp, #12
    4126:	a804      	add	r0, sp, #16
    4128:	f24c 3350 	movw	r3, #50000	; 0xc350
    412c:	f7fe fe46 	bl	2dbc <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    4130:	4b17      	ldr	r3, [pc, #92]	; (4190 <Clock_Ip_CompleteSpll+0x8c>)
    4132:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4136:	0e1b      	lsrs	r3, r3, #24
    4138:	f003 0301 	and.w	r3, r3, #1
    413c:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    413e:	9a02      	ldr	r2, [sp, #8]
    4140:	a903      	add	r1, sp, #12
    4142:	ab04      	add	r3, sp, #16
    4144:	4618      	mov	r0, r3
    4146:	f7fe fe53 	bl	2df0 <Clock_Ip_TimeoutExpired>
    414a:	4603      	mov	r3, r0
    414c:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    4150:	9b05      	ldr	r3, [sp, #20]
    4152:	2b00      	cmp	r3, #0
    4154:	d106      	bne.n	4164 <Clock_Ip_CompleteSpll+0x60>
    4156:	f89d 301b 	ldrb.w	r3, [sp, #27]
    415a:	f083 0301 	eor.w	r3, r3, #1
    415e:	b2db      	uxtb	r3, r3
    4160:	2b00      	cmp	r3, #0
    4162:	d1e5      	bne.n	4130 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    4164:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4168:	f083 0301 	eor.w	r3, r3, #1
    416c:	b2db      	uxtb	r3, r3
    416e:	2b00      	cmp	r3, #0
    4170:	d002      	beq.n	4178 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    4172:	2302      	movs	r3, #2
    4174:	9307      	str	r3, [sp, #28]
    4176:	e006      	b.n	4186 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    4178:	9901      	ldr	r1, [sp, #4]
    417a:	2001      	movs	r0, #1
    417c:	f7fe fe0e 	bl	2d9c <Clock_Ip_ReportClockErrors>
    4180:	e001      	b.n	4186 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    4182:	2300      	movs	r3, #0
    4184:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    4186:	9b07      	ldr	r3, [sp, #28]
}
    4188:	4618      	mov	r0, r3
    418a:	b009      	add	sp, #36	; 0x24
    418c:	f85d fb04 	ldr.w	pc, [sp], #4
    4190:	40064000 	.word	0x40064000

00004194 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    4194:	b500      	push	{lr}
    4196:	b083      	sub	sp, #12
    4198:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    419a:	9801      	ldr	r0, [sp, #4]
    419c:	f000 f886 	bl	42ac <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    41a0:	bf00      	nop
    41a2:	b003      	add	sp, #12
    41a4:	f85d fb04 	ldr.w	pc, [sp], #4

000041a8 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    41a8:	b500      	push	{lr}
    41aa:	b083      	sub	sp, #12
    41ac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41ae:	9b01      	ldr	r3, [sp, #4]
    41b0:	2b00      	cmp	r3, #0
    41b2:	d002      	beq.n	41ba <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    41b4:	9801      	ldr	r0, [sp, #4]
    41b6:	f000 f891 	bl	42dc <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41ba:	bf00      	nop
    41bc:	b003      	add	sp, #12
    41be:	f85d fb04 	ldr.w	pc, [sp], #4

000041c2 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    41c2:	b082      	sub	sp, #8
    41c4:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    41c6:	4b19      	ldr	r3, [pc, #100]	; (422c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    41c8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    41cc:	4a17      	ldr	r2, [pc, #92]	; (422c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    41ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    41d2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    41d6:	4b15      	ldr	r3, [pc, #84]	; (422c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    41d8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    41dc:	4a13      	ldr	r2, [pc, #76]	; (422c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    41de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    41e2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    41e6:	4b11      	ldr	r3, [pc, #68]	; (422c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    41e8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    41ec:	4a0f      	ldr	r2, [pc, #60]	; (422c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    41ee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    41f2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    41f6:	4b0d      	ldr	r3, [pc, #52]	; (422c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    41f8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    41fc:	4a0b      	ldr	r2, [pc, #44]	; (422c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    41fe:	f023 0301 	bic.w	r3, r3, #1
    4202:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4206:	4b09      	ldr	r3, [pc, #36]	; (422c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4208:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    420c:	4a07      	ldr	r2, [pc, #28]	; (422c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    420e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    4212:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4216:	4b05      	ldr	r3, [pc, #20]	; (422c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4218:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    421c:	4a03      	ldr	r2, [pc, #12]	; (422c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    421e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    4222:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4226:	bf00      	nop
    4228:	b002      	add	sp, #8
    422a:	4770      	bx	lr
    422c:	40064000 	.word	0x40064000

00004230 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4230:	b082      	sub	sp, #8
    4232:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4234:	9b01      	ldr	r3, [sp, #4]
    4236:	889b      	ldrh	r3, [r3, #4]
    4238:	2b01      	cmp	r3, #1
    423a:	d12f      	bne.n	429c <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    423c:	4b1a      	ldr	r3, [pc, #104]	; (42a8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    423e:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    4242:	9b01      	ldr	r3, [sp, #4]
    4244:	7b5b      	ldrb	r3, [r3, #13]
    4246:	3b01      	subs	r3, #1
    4248:	021b      	lsls	r3, r3, #8
    424a:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    424e:	9b01      	ldr	r3, [sp, #4]
    4250:	7d1b      	ldrb	r3, [r3, #20]
    4252:	3b10      	subs	r3, #16
    4254:	041b      	lsls	r3, r3, #16
    4256:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    425a:	430b      	orrs	r3, r1
    425c:	4912      	ldr	r1, [pc, #72]	; (42a8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    425e:	4313      	orrs	r3, r2
    4260:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4264:	9b01      	ldr	r3, [sp, #4]
    4266:	7fdb      	ldrb	r3, [r3, #31]
    4268:	2b02      	cmp	r3, #2
    426a:	d011      	beq.n	4290 <Clock_Ip_SetSpll_TrustedCall+0x60>
    426c:	2b02      	cmp	r3, #2
    426e:	dc17      	bgt.n	42a0 <Clock_Ip_SetSpll_TrustedCall+0x70>
    4270:	2b00      	cmp	r3, #0
    4272:	d002      	beq.n	427a <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4274:	2b01      	cmp	r3, #1
    4276:	d005      	beq.n	4284 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4278:	e012      	b.n	42a0 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    427a:	4b0b      	ldr	r3, [pc, #44]	; (42a8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    427c:	2200      	movs	r2, #0
    427e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4282:	e00e      	b.n	42a2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4284:	4b08      	ldr	r3, [pc, #32]	; (42a8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4286:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    428a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    428e:	e008      	b.n	42a2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4290:	4b05      	ldr	r3, [pc, #20]	; (42a8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4292:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4296:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    429a:	e002      	b.n	42a2 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    429c:	bf00      	nop
    429e:	e000      	b.n	42a2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    42a0:	bf00      	nop
}
    42a2:	bf00      	nop
    42a4:	b002      	add	sp, #8
    42a6:	4770      	bx	lr
    42a8:	40064000 	.word	0x40064000

000042ac <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    42ac:	b082      	sub	sp, #8
    42ae:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    42b0:	4b09      	ldr	r3, [pc, #36]	; (42d8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    42b2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    42b6:	4a08      	ldr	r2, [pc, #32]	; (42d8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    42b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    42bc:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    42c0:	4b05      	ldr	r3, [pc, #20]	; (42d8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    42c2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    42c6:	4a04      	ldr	r2, [pc, #16]	; (42d8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    42c8:	f023 0301 	bic.w	r3, r3, #1
    42cc:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    42d0:	bf00      	nop
    42d2:	b002      	add	sp, #8
    42d4:	4770      	bx	lr
    42d6:	bf00      	nop
    42d8:	40064000 	.word	0x40064000

000042dc <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    42dc:	b082      	sub	sp, #8
    42de:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    42e0:	9b01      	ldr	r3, [sp, #4]
    42e2:	889b      	ldrh	r3, [r3, #4]
    42e4:	2b01      	cmp	r3, #1
    42e6:	d107      	bne.n	42f8 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    42e8:	4b05      	ldr	r3, [pc, #20]	; (4300 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    42ea:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    42ee:	4a04      	ldr	r2, [pc, #16]	; (4300 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    42f0:	f043 0301 	orr.w	r3, r3, #1
    42f4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    42f8:	bf00      	nop
    42fa:	b002      	add	sp, #8
    42fc:	4770      	bx	lr
    42fe:	bf00      	nop
    4300:	40064000 	.word	0x40064000

00004304 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4304:	b082      	sub	sp, #8
    4306:	9001      	str	r0, [sp, #4]
    4308:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    430a:	bf00      	nop
    430c:	b002      	add	sp, #8
    430e:	4770      	bx	lr

00004310 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4310:	b082      	sub	sp, #8
    4312:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4314:	bf00      	nop
    4316:	b002      	add	sp, #8
    4318:	4770      	bx	lr

0000431a <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    431a:	b500      	push	{lr}
    431c:	b083      	sub	sp, #12
    431e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4320:	9b01      	ldr	r3, [sp, #4]
    4322:	2b00      	cmp	r3, #0
    4324:	d002      	beq.n	432c <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4326:	9801      	ldr	r0, [sp, #4]
    4328:	f000 f8ee 	bl	4508 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    432c:	bf00      	nop
    432e:	b003      	add	sp, #12
    4330:	f85d fb04 	ldr.w	pc, [sp], #4

00004334 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4334:	b500      	push	{lr}
    4336:	b083      	sub	sp, #12
    4338:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    433a:	9b01      	ldr	r3, [sp, #4]
    433c:	2b00      	cmp	r3, #0
    433e:	d002      	beq.n	4346 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    4340:	9801      	ldr	r0, [sp, #4]
    4342:	f000 f8ff 	bl	4544 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4346:	bf00      	nop
    4348:	b003      	add	sp, #12
    434a:	f85d fb04 	ldr.w	pc, [sp], #4

0000434e <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    434e:	b500      	push	{lr}
    4350:	b083      	sub	sp, #12
    4352:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4354:	9b01      	ldr	r3, [sp, #4]
    4356:	2b00      	cmp	r3, #0
    4358:	d002      	beq.n	4360 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    435a:	9801      	ldr	r0, [sp, #4]
    435c:	f000 f912 	bl	4584 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4360:	bf00      	nop
    4362:	b003      	add	sp, #12
    4364:	f85d fb04 	ldr.w	pc, [sp], #4

00004368 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4368:	b500      	push	{lr}
    436a:	b083      	sub	sp, #12
    436c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    436e:	9b01      	ldr	r3, [sp, #4]
    4370:	2b00      	cmp	r3, #0
    4372:	d002      	beq.n	437a <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4374:	9801      	ldr	r0, [sp, #4]
    4376:	f000 f925 	bl	45c4 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    437a:	bf00      	nop
    437c:	b003      	add	sp, #12
    437e:	f85d fb04 	ldr.w	pc, [sp], #4

00004382 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4382:	b500      	push	{lr}
    4384:	b083      	sub	sp, #12
    4386:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4388:	9b01      	ldr	r3, [sp, #4]
    438a:	2b00      	cmp	r3, #0
    438c:	d002      	beq.n	4394 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    438e:	9801      	ldr	r0, [sp, #4]
    4390:	f000 f936 	bl	4600 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4394:	bf00      	nop
    4396:	b003      	add	sp, #12
    4398:	f85d fb04 	ldr.w	pc, [sp], #4

0000439c <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    439c:	b500      	push	{lr}
    439e:	b083      	sub	sp, #12
    43a0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43a2:	9b01      	ldr	r3, [sp, #4]
    43a4:	2b00      	cmp	r3, #0
    43a6:	d002      	beq.n	43ae <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    43a8:	9801      	ldr	r0, [sp, #4]
    43aa:	f000 f949 	bl	4640 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43ae:	bf00      	nop
    43b0:	b003      	add	sp, #12
    43b2:	f85d fb04 	ldr.w	pc, [sp], #4

000043b6 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    43b6:	b500      	push	{lr}
    43b8:	b083      	sub	sp, #12
    43ba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43bc:	9b01      	ldr	r3, [sp, #4]
    43be:	2b00      	cmp	r3, #0
    43c0:	d002      	beq.n	43c8 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    43c2:	9801      	ldr	r0, [sp, #4]
    43c4:	f000 f958 	bl	4678 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43c8:	bf00      	nop
    43ca:	b003      	add	sp, #12
    43cc:	f85d fb04 	ldr.w	pc, [sp], #4

000043d0 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    43d0:	b500      	push	{lr}
    43d2:	b083      	sub	sp, #12
    43d4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43d6:	9b01      	ldr	r3, [sp, #4]
    43d8:	2b00      	cmp	r3, #0
    43da:	d002      	beq.n	43e2 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    43dc:	9801      	ldr	r0, [sp, #4]
    43de:	f000 f969 	bl	46b4 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43e2:	bf00      	nop
    43e4:	b003      	add	sp, #12
    43e6:	f85d fb04 	ldr.w	pc, [sp], #4

000043ea <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    43ea:	b500      	push	{lr}
    43ec:	b083      	sub	sp, #12
    43ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43f0:	9b01      	ldr	r3, [sp, #4]
    43f2:	2b00      	cmp	r3, #0
    43f4:	d002      	beq.n	43fc <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    43f6:	9801      	ldr	r0, [sp, #4]
    43f8:	f000 f978 	bl	46ec <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43fc:	bf00      	nop
    43fe:	b003      	add	sp, #12
    4400:	f85d fb04 	ldr.w	pc, [sp], #4

00004404 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4404:	b500      	push	{lr}
    4406:	b083      	sub	sp, #12
    4408:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    440a:	9b01      	ldr	r3, [sp, #4]
    440c:	2b00      	cmp	r3, #0
    440e:	d002      	beq.n	4416 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4410:	9801      	ldr	r0, [sp, #4]
    4412:	f000 f989 	bl	4728 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4416:	bf00      	nop
    4418:	b003      	add	sp, #12
    441a:	f85d fb04 	ldr.w	pc, [sp], #4

0000441e <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    441e:	b500      	push	{lr}
    4420:	b083      	sub	sp, #12
    4422:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4424:	9b01      	ldr	r3, [sp, #4]
    4426:	2b00      	cmp	r3, #0
    4428:	d002      	beq.n	4430 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    442a:	9801      	ldr	r0, [sp, #4]
    442c:	f000 f998 	bl	4760 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4430:	bf00      	nop
    4432:	b003      	add	sp, #12
    4434:	f85d fb04 	ldr.w	pc, [sp], #4

00004438 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4438:	b500      	push	{lr}
    443a:	b083      	sub	sp, #12
    443c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    443e:	9b01      	ldr	r3, [sp, #4]
    4440:	2b00      	cmp	r3, #0
    4442:	d002      	beq.n	444a <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4444:	9801      	ldr	r0, [sp, #4]
    4446:	f000 f9a9 	bl	479c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    444a:	bf00      	nop
    444c:	b003      	add	sp, #12
    444e:	f85d fb04 	ldr.w	pc, [sp], #4

00004452 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4452:	b500      	push	{lr}
    4454:	b083      	sub	sp, #12
    4456:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4458:	9b01      	ldr	r3, [sp, #4]
    445a:	2b00      	cmp	r3, #0
    445c:	d002      	beq.n	4464 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    445e:	9801      	ldr	r0, [sp, #4]
    4460:	f000 f9e6 	bl	4830 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4464:	bf00      	nop
    4466:	b003      	add	sp, #12
    4468:	f85d fb04 	ldr.w	pc, [sp], #4

0000446c <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    446c:	b500      	push	{lr}
    446e:	b083      	sub	sp, #12
    4470:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4472:	9b01      	ldr	r3, [sp, #4]
    4474:	2b00      	cmp	r3, #0
    4476:	d002      	beq.n	447e <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    4478:	9801      	ldr	r0, [sp, #4]
    447a:	f000 fa25 	bl	48c8 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    447e:	bf00      	nop
    4480:	b003      	add	sp, #12
    4482:	f85d fb04 	ldr.w	pc, [sp], #4

00004486 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4486:	b500      	push	{lr}
    4488:	b083      	sub	sp, #12
    448a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    448c:	9b01      	ldr	r3, [sp, #4]
    448e:	2b00      	cmp	r3, #0
    4490:	d002      	beq.n	4498 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    4492:	9801      	ldr	r0, [sp, #4]
    4494:	f000 fa2a 	bl	48ec <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4498:	bf00      	nop
    449a:	b003      	add	sp, #12
    449c:	f85d fb04 	ldr.w	pc, [sp], #4

000044a0 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    44a0:	b500      	push	{lr}
    44a2:	b083      	sub	sp, #12
    44a4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44a6:	9b01      	ldr	r3, [sp, #4]
    44a8:	2b00      	cmp	r3, #0
    44aa:	d002      	beq.n	44b2 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    44ac:	9801      	ldr	r0, [sp, #4]
    44ae:	f000 fa3b 	bl	4928 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44b2:	bf00      	nop
    44b4:	b003      	add	sp, #12
    44b6:	f85d fb04 	ldr.w	pc, [sp], #4

000044ba <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    44ba:	b500      	push	{lr}
    44bc:	b083      	sub	sp, #12
    44be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44c0:	9b01      	ldr	r3, [sp, #4]
    44c2:	2b00      	cmp	r3, #0
    44c4:	d002      	beq.n	44cc <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    44c6:	9801      	ldr	r0, [sp, #4]
    44c8:	f000 fa56 	bl	4978 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44cc:	bf00      	nop
    44ce:	b003      	add	sp, #12
    44d0:	f85d fb04 	ldr.w	pc, [sp], #4

000044d4 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    44d4:	b500      	push	{lr}
    44d6:	b083      	sub	sp, #12
    44d8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44da:	9b01      	ldr	r3, [sp, #4]
    44dc:	2b00      	cmp	r3, #0
    44de:	d002      	beq.n	44e6 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    44e0:	9801      	ldr	r0, [sp, #4]
    44e2:	f000 fa79 	bl	49d8 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44e6:	bf00      	nop
    44e8:	b003      	add	sp, #12
    44ea:	f85d fb04 	ldr.w	pc, [sp], #4

000044ee <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    44ee:	b500      	push	{lr}
    44f0:	b083      	sub	sp, #12
    44f2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44f4:	9b01      	ldr	r3, [sp, #4]
    44f6:	2b00      	cmp	r3, #0
    44f8:	d002      	beq.n	4500 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    44fa:	9801      	ldr	r0, [sp, #4]
    44fc:	f000 fa8a 	bl	4a14 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4500:	bf00      	nop
    4502:	b003      	add	sp, #12
    4504:	f85d fb04 	ldr.w	pc, [sp], #4

00004508 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4508:	b084      	sub	sp, #16
    450a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    450c:	4b0b      	ldr	r3, [pc, #44]	; (453c <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    450e:	795b      	ldrb	r3, [r3, #5]
    4510:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    4512:	4b0b      	ldr	r3, [pc, #44]	; (4540 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4514:	695b      	ldr	r3, [r3, #20]
    4516:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4518:	9b02      	ldr	r3, [sp, #8]
    451a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    451e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4520:	9b03      	ldr	r3, [sp, #12]
    4522:	061b      	lsls	r3, r3, #24
    4524:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4528:	9a02      	ldr	r2, [sp, #8]
    452a:	4313      	orrs	r3, r2
    452c:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    452e:	4a04      	ldr	r2, [pc, #16]	; (4540 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4530:	9b02      	ldr	r3, [sp, #8]
    4532:	6153      	str	r3, [r2, #20]
}
    4534:	bf00      	nop
    4536:	b004      	add	sp, #16
    4538:	4770      	bx	lr
    453a:	bf00      	nop
    453c:	0000fba8 	.word	0x0000fba8
    4540:	40064000 	.word	0x40064000

00004544 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4544:	b084      	sub	sp, #16
    4546:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4548:	9b01      	ldr	r3, [sp, #4]
    454a:	685b      	ldr	r3, [r3, #4]
    454c:	4a0b      	ldr	r2, [pc, #44]	; (457c <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    454e:	5cd3      	ldrb	r3, [r2, r3]
    4550:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    4552:	4b0b      	ldr	r3, [pc, #44]	; (4580 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4554:	695b      	ldr	r3, [r3, #20]
    4556:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4558:	9b02      	ldr	r3, [sp, #8]
    455a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    455e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4560:	9b03      	ldr	r3, [sp, #12]
    4562:	061b      	lsls	r3, r3, #24
    4564:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4568:	9a02      	ldr	r2, [sp, #8]
    456a:	4313      	orrs	r3, r2
    456c:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    456e:	4a04      	ldr	r2, [pc, #16]	; (4580 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4570:	9b02      	ldr	r3, [sp, #8]
    4572:	6153      	str	r3, [r2, #20]
}
    4574:	bf00      	nop
    4576:	b004      	add	sp, #16
    4578:	4770      	bx	lr
    457a:	bf00      	nop
    457c:	0000fba8 	.word	0x0000fba8
    4580:	40064000 	.word	0x40064000

00004584 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4584:	b084      	sub	sp, #16
    4586:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4588:	9b01      	ldr	r3, [sp, #4]
    458a:	685b      	ldr	r3, [r3, #4]
    458c:	4a0b      	ldr	r2, [pc, #44]	; (45bc <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    458e:	5cd3      	ldrb	r3, [r2, r3]
    4590:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    4592:	4b0b      	ldr	r3, [pc, #44]	; (45c0 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4594:	699b      	ldr	r3, [r3, #24]
    4596:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4598:	9b02      	ldr	r3, [sp, #8]
    459a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    459e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    45a0:	9b03      	ldr	r3, [sp, #12]
    45a2:	061b      	lsls	r3, r3, #24
    45a4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    45a8:	9a02      	ldr	r2, [sp, #8]
    45aa:	4313      	orrs	r3, r2
    45ac:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    45ae:	4a04      	ldr	r2, [pc, #16]	; (45c0 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    45b0:	9b02      	ldr	r3, [sp, #8]
    45b2:	6193      	str	r3, [r2, #24]
}
    45b4:	bf00      	nop
    45b6:	b004      	add	sp, #16
    45b8:	4770      	bx	lr
    45ba:	bf00      	nop
    45bc:	0000fba8 	.word	0x0000fba8
    45c0:	40064000 	.word	0x40064000

000045c4 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45c4:	b084      	sub	sp, #16
    45c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45c8:	4b0b      	ldr	r3, [pc, #44]	; (45f8 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    45ca:	795b      	ldrb	r3, [r3, #5]
    45cc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    45ce:	4b0b      	ldr	r3, [pc, #44]	; (45fc <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    45d0:	69db      	ldr	r3, [r3, #28]
    45d2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    45d4:	9b02      	ldr	r3, [sp, #8]
    45d6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    45da:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    45dc:	9b03      	ldr	r3, [sp, #12]
    45de:	061b      	lsls	r3, r3, #24
    45e0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    45e4:	9a02      	ldr	r2, [sp, #8]
    45e6:	4313      	orrs	r3, r2
    45e8:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    45ea:	4a04      	ldr	r2, [pc, #16]	; (45fc <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    45ec:	9b02      	ldr	r3, [sp, #8]
    45ee:	61d3      	str	r3, [r2, #28]
}
    45f0:	bf00      	nop
    45f2:	b004      	add	sp, #16
    45f4:	4770      	bx	lr
    45f6:	bf00      	nop
    45f8:	0000fba8 	.word	0x0000fba8
    45fc:	40064000 	.word	0x40064000

00004600 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4600:	b084      	sub	sp, #16
    4602:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4604:	9b01      	ldr	r3, [sp, #4]
    4606:	685b      	ldr	r3, [r3, #4]
    4608:	4a0b      	ldr	r2, [pc, #44]	; (4638 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    460a:	5cd3      	ldrb	r3, [r2, r3]
    460c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    460e:	4b0b      	ldr	r3, [pc, #44]	; (463c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4610:	69db      	ldr	r3, [r3, #28]
    4612:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4614:	9b02      	ldr	r3, [sp, #8]
    4616:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    461a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    461c:	9b03      	ldr	r3, [sp, #12]
    461e:	061b      	lsls	r3, r3, #24
    4620:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4624:	9a02      	ldr	r2, [sp, #8]
    4626:	4313      	orrs	r3, r2
    4628:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    462a:	4a04      	ldr	r2, [pc, #16]	; (463c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    462c:	9b02      	ldr	r3, [sp, #8]
    462e:	61d3      	str	r3, [r2, #28]
}
    4630:	bf00      	nop
    4632:	b004      	add	sp, #16
    4634:	4770      	bx	lr
    4636:	bf00      	nop
    4638:	0000fba8 	.word	0x0000fba8
    463c:	40064000 	.word	0x40064000

00004640 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4640:	b084      	sub	sp, #16
    4642:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4644:	4b0a      	ldr	r3, [pc, #40]	; (4670 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    4646:	7b9b      	ldrb	r3, [r3, #14]
    4648:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    464a:	4b0a      	ldr	r3, [pc, #40]	; (4674 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    464c:	691b      	ldr	r3, [r3, #16]
    464e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4650:	9b02      	ldr	r3, [sp, #8]
    4652:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4656:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4658:	9b03      	ldr	r3, [sp, #12]
    465a:	011b      	lsls	r3, r3, #4
    465c:	9a02      	ldr	r2, [sp, #8]
    465e:	4313      	orrs	r3, r2
    4660:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4662:	4a04      	ldr	r2, [pc, #16]	; (4674 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4664:	9b02      	ldr	r3, [sp, #8]
    4666:	6113      	str	r3, [r2, #16]
}
    4668:	bf00      	nop
    466a:	b004      	add	sp, #16
    466c:	4770      	bx	lr
    466e:	bf00      	nop
    4670:	0000fb50 	.word	0x0000fb50
    4674:	40048000 	.word	0x40048000

00004678 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4678:	b084      	sub	sp, #16
    467a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    467c:	9b01      	ldr	r3, [sp, #4]
    467e:	685b      	ldr	r3, [r3, #4]
    4680:	4a0a      	ldr	r2, [pc, #40]	; (46ac <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    4682:	5cd3      	ldrb	r3, [r2, r3]
    4684:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    4686:	4b0a      	ldr	r3, [pc, #40]	; (46b0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4688:	691b      	ldr	r3, [r3, #16]
    468a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    468c:	9b02      	ldr	r3, [sp, #8]
    468e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4692:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4694:	9b03      	ldr	r3, [sp, #12]
    4696:	011b      	lsls	r3, r3, #4
    4698:	9a02      	ldr	r2, [sp, #8]
    469a:	4313      	orrs	r3, r2
    469c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    469e:	4a04      	ldr	r2, [pc, #16]	; (46b0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    46a0:	9b02      	ldr	r3, [sp, #8]
    46a2:	6113      	str	r3, [r2, #16]
}
    46a4:	bf00      	nop
    46a6:	b004      	add	sp, #16
    46a8:	4770      	bx	lr
    46aa:	bf00      	nop
    46ac:	0000fb50 	.word	0x0000fb50
    46b0:	40048000 	.word	0x40048000

000046b4 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46b4:	b084      	sub	sp, #16
    46b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46b8:	4b0a      	ldr	r3, [pc, #40]	; (46e4 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    46ba:	785b      	ldrb	r3, [r3, #1]
    46bc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    46be:	4b0a      	ldr	r3, [pc, #40]	; (46e8 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    46c0:	691b      	ldr	r3, [r3, #16]
    46c2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    46c4:	9b02      	ldr	r3, [sp, #8]
    46c6:	f023 030c 	bic.w	r3, r3, #12
    46ca:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    46cc:	9b03      	ldr	r3, [sp, #12]
    46ce:	009b      	lsls	r3, r3, #2
    46d0:	9a02      	ldr	r2, [sp, #8]
    46d2:	4313      	orrs	r3, r2
    46d4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    46d6:	4a04      	ldr	r2, [pc, #16]	; (46e8 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    46d8:	9b02      	ldr	r3, [sp, #8]
    46da:	6113      	str	r3, [r2, #16]
}
    46dc:	bf00      	nop
    46de:	b004      	add	sp, #16
    46e0:	4770      	bx	lr
    46e2:	bf00      	nop
    46e4:	0000fc08 	.word	0x0000fc08
    46e8:	40048000 	.word	0x40048000

000046ec <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46ec:	b084      	sub	sp, #16
    46ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46f0:	9b01      	ldr	r3, [sp, #4]
    46f2:	685b      	ldr	r3, [r3, #4]
    46f4:	4a0a      	ldr	r2, [pc, #40]	; (4720 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    46f6:	5cd3      	ldrb	r3, [r2, r3]
    46f8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    46fa:	4b0a      	ldr	r3, [pc, #40]	; (4724 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    46fc:	691b      	ldr	r3, [r3, #16]
    46fe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4700:	9b02      	ldr	r3, [sp, #8]
    4702:	f023 030c 	bic.w	r3, r3, #12
    4706:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4708:	9b03      	ldr	r3, [sp, #12]
    470a:	009b      	lsls	r3, r3, #2
    470c:	9a02      	ldr	r2, [sp, #8]
    470e:	4313      	orrs	r3, r2
    4710:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4712:	4a04      	ldr	r2, [pc, #16]	; (4724 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4714:	9b02      	ldr	r3, [sp, #8]
    4716:	6113      	str	r3, [r2, #16]
}
    4718:	bf00      	nop
    471a:	b004      	add	sp, #16
    471c:	4770      	bx	lr
    471e:	bf00      	nop
    4720:	0000fc08 	.word	0x0000fc08
    4724:	40048000 	.word	0x40048000

00004728 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4728:	b084      	sub	sp, #16
    472a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    472c:	4b0a      	ldr	r3, [pc, #40]	; (4758 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    472e:	795b      	ldrb	r3, [r3, #5]
    4730:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    4732:	4b0a      	ldr	r3, [pc, #40]	; (475c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4734:	6a1b      	ldr	r3, [r3, #32]
    4736:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4738:	9b02      	ldr	r3, [sp, #8]
    473a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    473e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4740:	9b03      	ldr	r3, [sp, #12]
    4742:	061b      	lsls	r3, r3, #24
    4744:	9a02      	ldr	r2, [sp, #8]
    4746:	4313      	orrs	r3, r2
    4748:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    474a:	4a04      	ldr	r2, [pc, #16]	; (475c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    474c:	9b02      	ldr	r3, [sp, #8]
    474e:	6213      	str	r3, [r2, #32]
}
    4750:	bf00      	nop
    4752:	b004      	add	sp, #16
    4754:	4770      	bx	lr
    4756:	bf00      	nop
    4758:	0000fba8 	.word	0x0000fba8
    475c:	40064000 	.word	0x40064000

00004760 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4760:	b084      	sub	sp, #16
    4762:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4764:	9b01      	ldr	r3, [sp, #4]
    4766:	685b      	ldr	r3, [r3, #4]
    4768:	4a0a      	ldr	r2, [pc, #40]	; (4794 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    476a:	5cd3      	ldrb	r3, [r2, r3]
    476c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    476e:	4b0a      	ldr	r3, [pc, #40]	; (4798 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4770:	6a1b      	ldr	r3, [r3, #32]
    4772:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4774:	9b02      	ldr	r3, [sp, #8]
    4776:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    477a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    477c:	9b03      	ldr	r3, [sp, #12]
    477e:	061b      	lsls	r3, r3, #24
    4780:	9a02      	ldr	r2, [sp, #8]
    4782:	4313      	orrs	r3, r2
    4784:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4786:	4a04      	ldr	r2, [pc, #16]	; (4798 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4788:	9b02      	ldr	r3, [sp, #8]
    478a:	6213      	str	r3, [r2, #32]
}
    478c:	bf00      	nop
    478e:	b004      	add	sp, #16
    4790:	4770      	bx	lr
    4792:	bf00      	nop
    4794:	0000fba8 	.word	0x0000fba8
    4798:	40064000 	.word	0x40064000

0000479c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    479c:	b086      	sub	sp, #24
    479e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47a0:	4b20      	ldr	r3, [pc, #128]	; (4824 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    47a2:	795b      	ldrb	r3, [r3, #5]
    47a4:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    47a6:	9b01      	ldr	r3, [sp, #4]
    47a8:	681a      	ldr	r2, [r3, #0]
    47aa:	491f      	ldr	r1, [pc, #124]	; (4828 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    47ac:	4613      	mov	r3, r2
    47ae:	00db      	lsls	r3, r3, #3
    47b0:	4413      	add	r3, r2
    47b2:	440b      	add	r3, r1
    47b4:	781b      	ldrb	r3, [r3, #0]
    47b6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    47b8:	4b1c      	ldr	r3, [pc, #112]	; (482c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    47ba:	68db      	ldr	r3, [r3, #12]
    47bc:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    47be:	9b03      	ldr	r3, [sp, #12]
    47c0:	2b03      	cmp	r3, #3
    47c2:	d813      	bhi.n	47ec <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    47c4:	9b03      	ldr	r3, [sp, #12]
    47c6:	005b      	lsls	r3, r3, #1
    47c8:	3318      	adds	r3, #24
    47ca:	2203      	movs	r2, #3
    47cc:	fa02 f303 	lsl.w	r3, r2, r3
    47d0:	43db      	mvns	r3, r3
    47d2:	9a05      	ldr	r2, [sp, #20]
    47d4:	4013      	ands	r3, r2
    47d6:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    47d8:	9b03      	ldr	r3, [sp, #12]
    47da:	005b      	lsls	r3, r3, #1
    47dc:	3318      	adds	r3, #24
    47de:	9a04      	ldr	r2, [sp, #16]
    47e0:	fa02 f303 	lsl.w	r3, r2, r3
    47e4:	9a05      	ldr	r2, [sp, #20]
    47e6:	4313      	orrs	r3, r2
    47e8:	9305      	str	r3, [sp, #20]
    47ea:	e014      	b.n	4816 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    47ec:	9b03      	ldr	r3, [sp, #12]
    47ee:	3b04      	subs	r3, #4
    47f0:	005b      	lsls	r3, r3, #1
    47f2:	3310      	adds	r3, #16
    47f4:	2203      	movs	r2, #3
    47f6:	fa02 f303 	lsl.w	r3, r2, r3
    47fa:	43db      	mvns	r3, r3
    47fc:	9a05      	ldr	r2, [sp, #20]
    47fe:	4013      	ands	r3, r2
    4800:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4802:	9b03      	ldr	r3, [sp, #12]
    4804:	3b04      	subs	r3, #4
    4806:	005b      	lsls	r3, r3, #1
    4808:	3310      	adds	r3, #16
    480a:	9a04      	ldr	r2, [sp, #16]
    480c:	fa02 f303 	lsl.w	r3, r2, r3
    4810:	9a05      	ldr	r2, [sp, #20]
    4812:	4313      	orrs	r3, r2
    4814:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4816:	4a05      	ldr	r2, [pc, #20]	; (482c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4818:	9b05      	ldr	r3, [sp, #20]
    481a:	60d3      	str	r3, [r2, #12]
}
    481c:	bf00      	nop
    481e:	b006      	add	sp, #24
    4820:	4770      	bx	lr
    4822:	bf00      	nop
    4824:	0000fb50 	.word	0x0000fb50
    4828:	0000f840 	.word	0x0000f840
    482c:	40048000 	.word	0x40048000

00004830 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4830:	b086      	sub	sp, #24
    4832:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4834:	9b01      	ldr	r3, [sp, #4]
    4836:	685b      	ldr	r3, [r3, #4]
    4838:	4a20      	ldr	r2, [pc, #128]	; (48bc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    483a:	5cd3      	ldrb	r3, [r2, r3]
    483c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    483e:	9b01      	ldr	r3, [sp, #4]
    4840:	681a      	ldr	r2, [r3, #0]
    4842:	491f      	ldr	r1, [pc, #124]	; (48c0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    4844:	4613      	mov	r3, r2
    4846:	00db      	lsls	r3, r3, #3
    4848:	4413      	add	r3, r2
    484a:	440b      	add	r3, r1
    484c:	781b      	ldrb	r3, [r3, #0]
    484e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4850:	4b1c      	ldr	r3, [pc, #112]	; (48c4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4852:	68db      	ldr	r3, [r3, #12]
    4854:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4856:	9b03      	ldr	r3, [sp, #12]
    4858:	2b03      	cmp	r3, #3
    485a:	d813      	bhi.n	4884 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    485c:	9b03      	ldr	r3, [sp, #12]
    485e:	005b      	lsls	r3, r3, #1
    4860:	3318      	adds	r3, #24
    4862:	2203      	movs	r2, #3
    4864:	fa02 f303 	lsl.w	r3, r2, r3
    4868:	43db      	mvns	r3, r3
    486a:	9a05      	ldr	r2, [sp, #20]
    486c:	4013      	ands	r3, r2
    486e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4870:	9b03      	ldr	r3, [sp, #12]
    4872:	005b      	lsls	r3, r3, #1
    4874:	3318      	adds	r3, #24
    4876:	9a04      	ldr	r2, [sp, #16]
    4878:	fa02 f303 	lsl.w	r3, r2, r3
    487c:	9a05      	ldr	r2, [sp, #20]
    487e:	4313      	orrs	r3, r2
    4880:	9305      	str	r3, [sp, #20]
    4882:	e014      	b.n	48ae <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4884:	9b03      	ldr	r3, [sp, #12]
    4886:	3b04      	subs	r3, #4
    4888:	005b      	lsls	r3, r3, #1
    488a:	3310      	adds	r3, #16
    488c:	2203      	movs	r2, #3
    488e:	fa02 f303 	lsl.w	r3, r2, r3
    4892:	43db      	mvns	r3, r3
    4894:	9a05      	ldr	r2, [sp, #20]
    4896:	4013      	ands	r3, r2
    4898:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    489a:	9b03      	ldr	r3, [sp, #12]
    489c:	3b04      	subs	r3, #4
    489e:	005b      	lsls	r3, r3, #1
    48a0:	3310      	adds	r3, #16
    48a2:	9a04      	ldr	r2, [sp, #16]
    48a4:	fa02 f303 	lsl.w	r3, r2, r3
    48a8:	9a05      	ldr	r2, [sp, #20]
    48aa:	4313      	orrs	r3, r2
    48ac:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    48ae:	4a05      	ldr	r2, [pc, #20]	; (48c4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    48b0:	9b05      	ldr	r3, [sp, #20]
    48b2:	60d3      	str	r3, [r2, #12]
}
    48b4:	bf00      	nop
    48b6:	b006      	add	sp, #24
    48b8:	4770      	bx	lr
    48ba:	bf00      	nop
    48bc:	0000fb50 	.word	0x0000fb50
    48c0:	0000f840 	.word	0x0000f840
    48c4:	40048000 	.word	0x40048000

000048c8 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    48c8:	b084      	sub	sp, #16
    48ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    48cc:	4b06      	ldr	r3, [pc, #24]	; (48e8 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    48ce:	685b      	ldr	r3, [r3, #4]
    48d0:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    48d2:	9b03      	ldr	r3, [sp, #12]
    48d4:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    48d8:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    48da:	4a03      	ldr	r2, [pc, #12]	; (48e8 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    48dc:	9b03      	ldr	r3, [sp, #12]
    48de:	6053      	str	r3, [r2, #4]
}
    48e0:	bf00      	nop
    48e2:	b004      	add	sp, #16
    48e4:	4770      	bx	lr
    48e6:	bf00      	nop
    48e8:	40048000 	.word	0x40048000

000048ec <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    48ec:	b084      	sub	sp, #16
    48ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    48f0:	9b01      	ldr	r3, [sp, #4]
    48f2:	685b      	ldr	r3, [r3, #4]
    48f4:	4a0a      	ldr	r2, [pc, #40]	; (4920 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    48f6:	5cd3      	ldrb	r3, [r2, r3]
    48f8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    48fa:	4b0a      	ldr	r3, [pc, #40]	; (4924 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    48fc:	685b      	ldr	r3, [r3, #4]
    48fe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4900:	9b02      	ldr	r3, [sp, #8]
    4902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4906:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4908:	9b03      	ldr	r3, [sp, #12]
    490a:	011b      	lsls	r3, r3, #4
    490c:	9a02      	ldr	r2, [sp, #8]
    490e:	4313      	orrs	r3, r2
    4910:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    4912:	4a04      	ldr	r2, [pc, #16]	; (4924 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4914:	9b02      	ldr	r3, [sp, #8]
    4916:	6053      	str	r3, [r2, #4]
}
    4918:	bf00      	nop
    491a:	b004      	add	sp, #16
    491c:	4770      	bx	lr
    491e:	bf00      	nop
    4920:	0000fb50 	.word	0x0000fb50
    4924:	40048000 	.word	0x40048000

00004928 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4928:	b084      	sub	sp, #16
    492a:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    492c:	9b01      	ldr	r3, [sp, #4]
    492e:	681a      	ldr	r2, [r3, #0]
    4930:	490f      	ldr	r1, [pc, #60]	; (4970 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    4932:	4613      	mov	r3, r2
    4934:	00db      	lsls	r3, r3, #3
    4936:	4413      	add	r3, r2
    4938:	440b      	add	r3, r1
    493a:	3304      	adds	r3, #4
    493c:	781b      	ldrb	r3, [r3, #0]
    493e:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4940:	4a0c      	ldr	r2, [pc, #48]	; (4974 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4942:	9b03      	ldr	r3, [sp, #12]
    4944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4948:	490a      	ldr	r1, [pc, #40]	; (4974 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    494a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    494e:	9b03      	ldr	r3, [sp, #12]
    4950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4954:	4a07      	ldr	r2, [pc, #28]	; (4974 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4956:	9b03      	ldr	r3, [sp, #12]
    4958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    495c:	4905      	ldr	r1, [pc, #20]	; (4974 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    495e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    4962:	9b03      	ldr	r3, [sp, #12]
    4964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4968:	bf00      	nop
    496a:	b004      	add	sp, #16
    496c:	4770      	bx	lr
    496e:	bf00      	nop
    4970:	0000f840 	.word	0x0000f840
    4974:	40065000 	.word	0x40065000

00004978 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4978:	b086      	sub	sp, #24
    497a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    497c:	9b01      	ldr	r3, [sp, #4]
    497e:	681a      	ldr	r2, [r3, #0]
    4980:	4912      	ldr	r1, [pc, #72]	; (49cc <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    4982:	4613      	mov	r3, r2
    4984:	00db      	lsls	r3, r3, #3
    4986:	4413      	add	r3, r2
    4988:	440b      	add	r3, r1
    498a:	3304      	adds	r3, #4
    498c:	781b      	ldrb	r3, [r3, #0]
    498e:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4990:	9b01      	ldr	r3, [sp, #4]
    4992:	685b      	ldr	r3, [r3, #4]
    4994:	4a0e      	ldr	r2, [pc, #56]	; (49d0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    4996:	5cd3      	ldrb	r3, [r2, r3]
    4998:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    499a:	4a0e      	ldr	r2, [pc, #56]	; (49d4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    499c:	9b05      	ldr	r3, [sp, #20]
    499e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    49a2:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    49a4:	9b03      	ldr	r3, [sp, #12]
    49a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    49aa:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    49ac:	9b04      	ldr	r3, [sp, #16]
    49ae:	061b      	lsls	r3, r3, #24
    49b0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    49b4:	9a03      	ldr	r2, [sp, #12]
    49b6:	4313      	orrs	r3, r2
    49b8:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    49ba:	4906      	ldr	r1, [pc, #24]	; (49d4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    49bc:	9b05      	ldr	r3, [sp, #20]
    49be:	9a03      	ldr	r2, [sp, #12]
    49c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    49c4:	bf00      	nop
    49c6:	b006      	add	sp, #24
    49c8:	4770      	bx	lr
    49ca:	bf00      	nop
    49cc:	0000f840 	.word	0x0000f840
    49d0:	0000fbd8 	.word	0x0000fbd8
    49d4:	40065000 	.word	0x40065000

000049d8 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    49d8:	b084      	sub	sp, #16
    49da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    49dc:	4b0b      	ldr	r3, [pc, #44]	; (4a0c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    49de:	7f1b      	ldrb	r3, [r3, #28]
    49e0:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    49e2:	4b0b      	ldr	r3, [pc, #44]	; (4a10 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    49e4:	685b      	ldr	r3, [r3, #4]
    49e6:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    49e8:	9b02      	ldr	r3, [sp, #8]
    49ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    49ee:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    49f0:	9b03      	ldr	r3, [sp, #12]
    49f2:	031b      	lsls	r3, r3, #12
    49f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    49f8:	9a02      	ldr	r2, [sp, #8]
    49fa:	4313      	orrs	r3, r2
    49fc:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    49fe:	4a04      	ldr	r2, [pc, #16]	; (4a10 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4a00:	9b02      	ldr	r3, [sp, #8]
    4a02:	6053      	str	r3, [r2, #4]
}
    4a04:	bf00      	nop
    4a06:	b004      	add	sp, #16
    4a08:	4770      	bx	lr
    4a0a:	bf00      	nop
    4a0c:	0000fb50 	.word	0x0000fb50
    4a10:	40048000 	.word	0x40048000

00004a14 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a14:	b084      	sub	sp, #16
    4a16:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a18:	9b01      	ldr	r3, [sp, #4]
    4a1a:	685b      	ldr	r3, [r3, #4]
    4a1c:	4a0b      	ldr	r2, [pc, #44]	; (4a4c <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4a1e:	5cd3      	ldrb	r3, [r2, r3]
    4a20:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4a22:	4b0b      	ldr	r3, [pc, #44]	; (4a50 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4a24:	685b      	ldr	r3, [r3, #4]
    4a26:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4a28:	9b02      	ldr	r3, [sp, #8]
    4a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4a2e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4a30:	9b03      	ldr	r3, [sp, #12]
    4a32:	031b      	lsls	r3, r3, #12
    4a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4a38:	9a02      	ldr	r2, [sp, #8]
    4a3a:	4313      	orrs	r3, r2
    4a3c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4a3e:	4a04      	ldr	r2, [pc, #16]	; (4a50 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4a40:	9b02      	ldr	r3, [sp, #8]
    4a42:	6053      	str	r3, [r2, #4]
}
    4a44:	bf00      	nop
    4a46:	b004      	add	sp, #16
    4a48:	4770      	bx	lr
    4a4a:	bf00      	nop
    4a4c:	0000fb50 	.word	0x0000fb50
    4a50:	40048000 	.word	0x40048000

00004a54 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4a54:	b500      	push	{lr}
    4a56:	b085      	sub	sp, #20
    4a58:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4a5a:	2300      	movs	r3, #0
    4a5c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4a60:	9b01      	ldr	r3, [sp, #4]
    4a62:	2b00      	cmp	r3, #0
    4a64:	d037      	beq.n	4ad6 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4a66:	2300      	movs	r3, #0
    4a68:	9303      	str	r3, [sp, #12]
    4a6a:	e02b      	b.n	4ac4 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4a6c:	4b29      	ldr	r3, [pc, #164]	; (4b14 <DisableSafeClock+0xc0>)
    4a6e:	6819      	ldr	r1, [r3, #0]
    4a70:	9a03      	ldr	r2, [sp, #12]
    4a72:	4613      	mov	r3, r2
    4a74:	005b      	lsls	r3, r3, #1
    4a76:	4413      	add	r3, r2
    4a78:	009b      	lsls	r3, r3, #2
    4a7a:	440b      	add	r3, r1
    4a7c:	3314      	adds	r3, #20
    4a7e:	681b      	ldr	r3, [r3, #0]
    4a80:	2b05      	cmp	r3, #5
    4a82:	d11c      	bne.n	4abe <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4a84:	2301      	movs	r3, #1
    4a86:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4a8a:	4b22      	ldr	r3, [pc, #136]	; (4b14 <DisableSafeClock+0xc0>)
    4a8c:	6819      	ldr	r1, [r3, #0]
    4a8e:	9a03      	ldr	r2, [sp, #12]
    4a90:	4613      	mov	r3, r2
    4a92:	005b      	lsls	r3, r3, #1
    4a94:	4413      	add	r3, r2
    4a96:	009b      	lsls	r3, r3, #2
    4a98:	440b      	add	r3, r1
    4a9a:	3318      	adds	r3, #24
    4a9c:	881b      	ldrh	r3, [r3, #0]
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	d118      	bne.n	4ad4 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4aa2:	4b1d      	ldr	r3, [pc, #116]	; (4b18 <DisableSafeClock+0xc4>)
    4aa4:	791b      	ldrb	r3, [r3, #4]
    4aa6:	4619      	mov	r1, r3
    4aa8:	4a1c      	ldr	r2, [pc, #112]	; (4b1c <DisableSafeClock+0xc8>)
    4aaa:	460b      	mov	r3, r1
    4aac:	005b      	lsls	r3, r3, #1
    4aae:	440b      	add	r3, r1
    4ab0:	009b      	lsls	r3, r3, #2
    4ab2:	4413      	add	r3, r2
    4ab4:	3308      	adds	r3, #8
    4ab6:	681b      	ldr	r3, [r3, #0]
    4ab8:	2005      	movs	r0, #5
    4aba:	4798      	blx	r3
                }
                break;
    4abc:	e00a      	b.n	4ad4 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4abe:	9b03      	ldr	r3, [sp, #12]
    4ac0:	3301      	adds	r3, #1
    4ac2:	9303      	str	r3, [sp, #12]
    4ac4:	4b13      	ldr	r3, [pc, #76]	; (4b14 <DisableSafeClock+0xc0>)
    4ac6:	681b      	ldr	r3, [r3, #0]
    4ac8:	7a1b      	ldrb	r3, [r3, #8]
    4aca:	461a      	mov	r2, r3
    4acc:	9b03      	ldr	r3, [sp, #12]
    4ace:	4293      	cmp	r3, r2
    4ad0:	d3cc      	bcc.n	4a6c <DisableSafeClock+0x18>
    4ad2:	e000      	b.n	4ad6 <DisableSafeClock+0x82>
                break;
    4ad4:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    4ad6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4ada:	f083 0301 	eor.w	r3, r3, #1
    4ade:	b2db      	uxtb	r3, r3
    4ae0:	2b00      	cmp	r3, #0
    4ae2:	d013      	beq.n	4b0c <DisableSafeClock+0xb8>
    4ae4:	4b0e      	ldr	r3, [pc, #56]	; (4b20 <DisableSafeClock+0xcc>)
    4ae6:	781b      	ldrb	r3, [r3, #0]
    4ae8:	f083 0301 	eor.w	r3, r3, #1
    4aec:	b2db      	uxtb	r3, r3
    4aee:	2b00      	cmp	r3, #0
    4af0:	d00c      	beq.n	4b0c <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4af2:	4b09      	ldr	r3, [pc, #36]	; (4b18 <DisableSafeClock+0xc4>)
    4af4:	791b      	ldrb	r3, [r3, #4]
    4af6:	4619      	mov	r1, r3
    4af8:	4a08      	ldr	r2, [pc, #32]	; (4b1c <DisableSafeClock+0xc8>)
    4afa:	460b      	mov	r3, r1
    4afc:	005b      	lsls	r3, r3, #1
    4afe:	440b      	add	r3, r1
    4b00:	009b      	lsls	r3, r3, #2
    4b02:	4413      	add	r3, r2
    4b04:	3308      	adds	r3, #8
    4b06:	681b      	ldr	r3, [r3, #0]
    4b08:	2005      	movs	r0, #5
    4b0a:	4798      	blx	r3
    }
}
    4b0c:	bf00      	nop
    4b0e:	b005      	add	sp, #20
    4b10:	f85d fb04 	ldr.w	pc, [sp], #4
    4b14:	1fff8bb4 	.word	0x1fff8bb4
    4b18:	0000f7d0 	.word	0x0000f7d0
    4b1c:	0000fe00 	.word	0x0000fe00
    4b20:	1fff8b18 	.word	0x1fff8b18

00004b24 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4b24:	4b06      	ldr	r3, [pc, #24]	; (4b40 <SetFircToResetValue_TrustedCall+0x1c>)
    4b26:	2200      	movs	r2, #0
    4b28:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4b2c:	4b04      	ldr	r3, [pc, #16]	; (4b40 <SetFircToResetValue_TrustedCall+0x1c>)
    4b2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b32:	4a03      	ldr	r2, [pc, #12]	; (4b40 <SetFircToResetValue_TrustedCall+0x1c>)
    4b34:	f043 0301 	orr.w	r3, r3, #1
    4b38:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4b3c:	bf00      	nop
    4b3e:	4770      	bx	lr
    4b40:	40064000 	.word	0x40064000

00004b44 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4b44:	b084      	sub	sp, #16
    4b46:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4b48:	2303      	movs	r3, #3
    4b4a:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4b4c:	2300      	movs	r3, #0
    4b4e:	9302      	str	r3, [sp, #8]
    4b50:	e028      	b.n	4ba4 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4b52:	9b01      	ldr	r3, [sp, #4]
    4b54:	9a02      	ldr	r2, [sp, #8]
    4b56:	320d      	adds	r2, #13
    4b58:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4b5c:	2b28      	cmp	r3, #40	; 0x28
    4b5e:	d10b      	bne.n	4b78 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4b60:	9a01      	ldr	r2, [sp, #4]
    4b62:	9b02      	ldr	r3, [sp, #8]
    4b64:	330d      	adds	r3, #13
    4b66:	00db      	lsls	r3, r3, #3
    4b68:	4413      	add	r3, r2
    4b6a:	685b      	ldr	r3, [r3, #4]
    4b6c:	4a2b      	ldr	r2, [pc, #172]	; (4c1c <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4b6e:	5cd3      	ldrb	r3, [r2, r3]
    4b70:	011b      	lsls	r3, r3, #4
    4b72:	9a03      	ldr	r2, [sp, #12]
    4b74:	4313      	orrs	r3, r2
    4b76:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4b78:	9b01      	ldr	r3, [sp, #4]
    4b7a:	9a02      	ldr	r2, [sp, #8]
    4b7c:	320d      	adds	r2, #13
    4b7e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4b82:	2b29      	cmp	r3, #41	; 0x29
    4b84:	d10b      	bne.n	4b9e <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4b86:	9a01      	ldr	r2, [sp, #4]
    4b88:	9b02      	ldr	r3, [sp, #8]
    4b8a:	330d      	adds	r3, #13
    4b8c:	00db      	lsls	r3, r3, #3
    4b8e:	4413      	add	r3, r2
    4b90:	685b      	ldr	r3, [r3, #4]
    4b92:	4a23      	ldr	r2, [pc, #140]	; (4c20 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4b94:	5cd3      	ldrb	r3, [r2, r3]
    4b96:	009b      	lsls	r3, r3, #2
    4b98:	9a03      	ldr	r2, [sp, #12]
    4b9a:	4313      	orrs	r3, r2
    4b9c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4b9e:	9b02      	ldr	r3, [sp, #8]
    4ba0:	3301      	adds	r3, #1
    4ba2:	9302      	str	r3, [sp, #8]
    4ba4:	9b01      	ldr	r3, [sp, #4]
    4ba6:	7adb      	ldrb	r3, [r3, #11]
    4ba8:	461a      	mov	r2, r3
    4baa:	9b02      	ldr	r3, [sp, #8]
    4bac:	4293      	cmp	r3, r2
    4bae:	d3d0      	bcc.n	4b52 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4bb0:	2300      	movs	r3, #0
    4bb2:	9302      	str	r3, [sp, #8]
    4bb4:	e026      	b.n	4c04 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    4bb6:	9a01      	ldr	r2, [sp, #4]
    4bb8:	9b02      	ldr	r3, [sp, #8]
    4bba:	334e      	adds	r3, #78	; 0x4e
    4bbc:	00db      	lsls	r3, r3, #3
    4bbe:	4413      	add	r3, r2
    4bc0:	685b      	ldr	r3, [r3, #4]
    4bc2:	2b12      	cmp	r3, #18
    4bc4:	d109      	bne.n	4bda <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4bc6:	9a01      	ldr	r2, [sp, #4]
    4bc8:	9b02      	ldr	r3, [sp, #8]
    4bca:	334e      	adds	r3, #78	; 0x4e
    4bcc:	00db      	lsls	r3, r3, #3
    4bce:	4413      	add	r3, r2
    4bd0:	891b      	ldrh	r3, [r3, #8]
    4bd2:	005b      	lsls	r3, r3, #1
    4bd4:	9a03      	ldr	r2, [sp, #12]
    4bd6:	4313      	orrs	r3, r2
    4bd8:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4bda:	9a01      	ldr	r2, [sp, #4]
    4bdc:	9b02      	ldr	r3, [sp, #8]
    4bde:	334e      	adds	r3, #78	; 0x4e
    4be0:	00db      	lsls	r3, r3, #3
    4be2:	4413      	add	r3, r2
    4be4:	685b      	ldr	r3, [r3, #4]
    4be6:	2b13      	cmp	r3, #19
    4be8:	d109      	bne.n	4bfe <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4bea:	9a01      	ldr	r2, [sp, #4]
    4bec:	9b02      	ldr	r3, [sp, #8]
    4bee:	334e      	adds	r3, #78	; 0x4e
    4bf0:	00db      	lsls	r3, r3, #3
    4bf2:	4413      	add	r3, r2
    4bf4:	891b      	ldrh	r3, [r3, #8]
    4bf6:	461a      	mov	r2, r3
    4bf8:	9b03      	ldr	r3, [sp, #12]
    4bfa:	4313      	orrs	r3, r2
    4bfc:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4bfe:	9b02      	ldr	r3, [sp, #8]
    4c00:	3301      	adds	r3, #1
    4c02:	9302      	str	r3, [sp, #8]
    4c04:	9b01      	ldr	r3, [sp, #4]
    4c06:	7c1b      	ldrb	r3, [r3, #16]
    4c08:	461a      	mov	r2, r3
    4c0a:	9b02      	ldr	r3, [sp, #8]
    4c0c:	4293      	cmp	r3, r2
    4c0e:	d3d2      	bcc.n	4bb6 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4c10:	4a04      	ldr	r2, [pc, #16]	; (4c24 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4c12:	9b03      	ldr	r3, [sp, #12]
    4c14:	6113      	str	r3, [r2, #16]
}
    4c16:	bf00      	nop
    4c18:	b004      	add	sp, #16
    4c1a:	4770      	bx	lr
    4c1c:	0000fb50 	.word	0x0000fb50
    4c20:	0000fc08 	.word	0x0000fc08
    4c24:	40048000 	.word	0x40048000

00004c28 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4c28:	b500      	push	{lr}
    4c2a:	b089      	sub	sp, #36	; 0x24
    4c2c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4c2e:	2300      	movs	r3, #0
    4c30:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4c34:	4a21      	ldr	r2, [pc, #132]	; (4cbc <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4c36:	9b01      	ldr	r3, [sp, #4]
    4c38:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4c3a:	4b21      	ldr	r3, [pc, #132]	; (4cc0 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4c3c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4c40:	f003 0301 	and.w	r3, r3, #1
    4c44:	2b00      	cmp	r3, #0
    4c46:	d12e      	bne.n	4ca6 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4c48:	4b1e      	ldr	r3, [pc, #120]	; (4cc4 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4c4a:	2200      	movs	r2, #0
    4c4c:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4c4e:	f7ff ff69 	bl	4b24 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4c52:	aa03      	add	r2, sp, #12
    4c54:	a904      	add	r1, sp, #16
    4c56:	a805      	add	r0, sp, #20
    4c58:	f24c 3350 	movw	r3, #50000	; 0xc350
    4c5c:	f7fe f8ae 	bl	2dbc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4c60:	4b17      	ldr	r3, [pc, #92]	; (4cc0 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4c62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4c66:	0e1b      	lsrs	r3, r3, #24
    4c68:	f003 0301 	and.w	r3, r3, #1
    4c6c:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4c6e:	9a03      	ldr	r2, [sp, #12]
    4c70:	a904      	add	r1, sp, #16
    4c72:	ab05      	add	r3, sp, #20
    4c74:	4618      	mov	r0, r3
    4c76:	f7fe f8bb 	bl	2df0 <Clock_Ip_TimeoutExpired>
    4c7a:	4603      	mov	r3, r0
    4c7c:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4c80:	9b06      	ldr	r3, [sp, #24]
    4c82:	2b00      	cmp	r3, #0
    4c84:	d106      	bne.n	4c94 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4c86:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4c8a:	f083 0301 	eor.w	r3, r3, #1
    4c8e:	b2db      	uxtb	r3, r3
    4c90:	2b00      	cmp	r3, #0
    4c92:	d1e5      	bne.n	4c60 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4c94:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4c98:	2b00      	cmp	r3, #0
    4c9a:	d007      	beq.n	4cac <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4c9c:	2105      	movs	r1, #5
    4c9e:	2001      	movs	r0, #1
    4ca0:	f7fe f87c 	bl	2d9c <Clock_Ip_ReportClockErrors>
    4ca4:	e002      	b.n	4cac <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4ca6:	4b07      	ldr	r3, [pc, #28]	; (4cc4 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4ca8:	2201      	movs	r2, #1
    4caa:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4cac:	9801      	ldr	r0, [sp, #4]
    4cae:	f7ff ff49 	bl	4b44 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4cb2:	bf00      	nop
    4cb4:	b009      	add	sp, #36	; 0x24
    4cb6:	f85d fb04 	ldr.w	pc, [sp], #4
    4cba:	bf00      	nop
    4cbc:	1fff8bb4 	.word	0x1fff8bb4
    4cc0:	40064000 	.word	0x40064000
    4cc4:	1fff8b18 	.word	0x1fff8b18

00004cc8 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4cc8:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4cca:	2300      	movs	r3, #0
    4ccc:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4cce:	4b29      	ldr	r3, [pc, #164]	; (4d74 <getFircConfig+0xac>)
    4cd0:	681b      	ldr	r3, [r3, #0]
    4cd2:	2b00      	cmp	r3, #0
    4cd4:	d024      	beq.n	4d20 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4cd6:	2300      	movs	r3, #0
    4cd8:	9301      	str	r3, [sp, #4]
    4cda:	e01a      	b.n	4d12 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4cdc:	4b25      	ldr	r3, [pc, #148]	; (4d74 <getFircConfig+0xac>)
    4cde:	6819      	ldr	r1, [r3, #0]
    4ce0:	9a01      	ldr	r2, [sp, #4]
    4ce2:	4613      	mov	r3, r2
    4ce4:	005b      	lsls	r3, r3, #1
    4ce6:	4413      	add	r3, r2
    4ce8:	009b      	lsls	r3, r3, #2
    4cea:	440b      	add	r3, r1
    4cec:	3314      	adds	r3, #20
    4cee:	681b      	ldr	r3, [r3, #0]
    4cf0:	2b05      	cmp	r3, #5
    4cf2:	d10b      	bne.n	4d0c <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4cf4:	4b1f      	ldr	r3, [pc, #124]	; (4d74 <getFircConfig+0xac>)
    4cf6:	6819      	ldr	r1, [r3, #0]
    4cf8:	9a01      	ldr	r2, [sp, #4]
    4cfa:	4613      	mov	r3, r2
    4cfc:	005b      	lsls	r3, r3, #1
    4cfe:	4413      	add	r3, r2
    4d00:	009b      	lsls	r3, r3, #2
    4d02:	3310      	adds	r3, #16
    4d04:	440b      	add	r3, r1
    4d06:	3304      	adds	r3, #4
    4d08:	9300      	str	r3, [sp, #0]
                break;
    4d0a:	e009      	b.n	4d20 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4d0c:	9b01      	ldr	r3, [sp, #4]
    4d0e:	3301      	adds	r3, #1
    4d10:	9301      	str	r3, [sp, #4]
    4d12:	4b18      	ldr	r3, [pc, #96]	; (4d74 <getFircConfig+0xac>)
    4d14:	681b      	ldr	r3, [r3, #0]
    4d16:	7a1b      	ldrb	r3, [r3, #8]
    4d18:	461a      	mov	r2, r3
    4d1a:	9b01      	ldr	r3, [sp, #4]
    4d1c:	4293      	cmp	r3, r2
    4d1e:	d3dd      	bcc.n	4cdc <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4d20:	9b00      	ldr	r3, [sp, #0]
    4d22:	2b00      	cmp	r3, #0
    4d24:	d121      	bne.n	4d6a <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4d26:	4b14      	ldr	r3, [pc, #80]	; (4d78 <getFircConfig+0xb0>)
    4d28:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4d2a:	4b13      	ldr	r3, [pc, #76]	; (4d78 <getFircConfig+0xb0>)
    4d2c:	2205      	movs	r2, #5
    4d2e:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4d30:	4b12      	ldr	r3, [pc, #72]	; (4d7c <getFircConfig+0xb4>)
    4d32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4d36:	b29b      	uxth	r3, r3
    4d38:	f003 0301 	and.w	r3, r3, #1
    4d3c:	b29a      	uxth	r2, r3
    4d3e:	4b0e      	ldr	r3, [pc, #56]	; (4d78 <getFircConfig+0xb0>)
    4d40:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4d42:	4b0e      	ldr	r3, [pc, #56]	; (4d7c <getFircConfig+0xb4>)
    4d44:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4d48:	b2db      	uxtb	r3, r3
    4d4a:	f003 0303 	and.w	r3, r3, #3
    4d4e:	b2da      	uxtb	r2, r3
    4d50:	4b09      	ldr	r3, [pc, #36]	; (4d78 <getFircConfig+0xb0>)
    4d52:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4d54:	4b09      	ldr	r3, [pc, #36]	; (4d7c <getFircConfig+0xb4>)
    4d56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4d5a:	b2db      	uxtb	r3, r3
    4d5c:	10db      	asrs	r3, r3, #3
    4d5e:	b2db      	uxtb	r3, r3
    4d60:	f003 0301 	and.w	r3, r3, #1
    4d64:	b2da      	uxtb	r2, r3
    4d66:	4b04      	ldr	r3, [pc, #16]	; (4d78 <getFircConfig+0xb0>)
    4d68:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4d6a:	9b00      	ldr	r3, [sp, #0]
}
    4d6c:	4618      	mov	r0, r3
    4d6e:	b002      	add	sp, #8
    4d70:	4770      	bx	lr
    4d72:	bf00      	nop
    4d74:	1fff8bb4 	.word	0x1fff8bb4
    4d78:	1fff8c20 	.word	0x1fff8c20
    4d7c:	40064000 	.word	0x40064000

00004d80 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4d80:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4d82:	2300      	movs	r3, #0
    4d84:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4d86:	4b20      	ldr	r3, [pc, #128]	; (4e08 <getSoscConfig+0x88>)
    4d88:	681b      	ldr	r3, [r3, #0]
    4d8a:	2b00      	cmp	r3, #0
    4d8c:	d024      	beq.n	4dd8 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4d8e:	2300      	movs	r3, #0
    4d90:	9301      	str	r3, [sp, #4]
    4d92:	e01a      	b.n	4dca <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4d94:	4b1c      	ldr	r3, [pc, #112]	; (4e08 <getSoscConfig+0x88>)
    4d96:	6819      	ldr	r1, [r3, #0]
    4d98:	9a01      	ldr	r2, [sp, #4]
    4d9a:	4613      	mov	r3, r2
    4d9c:	009b      	lsls	r3, r3, #2
    4d9e:	4413      	add	r3, r2
    4da0:	009b      	lsls	r3, r3, #2
    4da2:	440b      	add	r3, r1
    4da4:	332c      	adds	r3, #44	; 0x2c
    4da6:	681b      	ldr	r3, [r3, #0]
    4da8:	2b08      	cmp	r3, #8
    4daa:	d10b      	bne.n	4dc4 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4dac:	4b16      	ldr	r3, [pc, #88]	; (4e08 <getSoscConfig+0x88>)
    4dae:	6819      	ldr	r1, [r3, #0]
    4db0:	9a01      	ldr	r2, [sp, #4]
    4db2:	4613      	mov	r3, r2
    4db4:	009b      	lsls	r3, r3, #2
    4db6:	4413      	add	r3, r2
    4db8:	009b      	lsls	r3, r3, #2
    4dba:	3328      	adds	r3, #40	; 0x28
    4dbc:	440b      	add	r3, r1
    4dbe:	3304      	adds	r3, #4
    4dc0:	9300      	str	r3, [sp, #0]
                break;
    4dc2:	e009      	b.n	4dd8 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4dc4:	9b01      	ldr	r3, [sp, #4]
    4dc6:	3301      	adds	r3, #1
    4dc8:	9301      	str	r3, [sp, #4]
    4dca:	4b0f      	ldr	r3, [pc, #60]	; (4e08 <getSoscConfig+0x88>)
    4dcc:	681b      	ldr	r3, [r3, #0]
    4dce:	7a5b      	ldrb	r3, [r3, #9]
    4dd0:	461a      	mov	r2, r3
    4dd2:	9b01      	ldr	r3, [sp, #4]
    4dd4:	4293      	cmp	r3, r2
    4dd6:	d3dd      	bcc.n	4d94 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4dd8:	9b00      	ldr	r3, [sp, #0]
    4dda:	2b00      	cmp	r3, #0
    4ddc:	d110      	bne.n	4e00 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4dde:	4b0b      	ldr	r3, [pc, #44]	; (4e0c <getSoscConfig+0x8c>)
    4de0:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4de2:	4b0a      	ldr	r3, [pc, #40]	; (4e0c <getSoscConfig+0x8c>)
    4de4:	2208      	movs	r2, #8
    4de6:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4de8:	4b09      	ldr	r3, [pc, #36]	; (4e10 <getSoscConfig+0x90>)
    4dea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4dee:	b29b      	uxth	r3, r3
    4df0:	f003 0301 	and.w	r3, r3, #1
    4df4:	b29a      	uxth	r2, r3
    4df6:	4b05      	ldr	r3, [pc, #20]	; (4e0c <getSoscConfig+0x8c>)
    4df8:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4dfa:	4b04      	ldr	r3, [pc, #16]	; (4e0c <getSoscConfig+0x8c>)
    4dfc:	4a05      	ldr	r2, [pc, #20]	; (4e14 <getSoscConfig+0x94>)
    4dfe:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4e00:	9b00      	ldr	r3, [sp, #0]
}
    4e02:	4618      	mov	r0, r3
    4e04:	b002      	add	sp, #8
    4e06:	4770      	bx	lr
    4e08:	1fff8bb4 	.word	0x1fff8bb4
    4e0c:	1fff8c2c 	.word	0x1fff8c2c
    4e10:	40064000 	.word	0x40064000
    4e14:	02625a00 	.word	0x02625a00

00004e18 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4e18:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4e1a:	2300      	movs	r3, #0
    4e1c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4e1e:	4b28      	ldr	r3, [pc, #160]	; (4ec0 <getSpllConfig+0xa8>)
    4e20:	681b      	ldr	r3, [r3, #0]
    4e22:	2b00      	cmp	r3, #0
    4e24:	d023      	beq.n	4e6e <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4e26:	2300      	movs	r3, #0
    4e28:	9301      	str	r3, [sp, #4]
    4e2a:	e019      	b.n	4e60 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4e2c:	4b24      	ldr	r3, [pc, #144]	; (4ec0 <getSpllConfig+0xa8>)
    4e2e:	6819      	ldr	r1, [r3, #0]
    4e30:	9a01      	ldr	r2, [sp, #4]
    4e32:	4613      	mov	r3, r2
    4e34:	009b      	lsls	r3, r3, #2
    4e36:	4413      	add	r3, r2
    4e38:	00db      	lsls	r3, r3, #3
    4e3a:	440b      	add	r3, r1
    4e3c:	3340      	adds	r3, #64	; 0x40
    4e3e:	681b      	ldr	r3, [r3, #0]
    4e40:	2b09      	cmp	r3, #9
    4e42:	d10a      	bne.n	4e5a <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4e44:	4b1e      	ldr	r3, [pc, #120]	; (4ec0 <getSpllConfig+0xa8>)
    4e46:	6819      	ldr	r1, [r3, #0]
    4e48:	9a01      	ldr	r2, [sp, #4]
    4e4a:	4613      	mov	r3, r2
    4e4c:	009b      	lsls	r3, r3, #2
    4e4e:	4413      	add	r3, r2
    4e50:	00db      	lsls	r3, r3, #3
    4e52:	3340      	adds	r3, #64	; 0x40
    4e54:	440b      	add	r3, r1
    4e56:	9300      	str	r3, [sp, #0]
                break;
    4e58:	e009      	b.n	4e6e <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4e5a:	9b01      	ldr	r3, [sp, #4]
    4e5c:	3301      	adds	r3, #1
    4e5e:	9301      	str	r3, [sp, #4]
    4e60:	4b17      	ldr	r3, [pc, #92]	; (4ec0 <getSpllConfig+0xa8>)
    4e62:	681b      	ldr	r3, [r3, #0]
    4e64:	7a9b      	ldrb	r3, [r3, #10]
    4e66:	461a      	mov	r2, r3
    4e68:	9b01      	ldr	r3, [sp, #4]
    4e6a:	4293      	cmp	r3, r2
    4e6c:	d3de      	bcc.n	4e2c <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4e6e:	9b00      	ldr	r3, [sp, #0]
    4e70:	2b00      	cmp	r3, #0
    4e72:	d121      	bne.n	4eb8 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4e74:	4b13      	ldr	r3, [pc, #76]	; (4ec4 <getSpllConfig+0xac>)
    4e76:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4e78:	4b12      	ldr	r3, [pc, #72]	; (4ec4 <getSpllConfig+0xac>)
    4e7a:	2209      	movs	r2, #9
    4e7c:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4e7e:	4b12      	ldr	r3, [pc, #72]	; (4ec8 <getSpllConfig+0xb0>)
    4e80:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4e84:	b29b      	uxth	r3, r3
    4e86:	f003 0301 	and.w	r3, r3, #1
    4e8a:	b29a      	uxth	r2, r3
    4e8c:	4b0d      	ldr	r3, [pc, #52]	; (4ec4 <getSpllConfig+0xac>)
    4e8e:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4e90:	4b0d      	ldr	r3, [pc, #52]	; (4ec8 <getSpllConfig+0xb0>)
    4e92:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4e96:	0a1b      	lsrs	r3, r3, #8
    4e98:	b2db      	uxtb	r3, r3
    4e9a:	f003 0307 	and.w	r3, r3, #7
    4e9e:	b2da      	uxtb	r2, r3
    4ea0:	4b08      	ldr	r3, [pc, #32]	; (4ec4 <getSpllConfig+0xac>)
    4ea2:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4ea4:	4b08      	ldr	r3, [pc, #32]	; (4ec8 <getSpllConfig+0xb0>)
    4ea6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4eaa:	0c1b      	lsrs	r3, r3, #16
    4eac:	b2db      	uxtb	r3, r3
    4eae:	f003 031f 	and.w	r3, r3, #31
    4eb2:	b2da      	uxtb	r2, r3
    4eb4:	4b03      	ldr	r3, [pc, #12]	; (4ec4 <getSpllConfig+0xac>)
    4eb6:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4eb8:	9b00      	ldr	r3, [sp, #0]
}
    4eba:	4618      	mov	r0, r3
    4ebc:	b002      	add	sp, #8
    4ebe:	4770      	bx	lr
    4ec0:	1fff8bb4 	.word	0x1fff8bb4
    4ec4:	1fff8c40 	.word	0x1fff8c40
    4ec8:	40064000 	.word	0x40064000

00004ecc <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4ecc:	b086      	sub	sp, #24
    4ece:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4ed0:	2300      	movs	r3, #0
    4ed2:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4ed4:	9b01      	ldr	r3, [sp, #4]
    4ed6:	2b1b      	cmp	r3, #27
    4ed8:	d00f      	beq.n	4efa <getSelectorConfig+0x2e>
    4eda:	9b01      	ldr	r3, [sp, #4]
    4edc:	2b1b      	cmp	r3, #27
    4ede:	d80f      	bhi.n	4f00 <getSelectorConfig+0x34>
    4ee0:	9b01      	ldr	r3, [sp, #4]
    4ee2:	2b19      	cmp	r3, #25
    4ee4:	d003      	beq.n	4eee <getSelectorConfig+0x22>
    4ee6:	9b01      	ldr	r3, [sp, #4]
    4ee8:	2b1a      	cmp	r3, #26
    4eea:	d003      	beq.n	4ef4 <getSelectorConfig+0x28>
    4eec:	e008      	b.n	4f00 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4eee:	2300      	movs	r3, #0
    4ef0:	9304      	str	r3, [sp, #16]
            break;
    4ef2:	e008      	b.n	4f06 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4ef4:	2301      	movs	r3, #1
    4ef6:	9304      	str	r3, [sp, #16]
            break;
    4ef8:	e005      	b.n	4f06 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4efa:	2302      	movs	r3, #2
    4efc:	9304      	str	r3, [sp, #16]
            break;
    4efe:	e002      	b.n	4f06 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4f00:	2300      	movs	r3, #0
    4f02:	9304      	str	r3, [sp, #16]
            break;
    4f04:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4f06:	4b36      	ldr	r3, [pc, #216]	; (4fe0 <getSelectorConfig+0x114>)
    4f08:	681b      	ldr	r3, [r3, #0]
    4f0a:	2b00      	cmp	r3, #0
    4f0c:	d01d      	beq.n	4f4a <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4f0e:	2300      	movs	r3, #0
    4f10:	9303      	str	r3, [sp, #12]
    4f12:	e013      	b.n	4f3c <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4f14:	4b32      	ldr	r3, [pc, #200]	; (4fe0 <getSelectorConfig+0x114>)
    4f16:	681b      	ldr	r3, [r3, #0]
    4f18:	9a03      	ldr	r2, [sp, #12]
    4f1a:	320d      	adds	r2, #13
    4f1c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4f20:	9a01      	ldr	r2, [sp, #4]
    4f22:	429a      	cmp	r2, r3
    4f24:	d107      	bne.n	4f36 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4f26:	4b2e      	ldr	r3, [pc, #184]	; (4fe0 <getSelectorConfig+0x114>)
    4f28:	681a      	ldr	r2, [r3, #0]
    4f2a:	9b03      	ldr	r3, [sp, #12]
    4f2c:	330d      	adds	r3, #13
    4f2e:	00db      	lsls	r3, r3, #3
    4f30:	4413      	add	r3, r2
    4f32:	9305      	str	r3, [sp, #20]
                break;
    4f34:	e009      	b.n	4f4a <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4f36:	9b03      	ldr	r3, [sp, #12]
    4f38:	3301      	adds	r3, #1
    4f3a:	9303      	str	r3, [sp, #12]
    4f3c:	4b28      	ldr	r3, [pc, #160]	; (4fe0 <getSelectorConfig+0x114>)
    4f3e:	681b      	ldr	r3, [r3, #0]
    4f40:	7adb      	ldrb	r3, [r3, #11]
    4f42:	461a      	mov	r2, r3
    4f44:	9b03      	ldr	r3, [sp, #12]
    4f46:	4293      	cmp	r3, r2
    4f48:	d3e4      	bcc.n	4f14 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4f4a:	9b05      	ldr	r3, [sp, #20]
    4f4c:	2b00      	cmp	r3, #0
    4f4e:	d140      	bne.n	4fd2 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4f50:	9b04      	ldr	r3, [sp, #16]
    4f52:	00db      	lsls	r3, r3, #3
    4f54:	4a23      	ldr	r2, [pc, #140]	; (4fe4 <getSelectorConfig+0x118>)
    4f56:	4413      	add	r3, r2
    4f58:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4f5a:	4922      	ldr	r1, [pc, #136]	; (4fe4 <getSelectorConfig+0x118>)
    4f5c:	9b04      	ldr	r3, [sp, #16]
    4f5e:	9a01      	ldr	r2, [sp, #4]
    4f60:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4f64:	9b01      	ldr	r3, [sp, #4]
    4f66:	2b1b      	cmp	r3, #27
    4f68:	d025      	beq.n	4fb6 <getSelectorConfig+0xea>
    4f6a:	9b01      	ldr	r3, [sp, #4]
    4f6c:	2b1b      	cmp	r3, #27
    4f6e:	d832      	bhi.n	4fd6 <getSelectorConfig+0x10a>
    4f70:	9b01      	ldr	r3, [sp, #4]
    4f72:	2b19      	cmp	r3, #25
    4f74:	d003      	beq.n	4f7e <getSelectorConfig+0xb2>
    4f76:	9b01      	ldr	r3, [sp, #4]
    4f78:	2b1a      	cmp	r3, #26
    4f7a:	d00e      	beq.n	4f9a <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4f7c:	e02b      	b.n	4fd6 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4f7e:	4b1a      	ldr	r3, [pc, #104]	; (4fe8 <getSelectorConfig+0x11c>)
    4f80:	695b      	ldr	r3, [r3, #20]
    4f82:	0e1b      	lsrs	r3, r3, #24
    4f84:	f003 030f 	and.w	r3, r3, #15
    4f88:	4a18      	ldr	r2, [pc, #96]	; (4fec <getSelectorConfig+0x120>)
    4f8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4f8e:	4915      	ldr	r1, [pc, #84]	; (4fe4 <getSelectorConfig+0x118>)
    4f90:	9b04      	ldr	r3, [sp, #16]
    4f92:	00db      	lsls	r3, r3, #3
    4f94:	440b      	add	r3, r1
    4f96:	605a      	str	r2, [r3, #4]
                break;
    4f98:	e01e      	b.n	4fd8 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4f9a:	4b13      	ldr	r3, [pc, #76]	; (4fe8 <getSelectorConfig+0x11c>)
    4f9c:	699b      	ldr	r3, [r3, #24]
    4f9e:	0e1b      	lsrs	r3, r3, #24
    4fa0:	f003 030f 	and.w	r3, r3, #15
    4fa4:	4a11      	ldr	r2, [pc, #68]	; (4fec <getSelectorConfig+0x120>)
    4fa6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4faa:	490e      	ldr	r1, [pc, #56]	; (4fe4 <getSelectorConfig+0x118>)
    4fac:	9b04      	ldr	r3, [sp, #16]
    4fae:	00db      	lsls	r3, r3, #3
    4fb0:	440b      	add	r3, r1
    4fb2:	605a      	str	r2, [r3, #4]
                break;
    4fb4:	e010      	b.n	4fd8 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4fb6:	4b0c      	ldr	r3, [pc, #48]	; (4fe8 <getSelectorConfig+0x11c>)
    4fb8:	69db      	ldr	r3, [r3, #28]
    4fba:	0e1b      	lsrs	r3, r3, #24
    4fbc:	f003 030f 	and.w	r3, r3, #15
    4fc0:	4a0a      	ldr	r2, [pc, #40]	; (4fec <getSelectorConfig+0x120>)
    4fc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4fc6:	4907      	ldr	r1, [pc, #28]	; (4fe4 <getSelectorConfig+0x118>)
    4fc8:	9b04      	ldr	r3, [sp, #16]
    4fca:	00db      	lsls	r3, r3, #3
    4fcc:	440b      	add	r3, r1
    4fce:	605a      	str	r2, [r3, #4]
                break;
    4fd0:	e002      	b.n	4fd8 <getSelectorConfig+0x10c>
        }
    }
    4fd2:	bf00      	nop
    4fd4:	e000      	b.n	4fd8 <getSelectorConfig+0x10c>
                break;
    4fd6:	bf00      	nop

    return ReturnValue;
    4fd8:	9b05      	ldr	r3, [sp, #20]
}
    4fda:	4618      	mov	r0, r3
    4fdc:	b006      	add	sp, #24
    4fde:	4770      	bx	lr
    4fe0:	1fff8bb4 	.word	0x1fff8bb4
    4fe4:	1fff8c68 	.word	0x1fff8c68
    4fe8:	40064000 	.word	0x40064000
    4fec:	0000fed0 	.word	0x0000fed0

00004ff0 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4ff0:	b086      	sub	sp, #24
    4ff2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4ff4:	2300      	movs	r3, #0
    4ff6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4ff8:	2300      	movs	r3, #0
    4ffa:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4ffc:	9b01      	ldr	r3, [sp, #4]
    4ffe:	2b1f      	cmp	r3, #31
    5000:	d00f      	beq.n	5022 <getCoreDividerConfig+0x32>
    5002:	9b01      	ldr	r3, [sp, #4]
    5004:	2b1f      	cmp	r3, #31
    5006:	d80f      	bhi.n	5028 <getCoreDividerConfig+0x38>
    5008:	9b01      	ldr	r3, [sp, #4]
    500a:	2b1d      	cmp	r3, #29
    500c:	d003      	beq.n	5016 <getCoreDividerConfig+0x26>
    500e:	9b01      	ldr	r3, [sp, #4]
    5010:	2b1e      	cmp	r3, #30
    5012:	d003      	beq.n	501c <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5014:	e008      	b.n	5028 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5016:	2300      	movs	r3, #0
    5018:	9304      	str	r3, [sp, #16]
            break;
    501a:	e006      	b.n	502a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    501c:	2301      	movs	r3, #1
    501e:	9304      	str	r3, [sp, #16]
            break;
    5020:	e003      	b.n	502a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5022:	2302      	movs	r3, #2
    5024:	9304      	str	r3, [sp, #16]
            break;
    5026:	e000      	b.n	502a <getCoreDividerConfig+0x3a>
                break;
    5028:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    502a:	4b41      	ldr	r3, [pc, #260]	; (5130 <getCoreDividerConfig+0x140>)
    502c:	681b      	ldr	r3, [r3, #0]
    502e:	2b00      	cmp	r3, #0
    5030:	d026      	beq.n	5080 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5032:	2300      	movs	r3, #0
    5034:	9303      	str	r3, [sp, #12]
    5036:	e01c      	b.n	5072 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5038:	4b3d      	ldr	r3, [pc, #244]	; (5130 <getCoreDividerConfig+0x140>)
    503a:	6819      	ldr	r1, [r3, #0]
    503c:	9a03      	ldr	r2, [sp, #12]
    503e:	4613      	mov	r3, r2
    5040:	005b      	lsls	r3, r3, #1
    5042:	4413      	add	r3, r2
    5044:	009b      	lsls	r3, r3, #2
    5046:	440b      	add	r3, r1
    5048:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    504c:	681b      	ldr	r3, [r3, #0]
    504e:	9a01      	ldr	r2, [sp, #4]
    5050:	429a      	cmp	r2, r3
    5052:	d10b      	bne.n	506c <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5054:	4b36      	ldr	r3, [pc, #216]	; (5130 <getCoreDividerConfig+0x140>)
    5056:	6819      	ldr	r1, [r3, #0]
    5058:	9a03      	ldr	r2, [sp, #12]
    505a:	4613      	mov	r3, r2
    505c:	005b      	lsls	r3, r3, #1
    505e:	4413      	add	r3, r2
    5060:	009b      	lsls	r3, r3, #2
    5062:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5066:	440b      	add	r3, r1
    5068:	9305      	str	r3, [sp, #20]
                break;
    506a:	e009      	b.n	5080 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    506c:	9b03      	ldr	r3, [sp, #12]
    506e:	3301      	adds	r3, #1
    5070:	9303      	str	r3, [sp, #12]
    5072:	4b2f      	ldr	r3, [pc, #188]	; (5130 <getCoreDividerConfig+0x140>)
    5074:	681b      	ldr	r3, [r3, #0]
    5076:	7b1b      	ldrb	r3, [r3, #12]
    5078:	461a      	mov	r2, r3
    507a:	9b03      	ldr	r3, [sp, #12]
    507c:	4293      	cmp	r3, r2
    507e:	d3db      	bcc.n	5038 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5080:	9b05      	ldr	r3, [sp, #20]
    5082:	2b00      	cmp	r3, #0
    5084:	d14d      	bne.n	5122 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    5086:	9a04      	ldr	r2, [sp, #16]
    5088:	4613      	mov	r3, r2
    508a:	005b      	lsls	r3, r3, #1
    508c:	4413      	add	r3, r2
    508e:	009b      	lsls	r3, r3, #2
    5090:	4a28      	ldr	r2, [pc, #160]	; (5134 <getCoreDividerConfig+0x144>)
    5092:	4413      	add	r3, r2
    5094:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    5096:	4927      	ldr	r1, [pc, #156]	; (5134 <getCoreDividerConfig+0x144>)
    5098:	9a04      	ldr	r2, [sp, #16]
    509a:	4613      	mov	r3, r2
    509c:	005b      	lsls	r3, r3, #1
    509e:	4413      	add	r3, r2
    50a0:	009b      	lsls	r3, r3, #2
    50a2:	440b      	add	r3, r1
    50a4:	9a01      	ldr	r2, [sp, #4]
    50a6:	601a      	str	r2, [r3, #0]
        switch(Name)
    50a8:	9b01      	ldr	r3, [sp, #4]
    50aa:	2b1f      	cmp	r3, #31
    50ac:	d029      	beq.n	5102 <getCoreDividerConfig+0x112>
    50ae:	9b01      	ldr	r3, [sp, #4]
    50b0:	2b1f      	cmp	r3, #31
    50b2:	d838      	bhi.n	5126 <getCoreDividerConfig+0x136>
    50b4:	9b01      	ldr	r3, [sp, #4]
    50b6:	2b1d      	cmp	r3, #29
    50b8:	d003      	beq.n	50c2 <getCoreDividerConfig+0xd2>
    50ba:	9b01      	ldr	r3, [sp, #4]
    50bc:	2b1e      	cmp	r3, #30
    50be:	d010      	beq.n	50e2 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    50c0:	e031      	b.n	5126 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    50c2:	4b1d      	ldr	r3, [pc, #116]	; (5138 <getCoreDividerConfig+0x148>)
    50c4:	695b      	ldr	r3, [r3, #20]
    50c6:	0c1b      	lsrs	r3, r3, #16
    50c8:	f003 030f 	and.w	r3, r3, #15
    50cc:	1c59      	adds	r1, r3, #1
    50ce:	4819      	ldr	r0, [pc, #100]	; (5134 <getCoreDividerConfig+0x144>)
    50d0:	9a04      	ldr	r2, [sp, #16]
    50d2:	4613      	mov	r3, r2
    50d4:	005b      	lsls	r3, r3, #1
    50d6:	4413      	add	r3, r2
    50d8:	009b      	lsls	r3, r3, #2
    50da:	4403      	add	r3, r0
    50dc:	3304      	adds	r3, #4
    50de:	6019      	str	r1, [r3, #0]
                break;
    50e0:	e022      	b.n	5128 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    50e2:	4b15      	ldr	r3, [pc, #84]	; (5138 <getCoreDividerConfig+0x148>)
    50e4:	699b      	ldr	r3, [r3, #24]
    50e6:	0c1b      	lsrs	r3, r3, #16
    50e8:	f003 030f 	and.w	r3, r3, #15
    50ec:	1c59      	adds	r1, r3, #1
    50ee:	4811      	ldr	r0, [pc, #68]	; (5134 <getCoreDividerConfig+0x144>)
    50f0:	9a04      	ldr	r2, [sp, #16]
    50f2:	4613      	mov	r3, r2
    50f4:	005b      	lsls	r3, r3, #1
    50f6:	4413      	add	r3, r2
    50f8:	009b      	lsls	r3, r3, #2
    50fa:	4403      	add	r3, r0
    50fc:	3304      	adds	r3, #4
    50fe:	6019      	str	r1, [r3, #0]
                break;
    5100:	e012      	b.n	5128 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    5102:	4b0d      	ldr	r3, [pc, #52]	; (5138 <getCoreDividerConfig+0x148>)
    5104:	69db      	ldr	r3, [r3, #28]
    5106:	0c1b      	lsrs	r3, r3, #16
    5108:	f003 030f 	and.w	r3, r3, #15
    510c:	1c59      	adds	r1, r3, #1
    510e:	4809      	ldr	r0, [pc, #36]	; (5134 <getCoreDividerConfig+0x144>)
    5110:	9a04      	ldr	r2, [sp, #16]
    5112:	4613      	mov	r3, r2
    5114:	005b      	lsls	r3, r3, #1
    5116:	4413      	add	r3, r2
    5118:	009b      	lsls	r3, r3, #2
    511a:	4403      	add	r3, r0
    511c:	3304      	adds	r3, #4
    511e:	6019      	str	r1, [r3, #0]
                break;
    5120:	e002      	b.n	5128 <getCoreDividerConfig+0x138>
        }
    }
    5122:	bf00      	nop
    5124:	e000      	b.n	5128 <getCoreDividerConfig+0x138>
                break;
    5126:	bf00      	nop

    return ReturnValue;
    5128:	9b05      	ldr	r3, [sp, #20]
}
    512a:	4618      	mov	r0, r3
    512c:	b006      	add	sp, #24
    512e:	4770      	bx	lr
    5130:	1fff8bb4 	.word	0x1fff8bb4
    5134:	1fff8c80 	.word	0x1fff8c80
    5138:	40064000 	.word	0x40064000

0000513c <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    513c:	b086      	sub	sp, #24
    513e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5140:	2300      	movs	r3, #0
    5142:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5144:	2300      	movs	r3, #0
    5146:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5148:	9b01      	ldr	r3, [sp, #4]
    514a:	2b23      	cmp	r3, #35	; 0x23
    514c:	d00f      	beq.n	516e <getBusDividerConfig+0x32>
    514e:	9b01      	ldr	r3, [sp, #4]
    5150:	2b23      	cmp	r3, #35	; 0x23
    5152:	d80f      	bhi.n	5174 <getBusDividerConfig+0x38>
    5154:	9b01      	ldr	r3, [sp, #4]
    5156:	2b21      	cmp	r3, #33	; 0x21
    5158:	d003      	beq.n	5162 <getBusDividerConfig+0x26>
    515a:	9b01      	ldr	r3, [sp, #4]
    515c:	2b22      	cmp	r3, #34	; 0x22
    515e:	d003      	beq.n	5168 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5160:	e008      	b.n	5174 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5162:	2300      	movs	r3, #0
    5164:	9304      	str	r3, [sp, #16]
            break;
    5166:	e006      	b.n	5176 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5168:	2301      	movs	r3, #1
    516a:	9304      	str	r3, [sp, #16]
            break;
    516c:	e003      	b.n	5176 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    516e:	2302      	movs	r3, #2
    5170:	9304      	str	r3, [sp, #16]
            break;
    5172:	e000      	b.n	5176 <getBusDividerConfig+0x3a>
                break;
    5174:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5176:	4b41      	ldr	r3, [pc, #260]	; (527c <getBusDividerConfig+0x140>)
    5178:	681b      	ldr	r3, [r3, #0]
    517a:	2b00      	cmp	r3, #0
    517c:	d026      	beq.n	51cc <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    517e:	2300      	movs	r3, #0
    5180:	9303      	str	r3, [sp, #12]
    5182:	e01c      	b.n	51be <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5184:	4b3d      	ldr	r3, [pc, #244]	; (527c <getBusDividerConfig+0x140>)
    5186:	6819      	ldr	r1, [r3, #0]
    5188:	9a03      	ldr	r2, [sp, #12]
    518a:	4613      	mov	r3, r2
    518c:	005b      	lsls	r3, r3, #1
    518e:	4413      	add	r3, r2
    5190:	009b      	lsls	r3, r3, #2
    5192:	440b      	add	r3, r1
    5194:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5198:	681b      	ldr	r3, [r3, #0]
    519a:	9a01      	ldr	r2, [sp, #4]
    519c:	429a      	cmp	r2, r3
    519e:	d10b      	bne.n	51b8 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    51a0:	4b36      	ldr	r3, [pc, #216]	; (527c <getBusDividerConfig+0x140>)
    51a2:	6819      	ldr	r1, [r3, #0]
    51a4:	9a03      	ldr	r2, [sp, #12]
    51a6:	4613      	mov	r3, r2
    51a8:	005b      	lsls	r3, r3, #1
    51aa:	4413      	add	r3, r2
    51ac:	009b      	lsls	r3, r3, #2
    51ae:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    51b2:	440b      	add	r3, r1
    51b4:	9305      	str	r3, [sp, #20]
                break;
    51b6:	e009      	b.n	51cc <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    51b8:	9b03      	ldr	r3, [sp, #12]
    51ba:	3301      	adds	r3, #1
    51bc:	9303      	str	r3, [sp, #12]
    51be:	4b2f      	ldr	r3, [pc, #188]	; (527c <getBusDividerConfig+0x140>)
    51c0:	681b      	ldr	r3, [r3, #0]
    51c2:	7b1b      	ldrb	r3, [r3, #12]
    51c4:	461a      	mov	r2, r3
    51c6:	9b03      	ldr	r3, [sp, #12]
    51c8:	4293      	cmp	r3, r2
    51ca:	d3db      	bcc.n	5184 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    51cc:	9b05      	ldr	r3, [sp, #20]
    51ce:	2b00      	cmp	r3, #0
    51d0:	d14d      	bne.n	526e <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    51d2:	9a04      	ldr	r2, [sp, #16]
    51d4:	4613      	mov	r3, r2
    51d6:	005b      	lsls	r3, r3, #1
    51d8:	4413      	add	r3, r2
    51da:	009b      	lsls	r3, r3, #2
    51dc:	4a28      	ldr	r2, [pc, #160]	; (5280 <getBusDividerConfig+0x144>)
    51de:	4413      	add	r3, r2
    51e0:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    51e2:	4927      	ldr	r1, [pc, #156]	; (5280 <getBusDividerConfig+0x144>)
    51e4:	9a04      	ldr	r2, [sp, #16]
    51e6:	4613      	mov	r3, r2
    51e8:	005b      	lsls	r3, r3, #1
    51ea:	4413      	add	r3, r2
    51ec:	009b      	lsls	r3, r3, #2
    51ee:	440b      	add	r3, r1
    51f0:	9a01      	ldr	r2, [sp, #4]
    51f2:	601a      	str	r2, [r3, #0]
        switch(Name)
    51f4:	9b01      	ldr	r3, [sp, #4]
    51f6:	2b23      	cmp	r3, #35	; 0x23
    51f8:	d029      	beq.n	524e <getBusDividerConfig+0x112>
    51fa:	9b01      	ldr	r3, [sp, #4]
    51fc:	2b23      	cmp	r3, #35	; 0x23
    51fe:	d838      	bhi.n	5272 <getBusDividerConfig+0x136>
    5200:	9b01      	ldr	r3, [sp, #4]
    5202:	2b21      	cmp	r3, #33	; 0x21
    5204:	d003      	beq.n	520e <getBusDividerConfig+0xd2>
    5206:	9b01      	ldr	r3, [sp, #4]
    5208:	2b22      	cmp	r3, #34	; 0x22
    520a:	d010      	beq.n	522e <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    520c:	e031      	b.n	5272 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    520e:	4b1d      	ldr	r3, [pc, #116]	; (5284 <getBusDividerConfig+0x148>)
    5210:	695b      	ldr	r3, [r3, #20]
    5212:	091b      	lsrs	r3, r3, #4
    5214:	f003 030f 	and.w	r3, r3, #15
    5218:	1c59      	adds	r1, r3, #1
    521a:	4819      	ldr	r0, [pc, #100]	; (5280 <getBusDividerConfig+0x144>)
    521c:	9a04      	ldr	r2, [sp, #16]
    521e:	4613      	mov	r3, r2
    5220:	005b      	lsls	r3, r3, #1
    5222:	4413      	add	r3, r2
    5224:	009b      	lsls	r3, r3, #2
    5226:	4403      	add	r3, r0
    5228:	3304      	adds	r3, #4
    522a:	6019      	str	r1, [r3, #0]
                break;
    522c:	e022      	b.n	5274 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    522e:	4b15      	ldr	r3, [pc, #84]	; (5284 <getBusDividerConfig+0x148>)
    5230:	699b      	ldr	r3, [r3, #24]
    5232:	091b      	lsrs	r3, r3, #4
    5234:	f003 030f 	and.w	r3, r3, #15
    5238:	1c59      	adds	r1, r3, #1
    523a:	4811      	ldr	r0, [pc, #68]	; (5280 <getBusDividerConfig+0x144>)
    523c:	9a04      	ldr	r2, [sp, #16]
    523e:	4613      	mov	r3, r2
    5240:	005b      	lsls	r3, r3, #1
    5242:	4413      	add	r3, r2
    5244:	009b      	lsls	r3, r3, #2
    5246:	4403      	add	r3, r0
    5248:	3304      	adds	r3, #4
    524a:	6019      	str	r1, [r3, #0]
                break;
    524c:	e012      	b.n	5274 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    524e:	4b0d      	ldr	r3, [pc, #52]	; (5284 <getBusDividerConfig+0x148>)
    5250:	69db      	ldr	r3, [r3, #28]
    5252:	091b      	lsrs	r3, r3, #4
    5254:	f003 030f 	and.w	r3, r3, #15
    5258:	1c59      	adds	r1, r3, #1
    525a:	4809      	ldr	r0, [pc, #36]	; (5280 <getBusDividerConfig+0x144>)
    525c:	9a04      	ldr	r2, [sp, #16]
    525e:	4613      	mov	r3, r2
    5260:	005b      	lsls	r3, r3, #1
    5262:	4413      	add	r3, r2
    5264:	009b      	lsls	r3, r3, #2
    5266:	4403      	add	r3, r0
    5268:	3304      	adds	r3, #4
    526a:	6019      	str	r1, [r3, #0]
                break;
    526c:	e002      	b.n	5274 <getBusDividerConfig+0x138>
        }
    }
    526e:	bf00      	nop
    5270:	e000      	b.n	5274 <getBusDividerConfig+0x138>
                break;
    5272:	bf00      	nop

    return ReturnValue;
    5274:	9b05      	ldr	r3, [sp, #20]
}
    5276:	4618      	mov	r0, r3
    5278:	b006      	add	sp, #24
    527a:	4770      	bx	lr
    527c:	1fff8bb4 	.word	0x1fff8bb4
    5280:	1fff8ca4 	.word	0x1fff8ca4
    5284:	40064000 	.word	0x40064000

00005288 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5288:	b086      	sub	sp, #24
    528a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    528c:	2300      	movs	r3, #0
    528e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5290:	2300      	movs	r3, #0
    5292:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5294:	9b01      	ldr	r3, [sp, #4]
    5296:	2b27      	cmp	r3, #39	; 0x27
    5298:	d00f      	beq.n	52ba <getSlowDividerConfig+0x32>
    529a:	9b01      	ldr	r3, [sp, #4]
    529c:	2b27      	cmp	r3, #39	; 0x27
    529e:	d80f      	bhi.n	52c0 <getSlowDividerConfig+0x38>
    52a0:	9b01      	ldr	r3, [sp, #4]
    52a2:	2b25      	cmp	r3, #37	; 0x25
    52a4:	d003      	beq.n	52ae <getSlowDividerConfig+0x26>
    52a6:	9b01      	ldr	r3, [sp, #4]
    52a8:	2b26      	cmp	r3, #38	; 0x26
    52aa:	d003      	beq.n	52b4 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    52ac:	e008      	b.n	52c0 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    52ae:	2300      	movs	r3, #0
    52b0:	9304      	str	r3, [sp, #16]
            break;
    52b2:	e006      	b.n	52c2 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    52b4:	2301      	movs	r3, #1
    52b6:	9304      	str	r3, [sp, #16]
            break;
    52b8:	e003      	b.n	52c2 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    52ba:	2302      	movs	r3, #2
    52bc:	9304      	str	r3, [sp, #16]
            break;
    52be:	e000      	b.n	52c2 <getSlowDividerConfig+0x3a>
                break;
    52c0:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    52c2:	4b40      	ldr	r3, [pc, #256]	; (53c4 <getSlowDividerConfig+0x13c>)
    52c4:	681b      	ldr	r3, [r3, #0]
    52c6:	2b00      	cmp	r3, #0
    52c8:	d026      	beq.n	5318 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    52ca:	2300      	movs	r3, #0
    52cc:	9303      	str	r3, [sp, #12]
    52ce:	e01c      	b.n	530a <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    52d0:	4b3c      	ldr	r3, [pc, #240]	; (53c4 <getSlowDividerConfig+0x13c>)
    52d2:	6819      	ldr	r1, [r3, #0]
    52d4:	9a03      	ldr	r2, [sp, #12]
    52d6:	4613      	mov	r3, r2
    52d8:	005b      	lsls	r3, r3, #1
    52da:	4413      	add	r3, r2
    52dc:	009b      	lsls	r3, r3, #2
    52de:	440b      	add	r3, r1
    52e0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    52e4:	681b      	ldr	r3, [r3, #0]
    52e6:	9a01      	ldr	r2, [sp, #4]
    52e8:	429a      	cmp	r2, r3
    52ea:	d10b      	bne.n	5304 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    52ec:	4b35      	ldr	r3, [pc, #212]	; (53c4 <getSlowDividerConfig+0x13c>)
    52ee:	6819      	ldr	r1, [r3, #0]
    52f0:	9a03      	ldr	r2, [sp, #12]
    52f2:	4613      	mov	r3, r2
    52f4:	005b      	lsls	r3, r3, #1
    52f6:	4413      	add	r3, r2
    52f8:	009b      	lsls	r3, r3, #2
    52fa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    52fe:	440b      	add	r3, r1
    5300:	9305      	str	r3, [sp, #20]
                break;
    5302:	e009      	b.n	5318 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5304:	9b03      	ldr	r3, [sp, #12]
    5306:	3301      	adds	r3, #1
    5308:	9303      	str	r3, [sp, #12]
    530a:	4b2e      	ldr	r3, [pc, #184]	; (53c4 <getSlowDividerConfig+0x13c>)
    530c:	681b      	ldr	r3, [r3, #0]
    530e:	7b1b      	ldrb	r3, [r3, #12]
    5310:	461a      	mov	r2, r3
    5312:	9b03      	ldr	r3, [sp, #12]
    5314:	4293      	cmp	r3, r2
    5316:	d3db      	bcc.n	52d0 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5318:	9b05      	ldr	r3, [sp, #20]
    531a:	2b00      	cmp	r3, #0
    531c:	d14a      	bne.n	53b4 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    531e:	9a04      	ldr	r2, [sp, #16]
    5320:	4613      	mov	r3, r2
    5322:	005b      	lsls	r3, r3, #1
    5324:	4413      	add	r3, r2
    5326:	009b      	lsls	r3, r3, #2
    5328:	4a27      	ldr	r2, [pc, #156]	; (53c8 <getSlowDividerConfig+0x140>)
    532a:	4413      	add	r3, r2
    532c:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    532e:	4926      	ldr	r1, [pc, #152]	; (53c8 <getSlowDividerConfig+0x140>)
    5330:	9a04      	ldr	r2, [sp, #16]
    5332:	4613      	mov	r3, r2
    5334:	005b      	lsls	r3, r3, #1
    5336:	4413      	add	r3, r2
    5338:	009b      	lsls	r3, r3, #2
    533a:	440b      	add	r3, r1
    533c:	9a01      	ldr	r2, [sp, #4]
    533e:	601a      	str	r2, [r3, #0]
        switch(Name)
    5340:	9b01      	ldr	r3, [sp, #4]
    5342:	2b27      	cmp	r3, #39	; 0x27
    5344:	d027      	beq.n	5396 <getSlowDividerConfig+0x10e>
    5346:	9b01      	ldr	r3, [sp, #4]
    5348:	2b27      	cmp	r3, #39	; 0x27
    534a:	d835      	bhi.n	53b8 <getSlowDividerConfig+0x130>
    534c:	9b01      	ldr	r3, [sp, #4]
    534e:	2b25      	cmp	r3, #37	; 0x25
    5350:	d003      	beq.n	535a <getSlowDividerConfig+0xd2>
    5352:	9b01      	ldr	r3, [sp, #4]
    5354:	2b26      	cmp	r3, #38	; 0x26
    5356:	d00f      	beq.n	5378 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5358:	e02e      	b.n	53b8 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    535a:	4b1c      	ldr	r3, [pc, #112]	; (53cc <getSlowDividerConfig+0x144>)
    535c:	695b      	ldr	r3, [r3, #20]
    535e:	f003 030f 	and.w	r3, r3, #15
    5362:	1c59      	adds	r1, r3, #1
    5364:	4818      	ldr	r0, [pc, #96]	; (53c8 <getSlowDividerConfig+0x140>)
    5366:	9a04      	ldr	r2, [sp, #16]
    5368:	4613      	mov	r3, r2
    536a:	005b      	lsls	r3, r3, #1
    536c:	4413      	add	r3, r2
    536e:	009b      	lsls	r3, r3, #2
    5370:	4403      	add	r3, r0
    5372:	3304      	adds	r3, #4
    5374:	6019      	str	r1, [r3, #0]
                break;
    5376:	e020      	b.n	53ba <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5378:	4b14      	ldr	r3, [pc, #80]	; (53cc <getSlowDividerConfig+0x144>)
    537a:	699b      	ldr	r3, [r3, #24]
    537c:	f003 030f 	and.w	r3, r3, #15
    5380:	1c59      	adds	r1, r3, #1
    5382:	4811      	ldr	r0, [pc, #68]	; (53c8 <getSlowDividerConfig+0x140>)
    5384:	9a04      	ldr	r2, [sp, #16]
    5386:	4613      	mov	r3, r2
    5388:	005b      	lsls	r3, r3, #1
    538a:	4413      	add	r3, r2
    538c:	009b      	lsls	r3, r3, #2
    538e:	4403      	add	r3, r0
    5390:	3304      	adds	r3, #4
    5392:	6019      	str	r1, [r3, #0]
                break;
    5394:	e011      	b.n	53ba <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    5396:	4b0d      	ldr	r3, [pc, #52]	; (53cc <getSlowDividerConfig+0x144>)
    5398:	69db      	ldr	r3, [r3, #28]
    539a:	f003 030f 	and.w	r3, r3, #15
    539e:	1c59      	adds	r1, r3, #1
    53a0:	4809      	ldr	r0, [pc, #36]	; (53c8 <getSlowDividerConfig+0x140>)
    53a2:	9a04      	ldr	r2, [sp, #16]
    53a4:	4613      	mov	r3, r2
    53a6:	005b      	lsls	r3, r3, #1
    53a8:	4413      	add	r3, r2
    53aa:	009b      	lsls	r3, r3, #2
    53ac:	4403      	add	r3, r0
    53ae:	3304      	adds	r3, #4
    53b0:	6019      	str	r1, [r3, #0]
                break;
    53b2:	e002      	b.n	53ba <getSlowDividerConfig+0x132>
        }
    }
    53b4:	bf00      	nop
    53b6:	e000      	b.n	53ba <getSlowDividerConfig+0x132>
                break;
    53b8:	bf00      	nop

    return ReturnValue;
    53ba:	9b05      	ldr	r3, [sp, #20]
}
    53bc:	4618      	mov	r0, r3
    53be:	b006      	add	sp, #24
    53c0:	4770      	bx	lr
    53c2:	bf00      	nop
    53c4:	1fff8bb4 	.word	0x1fff8bb4
    53c8:	1fff8cc8 	.word	0x1fff8cc8
    53cc:	40064000 	.word	0x40064000

000053d0 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    53d0:	b500      	push	{lr}
    53d2:	b083      	sub	sp, #12
    53d4:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    53d6:	4b64      	ldr	r3, [pc, #400]	; (5568 <Clock_Ip_ClockInitializeObjects+0x198>)
    53d8:	781b      	ldrb	r3, [r3, #0]
    53da:	f083 0301 	eor.w	r3, r3, #1
    53de:	b2db      	uxtb	r3, r3
    53e0:	2b00      	cmp	r3, #0
    53e2:	d05b      	beq.n	549c <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    53e4:	4b60      	ldr	r3, [pc, #384]	; (5568 <Clock_Ip_ClockInitializeObjects+0x198>)
    53e6:	2201      	movs	r2, #1
    53e8:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    53ea:	4b60      	ldr	r3, [pc, #384]	; (556c <Clock_Ip_ClockInitializeObjects+0x19c>)
    53ec:	785b      	ldrb	r3, [r3, #1]
    53ee:	461a      	mov	r2, r3
    53f0:	4613      	mov	r3, r2
    53f2:	009b      	lsls	r3, r3, #2
    53f4:	4413      	add	r3, r2
    53f6:	009b      	lsls	r3, r3, #2
    53f8:	4a5d      	ldr	r2, [pc, #372]	; (5570 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    53fa:	4413      	add	r3, r2
    53fc:	4a5d      	ldr	r2, [pc, #372]	; (5574 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    53fe:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5400:	4b5d      	ldr	r3, [pc, #372]	; (5578 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    5402:	785b      	ldrb	r3, [r3, #1]
    5404:	461a      	mov	r2, r3
    5406:	4613      	mov	r3, r2
    5408:	009b      	lsls	r3, r3, #2
    540a:	4413      	add	r3, r2
    540c:	009b      	lsls	r3, r3, #2
    540e:	4a5b      	ldr	r2, [pc, #364]	; (557c <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5410:	4413      	add	r3, r2
    5412:	4a5b      	ldr	r2, [pc, #364]	; (5580 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5414:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    5416:	4b5b      	ldr	r3, [pc, #364]	; (5584 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5418:	791b      	ldrb	r3, [r3, #4]
    541a:	461a      	mov	r2, r3
    541c:	4613      	mov	r3, r2
    541e:	005b      	lsls	r3, r3, #1
    5420:	4413      	add	r3, r2
    5422:	009b      	lsls	r3, r3, #2
    5424:	4a58      	ldr	r2, [pc, #352]	; (5588 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    5426:	4413      	add	r3, r2
    5428:	4a58      	ldr	r2, [pc, #352]	; (558c <Clock_Ip_ClockInitializeObjects+0x1bc>)
    542a:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    542c:	4b58      	ldr	r3, [pc, #352]	; (5590 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    542e:	795b      	ldrb	r3, [r3, #5]
    5430:	00db      	lsls	r3, r3, #3
    5432:	4a58      	ldr	r2, [pc, #352]	; (5594 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5434:	4413      	add	r3, r2
    5436:	4a58      	ldr	r2, [pc, #352]	; (5598 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    5438:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    543a:	4b55      	ldr	r3, [pc, #340]	; (5590 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    543c:	79db      	ldrb	r3, [r3, #7]
    543e:	00db      	lsls	r3, r3, #3
    5440:	4a54      	ldr	r2, [pc, #336]	; (5594 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5442:	4413      	add	r3, r2
    5444:	4a55      	ldr	r2, [pc, #340]	; (559c <Clock_Ip_ClockInitializeObjects+0x1cc>)
    5446:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    5448:	4b55      	ldr	r3, [pc, #340]	; (55a0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    544a:	799b      	ldrb	r3, [r3, #6]
    544c:	009b      	lsls	r3, r3, #2
    544e:	4a55      	ldr	r2, [pc, #340]	; (55a4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5450:	4413      	add	r3, r2
    5452:	4a55      	ldr	r2, [pc, #340]	; (55a8 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5454:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    5456:	4b52      	ldr	r3, [pc, #328]	; (55a0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5458:	7a1b      	ldrb	r3, [r3, #8]
    545a:	009b      	lsls	r3, r3, #2
    545c:	4a51      	ldr	r2, [pc, #324]	; (55a4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    545e:	4413      	add	r3, r2
    5460:	4a52      	ldr	r2, [pc, #328]	; (55ac <Clock_Ip_ClockInitializeObjects+0x1dc>)
    5462:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    5464:	4b4e      	ldr	r3, [pc, #312]	; (55a0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5466:	7a5b      	ldrb	r3, [r3, #9]
    5468:	009b      	lsls	r3, r3, #2
    546a:	4a4e      	ldr	r2, [pc, #312]	; (55a4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    546c:	4413      	add	r3, r2
    546e:	4a50      	ldr	r2, [pc, #320]	; (55b0 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    5470:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    5472:	4b4b      	ldr	r3, [pc, #300]	; (55a0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5474:	7adb      	ldrb	r3, [r3, #11]
    5476:	009b      	lsls	r3, r3, #2
    5478:	4a4a      	ldr	r2, [pc, #296]	; (55a4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    547a:	4413      	add	r3, r2
    547c:	4a4d      	ldr	r2, [pc, #308]	; (55b4 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    547e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    5480:	4b47      	ldr	r3, [pc, #284]	; (55a0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5482:	7b1b      	ldrb	r3, [r3, #12]
    5484:	009b      	lsls	r3, r3, #2
    5486:	4a47      	ldr	r2, [pc, #284]	; (55a4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5488:	4413      	add	r3, r2
    548a:	4a4b      	ldr	r2, [pc, #300]	; (55b8 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    548c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    548e:	4b44      	ldr	r3, [pc, #272]	; (55a0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5490:	7b9b      	ldrb	r3, [r3, #14]
    5492:	009b      	lsls	r3, r3, #2
    5494:	4a43      	ldr	r2, [pc, #268]	; (55a4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5496:	4413      	add	r3, r2
    5498:	4a48      	ldr	r2, [pc, #288]	; (55bc <Clock_Ip_ClockInitializeObjects+0x1ec>)
    549a:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    549c:	4b48      	ldr	r3, [pc, #288]	; (55c0 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    549e:	781b      	ldrb	r3, [r3, #0]
    54a0:	2b00      	cmp	r3, #0
    54a2:	d002      	beq.n	54aa <Clock_Ip_ClockInitializeObjects+0xda>
    54a4:	9b01      	ldr	r3, [sp, #4]
    54a6:	2b00      	cmp	r3, #0
    54a8:	d003      	beq.n	54b2 <Clock_Ip_ClockInitializeObjects+0xe2>
    54aa:	4b46      	ldr	r3, [pc, #280]	; (55c4 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    54ac:	781b      	ldrb	r3, [r3, #0]
    54ae:	2b00      	cmp	r3, #0
    54b0:	d056      	beq.n	5560 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    54b2:	f7ff fc09 	bl	4cc8 <getFircConfig>
    54b6:	4603      	mov	r3, r0
    54b8:	4a43      	ldr	r2, [pc, #268]	; (55c8 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    54ba:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    54bc:	f7ff fc60 	bl	4d80 <getSoscConfig>
    54c0:	4603      	mov	r3, r0
    54c2:	4a42      	ldr	r2, [pc, #264]	; (55cc <Clock_Ip_ClockInitializeObjects+0x1fc>)
    54c4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    54c6:	f7ff fca7 	bl	4e18 <getSpllConfig>
    54ca:	4603      	mov	r3, r0
    54cc:	4a40      	ldr	r2, [pc, #256]	; (55d0 <Clock_Ip_ClockInitializeObjects+0x200>)
    54ce:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    54d0:	2019      	movs	r0, #25
    54d2:	f7ff fcfb 	bl	4ecc <getSelectorConfig>
    54d6:	4603      	mov	r3, r0
    54d8:	4a3e      	ldr	r2, [pc, #248]	; (55d4 <Clock_Ip_ClockInitializeObjects+0x204>)
    54da:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    54dc:	201a      	movs	r0, #26
    54de:	f7ff fcf5 	bl	4ecc <getSelectorConfig>
    54e2:	4603      	mov	r3, r0
    54e4:	4a3c      	ldr	r2, [pc, #240]	; (55d8 <Clock_Ip_ClockInitializeObjects+0x208>)
    54e6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    54e8:	201b      	movs	r0, #27
    54ea:	f7ff fcef 	bl	4ecc <getSelectorConfig>
    54ee:	4603      	mov	r3, r0
    54f0:	4a3a      	ldr	r2, [pc, #232]	; (55dc <Clock_Ip_ClockInitializeObjects+0x20c>)
    54f2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    54f4:	201d      	movs	r0, #29
    54f6:	f7ff fd7b 	bl	4ff0 <getCoreDividerConfig>
    54fa:	4603      	mov	r3, r0
    54fc:	4a38      	ldr	r2, [pc, #224]	; (55e0 <Clock_Ip_ClockInitializeObjects+0x210>)
    54fe:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5500:	201e      	movs	r0, #30
    5502:	f7ff fd75 	bl	4ff0 <getCoreDividerConfig>
    5506:	4603      	mov	r3, r0
    5508:	4a36      	ldr	r2, [pc, #216]	; (55e4 <Clock_Ip_ClockInitializeObjects+0x214>)
    550a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    550c:	201f      	movs	r0, #31
    550e:	f7ff fd6f 	bl	4ff0 <getCoreDividerConfig>
    5512:	4603      	mov	r3, r0
    5514:	4a34      	ldr	r2, [pc, #208]	; (55e8 <Clock_Ip_ClockInitializeObjects+0x218>)
    5516:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5518:	2021      	movs	r0, #33	; 0x21
    551a:	f7ff fe0f 	bl	513c <getBusDividerConfig>
    551e:	4603      	mov	r3, r0
    5520:	4a32      	ldr	r2, [pc, #200]	; (55ec <Clock_Ip_ClockInitializeObjects+0x21c>)
    5522:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5524:	2022      	movs	r0, #34	; 0x22
    5526:	f7ff fe09 	bl	513c <getBusDividerConfig>
    552a:	4603      	mov	r3, r0
    552c:	4a30      	ldr	r2, [pc, #192]	; (55f0 <Clock_Ip_ClockInitializeObjects+0x220>)
    552e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    5530:	2023      	movs	r0, #35	; 0x23
    5532:	f7ff fe03 	bl	513c <getBusDividerConfig>
    5536:	4603      	mov	r3, r0
    5538:	4a2e      	ldr	r2, [pc, #184]	; (55f4 <Clock_Ip_ClockInitializeObjects+0x224>)
    553a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    553c:	2025      	movs	r0, #37	; 0x25
    553e:	f7ff fea3 	bl	5288 <getSlowDividerConfig>
    5542:	4603      	mov	r3, r0
    5544:	4a2c      	ldr	r2, [pc, #176]	; (55f8 <Clock_Ip_ClockInitializeObjects+0x228>)
    5546:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    5548:	2026      	movs	r0, #38	; 0x26
    554a:	f7ff fe9d 	bl	5288 <getSlowDividerConfig>
    554e:	4603      	mov	r3, r0
    5550:	4a2a      	ldr	r2, [pc, #168]	; (55fc <Clock_Ip_ClockInitializeObjects+0x22c>)
    5552:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5554:	2027      	movs	r0, #39	; 0x27
    5556:	f7ff fe97 	bl	5288 <getSlowDividerConfig>
    555a:	4603      	mov	r3, r0
    555c:	4a28      	ldr	r2, [pc, #160]	; (5600 <Clock_Ip_ClockInitializeObjects+0x230>)
    555e:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    5560:	bf00      	nop
    5562:	b003      	add	sp, #12
    5564:	f85d fb04 	ldr.w	pc, [sp], #4
    5568:	1fff8cec 	.word	0x1fff8cec
    556c:	0000f800 	.word	0x0000f800
    5570:	0000fe4c 	.word	0x0000fe4c
    5574:	1fff8bb8 	.word	0x1fff8bb8
    5578:	0000f7c0 	.word	0x0000f7c0
    557c:	0000fd94 	.word	0x0000fd94
    5580:	1fff8bbc 	.word	0x1fff8bbc
    5584:	0000f7d0 	.word	0x0000f7d0
    5588:	0000fe00 	.word	0x0000fe00
    558c:	1fff8bc0 	.word	0x1fff8bc0
    5590:	0000f810 	.word	0x0000f810
    5594:	0000fe78 	.word	0x0000fe78
    5598:	1fff8bc4 	.word	0x1fff8bc4
    559c:	1fff8c00 	.word	0x1fff8c00
    55a0:	0000f7a0 	.word	0x0000f7a0
    55a4:	0000fd50 	.word	0x0000fd50
    55a8:	1fff8bc8 	.word	0x1fff8bc8
    55ac:	1fff8c04 	.word	0x1fff8c04
    55b0:	1fff8bcc 	.word	0x1fff8bcc
    55b4:	1fff8c08 	.word	0x1fff8c08
    55b8:	1fff8bd0 	.word	0x1fff8bd0
    55bc:	1fff8c0c 	.word	0x1fff8c0c
    55c0:	1fff8b19 	.word	0x1fff8b19
    55c4:	1fff8b10 	.word	0x1fff8b10
    55c8:	1fff8bd4 	.word	0x1fff8bd4
    55cc:	1fff8bd8 	.word	0x1fff8bd8
    55d0:	1fff8bdc 	.word	0x1fff8bdc
    55d4:	1fff8be0 	.word	0x1fff8be0
    55d8:	1fff8be4 	.word	0x1fff8be4
    55dc:	1fff8c10 	.word	0x1fff8c10
    55e0:	1fff8be8 	.word	0x1fff8be8
    55e4:	1fff8bec 	.word	0x1fff8bec
    55e8:	1fff8c14 	.word	0x1fff8c14
    55ec:	1fff8bf0 	.word	0x1fff8bf0
    55f0:	1fff8bf4 	.word	0x1fff8bf4
    55f4:	1fff8c18 	.word	0x1fff8c18
    55f8:	1fff8bf8 	.word	0x1fff8bf8
    55fc:	1fff8bfc 	.word	0x1fff8bfc
    5600:	1fff8c1c 	.word	0x1fff8c1c

00005604 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5604:	b500      	push	{lr}
    5606:	b083      	sub	sp, #12
    5608:	9001      	str	r0, [sp, #4]
    560a:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    560c:	9b01      	ldr	r3, [sp, #4]
    560e:	2b03      	cmp	r3, #3
    5610:	f000 8090 	beq.w	5734 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    5614:	9b01      	ldr	r3, [sp, #4]
    5616:	2b03      	cmp	r3, #3
    5618:	f200 80d3 	bhi.w	57c2 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    561c:	9b01      	ldr	r3, [sp, #4]
    561e:	2b00      	cmp	r3, #0
    5620:	d040      	beq.n	56a4 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    5622:	9b01      	ldr	r3, [sp, #4]
    5624:	3b01      	subs	r3, #1
    5626:	2b01      	cmp	r3, #1
    5628:	f200 80cb 	bhi.w	57c2 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    562c:	9b00      	ldr	r3, [sp, #0]
    562e:	2b00      	cmp	r3, #0
    5630:	f040 80c9 	bne.w	57c6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    5634:	4b68      	ldr	r3, [pc, #416]	; (57d8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5636:	2200      	movs	r2, #0
    5638:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    563a:	4b68      	ldr	r3, [pc, #416]	; (57dc <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    563c:	681b      	ldr	r3, [r3, #0]
    563e:	685b      	ldr	r3, [r3, #4]
    5640:	4a67      	ldr	r2, [pc, #412]	; (57e0 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    5642:	6812      	ldr	r2, [r2, #0]
    5644:	4610      	mov	r0, r2
    5646:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    5648:	4b66      	ldr	r3, [pc, #408]	; (57e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    564a:	681b      	ldr	r3, [r3, #0]
    564c:	681b      	ldr	r3, [r3, #0]
    564e:	4a66      	ldr	r2, [pc, #408]	; (57e8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    5650:	6812      	ldr	r2, [r2, #0]
    5652:	4610      	mov	r0, r2
    5654:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    5656:	4b65      	ldr	r3, [pc, #404]	; (57ec <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5658:	681b      	ldr	r3, [r3, #0]
    565a:	681b      	ldr	r3, [r3, #0]
    565c:	4a64      	ldr	r2, [pc, #400]	; (57f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    565e:	6812      	ldr	r2, [r2, #0]
    5660:	4610      	mov	r0, r2
    5662:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    5664:	4b63      	ldr	r3, [pc, #396]	; (57f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5666:	681b      	ldr	r3, [r3, #0]
    5668:	681b      	ldr	r3, [r3, #0]
    566a:	4a63      	ldr	r2, [pc, #396]	; (57f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    566c:	6812      	ldr	r2, [r2, #0]
    566e:	4610      	mov	r0, r2
    5670:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    5672:	4b62      	ldr	r3, [pc, #392]	; (57fc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5674:	681b      	ldr	r3, [r3, #0]
    5676:	691b      	ldr	r3, [r3, #16]
    5678:	4a61      	ldr	r2, [pc, #388]	; (5800 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    567a:	6812      	ldr	r2, [r2, #0]
    567c:	6812      	ldr	r2, [r2, #0]
    567e:	4610      	mov	r0, r2
    5680:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    5682:	4b60      	ldr	r3, [pc, #384]	; (5804 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5684:	681b      	ldr	r3, [r3, #0]
    5686:	68db      	ldr	r3, [r3, #12]
    5688:	4a5f      	ldr	r2, [pc, #380]	; (5808 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    568a:	6812      	ldr	r2, [r2, #0]
    568c:	6812      	ldr	r2, [r2, #0]
    568e:	4610      	mov	r0, r2
    5690:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    5692:	4b5e      	ldr	r3, [pc, #376]	; (580c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5694:	681b      	ldr	r3, [r3, #0]
    5696:	689b      	ldr	r3, [r3, #8]
    5698:	4a5d      	ldr	r2, [pc, #372]	; (5810 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    569a:	6812      	ldr	r2, [r2, #0]
    569c:	6812      	ldr	r2, [r2, #0]
    569e:	4610      	mov	r0, r2
    56a0:	4798      	blx	r3
            }
        }
        break;
    56a2:	e090      	b.n	57c6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    56a4:	9b00      	ldr	r3, [sp, #0]
    56a6:	2b02      	cmp	r3, #2
    56a8:	f040 808f 	bne.w	57ca <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    56ac:	4b4a      	ldr	r3, [pc, #296]	; (57d8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    56ae:	2201      	movs	r2, #1
    56b0:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    56b2:	4b56      	ldr	r3, [pc, #344]	; (580c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    56b4:	681b      	ldr	r3, [r3, #0]
    56b6:	685b      	ldr	r3, [r3, #4]
    56b8:	4a55      	ldr	r2, [pc, #340]	; (5810 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    56ba:	6812      	ldr	r2, [r2, #0]
    56bc:	4610      	mov	r0, r2
    56be:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    56c0:	4b50      	ldr	r3, [pc, #320]	; (5804 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    56c2:	681b      	ldr	r3, [r3, #0]
    56c4:	691b      	ldr	r3, [r3, #16]
    56c6:	4a50      	ldr	r2, [pc, #320]	; (5808 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    56c8:	6812      	ldr	r2, [r2, #0]
    56ca:	4610      	mov	r0, r2
    56cc:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    56ce:	4b4d      	ldr	r3, [pc, #308]	; (5804 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    56d0:	681b      	ldr	r3, [r3, #0]
    56d2:	689b      	ldr	r3, [r3, #8]
    56d4:	4a4c      	ldr	r2, [pc, #304]	; (5808 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    56d6:	6812      	ldr	r2, [r2, #0]
    56d8:	4610      	mov	r0, r2
    56da:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    56dc:	4b47      	ldr	r3, [pc, #284]	; (57fc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    56de:	681b      	ldr	r3, [r3, #0]
    56e0:	68db      	ldr	r3, [r3, #12]
    56e2:	4a47      	ldr	r2, [pc, #284]	; (5800 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    56e4:	6812      	ldr	r2, [r2, #0]
    56e6:	4610      	mov	r0, r2
    56e8:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    56ea:	4b44      	ldr	r3, [pc, #272]	; (57fc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    56ec:	681b      	ldr	r3, [r3, #0]
    56ee:	689b      	ldr	r3, [r3, #8]
    56f0:	4a43      	ldr	r2, [pc, #268]	; (5800 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    56f2:	6812      	ldr	r2, [r2, #0]
    56f4:	6812      	ldr	r2, [r2, #0]
    56f6:	4610      	mov	r0, r2
    56f8:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    56fa:	4b38      	ldr	r3, [pc, #224]	; (57dc <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    56fc:	681b      	ldr	r3, [r3, #0]
    56fe:	685b      	ldr	r3, [r3, #4]
    5700:	4a44      	ldr	r2, [pc, #272]	; (5814 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    5702:	6812      	ldr	r2, [r2, #0]
    5704:	4610      	mov	r0, r2
    5706:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5708:	4b36      	ldr	r3, [pc, #216]	; (57e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    570a:	681b      	ldr	r3, [r3, #0]
    570c:	681b      	ldr	r3, [r3, #0]
    570e:	4a42      	ldr	r2, [pc, #264]	; (5818 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5710:	6812      	ldr	r2, [r2, #0]
    5712:	4610      	mov	r0, r2
    5714:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    5716:	4b35      	ldr	r3, [pc, #212]	; (57ec <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5718:	681b      	ldr	r3, [r3, #0]
    571a:	681b      	ldr	r3, [r3, #0]
    571c:	4a3f      	ldr	r2, [pc, #252]	; (581c <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    571e:	6812      	ldr	r2, [r2, #0]
    5720:	4610      	mov	r0, r2
    5722:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5724:	4b33      	ldr	r3, [pc, #204]	; (57f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5726:	681b      	ldr	r3, [r3, #0]
    5728:	681b      	ldr	r3, [r3, #0]
    572a:	4a3d      	ldr	r2, [pc, #244]	; (5820 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    572c:	6812      	ldr	r2, [r2, #0]
    572e:	4610      	mov	r0, r2
    5730:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5732:	e04a      	b.n	57ca <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5734:	9b00      	ldr	r3, [sp, #0]
    5736:	2b02      	cmp	r3, #2
    5738:	d149      	bne.n	57ce <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    573a:	4b27      	ldr	r3, [pc, #156]	; (57d8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    573c:	2201      	movs	r2, #1
    573e:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5740:	4b32      	ldr	r3, [pc, #200]	; (580c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5742:	681b      	ldr	r3, [r3, #0]
    5744:	685b      	ldr	r3, [r3, #4]
    5746:	4a32      	ldr	r2, [pc, #200]	; (5810 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5748:	6812      	ldr	r2, [r2, #0]
    574a:	4610      	mov	r0, r2
    574c:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    574e:	4b2d      	ldr	r3, [pc, #180]	; (5804 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5750:	681b      	ldr	r3, [r3, #0]
    5752:	691b      	ldr	r3, [r3, #16]
    5754:	4a2c      	ldr	r2, [pc, #176]	; (5808 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5756:	6812      	ldr	r2, [r2, #0]
    5758:	4610      	mov	r0, r2
    575a:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    575c:	4b29      	ldr	r3, [pc, #164]	; (5804 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    575e:	681b      	ldr	r3, [r3, #0]
    5760:	689b      	ldr	r3, [r3, #8]
    5762:	4a29      	ldr	r2, [pc, #164]	; (5808 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5764:	6812      	ldr	r2, [r2, #0]
    5766:	4610      	mov	r0, r2
    5768:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    576a:	4b24      	ldr	r3, [pc, #144]	; (57fc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    576c:	681b      	ldr	r3, [r3, #0]
    576e:	68db      	ldr	r3, [r3, #12]
    5770:	4a23      	ldr	r2, [pc, #140]	; (5800 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5772:	6812      	ldr	r2, [r2, #0]
    5774:	4610      	mov	r0, r2
    5776:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5778:	4b20      	ldr	r3, [pc, #128]	; (57fc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    577a:	681b      	ldr	r3, [r3, #0]
    577c:	689b      	ldr	r3, [r3, #8]
    577e:	4a20      	ldr	r2, [pc, #128]	; (5800 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5780:	6812      	ldr	r2, [r2, #0]
    5782:	6812      	ldr	r2, [r2, #0]
    5784:	4610      	mov	r0, r2
    5786:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    5788:	4b26      	ldr	r3, [pc, #152]	; (5824 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    578a:	681b      	ldr	r3, [r3, #0]
    578c:	685b      	ldr	r3, [r3, #4]
    578e:	4a26      	ldr	r2, [pc, #152]	; (5828 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    5790:	6812      	ldr	r2, [r2, #0]
    5792:	4610      	mov	r0, r2
    5794:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    5796:	4b25      	ldr	r3, [pc, #148]	; (582c <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5798:	681b      	ldr	r3, [r3, #0]
    579a:	681b      	ldr	r3, [r3, #0]
    579c:	4a24      	ldr	r2, [pc, #144]	; (5830 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    579e:	6812      	ldr	r2, [r2, #0]
    57a0:	4610      	mov	r0, r2
    57a2:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    57a4:	4b23      	ldr	r3, [pc, #140]	; (5834 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    57a6:	681b      	ldr	r3, [r3, #0]
    57a8:	681b      	ldr	r3, [r3, #0]
    57aa:	4a23      	ldr	r2, [pc, #140]	; (5838 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    57ac:	6812      	ldr	r2, [r2, #0]
    57ae:	4610      	mov	r0, r2
    57b0:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    57b2:	4b22      	ldr	r3, [pc, #136]	; (583c <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    57b4:	681b      	ldr	r3, [r3, #0]
    57b6:	681b      	ldr	r3, [r3, #0]
    57b8:	4a21      	ldr	r2, [pc, #132]	; (5840 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    57ba:	6812      	ldr	r2, [r2, #0]
    57bc:	4610      	mov	r0, r2
    57be:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    57c0:	e005      	b.n	57ce <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    57c2:	bf00      	nop
    57c4:	e004      	b.n	57d0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    57c6:	bf00      	nop
    57c8:	e002      	b.n	57d0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    57ca:	bf00      	nop
    57cc:	e000      	b.n	57d0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    57ce:	bf00      	nop
    }

}
    57d0:	bf00      	nop
    57d2:	b003      	add	sp, #12
    57d4:	f85d fb04 	ldr.w	pc, [sp], #4
    57d8:	1fff8b19 	.word	0x1fff8b19
    57dc:	1fff8bc4 	.word	0x1fff8bc4
    57e0:	1fff8be4 	.word	0x1fff8be4
    57e4:	1fff8bc8 	.word	0x1fff8bc8
    57e8:	1fff8bec 	.word	0x1fff8bec
    57ec:	1fff8bcc 	.word	0x1fff8bcc
    57f0:	1fff8bf4 	.word	0x1fff8bf4
    57f4:	1fff8bd0 	.word	0x1fff8bd0
    57f8:	1fff8bfc 	.word	0x1fff8bfc
    57fc:	1fff8bb8 	.word	0x1fff8bb8
    5800:	1fff8bdc 	.word	0x1fff8bdc
    5804:	1fff8bbc 	.word	0x1fff8bbc
    5808:	1fff8bd8 	.word	0x1fff8bd8
    580c:	1fff8bc0 	.word	0x1fff8bc0
    5810:	1fff8bd4 	.word	0x1fff8bd4
    5814:	1fff8be0 	.word	0x1fff8be0
    5818:	1fff8be8 	.word	0x1fff8be8
    581c:	1fff8bf0 	.word	0x1fff8bf0
    5820:	1fff8bf8 	.word	0x1fff8bf8
    5824:	1fff8c00 	.word	0x1fff8c00
    5828:	1fff8c10 	.word	0x1fff8c10
    582c:	1fff8c04 	.word	0x1fff8c04
    5830:	1fff8c14 	.word	0x1fff8c14
    5834:	1fff8c08 	.word	0x1fff8c08
    5838:	1fff8c18 	.word	0x1fff8c18
    583c:	1fff8c0c 	.word	0x1fff8c0c
    5840:	1fff8c1c 	.word	0x1fff8c1c

00005844 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    5844:	b500      	push	{lr}
    5846:	b083      	sub	sp, #12
    5848:	9001      	str	r0, [sp, #4]
    584a:	9100      	str	r1, [sp, #0]
    switch(Command)
    584c:	9b00      	ldr	r3, [sp, #0]
    584e:	2b04      	cmp	r3, #4
    5850:	d010      	beq.n	5874 <Clock_Ip_Command+0x30>
    5852:	9b00      	ldr	r3, [sp, #0]
    5854:	2b04      	cmp	r3, #4
    5856:	d811      	bhi.n	587c <Clock_Ip_Command+0x38>
    5858:	9b00      	ldr	r3, [sp, #0]
    585a:	2b01      	cmp	r3, #1
    585c:	d006      	beq.n	586c <Clock_Ip_Command+0x28>
    585e:	9b00      	ldr	r3, [sp, #0]
    5860:	2b02      	cmp	r3, #2
    5862:	d10b      	bne.n	587c <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    5864:	9801      	ldr	r0, [sp, #4]
    5866:	f7ff fdb3 	bl	53d0 <Clock_Ip_ClockInitializeObjects>
            break;
    586a:	e008      	b.n	587e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    586c:	9801      	ldr	r0, [sp, #4]
    586e:	f7ff f9db 	bl	4c28 <Clock_Ip_SpecificPlatformInitClock>
            break;
    5872:	e004      	b.n	587e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5874:	9801      	ldr	r0, [sp, #4]
    5876:	f7ff f8ed 	bl	4a54 <DisableSafeClock>
            break;
    587a:	e000      	b.n	587e <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    587c:	bf00      	nop
    }
}
    587e:	bf00      	nop
    5880:	b003      	add	sp, #12
    5882:	f85d fb04 	ldr.w	pc, [sp], #4
    5886:	bf00      	nop

00005888 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5888:	b500      	push	{lr}
    588a:	b085      	sub	sp, #20
    588c:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    588e:	4a20      	ldr	r2, [pc, #128]	; (5910 <Mcu_Init+0x88>)
    5890:	9b01      	ldr	r3, [sp, #4]
    5892:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5894:	2300      	movs	r3, #0
    5896:	9303      	str	r3, [sp, #12]
    5898:	e010      	b.n	58bc <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    589a:	4b1d      	ldr	r3, [pc, #116]	; (5910 <Mcu_Init+0x88>)
    589c:	681b      	ldr	r3, [r3, #0]
    589e:	6919      	ldr	r1, [r3, #16]
    58a0:	9a03      	ldr	r2, [sp, #12]
    58a2:	4613      	mov	r3, r2
    58a4:	005b      	lsls	r3, r3, #1
    58a6:	4413      	add	r3, r2
    58a8:	009b      	lsls	r3, r3, #2
    58aa:	440b      	add	r3, r1
    58ac:	681b      	ldr	r3, [r3, #0]
    58ae:	9a03      	ldr	r2, [sp, #12]
    58b0:	b2d1      	uxtb	r1, r2
    58b2:	4a18      	ldr	r2, [pc, #96]	; (5914 <Mcu_Init+0x8c>)
    58b4:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    58b6:	9b03      	ldr	r3, [sp, #12]
    58b8:	3301      	adds	r3, #1
    58ba:	9303      	str	r3, [sp, #12]
    58bc:	4b14      	ldr	r3, [pc, #80]	; (5910 <Mcu_Init+0x88>)
    58be:	681b      	ldr	r3, [r3, #0]
    58c0:	689b      	ldr	r3, [r3, #8]
    58c2:	9a03      	ldr	r2, [sp, #12]
    58c4:	429a      	cmp	r2, r3
    58c6:	d3e8      	bcc.n	589a <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    58c8:	2300      	movs	r3, #0
    58ca:	9303      	str	r3, [sp, #12]
    58cc:	e010      	b.n	58f0 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    58ce:	4b10      	ldr	r3, [pc, #64]	; (5910 <Mcu_Init+0x88>)
    58d0:	681b      	ldr	r3, [r3, #0]
    58d2:	6959      	ldr	r1, [r3, #20]
    58d4:	9a03      	ldr	r2, [sp, #12]
    58d6:	4613      	mov	r3, r2
    58d8:	01db      	lsls	r3, r3, #7
    58da:	1a9b      	subs	r3, r3, r2
    58dc:	00db      	lsls	r3, r3, #3
    58de:	440b      	add	r3, r1
    58e0:	681b      	ldr	r3, [r3, #0]
    58e2:	9a03      	ldr	r2, [sp, #12]
    58e4:	b2d1      	uxtb	r1, r2
    58e6:	4a0c      	ldr	r2, [pc, #48]	; (5918 <Mcu_Init+0x90>)
    58e8:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    58ea:	9b03      	ldr	r3, [sp, #12]
    58ec:	3301      	adds	r3, #1
    58ee:	9303      	str	r3, [sp, #12]
    58f0:	4b07      	ldr	r3, [pc, #28]	; (5910 <Mcu_Init+0x88>)
    58f2:	681b      	ldr	r3, [r3, #0]
    58f4:	68db      	ldr	r3, [r3, #12]
    58f6:	9a03      	ldr	r2, [sp, #12]
    58f8:	429a      	cmp	r2, r3
    58fa:	d3e8      	bcc.n	58ce <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    58fc:	4b04      	ldr	r3, [pc, #16]	; (5910 <Mcu_Init+0x88>)
    58fe:	681b      	ldr	r3, [r3, #0]
    5900:	699b      	ldr	r3, [r3, #24]
    5902:	4618      	mov	r0, r3
    5904:	f000 f88a 	bl	5a1c <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5908:	bf00      	nop
    590a:	b005      	add	sp, #20
    590c:	f85d fb04 	ldr.w	pc, [sp], #4
    5910:	1fff8cf8 	.word	0x1fff8cf8
    5914:	1fff8cf4 	.word	0x1fff8cf4
    5918:	1fff8cf0 	.word	0x1fff8cf0

0000591c <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    591c:	b084      	sub	sp, #16
    591e:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5920:	2301      	movs	r3, #1
    5922:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5926:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    592a:	4618      	mov	r0, r3
    592c:	b004      	add	sp, #16
    592e:	4770      	bx	lr

00005930 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5930:	b500      	push	{lr}
    5932:	b085      	sub	sp, #20
    5934:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5936:	4a0e      	ldr	r2, [pc, #56]	; (5970 <Mcu_InitClock+0x40>)
    5938:	9b01      	ldr	r3, [sp, #4]
    593a:	4413      	add	r3, r2
    593c:	781b      	ldrb	r3, [r3, #0]
    593e:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    5942:	4b0c      	ldr	r3, [pc, #48]	; (5974 <Mcu_InitClock+0x44>)
    5944:	681b      	ldr	r3, [r3, #0]
    5946:	6959      	ldr	r1, [r3, #20]
    5948:	f89d 200f 	ldrb.w	r2, [sp, #15]
    594c:	4613      	mov	r3, r2
    594e:	01db      	lsls	r3, r3, #7
    5950:	1a9b      	subs	r3, r3, r2
    5952:	00db      	lsls	r3, r3, #3
    5954:	440b      	add	r3, r1
    5956:	4618      	mov	r0, r3
    5958:	f000 f86a 	bl	5a30 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    595c:	2300      	movs	r3, #0
    595e:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    5962:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    5966:	4618      	mov	r0, r3
    5968:	b005      	add	sp, #20
    596a:	f85d fb04 	ldr.w	pc, [sp], #4
    596e:	bf00      	nop
    5970:	1fff8cf0 	.word	0x1fff8cf0
    5974:	1fff8cf8 	.word	0x1fff8cf8

00005978 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5978:	b500      	push	{lr}
    597a:	b085      	sub	sp, #20
    597c:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    597e:	4a0d      	ldr	r2, [pc, #52]	; (59b4 <Mcu_SetMode+0x3c>)
    5980:	9b01      	ldr	r3, [sp, #4]
    5982:	4413      	add	r3, r2
    5984:	781b      	ldrb	r3, [r3, #0]
    5986:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    598a:	f008 fa3b 	bl	de04 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    598e:	4b0a      	ldr	r3, [pc, #40]	; (59b8 <Mcu_SetMode+0x40>)
    5990:	681b      	ldr	r3, [r3, #0]
    5992:	6919      	ldr	r1, [r3, #16]
    5994:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5998:	4613      	mov	r3, r2
    599a:	005b      	lsls	r3, r3, #1
    599c:	4413      	add	r3, r2
    599e:	009b      	lsls	r3, r3, #2
    59a0:	440b      	add	r3, r1
    59a2:	4618      	mov	r0, r3
    59a4:	f000 f84e 	bl	5a44 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    59a8:	f008 fa58 	bl	de5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    59ac:	bf00      	nop
    59ae:	b005      	add	sp, #20
    59b0:	f85d fb04 	ldr.w	pc, [sp], #4
    59b4:	1fff8cf4 	.word	0x1fff8cf4
    59b8:	1fff8cf8 	.word	0x1fff8cf8

000059bc <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    59bc:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    59be:	2302      	movs	r3, #2
    59c0:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    59c2:	9b01      	ldr	r3, [sp, #4]
}
    59c4:	4618      	mov	r0, r3
    59c6:	b002      	add	sp, #8
    59c8:	4770      	bx	lr

000059ca <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    59ca:	b500      	push	{lr}
    59cc:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    59ce:	f000 f843 	bl	5a58 <Mcu_Ipw_GetResetReason>
    59d2:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    59d4:	9b01      	ldr	r3, [sp, #4]
}
    59d6:	4618      	mov	r0, r3
    59d8:	b003      	add	sp, #12
    59da:	f85d fb04 	ldr.w	pc, [sp], #4

000059de <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    59de:	b500      	push	{lr}
    59e0:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    59e2:	f000 f83f 	bl	5a64 <Mcu_Ipw_GetResetRawValue>
    59e6:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    59e8:	9b01      	ldr	r3, [sp, #4]
}
    59ea:	4618      	mov	r0, r3
    59ec:	b003      	add	sp, #12
    59ee:	f85d fb04 	ldr.w	pc, [sp], #4

000059f2 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    59f2:	b500      	push	{lr}
    59f4:	b083      	sub	sp, #12
    59f6:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    59f8:	9801      	ldr	r0, [sp, #4]
    59fa:	f000 f839 	bl	5a70 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    59fe:	bf00      	nop
    5a00:	b003      	add	sp, #12
    5a02:	f85d fb04 	ldr.w	pc, [sp], #4

00005a06 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5a06:	b082      	sub	sp, #8
    5a08:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5a0a:	4b03      	ldr	r3, [pc, #12]	; (5a18 <Mcu_ClkSrcFailureNotification+0x12>)
    5a0c:	681b      	ldr	r3, [r3, #0]
    5a0e:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5a10:	bf00      	nop
    5a12:	b002      	add	sp, #8
    5a14:	4770      	bx	lr
    5a16:	bf00      	nop
    5a18:	1fff8cf8 	.word	0x1fff8cf8

00005a1c <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5a1c:	b500      	push	{lr}
    5a1e:	b083      	sub	sp, #12
    5a20:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5a22:	9801      	ldr	r0, [sp, #4]
    5a24:	f000 f882 	bl	5b2c <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5a28:	bf00      	nop
    5a2a:	b003      	add	sp, #12
    5a2c:	f85d fb04 	ldr.w	pc, [sp], #4

00005a30 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5a30:	b500      	push	{lr}
    5a32:	b083      	sub	sp, #12
    5a34:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5a36:	9801      	ldr	r0, [sp, #4]
    5a38:	f7fc fc6a 	bl	2310 <Clock_Ip_InitClock>
}
    5a3c:	bf00      	nop
    5a3e:	b003      	add	sp, #12
    5a40:	f85d fb04 	ldr.w	pc, [sp], #4

00005a44 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5a44:	b500      	push	{lr}
    5a46:	b083      	sub	sp, #12
    5a48:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5a4a:	9801      	ldr	r0, [sp, #4]
    5a4c:	f000 f820 	bl	5a90 <Power_Ip_SetMode>
}
    5a50:	bf00      	nop
    5a52:	b003      	add	sp, #12
    5a54:	f85d fb04 	ldr.w	pc, [sp], #4

00005a58 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5a58:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5a5a:	f000 f84f 	bl	5afc <Power_Ip_GetResetReason>
    5a5e:	4603      	mov	r3, r0
}
    5a60:	4618      	mov	r0, r3
    5a62:	bd08      	pop	{r3, pc}

00005a64 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5a64:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5a66:	f000 f857 	bl	5b18 <Power_Ip_GetResetRawValue>
    5a6a:	4603      	mov	r3, r0
}
    5a6c:	4618      	mov	r0, r3
    5a6e:	bd08      	pop	{r3, pc}

00005a70 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5a70:	b500      	push	{lr}
    5a72:	b083      	sub	sp, #12
    5a74:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5a76:	9b01      	ldr	r3, [sp, #4]
    5a78:	2b00      	cmp	r3, #0
    5a7a:	d102      	bne.n	5a82 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5a7c:	f000 f86c 	bl	5b58 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5a80:	e001      	b.n	5a86 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    5a82:	f000 f86e 	bl	5b62 <Power_Ip_EnableSleepOnExit>
}
    5a86:	bf00      	nop
    5a88:	b003      	add	sp, #12
    5a8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005a90 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5a90:	b500      	push	{lr}
    5a92:	b085      	sub	sp, #20
    5a94:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5a96:	9b01      	ldr	r3, [sp, #4]
    5a98:	685b      	ldr	r3, [r3, #4]
    5a9a:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5a9c:	9802      	ldr	r0, [sp, #8]
    5a9e:	f000 f9f5 	bl	5e8c <Power_Ip_SMC_ModeCheckEntry>
    5aa2:	4603      	mov	r3, r0
    5aa4:	2b00      	cmp	r3, #0
    5aa6:	d002      	beq.n	5aae <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5aa8:	2301      	movs	r3, #1
    5aaa:	9303      	str	r3, [sp, #12]
    5aac:	e003      	b.n	5ab6 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5aae:	9801      	ldr	r0, [sp, #4]
    5ab0:	f000 fa1e 	bl	5ef0 <Power_Ip_SMC_ModeConfig>
    5ab4:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    5ab6:	9b03      	ldr	r3, [sp, #12]
    5ab8:	2b01      	cmp	r3, #1
    5aba:	d103      	bne.n	5ac4 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5abc:	21ff      	movs	r1, #255	; 0xff
    5abe:	2003      	movs	r0, #3
    5ac0:	f000 f8f4 	bl	5cac <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    5ac4:	bf00      	nop
    5ac6:	b005      	add	sp, #20
    5ac8:	f85d fb04 	ldr.w	pc, [sp], #4

00005acc <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5acc:	b084      	sub	sp, #16
    5ace:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5ad0:	230c      	movs	r3, #12
    5ad2:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    5ad4:	4a08      	ldr	r2, [pc, #32]	; (5af8 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5ad6:	9b01      	ldr	r3, [sp, #4]
    5ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5adc:	2b0e      	cmp	r3, #14
    5ade:	d805      	bhi.n	5aec <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5ae0:	4a05      	ldr	r2, [pc, #20]	; (5af8 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5ae2:	9b01      	ldr	r3, [sp, #4]
    5ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ae8:	9303      	str	r3, [sp, #12]
    5aea:	e001      	b.n	5af0 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5aec:	230c      	movs	r3, #12
    5aee:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5af0:	9b03      	ldr	r3, [sp, #12]
}
    5af2:	4618      	mov	r0, r3
    5af4:	b004      	add	sp, #16
    5af6:	4770      	bx	lr
    5af8:	0000feec 	.word	0x0000feec

00005afc <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5afc:	b500      	push	{lr}
    5afe:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5b00:	f000 f940 	bl	5d84 <Power_Ip_RCM_GetResetReason>
    5b04:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5b06:	9801      	ldr	r0, [sp, #4]
    5b08:	f7ff ffe0 	bl	5acc <Power_Ip_ConvertIntergeToResetType>
    5b0c:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5b0e:	9b00      	ldr	r3, [sp, #0]
}
    5b10:	4618      	mov	r0, r3
    5b12:	b003      	add	sp, #12
    5b14:	f85d fb04 	ldr.w	pc, [sp], #4

00005b18 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5b18:	b500      	push	{lr}
    5b1a:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5b1c:	f000 f98a 	bl	5e34 <Power_Ip_RCM_GetResetRawValue>
    5b20:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5b22:	9b01      	ldr	r3, [sp, #4]
}
    5b24:	4618      	mov	r0, r3
    5b26:	b003      	add	sp, #12
    5b28:	f85d fb04 	ldr.w	pc, [sp], #4

00005b2c <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5b2c:	b500      	push	{lr}
    5b2e:	b083      	sub	sp, #12
    5b30:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5b32:	9b01      	ldr	r3, [sp, #4]
    5b34:	681b      	ldr	r3, [r3, #0]
    5b36:	4618      	mov	r0, r3
    5b38:	f000 f90e 	bl	5d58 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5b3c:	9b01      	ldr	r3, [sp, #4]
    5b3e:	685b      	ldr	r3, [r3, #4]
    5b40:	4618      	mov	r0, r3
    5b42:	f000 f86d 	bl	5c20 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5b46:	9b01      	ldr	r3, [sp, #4]
    5b48:	689b      	ldr	r3, [r3, #8]
    5b4a:	4618      	mov	r0, r3
    5b4c:	f000 f990 	bl	5e70 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5b50:	bf00      	nop
    5b52:	b003      	add	sp, #12
    5b54:	f85d fb04 	ldr.w	pc, [sp], #4

00005b58 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5b58:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5b5a:	f000 f811 	bl	5b80 <Power_Ip_CM4_DisableSleepOnExit>
}
    5b5e:	bf00      	nop
    5b60:	bd08      	pop	{r3, pc}

00005b62 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5b62:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5b64:	f000 f820 	bl	5ba8 <Power_Ip_CM4_EnableSleepOnExit>
}
    5b68:	bf00      	nop
    5b6a:	bd08      	pop	{r3, pc}

00005b6c <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5b6c:	b082      	sub	sp, #8
    5b6e:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5b70:	4a02      	ldr	r2, [pc, #8]	; (5b7c <Power_Ip_InstallNotificationsCallback+0x10>)
    5b72:	9b01      	ldr	r3, [sp, #4]
    5b74:	6013      	str	r3, [r2, #0]
}
    5b76:	bf00      	nop
    5b78:	b002      	add	sp, #8
    5b7a:	4770      	bx	lr
    5b7c:	1fff8b1c 	.word	0x1fff8b1c

00005b80 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5b80:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5b82:	2300      	movs	r3, #0
    5b84:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5b86:	4b07      	ldr	r3, [pc, #28]	; (5ba4 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5b88:	681b      	ldr	r3, [r3, #0]
    5b8a:	685b      	ldr	r3, [r3, #4]
    5b8c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5b8e:	9b01      	ldr	r3, [sp, #4]
    5b90:	f023 0302 	bic.w	r3, r3, #2
    5b94:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5b96:	4b03      	ldr	r3, [pc, #12]	; (5ba4 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5b98:	681b      	ldr	r3, [r3, #0]
    5b9a:	9a01      	ldr	r2, [sp, #4]
    5b9c:	605a      	str	r2, [r3, #4]
}
    5b9e:	bf00      	nop
    5ba0:	b002      	add	sp, #8
    5ba2:	4770      	bx	lr
    5ba4:	1fff8b20 	.word	0x1fff8b20

00005ba8 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5ba8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5baa:	2300      	movs	r3, #0
    5bac:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5bae:	4b07      	ldr	r3, [pc, #28]	; (5bcc <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5bb0:	681b      	ldr	r3, [r3, #0]
    5bb2:	685b      	ldr	r3, [r3, #4]
    5bb4:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    5bb6:	9b01      	ldr	r3, [sp, #4]
    5bb8:	f043 0302 	orr.w	r3, r3, #2
    5bbc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5bbe:	4b03      	ldr	r3, [pc, #12]	; (5bcc <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5bc0:	681b      	ldr	r3, [r3, #0]
    5bc2:	9a01      	ldr	r2, [sp, #4]
    5bc4:	605a      	str	r2, [r3, #4]
}
    5bc6:	bf00      	nop
    5bc8:	b002      	add	sp, #8
    5bca:	4770      	bx	lr
    5bcc:	1fff8b20 	.word	0x1fff8b20

00005bd0 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5bd0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5bd2:	2300      	movs	r3, #0
    5bd4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5bd6:	4b07      	ldr	r3, [pc, #28]	; (5bf4 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5bd8:	681b      	ldr	r3, [r3, #0]
    5bda:	685b      	ldr	r3, [r3, #4]
    5bdc:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5bde:	9b01      	ldr	r3, [sp, #4]
    5be0:	f043 0304 	orr.w	r3, r3, #4
    5be4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5be6:	4b03      	ldr	r3, [pc, #12]	; (5bf4 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5be8:	681b      	ldr	r3, [r3, #0]
    5bea:	9a01      	ldr	r2, [sp, #4]
    5bec:	605a      	str	r2, [r3, #4]
}
    5bee:	bf00      	nop
    5bf0:	b002      	add	sp, #8
    5bf2:	4770      	bx	lr
    5bf4:	1fff8b20 	.word	0x1fff8b20

00005bf8 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5bf8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5bfa:	2300      	movs	r3, #0
    5bfc:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5bfe:	4b07      	ldr	r3, [pc, #28]	; (5c1c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5c00:	681b      	ldr	r3, [r3, #0]
    5c02:	685b      	ldr	r3, [r3, #4]
    5c04:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5c06:	9b01      	ldr	r3, [sp, #4]
    5c08:	f023 0304 	bic.w	r3, r3, #4
    5c0c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5c0e:	4b03      	ldr	r3, [pc, #12]	; (5c1c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5c10:	681b      	ldr	r3, [r3, #0]
    5c12:	9a01      	ldr	r2, [sp, #4]
    5c14:	605a      	str	r2, [r3, #4]
}
    5c16:	bf00      	nop
    5c18:	b002      	add	sp, #8
    5c1a:	4770      	bx	lr
    5c1c:	1fff8b20 	.word	0x1fff8b20

00005c20 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5c20:	b084      	sub	sp, #16
    5c22:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5c24:	4b20      	ldr	r3, [pc, #128]	; (5ca8 <Power_Ip_PMC_PowerInit+0x88>)
    5c26:	781b      	ldrb	r3, [r3, #0]
    5c28:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5c2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5c30:	f003 030f 	and.w	r3, r3, #15
    5c34:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5c38:	9b01      	ldr	r3, [sp, #4]
    5c3a:	781a      	ldrb	r2, [r3, #0]
    5c3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5c40:	4313      	orrs	r3, r2
    5c42:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5c46:	4a18      	ldr	r2, [pc, #96]	; (5ca8 <Power_Ip_PMC_PowerInit+0x88>)
    5c48:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5c4c:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5c4e:	4b16      	ldr	r3, [pc, #88]	; (5ca8 <Power_Ip_PMC_PowerInit+0x88>)
    5c50:	785b      	ldrb	r3, [r3, #1]
    5c52:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5c56:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5c5a:	f003 031f 	and.w	r3, r3, #31
    5c5e:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5c62:	9b01      	ldr	r3, [sp, #4]
    5c64:	785a      	ldrb	r2, [r3, #1]
    5c66:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5c6a:	4313      	orrs	r3, r2
    5c6c:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5c70:	4a0d      	ldr	r2, [pc, #52]	; (5ca8 <Power_Ip_PMC_PowerInit+0x88>)
    5c72:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5c76:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5c78:	4b0b      	ldr	r3, [pc, #44]	; (5ca8 <Power_Ip_PMC_PowerInit+0x88>)
    5c7a:	789b      	ldrb	r3, [r3, #2]
    5c7c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5c80:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5c84:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5c88:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5c8c:	9b01      	ldr	r3, [sp, #4]
    5c8e:	789a      	ldrb	r2, [r3, #2]
    5c90:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5c94:	4313      	orrs	r3, r2
    5c96:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5c9a:	4a03      	ldr	r2, [pc, #12]	; (5ca8 <Power_Ip_PMC_PowerInit+0x88>)
    5c9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ca0:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5ca2:	bf00      	nop
    5ca4:	b004      	add	sp, #16
    5ca6:	4770      	bx	lr
    5ca8:	4007d000 	.word	0x4007d000

00005cac <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5cac:	b500      	push	{lr}
    5cae:	b083      	sub	sp, #12
    5cb0:	9001      	str	r0, [sp, #4]
    5cb2:	460b      	mov	r3, r1
    5cb4:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5cb8:	4b05      	ldr	r3, [pc, #20]	; (5cd0 <Power_Ip_ReportPowerErrors+0x24>)
    5cba:	681b      	ldr	r3, [r3, #0]
    5cbc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5cc0:	4611      	mov	r1, r2
    5cc2:	9801      	ldr	r0, [sp, #4]
    5cc4:	4798      	blx	r3
}
    5cc6:	bf00      	nop
    5cc8:	b003      	add	sp, #12
    5cca:	f85d fb04 	ldr.w	pc, [sp], #4
    5cce:	bf00      	nop
    5cd0:	1fff8b1c 	.word	0x1fff8b1c

00005cd4 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5cd4:	b082      	sub	sp, #8
    5cd6:	9001      	str	r0, [sp, #4]
    5cd8:	460b      	mov	r3, r1
    5cda:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5cde:	bf00      	nop
    5ce0:	b002      	add	sp, #8
    5ce2:	4770      	bx	lr

00005ce4 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5ce4:	b500      	push	{lr}
    5ce6:	b085      	sub	sp, #20
    5ce8:	9003      	str	r0, [sp, #12]
    5cea:	9102      	str	r1, [sp, #8]
    5cec:	9201      	str	r2, [sp, #4]
    5cee:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5cf0:	2000      	movs	r0, #0
    5cf2:	f7fc f83d 	bl	1d70 <OsIf_GetCounter>
    5cf6:	4602      	mov	r2, r0
    5cf8:	9b03      	ldr	r3, [sp, #12]
    5cfa:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5cfc:	9b02      	ldr	r3, [sp, #8]
    5cfe:	2200      	movs	r2, #0
    5d00:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5d02:	2100      	movs	r1, #0
    5d04:	9800      	ldr	r0, [sp, #0]
    5d06:	f7fc f87f 	bl	1e08 <OsIf_MicrosToTicks>
    5d0a:	4602      	mov	r2, r0
    5d0c:	9b01      	ldr	r3, [sp, #4]
    5d0e:	601a      	str	r2, [r3, #0]
}
    5d10:	bf00      	nop
    5d12:	b005      	add	sp, #20
    5d14:	f85d fb04 	ldr.w	pc, [sp], #4

00005d18 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5d18:	b500      	push	{lr}
    5d1a:	b087      	sub	sp, #28
    5d1c:	9003      	str	r0, [sp, #12]
    5d1e:	9102      	str	r1, [sp, #8]
    5d20:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5d22:	2300      	movs	r3, #0
    5d24:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5d28:	2100      	movs	r1, #0
    5d2a:	9803      	ldr	r0, [sp, #12]
    5d2c:	f7fc f839 	bl	1da2 <OsIf_GetElapsed>
    5d30:	4602      	mov	r2, r0
    5d32:	9b02      	ldr	r3, [sp, #8]
    5d34:	681b      	ldr	r3, [r3, #0]
    5d36:	441a      	add	r2, r3
    5d38:	9b02      	ldr	r3, [sp, #8]
    5d3a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5d3c:	9b02      	ldr	r3, [sp, #8]
    5d3e:	681b      	ldr	r3, [r3, #0]
    5d40:	9a01      	ldr	r2, [sp, #4]
    5d42:	429a      	cmp	r2, r3
    5d44:	d802      	bhi.n	5d4c <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5d46:	2301      	movs	r3, #1
    5d48:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5d4c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5d50:	4618      	mov	r0, r3
    5d52:	b007      	add	sp, #28
    5d54:	f85d fb04 	ldr.w	pc, [sp], #4

00005d58 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5d58:	b082      	sub	sp, #8
    5d5a:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5d5c:	9b01      	ldr	r3, [sp, #4]
    5d5e:	681a      	ldr	r2, [r3, #0]
    5d60:	4907      	ldr	r1, [pc, #28]	; (5d80 <Power_Ip_RCM_ResetInit+0x28>)
    5d62:	f641 7307 	movw	r3, #7943	; 0x1f07
    5d66:	4013      	ands	r3, r2
    5d68:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5d6a:	9b01      	ldr	r3, [sp, #4]
    5d6c:	685a      	ldr	r2, [r3, #4]
    5d6e:	4904      	ldr	r1, [pc, #16]	; (5d80 <Power_Ip_RCM_ResetInit+0x28>)
    5d70:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5d74:	4013      	ands	r3, r2
    5d76:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5d78:	bf00      	nop
    5d7a:	b002      	add	sp, #8
    5d7c:	4770      	bx	lr
    5d7e:	bf00      	nop
    5d80:	4007f000 	.word	0x4007f000

00005d84 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5d84:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5d86:	230c      	movs	r3, #12
    5d88:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5d8a:	2300      	movs	r3, #0
    5d8c:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5d8e:	2300      	movs	r3, #0
    5d90:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5d92:	2300      	movs	r3, #0
    5d94:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5d96:	4b25      	ldr	r3, [pc, #148]	; (5e2c <Power_Ip_RCM_GetResetReason+0xa8>)
    5d98:	699a      	ldr	r2, [r3, #24]
    5d9a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5d9e:	4013      	ands	r3, r2
    5da0:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5da2:	9b03      	ldr	r3, [sp, #12]
    5da4:	2b00      	cmp	r3, #0
    5da6:	d008      	beq.n	5dba <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5da8:	4920      	ldr	r1, [pc, #128]	; (5e2c <Power_Ip_RCM_GetResetReason+0xa8>)
    5daa:	9a03      	ldr	r2, [sp, #12]
    5dac:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5db0:	4013      	ands	r3, r2
    5db2:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5db4:	4a1e      	ldr	r2, [pc, #120]	; (5e30 <Power_Ip_RCM_GetResetReason+0xac>)
    5db6:	9b03      	ldr	r3, [sp, #12]
    5db8:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5dba:	4b1d      	ldr	r3, [pc, #116]	; (5e30 <Power_Ip_RCM_GetResetReason+0xac>)
    5dbc:	681b      	ldr	r3, [r3, #0]
    5dbe:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5dc0:	9a02      	ldr	r2, [sp, #8]
    5dc2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5dc6:	4013      	ands	r3, r2
    5dc8:	2b82      	cmp	r3, #130	; 0x82
    5dca:	d102      	bne.n	5dd2 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5dcc:	2305      	movs	r3, #5
    5dce:	9307      	str	r3, [sp, #28]
    5dd0:	e027      	b.n	5e22 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5dd2:	2300      	movs	r3, #0
    5dd4:	9306      	str	r3, [sp, #24]
    5dd6:	e021      	b.n	5e1c <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5dd8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5ddc:	9b06      	ldr	r3, [sp, #24]
    5dde:	fa22 f303 	lsr.w	r3, r2, r3
    5de2:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5de4:	9a01      	ldr	r2, [sp, #4]
    5de6:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5dea:	4013      	ands	r3, r2
    5dec:	2b00      	cmp	r3, #0
    5dee:	d012      	beq.n	5e16 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5df0:	9a01      	ldr	r2, [sp, #4]
    5df2:	9b02      	ldr	r3, [sp, #8]
    5df4:	4013      	ands	r3, r2
    5df6:	2b00      	cmp	r3, #0
    5df8:	d00a      	beq.n	5e10 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5dfa:	9b05      	ldr	r3, [sp, #20]
    5dfc:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5dfe:	9b04      	ldr	r3, [sp, #16]
    5e00:	3301      	adds	r3, #1
    5e02:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5e04:	9b04      	ldr	r3, [sp, #16]
    5e06:	2b01      	cmp	r3, #1
    5e08:	d902      	bls.n	5e10 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5e0a:	230d      	movs	r3, #13
    5e0c:	9307      	str	r3, [sp, #28]
                        break;
    5e0e:	e008      	b.n	5e22 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5e10:	9b05      	ldr	r3, [sp, #20]
    5e12:	3301      	adds	r3, #1
    5e14:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5e16:	9b06      	ldr	r3, [sp, #24]
    5e18:	3301      	adds	r3, #1
    5e1a:	9306      	str	r3, [sp, #24]
    5e1c:	9b06      	ldr	r3, [sp, #24]
    5e1e:	2b1f      	cmp	r3, #31
    5e20:	d9da      	bls.n	5dd8 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5e22:	9b07      	ldr	r3, [sp, #28]
}
    5e24:	4618      	mov	r0, r3
    5e26:	b008      	add	sp, #32
    5e28:	4770      	bx	lr
    5e2a:	bf00      	nop
    5e2c:	4007f000 	.word	0x4007f000
    5e30:	1fff8cfc 	.word	0x1fff8cfc

00005e34 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5e34:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5e36:	4b0c      	ldr	r3, [pc, #48]	; (5e68 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5e38:	699a      	ldr	r2, [r3, #24]
    5e3a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5e3e:	4013      	ands	r3, r2
    5e40:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5e42:	9b01      	ldr	r3, [sp, #4]
    5e44:	2b00      	cmp	r3, #0
    5e46:	d008      	beq.n	5e5a <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5e48:	4907      	ldr	r1, [pc, #28]	; (5e68 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5e4a:	9a01      	ldr	r2, [sp, #4]
    5e4c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5e50:	4013      	ands	r3, r2
    5e52:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5e54:	4a05      	ldr	r2, [pc, #20]	; (5e6c <Power_Ip_RCM_GetResetRawValue+0x38>)
    5e56:	9b01      	ldr	r3, [sp, #4]
    5e58:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5e5a:	4b04      	ldr	r3, [pc, #16]	; (5e6c <Power_Ip_RCM_GetResetRawValue+0x38>)
    5e5c:	681b      	ldr	r3, [r3, #0]
    5e5e:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5e60:	9b00      	ldr	r3, [sp, #0]
}
    5e62:	4618      	mov	r0, r3
    5e64:	b002      	add	sp, #8
    5e66:	4770      	bx	lr
    5e68:	4007f000 	.word	0x4007f000
    5e6c:	1fff8cfc 	.word	0x1fff8cfc

00005e70 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5e70:	b082      	sub	sp, #8
    5e72:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5e74:	9b01      	ldr	r3, [sp, #4]
    5e76:	681b      	ldr	r3, [r3, #0]
    5e78:	4a03      	ldr	r2, [pc, #12]	; (5e88 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5e7a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5e7e:	6093      	str	r3, [r2, #8]
}
    5e80:	bf00      	nop
    5e82:	b002      	add	sp, #8
    5e84:	4770      	bx	lr
    5e86:	bf00      	nop
    5e88:	4007e000 	.word	0x4007e000

00005e8c <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5e8c:	b084      	sub	sp, #16
    5e8e:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5e90:	2301      	movs	r3, #1
    5e92:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5e94:	4b15      	ldr	r3, [pc, #84]	; (5eec <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5e96:	695b      	ldr	r3, [r3, #20]
    5e98:	b2db      	uxtb	r3, r3
    5e9a:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5e9c:	9b01      	ldr	r3, [sp, #4]
    5e9e:	2b02      	cmp	r3, #2
    5ea0:	d012      	beq.n	5ec8 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5ea2:	9b01      	ldr	r3, [sp, #4]
    5ea4:	2b02      	cmp	r3, #2
    5ea6:	d818      	bhi.n	5eda <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5ea8:	9b01      	ldr	r3, [sp, #4]
    5eaa:	2b00      	cmp	r3, #0
    5eac:	d003      	beq.n	5eb6 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5eae:	9b01      	ldr	r3, [sp, #4]
    5eb0:	2b01      	cmp	r3, #1
    5eb2:	d003      	beq.n	5ebc <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5eb4:	e011      	b.n	5eda <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5eb6:	2300      	movs	r3, #0
    5eb8:	9303      	str	r3, [sp, #12]
            break;
    5eba:	e013      	b.n	5ee4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5ebc:	9b02      	ldr	r3, [sp, #8]
    5ebe:	2b01      	cmp	r3, #1
    5ec0:	d10d      	bne.n	5ede <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5ec2:	2300      	movs	r3, #0
    5ec4:	9303      	str	r3, [sp, #12]
            break;
    5ec6:	e00a      	b.n	5ede <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5ec8:	9b02      	ldr	r3, [sp, #8]
    5eca:	2b01      	cmp	r3, #1
    5ecc:	d002      	beq.n	5ed4 <Power_Ip_SMC_ModeCheckEntry+0x48>
    5ece:	9b02      	ldr	r3, [sp, #8]
    5ed0:	2b10      	cmp	r3, #16
    5ed2:	d106      	bne.n	5ee2 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5ed4:	2300      	movs	r3, #0
    5ed6:	9303      	str	r3, [sp, #12]
            break;
    5ed8:	e003      	b.n	5ee2 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5eda:	bf00      	nop
    5edc:	e002      	b.n	5ee4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5ede:	bf00      	nop
    5ee0:	e000      	b.n	5ee4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5ee2:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5ee4:	9b03      	ldr	r3, [sp, #12]
}
    5ee6:	4618      	mov	r0, r3
    5ee8:	b004      	add	sp, #16
    5eea:	4770      	bx	lr
    5eec:	4007e000 	.word	0x4007e000

00005ef0 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5ef0:	b500      	push	{lr}
    5ef2:	b08b      	sub	sp, #44	; 0x2c
    5ef4:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5ef6:	2300      	movs	r3, #0
    5ef8:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5efa:	2300      	movs	r3, #0
    5efc:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5efe:	2300      	movs	r3, #0
    5f00:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5f04:	9b01      	ldr	r3, [sp, #4]
    5f06:	685b      	ldr	r3, [r3, #4]
    5f08:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5f0a:	9b08      	ldr	r3, [sp, #32]
    5f0c:	2b02      	cmp	r3, #2
    5f0e:	d076      	beq.n	5ffe <Power_Ip_SMC_ModeConfig+0x10e>
    5f10:	9b08      	ldr	r3, [sp, #32]
    5f12:	2b02      	cmp	r3, #2
    5f14:	f200 80ab 	bhi.w	606e <Power_Ip_SMC_ModeConfig+0x17e>
    5f18:	9b08      	ldr	r3, [sp, #32]
    5f1a:	2b00      	cmp	r3, #0
    5f1c:	d003      	beq.n	5f26 <Power_Ip_SMC_ModeConfig+0x36>
    5f1e:	9b08      	ldr	r3, [sp, #32]
    5f20:	2b01      	cmp	r3, #1
    5f22:	d034      	beq.n	5f8e <Power_Ip_SMC_ModeConfig+0x9e>
    5f24:	e0a3      	b.n	606e <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5f26:	4b58      	ldr	r3, [pc, #352]	; (6088 <Power_Ip_SMC_ModeConfig+0x198>)
    5f28:	68db      	ldr	r3, [r3, #12]
    5f2a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5f2c:	9b06      	ldr	r3, [sp, #24]
    5f2e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5f32:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5f34:	4a54      	ldr	r2, [pc, #336]	; (6088 <Power_Ip_SMC_ModeConfig+0x198>)
    5f36:	9b06      	ldr	r3, [sp, #24]
    5f38:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5f3a:	aa02      	add	r2, sp, #8
    5f3c:	a903      	add	r1, sp, #12
    5f3e:	a804      	add	r0, sp, #16
    5f40:	f24c 3350 	movw	r3, #50000	; 0xc350
    5f44:	f7ff fece 	bl	5ce4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5f48:	9a02      	ldr	r2, [sp, #8]
    5f4a:	a903      	add	r1, sp, #12
    5f4c:	ab04      	add	r3, sp, #16
    5f4e:	4618      	mov	r0, r3
    5f50:	f7ff fee2 	bl	5d18 <Power_Ip_TimeoutExpired>
    5f54:	4603      	mov	r3, r0
    5f56:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5f5a:	4b4b      	ldr	r3, [pc, #300]	; (6088 <Power_Ip_SMC_ModeConfig+0x198>)
    5f5c:	695b      	ldr	r3, [r3, #20]
    5f5e:	f003 0301 	and.w	r3, r3, #1
    5f62:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5f64:	9b05      	ldr	r3, [sp, #20]
    5f66:	2b01      	cmp	r3, #1
    5f68:	d006      	beq.n	5f78 <Power_Ip_SMC_ModeConfig+0x88>
    5f6a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5f6e:	f083 0301 	eor.w	r3, r3, #1
    5f72:	b2db      	uxtb	r3, r3
    5f74:	2b00      	cmp	r3, #0
    5f76:	d1e7      	bne.n	5f48 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5f78:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5f7c:	2b00      	cmp	r3, #0
    5f7e:	d079      	beq.n	6074 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5f80:	2301      	movs	r3, #1
    5f82:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5f84:	21ff      	movs	r1, #255	; 0xff
    5f86:	2000      	movs	r0, #0
    5f88:	f7ff fe90 	bl	5cac <Power_Ip_ReportPowerErrors>
            }

            break;
    5f8c:	e072      	b.n	6074 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5f8e:	4b3e      	ldr	r3, [pc, #248]	; (6088 <Power_Ip_SMC_ModeConfig+0x198>)
    5f90:	68db      	ldr	r3, [r3, #12]
    5f92:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5f94:	9b06      	ldr	r3, [sp, #24]
    5f96:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5f9a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5f9c:	9b06      	ldr	r3, [sp, #24]
    5f9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5fa2:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5fa4:	4a38      	ldr	r2, [pc, #224]	; (6088 <Power_Ip_SMC_ModeConfig+0x198>)
    5fa6:	9b06      	ldr	r3, [sp, #24]
    5fa8:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5faa:	aa02      	add	r2, sp, #8
    5fac:	a903      	add	r1, sp, #12
    5fae:	a804      	add	r0, sp, #16
    5fb0:	f24c 3350 	movw	r3, #50000	; 0xc350
    5fb4:	f7ff fe96 	bl	5ce4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5fb8:	9a02      	ldr	r2, [sp, #8]
    5fba:	a903      	add	r1, sp, #12
    5fbc:	ab04      	add	r3, sp, #16
    5fbe:	4618      	mov	r0, r3
    5fc0:	f7ff feaa 	bl	5d18 <Power_Ip_TimeoutExpired>
    5fc4:	4603      	mov	r3, r0
    5fc6:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5fca:	4b2f      	ldr	r3, [pc, #188]	; (6088 <Power_Ip_SMC_ModeConfig+0x198>)
    5fcc:	695b      	ldr	r3, [r3, #20]
    5fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5fd2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5fd4:	9b05      	ldr	r3, [sp, #20]
    5fd6:	2b80      	cmp	r3, #128	; 0x80
    5fd8:	d006      	beq.n	5fe8 <Power_Ip_SMC_ModeConfig+0xf8>
    5fda:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5fde:	f083 0301 	eor.w	r3, r3, #1
    5fe2:	b2db      	uxtb	r3, r3
    5fe4:	2b00      	cmp	r3, #0
    5fe6:	d1e7      	bne.n	5fb8 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5fe8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5fec:	2b00      	cmp	r3, #0
    5fee:	d043      	beq.n	6078 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5ff0:	2301      	movs	r3, #1
    5ff2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5ff4:	21ff      	movs	r1, #255	; 0xff
    5ff6:	2000      	movs	r0, #0
    5ff8:	f7ff fe58 	bl	5cac <Power_Ip_ReportPowerErrors>
            }

            break;
    5ffc:	e03c      	b.n	6078 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5ffe:	4b22      	ldr	r3, [pc, #136]	; (6088 <Power_Ip_SMC_ModeConfig+0x198>)
    6000:	68db      	ldr	r3, [r3, #12]
    6002:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6004:	9b06      	ldr	r3, [sp, #24]
    6006:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    600a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    600c:	9b06      	ldr	r3, [sp, #24]
    600e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6012:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6014:	4a1c      	ldr	r2, [pc, #112]	; (6088 <Power_Ip_SMC_ModeConfig+0x198>)
    6016:	9b06      	ldr	r3, [sp, #24]
    6018:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    601a:	aa02      	add	r2, sp, #8
    601c:	a903      	add	r1, sp, #12
    601e:	a804      	add	r0, sp, #16
    6020:	f24c 3350 	movw	r3, #50000	; 0xc350
    6024:	f7ff fe5e 	bl	5ce4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6028:	9a02      	ldr	r2, [sp, #8]
    602a:	a903      	add	r1, sp, #12
    602c:	ab04      	add	r3, sp, #16
    602e:	4618      	mov	r0, r3
    6030:	f7ff fe72 	bl	5d18 <Power_Ip_TimeoutExpired>
    6034:	4603      	mov	r3, r0
    6036:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    603a:	4b13      	ldr	r3, [pc, #76]	; (6088 <Power_Ip_SMC_ModeConfig+0x198>)
    603c:	695b      	ldr	r3, [r3, #20]
    603e:	f003 0304 	and.w	r3, r3, #4
    6042:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6044:	9b05      	ldr	r3, [sp, #20]
    6046:	2b04      	cmp	r3, #4
    6048:	d006      	beq.n	6058 <Power_Ip_SMC_ModeConfig+0x168>
    604a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    604e:	f083 0301 	eor.w	r3, r3, #1
    6052:	b2db      	uxtb	r3, r3
    6054:	2b00      	cmp	r3, #0
    6056:	d1e7      	bne.n	6028 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    6058:	f89d 301f 	ldrb.w	r3, [sp, #31]
    605c:	2b00      	cmp	r3, #0
    605e:	d00d      	beq.n	607c <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6060:	2301      	movs	r3, #1
    6062:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6064:	21ff      	movs	r1, #255	; 0xff
    6066:	2000      	movs	r0, #0
    6068:	f7ff fe20 	bl	5cac <Power_Ip_ReportPowerErrors>
            }

            break;
    606c:	e006      	b.n	607c <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    606e:	2301      	movs	r3, #1
    6070:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    6072:	e004      	b.n	607e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6074:	bf00      	nop
    6076:	e002      	b.n	607e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6078:	bf00      	nop
    607a:	e000      	b.n	607e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    607c:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    607e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    6080:	4618      	mov	r0, r3
    6082:	b00b      	add	sp, #44	; 0x2c
    6084:	f85d fb04 	ldr.w	pc, [sp], #4
    6088:	4007e000 	.word	0x4007e000

0000608c <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    608c:	b500      	push	{lr}
    608e:	b085      	sub	sp, #20
    6090:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    6092:	9b01      	ldr	r3, [sp, #4]
    6094:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    6096:	9803      	ldr	r0, [sp, #12]
    6098:	f000 fbc8 	bl	682c <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    609c:	4a03      	ldr	r2, [pc, #12]	; (60ac <Port_Init+0x20>)
    609e:	9b03      	ldr	r3, [sp, #12]
    60a0:	6013      	str	r3, [r2, #0]
        }
    }
}
    60a2:	bf00      	nop
    60a4:	b005      	add	sp, #20
    60a6:	f85d fb04 	ldr.w	pc, [sp], #4
    60aa:	bf00      	nop
    60ac:	1fff8d00 	.word	0x1fff8d00

000060b0 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    60b0:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    60b2:	4b03      	ldr	r3, [pc, #12]	; (60c0 <Port_RefreshPortDirection+0x10>)
    60b4:	681b      	ldr	r3, [r3, #0]
    60b6:	4618      	mov	r0, r3
    60b8:	f000 fc10 	bl	68dc <Port_Ipw_RefreshPortDirection>
    }
}
    60bc:	bf00      	nop
    60be:	bd08      	pop	{r3, pc}
    60c0:	1fff8d00 	.word	0x1fff8d00

000060c4 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    60c4:	b086      	sub	sp, #24
    60c6:	9003      	str	r0, [sp, #12]
    60c8:	9102      	str	r1, [sp, #8]
    60ca:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    60cc:	23ff      	movs	r3, #255	; 0xff
    60ce:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    60d0:	9b03      	ldr	r3, [sp, #12]
    60d2:	4a39      	ldr	r2, [pc, #228]	; (61b8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    60d4:	4293      	cmp	r3, r2
    60d6:	d151      	bne.n	617c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    60d8:	9b02      	ldr	r3, [sp, #8]
    60da:	2b10      	cmp	r3, #16
    60dc:	d867      	bhi.n	61ae <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    60de:	a201      	add	r2, pc, #4	; (adr r2, 60e4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    60e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    60e4:	00006129 	.word	0x00006129
    60e8:	00006137 	.word	0x00006137
    60ec:	000061af 	.word	0x000061af
    60f0:	000061af 	.word	0x000061af
    60f4:	000061af 	.word	0x000061af
    60f8:	000061af 	.word	0x000061af
    60fc:	000061af 	.word	0x000061af
    6100:	000061af 	.word	0x000061af
    6104:	000061af 	.word	0x000061af
    6108:	000061af 	.word	0x000061af
    610c:	000061af 	.word	0x000061af
    6110:	000061af 	.word	0x000061af
    6114:	000061af 	.word	0x000061af
    6118:	00006145 	.word	0x00006145
    611c:	00006153 	.word	0x00006153
    6120:	00006161 	.word	0x00006161
    6124:	0000616f 	.word	0x0000616f
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    6128:	2301      	movs	r3, #1
    612a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    612c:	9a05      	ldr	r2, [sp, #20]
    612e:	9b01      	ldr	r3, [sp, #4]
    6130:	4313      	orrs	r3, r2
    6132:	9305      	str	r3, [sp, #20]
                break;
    6134:	e03c      	b.n	61b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    6136:	2302      	movs	r3, #2
    6138:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    613a:	9a05      	ldr	r2, [sp, #20]
    613c:	9b01      	ldr	r3, [sp, #4]
    613e:	4313      	orrs	r3, r2
    6140:	9305      	str	r3, [sp, #20]
                break;
    6142:	e035      	b.n	61b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    6144:	2304      	movs	r3, #4
    6146:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6148:	9a05      	ldr	r2, [sp, #20]
    614a:	9b01      	ldr	r3, [sp, #4]
    614c:	4313      	orrs	r3, r2
    614e:	9305      	str	r3, [sp, #20]
                break;
    6150:	e02e      	b.n	61b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    6152:	2308      	movs	r3, #8
    6154:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6156:	9a05      	ldr	r2, [sp, #20]
    6158:	9b01      	ldr	r3, [sp, #4]
    615a:	4313      	orrs	r3, r2
    615c:	9305      	str	r3, [sp, #20]
                break;
    615e:	e027      	b.n	61b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    6160:	230e      	movs	r3, #14
    6162:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6164:	9a05      	ldr	r2, [sp, #20]
    6166:	9b01      	ldr	r3, [sp, #4]
    6168:	4013      	ands	r3, r2
    616a:	9305      	str	r3, [sp, #20]
                break;
    616c:	e020      	b.n	61b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    616e:	230d      	movs	r3, #13
    6170:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6172:	9a05      	ldr	r2, [sp, #20]
    6174:	9b01      	ldr	r3, [sp, #4]
    6176:	4013      	ands	r3, r2
    6178:	9305      	str	r3, [sp, #20]
                break;
    617a:	e019      	b.n	61b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    617c:	9b03      	ldr	r3, [sp, #12]
    617e:	4a0f      	ldr	r2, [pc, #60]	; (61bc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    6180:	4293      	cmp	r3, r2
    6182:	d115      	bne.n	61b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    6184:	9b02      	ldr	r3, [sp, #8]
    6186:	2b00      	cmp	r3, #0
    6188:	d003      	beq.n	6192 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    618a:	9b02      	ldr	r3, [sp, #8]
    618c:	2b01      	cmp	r3, #1
    618e:	d007      	beq.n	61a0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    6190:	e00e      	b.n	61b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    6192:	230b      	movs	r3, #11
    6194:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6196:	9a05      	ldr	r2, [sp, #20]
    6198:	9b01      	ldr	r3, [sp, #4]
    619a:	4013      	ands	r3, r2
    619c:	9305      	str	r3, [sp, #20]
                break;
    619e:	e007      	b.n	61b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    61a0:	2307      	movs	r3, #7
    61a2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    61a4:	9a05      	ldr	r2, [sp, #20]
    61a6:	9b01      	ldr	r3, [sp, #4]
    61a8:	4013      	ands	r3, r2
    61aa:	9305      	str	r3, [sp, #20]
                break;
    61ac:	e000      	b.n	61b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    61ae:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    61b0:	9b05      	ldr	r3, [sp, #20]
}
    61b2:	4618      	mov	r0, r3
    61b4:	b006      	add	sp, #24
    61b6:	4770      	bx	lr
    61b8:	4004a000 	.word	0x4004a000
    61bc:	4004b000 	.word	0x4004b000

000061c0 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    61c0:	b500      	push	{lr}
    61c2:	b089      	sub	sp, #36	; 0x24
    61c4:	9003      	str	r0, [sp, #12]
    61c6:	9102      	str	r1, [sp, #8]
    61c8:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    61ca:	9b01      	ldr	r3, [sp, #4]
    61cc:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    61ce:	9b01      	ldr	r3, [sp, #4]
    61d0:	2b08      	cmp	r3, #8
    61d2:	d121      	bne.n	6218 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    61d4:	4b13      	ldr	r3, [pc, #76]	; (6224 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    61d6:	685b      	ldr	r3, [r3, #4]
    61d8:	f003 030f 	and.w	r3, r3, #15
    61dc:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    61de:	9a06      	ldr	r2, [sp, #24]
    61e0:	9902      	ldr	r1, [sp, #8]
    61e2:	9803      	ldr	r0, [sp, #12]
    61e4:	f7ff ff6e 	bl	60c4 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    61e8:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    61ea:	9b05      	ldr	r3, [sp, #20]
    61ec:	2bff      	cmp	r3, #255	; 0xff
    61ee:	d011      	beq.n	6214 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    61f0:	f008 f898 	bl	e324 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    61f4:	4b0b      	ldr	r3, [pc, #44]	; (6224 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    61f6:	685b      	ldr	r3, [r3, #4]
    61f8:	4a0a      	ldr	r2, [pc, #40]	; (6224 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    61fa:	f023 030f 	bic.w	r3, r3, #15
    61fe:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6200:	4b08      	ldr	r3, [pc, #32]	; (6224 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6202:	685a      	ldr	r2, [r3, #4]
    6204:	9b05      	ldr	r3, [sp, #20]
    6206:	f003 030f 	and.w	r3, r3, #15
    620a:	4906      	ldr	r1, [pc, #24]	; (6224 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    620c:	4313      	orrs	r3, r2
    620e:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    6210:	f008 f8b4 	bl	e37c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6214:	2300      	movs	r3, #0
    6216:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6218:	9b07      	ldr	r3, [sp, #28]
}
    621a:	4618      	mov	r0, r3
    621c:	b009      	add	sp, #36	; 0x24
    621e:	f85d fb04 	ldr.w	pc, [sp], #4
    6222:	bf00      	nop
    6224:	40048000 	.word	0x40048000

00006228 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6228:	b500      	push	{lr}
    622a:	b087      	sub	sp, #28
    622c:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    622e:	2300      	movs	r3, #0
    6230:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    6232:	2300      	movs	r3, #0
    6234:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    6236:	2300      	movs	r3, #0
    6238:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    623a:	9b01      	ldr	r3, [sp, #4]
    623c:	68db      	ldr	r3, [r3, #12]
    623e:	2b02      	cmp	r3, #2
    6240:	d00a      	beq.n	6258 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    6242:	9b05      	ldr	r3, [sp, #20]
    6244:	f043 0302 	orr.w	r3, r3, #2
    6248:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    624a:	9b01      	ldr	r3, [sp, #4]
    624c:	68db      	ldr	r3, [r3, #12]
    624e:	f003 0301 	and.w	r3, r3, #1
    6252:	9a05      	ldr	r2, [sp, #20]
    6254:	4313      	orrs	r3, r2
    6256:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    6258:	9b01      	ldr	r3, [sp, #4]
    625a:	699b      	ldr	r3, [r3, #24]
    625c:	019b      	lsls	r3, r3, #6
    625e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6262:	9a05      	ldr	r2, [sp, #20]
    6264:	4313      	orrs	r3, r2
    6266:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    6268:	9b01      	ldr	r3, [sp, #4]
    626a:	6a1b      	ldr	r3, [r3, #32]
    626c:	03db      	lsls	r3, r3, #15
    626e:	b29b      	uxth	r3, r3
    6270:	9a05      	ldr	r2, [sp, #20]
    6272:	4313      	orrs	r3, r2
    6274:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    6276:	9b01      	ldr	r3, [sp, #4]
    6278:	7f1b      	ldrb	r3, [r3, #28]
    627a:	2b00      	cmp	r3, #0
    627c:	d001      	beq.n	6282 <Port_Ci_Port_Ip_PinInit+0x5a>
    627e:	2310      	movs	r3, #16
    6280:	e000      	b.n	6284 <Port_Ci_Port_Ip_PinInit+0x5c>
    6282:	2300      	movs	r3, #0
    6284:	9a05      	ldr	r2, [sp, #20]
    6286:	4313      	orrs	r3, r2
    6288:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    628a:	9b01      	ldr	r3, [sp, #4]
    628c:	691b      	ldr	r3, [r3, #16]
    628e:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    6290:	9b01      	ldr	r3, [sp, #4]
    6292:	6818      	ldr	r0, [r3, #0]
    6294:	9b01      	ldr	r3, [sp, #4]
    6296:	689b      	ldr	r3, [r3, #8]
    6298:	9a04      	ldr	r2, [sp, #16]
    629a:	4619      	mov	r1, r3
    629c:	f7ff ff90 	bl	61c0 <Port_Ci_Port_Ip_ConfigureInterleave>
    62a0:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    62a2:	9b03      	ldr	r3, [sp, #12]
    62a4:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    62a6:	9b04      	ldr	r3, [sp, #16]
    62a8:	021b      	lsls	r3, r3, #8
    62aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    62ae:	9a05      	ldr	r2, [sp, #20]
    62b0:	4313      	orrs	r3, r2
    62b2:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    62b4:	f007 fe9c 	bl	dff0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    62b8:	9b01      	ldr	r3, [sp, #4]
    62ba:	681b      	ldr	r3, [r3, #0]
    62bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    62c0:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    62c2:	9b01      	ldr	r3, [sp, #4]
    62c4:	689b      	ldr	r3, [r3, #8]
    62c6:	2201      	movs	r2, #1
    62c8:	fa02 f303 	lsl.w	r3, r2, r3
    62cc:	43db      	mvns	r3, r3
    62ce:	9a02      	ldr	r2, [sp, #8]
    62d0:	4013      	ands	r3, r2
    62d2:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    62d4:	9b01      	ldr	r3, [sp, #4]
    62d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    62da:	2b00      	cmp	r3, #0
    62dc:	d001      	beq.n	62e2 <Port_Ci_Port_Ip_PinInit+0xba>
    62de:	2201      	movs	r2, #1
    62e0:	e000      	b.n	62e4 <Port_Ci_Port_Ip_PinInit+0xbc>
    62e2:	2200      	movs	r2, #0
    62e4:	9b01      	ldr	r3, [sp, #4]
    62e6:	689b      	ldr	r3, [r3, #8]
    62e8:	fa02 f303 	lsl.w	r3, r2, r3
    62ec:	9a02      	ldr	r2, [sp, #8]
    62ee:	4313      	orrs	r3, r2
    62f0:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    62f2:	9b01      	ldr	r3, [sp, #4]
    62f4:	681b      	ldr	r3, [r3, #0]
    62f6:	9a02      	ldr	r2, [sp, #8]
    62f8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    62fc:	f007 fea4 	bl	e048 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6300:	9b04      	ldr	r3, [sp, #16]
    6302:	2b01      	cmp	r3, #1
    6304:	d16d      	bne.n	63e2 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6306:	9b01      	ldr	r3, [sp, #4]
    6308:	695b      	ldr	r3, [r3, #20]
    630a:	2b02      	cmp	r3, #2
    630c:	d138      	bne.n	6380 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    630e:	9b01      	ldr	r3, [sp, #4]
    6310:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6314:	2b01      	cmp	r3, #1
    6316:	d10f      	bne.n	6338 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6318:	f007 febc 	bl	e094 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    631c:	9b01      	ldr	r3, [sp, #4]
    631e:	685b      	ldr	r3, [r3, #4]
    6320:	6859      	ldr	r1, [r3, #4]
    6322:	9b01      	ldr	r3, [sp, #4]
    6324:	689b      	ldr	r3, [r3, #8]
    6326:	2201      	movs	r2, #1
    6328:	409a      	lsls	r2, r3
    632a:	9b01      	ldr	r3, [sp, #4]
    632c:	685b      	ldr	r3, [r3, #4]
    632e:	430a      	orrs	r2, r1
    6330:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    6332:	f007 fedb 	bl	e0ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    6336:	e013      	b.n	6360 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6338:	9b01      	ldr	r3, [sp, #4]
    633a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    633e:	2b00      	cmp	r3, #0
    6340:	d10e      	bne.n	6360 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    6342:	f007 fef9 	bl	e138 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    6346:	9b01      	ldr	r3, [sp, #4]
    6348:	685b      	ldr	r3, [r3, #4]
    634a:	6899      	ldr	r1, [r3, #8]
    634c:	9b01      	ldr	r3, [sp, #4]
    634e:	689b      	ldr	r3, [r3, #8]
    6350:	2201      	movs	r2, #1
    6352:	409a      	lsls	r2, r3
    6354:	9b01      	ldr	r3, [sp, #4]
    6356:	685b      	ldr	r3, [r3, #4]
    6358:	430a      	orrs	r2, r1
    635a:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    635c:	f007 ff18 	bl	e190 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6360:	f007 ff3c 	bl	e1dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6364:	9b01      	ldr	r3, [sp, #4]
    6366:	685b      	ldr	r3, [r3, #4]
    6368:	6959      	ldr	r1, [r3, #20]
    636a:	9b01      	ldr	r3, [sp, #4]
    636c:	689b      	ldr	r3, [r3, #8]
    636e:	2201      	movs	r2, #1
    6370:	409a      	lsls	r2, r3
    6372:	9b01      	ldr	r3, [sp, #4]
    6374:	685b      	ldr	r3, [r3, #4]
    6376:	430a      	orrs	r2, r1
    6378:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    637a:	f007 ff5b 	bl	e234 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    637e:	e030      	b.n	63e2 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6380:	f007 ff2c 	bl	e1dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    6384:	9b01      	ldr	r3, [sp, #4]
    6386:	685b      	ldr	r3, [r3, #4]
    6388:	6959      	ldr	r1, [r3, #20]
    638a:	9b01      	ldr	r3, [sp, #4]
    638c:	689b      	ldr	r3, [r3, #8]
    638e:	2201      	movs	r2, #1
    6390:	fa02 f303 	lsl.w	r3, r2, r3
    6394:	43da      	mvns	r2, r3
    6396:	9b01      	ldr	r3, [sp, #4]
    6398:	685b      	ldr	r3, [r3, #4]
    639a:	400a      	ands	r2, r1
    639c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    639e:	f007 ff49 	bl	e234 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    63a2:	f007 ff6d 	bl	e280 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    63a6:	9b01      	ldr	r3, [sp, #4]
    63a8:	685b      	ldr	r3, [r3, #4]
    63aa:	6999      	ldr	r1, [r3, #24]
    63ac:	9b01      	ldr	r3, [sp, #4]
    63ae:	689b      	ldr	r3, [r3, #8]
    63b0:	2201      	movs	r2, #1
    63b2:	fa02 f303 	lsl.w	r3, r2, r3
    63b6:	43da      	mvns	r2, r3
    63b8:	9b01      	ldr	r3, [sp, #4]
    63ba:	685b      	ldr	r3, [r3, #4]
    63bc:	400a      	ands	r2, r1
    63be:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    63c0:	9b01      	ldr	r3, [sp, #4]
    63c2:	695b      	ldr	r3, [r3, #20]
    63c4:	2b03      	cmp	r3, #3
    63c6:	d10a      	bne.n	63de <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    63c8:	9b01      	ldr	r3, [sp, #4]
    63ca:	685b      	ldr	r3, [r3, #4]
    63cc:	6999      	ldr	r1, [r3, #24]
    63ce:	9b01      	ldr	r3, [sp, #4]
    63d0:	689b      	ldr	r3, [r3, #8]
    63d2:	2201      	movs	r2, #1
    63d4:	409a      	lsls	r2, r3
    63d6:	9b01      	ldr	r3, [sp, #4]
    63d8:	685b      	ldr	r3, [r3, #4]
    63da:	430a      	orrs	r2, r1
    63dc:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    63de:	f007 ff7b 	bl	e2d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    63e2:	9b01      	ldr	r3, [sp, #4]
    63e4:	681b      	ldr	r3, [r3, #0]
    63e6:	9a01      	ldr	r2, [sp, #4]
    63e8:	6892      	ldr	r2, [r2, #8]
    63ea:	9905      	ldr	r1, [sp, #20]
    63ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    63f0:	bf00      	nop
    63f2:	b007      	add	sp, #28
    63f4:	f85d fb04 	ldr.w	pc, [sp], #4

000063f8 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    63f8:	b500      	push	{lr}
    63fa:	b085      	sub	sp, #20
    63fc:	9001      	str	r0, [sp, #4]
    63fe:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6400:	2300      	movs	r3, #0
    6402:	9303      	str	r3, [sp, #12]
    6404:	e00d      	b.n	6422 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6406:	9a03      	ldr	r2, [sp, #12]
    6408:	4613      	mov	r3, r2
    640a:	009b      	lsls	r3, r3, #2
    640c:	4413      	add	r3, r2
    640e:	00db      	lsls	r3, r3, #3
    6410:	461a      	mov	r2, r3
    6412:	9b00      	ldr	r3, [sp, #0]
    6414:	4413      	add	r3, r2
    6416:	4618      	mov	r0, r3
    6418:	f7ff ff06 	bl	6228 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    641c:	9b03      	ldr	r3, [sp, #12]
    641e:	3301      	adds	r3, #1
    6420:	9303      	str	r3, [sp, #12]
    6422:	9a03      	ldr	r2, [sp, #12]
    6424:	9b01      	ldr	r3, [sp, #4]
    6426:	429a      	cmp	r2, r3
    6428:	d3ed      	bcc.n	6406 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    642a:	2300      	movs	r3, #0
}
    642c:	4618      	mov	r0, r3
    642e:	b005      	add	sp, #20
    6430:	f85d fb04 	ldr.w	pc, [sp], #4

00006434 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6434:	b500      	push	{lr}
    6436:	b087      	sub	sp, #28
    6438:	9003      	str	r0, [sp, #12]
    643a:	9102      	str	r1, [sp, #8]
    643c:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    643e:	9a01      	ldr	r2, [sp, #4]
    6440:	9902      	ldr	r1, [sp, #8]
    6442:	9803      	ldr	r0, [sp, #12]
    6444:	f7ff febc 	bl	61c0 <Port_Ci_Port_Ip_ConfigureInterleave>
    6448:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    644a:	f007 ffbd 	bl	e3c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    644e:	9b03      	ldr	r3, [sp, #12]
    6450:	9a02      	ldr	r2, [sp, #8]
    6452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6456:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    6458:	9b04      	ldr	r3, [sp, #16]
    645a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    645e:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    6460:	9b05      	ldr	r3, [sp, #20]
    6462:	021b      	lsls	r3, r3, #8
    6464:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6468:	9a04      	ldr	r2, [sp, #16]
    646a:	4313      	orrs	r3, r2
    646c:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    646e:	9b03      	ldr	r3, [sp, #12]
    6470:	9a02      	ldr	r2, [sp, #8]
    6472:	9904      	ldr	r1, [sp, #16]
    6474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6478:	f007 ffd2 	bl	e420 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    647c:	bf00      	nop
    647e:	b007      	add	sp, #28
    6480:	f85d fb04 	ldr.w	pc, [sp], #4

00006484 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6484:	b500      	push	{lr}
    6486:	b083      	sub	sp, #12
    6488:	9001      	str	r0, [sp, #4]
    648a:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    648c:	f007 ffee 	bl	e46c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    6490:	9b01      	ldr	r3, [sp, #4]
    6492:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6496:	2101      	movs	r1, #1
    6498:	9b00      	ldr	r3, [sp, #0]
    649a:	fa01 f303 	lsl.w	r3, r1, r3
    649e:	431a      	orrs	r2, r3
    64a0:	9b01      	ldr	r3, [sp, #4]
    64a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    64a6:	f008 f80d 	bl	e4c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    64aa:	bf00      	nop
    64ac:	b003      	add	sp, #12
    64ae:	f85d fb04 	ldr.w	pc, [sp], #4

000064b2 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    64b2:	b500      	push	{lr}
    64b4:	b083      	sub	sp, #12
    64b6:	9001      	str	r0, [sp, #4]
    64b8:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    64ba:	f008 f829 	bl	e510 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    64be:	9b01      	ldr	r3, [sp, #4]
    64c0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    64c4:	2101      	movs	r1, #1
    64c6:	9b00      	ldr	r3, [sp, #0]
    64c8:	fa01 f303 	lsl.w	r3, r1, r3
    64cc:	43db      	mvns	r3, r3
    64ce:	401a      	ands	r2, r3
    64d0:	9b01      	ldr	r3, [sp, #4]
    64d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    64d6:	f008 f847 	bl	e568 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    64da:	bf00      	nop
    64dc:	b003      	add	sp, #12
    64de:	f85d fb04 	ldr.w	pc, [sp], #4

000064e2 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    64e2:	b082      	sub	sp, #8
    64e4:	9001      	str	r0, [sp, #4]
    64e6:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    64e8:	9b00      	ldr	r3, [sp, #0]
    64ea:	785b      	ldrb	r3, [r3, #1]
    64ec:	f003 0201 	and.w	r2, r3, #1
    64f0:	9b01      	ldr	r3, [sp, #4]
    64f2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    64f6:	9b00      	ldr	r3, [sp, #0]
    64f8:	789b      	ldrb	r3, [r3, #2]
    64fa:	f003 021f 	and.w	r2, r3, #31
    64fe:	9b01      	ldr	r3, [sp, #4]
    6500:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6504:	bf00      	nop
    6506:	b002      	add	sp, #8
    6508:	4770      	bx	lr

0000650a <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    650a:	b086      	sub	sp, #24
    650c:	9003      	str	r0, [sp, #12]
    650e:	9301      	str	r3, [sp, #4]
    6510:	460b      	mov	r3, r1
    6512:	f8ad 300a 	strh.w	r3, [sp, #10]
    6516:	4613      	mov	r3, r2
    6518:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    651c:	2300      	movs	r3, #0
    651e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    6522:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6526:	f043 0301 	orr.w	r3, r3, #1
    652a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    652e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6532:	f043 0302 	orr.w	r3, r3, #2
    6536:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    653a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    653e:	f043 0310 	orr.w	r3, r3, #16
    6542:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    6546:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    654a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    654e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    6552:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6556:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    655a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    655e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    6566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    656a:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    656e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6572:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6576:	4013      	ands	r3, r2
    6578:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    657c:	9b01      	ldr	r3, [sp, #4]
    657e:	2b00      	cmp	r3, #0
    6580:	d003      	beq.n	658a <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    6582:	9b01      	ldr	r3, [sp, #4]
    6584:	2b01      	cmp	r3, #1
    6586:	d00a      	beq.n	659e <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6588:	e013      	b.n	65b2 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    658a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    658e:	041a      	lsls	r2, r3, #16
    6590:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6594:	431a      	orrs	r2, r3
    6596:	9b03      	ldr	r3, [sp, #12]
    6598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    659c:	e009      	b.n	65b2 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    659e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    65a2:	041a      	lsls	r2, r3, #16
    65a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65a8:	431a      	orrs	r2, r3
    65aa:	9b03      	ldr	r3, [sp, #12]
    65ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    65b0:	bf00      	nop
    }
}
    65b2:	bf00      	nop
    65b4:	b006      	add	sp, #24
    65b6:	4770      	bx	lr

000065b8 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    65b8:	b500      	push	{lr}
    65ba:	b087      	sub	sp, #28
    65bc:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    65be:	9b01      	ldr	r3, [sp, #4]
    65c0:	885b      	ldrh	r3, [r3, #2]
    65c2:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    65c6:	9b01      	ldr	r3, [sp, #4]
    65c8:	689b      	ldr	r3, [r3, #8]
    65ca:	7a1b      	ldrb	r3, [r3, #8]
    65cc:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    65d0:	9b01      	ldr	r3, [sp, #4]
    65d2:	689b      	ldr	r3, [r3, #8]
    65d4:	681b      	ldr	r3, [r3, #0]
    65d6:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    65d8:	9b01      	ldr	r3, [sp, #4]
    65da:	689b      	ldr	r3, [r3, #8]
    65dc:	685b      	ldr	r3, [r3, #4]
    65de:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    65e0:	2300      	movs	r3, #0
    65e2:	f8ad 3016 	strh.w	r3, [sp, #22]
    65e6:	e111      	b.n	680c <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    65e8:	9b02      	ldr	r3, [sp, #8]
    65ea:	2b02      	cmp	r3, #2
    65ec:	d169      	bne.n	66c2 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    65ee:	f89d 3013 	ldrb.w	r3, [sp, #19]
    65f2:	2b01      	cmp	r3, #1
    65f4:	d11a      	bne.n	662c <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    65f6:	9b01      	ldr	r3, [sp, #4]
    65f8:	685a      	ldr	r2, [r3, #4]
    65fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65fe:	005b      	lsls	r3, r3, #1
    6600:	4413      	add	r3, r2
    6602:	881b      	ldrh	r3, [r3, #0]
    6604:	f003 021f 	and.w	r2, r3, #31
    6608:	9b01      	ldr	r3, [sp, #4]
    660a:	6859      	ldr	r1, [r3, #4]
    660c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6610:	005b      	lsls	r3, r3, #1
    6612:	440b      	add	r3, r1
    6614:	881b      	ldrh	r3, [r3, #0]
    6616:	095b      	lsrs	r3, r3, #5
    6618:	b29b      	uxth	r3, r3
    661a:	4619      	mov	r1, r3
    661c:	4b81      	ldr	r3, [pc, #516]	; (6824 <Port_Ipw_Init_UnusedPins+0x26c>)
    661e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6622:	2101      	movs	r1, #1
    6624:	fa01 f202 	lsl.w	r2, r1, r2
    6628:	605a      	str	r2, [r3, #4]
    662a:	e01d      	b.n	6668 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    662c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6630:	2b00      	cmp	r3, #0
    6632:	d119      	bne.n	6668 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6634:	9b01      	ldr	r3, [sp, #4]
    6636:	685a      	ldr	r2, [r3, #4]
    6638:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    663c:	005b      	lsls	r3, r3, #1
    663e:	4413      	add	r3, r2
    6640:	881b      	ldrh	r3, [r3, #0]
    6642:	f003 021f 	and.w	r2, r3, #31
    6646:	9b01      	ldr	r3, [sp, #4]
    6648:	6859      	ldr	r1, [r3, #4]
    664a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    664e:	005b      	lsls	r3, r3, #1
    6650:	440b      	add	r3, r1
    6652:	881b      	ldrh	r3, [r3, #0]
    6654:	095b      	lsrs	r3, r3, #5
    6656:	b29b      	uxth	r3, r3
    6658:	4619      	mov	r1, r3
    665a:	4b72      	ldr	r3, [pc, #456]	; (6824 <Port_Ipw_Init_UnusedPins+0x26c>)
    665c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6660:	2101      	movs	r1, #1
    6662:	fa01 f202 	lsl.w	r2, r1, r2
    6666:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6668:	f007 ffa4 	bl	e5b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    666c:	9b01      	ldr	r3, [sp, #4]
    666e:	685a      	ldr	r2, [r3, #4]
    6670:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6674:	005b      	lsls	r3, r3, #1
    6676:	4413      	add	r3, r2
    6678:	881b      	ldrh	r3, [r3, #0]
    667a:	095b      	lsrs	r3, r3, #5
    667c:	b29b      	uxth	r3, r3
    667e:	461a      	mov	r2, r3
    6680:	4b68      	ldr	r3, [pc, #416]	; (6824 <Port_Ipw_Init_UnusedPins+0x26c>)
    6682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6686:	6959      	ldr	r1, [r3, #20]
    6688:	9b01      	ldr	r3, [sp, #4]
    668a:	685a      	ldr	r2, [r3, #4]
    668c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6690:	005b      	lsls	r3, r3, #1
    6692:	4413      	add	r3, r2
    6694:	881b      	ldrh	r3, [r3, #0]
    6696:	f003 031f 	and.w	r3, r3, #31
    669a:	2201      	movs	r2, #1
    669c:	409a      	lsls	r2, r3
    669e:	9b01      	ldr	r3, [sp, #4]
    66a0:	6858      	ldr	r0, [r3, #4]
    66a2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    66a6:	005b      	lsls	r3, r3, #1
    66a8:	4403      	add	r3, r0
    66aa:	881b      	ldrh	r3, [r3, #0]
    66ac:	095b      	lsrs	r3, r3, #5
    66ae:	b29b      	uxth	r3, r3
    66b0:	4618      	mov	r0, r3
    66b2:	4b5c      	ldr	r3, [pc, #368]	; (6824 <Port_Ipw_Init_UnusedPins+0x26c>)
    66b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    66b8:	430a      	orrs	r2, r1
    66ba:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    66bc:	f007 ffa6 	bl	e60c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    66c0:	e086      	b.n	67d0 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    66c2:	f007 ff77 	bl	e5b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    66c6:	9b01      	ldr	r3, [sp, #4]
    66c8:	685a      	ldr	r2, [r3, #4]
    66ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    66ce:	005b      	lsls	r3, r3, #1
    66d0:	4413      	add	r3, r2
    66d2:	881b      	ldrh	r3, [r3, #0]
    66d4:	095b      	lsrs	r3, r3, #5
    66d6:	b29b      	uxth	r3, r3
    66d8:	461a      	mov	r2, r3
    66da:	4b52      	ldr	r3, [pc, #328]	; (6824 <Port_Ipw_Init_UnusedPins+0x26c>)
    66dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    66e0:	6959      	ldr	r1, [r3, #20]
    66e2:	9b01      	ldr	r3, [sp, #4]
    66e4:	685a      	ldr	r2, [r3, #4]
    66e6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    66ea:	005b      	lsls	r3, r3, #1
    66ec:	4413      	add	r3, r2
    66ee:	881b      	ldrh	r3, [r3, #0]
    66f0:	f003 031f 	and.w	r3, r3, #31
    66f4:	2201      	movs	r2, #1
    66f6:	fa02 f303 	lsl.w	r3, r2, r3
    66fa:	43da      	mvns	r2, r3
    66fc:	9b01      	ldr	r3, [sp, #4]
    66fe:	6858      	ldr	r0, [r3, #4]
    6700:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6704:	005b      	lsls	r3, r3, #1
    6706:	4403      	add	r3, r0
    6708:	881b      	ldrh	r3, [r3, #0]
    670a:	095b      	lsrs	r3, r3, #5
    670c:	b29b      	uxth	r3, r3
    670e:	4618      	mov	r0, r3
    6710:	4b44      	ldr	r3, [pc, #272]	; (6824 <Port_Ipw_Init_UnusedPins+0x26c>)
    6712:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6716:	400a      	ands	r2, r1
    6718:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    671a:	f007 ff77 	bl	e60c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    671e:	f007 ff9b 	bl	e658 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6722:	9b01      	ldr	r3, [sp, #4]
    6724:	685a      	ldr	r2, [r3, #4]
    6726:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    672a:	005b      	lsls	r3, r3, #1
    672c:	4413      	add	r3, r2
    672e:	881b      	ldrh	r3, [r3, #0]
    6730:	095b      	lsrs	r3, r3, #5
    6732:	b29b      	uxth	r3, r3
    6734:	461a      	mov	r2, r3
    6736:	4b3b      	ldr	r3, [pc, #236]	; (6824 <Port_Ipw_Init_UnusedPins+0x26c>)
    6738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    673c:	6999      	ldr	r1, [r3, #24]
    673e:	9b01      	ldr	r3, [sp, #4]
    6740:	685a      	ldr	r2, [r3, #4]
    6742:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6746:	005b      	lsls	r3, r3, #1
    6748:	4413      	add	r3, r2
    674a:	881b      	ldrh	r3, [r3, #0]
    674c:	f003 031f 	and.w	r3, r3, #31
    6750:	2201      	movs	r2, #1
    6752:	fa02 f303 	lsl.w	r3, r2, r3
    6756:	43da      	mvns	r2, r3
    6758:	9b01      	ldr	r3, [sp, #4]
    675a:	6858      	ldr	r0, [r3, #4]
    675c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6760:	005b      	lsls	r3, r3, #1
    6762:	4403      	add	r3, r0
    6764:	881b      	ldrh	r3, [r3, #0]
    6766:	095b      	lsrs	r3, r3, #5
    6768:	b29b      	uxth	r3, r3
    676a:	4618      	mov	r0, r3
    676c:	4b2d      	ldr	r3, [pc, #180]	; (6824 <Port_Ipw_Init_UnusedPins+0x26c>)
    676e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6772:	400a      	ands	r2, r1
    6774:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6776:	9b02      	ldr	r3, [sp, #8]
    6778:	2b03      	cmp	r3, #3
    677a:	d127      	bne.n	67cc <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    677c:	9b01      	ldr	r3, [sp, #4]
    677e:	685a      	ldr	r2, [r3, #4]
    6780:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6784:	005b      	lsls	r3, r3, #1
    6786:	4413      	add	r3, r2
    6788:	881b      	ldrh	r3, [r3, #0]
    678a:	095b      	lsrs	r3, r3, #5
    678c:	b29b      	uxth	r3, r3
    678e:	461a      	mov	r2, r3
    6790:	4b24      	ldr	r3, [pc, #144]	; (6824 <Port_Ipw_Init_UnusedPins+0x26c>)
    6792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6796:	6999      	ldr	r1, [r3, #24]
    6798:	9b01      	ldr	r3, [sp, #4]
    679a:	685a      	ldr	r2, [r3, #4]
    679c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    67a0:	005b      	lsls	r3, r3, #1
    67a2:	4413      	add	r3, r2
    67a4:	881b      	ldrh	r3, [r3, #0]
    67a6:	f003 031f 	and.w	r3, r3, #31
    67aa:	2201      	movs	r2, #1
    67ac:	409a      	lsls	r2, r3
    67ae:	9b01      	ldr	r3, [sp, #4]
    67b0:	6858      	ldr	r0, [r3, #4]
    67b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    67b6:	005b      	lsls	r3, r3, #1
    67b8:	4403      	add	r3, r0
    67ba:	881b      	ldrh	r3, [r3, #0]
    67bc:	095b      	lsrs	r3, r3, #5
    67be:	b29b      	uxth	r3, r3
    67c0:	4618      	mov	r0, r3
    67c2:	4b18      	ldr	r3, [pc, #96]	; (6824 <Port_Ipw_Init_UnusedPins+0x26c>)
    67c4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67c8:	430a      	orrs	r2, r1
    67ca:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    67cc:	f007 ff70 	bl	e6b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    67d0:	9b01      	ldr	r3, [sp, #4]
    67d2:	685a      	ldr	r2, [r3, #4]
    67d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    67d8:	005b      	lsls	r3, r3, #1
    67da:	4413      	add	r3, r2
    67dc:	881b      	ldrh	r3, [r3, #0]
    67de:	095b      	lsrs	r3, r3, #5
    67e0:	b29b      	uxth	r3, r3
    67e2:	461a      	mov	r2, r3
    67e4:	4b10      	ldr	r3, [pc, #64]	; (6828 <Port_Ipw_Init_UnusedPins+0x270>)
    67e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    67ea:	9a01      	ldr	r2, [sp, #4]
    67ec:	6851      	ldr	r1, [r2, #4]
    67ee:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    67f2:	0052      	lsls	r2, r2, #1
    67f4:	440a      	add	r2, r1
    67f6:	8812      	ldrh	r2, [r2, #0]
    67f8:	f002 021f 	and.w	r2, r2, #31
    67fc:	9903      	ldr	r1, [sp, #12]
    67fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6802:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6806:	3301      	adds	r3, #1
    6808:	f8ad 3016 	strh.w	r3, [sp, #22]
    680c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6810:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6814:	429a      	cmp	r2, r3
    6816:	f4ff aee7 	bcc.w	65e8 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    681a:	bf00      	nop
    681c:	bf00      	nop
    681e:	b007      	add	sp, #28
    6820:	f85d fb04 	ldr.w	pc, [sp], #4
    6824:	0000ff3c 	.word	0x0000ff3c
    6828:	0000ff28 	.word	0x0000ff28

0000682c <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    682c:	b500      	push	{lr}
    682e:	b085      	sub	sp, #20
    6830:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    6832:	9b01      	ldr	r3, [sp, #4]
    6834:	7c1b      	ldrb	r3, [r3, #16]
    6836:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    683a:	2300      	movs	r3, #0
    683c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6840:	e035      	b.n	68ae <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    6842:	9b01      	ldr	r3, [sp, #4]
    6844:	695a      	ldr	r2, [r3, #20]
    6846:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    684a:	00db      	lsls	r3, r3, #3
    684c:	4413      	add	r3, r2
    684e:	781b      	ldrb	r3, [r3, #0]
    6850:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6854:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6858:	4a1f      	ldr	r2, [pc, #124]	; (68d8 <Port_Ipw_Init+0xac>)
    685a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    685e:	9b01      	ldr	r3, [sp, #4]
    6860:	695a      	ldr	r2, [r3, #20]
    6862:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6866:	00db      	lsls	r3, r3, #3
    6868:	4413      	add	r3, r2
    686a:	4619      	mov	r1, r3
    686c:	f7ff fe39 	bl	64e2 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6870:	f008 f88c 	bl	e98c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6874:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6878:	4a17      	ldr	r2, [pc, #92]	; (68d8 <Port_Ipw_Init+0xac>)
    687a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    687e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    6882:	9b01      	ldr	r3, [sp, #4]
    6884:	695a      	ldr	r2, [r3, #20]
    6886:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    688a:	00db      	lsls	r3, r3, #3
    688c:	4413      	add	r3, r2
    688e:	685a      	ldr	r2, [r3, #4]
    6890:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6894:	4810      	ldr	r0, [pc, #64]	; (68d8 <Port_Ipw_Init+0xac>)
    6896:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    689a:	430a      	orrs	r2, r1
    689c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    68a0:	f008 f8a0 	bl	e9e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    68a4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    68a8:	3301      	adds	r3, #1
    68aa:	f8ad 300e 	strh.w	r3, [sp, #14]
    68ae:	f89d 300d 	ldrb.w	r3, [sp, #13]
    68b2:	b29b      	uxth	r3, r3
    68b4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    68b8:	429a      	cmp	r2, r3
    68ba:	d3c2      	bcc.n	6842 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    68bc:	9b01      	ldr	r3, [sp, #4]
    68be:	6a1b      	ldr	r3, [r3, #32]
    68c0:	4619      	mov	r1, r3
    68c2:	2010      	movs	r0, #16
    68c4:	f7ff fd98 	bl	63f8 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    68c8:	9801      	ldr	r0, [sp, #4]
    68ca:	f7ff fe75 	bl	65b8 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    68ce:	bf00      	nop
    68d0:	b005      	add	sp, #20
    68d2:	f85d fb04 	ldr.w	pc, [sp], #4
    68d6:	bf00      	nop
    68d8:	0000ff28 	.word	0x0000ff28

000068dc <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    68dc:	b500      	push	{lr}
    68de:	b085      	sub	sp, #20
    68e0:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    68e2:	9b01      	ldr	r3, [sp, #4]
    68e4:	881b      	ldrh	r3, [r3, #0]
    68e6:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    68ea:	2300      	movs	r3, #0
    68ec:	f8ad 300e 	strh.w	r3, [sp, #14]
    68f0:	e0d2      	b.n	6a98 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    68f2:	9b01      	ldr	r3, [sp, #4]
    68f4:	68d9      	ldr	r1, [r3, #12]
    68f6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    68fa:	4613      	mov	r3, r2
    68fc:	009b      	lsls	r3, r3, #2
    68fe:	4413      	add	r3, r2
    6900:	009b      	lsls	r3, r3, #2
    6902:	440b      	add	r3, r1
    6904:	7c5b      	ldrb	r3, [r3, #17]
    6906:	f083 0301 	eor.w	r3, r3, #1
    690a:	b2db      	uxtb	r3, r3
    690c:	2b00      	cmp	r3, #0
    690e:	f000 80be 	beq.w	6a8e <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    6912:	9b01      	ldr	r3, [sp, #4]
    6914:	68d9      	ldr	r1, [r3, #12]
    6916:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    691a:	4613      	mov	r3, r2
    691c:	009b      	lsls	r3, r3, #2
    691e:	4413      	add	r3, r2
    6920:	009b      	lsls	r3, r3, #2
    6922:	440b      	add	r3, r1
    6924:	7c1b      	ldrb	r3, [r3, #16]
    6926:	2b00      	cmp	r3, #0
    6928:	f000 80b1 	beq.w	6a8e <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    692c:	9b01      	ldr	r3, [sp, #4]
    692e:	68d9      	ldr	r1, [r3, #12]
    6930:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6934:	4613      	mov	r3, r2
    6936:	009b      	lsls	r3, r3, #2
    6938:	4413      	add	r3, r2
    693a:	009b      	lsls	r3, r3, #2
    693c:	440b      	add	r3, r1
    693e:	881b      	ldrh	r3, [r3, #0]
    6940:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6944:	9b01      	ldr	r3, [sp, #4]
    6946:	68d9      	ldr	r1, [r3, #12]
    6948:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    694c:	4613      	mov	r3, r2
    694e:	009b      	lsls	r3, r3, #2
    6950:	4413      	add	r3, r2
    6952:	009b      	lsls	r3, r3, #2
    6954:	440b      	add	r3, r1
    6956:	68db      	ldr	r3, [r3, #12]
    6958:	2b02      	cmp	r3, #2
    695a:	d11d      	bne.n	6998 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    695c:	f008 f95e 	bl	ec1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6960:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6964:	095b      	lsrs	r3, r3, #5
    6966:	b29b      	uxth	r3, r3
    6968:	461a      	mov	r2, r3
    696a:	4b51      	ldr	r3, [pc, #324]	; (6ab0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    696c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6970:	6959      	ldr	r1, [r3, #20]
    6972:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6976:	f003 031f 	and.w	r3, r3, #31
    697a:	2201      	movs	r2, #1
    697c:	409a      	lsls	r2, r3
    697e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6982:	095b      	lsrs	r3, r3, #5
    6984:	b29b      	uxth	r3, r3
    6986:	4618      	mov	r0, r3
    6988:	4b49      	ldr	r3, [pc, #292]	; (6ab0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    698a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    698e:	430a      	orrs	r2, r1
    6990:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6992:	f008 f96f 	bl	ec74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    6996:	e07a      	b.n	6a8e <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    6998:	9b01      	ldr	r3, [sp, #4]
    699a:	68d9      	ldr	r1, [r3, #12]
    699c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    69a0:	4613      	mov	r3, r2
    69a2:	009b      	lsls	r3, r3, #2
    69a4:	4413      	add	r3, r2
    69a6:	009b      	lsls	r3, r3, #2
    69a8:	440b      	add	r3, r1
    69aa:	68db      	ldr	r3, [r3, #12]
    69ac:	2b01      	cmp	r3, #1
    69ae:	d00b      	beq.n	69c8 <Port_Ipw_RefreshPortDirection+0xec>
    69b0:	9b01      	ldr	r3, [sp, #4]
    69b2:	68d9      	ldr	r1, [r3, #12]
    69b4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    69b8:	4613      	mov	r3, r2
    69ba:	009b      	lsls	r3, r3, #2
    69bc:	4413      	add	r3, r2
    69be:	009b      	lsls	r3, r3, #2
    69c0:	440b      	add	r3, r1
    69c2:	68db      	ldr	r3, [r3, #12]
    69c4:	2b03      	cmp	r3, #3
    69c6:	d162      	bne.n	6a8e <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    69c8:	f008 f928 	bl	ec1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    69cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    69d0:	095b      	lsrs	r3, r3, #5
    69d2:	b29b      	uxth	r3, r3
    69d4:	461a      	mov	r2, r3
    69d6:	4b36      	ldr	r3, [pc, #216]	; (6ab0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    69d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    69dc:	6959      	ldr	r1, [r3, #20]
    69de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    69e2:	f003 031f 	and.w	r3, r3, #31
    69e6:	2201      	movs	r2, #1
    69e8:	fa02 f303 	lsl.w	r3, r2, r3
    69ec:	43da      	mvns	r2, r3
    69ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    69f2:	095b      	lsrs	r3, r3, #5
    69f4:	b29b      	uxth	r3, r3
    69f6:	4618      	mov	r0, r3
    69f8:	4b2d      	ldr	r3, [pc, #180]	; (6ab0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    69fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    69fe:	400a      	ands	r2, r1
    6a00:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6a02:	f008 f937 	bl	ec74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    6a06:	f008 f95b 	bl	ecc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6a0a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a0e:	095b      	lsrs	r3, r3, #5
    6a10:	b29b      	uxth	r3, r3
    6a12:	461a      	mov	r2, r3
    6a14:	4b26      	ldr	r3, [pc, #152]	; (6ab0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6a1a:	6999      	ldr	r1, [r3, #24]
    6a1c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a20:	f003 031f 	and.w	r3, r3, #31
    6a24:	2201      	movs	r2, #1
    6a26:	fa02 f303 	lsl.w	r3, r2, r3
    6a2a:	43da      	mvns	r2, r3
    6a2c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a30:	095b      	lsrs	r3, r3, #5
    6a32:	b29b      	uxth	r3, r3
    6a34:	4618      	mov	r0, r3
    6a36:	4b1e      	ldr	r3, [pc, #120]	; (6ab0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6a38:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6a3c:	400a      	ands	r2, r1
    6a3e:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6a40:	9b01      	ldr	r3, [sp, #4]
    6a42:	68d9      	ldr	r1, [r3, #12]
    6a44:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6a48:	4613      	mov	r3, r2
    6a4a:	009b      	lsls	r3, r3, #2
    6a4c:	4413      	add	r3, r2
    6a4e:	009b      	lsls	r3, r3, #2
    6a50:	440b      	add	r3, r1
    6a52:	68db      	ldr	r3, [r3, #12]
    6a54:	2b03      	cmp	r3, #3
    6a56:	d118      	bne.n	6a8a <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6a58:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a5c:	095b      	lsrs	r3, r3, #5
    6a5e:	b29b      	uxth	r3, r3
    6a60:	461a      	mov	r2, r3
    6a62:	4b13      	ldr	r3, [pc, #76]	; (6ab0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6a68:	6999      	ldr	r1, [r3, #24]
    6a6a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a6e:	f003 031f 	and.w	r3, r3, #31
    6a72:	2201      	movs	r2, #1
    6a74:	409a      	lsls	r2, r3
    6a76:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a7a:	095b      	lsrs	r3, r3, #5
    6a7c:	b29b      	uxth	r3, r3
    6a7e:	4618      	mov	r0, r3
    6a80:	4b0b      	ldr	r3, [pc, #44]	; (6ab0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6a82:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6a86:	430a      	orrs	r2, r1
    6a88:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    6a8a:	f008 f945 	bl	ed18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6a8e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6a92:	3301      	adds	r3, #1
    6a94:	f8ad 300e 	strh.w	r3, [sp, #14]
    6a98:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6a9c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6aa0:	429a      	cmp	r2, r3
    6aa2:	f4ff af26 	bcc.w	68f2 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    6aa6:	bf00      	nop
    6aa8:	bf00      	nop
    6aaa:	b005      	add	sp, #20
    6aac:	f85d fb04 	ldr.w	pc, [sp], #4
    6ab0:	0000ff3c 	.word	0x0000ff3c

00006ab4 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6ab4:	b500      	push	{lr}
    6ab6:	b085      	sub	sp, #20
    6ab8:	4603      	mov	r3, r0
    6aba:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6abe:	2300      	movs	r3, #0
    6ac0:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    6ac4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6ac8:	4618      	mov	r0, r3
    6aca:	f000 f871 	bl	6bb0 <Dio_Ipw_ReadChannel>
    6ace:	4603      	mov	r3, r0
    6ad0:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    6ad4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6ad8:	4618      	mov	r0, r3
    6ada:	b005      	add	sp, #20
    6adc:	f85d fb04 	ldr.w	pc, [sp], #4

00006ae0 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    6ae0:	b500      	push	{lr}
    6ae2:	b083      	sub	sp, #12
    6ae4:	4603      	mov	r3, r0
    6ae6:	460a      	mov	r2, r1
    6ae8:	f8ad 3006 	strh.w	r3, [sp, #6]
    6aec:	4613      	mov	r3, r2
    6aee:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    6af2:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6af6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6afa:	4611      	mov	r1, r2
    6afc:	4618      	mov	r0, r3
    6afe:	f000 f87d 	bl	6bfc <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    6b02:	bf00      	nop
    6b04:	b003      	add	sp, #12
    6b06:	f85d fb04 	ldr.w	pc, [sp], #4

00006b0a <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6b0a:	b500      	push	{lr}
    6b0c:	b085      	sub	sp, #20
    6b0e:	4603      	mov	r3, r0
    6b10:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6b14:	2300      	movs	r3, #0
    6b16:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    6b1a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6b1e:	4618      	mov	r0, r3
    6b20:	f000 f892 	bl	6c48 <Dio_Ipw_FlipChannel>
    6b24:	4603      	mov	r3, r0
    6b26:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    6b2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6b2e:	4618      	mov	r0, r3
    6b30:	b005      	add	sp, #20
    6b32:	f85d fb04 	ldr.w	pc, [sp], #4

00006b36 <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    6b36:	b500      	push	{lr}
    6b38:	b085      	sub	sp, #20
    6b3a:	4603      	mov	r3, r0
    6b3c:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6b40:	2300      	movs	r3, #0
    6b42:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    6b44:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b48:	4618      	mov	r0, r3
    6b4a:	f000 f8b3 	bl	6cb4 <Dio_Ipw_ReadPort>
    6b4e:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    6b50:	9b03      	ldr	r3, [sp, #12]
}
    6b52:	4618      	mov	r0, r3
    6b54:	b005      	add	sp, #20
    6b56:	f85d fb04 	ldr.w	pc, [sp], #4

00006b5a <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6b5a:	b500      	push	{lr}
    6b5c:	b083      	sub	sp, #12
    6b5e:	4603      	mov	r3, r0
    6b60:	9100      	str	r1, [sp, #0]
    6b62:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    6b66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b6a:	9900      	ldr	r1, [sp, #0]
    6b6c:	4618      	mov	r0, r3
    6b6e:	f000 f8b9 	bl	6ce4 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    6b72:	bf00      	nop
    6b74:	b003      	add	sp, #12
    6b76:	f85d fb04 	ldr.w	pc, [sp], #4

00006b7a <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    6b7a:	b500      	push	{lr}
    6b7c:	b085      	sub	sp, #20
    6b7e:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6b80:	2300      	movs	r3, #0
    6b82:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    6b84:	9801      	ldr	r0, [sp, #4]
    6b86:	f000 f8c5 	bl	6d14 <Dio_Ipw_ReadChannelGroup>
    6b8a:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    6b8c:	9b03      	ldr	r3, [sp, #12]
}
    6b8e:	4618      	mov	r0, r3
    6b90:	b005      	add	sp, #20
    6b92:	f85d fb04 	ldr.w	pc, [sp], #4

00006b96 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    6b96:	b500      	push	{lr}
    6b98:	b083      	sub	sp, #12
    6b9a:	9001      	str	r0, [sp, #4]
    6b9c:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    6b9e:	9900      	ldr	r1, [sp, #0]
    6ba0:	9801      	ldr	r0, [sp, #4]
    6ba2:	f000 f8d7 	bl	6d54 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    6ba6:	bf00      	nop
    6ba8:	b003      	add	sp, #12
    6baa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00006bb0 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6bb0:	b500      	push	{lr}
    6bb2:	b087      	sub	sp, #28
    6bb4:	4603      	mov	r3, r0
    6bb6:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    6bba:	2300      	movs	r3, #0
    6bbc:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6bc0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6bc4:	095b      	lsrs	r3, r3, #5
    6bc6:	b29b      	uxth	r3, r3
    6bc8:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6bca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6bce:	f003 031f 	and.w	r3, r3, #31
    6bd2:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6bd4:	4a08      	ldr	r2, [pc, #32]	; (6bf8 <Dio_Ipw_ReadChannel+0x48>)
    6bd6:	9b04      	ldr	r3, [sp, #16]
    6bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bdc:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    6bde:	9903      	ldr	r1, [sp, #12]
    6be0:	9802      	ldr	r0, [sp, #8]
    6be2:	f000 f940 	bl	6e66 <Gpio_Dio_Ip_ReadPin>
    6be6:	4603      	mov	r3, r0
    6be8:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    6bec:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6bf0:	4618      	mov	r0, r3
    6bf2:	b007      	add	sp, #28
    6bf4:	f85d fb04 	ldr.w	pc, [sp], #4
    6bf8:	1fff8b24 	.word	0x1fff8b24

00006bfc <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    6bfc:	b500      	push	{lr}
    6bfe:	b087      	sub	sp, #28
    6c00:	4603      	mov	r3, r0
    6c02:	460a      	mov	r2, r1
    6c04:	f8ad 3006 	strh.w	r3, [sp, #6]
    6c08:	4613      	mov	r3, r2
    6c0a:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6c0e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6c12:	095b      	lsrs	r3, r3, #5
    6c14:	b29b      	uxth	r3, r3
    6c16:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6c18:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6c1c:	f003 031f 	and.w	r3, r3, #31
    6c20:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6c22:	4a08      	ldr	r2, [pc, #32]	; (6c44 <Dio_Ipw_WriteChannel+0x48>)
    6c24:	9b05      	ldr	r3, [sp, #20]
    6c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c2a:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    6c2c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6c30:	461a      	mov	r2, r3
    6c32:	9904      	ldr	r1, [sp, #16]
    6c34:	9803      	ldr	r0, [sp, #12]
    6c36:	f000 f8b7 	bl	6da8 <Gpio_Dio_Ip_WritePin>
}
    6c3a:	bf00      	nop
    6c3c:	b007      	add	sp, #28
    6c3e:	f85d fb04 	ldr.w	pc, [sp], #4
    6c42:	bf00      	nop
    6c44:	1fff8b24 	.word	0x1fff8b24

00006c48 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6c48:	b500      	push	{lr}
    6c4a:	b089      	sub	sp, #36	; 0x24
    6c4c:	4603      	mov	r3, r0
    6c4e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6c52:	2300      	movs	r3, #0
    6c54:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6c58:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6c5c:	095b      	lsrs	r3, r3, #5
    6c5e:	b29b      	uxth	r3, r3
    6c60:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6c62:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6c66:	f003 031f 	and.w	r3, r3, #31
    6c6a:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6c6c:	4a10      	ldr	r2, [pc, #64]	; (6cb0 <Dio_Ipw_FlipChannel+0x68>)
    6c6e:	9b06      	ldr	r3, [sp, #24]
    6c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c74:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    6c76:	2201      	movs	r2, #1
    6c78:	9b05      	ldr	r3, [sp, #20]
    6c7a:	fa02 f303 	lsl.w	r3, r2, r3
    6c7e:	4619      	mov	r1, r3
    6c80:	9804      	ldr	r0, [sp, #16]
    6c82:	f000 f8dc 	bl	6e3e <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    6c86:	9804      	ldr	r0, [sp, #16]
    6c88:	f000 f8bc 	bl	6e04 <Gpio_Dio_Ip_GetPinsOutput>
    6c8c:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    6c8e:	2201      	movs	r2, #1
    6c90:	9b05      	ldr	r3, [sp, #20]
    6c92:	409a      	lsls	r2, r3
    6c94:	9b03      	ldr	r3, [sp, #12]
    6c96:	401a      	ands	r2, r3
    6c98:	9b05      	ldr	r3, [sp, #20]
    6c9a:	fa22 f303 	lsr.w	r3, r2, r3
    6c9e:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    6ca2:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    6ca6:	4618      	mov	r0, r3
    6ca8:	b009      	add	sp, #36	; 0x24
    6caa:	f85d fb04 	ldr.w	pc, [sp], #4
    6cae:	bf00      	nop
    6cb0:	1fff8b24 	.word	0x1fff8b24

00006cb4 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    6cb4:	b500      	push	{lr}
    6cb6:	b085      	sub	sp, #20
    6cb8:	4603      	mov	r3, r0
    6cba:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6cbe:	2300      	movs	r3, #0
    6cc0:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6cc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cc6:	4a06      	ldr	r2, [pc, #24]	; (6ce0 <Dio_Ipw_ReadPort+0x2c>)
    6cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ccc:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6cce:	9802      	ldr	r0, [sp, #8]
    6cd0:	f000 f8be 	bl	6e50 <Gpio_Dio_Ip_ReadPins>
    6cd4:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    6cd6:	9b03      	ldr	r3, [sp, #12]
}
    6cd8:	4618      	mov	r0, r3
    6cda:	b005      	add	sp, #20
    6cdc:	f85d fb04 	ldr.w	pc, [sp], #4
    6ce0:	1fff8b24 	.word	0x1fff8b24

00006ce4 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6ce4:	b500      	push	{lr}
    6ce6:	b085      	sub	sp, #20
    6ce8:	4603      	mov	r3, r0
    6cea:	9100      	str	r1, [sp, #0]
    6cec:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    6cf0:	9b00      	ldr	r3, [sp, #0]
    6cf2:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6cf4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cf8:	4a05      	ldr	r2, [pc, #20]	; (6d10 <Dio_Ipw_WritePort+0x2c>)
    6cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cfe:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    6d00:	9903      	ldr	r1, [sp, #12]
    6d02:	9802      	ldr	r0, [sp, #8]
    6d04:	f000 f875 	bl	6df2 <Gpio_Dio_Ip_WritePins>
}
    6d08:	bf00      	nop
    6d0a:	b005      	add	sp, #20
    6d0c:	f85d fb04 	ldr.w	pc, [sp], #4
    6d10:	1fff8b24 	.word	0x1fff8b24

00006d14 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    6d14:	b500      	push	{lr}
    6d16:	b087      	sub	sp, #28
    6d18:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6d1a:	2300      	movs	r3, #0
    6d1c:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6d1e:	9b01      	ldr	r3, [sp, #4]
    6d20:	781b      	ldrb	r3, [r3, #0]
    6d22:	461a      	mov	r2, r3
    6d24:	4b0a      	ldr	r3, [pc, #40]	; (6d50 <Dio_Ipw_ReadChannelGroup+0x3c>)
    6d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6d2a:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6d2c:	9804      	ldr	r0, [sp, #16]
    6d2e:	f000 f88f 	bl	6e50 <Gpio_Dio_Ip_ReadPins>
    6d32:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    6d34:	9b01      	ldr	r3, [sp, #4]
    6d36:	685a      	ldr	r2, [r3, #4]
    6d38:	9b03      	ldr	r3, [sp, #12]
    6d3a:	4013      	ands	r3, r2
    6d3c:	9a01      	ldr	r2, [sp, #4]
    6d3e:	7852      	ldrb	r2, [r2, #1]
    6d40:	40d3      	lsrs	r3, r2
    6d42:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    6d44:	9b05      	ldr	r3, [sp, #20]
}
    6d46:	4618      	mov	r0, r3
    6d48:	b007      	add	sp, #28
    6d4a:	f85d fb04 	ldr.w	pc, [sp], #4
    6d4e:	bf00      	nop
    6d50:	1fff8b24 	.word	0x1fff8b24

00006d54 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    6d54:	b500      	push	{lr}
    6d56:	b087      	sub	sp, #28
    6d58:	9001      	str	r0, [sp, #4]
    6d5a:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6d5c:	9b01      	ldr	r3, [sp, #4]
    6d5e:	781b      	ldrb	r3, [r3, #0]
    6d60:	461a      	mov	r2, r3
    6d62:	4b10      	ldr	r3, [pc, #64]	; (6da4 <Dio_Ipw_WriteChannelGroup+0x50>)
    6d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6d68:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    6d6a:	9b01      	ldr	r3, [sp, #4]
    6d6c:	785b      	ldrb	r3, [r3, #1]
    6d6e:	461a      	mov	r2, r3
    6d70:	9b00      	ldr	r3, [sp, #0]
    6d72:	fa03 f202 	lsl.w	r2, r3, r2
    6d76:	9b01      	ldr	r3, [sp, #4]
    6d78:	685b      	ldr	r3, [r3, #4]
    6d7a:	4013      	ands	r3, r2
    6d7c:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    6d7e:	9904      	ldr	r1, [sp, #16]
    6d80:	9805      	ldr	r0, [sp, #20]
    6d82:	f000 f84a 	bl	6e1a <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    6d86:	9b04      	ldr	r3, [sp, #16]
    6d88:	43da      	mvns	r2, r3
    6d8a:	9b01      	ldr	r3, [sp, #4]
    6d8c:	685b      	ldr	r3, [r3, #4]
    6d8e:	4013      	ands	r3, r2
    6d90:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    6d92:	9903      	ldr	r1, [sp, #12]
    6d94:	9805      	ldr	r0, [sp, #20]
    6d96:	f000 f849 	bl	6e2c <Gpio_Dio_Ip_ClearPins>

}
    6d9a:	bf00      	nop
    6d9c:	b007      	add	sp, #28
    6d9e:	f85d fb04 	ldr.w	pc, [sp], #4
    6da2:	bf00      	nop
    6da4:	1fff8b24 	.word	0x1fff8b24

00006da8 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    6da8:	b500      	push	{lr}
    6daa:	b087      	sub	sp, #28
    6dac:	9003      	str	r0, [sp, #12]
    6dae:	9102      	str	r1, [sp, #8]
    6db0:	4613      	mov	r3, r2
    6db2:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    6db6:	f006 ff81 	bl	dcbc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    6dba:	9b03      	ldr	r3, [sp, #12]
    6dbc:	681b      	ldr	r3, [r3, #0]
    6dbe:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    6dc0:	2201      	movs	r2, #1
    6dc2:	9b02      	ldr	r3, [sp, #8]
    6dc4:	fa02 f303 	lsl.w	r3, r2, r3
    6dc8:	43db      	mvns	r3, r3
    6dca:	9a05      	ldr	r2, [sp, #20]
    6dcc:	4013      	ands	r3, r2
    6dce:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    6dd0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6dd4:	9b02      	ldr	r3, [sp, #8]
    6dd6:	fa02 f303 	lsl.w	r3, r2, r3
    6dda:	9a05      	ldr	r2, [sp, #20]
    6ddc:	4313      	orrs	r3, r2
    6dde:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    6de0:	9b03      	ldr	r3, [sp, #12]
    6de2:	9a05      	ldr	r2, [sp, #20]
    6de4:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    6de6:	f006 ff95 	bl	dd14 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    6dea:	bf00      	nop
    6dec:	b007      	add	sp, #28
    6dee:	f85d fb04 	ldr.w	pc, [sp], #4

00006df2 <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6df2:	b082      	sub	sp, #8
    6df4:	9001      	str	r0, [sp, #4]
    6df6:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    6df8:	9b01      	ldr	r3, [sp, #4]
    6dfa:	9a00      	ldr	r2, [sp, #0]
    6dfc:	601a      	str	r2, [r3, #0]
}
    6dfe:	bf00      	nop
    6e00:	b002      	add	sp, #8
    6e02:	4770      	bx	lr

00006e04 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    6e04:	b084      	sub	sp, #16
    6e06:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6e08:	2300      	movs	r3, #0
    6e0a:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    6e0c:	9b01      	ldr	r3, [sp, #4]
    6e0e:	681b      	ldr	r3, [r3, #0]
    6e10:	9303      	str	r3, [sp, #12]
    return returnValue;
    6e12:	9b03      	ldr	r3, [sp, #12]
}
    6e14:	4618      	mov	r0, r3
    6e16:	b004      	add	sp, #16
    6e18:	4770      	bx	lr

00006e1a <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6e1a:	b082      	sub	sp, #8
    6e1c:	9001      	str	r0, [sp, #4]
    6e1e:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    6e20:	9b01      	ldr	r3, [sp, #4]
    6e22:	9a00      	ldr	r2, [sp, #0]
    6e24:	605a      	str	r2, [r3, #4]
}
    6e26:	bf00      	nop
    6e28:	b002      	add	sp, #8
    6e2a:	4770      	bx	lr

00006e2c <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6e2c:	b082      	sub	sp, #8
    6e2e:	9001      	str	r0, [sp, #4]
    6e30:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    6e32:	9b01      	ldr	r3, [sp, #4]
    6e34:	9a00      	ldr	r2, [sp, #0]
    6e36:	609a      	str	r2, [r3, #8]
}
    6e38:	bf00      	nop
    6e3a:	b002      	add	sp, #8
    6e3c:	4770      	bx	lr

00006e3e <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6e3e:	b082      	sub	sp, #8
    6e40:	9001      	str	r0, [sp, #4]
    6e42:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    6e44:	9b01      	ldr	r3, [sp, #4]
    6e46:	9a00      	ldr	r2, [sp, #0]
    6e48:	60da      	str	r2, [r3, #12]
}
    6e4a:	bf00      	nop
    6e4c:	b002      	add	sp, #8
    6e4e:	4770      	bx	lr

00006e50 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    6e50:	b084      	sub	sp, #16
    6e52:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6e54:	2300      	movs	r3, #0
    6e56:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    6e58:	9b01      	ldr	r3, [sp, #4]
    6e5a:	691b      	ldr	r3, [r3, #16]
    6e5c:	9303      	str	r3, [sp, #12]
    return returnValue;
    6e5e:	9b03      	ldr	r3, [sp, #12]
}
    6e60:	4618      	mov	r0, r3
    6e62:	b004      	add	sp, #16
    6e64:	4770      	bx	lr

00006e66 <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    6e66:	b084      	sub	sp, #16
    6e68:	9001      	str	r0, [sp, #4]
    6e6a:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    6e6c:	2300      	movs	r3, #0
    6e6e:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    6e72:	9b01      	ldr	r3, [sp, #4]
    6e74:	691a      	ldr	r2, [r3, #16]
    6e76:	2101      	movs	r1, #1
    6e78:	9b00      	ldr	r3, [sp, #0]
    6e7a:	fa01 f303 	lsl.w	r3, r1, r3
    6e7e:	401a      	ands	r2, r3
    6e80:	9b00      	ldr	r3, [sp, #0]
    6e82:	fa22 f303 	lsr.w	r3, r2, r3
    6e86:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    6e8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6e8e:	4618      	mov	r0, r3
    6e90:	b004      	add	sp, #16
    6e92:	4770      	bx	lr

00006e94 <Can_IsControllersBusy>:
        }
    }
#endif /* CAN_43_FLEXCAN_MAINFUNCTION_MULTIPLE_READ == STD_ON */

static boolean Can_IsControllersBusy(uint32 u32CoreId)
{
    6e94:	b084      	sub	sp, #16
    6e96:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    6e98:	2300      	movs	r3, #0
    6e9a:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    6e9e:	2300      	movs	r3, #0
    6ea0:	f88d 300e 	strb.w	r3, [sp, #14]

    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6ea4:	2300      	movs	r3, #0
    6ea6:	f88d 300e 	strb.w	r3, [sp, #14]
    6eaa:	e01b      	b.n	6ee4 <Can_IsControllersBusy+0x50>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    6eac:	4a12      	ldr	r2, [pc, #72]	; (6ef8 <Can_IsControllersBusy+0x64>)
    6eae:	9b01      	ldr	r3, [sp, #4]
    6eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6eb4:	695a      	ldr	r2, [r3, #20]
    6eb6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6eba:	009b      	lsls	r3, r3, #2
    6ebc:	4413      	add	r3, r2
    6ebe:	681b      	ldr	r3, [r3, #0]
    6ec0:	2b00      	cmp	r3, #0
    6ec2:	d00a      	beq.n	6eda <Can_IsControllersBusy+0x46>
        {
            if (CAN_CS_UNINIT != Can_eControllerState[u8ControllerID])
    6ec4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6ec8:	4a0c      	ldr	r2, [pc, #48]	; (6efc <Can_IsControllersBusy+0x68>)
    6eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ece:	2b00      	cmp	r3, #0
    6ed0:	d003      	beq.n	6eda <Can_IsControllersBusy+0x46>
                *   The function Can_Init shall raise the error CAN_E_TRANSITION if the CAN
                *   controllers are not in state UNINIT.
                */
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_TRANSITION);
            #endif
                bCtrlBusy = TRUE;
    6ed2:	2301      	movs	r3, #1
    6ed4:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    6ed8:	e008      	b.n	6eec <Can_IsControllersBusy+0x58>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6eda:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6ede:	3301      	adds	r3, #1
    6ee0:	f88d 300e 	strb.w	r3, [sp, #14]
    6ee4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6ee8:	2b00      	cmp	r3, #0
    6eea:	d0df      	beq.n	6eac <Can_IsControllersBusy+0x18>
            }
        }
    }

    return bCtrlBusy;
    6eec:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6ef0:	4618      	mov	r0, r3
    6ef2:	b004      	add	sp, #16
    6ef4:	4770      	bx	lr
    6ef6:	bf00      	nop
    6ef8:	1fff8d0c 	.word	0x1fff8d0c
    6efc:	1fff8d08 	.word	0x1fff8d08

00006f00 <Can_InitControllers>:

static void Can_InitControllers(uint32 u32CoreId)
{
    6f00:	b500      	push	{lr}
    6f02:	b085      	sub	sp, #20
    6f04:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    6f06:	2300      	movs	r3, #0
    6f08:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    6f0c:	2300      	movs	r3, #0
    6f0e:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6f12:	2300      	movs	r3, #0
    6f14:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6f16:	2300      	movs	r3, #0
    6f18:	f88d 300e 	strb.w	r3, [sp, #14]
    6f1c:	e035      	b.n	6f8a <Can_InitControllers+0x8a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    6f1e:	4a30      	ldr	r2, [pc, #192]	; (6fe0 <Can_InitControllers+0xe0>)
    6f20:	9b01      	ldr	r3, [sp, #4]
    6f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f26:	695a      	ldr	r2, [r3, #20]
    6f28:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f2c:	009b      	lsls	r3, r3, #2
    6f2e:	4413      	add	r3, r2
    6f30:	681b      	ldr	r3, [r3, #0]
    6f32:	2b00      	cmp	r3, #0
    6f34:	d024      	beq.n	6f80 <Can_InitControllers+0x80>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    6f36:	4a2a      	ldr	r2, [pc, #168]	; (6fe0 <Can_InitControllers+0xe0>)
    6f38:	9b01      	ldr	r3, [sp, #4]
    6f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f3e:	695a      	ldr	r2, [r3, #20]
    6f40:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f44:	009b      	lsls	r3, r3, #2
    6f46:	4413      	add	r3, r2
    6f48:	681b      	ldr	r3, [r3, #0]
    6f4a:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    6f4c:	9b02      	ldr	r3, [sp, #8]
    6f4e:	7a1b      	ldrb	r3, [r3, #8]
    6f50:	2b00      	cmp	r3, #0
    6f52:	d015      	beq.n	6f80 <Can_InitControllers+0x80>
                */
            #if ((CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) || (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON))
                Can_au16BaudrateIDConfig[u8ControllerID] = Can_pController->Can_u16DefaultBaudrateID;
            #endif
                /* Reset interrupt level to default value after re-init */
                Can_au8DisableInterruptLevel[u8ControllerID] = 0U;
    6f54:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f58:	4a22      	ldr	r2, [pc, #136]	; (6fe4 <Can_InitControllers+0xe4>)
    6f5a:	2100      	movs	r1, #0
    6f5c:	54d1      	strb	r1, [r2, r3]
            #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
                Can_apxCtrlConfigIcomIndex[u8ControllerID] = NULL_PTR;
            #endif
                /* Init the controller */
                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_Init(Can_pController))
    6f5e:	9802      	ldr	r0, [sp, #8]
    6f60:	f001 f830 	bl	7fc4 <Can_43_FLEXCAN_Ipw_Init>
    6f64:	4603      	mov	r3, r0
    6f66:	2b00      	cmp	r3, #0
    6f68:	d106      	bne.n	6f78 <Can_InitControllers+0x78>
                {
                    Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    6f6a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f6e:	4a1e      	ldr	r2, [pc, #120]	; (6fe8 <Can_InitControllers+0xe8>)
    6f70:	2102      	movs	r1, #2
    6f72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    6f76:	e003      	b.n	6f80 <Can_InitControllers+0x80>
                else
                {
                    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_INIT_FAILED);
                    #endif
                    bCtrlBusy = TRUE;
    6f78:	2301      	movs	r3, #1
    6f7a:	f88d 300f 	strb.w	r3, [sp, #15]
                    break;
    6f7e:	e008      	b.n	6f92 <Can_InitControllers+0x92>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6f80:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f84:	3301      	adds	r3, #1
    6f86:	f88d 300e 	strb.w	r3, [sp, #14]
    6f8a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f8e:	2b00      	cmp	r3, #0
    6f90:	d0c5      	beq.n	6f1e <Can_InitControllers+0x1e>
    }
    /*
    *  [SWS_Can_00246] After initializing all controllers inside the HW Unit, the function Can_Init
    *   shall change the module state to CAN_READY.
    */
    if (TRUE == bCtrlBusy)
    6f92:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6f96:	2b00      	cmp	r3, #0
    6f98:	d01e      	beq.n	6fd8 <Can_InitControllers+0xd8>
    {
        /* Init failed due to one or more controllers failed, reset status of all  core's current controllers */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6f9a:	2300      	movs	r3, #0
    6f9c:	f88d 300e 	strb.w	r3, [sp, #14]
    6fa0:	e016      	b.n	6fd0 <Can_InitControllers+0xd0>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    6fa2:	4a0f      	ldr	r2, [pc, #60]	; (6fe0 <Can_InitControllers+0xe0>)
    6fa4:	9b01      	ldr	r3, [sp, #4]
    6fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6faa:	695a      	ldr	r2, [r3, #20]
    6fac:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6fb0:	009b      	lsls	r3, r3, #2
    6fb2:	4413      	add	r3, r2
    6fb4:	681b      	ldr	r3, [r3, #0]
    6fb6:	2b00      	cmp	r3, #0
    6fb8:	d005      	beq.n	6fc6 <Can_InitControllers+0xc6>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    6fba:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6fbe:	4a0a      	ldr	r2, [pc, #40]	; (6fe8 <Can_InitControllers+0xe8>)
    6fc0:	2100      	movs	r1, #0
    6fc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6fc6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6fca:	3301      	adds	r3, #1
    6fcc:	f88d 300e 	strb.w	r3, [sp, #14]
    6fd0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6fd4:	2b00      	cmp	r3, #0
    6fd6:	d0e4      	beq.n	6fa2 <Can_InitControllers+0xa2>
    else
    {
        Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_READY;
    }
#endif
}
    6fd8:	bf00      	nop
    6fda:	b005      	add	sp, #20
    6fdc:	f85d fb04 	ldr.w	pc, [sp], #4
    6fe0:	1fff8d0c 	.word	0x1fff8d0c
    6fe4:	1fff8d04 	.word	0x1fff8d04
    6fe8:	1fff8d08 	.word	0x1fff8d08

00006fec <Can_DeInitControllers>:
    return bResult;
}
#endif

static void Can_DeInitControllers(uint32 u32CoreId)
{
    6fec:	b500      	push	{lr}
    6fee:	b085      	sub	sp, #20
    6ff0:	9001      	str	r0, [sp, #4]
    uint8 u8ControllerID = 0U;
    6ff2:	2300      	movs	r3, #0
    6ff4:	f88d 300f 	strb.w	r3, [sp, #15]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6ff8:	2300      	movs	r3, #0
    6ffa:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6ffc:	2300      	movs	r3, #0
    6ffe:	f88d 300f 	strb.w	r3, [sp, #15]
    7002:	e028      	b.n	7056 <Can_DeInitControllers+0x6a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    7004:	4a18      	ldr	r2, [pc, #96]	; (7068 <Can_DeInitControllers+0x7c>)
    7006:	9b01      	ldr	r3, [sp, #4]
    7008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    700c:	695a      	ldr	r2, [r3, #20]
    700e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7012:	009b      	lsls	r3, r3, #2
    7014:	4413      	add	r3, r2
    7016:	681b      	ldr	r3, [r3, #0]
    7018:	2b00      	cmp	r3, #0
    701a:	d017      	beq.n	704c <Can_DeInitControllers+0x60>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    701c:	4a12      	ldr	r2, [pc, #72]	; (7068 <Can_DeInitControllers+0x7c>)
    701e:	9b01      	ldr	r3, [sp, #4]
    7020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7024:	695a      	ldr	r2, [r3, #20]
    7026:	f89d 300f 	ldrb.w	r3, [sp, #15]
    702a:	009b      	lsls	r3, r3, #2
    702c:	4413      	add	r3, r2
    702e:	681b      	ldr	r3, [r3, #0]
    7030:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    7032:	9b02      	ldr	r3, [sp, #8]
    7034:	7a1b      	ldrb	r3, [r3, #8]
    7036:	2b00      	cmp	r3, #0
    7038:	d008      	beq.n	704c <Can_DeInitControllers+0x60>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    703a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    703e:	4a0b      	ldr	r2, [pc, #44]	; (706c <Can_DeInitControllers+0x80>)
    7040:	2100      	movs	r1, #0
    7042:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                Can_43_FLEXCAN_Ipw_DeInit(Can_pController);
    7046:	9802      	ldr	r0, [sp, #8]
    7048:	f001 f8cc 	bl	81e4 <Can_43_FLEXCAN_Ipw_DeInit>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    704c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7050:	3301      	adds	r3, #1
    7052:	f88d 300f 	strb.w	r3, [sp, #15]
    7056:	f89d 300f 	ldrb.w	r3, [sp, #15]
    705a:	2b00      	cmp	r3, #0
    705c:	d0d2      	beq.n	7004 <Can_DeInitControllers+0x18>
            }
        }
    }
}
    705e:	bf00      	nop
    7060:	bf00      	nop
    7062:	b005      	add	sp, #20
    7064:	f85d fb04 	ldr.w	pc, [sp], #4
    7068:	1fff8d0c 	.word	0x1fff8d0c
    706c:	1fff8d08 	.word	0x1fff8d08

00007070 <Can_43_FLEXCAN_Init>:
* @api
*/

/* implements     Can_Init_Activity */
void Can_43_FLEXCAN_Init(const Can_43_FLEXCAN_ConfigType * Config)
{
    7070:	b500      	push	{lr}
    7072:	b085      	sub	sp, #20
    7074:	9001      	str	r0, [sp, #4]
    uint32 u32CoreId = 0U;
    7076:	2300      	movs	r3, #0
    7078:	9303      	str	r3, [sp, #12]
    boolean bCtrlBusy = FALSE;
    707a:	2300      	movs	r3, #0
    707c:	f88d 300b 	strb.w	r3, [sp, #11]
#if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
    boolean bValidCoreID = FALSE;
#endif

    u32CoreId = Can_GetCoreID();
    7080:	2300      	movs	r3, #0
    7082:	9303      	str	r3, [sp, #12]
        #if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
            if (u32CoreId == Config->Can_u32CoreID)
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Copy pointer to current Can Driver configuration. */
                Can_apxConfig[u32CoreId] = Config;
    7084:	490c      	ldr	r1, [pc, #48]	; (70b8 <Can_43_FLEXCAN_Init+0x48>)
    7086:	9b03      	ldr	r3, [sp, #12]
    7088:	9a01      	ldr	r2, [sp, #4]
    708a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (TRUE == bValidCoreID)
            {
#endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Fault Injection point to allow to test SWS_Can_00408 */
                MCAL_FAULT_INJECTION_POINT(CAN_FIP_1_CHANGE_DRIVER_TO_UNINITIALIZED);
                bCtrlBusy = Can_IsControllersBusy(u32CoreId);
    708e:	9803      	ldr	r0, [sp, #12]
    7090:	f7ff ff00 	bl	6e94 <Can_IsControllersBusy>
    7094:	4603      	mov	r3, r0
    7096:	f88d 300b 	strb.w	r3, [sp, #11]
                if (FALSE == bCtrlBusy)
    709a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    709e:	f083 0301 	eor.w	r3, r3, #1
    70a2:	b2db      	uxtb	r3, r3
    70a4:	2b00      	cmp	r3, #0
    70a6:	d002      	beq.n	70ae <Can_43_FLEXCAN_Init+0x3e>
                {
                    Can_InitControllers(u32CoreId);
    70a8:	9803      	ldr	r0, [sp, #12]
    70aa:	f7ff ff29 	bl	6f00 <Can_InitControllers>

#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif /* (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) */
}
    70ae:	bf00      	nop
    70b0:	b005      	add	sp, #20
    70b2:	f85d fb04 	ldr.w	pc, [sp], #4
    70b6:	bf00      	nop
    70b8:	1fff8d0c 	.word	0x1fff8d0c

000070bc <Can_43_FLEXCAN_DeInit>:
* @post           Can_DeInit shall de-initialize all the controllers and set the driver in UNINIT state.
*
*/
/* implements     Can_DeInit_Activity */
void Can_43_FLEXCAN_DeInit(void)
{
    70bc:	b500      	push	{lr}
    70be:	b083      	sub	sp, #12
    /* Variable for indexing the controllers. */
    uint8 u8ControllerID = 0U;
    70c0:	2300      	movs	r3, #0
    70c2:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean bCtrlBusy = FALSE;
    70c6:	2300      	movs	r3, #0
    70c8:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 u32CoreId = 0U;
    70cc:	2300      	movs	r3, #0
    70ce:	9300      	str	r3, [sp, #0]

    u32CoreId = Can_GetCoreID();
    70d0:	2300      	movs	r3, #0
    70d2:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Loop through all Can controllers configured based CanControllerId parameter. */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    70d4:	2300      	movs	r3, #0
    70d6:	f88d 3007 	strb.w	r3, [sp, #7]
    70da:	e01b      	b.n	7114 <Can_43_FLEXCAN_DeInit+0x58>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    70dc:	4a19      	ldr	r2, [pc, #100]	; (7144 <Can_43_FLEXCAN_DeInit+0x88>)
    70de:	9b00      	ldr	r3, [sp, #0]
    70e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70e4:	695a      	ldr	r2, [r3, #20]
    70e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    70ea:	009b      	lsls	r3, r3, #2
    70ec:	4413      	add	r3, r2
    70ee:	681b      	ldr	r3, [r3, #0]
    70f0:	2b00      	cmp	r3, #0
    70f2:	d00a      	beq.n	710a <Can_43_FLEXCAN_DeInit+0x4e>
            {
                if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    70f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    70f8:	4a13      	ldr	r2, [pc, #76]	; (7148 <Can_43_FLEXCAN_DeInit+0x8c>)
    70fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70fe:	2b01      	cmp	r3, #1
    7100:	d103      	bne.n	710a <Can_43_FLEXCAN_DeInit+0x4e>
                    *   if any of the CAN controllers is in state STARTED.
                    */
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_DEINIT, (uint8)CAN_43_FLEXCAN_E_TRANSITION);
                #endif
                    /* Controller is busy */
                    bCtrlBusy =  TRUE;
    7102:	2301      	movs	r3, #1
    7104:	f88d 3006 	strb.w	r3, [sp, #6]
                    /* Skipping the loop if any of Can Controller is in state STARTED */
                    break;
    7108:	e008      	b.n	711c <Can_43_FLEXCAN_DeInit+0x60>
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    710a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    710e:	3301      	adds	r3, #1
    7110:	f88d 3007 	strb.w	r3, [sp, #7]
    7114:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7118:	2b00      	cmp	r3, #0
    711a:	d0df      	beq.n	70dc <Can_43_FLEXCAN_DeInit+0x20>
                }
            }
        }
        /* All Controllers are not busy */
        if (FALSE == bCtrlBusy)
    711c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7120:	f083 0301 	eor.w	r3, r3, #1
    7124:	b2db      	uxtb	r3, r3
    7126:	2b00      	cmp	r3, #0
    7128:	d007      	beq.n	713a <Can_43_FLEXCAN_DeInit+0x7e>
            *   [SWS_Can_91010] The function Can_DeInit shall change the module state to
            *   CAN_UNINIT before de-initializing all controllers inside the HW unit
            */
            Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_UNINIT;
        #endif
            Can_DeInitControllers(u32CoreId);
    712a:	9800      	ldr	r0, [sp, #0]
    712c:	f7ff ff5e 	bl	6fec <Can_DeInitControllers>
            Can_apxConfig[u32CoreId] = NULL_PTR;
    7130:	4a04      	ldr	r2, [pc, #16]	; (7144 <Can_43_FLEXCAN_DeInit+0x88>)
    7132:	9b00      	ldr	r3, [sp, #0]
    7134:	2100      	movs	r1, #0
    7136:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
}
    713a:	bf00      	nop
    713c:	b003      	add	sp, #12
    713e:	f85d fb04 	ldr.w	pc, [sp], #4
    7142:	bf00      	nop
    7144:	1fff8d0c 	.word	0x1fff8d0c
    7148:	1fff8d08 	.word	0x1fff8d08

0000714c <Can_43_FLEXCAN_SetBaudrate>:
    Std_ReturnType Can_43_FLEXCAN_SetBaudrate
    (
        uint8 Controller,
        uint16 BaudRateConfigID
    )
    {
    714c:	b500      	push	{lr}
    714e:	b087      	sub	sp, #28
    7150:	4603      	mov	r3, r0
    7152:	460a      	mov	r2, r1
    7154:	f88d 3007 	strb.w	r3, [sp, #7]
    7158:	4613      	mov	r3, r2
    715a:	f8ad 3004 	strh.w	r3, [sp, #4]
        /* Returns the result of CAN set baudrate */
        Std_ReturnType eRetVal = (Std_ReturnType)E_NOT_OK;
    715e:	2301      	movs	r3, #1
    7160:	f88d 3017 	strb.w	r3, [sp, #23]
        uint32 u32CoreId = 0U;
    7164:	2300      	movs	r3, #0
    7166:	9304      	str	r3, [sp, #16]
        const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7168:	2300      	movs	r3, #0
    716a:	9303      	str	r3, [sp, #12]

        u32CoreId = Can_GetCoreID();
    716c:	2300      	movs	r3, #0
    716e:	9304      	str	r3, [sp, #16]
    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_BAUDRATE))
        {
    #endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    7170:	4a10      	ldr	r2, [pc, #64]	; (71b4 <Can_43_FLEXCAN_SetBaudrate+0x68>)
    7172:	9b04      	ldr	r3, [sp, #16]
    7174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7178:	695a      	ldr	r2, [r3, #20]
    717a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    717e:	009b      	lsls	r3, r3, #2
    7180:	4413      	add	r3, r2
    7182:	681b      	ldr	r3, [r3, #0]
    7184:	9303      	str	r3, [sp, #12]
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_BAUDRATE, CAN_43_FLEXCAN_E_PARAM_BAUDRATE);
                    }
                    else
                    {
                #endif
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    7186:	f89d 3007 	ldrb.w	r3, [sp, #7]
    718a:	4a0b      	ldr	r2, [pc, #44]	; (71b8 <Can_43_FLEXCAN_SetBaudrate+0x6c>)
    718c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7190:	2b02      	cmp	r3, #2
    7192:	d108      	bne.n	71a6 <Can_43_FLEXCAN_SetBaudrate+0x5a>
                        {
                            eRetVal = Can_43_FLEXCAN_Ipw_SetBaudrate(Can_pController, BaudRateConfigID);
    7194:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7198:	4619      	mov	r1, r3
    719a:	9803      	ldr	r0, [sp, #12]
    719c:	f001 f82e 	bl	81fc <Can_43_FLEXCAN_Ipw_SetBaudrate>
    71a0:	4603      	mov	r3, r0
    71a2:	f88d 3017 	strb.w	r3, [sp, #23]
                        }
    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    }
        }
    #endif
        return eRetVal;
    71a6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    }
    71aa:	4618      	mov	r0, r3
    71ac:	b007      	add	sp, #28
    71ae:	f85d fb04 	ldr.w	pc, [sp], #4
    71b2:	bf00      	nop
    71b4:	1fff8d0c 	.word	0x1fff8d0c
    71b8:	1fff8d08 	.word	0x1fff8d08

000071bc <Can_43_FLEXCAN_SetControllerMode>:
*
* @api
*/
/* implements     Can_SetControllerMode_Activity */
Std_ReturnType Can_43_FLEXCAN_SetControllerMode(uint8 Controller, Can_ControllerStateType Transition)
{
    71bc:	b500      	push	{lr}
    71be:	b087      	sub	sp, #28
    71c0:	4603      	mov	r3, r0
    71c2:	9100      	str	r1, [sp, #0]
    71c4:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    71c8:	2301      	movs	r3, #1
    71ca:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    71ce:	2300      	movs	r3, #0
    71d0:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    71d2:	2300      	movs	r3, #0
    71d4:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    71d6:	2300      	movs	r3, #0
    71d8:	9304      	str	r3, [sp, #16]
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE))
    {
#endif
                Can_pController = (const Can_43_FLEXCAN_ControllerConfigType *)(Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    71da:	4a47      	ldr	r2, [pc, #284]	; (72f8 <Can_43_FLEXCAN_SetControllerMode+0x13c>)
    71dc:	9b04      	ldr	r3, [sp, #16]
    71de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71e2:	695a      	ldr	r2, [r3, #20]
    71e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71e8:	009b      	lsls	r3, r3, #2
    71ea:	4413      	add	r3, r2
    71ec:	681b      	ldr	r3, [r3, #0]
    71ee:	9303      	str	r3, [sp, #12]
                /*
                *   [SWS_Can_00017] The function Can_SetControllerMode shall perform software
                *   triggered state transitions of the CAN controller State machine.
                */
                switch (Transition)
    71f0:	9b00      	ldr	r3, [sp, #0]
    71f2:	2b03      	cmp	r3, #3
    71f4:	d05d      	beq.n	72b2 <Can_43_FLEXCAN_SetControllerMode+0xf6>
    71f6:	9b00      	ldr	r3, [sp, #0]
    71f8:	2b03      	cmp	r3, #3
    71fa:	d874      	bhi.n	72e6 <Can_43_FLEXCAN_SetControllerMode+0x12a>
    71fc:	9b00      	ldr	r3, [sp, #0]
    71fe:	2b01      	cmp	r3, #1
    7200:	d003      	beq.n	720a <Can_43_FLEXCAN_SetControllerMode+0x4e>
    7202:	9b00      	ldr	r3, [sp, #0]
    7204:	2b02      	cmp	r3, #2
    7206:	d01d      	beq.n	7244 <Can_43_FLEXCAN_SetControllerMode+0x88>
                        *   has been requested, the function Can_SetControllerMode shall raise the error CAN_E_TRANSITION and
                        *   return E_NOT_OK
                        */
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_TRANSITION);
                    #endif
                        break;
    7208:	e06d      	b.n	72e6 <Can_43_FLEXCAN_SetControllerMode+0x12a>
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    720a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    720e:	4a3b      	ldr	r2, [pc, #236]	; (72fc <Can_43_FLEXCAN_SetControllerMode+0x140>)
    7210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7214:	2b02      	cmp	r3, #2
    7216:	d168      	bne.n	72ea <Can_43_FLEXCAN_SetControllerMode+0x12e>
                            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStartMode(Can_pController))
    7218:	9803      	ldr	r0, [sp, #12]
    721a:	f001 f8f5 	bl	8408 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>
    721e:	4603      	mov	r3, r0
    7220:	2b00      	cmp	r3, #0
    7222:	d162      	bne.n	72ea <Can_43_FLEXCAN_SetControllerMode+0x12e>
                                Can_eControllerState[Controller] = CAN_CS_STARTED;
    7224:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7228:	4a34      	ldr	r2, [pc, #208]	; (72fc <Can_43_FLEXCAN_SetControllerMode+0x140>)
    722a:	2101      	movs	r1, #1
    722c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STARTED);
    7230:	9b03      	ldr	r3, [sp, #12]
    7232:	781b      	ldrb	r3, [r3, #0]
    7234:	2101      	movs	r1, #1
    7236:	4618      	mov	r0, r3
    7238:	f008 f9a6 	bl	f588 <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    723c:	2300      	movs	r3, #0
    723e:	f88d 3017 	strb.w	r3, [sp, #23]
                        break;
    7242:	e052      	b.n	72ea <Can_43_FLEXCAN_SetControllerMode+0x12e>
                        switch (Can_eControllerState[Controller])
    7244:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7248:	4a2c      	ldr	r2, [pc, #176]	; (72fc <Can_43_FLEXCAN_SetControllerMode+0x140>)
    724a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    724e:	2b01      	cmp	r3, #1
    7250:	d005      	beq.n	725e <Can_43_FLEXCAN_SetControllerMode+0xa2>
    7252:	2b00      	cmp	r3, #0
    7254:	d029      	beq.n	72aa <Can_43_FLEXCAN_SetControllerMode+0xee>
    7256:	3b02      	subs	r3, #2
    7258:	2b01      	cmp	r3, #1
    725a:	d826      	bhi.n	72aa <Can_43_FLEXCAN_SetControllerMode+0xee>
    725c:	e015      	b.n	728a <Can_43_FLEXCAN_SetControllerMode+0xce>
                                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    725e:	9803      	ldr	r0, [sp, #12]
    7260:	f001 f940 	bl	84e4 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    7264:	4603      	mov	r3, r0
    7266:	2b00      	cmp	r3, #0
    7268:	d121      	bne.n	72ae <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                    Can_eControllerState[Controller] = CAN_CS_STOPPED;
    726a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    726e:	4a23      	ldr	r2, [pc, #140]	; (72fc <Can_43_FLEXCAN_SetControllerMode+0x140>)
    7270:	2102      	movs	r1, #2
    7272:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                    CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    7276:	9b03      	ldr	r3, [sp, #12]
    7278:	781b      	ldrb	r3, [r3, #0]
    727a:	2102      	movs	r1, #2
    727c:	4618      	mov	r0, r3
    727e:	f008 f983 	bl	f588 <CanIf_ControllerModeIndication>
                                    eRetVal = E_OK;
    7282:	2300      	movs	r3, #0
    7284:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    7288:	e011      	b.n	72ae <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                Can_eControllerState[Controller] = CAN_CS_STOPPED;
    728a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    728e:	4a1b      	ldr	r2, [pc, #108]	; (72fc <Can_43_FLEXCAN_SetControllerMode+0x140>)
    7290:	2102      	movs	r1, #2
    7292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    7296:	9b03      	ldr	r3, [sp, #12]
    7298:	781b      	ldrb	r3, [r3, #0]
    729a:	2102      	movs	r1, #2
    729c:	4618      	mov	r0, r3
    729e:	f008 f973 	bl	f588 <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    72a2:	2300      	movs	r3, #0
    72a4:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    72a8:	e002      	b.n	72b0 <Can_43_FLEXCAN_SetControllerMode+0xf4>
                                break;
    72aa:	bf00      	nop
    72ac:	e01e      	b.n	72ec <Can_43_FLEXCAN_SetControllerMode+0x130>
                                break;
    72ae:	bf00      	nop
                        break;
    72b0:	e01c      	b.n	72ec <Can_43_FLEXCAN_SetControllerMode+0x130>
                        switch (Can_eControllerState[Controller])
    72b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    72b6:	4a11      	ldr	r2, [pc, #68]	; (72fc <Can_43_FLEXCAN_SetControllerMode+0x140>)
    72b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72bc:	3b02      	subs	r3, #2
    72be:	2b01      	cmp	r3, #1
    72c0:	d80f      	bhi.n	72e2 <Can_43_FLEXCAN_SetControllerMode+0x126>
                                Can_eControllerState[Controller] = CAN_CS_SLEEP;
    72c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    72c6:	4a0d      	ldr	r2, [pc, #52]	; (72fc <Can_43_FLEXCAN_SetControllerMode+0x140>)
    72c8:	2103      	movs	r1, #3
    72ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_SLEEP);
    72ce:	9b03      	ldr	r3, [sp, #12]
    72d0:	781b      	ldrb	r3, [r3, #0]
    72d2:	2103      	movs	r1, #3
    72d4:	4618      	mov	r0, r3
    72d6:	f008 f957 	bl	f588 <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    72da:	2300      	movs	r3, #0
    72dc:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    72e0:	e000      	b.n	72e4 <Can_43_FLEXCAN_SetControllerMode+0x128>
                                break;
    72e2:	bf00      	nop
                        break;
    72e4:	e002      	b.n	72ec <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    72e6:	bf00      	nop
    72e8:	e000      	b.n	72ec <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    72ea:	bf00      	nop
                    }
                }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eRetVal;
    72ec:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    72f0:	4618      	mov	r0, r3
    72f2:	b007      	add	sp, #28
    72f4:	f85d fb04 	ldr.w	pc, [sp], #4
    72f8:	1fff8d0c 	.word	0x1fff8d0c
    72fc:	1fff8d08 	.word	0x1fff8d08

00007300 <Can_43_FLEXCAN_DisableControllerInterrupts>:
*
* @api
*/
/* implements     Can_DisableControllerInterrupts_Activity */
void Can_43_FLEXCAN_DisableControllerInterrupts(uint8 Controller)
{
    7300:	b500      	push	{lr}
    7302:	b085      	sub	sp, #20
    7304:	4603      	mov	r3, r0
    7306:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    730a:	2300      	movs	r3, #0
    730c:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    730e:	2300      	movs	r3, #0
    7310:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    7312:	2300      	movs	r3, #0
    7314:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    7316:	4a10      	ldr	r2, [pc, #64]	; (7358 <Can_43_FLEXCAN_DisableControllerInterrupts+0x58>)
    7318:	9b03      	ldr	r3, [sp, #12]
    731a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    731e:	695a      	ldr	r2, [r3, #20]
    7320:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7324:	009b      	lsls	r3, r3, #2
    7326:	4413      	add	r3, r2
    7328:	681b      	ldr	r3, [r3, #0]
    732a:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    732c:	f005 fe0c 	bl	cf48 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_au8DisableInterruptLevel[Controller] += 1U;
    7330:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7334:	4a09      	ldr	r2, [pc, #36]	; (735c <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    7336:	5cd2      	ldrb	r2, [r2, r3]
    7338:	f89d 3007 	ldrb.w	r3, [sp, #7]
    733c:	3201      	adds	r2, #1
    733e:	b2d1      	uxtb	r1, r2
    7340:	4a06      	ldr	r2, [pc, #24]	; (735c <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    7342:	54d1      	strb	r1, [r2, r3]
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    7344:	f005 fe2c 	bl	cfa0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(Can_pController);
    7348:	9802      	ldr	r0, [sp, #8]
    734a:	f001 f949 	bl	85e0 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    734e:	bf00      	nop
    7350:	b005      	add	sp, #20
    7352:	f85d fb04 	ldr.w	pc, [sp], #4
    7356:	bf00      	nop
    7358:	1fff8d0c 	.word	0x1fff8d0c
    735c:	1fff8d04 	.word	0x1fff8d04

00007360 <Can_43_FLEXCAN_EnableControllerInterrupts>:
*
* @api
*/
/* implements     Can_EnableControllerInterrupts_Activity */
void Can_43_FLEXCAN_EnableControllerInterrupts(uint8 Controller)
{
    7360:	b500      	push	{lr}
    7362:	b085      	sub	sp, #20
    7364:	4603      	mov	r3, r0
    7366:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    736a:	2300      	movs	r3, #0
    736c:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    736e:	2300      	movs	r3, #0
    7370:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    7372:	2300      	movs	r3, #0
    7374:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    7376:	4a16      	ldr	r2, [pc, #88]	; (73d0 <Can_43_FLEXCAN_EnableControllerInterrupts+0x70>)
    7378:	9b03      	ldr	r3, [sp, #12]
    737a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    737e:	695a      	ldr	r2, [r3, #20]
    7380:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7384:	009b      	lsls	r3, r3, #2
    7386:	4413      	add	r3, r2
    7388:	681b      	ldr	r3, [r3, #0]
    738a:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    738c:	f005 fe2e 	bl	cfec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>
                if (Can_au8DisableInterruptLevel[Controller] > 0U)
    7390:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7394:	4a0f      	ldr	r2, [pc, #60]	; (73d4 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    7396:	5cd3      	ldrb	r3, [r2, r3]
    7398:	2b00      	cmp	r3, #0
    739a:	d009      	beq.n	73b0 <Can_43_FLEXCAN_EnableControllerInterrupts+0x50>
                {
                    Can_au8DisableInterruptLevel[Controller] -= 1U;
    739c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73a0:	4a0c      	ldr	r2, [pc, #48]	; (73d4 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    73a2:	5cd2      	ldrb	r2, [r2, r3]
    73a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73a8:	3a01      	subs	r2, #1
    73aa:	b2d1      	uxtb	r1, r2
    73ac:	4a09      	ldr	r2, [pc, #36]	; (73d4 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    73ae:	54d1      	strb	r1, [r2, r3]
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    73b0:	f005 fe48 	bl	d044 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>

                if (0U == Can_au8DisableInterruptLevel[Controller])
    73b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73b8:	4a06      	ldr	r2, [pc, #24]	; (73d4 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    73ba:	5cd3      	ldrb	r3, [r2, r3]
    73bc:	2b00      	cmp	r3, #0
    73be:	d102      	bne.n	73c6 <Can_43_FLEXCAN_EnableControllerInterrupts+0x66>
                {
                    Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(Can_pController);
    73c0:	9802      	ldr	r0, [sp, #8]
    73c2:	f001 f937 	bl	8634 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    73c6:	bf00      	nop
    73c8:	b005      	add	sp, #20
    73ca:	f85d fb04 	ldr.w	pc, [sp], #4
    73ce:	bf00      	nop
    73d0:	1fff8d0c 	.word	0x1fff8d0c
    73d4:	1fff8d04 	.word	0x1fff8d04

000073d8 <Can_43_FLEXCAN_GetControllerErrorState>:
Std_ReturnType Can_43_FLEXCAN_GetControllerErrorState
(
    uint8 ControllerId,
    Can_ErrorStateType * ErrorStatePtr
)
{
    73d8:	b500      	push	{lr}
    73da:	b087      	sub	sp, #28
    73dc:	4603      	mov	r3, r0
    73de:	9100      	str	r1, [sp, #0]
    73e0:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    73e4:	2301      	movs	r3, #1
    73e6:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 errorState = 0U;
    73ea:	2300      	movs	r3, #0
    73ec:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 u32CoreId = 0U;
    73f0:	2300      	movs	r3, #0
    73f2:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    73f4:	2300      	movs	r3, #0
    73f6:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    73f8:	2300      	movs	r3, #0
    73fa:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_ERROR_STATE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    73fc:	4a18      	ldr	r2, [pc, #96]	; (7460 <Can_43_FLEXCAN_GetControllerErrorState+0x88>)
    73fe:	9b04      	ldr	r3, [sp, #16]
    7400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7404:	695a      	ldr	r2, [r3, #20]
    7406:	f89d 3007 	ldrb.w	r3, [sp, #7]
    740a:	009b      	lsls	r3, r3, #2
    740c:	4413      	add	r3, r2
    740e:	681b      	ldr	r3, [r3, #0]
    7410:	9303      	str	r3, [sp, #12]
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerErrorState(Can_pController, &errorState);
    7412:	f10d 030b 	add.w	r3, sp, #11
    7416:	4619      	mov	r1, r3
    7418:	9803      	ldr	r0, [sp, #12]
    741a:	f001 f937 	bl	868c <Can_43_FLEXCAN_Ipw_GetControllerErrorState>
    741e:	4603      	mov	r3, r0
    7420:	f88d 3017 	strb.w	r3, [sp, #23]
                    if(eRetVal == (Std_ReturnType)E_OK)
    7424:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7428:	2b00      	cmp	r3, #0
    742a:	d112      	bne.n	7452 <Can_43_FLEXCAN_GetControllerErrorState+0x7a>
                    {
                        switch (errorState)
    742c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7430:	2b00      	cmp	r3, #0
    7432:	d002      	beq.n	743a <Can_43_FLEXCAN_GetControllerErrorState+0x62>
    7434:	2b01      	cmp	r3, #1
    7436:	d004      	beq.n	7442 <Can_43_FLEXCAN_GetControllerErrorState+0x6a>
    7438:	e007      	b.n	744a <Can_43_FLEXCAN_GetControllerErrorState+0x72>
                        {
                            case 0x00U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_ACTIVE;
    743a:	9b00      	ldr	r3, [sp, #0]
    743c:	2200      	movs	r2, #0
    743e:	601a      	str	r2, [r3, #0]
                                break;
    7440:	e008      	b.n	7454 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            case 0x01U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_PASSIVE;
    7442:	9b00      	ldr	r3, [sp, #0]
    7444:	2201      	movs	r2, #1
    7446:	601a      	str	r2, [r3, #0]
                                break;
    7448:	e004      	b.n	7454 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            default:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_BUSOFF;
    744a:	9b00      	ldr	r3, [sp, #0]
    744c:	2202      	movs	r2, #2
    744e:	601a      	str	r2, [r3, #0]
                                break;
    7450:	e000      	b.n	7454 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                        }
                    }
    7452:	bf00      	nop
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                }
    }
#endif
    return eRetVal;
    7454:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7458:	4618      	mov	r0, r3
    745a:	b007      	add	sp, #28
    745c:	f85d fb04 	ldr.w	pc, [sp], #4
    7460:	1fff8d0c 	.word	0x1fff8d0c

00007464 <Can_43_FLEXCAN_GetControllerMode>:
Std_ReturnType Can_43_FLEXCAN_GetControllerMode
(
    uint8 Controller,
    Can_ControllerStateType * ControllerModePtr
)
{
    7464:	b084      	sub	sp, #16
    7466:	4603      	mov	r3, r0
    7468:	9100      	str	r1, [sp, #0]
    746a:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    746e:	2301      	movs	r3, #1
    7470:	f88d 300f 	strb.w	r3, [sp, #15]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    *ControllerModePtr = Can_eControllerState[Controller];
    7474:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7478:	4a06      	ldr	r2, [pc, #24]	; (7494 <Can_43_FLEXCAN_GetControllerMode+0x30>)
    747a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    747e:	9b00      	ldr	r3, [sp, #0]
    7480:	601a      	str	r2, [r3, #0]
                    eRetVal = E_OK;
    7482:	2300      	movs	r3, #0
    7484:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    7488:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    748c:	4618      	mov	r0, r3
    748e:	b004      	add	sp, #16
    7490:	4770      	bx	lr
    7492:	bf00      	nop
    7494:	1fff8d08 	.word	0x1fff8d08

00007498 <Can_43_FLEXCAN_GetControllerRxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerRxErrorCounter
(
    uint8 ControllerId,
    uint8 * RxErrorCounterPtr
)
{
    7498:	b500      	push	{lr}
    749a:	b087      	sub	sp, #28
    749c:	4603      	mov	r3, r0
    749e:	9100      	str	r1, [sp, #0]
    74a0:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    74a4:	2301      	movs	r3, #1
    74a6:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    74aa:	2300      	movs	r3, #0
    74ac:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    74ae:	2300      	movs	r3, #0
    74b0:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    74b2:	2300      	movs	r3, #0
    74b4:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_RX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    74b6:	4a0c      	ldr	r2, [pc, #48]	; (74e8 <Can_43_FLEXCAN_GetControllerRxErrorCounter+0x50>)
    74b8:	9b04      	ldr	r3, [sp, #16]
    74ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74be:	695a      	ldr	r2, [r3, #20]
    74c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    74c4:	009b      	lsls	r3, r3, #2
    74c6:	4413      	add	r3, r2
    74c8:	681b      	ldr	r3, [r3, #0]
    74ca:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00515]: When the API Can_GetControllerRxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Rx error counter
                    *   register of Can Controller and shall return the Rx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(Can_pController, RxErrorCounterPtr);
    74cc:	9900      	ldr	r1, [sp, #0]
    74ce:	9803      	ldr	r0, [sp, #12]
    74d0:	f001 f907 	bl	86e2 <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>
    74d4:	4603      	mov	r3, r0
    74d6:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    74da:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    74de:	4618      	mov	r0, r3
    74e0:	b007      	add	sp, #28
    74e2:	f85d fb04 	ldr.w	pc, [sp], #4
    74e6:	bf00      	nop
    74e8:	1fff8d0c 	.word	0x1fff8d0c

000074ec <Can_43_FLEXCAN_GetControllerTxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerTxErrorCounter
(
    uint8 ControllerId,
    uint8 * TxErrorCounterPtr
)
{
    74ec:	b500      	push	{lr}
    74ee:	b087      	sub	sp, #28
    74f0:	4603      	mov	r3, r0
    74f2:	9100      	str	r1, [sp, #0]
    74f4:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    74f8:	2301      	movs	r3, #1
    74fa:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    74fe:	2300      	movs	r3, #0
    7500:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7502:	2300      	movs	r3, #0
    7504:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    7506:	2300      	movs	r3, #0
    7508:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_TX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    750a:	4a0c      	ldr	r2, [pc, #48]	; (753c <Can_43_FLEXCAN_GetControllerTxErrorCounter+0x50>)
    750c:	9b04      	ldr	r3, [sp, #16]
    750e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7512:	695a      	ldr	r2, [r3, #20]
    7514:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7518:	009b      	lsls	r3, r3, #2
    751a:	4413      	add	r3, r2
    751c:	681b      	ldr	r3, [r3, #0]
    751e:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00520]: When the API Can_GetControllerTxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Tx error counter
                    *   register of Can Controller and shall return the Tx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(Can_pController, TxErrorCounterPtr);
    7520:	9900      	ldr	r1, [sp, #0]
    7522:	9803      	ldr	r0, [sp, #12]
    7524:	f001 f8cb 	bl	86be <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>
    7528:	4603      	mov	r3, r0
    752a:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    752e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7532:	4618      	mov	r0, r3
    7534:	b007      	add	sp, #28
    7536:	f85d fb04 	ldr.w	pc, [sp], #4
    753a:	bf00      	nop
    753c:	1fff8d0c 	.word	0x1fff8d0c

00007540 <Can_43_FLEXCAN_Write>:
Std_ReturnType Can_43_FLEXCAN_Write
(
    Can_HwHandleType Hth,
    const Can_PduType * PduInfo
)
{
    7540:	b500      	push	{lr}
    7542:	b089      	sub	sp, #36	; 0x24
    7544:	4603      	mov	r3, r0
    7546:	9100      	str	r1, [sp, #0]
    7548:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType eRetVal = E_NOT_OK;
    754c:	2301      	movs	r3, #1
    754e:	f88d 301f 	strb.w	r3, [sp, #31]
    uint8 u8ControllerID = 0U;
    7552:	2300      	movs	r3, #0
    7554:	f88d 301e 	strb.w	r3, [sp, #30]
    uint32 u32CoreId = 0U;
    7558:	2300      	movs	r3, #0
    755a:	9306      	str	r3, [sp, #24]
    Can_HwHandleType HwObjectID = 0U;
    755c:	2300      	movs	r3, #0
    755e:	f8ad 3016 	strh.w	r3, [sp, #22]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7562:	2300      	movs	r3, #0
    7564:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    7566:	2300      	movs	r3, #0
    7568:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    756a:	2300      	movs	r3, #0
    756c:	9306      	str	r3, [sp, #24]
    HwObjectID = Hth;
    756e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7572:	f8ad 3016 	strh.w	r3, [sp, #22]
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_WRITE, CAN_43_FLEXCAN_E_PARAM_POINTER);
            }
            else
            {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pHwObjIDToCtrlIDMap[HwObjectID];
    7576:	4a1d      	ldr	r2, [pc, #116]	; (75ec <Can_43_FLEXCAN_Write+0xac>)
    7578:	9b06      	ldr	r3, [sp, #24]
    757a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    757e:	68da      	ldr	r2, [r3, #12]
    7580:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7584:	4413      	add	r3, r2
    7586:	781b      	ldrb	r3, [r3, #0]
    7588:	f88d 301e 	strb.w	r3, [sp, #30]
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    758c:	4a17      	ldr	r2, [pc, #92]	; (75ec <Can_43_FLEXCAN_Write+0xac>)
    758e:	9b06      	ldr	r3, [sp, #24]
    7590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7594:	695a      	ldr	r2, [r3, #20]
    7596:	f89d 301e 	ldrb.w	r3, [sp, #30]
    759a:	009b      	lsls	r3, r3, #2
    759c:	4413      	add	r3, r2
    759e:	681b      	ldr	r3, [r3, #0]
    75a0:	9304      	str	r3, [sp, #16]
                if (NULL_PTR != Can_pController)
    75a2:	9b04      	ldr	r3, [sp, #16]
    75a4:	2b00      	cmp	r3, #0
    75a6:	d01b      	beq.n	75e0 <Can_43_FLEXCAN_Write+0xa0>
                {
                    Can_pHwObject = &((Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID]);
    75a8:	4a10      	ldr	r2, [pc, #64]	; (75ec <Can_43_FLEXCAN_Write+0xac>)
    75aa:	9b06      	ldr	r3, [sp, #24]
    75ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75b0:	6919      	ldr	r1, [r3, #16]
    75b2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    75b6:	4613      	mov	r3, r2
    75b8:	00db      	lsls	r3, r3, #3
    75ba:	4413      	add	r3, r2
    75bc:	009b      	lsls	r3, r3, #2
    75be:	440b      	add	r3, r1
    75c0:	9303      	str	r3, [sp, #12]
                #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    if ((TRUE == Can_ValidatePdu(Can_pController, Can_pHwObject, PduInfo)) && (CAN_CS_STARTED == Can_eControllerState[u8ControllerID]))
                #else
                    /* avoid unexpected behaviour when accessing to RAM */
                    if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    75c2:	f89d 301e 	ldrb.w	r3, [sp, #30]
    75c6:	4a0a      	ldr	r2, [pc, #40]	; (75f0 <Can_43_FLEXCAN_Write+0xb0>)
    75c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75cc:	2b01      	cmp	r3, #1
    75ce:	d107      	bne.n	75e0 <Can_43_FLEXCAN_Write+0xa0>
                            eRetVal = CAN_BUSY;
                        }
                        else
                        {
                    #endif
                            eRetVal = Can_43_FLEXCAN_Ipw_Write(Can_pController, Can_pHwObject, PduInfo);
    75d0:	9a00      	ldr	r2, [sp, #0]
    75d2:	9903      	ldr	r1, [sp, #12]
    75d4:	9804      	ldr	r0, [sp, #16]
    75d6:	f001 f896 	bl	8706 <Can_43_FLEXCAN_Ipw_Write>
    75da:	4603      	mov	r3, r0
    75dc:	f88d 301f 	strb.w	r3, [sp, #31]
                }
            #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
            }
    }
#endif
    return eRetVal;
    75e0:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    75e4:	4618      	mov	r0, r3
    75e6:	b009      	add	sp, #36	; 0x24
    75e8:	f85d fb04 	ldr.w	pc, [sp], #4
    75ec:	1fff8d0c 	.word	0x1fff8d0c
    75f0:	1fff8d08 	.word	0x1fff8d08

000075f4 <Can_43_FLEXCAN_MainFunction_Write>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON */
    }
    75f4:	bf00      	nop
    75f6:	4770      	bx	lr

000075f8 <Can_43_FLEXCAN_MainFunction_Read>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON */
    }
    75f8:	bf00      	nop
    75fa:	4770      	bx	lr

000075fc <Can_43_FLEXCAN_MainFunction_BusOff>:
            }
            u8ControllerID++;
        }
    }
#endif /* CAN_43_FLEXCAN_BUSOFF_POLLING_SUPPORT == STD_ON */
}
    75fc:	bf00      	nop
    75fe:	4770      	bx	lr

00007600 <Can_43_FLEXCAN_MainFunction_Mode>:
*
* @api
*/
/* implements     Can_MainFunction_Mode_Activity */
void Can_43_FLEXCAN_MainFunction_Mode(void)
{
    7600:	b500      	push	{lr}
    7602:	b085      	sub	sp, #20
    uint8 u8ControllerID = 0U;
    7604:	2300      	movs	r3, #0
    7606:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32CoreId = 0U;
    760a:	2300      	movs	r3, #0
    760c:	9302      	str	r3, [sp, #8]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    760e:	2300      	movs	r3, #0
    7610:	9301      	str	r3, [sp, #4]

    u32CoreId = Can_GetCoreID();
    7612:	2300      	movs	r3, #0
    7614:	9302      	str	r3, [sp, #8]
    if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    7616:	4a17      	ldr	r2, [pc, #92]	; (7674 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    7618:	9b02      	ldr	r3, [sp, #8]
    761a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    761e:	2b00      	cmp	r3, #0
    7620:	d024      	beq.n	766c <Can_43_FLEXCAN_MainFunction_Mode+0x6c>
    {
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    7622:	e01f      	b.n	7664 <Can_43_FLEXCAN_MainFunction_Mode+0x64>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    7624:	4a13      	ldr	r2, [pc, #76]	; (7674 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    7626:	9b02      	ldr	r3, [sp, #8]
    7628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    762c:	695a      	ldr	r2, [r3, #20]
    762e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7632:	009b      	lsls	r3, r3, #2
    7634:	4413      	add	r3, r2
    7636:	681b      	ldr	r3, [r3, #0]
    7638:	9301      	str	r3, [sp, #4]
            if (NULL_PTR != Can_pController)
    763a:	9b01      	ldr	r3, [sp, #4]
    763c:	2b00      	cmp	r3, #0
    763e:	d00c      	beq.n	765a <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
            {
                if (TRUE == Can_pController->Can_bActivation)
    7640:	9b01      	ldr	r3, [sp, #4]
    7642:	7a1b      	ldrb	r3, [r3, #8]
    7644:	2b00      	cmp	r3, #0
    7646:	d008      	beq.n	765a <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
                {
                    Can_43_FLEXCAN_Ipw_MainFunction_Mode(Can_pController, &Can_eControllerState[u8ControllerID]);
    7648:	f89d 300f 	ldrb.w	r3, [sp, #15]
    764c:	009b      	lsls	r3, r3, #2
    764e:	4a0a      	ldr	r2, [pc, #40]	; (7678 <Can_43_FLEXCAN_MainFunction_Mode+0x78>)
    7650:	4413      	add	r3, r2
    7652:	4619      	mov	r1, r3
    7654:	9801      	ldr	r0, [sp, #4]
    7656:	f001 f95c 	bl	8912 <Can_43_FLEXCAN_Ipw_MainFunction_Mode>
                }
            }
            u8ControllerID++;
    765a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    765e:	3301      	adds	r3, #1
    7660:	f88d 300f 	strb.w	r3, [sp, #15]
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    7664:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7668:	2b00      	cmp	r3, #0
    766a:	d0db      	beq.n	7624 <Can_43_FLEXCAN_MainFunction_Mode+0x24>
        }
    }
}
    766c:	bf00      	nop
    766e:	b005      	add	sp, #20
    7670:	f85d fb04 	ldr.w	pc, [sp], #4
    7674:	1fff8d0c 	.word	0x1fff8d0c
    7678:	1fff8d08 	.word	0x1fff8d08

0000767c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>:
(
    uint8 u8CtrlOffset,
    uint8 u8MbIdx,
    Can_43_FLEXCAN_MbType mbType
)
{
    767c:	b500      	push	{lr}
    767e:	b087      	sub	sp, #28
    7680:	4603      	mov	r3, r0
    7682:	9200      	str	r2, [sp, #0]
    7684:	f88d 3007 	strb.w	r3, [sp, #7]
    7688:	460b      	mov	r3, r1
    768a:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 u8ControllerID = 0U;
    768e:	2300      	movs	r3, #0
    7690:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    7694:	2300      	movs	r3, #0
    7696:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7698:	2300      	movs	r3, #0
    769a:	9303      	str	r3, [sp, #12]

    MCAL_FAULT_INJECTION_POINT(CAN_FIP_2_CHANGE_DRIVER_TO_UNINITIALIZED);
    u32CoreId = Can_GetCoreID();
    769c:	2300      	movs	r3, #0
    769e:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    76a0:	4a16      	ldr	r2, [pc, #88]	; (76fc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    76a2:	9b04      	ldr	r3, [sp, #16]
    76a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76a8:	2b00      	cmp	r3, #0
    76aa:	d022      	beq.n	76f2 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    76ac:	4a13      	ldr	r2, [pc, #76]	; (76fc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    76ae:	9b04      	ldr	r3, [sp, #16]
    76b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76b4:	689a      	ldr	r2, [r3, #8]
    76b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76ba:	4413      	add	r3, r2
    76bc:	781b      	ldrb	r3, [r3, #0]
    76be:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    76c2:	4a0e      	ldr	r2, [pc, #56]	; (76fc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    76c4:	9b04      	ldr	r3, [sp, #16]
    76c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76ca:	695a      	ldr	r2, [r3, #20]
    76cc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    76d0:	009b      	lsls	r3, r3, #2
    76d2:	4413      	add	r3, r2
    76d4:	681b      	ldr	r3, [r3, #0]
    76d6:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    76d8:	9b03      	ldr	r3, [sp, #12]
    76da:	2b00      	cmp	r3, #0
    76dc:	d009      	beq.n	76f2 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
        {
            Can_43_FLEXCAN_Ipw_ProcessHwObject(Can_pController, (Can_apxConfig[u32CoreId]), u8MbIdx, mbType);
    76de:	4a07      	ldr	r2, [pc, #28]	; (76fc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    76e0:	9b04      	ldr	r3, [sp, #16]
    76e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    76e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
    76ea:	9b00      	ldr	r3, [sp, #0]
    76ec:	9803      	ldr	r0, [sp, #12]
    76ee:	f001 f946 	bl	897e <Can_43_FLEXCAN_Ipw_ProcessHwObject>
        }

    }
}
    76f2:	bf00      	nop
    76f4:	b007      	add	sp, #28
    76f6:	f85d fb04 	ldr.w	pc, [sp], #4
    76fa:	bf00      	nop
    76fc:	1fff8d0c 	.word	0x1fff8d0c

00007700 <Can_43_FLEXCAN_ProcessBusOffInterrupt>:
*/
void Can_43_FLEXCAN_ProcessBusOffInterrupt
(
    uint8 u8CtrlOffset
)
{
    7700:	b500      	push	{lr}
    7702:	b087      	sub	sp, #28
    7704:	4603      	mov	r3, r0
    7706:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 u8ControllerID = 0U;
    770a:	2300      	movs	r3, #0
    770c:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    7710:	2300      	movs	r3, #0
    7712:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7714:	2300      	movs	r3, #0
    7716:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    7718:	2300      	movs	r3, #0
    771a:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    771c:	4a19      	ldr	r2, [pc, #100]	; (7784 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    771e:	9b04      	ldr	r3, [sp, #16]
    7720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7724:	2b00      	cmp	r3, #0
    7726:	d029      	beq.n	777c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    7728:	4a16      	ldr	r2, [pc, #88]	; (7784 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    772a:	9b04      	ldr	r3, [sp, #16]
    772c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7730:	689a      	ldr	r2, [r3, #8]
    7732:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7736:	4413      	add	r3, r2
    7738:	781b      	ldrb	r3, [r3, #0]
    773a:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    773e:	4a11      	ldr	r2, [pc, #68]	; (7784 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    7740:	9b04      	ldr	r3, [sp, #16]
    7742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7746:	695a      	ldr	r2, [r3, #20]
    7748:	f89d 3017 	ldrb.w	r3, [sp, #23]
    774c:	009b      	lsls	r3, r3, #2
    774e:	4413      	add	r3, r2
    7750:	681b      	ldr	r3, [r3, #0]
    7752:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    7754:	9b03      	ldr	r3, [sp, #12]
    7756:	2b00      	cmp	r3, #0
    7758:	d010      	beq.n	777c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
        {
            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    775a:	9803      	ldr	r0, [sp, #12]
    775c:	f000 fec2 	bl	84e4 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    7760:	4603      	mov	r3, r0
    7762:	2b00      	cmp	r3, #0
    7764:	d10a      	bne.n	777c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    7766:	f89d 3017 	ldrb.w	r3, [sp, #23]
    776a:	4a07      	ldr	r2, [pc, #28]	; (7788 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x88>)
    776c:	2102      	movs	r1, #2
    776e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                CanIf_ControllerBusOff(Can_pController->Can_u8AbstControllerID);
    7772:	9b03      	ldr	r3, [sp, #12]
    7774:	781b      	ldrb	r3, [r3, #0]
    7776:	4618      	mov	r0, r3
    7778:	f007 ff0e 	bl	f598 <CanIf_ControllerBusOff>
            }
        }
    }
}
    777c:	bf00      	nop
    777e:	b007      	add	sp, #28
    7780:	f85d fb04 	ldr.w	pc, [sp], #4
    7784:	1fff8d0c 	.word	0x1fff8d0c
    7788:	1fff8d08 	.word	0x1fff8d08

0000778c <Can_Ipw_ParseData>:
    PduInfoType * CanIf_PduInfo,
    Flexcan_Ip_MsgBuffType * pReceivedDataBuffer,
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
)
{
    778c:	b500      	push	{lr}
    778e:	b085      	sub	sp, #20
    7790:	9003      	str	r0, [sp, #12]
    7792:	9102      	str	r1, [sp, #8]
    7794:	9201      	str	r2, [sp, #4]
    7796:	9300      	str	r3, [sp, #0]
    CanIf_Mailbox->CanId = pReceivedDataBuffer->msgId;
    7798:	9b01      	ldr	r3, [sp, #4]
    779a:	685a      	ldr	r2, [r3, #4]
    779c:	9b03      	ldr	r3, [sp, #12]
    779e:	601a      	str	r2, [r3, #0]
    * convert the ID to a standardized format since the Upper layer (CANIF) does not know
    * whether the received CAN frame is a Standard CAN frame or Extended CAN frame.
    * In case of an Extended CAN frame, MSB of a received CAN frame ID needs to be
    * made as ‘1’ to mark the received CAN frame as Extended.⌋
    */
    if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_IDE_MASK) != 0U)
    77a0:	9b01      	ldr	r3, [sp, #4]
    77a2:	681b      	ldr	r3, [r3, #0]
    77a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    77a8:	2b00      	cmp	r3, #0
    77aa:	d005      	beq.n	77b8 <Can_Ipw_ParseData+0x2c>
    {
        CanIf_Mailbox->CanId |= (uint32)0x80000000U;
    77ac:	9b03      	ldr	r3, [sp, #12]
    77ae:	681b      	ldr	r3, [r3, #0]
    77b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    77b4:	9b03      	ldr	r3, [sp, #12]
    77b6:	601a      	str	r2, [r3, #0]
    }

    if (CAN_RX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    77b8:	9b06      	ldr	r3, [sp, #24]
    77ba:	699b      	ldr	r3, [r3, #24]
    77bc:	2b00      	cmp	r3, #0
    77be:	d10c      	bne.n	77da <Can_Ipw_ParseData+0x4e>
    {
        /* Check if Mb Overrun */
        if ((uint32)(0x06000000U) == (pReceivedDataBuffer->cs & CAN_IPW_CS_CODE_MASK))
    77c0:	9b01      	ldr	r3, [sp, #4]
    77c2:	681b      	ldr	r3, [r3, #0]
    77c4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    77c8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    77cc:	d105      	bne.n	77da <Can_Ipw_ParseData+0x4e>
        {
            (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    77ce:	2301      	movs	r3, #1
    77d0:	2208      	movs	r2, #8
    77d2:	2100      	movs	r1, #0
    77d4:	2050      	movs	r0, #80	; 0x50
    77d6:	f007 fd3f 	bl	f258 <Det_ReportRuntimeError>
        }
    }

    /* when legacy fifo enabled, FD must be disabled */
    if (CAN_RX_LEGACY_FIFO != Can_pHwObjectConfig->Can_eReceiveType)
    77da:	9b06      	ldr	r3, [sp, #24]
    77dc:	699b      	ldr	r3, [r3, #24]
    77de:	2b01      	cmp	r3, #1
    77e0:	d009      	beq.n	77f6 <Can_Ipw_ParseData+0x6a>
    {
        /*
        * [SWS_Can_00501] ⌈ CanDrv shall indicate whether the received message is a
        * conventional CAN frame or a CAN FD frame as described in Can_IdType.⌋
        */
        if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_EDL_MASK) != 0U)
    77e2:	9b01      	ldr	r3, [sp, #4]
    77e4:	681b      	ldr	r3, [r3, #0]
    77e6:	2b00      	cmp	r3, #0
    77e8:	da05      	bge.n	77f6 <Can_Ipw_ParseData+0x6a>
        {
            CanIf_Mailbox->CanId |= (uint32)0x40000000U;
    77ea:	9b03      	ldr	r3, [sp, #12]
    77ec:	681b      	ldr	r3, [r3, #0]
    77ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    77f2:	9b03      	ldr	r3, [sp, #12]
    77f4:	601a      	str	r2, [r3, #0]
        }
    }

    if (Can_pHwObjectConfig->Can_u8PayloadLength <= pReceivedDataBuffer->dataLen)
    77f6:	9b06      	ldr	r3, [sp, #24]
    77f8:	7c1a      	ldrb	r2, [r3, #16]
    77fa:	9b01      	ldr	r3, [sp, #4]
    77fc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    7800:	429a      	cmp	r2, r3
    7802:	d805      	bhi.n	7810 <Can_Ipw_ParseData+0x84>
    {
        CanIf_PduInfo->SduLength = Can_pHwObjectConfig->Can_u8PayloadLength;
    7804:	9b06      	ldr	r3, [sp, #24]
    7806:	7c1b      	ldrb	r3, [r3, #16]
    7808:	461a      	mov	r2, r3
    780a:	9b02      	ldr	r3, [sp, #8]
    780c:	609a      	str	r2, [r3, #8]
    780e:	e005      	b.n	781c <Can_Ipw_ParseData+0x90>
    }
    else
    {
        CanIf_PduInfo->SduLength = pReceivedDataBuffer->dataLen;
    7810:	9b01      	ldr	r3, [sp, #4]
    7812:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    7816:	461a      	mov	r2, r3
    7818:	9b02      	ldr	r3, [sp, #8]
    781a:	609a      	str	r2, [r3, #8]
                                                      CanIf_PduInfo->SduLength, \
                                                      &pReceivedDataBuffer->data[0]) \
                                                     )
    {
#endif
    CanIf_Mailbox->Hoh = Can_pHwObjectConfig->Can_HwObjectID;
    781c:	9b06      	ldr	r3, [sp, #24]
    781e:	881a      	ldrh	r2, [r3, #0]
    7820:	9b03      	ldr	r3, [sp, #12]
    7822:	809a      	strh	r2, [r3, #4]
    CanIf_Mailbox->ControllerId = Can_pControllerConfig->Can_u8AbstControllerID;
    7824:	9b00      	ldr	r3, [sp, #0]
    7826:	781a      	ldrb	r2, [r3, #0]
    7828:	9b03      	ldr	r3, [sp, #12]
    782a:	719a      	strb	r2, [r3, #6]
    CanIf_PduInfo->SduDataPtr = &pReceivedDataBuffer->data[0];
    782c:	9b01      	ldr	r3, [sp, #4]
    782e:	f103 0208 	add.w	r2, r3, #8
    7832:	9b02      	ldr	r3, [sp, #8]
    7834:	601a      	str	r2, [r3, #0]
    CanIf_RxIndication(CanIf_Mailbox, CanIf_PduInfo);
    7836:	9902      	ldr	r1, [sp, #8]
    7838:	9803      	ldr	r0, [sp, #12]
    783a:	f007 fe3b 	bl	f4b4 <CanIf_RxIndication>
#if (CAN_43_FLEXCAN_LPDU_CALLOUT_SUPPORT == STD_ON)
    }
#endif
}
    783e:	bf00      	nop
    7840:	b005      	add	sp, #20
    7842:	f85d fb04 	ldr.w	pc, [sp], #4

00007846 <Can_Ipw_InitLegacyFifoFilter>:

static void Can_Ipw_InitLegacyFifoFilter(const Can_43_FLEXCAN_ControllerConfigType * Can_pController, const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject)
{
    7846:	b500      	push	{lr}
    7848:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    784c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7850:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7854:	6018      	str	r0, [r3, #0]
    7856:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    785a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    785e:	6019      	str	r1, [r3, #0]
    uint8 u8FilterIdx=0U;
    7860:	2300      	movs	r3, #0
    7862:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    uint8 u8HwFilterCount = 0U;
    7866:	2300      	movs	r3, #0
    7868:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
    uint32 u32HwFilterMask = (uint32)0x00000000U;
    786c:	2300      	movs	r3, #0
    786e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    /* The max FIFO id filter affected by Rx individual masks*/
    uint8 u8FiFoFilterIndvCount = 0U;
    7872:	2300      	movs	r3, #0
    7874:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    Flexcan_Ip_RxFifoIdElementFormatType eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    7878:	2300      	movs	r3, #0
    787a:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
    /* Need to alocate a filter array with elemnets no as defined in HwObject */
    Flexcan_Ip_IdTableType RxFifoFilters[128];

    if (((Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U) <= 32U)
    787e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7882:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7886:	681b      	ldr	r3, [r3, #0]
    7888:	7c9b      	ldrb	r3, [r3, #18]
    788a:	089b      	lsrs	r3, r3, #2
    788c:	b2db      	uxtb	r3, r3
    788e:	3306      	adds	r3, #6
    7890:	2b20      	cmp	r3, #32
    7892:	d80b      	bhi.n	78ac <Can_Ipw_InitLegacyFifoFilter+0x66>
    {
        u8FiFoFilterIndvCount = (Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U;
    7894:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7898:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    789c:	681b      	ldr	r3, [r3, #0]
    789e:	7c9b      	ldrb	r3, [r3, #18]
    78a0:	089b      	lsrs	r3, r3, #2
    78a2:	b2db      	uxtb	r3, r3
    78a4:	3306      	adds	r3, #6
    78a6:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    78aa:	e002      	b.n	78b2 <Can_Ipw_InitLegacyFifoFilter+0x6c>
    }
    else
    {
        u8FiFoFilterIndvCount = 32U;
    78ac:	2320      	movs	r3, #32
    78ae:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    }
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    78b2:	2300      	movs	r3, #0
    78b4:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    78b8:	e169      	b.n	7b8e <Can_Ipw_InitLegacyFifoFilter+0x348>
    {
            if (CAN_LEGACY_FIFO_FORMAT_A == Can_pController->Can_eLegacyAcceptanceMode)
    78ba:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    78be:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    78c2:	681b      	ldr	r3, [r3, #0]
    78c4:	691b      	ldr	r3, [r3, #16]
    78c6:	2b00      	cmp	r3, #0
    78c8:	d13a      	bne.n	7940 <Can_Ipw_InitLegacyFifoFilter+0xfa>
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount;
    78ca:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    78ce:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    78d2:	681b      	ldr	r3, [r3, #0]
    78d4:	7c9b      	ldrb	r3, [r3, #18]
    78d6:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC0000000U;
    78da:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    78de:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    78e2:	2300      	movs	r3, #0
    78e4:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    78e8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    78ec:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    78f0:	681b      	ldr	r3, [r3, #0]
    78f2:	689b      	ldr	r3, [r3, #8]
    78f4:	2b00      	cmp	r3, #0
    78f6:	d011      	beq.n	791c <Can_Ipw_InitLegacyFifoFilter+0xd6>
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_EXT_SHIFT;
    78f8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    78fc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7900:	681b      	ldr	r3, [r3, #0]
    7902:	695a      	ldr	r2, [r3, #20]
    7904:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7908:	00db      	lsls	r3, r3, #3
    790a:	4413      	add	r3, r2
    790c:	685b      	ldr	r3, [r3, #4]
    790e:	005b      	lsls	r3, r3, #1
    7910:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7914:	4313      	orrs	r3, r2
    7916:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    791a:	e126      	b.n	7b6a <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_STD_SHIFT;
    791c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7920:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7924:	681b      	ldr	r3, [r3, #0]
    7926:	695a      	ldr	r2, [r3, #20]
    7928:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    792c:	00db      	lsls	r3, r3, #3
    792e:	4413      	add	r3, r2
    7930:	685b      	ldr	r3, [r3, #4]
    7932:	04db      	lsls	r3, r3, #19
    7934:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7938:	4313      	orrs	r3, r2
    793a:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    793e:	e114      	b.n	7b6a <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else if (CAN_LEGACY_FIFO_FORMAT_B == Can_pController->Can_eLegacyAcceptanceMode)
    7940:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7944:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7948:	681b      	ldr	r3, [r3, #0]
    794a:	691b      	ldr	r3, [r3, #16]
    794c:	2b01      	cmp	r3, #1
    794e:	d160      	bne.n	7a12 <Can_Ipw_InitLegacyFifoFilter+0x1cc>
            {
                u8HwFilterCount = Can_pHwObject->Can_u8HwFilterCount * 2U ;
    7950:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7954:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7958:	681b      	ldr	r3, [r3, #0]
    795a:	7c9b      	ldrb	r3, [r3, #18]
    795c:	005b      	lsls	r3, r3, #1
    795e:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC000C000U;
    7962:	f04f 23c0 	mov.w	r3, #3221274624	; 0xc000c000
    7966:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_B;
    796a:	2301      	movs	r3, #1
    796c:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    7970:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7974:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7978:	681b      	ldr	r3, [r3, #0]
    797a:	689b      	ldr	r3, [r3, #8]
    797c:	2b00      	cmp	r3, #0
    797e:	d024      	beq.n	79ca <Can_Ipw_InitLegacyFifoFilter+0x184>
                {
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT1;
    7980:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7984:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7988:	681b      	ldr	r3, [r3, #0]
    798a:	695a      	ldr	r2, [r3, #20]
    798c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7990:	011b      	lsls	r3, r3, #4
    7992:	4413      	add	r3, r2
    7994:	685b      	ldr	r3, [r3, #4]
    7996:	0bdb      	lsrs	r3, r3, #15
    7998:	041b      	lsls	r3, r3, #16
    799a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    799e:	4313      	orrs	r3, r2
    79a0:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT2;
    79a4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    79a8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    79ac:	681b      	ldr	r3, [r3, #0]
    79ae:	695a      	ldr	r2, [r3, #20]
    79b0:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    79b4:	011b      	lsls	r3, r3, #4
    79b6:	3308      	adds	r3, #8
    79b8:	4413      	add	r3, r2
    79ba:	685b      	ldr	r3, [r3, #4]
    79bc:	0bdb      	lsrs	r3, r3, #15
    79be:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    79c2:	4313      	orrs	r3, r2
    79c4:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    79c8:	e0cf      	b.n	7b6a <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT1;
    79ca:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    79ce:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    79d2:	681b      	ldr	r3, [r3, #0]
    79d4:	695a      	ldr	r2, [r3, #20]
    79d6:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    79da:	011b      	lsls	r3, r3, #4
    79dc:	4413      	add	r3, r2
    79de:	685b      	ldr	r3, [r3, #4]
    79e0:	04db      	lsls	r3, r3, #19
    79e2:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    79e6:	4313      	orrs	r3, r2
    79e8:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT2;
    79ec:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    79f0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    79f4:	681b      	ldr	r3, [r3, #0]
    79f6:	695a      	ldr	r2, [r3, #20]
    79f8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    79fc:	011b      	lsls	r3, r3, #4
    79fe:	3308      	adds	r3, #8
    7a00:	4413      	add	r3, r2
    7a02:	685b      	ldr	r3, [r3, #4]
    7a04:	00db      	lsls	r3, r3, #3
    7a06:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7a0a:	4313      	orrs	r3, r2
    7a0c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7a10:	e0ab      	b.n	7b6a <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else /*CAN_LEGACY_FIFO_FORMAT_C == Can_pController->Can_eLegacyAcceptanceMode */
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount * 4U ;
    7a12:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7a16:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7a1a:	681b      	ldr	r3, [r3, #0]
    7a1c:	7c9b      	ldrb	r3, [r3, #18]
    7a1e:	009b      	lsls	r3, r3, #2
    7a20:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0x00000000U;
    7a24:	2300      	movs	r3, #0
    7a26:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_C;
    7a2a:	2302      	movs	r3, #2
    7a2c:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    7a30:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7a34:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7a38:	681b      	ldr	r3, [r3, #0]
    7a3a:	689b      	ldr	r3, [r3, #8]
    7a3c:	2b00      	cmp	r3, #0
    7a3e:	d04a      	beq.n	7ad6 <Can_Ipw_InitLegacyFifoFilter+0x290>
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    7a40:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7a44:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7a48:	681b      	ldr	r3, [r3, #0]
    7a4a:	695a      	ldr	r2, [r3, #20]
    7a4c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7a50:	015b      	lsls	r3, r3, #5
    7a52:	4413      	add	r3, r2
    7a54:	685b      	ldr	r3, [r3, #4]
    7a56:	0d5b      	lsrs	r3, r3, #21
    7a58:	061b      	lsls	r3, r3, #24
    7a5a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7a5e:	4313      	orrs	r3, r2
    7a60:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    7a64:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7a68:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7a6c:	681b      	ldr	r3, [r3, #0]
    7a6e:	695a      	ldr	r2, [r3, #20]
    7a70:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7a74:	015b      	lsls	r3, r3, #5
    7a76:	3308      	adds	r3, #8
    7a78:	4413      	add	r3, r2
    7a7a:	685b      	ldr	r3, [r3, #4]
    7a7c:	0d5b      	lsrs	r3, r3, #21
    7a7e:	041b      	lsls	r3, r3, #16
    7a80:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7a84:	4313      	orrs	r3, r2
    7a86:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    7a8a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7a8e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7a92:	681b      	ldr	r3, [r3, #0]
    7a94:	695a      	ldr	r2, [r3, #20]
    7a96:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7a9a:	015b      	lsls	r3, r3, #5
    7a9c:	3310      	adds	r3, #16
    7a9e:	4413      	add	r3, r2
    7aa0:	685b      	ldr	r3, [r3, #4]
    7aa2:	0d5b      	lsrs	r3, r3, #21
    7aa4:	021b      	lsls	r3, r3, #8
    7aa6:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7aaa:	4313      	orrs	r3, r2
    7aac:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    7ab0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7ab4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7ab8:	681b      	ldr	r3, [r3, #0]
    7aba:	695a      	ldr	r2, [r3, #20]
    7abc:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7ac0:	015b      	lsls	r3, r3, #5
    7ac2:	3318      	adds	r3, #24
    7ac4:	4413      	add	r3, r2
    7ac6:	685b      	ldr	r3, [r3, #4]
    7ac8:	0d5b      	lsrs	r3, r3, #21
    7aca:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7ace:	4313      	orrs	r3, r2
    7ad0:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7ad4:	e049      	b.n	7b6a <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    7ad6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7ada:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7ade:	681b      	ldr	r3, [r3, #0]
    7ae0:	695a      	ldr	r2, [r3, #20]
    7ae2:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7ae6:	015b      	lsls	r3, r3, #5
    7ae8:	4413      	add	r3, r2
    7aea:	685b      	ldr	r3, [r3, #4]
    7aec:	08db      	lsrs	r3, r3, #3
    7aee:	061b      	lsls	r3, r3, #24
    7af0:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7af4:	4313      	orrs	r3, r2
    7af6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    7afa:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7afe:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7b02:	681b      	ldr	r3, [r3, #0]
    7b04:	695a      	ldr	r2, [r3, #20]
    7b06:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7b0a:	015b      	lsls	r3, r3, #5
    7b0c:	3308      	adds	r3, #8
    7b0e:	4413      	add	r3, r2
    7b10:	685b      	ldr	r3, [r3, #4]
    7b12:	08db      	lsrs	r3, r3, #3
    7b14:	041b      	lsls	r3, r3, #16
    7b16:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7b1a:	4313      	orrs	r3, r2
    7b1c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    7b20:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7b24:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7b28:	681b      	ldr	r3, [r3, #0]
    7b2a:	695a      	ldr	r2, [r3, #20]
    7b2c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7b30:	015b      	lsls	r3, r3, #5
    7b32:	3310      	adds	r3, #16
    7b34:	4413      	add	r3, r2
    7b36:	685b      	ldr	r3, [r3, #4]
    7b38:	08db      	lsrs	r3, r3, #3
    7b3a:	021b      	lsls	r3, r3, #8
    7b3c:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7b40:	4313      	orrs	r3, r2
    7b42:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    7b46:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7b4a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7b4e:	681b      	ldr	r3, [r3, #0]
    7b50:	695a      	ldr	r2, [r3, #20]
    7b52:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7b56:	015b      	lsls	r3, r3, #5
    7b58:	3318      	adds	r3, #24
    7b5a:	4413      	add	r3, r2
    7b5c:	685b      	ldr	r3, [r3, #4]
    7b5e:	08db      	lsrs	r3, r3, #3
    7b60:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7b64:	4313      	orrs	r3, r2
    7b66:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                }
            }
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, u8FilterIdx, u32HwFilterMask);
    7b6a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7b6e:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7b72:	681b      	ldr	r3, [r3, #0]
    7b74:	789b      	ldrb	r3, [r3, #2]
    7b76:	f89d 1417 	ldrb.w	r1, [sp, #1047]	; 0x417
    7b7a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7b7e:	4618      	mov	r0, r3
    7b80:	f002 fe76 	bl	a870 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    7b84:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7b88:	3301      	adds	r3, #1
    7b8a:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    7b8e:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    7b92:	f89d 340f 	ldrb.w	r3, [sp, #1039]	; 0x40f
    7b96:	429a      	cmp	r2, r3
    7b98:	d20a      	bcs.n	7bb0 <Can_Ipw_InitLegacyFifoFilter+0x36a>
    7b9a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7b9e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7ba2:	681b      	ldr	r3, [r3, #0]
    7ba4:	7c9b      	ldrb	r3, [r3, #18]
    7ba6:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    7baa:	429a      	cmp	r2, r3
    7bac:	f4ff ae85 	bcc.w	78ba <Can_Ipw_InitLegacyFifoFilter+0x74>
    }

    (void)FlexCAN_Ip_SetRxFifoGlobalMask(Can_pController->Can_u8ControllerOffset, Can_pController->Can_u32LegacyGlobalMask);
    7bb0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7bb4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7bb8:	681b      	ldr	r3, [r3, #0]
    7bba:	789a      	ldrb	r2, [r3, #2]
    7bbc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7bc0:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7bc4:	681b      	ldr	r3, [r3, #0]
    7bc6:	68db      	ldr	r3, [r3, #12]
    7bc8:	4619      	mov	r1, r3
    7bca:	4610      	mov	r0, r2
    7bcc:	f002 fe9e 	bl	a90c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>
    
    if (u8HwFilterCount != 0U)
    7bd0:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    7bd4:	2b00      	cmp	r3, #0
    7bd6:	d054      	beq.n	7c82 <Can_Ipw_InitLegacyFifoFilter+0x43c>
    {
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    7bd8:	2300      	movs	r3, #0
    7bda:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    7bde:	e03e      	b.n	7c5e <Can_Ipw_InitLegacyFifoFilter+0x418>
        {
            RxFifoFilters[u8FilterIdx].id = Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterCode;
    7be0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7be4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7be8:	681b      	ldr	r3, [r3, #0]
    7bea:	695a      	ldr	r2, [r3, #20]
    7bec:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7bf0:	00db      	lsls	r3, r3, #3
    7bf2:	441a      	add	r2, r3
    7bf4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7bf8:	6812      	ldr	r2, [r2, #0]
    7bfa:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
    7bfe:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
    7c02:	00db      	lsls	r3, r3, #3
    7c04:	440b      	add	r3, r1
    7c06:	605a      	str	r2, [r3, #4]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    7c08:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7c0c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7c10:	681b      	ldr	r3, [r3, #0]
    7c12:	689b      	ldr	r3, [r3, #8]
    7c14:	2b00      	cmp	r3, #0
    7c16:	d00a      	beq.n	7c2e <Can_Ipw_InitLegacyFifoFilter+0x3e8>
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = TRUE;
    7c18:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7c1c:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    7c20:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    7c24:	00db      	lsls	r3, r3, #3
    7c26:	4413      	add	r3, r2
    7c28:	2201      	movs	r2, #1
    7c2a:	705a      	strb	r2, [r3, #1]
    7c2c:	e009      	b.n	7c42 <Can_Ipw_InitLegacyFifoFilter+0x3fc>
            }
            else
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = FALSE;
    7c2e:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7c32:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    7c36:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    7c3a:	00db      	lsls	r3, r3, #3
    7c3c:	4413      	add	r3, r2
    7c3e:	2200      	movs	r2, #0
    7c40:	705a      	strb	r2, [r3, #1]
            }
            RxFifoFilters[u8FilterIdx].isRemoteFrame = FALSE;
    7c42:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    7c46:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7c4a:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
    7c4e:	2100      	movs	r1, #0
    7c50:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    7c54:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7c58:	3301      	adds	r3, #1
    7c5a:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    7c5e:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    7c62:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    7c66:	429a      	cmp	r2, r3
    7c68:	d3ba      	bcc.n	7be0 <Can_Ipw_InitLegacyFifoFilter+0x39a>
        }

        (void)FlexCAN_Ip_ConfigRxFifo(Can_pController->Can_u8ControllerOffset, eElementFormat, RxFifoFilters);
    7c6a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7c6e:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7c72:	681b      	ldr	r3, [r3, #0]
    7c74:	789b      	ldrb	r3, [r3, #2]
    7c76:	aa02      	add	r2, sp, #8
    7c78:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    7c7c:	4618      	mov	r0, r3
    7c7e:	f002 f9da 	bl	a036 <FlexCAN_Ip_ConfigRxFifo_Privileged>
    }
    
}
    7c82:	bf00      	nop
    7c84:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    7c88:	f85d fb04 	ldr.w	pc, [sp], #4

00007c8c <Can_Ipw_InitBaudrate>:

#endif /* (CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON) */

/* Init baudrate for controller */
static void Can_Ipw_InitBaudrate(const Can_43_FLEXCAN_ControllerConfigType * ControllerConfig)
{
    7c8c:	b510      	push	{r4, lr}
    7c8e:	b088      	sub	sp, #32
    7c90:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    uint16 BaudRateConfigID = Can_au16ControllerBaudRateSel[ControllerConfig->Can_u8ControllerID];
    7c92:	9b01      	ldr	r3, [sp, #4]
    7c94:	785b      	ldrb	r3, [r3, #1]
    7c96:	461a      	mov	r2, r3
    7c98:	4b58      	ldr	r3, [pc, #352]	; (7dfc <Can_Ipw_InitBaudrate+0x170>)
    7c9a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7c9e:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON))
    #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
        if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[ControllerConfig->Can_u8ControllerID])
        {
    #endif
            FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16Prescaler;
    7ca2:	9b01      	ldr	r3, [sp, #4]
    7ca4:	6a1a      	ldr	r2, [r3, #32]
    7ca6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7caa:	2116      	movs	r1, #22
    7cac:	fb01 f303 	mul.w	r3, r1, r3
    7cb0:	4413      	add	r3, r2
    7cb2:	88db      	ldrh	r3, [r3, #6]
    7cb4:	9305      	str	r3, [sp, #20]
        {
            FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16PrescalerAlternate;
        }
    #endif

        FlexCANTimeSeg.propSeg    = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PropSeg;
    7cb6:	9b01      	ldr	r3, [sp, #4]
    7cb8:	6a1a      	ldr	r2, [r3, #32]
    7cba:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7cbe:	2116      	movs	r1, #22
    7cc0:	fb01 f303 	mul.w	r3, r1, r3
    7cc4:	4413      	add	r3, r2
    7cc6:	789b      	ldrb	r3, [r3, #2]
    7cc8:	9302      	str	r3, [sp, #8]
        FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
    7cca:	9b01      	ldr	r3, [sp, #4]
    7ccc:	6a1a      	ldr	r2, [r3, #32]
    7cce:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7cd2:	2116      	movs	r1, #22
    7cd4:	fb01 f303 	mul.w	r3, r1, r3
    7cd8:	4413      	add	r3, r2
    7cda:	78db      	ldrb	r3, [r3, #3]
    7cdc:	9303      	str	r3, [sp, #12]
        FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
    7cde:	9b01      	ldr	r3, [sp, #4]
    7ce0:	6a1a      	ldr	r2, [r3, #32]
    7ce2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7ce6:	2116      	movs	r1, #22
    7ce8:	fb01 f303 	mul.w	r3, r1, r3
    7cec:	4413      	add	r3, r2
    7cee:	791b      	ldrb	r3, [r3, #4]
    7cf0:	9304      	str	r3, [sp, #16]
        FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
    7cf2:	9b01      	ldr	r3, [sp, #4]
    7cf4:	6a1a      	ldr	r2, [r3, #32]
    7cf6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7cfa:	2116      	movs	r1, #22
    7cfc:	fb01 f303 	mul.w	r3, r1, r3
    7d00:	4413      	add	r3, r2
    7d02:	7a1b      	ldrb	r3, [r3, #8]
    7d04:	9306      	str	r3, [sp, #24]
        (void)FlexCAN_Ip_SetBitrate(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
    7d06:	9b01      	ldr	r3, [sp, #4]
    7d08:	789b      	ldrb	r3, [r3, #2]
    7d0a:	a902      	add	r1, sp, #8
    7d0c:	2200      	movs	r2, #0
    7d0e:	4618      	mov	r0, r3
    7d10:	f003 f842 	bl	ad98 <FlexCAN_Ip_SetBitrate_Privileged>
#endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
        if (TRUE == ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    7d14:	9b01      	ldr	r3, [sp, #4]
    7d16:	6a1a      	ldr	r2, [r3, #32]
    7d18:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7d1c:	2116      	movs	r1, #22
    7d1e:	fb01 f303 	mul.w	r3, r1, r3
    7d22:	4413      	add	r3, r2
    7d24:	785b      	ldrb	r3, [r3, #1]
    7d26:	2b00      	cmp	r3, #0
    7d28:	d057      	beq.n	7dda <Can_Ipw_InitBaudrate+0x14e>
    #if ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON))
        #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
            if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[ControllerConfig->Can_u8ControllerID])
            {
        #endif
                FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16Prescaler;
    7d2a:	9b01      	ldr	r3, [sp, #4]
    7d2c:	6a1a      	ldr	r2, [r3, #32]
    7d2e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7d32:	2116      	movs	r1, #22
    7d34:	fb01 f303 	mul.w	r3, r1, r3
    7d38:	4413      	add	r3, r2
    7d3a:	89db      	ldrh	r3, [r3, #14]
    7d3c:	9305      	str	r3, [sp, #20]
            else
            {
                FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16PrescalerAlternate;
            }
        #endif
            FlexCANTimeSeg.propSeg    = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PropSeg;
    7d3e:	9b01      	ldr	r3, [sp, #4]
    7d40:	6a1a      	ldr	r2, [r3, #32]
    7d42:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7d46:	2116      	movs	r1, #22
    7d48:	fb01 f303 	mul.w	r3, r1, r3
    7d4c:	4413      	add	r3, r2
    7d4e:	7a9b      	ldrb	r3, [r3, #10]
    7d50:	9302      	str	r3, [sp, #8]
            FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg1;
    7d52:	9b01      	ldr	r3, [sp, #4]
    7d54:	6a1a      	ldr	r2, [r3, #32]
    7d56:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7d5a:	2116      	movs	r1, #22
    7d5c:	fb01 f303 	mul.w	r3, r1, r3
    7d60:	4413      	add	r3, r2
    7d62:	7adb      	ldrb	r3, [r3, #11]
    7d64:	9303      	str	r3, [sp, #12]
            FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
    7d66:	9b01      	ldr	r3, [sp, #4]
    7d68:	6a1a      	ldr	r2, [r3, #32]
    7d6a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7d6e:	2116      	movs	r1, #22
    7d70:	fb01 f303 	mul.w	r3, r1, r3
    7d74:	4413      	add	r3, r2
    7d76:	7b1b      	ldrb	r3, [r3, #12]
    7d78:	9304      	str	r3, [sp, #16]
            FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;
    7d7a:	9b01      	ldr	r3, [sp, #4]
    7d7c:	6a1a      	ldr	r2, [r3, #32]
    7d7e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7d82:	2116      	movs	r1, #22
    7d84:	fb01 f303 	mul.w	r3, r1, r3
    7d88:	4413      	add	r3, r2
    7d8a:	7c1b      	ldrb	r3, [r3, #16]
    7d8c:	9306      	str	r3, [sp, #24]

            (void)FlexCAN_Ip_SetBitrateCbt(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    7d8e:	9b01      	ldr	r3, [sp, #4]
    7d90:	7898      	ldrb	r0, [r3, #2]
    7d92:	9b01      	ldr	r3, [sp, #4]
    7d94:	6a1a      	ldr	r2, [r3, #32]
    7d96:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7d9a:	2116      	movs	r1, #22
    7d9c:	fb01 f303 	mul.w	r3, r1, r3
    7da0:	4413      	add	r3, r2
    7da2:	781a      	ldrb	r2, [r3, #0]
    7da4:	ab02      	add	r3, sp, #8
    7da6:	4619      	mov	r1, r3
    7da8:	f003 f8c0 	bl	af2c <FlexCAN_Ip_SetBitrateCbt_Privileged>
    #endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
            (void)FlexCAN_Ip_SetTDCOffset(ControllerConfig->Can_u8ControllerOffset, \
    7dac:	9b01      	ldr	r3, [sp, #4]
    7dae:	7898      	ldrb	r0, [r3, #2]
    7db0:	9b01      	ldr	r3, [sp, #4]
    7db2:	6a1a      	ldr	r2, [r3, #32]
    7db4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7db8:	2116      	movs	r1, #22
    7dba:	fb01 f303 	mul.w	r3, r1, r3
    7dbe:	4413      	add	r3, r2
    7dc0:	7cd9      	ldrb	r1, [r3, #19]
    7dc2:	9b01      	ldr	r3, [sp, #4]
    7dc4:	6a1a      	ldr	r2, [r3, #32]
    7dc6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7dca:	2416      	movs	r4, #22
    7dcc:	fb04 f303 	mul.w	r3, r4, r3
    7dd0:	4413      	add	r3, r2
    7dd2:	7d1b      	ldrb	r3, [r3, #20]
    7dd4:	461a      	mov	r2, r3
    7dd6:	f003 f913 	bl	b000 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(ControllerConfig->Can_u8ControllerOffset, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    7dda:	9b01      	ldr	r3, [sp, #4]
    7ddc:	7898      	ldrb	r0, [r3, #2]
    7dde:	9b01      	ldr	r3, [sp, #4]
    7de0:	6a1a      	ldr	r2, [r3, #32]
    7de2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7de6:	2116      	movs	r1, #22
    7de8:	fb01 f303 	mul.w	r3, r1, r3
    7dec:	4413      	add	r3, r2
    7dee:	7c9b      	ldrb	r3, [r3, #18]
    7df0:	4619      	mov	r1, r3
    7df2:	f003 f959 	bl	b0a8 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
}
    7df6:	bf00      	nop
    7df8:	b008      	add	sp, #32
    7dfa:	bd10      	pop	{r4, pc}
    7dfc:	1fff8fb0 	.word	0x1fff8fb0

00007e00 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    7e00:	b500      	push	{lr}
    7e02:	b087      	sub	sp, #28
    7e04:	9003      	str	r0, [sp, #12]
    7e06:	9102      	str	r1, [sp, #8]
    7e08:	4613      	mov	r3, r2
    7e0a:	f88d 3007 	strb.w	r3, [sp, #7]
        Can_HwHandleType u8HwObjectID = 0U;
    7e0e:	2300      	movs	r3, #0
    7e10:	f8ad 3016 	strh.w	r3, [sp, #22]

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    7e14:	9b03      	ldr	r3, [sp, #12]
    7e16:	785b      	ldrb	r3, [r3, #1]
    7e18:	461a      	mov	r2, r3
    7e1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e1e:	491c      	ldr	r1, [pc, #112]	; (7e90 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x90>)
    7e20:	0152      	lsls	r2, r2, #5
    7e22:	4413      	add	r3, r2
    7e24:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7e28:	f8ad 3016 	strh.w	r3, [sp, #22]
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    7e2c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7e34:	4293      	cmp	r3, r2
    7e36:	d027      	beq.n	7e88 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
    7e38:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7e3c:	4613      	mov	r3, r2
    7e3e:	00db      	lsls	r3, r3, #3
    7e40:	4413      	add	r3, r2
    7e42:	009b      	lsls	r3, r3, #2
    7e44:	461a      	mov	r2, r3
    7e46:	9b02      	ldr	r3, [sp, #8]
    7e48:	4413      	add	r3, r2
    7e4a:	7b1b      	ldrb	r3, [r3, #12]
    7e4c:	f083 0301 	eor.w	r3, r3, #1
    7e50:	b2db      	uxtb	r3, r3
    7e52:	2b00      	cmp	r3, #0
    7e54:	d018      	beq.n	7e88 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
        {
            if (CAN_TX_NORMAL == Can_pHwObjectConfig[u8HwObjectID].Can_eReceiveType)
    7e56:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7e5a:	4613      	mov	r3, r2
    7e5c:	00db      	lsls	r3, r3, #3
    7e5e:	4413      	add	r3, r2
    7e60:	009b      	lsls	r3, r3, #2
    7e62:	461a      	mov	r2, r3
    7e64:	9b02      	ldr	r3, [sp, #8]
    7e66:	4413      	add	r3, r2
    7e68:	699b      	ldr	r3, [r3, #24]
    7e6a:	2b03      	cmp	r3, #3
    7e6c:	d10c      	bne.n	7e88 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
            {
                CanIf_TxConfirmation(Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx]);
    7e6e:	9b03      	ldr	r3, [sp, #12]
    7e70:	785b      	ldrb	r3, [r3, #1]
    7e72:	461a      	mov	r2, r3
    7e74:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e78:	4906      	ldr	r1, [pc, #24]	; (7e94 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x94>)
    7e7a:	0152      	lsls	r2, r2, #5
    7e7c:	4413      	add	r3, r2
    7e7e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7e82:	4618      	mov	r0, r3
    7e84:	f007 fae2 	bl	f44c <CanIf_TxConfirmation>
            }
        }
    }
    7e88:	bf00      	nop
    7e8a:	b007      	add	sp, #28
    7e8c:	f85d fb04 	ldr.w	pc, [sp], #4
    7e90:	1fff8f70 	.word	0x1fff8f70
    7e94:	1fff8f30 	.word	0x1fff8f30

00007e98 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    7e98:	b500      	push	{lr}
    7e9a:	b08f      	sub	sp, #60	; 0x3c
    7e9c:	9005      	str	r0, [sp, #20]
    7e9e:	9104      	str	r1, [sp, #16]
    7ea0:	4613      	mov	r3, r2
    7ea2:	f88d 300f 	strb.w	r3, [sp, #15]
        Can_HwHandleType u8HwObjectID = 0U;
    7ea6:	2300      	movs	r3, #0
    7ea8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        Can_HwType CanIf_Mailbox;
        PduInfoType CanIf_PduInfo;
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    7eac:	2300      	movs	r3, #0
    7eae:	930c      	str	r3, [sp, #48]	; 0x30
        Flexcan_Ip_MsgBuffType * pReceivedDataBuffer = NULL_PTR;
    7eb0:	2300      	movs	r3, #0
    7eb2:	930b      	str	r3, [sp, #44]	; 0x2c

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    7eb4:	9b05      	ldr	r3, [sp, #20]
    7eb6:	785b      	ldrb	r3, [r3, #1]
    7eb8:	461a      	mov	r2, r3
    7eba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ebe:	493f      	ldr	r1, [pc, #252]	; (7fbc <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x124>)
    7ec0:	0152      	lsls	r2, r2, #5
    7ec2:	4413      	add	r3, r2
    7ec4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7ec8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    7ecc:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    7ed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7ed4:	4293      	cmp	r3, r2
    7ed6:	d06c      	beq.n	7fb2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
    7ed8:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    7edc:	4613      	mov	r3, r2
    7ede:	00db      	lsls	r3, r3, #3
    7ee0:	4413      	add	r3, r2
    7ee2:	009b      	lsls	r3, r3, #2
    7ee4:	461a      	mov	r2, r3
    7ee6:	9b04      	ldr	r3, [sp, #16]
    7ee8:	4413      	add	r3, r2
    7eea:	7b1b      	ldrb	r3, [r3, #12]
    7eec:	f083 0301 	eor.w	r3, r3, #1
    7ef0:	b2db      	uxtb	r3, r3
    7ef2:	2b00      	cmp	r3, #0
    7ef4:	d05d      	beq.n	7fb2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
        {
            Can_pHwObject = &Can_pHwObjectConfig[u8HwObjectID];
    7ef6:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    7efa:	4613      	mov	r3, r2
    7efc:	00db      	lsls	r3, r3, #3
    7efe:	4413      	add	r3, r2
    7f00:	009b      	lsls	r3, r3, #2
    7f02:	461a      	mov	r2, r3
    7f04:	9b04      	ldr	r3, [sp, #16]
    7f06:	4413      	add	r3, r2
    7f08:	930c      	str	r3, [sp, #48]	; 0x30

            if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    7f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f0c:	699b      	ldr	r3, [r3, #24]
    7f0e:	2b00      	cmp	r3, #0
    7f10:	d118      	bne.n	7f44 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xac>
            {
                pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    7f12:	4a2b      	ldr	r2, [pc, #172]	; (7fc0 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x128>)
    7f14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f16:	7f1b      	ldrb	r3, [r3, #28]
    7f18:	011b      	lsls	r3, r3, #4
    7f1a:	4413      	add	r3, r2
    7f1c:	681b      	ldr	r3, [r3, #0]
    7f1e:	930b      	str	r3, [sp, #44]	; 0x2c
                Can_Ipw_ParseData(&CanIf_Mailbox, \
    7f20:	a906      	add	r1, sp, #24
    7f22:	a809      	add	r0, sp, #36	; 0x24
    7f24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f26:	9300      	str	r3, [sp, #0]
    7f28:	9b05      	ldr	r3, [sp, #20]
    7f2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7f2c:	f7ff fc2e 	bl	778c <Can_Ipw_ParseData>
                                  pReceivedDataBuffer, \
                                  Can_pControllerConfig, \
                                  Can_pHwObject \
                                 );
                /* ready to receive in next time */
                (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    7f30:	9b05      	ldr	r3, [sp, #20]
    7f32:	7898      	ldrb	r0, [r3, #2]
    7f34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f36:	7f19      	ldrb	r1, [r3, #28]
    7f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f3a:	7b1b      	ldrb	r3, [r3, #12]
    7f3c:	2200      	movs	r2, #0
    7f3e:	f001 ff49 	bl	9dd4 <FlexCAN_Ip_Receive>
            else
            {
                /* prevent misra */
            }
        }
    }
    7f42:	e036      	b.n	7fb2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
            else if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    7f44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f46:	699b      	ldr	r3, [r3, #24]
    7f48:	2b01      	cmp	r3, #1
    7f4a:	d132      	bne.n	7fb2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                if ((uint8)7U == u8MbIdx)
    7f4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7f50:	2b07      	cmp	r3, #7
    7f52:	d10d      	bne.n	7f70 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xd8>
                    (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    7f54:	2301      	movs	r3, #1
    7f56:	2208      	movs	r2, #8
    7f58:	2100      	movs	r1, #0
    7f5a:	2050      	movs	r0, #80	; 0x50
    7f5c:	f007 f97c 	bl	f258 <Det_ReportRuntimeError>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoOvfNotif)
    7f60:	9b05      	ldr	r3, [sp, #20]
    7f62:	699b      	ldr	r3, [r3, #24]
    7f64:	2b00      	cmp	r3, #0
    7f66:	d024      	beq.n	7fb2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                        Can_pControllerConfig->Can_pLegacyFiFoOvfNotif();
    7f68:	9b05      	ldr	r3, [sp, #20]
    7f6a:	699b      	ldr	r3, [r3, #24]
    7f6c:	4798      	blx	r3
    }
    7f6e:	e020      	b.n	7fb2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                else if ((uint8)6U == u8MbIdx)
    7f70:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7f74:	2b06      	cmp	r3, #6
    7f76:	d107      	bne.n	7f88 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xf0>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoWarnNotif)
    7f78:	9b05      	ldr	r3, [sp, #20]
    7f7a:	695b      	ldr	r3, [r3, #20]
    7f7c:	2b00      	cmp	r3, #0
    7f7e:	d018      	beq.n	7fb2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                        Can_pControllerConfig->Can_pLegacyFiFoWarnNotif();
    7f80:	9b05      	ldr	r3, [sp, #20]
    7f82:	695b      	ldr	r3, [r3, #20]
    7f84:	4798      	blx	r3
    }
    7f86:	e014      	b.n	7fb2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                    pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    7f88:	4a0d      	ldr	r2, [pc, #52]	; (7fc0 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x128>)
    7f8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f8c:	7f1b      	ldrb	r3, [r3, #28]
    7f8e:	011b      	lsls	r3, r3, #4
    7f90:	4413      	add	r3, r2
    7f92:	681b      	ldr	r3, [r3, #0]
    7f94:	930b      	str	r3, [sp, #44]	; 0x2c
                    Can_Ipw_ParseData(&CanIf_Mailbox, \
    7f96:	a906      	add	r1, sp, #24
    7f98:	a809      	add	r0, sp, #36	; 0x24
    7f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f9c:	9300      	str	r3, [sp, #0]
    7f9e:	9b05      	ldr	r3, [sp, #20]
    7fa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7fa2:	f7ff fbf3 	bl	778c <Can_Ipw_ParseData>
                    (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    7fa6:	9b05      	ldr	r3, [sp, #20]
    7fa8:	789b      	ldrb	r3, [r3, #2]
    7faa:	2100      	movs	r1, #0
    7fac:	4618      	mov	r0, r3
    7fae:	f002 f80f 	bl	9fd0 <FlexCAN_Ip_RxFifo>
    }
    7fb2:	bf00      	nop
    7fb4:	b00f      	add	sp, #60	; 0x3c
    7fb6:	f85d fb04 	ldr.w	pc, [sp], #4
    7fba:	bf00      	nop
    7fbc:	1fff8f70 	.word	0x1fff8f70
    7fc0:	1fff8d10 	.word	0x1fff8d10

00007fc4 <Can_43_FLEXCAN_Ipw_Init>:
#endif /* (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON) */
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
Std_ReturnType Can_43_FLEXCAN_Ipw_Init(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    7fc4:	b510      	push	{r4, lr}
    7fc6:	b084      	sub	sp, #16
    7fc8:	9001      	str	r0, [sp, #4]
    Std_ReturnType eRetVal = (Std_ReturnType)FLEXCAN_STATUS_ERROR;
    7fca:	2301      	movs	r3, #1
    7fcc:	f88d 300c 	strb.w	r3, [sp, #12]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    /* The Index of Hoh in a group that refer to a controller */
    uint8 u8HwObjRefIdx = 0U;
    7fd0:	2300      	movs	r3, #0
    7fd2:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ObjIdx = 0U;
    7fd6:	2300      	movs	r3, #0
    7fd8:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    7fdc:	2300      	movs	r3, #0
    7fde:	9302      	str	r3, [sp, #8]
    uint8 u8HwBufferCount = 0U;
    7fe0:	2300      	movs	r3, #0
    7fe2:	f88d 300d 	strb.w	r3, [sp, #13]
#endif

#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID] = Can_pControllerConfig->Can_u16DefaultBaudrateID;
    7fe6:	9b01      	ldr	r3, [sp, #4]
    7fe8:	785b      	ldrb	r3, [r3, #1]
    7fea:	461a      	mov	r2, r3
    7fec:	9b01      	ldr	r3, [sp, #4]
    7fee:	8b99      	ldrh	r1, [r3, #28]
    7ff0:	4b78      	ldr	r3, [pc, #480]	; (81d4 <Can_43_FLEXCAN_Ipw_Init+0x210>)
    7ff2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    {
        Can_Ipw_u32Seconds = 0U;
    }
#endif
    /* @violates @ref Can_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    eRetVal = (Std_ReturnType)Call_Can_FlexCan_Init(Can_pControllerConfig->Can_u8ControllerOffset, Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);
    7ff6:	9b01      	ldr	r3, [sp, #4]
    7ff8:	7898      	ldrb	r0, [r3, #2]
    7ffa:	4977      	ldr	r1, [pc, #476]	; (81d8 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    7ffc:	9b01      	ldr	r3, [sp, #4]
    7ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8000:	681b      	ldr	r3, [r3, #0]
    8002:	461a      	mov	r2, r3
    8004:	f001 fdda 	bl	9bbc <FlexCAN_Ip_Init_Privileged>
    8008:	4603      	mov	r3, r0
    800a:	f88d 300c 	strb.w	r3, [sp, #12]
    
    /* by defaut, enable interrupt when setcontroller to start */
    Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    800e:	9b01      	ldr	r3, [sp, #4]
    8010:	785b      	ldrb	r3, [r3, #1]
    8012:	461a      	mov	r2, r3
    8014:	4b71      	ldr	r3, [pc, #452]	; (81dc <Can_43_FLEXCAN_Ipw_Init+0x218>)
    8016:	2101      	movs	r1, #1
    8018:	5499      	strb	r1, [r3, r2]
    if ((Std_ReturnType)FLEXCAN_STATUS_SUCCESS == eRetVal)
    801a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    801e:	2b00      	cmp	r3, #0
    8020:	d13b      	bne.n	809a <Can_43_FLEXCAN_Ipw_Init+0xd6>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    8022:	9b01      	ldr	r3, [sp, #4]
    8024:	789b      	ldrb	r3, [r3, #2]
    8026:	4618      	mov	r0, r3
    8028:	f003 f8fc 	bl	b224 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* If the FlexCAN_Init retuns SUCCESS then the module is already in freezemode, and FlexCAN_Ip_SetTDCOffset and FlexCAN_Ip_SetTxArbitrationStartDelay will always retun success */
        if (Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bFDFrame)
    802c:	9b01      	ldr	r3, [sp, #4]
    802e:	6a1a      	ldr	r2, [r3, #32]
    8030:	9b01      	ldr	r3, [sp, #4]
    8032:	8b9b      	ldrh	r3, [r3, #28]
    8034:	4619      	mov	r1, r3
    8036:	2316      	movs	r3, #22
    8038:	fb01 f303 	mul.w	r3, r1, r3
    803c:	4413      	add	r3, r2
    803e:	785b      	ldrb	r3, [r3, #1]
    8040:	2b00      	cmp	r3, #0
    8042:	d018      	beq.n	8076 <Can_43_FLEXCAN_Ipw_Init+0xb2>
        {
            (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    8044:	9b01      	ldr	r3, [sp, #4]
    8046:	7898      	ldrb	r0, [r3, #2]
    8048:	9b01      	ldr	r3, [sp, #4]
    804a:	6a1a      	ldr	r2, [r3, #32]
    804c:	9b01      	ldr	r3, [sp, #4]
    804e:	8b9b      	ldrh	r3, [r3, #28]
    8050:	4619      	mov	r1, r3
    8052:	2316      	movs	r3, #22
    8054:	fb01 f303 	mul.w	r3, r1, r3
    8058:	4413      	add	r3, r2
    805a:	7cd9      	ldrb	r1, [r3, #19]
    805c:	9b01      	ldr	r3, [sp, #4]
    805e:	6a1a      	ldr	r2, [r3, #32]
    8060:	9b01      	ldr	r3, [sp, #4]
    8062:	8b9b      	ldrh	r3, [r3, #28]
    8064:	461c      	mov	r4, r3
    8066:	2316      	movs	r3, #22
    8068:	fb04 f303 	mul.w	r3, r4, r3
    806c:	4413      	add	r3, r2
    806e:	7d1b      	ldrb	r3, [r3, #20]
    8070:	461a      	mov	r2, r3
    8072:	f002 ffc5 	bl	b000 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bTrcvDelayEnable, \
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, \
    8076:	9b01      	ldr	r3, [sp, #4]
    8078:	7898      	ldrb	r0, [r3, #2]
    807a:	9b01      	ldr	r3, [sp, #4]
    807c:	6a1a      	ldr	r2, [r3, #32]
    807e:	9b01      	ldr	r3, [sp, #4]
    8080:	8b9b      	ldrh	r3, [r3, #28]
    8082:	4619      	mov	r1, r3
    8084:	2316      	movs	r3, #22
    8086:	fb01 f303 	mul.w	r3, r1, r3
    808a:	4413      	add	r3, r2
    808c:	7c9b      	ldrb	r3, [r3, #18]
    808e:	4619      	mov	r1, r3
    8090:	f003 f80a 	bl	b0a8 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
                                                    Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TxArbitrationStartDelay);
        
        /* Init all Rx objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    8094:	9801      	ldr	r0, [sp, #4]
    8096:	f000 fbe5 	bl	8864 <Can_Ipw_InitRx>
    }

#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    809a:	2300      	movs	r3, #0
    809c:	f88d 300d 	strb.w	r3, [sp, #13]
    80a0:	e010      	b.n	80c4 <Can_43_FLEXCAN_Ipw_Init+0x100>
    {
        Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8HwBufferCount] = CAN_43_FLEXCAN_HWOBJ_UNMAPPED;
    80a2:	9b01      	ldr	r3, [sp, #4]
    80a4:	785b      	ldrb	r3, [r3, #1]
    80a6:	461a      	mov	r2, r3
    80a8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    80ac:	494c      	ldr	r1, [pc, #304]	; (81e0 <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    80ae:	0152      	lsls	r2, r2, #5
    80b0:	4413      	add	r3, r2
    80b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    80b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    80ba:	f89d 300d 	ldrb.w	r3, [sp, #13]
    80be:	3301      	adds	r3, #1
    80c0:	f88d 300d 	strb.w	r3, [sp, #13]
    80c4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    80c8:	2b1f      	cmp	r3, #31
    80ca:	d9ea      	bls.n	80a2 <Can_43_FLEXCAN_Ipw_Init+0xde>
    }
    /* Map MB index to hardware object ID */
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    80cc:	2300      	movs	r3, #0
    80ce:	f88d 300f 	strb.w	r3, [sp, #15]
    80d2:	e06b      	b.n	81ac <Can_43_FLEXCAN_Ipw_Init+0x1e8>
    {
        Can_pHwObject = Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    80d4:	9b01      	ldr	r3, [sp, #4]
    80d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    80d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    80dc:	009b      	lsls	r3, r3, #2
    80de:	4413      	add	r3, r2
    80e0:	681b      	ldr	r3, [r3, #0]
    80e2:	9302      	str	r3, [sp, #8]
        switch (Can_pHwObject->Can_eReceiveType)
    80e4:	9b02      	ldr	r3, [sp, #8]
    80e6:	699b      	ldr	r3, [r3, #24]
    80e8:	2b03      	cmp	r3, #3
    80ea:	d006      	beq.n	80fa <Can_43_FLEXCAN_Ipw_Init+0x136>
    80ec:	2b03      	cmp	r3, #3
    80ee:	d857      	bhi.n	81a0 <Can_43_FLEXCAN_Ipw_Init+0x1dc>
    80f0:	2b00      	cmp	r3, #0
    80f2:	d023      	beq.n	813c <Can_43_FLEXCAN_Ipw_Init+0x178>
    80f4:	2b01      	cmp	r3, #1
    80f6:	d02f      	beq.n	8158 <Can_43_FLEXCAN_Ipw_Init+0x194>
                break;
            }
            default:
            {
                /* don't map for enhance fifo object because of out of message buffer memory */
                break;
    80f8:	e052      	b.n	81a0 <Can_43_FLEXCAN_Ipw_Init+0x1dc>
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    80fa:	2300      	movs	r3, #0
    80fc:	f88d 300e 	strb.w	r3, [sp, #14]
    8100:	e015      	b.n	812e <Can_43_FLEXCAN_Ipw_Init+0x16a>
                    Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex + u8ObjIdx] = Can_pHwObject->Can_HwObjectID;
    8102:	9b01      	ldr	r3, [sp, #4]
    8104:	785b      	ldrb	r3, [r3, #1]
    8106:	461c      	mov	r4, r3
    8108:	9b02      	ldr	r3, [sp, #8]
    810a:	7f1b      	ldrb	r3, [r3, #28]
    810c:	461a      	mov	r2, r3
    810e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8112:	4413      	add	r3, r2
    8114:	9a02      	ldr	r2, [sp, #8]
    8116:	8810      	ldrh	r0, [r2, #0]
    8118:	4931      	ldr	r1, [pc, #196]	; (81e0 <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    811a:	0162      	lsls	r2, r4, #5
    811c:	4413      	add	r3, r2
    811e:	4602      	mov	r2, r0
    8120:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    8124:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8128:	3301      	adds	r3, #1
    812a:	f88d 300e 	strb.w	r3, [sp, #14]
    812e:	9b02      	ldr	r3, [sp, #8]
    8130:	7b9b      	ldrb	r3, [r3, #14]
    8132:	f89d 200e 	ldrb.w	r2, [sp, #14]
    8136:	429a      	cmp	r2, r3
    8138:	d3e3      	bcc.n	8102 <Can_43_FLEXCAN_Ipw_Init+0x13e>
                break;
    813a:	e032      	b.n	81a2 <Can_43_FLEXCAN_Ipw_Init+0x1de>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    813c:	9b01      	ldr	r3, [sp, #4]
    813e:	785b      	ldrb	r3, [r3, #1]
    8140:	461c      	mov	r4, r3
    8142:	9b02      	ldr	r3, [sp, #8]
    8144:	7f1b      	ldrb	r3, [r3, #28]
    8146:	4618      	mov	r0, r3
    8148:	9b02      	ldr	r3, [sp, #8]
    814a:	8819      	ldrh	r1, [r3, #0]
    814c:	4a24      	ldr	r2, [pc, #144]	; (81e0 <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    814e:	0163      	lsls	r3, r4, #5
    8150:	4403      	add	r3, r0
    8152:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                break;
    8156:	e024      	b.n	81a2 <Can_43_FLEXCAN_Ipw_Init+0x1de>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    8158:	9b01      	ldr	r3, [sp, #4]
    815a:	785b      	ldrb	r3, [r3, #1]
    815c:	461c      	mov	r4, r3
    815e:	9b02      	ldr	r3, [sp, #8]
    8160:	7f1b      	ldrb	r3, [r3, #28]
    8162:	4618      	mov	r0, r3
    8164:	9b02      	ldr	r3, [sp, #8]
    8166:	8819      	ldrh	r1, [r3, #0]
    8168:	4a1d      	ldr	r2, [pc, #116]	; (81e0 <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    816a:	0163      	lsls	r3, r4, #5
    816c:	4403      	add	r3, r0
    816e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][6U] = Can_pHwObject->Can_HwObjectID;
    8172:	9b01      	ldr	r3, [sp, #4]
    8174:	785b      	ldrb	r3, [r3, #1]
    8176:	4618      	mov	r0, r3
    8178:	9b02      	ldr	r3, [sp, #8]
    817a:	8819      	ldrh	r1, [r3, #0]
    817c:	4a18      	ldr	r2, [pc, #96]	; (81e0 <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    817e:	0183      	lsls	r3, r0, #6
    8180:	4413      	add	r3, r2
    8182:	330c      	adds	r3, #12
    8184:	460a      	mov	r2, r1
    8186:	801a      	strh	r2, [r3, #0]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][7U] = Can_pHwObject->Can_HwObjectID;
    8188:	9b01      	ldr	r3, [sp, #4]
    818a:	785b      	ldrb	r3, [r3, #1]
    818c:	4618      	mov	r0, r3
    818e:	9b02      	ldr	r3, [sp, #8]
    8190:	8819      	ldrh	r1, [r3, #0]
    8192:	4a13      	ldr	r2, [pc, #76]	; (81e0 <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    8194:	0183      	lsls	r3, r0, #6
    8196:	4413      	add	r3, r2
    8198:	330e      	adds	r3, #14
    819a:	460a      	mov	r2, r1
    819c:	801a      	strh	r2, [r3, #0]
                break;
    819e:	e000      	b.n	81a2 <Can_43_FLEXCAN_Ipw_Init+0x1de>
                break;
    81a0:	bf00      	nop
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    81a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    81a6:	3301      	adds	r3, #1
    81a8:	f88d 300f 	strb.w	r3, [sp, #15]
    81ac:	9b01      	ldr	r3, [sp, #4]
    81ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    81b2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    81b6:	429a      	cmp	r2, r3
    81b8:	d38c      	bcc.n	80d4 <Can_43_FLEXCAN_Ipw_Init+0x110>
            }
        }
    }
#endif /* MB_INTERRUPT_SUPPORT */
    eRetVal = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    81ba:	9b01      	ldr	r3, [sp, #4]
    81bc:	789b      	ldrb	r3, [r3, #2]
    81be:	4618      	mov	r0, r3
    81c0:	f002 fd80 	bl	acc4 <FlexCAN_Ip_SetStopMode_Privileged>
    81c4:	4603      	mov	r3, r0
    81c6:	f88d 300c 	strb.w	r3, [sp, #12]

    return (Std_ReturnType)eRetVal;
    81ca:	f89d 300c 	ldrb.w	r3, [sp, #12]
}
    81ce:	4618      	mov	r0, r3
    81d0:	b004      	add	sp, #16
    81d2:	bd10      	pop	{r4, pc}
    81d4:	1fff8fb0 	.word	0x1fff8fb0
    81d8:	1fff8d10 	.word	0x1fff8d10
    81dc:	1fff8fb4 	.word	0x1fff8fb4
    81e0:	1fff8f70 	.word	0x1fff8f70

000081e4 <Can_43_FLEXCAN_Ipw_DeInit>:

/**
*   @brief      De-Initialize Controller
*/
void Can_43_FLEXCAN_Ipw_DeInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    81e4:	b500      	push	{lr}
    81e6:	b083      	sub	sp, #12
    81e8:	9001      	str	r0, [sp, #4]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    (void)FlexCAN_Ip_Deinit(Can_pControllerConfig->Can_u8ControllerOffset);
    81ea:	9b01      	ldr	r3, [sp, #4]
    81ec:	789b      	ldrb	r3, [r3, #2]
    81ee:	4618      	mov	r0, r3
    81f0:	f002 fbd4 	bl	a99c <FlexCAN_Ip_Deinit_Privileged>
}
    81f4:	bf00      	nop
    81f6:	b003      	add	sp, #12
    81f8:	f85d fb04 	ldr.w	pc, [sp], #4

000081fc <Can_43_FLEXCAN_Ipw_SetBaudrate>:
    Std_ReturnType Can_43_FLEXCAN_Ipw_SetBaudrate
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        uint16 BaudRateConfigID
    )
    {
    81fc:	b510      	push	{r4, lr}
    81fe:	b088      	sub	sp, #32
    8200:	9001      	str	r0, [sp, #4]
    8202:	460b      	mov	r3, r1
    8204:	f8ad 3002 	strh.w	r3, [sp, #2]
        Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    8208:	2301      	movs	r3, #1
    820a:	9307      	str	r3, [sp, #28]
        Flexcan_Ip_TimeSegmentType FlexCANTimeSeg;

        eRetVal = FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset);
    820c:	9b01      	ldr	r3, [sp, #4]
    820e:	789b      	ldrb	r3, [r3, #2]
    8210:	4618      	mov	r0, r3
    8212:	f002 fb01 	bl	a818 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    8216:	9007      	str	r0, [sp, #28]
        if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    8218:	9b07      	ldr	r3, [sp, #28]
    821a:	2b00      	cmp	r3, #0
    821c:	f040 80bb 	bne.w	8396 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x19a>
        {
        #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
            if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[Can_pControllerConfig->Can_u8ControllerID])
            {
        #endif
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16Prescaler;
    8220:	9b01      	ldr	r3, [sp, #4]
    8222:	6a1a      	ldr	r2, [r3, #32]
    8224:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8228:	2116      	movs	r1, #22
    822a:	fb01 f303 	mul.w	r3, r1, r3
    822e:	4413      	add	r3, r2
    8230:	88db      	ldrh	r3, [r3, #6]
    8232:	9305      	str	r3, [sp, #20]
            {
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16PrescalerAlternate;
            }
        #endif

            FlexCANTimeSeg.propSeg    = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PropSeg;
    8234:	9b01      	ldr	r3, [sp, #4]
    8236:	6a1a      	ldr	r2, [r3, #32]
    8238:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    823c:	2116      	movs	r1, #22
    823e:	fb01 f303 	mul.w	r3, r1, r3
    8242:	4413      	add	r3, r2
    8244:	789b      	ldrb	r3, [r3, #2]
    8246:	9302      	str	r3, [sp, #8]
            FlexCANTimeSeg.phaseSeg1  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
    8248:	9b01      	ldr	r3, [sp, #4]
    824a:	6a1a      	ldr	r2, [r3, #32]
    824c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8250:	2116      	movs	r1, #22
    8252:	fb01 f303 	mul.w	r3, r1, r3
    8256:	4413      	add	r3, r2
    8258:	78db      	ldrb	r3, [r3, #3]
    825a:	9303      	str	r3, [sp, #12]
            FlexCANTimeSeg.phaseSeg2  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
    825c:	9b01      	ldr	r3, [sp, #4]
    825e:	6a1a      	ldr	r2, [r3, #32]
    8260:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8264:	2116      	movs	r1, #22
    8266:	fb01 f303 	mul.w	r3, r1, r3
    826a:	4413      	add	r3, r2
    826c:	791b      	ldrb	r3, [r3, #4]
    826e:	9304      	str	r3, [sp, #16]
            FlexCANTimeSeg.rJumpwidth = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
    8270:	9b01      	ldr	r3, [sp, #4]
    8272:	6a1a      	ldr	r2, [r3, #32]
    8274:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8278:	2116      	movs	r1, #22
    827a:	fb01 f303 	mul.w	r3, r1, r3
    827e:	4413      	add	r3, r2
    8280:	7a1b      	ldrb	r3, [r3, #8]
    8282:	9306      	str	r3, [sp, #24]

            
            (void)FlexCAN_Ip_SetBitrate(Can_pControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
    8284:	9b01      	ldr	r3, [sp, #4]
    8286:	789b      	ldrb	r3, [r3, #2]
    8288:	a902      	add	r1, sp, #8
    828a:	2200      	movs	r2, #0
    828c:	4618      	mov	r0, r3
    828e:	f002 fd83 	bl	ad98 <FlexCAN_Ip_SetBitrate_Privileged>
        #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
            if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[Can_pControllerConfig->Can_u8ControllerID])
            {
        #endif
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16Prescaler;
    8292:	9b01      	ldr	r3, [sp, #4]
    8294:	6a1a      	ldr	r2, [r3, #32]
    8296:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    829a:	2116      	movs	r1, #22
    829c:	fb01 f303 	mul.w	r3, r1, r3
    82a0:	4413      	add	r3, r2
    82a2:	89db      	ldrh	r3, [r3, #14]
    82a4:	9305      	str	r3, [sp, #20]
            {
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16PrescalerAlternate;
            }
        #endif

            if (TRUE == Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    82a6:	9b01      	ldr	r3, [sp, #4]
    82a8:	6a1a      	ldr	r2, [r3, #32]
    82aa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    82ae:	2116      	movs	r1, #22
    82b0:	fb01 f303 	mul.w	r3, r1, r3
    82b4:	4413      	add	r3, r2
    82b6:	785b      	ldrb	r3, [r3, #1]
    82b8:	2b00      	cmp	r3, #0
    82ba:	d04d      	beq.n	8358 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x15c>
            {
                FlexCANTimeSeg.propSeg    = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PropSeg;
    82bc:	9b01      	ldr	r3, [sp, #4]
    82be:	6a1a      	ldr	r2, [r3, #32]
    82c0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    82c4:	2116      	movs	r1, #22
    82c6:	fb01 f303 	mul.w	r3, r1, r3
    82ca:	4413      	add	r3, r2
    82cc:	7a9b      	ldrb	r3, [r3, #10]
    82ce:	9302      	str	r3, [sp, #8]
                FlexCANTimeSeg.phaseSeg1  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg1;
    82d0:	9b01      	ldr	r3, [sp, #4]
    82d2:	6a1a      	ldr	r2, [r3, #32]
    82d4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    82d8:	2116      	movs	r1, #22
    82da:	fb01 f303 	mul.w	r3, r1, r3
    82de:	4413      	add	r3, r2
    82e0:	7adb      	ldrb	r3, [r3, #11]
    82e2:	9303      	str	r3, [sp, #12]
                FlexCANTimeSeg.phaseSeg2  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
    82e4:	9b01      	ldr	r3, [sp, #4]
    82e6:	6a1a      	ldr	r2, [r3, #32]
    82e8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    82ec:	2116      	movs	r1, #22
    82ee:	fb01 f303 	mul.w	r3, r1, r3
    82f2:	4413      	add	r3, r2
    82f4:	7b1b      	ldrb	r3, [r3, #12]
    82f6:	9304      	str	r3, [sp, #16]
                FlexCANTimeSeg.rJumpwidth = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;
    82f8:	9b01      	ldr	r3, [sp, #4]
    82fa:	6a1a      	ldr	r2, [r3, #32]
    82fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8300:	2116      	movs	r1, #22
    8302:	fb01 f303 	mul.w	r3, r1, r3
    8306:	4413      	add	r3, r2
    8308:	7c1b      	ldrb	r3, [r3, #16]
    830a:	9306      	str	r3, [sp, #24]

                (void)FlexCAN_Ip_SetBitrateCbt(Can_pControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    830c:	9b01      	ldr	r3, [sp, #4]
    830e:	7898      	ldrb	r0, [r3, #2]
    8310:	9b01      	ldr	r3, [sp, #4]
    8312:	6a1a      	ldr	r2, [r3, #32]
    8314:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8318:	2116      	movs	r1, #22
    831a:	fb01 f303 	mul.w	r3, r1, r3
    831e:	4413      	add	r3, r2
    8320:	781a      	ldrb	r2, [r3, #0]
    8322:	ab02      	add	r3, sp, #8
    8324:	4619      	mov	r1, r3
    8326:	f002 fe01 	bl	af2c <FlexCAN_Ip_SetBitrateCbt_Privileged>

                (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    832a:	9b01      	ldr	r3, [sp, #4]
    832c:	7898      	ldrb	r0, [r3, #2]
    832e:	9b01      	ldr	r3, [sp, #4]
    8330:	6a1a      	ldr	r2, [r3, #32]
    8332:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8336:	2116      	movs	r1, #22
    8338:	fb01 f303 	mul.w	r3, r1, r3
    833c:	4413      	add	r3, r2
    833e:	7cd9      	ldrb	r1, [r3, #19]
    8340:	9b01      	ldr	r3, [sp, #4]
    8342:	6a1a      	ldr	r2, [r3, #32]
    8344:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8348:	2416      	movs	r4, #22
    834a:	fb04 f303 	mul.w	r3, r4, r3
    834e:	4413      	add	r3, r2
    8350:	7d1b      	ldrb	r3, [r3, #20]
    8352:	461a      	mov	r2, r3
    8354:	f002 fe54 	bl	b000 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                            Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                            Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset \
                                            );
            }

            (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    8358:	9b01      	ldr	r3, [sp, #4]
    835a:	7898      	ldrb	r0, [r3, #2]
    835c:	9b01      	ldr	r3, [sp, #4]
    835e:	6a1a      	ldr	r2, [r3, #32]
    8360:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8364:	2116      	movs	r1, #22
    8366:	fb01 f303 	mul.w	r3, r1, r3
    836a:	4413      	add	r3, r2
    836c:	7c9b      	ldrb	r3, [r3, #18]
    836e:	4619      	mov	r1, r3
    8370:	f002 fe9a 	bl	b0a8 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>

            eRetVal = FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    8374:	9b01      	ldr	r3, [sp, #4]
    8376:	789b      	ldrb	r3, [r3, #2]
    8378:	4618      	mov	r0, r3
    837a:	f002 fca3 	bl	acc4 <FlexCAN_Ip_SetStopMode_Privileged>
    837e:	9007      	str	r0, [sp, #28]
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    8380:	9b07      	ldr	r3, [sp, #28]
    8382:	2b00      	cmp	r3, #0
    8384:	d107      	bne.n	8396 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x19a>
            {
                Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID] = BaudRateConfigID;
    8386:	9b01      	ldr	r3, [sp, #4]
    8388:	785b      	ldrb	r3, [r3, #1]
    838a:	4619      	mov	r1, r3
    838c:	4a06      	ldr	r2, [pc, #24]	; (83a8 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x1ac>)
    838e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8392:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            }
        }
        return ((FLEXCAN_STATUS_SUCCESS == eRetVal) ? ((Std_ReturnType)E_OK) : ((Std_ReturnType)E_NOT_OK));
    8396:	9b07      	ldr	r3, [sp, #28]
    8398:	2b00      	cmp	r3, #0
    839a:	bf14      	ite	ne
    839c:	2301      	movne	r3, #1
    839e:	2300      	moveq	r3, #0
    83a0:	b2db      	uxtb	r3, r3
    }
    83a2:	4618      	mov	r0, r3
    83a4:	b008      	add	sp, #32
    83a6:	bd10      	pop	{r4, pc}
    83a8:	1fff8fb0 	.word	0x1fff8fb0

000083ac <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>:

/**
*   @brief      Set Error Initialization and set Controller to start Mode.
*/
static Std_ReturnType Can_43_FLEXCAN_Ipw_SetControlerErrorInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    83ac:	b500      	push	{lr}
    83ae:	b085      	sub	sp, #20
    83b0:	9001      	str	r0, [sp, #4]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_SUCCESS;
    83b2:	2300      	movs	r3, #0
    83b4:	9303      	str	r3, [sp, #12]

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    83b6:	9b01      	ldr	r3, [sp, #4]
    83b8:	785b      	ldrb	r3, [r3, #1]
    83ba:	461a      	mov	r2, r3
    83bc:	4b11      	ldr	r3, [pc, #68]	; (8404 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x58>)
    83be:	5c9b      	ldrb	r3, [r3, r2]
    83c0:	2b00      	cmp	r3, #0
    83c2:	d012      	beq.n	83ea <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x3e>
    {
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    83c4:	9b01      	ldr	r3, [sp, #4]
    83c6:	7a5b      	ldrb	r3, [r3, #9]
    83c8:	f083 0301 	eor.w	r3, r3, #1
    83cc:	b2db      	uxtb	r3, r3
    83ce:	2b00      	cmp	r3, #0
    83d0:	d006      	beq.n	83e0 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x34>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    83d2:	9b01      	ldr	r3, [sp, #4]
    83d4:	789b      	ldrb	r3, [r3, #2]
    83d6:	2201      	movs	r2, #1
    83d8:	2104      	movs	r1, #4
    83da:	4618      	mov	r0, r3
    83dc:	f002 ff4e 	bl	b27c <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    83e0:	9b01      	ldr	r3, [sp, #4]
    83e2:	789b      	ldrb	r3, [r3, #2]
    83e4:	4618      	mov	r0, r3
    83e6:	f002 feef 	bl	b1c8 <FlexCAN_Ip_EnableInterrupts_Privileged>
    }
    eRetVal = FlexCAN_Ip_SetStartMode(Can_pControllerConfig->Can_u8ControllerOffset);
    83ea:	9b01      	ldr	r3, [sp, #4]
    83ec:	789b      	ldrb	r3, [r3, #2]
    83ee:	4618      	mov	r0, r3
    83f0:	f002 fc48 	bl	ac84 <FlexCAN_Ip_SetStartMode_Privileged>
    83f4:	9003      	str	r0, [sp, #12]

    return (Std_ReturnType)eRetVal;
    83f6:	9b03      	ldr	r3, [sp, #12]
    83f8:	b2db      	uxtb	r3, r3
}
    83fa:	4618      	mov	r0, r3
    83fc:	b005      	add	sp, #20
    83fe:	f85d fb04 	ldr.w	pc, [sp], #4
    8402:	bf00      	nop
    8404:	1fff8fb4 	.word	0x1fff8fb4

00008408 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>:

/**
*   @brief      Set Controller to participate the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStartMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8408:	b500      	push	{lr}
    840a:	b087      	sub	sp, #28
    840c:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    uint8 u8HwObjRefIdx = 0U;
    840e:	2300      	movs	r3, #0
    8410:	f88d 3017 	strb.w	r3, [sp, #23]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    8414:	2300      	movs	r3, #0
    8416:	9303      	str	r3, [sp, #12]
        {
            Can_Ipw_u32CurrentCompareVal = Stm_Ip_GetCompareValue(CAN_43_FLEXCAN_TS_STM_INSTANCE, CAN_43_FLEXCAN_TS_STM_CHANNEL);
        }
    }
#endif
    eRetVal = FlexCAN_Ip_Init(Can_pControllerConfig->Can_u8ControllerOffset, \
    8418:	9b01      	ldr	r3, [sp, #4]
    841a:	7898      	ldrb	r0, [r3, #2]
    841c:	4930      	ldr	r1, [pc, #192]	; (84e0 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xd8>)
    841e:	9b01      	ldr	r3, [sp, #4]
    8420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8422:	681b      	ldr	r3, [r3, #0]
    8424:	461a      	mov	r2, r3
    8426:	f001 fbc9 	bl	9bbc <FlexCAN_Ip_Init_Privileged>
    842a:	9004      	str	r0, [sp, #16]
                                                    Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], \
                                                    Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);

    if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    842c:	9b04      	ldr	r3, [sp, #16]
    842e:	2b00      	cmp	r3, #0
    8430:	d14f      	bne.n	84d2 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xca>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    8432:	9b01      	ldr	r3, [sp, #4]
    8434:	789b      	ldrb	r3, [r3, #2]
    8436:	4618      	mov	r0, r3
    8438:	f002 fef4 	bl	b224 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* Re-Init baudrate */
        Can_Ipw_InitBaudrate(Can_pControllerConfig);
    843c:	9801      	ldr	r0, [sp, #4]
    843e:	f7ff fc25 	bl	7c8c <Can_Ipw_InitBaudrate>

        /* Re-Init all Rx Objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    8442:	9801      	ldr	r0, [sp, #4]
    8444:	f000 fa0e 	bl	8864 <Can_Ipw_InitRx>
            Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][MbIdx] = FALSE;
        }
    #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */

    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    8448:	2300      	movs	r3, #0
    844a:	f88d 3017 	strb.w	r3, [sp, #23]
    844e:	e02f      	b.n	84b0 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
        {
            Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    8450:	9b01      	ldr	r3, [sp, #4]
    8452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8454:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8458:	009b      	lsls	r3, r3, #2
    845a:	4413      	add	r3, r2
    845c:	681b      	ldr	r3, [r3, #0]
    845e:	9303      	str	r3, [sp, #12]

            if (FALSE == Can_pHwObject->Can_bHwObjectUsesPolling)
    8460:	9b03      	ldr	r3, [sp, #12]
    8462:	7b1b      	ldrb	r3, [r3, #12]
    8464:	f083 0301 	eor.w	r3, r3, #1
    8468:	b2db      	uxtb	r3, r3
    846a:	2b00      	cmp	r3, #0
    846c:	d018      	beq.n	84a0 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x98>
            {
                switch (Can_pHwObject->Can_eReceiveType)
    846e:	9b03      	ldr	r3, [sp, #12]
    8470:	699b      	ldr	r3, [r3, #24]
    8472:	2b00      	cmp	r3, #0
    8474:	d003      	beq.n	847e <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x76>
    8476:	3b01      	subs	r3, #1
    8478:	2b01      	cmp	r3, #1
    847a:	d813      	bhi.n	84a4 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9c>
    847c:	e009      	b.n	8492 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x8a>
                {
                    case CAN_RX_NORMAL:
                    {
                        (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    847e:	9b01      	ldr	r3, [sp, #4]
    8480:	7898      	ldrb	r0, [r3, #2]
    8482:	9b03      	ldr	r3, [sp, #12]
    8484:	7f19      	ldrb	r1, [r3, #28]
    8486:	9b03      	ldr	r3, [sp, #12]
    8488:	7b1b      	ldrb	r3, [r3, #12]
    848a:	2200      	movs	r2, #0
    848c:	f001 fca2 	bl	9dd4 <FlexCAN_Ip_Receive>
                                                 Can_pHwObject->Can_u8HwBufferIndex, \
                                                 NULL_PTR, \
                                                 Can_pHwObject->Can_bHwObjectUsesPolling \
                                                );
                        break;
    8490:	e009      	b.n	84a6 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->pDmaDstAddr);
                        }
                        else
                    #endif
                        {
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    8492:	9b01      	ldr	r3, [sp, #4]
    8494:	789b      	ldrb	r3, [r3, #2]
    8496:	2100      	movs	r1, #0
    8498:	4618      	mov	r0, r3
    849a:	f001 fd99 	bl	9fd0 <FlexCAN_Ip_RxFifo>
                        }
                        break;
    849e:	e002      	b.n	84a6 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                    {
                        /* nothing to do(TX object) */
                        break;
                    }
                }
            }
    84a0:	bf00      	nop
    84a2:	e000      	b.n	84a6 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                        break;
    84a4:	bf00      	nop
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    84a6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    84aa:	3301      	adds	r3, #1
    84ac:	f88d 3017 	strb.w	r3, [sp, #23]
    84b0:	9b01      	ldr	r3, [sp, #4]
    84b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    84b6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    84ba:	429a      	cmp	r2, r3
    84bc:	d3c8      	bcc.n	8450 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x48>
        }
    #endif /* CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON */
        eRetVal = ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControlerErrorInit(Can_pControllerConfig)) ? (FLEXCAN_STATUS_SUCCESS) : (FLEXCAN_STATUS_ERROR);
    84be:	9801      	ldr	r0, [sp, #4]
    84c0:	f7ff ff74 	bl	83ac <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>
    84c4:	4603      	mov	r3, r0
    84c6:	2b00      	cmp	r3, #0
    84c8:	bf14      	ite	ne
    84ca:	2301      	movne	r3, #1
    84cc:	2300      	moveq	r3, #0
    84ce:	b2db      	uxtb	r3, r3
    84d0:	9304      	str	r3, [sp, #16]
    }
    return (Std_ReturnType)eRetVal;
    84d2:	9b04      	ldr	r3, [sp, #16]
    84d4:	b2db      	uxtb	r3, r3
}
    84d6:	4618      	mov	r0, r3
    84d8:	b007      	add	sp, #28
    84da:	f85d fb04 	ldr.w	pc, [sp], #4
    84de:	bf00      	nop
    84e0:	1fff8d10 	.word	0x1fff8d10

000084e4 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>:

/**
*   @brief      Set Controller to stop participating the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStopMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    84e4:	b500      	push	{lr}
    84e6:	b085      	sub	sp, #20
    84e8:	9001      	str	r0, [sp, #4]
    * that are not allowed in the new state. ⌋
    * [SWS_Can_00426] ⌈ Disabling of CAN interrupts shall not be executed, when CAN
    * interrupts have been disabled by function Can_DisableControllerInterrupts.⌋
    */
    Std_ReturnType eReturnValue;
    uint8 u8HwObjRefIdx = 0U;
    84ea:	2300      	movs	r3, #0
    84ec:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    uint8 u8Idx = 0U;
    84f0:	2300      	movs	r3, #0
    84f2:	f88d 300d 	strb.w	r3, [sp, #13]

    if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset))
    84f6:	9b01      	ldr	r3, [sp, #4]
    84f8:	789b      	ldrb	r3, [r3, #2]
    84fa:	4618      	mov	r0, r3
    84fc:	f002 f98c 	bl	a818 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    8500:	4603      	mov	r3, r0
    8502:	2b00      	cmp	r3, #0
    8504:	d160      	bne.n	85c8 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xe4>
    {
    #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_ConfigPN(Can_pControllerConfig->Can_u8ControllerOffset, FALSE, NULL_PTR);
    #endif

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    8506:	9b01      	ldr	r3, [sp, #4]
    8508:	785b      	ldrb	r3, [r3, #1]
    850a:	461a      	mov	r2, r3
    850c:	4b33      	ldr	r3, [pc, #204]	; (85dc <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xf8>)
    850e:	5c9b      	ldrb	r3, [r3, r2]
    8510:	2b00      	cmp	r3, #0
    8512:	d012      	beq.n	853a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
    {
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    8514:	9b01      	ldr	r3, [sp, #4]
    8516:	789b      	ldrb	r3, [r3, #2]
    8518:	4618      	mov	r0, r3
    851a:	f002 fe83 	bl	b224 <FlexCAN_Ip_DisableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    851e:	9b01      	ldr	r3, [sp, #4]
    8520:	7a5b      	ldrb	r3, [r3, #9]
    8522:	f083 0301 	eor.w	r3, r3, #1
    8526:	b2db      	uxtb	r3, r3
    8528:	2b00      	cmp	r3, #0
    852a:	d006      	beq.n	853a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    852c:	9b01      	ldr	r3, [sp, #4]
    852e:	789b      	ldrb	r3, [r3, #2]
    8530:	2200      	movs	r2, #0
    8532:	2104      	movs	r1, #4
    8534:	4618      	mov	r0, r3
    8536:	f002 fea1 	bl	b27c <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    853a:	2300      	movs	r3, #0
    853c:	f88d 300e 	strb.w	r3, [sp, #14]
    8540:	e032      	b.n	85a8 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xc4>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    8542:	9b01      	ldr	r3, [sp, #4]
    8544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8546:	f89d 300e 	ldrb.w	r3, [sp, #14]
    854a:	009b      	lsls	r3, r3, #2
    854c:	4413      	add	r3, r2
    854e:	681b      	ldr	r3, [r3, #0]
    8550:	9302      	str	r3, [sp, #8]

        if (CAN_TX_NORMAL == Can_pHwObject->Can_eReceiveType)
    8552:	9b02      	ldr	r3, [sp, #8]
    8554:	699b      	ldr	r3, [r3, #24]
    8556:	2b03      	cmp	r3, #3
    8558:	d119      	bne.n	858e <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xaa>
        {
            u8Idx = 0U;
    855a:	2300      	movs	r3, #0
    855c:	f88d 300d 	strb.w	r3, [sp, #13]
            do
            {
                (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex + u8Idx);
    8560:	9b01      	ldr	r3, [sp, #4]
    8562:	7898      	ldrb	r0, [r3, #2]
    8564:	9b02      	ldr	r3, [sp, #8]
    8566:	7f1a      	ldrb	r2, [r3, #28]
    8568:	f89d 300d 	ldrb.w	r3, [sp, #13]
    856c:	4413      	add	r3, r2
    856e:	b2db      	uxtb	r3, r3
    8570:	4619      	mov	r1, r3
    8572:	f002 ff09 	bl	b388 <FlexCAN_Ip_AbortTransfer>
                u8Idx++;
    8576:	f89d 300d 	ldrb.w	r3, [sp, #13]
    857a:	3301      	adds	r3, #1
    857c:	f88d 300d 	strb.w	r3, [sp, #13]
            }while (u8Idx < Can_pHwObject->Can_u8ObjectCount);
    8580:	9b02      	ldr	r3, [sp, #8]
    8582:	7b9b      	ldrb	r3, [r3, #14]
    8584:	f89d 200d 	ldrb.w	r2, [sp, #13]
    8588:	429a      	cmp	r2, r3
    858a:	d3e9      	bcc.n	8560 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x7c>
    858c:	e007      	b.n	859e <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xba>
        }
        else
        {
            (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex);
    858e:	9b01      	ldr	r3, [sp, #4]
    8590:	789a      	ldrb	r2, [r3, #2]
    8592:	9b02      	ldr	r3, [sp, #8]
    8594:	7f1b      	ldrb	r3, [r3, #28]
    8596:	4619      	mov	r1, r3
    8598:	4610      	mov	r0, r2
    859a:	f002 fef5 	bl	b388 <FlexCAN_Ip_AbortTransfer>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    859e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    85a2:	3301      	adds	r3, #1
    85a4:	f88d 300e 	strb.w	r3, [sp, #14]
    85a8:	9b01      	ldr	r3, [sp, #4]
    85aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    85ae:	f89d 200e 	ldrb.w	r2, [sp, #14]
    85b2:	429a      	cmp	r2, r3
    85b4:	d3c5      	bcc.n	8542 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x5e>
        }
    }
    eReturnValue = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    85b6:	9b01      	ldr	r3, [sp, #4]
    85b8:	789b      	ldrb	r3, [r3, #2]
    85ba:	4618      	mov	r0, r3
    85bc:	f002 fb82 	bl	acc4 <FlexCAN_Ip_SetStopMode_Privileged>
    85c0:	4603      	mov	r3, r0
    85c2:	f88d 300f 	strb.w	r3, [sp, #15]
    85c6:	e002      	b.n	85ce <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xea>
    }
    else
    {
        eReturnValue = E_NOT_OK;
    85c8:	2301      	movs	r3, #1
    85ca:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return eReturnValue;
    85ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    85d2:	4618      	mov	r0, r3
    85d4:	b005      	add	sp, #20
    85d6:	f85d fb04 	ldr.w	pc, [sp], #4
    85da:	bf00      	nop
    85dc:	1fff8fb4 	.word	0x1fff8fb4

000085e0 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>:
/**
*   @brief      Disable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    85e0:	b500      	push	{lr}
    85e2:	b083      	sub	sp, #12
    85e4:	9001      	str	r0, [sp, #4]
    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    85e6:	9b01      	ldr	r3, [sp, #4]
    85e8:	785b      	ldrb	r3, [r3, #1]
    85ea:	461a      	mov	r2, r3
    85ec:	4b10      	ldr	r3, [pc, #64]	; (8630 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    85ee:	5c9b      	ldrb	r3, [r3, r2]
    85f0:	2b00      	cmp	r3, #0
    85f2:	d018      	beq.n	8626 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    85f4:	9b01      	ldr	r3, [sp, #4]
    85f6:	789b      	ldrb	r3, [r3, #2]
    85f8:	4618      	mov	r0, r3
    85fa:	f002 fe13 	bl	b224 <FlexCAN_Ip_DisableInterrupts_Privileged>
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = FALSE;
    85fe:	9b01      	ldr	r3, [sp, #4]
    8600:	785b      	ldrb	r3, [r3, #1]
    8602:	461a      	mov	r2, r3
    8604:	4b0a      	ldr	r3, [pc, #40]	; (8630 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    8606:	2100      	movs	r1, #0
    8608:	5499      	strb	r1, [r3, r2]
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    860a:	9b01      	ldr	r3, [sp, #4]
    860c:	7a5b      	ldrb	r3, [r3, #9]
    860e:	f083 0301 	eor.w	r3, r3, #1
    8612:	b2db      	uxtb	r3, r3
    8614:	2b00      	cmp	r3, #0
    8616:	d006      	beq.n	8626 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    8618:	9b01      	ldr	r3, [sp, #4]
    861a:	789b      	ldrb	r3, [r3, #2]
    861c:	2200      	movs	r2, #0
    861e:	2104      	movs	r1, #4
    8620:	4618      	mov	r0, r3
    8622:	f002 fe2b 	bl	b27c <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
}
    8626:	bf00      	nop
    8628:	b003      	add	sp, #12
    862a:	f85d fb04 	ldr.w	pc, [sp], #4
    862e:	bf00      	nop
    8630:	1fff8fb4 	.word	0x1fff8fb4

00008634 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>:

/**
*   @brief      Enable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8634:	b500      	push	{lr}
    8636:	b083      	sub	sp, #12
    8638:	9001      	str	r0, [sp, #4]
    /*
    * [SWS_Can_00208] ⌈ The function Can_EnableControllerInterrupts shall perform no
    * action when Can_DisableControllerInterrupts has not been called before.⌋
    */
    if (FALSE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    863a:	9b01      	ldr	r3, [sp, #4]
    863c:	785b      	ldrb	r3, [r3, #1]
    863e:	461a      	mov	r2, r3
    8640:	4b11      	ldr	r3, [pc, #68]	; (8688 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    8642:	5c9b      	ldrb	r3, [r3, r2]
    8644:	f083 0301 	eor.w	r3, r3, #1
    8648:	b2db      	uxtb	r3, r3
    864a:	2b00      	cmp	r3, #0
    864c:	d018      	beq.n	8680 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x4c>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    864e:	9b01      	ldr	r3, [sp, #4]
    8650:	789b      	ldrb	r3, [r3, #2]
    8652:	4618      	mov	r0, r3
    8654:	f002 fdb8 	bl	b1c8 <FlexCAN_Ip_EnableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    8658:	9b01      	ldr	r3, [sp, #4]
    865a:	7a5b      	ldrb	r3, [r3, #9]
    865c:	f083 0301 	eor.w	r3, r3, #1
    8660:	b2db      	uxtb	r3, r3
    8662:	2b00      	cmp	r3, #0
    8664:	d006      	beq.n	8674 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x40>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    8666:	9b01      	ldr	r3, [sp, #4]
    8668:	789b      	ldrb	r3, [r3, #2]
    866a:	2201      	movs	r2, #1
    866c:	2104      	movs	r1, #4
    866e:	4618      	mov	r0, r3
    8670:	f002 fe04 	bl	b27c <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        /* update status */
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    8674:	9b01      	ldr	r3, [sp, #4]
    8676:	785b      	ldrb	r3, [r3, #1]
    8678:	461a      	mov	r2, r3
    867a:	4b03      	ldr	r3, [pc, #12]	; (8688 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    867c:	2101      	movs	r1, #1
    867e:	5499      	strb	r1, [r3, r2]
    }
}
    8680:	bf00      	nop
    8682:	b003      	add	sp, #12
    8684:	f85d fb04 	ldr.w	pc, [sp], #4
    8688:	1fff8fb4 	.word	0x1fff8fb4

0000868c <Can_43_FLEXCAN_Ipw_GetControllerErrorState>:

/**
*   @brief      Get Controller Error State
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerErrorState(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    868c:	b500      	push	{lr}
    868e:	b085      	sub	sp, #20
    8690:	9001      	str	r0, [sp, #4]
    8692:	9100      	str	r1, [sp, #0]
    uint32 Error = 0U;
    8694:	2300      	movs	r3, #0
    8696:	9303      	str	r3, [sp, #12]

    Error = FlexCAN_Ip_GetErrorStatus(Can_pControllerConfig->Can_u8ControllerOffset);
    8698:	9b01      	ldr	r3, [sp, #4]
    869a:	789b      	ldrb	r3, [r3, #2]
    869c:	4618      	mov	r0, r3
    869e:	f001 fe87 	bl	a3b0 <FlexCAN_Ip_GetErrorStatus>
    86a2:	9003      	str	r0, [sp, #12]

    *pValue = (uint8)((Error & FLEXCAN_ESR1_FLTCONF_MASK)>>FLEXCAN_ESR1_FLTCONF_SHIFT);
    86a4:	9b03      	ldr	r3, [sp, #12]
    86a6:	091b      	lsrs	r3, r3, #4
    86a8:	b2db      	uxtb	r3, r3
    86aa:	f003 0303 	and.w	r3, r3, #3
    86ae:	b2da      	uxtb	r2, r3
    86b0:	9b00      	ldr	r3, [sp, #0]
    86b2:	701a      	strb	r2, [r3, #0]
    return E_OK;
    86b4:	2300      	movs	r3, #0
}
    86b6:	4618      	mov	r0, r3
    86b8:	b005      	add	sp, #20
    86ba:	f85d fb04 	ldr.w	pc, [sp], #4

000086be <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>:

/**
*   @brief      Get Controller Tx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    86be:	b500      	push	{lr}
    86c0:	b083      	sub	sp, #12
    86c2:	9001      	str	r0, [sp, #4]
    86c4:	9100      	str	r1, [sp, #0]
     *pValue = FlexCAN_Ip_GetControllerTxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    86c6:	9b01      	ldr	r3, [sp, #4]
    86c8:	789b      	ldrb	r3, [r3, #2]
    86ca:	4618      	mov	r0, r3
    86cc:	f001 fe82 	bl	a3d4 <FlexCAN_Ip_GetControllerTxErrorCounter>
    86d0:	4603      	mov	r3, r0
    86d2:	461a      	mov	r2, r3
    86d4:	9b00      	ldr	r3, [sp, #0]
    86d6:	701a      	strb	r2, [r3, #0]
     return E_OK;
    86d8:	2300      	movs	r3, #0
}
    86da:	4618      	mov	r0, r3
    86dc:	b003      	add	sp, #12
    86de:	f85d fb04 	ldr.w	pc, [sp], #4

000086e2 <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>:

/**
*   @brief      Get Controller Rx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    86e2:	b500      	push	{lr}
    86e4:	b083      	sub	sp, #12
    86e6:	9001      	str	r0, [sp, #4]
    86e8:	9100      	str	r1, [sp, #0]

    *pValue = FlexCAN_Ip_GetControllerRxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    86ea:	9b01      	ldr	r3, [sp, #4]
    86ec:	789b      	ldrb	r3, [r3, #2]
    86ee:	4618      	mov	r0, r3
    86f0:	f001 fe82 	bl	a3f8 <FlexCAN_Ip_GetControllerRxErrorCounter>
    86f4:	4603      	mov	r3, r0
    86f6:	461a      	mov	r2, r3
    86f8:	9b00      	ldr	r3, [sp, #0]
    86fa:	701a      	strb	r2, [r3, #0]
    return E_OK;
    86fc:	2300      	movs	r3, #0
}
    86fe:	4618      	mov	r0, r3
    8700:	b003      	add	sp, #12
    8702:	f85d fb04 	ldr.w	pc, [sp], #4

00008706 <Can_43_FLEXCAN_Ipw_Write>:
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
    const Can_PduType * PduInfo
)
{
    8706:	b510      	push	{r4, lr}
    8708:	b08c      	sub	sp, #48	; 0x30
    870a:	9005      	str	r0, [sp, #20]
    870c:	9104      	str	r1, [sp, #16]
    870e:	9203      	str	r2, [sp, #12]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    8710:	2301      	movs	r3, #1
    8712:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_DataInfoType DataInfo;
    uint8 u8ObjIdx = 0U;
    8714:	2300      	movs	r3, #0
    8716:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
#if (CAN_43_FLEXCAN_TRIGGER_TRANSMIT_USED == STD_ON)
    PduInfoType CanIf_PduInfo;
    uint8 Data[64U];
#endif

    DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    871a:	2300      	movs	r3, #0
    871c:	9306      	str	r3, [sp, #24]
    DataInfo.data_length = 0U;
    871e:	2300      	movs	r3, #0
    8720:	9307      	str	r3, [sp, #28]
    DataInfo.fd_padding = 0U;
    8722:	2300      	movs	r3, #0
    8724:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    DataInfo.fd_enable = FALSE;
    8728:	2300      	movs	r3, #0
    872a:	f88d 3020 	strb.w	r3, [sp, #32]
    DataInfo.enable_brs = FALSE;
    872e:	2300      	movs	r3, #0
    8730:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    DataInfo.is_remote = FALSE;
    8734:	2300      	movs	r3, #0
    8736:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    DataInfo.is_polling = FALSE;
    873a:	2300      	movs	r3, #0
    873c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (CAN_TX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    8740:	9b04      	ldr	r3, [sp, #16]
    8742:	699b      	ldr	r3, [r3, #24]
    8744:	2b03      	cmp	r3, #3
    8746:	d177      	bne.n	8838 <Can_43_FLEXCAN_Ipw_Write+0x132>
    {
        DataInfo.msg_id_type = ((PduInfo->id & CAN_43_FLEXCAN_EXTENDED_ID_U32) != 0U) ? FLEXCAN_MSG_ID_EXT : FLEXCAN_MSG_ID_STD;
    8748:	9b03      	ldr	r3, [sp, #12]
    874a:	681b      	ldr	r3, [r3, #0]
    874c:	0fdb      	lsrs	r3, r3, #31
    874e:	9306      	str	r3, [sp, #24]
        if (Can_pHwObjectConfig->Can_u8PayloadLength <=  PduInfo->length)
    8750:	9b04      	ldr	r3, [sp, #16]
    8752:	7c1a      	ldrb	r2, [r3, #16]
    8754:	9b03      	ldr	r3, [sp, #12]
    8756:	799b      	ldrb	r3, [r3, #6]
    8758:	429a      	cmp	r2, r3
    875a:	d803      	bhi.n	8764 <Can_43_FLEXCAN_Ipw_Write+0x5e>
        {
            DataInfo.data_length = Can_pHwObjectConfig->Can_u8PayloadLength;
    875c:	9b04      	ldr	r3, [sp, #16]
    875e:	7c1b      	ldrb	r3, [r3, #16]
    8760:	9307      	str	r3, [sp, #28]
    8762:	e002      	b.n	876a <Can_43_FLEXCAN_Ipw_Write+0x64>
        }
        else
        {
            DataInfo.data_length = PduInfo->length;
    8764:	9b03      	ldr	r3, [sp, #12]
    8766:	799b      	ldrb	r3, [r3, #6]
    8768:	9307      	str	r3, [sp, #28]
        }
#if (CAN_43_FLEXCAN_FEATURE_HAS_FD == STD_ON)
        DataInfo.fd_padding = Can_pHwObjectConfig->Can_u8PaddingValue;
    876a:	9b04      	ldr	r3, [sp, #16]
    876c:	7c5b      	ldrb	r3, [r3, #17]
    876e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        DataInfo.fd_enable = ((PduInfo->id & CAN_43_FLEXCAN_FD_FRAME_U32) != 0U) ? TRUE : FALSE;
    8772:	9b03      	ldr	r3, [sp, #12]
    8774:	681b      	ldr	r3, [r3, #0]
    8776:	0f9b      	lsrs	r3, r3, #30
    8778:	f003 0301 	and.w	r3, r3, #1
    877c:	2b00      	cmp	r3, #0
    877e:	bf14      	ite	ne
    8780:	2301      	movne	r3, #1
    8782:	2300      	moveq	r3, #0
    8784:	b2db      	uxtb	r3, r3
    8786:	f88d 3020 	strb.w	r3, [sp, #32]
    #if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
            DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID]].Can_bBitRateSwitch;
    878a:	9b05      	ldr	r3, [sp, #20]
    878c:	6a1a      	ldr	r2, [r3, #32]
    878e:	9b05      	ldr	r3, [sp, #20]
    8790:	785b      	ldrb	r3, [r3, #1]
    8792:	4619      	mov	r1, r3
    8794:	4b31      	ldr	r3, [pc, #196]	; (885c <Can_43_FLEXCAN_Ipw_Write+0x156>)
    8796:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    879a:	4619      	mov	r1, r3
    879c:	2316      	movs	r3, #22
    879e:	fb01 f303 	mul.w	r3, r1, r3
    87a2:	4413      	add	r3, r2
    87a4:	781b      	ldrb	r3, [r3, #0]
    87a6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    #else
        DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bBitRateSwitch;
    #endif
#endif
        DataInfo.is_remote = FALSE;
    87aa:	2300      	movs	r3, #0
    87ac:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        DataInfo.is_polling = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
    87b0:	9b04      	ldr	r3, [sp, #16]
    87b2:	7b1b      	ldrb	r3, [r3, #12]
    87b4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        do
        {
            eRetVal = FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx);
    87b8:	9b05      	ldr	r3, [sp, #20]
    87ba:	7898      	ldrb	r0, [r3, #2]
    87bc:	9b04      	ldr	r3, [sp, #16]
    87be:	7f1a      	ldrb	r2, [r3, #28]
    87c0:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    87c4:	4413      	add	r3, r2
    87c6:	b2db      	uxtb	r3, r3
    87c8:	4619      	mov	r1, r3
    87ca:	f001 fcdf 	bl	a18c <FlexCAN_Ip_GetTransferStatus>
    87ce:	900b      	str	r0, [sp, #44]	; 0x2c
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    87d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    87d2:	2b00      	cmp	r3, #0
    87d4:	d122      	bne.n	881c <Can_43_FLEXCAN_Ipw_Write+0x116>
            {
                #if ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))
                Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = PduInfo->swPduHandle;
    87d6:	9b05      	ldr	r3, [sp, #20]
    87d8:	785b      	ldrb	r3, [r3, #1]
    87da:	461c      	mov	r4, r3
    87dc:	9b04      	ldr	r3, [sp, #16]
    87de:	7f1b      	ldrb	r3, [r3, #28]
    87e0:	461a      	mov	r2, r3
    87e2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    87e6:	4413      	add	r3, r2
    87e8:	9a03      	ldr	r2, [sp, #12]
    87ea:	8890      	ldrh	r0, [r2, #4]
    87ec:	491c      	ldr	r1, [pc, #112]	; (8860 <Can_43_FLEXCAN_Ipw_Write+0x15a>)
    87ee:	0162      	lsls	r2, r4, #5
    87f0:	4413      	add	r3, r2
    87f2:	4602      	mov	r2, r0
    87f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    }
                }
                else
                {
            #endif
                    eRetVal = FlexCAN_Ip_Send(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx, &DataInfo, PduInfo->id, PduInfo->sdu);
    87f8:	9b05      	ldr	r3, [sp, #20]
    87fa:	7898      	ldrb	r0, [r3, #2]
    87fc:	9b04      	ldr	r3, [sp, #16]
    87fe:	7f1a      	ldrb	r2, [r3, #28]
    8800:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8804:	4413      	add	r3, r2
    8806:	b2d9      	uxtb	r1, r3
    8808:	9b03      	ldr	r3, [sp, #12]
    880a:	681c      	ldr	r4, [r3, #0]
    880c:	9b03      	ldr	r3, [sp, #12]
    880e:	689b      	ldr	r3, [r3, #8]
    8810:	aa06      	add	r2, sp, #24
    8812:	9300      	str	r3, [sp, #0]
    8814:	4623      	mov	r3, r4
    8816:	f001 fa4d 	bl	9cb4 <FlexCAN_Ip_Send>
    881a:	900b      	str	r0, [sp, #44]	; 0x2c
                /* Revert to FALSE due to the MB was not transmitted successfully */
                Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = FALSE;
            }
            #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */
            }
            u8ObjIdx++;
    881c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8820:	3301      	adds	r3, #1
    8822:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        } while ((u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount) && (FLEXCAN_STATUS_BUSY == eRetVal));
    8826:	9b04      	ldr	r3, [sp, #16]
    8828:	7b9b      	ldrb	r3, [r3, #14]
    882a:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    882e:	429a      	cmp	r2, r3
    8830:	d202      	bcs.n	8838 <Can_43_FLEXCAN_Ipw_Write+0x132>
    8832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8834:	2b02      	cmp	r3, #2
    8836:	d0bf      	beq.n	87b8 <Can_43_FLEXCAN_Ipw_Write+0xb2>
    }

    if ((FLEXCAN_STATUS_SUCCESS != eRetVal) && (FLEXCAN_STATUS_BUSY != eRetVal))
    8838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    883a:	2b00      	cmp	r3, #0
    883c:	d004      	beq.n	8848 <Can_43_FLEXCAN_Ipw_Write+0x142>
    883e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8840:	2b02      	cmp	r3, #2
    8842:	d001      	beq.n	8848 <Can_43_FLEXCAN_Ipw_Write+0x142>
    {
        eRetVal = FLEXCAN_STATUS_ERROR;
    8844:	2301      	movs	r3, #1
    8846:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    return ((FLEXCAN_STATUS_BUSY == eRetVal) ? ((Std_ReturnType)CAN_BUSY) : ((Std_ReturnType)eRetVal));
    8848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    884a:	2b02      	cmp	r3, #2
    884c:	d002      	beq.n	8854 <Can_43_FLEXCAN_Ipw_Write+0x14e>
    884e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8850:	b2db      	uxtb	r3, r3
    8852:	e000      	b.n	8856 <Can_43_FLEXCAN_Ipw_Write+0x150>
    8854:	2302      	movs	r3, #2
}
    8856:	4618      	mov	r0, r3
    8858:	b00c      	add	sp, #48	; 0x30
    885a:	bd10      	pop	{r4, pc}
    885c:	1fff8fb0 	.word	0x1fff8fb0
    8860:	1fff8f30 	.word	0x1fff8f30

00008864 <Can_Ipw_InitRx>:

static void Can_Ipw_InitRx(const Can_43_FLEXCAN_ControllerConfigType * Can_pController)
{
    8864:	b500      	push	{lr}
    8866:	b089      	sub	sp, #36	; 0x24
    8868:	9001      	str	r0, [sp, #4]
    uint8 u8HwObjRefIdx = 0U;
    886a:	2300      	movs	r3, #0
    886c:	f88d 301f 	strb.w	r3, [sp, #31]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    Flexcan_Ip_DataInfoType DataInfo;

    /* This function just is called only if controller is in freeze mode */
    /* Always enable individual mask , Already in freeze mode */
    (void)FlexCAN_Ip_SetRxMaskType(Can_pController->Can_u8ControllerOffset, FLEXCAN_RX_MASK_INDIVIDUAL);
    8870:	9b01      	ldr	r3, [sp, #4]
    8872:	789b      	ldrb	r3, [r3, #2]
    8874:	2101      	movs	r1, #1
    8876:	4618      	mov	r0, r3
    8878:	f002 fa42 	bl	ad00 <FlexCAN_Ip_SetRxMaskType_Privileged>

    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    887c:	2300      	movs	r3, #0
    887e:	f88d 301f 	strb.w	r3, [sp, #31]
    8882:	e03a      	b.n	88fa <Can_Ipw_InitRx+0x96>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pController->Can_ppHwObject[u8HwObjRefIdx];
    8884:	9b01      	ldr	r3, [sp, #4]
    8886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8888:	f89d 301f 	ldrb.w	r3, [sp, #31]
    888c:	009b      	lsls	r3, r3, #2
    888e:	4413      	add	r3, r2
    8890:	681b      	ldr	r3, [r3, #0]
    8892:	9306      	str	r3, [sp, #24]

        if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    8894:	9b06      	ldr	r3, [sp, #24]
    8896:	699b      	ldr	r3, [r3, #24]
    8898:	2b00      	cmp	r3, #0
    889a:	d121      	bne.n	88e0 <Can_Ipw_InitRx+0x7c>
        {
            DataInfo.fd_enable = FALSE;
    889c:	2300      	movs	r3, #0
    889e:	f88d 3010 	strb.w	r3, [sp, #16]
            DataInfo.data_length = 0U;
    88a2:	2300      	movs	r3, #0
    88a4:	9303      	str	r3, [sp, #12]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    88a6:	9b06      	ldr	r3, [sp, #24]
    88a8:	689b      	ldr	r3, [r3, #8]
    88aa:	2b00      	cmp	r3, #0
    88ac:	d002      	beq.n	88b4 <Can_Ipw_InitRx+0x50>
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_EXT;
    88ae:	2301      	movs	r3, #1
    88b0:	9302      	str	r3, [sp, #8]
    88b2:	e001      	b.n	88b8 <Can_Ipw_InitRx+0x54>
            }
            else
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    88b4:	2300      	movs	r3, #0
    88b6:	9302      	str	r3, [sp, #8]
            }
            (void)FlexCAN_Ip_ConfigRxMb(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, &DataInfo, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterCode);
    88b8:	9b01      	ldr	r3, [sp, #4]
    88ba:	7898      	ldrb	r0, [r3, #2]
    88bc:	9b06      	ldr	r3, [sp, #24]
    88be:	7f19      	ldrb	r1, [r3, #28]
    88c0:	9b06      	ldr	r3, [sp, #24]
    88c2:	695b      	ldr	r3, [r3, #20]
    88c4:	681b      	ldr	r3, [r3, #0]
    88c6:	aa02      	add	r2, sp, #8
    88c8:	f001 fa40 	bl	9d4c <FlexCAN_Ip_ConfigRxMb>
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterMask);
    88cc:	9b01      	ldr	r3, [sp, #4]
    88ce:	7898      	ldrb	r0, [r3, #2]
    88d0:	9b06      	ldr	r3, [sp, #24]
    88d2:	7f19      	ldrb	r1, [r3, #28]
    88d4:	9b06      	ldr	r3, [sp, #24]
    88d6:	695b      	ldr	r3, [r3, #20]
    88d8:	685b      	ldr	r3, [r3, #4]
    88da:	461a      	mov	r2, r3
    88dc:	f001 ffc8 	bl	a870 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
        }

        if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    88e0:	9b06      	ldr	r3, [sp, #24]
    88e2:	699b      	ldr	r3, [r3, #24]
    88e4:	2b01      	cmp	r3, #1
    88e6:	d103      	bne.n	88f0 <Can_Ipw_InitRx+0x8c>
        {
            Can_Ipw_InitLegacyFifoFilter(Can_pController, Can_pHwObject);
    88e8:	9906      	ldr	r1, [sp, #24]
    88ea:	9801      	ldr	r0, [sp, #4]
    88ec:	f7fe ffab 	bl	7846 <Can_Ipw_InitLegacyFifoFilter>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    88f0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    88f4:	3301      	adds	r3, #1
    88f6:	f88d 301f 	strb.w	r3, [sp, #31]
    88fa:	9b01      	ldr	r3, [sp, #4]
    88fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    8900:	f89d 201f 	ldrb.w	r2, [sp, #31]
    8904:	429a      	cmp	r2, r3
    8906:	d3bd      	bcc.n	8884 <Can_Ipw_InitRx+0x20>
        }
    }
}
    8908:	bf00      	nop
    890a:	bf00      	nop
    890c:	b009      	add	sp, #36	; 0x24
    890e:	f85d fb04 	ldr.w	pc, [sp], #4

00008912 <Can_43_FLEXCAN_Ipw_MainFunction_Mode>:
void Can_43_FLEXCAN_Ipw_MainFunction_Mode
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    Can_ControllerStateType * Can_pControllerState
)
{
    8912:	b500      	push	{lr}
    8914:	b083      	sub	sp, #12
    8916:	9001      	str	r0, [sp, #4]
    8918:	9100      	str	r1, [sp, #0]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    if (CAN_CS_STARTED == *Can_pControllerState)
    891a:	9b00      	ldr	r3, [sp, #0]
    891c:	681b      	ldr	r3, [r3, #0]
    891e:	2b01      	cmp	r3, #1
    8920:	d114      	bne.n	894c <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x3a>
    {
        if (FALSE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    8922:	9b01      	ldr	r3, [sp, #4]
    8924:	789b      	ldrb	r3, [r3, #2]
    8926:	4618      	mov	r0, r3
    8928:	f002 f994 	bl	ac54 <FlexCAN_Ip_GetStartMode_Privileged>
    892c:	4603      	mov	r3, r0
    892e:	f083 0301 	eor.w	r3, r3, #1
    8932:	b2db      	uxtb	r3, r3
    8934:	2b00      	cmp	r3, #0
    8936:	d01e      	beq.n	8976 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        {
            *Can_pControllerState = CAN_CS_STOPPED;
    8938:	9b00      	ldr	r3, [sp, #0]
    893a:	2202      	movs	r2, #2
    893c:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STOPPED);
    893e:	9b01      	ldr	r3, [sp, #4]
    8940:	781b      	ldrb	r3, [r3, #0]
    8942:	2102      	movs	r1, #2
    8944:	4618      	mov	r0, r3
    8946:	f006 fe1f 	bl	f588 <CanIf_ControllerModeIndication>
    }
    else
    {
        /* nothing to do */
    }
}
    894a:	e014      	b.n	8976 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
    else if (CAN_CS_STOPPED == *Can_pControllerState)
    894c:	9b00      	ldr	r3, [sp, #0]
    894e:	681b      	ldr	r3, [r3, #0]
    8950:	2b02      	cmp	r3, #2
    8952:	d110      	bne.n	8976 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        if (TRUE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    8954:	9b01      	ldr	r3, [sp, #4]
    8956:	789b      	ldrb	r3, [r3, #2]
    8958:	4618      	mov	r0, r3
    895a:	f002 f97b 	bl	ac54 <FlexCAN_Ip_GetStartMode_Privileged>
    895e:	4603      	mov	r3, r0
    8960:	2b00      	cmp	r3, #0
    8962:	d008      	beq.n	8976 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
            *Can_pControllerState = CAN_CS_STARTED;
    8964:	9b00      	ldr	r3, [sp, #0]
    8966:	2201      	movs	r2, #1
    8968:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STARTED);
    896a:	9b01      	ldr	r3, [sp, #4]
    896c:	781b      	ldrb	r3, [r3, #0]
    896e:	2101      	movs	r1, #1
    8970:	4618      	mov	r0, r3
    8972:	f006 fe09 	bl	f588 <CanIf_ControllerModeIndication>
}
    8976:	bf00      	nop
    8978:	b003      	add	sp, #12
    897a:	f85d fb04 	ldr.w	pc, [sp], #4

0000897e <Can_43_FLEXCAN_Ipw_ProcessHwObject>:
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_ConfigType * Can_pConfig,
        uint8 u8MbIdx,
        Can_43_FLEXCAN_MbType mbType
    )
    {
    897e:	b500      	push	{lr}
    8980:	b085      	sub	sp, #20
    8982:	9003      	str	r0, [sp, #12]
    8984:	9102      	str	r1, [sp, #8]
    8986:	9300      	str	r3, [sp, #0]
    8988:	4613      	mov	r3, r2
    898a:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (mbType)
    898e:	9b00      	ldr	r3, [sp, #0]
    8990:	2b03      	cmp	r3, #3
    8992:	d009      	beq.n	89a8 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x2a>
    8994:	9b00      	ldr	r3, [sp, #0]
    8996:	2b03      	cmp	r3, #3
    8998:	d821      	bhi.n	89de <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
    899a:	9b00      	ldr	r3, [sp, #0]
    899c:	2b00      	cmp	r3, #0
    899e:	d00c      	beq.n	89ba <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x3c>
    89a0:	9b00      	ldr	r3, [sp, #0]
    89a2:	2b01      	cmp	r3, #1
    89a4:	d012      	beq.n	89cc <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x4e>
                break;
            }
            default:
            {
                /* prevent misra */
                break;
    89a6:	e01a      	b.n	89de <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
                Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    89a8:	9b02      	ldr	r3, [sp, #8]
    89aa:	691b      	ldr	r3, [r3, #16]
    89ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
    89b0:	4619      	mov	r1, r3
    89b2:	9803      	ldr	r0, [sp, #12]
    89b4:	f7ff fa24 	bl	7e00 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>
                break;
    89b8:	e012      	b.n	89e0 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    89ba:	9b02      	ldr	r3, [sp, #8]
    89bc:	691b      	ldr	r3, [r3, #16]
    89be:	f89d 2007 	ldrb.w	r2, [sp, #7]
    89c2:	4619      	mov	r1, r3
    89c4:	9803      	ldr	r0, [sp, #12]
    89c6:	f7ff fa67 	bl	7e98 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    89ca:	e009      	b.n	89e0 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                    Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    89cc:	9b02      	ldr	r3, [sp, #8]
    89ce:	691b      	ldr	r3, [r3, #16]
    89d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    89d4:	4619      	mov	r1, r3
    89d6:	9803      	ldr	r0, [sp, #12]
    89d8:	f7ff fa5e 	bl	7e98 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    89dc:	e000      	b.n	89e0 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                break;
    89de:	bf00      	nop
            }
        }
    }
    89e0:	bf00      	nop
    89e2:	b005      	add	sp, #20
    89e4:	f85d fb04 	ldr.w	pc, [sp], #4

000089e8 <Can_43_FLEXCAN_CommonIrqCallback>:
void Can_43_FLEXCAN_CommonIrqCallback(uint8 u8Instance,
                           Flexcan_Ip_EventType event,
                           uint32 u32buffIdx,
                           const Flexcan_Ip_StateType *driverState
                          )
{
    89e8:	b500      	push	{lr}
    89ea:	b085      	sub	sp, #20
    89ec:	9102      	str	r1, [sp, #8]
    89ee:	9201      	str	r2, [sp, #4]
    89f0:	9300      	str	r3, [sp, #0]
    89f2:	4603      	mov	r3, r0
    89f4:	f88d 300f 	strb.w	r3, [sp, #15]
    else
    {
#endif /* CAN_43_FLEXCAN_FEATURE_HAS_ENHANCED_RX_FIFO */
    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        /* This callback is just used for interrupt buffter */
        if (FALSE == (driverState->mbs[u32buffIdx].isPolling))
    89f8:	9a00      	ldr	r2, [sp, #0]
    89fa:	9b01      	ldr	r3, [sp, #4]
    89fc:	011b      	lsls	r3, r3, #4
    89fe:	4413      	add	r3, r2
    8a00:	3308      	adds	r3, #8
    8a02:	781b      	ldrb	r3, [r3, #0]
    8a04:	f083 0301 	eor.w	r3, r3, #1
    8a08:	b2db      	uxtb	r3, r3
    8a0a:	2b00      	cmp	r3, #0
    8a0c:	d03b      	beq.n	8a86 <Can_43_FLEXCAN_CommonIrqCallback+0x9e>
    8a0e:	9b02      	ldr	r3, [sp, #8]
    8a10:	2b04      	cmp	r3, #4
    8a12:	d83a      	bhi.n	8a8a <Can_43_FLEXCAN_CommonIrqCallback+0xa2>
    8a14:	a201      	add	r2, pc, #4	; (adr r2, 8a1c <Can_43_FLEXCAN_CommonIrqCallback+0x34>)
    8a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8a1a:	bf00      	nop
    8a1c:	00008a43 	.word	0x00008a43
    8a20:	00008a55 	.word	0x00008a55
    8a24:	00008a67 	.word	0x00008a67
    8a28:	00008a77 	.word	0x00008a77
    8a2c:	00008a31 	.word	0x00008a31
        {
            switch (event)
            {
                case FLEXCAN_EVENT_TX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_TX_NORMAL);
    8a30:	9b01      	ldr	r3, [sp, #4]
    8a32:	b2d9      	uxtb	r1, r3
    8a34:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8a38:	2203      	movs	r2, #3
    8a3a:	4618      	mov	r0, r3
    8a3c:	f7fe fe1e 	bl	767c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8a40:	e024      	b.n	8a8c <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_NORMAL);
    8a42:	9b01      	ldr	r3, [sp, #4]
    8a44:	b2d9      	uxtb	r1, r3
    8a46:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8a4a:	2200      	movs	r2, #0
    8a4c:	4618      	mov	r0, r3
    8a4e:	f7fe fe15 	bl	767c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8a52:	e01b      	b.n	8a8c <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_LEGACY_FIFO);
    8a54:	9b01      	ldr	r3, [sp, #4]
    8a56:	b2d9      	uxtb	r1, r3
    8a58:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8a5c:	2201      	movs	r2, #1
    8a5e:	4618      	mov	r0, r3
    8a60:	f7fe fe0c 	bl	767c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8a64:	e012      	b.n	8a8c <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_WARNING:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 6U, CAN_RX_LEGACY_FIFO);
    8a66:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8a6a:	2201      	movs	r2, #1
    8a6c:	2106      	movs	r1, #6
    8a6e:	4618      	mov	r0, r3
    8a70:	f7fe fe04 	bl	767c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8a74:	e00a      	b.n	8a8c <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_OVERFLOW:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 7U, CAN_RX_LEGACY_FIFO);
    8a76:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8a7a:	2201      	movs	r2, #1
    8a7c:	2107      	movs	r1, #7
    8a7e:	4618      	mov	r0, r3
    8a80:	f7fe fdfc 	bl	767c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8a84:	e002      	b.n	8a8c <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                {
                    /* nothing to do */
                    break;
                }
            }
        }
    8a86:	bf00      	nop
    8a88:	e000      	b.n	8a8c <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                    break;
    8a8a:	bf00      	nop
        Can_43_FLEXCAN_ProcessPNInterrupt(u8Instance);
    }
#endif /* (CAN_43_FLEXCAN_FEATURE_HAS_PRETENDED_NETWORKING == STD_ON) */
    (void)u32buffIdx;
    (void)driverState;
}
    8a8c:	bf00      	nop
    8a8e:	b005      	add	sp, #20
    8a90:	f85d fb04 	ldr.w	pc, [sp], #4

00008a94 <Can_43_FLEXCAN_ErrorIrqCallback>:
void Can_43_FLEXCAN_ErrorIrqCallback(uint8 u8Instance,
                          Flexcan_Ip_EventType event,
                          uint32 u32ErrStatus,
                          const Flexcan_Ip_StateType *driverState
                         )
{
    8a94:	b500      	push	{lr}
    8a96:	b085      	sub	sp, #20
    8a98:	9102      	str	r1, [sp, #8]
    8a9a:	9201      	str	r2, [sp, #4]
    8a9c:	9300      	str	r3, [sp, #0]
    8a9e:	4603      	mov	r3, r0
    8aa0:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) driverState; /* not used yet */
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON)
    (void) u32ErrStatus; /* prevent compiler warning */
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON) */

    switch (event)
    8aa4:	9b02      	ldr	r3, [sp, #8]
    8aa6:	2b07      	cmp	r3, #7
    8aa8:	d105      	bne.n	8ab6 <Can_43_FLEXCAN_ErrorIrqCallback+0x22>
        }
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON) */
        /* this function is called for both interrupt & polling */
        case FLEXCAN_EVENT_BUSOFF:
        {
            Can_43_FLEXCAN_ProcessBusOffInterrupt(u8Instance);
    8aaa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8aae:	4618      	mov	r0, r3
    8ab0:	f7fe fe26 	bl	7700 <Can_43_FLEXCAN_ProcessBusOffInterrupt>
            break;
    8ab4:	e000      	b.n	8ab8 <Can_43_FLEXCAN_ErrorIrqCallback+0x24>
        }
        default:
        {
            /* nothing to do */
            break;
    8ab6:	bf00      	nop
        }
    }
}
    8ab8:	bf00      	nop
    8aba:	b005      	add	sp, #20
    8abc:	f85d fb04 	ldr.w	pc, [sp], #4

00008ac0 <FlexCAN_SetRxFifoGlobalMask>:
 *
 * @param[in]   base  The FlexCAN base address
 * @param[in]   Mask     Sets mask
 */
static inline void FlexCAN_SetRxFifoGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    8ac0:	b082      	sub	sp, #8
    8ac2:	9001      	str	r0, [sp, #4]
    8ac4:	9100      	str	r1, [sp, #0]
    (base->RXFGMASK) = Mask;
    8ac6:	9b01      	ldr	r3, [sp, #4]
    8ac8:	9a00      	ldr	r2, [sp, #0]
    8aca:	649a      	str	r2, [r3, #72]	; 0x48
}
    8acc:	bf00      	nop
    8ace:	b002      	add	sp, #8
    8ad0:	4770      	bx	lr

00008ad2 <FlexCAN_SetTDCOffset>:
 */
static inline void FlexCAN_SetTDCOffset(FLEXCAN_Type * base,
                                        boolean enable,
                                        uint8 offset
                                       )
{
    8ad2:	b084      	sub	sp, #16
    8ad4:	9001      	str	r0, [sp, #4]
    8ad6:	460b      	mov	r3, r1
    8ad8:	f88d 3003 	strb.w	r3, [sp, #3]
    8adc:	4613      	mov	r3, r2
    8ade:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 tmp;

    tmp = base->FDCTRL;
    8ae2:	9b01      	ldr	r3, [sp, #4]
    8ae4:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    8ae8:	9303      	str	r3, [sp, #12]
    tmp &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    8aea:	9b03      	ldr	r3, [sp, #12]
    8aec:	f423 431f 	bic.w	r3, r3, #40704	; 0x9f00
    8af0:	9303      	str	r3, [sp, #12]

    if (enable)
    8af2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8af6:	2b00      	cmp	r3, #0
    8af8:	d00b      	beq.n	8b12 <FlexCAN_SetTDCOffset+0x40>
    {
        tmp = tmp | FLEXCAN_FDCTRL_TDCEN_MASK;
    8afa:	9b03      	ldr	r3, [sp, #12]
    8afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8b00:	9303      	str	r3, [sp, #12]
        tmp = tmp | FLEXCAN_FDCTRL_TDCOFF(offset);
    8b02:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8b06:	021b      	lsls	r3, r3, #8
    8b08:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    8b0c:	9a03      	ldr	r2, [sp, #12]
    8b0e:	4313      	orrs	r3, r2
    8b10:	9303      	str	r3, [sp, #12]
    }

    base->FDCTRL = tmp;
    8b12:	9b01      	ldr	r3, [sp, #4]
    8b14:	9a03      	ldr	r2, [sp, #12]
    8b16:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    8b1a:	bf00      	nop
    8b1c:	b004      	add	sp, #16
    8b1e:	4770      	bx	lr

00008b20 <FlexCAN_IsEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsEnabled(const FLEXCAN_Type * pBase)
{
    8b20:	b082      	sub	sp, #8
    8b22:	9001      	str	r0, [sp, #4]
    return (((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U) ? FALSE : TRUE;
    8b24:	9b01      	ldr	r3, [sp, #4]
    8b26:	681b      	ldr	r3, [r3, #0]
    8b28:	43db      	mvns	r3, r3
    8b2a:	0fdb      	lsrs	r3, r3, #31
    8b2c:	b2db      	uxtb	r3, r3
}
    8b2e:	4618      	mov	r0, r3
    8b30:	b002      	add	sp, #8
    8b32:	4770      	bx	lr

00008b34 <FlexCAN_SetFDEnabled>:
 */
static inline void FlexCAN_SetFDEnabled(FLEXCAN_Type * base,
                                        boolean enableFD,
                                        boolean enableBRS
                                       )
{
    8b34:	b082      	sub	sp, #8
    8b36:	9001      	str	r0, [sp, #4]
    8b38:	460b      	mov	r3, r1
    8b3a:	f88d 3003 	strb.w	r3, [sp, #3]
    8b3e:	4613      	mov	r3, r2
    8b40:	f88d 3002 	strb.w	r3, [sp, #2]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FDEN_MASK) | FLEXCAN_MCR_FDEN(enableFD ? 1UL : 0UL);
    8b44:	9b01      	ldr	r3, [sp, #4]
    8b46:	681b      	ldr	r3, [r3, #0]
    8b48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    8b4c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8b50:	2a00      	cmp	r2, #0
    8b52:	d002      	beq.n	8b5a <FlexCAN_SetFDEnabled+0x26>
    8b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8b58:	e000      	b.n	8b5c <FlexCAN_SetFDEnabled+0x28>
    8b5a:	2200      	movs	r2, #0
    8b5c:	431a      	orrs	r2, r3
    8b5e:	9b01      	ldr	r3, [sp, #4]
    8b60:	601a      	str	r2, [r3, #0]

    /* Enable BitRate Switch support from BRS_TX_MB field or ignore it */
    base->FDCTRL = (base->FDCTRL & ~FLEXCAN_FDCTRL_FDRATE_MASK) | FLEXCAN_FDCTRL_FDRATE(enableBRS ? 1UL : 0UL);
    8b62:	9b01      	ldr	r3, [sp, #4]
    8b64:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    8b68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    8b6c:	f89d 2002 	ldrb.w	r2, [sp, #2]
    8b70:	2a00      	cmp	r2, #0
    8b72:	d002      	beq.n	8b7a <FlexCAN_SetFDEnabled+0x46>
    8b74:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8b78:	e000      	b.n	8b7c <FlexCAN_SetFDEnabled+0x48>
    8b7a:	2200      	movs	r2, #0
    8b7c:	431a      	orrs	r2, r3
    8b7e:	9b01      	ldr	r3, [sp, #4]
    8b80:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00

    /* Disable Transmission Delay Compensation by default */
    base->FDCTRL &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    8b84:	9b01      	ldr	r3, [sp, #4]
    8b86:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    8b8a:	f423 421f 	bic.w	r2, r3, #40704	; 0x9f00
    8b8e:	9b01      	ldr	r3, [sp, #4]
    8b90:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    8b94:	bf00      	nop
    8b96:	b002      	add	sp, #8
    8b98:	4770      	bx	lr

00008b9a <FlexCAN_SetListenOnlyMode>:
 *
 * @param   base    The FlexCAN base address
 * @param   enable  TRUE to enable; FALSE to disable
 */
static inline void FlexCAN_SetListenOnlyMode(FLEXCAN_Type * base, boolean enableListenOnly)
{
    8b9a:	b082      	sub	sp, #8
    8b9c:	9001      	str	r0, [sp, #4]
    8b9e:	460b      	mov	r3, r1
    8ba0:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(enableListenOnly ? 1UL : 0UL);
    8ba4:	9b01      	ldr	r3, [sp, #4]
    8ba6:	685b      	ldr	r3, [r3, #4]
    8ba8:	f023 0308 	bic.w	r3, r3, #8
    8bac:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8bb0:	2a00      	cmp	r2, #0
    8bb2:	d001      	beq.n	8bb8 <FlexCAN_SetListenOnlyMode+0x1e>
    8bb4:	2208      	movs	r2, #8
    8bb6:	e000      	b.n	8bba <FlexCAN_SetListenOnlyMode+0x20>
    8bb8:	2200      	movs	r2, #0
    8bba:	431a      	orrs	r2, r3
    8bbc:	9b01      	ldr	r3, [sp, #4]
    8bbe:	605a      	str	r2, [r3, #4]
}
    8bc0:	bf00      	nop
    8bc2:	b002      	add	sp, #8
    8bc4:	4770      	bx	lr

00008bc6 <FlexCAN_UnlockRxMsgBuff>:
 * @brief Unlocks the FlexCAN Rx message buffer.
 *
 * @param   base     The FlexCAN base address
 */
static inline void FlexCAN_UnlockRxMsgBuff(const FLEXCAN_Type * base)
{
    8bc6:	b082      	sub	sp, #8
    8bc8:	9001      	str	r0, [sp, #4]
    /* Unlock the mailbox by reading the free running timer */
    (void)base->TIMER;
    8bca:	9b01      	ldr	r3, [sp, #4]
    8bcc:	689b      	ldr	r3, [r3, #8]
}
    8bce:	bf00      	nop
    8bd0:	b002      	add	sp, #8
    8bd2:	4770      	bx	lr

00008bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>:
 *
 * @param   base        The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 */
static inline void FlexCAN_ClearMsgBuffIntStatusFlag(FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    8bd4:	b084      	sub	sp, #16
    8bd6:	9001      	str	r0, [sp, #4]
    8bd8:	9100      	str	r1, [sp, #0]
    uint32 flag = ((uint32)1U << (msgBuffIdx % 32U));
    8bda:	9b00      	ldr	r3, [sp, #0]
    8bdc:	f003 031f 	and.w	r3, r3, #31
    8be0:	2201      	movs	r2, #1
    8be2:	fa02 f303 	lsl.w	r3, r2, r3
    8be6:	9303      	str	r3, [sp, #12]

    /* Clear the corresponding message buffer interrupt flag*/
    if (msgBuffIdx < 32U)
    8be8:	9b00      	ldr	r3, [sp, #0]
    8bea:	2b1f      	cmp	r3, #31
    8bec:	d802      	bhi.n	8bf4 <FlexCAN_ClearMsgBuffIntStatusFlag+0x20>
    {
        (base->IFLAG1) = (flag);
    8bee:	9b01      	ldr	r3, [sp, #4]
    8bf0:	9a03      	ldr	r2, [sp, #12]
    8bf2:	631a      	str	r2, [r3, #48]	; 0x30
    else
    {
        (base->IFLAG4) = (flag);
    }
#endif
}
    8bf4:	bf00      	nop
    8bf6:	b004      	add	sp, #16
    8bf8:	4770      	bx	lr

00008bfa <FlexCAN_GetBuffStatusFlag>:
 * @param   base                The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 * @return  flag        The value of interrupt flag of the message buffer.
 */
static inline uint8 FlexCAN_GetBuffStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    8bfa:	b084      	sub	sp, #16
    8bfc:	9001      	str	r0, [sp, #4]
    8bfe:	9100      	str	r1, [sp, #0]
    uint32 flag = 0U;
    8c00:	2300      	movs	r3, #0
    8c02:	9303      	str	r3, [sp, #12]

    if (msgBuffIdx < 32U)
    8c04:	9b00      	ldr	r3, [sp, #0]
    8c06:	2b1f      	cmp	r3, #31
    8c08:	d80e      	bhi.n	8c28 <FlexCAN_GetBuffStatusFlag+0x2e>
    {
        flag = ((base->IFLAG1 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    8c0a:	9b01      	ldr	r3, [sp, #4]
    8c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    8c0e:	9b00      	ldr	r3, [sp, #0]
    8c10:	f003 031f 	and.w	r3, r3, #31
    8c14:	2101      	movs	r1, #1
    8c16:	fa01 f303 	lsl.w	r3, r1, r3
    8c1a:	401a      	ands	r2, r3
    8c1c:	9b00      	ldr	r3, [sp, #0]
    8c1e:	f003 031f 	and.w	r3, r3, #31
    8c22:	fa22 f303 	lsr.w	r3, r2, r3
    8c26:	9303      	str	r3, [sp, #12]
    {
        flag = ((base->IFLAG4 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    }
#endif

    return (uint8)flag;
    8c28:	9b03      	ldr	r3, [sp, #12]
    8c2a:	b2db      	uxtb	r3, r3
}
    8c2c:	4618      	mov	r0, r3
    8c2e:	b004      	add	sp, #16
    8c30:	4770      	bx	lr

00008c32 <FlexCAN_SetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetFDTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    8c32:	b082      	sub	sp, #8
    8c34:	9001      	str	r0, [sp, #4]
    8c36:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* Set FlexCAN time segments*/
    (base->FDCBT) = ((base->FDCBT) & ~((FLEXCAN_FDCBT_FPROPSEG_MASK | FLEXCAN_FDCBT_FPSEG2_MASK |
    8c38:	9b01      	ldr	r3, [sp, #4]
    8c3a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    8c3e:	4b15      	ldr	r3, [pc, #84]	; (8c94 <FlexCAN_SetFDTimeSegments+0x62>)
    8c40:	4013      	ands	r3, r2
    8c42:	9a01      	ldr	r2, [sp, #4]
    8c44:	f8c2 3c04 	str.w	r3, [r2, #3076]	; 0xc04
                                        FLEXCAN_FDCBT_FPSEG1_MASK | FLEXCAN_FDCBT_FPRESDIV_MASK
                                       ) | FLEXCAN_FDCBT_FRJW_MASK
                                      )
                    );

    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    8c48:	9b01      	ldr	r3, [sp, #4]
    8c4a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    8c4e:	9b00      	ldr	r3, [sp, #0]
    8c50:	681b      	ldr	r3, [r3, #0]
    8c52:	029b      	lsls	r3, r3, #10
    8c54:	f403 41f8 	and.w	r1, r3, #31744	; 0x7c00
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    8c58:	9b00      	ldr	r3, [sp, #0]
    8c5a:	689b      	ldr	r3, [r3, #8]
    8c5c:	f003 0307 	and.w	r3, r3, #7
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    8c60:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    8c62:	9b00      	ldr	r3, [sp, #0]
    8c64:	685b      	ldr	r3, [r3, #4]
    8c66:	015b      	lsls	r3, r3, #5
    8c68:	b2db      	uxtb	r3, r3
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    8c6a:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    8c6c:	9b00      	ldr	r3, [sp, #0]
    8c6e:	68db      	ldr	r3, [r3, #12]
    8c70:	0518      	lsls	r0, r3, #20
    8c72:	4b09      	ldr	r3, [pc, #36]	; (8c98 <FlexCAN_SetFDTimeSegments+0x66>)
    8c74:	4003      	ands	r3, r0
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    8c76:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FRJW(timeSeg->rJumpwidth)
    8c78:	9b00      	ldr	r3, [sp, #0]
    8c7a:	691b      	ldr	r3, [r3, #16]
    8c7c:	041b      	lsls	r3, r3, #16
    8c7e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    8c82:	430b      	orrs	r3, r1
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    8c84:	431a      	orrs	r2, r3
    8c86:	9b01      	ldr	r3, [sp, #4]
    8c88:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
                                     )
                    );
}
    8c8c:	bf00      	nop
    8c8e:	b002      	add	sp, #8
    8c90:	4770      	bx	lr
    8c92:	bf00      	nop
    8c94:	c0088318 	.word	0xc0088318
    8c98:	3ff00000 	.word	0x3ff00000

00008c9c <FlexCAN_SetTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    8c9c:	b082      	sub	sp, #8
    8c9e:	9001      	str	r0, [sp, #4]
    8ca0:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    (base->CTRL1) = ((base->CTRL1) & ~((FLEXCAN_CTRL1_PROPSEG_MASK | FLEXCAN_CTRL1_PSEG2_MASK |
    8ca2:	9b01      	ldr	r3, [sp, #4]
    8ca4:	685a      	ldr	r2, [r3, #4]
    8ca6:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    8caa:	4013      	ands	r3, r2
    8cac:	9a01      	ldr	r2, [sp, #4]
    8cae:	6053      	str	r3, [r2, #4]
                                        FLEXCAN_CTRL1_PSEG1_MASK | FLEXCAN_CTRL1_PRESDIV_MASK
                                       ) | FLEXCAN_CTRL1_RJW_MASK
                                      )
                    );

    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    8cb0:	9b01      	ldr	r3, [sp, #4]
    8cb2:	685a      	ldr	r2, [r3, #4]
    8cb4:	9b00      	ldr	r3, [sp, #0]
    8cb6:	681b      	ldr	r3, [r3, #0]
    8cb8:	f003 0107 	and.w	r1, r3, #7
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    8cbc:	9b00      	ldr	r3, [sp, #0]
    8cbe:	689b      	ldr	r3, [r3, #8]
    8cc0:	041b      	lsls	r3, r3, #16
    8cc2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    8cc6:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    8cc8:	9b00      	ldr	r3, [sp, #0]
    8cca:	685b      	ldr	r3, [r3, #4]
    8ccc:	04db      	lsls	r3, r3, #19
    8cce:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    8cd2:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    8cd4:	9b00      	ldr	r3, [sp, #0]
    8cd6:	68db      	ldr	r3, [r3, #12]
    8cd8:	061b      	lsls	r3, r3, #24
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    8cda:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_RJW(timeSeg->rJumpwidth)
    8cdc:	9b00      	ldr	r3, [sp, #0]
    8cde:	691b      	ldr	r3, [r3, #16]
    8ce0:	059b      	lsls	r3, r3, #22
    8ce2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    8ce6:	430b      	orrs	r3, r1
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    8ce8:	431a      	orrs	r2, r3
    8cea:	9b01      	ldr	r3, [sp, #4]
    8cec:	605a      	str	r2, [r3, #4]
                                     )
                    );
}
    8cee:	bf00      	nop
    8cf0:	b002      	add	sp, #8
    8cf2:	4770      	bx	lr

00008cf4 <FlexCAN_SetExtendedTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetExtendedTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    8cf4:	b082      	sub	sp, #8
    8cf6:	9001      	str	r0, [sp, #4]
    8cf8:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* If extended bit time definitions are enabled, use CBT register */
    (base->CBT) = ((base->CBT) & ~((FLEXCAN_CBT_EPROPSEG_MASK | FLEXCAN_CBT_EPSEG2_MASK |
    8cfa:	9b01      	ldr	r3, [sp, #4]
    8cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8cfe:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
    8d02:	9b01      	ldr	r3, [sp, #4]
    8d04:	651a      	str	r2, [r3, #80]	; 0x50
                                    FLEXCAN_CBT_EPSEG1_MASK | FLEXCAN_CBT_EPRESDIV_MASK
                                   ) | FLEXCAN_CBT_ERJW_MASK
                                  )
                  );

    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    8d06:	9b01      	ldr	r3, [sp, #4]
    8d08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    8d0a:	9b00      	ldr	r3, [sp, #0]
    8d0c:	681b      	ldr	r3, [r3, #0]
    8d0e:	029b      	lsls	r3, r3, #10
    8d10:	b299      	uxth	r1, r3
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    8d12:	9b00      	ldr	r3, [sp, #0]
    8d14:	689b      	ldr	r3, [r3, #8]
    8d16:	f003 031f 	and.w	r3, r3, #31
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    8d1a:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    8d1c:	9b00      	ldr	r3, [sp, #0]
    8d1e:	685b      	ldr	r3, [r3, #4]
    8d20:	015b      	lsls	r3, r3, #5
    8d22:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    8d26:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    8d28:	9b00      	ldr	r3, [sp, #0]
    8d2a:	68db      	ldr	r3, [r3, #12]
    8d2c:	0558      	lsls	r0, r3, #21
    8d2e:	4b07      	ldr	r3, [pc, #28]	; (8d4c <FlexCAN_SetExtendedTimeSegments+0x58>)
    8d30:	4003      	ands	r3, r0
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    8d32:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_ERJW(timeSeg->rJumpwidth)
    8d34:	9b00      	ldr	r3, [sp, #0]
    8d36:	691b      	ldr	r3, [r3, #16]
    8d38:	041b      	lsls	r3, r3, #16
    8d3a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    8d3e:	430b      	orrs	r3, r1
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    8d40:	431a      	orrs	r2, r3
    8d42:	9b01      	ldr	r3, [sp, #4]
    8d44:	651a      	str	r2, [r3, #80]	; 0x50
                                 )
                  );
}
    8d46:	bf00      	nop
    8d48:	b002      	add	sp, #8
    8d4a:	4770      	bx	lr
    8d4c:	7fe00000 	.word	0x7fe00000

00008d50 <FlexCAN_GetExtendedTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetExtendedTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    8d50:	b082      	sub	sp, #8
    8d52:	9001      	str	r0, [sp, #4]
    8d54:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CBT) & FLEXCAN_CBT_EPRESDIV_MASK) >> FLEXCAN_CBT_EPRESDIV_SHIFT;
    8d56:	9b01      	ldr	r3, [sp, #4]
    8d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8d5a:	0d5b      	lsrs	r3, r3, #21
    8d5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    8d60:	9b00      	ldr	r3, [sp, #0]
    8d62:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CBT) & FLEXCAN_CBT_EPROPSEG_MASK) >> FLEXCAN_CBT_EPROPSEG_SHIFT;
    8d64:	9b01      	ldr	r3, [sp, #4]
    8d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8d68:	0a9b      	lsrs	r3, r3, #10
    8d6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    8d6e:	9b00      	ldr	r3, [sp, #0]
    8d70:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CBT) & FLEXCAN_CBT_EPSEG1_MASK) >> FLEXCAN_CBT_EPSEG1_SHIFT;
    8d72:	9b01      	ldr	r3, [sp, #4]
    8d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8d76:	095b      	lsrs	r3, r3, #5
    8d78:	f003 021f 	and.w	r2, r3, #31
    8d7c:	9b00      	ldr	r3, [sp, #0]
    8d7e:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CBT) & FLEXCAN_CBT_EPSEG2_MASK) >> FLEXCAN_CBT_EPSEG2_SHIFT;
    8d80:	9b01      	ldr	r3, [sp, #4]
    8d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8d84:	f003 021f 	and.w	r2, r3, #31
    8d88:	9b00      	ldr	r3, [sp, #0]
    8d8a:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CBT) & FLEXCAN_CBT_ERJW_MASK) >> FLEXCAN_CBT_ERJW_SHIFT;
    8d8c:	9b01      	ldr	r3, [sp, #4]
    8d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8d90:	0c1b      	lsrs	r3, r3, #16
    8d92:	f003 021f 	and.w	r2, r3, #31
    8d96:	9b00      	ldr	r3, [sp, #0]
    8d98:	611a      	str	r2, [r3, #16]
}
    8d9a:	bf00      	nop
    8d9c:	b002      	add	sp, #8
    8d9e:	4770      	bx	lr

00008da0 <FlexCAN_GetTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    8da0:	b082      	sub	sp, #8
    8da2:	9001      	str	r0, [sp, #4]
    8da4:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CTRL1) & FLEXCAN_CTRL1_PRESDIV_MASK) >> FLEXCAN_CTRL1_PRESDIV_SHIFT;
    8da6:	9b01      	ldr	r3, [sp, #4]
    8da8:	685b      	ldr	r3, [r3, #4]
    8daa:	0e1b      	lsrs	r3, r3, #24
    8dac:	b2da      	uxtb	r2, r3
    8dae:	9b00      	ldr	r3, [sp, #0]
    8db0:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CTRL1) & FLEXCAN_CTRL1_PROPSEG_MASK) >> FLEXCAN_CTRL1_PROPSEG_SHIFT;
    8db2:	9b01      	ldr	r3, [sp, #4]
    8db4:	685b      	ldr	r3, [r3, #4]
    8db6:	f003 0207 	and.w	r2, r3, #7
    8dba:	9b00      	ldr	r3, [sp, #0]
    8dbc:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG1_MASK) >> FLEXCAN_CTRL1_PSEG1_SHIFT;
    8dbe:	9b01      	ldr	r3, [sp, #4]
    8dc0:	685b      	ldr	r3, [r3, #4]
    8dc2:	0cdb      	lsrs	r3, r3, #19
    8dc4:	f003 0207 	and.w	r2, r3, #7
    8dc8:	9b00      	ldr	r3, [sp, #0]
    8dca:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG2_MASK) >> FLEXCAN_CTRL1_PSEG2_SHIFT;
    8dcc:	9b01      	ldr	r3, [sp, #4]
    8dce:	685b      	ldr	r3, [r3, #4]
    8dd0:	0c1b      	lsrs	r3, r3, #16
    8dd2:	f003 0207 	and.w	r2, r3, #7
    8dd6:	9b00      	ldr	r3, [sp, #0]
    8dd8:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CTRL1) & FLEXCAN_CTRL1_RJW_MASK) >> FLEXCAN_CTRL1_RJW_SHIFT;
    8dda:	9b01      	ldr	r3, [sp, #4]
    8ddc:	685b      	ldr	r3, [r3, #4]
    8dde:	0d9b      	lsrs	r3, r3, #22
    8de0:	f003 0203 	and.w	r2, r3, #3
    8de4:	9b00      	ldr	r3, [sp, #0]
    8de6:	611a      	str	r2, [r3, #16]
}
    8de8:	bf00      	nop
    8dea:	b002      	add	sp, #8
    8dec:	4770      	bx	lr

00008dee <FlexCAN_GetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetFDTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    8dee:	b082      	sub	sp, #8
    8df0:	9001      	str	r0, [sp, #4]
    8df2:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->FDCBT) & FLEXCAN_FDCBT_FPRESDIV_MASK) >> FLEXCAN_FDCBT_FPRESDIV_SHIFT;
    8df4:	9b01      	ldr	r3, [sp, #4]
    8df6:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    8dfa:	0d1b      	lsrs	r3, r3, #20
    8dfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
    8e00:	9b00      	ldr	r3, [sp, #0]
    8e02:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->FDCBT) & FLEXCAN_FDCBT_FPROPSEG_MASK) >> FLEXCAN_FDCBT_FPROPSEG_SHIFT;
    8e04:	9b01      	ldr	r3, [sp, #4]
    8e06:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    8e0a:	0a9b      	lsrs	r3, r3, #10
    8e0c:	f003 021f 	and.w	r2, r3, #31
    8e10:	9b00      	ldr	r3, [sp, #0]
    8e12:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG1_MASK) >> FLEXCAN_FDCBT_FPSEG1_SHIFT;
    8e14:	9b01      	ldr	r3, [sp, #4]
    8e16:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    8e1a:	095b      	lsrs	r3, r3, #5
    8e1c:	f003 0207 	and.w	r2, r3, #7
    8e20:	9b00      	ldr	r3, [sp, #0]
    8e22:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG2_MASK) >> FLEXCAN_FDCBT_FPSEG2_SHIFT;
    8e24:	9b01      	ldr	r3, [sp, #4]
    8e26:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    8e2a:	f003 0207 	and.w	r2, r3, #7
    8e2e:	9b00      	ldr	r3, [sp, #0]
    8e30:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->FDCBT) & FLEXCAN_FDCBT_FRJW_MASK) >> FLEXCAN_FDCBT_FRJW_SHIFT;
    8e32:	9b01      	ldr	r3, [sp, #4]
    8e34:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    8e38:	0c1b      	lsrs	r3, r3, #16
    8e3a:	f003 0207 	and.w	r2, r3, #7
    8e3e:	9b00      	ldr	r3, [sp, #0]
    8e40:	611a      	str	r2, [r3, #16]
}
    8e42:	bf00      	nop
    8e44:	b002      	add	sp, #8
    8e46:	4770      	bx	lr

00008e48 <FlexCAN_IsExCbtEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsExCbtEnabled(const FLEXCAN_Type * pBase)
{
    8e48:	b082      	sub	sp, #8
    8e4a:	9001      	str	r0, [sp, #4]
    return (0U == ((pBase->CBT & FLEXCAN_CBT_BTF_MASK) >> FLEXCAN_CBT_BTF_SHIFT)) ? FALSE : TRUE;
    8e4c:	9b01      	ldr	r3, [sp, #4]
    8e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8e50:	0fdb      	lsrs	r3, r3, #31
    8e52:	b2db      	uxtb	r3, r3
}
    8e54:	4618      	mov	r0, r3
    8e56:	b002      	add	sp, #8
    8e58:	4770      	bx	lr

00008e5a <FlexCAN_EnableExtCbt>:
 *
 * @param   base    The FlexCAN base address
 * @param   enableCBT Enable/Disable use of Extent Time Segments
 */
static inline void FlexCAN_EnableExtCbt(FLEXCAN_Type * base, boolean enableCBT)
{   /* Enable the use of extended bit time definitions */
    8e5a:	b082      	sub	sp, #8
    8e5c:	9001      	str	r0, [sp, #4]
    8e5e:	460b      	mov	r3, r1
    8e60:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CBT = (base->CBT & ~FLEXCAN_CBT_BTF_MASK) | FLEXCAN_CBT_BTF(enableCBT ? 1UL : 0UL);
    8e64:	9b01      	ldr	r3, [sp, #4]
    8e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8e68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    8e6c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8e70:	2a00      	cmp	r2, #0
    8e72:	d002      	beq.n	8e7a <FlexCAN_EnableExtCbt+0x20>
    8e74:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8e78:	e000      	b.n	8e7c <FlexCAN_EnableExtCbt+0x22>
    8e7a:	2200      	movs	r2, #0
    8e7c:	431a      	orrs	r2, r3
    8e7e:	9b01      	ldr	r3, [sp, #4]
    8e80:	651a      	str	r2, [r3, #80]	; 0x50
}
    8e82:	bf00      	nop
    8e84:	b002      	add	sp, #8
    8e86:	4770      	bx	lr

00008e88 <FlexCAN_SetSelfReception>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Enable/Disable Self Reception
 */
static inline void FlexCAN_SetSelfReception(FLEXCAN_Type * base, boolean enable)
{
    8e88:	b082      	sub	sp, #8
    8e8a:	9001      	str	r0, [sp, #4]
    8e8c:	460b      	mov	r3, r1
    8e8e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    8e92:	9b01      	ldr	r3, [sp, #4]
    8e94:	681b      	ldr	r3, [r3, #0]
    8e96:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    8e9a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8e9e:	2a00      	cmp	r2, #0
    8ea0:	d001      	beq.n	8ea6 <FlexCAN_SetSelfReception+0x1e>
    8ea2:	2200      	movs	r2, #0
    8ea4:	e001      	b.n	8eaa <FlexCAN_SetSelfReception+0x22>
    8ea6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    8eaa:	431a      	orrs	r2, r3
    8eac:	9b01      	ldr	r3, [sp, #4]
    8eae:	601a      	str	r2, [r3, #0]
}
    8eb0:	bf00      	nop
    8eb2:	b002      	add	sp, #8
    8eb4:	4770      	bx	lr

00008eb6 <FlexCAN_IsFDEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsFDEnabled(const FLEXCAN_Type * base)
{
    8eb6:	b082      	sub	sp, #8
    8eb8:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    8eba:	9b01      	ldr	r3, [sp, #4]
    8ebc:	681b      	ldr	r3, [r3, #0]
    8ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    8ec2:	2b00      	cmp	r3, #0
    8ec4:	bf14      	ite	ne
    8ec6:	2301      	movne	r3, #1
    8ec8:	2300      	moveq	r3, #0
    8eca:	b2db      	uxtb	r3, r3
}
    8ecc:	4618      	mov	r0, r3
    8ece:	b002      	add	sp, #8
    8ed0:	4770      	bx	lr

00008ed2 <FlexCAN_IsListenOnlyModeEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsListenOnlyModeEnabled(const FLEXCAN_Type * base)
{
    8ed2:	b082      	sub	sp, #8
    8ed4:	9001      	str	r0, [sp, #4]
    return (((base->CTRL1 & (FLEXCAN_CTRL1_LOM_MASK)) != 0U) ? TRUE : FALSE);
    8ed6:	9b01      	ldr	r3, [sp, #4]
    8ed8:	685b      	ldr	r3, [r3, #4]
    8eda:	f003 0308 	and.w	r3, r3, #8
    8ede:	2b00      	cmp	r3, #0
    8ee0:	bf14      	ite	ne
    8ee2:	2301      	movne	r3, #1
    8ee4:	2300      	moveq	r3, #0
    8ee6:	b2db      	uxtb	r3, r3
}
    8ee8:	4618      	mov	r0, r3
    8eea:	b002      	add	sp, #8
    8eec:	4770      	bx	lr

00008eee <RxFifoOcuppiedLastMsgBuff>:
 *
 * @param   x    Number of Configured RxFIFO Filters
 * @return  number of last MB occupied by RxFIFO
 */
static inline uint32 RxFifoOcuppiedLastMsgBuff(uint8 x)
{
    8eee:	b082      	sub	sp, #8
    8ef0:	4603      	mov	r3, r0
    8ef2:	f88d 3007 	strb.w	r3, [sp, #7]
    return 5U + (((((uint32)x) + 1U) * 8U) / 4U);
    8ef6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8efa:	3301      	adds	r3, #1
    8efc:	00db      	lsls	r3, r3, #3
    8efe:	089b      	lsrs	r3, r3, #2
    8f00:	3305      	adds	r3, #5
}
    8f02:	4618      	mov	r0, r3
    8f04:	b002      	add	sp, #8
    8f06:	4770      	bx	lr

00008f08 <FlexCAN_SetClkSrc>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Specifies if The CAN engine clock source is the oscillator clock(FALSE) or peripheral clock(TRUE).
 */
static inline void FlexCAN_SetClkSrc(FLEXCAN_Type * base, boolean enable)
{
    8f08:	b082      	sub	sp, #8
    8f0a:	9001      	str	r0, [sp, #4]
    8f0c:	460b      	mov	r3, r1
    8f0e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_CLKSRC_MASK) | FLEXCAN_CTRL1_CLKSRC(enable ? 1UL : 0UL);
    8f12:	9b01      	ldr	r3, [sp, #4]
    8f14:	685b      	ldr	r3, [r3, #4]
    8f16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    8f1a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8f1e:	2a00      	cmp	r2, #0
    8f20:	d002      	beq.n	8f28 <FlexCAN_SetClkSrc+0x20>
    8f22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    8f26:	e000      	b.n	8f2a <FlexCAN_SetClkSrc+0x22>
    8f28:	2200      	movs	r2, #0
    8f2a:	431a      	orrs	r2, r3
    8f2c:	9b01      	ldr	r3, [sp, #4]
    8f2e:	605a      	str	r2, [r3, #4]
}
    8f30:	bf00      	nop
    8f32:	b002      	add	sp, #8
    8f34:	4770      	bx	lr

00008f36 <FlexCAN_GetMsgBuffIntStatusFlag>:
 * @param   base  The FlexCAN base address
 * @param   msgBuffIdx       Index of the message buffer
 * @return  the individual Message Buffer interrupt flag (0 and 1 are the flag value)
 */
static inline uint8 FlexCAN_GetMsgBuffIntStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    8f36:	b084      	sub	sp, #16
    8f38:	9001      	str	r0, [sp, #4]
    8f3a:	9100      	str	r1, [sp, #0]
    /* TODO: This need to be protected multithread access*/
    uint8 flag = 0;
    8f3c:	2300      	movs	r3, #0
    8f3e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 mask;

    if (msgBuffIdx < 32U)
    8f42:	9b00      	ldr	r3, [sp, #0]
    8f44:	2b1f      	cmp	r3, #31
    8f46:	d810      	bhi.n	8f6a <FlexCAN_GetMsgBuffIntStatusFlag+0x34>
    {
        mask = base->IMASK1 & FLEXCAN_IMASK1_BUF31TO0M_MASK;
    8f48:	9b01      	ldr	r3, [sp, #4]
    8f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f4c:	9302      	str	r3, [sp, #8]
        flag = (uint8)(((base->IFLAG1 & mask) >> (msgBuffIdx % 32U)) & 1U);
    8f4e:	9b01      	ldr	r3, [sp, #4]
    8f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    8f52:	9b02      	ldr	r3, [sp, #8]
    8f54:	401a      	ands	r2, r3
    8f56:	9b00      	ldr	r3, [sp, #0]
    8f58:	f003 031f 	and.w	r3, r3, #31
    8f5c:	fa22 f303 	lsr.w	r3, r2, r3
    8f60:	b2db      	uxtb	r3, r3
    8f62:	f003 0301 	and.w	r3, r3, #1
    8f66:	f88d 300f 	strb.w	r3, [sp, #15]
        mask = base->IMASK4 & FLEXCAN_IMASK4_BUF127TO96M_MASK;
        flag = (uint8)(((base->IFLAG4 & mask) >> (msgBuffIdx % 32U)) & 1U);
    }
#endif

    return flag;
    8f6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8f6e:	4618      	mov	r0, r3
    8f70:	b004      	add	sp, #16
    8f72:	4770      	bx	lr

00008f74 <FlexCAN_SetRxMsgBuffGlobalMask>:
 *
 * @param   base  The FlexCAN base address
 * @param   Mask  Mask Value
 */
static inline void FlexCAN_SetRxMsgBuffGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    8f74:	b082      	sub	sp, #8
    8f76:	9001      	str	r0, [sp, #4]
    8f78:	9100      	str	r1, [sp, #0]
    (base->RXMGMASK) = Mask;
    8f7a:	9b01      	ldr	r3, [sp, #4]
    8f7c:	9a00      	ldr	r2, [sp, #0]
    8f7e:	611a      	str	r2, [r3, #16]
}
    8f80:	bf00      	nop
    8f82:	b002      	add	sp, #8
    8f84:	4770      	bx	lr

00008f86 <FlexCAN_SetRxIndividualMask>:
 */
static inline void FlexCAN_SetRxIndividualMask(FLEXCAN_Type * base,
                                               uint32 msgBuffIdx,
                                               uint32 mask
                                              )
{
    8f86:	b084      	sub	sp, #16
    8f88:	9003      	str	r0, [sp, #12]
    8f8a:	9102      	str	r1, [sp, #8]
    8f8c:	9201      	str	r2, [sp, #4]
    base->RXIMR[msgBuffIdx] = mask;
    8f8e:	9b03      	ldr	r3, [sp, #12]
    8f90:	9a02      	ldr	r2, [sp, #8]
    8f92:	f502 7208 	add.w	r2, r2, #544	; 0x220
    8f96:	9901      	ldr	r1, [sp, #4]
    8f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    8f9c:	bf00      	nop
    8f9e:	b004      	add	sp, #16
    8fa0:	4770      	bx	lr

00008fa2 <FlexCAN_SetTxArbitrationStartDelay>:
 *
 * @param   base  The FlexCAN base address
 * @param   tasd  The Tx arbitration start delay value
 */
static inline void FlexCAN_SetTxArbitrationStartDelay(FLEXCAN_Type * base, uint8 tasd)
{
    8fa2:	b082      	sub	sp, #8
    8fa4:	9001      	str	r0, [sp, #4]
    8fa6:	460b      	mov	r3, r1
    8fa8:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_TASD_MASK) | FLEXCAN_CTRL2_TASD(tasd);
    8fac:	9b01      	ldr	r3, [sp, #4]
    8fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8fb0:	f423 0278 	bic.w	r2, r3, #16252928	; 0xf80000
    8fb4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8fb8:	04db      	lsls	r3, r3, #19
    8fba:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
    8fbe:	431a      	orrs	r2, r3
    8fc0:	9b01      	ldr	r3, [sp, #4]
    8fc2:	635a      	str	r2, [r3, #52]	; 0x34
}
    8fc4:	bf00      	nop
    8fc6:	b002      	add	sp, #8
    8fc8:	4770      	bx	lr

00008fca <FlexCAN_SetRxMaskType>:
 *
 * @param   base  The FlexCAN base address
 * @param   type         The FlexCAN Rx mask type
 */
static inline void FlexCAN_SetRxMaskType(FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
    8fca:	b082      	sub	sp, #8
    8fcc:	9001      	str	r0, [sp, #4]
    8fce:	9100      	str	r1, [sp, #0]
    /* Set RX masking type (RX global mask or RX individual mask)*/
    if (FLEXCAN_RX_MASK_GLOBAL == type)
    8fd0:	9b00      	ldr	r3, [sp, #0]
    8fd2:	2b00      	cmp	r3, #0
    8fd4:	d106      	bne.n	8fe4 <FlexCAN_SetRxMaskType+0x1a>
    {
        /* Enable Global RX masking */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(0U);
    8fd6:	9b01      	ldr	r3, [sp, #4]
    8fd8:	681b      	ldr	r3, [r3, #0]
    8fda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    8fde:	9b01      	ldr	r3, [sp, #4]
    8fe0:	601a      	str	r2, [r3, #0]
    else
    {
        /* Enable Individual Rx Masking and Queue */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    }
}
    8fe2:	e005      	b.n	8ff0 <FlexCAN_SetRxMaskType+0x26>
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    8fe4:	9b01      	ldr	r3, [sp, #4]
    8fe6:	681b      	ldr	r3, [r3, #0]
    8fe8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    8fec:	9b01      	ldr	r3, [sp, #4]
    8fee:	601a      	str	r2, [r3, #0]
}
    8ff0:	bf00      	nop
    8ff2:	b002      	add	sp, #8
    8ff4:	4770      	bx	lr

00008ff6 <FlexCAN_SetRegDefaultVal>:
 * @brief Will set Flexcan Peripheral Register to default val.
 *
 * @param   base    The FlexCAN base address
 */
static inline void FlexCAN_SetRegDefaultVal(FLEXCAN_Type * base)
{
    8ff6:	b500      	push	{lr}
    8ff8:	b083      	sub	sp, #12
    8ffa:	9001      	str	r0, [sp, #4]
        base->ERFCR = FLEXCAN_IP_ERFCR_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    8ffc:	9801      	ldr	r0, [sp, #4]
    8ffe:	f002 ff85 	bl	bf0c <FlexCAN_IsFDAvailable>
    9002:	4603      	mov	r3, r0
    9004:	2b00      	cmp	r3, #0
    9006:	d007      	beq.n	9018 <FlexCAN_SetRegDefaultVal+0x22>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    9008:	9b01      	ldr	r3, [sp, #4]
    900a:	2200      	movs	r2, #0
    900c:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    9010:	9b01      	ldr	r3, [sp, #4]
    9012:	4a12      	ldr	r2, [pc, #72]	; (905c <FlexCAN_SetRegDefaultVal+0x66>)
    9014:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    {
        base->IFLAG2 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
        base->IMASK2 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */
    base->IFLAG1 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
    9018:	9b01      	ldr	r3, [sp, #4]
    901a:	f04f 32ff 	mov.w	r2, #4294967295
    901e:	631a      	str	r2, [r3, #48]	; 0x30
    base->IMASK1 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    9020:	9b01      	ldr	r3, [sp, #4]
    9022:	2200      	movs	r2, #0
    9024:	629a      	str	r2, [r3, #40]	; 0x28
    base->CBT = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    9026:	9b01      	ldr	r3, [sp, #4]
    9028:	2200      	movs	r2, #0
    902a:	651a      	str	r2, [r3, #80]	; 0x50
    base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    902c:	9b01      	ldr	r3, [sp, #4]
    902e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    9032:	635a      	str	r2, [r3, #52]	; 0x34
    base->ESR1 = FLEXCAN_IP_ESR1_DEFAULT_VALUE_U32;
    9034:	9b01      	ldr	r3, [sp, #4]
    9036:	4a0a      	ldr	r2, [pc, #40]	; (9060 <FlexCAN_SetRegDefaultVal+0x6a>)
    9038:	621a      	str	r2, [r3, #32]
    base->ECR = FLEXCAN_IP_ECR_DEFAULT_VALUE_U32;
    903a:	9b01      	ldr	r3, [sp, #4]
    903c:	2200      	movs	r2, #0
    903e:	61da      	str	r2, [r3, #28]
    base->TIMER = FLEXCAN_IP_TIMER_DEFAULT_VALUE_U32;
    9040:	9b01      	ldr	r3, [sp, #4]
    9042:	2200      	movs	r2, #0
    9044:	609a      	str	r2, [r3, #8]
    base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    9046:	9b01      	ldr	r3, [sp, #4]
    9048:	2200      	movs	r2, #0
    904a:	605a      	str	r2, [r3, #4]
    base->EPRS  = FLEXCAN_IP_EPRS_DEFAULT_VALUE_U32;
    base->ENCBT = FLEXCAN_IP_ENCBT_DEFAULT_VALUE_U32;
    base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
    base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
    base->MCR = FLEXCAN_IP_MCR_DEFAULT_VALUE_U32;
    904c:	9b01      	ldr	r3, [sp, #4]
    904e:	4a05      	ldr	r2, [pc, #20]	; (9064 <FlexCAN_SetRegDefaultVal+0x6e>)
    9050:	601a      	str	r2, [r3, #0]
}
    9052:	bf00      	nop
    9054:	b003      	add	sp, #12
    9056:	f85d fb04 	ldr.w	pc, [sp], #4
    905a:	bf00      	nop
    905c:	80004100 	.word	0x80004100
    9060:	0003b006 	.word	0x0003b006
    9064:	d890000f 	.word	0xd890000f

00009068 <FlexCAN_InitRxFifo>:
 * Description   : Initialize fifo and dma if requested.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitRxFifo(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    9068:	b500      	push	{lr}
    906a:	b085      	sub	sp, #20
    906c:	9001      	str	r0, [sp, #4]
    906e:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    9070:	2300      	movs	r3, #0
    9072:	9303      	str	r3, [sp, #12]

    /* Enable RxFIFO feature, if requested. This might fail if the FD mode is enabled. */
    if (Flexcan_Ip_pData->is_rx_fifo_needed)
    9074:	9b00      	ldr	r3, [sp, #0]
    9076:	7a1b      	ldrb	r3, [r3, #8]
    9078:	2b00      	cmp	r3, #0
    907a:	d006      	beq.n	908a <FlexCAN_InitRxFifo+0x22>
    {
        eResult = FlexCAN_EnableRxFifo(pBase, (uint32)Flexcan_Ip_pData->num_id_filters);
    907c:	9b00      	ldr	r3, [sp, #0]
    907e:	685b      	ldr	r3, [r3, #4]
    9080:	4619      	mov	r1, r3
    9082:	9801      	ldr	r0, [sp, #4]
    9084:	f002 fefe 	bl	be84 <FlexCAN_EnableRxFifo>
    9088:	9003      	str	r0, [sp, #12]
        FlexCAN_SetRxFifoDMA(pBase, FALSE);
    }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    return eResult;
    908a:	9b03      	ldr	r3, [sp, #12]
}
    908c:	4618      	mov	r0, r3
    908e:	b005      	add	sp, #20
    9090:	f85d fb04 	ldr.w	pc, [sp], #4

00009094 <FlexCAN_InitCtroll>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitCtroll(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    9094:	b500      	push	{lr}
    9096:	b085      	sub	sp, #20
    9098:	9001      	str	r0, [sp, #4]
    909a:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    909c:	2300      	movs	r3, #0
    909e:	9303      	str	r3, [sp, #12]
    /* Disable the self reception feature if FlexCAN is not in loopback mode. */
    if (Flexcan_Ip_pData->flexcanMode != FLEXCAN_LOOPBACK_MODE)
    90a0:	9b00      	ldr	r3, [sp, #0]
    90a2:	68db      	ldr	r3, [r3, #12]
    90a4:	2b02      	cmp	r3, #2
    90a6:	d003      	beq.n	90b0 <FlexCAN_InitCtroll+0x1c>
    {
        FlexCAN_SetSelfReception(pBase, FALSE);
    90a8:	2100      	movs	r1, #0
    90aa:	9801      	ldr	r0, [sp, #4]
    90ac:	f7ff feec 	bl	8e88 <FlexCAN_SetSelfReception>
    }

    /* Init legacy fifo, enhanced fifo if requested. */
    eResult = FlexCAN_InitRxFifo(pBase, Flexcan_Ip_pData);
    90b0:	9900      	ldr	r1, [sp, #0]
    90b2:	9801      	ldr	r0, [sp, #4]
    90b4:	f7ff ffd8 	bl	9068 <FlexCAN_InitRxFifo>
    90b8:	9003      	str	r0, [sp, #12]
    if (eResult != FLEXCAN_STATUS_SUCCESS)
    90ba:	9b03      	ldr	r3, [sp, #12]
    90bc:	2b00      	cmp	r3, #0
    90be:	d006      	beq.n	90ce <FlexCAN_InitCtroll+0x3a>
    {
        /* To enter Disable Mode requires FreezMode first */
        (void)FlexCAN_EnterFreezeMode(pBase);
    90c0:	9801      	ldr	r0, [sp, #4]
    90c2:	f002 fd03 	bl	bacc <FlexCAN_EnterFreezeMode>
        (void)FlexCAN_Disable(pBase);
    90c6:	9801      	ldr	r0, [sp, #4]
    90c8:	f002 fdca 	bl	bc60 <FlexCAN_Disable>
    90cc:	e00b      	b.n	90e6 <FlexCAN_InitCtroll+0x52>
    }
    else
    {
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set payload size. */
        FlexCAN_SetPayloadSize(pBase, &Flexcan_Ip_pData->payload);
    90ce:	9b00      	ldr	r3, [sp, #0]
    90d0:	3314      	adds	r3, #20
    90d2:	4619      	mov	r1, r3
    90d4:	9801      	ldr	r0, [sp, #4]
    90d6:	f002 ff3b 	bl	bf50 <FlexCAN_SetPayloadSize>
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
            (void)FlexCAN_Disable(pBase);
        }
    #else
        (void)FlexCAN_SetMaxMsgBuffNum(pBase, Flexcan_Ip_pData->max_num_mb);
    90da:	9b00      	ldr	r3, [sp, #0]
    90dc:	681b      	ldr	r3, [r3, #0]
    90de:	4619      	mov	r1, r3
    90e0:	9801      	ldr	r0, [sp, #4]
    90e2:	f003 fab7 	bl	c654 <FlexCAN_SetMaxMsgBuffNum>
    #endif /* FLEXCAN_IP_DEV_ERROR_DETECT */
    }
    return eResult;
    90e6:	9b03      	ldr	r3, [sp, #12]
}
    90e8:	4618      	mov	r0, r3
    90ea:	b005      	add	sp, #20
    90ec:	f85d fb04 	ldr.w	pc, [sp], #4

000090f0 <FlexCAN_InitController>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitController(uint8 Instance, FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    90f0:	b500      	push	{lr}
    90f2:	b087      	sub	sp, #28
    90f4:	4603      	mov	r3, r0
    90f6:	9102      	str	r1, [sp, #8]
    90f8:	9201      	str	r2, [sp, #4]
    90fa:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    90fe:	2300      	movs	r3, #0
    9100:	9305      	str	r3, [sp, #20]

    if (FlexCAN_IsEnabled(pBase))
    9102:	9802      	ldr	r0, [sp, #8]
    9104:	f7ff fd0c 	bl	8b20 <FlexCAN_IsEnabled>
    9108:	4603      	mov	r3, r0
    910a:	2b00      	cmp	r3, #0
    910c:	d00a      	beq.n	9124 <FlexCAN_InitController+0x34>
    {
        /* To enter Disable Mode requires FreezMode first */
        eResult = FlexCAN_EnterFreezeMode(pBase);
    910e:	9802      	ldr	r0, [sp, #8]
    9110:	f002 fcdc 	bl	bacc <FlexCAN_EnterFreezeMode>
    9114:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == eResult)
    9116:	9b05      	ldr	r3, [sp, #20]
    9118:	2b00      	cmp	r3, #0
    911a:	d103      	bne.n	9124 <FlexCAN_InitController+0x34>
        {
            eResult = FlexCAN_Disable(pBase);
    911c:	9802      	ldr	r0, [sp, #8]
    911e:	f002 fd9f 	bl	bc60 <FlexCAN_Disable>
    9122:	9005      	str	r0, [sp, #20]
        }
    }

    if (FLEXCAN_STATUS_SUCCESS == eResult)
    9124:	9b05      	ldr	r3, [sp, #20]
    9126:	2b00      	cmp	r3, #0
    9128:	d137      	bne.n	919a <FlexCAN_InitController+0xaa>
    {
    #if (FLEXCAN_IP_FEATURE_HAS_PE_CLKSRC_SELECT == STD_ON)
        /* Select a source clock for the FlexCAN engine */
        FlexCAN_SetClkSrc(pBase, Flexcan_Ip_pData->is_pe_clock);
    912a:	9b01      	ldr	r3, [sp, #4]
    912c:	7e5b      	ldrb	r3, [r3, #25]
    912e:	4619      	mov	r1, r3
    9130:	9802      	ldr	r0, [sp, #8]
    9132:	f7ff fee9 	bl	8f08 <FlexCAN_SetClkSrc>
    #endif
        /* Enable FlexCAN Module need to perform SoftReset & ClearRam */
        pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    9136:	9b02      	ldr	r3, [sp, #8]
    9138:	681b      	ldr	r3, [r3, #0]
    913a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    913e:	9b02      	ldr	r3, [sp, #8]
    9140:	601a      	str	r2, [r3, #0]
        /* Initialize FLEXCAN device */
        eResult = FlexCAN_Init(pBase);
    9142:	9802      	ldr	r0, [sp, #8]
    9144:	f002 fe28 	bl	bd98 <FlexCAN_Init>
    9148:	9005      	str	r0, [sp, #20]
        if (eResult != FLEXCAN_STATUS_SUCCESS)
    914a:	9b05      	ldr	r3, [sp, #20]
    914c:	2b00      	cmp	r3, #0
    914e:	d006      	beq.n	915e <FlexCAN_InitController+0x6e>
        {
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
    9150:	9802      	ldr	r0, [sp, #8]
    9152:	f002 fcbb 	bl	bacc <FlexCAN_EnterFreezeMode>
            (void)FlexCAN_Disable(pBase);
    9156:	9802      	ldr	r0, [sp, #8]
    9158:	f002 fd82 	bl	bc60 <FlexCAN_Disable>
    915c:	e01d      	b.n	919a <FlexCAN_InitController+0xaa>
            /* Disable the Protection again because is enabled by soft reset */
            FlexCAN_DisableMemErrorDetection(pBase);
        #endif

        #if defined(CAN_FEATURE_S32K1XX)
            if (TRUE == FlexCAN_IsFDAvailable(pBase))
    915e:	9802      	ldr	r0, [sp, #8]
    9160:	f002 fed4 	bl	bf0c <FlexCAN_IsFDAvailable>
    9164:	4603      	mov	r3, r0
    9166:	2b00      	cmp	r3, #0
    9168:	d007      	beq.n	917a <FlexCAN_InitController+0x8a>
            {
        #endif /* defined(CAN_FEATURE_S32K1XX) */
                /* Enable/Disable FD and check FD was set as expected. Setting FD as enabled
                 * might fail if the current CAN instance does not support FD. */
                FlexCAN_SetFDEnabled(pBase, Flexcan_Ip_pData->fd_enable, Flexcan_Ip_pData->bitRateSwitch);
    916a:	9b01      	ldr	r3, [sp, #4]
    916c:	7e19      	ldrb	r1, [r3, #24]
    916e:	9b01      	ldr	r3, [sp, #4]
    9170:	7edb      	ldrb	r3, [r3, #27]
    9172:	461a      	mov	r2, r3
    9174:	9802      	ldr	r0, [sp, #8]
    9176:	f7ff fcdd 	bl	8b34 <FlexCAN_SetFDEnabled>
                }*/
        #if defined(CAN_FEATURE_S32K1XX)
            }
        #endif /* defined(CAN_FEATURE_S32K1XX) */
            /* configure depends on controller options. */
            FlexCAN_ConfigCtrlOptions(pBase, Flexcan_Ip_pData->ctrlOptions);
    917a:	9b01      	ldr	r3, [sp, #4]
    917c:	691b      	ldr	r3, [r3, #16]
    917e:	4619      	mov	r1, r3
    9180:	9802      	ldr	r0, [sp, #8]
    9182:	f003 fdeb 	bl	cd5c <FlexCAN_ConfigCtrlOptions>
            /* reset Imask buffers */
            FlexCAN_ResetImaskBuff(Instance);
    9186:	f89d 300f 	ldrb.w	r3, [sp, #15]
    918a:	4618      	mov	r0, r3
    918c:	f003 fe56 	bl	ce3c <FlexCAN_ResetImaskBuff>
            eResult = FlexCAN_InitCtroll(pBase, Flexcan_Ip_pData);
    9190:	9901      	ldr	r1, [sp, #4]
    9192:	9802      	ldr	r0, [sp, #8]
    9194:	f7ff ff7e 	bl	9094 <FlexCAN_InitCtroll>
    9198:	9005      	str	r0, [sp, #20]
        }
    }
    return eResult;
    919a:	9b05      	ldr	r3, [sp, #20]
}
    919c:	4618      	mov	r0, r3
    919e:	b007      	add	sp, #28
    91a0:	f85d fb04 	ldr.w	pc, [sp], #4

000091a4 <FlexCAN_InitBaudrate>:
 * Description   : Init baudrate for given controller.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_InitBaudrate(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    91a4:	b500      	push	{lr}
    91a6:	b083      	sub	sp, #12
    91a8:	9001      	str	r0, [sp, #4]
    91aa:	9100      	str	r1, [sp, #0]
    /* Enable the use of extended bit time definitions */
    FlexCAN_EnableExtCbt(pBase, Flexcan_Ip_pData->fd_enable);
    91ac:	9b00      	ldr	r3, [sp, #0]
    91ae:	7e1b      	ldrb	r3, [r3, #24]
    91b0:	4619      	mov	r1, r3
    91b2:	9801      	ldr	r0, [sp, #4]
    91b4:	f7ff fe51 	bl	8e5a <FlexCAN_EnableExtCbt>
        /* Disable Enhanced CBT time segments */
        pBase->CTRL2 &= ~FLEXCAN_CTRL2_BTE_MASK;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set bit rate. */
        if (Flexcan_Ip_pData->fd_enable)
    91b8:	9b00      	ldr	r3, [sp, #0]
    91ba:	7e1b      	ldrb	r3, [r3, #24]
    91bc:	2b00      	cmp	r3, #0
    91be:	d00c      	beq.n	91da <FlexCAN_InitBaudrate+0x36>
        {
            /* Write Normal bit time configuration to CBT register */
            FlexCAN_SetExtendedTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    91c0:	9b00      	ldr	r3, [sp, #0]
    91c2:	331c      	adds	r3, #28
    91c4:	4619      	mov	r1, r3
    91c6:	9801      	ldr	r0, [sp, #4]
    91c8:	f7ff fd94 	bl	8cf4 <FlexCAN_SetExtendedTimeSegments>
            /* Write Data bit time configuration to FDCBT register */
            FlexCAN_SetFDTimeSegments(pBase, &Flexcan_Ip_pData->bitrate_cbt);
    91cc:	9b00      	ldr	r3, [sp, #0]
    91ce:	3330      	adds	r3, #48	; 0x30
    91d0:	4619      	mov	r1, r3
    91d2:	9801      	ldr	r0, [sp, #4]
    91d4:	f7ff fd2d 	bl	8c32 <FlexCAN_SetFDTimeSegments>
            /* Write Normal bit time configuration to CTRL1 register */
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
        }
#endif
    }
}
    91d8:	e005      	b.n	91e6 <FlexCAN_InitBaudrate+0x42>
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    91da:	9b00      	ldr	r3, [sp, #0]
    91dc:	331c      	adds	r3, #28
    91de:	4619      	mov	r1, r3
    91e0:	9801      	ldr	r0, [sp, #4]
    91e2:	f7ff fd5b 	bl	8c9c <FlexCAN_SetTimeSegments>
}
    91e6:	bf00      	nop
    91e8:	b003      	add	sp, #12
    91ea:	f85d fb04 	ldr.w	pc, [sp], #4

000091ee <FlexCAN_ProccessLegacyRxFIFO>:
 * Description   : This function will process the enhanced RxFIFO in blocking mode.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_ProccessLegacyRxFIFO(uint8 u8Instance, uint32 u32TimeoutMs)
{
    91ee:	b500      	push	{lr}
    91f0:	b08d      	sub	sp, #52	; 0x34
    91f2:	4603      	mov	r3, r0
    91f4:	9102      	str	r1, [sp, #8]
    91f6:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    91fa:	2300      	movs	r3, #0
    91fc:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    91fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9202:	4a46      	ldr	r2, [pc, #280]	; (931c <FlexCAN_ProccessLegacyRxFIFO+0x12e>)
    9204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9208:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    920a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    920e:	4a44      	ldr	r2, [pc, #272]	; (9320 <FlexCAN_ProccessLegacyRxFIFO+0x132>)
    9210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9214:	9307      	str	r3, [sp, #28]
    uint32 timeStart = 0U;
    9216:	2300      	movs	r3, #0
    9218:	9305      	str	r3, [sp, #20]
    uint32 timeElapsed = 0U;
    921a:	2300      	movs	r3, #0
    921c:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    921e:	9b02      	ldr	r3, [sp, #8]
    9220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9224:	fb02 f303 	mul.w	r3, r2, r3
    9228:	2100      	movs	r1, #0
    922a:	4618      	mov	r0, r3
    922c:	f7f8 fdec 	bl	1e08 <OsIf_MicrosToTicks>
    9230:	9006      	str	r0, [sp, #24]
    uint32 u32intType = 0U;
    9232:	2300      	movs	r3, #0
    9234:	9309      	str	r3, [sp, #36]	; 0x24

        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9236:	2000      	movs	r0, #0
    9238:	f7f8 fd9a 	bl	1d70 <OsIf_GetCounter>
    923c:	4603      	mov	r3, r0
    923e:	9305      	str	r3, [sp, #20]

        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    9240:	e02a      	b.n	9298 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
        {
            if (FLEXCAN_RXFIFO_USING_POLLING == pState->transferType)
    9242:	9b08      	ldr	r3, [sp, #32]
    9244:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    9248:	2b01      	cmp	r3, #1
    924a:	d115      	bne.n	9278 <FlexCAN_ProccessLegacyRxFIFO+0x8a>
            {
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    924c:	2307      	movs	r3, #7
    924e:	9309      	str	r3, [sp, #36]	; 0x24
    9250:	e00f      	b.n	9272 <FlexCAN_ProccessLegacyRxFIFO+0x84>
                     u32intType >= FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE; \
                     u32intType--)
                {
                    if (FlexCAN_GetBuffStatusFlag(pBase, u32intType) != 0U)
    9252:	9909      	ldr	r1, [sp, #36]	; 0x24
    9254:	9807      	ldr	r0, [sp, #28]
    9256:	f7ff fcd0 	bl	8bfa <FlexCAN_GetBuffStatusFlag>
    925a:	4603      	mov	r3, r0
    925c:	2b00      	cmp	r3, #0
    925e:	d005      	beq.n	926c <FlexCAN_ProccessLegacyRxFIFO+0x7e>
                    {
                        FlexCAN_IRQHandlerRxFIFO(u8Instance, u32intType);
    9260:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9264:	9909      	ldr	r1, [sp, #36]	; 0x24
    9266:	4618      	mov	r0, r3
    9268:	f000 fb06 	bl	9878 <FlexCAN_IRQHandlerRxFIFO>
                     u32intType--)
    926c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    926e:	3b01      	subs	r3, #1
    9270:	9309      	str	r3, [sp, #36]	; 0x24
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    9272:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9274:	2b04      	cmp	r3, #4
    9276:	d8ec      	bhi.n	9252 <FlexCAN_ProccessLegacyRxFIFO+0x64>
                    }
                }
            }

            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9278:	ab05      	add	r3, sp, #20
    927a:	2100      	movs	r1, #0
    927c:	4618      	mov	r0, r3
    927e:	f7f8 fd90 	bl	1da2 <OsIf_GetElapsed>
    9282:	4602      	mov	r2, r0
    9284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9286:	4413      	add	r3, r2
    9288:	930a      	str	r3, [sp, #40]	; 0x28
            if (timeElapsed >= mS2Ticks)
    928a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    928c:	9b06      	ldr	r3, [sp, #24]
    928e:	429a      	cmp	r2, r3
    9290:	d302      	bcc.n	9298 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
            {
                eResult = FLEXCAN_STATUS_TIMEOUT;
    9292:	2303      	movs	r3, #3
    9294:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    9296:	e003      	b.n	92a0 <FlexCAN_ProccessLegacyRxFIFO+0xb2>
        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    9298:	9b08      	ldr	r3, [sp, #32]
    929a:	685b      	ldr	r3, [r3, #4]
    929c:	2b01      	cmp	r3, #1
    929e:	d0d0      	beq.n	9242 <FlexCAN_ProccessLegacyRxFIFO+0x54>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == eResult) && (FLEXCAN_RXFIFO_USING_POLLING != pState->transferType))
    92a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    92a2:	2b03      	cmp	r3, #3
    92a4:	d125      	bne.n	92f2 <FlexCAN_ProccessLegacyRxFIFO+0x104>
    92a6:	9b08      	ldr	r3, [sp, #32]
    92a8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    92ac:	2b01      	cmp	r3, #1
    92ae:	d020      	beq.n	92f2 <FlexCAN_ProccessLegacyRxFIFO+0x104>
        {
            /* Disable RX FIFO interrupts*/
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, pState->isIntActive);
    92b0:	9b08      	ldr	r3, [sp, #32]
    92b2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    92b6:	f89d 100f 	ldrb.w	r1, [sp, #15]
    92ba:	9300      	str	r3, [sp, #0]
    92bc:	2300      	movs	r3, #0
    92be:	2205      	movs	r2, #5
    92c0:	9807      	ldr	r0, [sp, #28]
    92c2:	f002 feef 	bl	c0a4 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, pState->isIntActive);
    92c6:	9b08      	ldr	r3, [sp, #32]
    92c8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    92cc:	f89d 100f 	ldrb.w	r1, [sp, #15]
    92d0:	9300      	str	r3, [sp, #0]
    92d2:	2300      	movs	r3, #0
    92d4:	2206      	movs	r2, #6
    92d6:	9807      	ldr	r0, [sp, #28]
    92d8:	f002 fee4 	bl	c0a4 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, pState->isIntActive);
    92dc:	9b08      	ldr	r3, [sp, #32]
    92de:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    92e2:	f89d 100f 	ldrb.w	r1, [sp, #15]
    92e6:	9300      	str	r3, [sp, #0]
    92e8:	2300      	movs	r3, #0
    92ea:	2207      	movs	r2, #7
    92ec:	9807      	ldr	r0, [sp, #28]
    92ee:	f002 fed9 	bl	c0a4 <FlexCAN_SetMsgBuffIntCmd>
                (void)Dma_Ip_SetLogicChannelCommand(pState->rxFifoDMAChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            }
#endif
        }

        switch (pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    92f2:	9b08      	ldr	r3, [sp, #32]
    92f4:	685b      	ldr	r3, [r3, #4]
    92f6:	2b00      	cmp	r3, #0
    92f8:	d005      	beq.n	9306 <FlexCAN_ProccessLegacyRxFIFO+0x118>
    92fa:	2b01      	cmp	r3, #1
    92fc:	d106      	bne.n	930c <FlexCAN_ProccessLegacyRxFIFO+0x11e>
        {
            case FLEXCAN_MB_RX_BUSY:
                pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    92fe:	9b08      	ldr	r3, [sp, #32]
    9300:	2200      	movs	r2, #0
    9302:	605a      	str	r2, [r3, #4]
                break;
    9304:	e005      	b.n	9312 <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_IDLE:
                eResult = FLEXCAN_STATUS_SUCCESS;
    9306:	2300      	movs	r3, #0
    9308:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    930a:	e002      	b.n	9312 <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_DMA_ERROR:
                eResult = FLEXCAN_STATUS_ERROR;
                break;
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
            default:
                eResult = FLEXCAN_STATUS_ERROR;
    930c:	2301      	movs	r3, #1
    930e:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    9310:	bf00      	nop
        }

    return eResult;
    9312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    9314:	4618      	mov	r0, r3
    9316:	b00d      	add	sp, #52	; 0x34
    9318:	f85d fb04 	ldr.w	pc, [sp], #4
    931c:	1fff8fb8 	.word	0x1fff8fb8
    9320:	0000ff50 	.word	0x0000ff50

00009324 <FlexCAN_StartRxMessageBufferData>:
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageBufferData(uint8 instance,
                                                              uint8 mb_idx,
                                                              Flexcan_Ip_MsgBuffType * data,
                                                              boolean isPolling
                                                             )
{
    9324:	b084      	sub	sp, #16
    9326:	9200      	str	r2, [sp, #0]
    9328:	461a      	mov	r2, r3
    932a:	4603      	mov	r3, r0
    932c:	f88d 3007 	strb.w	r3, [sp, #7]
    9330:	460b      	mov	r3, r1
    9332:	f88d 3006 	strb.w	r3, [sp, #6]
    9336:	4613      	mov	r3, r2
    9338:	f88d 3005 	strb.w	r3, [sp, #5]

    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    933c:	2300      	movs	r3, #0
    933e:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9340:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9344:	4a15      	ldr	r2, [pc, #84]	; (939c <FlexCAN_StartRxMessageBufferData+0x78>)
    9346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    934a:	9302      	str	r3, [sp, #8]
    }
    else
    {
#endif
        /* Start receiving mailbox */
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    934c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9350:	9a02      	ldr	r2, [sp, #8]
    9352:	011b      	lsls	r3, r3, #4
    9354:	4413      	add	r3, r2
    9356:	3304      	adds	r3, #4
    9358:	681b      	ldr	r3, [r3, #0]
    935a:	2b00      	cmp	r3, #0
    935c:	d002      	beq.n	9364 <FlexCAN_StartRxMessageBufferData+0x40>
        {
            result = FLEXCAN_STATUS_BUSY;
    935e:	2302      	movs	r3, #2
    9360:	9303      	str	r3, [sp, #12]
    9362:	e017      	b.n	9394 <FlexCAN_StartRxMessageBufferData+0x70>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_RX_BUSY;
    9364:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9368:	9a02      	ldr	r2, [sp, #8]
    936a:	011b      	lsls	r3, r3, #4
    936c:	4413      	add	r3, r2
    936e:	3304      	adds	r3, #4
    9370:	2201      	movs	r2, #1
    9372:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].pMBmessage = data;
    9374:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9378:	9a02      	ldr	r2, [sp, #8]
    937a:	011b      	lsls	r3, r3, #4
    937c:	4413      	add	r3, r2
    937e:	9a00      	ldr	r2, [sp, #0]
    9380:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = isPolling;
    9382:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9386:	9a02      	ldr	r2, [sp, #8]
    9388:	011b      	lsls	r3, r3, #4
    938a:	4413      	add	r3, r2
    938c:	3308      	adds	r3, #8
    938e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    9392:	701a      	strb	r2, [r3, #0]
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    9394:	9b03      	ldr	r3, [sp, #12]
}
    9396:	4618      	mov	r0, r3
    9398:	b004      	add	sp, #16
    939a:	4770      	bx	lr
    939c:	1fff8fb8 	.word	0x1fff8fb8

000093a0 <FlexCAN_StartSendData>:
                                                   uint8 mb_idx,
                                                   const Flexcan_Ip_DataInfoType * tx_info,
                                                   uint32 msg_id,
                                                   const uint8 * mb_data
                                                  )
{
    93a0:	b500      	push	{lr}
    93a2:	b08f      	sub	sp, #60	; 0x3c
    93a4:	9204      	str	r2, [sp, #16]
    93a6:	9303      	str	r3, [sp, #12]
    93a8:	4603      	mov	r3, r0
    93aa:	f88d 3017 	strb.w	r3, [sp, #23]
    93ae:	460b      	mov	r3, r1
    93b0:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    93b4:	2300      	movs	r3, #0
    93b6:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[Flexcan_Ip_u8Instance];
    93b8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    93bc:	4a38      	ldr	r2, [pc, #224]	; (94a0 <FlexCAN_StartSendData+0x100>)
    93be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93c2:	930c      	str	r3, [sp, #48]	; 0x30
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    93c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    93c8:	4a36      	ldr	r2, [pc, #216]	; (94a4 <FlexCAN_StartSendData+0x104>)
    93ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93ce:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    93d0:	2300      	movs	r3, #0
    93d2:	930a      	str	r3, [sp, #40]	; 0x28
        eResult = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
    else
    {
#endif
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    93d4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    93d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    93da:	011b      	lsls	r3, r3, #4
    93dc:	4413      	add	r3, r2
    93de:	3304      	adds	r3, #4
    93e0:	681b      	ldr	r3, [r3, #0]
    93e2:	2b00      	cmp	r3, #0
    93e4:	d002      	beq.n	93ec <FlexCAN_StartSendData+0x4c>
        {
            eResult = FLEXCAN_STATUS_BUSY;
    93e6:	2302      	movs	r3, #2
    93e8:	930d      	str	r3, [sp, #52]	; 0x34
    93ea:	e053      	b.n	9494 <FlexCAN_StartSendData+0xf4>
        }
        else
        {
            /* Clear message buffer flag */
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    93ec:	f89d 3016 	ldrb.w	r3, [sp, #22]
    93f0:	4619      	mov	r1, r3
    93f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    93f4:	f7ff fbee 	bl	8bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>

            state->mbs[mb_idx].state = FLEXCAN_MB_TX_BUSY;
    93f8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    93fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    93fe:	011b      	lsls	r3, r3, #4
    9400:	4413      	add	r3, r2
    9402:	3304      	adds	r3, #4
    9404:	2202      	movs	r2, #2
    9406:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].time_stamp = 0U;
    9408:	f89d 3016 	ldrb.w	r3, [sp, #22]
    940c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    940e:	011b      	lsls	r3, r3, #4
    9410:	4413      	add	r3, r2
    9412:	330c      	adds	r3, #12
    9414:	2200      	movs	r2, #0
    9416:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = tx_info->is_polling;
    9418:	f89d 3016 	ldrb.w	r3, [sp, #22]
    941c:	9a04      	ldr	r2, [sp, #16]
    941e:	7b11      	ldrb	r1, [r2, #12]
    9420:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9422:	011b      	lsls	r3, r3, #4
    9424:	4413      	add	r3, r2
    9426:	3308      	adds	r3, #8
    9428:	460a      	mov	r2, r1
    942a:	701a      	strb	r2, [r3, #0]
            state->mbs[mb_idx].isRemote = tx_info->is_remote;
    942c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9430:	9a04      	ldr	r2, [sp, #16]
    9432:	7ad1      	ldrb	r1, [r2, #11]
    9434:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9436:	011b      	lsls	r3, r3, #4
    9438:	4413      	add	r3, r2
    943a:	3309      	adds	r3, #9
    943c:	460a      	mov	r2, r1
    943e:	701a      	strb	r2, [r3, #0]

            cs.dataLen = tx_info->data_length;
    9440:	9b04      	ldr	r3, [sp, #16]
    9442:	685b      	ldr	r3, [r3, #4]
    9444:	9308      	str	r3, [sp, #32]

            cs.msgIdType = tx_info->msg_id_type;
    9446:	9b04      	ldr	r3, [sp, #16]
    9448:	681b      	ldr	r3, [r3, #0]
    944a:	9307      	str	r3, [sp, #28]

        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            cs.fd_enable = tx_info->fd_enable;
    944c:	9b04      	ldr	r3, [sp, #16]
    944e:	7a1b      	ldrb	r3, [r3, #8]
    9450:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            cs.fd_padding = tx_info->fd_padding;
    9454:	9b04      	ldr	r3, [sp, #16]
    9456:	7a5b      	ldrb	r3, [r3, #9]
    9458:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
            cs.enable_brs = tx_info->enable_brs;
    945c:	9b04      	ldr	r3, [sp, #16]
    945e:	7a9b      	ldrb	r3, [r3, #10]
    9460:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        #endif

            if (tx_info->is_remote)
    9464:	9b04      	ldr	r3, [sp, #16]
    9466:	7adb      	ldrb	r3, [r3, #11]
    9468:	2b00      	cmp	r3, #0
    946a:	d002      	beq.n	9472 <FlexCAN_StartSendData+0xd2>
            {
                cs.code = (uint32)FLEXCAN_TX_REMOTE;
    946c:	231c      	movs	r3, #28
    946e:	9306      	str	r3, [sp, #24]
    9470:	e001      	b.n	9476 <FlexCAN_StartSendData+0xd6>
            }
            else
            {
                cs.code = (uint32)FLEXCAN_TX_DATA;
    9472:	230c      	movs	r3, #12
    9474:	9306      	str	r3, [sp, #24]
            }
            pMbAddr = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    9476:	f89d 3016 	ldrb.w	r3, [sp, #22]
    947a:	4619      	mov	r1, r3
    947c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    947e:	f002 fa89 	bl	b994 <FlexCAN_GetMsgBuffRegion>
    9482:	900a      	str	r0, [sp, #40]	; 0x28
            FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, FALSE);
    9484:	a906      	add	r1, sp, #24
    9486:	2300      	movs	r3, #0
    9488:	9300      	str	r3, [sp, #0]
    948a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    948c:	9a03      	ldr	r2, [sp, #12]
    948e:	980a      	ldr	r0, [sp, #40]	; 0x28
    9490:	f002 ffd2 	bl	c438 <FlexCAN_SetTxMsgBuff>
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    9494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    9496:	4618      	mov	r0, r3
    9498:	b00f      	add	sp, #60	; 0x3c
    949a:	f85d fb04 	ldr.w	pc, [sp], #4
    949e:	bf00      	nop
    94a0:	1fff8fb8 	.word	0x1fff8fb8
    94a4:	0000ff50 	.word	0x0000ff50

000094a8 <FlexCAN_StartRxMessageFifoData>:
 * receiving data and enabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageFifoData(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    94a8:	b500      	push	{lr}
    94aa:	b089      	sub	sp, #36	; 0x24
    94ac:	4603      	mov	r3, r0
    94ae:	9102      	str	r1, [sp, #8]
    94b0:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = NULL_PTR;
    94b4:	2300      	movs	r3, #0
    94b6:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StateType * state = NULL_PTR;
    94b8:	2300      	movs	r3, #0
    94ba:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    94bc:	2300      	movs	r3, #0
    94be:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base = Flexcan_Ip_apxBase[instance];
    94c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    94c4:	4a26      	ldr	r2, [pc, #152]	; (9560 <FlexCAN_StartRxMessageFifoData+0xb8>)
    94c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94ca:	9306      	str	r3, [sp, #24]
    state = Flexcan_Ip_apxState[instance];
    94cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    94d0:	4a24      	ldr	r2, [pc, #144]	; (9564 <FlexCAN_StartRxMessageFifoData+0xbc>)
    94d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94d6:	9305      	str	r3, [sp, #20]
    #endif
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    /* Start receiving fifo */
    if (state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state == FLEXCAN_MB_RX_BUSY)
    94d8:	9b05      	ldr	r3, [sp, #20]
    94da:	685b      	ldr	r3, [r3, #4]
    94dc:	2b01      	cmp	r3, #1
    94de:	d102      	bne.n	94e6 <FlexCAN_StartRxMessageFifoData+0x3e>
    {
        eResult = FLEXCAN_STATUS_BUSY;
    94e0:	2302      	movs	r3, #2
    94e2:	9307      	str	r3, [sp, #28]
    94e4:	e036      	b.n	9554 <FlexCAN_StartRxMessageFifoData+0xac>
    }
    else
    {
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_RX_BUSY;
    94e6:	9b05      	ldr	r3, [sp, #20]
    94e8:	2201      	movs	r2, #1
    94ea:	605a      	str	r2, [r3, #4]
    if (FLEXCAN_RXFIFO_USING_POLLING == state->transferType)
    94ec:	9b05      	ldr	r3, [sp, #20]
    94ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    94f2:	2b01      	cmp	r3, #1
    94f4:	d102      	bne.n	94fc <FlexCAN_StartRxMessageFifoData+0x54>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    94f6:	9b05      	ldr	r3, [sp, #20]
    94f8:	2201      	movs	r2, #1
    94fa:	721a      	strb	r2, [r3, #8]
    }

    /* This will get filled by the interrupt handler */
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = data;
    94fc:	9b05      	ldr	r3, [sp, #20]
    94fe:	9a02      	ldr	r2, [sp, #8]
    9500:	601a      	str	r2, [r3, #0]

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    9502:	9b05      	ldr	r3, [sp, #20]
    9504:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    9508:	2b00      	cmp	r3, #0
    950a:	d123      	bne.n	9554 <FlexCAN_StartRxMessageFifoData+0xac>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = FALSE;
    950c:	9b05      	ldr	r3, [sp, #20]
    950e:	2200      	movs	r2, #0
    9510:	721a      	strb	r2, [r3, #8]
        /* Enable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, TRUE, state->isIntActive);
    9512:	9b05      	ldr	r3, [sp, #20]
    9514:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9518:	f89d 100f 	ldrb.w	r1, [sp, #15]
    951c:	9300      	str	r3, [sp, #0]
    951e:	2301      	movs	r3, #1
    9520:	2206      	movs	r2, #6
    9522:	9806      	ldr	r0, [sp, #24]
    9524:	f002 fdbe 	bl	c0a4 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, TRUE, state->isIntActive);
    9528:	9b05      	ldr	r3, [sp, #20]
    952a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    952e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9532:	9300      	str	r3, [sp, #0]
    9534:	2301      	movs	r3, #1
    9536:	2207      	movs	r2, #7
    9538:	9806      	ldr	r0, [sp, #24]
    953a:	f002 fdb3 	bl	c0a4 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, TRUE, state->isIntActive);
    953e:	9b05      	ldr	r3, [sp, #20]
    9540:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9544:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9548:	9300      	str	r3, [sp, #0]
    954a:	2301      	movs	r3, #1
    954c:	2205      	movs	r2, #5
    954e:	9806      	ldr	r0, [sp, #24]
    9550:	f002 fda8 	bl	c0a4 <FlexCAN_SetMsgBuffIntCmd>
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    9554:	9b07      	ldr	r3, [sp, #28]
}
    9556:	4618      	mov	r0, r3
    9558:	b009      	add	sp, #36	; 0x24
    955a:	f85d fb04 	ldr.w	pc, [sp], #4
    955e:	bf00      	nop
    9560:	0000ff50 	.word	0x0000ff50
    9564:	1fff8fb8 	.word	0x1fff8fb8

00009568 <FlexCAN_IRQHandlerRxMB>:
 *
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerRxMB(uint8 instance, uint32 mb_idx)
{
    9568:	b510      	push	{r4, lr}
    956a:	b09e      	sub	sp, #120	; 0x78
    956c:	4603      	mov	r3, r0
    956e:	9102      	str	r1, [sp, #8]
    9570:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9574:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9578:	4a70      	ldr	r2, [pc, #448]	; (973c <FlexCAN_IRQHandlerRxMB+0x1d4>)
    957a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    957e:	931c      	str	r3, [sp, #112]	; 0x70
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9580:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9584:	4a6e      	ldr	r2, [pc, #440]	; (9740 <FlexCAN_IRQHandlerRxMB+0x1d8>)
    9586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    958a:	931b      	str	r3, [sp, #108]	; 0x6c
    Flexcan_Ip_MsgBuffType data;
    boolean bCurrentIntStat = FALSE;
    958c:	2300      	movs	r3, #0
    958e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[mb_idx].pMBmessage  */
    if (NULL_PTR == state->mbs[mb_idx].pMBmessage)
    9592:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9594:	9b02      	ldr	r3, [sp, #8]
    9596:	011b      	lsls	r3, r3, #4
    9598:	4413      	add	r3, r2
    959a:	681b      	ldr	r3, [r3, #0]
    959c:	2b00      	cmp	r3, #0
    959e:	d105      	bne.n	95ac <FlexCAN_IRQHandlerRxMB+0x44>
    {
        state->mbs[mb_idx].pMBmessage = &data;
    95a0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    95a2:	9b02      	ldr	r3, [sp, #8]
    95a4:	011b      	lsls	r3, r3, #4
    95a6:	4413      	add	r3, r2
    95a8:	aa05      	add	r2, sp, #20
    95aa:	601a      	str	r2, [r3, #0]
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    boolean bIsCriticalSectionNeeded = FALSE;
    95ac:	2300      	movs	r3, #0
    95ae:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77

    /* Expectation: the sequence will not be interrupted when it already in interupt context */
    if (TRUE == state->mbs[mb_idx].isPolling)
    95b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    95b4:	9b02      	ldr	r3, [sp, #8]
    95b6:	011b      	lsls	r3, r3, #4
    95b8:	4413      	add	r3, r2
    95ba:	3308      	adds	r3, #8
    95bc:	781b      	ldrb	r3, [r3, #0]
    95be:	2b00      	cmp	r3, #0
    95c0:	d008      	beq.n	95d4 <FlexCAN_IRQHandlerRxMB+0x6c>
        if ((state->bIsLegacyFifoEn ||  state->bIsEnhancedFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #else
        if ((state->bIsLegacyFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    #elif defined (ERR_IPV_FLEXCAN_E050246)
        if (state->bIsLegacyFifoEn)
    95c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    95c4:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    95c8:	2b00      	cmp	r3, #0
    95ca:	d003      	beq.n	95d4 <FlexCAN_IRQHandlerRxMB+0x6c>
    #endif
        {
            bIsCriticalSectionNeeded = TRUE;
    95cc:	2301      	movs	r3, #1
    95ce:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
            /* Disable all IRQs */
            OsIf_SuspendAllInterrupts();
    95d2:	b672      	cpsid	i
        }
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    /* Lock RX message buffer and RX FIFO*/
    FlexCAN_LockRxMsgBuff(base, mb_idx);
    95d4:	9902      	ldr	r1, [sp, #8]
    95d6:	981c      	ldr	r0, [sp, #112]	; 0x70
    95d8:	f002 fd55 	bl	c086 <FlexCAN_LockRxMsgBuff>

    /* Get RX MB field values*/
    FlexCAN_GetMsgBuff(base, mb_idx, state->mbs[mb_idx].pMBmessage);
    95dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    95de:	9b02      	ldr	r3, [sp, #8]
    95e0:	011b      	lsls	r3, r3, #4
    95e2:	4413      	add	r3, r2
    95e4:	681b      	ldr	r3, [r3, #0]
    95e6:	461a      	mov	r2, r3
    95e8:	9902      	ldr	r1, [sp, #8]
    95ea:	981c      	ldr	r0, [sp, #112]	; 0x70
    95ec:	f002 fe7a 	bl	c2e4 <FlexCAN_GetMsgBuff>

    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    95f0:	9902      	ldr	r1, [sp, #8]
    95f2:	981c      	ldr	r0, [sp, #112]	; 0x70
    95f4:	f7ff faee 	bl	8bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>

#if defined (ERR_IPV_FLEXCAN_E050246)
    /* the CODE field is updated with an incorrect value when MBx is locked by software for more than 20 CAN bit times and FIFO enable.
    When the CODE field is corrupted, it's probably updated with any value that is invalid. Except EMPTY, FULL and OVERRUN other values can not make MB unlocked and move-in process. */
    if ((state->bIsLegacyFifoEn) && \
    95f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    95fa:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    95fe:	2b00      	cmp	r3, #0
    9600:	d032      	beq.n	9668 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    9602:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9604:	9b02      	ldr	r3, [sp, #8]
    9606:	011b      	lsls	r3, r3, #4
    9608:	4413      	add	r3, r2
    960a:	681b      	ldr	r3, [r3, #0]
    960c:	681b      	ldr	r3, [r3, #0]
    960e:	0e1b      	lsrs	r3, r3, #24
    9610:	f003 030f 	and.w	r3, r3, #15
    if ((state->bIsLegacyFifoEn) && \
    9614:	2b02      	cmp	r3, #2
    9616:	d027      	beq.n	9668 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    9618:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    961a:	9b02      	ldr	r3, [sp, #8]
    961c:	011b      	lsls	r3, r3, #4
    961e:	4413      	add	r3, r2
    9620:	681b      	ldr	r3, [r3, #0]
    9622:	681b      	ldr	r3, [r3, #0]
    9624:	0e1b      	lsrs	r3, r3, #24
    9626:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    962a:	2b04      	cmp	r3, #4
    962c:	d01c      	beq.n	9668 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_OVERRUN != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)))
    962e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9630:	9b02      	ldr	r3, [sp, #8]
    9632:	011b      	lsls	r3, r3, #4
    9634:	4413      	add	r3, r2
    9636:	681b      	ldr	r3, [r3, #0]
    9638:	681b      	ldr	r3, [r3, #0]
    963a:	0e1b      	lsrs	r3, r3, #24
    963c:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    9640:	2b06      	cmp	r3, #6
    9642:	d011      	beq.n	9668 <FlexCAN_IRQHandlerRxMB+0x100>
    {
        /* Update the cs code for next sequence move in MB.
        A CPU write into the C/S word also unlocks the MB */
        volatile uint32 *flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    9644:	9902      	ldr	r1, [sp, #8]
    9646:	981c      	ldr	r0, [sp, #112]	; 0x70
    9648:	f002 f9a4 	bl	b994 <FlexCAN_GetMsgBuffRegion>
    964c:	9019      	str	r0, [sp, #100]	; 0x64
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    964e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9650:	681b      	ldr	r3, [r3, #0]
    9652:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    9656:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9658:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (((uint32)FLEXCAN_RX_EMPTY) << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    965a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    965c:	681b      	ldr	r3, [r3, #0]
    965e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    9662:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9664:	601a      	str	r2, [r3, #0]
    {
    9666:	e002      	b.n	966e <FlexCAN_IRQHandlerRxMB+0x106>
    }
    else
#endif
    {
    /* Unlock RX message buffer and RX FIFO*/
    FlexCAN_UnlockRxMsgBuff(base);
    9668:	981c      	ldr	r0, [sp, #112]	; 0x70
    966a:	f7ff faac 	bl	8bc6 <FlexCAN_UnlockRxMsgBuff>
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    /* To ensure that interrupts are resumed when they are suspended */
    if (TRUE == bIsCriticalSectionNeeded)
    966e:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    9672:	2b00      	cmp	r3, #0
    9674:	d000      	beq.n	9678 <FlexCAN_IRQHandlerRxMB+0x110>
    {
        /* Enable all IRQs */
        OsIf_ResumeAllInterrupts();
    9676:	b662      	cpsie	i
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9678:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    967a:	9b02      	ldr	r3, [sp, #8]
    967c:	011b      	lsls	r3, r3, #4
    967e:	4413      	add	r3, r2
    9680:	3304      	adds	r3, #4
    9682:	2200      	movs	r2, #0
    9684:	601a      	str	r2, [r3, #0]

    bCurrentIntStat = state->mbs[mb_idx].isPolling;
    9686:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9688:	9b02      	ldr	r3, [sp, #8]
    968a:	011b      	lsls	r3, r3, #4
    968c:	4413      	add	r3, r2
    968e:	3308      	adds	r3, #8
    9690:	781b      	ldrb	r3, [r3, #0]
    9692:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* Invoke callback */
    if (state->callback != NULL_PTR)
    9696:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9698:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    969c:	2b00      	cmp	r3, #0
    969e:	d008      	beq.n	96b2 <FlexCAN_IRQHandlerRxMB+0x14a>
    {
        state->callback(instance, FLEXCAN_EVENT_RX_COMPLETE, mb_idx, state);
    96a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    96a2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    96a6:	f89d 000f 	ldrb.w	r0, [sp, #15]
    96aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    96ac:	9a02      	ldr	r2, [sp, #8]
    96ae:	2100      	movs	r1, #0
    96b0:	47a0      	blx	r4
    }

    if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state) && (FALSE == state->mbs[mb_idx].isPolling))
    96b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    96b4:	9b02      	ldr	r3, [sp, #8]
    96b6:	011b      	lsls	r3, r3, #4
    96b8:	4413      	add	r3, r2
    96ba:	3304      	adds	r3, #4
    96bc:	681b      	ldr	r3, [r3, #0]
    96be:	2b00      	cmp	r3, #0
    96c0:	d11e      	bne.n	9700 <FlexCAN_IRQHandlerRxMB+0x198>
    96c2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    96c4:	9b02      	ldr	r3, [sp, #8]
    96c6:	011b      	lsls	r3, r3, #4
    96c8:	4413      	add	r3, r2
    96ca:	3308      	adds	r3, #8
    96cc:	781b      	ldrb	r3, [r3, #0]
    96ce:	f083 0301 	eor.w	r3, r3, #1
    96d2:	b2db      	uxtb	r3, r3
    96d4:	2b00      	cmp	r3, #0
    96d6:	d013      	beq.n	9700 <FlexCAN_IRQHandlerRxMB+0x198>
    {
        /* callback is not called, need to reset to default value */
        state->mbs[mb_idx].isPolling = TRUE;
    96d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    96da:	9b02      	ldr	r3, [sp, #8]
    96dc:	011b      	lsls	r3, r3, #4
    96de:	4413      	add	r3, r2
    96e0:	3308      	adds	r3, #8
    96e2:	2201      	movs	r2, #1
    96e4:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    96e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    96e8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    96ec:	f89d 100f 	ldrb.w	r1, [sp, #15]
    96f0:	9300      	str	r3, [sp, #0]
    96f2:	2300      	movs	r3, #0
    96f4:	9a02      	ldr	r2, [sp, #8]
    96f6:	981c      	ldr	r0, [sp, #112]	; 0x70
    96f8:	f002 fcd4 	bl	c0a4 <FlexCAN_SetMsgBuffIntCmd>
    96fc:	bf00      	nop
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    96fe:	e019      	b.n	9734 <FlexCAN_IRQHandlerRxMB+0x1cc>
    else if ((FALSE == bCurrentIntStat) && (TRUE == state->mbs[mb_idx].isPolling))
    9700:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
    9704:	f083 0301 	eor.w	r3, r3, #1
    9708:	b2db      	uxtb	r3, r3
    970a:	2b00      	cmp	r3, #0
    970c:	d012      	beq.n	9734 <FlexCAN_IRQHandlerRxMB+0x1cc>
    970e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9710:	9b02      	ldr	r3, [sp, #8]
    9712:	011b      	lsls	r3, r3, #4
    9714:	4413      	add	r3, r2
    9716:	3308      	adds	r3, #8
    9718:	781b      	ldrb	r3, [r3, #0]
    971a:	2b00      	cmp	r3, #0
    971c:	d00a      	beq.n	9734 <FlexCAN_IRQHandlerRxMB+0x1cc>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    971e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9720:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9724:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9728:	9300      	str	r3, [sp, #0]
    972a:	2300      	movs	r3, #0
    972c:	9a02      	ldr	r2, [sp, #8]
    972e:	981c      	ldr	r0, [sp, #112]	; 0x70
    9730:	f002 fcb8 	bl	c0a4 <FlexCAN_SetMsgBuffIntCmd>
}
    9734:	bf00      	nop
    9736:	b01e      	add	sp, #120	; 0x78
    9738:	bd10      	pop	{r4, pc}
    973a:	bf00      	nop
    973c:	0000ff50 	.word	0x0000ff50
    9740:	1fff8fb8 	.word	0x1fff8fb8

00009744 <FlexCAN_IRQHandlerTxMB>:
 * note: just using in interrupt mode
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerTxMB(uint8 u8Instance, uint32 u32MbIdx)
{
    9744:	b510      	push	{r4, lr}
    9746:	b09a      	sub	sp, #104	; 0x68
    9748:	4603      	mov	r3, r0
    974a:	9102      	str	r1, [sp, #8]
    974c:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9750:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9754:	4a46      	ldr	r2, [pc, #280]	; (9870 <FlexCAN_IRQHandlerTxMB+0x12c>)
    9756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    975a:	9319      	str	r3, [sp, #100]	; 0x64
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    975c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9760:	4a44      	ldr	r2, [pc, #272]	; (9874 <FlexCAN_IRQHandlerTxMB+0x130>)
    9762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9766:	9318      	str	r3, [sp, #96]	; 0x60
    Flexcan_Ip_MsgBuffType mb;
    mb.cs = 0U;
    9768:	2300      	movs	r3, #0
    976a:	9304      	str	r3, [sp, #16]
    mb.time_stamp = 0U;
    976c:	2300      	movs	r3, #0
    976e:	9317      	str	r3, [sp, #92]	; 0x5c
    if (pState->mbs[u32MbIdx].isRemote)
    9770:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9772:	9b02      	ldr	r3, [sp, #8]
    9774:	011b      	lsls	r3, r3, #4
    9776:	4413      	add	r3, r2
    9778:	3309      	adds	r3, #9
    977a:	781b      	ldrb	r3, [r3, #0]
    977c:	2b00      	cmp	r3, #0
    977e:	d01e      	beq.n	97be <FlexCAN_IRQHandlerTxMB+0x7a>
    {
        FlexCAN_LockRxMsgBuff(pBase, u32MbIdx);
    9780:	9902      	ldr	r1, [sp, #8]
    9782:	9819      	ldr	r0, [sp, #100]	; 0x64
    9784:	f002 fc7f 	bl	c086 <FlexCAN_LockRxMsgBuff>
        FlexCAN_GetMsgBuff(pBase, u32MbIdx, &mb);
    9788:	ab04      	add	r3, sp, #16
    978a:	461a      	mov	r2, r3
    978c:	9902      	ldr	r1, [sp, #8]
    978e:	9819      	ldr	r0, [sp, #100]	; 0x64
    9790:	f002 fda8 	bl	c2e4 <FlexCAN_GetMsgBuff>
        FlexCAN_UnlockRxMsgBuff(pBase);
    9794:	9819      	ldr	r0, [sp, #100]	; 0x64
    9796:	f7ff fa16 	bl	8bc6 <FlexCAN_UnlockRxMsgBuff>
        pState->mbs[u32MbIdx].time_stamp = mb.time_stamp;
    979a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    979c:	9918      	ldr	r1, [sp, #96]	; 0x60
    979e:	9b02      	ldr	r3, [sp, #8]
    97a0:	011b      	lsls	r3, r3, #4
    97a2:	440b      	add	r3, r1
    97a4:	330c      	adds	r3, #12
    97a6:	601a      	str	r2, [r3, #0]
        /* If the frame was a remote frame, clear the flag only if the response was
        * not received yet. If the response was received, leave the flag set in order
        * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
        if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    97a8:	9b04      	ldr	r3, [sp, #16]
    97aa:	0e1b      	lsrs	r3, r3, #24
    97ac:	f003 030f 	and.w	r3, r3, #15
    97b0:	2b04      	cmp	r3, #4
    97b2:	d116      	bne.n	97e2 <FlexCAN_IRQHandlerTxMB+0x9e>
        {
            FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    97b4:	9902      	ldr	r1, [sp, #8]
    97b6:	9819      	ldr	r0, [sp, #100]	; 0x64
    97b8:	f7ff fa0c 	bl	8bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>
    97bc:	e011      	b.n	97e2 <FlexCAN_IRQHandlerTxMB+0x9e>
        }
    }
    else
    {
        pState->mbs[u32MbIdx].time_stamp = FlexCAN_GetMsgBuffTimestamp(pBase, u32MbIdx);
    97be:	9902      	ldr	r1, [sp, #8]
    97c0:	9819      	ldr	r0, [sp, #100]	; 0x64
    97c2:	f002 fd7b 	bl	c2bc <FlexCAN_GetMsgBuffTimestamp>
    97c6:	4601      	mov	r1, r0
    97c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    97ca:	9b02      	ldr	r3, [sp, #8]
    97cc:	011b      	lsls	r3, r3, #4
    97ce:	4413      	add	r3, r2
    97d0:	330c      	adds	r3, #12
    97d2:	6019      	str	r1, [r3, #0]
        FlexCAN_UnlockRxMsgBuff(pBase);
    97d4:	9819      	ldr	r0, [sp, #100]	; 0x64
    97d6:	f7ff f9f6 	bl	8bc6 <FlexCAN_UnlockRxMsgBuff>
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    97da:	9902      	ldr	r1, [sp, #8]
    97dc:	9819      	ldr	r0, [sp, #100]	; 0x64
    97de:	f7ff f9f9 	bl	8bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }

    pState->mbs[u32MbIdx].state = FLEXCAN_MB_IDLE;
    97e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    97e4:	9b02      	ldr	r3, [sp, #8]
    97e6:	011b      	lsls	r3, r3, #4
    97e8:	4413      	add	r3, r2
    97ea:	3304      	adds	r3, #4
    97ec:	2200      	movs	r2, #0
    97ee:	601a      	str	r2, [r3, #0]

    /* Invoke callback */
    if (pState->callback != NULL_PTR)
    97f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    97f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    97f6:	2b00      	cmp	r3, #0
    97f8:	d008      	beq.n	980c <FlexCAN_IRQHandlerTxMB+0xc8>
    {
        pState->callback(u8Instance, FLEXCAN_EVENT_TX_COMPLETE, u32MbIdx, pState);
    97fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
    97fc:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9800:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9804:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9806:	9a02      	ldr	r2, [sp, #8]
    9808:	2104      	movs	r1, #4
    980a:	47a0      	blx	r4
    }

    if (FLEXCAN_MB_IDLE == pState->mbs[u32MbIdx].state)
    980c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    980e:	9b02      	ldr	r3, [sp, #8]
    9810:	011b      	lsls	r3, r3, #4
    9812:	4413      	add	r3, r2
    9814:	3304      	adds	r3, #4
    9816:	681b      	ldr	r3, [r3, #0]
    9818:	2b00      	cmp	r3, #0
    981a:	d112      	bne.n	9842 <FlexCAN_IRQHandlerTxMB+0xfe>
    {
        /* callback is not called, need to reset to default value */
        pState->mbs[u32MbIdx].isPolling = TRUE;
    981c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    981e:	9b02      	ldr	r3, [sp, #8]
    9820:	011b      	lsls	r3, r3, #4
    9822:	4413      	add	r3, r2
    9824:	3308      	adds	r3, #8
    9826:	2201      	movs	r2, #1
    9828:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    982a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    982c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9830:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9834:	9300      	str	r3, [sp, #0]
    9836:	2300      	movs	r3, #0
    9838:	9a02      	ldr	r2, [sp, #8]
    983a:	9819      	ldr	r0, [sp, #100]	; 0x64
    983c:	f002 fc32 	bl	c0a4 <FlexCAN_SetMsgBuffIntCmd>
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    9840:	e012      	b.n	9868 <FlexCAN_IRQHandlerTxMB+0x124>
    else if (TRUE == pState->mbs[u32MbIdx].isPolling)
    9842:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9844:	9b02      	ldr	r3, [sp, #8]
    9846:	011b      	lsls	r3, r3, #4
    9848:	4413      	add	r3, r2
    984a:	3308      	adds	r3, #8
    984c:	781b      	ldrb	r3, [r3, #0]
    984e:	2b00      	cmp	r3, #0
    9850:	d00a      	beq.n	9868 <FlexCAN_IRQHandlerTxMB+0x124>
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    9852:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9854:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9858:	f89d 100f 	ldrb.w	r1, [sp, #15]
    985c:	9300      	str	r3, [sp, #0]
    985e:	2300      	movs	r3, #0
    9860:	9a02      	ldr	r2, [sp, #8]
    9862:	9819      	ldr	r0, [sp, #100]	; 0x64
    9864:	f002 fc1e 	bl	c0a4 <FlexCAN_SetMsgBuffIntCmd>
}
    9868:	bf00      	nop
    986a:	b01a      	add	sp, #104	; 0x68
    986c:	bd10      	pop	{r4, pc}
    986e:	bf00      	nop
    9870:	0000ff50 	.word	0x0000ff50
    9874:	1fff8fb8 	.word	0x1fff8fb8

00009878 <FlexCAN_IRQHandlerRxFIFO>:
 * Function Name : FlexCAN_IRQHandlerRxFIFO
 * Description   : Process IRQHandler in case of RxFIFO mode selection for CAN interface.
 *
 *END**************************************************************************/
static inline void FlexCAN_IRQHandlerRxFIFO(uint8 instance, uint32 mb_idx)
{
    9878:	b510      	push	{r4, lr}
    987a:	b098      	sub	sp, #96	; 0x60
    987c:	4603      	mov	r3, r0
    987e:	9100      	str	r1, [sp, #0]
    9880:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9884:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9888:	4a3c      	ldr	r2, [pc, #240]	; (997c <FlexCAN_IRQHandlerRxFIFO+0x104>)
    988a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    988e:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9890:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9894:	4a3a      	ldr	r2, [pc, #232]	; (9980 <FlexCAN_IRQHandlerRxFIFO+0x108>)
    9896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    989a:	9316      	str	r3, [sp, #88]	; 0x58
    Flexcan_Ip_MsgBuffType data;

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage  */
    if (NULL_PTR == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage)
    989c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    989e:	681b      	ldr	r3, [r3, #0]
    98a0:	2b00      	cmp	r3, #0
    98a2:	d102      	bne.n	98aa <FlexCAN_IRQHandlerRxFIFO+0x32>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = &data;
    98a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    98a6:	aa02      	add	r2, sp, #8
    98a8:	601a      	str	r2, [r3, #0]
    }
    switch (mb_idx)
    98aa:	9b00      	ldr	r3, [sp, #0]
    98ac:	2b07      	cmp	r3, #7
    98ae:	d048      	beq.n	9942 <FlexCAN_IRQHandlerRxFIFO+0xca>
    98b0:	9b00      	ldr	r3, [sp, #0]
    98b2:	2b07      	cmp	r3, #7
    98b4:	d858      	bhi.n	9968 <FlexCAN_IRQHandlerRxFIFO+0xf0>
    98b6:	9b00      	ldr	r3, [sp, #0]
    98b8:	2b05      	cmp	r3, #5
    98ba:	d003      	beq.n	98c4 <FlexCAN_IRQHandlerRxFIFO+0x4c>
    98bc:	9b00      	ldr	r3, [sp, #0]
    98be:	2b06      	cmp	r3, #6
    98c0:	d02c      	beq.n	991c <FlexCAN_IRQHandlerRxFIFO+0xa4>
            }

            break;
        default:
            /* Do Nothing */
            break;
    98c2:	e051      	b.n	9968 <FlexCAN_IRQHandlerRxFIFO+0xf0>
            if (FLEXCAN_MB_RX_BUSY == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    98c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    98c6:	685b      	ldr	r3, [r3, #4]
    98c8:	2b01      	cmp	r3, #1
    98ca:	d14f      	bne.n	996c <FlexCAN_IRQHandlerRxFIFO+0xf4>
                FlexCAN_ReadRxFifo(base, state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage);
    98cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    98ce:	681b      	ldr	r3, [r3, #0]
    98d0:	4619      	mov	r1, r3
    98d2:	9817      	ldr	r0, [sp, #92]	; 0x5c
    98d4:	f003 f98d 	bl	cbf2 <FlexCAN_ReadRxFifo>
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    98d8:	9900      	ldr	r1, [sp, #0]
    98da:	9817      	ldr	r0, [sp, #92]	; 0x5c
    98dc:	f7ff f97a 	bl	8bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>
                state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    98e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    98e2:	2200      	movs	r2, #0
    98e4:	605a      	str	r2, [r3, #4]
                if (state->callback != NULL_PTR)
    98e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    98e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    98ec:	2b00      	cmp	r3, #0
    98ee:	d008      	beq.n	9902 <FlexCAN_IRQHandlerRxFIFO+0x8a>
                    state->callback(instance, FLEXCAN_EVENT_RXFIFO_COMPLETE, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    98f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    98f2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    98f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    98fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    98fc:	2200      	movs	r2, #0
    98fe:	2101      	movs	r1, #1
    9900:	47a0      	blx	r4
                if (FLEXCAN_MB_IDLE == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    9902:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9904:	685b      	ldr	r3, [r3, #4]
    9906:	2b00      	cmp	r3, #0
    9908:	d130      	bne.n	996c <FlexCAN_IRQHandlerRxFIFO+0xf4>
                    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    990a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    990c:	2201      	movs	r2, #1
    990e:	721a      	strb	r2, [r3, #8]
                    FlexCAN_CompleteRxMessageFifoData(instance);
    9910:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9914:	4618      	mov	r0, r3
    9916:	f000 fc61 	bl	a1dc <FlexCAN_CompleteRxMessageFifoData>
            break;
    991a:	e027      	b.n	996c <FlexCAN_IRQHandlerRxFIFO+0xf4>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    991c:	9900      	ldr	r1, [sp, #0]
    991e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9920:	f7ff f958 	bl	8bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    9924:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9926:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    992a:	2b00      	cmp	r3, #0
    992c:	d020      	beq.n	9970 <FlexCAN_IRQHandlerRxFIFO+0xf8>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_WARNING, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    992e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9930:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9934:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9938:	9b16      	ldr	r3, [sp, #88]	; 0x58
    993a:	2200      	movs	r2, #0
    993c:	2102      	movs	r1, #2
    993e:	47a0      	blx	r4
            break;
    9940:	e016      	b.n	9970 <FlexCAN_IRQHandlerRxFIFO+0xf8>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9942:	9900      	ldr	r1, [sp, #0]
    9944:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9946:	f7ff f945 	bl	8bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    994a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    994c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    9950:	2b00      	cmp	r3, #0
    9952:	d00f      	beq.n	9974 <FlexCAN_IRQHandlerRxFIFO+0xfc>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_OVERFLOW, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    9954:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9956:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    995a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    995e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9960:	2200      	movs	r2, #0
    9962:	2103      	movs	r1, #3
    9964:	47a0      	blx	r4
            break;
    9966:	e005      	b.n	9974 <FlexCAN_IRQHandlerRxFIFO+0xfc>
            break;
    9968:	bf00      	nop
    996a:	e004      	b.n	9976 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    996c:	bf00      	nop
    996e:	e002      	b.n	9976 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    9970:	bf00      	nop
    9972:	e000      	b.n	9976 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    9974:	bf00      	nop
    }
}
    9976:	bf00      	nop
    9978:	b018      	add	sp, #96	; 0x60
    997a:	bd10      	pop	{r4, pc}
    997c:	0000ff50 	.word	0x0000ff50
    9980:	1fff8fb8 	.word	0x1fff8fb8

00009984 <FlexCAN_AbortTxTransfer>:
 * Description   : Abort transfer for Tx buffer.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_AbortTxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    9984:	b500      	push	{lr}
    9986:	b08b      	sub	sp, #44	; 0x2c
    9988:	4603      	mov	r3, r0
    998a:	460a      	mov	r2, r1
    998c:	f88d 3007 	strb.w	r3, [sp, #7]
    9990:	4613      	mov	r3, r2
    9992:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9996:	f89d 3007 	ldrb.w	r3, [sp, #7]
    999a:	4a3c      	ldr	r2, [pc, #240]	; (9a8c <FlexCAN_AbortTxTransfer+0x108>)
    999c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99a0:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    99a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    99a6:	4a3a      	ldr	r2, [pc, #232]	; (9a90 <FlexCAN_AbortTxTransfer+0x10c>)
    99a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99ac:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    99ae:	2300      	movs	r3, #0
    99b0:	9309      	str	r3, [sp, #36]	; 0x24

    uint32 timeStart = 0U;
    99b2:	2300      	movs	r3, #0
    99b4:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    99b6:	2300      	movs	r3, #0
    99b8:	9308      	str	r3, [sp, #32]
    uint32 flexcan_mb_config = 0;
    99ba:	2300      	movs	r3, #0
    99bc:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = 0U;
    99be:	2300      	movs	r3, #0
    99c0:	9304      	str	r3, [sp, #16]
    volatile uint32 * flexcan_mb = NULL_PTR;
    99c2:	2300      	movs	r3, #0
    99c4:	9303      	str	r3, [sp, #12]

    flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    99c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    99ca:	4619      	mov	r1, r3
    99cc:	9807      	ldr	r0, [sp, #28]
    99ce:	f001 ffe1 	bl	b994 <FlexCAN_GetMsgBuffRegion>
    99d2:	9003      	str	r0, [sp, #12]
    flexcan_mb_config = * flexcan_mb;
    99d4:	9b03      	ldr	r3, [sp, #12]
    99d6:	681b      	ldr	r3, [r3, #0]
    99d8:	9305      	str	r3, [sp, #20]
    /* Reset the code */
    flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    99da:	9b05      	ldr	r3, [sp, #20]
    99dc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    99e0:	9305      	str	r3, [sp, #20]
    flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    99e2:	9b05      	ldr	r3, [sp, #20]
    99e4:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    99e8:	9305      	str	r3, [sp, #20]
    *flexcan_mb = flexcan_mb_config;
    99ea:	9b03      	ldr	r3, [sp, #12]
    99ec:	9a05      	ldr	r2, [sp, #20]
    99ee:	601a      	str	r2, [r3, #0]

    /* Wait to finish abort operation */
    uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    99f0:	2100      	movs	r1, #0
    99f2:	4828      	ldr	r0, [pc, #160]	; (9a94 <FlexCAN_AbortTxTransfer+0x110>)
    99f4:	f7f8 fa08 	bl	1e08 <OsIf_MicrosToTicks>
    99f8:	9004      	str	r0, [sp, #16]
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    99fa:	2000      	movs	r0, #0
    99fc:	f7f8 f9b8 	bl	1d70 <OsIf_GetCounter>
    9a00:	4603      	mov	r3, r0
    9a02:	9302      	str	r3, [sp, #8]
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    9a04:	e00f      	b.n	9a26 <FlexCAN_AbortTxTransfer+0xa2>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9a06:	ab02      	add	r3, sp, #8
    9a08:	2100      	movs	r1, #0
    9a0a:	4618      	mov	r0, r3
    9a0c:	f7f8 f9c9 	bl	1da2 <OsIf_GetElapsed>
    9a10:	4602      	mov	r2, r0
    9a12:	9b08      	ldr	r3, [sp, #32]
    9a14:	4413      	add	r3, r2
    9a16:	9308      	str	r3, [sp, #32]
        if (timeElapsed >= uS2Ticks)
    9a18:	9a08      	ldr	r2, [sp, #32]
    9a1a:	9b04      	ldr	r3, [sp, #16]
    9a1c:	429a      	cmp	r2, r3
    9a1e:	d302      	bcc.n	9a26 <FlexCAN_AbortTxTransfer+0xa2>
        {
            result = FLEXCAN_STATUS_TIMEOUT;
    9a20:	2303      	movs	r3, #3
    9a22:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    9a24:	e008      	b.n	9a38 <FlexCAN_AbortTxTransfer+0xb4>
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    9a26:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9a2a:	4619      	mov	r1, r3
    9a2c:	9807      	ldr	r0, [sp, #28]
    9a2e:	f7ff f8e4 	bl	8bfa <FlexCAN_GetBuffStatusFlag>
    9a32:	4603      	mov	r3, r0
    9a34:	2b00      	cmp	r3, #0
    9a36:	d0e6      	beq.n	9a06 <FlexCAN_AbortTxTransfer+0x82>
        }
    }
    if (result != FLEXCAN_STATUS_TIMEOUT)
    9a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9a3a:	2b03      	cmp	r3, #3
    9a3c:	d012      	beq.n	9a64 <FlexCAN_AbortTxTransfer+0xe0>
    {
        flexcan_mb_config = *flexcan_mb;
    9a3e:	9b03      	ldr	r3, [sp, #12]
    9a40:	681b      	ldr	r3, [r3, #0]
    9a42:	9305      	str	r3, [sp, #20]
        /* Check if the MBs have been safely Inactivated */
        if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    9a44:	9b05      	ldr	r3, [sp, #20]
    9a46:	0e1b      	lsrs	r3, r3, #24
    9a48:	f003 030f 	and.w	r3, r3, #15
    9a4c:	2b08      	cmp	r3, #8
    9a4e:	d101      	bne.n	9a54 <FlexCAN_AbortTxTransfer+0xd0>
        {
            /* Transmission have occurred */
            result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    9a50:	2305      	movs	r3, #5
    9a52:	9309      	str	r3, [sp, #36]	; 0x24
        }

        if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    9a54:	9b05      	ldr	r3, [sp, #20]
    9a56:	0e1b      	lsrs	r3, r3, #24
    9a58:	f003 030f 	and.w	r3, r3, #15
    9a5c:	2b09      	cmp	r3, #9
    9a5e:	d101      	bne.n	9a64 <FlexCAN_AbortTxTransfer+0xe0>
        {
            /* Transmission have been aborted */
            result = FLEXCAN_STATUS_SUCCESS;
    9a60:	2300      	movs	r3, #0
    9a62:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    9a64:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9a68:	4619      	mov	r1, r3
    9a6a:	9807      	ldr	r0, [sp, #28]
    9a6c:	f7ff f8b2 	bl	8bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>
    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9a70:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9a74:	9a06      	ldr	r2, [sp, #24]
    9a76:	011b      	lsls	r3, r3, #4
    9a78:	4413      	add	r3, r2
    9a7a:	3304      	adds	r3, #4
    9a7c:	2200      	movs	r2, #0
    9a7e:	601a      	str	r2, [r3, #0]

    return result;
    9a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    9a82:	4618      	mov	r0, r3
    9a84:	b00b      	add	sp, #44	; 0x2c
    9a86:	f85d fb04 	ldr.w	pc, [sp], #4
    9a8a:	bf00      	nop
    9a8c:	0000ff50 	.word	0x0000ff50
    9a90:	1fff8fb8 	.word	0x1fff8fb8
    9a94:	000f4240 	.word	0x000f4240

00009a98 <FlexCAN_AbortRxTransfer>:
 * Description   : Abort transfer for Rx normal or legacy fifo if enabled.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static void FlexCAN_AbortRxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    9a98:	b500      	push	{lr}
    9a9a:	b089      	sub	sp, #36	; 0x24
    9a9c:	4603      	mov	r3, r0
    9a9e:	460a      	mov	r2, r1
    9aa0:	f88d 3007 	strb.w	r3, [sp, #7]
    9aa4:	4613      	mov	r3, r2
    9aa6:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9aaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9aae:	4a41      	ldr	r2, [pc, #260]	; (9bb4 <FlexCAN_AbortRxTransfer+0x11c>)
    9ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ab4:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    9ab6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9aba:	4a3f      	ldr	r2, [pc, #252]	; (9bb8 <FlexCAN_AbortRxTransfer+0x120>)
    9abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ac0:	9306      	str	r3, [sp, #24]
    uint8 val1 = 0U;
    9ac2:	2300      	movs	r3, #0
    9ac4:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 val2 = 0U;
    9ac8:	2300      	movs	r3, #0
    9aca:	9304      	str	r3, [sp, #16]
    uint32 flexcan_mb_config = 0;
    9acc:	2300      	movs	r3, #0
    9ace:	9303      	str	r3, [sp, #12]
    volatile uint32 * flexcan_mb = NULL_PTR;
    9ad0:	2300      	movs	r3, #0
    9ad2:	9302      	str	r3, [sp, #8]

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9ad4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9ad8:	9a06      	ldr	r2, [sp, #24]
    9ada:	011b      	lsls	r3, r3, #4
    9adc:	4413      	add	r3, r2
    9ade:	3304      	adds	r3, #4
    9ae0:	2200      	movs	r2, #0
    9ae2:	601a      	str	r2, [r3, #0]
    /* Check if fifo enabled */
    if (TRUE == state->bIsLegacyFifoEn)
    9ae4:	9b06      	ldr	r3, [sp, #24]
    9ae6:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    9aea:	2b00      	cmp	r3, #0
    9aec:	d03c      	beq.n	9b68 <FlexCAN_AbortRxTransfer+0xd0>
    {
        /* Get the number of RX FIFO Filters*/
        val1 = (uint8)(((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    9aee:	9b07      	ldr	r3, [sp, #28]
    9af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9af2:	0e1b      	lsrs	r3, r3, #24
    9af4:	b2db      	uxtb	r3, r3
    9af6:	f003 030f 	and.w	r3, r3, #15
    9afa:	f88d 3017 	strb.w	r3, [sp, #23]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        val2 = RxFifoOcuppiedLastMsgBuff(val1);
    9afe:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9b02:	4618      	mov	r0, r3
    9b04:	f7ff f9f3 	bl	8eee <RxFifoOcuppiedLastMsgBuff>
    9b08:	9004      	str	r0, [sp, #16]
        if (mb_idx > val2)
    9b0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9b0e:	9a04      	ldr	r2, [sp, #16]
    9b10:	429a      	cmp	r2, r3
    9b12:	d21b      	bcs.n	9b4c <FlexCAN_AbortRxTransfer+0xb4>
        {
            /* This operation is not allowed for MB that are part of RxFIFO */
            flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    9b14:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9b18:	4619      	mov	r1, r3
    9b1a:	9807      	ldr	r0, [sp, #28]
    9b1c:	f001 ff3a 	bl	b994 <FlexCAN_GetMsgBuffRegion>
    9b20:	9002      	str	r0, [sp, #8]
            flexcan_mb_config = * flexcan_mb;
    9b22:	9b02      	ldr	r3, [sp, #8]
    9b24:	681b      	ldr	r3, [r3, #0]
    9b26:	9303      	str	r3, [sp, #12]
            /* Reset the code and unlock the MB */
            flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    9b28:	9b03      	ldr	r3, [sp, #12]
    9b2a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9b2e:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
            *flexcan_mb = flexcan_mb_config;
    9b30:	9b02      	ldr	r3, [sp, #8]
    9b32:	9a03      	ldr	r2, [sp, #12]
    9b34:	601a      	str	r2, [r3, #0]
            /* Reconfigure The MB as left by RxMBconfig */
            flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    9b36:	9b03      	ldr	r3, [sp, #12]
    9b38:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9b3c:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    9b3e:	9b03      	ldr	r3, [sp, #12]
    9b40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    9b44:	9303      	str	r3, [sp, #12]
            *flexcan_mb = flexcan_mb_config;
    9b46:	9b02      	ldr	r3, [sp, #8]
    9b48:	9a03      	ldr	r2, [sp, #12]
    9b4a:	601a      	str	r2, [r3, #0]
        }
        if (FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    9b4c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9b50:	2b00      	cmp	r3, #0
    9b52:	d125      	bne.n	9ba0 <FlexCAN_AbortRxTransfer+0x108>
        {
            FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, state->isIntActive);
    9b54:	9b06      	ldr	r3, [sp, #24]
    9b56:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9b5a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    9b5e:	2205      	movs	r2, #5
    9b60:	9807      	ldr	r0, [sp, #28]
    9b62:	f002 faf5 	bl	c150 <FLEXCAN_ClearMsgBuffIntCmd>
    9b66:	e01b      	b.n	9ba0 <FlexCAN_AbortRxTransfer+0x108>
        }
    }
    else
    {
        /* This operation is not allowed for MB that are part of RxFIFO */
        flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    9b68:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9b6c:	4619      	mov	r1, r3
    9b6e:	9807      	ldr	r0, [sp, #28]
    9b70:	f001 ff10 	bl	b994 <FlexCAN_GetMsgBuffRegion>
    9b74:	9002      	str	r0, [sp, #8]
        flexcan_mb_config = * flexcan_mb;
    9b76:	9b02      	ldr	r3, [sp, #8]
    9b78:	681b      	ldr	r3, [r3, #0]
    9b7a:	9303      	str	r3, [sp, #12]
        /* Reset the code and unlock the MB */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    9b7c:	9b03      	ldr	r3, [sp, #12]
    9b7e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9b82:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
        *flexcan_mb = flexcan_mb_config;
    9b84:	9b02      	ldr	r3, [sp, #8]
    9b86:	9a03      	ldr	r2, [sp, #12]
    9b88:	601a      	str	r2, [r3, #0]
        /* Reconfigure The MB as left by RxMBconfig */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    9b8a:	9b03      	ldr	r3, [sp, #12]
    9b8c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9b90:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    9b92:	9b03      	ldr	r3, [sp, #12]
    9b94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    9b98:	9303      	str	r3, [sp, #12]
        *flexcan_mb = flexcan_mb_config;
    9b9a:	9b02      	ldr	r3, [sp, #8]
    9b9c:	9a03      	ldr	r2, [sp, #12]
    9b9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    9ba0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9ba4:	4619      	mov	r1, r3
    9ba6:	9807      	ldr	r0, [sp, #28]
    9ba8:	f7ff f814 	bl	8bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>
}
    9bac:	bf00      	nop
    9bae:	b009      	add	sp, #36	; 0x24
    9bb0:	f85d fb04 	ldr.w	pc, [sp], #4
    9bb4:	0000ff50 	.word	0x0000ff50
    9bb8:	1fff8fb8 	.word	0x1fff8fb8

00009bbc <FlexCAN_Ip_Init_Privileged>:
/* implements FlexCAN_Ip_Init_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Init_Privileged(uint8 Flexcan_Ip_u8Instance,
                                                 Flexcan_Ip_StateType * Flexcan_Ip_pState,
                                                 const Flexcan_Ip_ConfigType * Flexcan_Ip_pData
                                                )
{
    9bbc:	b500      	push	{lr}
    9bbe:	b089      	sub	sp, #36	; 0x24
    9bc0:	4603      	mov	r3, r0
    9bc2:	9102      	str	r1, [sp, #8]
    9bc4:	9201      	str	r2, [sp, #4]
    9bc6:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    9bca:	2300      	movs	r3, #0
    9bcc:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    9bce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9bd2:	4a36      	ldr	r2, [pc, #216]	; (9cac <FlexCAN_Ip_Init_Privileged+0xf0>)
    9bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bd8:	9305      	str	r3, [sp, #20]
    {
        OsIf_Trusted_Call1param(FlexCAN_SetUserAccessAllowed, pBase);
    }
#endif

    eResult = FlexCAN_InitController(Flexcan_Ip_u8Instance, pBase, Flexcan_Ip_pData);
    9bda:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9bde:	9a01      	ldr	r2, [sp, #4]
    9be0:	9905      	ldr	r1, [sp, #20]
    9be2:	4618      	mov	r0, r3
    9be4:	f7ff fa84 	bl	90f0 <FlexCAN_InitController>
    9be8:	9006      	str	r0, [sp, #24]
    if (FLEXCAN_STATUS_SUCCESS == eResult)
    9bea:	9b06      	ldr	r3, [sp, #24]
    9bec:	2b00      	cmp	r3, #0
    9bee:	d158      	bne.n	9ca2 <FlexCAN_Ip_Init_Privileged+0xe6>
    {
        /* Init Baudrate */
        FlexCAN_InitBaudrate(pBase, Flexcan_Ip_pData);
    9bf0:	9901      	ldr	r1, [sp, #4]
    9bf2:	9805      	ldr	r0, [sp, #20]
    9bf4:	f7ff fad6 	bl	91a4 <FlexCAN_InitBaudrate>
        /* Select mode */
        FlexCAN_SetOperationMode(pBase, Flexcan_Ip_pData->flexcanMode);
    9bf8:	9b01      	ldr	r3, [sp, #4]
    9bfa:	68db      	ldr	r3, [r3, #12]
    9bfc:	4619      	mov	r1, r3
    9bfe:	9805      	ldr	r0, [sp, #20]
    9c00:	f002 fdb8 	bl	c774 <FlexCAN_SetOperationMode>

#if (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON)
        FlexCAN_ConfigTimestamp(Flexcan_Ip_u8Instance, pBase, (const Flexcan_Ip_TimeStampConfigType *)(&Flexcan_Ip_pData->time_stamp));
#endif   /* (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON) */

        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    9c04:	2300      	movs	r3, #0
    9c06:	9307      	str	r3, [sp, #28]
    9c08:	e01d      	b.n	9c46 <FlexCAN_Ip_Init_Privileged+0x8a>
        {
            /* Check if blocking need to be any more present in sync\async discussions */
            /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
            Flexcan_Ip_pState->mbs[i].isPolling = TRUE;
    9c0a:	9a02      	ldr	r2, [sp, #8]
    9c0c:	9b07      	ldr	r3, [sp, #28]
    9c0e:	011b      	lsls	r3, r3, #4
    9c10:	4413      	add	r3, r2
    9c12:	3308      	adds	r3, #8
    9c14:	2201      	movs	r2, #1
    9c16:	701a      	strb	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].pMBmessage = NULL_PTR;
    9c18:	9a02      	ldr	r2, [sp, #8]
    9c1a:	9b07      	ldr	r3, [sp, #28]
    9c1c:	011b      	lsls	r3, r3, #4
    9c1e:	4413      	add	r3, r2
    9c20:	2200      	movs	r2, #0
    9c22:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].state = FLEXCAN_MB_IDLE;
    9c24:	9a02      	ldr	r2, [sp, #8]
    9c26:	9b07      	ldr	r3, [sp, #28]
    9c28:	011b      	lsls	r3, r3, #4
    9c2a:	4413      	add	r3, r2
    9c2c:	3304      	adds	r3, #4
    9c2e:	2200      	movs	r2, #0
    9c30:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].time_stamp = 0U;
    9c32:	9a02      	ldr	r2, [sp, #8]
    9c34:	9b07      	ldr	r3, [sp, #28]
    9c36:	011b      	lsls	r3, r3, #4
    9c38:	4413      	add	r3, r2
    9c3a:	330c      	adds	r3, #12
    9c3c:	2200      	movs	r2, #0
    9c3e:	601a      	str	r2, [r3, #0]
        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    9c40:	9b07      	ldr	r3, [sp, #28]
    9c42:	3301      	adds	r3, #1
    9c44:	9307      	str	r3, [sp, #28]
    9c46:	9b07      	ldr	r3, [sp, #28]
    9c48:	2b1f      	cmp	r3, #31
    9c4a:	d9de      	bls.n	9c0a <FlexCAN_Ip_Init_Privileged+0x4e>
        /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
        Flexcan_Ip_pState->enhancedFifoOutput.isPolling = TRUE;
        Flexcan_Ip_pState->enhancedFifoOutput.state = FLEXCAN_MB_IDLE;
#endif

        Flexcan_Ip_pState->transferType = Flexcan_Ip_pData->transfer_type;
    9c4c:	9b01      	ldr	r3, [sp, #4]
    9c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    9c50:	9b02      	ldr	r3, [sp, #8]
    9c52:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        Flexcan_Ip_pState->u32NumOfMbTransferByDMA = Flexcan_Ip_pData->num_enhanced_watermark;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

        /* Clear Callbacks in case of autovariables garbage */
        Flexcan_Ip_pState->callback = Flexcan_Ip_pData->Callback;
    9c56:	9b01      	ldr	r3, [sp, #4]
    9c58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9c5a:	9b02      	ldr	r3, [sp, #8]
    9c5c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        Flexcan_Ip_pState->callbackParam = NULL_PTR;
    9c60:	9b02      	ldr	r3, [sp, #8]
    9c62:	2200      	movs	r2, #0
    9c64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        Flexcan_Ip_pState->error_callback = Flexcan_Ip_pData->ErrorCallback;
    9c68:	9b01      	ldr	r3, [sp, #4]
    9c6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    9c6c:	9b02      	ldr	r3, [sp, #8]
    9c6e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        Flexcan_Ip_pState->errorCallbackParam = NULL_PTR;
    9c72:	9b02      	ldr	r3, [sp, #8]
    9c74:	2200      	movs	r2, #0
    9c76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        Flexcan_Ip_pState->bIsLegacyFifoEn = Flexcan_Ip_pData->is_rx_fifo_needed;
    9c7a:	9b01      	ldr	r3, [sp, #4]
    9c7c:	7a1a      	ldrb	r2, [r3, #8]
    9c7e:	9b02      	ldr	r3, [sp, #8]
    9c80:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
        Flexcan_Ip_pState->bIsEnhancedFifoEn = Flexcan_Ip_pData->is_enhanced_rx_fifo_needed;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
        Flexcan_Ip_pState->u32MaxMbNum = Flexcan_Ip_pData->max_num_mb;
    9c84:	9b01      	ldr	r3, [sp, #4]
    9c86:	681a      	ldr	r2, [r3, #0]
    9c88:	9b02      	ldr	r3, [sp, #8]
    9c8a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        Flexcan_Ip_pState->isIntActive = TRUE;
    9c8e:	9b02      	ldr	r3, [sp, #8]
    9c90:	2201      	movs	r2, #1
    9c92:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        /* Save runtime structure pointers so irq handler can point to the correct state structure */
        Flexcan_Ip_apxState[Flexcan_Ip_u8Instance] = Flexcan_Ip_pState;
    9c96:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9c9a:	4905      	ldr	r1, [pc, #20]	; (9cb0 <FlexCAN_Ip_Init_Privileged+0xf4>)
    9c9c:	9a02      	ldr	r2, [sp, #8]
    9c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    return eResult;
    9ca2:	9b06      	ldr	r3, [sp, #24]
}
    9ca4:	4618      	mov	r0, r3
    9ca6:	b009      	add	sp, #36	; 0x24
    9ca8:	f85d fb04 	ldr.w	pc, [sp], #4
    9cac:	0000ff50 	.word	0x0000ff50
    9cb0:	1fff8fb8 	.word	0x1fff8fb8

00009cb4 <FlexCAN_Ip_Send>:
                                      uint8 mb_idx,
                                      const Flexcan_Ip_DataInfoType * tx_info,
                                      uint32 msg_id,
                                      const uint8 * mb_data
                                     )
{
    9cb4:	b500      	push	{lr}
    9cb6:	b08b      	sub	sp, #44	; 0x2c
    9cb8:	9204      	str	r2, [sp, #16]
    9cba:	9303      	str	r3, [sp, #12]
    9cbc:	4603      	mov	r3, r0
    9cbe:	f88d 3017 	strb.w	r3, [sp, #23]
    9cc2:	460b      	mov	r3, r1
    9cc4:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    9cc8:	2301      	movs	r3, #1
    9cca:	9309      	str	r3, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9ccc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9cd0:	4a1c      	ldr	r2, [pc, #112]	; (9d44 <FlexCAN_Ip_Send+0x90>)
    9cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cd6:	9308      	str	r3, [sp, #32]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9cd8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9cdc:	4a1a      	ldr	r2, [pc, #104]	; (9d48 <FlexCAN_Ip_Send+0x94>)
    9cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ce2:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif
    if (!FlexCAN_IsListenOnlyModeEnabled(base))
    9ce4:	9808      	ldr	r0, [sp, #32]
    9ce6:	f7ff f8f4 	bl	8ed2 <FlexCAN_IsListenOnlyModeEnabled>
    9cea:	4603      	mov	r3, r0
    9cec:	f083 0301 	eor.w	r3, r3, #1
    9cf0:	b2db      	uxtb	r3, r3
    9cf2:	2b00      	cmp	r3, #0
    9cf4:	d021      	beq.n	9d3a <FlexCAN_Ip_Send+0x86>
    {
        result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    9cf6:	f89d 1016 	ldrb.w	r1, [sp, #22]
    9cfa:	f89d 0017 	ldrb.w	r0, [sp, #23]
    9cfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9d00:	9300      	str	r3, [sp, #0]
    9d02:	9b03      	ldr	r3, [sp, #12]
    9d04:	9a04      	ldr	r2, [sp, #16]
    9d06:	f7ff fb4b 	bl	93a0 <FlexCAN_StartSendData>
    9d0a:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        if ((FLEXCAN_STATUS_SUCCESS ==  result) && (FALSE == tx_info->is_polling))
    9d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9d0e:	2b00      	cmp	r3, #0
    9d10:	d113      	bne.n	9d3a <FlexCAN_Ip_Send+0x86>
    9d12:	9b04      	ldr	r3, [sp, #16]
    9d14:	7b1b      	ldrb	r3, [r3, #12]
    9d16:	f083 0301 	eor.w	r3, r3, #1
    9d1a:	b2db      	uxtb	r3, r3
    9d1c:	2b00      	cmp	r3, #0
    9d1e:	d00c      	beq.n	9d3a <FlexCAN_Ip_Send+0x86>
        {
            /* Enable message buffer interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    9d20:	f89d 2016 	ldrb.w	r2, [sp, #22]
    9d24:	9b07      	ldr	r3, [sp, #28]
    9d26:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9d2a:	f89d 1017 	ldrb.w	r1, [sp, #23]
    9d2e:	9300      	str	r3, [sp, #0]
    9d30:	2301      	movs	r3, #1
    9d32:	9808      	ldr	r0, [sp, #32]
    9d34:	f002 f9b6 	bl	c0a4 <FlexCAN_SetMsgBuffIntCmd>
    9d38:	9009      	str	r0, [sp, #36]	; 0x24
        }
#endif
    }
    return result;
    9d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    9d3c:	4618      	mov	r0, r3
    9d3e:	b00b      	add	sp, #44	; 0x2c
    9d40:	f85d fb04 	ldr.w	pc, [sp], #4
    9d44:	0000ff50 	.word	0x0000ff50
    9d48:	1fff8fb8 	.word	0x1fff8fb8

00009d4c <FlexCAN_Ip_ConfigRxMb>:
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxMb(uint8 instance,
                                            uint8 mb_idx,
                                            const Flexcan_Ip_DataInfoType * rx_info,
                                            uint32 msg_id
                                           )
{
    9d4c:	b500      	push	{lr}
    9d4e:	b08b      	sub	sp, #44	; 0x2c
    9d50:	9202      	str	r2, [sp, #8]
    9d52:	9301      	str	r3, [sp, #4]
    9d54:	4603      	mov	r3, r0
    9d56:	f88d 300f 	strb.w	r3, [sp, #15]
    9d5a:	460b      	mov	r3, r1
    9d5c:	f88d 300e 	strb.w	r3, [sp, #14]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    9d60:	2300      	movs	r3, #0
    9d62:	9309      	str	r3, [sp, #36]	; 0x24
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9d64:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d68:	4a19      	ldr	r2, [pc, #100]	; (9dd0 <FlexCAN_Ip_ConfigRxMb+0x84>)
    9d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d6e:	9308      	str	r3, [sp, #32]
    }
    else
    {
#endif
        /* Clear the message buffer flag if previous remained triggered */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9d70:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9d74:	4619      	mov	r1, r3
    9d76:	9808      	ldr	r0, [sp, #32]
    9d78:	f7fe ff2c 	bl	8bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>

        cs.dataLen = rx_info->data_length;
    9d7c:	9b02      	ldr	r3, [sp, #8]
    9d7e:	685b      	ldr	r3, [r3, #4]
    9d80:	9306      	str	r3, [sp, #24]
        cs.msgIdType = rx_info->msg_id_type;
    9d82:	9b02      	ldr	r3, [sp, #8]
    9d84:	681b      	ldr	r3, [r3, #0]
    9d86:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = rx_info->fd_enable;
    9d88:	9b02      	ldr	r3, [sp, #8]
    9d8a:	7a1b      	ldrb	r3, [r3, #8]
    9d8c:	f88d 301c 	strb.w	r3, [sp, #28]
    #endif

        /* Initialize rx mb*/
        cs.code = (uint32)FLEXCAN_RX_NOT_USED;
    9d90:	230f      	movs	r3, #15
    9d92:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    9d94:	f89d 100e 	ldrb.w	r1, [sp, #14]
    9d98:	aa04      	add	r2, sp, #16
    9d9a:	9b01      	ldr	r3, [sp, #4]
    9d9c:	9808      	ldr	r0, [sp, #32]
    9d9e:	f002 fa25 	bl	c1ec <FlexCAN_SetRxMsgBuff>

        /* Initialize receive MB*/
        cs.code = (uint32)FLEXCAN_RX_INACTIVE;
    9da2:	2300      	movs	r3, #0
    9da4:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    9da6:	f89d 100e 	ldrb.w	r1, [sp, #14]
    9daa:	aa04      	add	r2, sp, #16
    9dac:	9b01      	ldr	r3, [sp, #4]
    9dae:	9808      	ldr	r0, [sp, #32]
    9db0:	f002 fa1c 	bl	c1ec <FlexCAN_SetRxMsgBuff>

        /* Set up FlexCAN message buffer fields for receiving data*/
        cs.code = (uint32)FLEXCAN_RX_EMPTY;
    9db4:	2304      	movs	r3, #4
    9db6:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    9db8:	f89d 100e 	ldrb.w	r1, [sp, #14]
    9dbc:	aa04      	add	r2, sp, #16
    9dbe:	9b01      	ldr	r3, [sp, #4]
    9dc0:	9808      	ldr	r0, [sp, #32]
    9dc2:	f002 fa13 	bl	c1ec <FlexCAN_SetRxMsgBuff>
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    9dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    9dc8:	4618      	mov	r0, r3
    9dca:	b00b      	add	sp, #44	; 0x2c
    9dcc:	f85d fb04 	ldr.w	pc, [sp], #4
    9dd0:	0000ff50 	.word	0x0000ff50

00009dd4 <FlexCAN_Ip_Receive>:
Flexcan_Ip_StatusType FlexCAN_Ip_Receive(uint8 instance,
                                         uint8 mb_idx,
                                         Flexcan_Ip_MsgBuffType * data,
                                         boolean isPolling
                                        )
{
    9dd4:	b500      	push	{lr}
    9dd6:	b089      	sub	sp, #36	; 0x24
    9dd8:	9202      	str	r2, [sp, #8]
    9dda:	461a      	mov	r2, r3
    9ddc:	4603      	mov	r3, r0
    9dde:	f88d 300f 	strb.w	r3, [sp, #15]
    9de2:	460b      	mov	r3, r1
    9de4:	f88d 300e 	strb.w	r3, [sp, #14]
    9de8:	4613      	mov	r3, r2
    9dea:	f88d 300d 	strb.w	r3, [sp, #13]

    Flexcan_Ip_StatusType result;
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9dee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9df2:	4a18      	ldr	r2, [pc, #96]	; (9e54 <FlexCAN_Ip_Receive+0x80>)
    9df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9df8:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9dfa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9dfe:	4a16      	ldr	r2, [pc, #88]	; (9e58 <FlexCAN_Ip_Receive+0x84>)
    9e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e04:	9305      	str	r3, [sp, #20]
#endif
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    #endif

    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    9e06:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9e0a:	f89d 100e 	ldrb.w	r1, [sp, #14]
    9e0e:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9e12:	9a02      	ldr	r2, [sp, #8]
    9e14:	f7ff fa86 	bl	9324 <FlexCAN_StartRxMessageBufferData>
    9e18:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    9e1a:	9b07      	ldr	r3, [sp, #28]
    9e1c:	2b00      	cmp	r3, #0
    9e1e:	d113      	bne.n	9e48 <FlexCAN_Ip_Receive+0x74>
    9e20:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9e24:	f083 0301 	eor.w	r3, r3, #1
    9e28:	b2db      	uxtb	r3, r3
    9e2a:	2b00      	cmp	r3, #0
    9e2c:	d00c      	beq.n	9e48 <FlexCAN_Ip_Receive+0x74>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    9e2e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9e32:	9b05      	ldr	r3, [sp, #20]
    9e34:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9e38:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9e3c:	9300      	str	r3, [sp, #0]
    9e3e:	2301      	movs	r3, #1
    9e40:	9806      	ldr	r0, [sp, #24]
    9e42:	f002 f92f 	bl	c0a4 <FlexCAN_SetMsgBuffIntCmd>
    9e46:	9007      	str	r0, [sp, #28]
    }
#endif
    return result;
    9e48:	9b07      	ldr	r3, [sp, #28]
}
    9e4a:	4618      	mov	r0, r3
    9e4c:	b009      	add	sp, #36	; 0x24
    9e4e:	f85d fb04 	ldr.w	pc, [sp], #4
    9e52:	bf00      	nop
    9e54:	0000ff50 	.word	0x0000ff50
    9e58:	1fff8fb8 	.word	0x1fff8fb8

00009e5c <FlexCAN_Ip_ReceiveBlocking>:
                                                 uint8 mb_idx,
                                                 Flexcan_Ip_MsgBuffType * data,
                                                 boolean isPolling,
                                                 uint32 u32TimeoutMs
                                                )
{
    9e5c:	b500      	push	{lr}
    9e5e:	b08b      	sub	sp, #44	; 0x2c
    9e60:	9202      	str	r2, [sp, #8]
    9e62:	461a      	mov	r2, r3
    9e64:	4603      	mov	r3, r0
    9e66:	f88d 300f 	strb.w	r3, [sp, #15]
    9e6a:	460b      	mov	r3, r1
    9e6c:	f88d 300e 	strb.w	r3, [sp, #14]
    9e70:	4613      	mov	r3, r2
    9e72:	f88d 300d 	strb.w	r3, [sp, #13]
    Flexcan_Ip_StatusType result;
    uint32 timeStart = 0U;
    9e76:	2300      	movs	r3, #0
    9e78:	9304      	str	r3, [sp, #16]
    uint32 timeElapsed = 0U;
    9e7a:	2300      	movs	r3, #0
    9e7c:	9308      	str	r3, [sp, #32]
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9e7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9e80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9e84:	fb02 f303 	mul.w	r3, r2, r3
    9e88:	2100      	movs	r1, #0
    9e8a:	4618      	mov	r0, r3
    9e8c:	f7f7 ffbc 	bl	1e08 <OsIf_MicrosToTicks>
    9e90:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9e92:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9e96:	4a4c      	ldr	r2, [pc, #304]	; (9fc8 <FlexCAN_Ip_ReceiveBlocking+0x16c>)
    9e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e9c:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9e9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9ea2:	4a4a      	ldr	r2, [pc, #296]	; (9fcc <FlexCAN_Ip_ReceiveBlocking+0x170>)
    9ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ea8:	9305      	str	r3, [sp, #20]
#else
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    9eaa:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9eae:	f89d 100e 	ldrb.w	r1, [sp, #14]
    9eb2:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9eb6:	9a02      	ldr	r2, [sp, #8]
    9eb8:	f7ff fa34 	bl	9324 <FlexCAN_StartRxMessageBufferData>
    9ebc:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    9ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9ec0:	2b00      	cmp	r3, #0
    9ec2:	d113      	bne.n	9eec <FlexCAN_Ip_ReceiveBlocking+0x90>
    9ec4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9ec8:	f083 0301 	eor.w	r3, r3, #1
    9ecc:	b2db      	uxtb	r3, r3
    9ece:	2b00      	cmp	r3, #0
    9ed0:	d00c      	beq.n	9eec <FlexCAN_Ip_ReceiveBlocking+0x90>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    9ed2:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9ed6:	9b06      	ldr	r3, [sp, #24]
    9ed8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9edc:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9ee0:	9300      	str	r3, [sp, #0]
    9ee2:	2301      	movs	r3, #1
    9ee4:	9805      	ldr	r0, [sp, #20]
    9ee6:	f002 f8dd 	bl	c0a4 <FlexCAN_SetMsgBuffIntCmd>
    9eea:	9009      	str	r0, [sp, #36]	; 0x24
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    9eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9eee:	2b00      	cmp	r3, #0
    9ef0:	d133      	bne.n	9f5a <FlexCAN_Ip_ReceiveBlocking+0xfe>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9ef2:	2000      	movs	r0, #0
    9ef4:	f7f7 ff3c 	bl	1d70 <OsIf_GetCounter>
    9ef8:	4603      	mov	r3, r0
    9efa:	9304      	str	r3, [sp, #16]
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    9efc:	e024      	b.n	9f48 <FlexCAN_Ip_ReceiveBlocking+0xec>
        {
            if (TRUE == isPolling)
    9efe:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9f02:	2b00      	cmp	r3, #0
    9f04:	d010      	beq.n	9f28 <FlexCAN_Ip_ReceiveBlocking+0xcc>
            {
                if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    9f06:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9f0a:	4619      	mov	r1, r3
    9f0c:	9805      	ldr	r0, [sp, #20]
    9f0e:	f7fe fe74 	bl	8bfa <FlexCAN_GetBuffStatusFlag>
    9f12:	4603      	mov	r3, r0
    9f14:	2b00      	cmp	r3, #0
    9f16:	d007      	beq.n	9f28 <FlexCAN_Ip_ReceiveBlocking+0xcc>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    9f18:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9f1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9f20:	4611      	mov	r1, r2
    9f22:	4618      	mov	r0, r3
    9f24:	f7ff fb20 	bl	9568 <FlexCAN_IRQHandlerRxMB>
                }
            }
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9f28:	ab04      	add	r3, sp, #16
    9f2a:	2100      	movs	r1, #0
    9f2c:	4618      	mov	r0, r3
    9f2e:	f7f7 ff38 	bl	1da2 <OsIf_GetElapsed>
    9f32:	4602      	mov	r2, r0
    9f34:	9b08      	ldr	r3, [sp, #32]
    9f36:	4413      	add	r3, r2
    9f38:	9308      	str	r3, [sp, #32]
            if (timeElapsed >= mS2Ticks)
    9f3a:	9a08      	ldr	r2, [sp, #32]
    9f3c:	9b07      	ldr	r3, [sp, #28]
    9f3e:	429a      	cmp	r2, r3
    9f40:	d302      	bcc.n	9f48 <FlexCAN_Ip_ReceiveBlocking+0xec>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    9f42:	2303      	movs	r3, #3
    9f44:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    9f46:	e008      	b.n	9f5a <FlexCAN_Ip_ReceiveBlocking+0xfe>
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    9f48:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9f4c:	9a06      	ldr	r2, [sp, #24]
    9f4e:	011b      	lsls	r3, r3, #4
    9f50:	4413      	add	r3, r2
    9f52:	3304      	adds	r3, #4
    9f54:	681b      	ldr	r3, [r3, #0]
    9f56:	2b01      	cmp	r3, #1
    9f58:	d0d1      	beq.n	9efe <FlexCAN_Ip_ReceiveBlocking+0xa2>
            }
        }
    }

    if ((FLEXCAN_STATUS_TIMEOUT == result) && (FALSE == isPolling))
    9f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9f5c:	2b03      	cmp	r3, #3
    9f5e:	d112      	bne.n	9f86 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    9f60:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9f64:	f083 0301 	eor.w	r3, r3, #1
    9f68:	b2db      	uxtb	r3, r3
    9f6a:	2b00      	cmp	r3, #0
    9f6c:	d00b      	beq.n	9f86 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    {
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        /* Disable Mb interrupt*/
       (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    9f6e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9f72:	9b06      	ldr	r3, [sp, #24]
    9f74:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9f78:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9f7c:	9300      	str	r3, [sp, #0]
    9f7e:	2300      	movs	r3, #0
    9f80:	9805      	ldr	r0, [sp, #20]
    9f82:	f002 f88f 	bl	c0a4 <FlexCAN_SetMsgBuffIntCmd>
#endif
    }

    if ((FLEXCAN_STATUS_BUFF_OUT_OF_RANGE != result) && (FLEXCAN_STATUS_BUSY != result))
    9f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9f88:	2b04      	cmp	r3, #4
    9f8a:	d018      	beq.n	9fbe <FlexCAN_Ip_ReceiveBlocking+0x162>
    9f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9f8e:	2b02      	cmp	r3, #2
    9f90:	d015      	beq.n	9fbe <FlexCAN_Ip_ReceiveBlocking+0x162>
    {
        if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state))
    9f92:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9f96:	9a06      	ldr	r2, [sp, #24]
    9f98:	011b      	lsls	r3, r3, #4
    9f9a:	4413      	add	r3, r2
    9f9c:	3304      	adds	r3, #4
    9f9e:	681b      	ldr	r3, [r3, #0]
    9fa0:	2b00      	cmp	r3, #0
    9fa2:	d102      	bne.n	9faa <FlexCAN_Ip_ReceiveBlocking+0x14e>
        {
            result = FLEXCAN_STATUS_SUCCESS;
    9fa4:	2300      	movs	r3, #0
    9fa6:	9309      	str	r3, [sp, #36]	; 0x24
    9fa8:	e009      	b.n	9fbe <FlexCAN_Ip_ReceiveBlocking+0x162>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9faa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9fae:	9a06      	ldr	r2, [sp, #24]
    9fb0:	011b      	lsls	r3, r3, #4
    9fb2:	4413      	add	r3, r2
    9fb4:	3304      	adds	r3, #4
    9fb6:	2200      	movs	r2, #0
    9fb8:	601a      	str	r2, [r3, #0]
            result = FLEXCAN_STATUS_TIMEOUT;
    9fba:	2303      	movs	r3, #3
    9fbc:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    return result;
    9fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    9fc0:	4618      	mov	r0, r3
    9fc2:	b00b      	add	sp, #44	; 0x2c
    9fc4:	f85d fb04 	ldr.w	pc, [sp], #4
    9fc8:	1fff8fb8 	.word	0x1fff8fb8
    9fcc:	0000ff50 	.word	0x0000ff50

00009fd0 <FlexCAN_Ip_RxFifo>:
 * after the frame was received and read into the specified buffer.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_RxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifo(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    9fd0:	b500      	push	{lr}
    9fd2:	b085      	sub	sp, #20
    9fd4:	4603      	mov	r3, r0
    9fd6:	9100      	str	r1, [sp, #0]
    9fd8:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9fdc:	2300      	movs	r3, #0
    9fde:	9303      	str	r3, [sp, #12]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    9fe0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9fe4:	9900      	ldr	r1, [sp, #0]
    9fe6:	4618      	mov	r0, r3
    9fe8:	f7ff fa5e 	bl	94a8 <FlexCAN_StartRxMessageFifoData>
    9fec:	9003      	str	r0, [sp, #12]
    }
    return result;
    9fee:	9b03      	ldr	r3, [sp, #12]
}
    9ff0:	4618      	mov	r0, r3
    9ff2:	b005      	add	sp, #20
    9ff4:	f85d fb04 	ldr.w	pc, [sp], #4

00009ff8 <FlexCAN_Ip_RxFifoBlocking>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_RxFifoBlocking_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifoBlocking(uint8 instance, Flexcan_Ip_MsgBuffType *data, uint32 timeout)
{
    9ff8:	b500      	push	{lr}
    9ffa:	b087      	sub	sp, #28
    9ffc:	4603      	mov	r3, r0
    9ffe:	9102      	str	r1, [sp, #8]
    a000:	9201      	str	r2, [sp, #4]
    a002:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a006:	2300      	movs	r3, #0
    a008:	9305      	str	r3, [sp, #20]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    a00a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a00e:	9902      	ldr	r1, [sp, #8]
    a010:	4618      	mov	r0, r3
    a012:	f7ff fa49 	bl	94a8 <FlexCAN_StartRxMessageFifoData>
    a016:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == result)
    a018:	9b05      	ldr	r3, [sp, #20]
    a01a:	2b00      	cmp	r3, #0
    a01c:	d106      	bne.n	a02c <FlexCAN_Ip_RxFifoBlocking+0x34>
        {
            result = FlexCAN_ProccessLegacyRxFIFO(instance, timeout);
    a01e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a022:	9901      	ldr	r1, [sp, #4]
    a024:	4618      	mov	r0, r3
    a026:	f7ff f8e2 	bl	91ee <FlexCAN_ProccessLegacyRxFIFO>
    a02a:	9005      	str	r0, [sp, #20]
        }
    }
    return result;
    a02c:	9b05      	ldr	r3, [sp, #20]
}
    a02e:	4618      	mov	r0, r3
    a030:	b007      	add	sp, #28
    a032:	f85d fb04 	ldr.w	pc, [sp], #4

0000a036 <FlexCAN_Ip_ConfigRxFifo_Privileged>:
/* implements FlexCAN_Ip_ConfigRxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxFifo_Privileged(uint8 instance,
                                                         Flexcan_Ip_RxFifoIdElementFormatType id_format,
                                                         const Flexcan_Ip_IdTableType * id_filter_table
                                                        )
{
    a036:	b500      	push	{lr}
    a038:	b089      	sub	sp, #36	; 0x24
    a03a:	4603      	mov	r3, r0
    a03c:	9102      	str	r1, [sp, #8]
    a03e:	9201      	str	r2, [sp, #4]
    a040:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a044:	2300      	movs	r3, #0
    a046:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a048:	2300      	movs	r3, #0
    a04a:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a04c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a050:	4a1c      	ldr	r2, [pc, #112]	; (a0c4 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x8e>)
    a052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a056:	9305      	str	r3, [sp, #20]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a058:	9805      	ldr	r0, [sp, #20]
    a05a:	f7fe fd61 	bl	8b20 <FlexCAN_IsEnabled>
    a05e:	4603      	mov	r3, r0
    a060:	2b00      	cmp	r3, #0
    a062:	bf14      	ite	ne
    a064:	2301      	movne	r3, #1
    a066:	2300      	moveq	r3, #0
    a068:	b2db      	uxtb	r3, r3
    a06a:	f083 0301 	eor.w	r3, r3, #1
    a06e:	b2db      	uxtb	r3, r3
    a070:	f88d 3013 	strb.w	r3, [sp, #19]
    a074:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a078:	f003 0301 	and.w	r3, r3, #1
    a07c:	f88d 3013 	strb.w	r3, [sp, #19]

    if (TRUE == disabled)
    a080:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a084:	2b00      	cmp	r3, #0
    a086:	d003      	beq.n	a090 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x5a>
    {
        result = FlexCAN_Enable(pBase);
    a088:	9805      	ldr	r0, [sp, #20]
    a08a:	f001 fd6b 	bl	bb64 <FlexCAN_Enable>
    a08e:	9007      	str	r0, [sp, #28]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    a090:	9b07      	ldr	r3, [sp, #28]
    a092:	2b00      	cmp	r3, #0
    a094:	d104      	bne.n	a0a0 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x6a>
    {
        /* Initialize rx fifo*/
        FlexCAN_SetRxFifoFilter(pBase, id_format, id_filter_table);
    a096:	9a01      	ldr	r2, [sp, #4]
    a098:	9902      	ldr	r1, [sp, #8]
    a09a:	9805      	ldr	r0, [sp, #20]
    a09c:	f002 fba5 	bl	c7ea <FlexCAN_SetRxFifoFilter>
    }

    if (TRUE == disabled)
    a0a0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a0a4:	2b00      	cmp	r3, #0
    a0a6:	d008      	beq.n	a0ba <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
    {
        status = FlexCAN_Disable(pBase);
    a0a8:	9805      	ldr	r0, [sp, #20]
    a0aa:	f001 fdd9 	bl	bc60 <FlexCAN_Disable>
    a0ae:	9006      	str	r0, [sp, #24]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a0b0:	9b06      	ldr	r3, [sp, #24]
    a0b2:	2b00      	cmp	r3, #0
    a0b4:	d001      	beq.n	a0ba <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
        {
            result = status;
    a0b6:	9b06      	ldr	r3, [sp, #24]
    a0b8:	9307      	str	r3, [sp, #28]
        }
    }

    return result;
    a0ba:	9b07      	ldr	r3, [sp, #28]
}
    a0bc:	4618      	mov	r0, r3
    a0be:	b009      	add	sp, #36	; 0x24
    a0c0:	f85d fb04 	ldr.w	pc, [sp], #4
    a0c4:	0000ff50 	.word	0x0000ff50

0000a0c8 <FlexCAN_Ip_ConfigRemoteResponseMb>:
                                                        uint8 mb_idx,
                                                        const Flexcan_Ip_DataInfoType *tx_info,
                                                        uint32 msg_id,
                                                        const uint8 *mb_data
                                                       )
{
    a0c8:	b500      	push	{lr}
    a0ca:	b08f      	sub	sp, #60	; 0x3c
    a0cc:	9204      	str	r2, [sp, #16]
    a0ce:	9303      	str	r3, [sp, #12]
    a0d0:	4603      	mov	r3, r0
    a0d2:	f88d 3017 	strb.w	r3, [sp, #23]
    a0d6:	460b      	mov	r3, r1
    a0d8:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a0dc:	2300      	movs	r3, #0
    a0de:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a0e0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a0e4:	4a27      	ldr	r2, [pc, #156]	; (a184 <FlexCAN_Ip_ConfigRemoteResponseMb+0xbc>)
    a0e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0ea:	930c      	str	r3, [sp, #48]	; 0x30
    const Flexcan_Ip_StateType * const state = Flexcan_Ip_apxState[instance];
    a0ec:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a0f0:	4a25      	ldr	r2, [pc, #148]	; (a188 <FlexCAN_Ip_ConfigRemoteResponseMb+0xc0>)
    a0f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0f6:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    a0f8:	2300      	movs	r3, #0
    a0fa:	930a      	str	r3, [sp, #40]	; 0x28
    if (TRUE == FlexCAN_IsMbOutOfRange(pBase, mb_idx, state->bIsLegacyFifoEn, state->u32MaxMbNum))
    {
        result = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    a0fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a0fe:	2b00      	cmp	r3, #0
    a100:	d13a      	bne.n	a178 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
    {
        /* Initialize transmit mb*/
        cs.dataLen = tx_info->data_length;
    a102:	9b04      	ldr	r3, [sp, #16]
    a104:	685b      	ldr	r3, [r3, #4]
    a106:	9308      	str	r3, [sp, #32]
        cs.msgIdType = tx_info->msg_id_type;
    a108:	9b04      	ldr	r3, [sp, #16]
    a10a:	681b      	ldr	r3, [r3, #0]
    a10c:	9307      	str	r3, [sp, #28]
        cs.code = (uint32)FLEXCAN_RX_RANSWER;
    a10e:	230a      	movs	r3, #10
    a110:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = FALSE;
    a112:	2300      	movs	r3, #0
    a114:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        cs.enable_brs = FALSE;
    a118:	2300      	movs	r3, #0
    a11a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        cs.fd_padding = 0x00U;
    a11e:	2300      	movs	r3, #0
    a120:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
#endif
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    a124:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a128:	4619      	mov	r1, r3
    a12a:	980c      	ldr	r0, [sp, #48]	; 0x30
    a12c:	f7fe fd52 	bl	8bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>
        pMbAddr = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    a130:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a134:	4619      	mov	r1, r3
    a136:	980c      	ldr	r0, [sp, #48]	; 0x30
    a138:	f001 fc2c 	bl	b994 <FlexCAN_GetMsgBuffRegion>
    a13c:	900a      	str	r0, [sp, #40]	; 0x28
        FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, tx_info->is_remote);
    a13e:	9b04      	ldr	r3, [sp, #16]
    a140:	7adb      	ldrb	r3, [r3, #11]
    a142:	a906      	add	r1, sp, #24
    a144:	9300      	str	r3, [sp, #0]
    a146:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a148:	9a03      	ldr	r2, [sp, #12]
    a14a:	980a      	ldr	r0, [sp, #40]	; 0x28
    a14c:	f002 f974 	bl	c438 <FlexCAN_SetTxMsgBuff>
        if (FALSE == tx_info->is_polling)
    a150:	9b04      	ldr	r3, [sp, #16]
    a152:	7b1b      	ldrb	r3, [r3, #12]
    a154:	f083 0301 	eor.w	r3, r3, #1
    a158:	b2db      	uxtb	r3, r3
    a15a:	2b00      	cmp	r3, #0
    a15c:	d00c      	beq.n	a178 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
        {
            /* Enable MB interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(pBase, instance, mb_idx, TRUE, state->isIntActive);
    a15e:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a164:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a168:	f89d 1017 	ldrb.w	r1, [sp, #23]
    a16c:	9300      	str	r3, [sp, #0]
    a16e:	2301      	movs	r3, #1
    a170:	980c      	ldr	r0, [sp, #48]	; 0x30
    a172:	f001 ff97 	bl	c0a4 <FlexCAN_SetMsgBuffIntCmd>
    a176:	900d      	str	r0, [sp, #52]	; 0x34
        }
    }
    return result;
    a178:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    a17a:	4618      	mov	r0, r3
    a17c:	b00f      	add	sp, #60	; 0x3c
    a17e:	f85d fb04 	ldr.w	pc, [sp], #4
    a182:	bf00      	nop
    a184:	0000ff50 	.word	0x0000ff50
    a188:	1fff8fb8 	.word	0x1fff8fb8

0000a18c <FlexCAN_Ip_GetTransferStatus>:
 * or complete (success). In case Enhanced Rx Fifo, mb_idx will be 255.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetTransferStatus_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_GetTransferStatus(uint8 instance, uint8 mb_idx)
{
    a18c:	b084      	sub	sp, #16
    a18e:	4603      	mov	r3, r0
    a190:	460a      	mov	r2, r1
    a192:	f88d 3007 	strb.w	r3, [sp, #7]
    a196:	4613      	mov	r3, r2
    a198:	f88d 3006 	strb.w	r3, [sp, #6]

    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a19c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a1a0:	4a0d      	ldr	r2, [pc, #52]	; (a1d8 <FlexCAN_Ip_GetTransferStatus+0x4c>)
    a1a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1a6:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_ERROR;
    a1a8:	2301      	movs	r3, #1
    a1aa:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
#endif

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    a1ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a1b0:	2b1f      	cmp	r3, #31
    a1b2:	d80d      	bhi.n	a1d0 <FlexCAN_Ip_GetTransferStatus+0x44>
    {
        if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    a1b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a1b8:	9a02      	ldr	r2, [sp, #8]
    a1ba:	011b      	lsls	r3, r3, #4
    a1bc:	4413      	add	r3, r2
    a1be:	3304      	adds	r3, #4
    a1c0:	681b      	ldr	r3, [r3, #0]
    a1c2:	2b00      	cmp	r3, #0
    a1c4:	d102      	bne.n	a1cc <FlexCAN_Ip_GetTransferStatus+0x40>
        {
            status = FLEXCAN_STATUS_SUCCESS;
    a1c6:	2300      	movs	r3, #0
    a1c8:	9303      	str	r3, [sp, #12]
    a1ca:	e001      	b.n	a1d0 <FlexCAN_Ip_GetTransferStatus+0x44>
            status = FLEXCAN_STATUS_ERROR;
        }
#endif
        else
        {
            status = FLEXCAN_STATUS_BUSY;
    a1cc:	2302      	movs	r3, #2
    a1ce:	9303      	str	r3, [sp, #12]
            status = FLEXCAN_STATUS_BUSY;
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return status;
    a1d0:	9b03      	ldr	r3, [sp, #12]
}
    a1d2:	4618      	mov	r0, r3
    a1d4:	b004      	add	sp, #16
    a1d6:	4770      	bx	lr
    a1d8:	1fff8fb8 	.word	0x1fff8fb8

0000a1dc <FlexCAN_CompleteRxMessageFifoData>:
 * data and disabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_CompleteRxMessageFifoData(uint8 instance)
{
    a1dc:	b500      	push	{lr}
    a1de:	b087      	sub	sp, #28
    a1e0:	4603      	mov	r3, r0
    a1e2:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a1e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a1ea:	4a1d      	ldr	r2, [pc, #116]	; (a260 <FlexCAN_CompleteRxMessageFifoData+0x84>)
    a1ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1f0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a1f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a1f6:	4a1b      	ldr	r2, [pc, #108]	; (a264 <FlexCAN_CompleteRxMessageFifoData+0x88>)
    a1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1fc:	9304      	str	r3, [sp, #16]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    a1fe:	9b04      	ldr	r3, [sp, #16]
    a200:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    a204:	2b00      	cmp	r3, #0
    a206:	d120      	bne.n	a24a <FlexCAN_CompleteRxMessageFifoData+0x6e>
    {
        /* Disable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, state->isIntActive);
    a208:	9b04      	ldr	r3, [sp, #16]
    a20a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a20e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a212:	9300      	str	r3, [sp, #0]
    a214:	2300      	movs	r3, #0
    a216:	2205      	movs	r2, #5
    a218:	9805      	ldr	r0, [sp, #20]
    a21a:	f001 ff43 	bl	c0a4 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, state->isIntActive);
    a21e:	9b04      	ldr	r3, [sp, #16]
    a220:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a224:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a228:	9300      	str	r3, [sp, #0]
    a22a:	2300      	movs	r3, #0
    a22c:	2206      	movs	r2, #6
    a22e:	9805      	ldr	r0, [sp, #20]
    a230:	f001 ff38 	bl	c0a4 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, state->isIntActive);
    a234:	9b04      	ldr	r3, [sp, #16]
    a236:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a23a:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a23e:	9300      	str	r3, [sp, #0]
    a240:	2300      	movs	r3, #0
    a242:	2207      	movs	r2, #7
    a244:	9805      	ldr	r0, [sp, #20]
    a246:	f001 ff2d 	bl	c0a4 <FlexCAN_SetMsgBuffIntCmd>
    {
        /* do nothing when transferType is POLLING */
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    /* Clear fifo message*/
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = NULL_PTR;
    a24a:	9b04      	ldr	r3, [sp, #16]
    a24c:	2200      	movs	r2, #0
    a24e:	601a      	str	r2, [r3, #0]
            state->callback(instance, FLEXCAN_EVENT_DMA_ERROR, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
        }
    }

#else
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    a250:	9b04      	ldr	r3, [sp, #16]
    a252:	2200      	movs	r2, #0
    a254:	605a      	str	r2, [r3, #4]
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
}
    a256:	bf00      	nop
    a258:	b007      	add	sp, #28
    a25a:	f85d fb04 	ldr.w	pc, [sp], #4
    a25e:	bf00      	nop
    a260:	0000ff50 	.word	0x0000ff50
    a264:	1fff8fb8 	.word	0x1fff8fb8

0000a268 <FlexCAN_IRQHandler>:
    uint32 endMbIdx
    #if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    ,boolean bEnhancedFifoExisted
    #endif
)
{
    a268:	b500      	push	{lr}
    a26a:	b08b      	sub	sp, #44	; 0x2c
    a26c:	4603      	mov	r3, r0
    a26e:	9102      	str	r1, [sp, #8]
    a270:	9201      	str	r2, [sp, #4]
    a272:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32MbHandle = 0U;
    a276:	2300      	movs	r3, #0
    a278:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 flag_reg = 0;
    a27a:	2300      	movs	r3, #0
    a27c:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a27e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a282:	4a3f      	ldr	r2, [pc, #252]	; (a380 <FlexCAN_IRQHandler+0x118>)
    a284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a288:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a28a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a28e:	4a3d      	ldr	r2, [pc, #244]	; (a384 <FlexCAN_IRQHandler+0x11c>)
    a290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a294:	9305      	str	r3, [sp, #20]

    /* Get the interrupts that are enabled and ready */
    uint32 mb_idx = endMbIdx;
    a296:	9b01      	ldr	r3, [sp, #4]
    a298:	9307      	str	r3, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(endMbIdx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM);
#endif
    /* Check if instance initialized */
    if (NULL_PTR != state)
    a29a:	9b05      	ldr	r3, [sp, #20]
    a29c:	2b00      	cmp	r3, #0
    a29e:	d05c      	beq.n	a35a <FlexCAN_IRQHandler+0xf2>
    {
        flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    a2a0:	9907      	ldr	r1, [sp, #28]
    a2a2:	9806      	ldr	r0, [sp, #24]
    a2a4:	f7fe fe47 	bl	8f36 <FlexCAN_GetMsgBuffIntStatusFlag>
    a2a8:	4603      	mov	r3, r0
    a2aa:	9308      	str	r3, [sp, #32]

        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    a2ac:	e008      	b.n	a2c0 <FlexCAN_IRQHandler+0x58>
        {
            mb_idx--;
    a2ae:	9b07      	ldr	r3, [sp, #28]
    a2b0:	3b01      	subs	r3, #1
    a2b2:	9307      	str	r3, [sp, #28]
            flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    a2b4:	9907      	ldr	r1, [sp, #28]
    a2b6:	9806      	ldr	r0, [sp, #24]
    a2b8:	f7fe fe3d 	bl	8f36 <FlexCAN_GetMsgBuffIntStatusFlag>
    a2bc:	4603      	mov	r3, r0
    a2be:	9308      	str	r3, [sp, #32]
        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    a2c0:	9b08      	ldr	r3, [sp, #32]
    a2c2:	2b00      	cmp	r3, #0
    a2c4:	d103      	bne.n	a2ce <FlexCAN_IRQHandler+0x66>
    a2c6:	9a07      	ldr	r2, [sp, #28]
    a2c8:	9b02      	ldr	r3, [sp, #8]
    a2ca:	429a      	cmp	r2, r3
    a2cc:	d8ef      	bhi.n	a2ae <FlexCAN_IRQHandler+0x46>
        }

        /* Check Tx/Rx interrupt flag and clear the interrupt */
        if (flag_reg != 0U)
    a2ce:	9b08      	ldr	r3, [sp, #32]
    a2d0:	2b00      	cmp	r3, #0
    a2d2:	d050      	beq.n	a376 <FlexCAN_IRQHandler+0x10e>
        {
            /* For legacy fifo, mb handler is FLEXCAN_IP_MB_HANDLE_RXFIFO(0) */
            u32MbHandle = mb_idx;
    a2d4:	9b07      	ldr	r3, [sp, #28]
    a2d6:	9309      	str	r3, [sp, #36]	; 0x24

            if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    a2d8:	9b05      	ldr	r3, [sp, #20]
    a2da:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    a2de:	2b00      	cmp	r3, #0
    a2e0:	d00b      	beq.n	a2fa <FlexCAN_IRQHandler+0x92>
    a2e2:	9b07      	ldr	r3, [sp, #28]
    a2e4:	2b07      	cmp	r3, #7
    a2e6:	d808      	bhi.n	a2fa <FlexCAN_IRQHandler+0x92>
            {
                FlexCAN_IRQHandlerRxFIFO(instance, mb_idx);
    a2e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a2ec:	9907      	ldr	r1, [sp, #28]
    a2ee:	4618      	mov	r0, r3
    a2f0:	f7ff fac2 	bl	9878 <FlexCAN_IRQHandlerRxFIFO>
                u32MbHandle = (uint32)FLEXCAN_IP_MB_HANDLE_RXFIFO;
    a2f4:	2300      	movs	r3, #0
    a2f6:	9309      	str	r3, [sp, #36]	; 0x24
    a2f8:	e00d      	b.n	a316 <FlexCAN_IRQHandler+0xae>
            }
            else
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[u32MbHandle].state)
    a2fa:	9a05      	ldr	r2, [sp, #20]
    a2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a2fe:	011b      	lsls	r3, r3, #4
    a300:	4413      	add	r3, r2
    a302:	3304      	adds	r3, #4
    a304:	681b      	ldr	r3, [r3, #0]
    a306:	2b01      	cmp	r3, #1
    a308:	d105      	bne.n	a316 <FlexCAN_IRQHandler+0xae>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    a30a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a30e:	9907      	ldr	r1, [sp, #28]
    a310:	4618      	mov	r0, r3
    a312:	f7ff f929 	bl	9568 <FlexCAN_IRQHandlerRxMB>
                }
            }

            /* Check mailbox completed transmission */
            if (FLEXCAN_MB_TX_BUSY == state->mbs[u32MbHandle].state)
    a316:	9a05      	ldr	r2, [sp, #20]
    a318:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a31a:	011b      	lsls	r3, r3, #4
    a31c:	4413      	add	r3, r2
    a31e:	3304      	adds	r3, #4
    a320:	681b      	ldr	r3, [r3, #0]
    a322:	2b02      	cmp	r3, #2
    a324:	d105      	bne.n	a332 <FlexCAN_IRQHandler+0xca>
            {
                FlexCAN_IRQHandlerTxMB(instance, mb_idx);
    a326:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a32a:	9907      	ldr	r1, [sp, #28]
    a32c:	4618      	mov	r0, r3
    a32e:	f7ff fa09 	bl	9744 <FlexCAN_IRQHandlerTxMB>
            }

            /* Check for spurious interrupt */
            if (FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx) != 0U)
    a332:	9907      	ldr	r1, [sp, #28]
    a334:	9806      	ldr	r0, [sp, #24]
    a336:	f7fe fdfe 	bl	8f36 <FlexCAN_GetMsgBuffIntStatusFlag>
    a33a:	4603      	mov	r3, r0
    a33c:	2b00      	cmp	r3, #0
    a33e:	d01a      	beq.n	a376 <FlexCAN_IRQHandler+0x10e>
            {
                if (state->mbs[u32MbHandle].state == FLEXCAN_MB_IDLE)
    a340:	9a05      	ldr	r2, [sp, #20]
    a342:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a344:	011b      	lsls	r3, r3, #4
    a346:	4413      	add	r3, r2
    a348:	3304      	adds	r3, #4
    a34a:	681b      	ldr	r3, [r3, #0]
    a34c:	2b00      	cmp	r3, #0
    a34e:	d112      	bne.n	a376 <FlexCAN_IRQHandler+0x10e>
                {
                    /* In case of desynchronized status of the MB to avoid trapping in ISR
                    * clear the MB flag */
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a350:	9907      	ldr	r1, [sp, #28]
    a352:	9806      	ldr	r0, [sp, #24]
    a354:	f7fe fc3e 	bl	8bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_UNDERFLOW);
        }
    #endif /* End of (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    }
}
    a358:	e00d      	b.n	a376 <FlexCAN_IRQHandler+0x10e>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    a35a:	9b02      	ldr	r3, [sp, #8]
    a35c:	9307      	str	r3, [sp, #28]
    a35e:	e006      	b.n	a36e <FlexCAN_IRQHandler+0x106>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a360:	9907      	ldr	r1, [sp, #28]
    a362:	9806      	ldr	r0, [sp, #24]
    a364:	f7fe fc36 	bl	8bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    a368:	9b07      	ldr	r3, [sp, #28]
    a36a:	3301      	adds	r3, #1
    a36c:	9307      	str	r3, [sp, #28]
    a36e:	9a07      	ldr	r2, [sp, #28]
    a370:	9b01      	ldr	r3, [sp, #4]
    a372:	429a      	cmp	r2, r3
    a374:	d9f4      	bls.n	a360 <FlexCAN_IRQHandler+0xf8>
}
    a376:	bf00      	nop
    a378:	b00b      	add	sp, #44	; 0x2c
    a37a:	f85d fb04 	ldr.w	pc, [sp], #4
    a37e:	bf00      	nop
    a380:	0000ff50 	.word	0x0000ff50
    a384:	1fff8fb8 	.word	0x1fff8fb8

0000a388 <FlexCAN_Ip_ClearErrorStatus>:
 *                 transmission of a CAN frame.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearErrorStatus_Activity */
void FlexCAN_Ip_ClearErrorStatus(uint8 instance, uint32 error)
{
    a388:	b084      	sub	sp, #16
    a38a:	4603      	mov	r3, r0
    a38c:	9100      	str	r1, [sp, #0]
    a38e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a392:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a396:	4a05      	ldr	r2, [pc, #20]	; (a3ac <FlexCAN_Ip_ClearErrorStatus+0x24>)
    a398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a39c:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base->ESR1 = error;
    a39e:	9b03      	ldr	r3, [sp, #12]
    a3a0:	9a00      	ldr	r2, [sp, #0]
    a3a2:	621a      	str	r2, [r3, #32]
}
    a3a4:	bf00      	nop
    a3a6:	b004      	add	sp, #16
    a3a8:	4770      	bx	lr
    a3aa:	bf00      	nop
    a3ac:	0000ff50 	.word	0x0000ff50

0000a3b0 <FlexCAN_Ip_GetErrorStatus>:
 *                 transmission of a CAN frame and some general status of the device.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetErrorStatus_Activity */
uint32 FlexCAN_Ip_GetErrorStatus(uint8 instance)
{
    a3b0:	b084      	sub	sp, #16
    a3b2:	4603      	mov	r3, r0
    a3b4:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a3b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3bc:	4a04      	ldr	r2, [pc, #16]	; (a3d0 <FlexCAN_Ip_GetErrorStatus+0x20>)
    a3be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3c2:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint32)(base->ESR1);
    a3c4:	9b03      	ldr	r3, [sp, #12]
    a3c6:	6a1b      	ldr	r3, [r3, #32]
}
    a3c8:	4618      	mov	r0, r3
    a3ca:	b004      	add	sp, #16
    a3cc:	4770      	bx	lr
    a3ce:	bf00      	nop
    a3d0:	0000ff50 	.word	0x0000ff50

0000a3d4 <FlexCAN_Ip_GetControllerTxErrorCounter>:
 *                 transmitted messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerTxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerTxErrorCounter(uint8 instance)
{
    a3d4:	b084      	sub	sp, #16
    a3d6:	4603      	mov	r3, r0
    a3d8:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a3dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3e0:	4a04      	ldr	r2, [pc, #16]	; (a3f4 <FlexCAN_Ip_GetControllerTxErrorCounter+0x20>)
    a3e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3e6:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_TXERRCNT_MASK) >> FLEXCAN_ECR_TXERRCNT_SHIFT);
    a3e8:	9b03      	ldr	r3, [sp, #12]
    a3ea:	69db      	ldr	r3, [r3, #28]
    a3ec:	b2db      	uxtb	r3, r3
}
    a3ee:	4618      	mov	r0, r3
    a3f0:	b004      	add	sp, #16
    a3f2:	4770      	bx	lr
    a3f4:	0000ff50 	.word	0x0000ff50

0000a3f8 <FlexCAN_Ip_GetControllerRxErrorCounter>:
 *                 received messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerRxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerRxErrorCounter(uint8 instance)
{
    a3f8:	b084      	sub	sp, #16
    a3fa:	4603      	mov	r3, r0
    a3fc:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a400:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a404:	4a05      	ldr	r2, [pc, #20]	; (a41c <FlexCAN_Ip_GetControllerRxErrorCounter+0x24>)
    a406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a40a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_RXERRCNT_MASK) >> FLEXCAN_ECR_RXERRCNT_SHIFT);
    a40c:	9b03      	ldr	r3, [sp, #12]
    a40e:	69db      	ldr	r3, [r3, #28]
    a410:	0a1b      	lsrs	r3, r3, #8
    a412:	b2db      	uxtb	r3, r3
}
    a414:	4618      	mov	r0, r3
    a416:	b004      	add	sp, #16
    a418:	4770      	bx	lr
    a41a:	bf00      	nop
    a41c:	0000ff50 	.word	0x0000ff50

0000a420 <FlexCAN_Error_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements  CAN_X_ERROR_ISR_Activity */
void FlexCAN_Error_IRQHandler(uint8 instance)
{
    a420:	b510      	push	{r4, lr}
    a422:	b086      	sub	sp, #24
    a424:	4603      	mov	r3, r0
    a426:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a42a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a42e:	4a29      	ldr	r2, [pc, #164]	; (a4d4 <FlexCAN_Error_IRQHandler+0xb4>)
    a430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a434:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a436:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a43a:	4a27      	ldr	r2, [pc, #156]	; (a4d8 <FlexCAN_Error_IRQHandler+0xb8>)
    a43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a440:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    a442:	2300      	movs	r3, #0
    a444:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check if the instance initialized */
    if (NULL_PTR != state)
    a446:	9b03      	ldr	r3, [sp, #12]
    a448:	2b00      	cmp	r3, #0
    a44a:	d03d      	beq.n	a4c8 <FlexCAN_Error_IRQHandler+0xa8>
    {
        /* Get error status to get value updated */
        u32ErrStatus = pBase->ESR1;
    a44c:	9b04      	ldr	r3, [sp, #16]
    a44e:	6a1b      	ldr	r3, [r3, #32]
    a450:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_MASK))) && ((uint32)0U != (pBase->CTRL1 & ((uint32)FLEXCAN_CTRL1_ERRMSK_MASK))))
    a452:	9b05      	ldr	r3, [sp, #20]
    a454:	f003 0302 	and.w	r3, r3, #2
    a458:	2b00      	cmp	r3, #0
    a45a:	d019      	beq.n	a490 <FlexCAN_Error_IRQHandler+0x70>
    a45c:	9b04      	ldr	r3, [sp, #16]
    a45e:	685b      	ldr	r3, [r3, #4]
    a460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    a464:	2b00      	cmp	r3, #0
    a466:	d013      	beq.n	a490 <FlexCAN_Error_IRQHandler+0x70>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_MASK;
    a468:	9b04      	ldr	r3, [sp, #16]
    a46a:	2202      	movs	r2, #2
    a46c:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a46e:	9b03      	ldr	r3, [sp, #12]
    a470:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a474:	2b00      	cmp	r3, #0
    a476:	d00b      	beq.n	a490 <FlexCAN_Error_IRQHandler+0x70>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR, u32ErrStatus, state);
    a478:	9b03      	ldr	r3, [sp, #12]
    a47a:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a47e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a482:	9b03      	ldr	r3, [sp, #12]
    a484:	9a05      	ldr	r2, [sp, #20]
    a486:	2105      	movs	r1, #5
    a488:	47a0      	blx	r4
            #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = pBase->ESR1;
    a48a:	9b04      	ldr	r3, [sp, #16]
    a48c:	6a1b      	ldr	r3, [r3, #32]
    a48e:	9305      	str	r3, [sp, #20]
            }
        }

    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Check if this is spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_FAST_MASK))) && ((uint32)0U != (pBase->CTRL2 & ((uint32)FLEXCAN_CTRL2_ERRMSK_FAST_MASK))))
    a490:	9b05      	ldr	r3, [sp, #20]
    a492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    a496:	2b00      	cmp	r3, #0
    a498:	d019      	beq.n	a4ce <FlexCAN_Error_IRQHandler+0xae>
    a49a:	9b04      	ldr	r3, [sp, #16]
    a49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a49e:	2b00      	cmp	r3, #0
    a4a0:	da15      	bge.n	a4ce <FlexCAN_Error_IRQHandler+0xae>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_FAST_MASK;
    a4a2:	9b04      	ldr	r3, [sp, #16]
    a4a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    a4a8:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a4aa:	9b03      	ldr	r3, [sp, #12]
    a4ac:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a4b0:	2b00      	cmp	r3, #0
    a4b2:	d00c      	beq.n	a4ce <FlexCAN_Error_IRQHandler+0xae>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR_FAST, u32ErrStatus, state);
    a4b4:	9b03      	ldr	r3, [sp, #12]
    a4b6:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a4ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a4be:	9b03      	ldr	r3, [sp, #12]
    a4c0:	9a05      	ldr	r2, [sp, #20]
    a4c2:	2106      	movs	r1, #6
    a4c4:	47a0      	blx	r4
    }
    else
    {
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    }
}
    a4c6:	e002      	b.n	a4ce <FlexCAN_Error_IRQHandler+0xae>
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    a4c8:	9b04      	ldr	r3, [sp, #16]
    a4ca:	4a04      	ldr	r2, [pc, #16]	; (a4dc <FlexCAN_Error_IRQHandler+0xbc>)
    a4cc:	621a      	str	r2, [r3, #32]
}
    a4ce:	bf00      	nop
    a4d0:	b006      	add	sp, #24
    a4d2:	bd10      	pop	{r4, pc}
    a4d4:	0000ff50 	.word	0x0000ff50
    a4d8:	1fff8fb8 	.word	0x1fff8fb8
    a4dc:	00300002 	.word	0x00300002

0000a4e0 <FlexCAN_BusOff_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements CAN_X_BUSOFF_ISR_Activity */
void FlexCAN_BusOff_IRQHandler(uint8 instance)
{
    a4e0:	b510      	push	{r4, lr}
    a4e2:	b086      	sub	sp, #24
    a4e4:	4603      	mov	r3, r0
    a4e6:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a4ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4ee:	4a3a      	ldr	r2, [pc, #232]	; (a5d8 <FlexCAN_BusOff_IRQHandler+0xf8>)
    a4f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4f4:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a4f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4fa:	4a38      	ldr	r2, [pc, #224]	; (a5dc <FlexCAN_BusOff_IRQHandler+0xfc>)
    a4fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a500:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    a502:	2300      	movs	r3, #0
    a504:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check If Driver initialized */
    if (NULL_PTR != state)
    a506:	9b03      	ldr	r3, [sp, #12]
    a508:	2b00      	cmp	r3, #0
    a50a:	d05f      	beq.n	a5cc <FlexCAN_BusOff_IRQHandler+0xec>
    {
        /* Get error status to get value updated */
        u32ErrStatus = base->ESR1;
    a50c:	9b04      	ldr	r3, [sp, #16]
    a50e:	6a1b      	ldr	r3, [r3, #32]
    a510:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_TWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_TWRNMSK_MASK))))
    a512:	9b05      	ldr	r3, [sp, #20]
    a514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    a518:	2b00      	cmp	r3, #0
    a51a:	d01a      	beq.n	a552 <FlexCAN_BusOff_IRQHandler+0x72>
    a51c:	9b04      	ldr	r3, [sp, #16]
    a51e:	685b      	ldr	r3, [r3, #4]
    a520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    a524:	2b00      	cmp	r3, #0
    a526:	d014      	beq.n	a552 <FlexCAN_BusOff_IRQHandler+0x72>
        {
            base->ESR1 = FLEXCAN_ESR1_TWRNINT_MASK;
    a528:	9b04      	ldr	r3, [sp, #16]
    a52a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a52e:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a530:	9b03      	ldr	r3, [sp, #12]
    a532:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a536:	2b00      	cmp	r3, #0
    a538:	d00b      	beq.n	a552 <FlexCAN_BusOff_IRQHandler+0x72>
            {
                state->error_callback(instance, FLEXCAN_EVENT_TX_WARNING, u32ErrStatus, state);
    a53a:	9b03      	ldr	r3, [sp, #12]
    a53c:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a540:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a544:	9b03      	ldr	r3, [sp, #12]
    a546:	9a05      	ldr	r2, [sp, #20]
    a548:	2109      	movs	r1, #9
    a54a:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    a54c:	9b04      	ldr	r3, [sp, #16]
    a54e:	6a1b      	ldr	r3, [r3, #32]
    a550:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_RWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_RWRNMSK_MASK))))
    a552:	9b05      	ldr	r3, [sp, #20]
    a554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    a558:	2b00      	cmp	r3, #0
    a55a:	d01a      	beq.n	a592 <FlexCAN_BusOff_IRQHandler+0xb2>
    a55c:	9b04      	ldr	r3, [sp, #16]
    a55e:	685b      	ldr	r3, [r3, #4]
    a560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a564:	2b00      	cmp	r3, #0
    a566:	d014      	beq.n	a592 <FlexCAN_BusOff_IRQHandler+0xb2>
        {
            base->ESR1 = FLEXCAN_ESR1_RWRNINT_MASK;
    a568:	9b04      	ldr	r3, [sp, #16]
    a56a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a56e:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a570:	9b03      	ldr	r3, [sp, #12]
    a572:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a576:	2b00      	cmp	r3, #0
    a578:	d00b      	beq.n	a592 <FlexCAN_BusOff_IRQHandler+0xb2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_RX_WARNING, u32ErrStatus, state);
    a57a:	9b03      	ldr	r3, [sp, #12]
    a57c:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a580:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a584:	9b03      	ldr	r3, [sp, #12]
    a586:	9a05      	ldr	r2, [sp, #20]
    a588:	2108      	movs	r1, #8
    a58a:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    a58c:	9b04      	ldr	r3, [sp, #16]
    a58e:	6a1b      	ldr	r3, [r3, #32]
    a590:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_BOFFINT_MASK))) && ((uint32)0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_BOFFMSK_MASK))))
    a592:	9b05      	ldr	r3, [sp, #20]
    a594:	f003 0304 	and.w	r3, r3, #4
    a598:	2b00      	cmp	r3, #0
    a59a:	d01a      	beq.n	a5d2 <FlexCAN_BusOff_IRQHandler+0xf2>
    a59c:	9b04      	ldr	r3, [sp, #16]
    a59e:	685b      	ldr	r3, [r3, #4]
    a5a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a5a4:	2b00      	cmp	r3, #0
    a5a6:	d014      	beq.n	a5d2 <FlexCAN_BusOff_IRQHandler+0xf2>
        {
            base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    a5a8:	9b04      	ldr	r3, [sp, #16]
    a5aa:	2204      	movs	r2, #4
    a5ac:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a5ae:	9b03      	ldr	r3, [sp, #12]
    a5b0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a5b4:	2b00      	cmp	r3, #0
    a5b6:	d00c      	beq.n	a5d2 <FlexCAN_BusOff_IRQHandler+0xf2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    a5b8:	9b03      	ldr	r3, [sp, #12]
    a5ba:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a5be:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a5c2:	9b03      	ldr	r3, [sp, #12]
    a5c4:	9a05      	ldr	r2, [sp, #20]
    a5c6:	2107      	movs	r1, #7
    a5c8:	47a0      	blx	r4
    }
    else
    {
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    }
}
    a5ca:	e002      	b.n	a5d2 <FlexCAN_BusOff_IRQHandler+0xf2>
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    a5cc:	9b04      	ldr	r3, [sp, #16]
    a5ce:	4a04      	ldr	r2, [pc, #16]	; (a5e0 <FlexCAN_BusOff_IRQHandler+0x100>)
    a5d0:	621a      	str	r2, [r3, #32]
}
    a5d2:	bf00      	nop
    a5d4:	b006      	add	sp, #24
    a5d6:	bd10      	pop	{r4, pc}
    a5d8:	0000ff50 	.word	0x0000ff50
    a5dc:	1fff8fb8 	.word	0x1fff8fb8
    a5e0:	000b0004 	.word	0x000b0004

0000a5e4 <FlexCAN_Ip_SendBlocking>:
                                              const Flexcan_Ip_DataInfoType * tx_info,
                                              uint32 msg_id,
                                              const uint8 * mb_data,
                                              uint32 timeout_ms
                                             )
{
    a5e4:	b500      	push	{lr}
    a5e6:	b091      	sub	sp, #68	; 0x44
    a5e8:	9204      	str	r2, [sp, #16]
    a5ea:	9303      	str	r3, [sp, #12]
    a5ec:	4603      	mov	r3, r0
    a5ee:	f88d 3017 	strb.w	r3, [sp, #23]
    a5f2:	460b      	mov	r3, r1
    a5f4:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a5f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a5fc:	4a5f      	ldr	r2, [pc, #380]	; (a77c <FlexCAN_Ip_SendBlocking+0x198>)
    a5fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a602:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a604:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a608:	4a5d      	ldr	r2, [pc, #372]	; (a780 <FlexCAN_Ip_SendBlocking+0x19c>)
    a60a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a60e:	930c      	str	r3, [sp, #48]	; 0x30

    uint32 timeStart = 0U;
    a610:	2300      	movs	r3, #0
    a612:	9307      	str	r3, [sp, #28]
    uint32 timeElapsed = 0U;
    a614:	2300      	movs	r3, #0
    a616:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 mS2Ticks = OsIf_MicrosToTicks((timeout_ms * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a618:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a61a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a61e:	fb02 f303 	mul.w	r3, r2, r3
    a622:	2100      	movs	r1, #0
    a624:	4618      	mov	r0, r3
    a626:	f7f7 fbef 	bl	1e08 <OsIf_MicrosToTicks>
    a62a:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32 uS2Ticks = 0U;
    a62c:	2300      	movs	r3, #0
    a62e:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 flexcan_mb_config = 0;
    a630:	2300      	movs	r3, #0
    a632:	9309      	str	r3, [sp, #36]	; 0x24

    volatile uint32 * flexcan_mb = NULL_PTR;
    a634:	2300      	movs	r3, #0
    a636:	9308      	str	r3, [sp, #32]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif

    result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    a638:	f89d 1016 	ldrb.w	r1, [sp, #22]
    a63c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    a640:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a642:	9300      	str	r3, [sp, #0]
    a644:	9b03      	ldr	r3, [sp, #12]
    a646:	9a04      	ldr	r2, [sp, #16]
    a648:	f7fe feaa 	bl	93a0 <FlexCAN_StartSendData>
    a64c:	900f      	str	r0, [sp, #60]	; 0x3c

    if (FLEXCAN_STATUS_SUCCESS == result)
    a64e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a650:	2b00      	cmp	r3, #0
    a652:	f040 808d 	bne.w	a770 <FlexCAN_Ip_SendBlocking+0x18c>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a656:	2000      	movs	r0, #0
    a658:	f7f7 fb8a 	bl	1d70 <OsIf_GetCounter>
    a65c:	4603      	mov	r3, r0
    a65e:	9307      	str	r3, [sp, #28]
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    a660:	e00f      	b.n	a682 <FlexCAN_Ip_SendBlocking+0x9e>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a662:	ab07      	add	r3, sp, #28
    a664:	2100      	movs	r1, #0
    a666:	4618      	mov	r0, r3
    a668:	f7f7 fb9b 	bl	1da2 <OsIf_GetElapsed>
    a66c:	4602      	mov	r2, r0
    a66e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a670:	4413      	add	r3, r2
    a672:	930e      	str	r3, [sp, #56]	; 0x38
            if (timeElapsed >= mS2Ticks)
    a674:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a678:	429a      	cmp	r2, r3
    a67a:	d302      	bcc.n	a682 <FlexCAN_Ip_SendBlocking+0x9e>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    a67c:	2303      	movs	r3, #3
    a67e:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
    a680:	e008      	b.n	a694 <FlexCAN_Ip_SendBlocking+0xb0>
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    a682:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a686:	4619      	mov	r1, r3
    a688:	980d      	ldr	r0, [sp, #52]	; 0x34
    a68a:	f7fe fab6 	bl	8bfa <FlexCAN_GetBuffStatusFlag>
    a68e:	4603      	mov	r3, r0
    a690:	2b01      	cmp	r3, #1
    a692:	d1e6      	bne.n	a662 <FlexCAN_Ip_SendBlocking+0x7e>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == result) && (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE))
    a694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a696:	2b03      	cmp	r3, #3
    a698:	d15c      	bne.n	a754 <FlexCAN_Ip_SendBlocking+0x170>
    a69a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a69e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a6a0:	011b      	lsls	r3, r3, #4
    a6a2:	4413      	add	r3, r2
    a6a4:	3304      	adds	r3, #4
    a6a6:	681b      	ldr	r3, [r3, #0]
    a6a8:	2b00      	cmp	r3, #0
    a6aa:	d053      	beq.n	a754 <FlexCAN_Ip_SendBlocking+0x170>
        {
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a6ac:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a6b0:	4619      	mov	r1, r3
    a6b2:	980d      	ldr	r0, [sp, #52]	; 0x34
    a6b4:	f7fe fa8e 	bl	8bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>
                flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    a6b8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a6bc:	4619      	mov	r1, r3
    a6be:	980d      	ldr	r0, [sp, #52]	; 0x34
    a6c0:	f001 f968 	bl	b994 <FlexCAN_GetMsgBuffRegion>
    a6c4:	9008      	str	r0, [sp, #32]
                flexcan_mb_config = * flexcan_mb;
    a6c6:	9b08      	ldr	r3, [sp, #32]
    a6c8:	681b      	ldr	r3, [r3, #0]
    a6ca:	9309      	str	r3, [sp, #36]	; 0x24
                /* Reset the code */
                flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    a6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a6ce:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    a6d2:	9309      	str	r3, [sp, #36]	; 0x24
                flexcan_mb_config |= ((uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    a6d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a6d6:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    a6da:	9309      	str	r3, [sp, #36]	; 0x24
                *flexcan_mb = flexcan_mb_config;
    a6dc:	9b08      	ldr	r3, [sp, #32]
    a6de:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a6e0:	601a      	str	r2, [r3, #0]

                /* Wait to finish abort operation */
                uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a6e2:	2100      	movs	r1, #0
    a6e4:	4827      	ldr	r0, [pc, #156]	; (a784 <FlexCAN_Ip_SendBlocking+0x1a0>)
    a6e6:	f7f7 fb8f 	bl	1e08 <OsIf_MicrosToTicks>
    a6ea:	900a      	str	r0, [sp, #40]	; 0x28
                timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a6ec:	2000      	movs	r0, #0
    a6ee:	f7f7 fb3f 	bl	1d70 <OsIf_GetCounter>
    a6f2:	4603      	mov	r3, r0
    a6f4:	9307      	str	r3, [sp, #28]
                 timeElapsed = 0U;
    a6f6:	2300      	movs	r3, #0
    a6f8:	930e      	str	r3, [sp, #56]	; 0x38
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    a6fa:	e00f      	b.n	a71c <FlexCAN_Ip_SendBlocking+0x138>
                {
                    timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a6fc:	ab07      	add	r3, sp, #28
    a6fe:	2100      	movs	r1, #0
    a700:	4618      	mov	r0, r3
    a702:	f7f7 fb4e 	bl	1da2 <OsIf_GetElapsed>
    a706:	4602      	mov	r2, r0
    a708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a70a:	4413      	add	r3, r2
    a70c:	930e      	str	r3, [sp, #56]	; 0x38
                    if (timeElapsed >= uS2Ticks)
    a70e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a712:	429a      	cmp	r2, r3
    a714:	d302      	bcc.n	a71c <FlexCAN_Ip_SendBlocking+0x138>
                    {
                        result = FLEXCAN_STATUS_TIMEOUT;
    a716:	2303      	movs	r3, #3
    a718:	930f      	str	r3, [sp, #60]	; 0x3c
                        break;
    a71a:	e008      	b.n	a72e <FlexCAN_Ip_SendBlocking+0x14a>
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    a71c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a720:	4619      	mov	r1, r3
    a722:	980d      	ldr	r0, [sp, #52]	; 0x34
    a724:	f7fe fa69 	bl	8bfa <FlexCAN_GetBuffStatusFlag>
    a728:	4603      	mov	r3, r0
    a72a:	2b00      	cmp	r3, #0
    a72c:	d0e6      	beq.n	a6fc <FlexCAN_Ip_SendBlocking+0x118>
                    }
                }

                flexcan_mb_config = *flexcan_mb;
    a72e:	9b08      	ldr	r3, [sp, #32]
    a730:	681b      	ldr	r3, [r3, #0]
    a732:	9309      	str	r3, [sp, #36]	; 0x24
                /* Check if the MBs have been safely Inactivated */
                if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    a734:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a736:	0e1b      	lsrs	r3, r3, #24
    a738:	f003 030f 	and.w	r3, r3, #15
    a73c:	2b08      	cmp	r3, #8
    a73e:	d101      	bne.n	a744 <FlexCAN_Ip_SendBlocking+0x160>
                {
                    /* Transmission have occurred */
                    result = FLEXCAN_STATUS_SUCCESS;
    a740:	2300      	movs	r3, #0
    a742:	930f      	str	r3, [sp, #60]	; 0x3c
                }

                if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    a744:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a746:	0e1b      	lsrs	r3, r3, #24
    a748:	f003 030f 	and.w	r3, r3, #15
    a74c:	2b09      	cmp	r3, #9
    a74e:	d101      	bne.n	a754 <FlexCAN_Ip_SendBlocking+0x170>
                {
                    /* Transmission have been aborted */
                    result = FLEXCAN_STATUS_TIMEOUT;
    a750:	2303      	movs	r3, #3
    a752:	930f      	str	r3, [sp, #60]	; 0x3c
                }
        }

        /* Clear message buffer flag */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a754:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a758:	4619      	mov	r1, r3
    a75a:	980d      	ldr	r0, [sp, #52]	; 0x34
    a75c:	f7fe fa3a 	bl	8bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>

        state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    a760:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a764:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a766:	011b      	lsls	r3, r3, #4
    a768:	4413      	add	r3, r2
    a76a:	3304      	adds	r3, #4
    a76c:	2200      	movs	r2, #0
    a76e:	601a      	str	r2, [r3, #0]
    }
    return result;
    a770:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
    a772:	4618      	mov	r0, r3
    a774:	b011      	add	sp, #68	; 0x44
    a776:	f85d fb04 	ldr.w	pc, [sp], #4
    a77a:	bf00      	nop
    a77c:	0000ff50 	.word	0x0000ff50
    a780:	1fff8fb8 	.word	0x1fff8fb8
    a784:	000f4240 	.word	0x000f4240

0000a788 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_SetRxMbGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMbGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    a788:	b500      	push	{lr}
    a78a:	b087      	sub	sp, #28
    a78c:	4603      	mov	r3, r0
    a78e:	9100      	str	r1, [sp, #0]
    a790:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a794:	2300      	movs	r3, #0
    a796:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a798:	2300      	movs	r3, #0
    a79a:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a79c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a7a0:	4a1c      	ldr	r2, [pc, #112]	; (a814 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x8c>)
    a7a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7a6:	9303      	str	r3, [sp, #12]
#endif

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a7a8:	9803      	ldr	r0, [sp, #12]
    a7aa:	f7fe f9b9 	bl	8b20 <FlexCAN_IsEnabled>
    a7ae:	4603      	mov	r3, r0
    a7b0:	2b00      	cmp	r3, #0
    a7b2:	bf14      	ite	ne
    a7b4:	2301      	movne	r3, #1
    a7b6:	2300      	moveq	r3, #0
    a7b8:	b2db      	uxtb	r3, r3
    a7ba:	f083 0301 	eor.w	r3, r3, #1
    a7be:	b2db      	uxtb	r3, r3
    a7c0:	f88d 300b 	strb.w	r3, [sp, #11]
    a7c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a7c8:	f003 0301 	and.w	r3, r3, #1
    a7cc:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a7d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a7d4:	2b00      	cmp	r3, #0
    a7d6:	d003      	beq.n	a7e0 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    a7d8:	9803      	ldr	r0, [sp, #12]
    a7da:	f001 f9c3 	bl	bb64 <FlexCAN_Enable>
    a7de:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    a7e0:	9b05      	ldr	r3, [sp, #20]
    a7e2:	2b00      	cmp	r3, #0
    a7e4:	d103      	bne.n	a7ee <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxMsgBuffGlobalMask(pBase, mask);
    a7e6:	9900      	ldr	r1, [sp, #0]
    a7e8:	9803      	ldr	r0, [sp, #12]
    a7ea:	f7fe fbc3 	bl	8f74 <FlexCAN_SetRxMsgBuffGlobalMask>
    }

    if (TRUE == disabled)
    a7ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a7f2:	2b00      	cmp	r3, #0
    a7f4:	d008      	beq.n	a808 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    a7f6:	9803      	ldr	r0, [sp, #12]
    a7f8:	f001 fa32 	bl	bc60 <FlexCAN_Disable>
    a7fc:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a7fe:	9b04      	ldr	r3, [sp, #16]
    a800:	2b00      	cmp	r3, #0
    a802:	d001      	beq.n	a808 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
        {
            result = status;
    a804:	9b04      	ldr	r3, [sp, #16]
    a806:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    a808:	9b05      	ldr	r3, [sp, #20]
}
    a80a:	4618      	mov	r0, r3
    a80c:	b007      	add	sp, #28
    a80e:	f85d fb04 	ldr.w	pc, [sp], #4
    a812:	bf00      	nop
    a814:	0000ff50 	.word	0x0000ff50

0000a818 <FlexCAN_Ip_EnterFreezeMode_Privileged>:
 * Description   : Enter Driver In freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnterFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnterFreezeMode_Privileged(uint8 instance)
{
    a818:	b500      	push	{lr}
    a81a:	b085      	sub	sp, #20
    a81c:	4603      	mov	r3, r0
    a81e:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a822:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a826:	4a06      	ldr	r2, [pc, #24]	; (a840 <FlexCAN_Ip_EnterFreezeMode_Privileged+0x28>)
    a828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a82c:	9303      	str	r3, [sp, #12]
        return FlexCAN_EnterFreezeMode(base);
    a82e:	9803      	ldr	r0, [sp, #12]
    a830:	f001 f94c 	bl	bacc <FlexCAN_EnterFreezeMode>
    a834:	4603      	mov	r3, r0
}
    a836:	4618      	mov	r0, r3
    a838:	b005      	add	sp, #20
    a83a:	f85d fb04 	ldr.w	pc, [sp], #4
    a83e:	bf00      	nop
    a840:	0000ff50 	.word	0x0000ff50

0000a844 <FlexCAN_Ip_ExitFreezeMode_Privileged>:
 * Description   : Exit Driver from freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ExitFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ExitFreezeMode_Privileged(uint8 instance)
{
    a844:	b500      	push	{lr}
    a846:	b085      	sub	sp, #20
    a848:	4603      	mov	r3, r0
    a84a:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a84e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a852:	4a06      	ldr	r2, [pc, #24]	; (a86c <FlexCAN_Ip_ExitFreezeMode_Privileged+0x28>)
    a854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a858:	9303      	str	r3, [sp, #12]
        return FlexCAN_ExitFreezeMode(base);
    a85a:	9803      	ldr	r0, [sp, #12]
    a85c:	f001 f9be 	bl	bbdc <FlexCAN_ExitFreezeMode>
    a860:	4603      	mov	r3, r0
}
    a862:	4618      	mov	r0, r3
    a864:	b005      	add	sp, #20
    a866:	f85d fb04 	ldr.w	pc, [sp], #4
    a86a:	bf00      	nop
    a86c:	0000ff50 	.word	0x0000ff50

0000a870 <FlexCAN_Ip_SetRxIndividualMask_Privileged>:
 * Description   : Set Rx individual mask as absolute value provided by mask parameter
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxIndividualMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxIndividualMask_Privileged(uint8 instance, uint8 mb_idx, uint32 mask)
{
    a870:	b500      	push	{lr}
    a872:	b087      	sub	sp, #28
    a874:	4603      	mov	r3, r0
    a876:	9200      	str	r2, [sp, #0]
    a878:	f88d 3007 	strb.w	r3, [sp, #7]
    a87c:	460b      	mov	r3, r1
    a87e:	f88d 3006 	strb.w	r3, [sp, #6]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a882:	2300      	movs	r3, #0
    a884:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a886:	2300      	movs	r3, #0
    a888:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a88a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a88e:	4a1e      	ldr	r2, [pc, #120]	; (a908 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x98>)
    a890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a894:	9303      	str	r3, [sp, #12]
    }
    else
    {
#endif

    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a896:	9803      	ldr	r0, [sp, #12]
    a898:	f7fe f942 	bl	8b20 <FlexCAN_IsEnabled>
    a89c:	4603      	mov	r3, r0
    a89e:	2b00      	cmp	r3, #0
    a8a0:	bf14      	ite	ne
    a8a2:	2301      	movne	r3, #1
    a8a4:	2300      	moveq	r3, #0
    a8a6:	b2db      	uxtb	r3, r3
    a8a8:	f083 0301 	eor.w	r3, r3, #1
    a8ac:	b2db      	uxtb	r3, r3
    a8ae:	f88d 300b 	strb.w	r3, [sp, #11]
    a8b2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a8b6:	f003 0301 	and.w	r3, r3, #1
    a8ba:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a8be:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a8c2:	2b00      	cmp	r3, #0
    a8c4:	d003      	beq.n	a8ce <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    a8c6:	9803      	ldr	r0, [sp, #12]
    a8c8:	f001 f94c 	bl	bb64 <FlexCAN_Enable>
    a8cc:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    a8ce:	9b05      	ldr	r3, [sp, #20]
    a8d0:	2b00      	cmp	r3, #0
    a8d2:	d106      	bne.n	a8e2 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x72>
    {
        FlexCAN_SetRxIndividualMask(pBase, mb_idx, mask);
    a8d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a8d8:	9a00      	ldr	r2, [sp, #0]
    a8da:	4619      	mov	r1, r3
    a8dc:	9803      	ldr	r0, [sp, #12]
    a8de:	f7fe fb52 	bl	8f86 <FlexCAN_SetRxIndividualMask>
    }

    if (TRUE == disabled)
    a8e2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a8e6:	2b00      	cmp	r3, #0
    a8e8:	d008      	beq.n	a8fc <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    a8ea:	9803      	ldr	r0, [sp, #12]
    a8ec:	f001 f9b8 	bl	bc60 <FlexCAN_Disable>
    a8f0:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a8f2:	9b04      	ldr	r3, [sp, #16]
    a8f4:	2b00      	cmp	r3, #0
    a8f6:	d001      	beq.n	a8fc <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
        {
            result = status;
    a8f8:	9b04      	ldr	r3, [sp, #16]
    a8fa:	9305      	str	r3, [sp, #20]
        }
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    a8fc:	9b05      	ldr	r3, [sp, #20]
}
    a8fe:	4618      	mov	r0, r3
    a900:	b007      	add	sp, #28
    a902:	f85d fb04 	ldr.w	pc, [sp], #4
    a906:	bf00      	nop
    a908:	0000ff50 	.word	0x0000ff50

0000a90c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>:
 * Description   : Set RxFifo Global Mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxFifoGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxFifoGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    a90c:	b500      	push	{lr}
    a90e:	b087      	sub	sp, #28
    a910:	4603      	mov	r3, r0
    a912:	9100      	str	r1, [sp, #0]
    a914:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a918:	2300      	movs	r3, #0
    a91a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a91c:	2300      	movs	r3, #0
    a91e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a920:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a924:	4a1c      	ldr	r2, [pc, #112]	; (a998 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x8c>)
    a926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a92a:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a92c:	9803      	ldr	r0, [sp, #12]
    a92e:	f7fe f8f7 	bl	8b20 <FlexCAN_IsEnabled>
    a932:	4603      	mov	r3, r0
    a934:	2b00      	cmp	r3, #0
    a936:	bf14      	ite	ne
    a938:	2301      	movne	r3, #1
    a93a:	2300      	moveq	r3, #0
    a93c:	b2db      	uxtb	r3, r3
    a93e:	f083 0301 	eor.w	r3, r3, #1
    a942:	b2db      	uxtb	r3, r3
    a944:	f88d 300b 	strb.w	r3, [sp, #11]
    a948:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a94c:	f003 0301 	and.w	r3, r3, #1
    a950:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a954:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a958:	2b00      	cmp	r3, #0
    a95a:	d003      	beq.n	a964 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    a95c:	9803      	ldr	r0, [sp, #12]
    a95e:	f001 f901 	bl	bb64 <FlexCAN_Enable>
    a962:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    a964:	9b05      	ldr	r3, [sp, #20]
    a966:	2b00      	cmp	r3, #0
    a968:	d103      	bne.n	a972 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxFifoGlobalMask(pBase, mask);
    a96a:	9900      	ldr	r1, [sp, #0]
    a96c:	9803      	ldr	r0, [sp, #12]
    a96e:	f7fe f8a7 	bl	8ac0 <FlexCAN_SetRxFifoGlobalMask>
    }

    if (TRUE == disabled)
    a972:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a976:	2b00      	cmp	r3, #0
    a978:	d008      	beq.n	a98c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    a97a:	9803      	ldr	r0, [sp, #12]
    a97c:	f001 f970 	bl	bc60 <FlexCAN_Disable>
    a980:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a982:	9b04      	ldr	r3, [sp, #16]
    a984:	2b00      	cmp	r3, #0
    a986:	d001      	beq.n	a98c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
        {
            result = status;
    a988:	9b04      	ldr	r3, [sp, #16]
    a98a:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    a98c:	9b05      	ldr	r3, [sp, #20]
}
    a98e:	4618      	mov	r0, r3
    a990:	b007      	add	sp, #28
    a992:	f85d fb04 	ldr.w	pc, [sp], #4
    a996:	bf00      	nop
    a998:	0000ff50 	.word	0x0000ff50

0000a99c <FlexCAN_Ip_Deinit_Privileged>:
 * This function will disable all FlexCAN interrupts, and disable the FlexCAN.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_Deinit_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Deinit_Privileged(uint8 instance)
{
    a99c:	b500      	push	{lr}
    a99e:	b085      	sub	sp, #20
    a9a0:	4603      	mov	r3, r0
    a9a2:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a9a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a9aa:	4a0e      	ldr	r2, [pc, #56]	; (a9e4 <FlexCAN_Ip_Deinit_Privileged+0x48>)
    a9ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9b0:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Enter Freeze Mode Required before to enter Disabled Mode */
    result = FlexCAN_EnterFreezeMode(base);
    a9b2:	9803      	ldr	r0, [sp, #12]
    a9b4:	f001 f88a 	bl	bacc <FlexCAN_EnterFreezeMode>
    a9b8:	9002      	str	r0, [sp, #8]
    if (FLEXCAN_STATUS_SUCCESS == result)
    a9ba:	9b02      	ldr	r3, [sp, #8]
    a9bc:	2b00      	cmp	r3, #0
    a9be:	d10b      	bne.n	a9d8 <FlexCAN_Ip_Deinit_Privileged+0x3c>
    {
        /* Reset registers */
        FlexCAN_SetRegDefaultVal(base);
    a9c0:	9803      	ldr	r0, [sp, #12]
    a9c2:	f7fe fb18 	bl	8ff6 <FlexCAN_SetRegDefaultVal>
        /* wait for disable */
        (void)FlexCAN_Disable(base);
    a9c6:	9803      	ldr	r0, [sp, #12]
    a9c8:	f001 f94a 	bl	bc60 <FlexCAN_Disable>
        /* Clear state pointer that is checked by FLEXCAN_DRV_Init */
        Flexcan_Ip_apxState[instance] = NULL_PTR;
    a9cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a9d0:	4a05      	ldr	r2, [pc, #20]	; (a9e8 <FlexCAN_Ip_Deinit_Privileged+0x4c>)
    a9d2:	2100      	movs	r1, #0
    a9d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OsIf_Trusted_Call1param(FlexCAN_ClrUserAccessAllowed, base);
        }
    #endif
    }

    return result;
    a9d8:	9b02      	ldr	r3, [sp, #8]
}
    a9da:	4618      	mov	r0, r3
    a9dc:	b005      	add	sp, #20
    a9de:	f85d fb04 	ldr.w	pc, [sp], #4
    a9e2:	bf00      	nop
    a9e4:	0000ff50 	.word	0x0000ff50
    a9e8:	1fff8fb8 	.word	0x1fff8fb8

0000a9ec <FlexCAN_Ip_MainFunctionRead>:
 * This function read the messages received as pulling or if the Interrupts are disabled.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionRead_Activity */
void FlexCAN_Ip_MainFunctionRead(uint8 instance, uint8 mb_idx)
{
    a9ec:	b500      	push	{lr}
    a9ee:	b085      	sub	sp, #20
    a9f0:	4603      	mov	r3, r0
    a9f2:	460a      	mov	r2, r1
    a9f4:	f88d 3007 	strb.w	r3, [sp, #7]
    a9f8:	4613      	mov	r3, r2
    a9fa:	f88d 3006 	strb.w	r3, [sp, #6]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a9fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aa02:	4a22      	ldr	r2, [pc, #136]	; (aa8c <FlexCAN_Ip_MainFunctionRead+0xa0>)
    aa04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa08:	9303      	str	r3, [sp, #12]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    aa0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aa0e:	4a20      	ldr	r2, [pc, #128]	; (aa90 <FlexCAN_Ip_MainFunctionRead+0xa4>)
    aa10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa14:	9302      	str	r3, [sp, #8]
        }
    }
    else
    {
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
        if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    aa16:	9b02      	ldr	r3, [sp, #8]
    aa18:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    aa1c:	2b00      	cmp	r3, #0
    aa1e:	d015      	beq.n	aa4c <FlexCAN_Ip_MainFunctionRead+0x60>
    aa20:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aa24:	2b07      	cmp	r3, #7
    aa26:	d811      	bhi.n	aa4c <FlexCAN_Ip_MainFunctionRead+0x60>
        {
            /* just process available legacy fifo event only */
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    aa28:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aa2c:	2b00      	cmp	r3, #0
    aa2e:	d128      	bne.n	aa82 <FlexCAN_Ip_MainFunctionRead+0x96>
            {
                if (FlexCAN_GetBuffStatusFlag(base, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE) != 0U)
    aa30:	2105      	movs	r1, #5
    aa32:	9803      	ldr	r0, [sp, #12]
    aa34:	f7fe f8e1 	bl	8bfa <FlexCAN_GetBuffStatusFlag>
    aa38:	4603      	mov	r3, r0
    aa3a:	2b00      	cmp	r3, #0
    aa3c:	d021      	beq.n	aa82 <FlexCAN_Ip_MainFunctionRead+0x96>
                {
                    FlexCAN_IRQHandlerRxFIFO(instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE);
    aa3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aa42:	2105      	movs	r1, #5
    aa44:	4618      	mov	r0, r3
    aa46:	f7fe ff17 	bl	9878 <FlexCAN_IRQHandlerRxFIFO>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    aa4a:	e01a      	b.n	aa82 <FlexCAN_Ip_MainFunctionRead+0x96>
                }
            }
        }
        else
        {
            if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    aa4c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aa50:	4619      	mov	r1, r3
    aa52:	9803      	ldr	r0, [sp, #12]
    aa54:	f7fe f8d1 	bl	8bfa <FlexCAN_GetBuffStatusFlag>
    aa58:	4603      	mov	r3, r0
    aa5a:	2b00      	cmp	r3, #0
    aa5c:	d012      	beq.n	aa84 <FlexCAN_Ip_MainFunctionRead+0x98>
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    aa5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aa62:	9a02      	ldr	r2, [sp, #8]
    aa64:	011b      	lsls	r3, r3, #4
    aa66:	4413      	add	r3, r2
    aa68:	3304      	adds	r3, #4
    aa6a:	681b      	ldr	r3, [r3, #0]
    aa6c:	2b01      	cmp	r3, #1
    aa6e:	d109      	bne.n	aa84 <FlexCAN_Ip_MainFunctionRead+0x98>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    aa70:	f89d 2006 	ldrb.w	r2, [sp, #6]
    aa74:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aa78:	4611      	mov	r1, r2
    aa7a:	4618      	mov	r0, r3
    aa7c:	f7fe fd74 	bl	9568 <FlexCAN_IRQHandlerRxMB>
            }
        }
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
}
    aa80:	e000      	b.n	aa84 <FlexCAN_Ip_MainFunctionRead+0x98>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    aa82:	bf00      	nop
}
    aa84:	bf00      	nop
    aa86:	b005      	add	sp, #20
    aa88:	f85d fb04 	ldr.w	pc, [sp], #4
    aa8c:	0000ff50 	.word	0x0000ff50
    aa90:	1fff8fb8 	.word	0x1fff8fb8

0000aa94 <FlexCAN_Ip_MainFunctionBusOff_Privileged>:
 * This function check the bus off event.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionBusOff_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_MainFunctionBusOff_Privileged(uint8 instance)
{
    aa94:	b510      	push	{r4, lr}
    aa96:	b086      	sub	sp, #24
    aa98:	4603      	mov	r3, r0
    aa9a:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    aa9e:	2301      	movs	r3, #1
    aaa0:	9305      	str	r3, [sp, #20]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    aaa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aaa6:	4a15      	ldr	r2, [pc, #84]	; (aafc <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x68>)
    aaa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaac:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    aaae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aab2:	4a13      	ldr	r2, [pc, #76]	; (ab00 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x6c>)
    aab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aab8:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    aaba:	2300      	movs	r3, #0
    aabc:	9302      	str	r3, [sp, #8]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Get error status */
    u32ErrStatus = base->ESR1;
    aabe:	9b04      	ldr	r3, [sp, #16]
    aac0:	6a1b      	ldr	r3, [r3, #32]
    aac2:	9302      	str	r3, [sp, #8]

    if (0U != (u32ErrStatus & FLEXCAN_ESR1_BOFFINT_MASK))
    aac4:	9b02      	ldr	r3, [sp, #8]
    aac6:	f003 0304 	and.w	r3, r3, #4
    aaca:	2b00      	cmp	r3, #0
    aacc:	d012      	beq.n	aaf4 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x60>
    {
        /* Invoke callback */
        if (state->error_callback != NULL_PTR)
    aace:	9b03      	ldr	r3, [sp, #12]
    aad0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    aad4:	2b00      	cmp	r3, #0
    aad6:	d008      	beq.n	aaea <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x56>
        {
            state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    aad8:	9b03      	ldr	r3, [sp, #12]
    aada:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    aade:	f89d 0007 	ldrb.w	r0, [sp, #7]
    aae2:	9b03      	ldr	r3, [sp, #12]
    aae4:	9a02      	ldr	r2, [sp, #8]
    aae6:	2107      	movs	r1, #7
    aae8:	47a0      	blx	r4
        }
        /* Clear BusOff Status Flag */
        base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    aaea:	9b04      	ldr	r3, [sp, #16]
    aaec:	2204      	movs	r2, #4
    aaee:	621a      	str	r2, [r3, #32]
        eRetVal = FLEXCAN_STATUS_SUCCESS;
    aaf0:	2300      	movs	r3, #0
    aaf2:	9305      	str	r3, [sp, #20]
    }
    return eRetVal;
    aaf4:	9b05      	ldr	r3, [sp, #20]
}
    aaf6:	4618      	mov	r0, r3
    aaf8:	b006      	add	sp, #24
    aafa:	bd10      	pop	{r4, pc}
    aafc:	0000ff50 	.word	0x0000ff50
    ab00:	1fff8fb8 	.word	0x1fff8fb8

0000ab04 <FlexCAN_Ip_MainFunctionWrite>:
 * This function check the message if have been sent.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionWrite_Activity */
void FlexCAN_Ip_MainFunctionWrite(uint8 instance, uint8 mb_idx)
{
    ab04:	b510      	push	{r4, lr}
    ab06:	b098      	sub	sp, #96	; 0x60
    ab08:	4603      	mov	r3, r0
    ab0a:	460a      	mov	r2, r1
    ab0c:	f88d 3007 	strb.w	r3, [sp, #7]
    ab10:	4613      	mov	r3, r2
    ab12:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    ab16:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ab1a:	4a3f      	ldr	r2, [pc, #252]	; (ac18 <FlexCAN_Ip_MainFunctionWrite+0x114>)
    ab1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab20:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    ab22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ab26:	4a3d      	ldr	r2, [pc, #244]	; (ac1c <FlexCAN_Ip_MainFunctionWrite+0x118>)
    ab28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab2c:	9316      	str	r3, [sp, #88]	; 0x58

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    ab2e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ab32:	4619      	mov	r1, r3
    ab34:	9817      	ldr	r0, [sp, #92]	; 0x5c
    ab36:	f7fe f860 	bl	8bfa <FlexCAN_GetBuffStatusFlag>
    ab3a:	4603      	mov	r3, r0
    ab3c:	2b00      	cmp	r3, #0
    ab3e:	d068      	beq.n	ac12 <FlexCAN_Ip_MainFunctionWrite+0x10e>
    {
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    ab40:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ab44:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ab46:	011b      	lsls	r3, r3, #4
    ab48:	4413      	add	r3, r2
    ab4a:	3304      	adds	r3, #4
    ab4c:	681b      	ldr	r3, [r3, #0]
    ab4e:	2b02      	cmp	r3, #2
    ab50:	d15f      	bne.n	ac12 <FlexCAN_Ip_MainFunctionWrite+0x10e>
        {
            if (state->mbs[mb_idx].isRemote)
    ab52:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ab56:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ab58:	011b      	lsls	r3, r3, #4
    ab5a:	4413      	add	r3, r2
    ab5c:	3309      	adds	r3, #9
    ab5e:	781b      	ldrb	r3, [r3, #0]
    ab60:	2b00      	cmp	r3, #0
    ab62:	d028      	beq.n	abb6 <FlexCAN_Ip_MainFunctionWrite+0xb2>
            {
                Flexcan_Ip_MsgBuffType mb;
                mb.cs = 0U;
    ab64:	2300      	movs	r3, #0
    ab66:	9302      	str	r3, [sp, #8]
                mb.time_stamp = 0U;
    ab68:	2300      	movs	r3, #0
    ab6a:	9315      	str	r3, [sp, #84]	; 0x54
                FlexCAN_LockRxMsgBuff(base, mb_idx);
    ab6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ab70:	4619      	mov	r1, r3
    ab72:	9817      	ldr	r0, [sp, #92]	; 0x5c
    ab74:	f001 fa87 	bl	c086 <FlexCAN_LockRxMsgBuff>
                FlexCAN_GetMsgBuff(base, mb_idx, &mb);
    ab78:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ab7c:	aa02      	add	r2, sp, #8
    ab7e:	4619      	mov	r1, r3
    ab80:	9817      	ldr	r0, [sp, #92]	; 0x5c
    ab82:	f001 fbaf 	bl	c2e4 <FlexCAN_GetMsgBuff>
                FlexCAN_UnlockRxMsgBuff(base);
    ab86:	9817      	ldr	r0, [sp, #92]	; 0x5c
    ab88:	f7fe f81d 	bl	8bc6 <FlexCAN_UnlockRxMsgBuff>
                state->mbs[mb_idx].time_stamp = mb.time_stamp;
    ab8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ab90:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ab92:	9916      	ldr	r1, [sp, #88]	; 0x58
    ab94:	011b      	lsls	r3, r3, #4
    ab96:	440b      	add	r3, r1
    ab98:	330c      	adds	r3, #12
    ab9a:	601a      	str	r2, [r3, #0]
                /* If the frame was a remote frame, clear the flag only if the response was
                * not received yet. If the response was received, leave the flag set in order
                * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
                if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    ab9c:	9b02      	ldr	r3, [sp, #8]
    ab9e:	0e1b      	lsrs	r3, r3, #24
    aba0:	f003 030f 	and.w	r3, r3, #15
    aba4:	2b04      	cmp	r3, #4
    aba6:	d11d      	bne.n	abe4 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                {
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    aba8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    abac:	4619      	mov	r1, r3
    abae:	9817      	ldr	r0, [sp, #92]	; 0x5c
    abb0:	f7fe f810 	bl	8bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>
    abb4:	e016      	b.n	abe4 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                }
            }
            else
            {
                state->mbs[mb_idx].time_stamp = FlexCAN_GetMsgBuffTimestamp(base, mb_idx);
    abb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    abba:	f89d 4006 	ldrb.w	r4, [sp, #6]
    abbe:	4619      	mov	r1, r3
    abc0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    abc2:	f001 fb7b 	bl	c2bc <FlexCAN_GetMsgBuffTimestamp>
    abc6:	4601      	mov	r1, r0
    abc8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    abca:	0123      	lsls	r3, r4, #4
    abcc:	4413      	add	r3, r2
    abce:	330c      	adds	r3, #12
    abd0:	6019      	str	r1, [r3, #0]
                FlexCAN_UnlockRxMsgBuff(base);
    abd2:	9817      	ldr	r0, [sp, #92]	; 0x5c
    abd4:	f7fd fff7 	bl	8bc6 <FlexCAN_UnlockRxMsgBuff>
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    abd8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    abdc:	4619      	mov	r1, r3
    abde:	9817      	ldr	r0, [sp, #92]	; 0x5c
    abe0:	f7fd fff8 	bl	8bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>
            }

            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    abe4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    abe8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    abea:	011b      	lsls	r3, r3, #4
    abec:	4413      	add	r3, r2
    abee:	3304      	adds	r3, #4
    abf0:	2200      	movs	r2, #0
    abf2:	601a      	str	r2, [r3, #0]

            /* Invoke callback */
            if (state->callback != NULL_PTR)
    abf4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    abf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    abfa:	2b00      	cmp	r3, #0
    abfc:	d009      	beq.n	ac12 <FlexCAN_Ip_MainFunctionWrite+0x10e>
            {
                state->callback(instance, FLEXCAN_EVENT_TX_COMPLETE, mb_idx, state);
    abfe:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ac00:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    ac04:	f89d 2006 	ldrb.w	r2, [sp, #6]
    ac08:	f89d 0007 	ldrb.w	r0, [sp, #7]
    ac0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ac0e:	2104      	movs	r1, #4
    ac10:	47a0      	blx	r4
            }
        }
    }
}
    ac12:	bf00      	nop
    ac14:	b018      	add	sp, #96	; 0x60
    ac16:	bd10      	pop	{r4, pc}
    ac18:	0000ff50 	.word	0x0000ff50
    ac1c:	1fff8fb8 	.word	0x1fff8fb8

0000ac20 <FlexCAN_Ip_GetStopMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STOPPED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStopMode_Activity */
boolean FlexCAN_Ip_GetStopMode_Privileged(uint8 instance)
{
    ac20:	b084      	sub	sp, #16
    ac22:	4603      	mov	r3, r0
    ac24:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    ac28:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac2c:	4a08      	ldr	r2, [pc, #32]	; (ac50 <FlexCAN_Ip_GetStopMode_Privileged+0x30>)
    ac2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac32:	9303      	str	r3, [sp, #12]
    return ((FLEXCAN_MCR_LPMACK_MASK == (base->MCR & FLEXCAN_MCR_LPMACK_MASK)) ? TRUE : FALSE);
    ac34:	9b03      	ldr	r3, [sp, #12]
    ac36:	681b      	ldr	r3, [r3, #0]
    ac38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    ac3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    ac40:	bf0c      	ite	eq
    ac42:	2301      	moveq	r3, #1
    ac44:	2300      	movne	r3, #0
    ac46:	b2db      	uxtb	r3, r3
}
    ac48:	4618      	mov	r0, r3
    ac4a:	b004      	add	sp, #16
    ac4c:	4770      	bx	lr
    ac4e:	bf00      	nop
    ac50:	0000ff50 	.word	0x0000ff50

0000ac54 <FlexCAN_Ip_GetStartMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STARTED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStartMode_Activity */
boolean FlexCAN_Ip_GetStartMode_Privileged(uint8 instance)
{
    ac54:	b084      	sub	sp, #16
    ac56:	4603      	mov	r3, r0
    ac58:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    ac5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac60:	4a07      	ldr	r2, [pc, #28]	; (ac80 <FlexCAN_Ip_GetStartMode_Privileged+0x2c>)
    ac62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac66:	9303      	str	r3, [sp, #12]
    return ((0U == (base->MCR & (FLEXCAN_MCR_LPMACK_MASK | FLEXCAN_MCR_FRZACK_MASK))) ? TRUE : FALSE);
    ac68:	9b03      	ldr	r3, [sp, #12]
    ac6a:	681b      	ldr	r3, [r3, #0]
    ac6c:	f003 7388 	and.w	r3, r3, #17825792	; 0x1100000
    ac70:	2b00      	cmp	r3, #0
    ac72:	bf0c      	ite	eq
    ac74:	2301      	moveq	r3, #1
    ac76:	2300      	movne	r3, #0
    ac78:	b2db      	uxtb	r3, r3
}
    ac7a:	4618      	mov	r0, r3
    ac7c:	b004      	add	sp, #16
    ac7e:	4770      	bx	lr
    ac80:	0000ff50 	.word	0x0000ff50

0000ac84 <FlexCAN_Ip_SetStartMode_Privileged>:
 * Description   : Set the FlexCAN instance in START mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStartMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStartMode_Privileged(uint8 instance)
{
    ac84:	b500      	push	{lr}
    ac86:	b085      	sub	sp, #20
    ac88:	4603      	mov	r3, r0
    ac8a:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    ac8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac92:	4a0b      	ldr	r2, [pc, #44]	; (acc0 <FlexCAN_Ip_SetStartMode_Privileged+0x3c>)
    ac94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac98:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    ac9a:	f002 fb93 	bl	d3c4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>
    /* Enable Flexcan Module */
    pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    ac9e:	9b03      	ldr	r3, [sp, #12]
    aca0:	681b      	ldr	r3, [r3, #0]
    aca2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    aca6:	9b03      	ldr	r3, [sp, #12]
    aca8:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    acaa:	f002 fbb7 	bl	d41c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>

    return (FlexCAN_ExitFreezeMode(pBase));
    acae:	9803      	ldr	r0, [sp, #12]
    acb0:	f000 ff94 	bl	bbdc <FlexCAN_ExitFreezeMode>
    acb4:	4603      	mov	r3, r0
}
    acb6:	4618      	mov	r0, r3
    acb8:	b005      	add	sp, #20
    acba:	f85d fb04 	ldr.w	pc, [sp], #4
    acbe:	bf00      	nop
    acc0:	0000ff50 	.word	0x0000ff50

0000acc4 <FlexCAN_Ip_SetStopMode_Privileged>:
 * Description   : Set the FlexCAN instance in STOP mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStopMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStopMode_Privileged(uint8 instance)
{
    acc4:	b500      	push	{lr}
    acc6:	b085      	sub	sp, #20
    acc8:	4603      	mov	r3, r0
    acca:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    acce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    acd2:	4a0a      	ldr	r2, [pc, #40]	; (acfc <FlexCAN_Ip_SetStopMode_Privileged+0x38>)
    acd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acd8:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status;
    status = FlexCAN_EnterFreezeMode(pBase);
    acda:	9802      	ldr	r0, [sp, #8]
    acdc:	f000 fef6 	bl	bacc <FlexCAN_EnterFreezeMode>
    ace0:	9003      	str	r0, [sp, #12]
    if (FLEXCAN_STATUS_SUCCESS == status)
    ace2:	9b03      	ldr	r3, [sp, #12]
    ace4:	2b00      	cmp	r3, #0
    ace6:	d103      	bne.n	acf0 <FlexCAN_Ip_SetStopMode_Privileged+0x2c>

        /* TODO: reset MB status */

        /* TODO: disable all interrupt */

        status = FlexCAN_Disable(pBase);
    ace8:	9802      	ldr	r0, [sp, #8]
    acea:	f000 ffb9 	bl	bc60 <FlexCAN_Disable>
    acee:	9003      	str	r0, [sp, #12]
    }
    return status;
    acf0:	9b03      	ldr	r3, [sp, #12]
}
    acf2:	4618      	mov	r0, r3
    acf4:	b005      	add	sp, #20
    acf6:	f85d fb04 	ldr.w	pc, [sp], #4
    acfa:	bf00      	nop
    acfc:	0000ff50 	.word	0x0000ff50

0000ad00 <FlexCAN_Ip_SetRxMaskType_Privileged>:
 * mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxMaskType_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMaskType_Privileged(uint8 instance, Flexcan_Ip_RxMaskType type)
{
    ad00:	b500      	push	{lr}
    ad02:	b087      	sub	sp, #28
    ad04:	4603      	mov	r3, r0
    ad06:	9100      	str	r1, [sp, #0]
    ad08:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ad0c:	2300      	movs	r3, #0
    ad0e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    ad10:	2300      	movs	r3, #0
    ad12:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    ad14:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ad18:	4a1e      	ldr	r2, [pc, #120]	; (ad94 <FlexCAN_Ip_SetRxMaskType_Privileged+0x94>)
    ad1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad1e:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    ad20:	9803      	ldr	r0, [sp, #12]
    ad22:	f7fd fefd 	bl	8b20 <FlexCAN_IsEnabled>
    ad26:	4603      	mov	r3, r0
    ad28:	2b00      	cmp	r3, #0
    ad2a:	bf14      	ite	ne
    ad2c:	2301      	movne	r3, #1
    ad2e:	2300      	moveq	r3, #0
    ad30:	b2db      	uxtb	r3, r3
    ad32:	f083 0301 	eor.w	r3, r3, #1
    ad36:	b2db      	uxtb	r3, r3
    ad38:	f88d 300b 	strb.w	r3, [sp, #11]
    ad3c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad40:	f003 0301 	and.w	r3, r3, #1
    ad44:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    ad48:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad4c:	2b00      	cmp	r3, #0
    ad4e:	d003      	beq.n	ad58 <FlexCAN_Ip_SetRxMaskType_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    ad50:	9803      	ldr	r0, [sp, #12]
    ad52:	f000 ff07 	bl	bb64 <FlexCAN_Enable>
    ad56:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    ad58:	9b05      	ldr	r3, [sp, #20]
    ad5a:	2b00      	cmp	r3, #0
    ad5c:	d107      	bne.n	ad6e <FlexCAN_Ip_SetRxMaskType_Privileged+0x6e>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    ad5e:	f002 fb83 	bl	d468 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
        FlexCAN_SetRxMaskType(pBase, type);
    ad62:	9900      	ldr	r1, [sp, #0]
    ad64:	9803      	ldr	r0, [sp, #12]
    ad66:	f7fe f930 	bl	8fca <FlexCAN_SetRxMaskType>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    ad6a:	f002 fba9 	bl	d4c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
    }

    if (TRUE == disabled)
    ad6e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad72:	2b00      	cmp	r3, #0
    ad74:	d008      	beq.n	ad88 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
    {
        status = FlexCAN_Disable(pBase);
    ad76:	9803      	ldr	r0, [sp, #12]
    ad78:	f000 ff72 	bl	bc60 <FlexCAN_Disable>
    ad7c:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    ad7e:	9b04      	ldr	r3, [sp, #16]
    ad80:	2b00      	cmp	r3, #0
    ad82:	d001      	beq.n	ad88 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
        {
            result = status;
    ad84:	9b04      	ldr	r3, [sp, #16]
    ad86:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    ad88:	9b05      	ldr	r3, [sp, #20]
}
    ad8a:	4618      	mov	r0, r3
    ad8c:	b007      	add	sp, #28
    ad8e:	f85d fb04 	ldr.w	pc, [sp], #4
    ad92:	bf00      	nop
    ad94:	0000ff50 	.word	0x0000ff50

0000ad98 <FlexCAN_Ip_SetBitrate_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrate_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrate_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
    ad98:	b500      	push	{lr}
    ad9a:	b087      	sub	sp, #28
    ad9c:	4603      	mov	r3, r0
    ad9e:	9100      	str	r1, [sp, #0]
    ada0:	f88d 3007 	strb.w	r3, [sp, #7]
    ada4:	4613      	mov	r3, r2
    ada6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    adaa:	2300      	movs	r3, #0
    adac:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    adae:	2300      	movs	r3, #0
    adb0:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    adb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    adb6:	4a1c      	ldr	r2, [pc, #112]	; (ae28 <FlexCAN_Ip_SetBitrate_Privileged+0x90>)
    adb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adbc:	9303      	str	r3, [sp, #12]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    adbe:	9b03      	ldr	r3, [sp, #12]
    adc0:	681b      	ldr	r3, [r3, #0]
    adc2:	0fdb      	lsrs	r3, r3, #31
    adc4:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_OFF)
    (void)enhExt;
#endif
    if (TRUE == disabled)
    adc8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    adcc:	2b00      	cmp	r3, #0
    adce:	d003      	beq.n	add8 <FlexCAN_Ip_SetBitrate_Privileged+0x40>
    {
        result = FlexCAN_Enable(pBase);
    add0:	9803      	ldr	r0, [sp, #12]
    add2:	f000 fec7 	bl	bb64 <FlexCAN_Enable>
    add6:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    add8:	9b05      	ldr	r3, [sp, #20]
    adda:	2b00      	cmp	r3, #0
    addc:	d112      	bne.n	ae04 <FlexCAN_Ip_SetBitrate_Privileged+0x6c>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    adde:	f002 fd2f 	bl	d840 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
            FlexCAN_SetEnhancedNominalTimeSegments(pBase, bitrate);
        }
        else
#endif
        {
            if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    ade2:	9803      	ldr	r0, [sp, #12]
    ade4:	f7fe f830 	bl	8e48 <FlexCAN_IsExCbtEnabled>
    ade8:	4603      	mov	r3, r0
    adea:	2b00      	cmp	r3, #0
    adec:	d004      	beq.n	adf8 <FlexCAN_Ip_SetBitrate_Privileged+0x60>
            {
                FlexCAN_SetExtendedTimeSegments(pBase, bitrate);
    adee:	9900      	ldr	r1, [sp, #0]
    adf0:	9803      	ldr	r0, [sp, #12]
    adf2:	f7fd ff7f 	bl	8cf4 <FlexCAN_SetExtendedTimeSegments>
    adf6:	e003      	b.n	ae00 <FlexCAN_Ip_SetBitrate_Privileged+0x68>
            }
            else
            {
                FlexCAN_SetTimeSegments(pBase, bitrate);
    adf8:	9900      	ldr	r1, [sp, #0]
    adfa:	9803      	ldr	r0, [sp, #12]
    adfc:	f7fd ff4e 	bl	8c9c <FlexCAN_SetTimeSegments>
            }
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    ae00:	f002 fd4a 	bl	d898 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
    }

    if (TRUE == disabled)
    ae04:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ae08:	2b00      	cmp	r3, #0
    ae0a:	d008      	beq.n	ae1e <FlexCAN_Ip_SetBitrate_Privileged+0x86>
    {
        status = FlexCAN_Disable(pBase);
    ae0c:	9803      	ldr	r0, [sp, #12]
    ae0e:	f000 ff27 	bl	bc60 <FlexCAN_Disable>
    ae12:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    ae14:	9b04      	ldr	r3, [sp, #16]
    ae16:	2b00      	cmp	r3, #0
    ae18:	d001      	beq.n	ae1e <FlexCAN_Ip_SetBitrate_Privileged+0x86>
        {
            result = status;
    ae1a:	9b04      	ldr	r3, [sp, #16]
    ae1c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    ae1e:	9b05      	ldr	r3, [sp, #20]
}
    ae20:	4618      	mov	r0, r3
    ae22:	b007      	add	sp, #28
    ae24:	f85d fb04 	ldr.w	pc, [sp], #4
    ae28:	0000ff50 	.word	0x0000ff50

0000ae2c <FlexCAN_Ip_GetBitrate>:
 * or the arbitration phase of FD frames.
 *
 *END**************************************************************************/
 /* implements   FlexCAN_Ip_GetBitrate_Activity */
boolean FlexCAN_Ip_GetBitrate(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    ae2c:	b500      	push	{lr}
    ae2e:	b085      	sub	sp, #20
    ae30:	4603      	mov	r3, r0
    ae32:	9100      	str	r1, [sp, #0]
    ae34:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    ae38:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae3c:	4a0d      	ldr	r2, [pc, #52]	; (ae74 <FlexCAN_Ip_GetBitrate+0x48>)
    ae3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae42:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    ae44:	2300      	movs	r3, #0
    ae46:	f88d 300b 	strb.w	r3, [sp, #11]
        FlexCAN_GetEnhancedNominalTimeSegments(pBase, bitrate);
    }
    else
#endif
    {
        if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    ae4a:	9803      	ldr	r0, [sp, #12]
    ae4c:	f7fd fffc 	bl	8e48 <FlexCAN_IsExCbtEnabled>
    ae50:	4603      	mov	r3, r0
    ae52:	2b00      	cmp	r3, #0
    ae54:	d004      	beq.n	ae60 <FlexCAN_Ip_GetBitrate+0x34>
        {
            /* Get the Extended time segments*/
            FlexCAN_GetExtendedTimeSegments(pBase, bitrate);
    ae56:	9900      	ldr	r1, [sp, #0]
    ae58:	9803      	ldr	r0, [sp, #12]
    ae5a:	f7fd ff79 	bl	8d50 <FlexCAN_GetExtendedTimeSegments>
    ae5e:	e003      	b.n	ae68 <FlexCAN_Ip_GetBitrate+0x3c>
        }
        else
        {
            /* Get the time segments*/
            FlexCAN_GetTimeSegments(pBase, bitrate);
    ae60:	9900      	ldr	r1, [sp, #0]
    ae62:	9803      	ldr	r0, [sp, #12]
    ae64:	f7fd ff9c 	bl	8da0 <FlexCAN_GetTimeSegments>
        }
    }
    return enhCbt;
    ae68:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    ae6c:	4618      	mov	r0, r3
    ae6e:	b005      	add	sp, #20
    ae70:	f85d fb04 	ldr.w	pc, [sp], #4
    ae74:	0000ff50 	.word	0x0000ff50

0000ae78 <FlexCAN_Ip_ClearTDCFail>:
 * Description   : This function clear the TDC Fail flag.
 *
 *END**************************************************************************/
/* implements   FlexCAN_Ip_ClearTDCFail_Activity */
void FlexCAN_Ip_ClearTDCFail(uint8 u8Instance)
{
    ae78:	b500      	push	{lr}
    ae7a:	b085      	sub	sp, #20
    ae7c:	4603      	mov	r3, r0
    ae7e:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    ae82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae86:	4a0a      	ldr	r2, [pc, #40]	; (aeb0 <FlexCAN_Ip_ClearTDCFail+0x38>)
    ae88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae8c:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    ae8e:	f002 fb3d 	bl	d50c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
        pBase->ETDC |=  FLEXCAN_ETDC_ETDCFAIL_MASK;
    }
    else
#endif
    {
        pBase->FDCTRL |= FLEXCAN_FDCTRL_TDCFAIL_MASK;
    ae92:	9b03      	ldr	r3, [sp, #12]
    ae94:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ae98:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    ae9c:	9b03      	ldr	r3, [sp, #12]
    ae9e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    aea2:	f002 fb5f 	bl	d564 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
}
    aea6:	bf00      	nop
    aea8:	b005      	add	sp, #20
    aeaa:	f85d fb04 	ldr.w	pc, [sp], #4
    aeae:	bf00      	nop
    aeb0:	0000ff50 	.word	0x0000ff50

0000aeb4 <FlexCAN_Ip_GetTDCFail>:
 *
 *END**************************************************************************/

/* implements    FlexCAN_Ip_GetTDCFail_Activity */
boolean FlexCAN_Ip_GetTDCFail(uint8 u8Instance)
{
    aeb4:	b084      	sub	sp, #16
    aeb6:	4603      	mov	r3, r0
    aeb8:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean value=FALSE;
    aebc:	2300      	movs	r3, #0
    aebe:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    aec2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aec6:	4a0a      	ldr	r2, [pc, #40]	; (aef0 <FlexCAN_Ip_GetTDCFail+0x3c>)
    aec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aecc:	9302      	str	r3, [sp, #8]
        value = ((pBase->ETDC & FLEXCAN_ETDC_ETDCFAIL_MASK) == FLEXCAN_ETDC_ETDCFAIL_MASK) ? TRUE : FALSE;
    }
    else
#endif
    {
        value = ((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCFAIL_MASK) == FLEXCAN_FDCTRL_TDCFAIL_MASK) ? TRUE : FALSE;
    aece:	9b02      	ldr	r3, [sp, #8]
    aed0:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    aed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    aed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    aedc:	bf0c      	ite	eq
    aede:	2301      	moveq	r3, #1
    aee0:	2300      	movne	r3, #0
    aee2:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    aee6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    aeea:	4618      	mov	r0, r3
    aeec:	b004      	add	sp, #16
    aeee:	4770      	bx	lr
    aef0:	0000ff50 	.word	0x0000ff50

0000aef4 <FlexCAN_Ip_GetTDCValue>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_GetTDCValue_Activity */
uint8 FlexCAN_Ip_GetTDCValue(uint8 u8Instance)
{
    aef4:	b084      	sub	sp, #16
    aef6:	4603      	mov	r3, r0
    aef8:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 value = 0;
    aefc:	2300      	movs	r3, #0
    aefe:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    af02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    af06:	4a08      	ldr	r2, [pc, #32]	; (af28 <FlexCAN_Ip_GetTDCValue+0x34>)
    af08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af0c:	9302      	str	r3, [sp, #8]
        value = (uint8)((pBase->ETDC& FLEXCAN_ETDC_ETDCVAL_MASK) >> FLEXCAN_ETDC_ETDCVAL_SHIFT);
    }
    else
#endif
    {
        value = (uint8)((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCVAL_MASK) >> FLEXCAN_FDCTRL_TDCVAL_SHIFT);
    af0e:	9b02      	ldr	r3, [sp, #8]
    af10:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    af14:	b2db      	uxtb	r3, r3
    af16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    af1a:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    af1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    af22:	4618      	mov	r0, r3
    af24:	b004      	add	sp, #16
    af26:	4770      	bx	lr
    af28:	0000ff50 	.word	0x0000ff50

0000af2c <FlexCAN_Ip_SetBitrateCbt_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrateCbt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrateCbt_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
    af2c:	b500      	push	{lr}
    af2e:	b087      	sub	sp, #28
    af30:	4603      	mov	r3, r0
    af32:	9100      	str	r1, [sp, #0]
    af34:	f88d 3007 	strb.w	r3, [sp, #7]
    af38:	4613      	mov	r3, r2
    af3a:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    af3e:	2300      	movs	r3, #0
    af40:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    af42:	2300      	movs	r3, #0
    af44:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    af46:	f89d 3007 	ldrb.w	r3, [sp, #7]
    af4a:	4a1e      	ldr	r2, [pc, #120]	; (afc4 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x98>)
    af4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af50:	9303      	str	r3, [sp, #12]
    boolean fd_enable = FlexCAN_IsFDEnabled(pBase);
    af52:	9803      	ldr	r0, [sp, #12]
    af54:	f7fd ffaf 	bl	8eb6 <FlexCAN_IsFDEnabled>
    af58:	4603      	mov	r3, r0
    af5a:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    af5e:	9b03      	ldr	r3, [sp, #12]
    af60:	681b      	ldr	r3, [r3, #0]
    af62:	0fdb      	lsrs	r3, r3, #31
    af64:	f88d 300a 	strb.w	r3, [sp, #10]

    if (TRUE == disabled)
    af68:	f89d 300a 	ldrb.w	r3, [sp, #10]
    af6c:	2b00      	cmp	r3, #0
    af6e:	d003      	beq.n	af78 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x4c>
    {
        result = FlexCAN_Enable(pBase);
    af70:	9803      	ldr	r0, [sp, #12]
    af72:	f000 fdf7 	bl	bb64 <FlexCAN_Enable>
    af76:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    af78:	9b05      	ldr	r3, [sp, #20]
    af7a:	2b00      	cmp	r3, #0
    af7c:	d10f      	bne.n	af9e <FlexCAN_Ip_SetBitrateCbt_Privileged+0x72>
    {
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_ON)
        boolean enhCbt = FlexCAN_IsEnhCbtEnabled(pBase);
#endif
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    af7e:	f002 fcb1 	bl	d8e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
        FlexCAN_SetFDEnabled(pBase, fd_enable, bitRateSwitch);
    af82:	f89d 2006 	ldrb.w	r2, [sp, #6]
    af86:	f89d 300b 	ldrb.w	r3, [sp, #11]
    af8a:	4619      	mov	r1, r3
    af8c:	9803      	ldr	r0, [sp, #12]
    af8e:	f7fd fdd1 	bl	8b34 <FlexCAN_SetFDEnabled>
        }
        else
#endif
        {
            /* Set time segments*/
            FlexCAN_SetFDTimeSegments(pBase, bitrate);
    af92:	9900      	ldr	r1, [sp, #0]
    af94:	9803      	ldr	r0, [sp, #12]
    af96:	f7fd fe4c 	bl	8c32 <FlexCAN_SetFDTimeSegments>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    af9a:	f002 fccf 	bl	d93c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
    }

    if (TRUE == disabled)
    af9e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    afa2:	2b00      	cmp	r3, #0
    afa4:	d008      	beq.n	afb8 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    afa6:	9803      	ldr	r0, [sp, #12]
    afa8:	f000 fe5a 	bl	bc60 <FlexCAN_Disable>
    afac:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    afae:	9b04      	ldr	r3, [sp, #16]
    afb0:	2b00      	cmp	r3, #0
    afb2:	d001      	beq.n	afb8 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
        {
            result = status;
    afb4:	9b04      	ldr	r3, [sp, #16]
    afb6:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    afb8:	9b05      	ldr	r3, [sp, #20]
}
    afba:	4618      	mov	r0, r3
    afbc:	b007      	add	sp, #28
    afbe:	f85d fb04 	ldr.w	pc, [sp], #4
    afc2:	bf00      	nop
    afc4:	0000ff50 	.word	0x0000ff50

0000afc8 <FlexCAN_Ip_GetBitrateFD>:
 * of FD frames.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBitrateFD_Activity */
boolean FlexCAN_Ip_GetBitrateFD(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    afc8:	b500      	push	{lr}
    afca:	b085      	sub	sp, #20
    afcc:	4603      	mov	r3, r0
    afce:	9100      	str	r1, [sp, #0]
    afd0:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    afd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    afd8:	4a08      	ldr	r2, [pc, #32]	; (affc <FlexCAN_Ip_GetBitrateFD+0x34>)
    afda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afde:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    afe0:	2300      	movs	r3, #0
    afe2:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    else
#endif
    {
        /* Get the time segments*/
        FlexCAN_GetFDTimeSegments(pBase, bitrate);
    afe6:	9900      	ldr	r1, [sp, #0]
    afe8:	9803      	ldr	r0, [sp, #12]
    afea:	f7fd ff00 	bl	8dee <FlexCAN_GetFDTimeSegments>
    }
    return enhCbt;
    afee:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    aff2:	4618      	mov	r0, r3
    aff4:	b005      	add	sp, #20
    aff6:	f85d fb04 	ldr.w	pc, [sp], #4
    affa:	bf00      	nop
    affc:	0000ff50 	.word	0x0000ff50

0000b000 <FlexCAN_Ip_SetTDCOffset_Privileged>:
 * the Transceiver Delay Compensation Offset.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTDCOffset_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTDCOffset_Privileged(uint8 instance, boolean enable, uint8 offset)
{
    b000:	b500      	push	{lr}
    b002:	b087      	sub	sp, #28
    b004:	4603      	mov	r3, r0
    b006:	f88d 3007 	strb.w	r3, [sp, #7]
    b00a:	460b      	mov	r3, r1
    b00c:	f88d 3006 	strb.w	r3, [sp, #6]
    b010:	4613      	mov	r3, r2
    b012:	f88d 3005 	strb.w	r3, [sp, #5]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b016:	2300      	movs	r3, #0
    b018:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b01a:	2300      	movs	r3, #0
    b01c:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b01e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b022:	4a20      	ldr	r2, [pc, #128]	; (b0a4 <FlexCAN_Ip_SetTDCOffset_Privileged+0xa4>)
    b024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b028:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b02a:	9803      	ldr	r0, [sp, #12]
    b02c:	f7fd fd78 	bl	8b20 <FlexCAN_IsEnabled>
    b030:	4603      	mov	r3, r0
    b032:	2b00      	cmp	r3, #0
    b034:	bf14      	ite	ne
    b036:	2301      	movne	r3, #1
    b038:	2300      	moveq	r3, #0
    b03a:	b2db      	uxtb	r3, r3
    b03c:	f083 0301 	eor.w	r3, r3, #1
    b040:	b2db      	uxtb	r3, r3
    b042:	f88d 300b 	strb.w	r3, [sp, #11]
    b046:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b04a:	f003 0301 	and.w	r3, r3, #1
    b04e:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b052:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b056:	2b00      	cmp	r3, #0
    b058:	d003      	beq.n	b062 <FlexCAN_Ip_SetTDCOffset_Privileged+0x62>
    {
        result = FlexCAN_Enable(pBase);
    b05a:	9803      	ldr	r0, [sp, #12]
    b05c:	f000 fd82 	bl	bb64 <FlexCAN_Enable>
    b060:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b062:	9b05      	ldr	r3, [sp, #20]
    b064:	2b00      	cmp	r3, #0
    b066:	d10b      	bne.n	b080 <FlexCAN_Ip_SetTDCOffset_Privileged+0x80>
    {
        /* Check if enhaced CBT is Enabled */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    b068:	f002 fc8e 	bl	d988 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        }
        else
#endif
        {
            /* Enable/Disable TDC and set the TDC Offset */
            FlexCAN_SetTDCOffset(pBase, enable, offset);
    b06c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b070:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b074:	4619      	mov	r1, r3
    b076:	9803      	ldr	r0, [sp, #12]
    b078:	f7fd fd2b 	bl	8ad2 <FlexCAN_SetTDCOffset>
        }
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    b07c:	f002 fcb0 	bl	d9e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        /* Check if enhaced CBT is Enabled */
    }

    if (TRUE == disabled)
    b080:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b084:	2b00      	cmp	r3, #0
    b086:	d008      	beq.n	b09a <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
    {
        status = FlexCAN_Disable(pBase);
    b088:	9803      	ldr	r0, [sp, #12]
    b08a:	f000 fde9 	bl	bc60 <FlexCAN_Disable>
    b08e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b090:	9b04      	ldr	r3, [sp, #16]
    b092:	2b00      	cmp	r3, #0
    b094:	d001      	beq.n	b09a <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
        {
            result = status;
    b096:	9b04      	ldr	r3, [sp, #16]
    b098:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    b09a:	9b05      	ldr	r3, [sp, #20]
}
    b09c:	4618      	mov	r0, r3
    b09e:	b007      	add	sp, #28
    b0a0:	f85d fb04 	ldr.w	pc, [sp], #4
    b0a4:	0000ff50 	.word	0x0000ff50

0000b0a8 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>:
 * be delayed from the first bit of CRC field on CAN bus.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTxArbitrationStartDelay_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged(uint8 instance,  uint8 value)
{
    b0a8:	b500      	push	{lr}
    b0aa:	b087      	sub	sp, #28
    b0ac:	4603      	mov	r3, r0
    b0ae:	460a      	mov	r2, r1
    b0b0:	f88d 3007 	strb.w	r3, [sp, #7]
    b0b4:	4613      	mov	r3, r2
    b0b6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b0ba:	2300      	movs	r3, #0
    b0bc:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b0be:	2300      	movs	r3, #0
    b0c0:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b0c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b0c6:	4a1f      	ldr	r2, [pc, #124]	; (b144 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x9c>)
    b0c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0cc:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b0ce:	9803      	ldr	r0, [sp, #12]
    b0d0:	f7fd fd26 	bl	8b20 <FlexCAN_IsEnabled>
    b0d4:	4603      	mov	r3, r0
    b0d6:	2b00      	cmp	r3, #0
    b0d8:	bf14      	ite	ne
    b0da:	2301      	movne	r3, #1
    b0dc:	2300      	moveq	r3, #0
    b0de:	b2db      	uxtb	r3, r3
    b0e0:	f083 0301 	eor.w	r3, r3, #1
    b0e4:	b2db      	uxtb	r3, r3
    b0e6:	f88d 300b 	strb.w	r3, [sp, #11]
    b0ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b0ee:	f003 0301 	and.w	r3, r3, #1
    b0f2:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b0f6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b0fa:	2b00      	cmp	r3, #0
    b0fc:	d003      	beq.n	b106 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    b0fe:	9803      	ldr	r0, [sp, #12]
    b100:	f000 fd30 	bl	bb64 <FlexCAN_Enable>
    b104:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b106:	9b05      	ldr	r3, [sp, #20]
    b108:	2b00      	cmp	r3, #0
    b10a:	d109      	bne.n	b120 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    b10c:	f002 fc8e 	bl	da2c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
        FlexCAN_SetTxArbitrationStartDelay(pBase, value);
    b110:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b114:	4619      	mov	r1, r3
    b116:	9803      	ldr	r0, [sp, #12]
    b118:	f7fd ff43 	bl	8fa2 <FlexCAN_SetTxArbitrationStartDelay>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    b11c:	f002 fcb2 	bl	da84 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
    }

    if (TRUE == disabled)
    b120:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b124:	2b00      	cmp	r3, #0
    b126:	d008      	beq.n	b13a <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    b128:	9803      	ldr	r0, [sp, #12]
    b12a:	f000 fd99 	bl	bc60 <FlexCAN_Disable>
    b12e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b130:	9b04      	ldr	r3, [sp, #16]
    b132:	2b00      	cmp	r3, #0
    b134:	d001      	beq.n	b13a <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
        {
            result = status;
    b136:	9b04      	ldr	r3, [sp, #16]
    b138:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b13a:	9b05      	ldr	r3, [sp, #20]
}
    b13c:	4618      	mov	r0, r3
    b13e:	b007      	add	sp, #28
    b140:	f85d fb04 	ldr.w	pc, [sp], #4
    b144:	0000ff50 	.word	0x0000ff50

0000b148 <FlexCAN_Ip_GetBuffStatusFlag>:
 * In case of a complete operation this flag is set.
 * In case msgBuff is 255 will return Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBuffStatusFlag_Activity */
boolean FlexCAN_Ip_GetBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    b148:	b500      	push	{lr}
    b14a:	b085      	sub	sp, #20
    b14c:	4603      	mov	r3, r0
    b14e:	460a      	mov	r2, r1
    b150:	f88d 3007 	strb.w	r3, [sp, #7]
    b154:	4613      	mov	r3, r2
    b156:	f88d 3006 	strb.w	r3, [sp, #6]
    boolean returnResult;
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b15a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b15e:	4a0b      	ldr	r2, [pc, #44]	; (b18c <FlexCAN_Ip_GetBuffStatusFlag+0x44>)
    b160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b164:	9303      	str	r3, [sp, #12]
        returnResult = ((1U == FlexCAN_GetEnhancedRxFIFOStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW)) ? TRUE : FALSE);
    }
    else
#endif
    {
        returnResult = ((1U == FlexCAN_GetBuffStatusFlag(pBase, msgBuffIdx)) ? TRUE : FALSE);
    b166:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b16a:	4619      	mov	r1, r3
    b16c:	9803      	ldr	r0, [sp, #12]
    b16e:	f7fd fd44 	bl	8bfa <FlexCAN_GetBuffStatusFlag>
    b172:	4603      	mov	r3, r0
    b174:	2b01      	cmp	r3, #1
    b176:	bf0c      	ite	eq
    b178:	2301      	moveq	r3, #1
    b17a:	2300      	movne	r3, #0
    b17c:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    return returnResult;
    b180:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    b184:	4618      	mov	r0, r3
    b186:	b005      	add	sp, #20
    b188:	f85d fb04 	ldr.w	pc, [sp], #4
    b18c:	0000ff50 	.word	0x0000ff50

0000b190 <FlexCAN_Ip_ClearBuffStatusFlag>:
 * Description   : Clear FlexCAN Message Buffer Status Flag.
 * In case msgBuff is 255 will clear Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearBuffStatusFlag_Activity */
void FlexCAN_Ip_ClearBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    b190:	b500      	push	{lr}
    b192:	b085      	sub	sp, #20
    b194:	4603      	mov	r3, r0
    b196:	460a      	mov	r2, r1
    b198:	f88d 3007 	strb.w	r3, [sp, #7]
    b19c:	4613      	mov	r3, r2
    b19e:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b1a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b1a6:	4a07      	ldr	r2, [pc, #28]	; (b1c4 <FlexCAN_Ip_ClearBuffStatusFlag+0x34>)
    b1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1ac:	9303      	str	r3, [sp, #12]
        FlexCAN_ClearEnhancedRxFifoIntStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
    }
    else
#endif
    {
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, msgBuffIdx);
    b1ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b1b2:	4619      	mov	r1, r3
    b1b4:	9803      	ldr	r0, [sp, #12]
    b1b6:	f7fd fd0d 	bl	8bd4 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }
}
    b1ba:	bf00      	nop
    b1bc:	b005      	add	sp, #20
    b1be:	f85d fb04 	ldr.w	pc, [sp], #4
    b1c2:	bf00      	nop
    b1c4:	0000ff50 	.word	0x0000ff50

0000b1c8 <FlexCAN_Ip_EnableInterrupts_Privileged>:
 * Description   : Enable all mb interrupts configured.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnableInterrupts_Privileged(uint8 u8Instance)
{
    b1c8:	b500      	push	{lr}
    b1ca:	b087      	sub	sp, #28
    b1cc:	4603      	mov	r3, r0
    b1ce:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b1d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b1d6:	4a11      	ldr	r2, [pc, #68]	; (b21c <FlexCAN_Ip_EnableInterrupts_Privileged+0x54>)
    b1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1dc:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    b1de:	2301      	movs	r3, #1
    b1e0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    b1e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b1e6:	4a0e      	ldr	r2, [pc, #56]	; (b220 <FlexCAN_Ip_EnableInterrupts_Privileged+0x58>)
    b1e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1ec:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    b1ee:	9804      	ldr	r0, [sp, #16]
    b1f0:	f7fd fc96 	bl	8b20 <FlexCAN_IsEnabled>
    b1f4:	4603      	mov	r3, r0
    b1f6:	2b00      	cmp	r3, #0
    b1f8:	d00b      	beq.n	b212 <FlexCAN_Ip_EnableInterrupts_Privileged+0x4a>
    {
        FlexCAN_EnableInterrupts(pBase, u8Instance);
    b1fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b1fe:	4619      	mov	r1, r3
    b200:	9804      	ldr	r0, [sp, #16]
    b202:	f000 ffe1 	bl	c1c8 <FlexCAN_EnableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, TRUE);
            }
        }
    #endif
        state->isIntActive = TRUE;
    b206:	9b03      	ldr	r3, [sp, #12]
    b208:	2201      	movs	r2, #1
    b20a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    b20e:	2300      	movs	r3, #0
    b210:	9305      	str	r3, [sp, #20]
    }

    return result;
    b212:	9b05      	ldr	r3, [sp, #20]
}
    b214:	4618      	mov	r0, r3
    b216:	b007      	add	sp, #28
    b218:	f85d fb04 	ldr.w	pc, [sp], #4
    b21c:	0000ff50 	.word	0x0000ff50
    b220:	1fff8fb8 	.word	0x1fff8fb8

0000b224 <FlexCAN_Ip_DisableInterrupts_Privileged>:
 * Description   : Enable all interrupts configured.
 *
 *END**************************************************************************/
 /* implements FlexCAN_Ip_DisableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_DisableInterrupts_Privileged(uint8 u8Instance)
{
    b224:	b500      	push	{lr}
    b226:	b087      	sub	sp, #28
    b228:	4603      	mov	r3, r0
    b22a:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b22e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b232:	4a10      	ldr	r2, [pc, #64]	; (b274 <FlexCAN_Ip_DisableInterrupts_Privileged+0x50>)
    b234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b238:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    b23a:	2301      	movs	r3, #1
    b23c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    b23e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b242:	4a0d      	ldr	r2, [pc, #52]	; (b278 <FlexCAN_Ip_DisableInterrupts_Privileged+0x54>)
    b244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b248:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    b24a:	9804      	ldr	r0, [sp, #16]
    b24c:	f7fd fc68 	bl	8b20 <FlexCAN_IsEnabled>
    b250:	4603      	mov	r3, r0
    b252:	2b00      	cmp	r3, #0
    b254:	d008      	beq.n	b268 <FlexCAN_Ip_DisableInterrupts_Privileged+0x44>
    {
        FlexCAN_DisableInterrupts(pBase);
    b256:	9804      	ldr	r0, [sp, #16]
    b258:	f000 ffae 	bl	c1b8 <FlexCAN_DisableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, FALSE);
            }
        }
#endif
        state->isIntActive = FALSE;
    b25c:	9b03      	ldr	r3, [sp, #12]
    b25e:	2200      	movs	r2, #0
    b260:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    b264:	2300      	movs	r3, #0
    b266:	9305      	str	r3, [sp, #20]
    }

    return result;
    b268:	9b05      	ldr	r3, [sp, #20]
}
    b26a:	4618      	mov	r0, r3
    b26c:	b007      	add	sp, #28
    b26e:	f85d fb04 	ldr.w	pc, [sp], #4
    b272:	bf00      	nop
    b274:	0000ff50 	.word	0x0000ff50
    b278:	1fff8fb8 	.word	0x1fff8fb8

0000b27c <FlexCAN_Ip_SetErrorInt_Privileged>:
 * Description   : Enable\Disable Error or BusOff Interrupt
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetErrorInt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetErrorInt_Privileged(uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
    b27c:	b500      	push	{lr}
    b27e:	b087      	sub	sp, #28
    b280:	4603      	mov	r3, r0
    b282:	9100      	str	r1, [sp, #0]
    b284:	f88d 3007 	strb.w	r3, [sp, #7]
    b288:	4613      	mov	r3, r2
    b28a:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b28e:	2300      	movs	r3, #0
    b290:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b292:	2300      	movs	r3, #0
    b294:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b296:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b29a:	4a3a      	ldr	r2, [pc, #232]	; (b384 <FlexCAN_Ip_SetErrorInt_Privileged+0x108>)
    b29c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2a0:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b2a2:	9803      	ldr	r0, [sp, #12]
    b2a4:	f7fd fc3c 	bl	8b20 <FlexCAN_IsEnabled>
    b2a8:	4603      	mov	r3, r0
    b2aa:	2b00      	cmp	r3, #0
    b2ac:	bf14      	ite	ne
    b2ae:	2301      	movne	r3, #1
    b2b0:	2300      	moveq	r3, #0
    b2b2:	b2db      	uxtb	r3, r3
    b2b4:	f083 0301 	eor.w	r3, r3, #1
    b2b8:	b2db      	uxtb	r3, r3
    b2ba:	f88d 300b 	strb.w	r3, [sp, #11]
    b2be:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b2c2:	f003 0301 	and.w	r3, r3, #1
    b2c6:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b2ca:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b2ce:	2b00      	cmp	r3, #0
    b2d0:	d003      	beq.n	b2da <FlexCAN_Ip_SetErrorInt_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    b2d2:	9803      	ldr	r0, [sp, #12]
    b2d4:	f000 fc46 	bl	bb64 <FlexCAN_Enable>
    b2d8:	9005      	str	r0, [sp, #20]
    }

    if (FLEXCAN_STATUS_SUCCESS == result)
    b2da:	9b05      	ldr	r3, [sp, #20]
    b2dc:	2b00      	cmp	r3, #0
    b2de:	d13c      	bne.n	b35a <FlexCAN_Ip_SetErrorInt_Privileged+0xde>
    b2e0:	9b00      	ldr	r3, [sp, #0]
    b2e2:	2b04      	cmp	r3, #4
    b2e4:	d83b      	bhi.n	b35e <FlexCAN_Ip_SetErrorInt_Privileged+0xe2>
    b2e6:	a201      	add	r2, pc, #4	; (adr r2, b2ec <FlexCAN_Ip_SetErrorInt_Privileged+0x70>)
    b2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b2ec:	0000b337 	.word	0x0000b337
    b2f0:	0000b349 	.word	0x0000b349
    b2f4:	0000b313 	.word	0x0000b313
    b2f8:	0000b325 	.word	0x0000b325
    b2fc:	0000b301 	.word	0x0000b301
    {
        switch (type)
        {
            case FLEXCAN_IP_INT_BUSOFF:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_BUSOFF, enable);
    b300:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b304:	461a      	mov	r2, r3
    b306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    b30a:	9803      	ldr	r0, [sp, #12]
    b30c:	f000 fce8 	bl	bce0 <FlexCAN_SetErrIntCmd>
                break;
    b310:	e026      	b.n	b360 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR, enable);
    b312:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b316:	461a      	mov	r2, r3
    b318:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    b31c:	9803      	ldr	r0, [sp, #12]
    b31e:	f000 fcdf 	bl	bce0 <FlexCAN_SetErrIntCmd>
                break;
    b322:	e01d      	b.n	b360 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR_FAST :
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR_FAST, enable);
    b324:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b328:	461a      	mov	r2, r3
    b32a:	f244 0101 	movw	r1, #16385	; 0x4001
    b32e:	9803      	ldr	r0, [sp, #12]
    b330:	f000 fcd6 	bl	bce0 <FlexCAN_SetErrIntCmd>
                break;
    b334:	e014      	b.n	b360 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_RX_WARNING, enable);
    b336:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b33a:	461a      	mov	r2, r3
    b33c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    b340:	9803      	ldr	r0, [sp, #12]
    b342:	f000 fccd 	bl	bce0 <FlexCAN_SetErrIntCmd>
                }
                break;
    b346:	e00b      	b.n	b360 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_TX_WARNING, enable);
    b348:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b34c:	461a      	mov	r2, r3
    b34e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    b352:	9803      	ldr	r0, [sp, #12]
    b354:	f000 fcc4 	bl	bce0 <FlexCAN_SetErrIntCmd>
                }
                break;
    b358:	e002      	b.n	b360 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    /* Should not get here */
                #endif
                break;
            }
        }
    }
    b35a:	bf00      	nop
    b35c:	e000      	b.n	b360 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                break;
    b35e:	bf00      	nop

    if (TRUE == disabled)
    b360:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b364:	2b00      	cmp	r3, #0
    b366:	d008      	beq.n	b37a <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
    {
        status = FlexCAN_Disable(pBase);
    b368:	9803      	ldr	r0, [sp, #12]
    b36a:	f000 fc79 	bl	bc60 <FlexCAN_Disable>
    b36e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b370:	9b04      	ldr	r3, [sp, #16]
    b372:	2b00      	cmp	r3, #0
    b374:	d001      	beq.n	b37a <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
        {
            result = status;
    b376:	9b04      	ldr	r3, [sp, #16]
    b378:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b37a:	9b05      	ldr	r3, [sp, #20]
}
    b37c:	4618      	mov	r0, r3
    b37e:	b007      	add	sp, #28
    b380:	f85d fb04 	ldr.w	pc, [sp], #4
    b384:	0000ff50 	.word	0x0000ff50

0000b388 <FlexCAN_Ip_AbortTransfer>:
 * receiver.
 *
 *END**************************************************************************/
/* implements    FlexCAN_Ip_AbortTransfer_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_AbortTransfer(uint8 u8Instance, uint8 mb_idx)
{
    b388:	b500      	push	{lr}
    b38a:	b087      	sub	sp, #28
    b38c:	4603      	mov	r3, r0
    b38e:	460a      	mov	r2, r1
    b390:	f88d 3007 	strb.w	r3, [sp, #7]
    b394:	4613      	mov	r3, r2
    b396:	f88d 3006 	strb.w	r3, [sp, #6]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
        DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
    #endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b39a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b39e:	4a27      	ldr	r2, [pc, #156]	; (b43c <FlexCAN_Ip_AbortTransfer+0xb4>)
    b3a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3a4:	9304      	str	r3, [sp, #16]
#if ((FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON))
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
#else
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    b3a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b3aa:	4a25      	ldr	r2, [pc, #148]	; (b440 <FlexCAN_Ip_AbortTransfer+0xb8>)
    b3ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3b0:	9303      	str	r3, [sp, #12]
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON) */
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b3b2:	2300      	movs	r3, #0
    b3b4:	9305      	str	r3, [sp, #20]

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    b3b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b3ba:	2b1f      	cmp	r3, #31
    b3bc:	d838      	bhi.n	b430 <FlexCAN_Ip_AbortTransfer+0xa8>
    {

    if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    b3be:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b3c2:	9a03      	ldr	r2, [sp, #12]
    b3c4:	011b      	lsls	r3, r3, #4
    b3c6:	4413      	add	r3, r2
    b3c8:	3304      	adds	r3, #4
    b3ca:	681b      	ldr	r3, [r3, #0]
    b3cc:	2b00      	cmp	r3, #0
    b3ce:	d102      	bne.n	b3d6 <FlexCAN_Ip_AbortTransfer+0x4e>
    {
        result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    b3d0:	2305      	movs	r3, #5
    b3d2:	9305      	str	r3, [sp, #20]
    b3d4:	e02c      	b.n	b430 <FlexCAN_Ip_AbortTransfer+0xa8>
    }
    else
    {
        FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, mb_idx, state->isIntActive);
    b3d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b3da:	9b03      	ldr	r3, [sp, #12]
    b3dc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    b3e0:	f89d 1007 	ldrb.w	r1, [sp, #7]
    b3e4:	9804      	ldr	r0, [sp, #16]
    b3e6:	f000 feb3 	bl	c150 <FLEXCAN_ClearMsgBuffIntCmd>
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    b3ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b3ee:	9a03      	ldr	r2, [sp, #12]
    b3f0:	011b      	lsls	r3, r3, #4
    b3f2:	4413      	add	r3, r2
    b3f4:	3304      	adds	r3, #4
    b3f6:	681b      	ldr	r3, [r3, #0]
    b3f8:	2b02      	cmp	r3, #2
    b3fa:	d108      	bne.n	b40e <FlexCAN_Ip_AbortTransfer+0x86>
        {
            result = FlexCAN_AbortTxTransfer(u8Instance, mb_idx);
    b3fc:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b400:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b404:	4611      	mov	r1, r2
    b406:	4618      	mov	r0, r3
    b408:	f7fe fabc 	bl	9984 <FlexCAN_AbortTxTransfer>
    b40c:	9005      	str	r0, [sp, #20]
        }

        if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    b40e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b412:	9a03      	ldr	r2, [sp, #12]
    b414:	011b      	lsls	r3, r3, #4
    b416:	4413      	add	r3, r2
    b418:	3304      	adds	r3, #4
    b41a:	681b      	ldr	r3, [r3, #0]
    b41c:	2b01      	cmp	r3, #1
    b41e:	d107      	bne.n	b430 <FlexCAN_Ip_AbortTransfer+0xa8>
        {
            FlexCAN_AbortRxTransfer(u8Instance, mb_idx);
    b420:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b424:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b428:	4611      	mov	r1, r2
    b42a:	4618      	mov	r0, r3
    b42c:	f7fe fb34 	bl	9a98 <FlexCAN_AbortRxTransfer>
        }
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
#endif /* if FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return result;
    b430:	9b05      	ldr	r3, [sp, #20]
}
    b432:	4618      	mov	r0, r3
    b434:	b007      	add	sp, #28
    b436:	f85d fb04 	ldr.w	pc, [sp], #4
    b43a:	bf00      	nop
    b43c:	0000ff50 	.word	0x0000ff50
    b440:	1fff8fb8 	.word	0x1fff8fb8

0000b444 <FlexCAN_Ip_SetRxMb14Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb14Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb14Mask_Privileged(uint8 instance, uint32 mask)
{
    b444:	b500      	push	{lr}
    b446:	b087      	sub	sp, #28
    b448:	4603      	mov	r3, r0
    b44a:	9100      	str	r1, [sp, #0]
    b44c:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b450:	2300      	movs	r3, #0
    b452:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b454:	2300      	movs	r3, #0
    b456:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b458:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b45c:	4a1b      	ldr	r2, [pc, #108]	; (b4cc <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x88>)
    b45e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b462:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b464:	9803      	ldr	r0, [sp, #12]
    b466:	f7fd fb5b 	bl	8b20 <FlexCAN_IsEnabled>
    b46a:	4603      	mov	r3, r0
    b46c:	2b00      	cmp	r3, #0
    b46e:	bf14      	ite	ne
    b470:	2301      	movne	r3, #1
    b472:	2300      	moveq	r3, #0
    b474:	b2db      	uxtb	r3, r3
    b476:	f083 0301 	eor.w	r3, r3, #1
    b47a:	b2db      	uxtb	r3, r3
    b47c:	f88d 300b 	strb.w	r3, [sp, #11]
    b480:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b484:	f003 0301 	and.w	r3, r3, #1
    b488:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b48c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b490:	2b00      	cmp	r3, #0
    b492:	d003      	beq.n	b49c <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    b494:	9803      	ldr	r0, [sp, #12]
    b496:	f000 fb65 	bl	bb64 <FlexCAN_Enable>
    b49a:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    b49c:	9b05      	ldr	r3, [sp, #20]
    b49e:	2b00      	cmp	r3, #0
    b4a0:	d102      	bne.n	b4a8 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x64>
    {
        pBase->RX14MASK = mask;
    b4a2:	9b03      	ldr	r3, [sp, #12]
    b4a4:	9a00      	ldr	r2, [sp, #0]
    b4a6:	615a      	str	r2, [r3, #20]
    }
    if (TRUE == disabled)
    b4a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b4ac:	2b00      	cmp	r3, #0
    b4ae:	d008      	beq.n	b4c2 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    b4b0:	9803      	ldr	r0, [sp, #12]
    b4b2:	f000 fbd5 	bl	bc60 <FlexCAN_Disable>
    b4b6:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b4b8:	9b04      	ldr	r3, [sp, #16]
    b4ba:	2b00      	cmp	r3, #0
    b4bc:	d001      	beq.n	b4c2 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
        {
            result = status;
    b4be:	9b04      	ldr	r3, [sp, #16]
    b4c0:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b4c2:	9b05      	ldr	r3, [sp, #20]
}
    b4c4:	4618      	mov	r0, r3
    b4c6:	b007      	add	sp, #28
    b4c8:	f85d fb04 	ldr.w	pc, [sp], #4
    b4cc:	0000ff50 	.word	0x0000ff50

0000b4d0 <FlexCAN_Ip_SetRxMb15Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb15Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb15Mask_Privileged(uint8 instance, uint32 mask)
{
    b4d0:	b500      	push	{lr}
    b4d2:	b087      	sub	sp, #28
    b4d4:	4603      	mov	r3, r0
    b4d6:	9100      	str	r1, [sp, #0]
    b4d8:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b4dc:	2300      	movs	r3, #0
    b4de:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b4e0:	2300      	movs	r3, #0
    b4e2:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b4e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b4e8:	4a1b      	ldr	r2, [pc, #108]	; (b558 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x88>)
    b4ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4ee:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b4f0:	9803      	ldr	r0, [sp, #12]
    b4f2:	f7fd fb15 	bl	8b20 <FlexCAN_IsEnabled>
    b4f6:	4603      	mov	r3, r0
    b4f8:	2b00      	cmp	r3, #0
    b4fa:	bf14      	ite	ne
    b4fc:	2301      	movne	r3, #1
    b4fe:	2300      	moveq	r3, #0
    b500:	b2db      	uxtb	r3, r3
    b502:	f083 0301 	eor.w	r3, r3, #1
    b506:	b2db      	uxtb	r3, r3
    b508:	f88d 300b 	strb.w	r3, [sp, #11]
    b50c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b510:	f003 0301 	and.w	r3, r3, #1
    b514:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b518:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b51c:	2b00      	cmp	r3, #0
    b51e:	d003      	beq.n	b528 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    b520:	9803      	ldr	r0, [sp, #12]
    b522:	f000 fb1f 	bl	bb64 <FlexCAN_Enable>
    b526:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    b528:	9b05      	ldr	r3, [sp, #20]
    b52a:	2b00      	cmp	r3, #0
    b52c:	d102      	bne.n	b534 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x64>
    {
        pBase->RX15MASK = mask;
    b52e:	9b03      	ldr	r3, [sp, #12]
    b530:	9a00      	ldr	r2, [sp, #0]
    b532:	619a      	str	r2, [r3, #24]
    }

    if (TRUE == disabled)
    b534:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b538:	2b00      	cmp	r3, #0
    b53a:	d008      	beq.n	b54e <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    b53c:	9803      	ldr	r0, [sp, #12]
    b53e:	f000 fb8f 	bl	bc60 <FlexCAN_Disable>
    b542:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b544:	9b04      	ldr	r3, [sp, #16]
    b546:	2b00      	cmp	r3, #0
    b548:	d001      	beq.n	b54e <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
        {
            result = status;
    b54a:	9b04      	ldr	r3, [sp, #16]
    b54c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b54e:	9b05      	ldr	r3, [sp, #20]
}
    b550:	4618      	mov	r0, r3
    b552:	b007      	add	sp, #28
    b554:	f85d fb04 	ldr.w	pc, [sp], #4
    b558:	0000ff50 	.word	0x0000ff50

0000b55c <FlexCAN_Ip_SetListenOnlyMode_Privileged>:
 * This function will enable or disable Listen Only mode.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_SetListenOnlyMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetListenOnlyMode_Privileged(uint8 instance, const boolean enable)
{
    b55c:	b500      	push	{lr}
    b55e:	b087      	sub	sp, #28
    b560:	4603      	mov	r3, r0
    b562:	460a      	mov	r2, r1
    b564:	f88d 3007 	strb.w	r3, [sp, #7]
    b568:	4613      	mov	r3, r2
    b56a:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b56e:	2300      	movs	r3, #0
    b570:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b572:	2300      	movs	r3, #0
    b574:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b576:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b57a:	4a1f      	ldr	r2, [pc, #124]	; (b5f8 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x9c>)
    b57c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b580:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b582:	9803      	ldr	r0, [sp, #12]
    b584:	f7fd facc 	bl	8b20 <FlexCAN_IsEnabled>
    b588:	4603      	mov	r3, r0
    b58a:	2b00      	cmp	r3, #0
    b58c:	bf14      	ite	ne
    b58e:	2301      	movne	r3, #1
    b590:	2300      	moveq	r3, #0
    b592:	b2db      	uxtb	r3, r3
    b594:	f083 0301 	eor.w	r3, r3, #1
    b598:	b2db      	uxtb	r3, r3
    b59a:	f88d 300b 	strb.w	r3, [sp, #11]
    b59e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b5a2:	f003 0301 	and.w	r3, r3, #1
    b5a6:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b5aa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b5ae:	2b00      	cmp	r3, #0
    b5b0:	d003      	beq.n	b5ba <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    b5b2:	9803      	ldr	r0, [sp, #12]
    b5b4:	f000 fad6 	bl	bb64 <FlexCAN_Enable>
    b5b8:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b5ba:	9b05      	ldr	r3, [sp, #20]
    b5bc:	2b00      	cmp	r3, #0
    b5be:	d109      	bne.n	b5d4 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    b5c0:	f001 fff6 	bl	d5b0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
        FlexCAN_SetListenOnlyMode(pBase, enable);
    b5c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b5c8:	4619      	mov	r1, r3
    b5ca:	9803      	ldr	r0, [sp, #12]
    b5cc:	f7fd fae5 	bl	8b9a <FlexCAN_SetListenOnlyMode>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    b5d0:	f002 f81a 	bl	d608 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
    }

    if (TRUE == disabled)
    b5d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b5d8:	2b00      	cmp	r3, #0
    b5da:	d008      	beq.n	b5ee <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    b5dc:	9803      	ldr	r0, [sp, #12]
    b5de:	f000 fb3f 	bl	bc60 <FlexCAN_Disable>
    b5e2:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b5e4:	9b04      	ldr	r3, [sp, #16]
    b5e6:	2b00      	cmp	r3, #0
    b5e8:	d001      	beq.n	b5ee <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
        {
            result = status;
    b5ea:	9b04      	ldr	r3, [sp, #16]
    b5ec:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b5ee:	9b05      	ldr	r3, [sp, #20]
}
    b5f0:	4618      	mov	r0, r3
    b5f2:	b007      	add	sp, #28
    b5f4:	f85d fb04 	ldr.w	pc, [sp], #4
    b5f8:	0000ff50 	.word	0x0000ff50

0000b5fc <FlexCAN_Ip_GetListenOnlyMode>:
 * Description   : Check if Listen Only mode is ENABLE.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_GetListenOnlyMode_Activity */
boolean FlexCAN_Ip_GetListenOnlyMode(uint8 instance)
{
    b5fc:	b500      	push	{lr}
    b5fe:	b085      	sub	sp, #20
    b600:	4603      	mov	r3, r0
    b602:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    b606:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b60a:	4a06      	ldr	r2, [pc, #24]	; (b624 <FlexCAN_Ip_GetListenOnlyMode+0x28>)
    b60c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b610:	9303      	str	r3, [sp, #12]
    return FlexCAN_IsListenOnlyModeEnabled(base);
    b612:	9803      	ldr	r0, [sp, #12]
    b614:	f7fd fc5d 	bl	8ed2 <FlexCAN_IsListenOnlyModeEnabled>
    b618:	4603      	mov	r3, r0
}
    b61a:	4618      	mov	r0, r3
    b61c:	b005      	add	sp, #20
    b61e:	f85d fb04 	ldr.w	pc, [sp], #4
    b622:	bf00      	nop
    b624:	0000ff50 	.word	0x0000ff50

0000b628 <FlexCAN_Ip_ManualBusOffRecovery>:
 * Description   : Recover manually from bus-off if possible.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_ManualBusOffRecovery_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ManualBusOffRecovery(uint8 Instance)
{
    b628:	b500      	push	{lr}
    b62a:	b089      	sub	sp, #36	; 0x24
    b62c:	4603      	mov	r3, r0
    b62e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * Base = Flexcan_Ip_apxBase[Instance];
    b632:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b636:	4a27      	ldr	r2, [pc, #156]	; (b6d4 <FlexCAN_Ip_ManualBusOffRecovery+0xac>)
    b638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b63c:	9305      	str	r3, [sp, #20]
    uint32 timeStart = 0U;
    b63e:	2300      	movs	r3, #0
    b640:	9303      	str	r3, [sp, #12]
    uint32 timeElapsed = 0U;
    b642:	2300      	movs	r3, #0
    b644:	9307      	str	r3, [sp, #28]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b646:	2100      	movs	r1, #0
    b648:	4823      	ldr	r0, [pc, #140]	; (b6d8 <FlexCAN_Ip_ManualBusOffRecovery+0xb0>)
    b64a:	f7f6 fbdd 	bl	1e08 <OsIf_MicrosToTicks>
    b64e:	9004      	str	r0, [sp, #16]
    Flexcan_Ip_StatusType RetVal = FLEXCAN_STATUS_ERROR;
    b650:	2301      	movs	r3, #1
    b652:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Recover from bus-off when Automatic recovering from Bus Off state disabled. */
    if ((Base->CTRL1 & FLEXCAN_CTRL1_BOFFREC_MASK) != 0U)
    b654:	9b05      	ldr	r3, [sp, #20]
    b656:	685b      	ldr	r3, [r3, #4]
    b658:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b65c:	2b00      	cmp	r3, #0
    b65e:	d033      	beq.n	b6c8 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
    {
        RetVal = FLEXCAN_STATUS_SUCCESS;
    b660:	2300      	movs	r3, #0
    b662:	9306      	str	r3, [sp, #24]
        /* return success if the controller is not in bus-off */
        if ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    b664:	9b05      	ldr	r3, [sp, #20]
    b666:	6a1b      	ldr	r3, [r3, #32]
    b668:	f003 0320 	and.w	r3, r3, #32
    b66c:	2b00      	cmp	r3, #0
    b66e:	d02b      	beq.n	b6c8 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
        {
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    b670:	f002 fad2 	bl	dc18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* negate to recover from bus-off */
            Base->CTRL1 &= ~FLEXCAN_CTRL1_BOFFREC_MASK;
    b674:	9b05      	ldr	r3, [sp, #20]
    b676:	685b      	ldr	r3, [r3, #4]
    b678:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    b67c:	9b05      	ldr	r3, [sp, #20]
    b67e:	605a      	str	r2, [r3, #4]
            /* re-assert to disable bus-off auto reocvery */
            Base->CTRL1 |= FLEXCAN_CTRL1_BOFFREC_MASK;
    b680:	9b05      	ldr	r3, [sp, #20]
    b682:	685b      	ldr	r3, [r3, #4]
    b684:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    b688:	9b05      	ldr	r3, [sp, #20]
    b68a:	605a      	str	r2, [r3, #4]
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    b68c:	f002 faf0 	bl	dc70 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* Wait till exit bus-off */
            timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b690:	2000      	movs	r0, #0
    b692:	f7f6 fb6d 	bl	1d70 <OsIf_GetCounter>
    b696:	4603      	mov	r3, r0
    b698:	9303      	str	r3, [sp, #12]

            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    b69a:	e00f      	b.n	b6bc <FlexCAN_Ip_ManualBusOffRecovery+0x94>
            {
                timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b69c:	ab03      	add	r3, sp, #12
    b69e:	2100      	movs	r1, #0
    b6a0:	4618      	mov	r0, r3
    b6a2:	f7f6 fb7e 	bl	1da2 <OsIf_GetElapsed>
    b6a6:	4602      	mov	r2, r0
    b6a8:	9b07      	ldr	r3, [sp, #28]
    b6aa:	4413      	add	r3, r2
    b6ac:	9307      	str	r3, [sp, #28]
                if (timeElapsed >= uS2Ticks)
    b6ae:	9a07      	ldr	r2, [sp, #28]
    b6b0:	9b04      	ldr	r3, [sp, #16]
    b6b2:	429a      	cmp	r2, r3
    b6b4:	d302      	bcc.n	b6bc <FlexCAN_Ip_ManualBusOffRecovery+0x94>
                {
                    RetVal = FLEXCAN_STATUS_TIMEOUT;
    b6b6:	2303      	movs	r3, #3
    b6b8:	9306      	str	r3, [sp, #24]
                    break;
    b6ba:	e005      	b.n	b6c8 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    b6bc:	9b05      	ldr	r3, [sp, #20]
    b6be:	6a1b      	ldr	r3, [r3, #32]
    b6c0:	f003 0320 	and.w	r3, r3, #32
    b6c4:	2b00      	cmp	r3, #0
    b6c6:	d1e9      	bne.n	b69c <FlexCAN_Ip_ManualBusOffRecovery+0x74>
                }
            }
        }
    }

    return RetVal;
    b6c8:	9b06      	ldr	r3, [sp, #24]
}
    b6ca:	4618      	mov	r0, r3
    b6cc:	b009      	add	sp, #36	; 0x24
    b6ce:	f85d fb04 	ldr.w	pc, [sp], #4
    b6d2:	bf00      	nop
    b6d4:	0000ff50 	.word	0x0000ff50
    b6d8:	000f4240 	.word	0x000f4240

0000b6dc <FlexCAN_SetSelfReception>:
{
    b6dc:	b082      	sub	sp, #8
    b6de:	9001      	str	r0, [sp, #4]
    b6e0:	460b      	mov	r3, r1
    b6e2:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    b6e6:	9b01      	ldr	r3, [sp, #4]
    b6e8:	681b      	ldr	r3, [r3, #0]
    b6ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    b6ee:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b6f2:	2a00      	cmp	r2, #0
    b6f4:	d001      	beq.n	b6fa <FlexCAN_SetSelfReception+0x1e>
    b6f6:	2200      	movs	r2, #0
    b6f8:	e001      	b.n	b6fe <FlexCAN_SetSelfReception+0x22>
    b6fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    b6fe:	431a      	orrs	r2, r3
    b700:	9b01      	ldr	r3, [sp, #4]
    b702:	601a      	str	r2, [r3, #0]
}
    b704:	bf00      	nop
    b706:	b002      	add	sp, #8
    b708:	4770      	bx	lr

0000b70a <FlexCAN_IsFDEnabled>:
{
    b70a:	b082      	sub	sp, #8
    b70c:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    b70e:	9b01      	ldr	r3, [sp, #4]
    b710:	681b      	ldr	r3, [r3, #0]
    b712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    b716:	2b00      	cmp	r3, #0
    b718:	bf14      	ite	ne
    b71a:	2301      	movne	r3, #1
    b71c:	2300      	moveq	r3, #0
    b71e:	b2db      	uxtb	r3, r3
}
    b720:	4618      	mov	r0, r3
    b722:	b002      	add	sp, #8
    b724:	4770      	bx	lr

0000b726 <FlexCAN_SetIsoCan>:
{
    b726:	b082      	sub	sp, #8
    b728:	9001      	str	r0, [sp, #4]
    b72a:	460b      	mov	r3, r1
    b72c:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ISOCANFDEN_MASK) | FLEXCAN_CTRL2_ISOCANFDEN(enable ? 1UL : 0UL);
    b730:	9b01      	ldr	r3, [sp, #4]
    b732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b734:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b738:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b73c:	2a00      	cmp	r2, #0
    b73e:	d002      	beq.n	b746 <FlexCAN_SetIsoCan+0x20>
    b740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    b744:	e000      	b.n	b748 <FlexCAN_SetIsoCan+0x22>
    b746:	2200      	movs	r2, #0
    b748:	431a      	orrs	r2, r3
    b74a:	9b01      	ldr	r3, [sp, #4]
    b74c:	635a      	str	r2, [r3, #52]	; 0x34
}
    b74e:	bf00      	nop
    b750:	b002      	add	sp, #8
    b752:	4770      	bx	lr

0000b754 <FlexCAN_SetEntireFrameArbitrationFieldComparison>:
{
    b754:	b082      	sub	sp, #8
    b756:	9001      	str	r0, [sp, #4]
    b758:	460b      	mov	r3, r1
    b75a:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EACEN_MASK) | FLEXCAN_CTRL2_EACEN(enable ? 1UL : 0UL);
    b75e:	9b01      	ldr	r3, [sp, #4]
    b760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    b766:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b76a:	2a00      	cmp	r2, #0
    b76c:	d002      	beq.n	b774 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x20>
    b76e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b772:	e000      	b.n	b776 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x22>
    b774:	2200      	movs	r2, #0
    b776:	431a      	orrs	r2, r3
    b778:	9b01      	ldr	r3, [sp, #4]
    b77a:	635a      	str	r2, [r3, #52]	; 0x34
}
    b77c:	bf00      	nop
    b77e:	b002      	add	sp, #8
    b780:	4770      	bx	lr

0000b782 <FlexCAN_SetProtocolException>:
{
    b782:	b082      	sub	sp, #8
    b784:	9001      	str	r0, [sp, #4]
    b786:	460b      	mov	r3, r1
    b788:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_PREXCEN_MASK) | FLEXCAN_CTRL2_PREXCEN(enable ? 1UL : 0UL);
    b78c:	9b01      	ldr	r3, [sp, #4]
    b78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    b794:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b798:	2a00      	cmp	r2, #0
    b79a:	d002      	beq.n	b7a2 <FlexCAN_SetProtocolException+0x20>
    b79c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    b7a0:	e000      	b.n	b7a4 <FlexCAN_SetProtocolException+0x22>
    b7a2:	2200      	movs	r2, #0
    b7a4:	431a      	orrs	r2, r3
    b7a6:	9b01      	ldr	r3, [sp, #4]
    b7a8:	635a      	str	r2, [r3, #52]	; 0x34
}
    b7aa:	bf00      	nop
    b7ac:	b002      	add	sp, #8
    b7ae:	4770      	bx	lr

0000b7b0 <FlexCAN_SetRemoteReqStore>:
{
    b7b0:	b082      	sub	sp, #8
    b7b2:	9001      	str	r0, [sp, #4]
    b7b4:	460b      	mov	r3, r1
    b7b6:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RRS_MASK) | FLEXCAN_CTRL2_RRS(enable ? 1UL : 0UL);
    b7ba:	9b01      	ldr	r3, [sp, #4]
    b7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b7be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    b7c2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b7c6:	2a00      	cmp	r2, #0
    b7c8:	d002      	beq.n	b7d0 <FlexCAN_SetRemoteReqStore+0x20>
    b7ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    b7ce:	e000      	b.n	b7d2 <FlexCAN_SetRemoteReqStore+0x22>
    b7d0:	2200      	movs	r2, #0
    b7d2:	431a      	orrs	r2, r3
    b7d4:	9b01      	ldr	r3, [sp, #4]
    b7d6:	635a      	str	r2, [r3, #52]	; 0x34
}
    b7d8:	bf00      	nop
    b7da:	b002      	add	sp, #8
    b7dc:	4770      	bx	lr

0000b7de <FlexCAN_SetBusOffAutorecovery>:
{
    b7de:	b082      	sub	sp, #8
    b7e0:	9001      	str	r0, [sp, #4]
    b7e2:	460b      	mov	r3, r1
    b7e4:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_BOFFREC_MASK) | FLEXCAN_CTRL1_BOFFREC(enable ? 0UL : 1UL);
    b7e8:	9b01      	ldr	r3, [sp, #4]
    b7ea:	685b      	ldr	r3, [r3, #4]
    b7ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    b7f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b7f4:	2a00      	cmp	r2, #0
    b7f6:	d001      	beq.n	b7fc <FlexCAN_SetBusOffAutorecovery+0x1e>
    b7f8:	2200      	movs	r2, #0
    b7fa:	e000      	b.n	b7fe <FlexCAN_SetBusOffAutorecovery+0x20>
    b7fc:	2240      	movs	r2, #64	; 0x40
    b7fe:	431a      	orrs	r2, r3
    b800:	9b01      	ldr	r3, [sp, #4]
    b802:	605a      	str	r2, [r3, #4]
}
    b804:	bf00      	nop
    b806:	b002      	add	sp, #8
    b808:	4770      	bx	lr

0000b80a <FlexCAN_SetEdgeFilter>:
{
    b80a:	b082      	sub	sp, #8
    b80c:	9001      	str	r0, [sp, #4]
    b80e:	460b      	mov	r3, r1
    b810:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EDFLTDIS_MASK) | FLEXCAN_CTRL2_EDFLTDIS(enable ? 0UL : 1UL);
    b814:	9b01      	ldr	r3, [sp, #4]
    b816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b818:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    b81c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b820:	2a00      	cmp	r2, #0
    b822:	d001      	beq.n	b828 <FlexCAN_SetEdgeFilter+0x1e>
    b824:	2200      	movs	r2, #0
    b826:	e001      	b.n	b82c <FlexCAN_SetEdgeFilter+0x22>
    b828:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b82c:	431a      	orrs	r2, r3
    b82e:	9b01      	ldr	r3, [sp, #4]
    b830:	635a      	str	r2, [r3, #52]	; 0x34
}
    b832:	bf00      	nop
    b834:	b002      	add	sp, #8
    b836:	4770      	bx	lr

0000b838 <FlexCAN_CanBitSampling>:
{
    b838:	b082      	sub	sp, #8
    b83a:	9001      	str	r0, [sp, #4]
    b83c:	460b      	mov	r3, r1
    b83e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_SMP_MASK) | FLEXCAN_CTRL1_SMP(enable ? 1UL : 0UL);
    b842:	9b01      	ldr	r3, [sp, #4]
    b844:	685b      	ldr	r3, [r3, #4]
    b846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b84a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b84e:	2a00      	cmp	r2, #0
    b850:	d001      	beq.n	b856 <FlexCAN_CanBitSampling+0x1e>
    b852:	2280      	movs	r2, #128	; 0x80
    b854:	e000      	b.n	b858 <FlexCAN_CanBitSampling+0x20>
    b856:	2200      	movs	r2, #0
    b858:	431a      	orrs	r2, r3
    b85a:	9b01      	ldr	r3, [sp, #4]
    b85c:	605a      	str	r2, [r3, #4]
}
    b85e:	bf00      	nop
    b860:	b002      	add	sp, #8
    b862:	4770      	bx	lr

0000b864 <FlexCAN_ComputeDLCValue>:
 * Function Name: FLEXCAN_ComputeDLCValue
 * Description  : Computes the DLC field value, given a payload size (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_ComputeDLCValue(uint8 payloadSize)
{
    b864:	b084      	sub	sp, #16
    b866:	4603      	mov	r3, r0
    b868:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 ret = 0xFFU;                   /* 0,  1,  2,  3,  4,  5,  6,  7,  8, */
    b86c:	23ff      	movs	r3, #255	; 0xff
    b86e:	9303      	str	r3, [sp, #12]
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES
                                          };

    if (payloadSize <= 64U)
    b870:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b874:	2b40      	cmp	r3, #64	; 0x40
    b876:	d804      	bhi.n	b882 <FlexCAN_ComputeDLCValue+0x1e>
    {
        ret = payload_code[payloadSize];
    b878:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b87c:	4a03      	ldr	r2, [pc, #12]	; (b88c <FlexCAN_ComputeDLCValue+0x28>)
    b87e:	5cd3      	ldrb	r3, [r2, r3]
    b880:	9303      	str	r3, [sp, #12]
    else
    {
        /* The argument is not a valid payload size will return 0xFF*/
    }

    return (uint8)ret;
    b882:	9b03      	ldr	r3, [sp, #12]
    b884:	b2db      	uxtb	r3, r3
}
    b886:	4618      	mov	r0, r3
    b888:	b004      	add	sp, #16
    b88a:	4770      	bx	lr
    b88c:	0000ff5c 	.word	0x0000ff5c

0000b890 <FlexCAN_ClearRAM>:
 * Function Name : FLEXCAN_ClearRAM
 * Description   : Clears FlexCAN memory positions that require initialization.
 *
 *END**************************************************************************/
static void FlexCAN_ClearRAM(FLEXCAN_Type * base)
{
    b890:	b500      	push	{lr}
    b892:	b087      	sub	sp, #28
    b894:	9001      	str	r0, [sp, #4]
    uint32 databyte;
    uint32 RAM_size   = FlexCAN_GetMaxMbNum(base) * 4U;
    b896:	9801      	ldr	r0, [sp, #4]
    b898:	f000 f8f6 	bl	ba88 <FlexCAN_GetMaxMbNum>
    b89c:	4603      	mov	r3, r0
    b89e:	009b      	lsls	r3, r3, #2
    b8a0:	9304      	str	r3, [sp, #16]
    uint32 RXIMR_size = FlexCAN_GetMaxMbNum(base);
    b8a2:	9801      	ldr	r0, [sp, #4]
    b8a4:	f000 f8f0 	bl	ba88 <FlexCAN_GetMaxMbNum>
    b8a8:	9003      	str	r0, [sp, #12]
    /* Address of base + ram offset to point to MB start address */
    volatile uint32 * RAM = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    b8aa:	9b01      	ldr	r3, [sp, #4]
    b8ac:	3380      	adds	r3, #128	; 0x80
    b8ae:	9302      	str	r3, [sp, #8]
    /* Clear MB region */
    for (databyte = 0U; databyte < RAM_size; databyte++)
    b8b0:	2300      	movs	r3, #0
    b8b2:	9305      	str	r3, [sp, #20]
    b8b4:	e008      	b.n	b8c8 <FlexCAN_ClearRAM+0x38>
    {
        RAM[databyte] = 0x0U;
    b8b6:	9b05      	ldr	r3, [sp, #20]
    b8b8:	009b      	lsls	r3, r3, #2
    b8ba:	9a02      	ldr	r2, [sp, #8]
    b8bc:	4413      	add	r3, r2
    b8be:	2200      	movs	r2, #0
    b8c0:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RAM_size; databyte++)
    b8c2:	9b05      	ldr	r3, [sp, #20]
    b8c4:	3301      	adds	r3, #1
    b8c6:	9305      	str	r3, [sp, #20]
    b8c8:	9a05      	ldr	r2, [sp, #20]
    b8ca:	9b04      	ldr	r3, [sp, #16]
    b8cc:	429a      	cmp	r2, r3
    b8ce:	d3f2      	bcc.n	b8b6 <FlexCAN_ClearRAM+0x26>
    }
    RAM = (volatile uint32 *)base->RXIMR;
    b8d0:	9b01      	ldr	r3, [sp, #4]
    b8d2:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    b8d6:	9302      	str	r3, [sp, #8]
    /* Clear RXIMR region */
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    b8d8:	2300      	movs	r3, #0
    b8da:	9305      	str	r3, [sp, #20]
    b8dc:	e008      	b.n	b8f0 <FlexCAN_ClearRAM+0x60>
    {
        RAM[databyte] = 0x0U;
    b8de:	9b05      	ldr	r3, [sp, #20]
    b8e0:	009b      	lsls	r3, r3, #2
    b8e2:	9a02      	ldr	r2, [sp, #8]
    b8e4:	4413      	add	r3, r2
    b8e6:	2200      	movs	r2, #0
    b8e8:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    b8ea:	9b05      	ldr	r3, [sp, #20]
    b8ec:	3301      	adds	r3, #1
    b8ee:	9305      	str	r3, [sp, #20]
    b8f0:	9a05      	ldr	r2, [sp, #20]
    b8f2:	9b03      	ldr	r3, [sp, #12]
    b8f4:	429a      	cmp	r2, r3
    b8f6:	d3f2      	bcc.n	b8de <FlexCAN_ClearRAM+0x4e>
    }
#endif
    /* Clear WRMFRZ bit in CTRL2 Register to restrict write access to memory */
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_WRMFRZ_MASK) | FLEXCAN_CTRL2_WRMFRZ(0U);
#endif /* if FLEXCAN_IP_FEATURE_HAS_MEM_ERR_DET */
}
    b8f8:	bf00      	nop
    b8fa:	bf00      	nop
    b8fc:	b007      	add	sp, #28
    b8fe:	f85d fb04 	ldr.w	pc, [sp], #4

0000b902 <FlexCAN_ComputePayloadSize>:
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#else
static uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
{
    b902:	b084      	sub	sp, #16
    b904:	4603      	mov	r3, r0
    b906:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ret = 8U;
    b90a:	2308      	movs	r3, #8
    b90c:	f88d 300f 	strb.w	r3, [sp, #15]

    if (dlcValue <= 8U)
    b910:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b914:	2b08      	cmp	r3, #8
    b916:	d804      	bhi.n	b922 <FlexCAN_ComputePayloadSize+0x20>
    {
        ret = dlcValue;
    b918:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b91c:	f88d 300f 	strb.w	r3, [sp, #15]
    b920:	e033      	b.n	b98a <FlexCAN_ComputePayloadSize+0x88>
    }
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    else
    {
        switch (dlcValue)
    b922:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b926:	3b09      	subs	r3, #9
    b928:	2b06      	cmp	r3, #6
    b92a:	d82d      	bhi.n	b988 <FlexCAN_ComputePayloadSize+0x86>
    b92c:	a201      	add	r2, pc, #4	; (adr r2, b934 <FlexCAN_ComputePayloadSize+0x32>)
    b92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b932:	bf00      	nop
    b934:	0000b951 	.word	0x0000b951
    b938:	0000b959 	.word	0x0000b959
    b93c:	0000b961 	.word	0x0000b961
    b940:	0000b969 	.word	0x0000b969
    b944:	0000b971 	.word	0x0000b971
    b948:	0000b979 	.word	0x0000b979
    b94c:	0000b981 	.word	0x0000b981
        {
            case FLEXCAN_IP_DLC_VALUE_12_BYTES:
                ret = 12U;
    b950:	230c      	movs	r3, #12
    b952:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b956:	e018      	b.n	b98a <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_16_BYTES:
                ret = 16U;
    b958:	2310      	movs	r3, #16
    b95a:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b95e:	e014      	b.n	b98a <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_20_BYTES:
                ret = 20U;
    b960:	2314      	movs	r3, #20
    b962:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b966:	e010      	b.n	b98a <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_24_BYTES:
                ret = 24U;
    b968:	2318      	movs	r3, #24
    b96a:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b96e:	e00c      	b.n	b98a <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_32_BYTES:
                ret = 32U;
    b970:	2320      	movs	r3, #32
    b972:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b976:	e008      	b.n	b98a <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_48_BYTES:
                ret = 48U;
    b978:	2330      	movs	r3, #48	; 0x30
    b97a:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b97e:	e004      	b.n	b98a <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_64_BYTES:
                ret = 64U;
    b980:	2340      	movs	r3, #64	; 0x40
    b982:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b986:	e000      	b.n	b98a <FlexCAN_ComputePayloadSize+0x88>
            default:
                /* The argument is not a valid DLC size */
                break;
    b988:	bf00      	nop
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    return ret;
    b98a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    b98e:	4618      	mov	r0, r3
    b990:	b004      	add	sp, #16
    b992:	4770      	bx	lr

0000b994 <FlexCAN_GetMsgBuffRegion>:
 * Function Name : FLEXCAN_GetMsgBuffRegion
 * Description   : Returns the start of a MB area, based on its index.
 *
 *END**************************************************************************/
volatile uint32 * FlexCAN_GetMsgBuffRegion(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    b994:	b500      	push	{lr}
    b996:	b08b      	sub	sp, #44	; 0x2c
    b998:	9001      	str	r0, [sp, #4]
    b99a:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    b99c:	2308      	movs	r3, #8
    b99e:	f88d 3020 	strb.w	r3, [sp, #32]
    uint8 mb_size = 0U;
    b9a2:	2300      	movs	r3, #0
    b9a4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ramBlockSize = 512U;
    b9a8:	f44f 7300 	mov.w	r3, #512	; 0x200
    b9ac:	9307      	str	r3, [sp, #28]
    uint16 ramBlockOffset = 0;
    b9ae:	2300      	movs	r3, #0
    b9b0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    uint8 msgBuffIdxBackup = (uint8)msgBuffIdx;
    b9b4:	9b00      	ldr	r3, [sp, #0]
    b9b6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint8 i=0U;
    b9ba:	2300      	movs	r3, #0
    b9bc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    uint8 maxMbNum=0U;
    b9c0:	2300      	movs	r3, #0
    b9c2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    uint32 mb_index=0U;
    b9c6:	2300      	movs	r3, #0
    b9c8:	9306      	str	r3, [sp, #24]
    uint8 payload_size=0U;
    b9ca:	2300      	movs	r3, #0
    b9cc:	f88d 3017 	strb.w	r3, [sp, #23]
    volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    b9d0:	9b01      	ldr	r3, [sp, #4]
    b9d2:	3380      	adds	r3, #128	; 0x80
    b9d4:	9304      	str	r3, [sp, #16]
    volatile uint32 * pAddressRet = NULL_PTR;
    b9d6:	2300      	movs	r3, #0
    b9d8:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY == STD_ON)
    volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    b9da:	2300      	movs	r3, #0
    b9dc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    b9e0:	e02d      	b.n	ba3e <FlexCAN_GetMsgBuffRegion+0xaa>
    {
        payload_size = FlexCAN_GetPayloadSize(base, i);
    b9e2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    b9e6:	4619      	mov	r1, r3
    b9e8:	9801      	ldr	r0, [sp, #4]
    b9ea:	f000 fad1 	bl	bf90 <FlexCAN_GetPayloadSize>
    b9ee:	4603      	mov	r3, r0
    b9f0:	f88d 3017 	strb.w	r3, [sp, #23]
        mb_size = (uint8)(payload_size + arbitration_field_size);
    b9f4:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b9f8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    b9fc:	4413      	add	r3, r2
    b9fe:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        maxMbNum = (uint8)(ramBlockSize / mb_size);
    ba02:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    ba06:	9a07      	ldr	r2, [sp, #28]
    ba08:	fbb2 f3f3 	udiv	r3, r2, r3
    ba0c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        if (maxMbNum > msgBuffIdxBackup)
    ba10:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    ba14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    ba18:	429a      	cmp	r2, r3
    ba1a:	d815      	bhi.n	ba48 <FlexCAN_GetMsgBuffRegion+0xb4>
        {
            break;
        }
        ramBlockOffset += 128U;
    ba1c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    ba20:	3380      	adds	r3, #128	; 0x80
    ba22:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        msgBuffIdxBackup -= maxMbNum;
    ba26:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    ba2a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    ba2e:	1ad3      	subs	r3, r2, r3
    ba30:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    ba34:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    ba38:	3301      	adds	r3, #1
    ba3a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    ba3e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    ba42:	2b00      	cmp	r3, #0
    ba44:	d0cd      	beq.n	b9e2 <FlexCAN_GetMsgBuffRegion+0x4e>
    ba46:	e000      	b.n	ba4a <FlexCAN_GetMsgBuffRegion+0xb6>
            break;
    ba48:	bf00      	nop
    }
    else
#endif
    {
        /* Multiply the MB index by the MB size (in words) */
        mb_index = (uint32)ramBlockOffset + (((uint32)msgBuffIdxBackup % (uint32)maxMbNum) * ((uint32)mb_size >> 2U));
    ba4a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    ba4e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    ba52:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    ba56:	fbb3 f0f2 	udiv	r0, r3, r2
    ba5a:	fb00 f202 	mul.w	r2, r0, r2
    ba5e:	1a9b      	subs	r3, r3, r2
    ba60:	b2db      	uxtb	r3, r3
    ba62:	461a      	mov	r2, r3
    ba64:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    ba68:	089b      	lsrs	r3, r3, #2
    ba6a:	b2db      	uxtb	r3, r3
    ba6c:	fb02 f303 	mul.w	r3, r2, r3
    ba70:	440b      	add	r3, r1
    ba72:	9306      	str	r3, [sp, #24]
        pAddressRet = &(RAM[mb_index]);
    ba74:	9b06      	ldr	r3, [sp, #24]
    ba76:	009b      	lsls	r3, r3, #2
    ba78:	9a04      	ldr	r2, [sp, #16]
    ba7a:	4413      	add	r3, r2
    ba7c:	9303      	str	r3, [sp, #12]
    }

    return pAddressRet;
    ba7e:	9b03      	ldr	r3, [sp, #12]
}
    ba80:	4618      	mov	r0, r3
    ba82:	b00b      	add	sp, #44	; 0x2c
    ba84:	f85d fb04 	ldr.w	pc, [sp], #4

0000ba88 <FlexCAN_GetMaxMbNum>:
 * Function Name : FlexCAN_GetMaxMbNum
 * Description   : Computes the maximum RAM size occupied by MBs.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMaxMbNum(const FLEXCAN_Type * base)
{
    ba88:	b084      	sub	sp, #16
    ba8a:	9001      	str	r0, [sp, #4]
    uint32 i, ret = 0u;
    ba8c:	2300      	movs	r3, #0
    ba8e:	9302      	str	r3, [sp, #8]
    static FLEXCAN_Type * const flexcanBase[] = IP_FLEXCAN_BASE_PTRS;
    static const uint32 maxMbNum[] = FLEXCAN_IP_FEATURE_MAX_MB_NUM_ARRAY;

    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    ba90:	2300      	movs	r3, #0
    ba92:	9303      	str	r3, [sp, #12]
    ba94:	e00e      	b.n	bab4 <FlexCAN_GetMaxMbNum+0x2c>
    {
        if (base == flexcanBase[i])
    ba96:	4a0b      	ldr	r2, [pc, #44]	; (bac4 <FlexCAN_GetMaxMbNum+0x3c>)
    ba98:	9b03      	ldr	r3, [sp, #12]
    ba9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba9e:	9a01      	ldr	r2, [sp, #4]
    baa0:	429a      	cmp	r2, r3
    baa2:	d104      	bne.n	baae <FlexCAN_GetMaxMbNum+0x26>
        {
            ret = maxMbNum[i];
    baa4:	4a08      	ldr	r2, [pc, #32]	; (bac8 <FlexCAN_GetMaxMbNum+0x40>)
    baa6:	9b03      	ldr	r3, [sp, #12]
    baa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    baac:	9302      	str	r3, [sp, #8]
    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    baae:	9b03      	ldr	r3, [sp, #12]
    bab0:	3301      	adds	r3, #1
    bab2:	9303      	str	r3, [sp, #12]
    bab4:	9b03      	ldr	r3, [sp, #12]
    bab6:	2b02      	cmp	r3, #2
    bab8:	d9ed      	bls.n	ba96 <FlexCAN_GetMaxMbNum+0xe>
        }
    }
    return ret;
    baba:	9b02      	ldr	r3, [sp, #8]
}
    babc:	4618      	mov	r0, r3
    babe:	b004      	add	sp, #16
    bac0:	4770      	bx	lr
    bac2:	bf00      	nop
    bac4:	0000ffa0 	.word	0x0000ffa0
    bac8:	0000ffac 	.word	0x0000ffac

0000bacc <FlexCAN_EnterFreezeMode>:
 * Function Name : FLEXCAN_EnterFreezeMode
 * Description   : Enter the freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnterFreezeMode(FLEXCAN_Type * base)
{
    bacc:	b500      	push	{lr}
    bace:	b087      	sub	sp, #28
    bad0:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    bad2:	2300      	movs	r3, #0
    bad4:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    bad6:	2300      	movs	r3, #0
    bad8:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bada:	2100      	movs	r1, #0
    badc:	4820      	ldr	r0, [pc, #128]	; (bb60 <FlexCAN_EnterFreezeMode+0x94>)
    bade:	f7f6 f993 	bl	1e08 <OsIf_MicrosToTicks>
    bae2:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    bae4:	2300      	movs	r3, #0
    bae6:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    bae8:	f001 fad2 	bl	d090 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(1U);
    baec:	9b01      	ldr	r3, [sp, #4]
    baee:	681b      	ldr	r3, [r3, #0]
    baf0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    baf4:	9b01      	ldr	r3, [sp, #4]
    baf6:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(1U);
    baf8:	9b01      	ldr	r3, [sp, #4]
    bafa:	681b      	ldr	r3, [r3, #0]
    bafc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
    bb00:	9b01      	ldr	r3, [sp, #4]
    bb02:	601a      	str	r2, [r3, #0]
    if (((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U)
    bb04:	9b01      	ldr	r3, [sp, #4]
    bb06:	681b      	ldr	r3, [r3, #0]
    bb08:	2b00      	cmp	r3, #0
    bb0a:	da05      	bge.n	bb18 <FlexCAN_EnterFreezeMode+0x4c>
    {
        base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    bb0c:	9b01      	ldr	r3, [sp, #4]
    bb0e:	681b      	ldr	r3, [r3, #0]
    bb10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    bb14:	9b01      	ldr	r3, [sp, #4]
    bb16:	601a      	str	r2, [r3, #0]
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    bb18:	f001 fae6 	bl	d0e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bb1c:	2000      	movs	r0, #0
    bb1e:	f7f6 f927 	bl	1d70 <OsIf_GetCounter>
    bb22:	4603      	mov	r3, r0
    bb24:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    bb26:	e00f      	b.n	bb48 <FlexCAN_EnterFreezeMode+0x7c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bb28:	ab02      	add	r3, sp, #8
    bb2a:	2100      	movs	r1, #0
    bb2c:	4618      	mov	r0, r3
    bb2e:	f7f6 f938 	bl	1da2 <OsIf_GetElapsed>
    bb32:	4602      	mov	r2, r0
    bb34:	9b05      	ldr	r3, [sp, #20]
    bb36:	4413      	add	r3, r2
    bb38:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    bb3a:	9a05      	ldr	r2, [sp, #20]
    bb3c:	9b03      	ldr	r3, [sp, #12]
    bb3e:	429a      	cmp	r2, r3
    bb40:	d302      	bcc.n	bb48 <FlexCAN_EnterFreezeMode+0x7c>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    bb42:	2303      	movs	r3, #3
    bb44:	9304      	str	r3, [sp, #16]
            break;
    bb46:	e005      	b.n	bb54 <FlexCAN_EnterFreezeMode+0x88>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    bb48:	9b01      	ldr	r3, [sp, #4]
    bb4a:	681b      	ldr	r3, [r3, #0]
    bb4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    bb50:	2b00      	cmp	r3, #0
    bb52:	d0e9      	beq.n	bb28 <FlexCAN_EnterFreezeMode+0x5c>
        }
    }

    return returnResult;
    bb54:	9b04      	ldr	r3, [sp, #16]
}
    bb56:	4618      	mov	r0, r3
    bb58:	b007      	add	sp, #28
    bb5a:	f85d fb04 	ldr.w	pc, [sp], #4
    bb5e:	bf00      	nop
    bb60:	000f4240 	.word	0x000f4240

0000bb64 <FlexCAN_Enable>:
 * Function Name : FlexCAN_Enable
 * Description   : Enable the clock for FlexCAN Module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Enable(FLEXCAN_Type * base)
{
    bb64:	b500      	push	{lr}
    bb66:	b087      	sub	sp, #28
    bb68:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    bb6a:	2300      	movs	r3, #0
    bb6c:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    bb6e:	2300      	movs	r3, #0
    bb70:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bb72:	2100      	movs	r1, #0
    bb74:	4818      	ldr	r0, [pc, #96]	; (bbd8 <FlexCAN_Enable+0x74>)
    bb76:	f7f6 f947 	bl	1e08 <OsIf_MicrosToTicks>
    bb7a:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    bb7c:	2300      	movs	r3, #0
    bb7e:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    bb80:	f001 fad8 	bl	d134 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>

    /* Enable Module */
    base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    bb84:	9b01      	ldr	r3, [sp, #4]
    bb86:	681b      	ldr	r3, [r3, #0]
    bb88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    bb8c:	9b01      	ldr	r3, [sp, #4]
    bb8e:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    bb90:	f001 fafc 	bl	d18c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bb94:	2000      	movs	r0, #0
    bb96:	f7f6 f8eb 	bl	1d70 <OsIf_GetCounter>
    bb9a:	4603      	mov	r3, r0
    bb9c:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    bb9e:	e00f      	b.n	bbc0 <FlexCAN_Enable+0x5c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bba0:	ab02      	add	r3, sp, #8
    bba2:	2100      	movs	r1, #0
    bba4:	4618      	mov	r0, r3
    bba6:	f7f6 f8fc 	bl	1da2 <OsIf_GetElapsed>
    bbaa:	4602      	mov	r2, r0
    bbac:	9b05      	ldr	r3, [sp, #20]
    bbae:	4413      	add	r3, r2
    bbb0:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    bbb2:	9a05      	ldr	r2, [sp, #20]
    bbb4:	9b03      	ldr	r3, [sp, #12]
    bbb6:	429a      	cmp	r2, r3
    bbb8:	d302      	bcc.n	bbc0 <FlexCAN_Enable+0x5c>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    bbba:	2303      	movs	r3, #3
    bbbc:	9304      	str	r3, [sp, #16]
            break;
    bbbe:	e005      	b.n	bbcc <FlexCAN_Enable+0x68>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    bbc0:	9b01      	ldr	r3, [sp, #4]
    bbc2:	681b      	ldr	r3, [r3, #0]
    bbc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    bbc8:	2b00      	cmp	r3, #0
    bbca:	d0e9      	beq.n	bba0 <FlexCAN_Enable+0x3c>
        }
    }
    return returnValue;
    bbcc:	9b04      	ldr	r3, [sp, #16]
}
    bbce:	4618      	mov	r0, r3
    bbd0:	b007      	add	sp, #28
    bbd2:	f85d fb04 	ldr.w	pc, [sp], #4
    bbd6:	bf00      	nop
    bbd8:	000f4240 	.word	0x000f4240

0000bbdc <FlexCAN_ExitFreezeMode>:
 * Function Name : FLEXCAN_ExitFreezeMode
 * Description   : Exit of freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_ExitFreezeMode(FLEXCAN_Type * base)
{
    bbdc:	b500      	push	{lr}
    bbde:	b087      	sub	sp, #28
    bbe0:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    bbe2:	2300      	movs	r3, #0
    bbe4:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    bbe6:	2300      	movs	r3, #0
    bbe8:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bbea:	2100      	movs	r1, #0
    bbec:	481b      	ldr	r0, [pc, #108]	; (bc5c <FlexCAN_ExitFreezeMode+0x80>)
    bbee:	f7f6 f90b 	bl	1e08 <OsIf_MicrosToTicks>
    bbf2:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    bbf4:	2300      	movs	r3, #0
    bbf6:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    bbf8:	f001 faee 	bl	d1d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(0U);
    bbfc:	9b01      	ldr	r3, [sp, #4]
    bbfe:	681b      	ldr	r3, [r3, #0]
    bc00:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
    bc04:	9b01      	ldr	r3, [sp, #4]
    bc06:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(0U);
    bc08:	9b01      	ldr	r3, [sp, #4]
    bc0a:	681b      	ldr	r3, [r3, #0]
    bc0c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    bc10:	9b01      	ldr	r3, [sp, #4]
    bc12:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    bc14:	f001 fb0c 	bl	d230 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    /* Wait till exit freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bc18:	2000      	movs	r0, #0
    bc1a:	f7f6 f8a9 	bl	1d70 <OsIf_GetCounter>
    bc1e:	4603      	mov	r3, r0
    bc20:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    bc22:	e00f      	b.n	bc44 <FlexCAN_ExitFreezeMode+0x68>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bc24:	ab02      	add	r3, sp, #8
    bc26:	2100      	movs	r1, #0
    bc28:	4618      	mov	r0, r3
    bc2a:	f7f6 f8ba 	bl	1da2 <OsIf_GetElapsed>
    bc2e:	4602      	mov	r2, r0
    bc30:	9b05      	ldr	r3, [sp, #20]
    bc32:	4413      	add	r3, r2
    bc34:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    bc36:	9a05      	ldr	r2, [sp, #20]
    bc38:	9b03      	ldr	r3, [sp, #12]
    bc3a:	429a      	cmp	r2, r3
    bc3c:	d302      	bcc.n	bc44 <FlexCAN_ExitFreezeMode+0x68>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    bc3e:	2303      	movs	r3, #3
    bc40:	9304      	str	r3, [sp, #16]
            break;
    bc42:	e005      	b.n	bc50 <FlexCAN_ExitFreezeMode+0x74>
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    bc44:	9b01      	ldr	r3, [sp, #4]
    bc46:	681b      	ldr	r3, [r3, #0]
    bc48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    bc4c:	2b00      	cmp	r3, #0
    bc4e:	d1e9      	bne.n	bc24 <FlexCAN_ExitFreezeMode+0x48>
        }
    }
    return returnValue;
    bc50:	9b04      	ldr	r3, [sp, #16]
}
    bc52:	4618      	mov	r0, r3
    bc54:	b007      	add	sp, #28
    bc56:	f85d fb04 	ldr.w	pc, [sp], #4
    bc5a:	bf00      	nop
    bc5c:	000f4240 	.word	0x000f4240

0000bc60 <FlexCAN_Disable>:
 * Description   : Disable FlexCAN module.
 * This function will disable FlexCAN module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Disable(FLEXCAN_Type * base)
{
    bc60:	b500      	push	{lr}
    bc62:	b087      	sub	sp, #28
    bc64:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    bc66:	2300      	movs	r3, #0
    bc68:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    bc6a:	2300      	movs	r3, #0
    bc6c:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bc6e:	2100      	movs	r1, #0
    bc70:	481a      	ldr	r0, [pc, #104]	; (bcdc <FlexCAN_Disable+0x7c>)
    bc72:	f7f6 f8c9 	bl	1e08 <OsIf_MicrosToTicks>
    bc76:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    bc78:	2300      	movs	r3, #0
    bc7a:	9304      	str	r3, [sp, #16]

    /* To access the memory mapped registers */
    /* Enter disable mode (hard reset). */
    if (0U == ((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT))
    bc7c:	9b01      	ldr	r3, [sp, #4]
    bc7e:	681b      	ldr	r3, [r3, #0]
    bc80:	2b00      	cmp	r3, #0
    bc82:	db25      	blt.n	bcd0 <FlexCAN_Disable+0x70>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    bc84:	f001 fafa 	bl	d27c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Clock disable (module) */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MDIS_MASK) | FLEXCAN_MCR_MDIS(1U);
    bc88:	9b01      	ldr	r3, [sp, #4]
    bc8a:	681b      	ldr	r3, [r3, #0]
    bc8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    bc90:	9b01      	ldr	r3, [sp, #4]
    bc92:	601a      	str	r2, [r3, #0]
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    bc94:	f001 fb1e 	bl	d2d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Wait until disable mode acknowledged */
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bc98:	2000      	movs	r0, #0
    bc9a:	f7f6 f869 	bl	1d70 <OsIf_GetCounter>
    bc9e:	4603      	mov	r3, r0
    bca0:	9302      	str	r3, [sp, #8]
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    bca2:	e00f      	b.n	bcc4 <FlexCAN_Disable+0x64>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bca4:	ab02      	add	r3, sp, #8
    bca6:	2100      	movs	r1, #0
    bca8:	4618      	mov	r0, r3
    bcaa:	f7f6 f87a 	bl	1da2 <OsIf_GetElapsed>
    bcae:	4602      	mov	r2, r0
    bcb0:	9b05      	ldr	r3, [sp, #20]
    bcb2:	4413      	add	r3, r2
    bcb4:	9305      	str	r3, [sp, #20]
            if (timeElapsed >= uS2Ticks)
    bcb6:	9a05      	ldr	r2, [sp, #20]
    bcb8:	9b03      	ldr	r3, [sp, #12]
    bcba:	429a      	cmp	r2, r3
    bcbc:	d302      	bcc.n	bcc4 <FlexCAN_Disable+0x64>
            {
                returnResult = FLEXCAN_STATUS_TIMEOUT;
    bcbe:	2303      	movs	r3, #3
    bcc0:	9304      	str	r3, [sp, #16]
                break;
    bcc2:	e005      	b.n	bcd0 <FlexCAN_Disable+0x70>
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    bcc4:	9b01      	ldr	r3, [sp, #4]
    bcc6:	681b      	ldr	r3, [r3, #0]
    bcc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    bccc:	2b00      	cmp	r3, #0
    bcce:	d0e9      	beq.n	bca4 <FlexCAN_Disable+0x44>
            }
        }
    }
    return returnResult;
    bcd0:	9b04      	ldr	r3, [sp, #16]
}
    bcd2:	4618      	mov	r0, r3
    bcd4:	b007      	add	sp, #28
    bcd6:	f85d fb04 	ldr.w	pc, [sp], #4
    bcda:	bf00      	nop
    bcdc:	000f4240 	.word	0x000f4240

0000bce0 <FlexCAN_SetErrIntCmd>:
 * Description   : Enable the error interrupts.
 * This function will enable Error interrupt.
 *
 *END**************************************************************************/
void FlexCAN_SetErrIntCmd(FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
    bce0:	b500      	push	{lr}
    bce2:	b087      	sub	sp, #28
    bce4:	9003      	str	r0, [sp, #12]
    bce6:	9102      	str	r1, [sp, #8]
    bce8:	4613      	mov	r3, r2
    bcea:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 temp = (uint32)errType;
    bcee:	9b02      	ldr	r3, [sp, #8]
    bcf0:	9305      	str	r3, [sp, #20]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    bcf2:	f001 fb15 	bl	d320 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
    if (enable)
    bcf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bcfa:	2b00      	cmp	r3, #0
    bcfc:	d020      	beq.n	bd40 <FlexCAN_SetErrIntCmd+0x60>
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    bcfe:	9b02      	ldr	r3, [sp, #8]
    bd00:	f244 0201 	movw	r2, #16385	; 0x4001
    bd04:	4293      	cmp	r3, r2
    bd06:	d106      	bne.n	bd16 <FlexCAN_SetErrIntCmd+0x36>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(1U);
    bd08:	9b03      	ldr	r3, [sp, #12]
    bd0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bd0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    bd10:	9b03      	ldr	r3, [sp, #12]
    bd12:	635a      	str	r2, [r3, #52]	; 0x34
    bd14:	e03a      	b.n	bd8c <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            if ((FLEXCAN_INT_RX_WARNING == errType) || (FLEXCAN_INT_TX_WARNING == errType))
    bd16:	9b02      	ldr	r3, [sp, #8]
    bd18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    bd1c:	d003      	beq.n	bd26 <FlexCAN_SetErrIntCmd+0x46>
    bd1e:	9b02      	ldr	r3, [sp, #8]
    bd20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    bd24:	d105      	bne.n	bd32 <FlexCAN_SetErrIntCmd+0x52>
            {
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(1U);
    bd26:	9b03      	ldr	r3, [sp, #12]
    bd28:	681b      	ldr	r3, [r3, #0]
    bd2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    bd2e:	9b03      	ldr	r3, [sp, #12]
    bd30:	601a      	str	r2, [r3, #0]
            }
            (base->CTRL1) = ((base->CTRL1) | (temp));
    bd32:	9b03      	ldr	r3, [sp, #12]
    bd34:	685a      	ldr	r2, [r3, #4]
    bd36:	9b05      	ldr	r3, [sp, #20]
    bd38:	431a      	orrs	r2, r3
    bd3a:	9b03      	ldr	r3, [sp, #12]
    bd3c:	605a      	str	r2, [r3, #4]
    bd3e:	e025      	b.n	bd8c <FlexCAN_SetErrIntCmd+0xac>
        }
    }
    else
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    bd40:	9b02      	ldr	r3, [sp, #8]
    bd42:	f244 0201 	movw	r2, #16385	; 0x4001
    bd46:	4293      	cmp	r3, r2
    bd48:	d106      	bne.n	bd58 <FlexCAN_SetErrIntCmd+0x78>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(0U);
    bd4a:	9b03      	ldr	r3, [sp, #12]
    bd4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bd4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    bd52:	9b03      	ldr	r3, [sp, #12]
    bd54:	635a      	str	r2, [r3, #52]	; 0x34
    bd56:	e019      	b.n	bd8c <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            (base->CTRL1) = ((base->CTRL1) & ~(temp));
    bd58:	9b03      	ldr	r3, [sp, #12]
    bd5a:	685a      	ldr	r2, [r3, #4]
    bd5c:	9b05      	ldr	r3, [sp, #20]
    bd5e:	43db      	mvns	r3, r3
    bd60:	401a      	ands	r2, r3
    bd62:	9b03      	ldr	r3, [sp, #12]
    bd64:	605a      	str	r2, [r3, #4]
            temp = base->CTRL1;
    bd66:	9b03      	ldr	r3, [sp, #12]
    bd68:	685b      	ldr	r3, [r3, #4]
    bd6a:	9305      	str	r3, [sp, #20]
            if ((0U == (temp & (uint32)FLEXCAN_INT_RX_WARNING)) && (0U == (temp & (uint32)FLEXCAN_INT_TX_WARNING)))
    bd6c:	9b05      	ldr	r3, [sp, #20]
    bd6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    bd72:	2b00      	cmp	r3, #0
    bd74:	d10a      	bne.n	bd8c <FlexCAN_SetErrIntCmd+0xac>
    bd76:	9b05      	ldr	r3, [sp, #20]
    bd78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    bd7c:	2b00      	cmp	r3, #0
    bd7e:	d105      	bne.n	bd8c <FlexCAN_SetErrIntCmd+0xac>
            {
                /* If WRNEN disabled then both FLEXCAN_INT_RX_WARNING and FLEXCAN_INT_TX_WARNING will be disabled */
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(0U);
    bd80:	9b03      	ldr	r3, [sp, #12]
    bd82:	681b      	ldr	r3, [r3, #0]
    bd84:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
    bd88:	9b03      	ldr	r3, [sp, #12]
    bd8a:	601a      	str	r2, [r3, #0]
            }
        }
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    bd8c:	f001 faf4 	bl	d378 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
}
    bd90:	bf00      	nop
    bd92:	b007      	add	sp, #28
    bd94:	f85d fb04 	ldr.w	pc, [sp], #4

0000bd98 <FlexCAN_Init>:
 * buffers, initialize all message buffers as inactive, enable RX FIFO
 * if needed, mask all mask bits, and disable all MB interrupts.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Init(FLEXCAN_Type * base)
{
    bd98:	b500      	push	{lr}
    bd9a:	b087      	sub	sp, #28
    bd9c:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    bd9e:	2300      	movs	r3, #0
    bda0:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    bda2:	2300      	movs	r3, #0
    bda4:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bda6:	2100      	movs	r1, #0
    bda8:	4833      	ldr	r0, [pc, #204]	; (be78 <FlexCAN_Init+0xe0>)
    bdaa:	f7f6 f82d 	bl	1e08 <OsIf_MicrosToTicks>
    bdae:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    bdb0:	2300      	movs	r3, #0
    bdb2:	9304      	str	r3, [sp, #16]

    /* Reset the FLEXCAN */
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SOFTRST_MASK) | FLEXCAN_MCR_SOFTRST(1U);
    bdb4:	9b01      	ldr	r3, [sp, #4]
    bdb6:	681b      	ldr	r3, [r3, #0]
    bdb8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
    bdbc:	9b01      	ldr	r3, [sp, #4]
    bdbe:	601a      	str	r2, [r3, #0]
    /* Wait for reset cycle to complete */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bdc0:	2000      	movs	r0, #0
    bdc2:	f7f5 ffd5 	bl	1d70 <OsIf_GetCounter>
    bdc6:	4603      	mov	r3, r0
    bdc8:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    bdca:	e00f      	b.n	bdec <FlexCAN_Init+0x54>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bdcc:	ab02      	add	r3, sp, #8
    bdce:	2100      	movs	r1, #0
    bdd0:	4618      	mov	r0, r3
    bdd2:	f7f5 ffe6 	bl	1da2 <OsIf_GetElapsed>
    bdd6:	4602      	mov	r2, r0
    bdd8:	9b05      	ldr	r3, [sp, #20]
    bdda:	4413      	add	r3, r2
    bddc:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    bdde:	9a05      	ldr	r2, [sp, #20]
    bde0:	9b03      	ldr	r3, [sp, #12]
    bde2:	429a      	cmp	r2, r3
    bde4:	d302      	bcc.n	bdec <FlexCAN_Init+0x54>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    bde6:	2303      	movs	r3, #3
    bde8:	9304      	str	r3, [sp, #16]
            break;
    bdea:	e005      	b.n	bdf8 <FlexCAN_Init+0x60>
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    bdec:	9b01      	ldr	r3, [sp, #4]
    bdee:	681b      	ldr	r3, [r3, #0]
    bdf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    bdf4:	2b00      	cmp	r3, #0
    bdf6:	d1e9      	bne.n	bdcc <FlexCAN_Init+0x34>
        }
    }
    if (FLEXCAN_STATUS_SUCCESS == returnResult)
    bdf8:	9b04      	ldr	r3, [sp, #16]
    bdfa:	2b00      	cmp	r3, #0
    bdfc:	d136      	bne.n	be6c <FlexCAN_Init+0xd4>
    {
        /* Avoid Abort Transmission, use Inactive MB */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_AEN_MASK) | FLEXCAN_MCR_AEN(1U);
    bdfe:	9b01      	ldr	r3, [sp, #4]
    be00:	681b      	ldr	r3, [r3, #0]
    be02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    be06:	9b01      	ldr	r3, [sp, #4]
    be08:	601a      	str	r2, [r3, #0]
        /* Clear FlexCAN memory */
        FlexCAN_ClearRAM(base);
    be0a:	9801      	ldr	r0, [sp, #4]
    be0c:	f7ff fd40 	bl	b890 <FlexCAN_ClearRAM>
        /* Rx global mask*/
        (base->RXMGMASK) = (uint32)(FLEXCAN_RXMGMASK_MG_MASK);
    be10:	9b01      	ldr	r3, [sp, #4]
    be12:	f04f 32ff 	mov.w	r2, #4294967295
    be16:	611a      	str	r2, [r3, #16]
        /* Rx reg 14 mask*/
        (base->RX14MASK) =  (uint32)(FLEXCAN_RX14MASK_RX14M_MASK);
    be18:	9b01      	ldr	r3, [sp, #4]
    be1a:	f04f 32ff 	mov.w	r2, #4294967295
    be1e:	615a      	str	r2, [r3, #20]
        /* Rx reg 15 mask*/
        (base->RX15MASK) = (uint32)(FLEXCAN_RX15MASK_RX15M_MASK);
    be20:	9b01      	ldr	r3, [sp, #4]
    be22:	f04f 32ff 	mov.w	r2, #4294967295
    be26:	619a      	str	r2, [r3, #24]
        /* Disable all MB interrupts */
        (base->IMASK1) = 0x0;
    be28:	9b01      	ldr	r3, [sp, #4]
    be2a:	2200      	movs	r2, #0
    be2c:	629a      	str	r2, [r3, #40]	; 0x28
        /* Clear all MB interrupt flags */
        (base->IFLAG1) = FLEXCAN_IMASK1_BUF31TO0M_MASK;
    be2e:	9b01      	ldr	r3, [sp, #4]
    be30:	f04f 32ff 	mov.w	r2, #4294967295
    be34:	631a      	str	r2, [r3, #48]	; 0x30
            (base->IMASK4) = 0x0;
            (base->IFLAG4) = FLEXCAN_IMASK4_BUF127TO96M_MASK;
        }
#endif
        /* Clear all error interrupt flags */
        (base->ESR1) = FLEXCAN_IP_ALL_INT;
    be36:	9b01      	ldr	r3, [sp, #4]
    be38:	4a10      	ldr	r2, [pc, #64]	; (be7c <FlexCAN_Init+0xe4>)
    be3a:	621a      	str	r2, [r3, #32]
        /* clear registers which are not effected by soft reset */
        base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    be3c:	9b01      	ldr	r3, [sp, #4]
    be3e:	2200      	movs	r2, #0
    be40:	605a      	str	r2, [r3, #4]
        base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    be42:	9b01      	ldr	r3, [sp, #4]
    be44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    be48:	635a      	str	r2, [r3, #52]	; 0x34
        base->CBT   = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    be4a:	9b01      	ldr	r3, [sp, #4]
    be4c:	2200      	movs	r2, #0
    be4e:	651a      	str	r2, [r3, #80]	; 0x50
        base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
        base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    be50:	9801      	ldr	r0, [sp, #4]
    be52:	f000 f85b 	bl	bf0c <FlexCAN_IsFDAvailable>
    be56:	4603      	mov	r3, r0
    be58:	2b00      	cmp	r3, #0
    be5a:	d007      	beq.n	be6c <FlexCAN_Init+0xd4>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    be5c:	9b01      	ldr	r3, [sp, #4]
    be5e:	2200      	movs	r2, #0
    be60:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    be64:	9b01      	ldr	r3, [sp, #4]
    be66:	4a06      	ldr	r2, [pc, #24]	; (be80 <FlexCAN_Init+0xe8>)
    be68:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    #if defined(CAN_FEATURE_S32K1XX)
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
#endif /* (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON) */
    }
    return returnResult;
    be6c:	9b04      	ldr	r3, [sp, #16]
}
    be6e:	4618      	mov	r0, r3
    be70:	b007      	add	sp, #28
    be72:	f85d fb04 	ldr.w	pc, [sp], #4
    be76:	bf00      	nop
    be78:	000f4240 	.word	0x000f4240
    be7c:	003b0006 	.word	0x003b0006
    be80:	80004100 	.word	0x80004100

0000be84 <FlexCAN_EnableRxFifo>:
 * This function will enable the Rx FIFO feature.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnableRxFifo(FLEXCAN_Type * base,
                                         uint32 numOfFilters)
{
    be84:	b500      	push	{lr}
    be86:	b087      	sub	sp, #28
    be88:	9001      	str	r0, [sp, #4]
    be8a:	9100      	str	r1, [sp, #0]
    uint32 i;
    uint16 noOfMbx = (uint16)FlexCAN_GetMaxMbNum(base);
    be8c:	9801      	ldr	r0, [sp, #4]
    be8e:	f7ff fdfb 	bl	ba88 <FlexCAN_GetMaxMbNum>
    be92:	4603      	mov	r3, r0
    be94:	f8ad 300e 	strh.w	r3, [sp, #14]
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    be98:	2300      	movs	r3, #0
    be9a:	9304      	str	r3, [sp, #16]

    /* RxFIFO cannot be enabled if FD is enabled */
    if (((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U)
    be9c:	9b01      	ldr	r3, [sp, #4]
    be9e:	681b      	ldr	r3, [r3, #0]
    bea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    bea4:	2b00      	cmp	r3, #0
    bea6:	d001      	beq.n	beac <FlexCAN_EnableRxFifo+0x28>
    {
        stat = FLEXCAN_STATUS_ERROR;
    bea8:	2301      	movs	r3, #1
    beaa:	9304      	str	r3, [sp, #16]
    }
    if (FLEXCAN_STATUS_SUCCESS == stat)
    beac:	9b04      	ldr	r3, [sp, #16]
    beae:	2b00      	cmp	r3, #0
    beb0:	d127      	bne.n	bf02 <FlexCAN_EnableRxFifo+0x7e>
    {
        /* Enable RX FIFO */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_RFEN_MASK) | FLEXCAN_MCR_RFEN(1U);
    beb2:	9b01      	ldr	r3, [sp, #4]
    beb4:	681b      	ldr	r3, [r3, #0]
    beb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
    beba:	9b01      	ldr	r3, [sp, #4]
    bebc:	601a      	str	r2, [r3, #0]
        /* Set the number of the RX FIFO filters needed */
        base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RFFN_MASK) | ((numOfFilters << FLEXCAN_CTRL2_RFFN_SHIFT) & FLEXCAN_CTRL2_RFFN_MASK);
    bebe:	9b01      	ldr	r3, [sp, #4]
    bec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bec2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    bec6:	9b00      	ldr	r3, [sp, #0]
    bec8:	061b      	lsls	r3, r3, #24
    beca:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    bece:	431a      	orrs	r2, r3
    bed0:	9b01      	ldr	r3, [sp, #4]
    bed2:	635a      	str	r2, [r3, #52]	; 0x34
        /* RX FIFO global mask, take in consideration all filter fields*/
        (base->RXFGMASK) = FLEXCAN_RXFGMASK_FGM_MASK;
    bed4:	9b01      	ldr	r3, [sp, #4]
    bed6:	f04f 32ff 	mov.w	r2, #4294967295
    beda:	649a      	str	r2, [r3, #72]	; 0x48

        for (i = 0U; i < noOfMbx; i++)
    bedc:	2300      	movs	r3, #0
    bede:	9305      	str	r3, [sp, #20]
    bee0:	e00a      	b.n	bef8 <FlexCAN_EnableRxFifo+0x74>
        {
            /* RX individual mask */
            base->RXIMR[i] = (FLEXCAN_RXIMR_MI_MASK << FLEXCAN_IP_ID_EXT_SHIFT) & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    bee2:	9b01      	ldr	r3, [sp, #4]
    bee4:	9a05      	ldr	r2, [sp, #20]
    bee6:	f502 7208 	add.w	r2, r2, #544	; 0x220
    beea:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    beee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0U; i < noOfMbx; i++)
    bef2:	9b05      	ldr	r3, [sp, #20]
    bef4:	3301      	adds	r3, #1
    bef6:	9305      	str	r3, [sp, #20]
    bef8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    befc:	9a05      	ldr	r2, [sp, #20]
    befe:	429a      	cmp	r2, r3
    bf00:	d3ef      	bcc.n	bee2 <FlexCAN_EnableRxFifo+0x5e>
        }
    }
    return stat;
    bf02:	9b04      	ldr	r3, [sp, #16]
}
    bf04:	4618      	mov	r0, r3
    bf06:	b007      	add	sp, #28
    bf08:	f85d fb04 	ldr.w	pc, [sp], #4

0000bf0c <FlexCAN_IsFDAvailable>:
 * Description   : Checks if FlexCAN has FD Support.
 * This function is private.
 *
 *END**************************************************************************/
boolean FlexCAN_IsFDAvailable(const FLEXCAN_Type * base)
{
    bf0c:	b084      	sub	sp, #16
    bf0e:	9001      	str	r0, [sp, #4]
    uint32 i=0U;
    bf10:	2300      	movs	r3, #0
    bf12:	9303      	str	r3, [sp, #12]
    static FLEXCAN_Type * const flexcanBase[] = CAN_BASE_PTRS_HAS_FD;
    boolean returnValue = FALSE;
    bf14:	2300      	movs	r3, #0
    bf16:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    bf1a:	2300      	movs	r3, #0
    bf1c:	9303      	str	r3, [sp, #12]
    bf1e:	e00d      	b.n	bf3c <FlexCAN_IsFDAvailable+0x30>
    {
        if (base == flexcanBase[i])
    bf20:	4a0a      	ldr	r2, [pc, #40]	; (bf4c <FlexCAN_IsFDAvailable+0x40>)
    bf22:	9b03      	ldr	r3, [sp, #12]
    bf24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf28:	9a01      	ldr	r2, [sp, #4]
    bf2a:	429a      	cmp	r2, r3
    bf2c:	d103      	bne.n	bf36 <FlexCAN_IsFDAvailable+0x2a>
        {
            returnValue = TRUE;
    bf2e:	2301      	movs	r3, #1
    bf30:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
    bf34:	e005      	b.n	bf42 <FlexCAN_IsFDAvailable+0x36>
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    bf36:	9b03      	ldr	r3, [sp, #12]
    bf38:	3301      	adds	r3, #1
    bf3a:	9303      	str	r3, [sp, #12]
    bf3c:	9b03      	ldr	r3, [sp, #12]
    bf3e:	2b00      	cmp	r3, #0
    bf40:	d0ee      	beq.n	bf20 <FlexCAN_IsFDAvailable+0x14>
        }
    }

    return returnValue;
    bf42:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    bf46:	4618      	mov	r0, r3
    bf48:	b004      	add	sp, #16
    bf4a:	4770      	bx	lr
    bf4c:	0000ffb8 	.word	0x0000ffb8

0000bf50 <FlexCAN_SetPayloadSize>:
 * Description   : Sets the payload size of the MBs.
 *
 *END**************************************************************************/
void FlexCAN_SetPayloadSize(FLEXCAN_Type * base,
                            const Flexcan_Ip_PayloadSizeType * payloadSize)
{
    bf50:	b500      	push	{lr}
    bf52:	b085      	sub	sp, #20
    bf54:	9001      	str	r0, [sp, #4]
    bf56:	9100      	str	r1, [sp, #0]
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
    DevAssert(FlexCAN_IsFDEnabled(base) || (FLEXCAN_PAYLOAD_SIZE_8 == payloadSize->payloadBlock3));
    #endif
#endif
    /* If FD is not enabled, only 8 bytes payload is supported */
    if (FlexCAN_IsFDEnabled(base))
    bf58:	9801      	ldr	r0, [sp, #4]
    bf5a:	f7ff fbd6 	bl	b70a <FlexCAN_IsFDEnabled>
    bf5e:	4603      	mov	r3, r0
    bf60:	2b00      	cmp	r3, #0
    bf62:	d011      	beq.n	bf88 <FlexCAN_SetPayloadSize+0x38>
    {
        tmp = base->FDCTRL;
    bf64:	9b01      	ldr	r3, [sp, #4]
    bf66:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    bf6a:	9303      	str	r3, [sp, #12]
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR0_MASK);
    bf6c:	9b03      	ldr	r3, [sp, #12]
    bf6e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    bf72:	9303      	str	r3, [sp, #12]
        tmp |= ((uint32)payloadSize->payloadBlock0) << FLEXCAN_FDCTRL_MBDSR0_SHIFT;
    bf74:	9b00      	ldr	r3, [sp, #0]
    bf76:	681b      	ldr	r3, [r3, #0]
    bf78:	041b      	lsls	r3, r3, #16
    bf7a:	9a03      	ldr	r2, [sp, #12]
    bf7c:	4313      	orrs	r3, r2
    bf7e:	9303      	str	r3, [sp, #12]
#endif
#if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR3_MASK);
        tmp |= ((uint32)payloadSize->payloadBlock3) << FLEXCAN_FDCTRL_MBDSR3_SHIFT;
#endif
        base->FDCTRL = tmp;
    bf80:	9b01      	ldr	r3, [sp, #4]
    bf82:	9a03      	ldr	r2, [sp, #12]
    bf84:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
}
    bf88:	bf00      	nop
    bf8a:	b005      	add	sp, #20
    bf8c:	f85d fb04 	ldr.w	pc, [sp], #4

0000bf90 <FlexCAN_GetPayloadSize>:
 * Function Name : FLEXCAN_GetPayloadSize
 * Description   : Returns the payload size of the MBs (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_GetPayloadSize(const FLEXCAN_Type * base, uint8 mbdsrIdx)
{
    bf90:	b500      	push	{lr}
    bf92:	b085      	sub	sp, #20
    bf94:	9001      	str	r0, [sp, #4]
    bf96:	460b      	mov	r3, r1
    bf98:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 payloadSize = 0U;
    bf9c:	2300      	movs	r3, #0
    bf9e:	9303      	str	r3, [sp, #12]

#if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    bfa0:	9801      	ldr	r0, [sp, #4]
    bfa2:	f7ff ffb3 	bl	bf0c <FlexCAN_IsFDAvailable>
    bfa6:	4603      	mov	r3, r0
    bfa8:	2b00      	cmp	r3, #0
    bfaa:	d019      	beq.n	bfe0 <FlexCAN_GetPayloadSize+0x50>
    {
#endif /* defined(CAN_FEATURE_S32K1XX) */
    switch (mbdsrIdx)
    bfac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bfb0:	2b00      	cmp	r3, #0
    bfb2:	d10a      	bne.n	bfca <FlexCAN_GetPayloadSize+0x3a>
    {
        case 0 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    bfb4:	9b01      	ldr	r3, [sp, #4]
    bfb6:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    bfba:	0c1b      	lsrs	r3, r3, #16
    bfbc:	f003 0303 	and.w	r3, r3, #3
    bfc0:	2208      	movs	r2, #8
    bfc2:	fa02 f303 	lsl.w	r3, r2, r3
    bfc6:	9303      	str	r3, [sp, #12]
    bfc8:	e00c      	b.n	bfe4 <FlexCAN_GetPayloadSize+0x54>
        case 2 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR2_MASK) >> FLEXCAN_FDCTRL_MBDSR2_SHIFT); } break;
    #endif
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        case 3 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR3_MASK) >> FLEXCAN_FDCTRL_MBDSR3_SHIFT); } break;
    #endif
        default :{  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    bfca:	9b01      	ldr	r3, [sp, #4]
    bfcc:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    bfd0:	0c1b      	lsrs	r3, r3, #16
    bfd2:	f003 0303 	and.w	r3, r3, #3
    bfd6:	2208      	movs	r2, #8
    bfd8:	fa02 f303 	lsl.w	r3, r2, r3
    bfdc:	9303      	str	r3, [sp, #12]
    bfde:	e001      	b.n	bfe4 <FlexCAN_GetPayloadSize+0x54>
    }
    #if defined(CAN_FEATURE_S32K1XX)
    }
    else
    {
        payloadSize = 8U;
    bfe0:	2308      	movs	r3, #8
    bfe2:	9303      	str	r3, [sp, #12]
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
    return (uint8)payloadSize;
    bfe4:	9b03      	ldr	r3, [sp, #12]
    bfe6:	b2db      	uxtb	r3, r3
}
    bfe8:	4618      	mov	r0, r3
    bfea:	b005      	add	sp, #20
    bfec:	f85d fb04 	ldr.w	pc, [sp], #4

0000bff0 <FlexCAN_GetMbPayloadSize>:



uint8 FlexCAN_GetMbPayloadSize(const FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    bff0:	b500      	push	{lr}
    bff2:	b087      	sub	sp, #28
    bff4:	9001      	str	r0, [sp, #4]
    bff6:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    bff8:	2308      	movs	r3, #8
    bffa:	f88d 3014 	strb.w	r3, [sp, #20]
    uint32 ramBlockSize = 512U;
    bffe:	f44f 7300 	mov.w	r3, #512	; 0x200
    c002:	9304      	str	r3, [sp, #16]
    uint8 can_real_payload = 8U;
    c004:	2308      	movs	r3, #8
    c006:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 maxMbBlockNum = 0U;
    c00a:	2300      	movs	r3, #0
    c00c:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8 i=0U;
    c010:	2300      	movs	r3, #0
    c012:	f88d 3015 	strb.w	r3, [sp, #21]
    uint8 mb_size = 0U;
    c016:	2300      	movs	r3, #0
    c018:	f88d 300f 	strb.w	r3, [sp, #15]

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    c01c:	2300      	movs	r3, #0
    c01e:	f88d 3015 	strb.w	r3, [sp, #21]
    c022:	e024      	b.n	c06e <FlexCAN_GetMbPayloadSize+0x7e>
    {
        /* Check that the number of MBs is supported based on the payload size*/
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        can_real_payload = FlexCAN_GetPayloadSize(base, i);
    c024:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c028:	4619      	mov	r1, r3
    c02a:	9801      	ldr	r0, [sp, #4]
    c02c:	f7ff ffb0 	bl	bf90 <FlexCAN_GetPayloadSize>
    c030:	4603      	mov	r3, r0
    c032:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* Else can_real_payload will remain as 8 payload size */
        mb_size = (uint8)(can_real_payload + arbitration_field_size);
    c036:	f89d 2017 	ldrb.w	r2, [sp, #23]
    c03a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c03e:	4413      	add	r3, r2
    c040:	f88d 300f 	strb.w	r3, [sp, #15]
        maxMbBlockNum += (uint8)(ramBlockSize / mb_size);
    c044:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c048:	9a04      	ldr	r2, [sp, #16]
    c04a:	fbb2 f3f3 	udiv	r3, r2, r3
    c04e:	b2da      	uxtb	r2, r3
    c050:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c054:	4413      	add	r3, r2
    c056:	f88d 3016 	strb.w	r3, [sp, #22]
        if (maxMbBlockNum > maxMsgBuffNum)
    c05a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c05e:	9a00      	ldr	r2, [sp, #0]
    c060:	429a      	cmp	r2, r3
    c062:	d309      	bcc.n	c078 <FlexCAN_GetMbPayloadSize+0x88>
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    c064:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c068:	3301      	adds	r3, #1
    c06a:	f88d 3015 	strb.w	r3, [sp, #21]
    c06e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c072:	2b00      	cmp	r3, #0
    c074:	d0d6      	beq.n	c024 <FlexCAN_GetMbPayloadSize+0x34>
    c076:	e000      	b.n	c07a <FlexCAN_GetMbPayloadSize+0x8a>
        {
            break;
    c078:	bf00      	nop
    {
        can_real_payload = 64U;
    }
 #endif

    return can_real_payload;
    c07a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    c07e:	4618      	mov	r0, r3
    c080:	b007      	add	sp, #28
    c082:	f85d fb04 	ldr.w	pc, [sp], #4

0000c086 <FlexCAN_LockRxMsgBuff>:
 * Description   : Lock the RX message buffer.
 * This function will lock the RX message buffer.
 *
 *END**************************************************************************/
void FlexCAN_LockRxMsgBuff(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    c086:	b500      	push	{lr}
    c088:	b085      	sub	sp, #20
    c08a:	9001      	str	r0, [sp, #4]
    c08c:	9100      	str	r1, [sp, #0]
    volatile const uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    c08e:	9900      	ldr	r1, [sp, #0]
    c090:	9801      	ldr	r0, [sp, #4]
    c092:	f7ff fc7f 	bl	b994 <FlexCAN_GetMsgBuffRegion>
    c096:	9003      	str	r0, [sp, #12]

    /* Lock the mailbox by reading it */
    (void)*flexcan_mb;
    c098:	9b03      	ldr	r3, [sp, #12]
    c09a:	681b      	ldr	r3, [r3, #0]
}
    c09c:	bf00      	nop
    c09e:	b005      	add	sp, #20
    c0a0:	f85d fb04 	ldr.w	pc, [sp], #4

0000c0a4 <FlexCAN_SetMsgBuffIntCmd>:
                                               uint8 u8Instance,
                                               uint32 msgBuffIdx,
                                               boolean enable,
                                               boolean bIsIntActive
                                              )
{
    c0a4:	b500      	push	{lr}
    c0a6:	b087      	sub	sp, #28
    c0a8:	9003      	str	r0, [sp, #12]
    c0aa:	9201      	str	r2, [sp, #4]
    c0ac:	461a      	mov	r2, r3
    c0ae:	460b      	mov	r3, r1
    c0b0:	f88d 300b 	strb.w	r3, [sp, #11]
    c0b4:	4613      	mov	r3, r2
    c0b6:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp;
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    c0ba:	2300      	movs	r3, #0
    c0bc:	9305      	str	r3, [sp, #20]

        /* Enable the corresponding message buffer Interrupt */
        temp = 1UL << (msgBuffIdx % 32U);
    c0be:	9b01      	ldr	r3, [sp, #4]
    c0c0:	f003 031f 	and.w	r3, r3, #31
    c0c4:	2201      	movs	r2, #1
    c0c6:	fa02 f303 	lsl.w	r3, r2, r3
    c0ca:	9304      	str	r3, [sp, #16]
        if (msgBuffIdx < 32U)
    c0cc:	9b01      	ldr	r3, [sp, #4]
    c0ce:	2b1f      	cmp	r3, #31
    c0d0:	d837      	bhi.n	c142 <FlexCAN_SetMsgBuffIntCmd+0x9e>
        {
            if (enable)
    c0d2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c0d6:	2b00      	cmp	r3, #0
    c0d8:	d01b      	beq.n	c112 <FlexCAN_SetMsgBuffIntCmd+0x6e>
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    c0da:	f001 fcf9 	bl	dad0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) | (temp));
    c0de:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c0e2:	4a1a      	ldr	r2, [pc, #104]	; (c14c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c0e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c0e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c0ec:	9a04      	ldr	r2, [sp, #16]
    c0ee:	430a      	orrs	r2, r1
    c0f0:	4916      	ldr	r1, [pc, #88]	; (c14c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c0f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TRUE == bIsIntActive)
    c0f6:	f89d 3020 	ldrb.w	r3, [sp, #32]
    c0fa:	2b00      	cmp	r3, #0
    c0fc:	d006      	beq.n	c10c <FlexCAN_SetMsgBuffIntCmd+0x68>
                {
                    base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    c0fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c102:	4a12      	ldr	r2, [pc, #72]	; (c14c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c104:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c108:	9b03      	ldr	r3, [sp, #12]
    c10a:	629a      	str	r2, [r3, #40]	; 0x28
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    c10c:	f001 fd0c 	bl	db28 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
    c110:	e017      	b.n	c142 <FlexCAN_SetMsgBuffIntCmd+0x9e>
            }
            else
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    c112:	f001 fcdd 	bl	dad0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) & ~(temp));
    c116:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c11a:	4a0c      	ldr	r2, [pc, #48]	; (c14c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c11c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c120:	9b04      	ldr	r3, [sp, #16]
    c122:	43da      	mvns	r2, r3
    c124:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c128:	400a      	ands	r2, r1
    c12a:	4908      	ldr	r1, [pc, #32]	; (c14c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c12c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    c130:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c134:	4a05      	ldr	r2, [pc, #20]	; (c14c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c136:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c13a:	9b03      	ldr	r3, [sp, #12]
    c13c:	629a      	str	r2, [r3, #40]	; 0x28
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    c13e:	f001 fcf3 	bl	db28 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
            }
        }
#endif /* if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */

    return stat;
    c142:	9b05      	ldr	r3, [sp, #20]
}
    c144:	4618      	mov	r0, r3
    c146:	b007      	add	sp, #28
    c148:	f85d fb04 	ldr.w	pc, [sp], #4
    c14c:	1fff8fc4 	.word	0x1fff8fc4

0000c150 <FLEXCAN_ClearMsgBuffIntCmd>:
void FLEXCAN_ClearMsgBuffIntCmd(FLEXCAN_Type * pBase,
                                uint8 u8Instance,
                                uint32 mb_idx,
                                boolean bIsIntActive
                               )
{
    c150:	b500      	push	{lr}
    c152:	b087      	sub	sp, #28
    c154:	9003      	str	r0, [sp, #12]
    c156:	9201      	str	r2, [sp, #4]
    c158:	461a      	mov	r2, r3
    c15a:	460b      	mov	r3, r1
    c15c:	f88d 300b 	strb.w	r3, [sp, #11]
    c160:	4613      	mov	r3, r2
    c162:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp = (1UL << (mb_idx % 32U));
    c166:	9b01      	ldr	r3, [sp, #4]
    c168:	f003 031f 	and.w	r3, r3, #31
    c16c:	2201      	movs	r2, #1
    c16e:	fa02 f303 	lsl.w	r3, r2, r3
    c172:	9305      	str	r3, [sp, #20]

 /* Stop the running transfer. */
    if (mb_idx < 32U)
    c174:	9b01      	ldr	r3, [sp, #4]
    c176:	2b1f      	cmp	r3, #31
    c178:	d818      	bhi.n	c1ac <FLEXCAN_ClearMsgBuffIntCmd+0x5c>
    {
          /* Start critical section: implementation depends on integrator */
          SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    c17a:	f001 fa6b 	bl	d654 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
          FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = (pBase->IMASK1 & (~temp));
    c17e:	9b03      	ldr	r3, [sp, #12]
    c180:	6a99      	ldr	r1, [r3, #40]	; 0x28
    c182:	9b05      	ldr	r3, [sp, #20]
    c184:	43da      	mvns	r2, r3
    c186:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c18a:	400a      	ands	r2, r1
    c18c:	4909      	ldr	r1, [pc, #36]	; (c1b4 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    c18e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          if (TRUE == bIsIntActive)
    c192:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c196:	2b00      	cmp	r3, #0
    c198:	d006      	beq.n	c1a8 <FLEXCAN_ClearMsgBuffIntCmd+0x58>
          {
              pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    c19a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c19e:	4a05      	ldr	r2, [pc, #20]	; (c1b4 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    c1a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c1a4:	9b03      	ldr	r3, [sp, #12]
    c1a6:	629a      	str	r2, [r3, #40]	; 0x28
          }
          /* End critical section: implementation depends on integrator */
          SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    c1a8:	f001 fa80 	bl	d6ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    }
#endif /* #if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */
}
    c1ac:	bf00      	nop
    c1ae:	b007      	add	sp, #28
    c1b0:	f85d fb04 	ldr.w	pc, [sp], #4
    c1b4:	1fff8fc4 	.word	0x1fff8fc4

0000c1b8 <FlexCAN_DisableInterrupts>:


void FlexCAN_DisableInterrupts(FLEXCAN_Type * pBase)
{
    c1b8:	b082      	sub	sp, #8
    c1ba:	9001      	str	r0, [sp, #4]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = 0U;
    c1bc:	9b01      	ldr	r3, [sp, #4]
    c1be:	2200      	movs	r2, #0
    c1c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = 0U;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    c1c2:	bf00      	nop
    c1c4:	b002      	add	sp, #8
    c1c6:	4770      	bx	lr

0000c1c8 <FlexCAN_EnableInterrupts>:

void FlexCAN_EnableInterrupts(FLEXCAN_Type * pBase, uint8 u8Instance)
{
    c1c8:	b082      	sub	sp, #8
    c1ca:	9001      	str	r0, [sp, #4]
    c1cc:	460b      	mov	r3, r1
    c1ce:	f88d 3003 	strb.w	r3, [sp, #3]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    c1d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c1d6:	4a04      	ldr	r2, [pc, #16]	; (c1e8 <FlexCAN_EnableInterrupts+0x20>)
    c1d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c1dc:	9b01      	ldr	r3, [sp, #4]
    c1de:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = FlexCAN_Ip_au32ImaskBuff[u8Instance][3U];
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    c1e0:	bf00      	nop
    c1e2:	b002      	add	sp, #8
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	1fff8fc4 	.word	0x1fff8fc4

0000c1ec <FlexCAN_SetRxMsgBuff>:
void FlexCAN_SetRxMsgBuff(const FLEXCAN_Type * base,
                          uint32 msgBuffIdx,
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId
                         )
{
    c1ec:	b500      	push	{lr}
    c1ee:	b087      	sub	sp, #28
    c1f0:	9003      	str	r0, [sp, #12]
    c1f2:	9102      	str	r1, [sp, #8]
    c1f4:	9201      	str	r2, [sp, #4]
    c1f6:	9300      	str	r3, [sp, #0]
    volatile uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    c1f8:	9902      	ldr	r1, [sp, #8]
    c1fa:	9803      	ldr	r0, [sp, #12]
    c1fc:	f7ff fbca 	bl	b994 <FlexCAN_GetMsgBuffRegion>
    c200:	9005      	str	r0, [sp, #20]
    volatile uint32 * flexcan_mb_id = &flexcan_mb[1];
    c202:	9b05      	ldr	r3, [sp, #20]
    c204:	3304      	adds	r3, #4
    c206:	9304      	str	r3, [sp, #16]
    DevAssert(cs != NULL_PTR);
#endif


    /* Clean up the arbitration field area */
    *flexcan_mb = 0;
    c208:	9b05      	ldr	r3, [sp, #20]
    c20a:	2200      	movs	r2, #0
    c20c:	601a      	str	r2, [r3, #0]
    *flexcan_mb_id = 0;
    c20e:	9b04      	ldr	r3, [sp, #16]
    c210:	2200      	movs	r2, #0
    c212:	601a      	str	r2, [r3, #0]

    /* Set the ID according the format structure */
    if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    c214:	9b01      	ldr	r3, [sp, #4]
    c216:	685b      	ldr	r3, [r3, #4]
    c218:	2b01      	cmp	r3, #1
    c21a:	d119      	bne.n	c250 <FlexCAN_SetRxMsgBuff+0x64>
    {
        /* Set IDE */
        *flexcan_mb |= FLEXCAN_IP_CS_IDE_MASK;
    c21c:	9b05      	ldr	r3, [sp, #20]
    c21e:	681b      	ldr	r3, [r3, #0]
    c220:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    c224:	9b05      	ldr	r3, [sp, #20]
    c226:	601a      	str	r2, [r3, #0]

        /* Clear SRR bit */
        *flexcan_mb &= ~FLEXCAN_IP_CS_SRR_MASK;
    c228:	9b05      	ldr	r3, [sp, #20]
    c22a:	681b      	ldr	r3, [r3, #0]
    c22c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
    c230:	9b05      	ldr	r3, [sp, #20]
    c232:	601a      	str	r2, [r3, #0]

        /* ID [28-0] */
        *flexcan_mb_id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    c234:	9b04      	ldr	r3, [sp, #16]
    c236:	681b      	ldr	r3, [r3, #0]
    c238:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    c23c:	9b04      	ldr	r3, [sp, #16]
    c23e:	601a      	str	r2, [r3, #0]
        *flexcan_mb_id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    c240:	9b04      	ldr	r3, [sp, #16]
    c242:	681a      	ldr	r2, [r3, #0]
    c244:	9b00      	ldr	r3, [sp, #0]
    c246:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    c24a:	431a      	orrs	r2, r3
    c24c:	9b04      	ldr	r3, [sp, #16]
    c24e:	601a      	str	r2, [r3, #0]
    }

    if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    c250:	9b01      	ldr	r3, [sp, #4]
    c252:	685b      	ldr	r3, [r3, #4]
    c254:	2b00      	cmp	r3, #0
    c256:	d116      	bne.n	c286 <FlexCAN_SetRxMsgBuff+0x9a>
    {
        /* Make sure IDE and SRR are not set */
        *flexcan_mb &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    c258:	9b05      	ldr	r3, [sp, #20]
    c25a:	681b      	ldr	r3, [r3, #0]
    c25c:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
    c260:	9b05      	ldr	r3, [sp, #20]
    c262:	601a      	str	r2, [r3, #0]

        /* ID[28-18] */
        *flexcan_mb_id &= ~FLEXCAN_IP_ID_STD_MASK;
    c264:	9b04      	ldr	r3, [sp, #16]
    c266:	681b      	ldr	r3, [r3, #0]
    c268:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    c26c:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    c270:	9a04      	ldr	r2, [sp, #16]
    c272:	6013      	str	r3, [r2, #0]
        *flexcan_mb_id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    c274:	9b04      	ldr	r3, [sp, #16]
    c276:	681a      	ldr	r2, [r3, #0]
    c278:	9b00      	ldr	r3, [sp, #0]
    c27a:	0499      	lsls	r1, r3, #18
    c27c:	4b0e      	ldr	r3, [pc, #56]	; (c2b8 <FlexCAN_SetRxMsgBuff+0xcc>)
    c27e:	400b      	ands	r3, r1
    c280:	431a      	orrs	r2, r3
    c282:	9b04      	ldr	r3, [sp, #16]
    c284:	601a      	str	r2, [r3, #0]
    }

    /* Set MB CODE */
    if ((uint32)FLEXCAN_RX_NOT_USED != cs->code)
    c286:	9b01      	ldr	r3, [sp, #4]
    c288:	681b      	ldr	r3, [r3, #0]
    c28a:	2b0f      	cmp	r3, #15
    c28c:	d00f      	beq.n	c2ae <FlexCAN_SetRxMsgBuff+0xc2>
    {
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    c28e:	9b05      	ldr	r3, [sp, #20]
    c290:	681b      	ldr	r3, [r3, #0]
    c292:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    c296:	9b05      	ldr	r3, [sp, #20]
    c298:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    c29a:	9b05      	ldr	r3, [sp, #20]
    c29c:	681a      	ldr	r2, [r3, #0]
    c29e:	9b01      	ldr	r3, [sp, #4]
    c2a0:	681b      	ldr	r3, [r3, #0]
    c2a2:	061b      	lsls	r3, r3, #24
    c2a4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    c2a8:	431a      	orrs	r2, r3
    c2aa:	9b05      	ldr	r3, [sp, #20]
    c2ac:	601a      	str	r2, [r3, #0]
    }
}
    c2ae:	bf00      	nop
    c2b0:	b007      	add	sp, #28
    c2b2:	f85d fb04 	ldr.w	pc, [sp], #4
    c2b6:	bf00      	nop
    c2b8:	1ffc0000 	.word	0x1ffc0000

0000c2bc <FlexCAN_GetMsgBuffTimestamp>:
 * Function Name : FlexCAN_GetMsgBuffTimestamp
 * Description   : Get a message buffer timestamp value.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMsgBuffTimestamp(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    c2bc:	b500      	push	{lr}
    c2be:	b085      	sub	sp, #20
    c2c0:	9001      	str	r0, [sp, #4]
    c2c2:	9100      	str	r1, [sp, #0]
    uint32 TimeStamp = 0U;
    c2c4:	2300      	movs	r3, #0
    c2c6:	9303      	str	r3, [sp, #12]
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    c2c8:	9900      	ldr	r1, [sp, #0]
    c2ca:	9801      	ldr	r0, [sp, #4]
    c2cc:	f7ff fb62 	bl	b994 <FlexCAN_GetMsgBuffRegion>
    c2d0:	9002      	str	r0, [sp, #8]
        TimeStamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        TimeStamp = (uint32)((*Flexcan_Mb & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    c2d2:	9b02      	ldr	r3, [sp, #8]
    c2d4:	681b      	ldr	r3, [r3, #0]
    c2d6:	b29b      	uxth	r3, r3
    c2d8:	9303      	str	r3, [sp, #12]
    }
    return TimeStamp;
    c2da:	9b03      	ldr	r3, [sp, #12]
}
    c2dc:	4618      	mov	r0, r3
    c2de:	b005      	add	sp, #20
    c2e0:	f85d fb04 	ldr.w	pc, [sp], #4

0000c2e4 <FlexCAN_GetMsgBuff>:
 *END**************************************************************************/
void FlexCAN_GetMsgBuff(const FLEXCAN_Type * base,
                        uint32 msgBuffIdx,
                        Flexcan_Ip_MsgBuffType * msgBuff
                       )
{
    c2e4:	b500      	push	{lr}
    c2e6:	b08d      	sub	sp, #52	; 0x34
    c2e8:	9003      	str	r0, [sp, #12]
    c2ea:	9102      	str	r1, [sp, #8]
    c2ec:	9201      	str	r2, [sp, #4]

    uint8 i;
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    c2ee:	9902      	ldr	r1, [sp, #8]
    c2f0:	9803      	ldr	r0, [sp, #12]
    c2f2:	f7ff fb4f 	bl	b994 <FlexCAN_GetMsgBuffRegion>
    c2f6:	900a      	str	r0, [sp, #40]	; 0x28
    volatile const uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    c2f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c2fa:	3304      	adds	r3, #4
    c2fc:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const uint8 * Flexcan_Mb_Data = (volatile const uint8 *)(&Flexcan_Mb[2]);
    c2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c300:	3308      	adds	r3, #8
    c302:	9308      	str	r3, [sp, #32]
    volatile const uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    c304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c306:	3308      	adds	r3, #8
    c308:	9307      	str	r3, [sp, #28]
    uint32 * MsgBuff_Data_32 = NULL_PTR;
    c30a:	2300      	movs	r3, #0
    c30c:	9306      	str	r3, [sp, #24]
    uint32 MbWord;

    uint8 Flexcan_Mb_Dlc_Value = (uint8)(((*Flexcan_Mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    c30e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c310:	681b      	ldr	r3, [r3, #0]
    c312:	0c1b      	lsrs	r3, r3, #16
    c314:	b2db      	uxtb	r3, r3
    c316:	f003 030f 	and.w	r3, r3, #15
    c31a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Payload_Size = FlexCAN_ComputePayloadSize(Flexcan_Mb_Dlc_Value);
    c31e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c322:	4618      	mov	r0, r3
    c324:	f7ff faed 	bl	b902 <FlexCAN_ComputePayloadSize>
    c328:	4603      	mov	r3, r0
    c32a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(msgBuff != NULL_PTR);
#endif
    /* Asign after NULL Check */
    MsgBuff_Data_32 = (uint32 *)(msgBuff->data);
    c32e:	9b01      	ldr	r3, [sp, #4]
    c330:	3308      	adds	r3, #8
    c332:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    /* Payload Size is based on MBDSR for 1 MBDSR corresponds 32 * 8Bytes MBs  */
    if (Payload_Size > FlexCAN_GetMbPayloadSize(base, msgBuffIdx))
    c334:	9902      	ldr	r1, [sp, #8]
    c336:	9803      	ldr	r0, [sp, #12]
    c338:	f7ff fe5a 	bl	bff0 <FlexCAN_GetMbPayloadSize>
    c33c:	4603      	mov	r3, r0
    c33e:	461a      	mov	r2, r3
    c340:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    c344:	4293      	cmp	r3, r2
    c346:	d906      	bls.n	c356 <FlexCAN_GetMsgBuff+0x72>
    {
        Payload_Size = FlexCAN_GetMbPayloadSize(base, msgBuffIdx);
    c348:	9902      	ldr	r1, [sp, #8]
    c34a:	9803      	ldr	r0, [sp, #12]
    c34c:	f7ff fe50 	bl	bff0 <FlexCAN_GetMbPayloadSize>
    c350:	4603      	mov	r3, r0
    c352:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    msgBuff->dataLen = Payload_Size;
    c356:	9b01      	ldr	r3, [sp, #4]
    c358:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    c35c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Get a MB field values */
    msgBuff->cs = *Flexcan_Mb;
    c360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c362:	681a      	ldr	r2, [r3, #0]
    c364:	9b01      	ldr	r3, [sp, #4]
    c366:	601a      	str	r2, [r3, #0]
    if ((msgBuff->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    c368:	9b01      	ldr	r3, [sp, #4]
    c36a:	681b      	ldr	r3, [r3, #0]
    c36c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    c370:	2b00      	cmp	r3, #0
    c372:	d004      	beq.n	c37e <FlexCAN_GetMsgBuff+0x9a>
    {
        msgBuff->msgId = (*Flexcan_Mb_Id);
    c374:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c376:	681a      	ldr	r2, [r3, #0]
    c378:	9b01      	ldr	r3, [sp, #4]
    c37a:	605a      	str	r2, [r3, #4]
    c37c:	e004      	b.n	c388 <FlexCAN_GetMsgBuff+0xa4>
    }
    else
    {
        msgBuff->msgId = (*Flexcan_Mb_Id) >> FLEXCAN_IP_ID_STD_SHIFT;
    c37e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c380:	681b      	ldr	r3, [r3, #0]
    c382:	0c9a      	lsrs	r2, r3, #18
    c384:	9b01      	ldr	r3, [sp, #4]
    c386:	605a      	str	r2, [r3, #4]
        msgBuff->time_stamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        msgBuff->time_stamp = (uint32)((msgBuff->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    c388:	9b01      	ldr	r3, [sp, #4]
    c38a:	681b      	ldr	r3, [r3, #0]
    c38c:	b29a      	uxth	r2, r3
    c38e:	9b01      	ldr	r3, [sp, #4]
    c390:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, MsgBuff_Data_32[i >> 2U]);
        }
    }

#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    c392:	2300      	movs	r3, #0
    c394:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    c398:	e025      	b.n	c3e6 <FlexCAN_GetMsgBuff+0x102>
    {
        MbWord = Flexcan_Mb_Data_32[i >> 2U];
    c39a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c39e:	089b      	lsrs	r3, r3, #2
    c3a0:	b2db      	uxtb	r3, r3
    c3a2:	009b      	lsls	r3, r3, #2
    c3a4:	9a07      	ldr	r2, [sp, #28]
    c3a6:	4413      	add	r3, r2
    c3a8:	681b      	ldr	r3, [r3, #0]
    c3aa:	9304      	str	r3, [sp, #16]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (MsgBuff_Data_32[i >> 2U]));
    c3ac:	9b04      	ldr	r3, [sp, #16]
    c3ae:	0e1a      	lsrs	r2, r3, #24
    c3b0:	9b04      	ldr	r3, [sp, #16]
    c3b2:	0a1b      	lsrs	r3, r3, #8
    c3b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    c3b8:	431a      	orrs	r2, r3
    c3ba:	9b04      	ldr	r3, [sp, #16]
    c3bc:	021b      	lsls	r3, r3, #8
    c3be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    c3c2:	ea42 0103 	orr.w	r1, r2, r3
    c3c6:	9b04      	ldr	r3, [sp, #16]
    c3c8:	061a      	lsls	r2, r3, #24
    c3ca:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c3ce:	089b      	lsrs	r3, r3, #2
    c3d0:	b2db      	uxtb	r3, r3
    c3d2:	009b      	lsls	r3, r3, #2
    c3d4:	9806      	ldr	r0, [sp, #24]
    c3d6:	4403      	add	r3, r0
    c3d8:	430a      	orrs	r2, r1
    c3da:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    c3dc:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c3e0:	3304      	adds	r3, #4
    c3e2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    c3e6:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    c3ea:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    c3ee:	f023 0303 	bic.w	r3, r3, #3
    c3f2:	429a      	cmp	r2, r3
    c3f4:	d3d1      	bcc.n	c39a <FlexCAN_GetMsgBuff+0xb6>
    }

#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (; i < Payload_Size; i++)
    c3f6:	e014      	b.n	c422 <FlexCAN_GetMsgBuff+0x13e>
    {   /* Max allowed value for index is 63 */
        msgBuff->data[i] = Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(i)];
    c3f8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c3fc:	f083 0303 	eor.w	r3, r3, #3
    c400:	b2db      	uxtb	r3, r3
    c402:	461a      	mov	r2, r3
    c404:	9b08      	ldr	r3, [sp, #32]
    c406:	441a      	add	r2, r3
    c408:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c40c:	7812      	ldrb	r2, [r2, #0]
    c40e:	b2d1      	uxtb	r1, r2
    c410:	9a01      	ldr	r2, [sp, #4]
    c412:	4413      	add	r3, r2
    c414:	460a      	mov	r2, r1
    c416:	721a      	strb	r2, [r3, #8]
    for (; i < Payload_Size; i++)
    c418:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c41c:	3301      	adds	r3, #1
    c41e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    c422:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    c426:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    c42a:	429a      	cmp	r2, r3
    c42c:	d3e4      	bcc.n	c3f8 <FlexCAN_GetMsgBuff+0x114>
    }
}
    c42e:	bf00      	nop
    c430:	bf00      	nop
    c432:	b00d      	add	sp, #52	; 0x34
    c434:	f85d fb04 	ldr.w	pc, [sp], #4

0000c438 <FlexCAN_SetTxMsgBuff>:
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId,
                          const uint8 * msgData,
                          const boolean isRemote
                         )
{
    c438:	b500      	push	{lr}
    c43a:	b08d      	sub	sp, #52	; 0x34
    c43c:	9003      	str	r0, [sp, #12]
    c43e:	9102      	str	r1, [sp, #8]
    c440:	9201      	str	r2, [sp, #4]
    c442:	9300      	str	r3, [sp, #0]
    uint32 Flexcan_Mb_Config = 0;
    c444:	2300      	movs	r3, #0
    c446:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 DataByte;
    uint8 Dlc_Value;
    uint8 Payload_Size;
    volatile uint32 * Flexcan_Mb = pMbAddr;
    c448:	9b03      	ldr	r3, [sp, #12]
    c44a:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    c44c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c44e:	3304      	adds	r3, #4
    c450:	9308      	str	r3, [sp, #32]
    volatile uint8 * Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    c452:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c454:	3308      	adds	r3, #8
    c456:	9307      	str	r3, [sp, #28]
    volatile uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    c458:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c45a:	3308      	adds	r3, #8
    c45c:	9306      	str	r3, [sp, #24]
    const uint32 * MsgData_32 = (const uint32*)msgData;
    c45e:	9b00      	ldr	r3, [sp, #0]
    c460:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(cs != NULL_PTR);
    #endif

        /* Clean up the arbitration field area and set TxMB Inactive */
        *Flexcan_Mb = (uint32)((((uint32)FLEXCAN_TX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    c462:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c464:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    c468:	601a      	str	r2, [r3, #0]
        *Flexcan_Mb_Id = 0;
    c46a:	9b08      	ldr	r3, [sp, #32]
    c46c:	2200      	movs	r2, #0
    c46e:	601a      	str	r2, [r3, #0]

        /* Compute the value of the DLC field */
        Dlc_Value = FlexCAN_ComputeDLCValue((uint8)cs->dataLen);
    c470:	9b02      	ldr	r3, [sp, #8]
    c472:	689b      	ldr	r3, [r3, #8]
    c474:	b2db      	uxtb	r3, r3
    c476:	4618      	mov	r0, r3
    c478:	f7ff f9f4 	bl	b864 <FlexCAN_ComputeDLCValue>
    c47c:	4603      	mov	r3, r0
    c47e:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Copy user's buffer into the message buffer data area */
        if (msgData != NULL_PTR)
    c482:	9b00      	ldr	r3, [sp, #0]
    c484:	2b00      	cmp	r3, #0
    c486:	d065      	beq.n	c554 <FlexCAN_SetTxMsgBuff+0x11c>
        {
#if (defined(S32K116) || defined (S32K118))
            (void)MsgData_32;
            DataByte = FlexCAN_DataTransferTxMsgBuff(Flexcan_Mb_Data_32, cs, msgData);
#else
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    c488:	2300      	movs	r3, #0
    c48a:	930a      	str	r3, [sp, #40]	; 0x28
    c48c:	e02c      	b.n	c4e8 <FlexCAN_SetTxMsgBuff+0xb0>
            {
                FLEXCAN_IP_SWAP_BYTES_IN_WORD((MsgData_32[DataByte >> 2U]), (Flexcan_Mb_Data_32[DataByte >> 2U]));
    c48e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c490:	089b      	lsrs	r3, r3, #2
    c492:	009b      	lsls	r3, r3, #2
    c494:	9a05      	ldr	r2, [sp, #20]
    c496:	4413      	add	r3, r2
    c498:	681b      	ldr	r3, [r3, #0]
    c49a:	0e1a      	lsrs	r2, r3, #24
    c49c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c49e:	089b      	lsrs	r3, r3, #2
    c4a0:	009b      	lsls	r3, r3, #2
    c4a2:	9905      	ldr	r1, [sp, #20]
    c4a4:	440b      	add	r3, r1
    c4a6:	681b      	ldr	r3, [r3, #0]
    c4a8:	0a1b      	lsrs	r3, r3, #8
    c4aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    c4ae:	431a      	orrs	r2, r3
    c4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4b2:	089b      	lsrs	r3, r3, #2
    c4b4:	009b      	lsls	r3, r3, #2
    c4b6:	9905      	ldr	r1, [sp, #20]
    c4b8:	440b      	add	r3, r1
    c4ba:	681b      	ldr	r3, [r3, #0]
    c4bc:	021b      	lsls	r3, r3, #8
    c4be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    c4c2:	ea42 0103 	orr.w	r1, r2, r3
    c4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4c8:	089b      	lsrs	r3, r3, #2
    c4ca:	009b      	lsls	r3, r3, #2
    c4cc:	9a05      	ldr	r2, [sp, #20]
    c4ce:	4413      	add	r3, r2
    c4d0:	681b      	ldr	r3, [r3, #0]
    c4d2:	061a      	lsls	r2, r3, #24
    c4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4d6:	089b      	lsrs	r3, r3, #2
    c4d8:	009b      	lsls	r3, r3, #2
    c4da:	9806      	ldr	r0, [sp, #24]
    c4dc:	4403      	add	r3, r0
    c4de:	430a      	orrs	r2, r1
    c4e0:	601a      	str	r2, [r3, #0]
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    c4e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4e4:	3304      	adds	r3, #4
    c4e6:	930a      	str	r3, [sp, #40]	; 0x28
    c4e8:	9b02      	ldr	r3, [sp, #8]
    c4ea:	689b      	ldr	r3, [r3, #8]
    c4ec:	f023 0303 	bic.w	r3, r3, #3
    c4f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c4f2:	429a      	cmp	r2, r3
    c4f4:	d3cb      	bcc.n	c48e <FlexCAN_SetTxMsgBuff+0x56>
            }
#endif /* (defined(S32K116) || defined (S32K118)) */
            for ( ; DataByte < cs->dataLen; DataByte++)
    c4f6:	e00c      	b.n	c512 <FlexCAN_SetTxMsgBuff+0xda>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] =  msgData[DataByte];
    c4f8:	9a00      	ldr	r2, [sp, #0]
    c4fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4fc:	441a      	add	r2, r3
    c4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c500:	f083 0303 	eor.w	r3, r3, #3
    c504:	9907      	ldr	r1, [sp, #28]
    c506:	440b      	add	r3, r1
    c508:	7812      	ldrb	r2, [r2, #0]
    c50a:	701a      	strb	r2, [r3, #0]
            for ( ; DataByte < cs->dataLen; DataByte++)
    c50c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c50e:	3301      	adds	r3, #1
    c510:	930a      	str	r3, [sp, #40]	; 0x28
    c512:	9b02      	ldr	r3, [sp, #8]
    c514:	689b      	ldr	r3, [r3, #8]
    c516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c518:	429a      	cmp	r2, r3
    c51a:	d3ed      	bcc.n	c4f8 <FlexCAN_SetTxMsgBuff+0xc0>
            }
        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            Payload_Size = FlexCAN_ComputePayloadSize(Dlc_Value);
    c51c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c520:	4618      	mov	r0, r3
    c522:	f7ff f9ee 	bl	b902 <FlexCAN_ComputePayloadSize>
    c526:	4603      	mov	r3, r0
    c528:	f88d 3012 	strb.w	r3, [sp, #18]
            /* Add padding, if needed */
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    c52c:	9b02      	ldr	r3, [sp, #8]
    c52e:	689b      	ldr	r3, [r3, #8]
    c530:	930a      	str	r3, [sp, #40]	; 0x28
    c532:	e00a      	b.n	c54a <FlexCAN_SetTxMsgBuff+0x112>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] = cs->fd_padding;
    c534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c536:	f083 0303 	eor.w	r3, r3, #3
    c53a:	9a07      	ldr	r2, [sp, #28]
    c53c:	4413      	add	r3, r2
    c53e:	9a02      	ldr	r2, [sp, #8]
    c540:	7b52      	ldrb	r2, [r2, #13]
    c542:	701a      	strb	r2, [r3, #0]
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    c544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c546:	3301      	adds	r3, #1
    c548:	930a      	str	r3, [sp, #40]	; 0x28
    c54a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    c54e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c550:	429a      	cmp	r2, r3
    c552:	d3ef      	bcc.n	c534 <FlexCAN_SetTxMsgBuff+0xfc>
            }
        #endif /* FLEXCAN_IP_FEATURE_HAS_FD */
        }
        /* Set the ID according the format structure */
        if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    c554:	9b02      	ldr	r3, [sp, #8]
    c556:	685b      	ldr	r3, [r3, #4]
    c558:	2b01      	cmp	r3, #1
    c55a:	d111      	bne.n	c580 <FlexCAN_SetTxMsgBuff+0x148>
        {
            /* ID [28-0] */
            *Flexcan_Mb_Id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    c55c:	9b08      	ldr	r3, [sp, #32]
    c55e:	681b      	ldr	r3, [r3, #0]
    c560:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    c564:	9b08      	ldr	r3, [sp, #32]
    c566:	601a      	str	r2, [r3, #0]
            *Flexcan_Mb_Id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    c568:	9b08      	ldr	r3, [sp, #32]
    c56a:	681a      	ldr	r2, [r3, #0]
    c56c:	9b01      	ldr	r3, [sp, #4]
    c56e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    c572:	431a      	orrs	r2, r3
    c574:	9b08      	ldr	r3, [sp, #32]
    c576:	601a      	str	r2, [r3, #0]
            /* Set IDE and SRR bit*/
            Flexcan_Mb_Config |= (FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    c578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c57a:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
    c57e:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    c580:	9b02      	ldr	r3, [sp, #8]
    c582:	685b      	ldr	r3, [r3, #4]
    c584:	2b00      	cmp	r3, #0
    c586:	d114      	bne.n	c5b2 <FlexCAN_SetTxMsgBuff+0x17a>
        {
            /* ID[28-18] */
            *Flexcan_Mb_Id &= ~FLEXCAN_IP_ID_STD_MASK;
    c588:	9b08      	ldr	r3, [sp, #32]
    c58a:	681b      	ldr	r3, [r3, #0]
    c58c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    c590:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    c594:	9a08      	ldr	r2, [sp, #32]
    c596:	6013      	str	r3, [r2, #0]
            *Flexcan_Mb_Id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    c598:	9b08      	ldr	r3, [sp, #32]
    c59a:	681a      	ldr	r2, [r3, #0]
    c59c:	9b01      	ldr	r3, [sp, #4]
    c59e:	0499      	lsls	r1, r3, #18
    c5a0:	4b2b      	ldr	r3, [pc, #172]	; (c650 <FlexCAN_SetTxMsgBuff+0x218>)
    c5a2:	400b      	ands	r3, r1
    c5a4:	431a      	orrs	r2, r3
    c5a6:	9b08      	ldr	r3, [sp, #32]
    c5a8:	601a      	str	r2, [r3, #0]
            /* make sure IDE and SRR are not set */
            Flexcan_Mb_Config &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    c5aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5ac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
    c5b0:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        /* Set the length of data in bytes */
        Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_DLC_MASK;
    c5b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5b4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    c5b8:	930b      	str	r3, [sp, #44]	; 0x2c
        Flexcan_Mb_Config |= ((uint32)Dlc_Value << FLEXCAN_IP_CS_DLC_SHIFT) & FLEXCAN_IP_CS_DLC_MASK;
    c5ba:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c5be:	041b      	lsls	r3, r3, #16
    c5c0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    c5c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c5c6:	4313      	orrs	r3, r2
    c5c8:	930b      	str	r3, [sp, #44]	; 0x2c
        /* Set MB CODE */
        if (cs->code != (uint32)FLEXCAN_TX_NOT_USED)
    c5ca:	9b02      	ldr	r3, [sp, #8]
    c5cc:	681b      	ldr	r3, [r3, #0]
    c5ce:	2b0f      	cmp	r3, #15
    c5d0:	d03a      	beq.n	c648 <FlexCAN_SetTxMsgBuff+0x210>
        {
            if ((uint32)FLEXCAN_TX_REMOTE == cs->code)
    c5d2:	9b02      	ldr	r3, [sp, #8]
    c5d4:	681b      	ldr	r3, [r3, #0]
    c5d6:	2b1c      	cmp	r3, #28
    c5d8:	d104      	bne.n	c5e4 <FlexCAN_SetTxMsgBuff+0x1ac>
            {
                /* Set RTR bit */
                Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    c5da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c5e0:	930b      	str	r3, [sp, #44]	; 0x2c
    c5e2:	e007      	b.n	c5f4 <FlexCAN_SetTxMsgBuff+0x1bc>
            }
            else
            {
                if (TRUE == isRemote)
    c5e4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    c5e8:	2b00      	cmp	r3, #0
    c5ea:	d003      	beq.n	c5f4 <FlexCAN_SetTxMsgBuff+0x1bc>
                {
                    /* Set RTR bit */
                    Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    c5ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c5f2:	930b      	str	r3, [sp, #44]	; 0x2c
                }
            }
            /* Reset the code */
            Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_CODE_MASK;
    c5f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5f6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c5fa:	930b      	str	r3, [sp, #44]	; 0x2c
            /* Set the code */
            if (cs->fd_enable)
    c5fc:	9b02      	ldr	r3, [sp, #8]
    c5fe:	7b1b      	ldrb	r3, [r3, #12]
    c600:	2b00      	cmp	r3, #0
    c602:	d00e      	beq.n	c622 <FlexCAN_SetTxMsgBuff+0x1ea>
            {
                Flexcan_Mb_Config |= ((cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK) | FLEXCAN_IP_MB_EDL_MASK;
    c604:	9b02      	ldr	r3, [sp, #8]
    c606:	681b      	ldr	r3, [r3, #0]
    c608:	061b      	lsls	r3, r3, #24
    c60a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    c60e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c610:	4313      	orrs	r3, r2
    c612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c616:	930b      	str	r3, [sp, #44]	; 0x2c
                /* In case of FD frame not supported RTR */
                Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_RTR_MASK;
    c618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c61a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    c61e:	930b      	str	r3, [sp, #44]	; 0x2c
    c620:	e007      	b.n	c632 <FlexCAN_SetTxMsgBuff+0x1fa>
            }
            else
            {
                Flexcan_Mb_Config |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    c622:	9b02      	ldr	r3, [sp, #8]
    c624:	681b      	ldr	r3, [r3, #0]
    c626:	061b      	lsls	r3, r3, #24
    c628:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    c62c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c62e:	4313      	orrs	r3, r2
    c630:	930b      	str	r3, [sp, #44]	; 0x2c
            }

            if (cs->enable_brs)
    c632:	9b02      	ldr	r3, [sp, #8]
    c634:	7b9b      	ldrb	r3, [r3, #14]
    c636:	2b00      	cmp	r3, #0
    c638:	d003      	beq.n	c642 <FlexCAN_SetTxMsgBuff+0x20a>
            {
                Flexcan_Mb_Config |= FLEXCAN_IP_MB_BRS_MASK;
    c63a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c63c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c640:	930b      	str	r3, [sp, #44]	; 0x2c
            }
            *Flexcan_Mb = Flexcan_Mb_Config;
    c642:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c644:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c646:	601a      	str	r2, [r3, #0]
        }
}
    c648:	bf00      	nop
    c64a:	b00d      	add	sp, #52	; 0x34
    c64c:	f85d fb04 	ldr.w	pc, [sp], #4
    c650:	1ffc0000 	.word	0x1ffc0000

0000c654 <FlexCAN_SetMaxMsgBuffNum>:
 * Description   : Set the number of the last Message Buffers.
 * This function will define the number of the last Message Buffers
 *
 *END***************************************************************************/
Flexcan_Ip_StatusType FlexCAN_SetMaxMsgBuffNum(FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    c654:	b500      	push	{lr}
    c656:	b08f      	sub	sp, #60	; 0x3c
    c658:	9001      	str	r0, [sp, #4]
    c65a:	9100      	str	r1, [sp, #0]
    uint32 MsgBuffIdx;
    uint32 DataByte;
    const volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    c65c:	9b01      	ldr	r3, [sp, #4]
    c65e:	3380      	adds	r3, #128	; 0x80
    c660:	930a      	str	r3, [sp, #40]	; 0x28
#if (STD_ON == FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY)
    const volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */
    const volatile uint32 * ValEndMbPointer = NULL_PTR;
    c662:	2300      	movs	r3, #0
    c664:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 *Flexcan_Mb = NULL_PTR;
    c666:	2300      	movs	r3, #0
    c668:	9308      	str	r3, [sp, #32]
    volatile uint32 *Flexcan_Mb_Id   = NULL_PTR ;
    c66a:	2300      	movs	r3, #0
    c66c:	9307      	str	r3, [sp, #28]
    volatile uint8  *Flexcan_Mb_Data = NULL_PTR;
    c66e:	2300      	movs	r3, #0
    c670:	9306      	str	r3, [sp, #24]
    uint8 Arbitration_Field_Size = 8U;
    c672:	2308      	movs	r3, #8
    c674:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, maxMsgBuffNum - (uint32)1U);
    c678:	9b00      	ldr	r3, [sp, #0]
    c67a:	3b01      	subs	r3, #1
    c67c:	4619      	mov	r1, r3
    c67e:	9801      	ldr	r0, [sp, #4]
    c680:	f7ff fcb6 	bl	bff0 <FlexCAN_GetMbPayloadSize>
    c684:	4603      	mov	r3, r0
    c686:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_PtrSizeType ValEndMb = 0U;
    c68a:	2300      	movs	r3, #0
    c68c:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_PtrSizeType ValEndRam = 0U;
    c68e:	2300      	movs	r3, #0
    c690:	9303      	str	r3, [sp, #12]
    Flexcan_Ip_StatusType Status = FLEXCAN_STATUS_SUCCESS;
    c692:	2300      	movs	r3, #0
    c694:	930b      	str	r3, [sp, #44]	; 0x2c

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(maxMsgBuffNum>0U);
    #endif

    ValEndMbPointer = FlexCAN_GetMsgBuffRegion(base, (maxMsgBuffNum - (uint32)1U));
    c696:	9b00      	ldr	r3, [sp, #0]
    c698:	3b01      	subs	r3, #1
    c69a:	4619      	mov	r1, r3
    c69c:	9801      	ldr	r0, [sp, #4]
    c69e:	f7ff f979 	bl	b994 <FlexCAN_GetMsgBuffRegion>
    c6a2:	9009      	str	r0, [sp, #36]	; 0x24

    ValEndMb = (Flexcan_Ip_PtrSizeType)ValEndMbPointer + Can_Real_Payload + Arbitration_Field_Size;
    c6a4:	f89d 2016 	ldrb.w	r2, [sp, #22]
    c6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c6aa:	441a      	add	r2, r3
    c6ac:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c6b0:	4413      	add	r3, r2
    c6b2:	9304      	str	r3, [sp, #16]
    else
    {
        ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    }
#else
    ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    c6b4:	9801      	ldr	r0, [sp, #4]
    c6b6:	f7ff f9e7 	bl	ba88 <FlexCAN_GetMaxMbNum>
    c6ba:	4603      	mov	r3, r0
    c6bc:	011b      	lsls	r3, r3, #4
    c6be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c6c0:	4413      	add	r3, r2
    c6c2:	9303      	str	r3, [sp, #12]
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */

    if ((ValEndMb > ValEndRam) || (maxMsgBuffNum > FlexCAN_GetMaxMbNum(base)))
    c6c4:	9a04      	ldr	r2, [sp, #16]
    c6c6:	9b03      	ldr	r3, [sp, #12]
    c6c8:	429a      	cmp	r2, r3
    c6ca:	d806      	bhi.n	c6da <FlexCAN_SetMaxMsgBuffNum+0x86>
    c6cc:	9801      	ldr	r0, [sp, #4]
    c6ce:	f7ff f9db 	bl	ba88 <FlexCAN_GetMaxMbNum>
    c6d2:	4602      	mov	r2, r0
    c6d4:	9b00      	ldr	r3, [sp, #0]
    c6d6:	4293      	cmp	r3, r2
    c6d8:	d901      	bls.n	c6de <FlexCAN_SetMaxMsgBuffNum+0x8a>
    {
        Status = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    c6da:	2304      	movs	r3, #4
    c6dc:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    if (FLEXCAN_STATUS_SUCCESS == Status)
    c6de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c6e0:	2b00      	cmp	r3, #0
    c6e2:	d142      	bne.n	c76a <FlexCAN_SetMaxMsgBuffNum+0x116>
    {
        /* Set the maximum number of MBs*/
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MAXMB_MASK) | (((maxMsgBuffNum-1U) << FLEXCAN_MCR_MAXMB_SHIFT) & FLEXCAN_MCR_MAXMB_MASK);
    c6e4:	9b01      	ldr	r3, [sp, #4]
    c6e6:	681b      	ldr	r3, [r3, #0]
    c6e8:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
    c6ec:	9b00      	ldr	r3, [sp, #0]
    c6ee:	3b01      	subs	r3, #1
    c6f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c6f4:	431a      	orrs	r2, r3
    c6f6:	9b01      	ldr	r3, [sp, #4]
    c6f8:	601a      	str	r2, [r3, #0]
        if (!(((base->MCR & FLEXCAN_MCR_RFEN_MASK) >> FLEXCAN_MCR_RFEN_SHIFT) != 0U))
    c6fa:	9b01      	ldr	r3, [sp, #4]
    c6fc:	681b      	ldr	r3, [r3, #0]
    c6fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    c702:	2b00      	cmp	r3, #0
    c704:	d131      	bne.n	c76a <FlexCAN_SetMaxMsgBuffNum+0x116>
        {
            /* Initialize all message buffers as inactive */
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    c706:	2300      	movs	r3, #0
    c708:	930d      	str	r3, [sp, #52]	; 0x34
    c70a:	e02a      	b.n	c762 <FlexCAN_SetMaxMsgBuffNum+0x10e>
            {
                Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, MsgBuffIdx);
    c70c:	990d      	ldr	r1, [sp, #52]	; 0x34
    c70e:	9801      	ldr	r0, [sp, #4]
    c710:	f7ff f940 	bl	b994 <FlexCAN_GetMsgBuffRegion>
    c714:	9008      	str	r0, [sp, #32]
                Flexcan_Mb_Id   = &Flexcan_Mb[1];
    c716:	9b08      	ldr	r3, [sp, #32]
    c718:	3304      	adds	r3, #4
    c71a:	9307      	str	r3, [sp, #28]
                Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    c71c:	9b08      	ldr	r3, [sp, #32]
    c71e:	3308      	adds	r3, #8
    c720:	9306      	str	r3, [sp, #24]
                *Flexcan_Mb = 0x0U;
    c722:	9b08      	ldr	r3, [sp, #32]
    c724:	2200      	movs	r2, #0
    c726:	601a      	str	r2, [r3, #0]
                *Flexcan_Mb_Id = 0x0U;
    c728:	9b07      	ldr	r3, [sp, #28]
    c72a:	2200      	movs	r2, #0
    c72c:	601a      	str	r2, [r3, #0]
                Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, MsgBuffIdx);
    c72e:	990d      	ldr	r1, [sp, #52]	; 0x34
    c730:	9801      	ldr	r0, [sp, #4]
    c732:	f7ff fc5d 	bl	bff0 <FlexCAN_GetMbPayloadSize>
    c736:	4603      	mov	r3, r0
    c738:	f88d 3016 	strb.w	r3, [sp, #22]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    c73c:	2300      	movs	r3, #0
    c73e:	930c      	str	r3, [sp, #48]	; 0x30
    c740:	e007      	b.n	c752 <FlexCAN_SetMaxMsgBuffNum+0xfe>
                {
                   Flexcan_Mb_Data[DataByte] = 0x0U;
    c742:	9a06      	ldr	r2, [sp, #24]
    c744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c746:	4413      	add	r3, r2
    c748:	2200      	movs	r2, #0
    c74a:	701a      	strb	r2, [r3, #0]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    c74c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c74e:	3301      	adds	r3, #1
    c750:	930c      	str	r3, [sp, #48]	; 0x30
    c752:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c758:	429a      	cmp	r2, r3
    c75a:	d3f2      	bcc.n	c742 <FlexCAN_SetMaxMsgBuffNum+0xee>
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    c75c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c75e:	3301      	adds	r3, #1
    c760:	930d      	str	r3, [sp, #52]	; 0x34
    c762:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c764:	9b00      	ldr	r3, [sp, #0]
    c766:	429a      	cmp	r2, r3
    c768:	d3d0      	bcc.n	c70c <FlexCAN_SetMaxMsgBuffNum+0xb8>
                }
            }
        }
    }
    return Status;
    c76a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    c76c:	4618      	mov	r0, r3
    c76e:	b00f      	add	sp, #60	; 0x3c
    c770:	f85d fb04 	ldr.w	pc, [sp], #4

0000c774 <FlexCAN_SetOperationMode>:
 * Description   : Enable a FlexCAN operation mode.
 * This function will enable one of the modes listed in flexcan_operation_modes_t.
 *
 *END**************************************************************************/
void FlexCAN_SetOperationMode(FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
    c774:	b500      	push	{lr}
    c776:	b083      	sub	sp, #12
    c778:	9001      	str	r0, [sp, #4]
    c77a:	9100      	str	r1, [sp, #0]
    switch (mode)
    c77c:	9b00      	ldr	r3, [sp, #0]
    c77e:	2b02      	cmp	r3, #2
    c780:	d01d      	beq.n	c7be <FlexCAN_SetOperationMode+0x4a>
    c782:	9b00      	ldr	r3, [sp, #0]
    c784:	2b02      	cmp	r3, #2
    c786:	d82b      	bhi.n	c7e0 <FlexCAN_SetOperationMode+0x6c>
    c788:	9b00      	ldr	r3, [sp, #0]
    c78a:	2b00      	cmp	r3, #0
    c78c:	d003      	beq.n	c796 <FlexCAN_SetOperationMode+0x22>
    c78e:	9b00      	ldr	r3, [sp, #0]
    c790:	2b01      	cmp	r3, #1
    c792:	d00d      	beq.n	c7b0 <FlexCAN_SetOperationMode+0x3c>
            /* Enable Self Reception */
            FlexCAN_SetSelfReception(base, TRUE);
            break;
        default:
            /* Should not get here */
            break;
    c794:	e024      	b.n	c7e0 <FlexCAN_SetOperationMode+0x6c>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    c796:	9b01      	ldr	r3, [sp, #4]
    c798:	685b      	ldr	r3, [r3, #4]
    c79a:	f023 0208 	bic.w	r2, r3, #8
    c79e:	9b01      	ldr	r3, [sp, #4]
    c7a0:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(0U);
    c7a2:	9b01      	ldr	r3, [sp, #4]
    c7a4:	685b      	ldr	r3, [r3, #4]
    c7a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    c7aa:	9b01      	ldr	r3, [sp, #4]
    c7ac:	605a      	str	r2, [r3, #4]
            break;
    c7ae:	e018      	b.n	c7e2 <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(1U);
    c7b0:	9b01      	ldr	r3, [sp, #4]
    c7b2:	685b      	ldr	r3, [r3, #4]
    c7b4:	f043 0208 	orr.w	r2, r3, #8
    c7b8:	9b01      	ldr	r3, [sp, #4]
    c7ba:	605a      	str	r2, [r3, #4]
            break;
    c7bc:	e011      	b.n	c7e2 <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(1U);
    c7be:	9b01      	ldr	r3, [sp, #4]
    c7c0:	685b      	ldr	r3, [r3, #4]
    c7c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    c7c6:	9b01      	ldr	r3, [sp, #4]
    c7c8:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    c7ca:	9b01      	ldr	r3, [sp, #4]
    c7cc:	685b      	ldr	r3, [r3, #4]
    c7ce:	f023 0208 	bic.w	r2, r3, #8
    c7d2:	9b01      	ldr	r3, [sp, #4]
    c7d4:	605a      	str	r2, [r3, #4]
            FlexCAN_SetSelfReception(base, TRUE);
    c7d6:	2101      	movs	r1, #1
    c7d8:	9801      	ldr	r0, [sp, #4]
    c7da:	f7fe ff7f 	bl	b6dc <FlexCAN_SetSelfReception>
            break;
    c7de:	e000      	b.n	c7e2 <FlexCAN_SetOperationMode+0x6e>
            break;
    c7e0:	bf00      	nop
    }
}
    c7e2:	bf00      	nop
    c7e4:	b003      	add	sp, #12
    c7e6:	f85d fb04 	ldr.w	pc, [sp], #4

0000c7ea <FlexCAN_SetRxFifoFilter>:
 *END**************************************************************************/
void FlexCAN_SetRxFifoFilter(FLEXCAN_Type * base,
                             Flexcan_Ip_RxFifoIdElementFormatType idFormat,
                             const Flexcan_Ip_IdTableType * idFilterTable
                            )
{
    c7ea:	b500      	push	{lr}
    c7ec:	b08d      	sub	sp, #52	; 0x34
    c7ee:	9003      	str	r0, [sp, #12]
    c7f0:	9102      	str	r1, [sp, #8]
    c7f2:	9201      	str	r2, [sp, #4]

    /* Set RX FIFO ID filter table elements*/
    uint32 i, j, NumOfFilters;
    uint32 Val1 = 0UL, Val2 = 0UL, Val = 0UL;
    c7f4:	2300      	movs	r3, #0
    c7f6:	9309      	str	r3, [sp, #36]	; 0x24
    c7f8:	2300      	movs	r3, #0
    c7fa:	9308      	str	r3, [sp, #32]
    c7fc:	2300      	movs	r3, #0
    c7fe:	9307      	str	r3, [sp, #28]
    volatile uint32 * FilterTable = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_RX_FIFO_FILTER_TABLE_OFFSET);
    c800:	9b03      	ldr	r3, [sp, #12]
    c802:	33e0      	adds	r3, #224	; 0xe0
    c804:	9306      	str	r3, [sp, #24]

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert((idFilterTable != NULL_PTR) || (FLEXCAN_RX_FIFO_ID_FORMAT_D == idFormat));
    #endif

    NumOfFilters = (((base->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    c806:	9b03      	ldr	r3, [sp, #12]
    c808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c80a:	0e1b      	lsrs	r3, r3, #24
    c80c:	f003 030f 	and.w	r3, r3, #15
    c810:	9305      	str	r3, [sp, #20]
    c812:	9b02      	ldr	r3, [sp, #8]
    c814:	2b03      	cmp	r3, #3
    c816:	f200 81e7 	bhi.w	cbe8 <FlexCAN_SetRxFifoFilter+0x3fe>
    c81a:	a201      	add	r2, pc, #4	; (adr r2, c820 <FlexCAN_SetRxFifoFilter+0x36>)
    c81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c820:	0000c831 	.word	0x0000c831
    c824:	0000c8cb 	.word	0x0000c8cb
    c828:	0000ca05 	.word	0x0000ca05
    c82c:	0000cbd3 	.word	0x0000cbd3
    switch (idFormat)
    {
        case (FLEXCAN_RX_FIFO_ID_FORMAT_A):
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c830:	f000 ffb4 	bl	d79c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            /* One full ID (standard and extended) per ID Filter Table element.*/
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    c834:	9b03      	ldr	r3, [sp, #12]
    c836:	681b      	ldr	r3, [r3, #0]
    c838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
            (base->MCR) =
    c83c:	9b03      	ldr	r3, [sp, #12]
    c83e:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_A)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c840:	f000 ffd8 	bl	d7f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c844:	2300      	movs	r3, #0
    c846:	930b      	str	r3, [sp, #44]	; 0x2c
    c848:	e038      	b.n	c8bc <FlexCAN_SetRxFifoFilter+0xd2>
            {
                Val = 0UL;
    c84a:	2300      	movs	r3, #0
    c84c:	9307      	str	r3, [sp, #28]

                if (idFilterTable[i].isRemoteFrame)
    c84e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c850:	00db      	lsls	r3, r3, #3
    c852:	9a01      	ldr	r2, [sp, #4]
    c854:	4413      	add	r3, r2
    c856:	781b      	ldrb	r3, [r3, #0]
    c858:	2b00      	cmp	r3, #0
    c85a:	d002      	beq.n	c862 <FlexCAN_SetRxFifoFilter+0x78>
                {
                    Val = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    c85c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c860:	9307      	str	r3, [sp, #28]
                }

                if (idFilterTable[i].isExtendedFrame)
    c862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c864:	00db      	lsls	r3, r3, #3
    c866:	9a01      	ldr	r2, [sp, #4]
    c868:	4413      	add	r3, r2
    c86a:	785b      	ldrb	r3, [r3, #1]
    c86c:	2b00      	cmp	r3, #0
    c86e:	d013      	beq.n	c898 <FlexCAN_SetRxFifoFilter+0xae>
                {
                    Val |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    c870:	9b07      	ldr	r3, [sp, #28]
    c872:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c876:	9307      	str	r3, [sp, #28]
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT) &
    c878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c87a:	00db      	lsls	r3, r3, #3
    c87c:	9a01      	ldr	r2, [sp, #4]
    c87e:	4413      	add	r3, r2
    c880:	685b      	ldr	r3, [r3, #4]
    c882:	005b      	lsls	r3, r3, #1
    c884:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
    c888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c88a:	009b      	lsls	r3, r3, #2
    c88c:	9a06      	ldr	r2, [sp, #24]
    c88e:	4413      	add	r3, r2
    c890:	9a07      	ldr	r2, [sp, #28]
    c892:	440a      	add	r2, r1
    c894:	601a      	str	r2, [r3, #0]
    c896:	e00e      	b.n	c8b6 <FlexCAN_SetRxFifoFilter+0xcc>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK
                                           );
                }
                else
                {
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT) &
    c898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c89a:	00db      	lsls	r3, r3, #3
    c89c:	9a01      	ldr	r2, [sp, #4]
    c89e:	4413      	add	r3, r2
    c8a0:	685b      	ldr	r3, [r3, #4]
    c8a2:	04da      	lsls	r2, r3, #19
    c8a4:	4b9d      	ldr	r3, [pc, #628]	; (cb1c <FlexCAN_SetRxFifoFilter+0x332>)
    c8a6:	4013      	ands	r3, r2
    c8a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c8aa:	0092      	lsls	r2, r2, #2
    c8ac:	9906      	ldr	r1, [sp, #24]
    c8ae:	440a      	add	r2, r1
    c8b0:	9907      	ldr	r1, [sp, #28]
    c8b2:	440b      	add	r3, r1
    c8b4:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c8b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c8b8:	3301      	adds	r3, #1
    c8ba:	930b      	str	r3, [sp, #44]	; 0x2c
    c8bc:	9b05      	ldr	r3, [sp, #20]
    c8be:	3301      	adds	r3, #1
    c8c0:	00db      	lsls	r3, r3, #3
    c8c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c8c4:	429a      	cmp	r2, r3
    c8c6:	d3c0      	bcc.n	c84a <FlexCAN_SetRxFifoFilter+0x60>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_MASK
                                           );
                }
            }
            break;
    c8c8:	e18f      	b.n	cbea <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_B):
            /* Two full standard IDs or two partial 14-bit (standard and extended) IDs*/
            /* per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c8ca:	f000 ff67 	bl	d79c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) | ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_B)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
    c8ce:	9b03      	ldr	r3, [sp, #12]
    c8d0:	681b      	ldr	r3, [r3, #0]
    c8d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    c8d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
            (base->MCR) =
    c8da:	9b03      	ldr	r3, [sp, #12]
    c8dc:	601a      	str	r2, [r3, #0]
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c8de:	f000 ff89 	bl	d7f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    c8e2:	2300      	movs	r3, #0
    c8e4:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c8e6:	2300      	movs	r3, #0
    c8e8:	930b      	str	r3, [sp, #44]	; 0x2c
    c8ea:	e083      	b.n	c9f4 <FlexCAN_SetRxFifoFilter+0x20a>
            {
                Val1 = 0U;
    c8ec:	2300      	movs	r3, #0
    c8ee:	9309      	str	r3, [sp, #36]	; 0x24
                Val2 = 0U;
    c8f0:	2300      	movs	r3, #0
    c8f2:	9308      	str	r3, [sp, #32]

                if (idFilterTable[j].isRemoteFrame)
    c8f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c8f6:	00db      	lsls	r3, r3, #3
    c8f8:	9a01      	ldr	r2, [sp, #4]
    c8fa:	4413      	add	r3, r2
    c8fc:	781b      	ldrb	r3, [r3, #0]
    c8fe:	2b00      	cmp	r3, #0
    c900:	d002      	beq.n	c908 <FlexCAN_SetRxFifoFilter+0x11e>
                {
                    Val1 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    c902:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c906:	9309      	str	r3, [sp, #36]	; 0x24
                }

                if (idFilterTable[j + 1U].isRemoteFrame)
    c908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c90a:	3301      	adds	r3, #1
    c90c:	00db      	lsls	r3, r3, #3
    c90e:	9a01      	ldr	r2, [sp, #4]
    c910:	4413      	add	r3, r2
    c912:	781b      	ldrb	r3, [r3, #0]
    c914:	2b00      	cmp	r3, #0
    c916:	d002      	beq.n	c91e <FlexCAN_SetRxFifoFilter+0x134>
                {
                    Val2 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_RTR_SHIFT;
    c918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    c91c:	9308      	str	r3, [sp, #32]
                }

                if (idFilterTable[j].isExtendedFrame)
    c91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c920:	00db      	lsls	r3, r3, #3
    c922:	9a01      	ldr	r2, [sp, #4]
    c924:	4413      	add	r3, r2
    c926:	785b      	ldrb	r3, [r3, #1]
    c928:	2b00      	cmp	r3, #0
    c92a:	d014      	beq.n	c956 <FlexCAN_SetRxFifoFilter+0x16c>
                {
                    Val1 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    c92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c92e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c932:	9309      	str	r3, [sp, #36]	; 0x24

                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    c934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c936:	00db      	lsls	r3, r3, #3
    c938:	9a01      	ldr	r2, [sp, #4]
    c93a:	4413      	add	r3, r2
    c93c:	685b      	ldr	r3, [r3, #4]
    c93e:	0bdb      	lsrs	r3, r3, #15
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1
    c940:	041a      	lsls	r2, r3, #16
    c942:	4b77      	ldr	r3, [pc, #476]	; (cb20 <FlexCAN_SetRxFifoFilter+0x336>)
    c944:	4013      	ands	r3, r2
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    c946:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c948:	0092      	lsls	r2, r2, #2
    c94a:	9906      	ldr	r1, [sp, #24]
    c94c:	440a      	add	r2, r1
    c94e:	9909      	ldr	r1, [sp, #36]	; 0x24
    c950:	440b      	add	r3, r1
    c952:	6013      	str	r3, [r2, #0]
    c954:	e00e      	b.n	c974 <FlexCAN_SetRxFifoFilter+0x18a>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + ((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    c956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c958:	00db      	lsls	r3, r3, #3
    c95a:	9a01      	ldr	r2, [sp, #4]
    c95c:	4413      	add	r3, r2
    c95e:	685b      	ldr	r3, [r3, #4]
    c960:	04da      	lsls	r2, r3, #19
    c962:	4b6e      	ldr	r3, [pc, #440]	; (cb1c <FlexCAN_SetRxFifoFilter+0x332>)
    c964:	4013      	ands	r3, r2
    c966:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c968:	0092      	lsls	r2, r2, #2
    c96a:	9906      	ldr	r1, [sp, #24]
    c96c:	440a      	add	r2, r1
    c96e:	9909      	ldr	r1, [sp, #36]	; 0x24
    c970:	440b      	add	r3, r1
    c972:	6013      	str	r3, [r2, #0]
                                              FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    c974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c976:	3301      	adds	r3, #1
    c978:	00db      	lsls	r3, r3, #3
    c97a:	9a01      	ldr	r2, [sp, #4]
    c97c:	4413      	add	r3, r2
    c97e:	785b      	ldrb	r3, [r3, #1]
    c980:	2b00      	cmp	r3, #0
    c982:	d01a      	beq.n	c9ba <FlexCAN_SetRxFifoFilter+0x1d0>
                {
                    Val2 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_IDE_SHIFT;
    c984:	9b08      	ldr	r3, [sp, #32]
    c986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    c98a:	9308      	str	r3, [sp, #32]

                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    c98c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c98e:	009b      	lsls	r3, r3, #2
    c990:	9a06      	ldr	r2, [sp, #24]
    c992:	4413      	add	r3, r2
    c994:	6819      	ldr	r1, [r3, #0]
    c996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c998:	3301      	adds	r3, #1
    c99a:	00db      	lsls	r3, r3, #3
    c99c:	9a01      	ldr	r2, [sp, #4]
    c99e:	4413      	add	r3, r2
    c9a0:	685b      	ldr	r3, [r3, #4]
    c9a2:	0bdb      	lsrs	r3, r3, #15
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2
    c9a4:	f3c3 020d 	ubfx	r2, r3, #0, #14
                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    c9a8:	9b08      	ldr	r3, [sp, #32]
    c9aa:	441a      	add	r2, r3
    c9ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9ae:	009b      	lsls	r3, r3, #2
    c9b0:	9806      	ldr	r0, [sp, #24]
    c9b2:	4403      	add	r3, r0
    c9b4:	430a      	orrs	r2, r1
    c9b6:	601a      	str	r2, [r3, #0]
    c9b8:	e016      	b.n	c9e8 <FlexCAN_SetRxFifoFilter+0x1fe>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val2 + ((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    c9ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9bc:	009b      	lsls	r3, r3, #2
    c9be:	9a06      	ldr	r2, [sp, #24]
    c9c0:	4413      	add	r3, r2
    c9c2:	6819      	ldr	r1, [r3, #0]
    c9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c9c6:	3301      	adds	r3, #1
    c9c8:	00db      	lsls	r3, r3, #3
    c9ca:	9a01      	ldr	r2, [sp, #4]
    c9cc:	4413      	add	r3, r2
    c9ce:	685b      	ldr	r3, [r3, #4]
    c9d0:	00da      	lsls	r2, r3, #3
    c9d2:	f643 73f8 	movw	r3, #16376	; 0x3ff8
    c9d6:	4013      	ands	r3, r2
    c9d8:	9a08      	ldr	r2, [sp, #32]
    c9da:	441a      	add	r2, r3
    c9dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9de:	009b      	lsls	r3, r3, #2
    c9e0:	9806      	ldr	r0, [sp, #24]
    c9e2:	4403      	add	r3, r0
    c9e4:	430a      	orrs	r2, r1
    c9e6:	601a      	str	r2, [r3, #0]
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2
                                             );
                }

                j = j + 2U;
    c9e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c9ea:	3302      	adds	r3, #2
    c9ec:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c9ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9f0:	3301      	adds	r3, #1
    c9f2:	930b      	str	r3, [sp, #44]	; 0x2c
    c9f4:	9b05      	ldr	r3, [sp, #20]
    c9f6:	3301      	adds	r3, #1
    c9f8:	00db      	lsls	r3, r3, #3
    c9fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c9fc:	429a      	cmp	r2, r3
    c9fe:	f4ff af75 	bcc.w	c8ec <FlexCAN_SetRxFifoFilter+0x102>
            }
            break;
    ca02:	e0f2      	b.n	cbea <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_C):
            /* Four partial 8-bit Standard IDs per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    ca04:	f000 feca 	bl	d79c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    ca08:	9b03      	ldr	r3, [sp, #12]
    ca0a:	681b      	ldr	r3, [r3, #0]
    ca0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    ca10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
            (base->MCR) =
    ca14:	9b03      	ldr	r3, [sp, #12]
    ca16:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_C)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    ca18:	f000 feec 	bl	d7f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    ca1c:	2300      	movs	r3, #0
    ca1e:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    ca20:	2300      	movs	r3, #0
    ca22:	930b      	str	r3, [sp, #44]	; 0x2c
    ca24:	e0cd      	b.n	cbc2 <FlexCAN_SetRxFifoFilter+0x3d8>
            {
                if (idFilterTable[j].isExtendedFrame)
    ca26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca28:	00db      	lsls	r3, r3, #3
    ca2a:	9a01      	ldr	r2, [sp, #4]
    ca2c:	4413      	add	r3, r2
    ca2e:	785b      	ldrb	r3, [r3, #1]
    ca30:	2b00      	cmp	r3, #0
    ca32:	d00e      	beq.n	ca52 <FlexCAN_SetRxFifoFilter+0x268>
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    ca34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca36:	00db      	lsls	r3, r3, #3
    ca38:	9a01      	ldr	r2, [sp, #4]
    ca3a:	4413      	add	r3, r2
    ca3c:	685b      	ldr	r3, [r3, #4]
    ca3e:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    ca40:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    ca42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca44:	009b      	lsls	r3, r3, #2
    ca46:	9a06      	ldr	r2, [sp, #24]
    ca48:	4413      	add	r3, r2
    ca4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ca4c:	440a      	add	r2, r1
    ca4e:	601a      	str	r2, [r3, #0]
    ca50:	e00d      	b.n	ca6e <FlexCAN_SetRxFifoFilter+0x284>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    ca52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca54:	00db      	lsls	r3, r3, #3
    ca56:	9a01      	ldr	r2, [sp, #4]
    ca58:	4413      	add	r3, r2
    ca5a:	685b      	ldr	r3, [r3, #4]
    ca5c:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    ca5e:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    ca60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca62:	009b      	lsls	r3, r3, #2
    ca64:	9a06      	ldr	r2, [sp, #24]
    ca66:	4413      	add	r3, r2
    ca68:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ca6a:	440a      	add	r2, r1
    ca6c:	601a      	str	r2, [r3, #0]
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    ca6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca70:	3301      	adds	r3, #1
    ca72:	00db      	lsls	r3, r3, #3
    ca74:	9a01      	ldr	r2, [sp, #4]
    ca76:	4413      	add	r3, r2
    ca78:	785b      	ldrb	r3, [r3, #1]
    ca7a:	2b00      	cmp	r3, #0
    ca7c:	d017      	beq.n	caae <FlexCAN_SetRxFifoFilter+0x2c4>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    ca7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca80:	009b      	lsls	r3, r3, #2
    ca82:	9a06      	ldr	r2, [sp, #24]
    ca84:	4413      	add	r3, r2
    ca86:	6819      	ldr	r1, [r3, #0]
    ca88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca8a:	3301      	adds	r3, #1
    ca8c:	00db      	lsls	r3, r3, #3
    ca8e:	9a01      	ldr	r2, [sp, #4]
    ca90:	4413      	add	r3, r2
    ca92:	685b      	ldr	r3, [r3, #4]
    ca94:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    ca96:	041b      	lsls	r3, r3, #16
    ca98:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    ca9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ca9e:	441a      	add	r2, r3
    caa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    caa2:	009b      	lsls	r3, r3, #2
    caa4:	9806      	ldr	r0, [sp, #24]
    caa6:	4403      	add	r3, r0
    caa8:	430a      	orrs	r2, r1
    caaa:	601a      	str	r2, [r3, #0]
    caac:	e016      	b.n	cadc <FlexCAN_SetRxFifoFilter+0x2f2>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    caae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cab0:	009b      	lsls	r3, r3, #2
    cab2:	9a06      	ldr	r2, [sp, #24]
    cab4:	4413      	add	r3, r2
    cab6:	6819      	ldr	r1, [r3, #0]
    cab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    caba:	3301      	adds	r3, #1
    cabc:	00db      	lsls	r3, r3, #3
    cabe:	9a01      	ldr	r2, [sp, #4]
    cac0:	4413      	add	r3, r2
    cac2:	685b      	ldr	r3, [r3, #4]
    cac4:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    cac6:	041b      	lsls	r3, r3, #16
    cac8:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    cacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cace:	441a      	add	r2, r3
    cad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cad2:	009b      	lsls	r3, r3, #2
    cad4:	9806      	ldr	r0, [sp, #24]
    cad6:	4403      	add	r3, r0
    cad8:	430a      	orrs	r2, r1
    cada:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 2U].isExtendedFrame)
    cadc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cade:	3302      	adds	r3, #2
    cae0:	00db      	lsls	r3, r3, #3
    cae2:	9a01      	ldr	r2, [sp, #4]
    cae4:	4413      	add	r3, r2
    cae6:	785b      	ldrb	r3, [r3, #1]
    cae8:	2b00      	cmp	r3, #0
    caea:	d01b      	beq.n	cb24 <FlexCAN_SetRxFifoFilter+0x33a>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    caec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    caee:	009b      	lsls	r3, r3, #2
    caf0:	9a06      	ldr	r2, [sp, #24]
    caf2:	4413      	add	r3, r2
    caf4:	6819      	ldr	r1, [r3, #0]
    caf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    caf8:	3302      	adds	r3, #2
    cafa:	00db      	lsls	r3, r3, #3
    cafc:	9a01      	ldr	r2, [sp, #4]
    cafe:	4413      	add	r3, r2
    cb00:	685b      	ldr	r3, [r3, #4]
    cb02:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    cb04:	021b      	lsls	r3, r3, #8
    cb06:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb0a:	441a      	add	r2, r3
    cb0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb0e:	009b      	lsls	r3, r3, #2
    cb10:	9806      	ldr	r0, [sp, #24]
    cb12:	4403      	add	r3, r0
    cb14:	430a      	orrs	r2, r1
    cb16:	601a      	str	r2, [r3, #0]
    cb18:	e01a      	b.n	cb50 <FlexCAN_SetRxFifoFilter+0x366>
    cb1a:	bf00      	nop
    cb1c:	3ff80000 	.word	0x3ff80000
    cb20:	3fff0000 	.word	0x3fff0000
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    cb24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb26:	009b      	lsls	r3, r3, #2
    cb28:	9a06      	ldr	r2, [sp, #24]
    cb2a:	4413      	add	r3, r2
    cb2c:	6819      	ldr	r1, [r3, #0]
    cb2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb30:	3302      	adds	r3, #2
    cb32:	00db      	lsls	r3, r3, #3
    cb34:	9a01      	ldr	r2, [sp, #4]
    cb36:	4413      	add	r3, r2
    cb38:	685b      	ldr	r3, [r3, #4]
    cb3a:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    cb3c:	021b      	lsls	r3, r3, #8
    cb3e:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    cb40:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb42:	441a      	add	r2, r3
    cb44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb46:	009b      	lsls	r3, r3, #2
    cb48:	9806      	ldr	r0, [sp, #24]
    cb4a:	4403      	add	r3, r0
    cb4c:	430a      	orrs	r2, r1
    cb4e:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 3U].isExtendedFrame)
    cb50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb52:	3303      	adds	r3, #3
    cb54:	00db      	lsls	r3, r3, #3
    cb56:	9a01      	ldr	r2, [sp, #4]
    cb58:	4413      	add	r3, r2
    cb5a:	785b      	ldrb	r3, [r3, #1]
    cb5c:	2b00      	cmp	r3, #0
    cb5e:	d015      	beq.n	cb8c <FlexCAN_SetRxFifoFilter+0x3a2>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cb60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb62:	009b      	lsls	r3, r3, #2
    cb64:	9a06      	ldr	r2, [sp, #24]
    cb66:	4413      	add	r3, r2
    cb68:	6819      	ldr	r1, [r3, #0]
    cb6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb6c:	3303      	adds	r3, #3
    cb6e:	00db      	lsls	r3, r3, #3
    cb70:	9a01      	ldr	r2, [sp, #4]
    cb72:	4413      	add	r3, r2
    cb74:	685b      	ldr	r3, [r3, #4]
    cb76:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    cb78:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb7c:	441a      	add	r2, r3
    cb7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb80:	009b      	lsls	r3, r3, #2
    cb82:	9806      	ldr	r0, [sp, #24]
    cb84:	4403      	add	r3, r0
    cb86:	430a      	orrs	r2, r1
    cb88:	601a      	str	r2, [r3, #0]
    cb8a:	e014      	b.n	cbb6 <FlexCAN_SetRxFifoFilter+0x3cc>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 +
    cb8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb8e:	009b      	lsls	r3, r3, #2
    cb90:	9a06      	ldr	r2, [sp, #24]
    cb92:	4413      	add	r3, r2
    cb94:	6819      	ldr	r1, [r3, #0]
                                      (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    cb96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb98:	3303      	adds	r3, #3
    cb9a:	00db      	lsls	r3, r3, #3
    cb9c:	9a01      	ldr	r2, [sp, #4]
    cb9e:	4413      	add	r3, r2
    cba0:	685b      	ldr	r3, [r3, #4]
    cba2:	08db      	lsrs	r3, r3, #3
                                        FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                       ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    cba4:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 +
    cba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cba8:	441a      	add	r2, r3
    cbaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cbac:	009b      	lsls	r3, r3, #2
    cbae:	9806      	ldr	r0, [sp, #24]
    cbb0:	4403      	add	r3, r0
    cbb2:	430a      	orrs	r2, r1
    cbb4:	601a      	str	r2, [r3, #0]
                                      );
                }

                j = j + 4U;
    cbb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cbb8:	3304      	adds	r3, #4
    cbba:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    cbbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cbbe:	3301      	adds	r3, #1
    cbc0:	930b      	str	r3, [sp, #44]	; 0x2c
    cbc2:	9b05      	ldr	r3, [sp, #20]
    cbc4:	3301      	adds	r3, #1
    cbc6:	00db      	lsls	r3, r3, #3
    cbc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cbca:	429a      	cmp	r2, r3
    cbcc:	f4ff af2b 	bcc.w	ca26 <FlexCAN_SetRxFifoFilter+0x23c>
            }
            break;
    cbd0:	e00b      	b.n	cbea <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_D):
            /* All frames rejected.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    cbd2:	f000 fde3 	bl	d79c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    cbd6:	9b03      	ldr	r3, [sp, #12]
    cbd8:	681b      	ldr	r3, [r3, #0]
    cbda:	f443 7240 	orr.w	r2, r3, #768	; 0x300
            (base->MCR) =
    cbde:	9b03      	ldr	r3, [sp, #12]
    cbe0:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_D)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    cbe2:	f000 fe07 	bl	d7f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            break;
    cbe6:	e000      	b.n	cbea <FlexCAN_SetRxFifoFilter+0x400>
        default:
            /* Should not get here */
            break;
    cbe8:	bf00      	nop
    }
}
    cbea:	bf00      	nop
    cbec:	b00d      	add	sp, #52	; 0x34
    cbee:	f85d fb04 	ldr.w	pc, [sp], #4

0000cbf2 <FlexCAN_ReadRxFifo>:
 * Description   : Read Rx FIFO data.
 * This function will copy MB[0] data field into user's buffer.
 *
 *END**************************************************************************/
void FlexCAN_ReadRxFifo(const FLEXCAN_Type * base, Flexcan_Ip_MsgBuffType * rxFifo)
{
    cbf2:	b500      	push	{lr}
    cbf4:	b08b      	sub	sp, #44	; 0x2c
    cbf6:	9001      	str	r0, [sp, #4]
    cbf8:	9100      	str	r1, [sp, #0]
    uint32 x;
    uint8 Index;
    const uint8 * p;
    #endif

    volatile const uint32 * flexcan_mb = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    cbfa:	9b01      	ldr	r3, [sp, #4]
    cbfc:	3380      	adds	r3, #128	; 0x80
    cbfe:	9307      	str	r3, [sp, #28]
    volatile const uint32 * flexcan_mb_id = &flexcan_mb[1];
    cc00:	9b07      	ldr	r3, [sp, #28]
    cc02:	3304      	adds	r3, #4
    cc04:	9306      	str	r3, [sp, #24]
    volatile const uint32 * flexcan_mb_data_32 = &flexcan_mb[2];
    cc06:	9b07      	ldr	r3, [sp, #28]
    cc08:	3308      	adds	r3, #8
    cc0a:	9305      	str	r3, [sp, #20]
    uint32 * msgData_32 = NULL_PTR;
    cc0c:	2300      	movs	r3, #0
    cc0e:	9304      	str	r3, [sp, #16]
    uint8 flexcan_mb_dlc_value = (uint8)(((*flexcan_mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    cc10:	9b07      	ldr	r3, [sp, #28]
    cc12:	681b      	ldr	r3, [r3, #0]
    cc14:	0c1b      	lsrs	r3, r3, #16
    cc16:	b2db      	uxtb	r3, r3
    cc18:	f003 030f 	and.w	r3, r3, #15
    cc1c:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 can_real_payload = FlexCAN_ComputePayloadSize(flexcan_mb_dlc_value);
    cc20:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc24:	4618      	mov	r0, r3
    cc26:	f7fe fe6c 	bl	b902 <FlexCAN_ComputePayloadSize>
    cc2a:	4603      	mov	r3, r0
    cc2c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(rxFifo != NULL_PTR);
    #endif
    msgData_32 = (uint32 *)(rxFifo->data);
    cc30:	9b00      	ldr	r3, [sp, #0]
    cc32:	3308      	adds	r3, #8
    cc34:	9304      	str	r3, [sp, #16]
       Check if the length of received data packet bigger than the maximum length accepted,
       then processing flow shall continue with the maximum length defined by configuration.
       Legacy FIFO just support in normal mode.
    */
    /* no need to check if FD enabled or not because this function just is invoked when legacy fifo enabled only ! */
    if (can_real_payload > 8U)
    cc36:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    cc3a:	2b08      	cmp	r3, #8
    cc3c:	d902      	bls.n	cc44 <FlexCAN_ReadRxFifo+0x52>
    {
        can_real_payload = 8U;
    cc3e:	2308      	movs	r3, #8
    cc40:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }

    rxFifo->dataLen = can_real_payload;
    cc44:	9b00      	ldr	r3, [sp, #0]
    cc46:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    cc4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    rxFifo->cs = *flexcan_mb;
    cc4e:	9b07      	ldr	r3, [sp, #28]
    cc50:	681a      	ldr	r2, [r3, #0]
    cc52:	9b00      	ldr	r3, [sp, #0]
    cc54:	601a      	str	r2, [r3, #0]
    if ((rxFifo->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    cc56:	9b00      	ldr	r3, [sp, #0]
    cc58:	681b      	ldr	r3, [r3, #0]
    cc5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    cc5e:	2b00      	cmp	r3, #0
    cc60:	d004      	beq.n	cc6c <FlexCAN_ReadRxFifo+0x7a>
    {
        rxFifo->msgId = *flexcan_mb_id;
    cc62:	9b06      	ldr	r3, [sp, #24]
    cc64:	681a      	ldr	r2, [r3, #0]
    cc66:	9b00      	ldr	r3, [sp, #0]
    cc68:	605a      	str	r2, [r3, #4]
    cc6a:	e004      	b.n	cc76 <FlexCAN_ReadRxFifo+0x84>
    }
    else
    {
        rxFifo->msgId = (*flexcan_mb_id) >> FLEXCAN_IP_ID_STD_SHIFT;
    cc6c:	9b06      	ldr	r3, [sp, #24]
    cc6e:	681b      	ldr	r3, [r3, #0]
    cc70:	0c9a      	lsrs	r2, r3, #18
    cc72:	9b00      	ldr	r3, [sp, #0]
    cc74:	605a      	str	r2, [r3, #4]
    }
    /* Extract the IDHIT */
    rxFifo->id_hit = (uint8)base->RXFIR;
    cc76:	9b01      	ldr	r3, [sp, #4]
    cc78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    cc7a:	b2da      	uxtb	r2, r3
    cc7c:	9b00      	ldr	r3, [sp, #0]
    cc7e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    /* Extract the Time Stamp */
    rxFifo->time_stamp = (uint32)((rxFifo->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    cc82:	9b00      	ldr	r3, [sp, #0]
    cc84:	681b      	ldr	r3, [r3, #0]
    cc86:	b29a      	uxth	r2, r3
    cc88:	9b00      	ldr	r3, [sp, #0]
    cc8a:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, msgData_32[DataByte >> 2U]);
        }
    }
#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
      /* Copy MB[0] data field into user's buffer */
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    cc8c:	2300      	movs	r3, #0
    cc8e:	9309      	str	r3, [sp, #36]	; 0x24
    cc90:	e01f      	b.n	ccd2 <FlexCAN_ReadRxFifo+0xe0>
    {
        MbWord = flexcan_mb_data_32[DataByte >> 2U];
    cc92:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cc94:	089b      	lsrs	r3, r3, #2
    cc96:	009b      	lsls	r3, r3, #2
    cc98:	9a05      	ldr	r2, [sp, #20]
    cc9a:	4413      	add	r3, r2
    cc9c:	681b      	ldr	r3, [r3, #0]
    cc9e:	9302      	str	r3, [sp, #8]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (msgData_32[DataByte >> 2U]));
    cca0:	9b02      	ldr	r3, [sp, #8]
    cca2:	0e1a      	lsrs	r2, r3, #24
    cca4:	9b02      	ldr	r3, [sp, #8]
    cca6:	0a1b      	lsrs	r3, r3, #8
    cca8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    ccac:	431a      	orrs	r2, r3
    ccae:	9b02      	ldr	r3, [sp, #8]
    ccb0:	021b      	lsls	r3, r3, #8
    ccb2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    ccb6:	ea42 0103 	orr.w	r1, r2, r3
    ccba:	9b02      	ldr	r3, [sp, #8]
    ccbc:	061a      	lsls	r2, r3, #24
    ccbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ccc0:	089b      	lsrs	r3, r3, #2
    ccc2:	009b      	lsls	r3, r3, #2
    ccc4:	9804      	ldr	r0, [sp, #16]
    ccc6:	4403      	add	r3, r0
    ccc8:	430a      	orrs	r2, r1
    ccca:	601a      	str	r2, [r3, #0]
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    cccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ccce:	3304      	adds	r3, #4
    ccd0:	9309      	str	r3, [sp, #36]	; 0x24
    ccd2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    ccd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ccd8:	429a      	cmp	r2, r3
    ccda:	d3da      	bcc.n	cc92 <FlexCAN_ReadRxFifo+0xa0>
    }
#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
}
    ccdc:	bf00      	nop
    ccde:	bf00      	nop
    cce0:	b00b      	add	sp, #44	; 0x2c
    cce2:	f85d fb04 	ldr.w	pc, [sp], #4

0000cce6 <FlexCAN_IsMbOutOfRange>:
    const FLEXCAN_Type * pBase,
    uint8 u8MbIndex,
    boolean bIsLegacyFifoEn,
    uint32 u32MaxMbNum
)
{
    cce6:	b088      	sub	sp, #32
    cce8:	9003      	str	r0, [sp, #12]
    ccea:	9301      	str	r3, [sp, #4]
    ccec:	460b      	mov	r3, r1
    ccee:	f88d 300b 	strb.w	r3, [sp, #11]
    ccf2:	4613      	mov	r3, r2
    ccf4:	f88d 300a 	strb.w	r3, [sp, #10]
    boolean ReturnValue = FALSE;
    ccf8:	2300      	movs	r3, #0
    ccfa:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32NumOfFiFoElement = 0U;
    ccfe:	2300      	movs	r3, #0
    cd00:	9306      	str	r3, [sp, #24]
    uint32 u32NumOfMbOccupiedByFiFo = 0U;
    cd02:	2300      	movs	r3, #0
    cd04:	9305      	str	r3, [sp, #20]

    if (u8MbIndex >= (uint8)u32MaxMbNum)
    cd06:	9b01      	ldr	r3, [sp, #4]
    cd08:	b2db      	uxtb	r3, r3
    cd0a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cd0e:	429a      	cmp	r2, r3
    cd10:	d303      	bcc.n	cd1a <FlexCAN_IsMbOutOfRange+0x34>
    {
       ReturnValue = TRUE;
    cd12:	2301      	movs	r3, #1
    cd14:	f88d 301f 	strb.w	r3, [sp, #31]
    cd18:	e01b      	b.n	cd52 <FlexCAN_IsMbOutOfRange+0x6c>
    }
    /* Check if RX FIFO is enabled*/
    else if (TRUE == bIsLegacyFifoEn)
    cd1a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    cd1e:	2b00      	cmp	r3, #0
    cd20:	d014      	beq.n	cd4c <FlexCAN_IsMbOutOfRange+0x66>
    {
        /* Get the number of RX FIFO Filters*/
        u32NumOfFiFoElement = (((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    cd22:	9b03      	ldr	r3, [sp, #12]
    cd24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    cd26:	0e1b      	lsrs	r3, r3, #24
    cd28:	f003 030f 	and.w	r3, r3, #15
    cd2c:	9306      	str	r3, [sp, #24]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        u32NumOfMbOccupiedByFiFo = 5U + ((((u32NumOfFiFoElement) + 1U) * 8U) / 4U);
    cd2e:	9b06      	ldr	r3, [sp, #24]
    cd30:	3301      	adds	r3, #1
    cd32:	00db      	lsls	r3, r3, #3
    cd34:	089b      	lsrs	r3, r3, #2
    cd36:	3305      	adds	r3, #5
    cd38:	9305      	str	r3, [sp, #20]
        if (u8MbIndex <= u32NumOfMbOccupiedByFiFo)
    cd3a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cd3e:	9a05      	ldr	r2, [sp, #20]
    cd40:	429a      	cmp	r2, r3
    cd42:	d306      	bcc.n	cd52 <FlexCAN_IsMbOutOfRange+0x6c>
        {
            ReturnValue = TRUE;
    cd44:	2301      	movs	r3, #1
    cd46:	f88d 301f 	strb.w	r3, [sp, #31]
    cd4a:	e002      	b.n	cd52 <FlexCAN_IsMbOutOfRange+0x6c>
        }
    }
    else
    {
        ReturnValue = FALSE;
    cd4c:	2300      	movs	r3, #0
    cd4e:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    return ReturnValue;
    cd52:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    cd56:	4618      	mov	r0, r3
    cd58:	b008      	add	sp, #32
    cd5a:	4770      	bx	lr

0000cd5c <FlexCAN_ConfigCtrlOptions>:
 * Description   : configure controller depending on options
 * note: should be call after FD configuration.
 *
 *END**************************************************************************/
void FlexCAN_ConfigCtrlOptions(FLEXCAN_Type * pBase, uint32 u32Options)
{
    cd5c:	b500      	push	{lr}
    cd5e:	b083      	sub	sp, #12
    cd60:	9001      	str	r0, [sp, #4]
    cd62:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON)
    /* If the FD feature is enabled, in order to be ISO-compliant. */
    if ((u32Options & FLEXCAN_IP_ISO_U32) != 0U)
    cd64:	9b00      	ldr	r3, [sp, #0]
    cd66:	f003 0320 	and.w	r3, r3, #32
    cd6a:	2b00      	cmp	r3, #0
    cd6c:	d004      	beq.n	cd78 <FlexCAN_ConfigCtrlOptions+0x1c>
    {
        FlexCAN_SetIsoCan(pBase, TRUE);
    cd6e:	2101      	movs	r1, #1
    cd70:	9801      	ldr	r0, [sp, #4]
    cd72:	f7fe fcd8 	bl	b726 <FlexCAN_SetIsoCan>
    cd76:	e003      	b.n	cd80 <FlexCAN_ConfigCtrlOptions+0x24>
    }
    else
    {
        /* This maybe don't have sense if the Deinit returns the state of registers at init values */
        FlexCAN_SetIsoCan(pBase, FALSE);
    cd78:	2100      	movs	r1, #0
    cd7a:	9801      	ldr	r0, [sp, #4]
    cd7c:	f7fe fcd3 	bl	b726 <FlexCAN_SetIsoCan>
    }
#endif /*(FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON) */
    /* Set Entire Frame Arbitration Field Comparison. */
    if ((u32Options & FLEXCAN_IP_EACEN_U32) != 0U)
    cd80:	9b00      	ldr	r3, [sp, #0]
    cd82:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cd86:	2b00      	cmp	r3, #0
    cd88:	d004      	beq.n	cd94 <FlexCAN_ConfigCtrlOptions+0x38>
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, TRUE);
    cd8a:	2101      	movs	r1, #1
    cd8c:	9801      	ldr	r0, [sp, #4]
    cd8e:	f7fe fce1 	bl	b754 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    cd92:	e003      	b.n	cd9c <FlexCAN_ConfigCtrlOptions+0x40>
    }
    else
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, FALSE);
    cd94:	2100      	movs	r1, #0
    cd96:	9801      	ldr	r0, [sp, #4]
    cd98:	f7fe fcdc 	bl	b754 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    }
#if (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)
    /* Set protocol Exception */
    if ((u32Options & FLEXCAN_IP_PROTOCOL_EXCEPTION_U32) != 0U)
    cd9c:	9b00      	ldr	r3, [sp, #0]
    cd9e:	f003 0308 	and.w	r3, r3, #8
    cda2:	2b00      	cmp	r3, #0
    cda4:	d004      	beq.n	cdb0 <FlexCAN_ConfigCtrlOptions+0x54>
    {
        FlexCAN_SetProtocolException(pBase, TRUE);
    cda6:	2101      	movs	r1, #1
    cda8:	9801      	ldr	r0, [sp, #4]
    cdaa:	f7fe fcea 	bl	b782 <FlexCAN_SetProtocolException>
    cdae:	e003      	b.n	cdb8 <FlexCAN_ConfigCtrlOptions+0x5c>
    }
    else
    {
        FlexCAN_SetProtocolException(pBase, FALSE);
    cdb0:	2100      	movs	r1, #0
    cdb2:	9801      	ldr	r0, [sp, #4]
    cdb4:	f7fe fce5 	bl	b782 <FlexCAN_SetProtocolException>
    }
#endif /* Endif  (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)  */
    /* Set CAN Bit Sampling */
    if (((u32Options & FLEXCAN_IP_THREE_SAMPLES_U32) != 0U) && (0U == (pBase->MCR & FLEXCAN_MCR_FDEN_MASK)))
    cdb8:	9b00      	ldr	r3, [sp, #0]
    cdba:	f003 0302 	and.w	r3, r3, #2
    cdbe:	2b00      	cmp	r3, #0
    cdc0:	d00a      	beq.n	cdd8 <FlexCAN_ConfigCtrlOptions+0x7c>
    cdc2:	9b01      	ldr	r3, [sp, #4]
    cdc4:	681b      	ldr	r3, [r3, #0]
    cdc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    cdca:	2b00      	cmp	r3, #0
    cdcc:	d104      	bne.n	cdd8 <FlexCAN_ConfigCtrlOptions+0x7c>
    {
        FlexCAN_CanBitSampling(pBase, TRUE);
    cdce:	2101      	movs	r1, #1
    cdd0:	9801      	ldr	r0, [sp, #4]
    cdd2:	f7fe fd31 	bl	b838 <FlexCAN_CanBitSampling>
    cdd6:	e003      	b.n	cde0 <FlexCAN_ConfigCtrlOptions+0x84>
    }
    else
    {
        FlexCAN_CanBitSampling(pBase, FALSE);
    cdd8:	2100      	movs	r1, #0
    cdda:	9801      	ldr	r0, [sp, #4]
    cddc:	f7fe fd2c 	bl	b838 <FlexCAN_CanBitSampling>
    }

    /* Set AutoBusOff Recovery */
    if ((u32Options & FLEXCAN_IP_BUSOFF_RECOVERY_U32) != 0U)
    cde0:	9b00      	ldr	r3, [sp, #0]
    cde2:	f003 0304 	and.w	r3, r3, #4
    cde6:	2b00      	cmp	r3, #0
    cde8:	d004      	beq.n	cdf4 <FlexCAN_ConfigCtrlOptions+0x98>
    {
        FlexCAN_SetBusOffAutorecovery(pBase, TRUE);
    cdea:	2101      	movs	r1, #1
    cdec:	9801      	ldr	r0, [sp, #4]
    cdee:	f7fe fcf6 	bl	b7de <FlexCAN_SetBusOffAutorecovery>
    cdf2:	e003      	b.n	cdfc <FlexCAN_ConfigCtrlOptions+0xa0>
    }
    else
    {
        FlexCAN_SetBusOffAutorecovery(pBase, FALSE);
    cdf4:	2100      	movs	r1, #0
    cdf6:	9801      	ldr	r0, [sp, #4]
    cdf8:	f7fe fcf1 	bl	b7de <FlexCAN_SetBusOffAutorecovery>
    }
    /* Set Remote Request Store for received of Remote Request Frames */
    if ((u32Options & FLEXCAN_IP_REM_STORE_U32) != 0U)
    cdfc:	9b00      	ldr	r3, [sp, #0]
    cdfe:	f003 0301 	and.w	r3, r3, #1
    ce02:	2b00      	cmp	r3, #0
    ce04:	d004      	beq.n	ce10 <FlexCAN_ConfigCtrlOptions+0xb4>
    {
        FlexCAN_SetRemoteReqStore(pBase, TRUE);
    ce06:	2101      	movs	r1, #1
    ce08:	9801      	ldr	r0, [sp, #4]
    ce0a:	f7fe fcd1 	bl	b7b0 <FlexCAN_SetRemoteReqStore>
    ce0e:	e003      	b.n	ce18 <FlexCAN_ConfigCtrlOptions+0xbc>
    }
    else
    {
        FlexCAN_SetRemoteReqStore(pBase, FALSE);
    ce10:	2100      	movs	r1, #0
    ce12:	9801      	ldr	r0, [sp, #4]
    ce14:	f7fe fccc 	bl	b7b0 <FlexCAN_SetRemoteReqStore>
    }
#if (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)
    /* Set Edge Filter */
    if ((u32Options & FLEXCAN_IP_EDGE_FILTER_U32) != 0U)
    ce18:	9b00      	ldr	r3, [sp, #0]
    ce1a:	f003 0310 	and.w	r3, r3, #16
    ce1e:	2b00      	cmp	r3, #0
    ce20:	d004      	beq.n	ce2c <FlexCAN_ConfigCtrlOptions+0xd0>
    {
        FlexCAN_SetEdgeFilter(pBase, TRUE);
    ce22:	2101      	movs	r1, #1
    ce24:	9801      	ldr	r0, [sp, #4]
    ce26:	f7fe fcf0 	bl	b80a <FlexCAN_SetEdgeFilter>
    else
    {
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    }
#endif /* End of (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)  */
}
    ce2a:	e003      	b.n	ce34 <FlexCAN_ConfigCtrlOptions+0xd8>
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    ce2c:	2100      	movs	r1, #0
    ce2e:	9801      	ldr	r0, [sp, #4]
    ce30:	f7fe fceb 	bl	b80a <FlexCAN_SetEdgeFilter>
}
    ce34:	bf00      	nop
    ce36:	b003      	add	sp, #12
    ce38:	f85d fb04 	ldr.w	pc, [sp], #4

0000ce3c <FlexCAN_ResetImaskBuff>:
 * Function Name : FlexCAN_ResetImaskBuff (uses in FlexCAN_Ip_Init function only)
 * Description   : Reset Imask Buffers.
 *
 *END**************************************************************************/
void FlexCAN_ResetImaskBuff(uint8 Instance)
{
    ce3c:	b084      	sub	sp, #16
    ce3e:	4603      	mov	r3, r0
    ce40:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ImaskCnt = 0U;
    ce44:	2300      	movs	r3, #0
    ce46:	f88d 300f 	strb.w	r3, [sp, #15]

    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    ce4a:	2300      	movs	r3, #0
    ce4c:	f88d 300f 	strb.w	r3, [sp, #15]
    ce50:	e00d      	b.n	ce6e <FlexCAN_ResetImaskBuff+0x32>
    {
        FlexCAN_Ip_au32ImaskBuff[Instance][ImaskCnt] = 0U;
    ce52:	f89d 2007 	ldrb.w	r2, [sp, #7]
    ce56:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ce5a:	4909      	ldr	r1, [pc, #36]	; (ce80 <FlexCAN_ResetImaskBuff+0x44>)
    ce5c:	4413      	add	r3, r2
    ce5e:	2200      	movs	r2, #0
    ce60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    ce64:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ce68:	3301      	adds	r3, #1
    ce6a:	f88d 300f 	strb.w	r3, [sp, #15]
    ce6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ce72:	2b00      	cmp	r3, #0
    ce74:	d0ed      	beq.n	ce52 <FlexCAN_ResetImaskBuff+0x16>
    }
}
    ce76:	bf00      	nop
    ce78:	bf00      	nop
    ce7a:	b004      	add	sp, #16
    ce7c:	4770      	bx	lr
    ce7e:	bf00      	nop
    ce80:	1fff8fc4 	.word	0x1fff8fc4

0000ce84 <CAN0_ORED_IRQHandler>:

#else

/* Implementation of CAN0 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN0_ORED_IRQHandler)
{
    ce84:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(0U);
    ce86:	2000      	movs	r0, #0
    ce88:	f7fd fb2a 	bl	a4e0 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    ce8c:	f3bf 8f4f 	dsb	sy
}
    ce90:	bf00      	nop
    ce92:	bd08      	pop	{r3, pc}

0000ce94 <CAN0_Error_IRQHandler>:

/* Implementation of CAN0 handler named in startup code for processing of Errors reporting. */
ISR(CAN0_Error_IRQHandler)
{
    ce94:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(0U);
    ce96:	2000      	movs	r0, #0
    ce98:	f7fd fac2 	bl	a420 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    ce9c:	f3bf 8f4f 	dsb	sy
}
    cea0:	bf00      	nop
    cea2:	bd08      	pop	{r3, pc}

0000cea4 <CAN0_ORED_0_15_MB_IRQHandler>:
}
#endif
/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN0_ORED_0_15_MB_IRQHandler)
{
    cea4:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 0U, 15U);
    cea6:	220f      	movs	r2, #15
    cea8:	2100      	movs	r1, #0
    ceaa:	2000      	movs	r0, #0
    ceac:	f7fd f9dc 	bl	a268 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    ceb0:	f3bf 8f4f 	dsb	sy
}
    ceb4:	bf00      	nop
    ceb6:	bd08      	pop	{r3, pc}

0000ceb8 <CAN0_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN0_ORED_16_31_MB_IRQHandler)
{
    ceb8:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 16U, 31U);
    ceba:	221f      	movs	r2, #31
    cebc:	2110      	movs	r1, #16
    cebe:	2000      	movs	r0, #0
    cec0:	f7fd f9d2 	bl	a268 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    cec4:	f3bf 8f4f 	dsb	sy
}
    cec8:	bf00      	nop
    ceca:	bd08      	pop	{r3, pc}

0000cecc <CAN1_ORED_IRQHandler>:
#endif /* (defined(S32K142W) || defined(S32K144W) || defined(S32M243) || defined(S32M244)) */

#if (FLEXCAN_INSTANCE_COUNT > 1U)
/* Implementation of CAN1 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN1_ORED_IRQHandler)
{
    cecc:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(1U);
    cece:	2001      	movs	r0, #1
    ced0:	f7fd fb06 	bl	a4e0 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    ced4:	f3bf 8f4f 	dsb	sy
}
    ced8:	bf00      	nop
    ceda:	bd08      	pop	{r3, pc}

0000cedc <CAN1_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN1_Error_IRQHandler)
{
    cedc:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(1U);
    cede:	2001      	movs	r0, #1
    cee0:	f7fd fa9e 	bl	a420 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    cee4:	f3bf 8f4f 	dsb	sy
}
    cee8:	bf00      	nop
    ceea:	bd08      	pop	{r3, pc}

0000ceec <CAN1_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN1_ORED_0_15_MB_IRQHandler)
{
    ceec:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 0U, 15U);
    ceee:	220f      	movs	r2, #15
    cef0:	2100      	movs	r1, #0
    cef2:	2001      	movs	r0, #1
    cef4:	f7fd f9b8 	bl	a268 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    cef8:	f3bf 8f4f 	dsb	sy
}
    cefc:	bf00      	nop
    cefe:	bd08      	pop	{r3, pc}

0000cf00 <CAN1_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN1_ORED_16_31_MB_IRQHandler)
{
    cf00:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 16U, 31U);
    cf02:	221f      	movs	r2, #31
    cf04:	2110      	movs	r1, #16
    cf06:	2001      	movs	r0, #1
    cf08:	f7fd f9ae 	bl	a268 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    cf0c:	f3bf 8f4f 	dsb	sy
}
    cf10:	bf00      	nop
    cf12:	bd08      	pop	{r3, pc}

0000cf14 <CAN2_ORED_IRQHandler>:
#endif /* (FLEXCAN_INSTANCE_COUNT > 1U) */

#if (FLEXCAN_INSTANCE_COUNT > 2U)
/* Implementation of CAN2 handler named in startup code for processing of Errors and Bus Off reporting. */
ISR(CAN2_ORED_IRQHandler)
{
    cf14:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(2U);
    cf16:	2002      	movs	r0, #2
    cf18:	f7fd fae2 	bl	a4e0 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    cf1c:	f3bf 8f4f 	dsb	sy
}
    cf20:	bf00      	nop
    cf22:	bd08      	pop	{r3, pc}

0000cf24 <CAN2_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN2_Error_IRQHandler)
{
    cf24:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(2U);
    cf26:	2002      	movs	r0, #2
    cf28:	f7fd fa7a 	bl	a420 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    cf2c:	f3bf 8f4f 	dsb	sy
}
    cf30:	bf00      	nop
    cf32:	bd08      	pop	{r3, pc}

0000cf34 <CAN2_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN2 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN2_ORED_0_15_MB_IRQHandler)
{
    cf34:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(2U, 0U, 15U);
    cf36:	220f      	movs	r2, #15
    cf38:	2100      	movs	r1, #0
    cf3a:	2002      	movs	r0, #2
    cf3c:	f7fd f994 	bl	a268 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    cf40:	f3bf 8f4f 	dsb	sy
}
    cf44:	bf00      	nop
    cf46:	bd08      	pop	{r3, pc}

0000cf48 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    cf48:	b500      	push	{lr}
    cf4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf4c:	f7f3 ff50 	bl	df0 <Sys_GetCoreID>
    cf50:	4603      	mov	r3, r0
    cf52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId])
    cf54:	4a10      	ldr	r2, [pc, #64]	; (cf98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    cf56:	9b01      	ldr	r3, [sp, #4]
    cf58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf5c:	2b00      	cmp	r3, #0
    cf5e:	d10d      	bne.n	cf7c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cf60:	f7f3 fdee 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    cf64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cf66:	9b00      	ldr	r3, [sp, #0]
    cf68:	f003 0301 	and.w	r3, r3, #1
    cf6c:	2b00      	cmp	r3, #0
    cf6e:	d100      	bne.n	cf72 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cf70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    cf72:	490a      	ldr	r1, [pc, #40]	; (cf9c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x54>)
    cf74:	9b01      	ldr	r3, [sp, #4]
    cf76:	9a00      	ldr	r2, [sp, #0]
    cf78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]++;
    cf7c:	4a06      	ldr	r2, [pc, #24]	; (cf98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    cf7e:	9b01      	ldr	r3, [sp, #4]
    cf80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf84:	1c5a      	adds	r2, r3, #1
    cf86:	4904      	ldr	r1, [pc, #16]	; (cf98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    cf88:	9b01      	ldr	r3, [sp, #4]
    cf8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cf8e:	bf00      	nop
    cf90:	b003      	add	sp, #12
    cf92:	f85d fb04 	ldr.w	pc, [sp], #4
    cf96:	bf00      	nop
    cf98:	1fff8fd4 	.word	0x1fff8fd4
    cf9c:	1fff8fd0 	.word	0x1fff8fd0

0000cfa0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    cfa0:	b500      	push	{lr}
    cfa2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cfa4:	f7f3 ff24 	bl	df0 <Sys_GetCoreID>
    cfa8:	4603      	mov	r3, r0
    cfaa:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]--;
    cfac:	4a0d      	ldr	r2, [pc, #52]	; (cfe4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    cfae:	9b01      	ldr	r3, [sp, #4]
    cfb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfb4:	1e5a      	subs	r2, r3, #1
    cfb6:	490b      	ldr	r1, [pc, #44]	; (cfe4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    cfb8:	9b01      	ldr	r3, [sp, #4]
    cfba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    cfbe:	4a0a      	ldr	r2, [pc, #40]	; (cfe8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x48>)
    cfc0:	9b01      	ldr	r3, [sp, #4]
    cfc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfc6:	f003 0301 	and.w	r3, r3, #1
    cfca:	2b00      	cmp	r3, #0
    cfcc:	d106      	bne.n	cfdc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    cfce:	4a05      	ldr	r2, [pc, #20]	; (cfe4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    cfd0:	9b01      	ldr	r3, [sp, #4]
    cfd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfd6:	2b00      	cmp	r3, #0
    cfd8:	d100      	bne.n	cfdc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cfda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cfdc:	bf00      	nop
    cfde:	b003      	add	sp, #12
    cfe0:	f85d fb04 	ldr.w	pc, [sp], #4
    cfe4:	1fff8fd4 	.word	0x1fff8fd4
    cfe8:	1fff8fd0 	.word	0x1fff8fd0

0000cfec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    cfec:	b500      	push	{lr}
    cfee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cff0:	f7f3 fefe 	bl	df0 <Sys_GetCoreID>
    cff4:	4603      	mov	r3, r0
    cff6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId])
    cff8:	4a10      	ldr	r2, [pc, #64]	; (d03c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    cffa:	9b01      	ldr	r3, [sp, #4]
    cffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d000:	2b00      	cmp	r3, #0
    d002:	d10d      	bne.n	d020 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d004:	f7f3 fd9c 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    d008:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d00a:	9b00      	ldr	r3, [sp, #0]
    d00c:	f003 0301 	and.w	r3, r3, #1
    d010:	2b00      	cmp	r3, #0
    d012:	d100      	bne.n	d016 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d014:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    d016:	490a      	ldr	r1, [pc, #40]	; (d040 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x54>)
    d018:	9b01      	ldr	r3, [sp, #4]
    d01a:	9a00      	ldr	r2, [sp, #0]
    d01c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]++;
    d020:	4a06      	ldr	r2, [pc, #24]	; (d03c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    d022:	9b01      	ldr	r3, [sp, #4]
    d024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d028:	1c5a      	adds	r2, r3, #1
    d02a:	4904      	ldr	r1, [pc, #16]	; (d03c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    d02c:	9b01      	ldr	r3, [sp, #4]
    d02e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d032:	bf00      	nop
    d034:	b003      	add	sp, #12
    d036:	f85d fb04 	ldr.w	pc, [sp], #4
    d03a:	bf00      	nop
    d03c:	1fff8fdc 	.word	0x1fff8fdc
    d040:	1fff8fd8 	.word	0x1fff8fd8

0000d044 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    d044:	b500      	push	{lr}
    d046:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d048:	f7f3 fed2 	bl	df0 <Sys_GetCoreID>
    d04c:	4603      	mov	r3, r0
    d04e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]--;
    d050:	4a0d      	ldr	r2, [pc, #52]	; (d088 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    d052:	9b01      	ldr	r3, [sp, #4]
    d054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d058:	1e5a      	subs	r2, r3, #1
    d05a:	490b      	ldr	r1, [pc, #44]	; (d088 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    d05c:	9b01      	ldr	r3, [sp, #4]
    d05e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    d062:	4a0a      	ldr	r2, [pc, #40]	; (d08c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x48>)
    d064:	9b01      	ldr	r3, [sp, #4]
    d066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d06a:	f003 0301 	and.w	r3, r3, #1
    d06e:	2b00      	cmp	r3, #0
    d070:	d106      	bne.n	d080 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    d072:	4a05      	ldr	r2, [pc, #20]	; (d088 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    d074:	9b01      	ldr	r3, [sp, #4]
    d076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d07a:	2b00      	cmp	r3, #0
    d07c:	d100      	bne.n	d080 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d07e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d080:	bf00      	nop
    d082:	b003      	add	sp, #12
    d084:	f85d fb04 	ldr.w	pc, [sp], #4
    d088:	1fff8fdc 	.word	0x1fff8fdc
    d08c:	1fff8fd8 	.word	0x1fff8fd8

0000d090 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    d090:	b500      	push	{lr}
    d092:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d094:	f7f3 feac 	bl	df0 <Sys_GetCoreID>
    d098:	4603      	mov	r3, r0
    d09a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId])
    d09c:	4a10      	ldr	r2, [pc, #64]	; (d0e0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    d09e:	9b01      	ldr	r3, [sp, #4]
    d0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0a4:	2b00      	cmp	r3, #0
    d0a6:	d10d      	bne.n	d0c4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d0a8:	f7f3 fd4a 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    d0ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d0ae:	9b00      	ldr	r3, [sp, #0]
    d0b0:	f003 0301 	and.w	r3, r3, #1
    d0b4:	2b00      	cmp	r3, #0
    d0b6:	d100      	bne.n	d0ba <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d0b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    d0ba:	490a      	ldr	r1, [pc, #40]	; (d0e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x54>)
    d0bc:	9b01      	ldr	r3, [sp, #4]
    d0be:	9a00      	ldr	r2, [sp, #0]
    d0c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]++;
    d0c4:	4a06      	ldr	r2, [pc, #24]	; (d0e0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    d0c6:	9b01      	ldr	r3, [sp, #4]
    d0c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0cc:	1c5a      	adds	r2, r3, #1
    d0ce:	4904      	ldr	r1, [pc, #16]	; (d0e0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    d0d0:	9b01      	ldr	r3, [sp, #4]
    d0d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d0d6:	bf00      	nop
    d0d8:	b003      	add	sp, #12
    d0da:	f85d fb04 	ldr.w	pc, [sp], #4
    d0de:	bf00      	nop
    d0e0:	1fff8fe4 	.word	0x1fff8fe4
    d0e4:	1fff8fe0 	.word	0x1fff8fe0

0000d0e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    d0e8:	b500      	push	{lr}
    d0ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d0ec:	f7f3 fe80 	bl	df0 <Sys_GetCoreID>
    d0f0:	4603      	mov	r3, r0
    d0f2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]--;
    d0f4:	4a0d      	ldr	r2, [pc, #52]	; (d12c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    d0f6:	9b01      	ldr	r3, [sp, #4]
    d0f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0fc:	1e5a      	subs	r2, r3, #1
    d0fe:	490b      	ldr	r1, [pc, #44]	; (d12c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    d100:	9b01      	ldr	r3, [sp, #4]
    d102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    d106:	4a0a      	ldr	r2, [pc, #40]	; (d130 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x48>)
    d108:	9b01      	ldr	r3, [sp, #4]
    d10a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d10e:	f003 0301 	and.w	r3, r3, #1
    d112:	2b00      	cmp	r3, #0
    d114:	d106      	bne.n	d124 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    d116:	4a05      	ldr	r2, [pc, #20]	; (d12c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    d118:	9b01      	ldr	r3, [sp, #4]
    d11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d11e:	2b00      	cmp	r3, #0
    d120:	d100      	bne.n	d124 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d122:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d124:	bf00      	nop
    d126:	b003      	add	sp, #12
    d128:	f85d fb04 	ldr.w	pc, [sp], #4
    d12c:	1fff8fe4 	.word	0x1fff8fe4
    d130:	1fff8fe0 	.word	0x1fff8fe0

0000d134 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    d134:	b500      	push	{lr}
    d136:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d138:	f7f3 fe5a 	bl	df0 <Sys_GetCoreID>
    d13c:	4603      	mov	r3, r0
    d13e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId])
    d140:	4a10      	ldr	r2, [pc, #64]	; (d184 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    d142:	9b01      	ldr	r3, [sp, #4]
    d144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d148:	2b00      	cmp	r3, #0
    d14a:	d10d      	bne.n	d168 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d14c:	f7f3 fcf8 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    d150:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d152:	9b00      	ldr	r3, [sp, #0]
    d154:	f003 0301 	and.w	r3, r3, #1
    d158:	2b00      	cmp	r3, #0
    d15a:	d100      	bne.n	d15e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d15c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    d15e:	490a      	ldr	r1, [pc, #40]	; (d188 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x54>)
    d160:	9b01      	ldr	r3, [sp, #4]
    d162:	9a00      	ldr	r2, [sp, #0]
    d164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]++;
    d168:	4a06      	ldr	r2, [pc, #24]	; (d184 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    d16a:	9b01      	ldr	r3, [sp, #4]
    d16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d170:	1c5a      	adds	r2, r3, #1
    d172:	4904      	ldr	r1, [pc, #16]	; (d184 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    d174:	9b01      	ldr	r3, [sp, #4]
    d176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d17a:	bf00      	nop
    d17c:	b003      	add	sp, #12
    d17e:	f85d fb04 	ldr.w	pc, [sp], #4
    d182:	bf00      	nop
    d184:	1fff8fec 	.word	0x1fff8fec
    d188:	1fff8fe8 	.word	0x1fff8fe8

0000d18c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    d18c:	b500      	push	{lr}
    d18e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d190:	f7f3 fe2e 	bl	df0 <Sys_GetCoreID>
    d194:	4603      	mov	r3, r0
    d196:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]--;
    d198:	4a0d      	ldr	r2, [pc, #52]	; (d1d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    d19a:	9b01      	ldr	r3, [sp, #4]
    d19c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1a0:	1e5a      	subs	r2, r3, #1
    d1a2:	490b      	ldr	r1, [pc, #44]	; (d1d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    d1a4:	9b01      	ldr	r3, [sp, #4]
    d1a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    d1aa:	4a0a      	ldr	r2, [pc, #40]	; (d1d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x48>)
    d1ac:	9b01      	ldr	r3, [sp, #4]
    d1ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1b2:	f003 0301 	and.w	r3, r3, #1
    d1b6:	2b00      	cmp	r3, #0
    d1b8:	d106      	bne.n	d1c8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    d1ba:	4a05      	ldr	r2, [pc, #20]	; (d1d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    d1bc:	9b01      	ldr	r3, [sp, #4]
    d1be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1c2:	2b00      	cmp	r3, #0
    d1c4:	d100      	bne.n	d1c8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d1c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d1c8:	bf00      	nop
    d1ca:	b003      	add	sp, #12
    d1cc:	f85d fb04 	ldr.w	pc, [sp], #4
    d1d0:	1fff8fec 	.word	0x1fff8fec
    d1d4:	1fff8fe8 	.word	0x1fff8fe8

0000d1d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    d1d8:	b500      	push	{lr}
    d1da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d1dc:	f7f3 fe08 	bl	df0 <Sys_GetCoreID>
    d1e0:	4603      	mov	r3, r0
    d1e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId])
    d1e4:	4a10      	ldr	r2, [pc, #64]	; (d228 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    d1e6:	9b01      	ldr	r3, [sp, #4]
    d1e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1ec:	2b00      	cmp	r3, #0
    d1ee:	d10d      	bne.n	d20c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d1f0:	f7f3 fca6 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    d1f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d1f6:	9b00      	ldr	r3, [sp, #0]
    d1f8:	f003 0301 	and.w	r3, r3, #1
    d1fc:	2b00      	cmp	r3, #0
    d1fe:	d100      	bne.n	d202 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d200:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    d202:	490a      	ldr	r1, [pc, #40]	; (d22c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x54>)
    d204:	9b01      	ldr	r3, [sp, #4]
    d206:	9a00      	ldr	r2, [sp, #0]
    d208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]++;
    d20c:	4a06      	ldr	r2, [pc, #24]	; (d228 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    d20e:	9b01      	ldr	r3, [sp, #4]
    d210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d214:	1c5a      	adds	r2, r3, #1
    d216:	4904      	ldr	r1, [pc, #16]	; (d228 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    d218:	9b01      	ldr	r3, [sp, #4]
    d21a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d21e:	bf00      	nop
    d220:	b003      	add	sp, #12
    d222:	f85d fb04 	ldr.w	pc, [sp], #4
    d226:	bf00      	nop
    d228:	1fff8ff4 	.word	0x1fff8ff4
    d22c:	1fff8ff0 	.word	0x1fff8ff0

0000d230 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    d230:	b500      	push	{lr}
    d232:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d234:	f7f3 fddc 	bl	df0 <Sys_GetCoreID>
    d238:	4603      	mov	r3, r0
    d23a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]--;
    d23c:	4a0d      	ldr	r2, [pc, #52]	; (d274 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    d23e:	9b01      	ldr	r3, [sp, #4]
    d240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d244:	1e5a      	subs	r2, r3, #1
    d246:	490b      	ldr	r1, [pc, #44]	; (d274 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    d248:	9b01      	ldr	r3, [sp, #4]
    d24a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    d24e:	4a0a      	ldr	r2, [pc, #40]	; (d278 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x48>)
    d250:	9b01      	ldr	r3, [sp, #4]
    d252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d256:	f003 0301 	and.w	r3, r3, #1
    d25a:	2b00      	cmp	r3, #0
    d25c:	d106      	bne.n	d26c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    d25e:	4a05      	ldr	r2, [pc, #20]	; (d274 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    d260:	9b01      	ldr	r3, [sp, #4]
    d262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d266:	2b00      	cmp	r3, #0
    d268:	d100      	bne.n	d26c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d26a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d26c:	bf00      	nop
    d26e:	b003      	add	sp, #12
    d270:	f85d fb04 	ldr.w	pc, [sp], #4
    d274:	1fff8ff4 	.word	0x1fff8ff4
    d278:	1fff8ff0 	.word	0x1fff8ff0

0000d27c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    d27c:	b500      	push	{lr}
    d27e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d280:	f7f3 fdb6 	bl	df0 <Sys_GetCoreID>
    d284:	4603      	mov	r3, r0
    d286:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId])
    d288:	4a10      	ldr	r2, [pc, #64]	; (d2cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    d28a:	9b01      	ldr	r3, [sp, #4]
    d28c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d290:	2b00      	cmp	r3, #0
    d292:	d10d      	bne.n	d2b0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d294:	f7f3 fc54 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    d298:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d29a:	9b00      	ldr	r3, [sp, #0]
    d29c:	f003 0301 	and.w	r3, r3, #1
    d2a0:	2b00      	cmp	r3, #0
    d2a2:	d100      	bne.n	d2a6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d2a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    d2a6:	490a      	ldr	r1, [pc, #40]	; (d2d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x54>)
    d2a8:	9b01      	ldr	r3, [sp, #4]
    d2aa:	9a00      	ldr	r2, [sp, #0]
    d2ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]++;
    d2b0:	4a06      	ldr	r2, [pc, #24]	; (d2cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    d2b2:	9b01      	ldr	r3, [sp, #4]
    d2b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2b8:	1c5a      	adds	r2, r3, #1
    d2ba:	4904      	ldr	r1, [pc, #16]	; (d2cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    d2bc:	9b01      	ldr	r3, [sp, #4]
    d2be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d2c2:	bf00      	nop
    d2c4:	b003      	add	sp, #12
    d2c6:	f85d fb04 	ldr.w	pc, [sp], #4
    d2ca:	bf00      	nop
    d2cc:	1fff8ffc 	.word	0x1fff8ffc
    d2d0:	1fff8ff8 	.word	0x1fff8ff8

0000d2d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    d2d4:	b500      	push	{lr}
    d2d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d2d8:	f7f3 fd8a 	bl	df0 <Sys_GetCoreID>
    d2dc:	4603      	mov	r3, r0
    d2de:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]--;
    d2e0:	4a0d      	ldr	r2, [pc, #52]	; (d318 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    d2e2:	9b01      	ldr	r3, [sp, #4]
    d2e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2e8:	1e5a      	subs	r2, r3, #1
    d2ea:	490b      	ldr	r1, [pc, #44]	; (d318 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    d2ec:	9b01      	ldr	r3, [sp, #4]
    d2ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    d2f2:	4a0a      	ldr	r2, [pc, #40]	; (d31c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x48>)
    d2f4:	9b01      	ldr	r3, [sp, #4]
    d2f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2fa:	f003 0301 	and.w	r3, r3, #1
    d2fe:	2b00      	cmp	r3, #0
    d300:	d106      	bne.n	d310 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    d302:	4a05      	ldr	r2, [pc, #20]	; (d318 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    d304:	9b01      	ldr	r3, [sp, #4]
    d306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d30a:	2b00      	cmp	r3, #0
    d30c:	d100      	bne.n	d310 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d30e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d310:	bf00      	nop
    d312:	b003      	add	sp, #12
    d314:	f85d fb04 	ldr.w	pc, [sp], #4
    d318:	1fff8ffc 	.word	0x1fff8ffc
    d31c:	1fff8ff8 	.word	0x1fff8ff8

0000d320 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    d320:	b500      	push	{lr}
    d322:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d324:	f7f3 fd64 	bl	df0 <Sys_GetCoreID>
    d328:	4603      	mov	r3, r0
    d32a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId])
    d32c:	4a10      	ldr	r2, [pc, #64]	; (d370 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    d32e:	9b01      	ldr	r3, [sp, #4]
    d330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d334:	2b00      	cmp	r3, #0
    d336:	d10d      	bne.n	d354 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d338:	f7f3 fc02 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    d33c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d33e:	9b00      	ldr	r3, [sp, #0]
    d340:	f003 0301 	and.w	r3, r3, #1
    d344:	2b00      	cmp	r3, #0
    d346:	d100      	bne.n	d34a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d348:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    d34a:	490a      	ldr	r1, [pc, #40]	; (d374 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x54>)
    d34c:	9b01      	ldr	r3, [sp, #4]
    d34e:	9a00      	ldr	r2, [sp, #0]
    d350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]++;
    d354:	4a06      	ldr	r2, [pc, #24]	; (d370 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    d356:	9b01      	ldr	r3, [sp, #4]
    d358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d35c:	1c5a      	adds	r2, r3, #1
    d35e:	4904      	ldr	r1, [pc, #16]	; (d370 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    d360:	9b01      	ldr	r3, [sp, #4]
    d362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d366:	bf00      	nop
    d368:	b003      	add	sp, #12
    d36a:	f85d fb04 	ldr.w	pc, [sp], #4
    d36e:	bf00      	nop
    d370:	1fff9004 	.word	0x1fff9004
    d374:	1fff9000 	.word	0x1fff9000

0000d378 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    d378:	b500      	push	{lr}
    d37a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d37c:	f7f3 fd38 	bl	df0 <Sys_GetCoreID>
    d380:	4603      	mov	r3, r0
    d382:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]--;
    d384:	4a0d      	ldr	r2, [pc, #52]	; (d3bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    d386:	9b01      	ldr	r3, [sp, #4]
    d388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d38c:	1e5a      	subs	r2, r3, #1
    d38e:	490b      	ldr	r1, [pc, #44]	; (d3bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    d390:	9b01      	ldr	r3, [sp, #4]
    d392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    d396:	4a0a      	ldr	r2, [pc, #40]	; (d3c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x48>)
    d398:	9b01      	ldr	r3, [sp, #4]
    d39a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d39e:	f003 0301 	and.w	r3, r3, #1
    d3a2:	2b00      	cmp	r3, #0
    d3a4:	d106      	bne.n	d3b4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    d3a6:	4a05      	ldr	r2, [pc, #20]	; (d3bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    d3a8:	9b01      	ldr	r3, [sp, #4]
    d3aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3ae:	2b00      	cmp	r3, #0
    d3b0:	d100      	bne.n	d3b4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d3b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d3b4:	bf00      	nop
    d3b6:	b003      	add	sp, #12
    d3b8:	f85d fb04 	ldr.w	pc, [sp], #4
    d3bc:	1fff9004 	.word	0x1fff9004
    d3c0:	1fff9000 	.word	0x1fff9000

0000d3c4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    d3c4:	b500      	push	{lr}
    d3c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d3c8:	f7f3 fd12 	bl	df0 <Sys_GetCoreID>
    d3cc:	4603      	mov	r3, r0
    d3ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId])
    d3d0:	4a10      	ldr	r2, [pc, #64]	; (d414 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    d3d2:	9b01      	ldr	r3, [sp, #4]
    d3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3d8:	2b00      	cmp	r3, #0
    d3da:	d10d      	bne.n	d3f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d3dc:	f7f3 fbb0 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    d3e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d3e2:	9b00      	ldr	r3, [sp, #0]
    d3e4:	f003 0301 	and.w	r3, r3, #1
    d3e8:	2b00      	cmp	r3, #0
    d3ea:	d100      	bne.n	d3ee <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d3ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    d3ee:	490a      	ldr	r1, [pc, #40]	; (d418 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x54>)
    d3f0:	9b01      	ldr	r3, [sp, #4]
    d3f2:	9a00      	ldr	r2, [sp, #0]
    d3f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]++;
    d3f8:	4a06      	ldr	r2, [pc, #24]	; (d414 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    d3fa:	9b01      	ldr	r3, [sp, #4]
    d3fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d400:	1c5a      	adds	r2, r3, #1
    d402:	4904      	ldr	r1, [pc, #16]	; (d414 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    d404:	9b01      	ldr	r3, [sp, #4]
    d406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d40a:	bf00      	nop
    d40c:	b003      	add	sp, #12
    d40e:	f85d fb04 	ldr.w	pc, [sp], #4
    d412:	bf00      	nop
    d414:	1fff900c 	.word	0x1fff900c
    d418:	1fff9008 	.word	0x1fff9008

0000d41c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    d41c:	b500      	push	{lr}
    d41e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d420:	f7f3 fce6 	bl	df0 <Sys_GetCoreID>
    d424:	4603      	mov	r3, r0
    d426:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]--;
    d428:	4a0d      	ldr	r2, [pc, #52]	; (d460 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    d42a:	9b01      	ldr	r3, [sp, #4]
    d42c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d430:	1e5a      	subs	r2, r3, #1
    d432:	490b      	ldr	r1, [pc, #44]	; (d460 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    d434:	9b01      	ldr	r3, [sp, #4]
    d436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    d43a:	4a0a      	ldr	r2, [pc, #40]	; (d464 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x48>)
    d43c:	9b01      	ldr	r3, [sp, #4]
    d43e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d442:	f003 0301 	and.w	r3, r3, #1
    d446:	2b00      	cmp	r3, #0
    d448:	d106      	bne.n	d458 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    d44a:	4a05      	ldr	r2, [pc, #20]	; (d460 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    d44c:	9b01      	ldr	r3, [sp, #4]
    d44e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d452:	2b00      	cmp	r3, #0
    d454:	d100      	bne.n	d458 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d456:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d458:	bf00      	nop
    d45a:	b003      	add	sp, #12
    d45c:	f85d fb04 	ldr.w	pc, [sp], #4
    d460:	1fff900c 	.word	0x1fff900c
    d464:	1fff9008 	.word	0x1fff9008

0000d468 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    d468:	b500      	push	{lr}
    d46a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d46c:	f7f3 fcc0 	bl	df0 <Sys_GetCoreID>
    d470:	4603      	mov	r3, r0
    d472:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId])
    d474:	4a10      	ldr	r2, [pc, #64]	; (d4b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    d476:	9b01      	ldr	r3, [sp, #4]
    d478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d47c:	2b00      	cmp	r3, #0
    d47e:	d10d      	bne.n	d49c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d480:	f7f3 fb5e 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    d484:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d486:	9b00      	ldr	r3, [sp, #0]
    d488:	f003 0301 	and.w	r3, r3, #1
    d48c:	2b00      	cmp	r3, #0
    d48e:	d100      	bne.n	d492 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d490:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    d492:	490a      	ldr	r1, [pc, #40]	; (d4bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x54>)
    d494:	9b01      	ldr	r3, [sp, #4]
    d496:	9a00      	ldr	r2, [sp, #0]
    d498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]++;
    d49c:	4a06      	ldr	r2, [pc, #24]	; (d4b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    d49e:	9b01      	ldr	r3, [sp, #4]
    d4a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4a4:	1c5a      	adds	r2, r3, #1
    d4a6:	4904      	ldr	r1, [pc, #16]	; (d4b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    d4a8:	9b01      	ldr	r3, [sp, #4]
    d4aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d4ae:	bf00      	nop
    d4b0:	b003      	add	sp, #12
    d4b2:	f85d fb04 	ldr.w	pc, [sp], #4
    d4b6:	bf00      	nop
    d4b8:	1fff9014 	.word	0x1fff9014
    d4bc:	1fff9010 	.word	0x1fff9010

0000d4c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    d4c0:	b500      	push	{lr}
    d4c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4c4:	f7f3 fc94 	bl	df0 <Sys_GetCoreID>
    d4c8:	4603      	mov	r3, r0
    d4ca:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]--;
    d4cc:	4a0d      	ldr	r2, [pc, #52]	; (d504 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    d4ce:	9b01      	ldr	r3, [sp, #4]
    d4d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4d4:	1e5a      	subs	r2, r3, #1
    d4d6:	490b      	ldr	r1, [pc, #44]	; (d504 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    d4d8:	9b01      	ldr	r3, [sp, #4]
    d4da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    d4de:	4a0a      	ldr	r2, [pc, #40]	; (d508 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x48>)
    d4e0:	9b01      	ldr	r3, [sp, #4]
    d4e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4e6:	f003 0301 	and.w	r3, r3, #1
    d4ea:	2b00      	cmp	r3, #0
    d4ec:	d106      	bne.n	d4fc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    d4ee:	4a05      	ldr	r2, [pc, #20]	; (d504 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    d4f0:	9b01      	ldr	r3, [sp, #4]
    d4f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4f6:	2b00      	cmp	r3, #0
    d4f8:	d100      	bne.n	d4fc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d4fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d4fc:	bf00      	nop
    d4fe:	b003      	add	sp, #12
    d500:	f85d fb04 	ldr.w	pc, [sp], #4
    d504:	1fff9014 	.word	0x1fff9014
    d508:	1fff9010 	.word	0x1fff9010

0000d50c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    d50c:	b500      	push	{lr}
    d50e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d510:	f7f3 fc6e 	bl	df0 <Sys_GetCoreID>
    d514:	4603      	mov	r3, r0
    d516:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId])
    d518:	4a10      	ldr	r2, [pc, #64]	; (d55c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    d51a:	9b01      	ldr	r3, [sp, #4]
    d51c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d520:	2b00      	cmp	r3, #0
    d522:	d10d      	bne.n	d540 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d524:	f7f3 fb0c 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    d528:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d52a:	9b00      	ldr	r3, [sp, #0]
    d52c:	f003 0301 	and.w	r3, r3, #1
    d530:	2b00      	cmp	r3, #0
    d532:	d100      	bne.n	d536 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d534:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    d536:	490a      	ldr	r1, [pc, #40]	; (d560 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x54>)
    d538:	9b01      	ldr	r3, [sp, #4]
    d53a:	9a00      	ldr	r2, [sp, #0]
    d53c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]++;
    d540:	4a06      	ldr	r2, [pc, #24]	; (d55c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    d542:	9b01      	ldr	r3, [sp, #4]
    d544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d548:	1c5a      	adds	r2, r3, #1
    d54a:	4904      	ldr	r1, [pc, #16]	; (d55c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    d54c:	9b01      	ldr	r3, [sp, #4]
    d54e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d552:	bf00      	nop
    d554:	b003      	add	sp, #12
    d556:	f85d fb04 	ldr.w	pc, [sp], #4
    d55a:	bf00      	nop
    d55c:	1fff901c 	.word	0x1fff901c
    d560:	1fff9018 	.word	0x1fff9018

0000d564 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    d564:	b500      	push	{lr}
    d566:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d568:	f7f3 fc42 	bl	df0 <Sys_GetCoreID>
    d56c:	4603      	mov	r3, r0
    d56e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]--;
    d570:	4a0d      	ldr	r2, [pc, #52]	; (d5a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    d572:	9b01      	ldr	r3, [sp, #4]
    d574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d578:	1e5a      	subs	r2, r3, #1
    d57a:	490b      	ldr	r1, [pc, #44]	; (d5a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    d57c:	9b01      	ldr	r3, [sp, #4]
    d57e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    d582:	4a0a      	ldr	r2, [pc, #40]	; (d5ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x48>)
    d584:	9b01      	ldr	r3, [sp, #4]
    d586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d58a:	f003 0301 	and.w	r3, r3, #1
    d58e:	2b00      	cmp	r3, #0
    d590:	d106      	bne.n	d5a0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    d592:	4a05      	ldr	r2, [pc, #20]	; (d5a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    d594:	9b01      	ldr	r3, [sp, #4]
    d596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d59a:	2b00      	cmp	r3, #0
    d59c:	d100      	bne.n	d5a0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d59e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d5a0:	bf00      	nop
    d5a2:	b003      	add	sp, #12
    d5a4:	f85d fb04 	ldr.w	pc, [sp], #4
    d5a8:	1fff901c 	.word	0x1fff901c
    d5ac:	1fff9018 	.word	0x1fff9018

0000d5b0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    d5b0:	b500      	push	{lr}
    d5b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5b4:	f7f3 fc1c 	bl	df0 <Sys_GetCoreID>
    d5b8:	4603      	mov	r3, r0
    d5ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId])
    d5bc:	4a10      	ldr	r2, [pc, #64]	; (d600 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    d5be:	9b01      	ldr	r3, [sp, #4]
    d5c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5c4:	2b00      	cmp	r3, #0
    d5c6:	d10d      	bne.n	d5e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d5c8:	f7f3 faba 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    d5cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d5ce:	9b00      	ldr	r3, [sp, #0]
    d5d0:	f003 0301 	and.w	r3, r3, #1
    d5d4:	2b00      	cmp	r3, #0
    d5d6:	d100      	bne.n	d5da <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d5d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    d5da:	490a      	ldr	r1, [pc, #40]	; (d604 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x54>)
    d5dc:	9b01      	ldr	r3, [sp, #4]
    d5de:	9a00      	ldr	r2, [sp, #0]
    d5e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]++;
    d5e4:	4a06      	ldr	r2, [pc, #24]	; (d600 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    d5e6:	9b01      	ldr	r3, [sp, #4]
    d5e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5ec:	1c5a      	adds	r2, r3, #1
    d5ee:	4904      	ldr	r1, [pc, #16]	; (d600 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    d5f0:	9b01      	ldr	r3, [sp, #4]
    d5f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d5f6:	bf00      	nop
    d5f8:	b003      	add	sp, #12
    d5fa:	f85d fb04 	ldr.w	pc, [sp], #4
    d5fe:	bf00      	nop
    d600:	1fff9024 	.word	0x1fff9024
    d604:	1fff9020 	.word	0x1fff9020

0000d608 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    d608:	b500      	push	{lr}
    d60a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d60c:	f7f3 fbf0 	bl	df0 <Sys_GetCoreID>
    d610:	4603      	mov	r3, r0
    d612:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]--;
    d614:	4a0d      	ldr	r2, [pc, #52]	; (d64c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    d616:	9b01      	ldr	r3, [sp, #4]
    d618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d61c:	1e5a      	subs	r2, r3, #1
    d61e:	490b      	ldr	r1, [pc, #44]	; (d64c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    d620:	9b01      	ldr	r3, [sp, #4]
    d622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    d626:	4a0a      	ldr	r2, [pc, #40]	; (d650 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x48>)
    d628:	9b01      	ldr	r3, [sp, #4]
    d62a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d62e:	f003 0301 	and.w	r3, r3, #1
    d632:	2b00      	cmp	r3, #0
    d634:	d106      	bne.n	d644 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    d636:	4a05      	ldr	r2, [pc, #20]	; (d64c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    d638:	9b01      	ldr	r3, [sp, #4]
    d63a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d63e:	2b00      	cmp	r3, #0
    d640:	d100      	bne.n	d644 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d642:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d644:	bf00      	nop
    d646:	b003      	add	sp, #12
    d648:	f85d fb04 	ldr.w	pc, [sp], #4
    d64c:	1fff9024 	.word	0x1fff9024
    d650:	1fff9020 	.word	0x1fff9020

0000d654 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    d654:	b500      	push	{lr}
    d656:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d658:	f7f3 fbca 	bl	df0 <Sys_GetCoreID>
    d65c:	4603      	mov	r3, r0
    d65e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId])
    d660:	4a10      	ldr	r2, [pc, #64]	; (d6a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    d662:	9b01      	ldr	r3, [sp, #4]
    d664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d668:	2b00      	cmp	r3, #0
    d66a:	d10d      	bne.n	d688 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d66c:	f7f3 fa68 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    d670:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d672:	9b00      	ldr	r3, [sp, #0]
    d674:	f003 0301 	and.w	r3, r3, #1
    d678:	2b00      	cmp	r3, #0
    d67a:	d100      	bne.n	d67e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d67c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    d67e:	490a      	ldr	r1, [pc, #40]	; (d6a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x54>)
    d680:	9b01      	ldr	r3, [sp, #4]
    d682:	9a00      	ldr	r2, [sp, #0]
    d684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]++;
    d688:	4a06      	ldr	r2, [pc, #24]	; (d6a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    d68a:	9b01      	ldr	r3, [sp, #4]
    d68c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d690:	1c5a      	adds	r2, r3, #1
    d692:	4904      	ldr	r1, [pc, #16]	; (d6a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    d694:	9b01      	ldr	r3, [sp, #4]
    d696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d69a:	bf00      	nop
    d69c:	b003      	add	sp, #12
    d69e:	f85d fb04 	ldr.w	pc, [sp], #4
    d6a2:	bf00      	nop
    d6a4:	1fff902c 	.word	0x1fff902c
    d6a8:	1fff9028 	.word	0x1fff9028

0000d6ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    d6ac:	b500      	push	{lr}
    d6ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6b0:	f7f3 fb9e 	bl	df0 <Sys_GetCoreID>
    d6b4:	4603      	mov	r3, r0
    d6b6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]--;
    d6b8:	4a0d      	ldr	r2, [pc, #52]	; (d6f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    d6ba:	9b01      	ldr	r3, [sp, #4]
    d6bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6c0:	1e5a      	subs	r2, r3, #1
    d6c2:	490b      	ldr	r1, [pc, #44]	; (d6f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    d6c4:	9b01      	ldr	r3, [sp, #4]
    d6c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    d6ca:	4a0a      	ldr	r2, [pc, #40]	; (d6f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x48>)
    d6cc:	9b01      	ldr	r3, [sp, #4]
    d6ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6d2:	f003 0301 	and.w	r3, r3, #1
    d6d6:	2b00      	cmp	r3, #0
    d6d8:	d106      	bne.n	d6e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    d6da:	4a05      	ldr	r2, [pc, #20]	; (d6f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    d6dc:	9b01      	ldr	r3, [sp, #4]
    d6de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6e2:	2b00      	cmp	r3, #0
    d6e4:	d100      	bne.n	d6e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d6e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d6e8:	bf00      	nop
    d6ea:	b003      	add	sp, #12
    d6ec:	f85d fb04 	ldr.w	pc, [sp], #4
    d6f0:	1fff902c 	.word	0x1fff902c
    d6f4:	1fff9028 	.word	0x1fff9028

0000d6f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    d6f8:	b500      	push	{lr}
    d6fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6fc:	f7f3 fb78 	bl	df0 <Sys_GetCoreID>
    d700:	4603      	mov	r3, r0
    d702:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId])
    d704:	4a10      	ldr	r2, [pc, #64]	; (d748 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    d706:	9b01      	ldr	r3, [sp, #4]
    d708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d70c:	2b00      	cmp	r3, #0
    d70e:	d10d      	bne.n	d72c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d710:	f7f3 fa16 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    d714:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d716:	9b00      	ldr	r3, [sp, #0]
    d718:	f003 0301 	and.w	r3, r3, #1
    d71c:	2b00      	cmp	r3, #0
    d71e:	d100      	bne.n	d722 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d720:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    d722:	490a      	ldr	r1, [pc, #40]	; (d74c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x54>)
    d724:	9b01      	ldr	r3, [sp, #4]
    d726:	9a00      	ldr	r2, [sp, #0]
    d728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]++;
    d72c:	4a06      	ldr	r2, [pc, #24]	; (d748 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    d72e:	9b01      	ldr	r3, [sp, #4]
    d730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d734:	1c5a      	adds	r2, r3, #1
    d736:	4904      	ldr	r1, [pc, #16]	; (d748 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    d738:	9b01      	ldr	r3, [sp, #4]
    d73a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d73e:	bf00      	nop
    d740:	b003      	add	sp, #12
    d742:	f85d fb04 	ldr.w	pc, [sp], #4
    d746:	bf00      	nop
    d748:	1fff9034 	.word	0x1fff9034
    d74c:	1fff9030 	.word	0x1fff9030

0000d750 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    d750:	b500      	push	{lr}
    d752:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d754:	f7f3 fb4c 	bl	df0 <Sys_GetCoreID>
    d758:	4603      	mov	r3, r0
    d75a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]--;
    d75c:	4a0d      	ldr	r2, [pc, #52]	; (d794 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    d75e:	9b01      	ldr	r3, [sp, #4]
    d760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d764:	1e5a      	subs	r2, r3, #1
    d766:	490b      	ldr	r1, [pc, #44]	; (d794 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    d768:	9b01      	ldr	r3, [sp, #4]
    d76a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    d76e:	4a0a      	ldr	r2, [pc, #40]	; (d798 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x48>)
    d770:	9b01      	ldr	r3, [sp, #4]
    d772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d776:	f003 0301 	and.w	r3, r3, #1
    d77a:	2b00      	cmp	r3, #0
    d77c:	d106      	bne.n	d78c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    d77e:	4a05      	ldr	r2, [pc, #20]	; (d794 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    d780:	9b01      	ldr	r3, [sp, #4]
    d782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d786:	2b00      	cmp	r3, #0
    d788:	d100      	bne.n	d78c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d78a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d78c:	bf00      	nop
    d78e:	b003      	add	sp, #12
    d790:	f85d fb04 	ldr.w	pc, [sp], #4
    d794:	1fff9034 	.word	0x1fff9034
    d798:	1fff9030 	.word	0x1fff9030

0000d79c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    d79c:	b500      	push	{lr}
    d79e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7a0:	f7f3 fb26 	bl	df0 <Sys_GetCoreID>
    d7a4:	4603      	mov	r3, r0
    d7a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId])
    d7a8:	4a10      	ldr	r2, [pc, #64]	; (d7ec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    d7aa:	9b01      	ldr	r3, [sp, #4]
    d7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7b0:	2b00      	cmp	r3, #0
    d7b2:	d10d      	bne.n	d7d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d7b4:	f7f3 f9c4 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    d7b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d7ba:	9b00      	ldr	r3, [sp, #0]
    d7bc:	f003 0301 	and.w	r3, r3, #1
    d7c0:	2b00      	cmp	r3, #0
    d7c2:	d100      	bne.n	d7c6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d7c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    d7c6:	490a      	ldr	r1, [pc, #40]	; (d7f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x54>)
    d7c8:	9b01      	ldr	r3, [sp, #4]
    d7ca:	9a00      	ldr	r2, [sp, #0]
    d7cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]++;
    d7d0:	4a06      	ldr	r2, [pc, #24]	; (d7ec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    d7d2:	9b01      	ldr	r3, [sp, #4]
    d7d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7d8:	1c5a      	adds	r2, r3, #1
    d7da:	4904      	ldr	r1, [pc, #16]	; (d7ec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    d7dc:	9b01      	ldr	r3, [sp, #4]
    d7de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d7e2:	bf00      	nop
    d7e4:	b003      	add	sp, #12
    d7e6:	f85d fb04 	ldr.w	pc, [sp], #4
    d7ea:	bf00      	nop
    d7ec:	1fff903c 	.word	0x1fff903c
    d7f0:	1fff9038 	.word	0x1fff9038

0000d7f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    d7f4:	b500      	push	{lr}
    d7f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7f8:	f7f3 fafa 	bl	df0 <Sys_GetCoreID>
    d7fc:	4603      	mov	r3, r0
    d7fe:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]--;
    d800:	4a0d      	ldr	r2, [pc, #52]	; (d838 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    d802:	9b01      	ldr	r3, [sp, #4]
    d804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d808:	1e5a      	subs	r2, r3, #1
    d80a:	490b      	ldr	r1, [pc, #44]	; (d838 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    d80c:	9b01      	ldr	r3, [sp, #4]
    d80e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    d812:	4a0a      	ldr	r2, [pc, #40]	; (d83c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x48>)
    d814:	9b01      	ldr	r3, [sp, #4]
    d816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d81a:	f003 0301 	and.w	r3, r3, #1
    d81e:	2b00      	cmp	r3, #0
    d820:	d106      	bne.n	d830 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    d822:	4a05      	ldr	r2, [pc, #20]	; (d838 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    d824:	9b01      	ldr	r3, [sp, #4]
    d826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d82a:	2b00      	cmp	r3, #0
    d82c:	d100      	bne.n	d830 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d82e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d830:	bf00      	nop
    d832:	b003      	add	sp, #12
    d834:	f85d fb04 	ldr.w	pc, [sp], #4
    d838:	1fff903c 	.word	0x1fff903c
    d83c:	1fff9038 	.word	0x1fff9038

0000d840 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    d840:	b500      	push	{lr}
    d842:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d844:	f7f3 fad4 	bl	df0 <Sys_GetCoreID>
    d848:	4603      	mov	r3, r0
    d84a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId])
    d84c:	4a10      	ldr	r2, [pc, #64]	; (d890 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    d84e:	9b01      	ldr	r3, [sp, #4]
    d850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d854:	2b00      	cmp	r3, #0
    d856:	d10d      	bne.n	d874 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d858:	f7f3 f972 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    d85c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d85e:	9b00      	ldr	r3, [sp, #0]
    d860:	f003 0301 	and.w	r3, r3, #1
    d864:	2b00      	cmp	r3, #0
    d866:	d100      	bne.n	d86a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d868:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    d86a:	490a      	ldr	r1, [pc, #40]	; (d894 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x54>)
    d86c:	9b01      	ldr	r3, [sp, #4]
    d86e:	9a00      	ldr	r2, [sp, #0]
    d870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]++;
    d874:	4a06      	ldr	r2, [pc, #24]	; (d890 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    d876:	9b01      	ldr	r3, [sp, #4]
    d878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d87c:	1c5a      	adds	r2, r3, #1
    d87e:	4904      	ldr	r1, [pc, #16]	; (d890 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    d880:	9b01      	ldr	r3, [sp, #4]
    d882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d886:	bf00      	nop
    d888:	b003      	add	sp, #12
    d88a:	f85d fb04 	ldr.w	pc, [sp], #4
    d88e:	bf00      	nop
    d890:	1fff9044 	.word	0x1fff9044
    d894:	1fff9040 	.word	0x1fff9040

0000d898 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    d898:	b500      	push	{lr}
    d89a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d89c:	f7f3 faa8 	bl	df0 <Sys_GetCoreID>
    d8a0:	4603      	mov	r3, r0
    d8a2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]--;
    d8a4:	4a0d      	ldr	r2, [pc, #52]	; (d8dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    d8a6:	9b01      	ldr	r3, [sp, #4]
    d8a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8ac:	1e5a      	subs	r2, r3, #1
    d8ae:	490b      	ldr	r1, [pc, #44]	; (d8dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    d8b0:	9b01      	ldr	r3, [sp, #4]
    d8b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    d8b6:	4a0a      	ldr	r2, [pc, #40]	; (d8e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x48>)
    d8b8:	9b01      	ldr	r3, [sp, #4]
    d8ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8be:	f003 0301 	and.w	r3, r3, #1
    d8c2:	2b00      	cmp	r3, #0
    d8c4:	d106      	bne.n	d8d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    d8c6:	4a05      	ldr	r2, [pc, #20]	; (d8dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    d8c8:	9b01      	ldr	r3, [sp, #4]
    d8ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8ce:	2b00      	cmp	r3, #0
    d8d0:	d100      	bne.n	d8d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d8d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d8d4:	bf00      	nop
    d8d6:	b003      	add	sp, #12
    d8d8:	f85d fb04 	ldr.w	pc, [sp], #4
    d8dc:	1fff9044 	.word	0x1fff9044
    d8e0:	1fff9040 	.word	0x1fff9040

0000d8e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    d8e4:	b500      	push	{lr}
    d8e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d8e8:	f7f3 fa82 	bl	df0 <Sys_GetCoreID>
    d8ec:	4603      	mov	r3, r0
    d8ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId])
    d8f0:	4a10      	ldr	r2, [pc, #64]	; (d934 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    d8f2:	9b01      	ldr	r3, [sp, #4]
    d8f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8f8:	2b00      	cmp	r3, #0
    d8fa:	d10d      	bne.n	d918 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d8fc:	f7f3 f920 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    d900:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d902:	9b00      	ldr	r3, [sp, #0]
    d904:	f003 0301 	and.w	r3, r3, #1
    d908:	2b00      	cmp	r3, #0
    d90a:	d100      	bne.n	d90e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d90c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    d90e:	490a      	ldr	r1, [pc, #40]	; (d938 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x54>)
    d910:	9b01      	ldr	r3, [sp, #4]
    d912:	9a00      	ldr	r2, [sp, #0]
    d914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]++;
    d918:	4a06      	ldr	r2, [pc, #24]	; (d934 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    d91a:	9b01      	ldr	r3, [sp, #4]
    d91c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d920:	1c5a      	adds	r2, r3, #1
    d922:	4904      	ldr	r1, [pc, #16]	; (d934 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    d924:	9b01      	ldr	r3, [sp, #4]
    d926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d92a:	bf00      	nop
    d92c:	b003      	add	sp, #12
    d92e:	f85d fb04 	ldr.w	pc, [sp], #4
    d932:	bf00      	nop
    d934:	1fff904c 	.word	0x1fff904c
    d938:	1fff9048 	.word	0x1fff9048

0000d93c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    d93c:	b500      	push	{lr}
    d93e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d940:	f7f3 fa56 	bl	df0 <Sys_GetCoreID>
    d944:	4603      	mov	r3, r0
    d946:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]--;
    d948:	4a0d      	ldr	r2, [pc, #52]	; (d980 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    d94a:	9b01      	ldr	r3, [sp, #4]
    d94c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d950:	1e5a      	subs	r2, r3, #1
    d952:	490b      	ldr	r1, [pc, #44]	; (d980 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    d954:	9b01      	ldr	r3, [sp, #4]
    d956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    d95a:	4a0a      	ldr	r2, [pc, #40]	; (d984 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x48>)
    d95c:	9b01      	ldr	r3, [sp, #4]
    d95e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d962:	f003 0301 	and.w	r3, r3, #1
    d966:	2b00      	cmp	r3, #0
    d968:	d106      	bne.n	d978 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    d96a:	4a05      	ldr	r2, [pc, #20]	; (d980 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    d96c:	9b01      	ldr	r3, [sp, #4]
    d96e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d972:	2b00      	cmp	r3, #0
    d974:	d100      	bne.n	d978 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d976:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d978:	bf00      	nop
    d97a:	b003      	add	sp, #12
    d97c:	f85d fb04 	ldr.w	pc, [sp], #4
    d980:	1fff904c 	.word	0x1fff904c
    d984:	1fff9048 	.word	0x1fff9048

0000d988 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    d988:	b500      	push	{lr}
    d98a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d98c:	f7f3 fa30 	bl	df0 <Sys_GetCoreID>
    d990:	4603      	mov	r3, r0
    d992:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId])
    d994:	4a10      	ldr	r2, [pc, #64]	; (d9d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    d996:	9b01      	ldr	r3, [sp, #4]
    d998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d99c:	2b00      	cmp	r3, #0
    d99e:	d10d      	bne.n	d9bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d9a0:	f7f3 f8ce 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    d9a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d9a6:	9b00      	ldr	r3, [sp, #0]
    d9a8:	f003 0301 	and.w	r3, r3, #1
    d9ac:	2b00      	cmp	r3, #0
    d9ae:	d100      	bne.n	d9b2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d9b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    d9b2:	490a      	ldr	r1, [pc, #40]	; (d9dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x54>)
    d9b4:	9b01      	ldr	r3, [sp, #4]
    d9b6:	9a00      	ldr	r2, [sp, #0]
    d9b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]++;
    d9bc:	4a06      	ldr	r2, [pc, #24]	; (d9d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    d9be:	9b01      	ldr	r3, [sp, #4]
    d9c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9c4:	1c5a      	adds	r2, r3, #1
    d9c6:	4904      	ldr	r1, [pc, #16]	; (d9d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    d9c8:	9b01      	ldr	r3, [sp, #4]
    d9ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d9ce:	bf00      	nop
    d9d0:	b003      	add	sp, #12
    d9d2:	f85d fb04 	ldr.w	pc, [sp], #4
    d9d6:	bf00      	nop
    d9d8:	1fff9054 	.word	0x1fff9054
    d9dc:	1fff9050 	.word	0x1fff9050

0000d9e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    d9e0:	b500      	push	{lr}
    d9e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d9e4:	f7f3 fa04 	bl	df0 <Sys_GetCoreID>
    d9e8:	4603      	mov	r3, r0
    d9ea:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]--;
    d9ec:	4a0d      	ldr	r2, [pc, #52]	; (da24 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    d9ee:	9b01      	ldr	r3, [sp, #4]
    d9f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9f4:	1e5a      	subs	r2, r3, #1
    d9f6:	490b      	ldr	r1, [pc, #44]	; (da24 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    d9f8:	9b01      	ldr	r3, [sp, #4]
    d9fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    d9fe:	4a0a      	ldr	r2, [pc, #40]	; (da28 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x48>)
    da00:	9b01      	ldr	r3, [sp, #4]
    da02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da06:	f003 0301 	and.w	r3, r3, #1
    da0a:	2b00      	cmp	r3, #0
    da0c:	d106      	bne.n	da1c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    da0e:	4a05      	ldr	r2, [pc, #20]	; (da24 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    da10:	9b01      	ldr	r3, [sp, #4]
    da12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da16:	2b00      	cmp	r3, #0
    da18:	d100      	bne.n	da1c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    da1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    da1c:	bf00      	nop
    da1e:	b003      	add	sp, #12
    da20:	f85d fb04 	ldr.w	pc, [sp], #4
    da24:	1fff9054 	.word	0x1fff9054
    da28:	1fff9050 	.word	0x1fff9050

0000da2c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    da2c:	b500      	push	{lr}
    da2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da30:	f7f3 f9de 	bl	df0 <Sys_GetCoreID>
    da34:	4603      	mov	r3, r0
    da36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId])
    da38:	4a10      	ldr	r2, [pc, #64]	; (da7c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    da3a:	9b01      	ldr	r3, [sp, #4]
    da3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da40:	2b00      	cmp	r3, #0
    da42:	d10d      	bne.n	da60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    da44:	f7f3 f87c 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    da48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    da4a:	9b00      	ldr	r3, [sp, #0]
    da4c:	f003 0301 	and.w	r3, r3, #1
    da50:	2b00      	cmp	r3, #0
    da52:	d100      	bne.n	da56 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    da54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    da56:	490a      	ldr	r1, [pc, #40]	; (da80 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x54>)
    da58:	9b01      	ldr	r3, [sp, #4]
    da5a:	9a00      	ldr	r2, [sp, #0]
    da5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]++;
    da60:	4a06      	ldr	r2, [pc, #24]	; (da7c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    da62:	9b01      	ldr	r3, [sp, #4]
    da64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da68:	1c5a      	adds	r2, r3, #1
    da6a:	4904      	ldr	r1, [pc, #16]	; (da7c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    da6c:	9b01      	ldr	r3, [sp, #4]
    da6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    da72:	bf00      	nop
    da74:	b003      	add	sp, #12
    da76:	f85d fb04 	ldr.w	pc, [sp], #4
    da7a:	bf00      	nop
    da7c:	1fff905c 	.word	0x1fff905c
    da80:	1fff9058 	.word	0x1fff9058

0000da84 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    da84:	b500      	push	{lr}
    da86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da88:	f7f3 f9b2 	bl	df0 <Sys_GetCoreID>
    da8c:	4603      	mov	r3, r0
    da8e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]--;
    da90:	4a0d      	ldr	r2, [pc, #52]	; (dac8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    da92:	9b01      	ldr	r3, [sp, #4]
    da94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da98:	1e5a      	subs	r2, r3, #1
    da9a:	490b      	ldr	r1, [pc, #44]	; (dac8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    da9c:	9b01      	ldr	r3, [sp, #4]
    da9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    daa2:	4a0a      	ldr	r2, [pc, #40]	; (dacc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x48>)
    daa4:	9b01      	ldr	r3, [sp, #4]
    daa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daaa:	f003 0301 	and.w	r3, r3, #1
    daae:	2b00      	cmp	r3, #0
    dab0:	d106      	bne.n	dac0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    dab2:	4a05      	ldr	r2, [pc, #20]	; (dac8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    dab4:	9b01      	ldr	r3, [sp, #4]
    dab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daba:	2b00      	cmp	r3, #0
    dabc:	d100      	bne.n	dac0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dabe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dac0:	bf00      	nop
    dac2:	b003      	add	sp, #12
    dac4:	f85d fb04 	ldr.w	pc, [sp], #4
    dac8:	1fff905c 	.word	0x1fff905c
    dacc:	1fff9058 	.word	0x1fff9058

0000dad0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    dad0:	b500      	push	{lr}
    dad2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dad4:	f7f3 f98c 	bl	df0 <Sys_GetCoreID>
    dad8:	4603      	mov	r3, r0
    dada:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId])
    dadc:	4a10      	ldr	r2, [pc, #64]	; (db20 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    dade:	9b01      	ldr	r3, [sp, #4]
    dae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dae4:	2b00      	cmp	r3, #0
    dae6:	d10d      	bne.n	db04 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dae8:	f7f3 f82a 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    daec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    daee:	9b00      	ldr	r3, [sp, #0]
    daf0:	f003 0301 	and.w	r3, r3, #1
    daf4:	2b00      	cmp	r3, #0
    daf6:	d100      	bne.n	dafa <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    daf8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    dafa:	490a      	ldr	r1, [pc, #40]	; (db24 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x54>)
    dafc:	9b01      	ldr	r3, [sp, #4]
    dafe:	9a00      	ldr	r2, [sp, #0]
    db00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]++;
    db04:	4a06      	ldr	r2, [pc, #24]	; (db20 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    db06:	9b01      	ldr	r3, [sp, #4]
    db08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db0c:	1c5a      	adds	r2, r3, #1
    db0e:	4904      	ldr	r1, [pc, #16]	; (db20 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    db10:	9b01      	ldr	r3, [sp, #4]
    db12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    db16:	bf00      	nop
    db18:	b003      	add	sp, #12
    db1a:	f85d fb04 	ldr.w	pc, [sp], #4
    db1e:	bf00      	nop
    db20:	1fff9064 	.word	0x1fff9064
    db24:	1fff9060 	.word	0x1fff9060

0000db28 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    db28:	b500      	push	{lr}
    db2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db2c:	f7f3 f960 	bl	df0 <Sys_GetCoreID>
    db30:	4603      	mov	r3, r0
    db32:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]--;
    db34:	4a0d      	ldr	r2, [pc, #52]	; (db6c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    db36:	9b01      	ldr	r3, [sp, #4]
    db38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db3c:	1e5a      	subs	r2, r3, #1
    db3e:	490b      	ldr	r1, [pc, #44]	; (db6c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    db40:	9b01      	ldr	r3, [sp, #4]
    db42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    db46:	4a0a      	ldr	r2, [pc, #40]	; (db70 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x48>)
    db48:	9b01      	ldr	r3, [sp, #4]
    db4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db4e:	f003 0301 	and.w	r3, r3, #1
    db52:	2b00      	cmp	r3, #0
    db54:	d106      	bne.n	db64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    db56:	4a05      	ldr	r2, [pc, #20]	; (db6c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    db58:	9b01      	ldr	r3, [sp, #4]
    db5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db5e:	2b00      	cmp	r3, #0
    db60:	d100      	bne.n	db64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    db62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    db64:	bf00      	nop
    db66:	b003      	add	sp, #12
    db68:	f85d fb04 	ldr.w	pc, [sp], #4
    db6c:	1fff9064 	.word	0x1fff9064
    db70:	1fff9060 	.word	0x1fff9060

0000db74 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    db74:	b500      	push	{lr}
    db76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db78:	f7f3 f93a 	bl	df0 <Sys_GetCoreID>
    db7c:	4603      	mov	r3, r0
    db7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId])
    db80:	4a10      	ldr	r2, [pc, #64]	; (dbc4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    db82:	9b01      	ldr	r3, [sp, #4]
    db84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db88:	2b00      	cmp	r3, #0
    db8a:	d10d      	bne.n	dba8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    db8c:	f7f2 ffd8 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    db90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    db92:	9b00      	ldr	r3, [sp, #0]
    db94:	f003 0301 	and.w	r3, r3, #1
    db98:	2b00      	cmp	r3, #0
    db9a:	d100      	bne.n	db9e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    db9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    db9e:	490a      	ldr	r1, [pc, #40]	; (dbc8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x54>)
    dba0:	9b01      	ldr	r3, [sp, #4]
    dba2:	9a00      	ldr	r2, [sp, #0]
    dba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]++;
    dba8:	4a06      	ldr	r2, [pc, #24]	; (dbc4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    dbaa:	9b01      	ldr	r3, [sp, #4]
    dbac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbb0:	1c5a      	adds	r2, r3, #1
    dbb2:	4904      	ldr	r1, [pc, #16]	; (dbc4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    dbb4:	9b01      	ldr	r3, [sp, #4]
    dbb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dbba:	bf00      	nop
    dbbc:	b003      	add	sp, #12
    dbbe:	f85d fb04 	ldr.w	pc, [sp], #4
    dbc2:	bf00      	nop
    dbc4:	1fff906c 	.word	0x1fff906c
    dbc8:	1fff9068 	.word	0x1fff9068

0000dbcc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    dbcc:	b500      	push	{lr}
    dbce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dbd0:	f7f3 f90e 	bl	df0 <Sys_GetCoreID>
    dbd4:	4603      	mov	r3, r0
    dbd6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]--;
    dbd8:	4a0d      	ldr	r2, [pc, #52]	; (dc10 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    dbda:	9b01      	ldr	r3, [sp, #4]
    dbdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbe0:	1e5a      	subs	r2, r3, #1
    dbe2:	490b      	ldr	r1, [pc, #44]	; (dc10 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    dbe4:	9b01      	ldr	r3, [sp, #4]
    dbe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    dbea:	4a0a      	ldr	r2, [pc, #40]	; (dc14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x48>)
    dbec:	9b01      	ldr	r3, [sp, #4]
    dbee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbf2:	f003 0301 	and.w	r3, r3, #1
    dbf6:	2b00      	cmp	r3, #0
    dbf8:	d106      	bne.n	dc08 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    dbfa:	4a05      	ldr	r2, [pc, #20]	; (dc10 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    dbfc:	9b01      	ldr	r3, [sp, #4]
    dbfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc02:	2b00      	cmp	r3, #0
    dc04:	d100      	bne.n	dc08 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dc06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dc08:	bf00      	nop
    dc0a:	b003      	add	sp, #12
    dc0c:	f85d fb04 	ldr.w	pc, [sp], #4
    dc10:	1fff906c 	.word	0x1fff906c
    dc14:	1fff9068 	.word	0x1fff9068

0000dc18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    dc18:	b500      	push	{lr}
    dc1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc1c:	f7f3 f8e8 	bl	df0 <Sys_GetCoreID>
    dc20:	4603      	mov	r3, r0
    dc22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId])
    dc24:	4a10      	ldr	r2, [pc, #64]	; (dc68 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    dc26:	9b01      	ldr	r3, [sp, #4]
    dc28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc2c:	2b00      	cmp	r3, #0
    dc2e:	d10d      	bne.n	dc4c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dc30:	f7f2 ff86 	bl	b40 <Can_43_FLEXCAN_schm_read_msr>
    dc34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dc36:	9b00      	ldr	r3, [sp, #0]
    dc38:	f003 0301 	and.w	r3, r3, #1
    dc3c:	2b00      	cmp	r3, #0
    dc3e:	d100      	bne.n	dc42 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dc40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    dc42:	490a      	ldr	r1, [pc, #40]	; (dc6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x54>)
    dc44:	9b01      	ldr	r3, [sp, #4]
    dc46:	9a00      	ldr	r2, [sp, #0]
    dc48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]++;
    dc4c:	4a06      	ldr	r2, [pc, #24]	; (dc68 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    dc4e:	9b01      	ldr	r3, [sp, #4]
    dc50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc54:	1c5a      	adds	r2, r3, #1
    dc56:	4904      	ldr	r1, [pc, #16]	; (dc68 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    dc58:	9b01      	ldr	r3, [sp, #4]
    dc5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dc5e:	bf00      	nop
    dc60:	b003      	add	sp, #12
    dc62:	f85d fb04 	ldr.w	pc, [sp], #4
    dc66:	bf00      	nop
    dc68:	1fff9074 	.word	0x1fff9074
    dc6c:	1fff9070 	.word	0x1fff9070

0000dc70 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    dc70:	b500      	push	{lr}
    dc72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc74:	f7f3 f8bc 	bl	df0 <Sys_GetCoreID>
    dc78:	4603      	mov	r3, r0
    dc7a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]--;
    dc7c:	4a0d      	ldr	r2, [pc, #52]	; (dcb4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    dc7e:	9b01      	ldr	r3, [sp, #4]
    dc80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc84:	1e5a      	subs	r2, r3, #1
    dc86:	490b      	ldr	r1, [pc, #44]	; (dcb4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    dc88:	9b01      	ldr	r3, [sp, #4]
    dc8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    dc8e:	4a0a      	ldr	r2, [pc, #40]	; (dcb8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x48>)
    dc90:	9b01      	ldr	r3, [sp, #4]
    dc92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc96:	f003 0301 	and.w	r3, r3, #1
    dc9a:	2b00      	cmp	r3, #0
    dc9c:	d106      	bne.n	dcac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    dc9e:	4a05      	ldr	r2, [pc, #20]	; (dcb4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    dca0:	9b01      	ldr	r3, [sp, #4]
    dca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dca6:	2b00      	cmp	r3, #0
    dca8:	d100      	bne.n	dcac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dcaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dcac:	bf00      	nop
    dcae:	b003      	add	sp, #12
    dcb0:	f85d fb04 	ldr.w	pc, [sp], #4
    dcb4:	1fff9074 	.word	0x1fff9074
    dcb8:	1fff9070 	.word	0x1fff9070

0000dcbc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    dcbc:	b500      	push	{lr}
    dcbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcc0:	f7f3 f896 	bl	df0 <Sys_GetCoreID>
    dcc4:	4603      	mov	r3, r0
    dcc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    dcc8:	4a10      	ldr	r2, [pc, #64]	; (dd0c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    dcca:	9b01      	ldr	r3, [sp, #4]
    dccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcd0:	2b00      	cmp	r3, #0
    dcd2:	d10d      	bne.n	dcf0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dcd4:	f7f2 ff3d 	bl	b52 <Dio_schm_read_msr>
    dcd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dcda:	9b00      	ldr	r3, [sp, #0]
    dcdc:	f003 0301 	and.w	r3, r3, #1
    dce0:	2b00      	cmp	r3, #0
    dce2:	d100      	bne.n	dce6 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dce4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    dce6:	490a      	ldr	r1, [pc, #40]	; (dd10 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    dce8:	9b01      	ldr	r3, [sp, #4]
    dcea:	9a00      	ldr	r2, [sp, #0]
    dcec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    dcf0:	4a06      	ldr	r2, [pc, #24]	; (dd0c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    dcf2:	9b01      	ldr	r3, [sp, #4]
    dcf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcf8:	1c5a      	adds	r2, r3, #1
    dcfa:	4904      	ldr	r1, [pc, #16]	; (dd0c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    dcfc:	9b01      	ldr	r3, [sp, #4]
    dcfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dd02:	bf00      	nop
    dd04:	b003      	add	sp, #12
    dd06:	f85d fb04 	ldr.w	pc, [sp], #4
    dd0a:	bf00      	nop
    dd0c:	1fff907c 	.word	0x1fff907c
    dd10:	1fff9078 	.word	0x1fff9078

0000dd14 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    dd14:	b500      	push	{lr}
    dd16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd18:	f7f3 f86a 	bl	df0 <Sys_GetCoreID>
    dd1c:	4603      	mov	r3, r0
    dd1e:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    dd20:	4a0d      	ldr	r2, [pc, #52]	; (dd58 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    dd22:	9b01      	ldr	r3, [sp, #4]
    dd24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd28:	1e5a      	subs	r2, r3, #1
    dd2a:	490b      	ldr	r1, [pc, #44]	; (dd58 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    dd2c:	9b01      	ldr	r3, [sp, #4]
    dd2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    dd32:	4a0a      	ldr	r2, [pc, #40]	; (dd5c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    dd34:	9b01      	ldr	r3, [sp, #4]
    dd36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd3a:	f003 0301 	and.w	r3, r3, #1
    dd3e:	2b00      	cmp	r3, #0
    dd40:	d106      	bne.n	dd50 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    dd42:	4a05      	ldr	r2, [pc, #20]	; (dd58 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    dd44:	9b01      	ldr	r3, [sp, #4]
    dd46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd4a:	2b00      	cmp	r3, #0
    dd4c:	d100      	bne.n	dd50 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dd4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dd50:	bf00      	nop
    dd52:	b003      	add	sp, #12
    dd54:	f85d fb04 	ldr.w	pc, [sp], #4
    dd58:	1fff907c 	.word	0x1fff907c
    dd5c:	1fff9078 	.word	0x1fff9078

0000dd60 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    dd60:	b500      	push	{lr}
    dd62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd64:	f7f3 f844 	bl	df0 <Sys_GetCoreID>
    dd68:	4603      	mov	r3, r0
    dd6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    dd6c:	4a10      	ldr	r2, [pc, #64]	; (ddb0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    dd6e:	9b01      	ldr	r3, [sp, #4]
    dd70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd74:	2b00      	cmp	r3, #0
    dd76:	d10d      	bne.n	dd94 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dd78:	f7f2 feeb 	bl	b52 <Dio_schm_read_msr>
    dd7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dd7e:	9b00      	ldr	r3, [sp, #0]
    dd80:	f003 0301 	and.w	r3, r3, #1
    dd84:	2b00      	cmp	r3, #0
    dd86:	d100      	bne.n	dd8a <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dd88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    dd8a:	490a      	ldr	r1, [pc, #40]	; (ddb4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    dd8c:	9b01      	ldr	r3, [sp, #4]
    dd8e:	9a00      	ldr	r2, [sp, #0]
    dd90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    dd94:	4a06      	ldr	r2, [pc, #24]	; (ddb0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    dd96:	9b01      	ldr	r3, [sp, #4]
    dd98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd9c:	1c5a      	adds	r2, r3, #1
    dd9e:	4904      	ldr	r1, [pc, #16]	; (ddb0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    dda0:	9b01      	ldr	r3, [sp, #4]
    dda2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dda6:	bf00      	nop
    dda8:	b003      	add	sp, #12
    ddaa:	f85d fb04 	ldr.w	pc, [sp], #4
    ddae:	bf00      	nop
    ddb0:	1fff9084 	.word	0x1fff9084
    ddb4:	1fff9080 	.word	0x1fff9080

0000ddb8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    ddb8:	b500      	push	{lr}
    ddba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ddbc:	f7f3 f818 	bl	df0 <Sys_GetCoreID>
    ddc0:	4603      	mov	r3, r0
    ddc2:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    ddc4:	4a0d      	ldr	r2, [pc, #52]	; (ddfc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    ddc6:	9b01      	ldr	r3, [sp, #4]
    ddc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddcc:	1e5a      	subs	r2, r3, #1
    ddce:	490b      	ldr	r1, [pc, #44]	; (ddfc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    ddd0:	9b01      	ldr	r3, [sp, #4]
    ddd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    ddd6:	4a0a      	ldr	r2, [pc, #40]	; (de00 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    ddd8:	9b01      	ldr	r3, [sp, #4]
    ddda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddde:	f003 0301 	and.w	r3, r3, #1
    dde2:	2b00      	cmp	r3, #0
    dde4:	d106      	bne.n	ddf4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    dde6:	4a05      	ldr	r2, [pc, #20]	; (ddfc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    dde8:	9b01      	ldr	r3, [sp, #4]
    ddea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddee:	2b00      	cmp	r3, #0
    ddf0:	d100      	bne.n	ddf4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ddf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ddf4:	bf00      	nop
    ddf6:	b003      	add	sp, #12
    ddf8:	f85d fb04 	ldr.w	pc, [sp], #4
    ddfc:	1fff9084 	.word	0x1fff9084
    de00:	1fff9080 	.word	0x1fff9080

0000de04 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    de04:	b500      	push	{lr}
    de06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de08:	f7f2 fff2 	bl	df0 <Sys_GetCoreID>
    de0c:	4603      	mov	r3, r0
    de0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    de10:	4a10      	ldr	r2, [pc, #64]	; (de54 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    de12:	9b01      	ldr	r3, [sp, #4]
    de14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de18:	2b00      	cmp	r3, #0
    de1a:	d10d      	bne.n	de38 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    de1c:	f7f2 fea2 	bl	b64 <Mcu_schm_read_msr>
    de20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    de22:	9b00      	ldr	r3, [sp, #0]
    de24:	f003 0301 	and.w	r3, r3, #1
    de28:	2b00      	cmp	r3, #0
    de2a:	d100      	bne.n	de2e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    de2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    de2e:	490a      	ldr	r1, [pc, #40]	; (de58 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    de30:	9b01      	ldr	r3, [sp, #4]
    de32:	9a00      	ldr	r2, [sp, #0]
    de34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    de38:	4a06      	ldr	r2, [pc, #24]	; (de54 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    de3a:	9b01      	ldr	r3, [sp, #4]
    de3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de40:	1c5a      	adds	r2, r3, #1
    de42:	4904      	ldr	r1, [pc, #16]	; (de54 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    de44:	9b01      	ldr	r3, [sp, #4]
    de46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    de4a:	bf00      	nop
    de4c:	b003      	add	sp, #12
    de4e:	f85d fb04 	ldr.w	pc, [sp], #4
    de52:	bf00      	nop
    de54:	1fff908c 	.word	0x1fff908c
    de58:	1fff9088 	.word	0x1fff9088

0000de5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    de5c:	b500      	push	{lr}
    de5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de60:	f7f2 ffc6 	bl	df0 <Sys_GetCoreID>
    de64:	4603      	mov	r3, r0
    de66:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    de68:	4a0d      	ldr	r2, [pc, #52]	; (dea0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    de6a:	9b01      	ldr	r3, [sp, #4]
    de6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de70:	1e5a      	subs	r2, r3, #1
    de72:	490b      	ldr	r1, [pc, #44]	; (dea0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    de74:	9b01      	ldr	r3, [sp, #4]
    de76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    de7a:	4a0a      	ldr	r2, [pc, #40]	; (dea4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    de7c:	9b01      	ldr	r3, [sp, #4]
    de7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de82:	f003 0301 	and.w	r3, r3, #1
    de86:	2b00      	cmp	r3, #0
    de88:	d106      	bne.n	de98 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    de8a:	4a05      	ldr	r2, [pc, #20]	; (dea0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    de8c:	9b01      	ldr	r3, [sp, #4]
    de8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de92:	2b00      	cmp	r3, #0
    de94:	d100      	bne.n	de98 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    de96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    de98:	bf00      	nop
    de9a:	b003      	add	sp, #12
    de9c:	f85d fb04 	ldr.w	pc, [sp], #4
    dea0:	1fff908c 	.word	0x1fff908c
    dea4:	1fff9088 	.word	0x1fff9088

0000dea8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    dea8:	b500      	push	{lr}
    deaa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    deac:	f7f2 ffa0 	bl	df0 <Sys_GetCoreID>
    deb0:	4603      	mov	r3, r0
    deb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    deb4:	4a10      	ldr	r2, [pc, #64]	; (def8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    deb6:	9b01      	ldr	r3, [sp, #4]
    deb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    debc:	2b00      	cmp	r3, #0
    debe:	d10d      	bne.n	dedc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dec0:	f7f2 fe50 	bl	b64 <Mcu_schm_read_msr>
    dec4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dec6:	9b00      	ldr	r3, [sp, #0]
    dec8:	f003 0301 	and.w	r3, r3, #1
    decc:	2b00      	cmp	r3, #0
    dece:	d100      	bne.n	ded2 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ded0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ded2:	490a      	ldr	r1, [pc, #40]	; (defc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    ded4:	9b01      	ldr	r3, [sp, #4]
    ded6:	9a00      	ldr	r2, [sp, #0]
    ded8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    dedc:	4a06      	ldr	r2, [pc, #24]	; (def8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    dede:	9b01      	ldr	r3, [sp, #4]
    dee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dee4:	1c5a      	adds	r2, r3, #1
    dee6:	4904      	ldr	r1, [pc, #16]	; (def8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    dee8:	9b01      	ldr	r3, [sp, #4]
    deea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    deee:	bf00      	nop
    def0:	b003      	add	sp, #12
    def2:	f85d fb04 	ldr.w	pc, [sp], #4
    def6:	bf00      	nop
    def8:	1fff9094 	.word	0x1fff9094
    defc:	1fff9090 	.word	0x1fff9090

0000df00 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    df00:	b500      	push	{lr}
    df02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df04:	f7f2 ff74 	bl	df0 <Sys_GetCoreID>
    df08:	4603      	mov	r3, r0
    df0a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    df0c:	4a0d      	ldr	r2, [pc, #52]	; (df44 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    df0e:	9b01      	ldr	r3, [sp, #4]
    df10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df14:	1e5a      	subs	r2, r3, #1
    df16:	490b      	ldr	r1, [pc, #44]	; (df44 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    df18:	9b01      	ldr	r3, [sp, #4]
    df1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    df1e:	4a0a      	ldr	r2, [pc, #40]	; (df48 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    df20:	9b01      	ldr	r3, [sp, #4]
    df22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df26:	f003 0301 	and.w	r3, r3, #1
    df2a:	2b00      	cmp	r3, #0
    df2c:	d106      	bne.n	df3c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    df2e:	4a05      	ldr	r2, [pc, #20]	; (df44 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    df30:	9b01      	ldr	r3, [sp, #4]
    df32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df36:	2b00      	cmp	r3, #0
    df38:	d100      	bne.n	df3c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    df3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    df3c:	bf00      	nop
    df3e:	b003      	add	sp, #12
    df40:	f85d fb04 	ldr.w	pc, [sp], #4
    df44:	1fff9094 	.word	0x1fff9094
    df48:	1fff9090 	.word	0x1fff9090

0000df4c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    df4c:	b500      	push	{lr}
    df4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df50:	f7f2 ff4e 	bl	df0 <Sys_GetCoreID>
    df54:	4603      	mov	r3, r0
    df56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    df58:	4a10      	ldr	r2, [pc, #64]	; (df9c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    df5a:	9b01      	ldr	r3, [sp, #4]
    df5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df60:	2b00      	cmp	r3, #0
    df62:	d10d      	bne.n	df80 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    df64:	f7f2 fdfe 	bl	b64 <Mcu_schm_read_msr>
    df68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    df6a:	9b00      	ldr	r3, [sp, #0]
    df6c:	f003 0301 	and.w	r3, r3, #1
    df70:	2b00      	cmp	r3, #0
    df72:	d100      	bne.n	df76 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    df74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    df76:	490a      	ldr	r1, [pc, #40]	; (dfa0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    df78:	9b01      	ldr	r3, [sp, #4]
    df7a:	9a00      	ldr	r2, [sp, #0]
    df7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    df80:	4a06      	ldr	r2, [pc, #24]	; (df9c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    df82:	9b01      	ldr	r3, [sp, #4]
    df84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df88:	1c5a      	adds	r2, r3, #1
    df8a:	4904      	ldr	r1, [pc, #16]	; (df9c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    df8c:	9b01      	ldr	r3, [sp, #4]
    df8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    df92:	bf00      	nop
    df94:	b003      	add	sp, #12
    df96:	f85d fb04 	ldr.w	pc, [sp], #4
    df9a:	bf00      	nop
    df9c:	1fff909c 	.word	0x1fff909c
    dfa0:	1fff9098 	.word	0x1fff9098

0000dfa4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    dfa4:	b500      	push	{lr}
    dfa6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dfa8:	f7f2 ff22 	bl	df0 <Sys_GetCoreID>
    dfac:	4603      	mov	r3, r0
    dfae:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    dfb0:	4a0d      	ldr	r2, [pc, #52]	; (dfe8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    dfb2:	9b01      	ldr	r3, [sp, #4]
    dfb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfb8:	1e5a      	subs	r2, r3, #1
    dfba:	490b      	ldr	r1, [pc, #44]	; (dfe8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    dfbc:	9b01      	ldr	r3, [sp, #4]
    dfbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    dfc2:	4a0a      	ldr	r2, [pc, #40]	; (dfec <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    dfc4:	9b01      	ldr	r3, [sp, #4]
    dfc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfca:	f003 0301 	and.w	r3, r3, #1
    dfce:	2b00      	cmp	r3, #0
    dfd0:	d106      	bne.n	dfe0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    dfd2:	4a05      	ldr	r2, [pc, #20]	; (dfe8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    dfd4:	9b01      	ldr	r3, [sp, #4]
    dfd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfda:	2b00      	cmp	r3, #0
    dfdc:	d100      	bne.n	dfe0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dfde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dfe0:	bf00      	nop
    dfe2:	b003      	add	sp, #12
    dfe4:	f85d fb04 	ldr.w	pc, [sp], #4
    dfe8:	1fff909c 	.word	0x1fff909c
    dfec:	1fff9098 	.word	0x1fff9098

0000dff0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    dff0:	b500      	push	{lr}
    dff2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dff4:	f7f2 fefc 	bl	df0 <Sys_GetCoreID>
    dff8:	4603      	mov	r3, r0
    dffa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    dffc:	4a10      	ldr	r2, [pc, #64]	; (e040 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    dffe:	9b01      	ldr	r3, [sp, #4]
    e000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e004:	2b00      	cmp	r3, #0
    e006:	d10d      	bne.n	e024 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e008:	f7f2 fdb5 	bl	b76 <Port_schm_read_msr>
    e00c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e00e:	9b00      	ldr	r3, [sp, #0]
    e010:	f003 0301 	and.w	r3, r3, #1
    e014:	2b00      	cmp	r3, #0
    e016:	d100      	bne.n	e01a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e018:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    e01a:	490a      	ldr	r1, [pc, #40]	; (e044 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    e01c:	9b01      	ldr	r3, [sp, #4]
    e01e:	9a00      	ldr	r2, [sp, #0]
    e020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    e024:	4a06      	ldr	r2, [pc, #24]	; (e040 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    e026:	9b01      	ldr	r3, [sp, #4]
    e028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e02c:	1c5a      	adds	r2, r3, #1
    e02e:	4904      	ldr	r1, [pc, #16]	; (e040 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    e030:	9b01      	ldr	r3, [sp, #4]
    e032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e036:	bf00      	nop
    e038:	b003      	add	sp, #12
    e03a:	f85d fb04 	ldr.w	pc, [sp], #4
    e03e:	bf00      	nop
    e040:	1fff90a4 	.word	0x1fff90a4
    e044:	1fff90a0 	.word	0x1fff90a0

0000e048 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    e048:	b500      	push	{lr}
    e04a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e04c:	f7f2 fed0 	bl	df0 <Sys_GetCoreID>
    e050:	4603      	mov	r3, r0
    e052:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    e054:	4a0d      	ldr	r2, [pc, #52]	; (e08c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    e056:	9b01      	ldr	r3, [sp, #4]
    e058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e05c:	1e5a      	subs	r2, r3, #1
    e05e:	490b      	ldr	r1, [pc, #44]	; (e08c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    e060:	9b01      	ldr	r3, [sp, #4]
    e062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    e066:	4a0a      	ldr	r2, [pc, #40]	; (e090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    e068:	9b01      	ldr	r3, [sp, #4]
    e06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e06e:	f003 0301 	and.w	r3, r3, #1
    e072:	2b00      	cmp	r3, #0
    e074:	d106      	bne.n	e084 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    e076:	4a05      	ldr	r2, [pc, #20]	; (e08c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    e078:	9b01      	ldr	r3, [sp, #4]
    e07a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e07e:	2b00      	cmp	r3, #0
    e080:	d100      	bne.n	e084 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e082:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e084:	bf00      	nop
    e086:	b003      	add	sp, #12
    e088:	f85d fb04 	ldr.w	pc, [sp], #4
    e08c:	1fff90a4 	.word	0x1fff90a4
    e090:	1fff90a0 	.word	0x1fff90a0

0000e094 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    e094:	b500      	push	{lr}
    e096:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e098:	f7f2 feaa 	bl	df0 <Sys_GetCoreID>
    e09c:	4603      	mov	r3, r0
    e09e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    e0a0:	4a10      	ldr	r2, [pc, #64]	; (e0e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    e0a2:	9b01      	ldr	r3, [sp, #4]
    e0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0a8:	2b00      	cmp	r3, #0
    e0aa:	d10d      	bne.n	e0c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e0ac:	f7f2 fd63 	bl	b76 <Port_schm_read_msr>
    e0b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e0b2:	9b00      	ldr	r3, [sp, #0]
    e0b4:	f003 0301 	and.w	r3, r3, #1
    e0b8:	2b00      	cmp	r3, #0
    e0ba:	d100      	bne.n	e0be <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e0bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    e0be:	490a      	ldr	r1, [pc, #40]	; (e0e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    e0c0:	9b01      	ldr	r3, [sp, #4]
    e0c2:	9a00      	ldr	r2, [sp, #0]
    e0c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    e0c8:	4a06      	ldr	r2, [pc, #24]	; (e0e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    e0ca:	9b01      	ldr	r3, [sp, #4]
    e0cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0d0:	1c5a      	adds	r2, r3, #1
    e0d2:	4904      	ldr	r1, [pc, #16]	; (e0e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    e0d4:	9b01      	ldr	r3, [sp, #4]
    e0d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e0da:	bf00      	nop
    e0dc:	b003      	add	sp, #12
    e0de:	f85d fb04 	ldr.w	pc, [sp], #4
    e0e2:	bf00      	nop
    e0e4:	1fff90ac 	.word	0x1fff90ac
    e0e8:	1fff90a8 	.word	0x1fff90a8

0000e0ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    e0ec:	b500      	push	{lr}
    e0ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e0f0:	f7f2 fe7e 	bl	df0 <Sys_GetCoreID>
    e0f4:	4603      	mov	r3, r0
    e0f6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    e0f8:	4a0d      	ldr	r2, [pc, #52]	; (e130 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    e0fa:	9b01      	ldr	r3, [sp, #4]
    e0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e100:	1e5a      	subs	r2, r3, #1
    e102:	490b      	ldr	r1, [pc, #44]	; (e130 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    e104:	9b01      	ldr	r3, [sp, #4]
    e106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    e10a:	4a0a      	ldr	r2, [pc, #40]	; (e134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    e10c:	9b01      	ldr	r3, [sp, #4]
    e10e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e112:	f003 0301 	and.w	r3, r3, #1
    e116:	2b00      	cmp	r3, #0
    e118:	d106      	bne.n	e128 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    e11a:	4a05      	ldr	r2, [pc, #20]	; (e130 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    e11c:	9b01      	ldr	r3, [sp, #4]
    e11e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e122:	2b00      	cmp	r3, #0
    e124:	d100      	bne.n	e128 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e126:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e128:	bf00      	nop
    e12a:	b003      	add	sp, #12
    e12c:	f85d fb04 	ldr.w	pc, [sp], #4
    e130:	1fff90ac 	.word	0x1fff90ac
    e134:	1fff90a8 	.word	0x1fff90a8

0000e138 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    e138:	b500      	push	{lr}
    e13a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e13c:	f7f2 fe58 	bl	df0 <Sys_GetCoreID>
    e140:	4603      	mov	r3, r0
    e142:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    e144:	4a10      	ldr	r2, [pc, #64]	; (e188 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    e146:	9b01      	ldr	r3, [sp, #4]
    e148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e14c:	2b00      	cmp	r3, #0
    e14e:	d10d      	bne.n	e16c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e150:	f7f2 fd11 	bl	b76 <Port_schm_read_msr>
    e154:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e156:	9b00      	ldr	r3, [sp, #0]
    e158:	f003 0301 	and.w	r3, r3, #1
    e15c:	2b00      	cmp	r3, #0
    e15e:	d100      	bne.n	e162 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e160:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    e162:	490a      	ldr	r1, [pc, #40]	; (e18c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    e164:	9b01      	ldr	r3, [sp, #4]
    e166:	9a00      	ldr	r2, [sp, #0]
    e168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    e16c:	4a06      	ldr	r2, [pc, #24]	; (e188 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    e16e:	9b01      	ldr	r3, [sp, #4]
    e170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e174:	1c5a      	adds	r2, r3, #1
    e176:	4904      	ldr	r1, [pc, #16]	; (e188 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    e178:	9b01      	ldr	r3, [sp, #4]
    e17a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e17e:	bf00      	nop
    e180:	b003      	add	sp, #12
    e182:	f85d fb04 	ldr.w	pc, [sp], #4
    e186:	bf00      	nop
    e188:	1fff90b4 	.word	0x1fff90b4
    e18c:	1fff90b0 	.word	0x1fff90b0

0000e190 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    e190:	b500      	push	{lr}
    e192:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e194:	f7f2 fe2c 	bl	df0 <Sys_GetCoreID>
    e198:	4603      	mov	r3, r0
    e19a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    e19c:	4a0d      	ldr	r2, [pc, #52]	; (e1d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    e19e:	9b01      	ldr	r3, [sp, #4]
    e1a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1a4:	1e5a      	subs	r2, r3, #1
    e1a6:	490b      	ldr	r1, [pc, #44]	; (e1d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    e1a8:	9b01      	ldr	r3, [sp, #4]
    e1aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    e1ae:	4a0a      	ldr	r2, [pc, #40]	; (e1d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    e1b0:	9b01      	ldr	r3, [sp, #4]
    e1b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1b6:	f003 0301 	and.w	r3, r3, #1
    e1ba:	2b00      	cmp	r3, #0
    e1bc:	d106      	bne.n	e1cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    e1be:	4a05      	ldr	r2, [pc, #20]	; (e1d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    e1c0:	9b01      	ldr	r3, [sp, #4]
    e1c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1c6:	2b00      	cmp	r3, #0
    e1c8:	d100      	bne.n	e1cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e1ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e1cc:	bf00      	nop
    e1ce:	b003      	add	sp, #12
    e1d0:	f85d fb04 	ldr.w	pc, [sp], #4
    e1d4:	1fff90b4 	.word	0x1fff90b4
    e1d8:	1fff90b0 	.word	0x1fff90b0

0000e1dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    e1dc:	b500      	push	{lr}
    e1de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e1e0:	f7f2 fe06 	bl	df0 <Sys_GetCoreID>
    e1e4:	4603      	mov	r3, r0
    e1e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    e1e8:	4a10      	ldr	r2, [pc, #64]	; (e22c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    e1ea:	9b01      	ldr	r3, [sp, #4]
    e1ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1f0:	2b00      	cmp	r3, #0
    e1f2:	d10d      	bne.n	e210 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e1f4:	f7f2 fcbf 	bl	b76 <Port_schm_read_msr>
    e1f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e1fa:	9b00      	ldr	r3, [sp, #0]
    e1fc:	f003 0301 	and.w	r3, r3, #1
    e200:	2b00      	cmp	r3, #0
    e202:	d100      	bne.n	e206 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e204:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    e206:	490a      	ldr	r1, [pc, #40]	; (e230 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    e208:	9b01      	ldr	r3, [sp, #4]
    e20a:	9a00      	ldr	r2, [sp, #0]
    e20c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    e210:	4a06      	ldr	r2, [pc, #24]	; (e22c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    e212:	9b01      	ldr	r3, [sp, #4]
    e214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e218:	1c5a      	adds	r2, r3, #1
    e21a:	4904      	ldr	r1, [pc, #16]	; (e22c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    e21c:	9b01      	ldr	r3, [sp, #4]
    e21e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e222:	bf00      	nop
    e224:	b003      	add	sp, #12
    e226:	f85d fb04 	ldr.w	pc, [sp], #4
    e22a:	bf00      	nop
    e22c:	1fff90bc 	.word	0x1fff90bc
    e230:	1fff90b8 	.word	0x1fff90b8

0000e234 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    e234:	b500      	push	{lr}
    e236:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e238:	f7f2 fdda 	bl	df0 <Sys_GetCoreID>
    e23c:	4603      	mov	r3, r0
    e23e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    e240:	4a0d      	ldr	r2, [pc, #52]	; (e278 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    e242:	9b01      	ldr	r3, [sp, #4]
    e244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e248:	1e5a      	subs	r2, r3, #1
    e24a:	490b      	ldr	r1, [pc, #44]	; (e278 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    e24c:	9b01      	ldr	r3, [sp, #4]
    e24e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    e252:	4a0a      	ldr	r2, [pc, #40]	; (e27c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    e254:	9b01      	ldr	r3, [sp, #4]
    e256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e25a:	f003 0301 	and.w	r3, r3, #1
    e25e:	2b00      	cmp	r3, #0
    e260:	d106      	bne.n	e270 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    e262:	4a05      	ldr	r2, [pc, #20]	; (e278 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    e264:	9b01      	ldr	r3, [sp, #4]
    e266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e26a:	2b00      	cmp	r3, #0
    e26c:	d100      	bne.n	e270 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e26e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e270:	bf00      	nop
    e272:	b003      	add	sp, #12
    e274:	f85d fb04 	ldr.w	pc, [sp], #4
    e278:	1fff90bc 	.word	0x1fff90bc
    e27c:	1fff90b8 	.word	0x1fff90b8

0000e280 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    e280:	b500      	push	{lr}
    e282:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e284:	f7f2 fdb4 	bl	df0 <Sys_GetCoreID>
    e288:	4603      	mov	r3, r0
    e28a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    e28c:	4a10      	ldr	r2, [pc, #64]	; (e2d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    e28e:	9b01      	ldr	r3, [sp, #4]
    e290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e294:	2b00      	cmp	r3, #0
    e296:	d10d      	bne.n	e2b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e298:	f7f2 fc6d 	bl	b76 <Port_schm_read_msr>
    e29c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e29e:	9b00      	ldr	r3, [sp, #0]
    e2a0:	f003 0301 	and.w	r3, r3, #1
    e2a4:	2b00      	cmp	r3, #0
    e2a6:	d100      	bne.n	e2aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e2a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    e2aa:	490a      	ldr	r1, [pc, #40]	; (e2d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    e2ac:	9b01      	ldr	r3, [sp, #4]
    e2ae:	9a00      	ldr	r2, [sp, #0]
    e2b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    e2b4:	4a06      	ldr	r2, [pc, #24]	; (e2d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    e2b6:	9b01      	ldr	r3, [sp, #4]
    e2b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2bc:	1c5a      	adds	r2, r3, #1
    e2be:	4904      	ldr	r1, [pc, #16]	; (e2d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    e2c0:	9b01      	ldr	r3, [sp, #4]
    e2c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e2c6:	bf00      	nop
    e2c8:	b003      	add	sp, #12
    e2ca:	f85d fb04 	ldr.w	pc, [sp], #4
    e2ce:	bf00      	nop
    e2d0:	1fff90c4 	.word	0x1fff90c4
    e2d4:	1fff90c0 	.word	0x1fff90c0

0000e2d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    e2d8:	b500      	push	{lr}
    e2da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e2dc:	f7f2 fd88 	bl	df0 <Sys_GetCoreID>
    e2e0:	4603      	mov	r3, r0
    e2e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    e2e4:	4a0d      	ldr	r2, [pc, #52]	; (e31c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    e2e6:	9b01      	ldr	r3, [sp, #4]
    e2e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2ec:	1e5a      	subs	r2, r3, #1
    e2ee:	490b      	ldr	r1, [pc, #44]	; (e31c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    e2f0:	9b01      	ldr	r3, [sp, #4]
    e2f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    e2f6:	4a0a      	ldr	r2, [pc, #40]	; (e320 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    e2f8:	9b01      	ldr	r3, [sp, #4]
    e2fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2fe:	f003 0301 	and.w	r3, r3, #1
    e302:	2b00      	cmp	r3, #0
    e304:	d106      	bne.n	e314 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    e306:	4a05      	ldr	r2, [pc, #20]	; (e31c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    e308:	9b01      	ldr	r3, [sp, #4]
    e30a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e30e:	2b00      	cmp	r3, #0
    e310:	d100      	bne.n	e314 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e312:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e314:	bf00      	nop
    e316:	b003      	add	sp, #12
    e318:	f85d fb04 	ldr.w	pc, [sp], #4
    e31c:	1fff90c4 	.word	0x1fff90c4
    e320:	1fff90c0 	.word	0x1fff90c0

0000e324 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    e324:	b500      	push	{lr}
    e326:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e328:	f7f2 fd62 	bl	df0 <Sys_GetCoreID>
    e32c:	4603      	mov	r3, r0
    e32e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    e330:	4a10      	ldr	r2, [pc, #64]	; (e374 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    e332:	9b01      	ldr	r3, [sp, #4]
    e334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e338:	2b00      	cmp	r3, #0
    e33a:	d10d      	bne.n	e358 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e33c:	f7f2 fc1b 	bl	b76 <Port_schm_read_msr>
    e340:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e342:	9b00      	ldr	r3, [sp, #0]
    e344:	f003 0301 	and.w	r3, r3, #1
    e348:	2b00      	cmp	r3, #0
    e34a:	d100      	bne.n	e34e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e34c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    e34e:	490a      	ldr	r1, [pc, #40]	; (e378 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    e350:	9b01      	ldr	r3, [sp, #4]
    e352:	9a00      	ldr	r2, [sp, #0]
    e354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    e358:	4a06      	ldr	r2, [pc, #24]	; (e374 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    e35a:	9b01      	ldr	r3, [sp, #4]
    e35c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e360:	1c5a      	adds	r2, r3, #1
    e362:	4904      	ldr	r1, [pc, #16]	; (e374 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    e364:	9b01      	ldr	r3, [sp, #4]
    e366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e36a:	bf00      	nop
    e36c:	b003      	add	sp, #12
    e36e:	f85d fb04 	ldr.w	pc, [sp], #4
    e372:	bf00      	nop
    e374:	1fff90cc 	.word	0x1fff90cc
    e378:	1fff90c8 	.word	0x1fff90c8

0000e37c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    e37c:	b500      	push	{lr}
    e37e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e380:	f7f2 fd36 	bl	df0 <Sys_GetCoreID>
    e384:	4603      	mov	r3, r0
    e386:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    e388:	4a0d      	ldr	r2, [pc, #52]	; (e3c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    e38a:	9b01      	ldr	r3, [sp, #4]
    e38c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e390:	1e5a      	subs	r2, r3, #1
    e392:	490b      	ldr	r1, [pc, #44]	; (e3c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    e394:	9b01      	ldr	r3, [sp, #4]
    e396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    e39a:	4a0a      	ldr	r2, [pc, #40]	; (e3c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    e39c:	9b01      	ldr	r3, [sp, #4]
    e39e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3a2:	f003 0301 	and.w	r3, r3, #1
    e3a6:	2b00      	cmp	r3, #0
    e3a8:	d106      	bne.n	e3b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    e3aa:	4a05      	ldr	r2, [pc, #20]	; (e3c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    e3ac:	9b01      	ldr	r3, [sp, #4]
    e3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3b2:	2b00      	cmp	r3, #0
    e3b4:	d100      	bne.n	e3b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e3b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e3b8:	bf00      	nop
    e3ba:	b003      	add	sp, #12
    e3bc:	f85d fb04 	ldr.w	pc, [sp], #4
    e3c0:	1fff90cc 	.word	0x1fff90cc
    e3c4:	1fff90c8 	.word	0x1fff90c8

0000e3c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    e3c8:	b500      	push	{lr}
    e3ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e3cc:	f7f2 fd10 	bl	df0 <Sys_GetCoreID>
    e3d0:	4603      	mov	r3, r0
    e3d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    e3d4:	4a10      	ldr	r2, [pc, #64]	; (e418 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    e3d6:	9b01      	ldr	r3, [sp, #4]
    e3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3dc:	2b00      	cmp	r3, #0
    e3de:	d10d      	bne.n	e3fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e3e0:	f7f2 fbc9 	bl	b76 <Port_schm_read_msr>
    e3e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e3e6:	9b00      	ldr	r3, [sp, #0]
    e3e8:	f003 0301 	and.w	r3, r3, #1
    e3ec:	2b00      	cmp	r3, #0
    e3ee:	d100      	bne.n	e3f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e3f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    e3f2:	490a      	ldr	r1, [pc, #40]	; (e41c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    e3f4:	9b01      	ldr	r3, [sp, #4]
    e3f6:	9a00      	ldr	r2, [sp, #0]
    e3f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    e3fc:	4a06      	ldr	r2, [pc, #24]	; (e418 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    e3fe:	9b01      	ldr	r3, [sp, #4]
    e400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e404:	1c5a      	adds	r2, r3, #1
    e406:	4904      	ldr	r1, [pc, #16]	; (e418 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    e408:	9b01      	ldr	r3, [sp, #4]
    e40a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e40e:	bf00      	nop
    e410:	b003      	add	sp, #12
    e412:	f85d fb04 	ldr.w	pc, [sp], #4
    e416:	bf00      	nop
    e418:	1fff90d4 	.word	0x1fff90d4
    e41c:	1fff90d0 	.word	0x1fff90d0

0000e420 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    e420:	b500      	push	{lr}
    e422:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e424:	f7f2 fce4 	bl	df0 <Sys_GetCoreID>
    e428:	4603      	mov	r3, r0
    e42a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    e42c:	4a0d      	ldr	r2, [pc, #52]	; (e464 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    e42e:	9b01      	ldr	r3, [sp, #4]
    e430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e434:	1e5a      	subs	r2, r3, #1
    e436:	490b      	ldr	r1, [pc, #44]	; (e464 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    e438:	9b01      	ldr	r3, [sp, #4]
    e43a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    e43e:	4a0a      	ldr	r2, [pc, #40]	; (e468 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    e440:	9b01      	ldr	r3, [sp, #4]
    e442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e446:	f003 0301 	and.w	r3, r3, #1
    e44a:	2b00      	cmp	r3, #0
    e44c:	d106      	bne.n	e45c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    e44e:	4a05      	ldr	r2, [pc, #20]	; (e464 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    e450:	9b01      	ldr	r3, [sp, #4]
    e452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e456:	2b00      	cmp	r3, #0
    e458:	d100      	bne.n	e45c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e45a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e45c:	bf00      	nop
    e45e:	b003      	add	sp, #12
    e460:	f85d fb04 	ldr.w	pc, [sp], #4
    e464:	1fff90d4 	.word	0x1fff90d4
    e468:	1fff90d0 	.word	0x1fff90d0

0000e46c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    e46c:	b500      	push	{lr}
    e46e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e470:	f7f2 fcbe 	bl	df0 <Sys_GetCoreID>
    e474:	4603      	mov	r3, r0
    e476:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    e478:	4a10      	ldr	r2, [pc, #64]	; (e4bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    e47a:	9b01      	ldr	r3, [sp, #4]
    e47c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e480:	2b00      	cmp	r3, #0
    e482:	d10d      	bne.n	e4a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e484:	f7f2 fb77 	bl	b76 <Port_schm_read_msr>
    e488:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e48a:	9b00      	ldr	r3, [sp, #0]
    e48c:	f003 0301 	and.w	r3, r3, #1
    e490:	2b00      	cmp	r3, #0
    e492:	d100      	bne.n	e496 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e494:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    e496:	490a      	ldr	r1, [pc, #40]	; (e4c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    e498:	9b01      	ldr	r3, [sp, #4]
    e49a:	9a00      	ldr	r2, [sp, #0]
    e49c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    e4a0:	4a06      	ldr	r2, [pc, #24]	; (e4bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    e4a2:	9b01      	ldr	r3, [sp, #4]
    e4a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4a8:	1c5a      	adds	r2, r3, #1
    e4aa:	4904      	ldr	r1, [pc, #16]	; (e4bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    e4ac:	9b01      	ldr	r3, [sp, #4]
    e4ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e4b2:	bf00      	nop
    e4b4:	b003      	add	sp, #12
    e4b6:	f85d fb04 	ldr.w	pc, [sp], #4
    e4ba:	bf00      	nop
    e4bc:	1fff90dc 	.word	0x1fff90dc
    e4c0:	1fff90d8 	.word	0x1fff90d8

0000e4c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    e4c4:	b500      	push	{lr}
    e4c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e4c8:	f7f2 fc92 	bl	df0 <Sys_GetCoreID>
    e4cc:	4603      	mov	r3, r0
    e4ce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    e4d0:	4a0d      	ldr	r2, [pc, #52]	; (e508 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    e4d2:	9b01      	ldr	r3, [sp, #4]
    e4d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4d8:	1e5a      	subs	r2, r3, #1
    e4da:	490b      	ldr	r1, [pc, #44]	; (e508 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    e4dc:	9b01      	ldr	r3, [sp, #4]
    e4de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    e4e2:	4a0a      	ldr	r2, [pc, #40]	; (e50c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    e4e4:	9b01      	ldr	r3, [sp, #4]
    e4e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4ea:	f003 0301 	and.w	r3, r3, #1
    e4ee:	2b00      	cmp	r3, #0
    e4f0:	d106      	bne.n	e500 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    e4f2:	4a05      	ldr	r2, [pc, #20]	; (e508 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    e4f4:	9b01      	ldr	r3, [sp, #4]
    e4f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4fa:	2b00      	cmp	r3, #0
    e4fc:	d100      	bne.n	e500 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e4fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e500:	bf00      	nop
    e502:	b003      	add	sp, #12
    e504:	f85d fb04 	ldr.w	pc, [sp], #4
    e508:	1fff90dc 	.word	0x1fff90dc
    e50c:	1fff90d8 	.word	0x1fff90d8

0000e510 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    e510:	b500      	push	{lr}
    e512:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e514:	f7f2 fc6c 	bl	df0 <Sys_GetCoreID>
    e518:	4603      	mov	r3, r0
    e51a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    e51c:	4a10      	ldr	r2, [pc, #64]	; (e560 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    e51e:	9b01      	ldr	r3, [sp, #4]
    e520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e524:	2b00      	cmp	r3, #0
    e526:	d10d      	bne.n	e544 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e528:	f7f2 fb25 	bl	b76 <Port_schm_read_msr>
    e52c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e52e:	9b00      	ldr	r3, [sp, #0]
    e530:	f003 0301 	and.w	r3, r3, #1
    e534:	2b00      	cmp	r3, #0
    e536:	d100      	bne.n	e53a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e538:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    e53a:	490a      	ldr	r1, [pc, #40]	; (e564 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    e53c:	9b01      	ldr	r3, [sp, #4]
    e53e:	9a00      	ldr	r2, [sp, #0]
    e540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    e544:	4a06      	ldr	r2, [pc, #24]	; (e560 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    e546:	9b01      	ldr	r3, [sp, #4]
    e548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e54c:	1c5a      	adds	r2, r3, #1
    e54e:	4904      	ldr	r1, [pc, #16]	; (e560 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    e550:	9b01      	ldr	r3, [sp, #4]
    e552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e556:	bf00      	nop
    e558:	b003      	add	sp, #12
    e55a:	f85d fb04 	ldr.w	pc, [sp], #4
    e55e:	bf00      	nop
    e560:	1fff90e4 	.word	0x1fff90e4
    e564:	1fff90e0 	.word	0x1fff90e0

0000e568 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    e568:	b500      	push	{lr}
    e56a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e56c:	f7f2 fc40 	bl	df0 <Sys_GetCoreID>
    e570:	4603      	mov	r3, r0
    e572:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    e574:	4a0d      	ldr	r2, [pc, #52]	; (e5ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    e576:	9b01      	ldr	r3, [sp, #4]
    e578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e57c:	1e5a      	subs	r2, r3, #1
    e57e:	490b      	ldr	r1, [pc, #44]	; (e5ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    e580:	9b01      	ldr	r3, [sp, #4]
    e582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    e586:	4a0a      	ldr	r2, [pc, #40]	; (e5b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    e588:	9b01      	ldr	r3, [sp, #4]
    e58a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e58e:	f003 0301 	and.w	r3, r3, #1
    e592:	2b00      	cmp	r3, #0
    e594:	d106      	bne.n	e5a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    e596:	4a05      	ldr	r2, [pc, #20]	; (e5ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    e598:	9b01      	ldr	r3, [sp, #4]
    e59a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e59e:	2b00      	cmp	r3, #0
    e5a0:	d100      	bne.n	e5a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e5a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e5a4:	bf00      	nop
    e5a6:	b003      	add	sp, #12
    e5a8:	f85d fb04 	ldr.w	pc, [sp], #4
    e5ac:	1fff90e4 	.word	0x1fff90e4
    e5b0:	1fff90e0 	.word	0x1fff90e0

0000e5b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    e5b4:	b500      	push	{lr}
    e5b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5b8:	f7f2 fc1a 	bl	df0 <Sys_GetCoreID>
    e5bc:	4603      	mov	r3, r0
    e5be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    e5c0:	4a10      	ldr	r2, [pc, #64]	; (e604 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    e5c2:	9b01      	ldr	r3, [sp, #4]
    e5c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5c8:	2b00      	cmp	r3, #0
    e5ca:	d10d      	bne.n	e5e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e5cc:	f7f2 fad3 	bl	b76 <Port_schm_read_msr>
    e5d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e5d2:	9b00      	ldr	r3, [sp, #0]
    e5d4:	f003 0301 	and.w	r3, r3, #1
    e5d8:	2b00      	cmp	r3, #0
    e5da:	d100      	bne.n	e5de <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e5dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    e5de:	490a      	ldr	r1, [pc, #40]	; (e608 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    e5e0:	9b01      	ldr	r3, [sp, #4]
    e5e2:	9a00      	ldr	r2, [sp, #0]
    e5e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    e5e8:	4a06      	ldr	r2, [pc, #24]	; (e604 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    e5ea:	9b01      	ldr	r3, [sp, #4]
    e5ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5f0:	1c5a      	adds	r2, r3, #1
    e5f2:	4904      	ldr	r1, [pc, #16]	; (e604 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    e5f4:	9b01      	ldr	r3, [sp, #4]
    e5f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e5fa:	bf00      	nop
    e5fc:	b003      	add	sp, #12
    e5fe:	f85d fb04 	ldr.w	pc, [sp], #4
    e602:	bf00      	nop
    e604:	1fff90ec 	.word	0x1fff90ec
    e608:	1fff90e8 	.word	0x1fff90e8

0000e60c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    e60c:	b500      	push	{lr}
    e60e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e610:	f7f2 fbee 	bl	df0 <Sys_GetCoreID>
    e614:	4603      	mov	r3, r0
    e616:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    e618:	4a0d      	ldr	r2, [pc, #52]	; (e650 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    e61a:	9b01      	ldr	r3, [sp, #4]
    e61c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e620:	1e5a      	subs	r2, r3, #1
    e622:	490b      	ldr	r1, [pc, #44]	; (e650 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    e624:	9b01      	ldr	r3, [sp, #4]
    e626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    e62a:	4a0a      	ldr	r2, [pc, #40]	; (e654 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    e62c:	9b01      	ldr	r3, [sp, #4]
    e62e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e632:	f003 0301 	and.w	r3, r3, #1
    e636:	2b00      	cmp	r3, #0
    e638:	d106      	bne.n	e648 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    e63a:	4a05      	ldr	r2, [pc, #20]	; (e650 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    e63c:	9b01      	ldr	r3, [sp, #4]
    e63e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e642:	2b00      	cmp	r3, #0
    e644:	d100      	bne.n	e648 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e646:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e648:	bf00      	nop
    e64a:	b003      	add	sp, #12
    e64c:	f85d fb04 	ldr.w	pc, [sp], #4
    e650:	1fff90ec 	.word	0x1fff90ec
    e654:	1fff90e8 	.word	0x1fff90e8

0000e658 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    e658:	b500      	push	{lr}
    e65a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e65c:	f7f2 fbc8 	bl	df0 <Sys_GetCoreID>
    e660:	4603      	mov	r3, r0
    e662:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    e664:	4a10      	ldr	r2, [pc, #64]	; (e6a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    e666:	9b01      	ldr	r3, [sp, #4]
    e668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e66c:	2b00      	cmp	r3, #0
    e66e:	d10d      	bne.n	e68c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e670:	f7f2 fa81 	bl	b76 <Port_schm_read_msr>
    e674:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e676:	9b00      	ldr	r3, [sp, #0]
    e678:	f003 0301 	and.w	r3, r3, #1
    e67c:	2b00      	cmp	r3, #0
    e67e:	d100      	bne.n	e682 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e680:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    e682:	490a      	ldr	r1, [pc, #40]	; (e6ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    e684:	9b01      	ldr	r3, [sp, #4]
    e686:	9a00      	ldr	r2, [sp, #0]
    e688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    e68c:	4a06      	ldr	r2, [pc, #24]	; (e6a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    e68e:	9b01      	ldr	r3, [sp, #4]
    e690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e694:	1c5a      	adds	r2, r3, #1
    e696:	4904      	ldr	r1, [pc, #16]	; (e6a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    e698:	9b01      	ldr	r3, [sp, #4]
    e69a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e69e:	bf00      	nop
    e6a0:	b003      	add	sp, #12
    e6a2:	f85d fb04 	ldr.w	pc, [sp], #4
    e6a6:	bf00      	nop
    e6a8:	1fff90f4 	.word	0x1fff90f4
    e6ac:	1fff90f0 	.word	0x1fff90f0

0000e6b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    e6b0:	b500      	push	{lr}
    e6b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6b4:	f7f2 fb9c 	bl	df0 <Sys_GetCoreID>
    e6b8:	4603      	mov	r3, r0
    e6ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    e6bc:	4a0d      	ldr	r2, [pc, #52]	; (e6f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    e6be:	9b01      	ldr	r3, [sp, #4]
    e6c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6c4:	1e5a      	subs	r2, r3, #1
    e6c6:	490b      	ldr	r1, [pc, #44]	; (e6f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    e6c8:	9b01      	ldr	r3, [sp, #4]
    e6ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    e6ce:	4a0a      	ldr	r2, [pc, #40]	; (e6f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    e6d0:	9b01      	ldr	r3, [sp, #4]
    e6d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6d6:	f003 0301 	and.w	r3, r3, #1
    e6da:	2b00      	cmp	r3, #0
    e6dc:	d106      	bne.n	e6ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    e6de:	4a05      	ldr	r2, [pc, #20]	; (e6f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    e6e0:	9b01      	ldr	r3, [sp, #4]
    e6e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6e6:	2b00      	cmp	r3, #0
    e6e8:	d100      	bne.n	e6ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e6ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e6ec:	bf00      	nop
    e6ee:	b003      	add	sp, #12
    e6f0:	f85d fb04 	ldr.w	pc, [sp], #4
    e6f4:	1fff90f4 	.word	0x1fff90f4
    e6f8:	1fff90f0 	.word	0x1fff90f0

0000e6fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    e6fc:	b500      	push	{lr}
    e6fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e700:	f7f2 fb76 	bl	df0 <Sys_GetCoreID>
    e704:	4603      	mov	r3, r0
    e706:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    e708:	4a10      	ldr	r2, [pc, #64]	; (e74c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    e70a:	9b01      	ldr	r3, [sp, #4]
    e70c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e710:	2b00      	cmp	r3, #0
    e712:	d10d      	bne.n	e730 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e714:	f7f2 fa2f 	bl	b76 <Port_schm_read_msr>
    e718:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e71a:	9b00      	ldr	r3, [sp, #0]
    e71c:	f003 0301 	and.w	r3, r3, #1
    e720:	2b00      	cmp	r3, #0
    e722:	d100      	bne.n	e726 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e724:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    e726:	490a      	ldr	r1, [pc, #40]	; (e750 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    e728:	9b01      	ldr	r3, [sp, #4]
    e72a:	9a00      	ldr	r2, [sp, #0]
    e72c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    e730:	4a06      	ldr	r2, [pc, #24]	; (e74c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    e732:	9b01      	ldr	r3, [sp, #4]
    e734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e738:	1c5a      	adds	r2, r3, #1
    e73a:	4904      	ldr	r1, [pc, #16]	; (e74c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    e73c:	9b01      	ldr	r3, [sp, #4]
    e73e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e742:	bf00      	nop
    e744:	b003      	add	sp, #12
    e746:	f85d fb04 	ldr.w	pc, [sp], #4
    e74a:	bf00      	nop
    e74c:	1fff90fc 	.word	0x1fff90fc
    e750:	1fff90f8 	.word	0x1fff90f8

0000e754 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    e754:	b500      	push	{lr}
    e756:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e758:	f7f2 fb4a 	bl	df0 <Sys_GetCoreID>
    e75c:	4603      	mov	r3, r0
    e75e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    e760:	4a0d      	ldr	r2, [pc, #52]	; (e798 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    e762:	9b01      	ldr	r3, [sp, #4]
    e764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e768:	1e5a      	subs	r2, r3, #1
    e76a:	490b      	ldr	r1, [pc, #44]	; (e798 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    e76c:	9b01      	ldr	r3, [sp, #4]
    e76e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    e772:	4a0a      	ldr	r2, [pc, #40]	; (e79c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    e774:	9b01      	ldr	r3, [sp, #4]
    e776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e77a:	f003 0301 	and.w	r3, r3, #1
    e77e:	2b00      	cmp	r3, #0
    e780:	d106      	bne.n	e790 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    e782:	4a05      	ldr	r2, [pc, #20]	; (e798 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    e784:	9b01      	ldr	r3, [sp, #4]
    e786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e78a:	2b00      	cmp	r3, #0
    e78c:	d100      	bne.n	e790 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e78e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e790:	bf00      	nop
    e792:	b003      	add	sp, #12
    e794:	f85d fb04 	ldr.w	pc, [sp], #4
    e798:	1fff90fc 	.word	0x1fff90fc
    e79c:	1fff90f8 	.word	0x1fff90f8

0000e7a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    e7a0:	b500      	push	{lr}
    e7a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7a4:	f7f2 fb24 	bl	df0 <Sys_GetCoreID>
    e7a8:	4603      	mov	r3, r0
    e7aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    e7ac:	4a10      	ldr	r2, [pc, #64]	; (e7f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    e7ae:	9b01      	ldr	r3, [sp, #4]
    e7b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7b4:	2b00      	cmp	r3, #0
    e7b6:	d10d      	bne.n	e7d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e7b8:	f7f2 f9dd 	bl	b76 <Port_schm_read_msr>
    e7bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e7be:	9b00      	ldr	r3, [sp, #0]
    e7c0:	f003 0301 	and.w	r3, r3, #1
    e7c4:	2b00      	cmp	r3, #0
    e7c6:	d100      	bne.n	e7ca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e7c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    e7ca:	490a      	ldr	r1, [pc, #40]	; (e7f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    e7cc:	9b01      	ldr	r3, [sp, #4]
    e7ce:	9a00      	ldr	r2, [sp, #0]
    e7d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    e7d4:	4a06      	ldr	r2, [pc, #24]	; (e7f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    e7d6:	9b01      	ldr	r3, [sp, #4]
    e7d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7dc:	1c5a      	adds	r2, r3, #1
    e7de:	4904      	ldr	r1, [pc, #16]	; (e7f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    e7e0:	9b01      	ldr	r3, [sp, #4]
    e7e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e7e6:	bf00      	nop
    e7e8:	b003      	add	sp, #12
    e7ea:	f85d fb04 	ldr.w	pc, [sp], #4
    e7ee:	bf00      	nop
    e7f0:	1fff9104 	.word	0x1fff9104
    e7f4:	1fff9100 	.word	0x1fff9100

0000e7f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    e7f8:	b500      	push	{lr}
    e7fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7fc:	f7f2 faf8 	bl	df0 <Sys_GetCoreID>
    e800:	4603      	mov	r3, r0
    e802:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    e804:	4a0d      	ldr	r2, [pc, #52]	; (e83c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    e806:	9b01      	ldr	r3, [sp, #4]
    e808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e80c:	1e5a      	subs	r2, r3, #1
    e80e:	490b      	ldr	r1, [pc, #44]	; (e83c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    e810:	9b01      	ldr	r3, [sp, #4]
    e812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    e816:	4a0a      	ldr	r2, [pc, #40]	; (e840 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    e818:	9b01      	ldr	r3, [sp, #4]
    e81a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e81e:	f003 0301 	and.w	r3, r3, #1
    e822:	2b00      	cmp	r3, #0
    e824:	d106      	bne.n	e834 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    e826:	4a05      	ldr	r2, [pc, #20]	; (e83c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    e828:	9b01      	ldr	r3, [sp, #4]
    e82a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e82e:	2b00      	cmp	r3, #0
    e830:	d100      	bne.n	e834 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e832:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e834:	bf00      	nop
    e836:	b003      	add	sp, #12
    e838:	f85d fb04 	ldr.w	pc, [sp], #4
    e83c:	1fff9104 	.word	0x1fff9104
    e840:	1fff9100 	.word	0x1fff9100

0000e844 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    e844:	b500      	push	{lr}
    e846:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e848:	f7f2 fad2 	bl	df0 <Sys_GetCoreID>
    e84c:	4603      	mov	r3, r0
    e84e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    e850:	4a10      	ldr	r2, [pc, #64]	; (e894 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    e852:	9b01      	ldr	r3, [sp, #4]
    e854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e858:	2b00      	cmp	r3, #0
    e85a:	d10d      	bne.n	e878 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e85c:	f7f2 f98b 	bl	b76 <Port_schm_read_msr>
    e860:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e862:	9b00      	ldr	r3, [sp, #0]
    e864:	f003 0301 	and.w	r3, r3, #1
    e868:	2b00      	cmp	r3, #0
    e86a:	d100      	bne.n	e86e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e86c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    e86e:	490a      	ldr	r1, [pc, #40]	; (e898 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    e870:	9b01      	ldr	r3, [sp, #4]
    e872:	9a00      	ldr	r2, [sp, #0]
    e874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    e878:	4a06      	ldr	r2, [pc, #24]	; (e894 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    e87a:	9b01      	ldr	r3, [sp, #4]
    e87c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e880:	1c5a      	adds	r2, r3, #1
    e882:	4904      	ldr	r1, [pc, #16]	; (e894 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    e884:	9b01      	ldr	r3, [sp, #4]
    e886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e88a:	bf00      	nop
    e88c:	b003      	add	sp, #12
    e88e:	f85d fb04 	ldr.w	pc, [sp], #4
    e892:	bf00      	nop
    e894:	1fff910c 	.word	0x1fff910c
    e898:	1fff9108 	.word	0x1fff9108

0000e89c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    e89c:	b500      	push	{lr}
    e89e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8a0:	f7f2 faa6 	bl	df0 <Sys_GetCoreID>
    e8a4:	4603      	mov	r3, r0
    e8a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    e8a8:	4a0d      	ldr	r2, [pc, #52]	; (e8e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    e8aa:	9b01      	ldr	r3, [sp, #4]
    e8ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8b0:	1e5a      	subs	r2, r3, #1
    e8b2:	490b      	ldr	r1, [pc, #44]	; (e8e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    e8b4:	9b01      	ldr	r3, [sp, #4]
    e8b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    e8ba:	4a0a      	ldr	r2, [pc, #40]	; (e8e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    e8bc:	9b01      	ldr	r3, [sp, #4]
    e8be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8c2:	f003 0301 	and.w	r3, r3, #1
    e8c6:	2b00      	cmp	r3, #0
    e8c8:	d106      	bne.n	e8d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    e8ca:	4a05      	ldr	r2, [pc, #20]	; (e8e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    e8cc:	9b01      	ldr	r3, [sp, #4]
    e8ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8d2:	2b00      	cmp	r3, #0
    e8d4:	d100      	bne.n	e8d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e8d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e8d8:	bf00      	nop
    e8da:	b003      	add	sp, #12
    e8dc:	f85d fb04 	ldr.w	pc, [sp], #4
    e8e0:	1fff910c 	.word	0x1fff910c
    e8e4:	1fff9108 	.word	0x1fff9108

0000e8e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    e8e8:	b500      	push	{lr}
    e8ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8ec:	f7f2 fa80 	bl	df0 <Sys_GetCoreID>
    e8f0:	4603      	mov	r3, r0
    e8f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    e8f4:	4a10      	ldr	r2, [pc, #64]	; (e938 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    e8f6:	9b01      	ldr	r3, [sp, #4]
    e8f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8fc:	2b00      	cmp	r3, #0
    e8fe:	d10d      	bne.n	e91c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e900:	f7f2 f939 	bl	b76 <Port_schm_read_msr>
    e904:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e906:	9b00      	ldr	r3, [sp, #0]
    e908:	f003 0301 	and.w	r3, r3, #1
    e90c:	2b00      	cmp	r3, #0
    e90e:	d100      	bne.n	e912 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e910:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    e912:	490a      	ldr	r1, [pc, #40]	; (e93c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    e914:	9b01      	ldr	r3, [sp, #4]
    e916:	9a00      	ldr	r2, [sp, #0]
    e918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    e91c:	4a06      	ldr	r2, [pc, #24]	; (e938 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    e91e:	9b01      	ldr	r3, [sp, #4]
    e920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e924:	1c5a      	adds	r2, r3, #1
    e926:	4904      	ldr	r1, [pc, #16]	; (e938 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    e928:	9b01      	ldr	r3, [sp, #4]
    e92a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e92e:	bf00      	nop
    e930:	b003      	add	sp, #12
    e932:	f85d fb04 	ldr.w	pc, [sp], #4
    e936:	bf00      	nop
    e938:	1fff9114 	.word	0x1fff9114
    e93c:	1fff9110 	.word	0x1fff9110

0000e940 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    e940:	b500      	push	{lr}
    e942:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e944:	f7f2 fa54 	bl	df0 <Sys_GetCoreID>
    e948:	4603      	mov	r3, r0
    e94a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    e94c:	4a0d      	ldr	r2, [pc, #52]	; (e984 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    e94e:	9b01      	ldr	r3, [sp, #4]
    e950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e954:	1e5a      	subs	r2, r3, #1
    e956:	490b      	ldr	r1, [pc, #44]	; (e984 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    e958:	9b01      	ldr	r3, [sp, #4]
    e95a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    e95e:	4a0a      	ldr	r2, [pc, #40]	; (e988 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    e960:	9b01      	ldr	r3, [sp, #4]
    e962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e966:	f003 0301 	and.w	r3, r3, #1
    e96a:	2b00      	cmp	r3, #0
    e96c:	d106      	bne.n	e97c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    e96e:	4a05      	ldr	r2, [pc, #20]	; (e984 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    e970:	9b01      	ldr	r3, [sp, #4]
    e972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e976:	2b00      	cmp	r3, #0
    e978:	d100      	bne.n	e97c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e97a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e97c:	bf00      	nop
    e97e:	b003      	add	sp, #12
    e980:	f85d fb04 	ldr.w	pc, [sp], #4
    e984:	1fff9114 	.word	0x1fff9114
    e988:	1fff9110 	.word	0x1fff9110

0000e98c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    e98c:	b500      	push	{lr}
    e98e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e990:	f7f2 fa2e 	bl	df0 <Sys_GetCoreID>
    e994:	4603      	mov	r3, r0
    e996:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    e998:	4a10      	ldr	r2, [pc, #64]	; (e9dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    e99a:	9b01      	ldr	r3, [sp, #4]
    e99c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9a0:	2b00      	cmp	r3, #0
    e9a2:	d10d      	bne.n	e9c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e9a4:	f7f2 f8e7 	bl	b76 <Port_schm_read_msr>
    e9a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e9aa:	9b00      	ldr	r3, [sp, #0]
    e9ac:	f003 0301 	and.w	r3, r3, #1
    e9b0:	2b00      	cmp	r3, #0
    e9b2:	d100      	bne.n	e9b6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e9b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    e9b6:	490a      	ldr	r1, [pc, #40]	; (e9e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    e9b8:	9b01      	ldr	r3, [sp, #4]
    e9ba:	9a00      	ldr	r2, [sp, #0]
    e9bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    e9c0:	4a06      	ldr	r2, [pc, #24]	; (e9dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    e9c2:	9b01      	ldr	r3, [sp, #4]
    e9c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9c8:	1c5a      	adds	r2, r3, #1
    e9ca:	4904      	ldr	r1, [pc, #16]	; (e9dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    e9cc:	9b01      	ldr	r3, [sp, #4]
    e9ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e9d2:	bf00      	nop
    e9d4:	b003      	add	sp, #12
    e9d6:	f85d fb04 	ldr.w	pc, [sp], #4
    e9da:	bf00      	nop
    e9dc:	1fff911c 	.word	0x1fff911c
    e9e0:	1fff9118 	.word	0x1fff9118

0000e9e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    e9e4:	b500      	push	{lr}
    e9e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9e8:	f7f2 fa02 	bl	df0 <Sys_GetCoreID>
    e9ec:	4603      	mov	r3, r0
    e9ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    e9f0:	4a0d      	ldr	r2, [pc, #52]	; (ea28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    e9f2:	9b01      	ldr	r3, [sp, #4]
    e9f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9f8:	1e5a      	subs	r2, r3, #1
    e9fa:	490b      	ldr	r1, [pc, #44]	; (ea28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    e9fc:	9b01      	ldr	r3, [sp, #4]
    e9fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    ea02:	4a0a      	ldr	r2, [pc, #40]	; (ea2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    ea04:	9b01      	ldr	r3, [sp, #4]
    ea06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea0a:	f003 0301 	and.w	r3, r3, #1
    ea0e:	2b00      	cmp	r3, #0
    ea10:	d106      	bne.n	ea20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    ea12:	4a05      	ldr	r2, [pc, #20]	; (ea28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    ea14:	9b01      	ldr	r3, [sp, #4]
    ea16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea1a:	2b00      	cmp	r3, #0
    ea1c:	d100      	bne.n	ea20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ea1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ea20:	bf00      	nop
    ea22:	b003      	add	sp, #12
    ea24:	f85d fb04 	ldr.w	pc, [sp], #4
    ea28:	1fff911c 	.word	0x1fff911c
    ea2c:	1fff9118 	.word	0x1fff9118

0000ea30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    ea30:	b500      	push	{lr}
    ea32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea34:	f7f2 f9dc 	bl	df0 <Sys_GetCoreID>
    ea38:	4603      	mov	r3, r0
    ea3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    ea3c:	4a10      	ldr	r2, [pc, #64]	; (ea80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    ea3e:	9b01      	ldr	r3, [sp, #4]
    ea40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea44:	2b00      	cmp	r3, #0
    ea46:	d10d      	bne.n	ea64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ea48:	f7f2 f895 	bl	b76 <Port_schm_read_msr>
    ea4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ea4e:	9b00      	ldr	r3, [sp, #0]
    ea50:	f003 0301 	and.w	r3, r3, #1
    ea54:	2b00      	cmp	r3, #0
    ea56:	d100      	bne.n	ea5a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ea58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    ea5a:	490a      	ldr	r1, [pc, #40]	; (ea84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    ea5c:	9b01      	ldr	r3, [sp, #4]
    ea5e:	9a00      	ldr	r2, [sp, #0]
    ea60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    ea64:	4a06      	ldr	r2, [pc, #24]	; (ea80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    ea66:	9b01      	ldr	r3, [sp, #4]
    ea68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea6c:	1c5a      	adds	r2, r3, #1
    ea6e:	4904      	ldr	r1, [pc, #16]	; (ea80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    ea70:	9b01      	ldr	r3, [sp, #4]
    ea72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ea76:	bf00      	nop
    ea78:	b003      	add	sp, #12
    ea7a:	f85d fb04 	ldr.w	pc, [sp], #4
    ea7e:	bf00      	nop
    ea80:	1fff9124 	.word	0x1fff9124
    ea84:	1fff9120 	.word	0x1fff9120

0000ea88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    ea88:	b500      	push	{lr}
    ea8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea8c:	f7f2 f9b0 	bl	df0 <Sys_GetCoreID>
    ea90:	4603      	mov	r3, r0
    ea92:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    ea94:	4a0d      	ldr	r2, [pc, #52]	; (eacc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    ea96:	9b01      	ldr	r3, [sp, #4]
    ea98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea9c:	1e5a      	subs	r2, r3, #1
    ea9e:	490b      	ldr	r1, [pc, #44]	; (eacc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    eaa0:	9b01      	ldr	r3, [sp, #4]
    eaa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    eaa6:	4a0a      	ldr	r2, [pc, #40]	; (ead0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    eaa8:	9b01      	ldr	r3, [sp, #4]
    eaaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaae:	f003 0301 	and.w	r3, r3, #1
    eab2:	2b00      	cmp	r3, #0
    eab4:	d106      	bne.n	eac4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    eab6:	4a05      	ldr	r2, [pc, #20]	; (eacc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    eab8:	9b01      	ldr	r3, [sp, #4]
    eaba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eabe:	2b00      	cmp	r3, #0
    eac0:	d100      	bne.n	eac4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eac2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eac4:	bf00      	nop
    eac6:	b003      	add	sp, #12
    eac8:	f85d fb04 	ldr.w	pc, [sp], #4
    eacc:	1fff9124 	.word	0x1fff9124
    ead0:	1fff9120 	.word	0x1fff9120

0000ead4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    ead4:	b500      	push	{lr}
    ead6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ead8:	f7f2 f98a 	bl	df0 <Sys_GetCoreID>
    eadc:	4603      	mov	r3, r0
    eade:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    eae0:	4a10      	ldr	r2, [pc, #64]	; (eb24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    eae2:	9b01      	ldr	r3, [sp, #4]
    eae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eae8:	2b00      	cmp	r3, #0
    eaea:	d10d      	bne.n	eb08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eaec:	f7f2 f843 	bl	b76 <Port_schm_read_msr>
    eaf0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eaf2:	9b00      	ldr	r3, [sp, #0]
    eaf4:	f003 0301 	and.w	r3, r3, #1
    eaf8:	2b00      	cmp	r3, #0
    eafa:	d100      	bne.n	eafe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eafc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    eafe:	490a      	ldr	r1, [pc, #40]	; (eb28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    eb00:	9b01      	ldr	r3, [sp, #4]
    eb02:	9a00      	ldr	r2, [sp, #0]
    eb04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    eb08:	4a06      	ldr	r2, [pc, #24]	; (eb24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    eb0a:	9b01      	ldr	r3, [sp, #4]
    eb0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb10:	1c5a      	adds	r2, r3, #1
    eb12:	4904      	ldr	r1, [pc, #16]	; (eb24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    eb14:	9b01      	ldr	r3, [sp, #4]
    eb16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eb1a:	bf00      	nop
    eb1c:	b003      	add	sp, #12
    eb1e:	f85d fb04 	ldr.w	pc, [sp], #4
    eb22:	bf00      	nop
    eb24:	1fff912c 	.word	0x1fff912c
    eb28:	1fff9128 	.word	0x1fff9128

0000eb2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    eb2c:	b500      	push	{lr}
    eb2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb30:	f7f2 f95e 	bl	df0 <Sys_GetCoreID>
    eb34:	4603      	mov	r3, r0
    eb36:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    eb38:	4a0d      	ldr	r2, [pc, #52]	; (eb70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    eb3a:	9b01      	ldr	r3, [sp, #4]
    eb3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb40:	1e5a      	subs	r2, r3, #1
    eb42:	490b      	ldr	r1, [pc, #44]	; (eb70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    eb44:	9b01      	ldr	r3, [sp, #4]
    eb46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    eb4a:	4a0a      	ldr	r2, [pc, #40]	; (eb74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    eb4c:	9b01      	ldr	r3, [sp, #4]
    eb4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb52:	f003 0301 	and.w	r3, r3, #1
    eb56:	2b00      	cmp	r3, #0
    eb58:	d106      	bne.n	eb68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    eb5a:	4a05      	ldr	r2, [pc, #20]	; (eb70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    eb5c:	9b01      	ldr	r3, [sp, #4]
    eb5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb62:	2b00      	cmp	r3, #0
    eb64:	d100      	bne.n	eb68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eb66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eb68:	bf00      	nop
    eb6a:	b003      	add	sp, #12
    eb6c:	f85d fb04 	ldr.w	pc, [sp], #4
    eb70:	1fff912c 	.word	0x1fff912c
    eb74:	1fff9128 	.word	0x1fff9128

0000eb78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    eb78:	b500      	push	{lr}
    eb7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb7c:	f7f2 f938 	bl	df0 <Sys_GetCoreID>
    eb80:	4603      	mov	r3, r0
    eb82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    eb84:	4a10      	ldr	r2, [pc, #64]	; (ebc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    eb86:	9b01      	ldr	r3, [sp, #4]
    eb88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb8c:	2b00      	cmp	r3, #0
    eb8e:	d10d      	bne.n	ebac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eb90:	f7f1 fff1 	bl	b76 <Port_schm_read_msr>
    eb94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eb96:	9b00      	ldr	r3, [sp, #0]
    eb98:	f003 0301 	and.w	r3, r3, #1
    eb9c:	2b00      	cmp	r3, #0
    eb9e:	d100      	bne.n	eba2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eba0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    eba2:	490a      	ldr	r1, [pc, #40]	; (ebcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    eba4:	9b01      	ldr	r3, [sp, #4]
    eba6:	9a00      	ldr	r2, [sp, #0]
    eba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    ebac:	4a06      	ldr	r2, [pc, #24]	; (ebc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    ebae:	9b01      	ldr	r3, [sp, #4]
    ebb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebb4:	1c5a      	adds	r2, r3, #1
    ebb6:	4904      	ldr	r1, [pc, #16]	; (ebc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    ebb8:	9b01      	ldr	r3, [sp, #4]
    ebba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ebbe:	bf00      	nop
    ebc0:	b003      	add	sp, #12
    ebc2:	f85d fb04 	ldr.w	pc, [sp], #4
    ebc6:	bf00      	nop
    ebc8:	1fff9134 	.word	0x1fff9134
    ebcc:	1fff9130 	.word	0x1fff9130

0000ebd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    ebd0:	b500      	push	{lr}
    ebd2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ebd4:	f7f2 f90c 	bl	df0 <Sys_GetCoreID>
    ebd8:	4603      	mov	r3, r0
    ebda:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    ebdc:	4a0d      	ldr	r2, [pc, #52]	; (ec14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    ebde:	9b01      	ldr	r3, [sp, #4]
    ebe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebe4:	1e5a      	subs	r2, r3, #1
    ebe6:	490b      	ldr	r1, [pc, #44]	; (ec14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    ebe8:	9b01      	ldr	r3, [sp, #4]
    ebea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    ebee:	4a0a      	ldr	r2, [pc, #40]	; (ec18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    ebf0:	9b01      	ldr	r3, [sp, #4]
    ebf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebf6:	f003 0301 	and.w	r3, r3, #1
    ebfa:	2b00      	cmp	r3, #0
    ebfc:	d106      	bne.n	ec0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    ebfe:	4a05      	ldr	r2, [pc, #20]	; (ec14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    ec00:	9b01      	ldr	r3, [sp, #4]
    ec02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec06:	2b00      	cmp	r3, #0
    ec08:	d100      	bne.n	ec0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ec0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ec0c:	bf00      	nop
    ec0e:	b003      	add	sp, #12
    ec10:	f85d fb04 	ldr.w	pc, [sp], #4
    ec14:	1fff9134 	.word	0x1fff9134
    ec18:	1fff9130 	.word	0x1fff9130

0000ec1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    ec1c:	b500      	push	{lr}
    ec1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec20:	f7f2 f8e6 	bl	df0 <Sys_GetCoreID>
    ec24:	4603      	mov	r3, r0
    ec26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    ec28:	4a10      	ldr	r2, [pc, #64]	; (ec6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    ec2a:	9b01      	ldr	r3, [sp, #4]
    ec2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec30:	2b00      	cmp	r3, #0
    ec32:	d10d      	bne.n	ec50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ec34:	f7f1 ff9f 	bl	b76 <Port_schm_read_msr>
    ec38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ec3a:	9b00      	ldr	r3, [sp, #0]
    ec3c:	f003 0301 	and.w	r3, r3, #1
    ec40:	2b00      	cmp	r3, #0
    ec42:	d100      	bne.n	ec46 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ec44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    ec46:	490a      	ldr	r1, [pc, #40]	; (ec70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    ec48:	9b01      	ldr	r3, [sp, #4]
    ec4a:	9a00      	ldr	r2, [sp, #0]
    ec4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    ec50:	4a06      	ldr	r2, [pc, #24]	; (ec6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    ec52:	9b01      	ldr	r3, [sp, #4]
    ec54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec58:	1c5a      	adds	r2, r3, #1
    ec5a:	4904      	ldr	r1, [pc, #16]	; (ec6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    ec5c:	9b01      	ldr	r3, [sp, #4]
    ec5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ec62:	bf00      	nop
    ec64:	b003      	add	sp, #12
    ec66:	f85d fb04 	ldr.w	pc, [sp], #4
    ec6a:	bf00      	nop
    ec6c:	1fff913c 	.word	0x1fff913c
    ec70:	1fff9138 	.word	0x1fff9138

0000ec74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    ec74:	b500      	push	{lr}
    ec76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec78:	f7f2 f8ba 	bl	df0 <Sys_GetCoreID>
    ec7c:	4603      	mov	r3, r0
    ec7e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    ec80:	4a0d      	ldr	r2, [pc, #52]	; (ecb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    ec82:	9b01      	ldr	r3, [sp, #4]
    ec84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec88:	1e5a      	subs	r2, r3, #1
    ec8a:	490b      	ldr	r1, [pc, #44]	; (ecb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    ec8c:	9b01      	ldr	r3, [sp, #4]
    ec8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    ec92:	4a0a      	ldr	r2, [pc, #40]	; (ecbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    ec94:	9b01      	ldr	r3, [sp, #4]
    ec96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec9a:	f003 0301 	and.w	r3, r3, #1
    ec9e:	2b00      	cmp	r3, #0
    eca0:	d106      	bne.n	ecb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    eca2:	4a05      	ldr	r2, [pc, #20]	; (ecb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    eca4:	9b01      	ldr	r3, [sp, #4]
    eca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecaa:	2b00      	cmp	r3, #0
    ecac:	d100      	bne.n	ecb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ecae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ecb0:	bf00      	nop
    ecb2:	b003      	add	sp, #12
    ecb4:	f85d fb04 	ldr.w	pc, [sp], #4
    ecb8:	1fff913c 	.word	0x1fff913c
    ecbc:	1fff9138 	.word	0x1fff9138

0000ecc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    ecc0:	b500      	push	{lr}
    ecc2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ecc4:	f7f2 f894 	bl	df0 <Sys_GetCoreID>
    ecc8:	4603      	mov	r3, r0
    ecca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    eccc:	4a10      	ldr	r2, [pc, #64]	; (ed10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    ecce:	9b01      	ldr	r3, [sp, #4]
    ecd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecd4:	2b00      	cmp	r3, #0
    ecd6:	d10d      	bne.n	ecf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ecd8:	f7f1 ff4d 	bl	b76 <Port_schm_read_msr>
    ecdc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ecde:	9b00      	ldr	r3, [sp, #0]
    ece0:	f003 0301 	and.w	r3, r3, #1
    ece4:	2b00      	cmp	r3, #0
    ece6:	d100      	bne.n	ecea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ece8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    ecea:	490a      	ldr	r1, [pc, #40]	; (ed14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    ecec:	9b01      	ldr	r3, [sp, #4]
    ecee:	9a00      	ldr	r2, [sp, #0]
    ecf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    ecf4:	4a06      	ldr	r2, [pc, #24]	; (ed10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    ecf6:	9b01      	ldr	r3, [sp, #4]
    ecf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecfc:	1c5a      	adds	r2, r3, #1
    ecfe:	4904      	ldr	r1, [pc, #16]	; (ed10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    ed00:	9b01      	ldr	r3, [sp, #4]
    ed02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ed06:	bf00      	nop
    ed08:	b003      	add	sp, #12
    ed0a:	f85d fb04 	ldr.w	pc, [sp], #4
    ed0e:	bf00      	nop
    ed10:	1fff9144 	.word	0x1fff9144
    ed14:	1fff9140 	.word	0x1fff9140

0000ed18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    ed18:	b500      	push	{lr}
    ed1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed1c:	f7f2 f868 	bl	df0 <Sys_GetCoreID>
    ed20:	4603      	mov	r3, r0
    ed22:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    ed24:	4a0d      	ldr	r2, [pc, #52]	; (ed5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    ed26:	9b01      	ldr	r3, [sp, #4]
    ed28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed2c:	1e5a      	subs	r2, r3, #1
    ed2e:	490b      	ldr	r1, [pc, #44]	; (ed5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    ed30:	9b01      	ldr	r3, [sp, #4]
    ed32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    ed36:	4a0a      	ldr	r2, [pc, #40]	; (ed60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    ed38:	9b01      	ldr	r3, [sp, #4]
    ed3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed3e:	f003 0301 	and.w	r3, r3, #1
    ed42:	2b00      	cmp	r3, #0
    ed44:	d106      	bne.n	ed54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    ed46:	4a05      	ldr	r2, [pc, #20]	; (ed5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    ed48:	9b01      	ldr	r3, [sp, #4]
    ed4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed4e:	2b00      	cmp	r3, #0
    ed50:	d100      	bne.n	ed54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ed52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ed54:	bf00      	nop
    ed56:	b003      	add	sp, #12
    ed58:	f85d fb04 	ldr.w	pc, [sp], #4
    ed5c:	1fff9144 	.word	0x1fff9144
    ed60:	1fff9140 	.word	0x1fff9140

0000ed64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    ed64:	b500      	push	{lr}
    ed66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed68:	f7f2 f842 	bl	df0 <Sys_GetCoreID>
    ed6c:	4603      	mov	r3, r0
    ed6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    ed70:	4a10      	ldr	r2, [pc, #64]	; (edb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    ed72:	9b01      	ldr	r3, [sp, #4]
    ed74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed78:	2b00      	cmp	r3, #0
    ed7a:	d10d      	bne.n	ed98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ed7c:	f7f1 fefb 	bl	b76 <Port_schm_read_msr>
    ed80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ed82:	9b00      	ldr	r3, [sp, #0]
    ed84:	f003 0301 	and.w	r3, r3, #1
    ed88:	2b00      	cmp	r3, #0
    ed8a:	d100      	bne.n	ed8e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ed8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    ed8e:	490a      	ldr	r1, [pc, #40]	; (edb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    ed90:	9b01      	ldr	r3, [sp, #4]
    ed92:	9a00      	ldr	r2, [sp, #0]
    ed94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    ed98:	4a06      	ldr	r2, [pc, #24]	; (edb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    ed9a:	9b01      	ldr	r3, [sp, #4]
    ed9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eda0:	1c5a      	adds	r2, r3, #1
    eda2:	4904      	ldr	r1, [pc, #16]	; (edb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    eda4:	9b01      	ldr	r3, [sp, #4]
    eda6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    edaa:	bf00      	nop
    edac:	b003      	add	sp, #12
    edae:	f85d fb04 	ldr.w	pc, [sp], #4
    edb2:	bf00      	nop
    edb4:	1fff914c 	.word	0x1fff914c
    edb8:	1fff9148 	.word	0x1fff9148

0000edbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    edbc:	b500      	push	{lr}
    edbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    edc0:	f7f2 f816 	bl	df0 <Sys_GetCoreID>
    edc4:	4603      	mov	r3, r0
    edc6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    edc8:	4a0d      	ldr	r2, [pc, #52]	; (ee00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    edca:	9b01      	ldr	r3, [sp, #4]
    edcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edd0:	1e5a      	subs	r2, r3, #1
    edd2:	490b      	ldr	r1, [pc, #44]	; (ee00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    edd4:	9b01      	ldr	r3, [sp, #4]
    edd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    edda:	4a0a      	ldr	r2, [pc, #40]	; (ee04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    eddc:	9b01      	ldr	r3, [sp, #4]
    edde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ede2:	f003 0301 	and.w	r3, r3, #1
    ede6:	2b00      	cmp	r3, #0
    ede8:	d106      	bne.n	edf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    edea:	4a05      	ldr	r2, [pc, #20]	; (ee00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    edec:	9b01      	ldr	r3, [sp, #4]
    edee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edf2:	2b00      	cmp	r3, #0
    edf4:	d100      	bne.n	edf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    edf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    edf8:	bf00      	nop
    edfa:	b003      	add	sp, #12
    edfc:	f85d fb04 	ldr.w	pc, [sp], #4
    ee00:	1fff914c 	.word	0x1fff914c
    ee04:	1fff9148 	.word	0x1fff9148

0000ee08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    ee08:	b500      	push	{lr}
    ee0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee0c:	f7f1 fff0 	bl	df0 <Sys_GetCoreID>
    ee10:	4603      	mov	r3, r0
    ee12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    ee14:	4a10      	ldr	r2, [pc, #64]	; (ee58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    ee16:	9b01      	ldr	r3, [sp, #4]
    ee18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee1c:	2b00      	cmp	r3, #0
    ee1e:	d10d      	bne.n	ee3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ee20:	f7f1 fea9 	bl	b76 <Port_schm_read_msr>
    ee24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ee26:	9b00      	ldr	r3, [sp, #0]
    ee28:	f003 0301 	and.w	r3, r3, #1
    ee2c:	2b00      	cmp	r3, #0
    ee2e:	d100      	bne.n	ee32 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ee30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    ee32:	490a      	ldr	r1, [pc, #40]	; (ee5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    ee34:	9b01      	ldr	r3, [sp, #4]
    ee36:	9a00      	ldr	r2, [sp, #0]
    ee38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    ee3c:	4a06      	ldr	r2, [pc, #24]	; (ee58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    ee3e:	9b01      	ldr	r3, [sp, #4]
    ee40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee44:	1c5a      	adds	r2, r3, #1
    ee46:	4904      	ldr	r1, [pc, #16]	; (ee58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    ee48:	9b01      	ldr	r3, [sp, #4]
    ee4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ee4e:	bf00      	nop
    ee50:	b003      	add	sp, #12
    ee52:	f85d fb04 	ldr.w	pc, [sp], #4
    ee56:	bf00      	nop
    ee58:	1fff9154 	.word	0x1fff9154
    ee5c:	1fff9150 	.word	0x1fff9150

0000ee60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    ee60:	b500      	push	{lr}
    ee62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee64:	f7f1 ffc4 	bl	df0 <Sys_GetCoreID>
    ee68:	4603      	mov	r3, r0
    ee6a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    ee6c:	4a0d      	ldr	r2, [pc, #52]	; (eea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    ee6e:	9b01      	ldr	r3, [sp, #4]
    ee70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee74:	1e5a      	subs	r2, r3, #1
    ee76:	490b      	ldr	r1, [pc, #44]	; (eea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    ee78:	9b01      	ldr	r3, [sp, #4]
    ee7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    ee7e:	4a0a      	ldr	r2, [pc, #40]	; (eea8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    ee80:	9b01      	ldr	r3, [sp, #4]
    ee82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee86:	f003 0301 	and.w	r3, r3, #1
    ee8a:	2b00      	cmp	r3, #0
    ee8c:	d106      	bne.n	ee9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    ee8e:	4a05      	ldr	r2, [pc, #20]	; (eea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    ee90:	9b01      	ldr	r3, [sp, #4]
    ee92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee96:	2b00      	cmp	r3, #0
    ee98:	d100      	bne.n	ee9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ee9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ee9c:	bf00      	nop
    ee9e:	b003      	add	sp, #12
    eea0:	f85d fb04 	ldr.w	pc, [sp], #4
    eea4:	1fff9154 	.word	0x1fff9154
    eea8:	1fff9150 	.word	0x1fff9150

0000eeac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    eeac:	b500      	push	{lr}
    eeae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eeb0:	f7f1 ff9e 	bl	df0 <Sys_GetCoreID>
    eeb4:	4603      	mov	r3, r0
    eeb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    eeb8:	4a10      	ldr	r2, [pc, #64]	; (eefc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    eeba:	9b01      	ldr	r3, [sp, #4]
    eebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eec0:	2b00      	cmp	r3, #0
    eec2:	d10d      	bne.n	eee0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eec4:	f7f1 fe57 	bl	b76 <Port_schm_read_msr>
    eec8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eeca:	9b00      	ldr	r3, [sp, #0]
    eecc:	f003 0301 	and.w	r3, r3, #1
    eed0:	2b00      	cmp	r3, #0
    eed2:	d100      	bne.n	eed6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eed4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    eed6:	490a      	ldr	r1, [pc, #40]	; (ef00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    eed8:	9b01      	ldr	r3, [sp, #4]
    eeda:	9a00      	ldr	r2, [sp, #0]
    eedc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    eee0:	4a06      	ldr	r2, [pc, #24]	; (eefc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    eee2:	9b01      	ldr	r3, [sp, #4]
    eee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eee8:	1c5a      	adds	r2, r3, #1
    eeea:	4904      	ldr	r1, [pc, #16]	; (eefc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    eeec:	9b01      	ldr	r3, [sp, #4]
    eeee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eef2:	bf00      	nop
    eef4:	b003      	add	sp, #12
    eef6:	f85d fb04 	ldr.w	pc, [sp], #4
    eefa:	bf00      	nop
    eefc:	1fff915c 	.word	0x1fff915c
    ef00:	1fff9158 	.word	0x1fff9158

0000ef04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    ef04:	b500      	push	{lr}
    ef06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef08:	f7f1 ff72 	bl	df0 <Sys_GetCoreID>
    ef0c:	4603      	mov	r3, r0
    ef0e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    ef10:	4a0d      	ldr	r2, [pc, #52]	; (ef48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    ef12:	9b01      	ldr	r3, [sp, #4]
    ef14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef18:	1e5a      	subs	r2, r3, #1
    ef1a:	490b      	ldr	r1, [pc, #44]	; (ef48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    ef1c:	9b01      	ldr	r3, [sp, #4]
    ef1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    ef22:	4a0a      	ldr	r2, [pc, #40]	; (ef4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    ef24:	9b01      	ldr	r3, [sp, #4]
    ef26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef2a:	f003 0301 	and.w	r3, r3, #1
    ef2e:	2b00      	cmp	r3, #0
    ef30:	d106      	bne.n	ef40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    ef32:	4a05      	ldr	r2, [pc, #20]	; (ef48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    ef34:	9b01      	ldr	r3, [sp, #4]
    ef36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef3a:	2b00      	cmp	r3, #0
    ef3c:	d100      	bne.n	ef40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ef3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ef40:	bf00      	nop
    ef42:	b003      	add	sp, #12
    ef44:	f85d fb04 	ldr.w	pc, [sp], #4
    ef48:	1fff915c 	.word	0x1fff915c
    ef4c:	1fff9158 	.word	0x1fff9158

0000ef50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    ef50:	b500      	push	{lr}
    ef52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef54:	f7f1 ff4c 	bl	df0 <Sys_GetCoreID>
    ef58:	4603      	mov	r3, r0
    ef5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    ef5c:	4a10      	ldr	r2, [pc, #64]	; (efa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    ef5e:	9b01      	ldr	r3, [sp, #4]
    ef60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef64:	2b00      	cmp	r3, #0
    ef66:	d10d      	bne.n	ef84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ef68:	f7f1 fe05 	bl	b76 <Port_schm_read_msr>
    ef6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ef6e:	9b00      	ldr	r3, [sp, #0]
    ef70:	f003 0301 	and.w	r3, r3, #1
    ef74:	2b00      	cmp	r3, #0
    ef76:	d100      	bne.n	ef7a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ef78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    ef7a:	490a      	ldr	r1, [pc, #40]	; (efa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    ef7c:	9b01      	ldr	r3, [sp, #4]
    ef7e:	9a00      	ldr	r2, [sp, #0]
    ef80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    ef84:	4a06      	ldr	r2, [pc, #24]	; (efa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    ef86:	9b01      	ldr	r3, [sp, #4]
    ef88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef8c:	1c5a      	adds	r2, r3, #1
    ef8e:	4904      	ldr	r1, [pc, #16]	; (efa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    ef90:	9b01      	ldr	r3, [sp, #4]
    ef92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ef96:	bf00      	nop
    ef98:	b003      	add	sp, #12
    ef9a:	f85d fb04 	ldr.w	pc, [sp], #4
    ef9e:	bf00      	nop
    efa0:	1fff9164 	.word	0x1fff9164
    efa4:	1fff9160 	.word	0x1fff9160

0000efa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    efa8:	b500      	push	{lr}
    efaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    efac:	f7f1 ff20 	bl	df0 <Sys_GetCoreID>
    efb0:	4603      	mov	r3, r0
    efb2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    efb4:	4a0d      	ldr	r2, [pc, #52]	; (efec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    efb6:	9b01      	ldr	r3, [sp, #4]
    efb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efbc:	1e5a      	subs	r2, r3, #1
    efbe:	490b      	ldr	r1, [pc, #44]	; (efec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    efc0:	9b01      	ldr	r3, [sp, #4]
    efc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    efc6:	4a0a      	ldr	r2, [pc, #40]	; (eff0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    efc8:	9b01      	ldr	r3, [sp, #4]
    efca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efce:	f003 0301 	and.w	r3, r3, #1
    efd2:	2b00      	cmp	r3, #0
    efd4:	d106      	bne.n	efe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    efd6:	4a05      	ldr	r2, [pc, #20]	; (efec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    efd8:	9b01      	ldr	r3, [sp, #4]
    efda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efde:	2b00      	cmp	r3, #0
    efe0:	d100      	bne.n	efe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    efe2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    efe4:	bf00      	nop
    efe6:	b003      	add	sp, #12
    efe8:	f85d fb04 	ldr.w	pc, [sp], #4
    efec:	1fff9164 	.word	0x1fff9164
    eff0:	1fff9160 	.word	0x1fff9160

0000eff4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    eff4:	b500      	push	{lr}
    eff6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eff8:	f7f1 fefa 	bl	df0 <Sys_GetCoreID>
    effc:	4603      	mov	r3, r0
    effe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    f000:	4a10      	ldr	r2, [pc, #64]	; (f044 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    f002:	9b01      	ldr	r3, [sp, #4]
    f004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f008:	2b00      	cmp	r3, #0
    f00a:	d10d      	bne.n	f028 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f00c:	f7f1 fdb3 	bl	b76 <Port_schm_read_msr>
    f010:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f012:	9b00      	ldr	r3, [sp, #0]
    f014:	f003 0301 	and.w	r3, r3, #1
    f018:	2b00      	cmp	r3, #0
    f01a:	d100      	bne.n	f01e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f01c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    f01e:	490a      	ldr	r1, [pc, #40]	; (f048 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    f020:	9b01      	ldr	r3, [sp, #4]
    f022:	9a00      	ldr	r2, [sp, #0]
    f024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    f028:	4a06      	ldr	r2, [pc, #24]	; (f044 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    f02a:	9b01      	ldr	r3, [sp, #4]
    f02c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f030:	1c5a      	adds	r2, r3, #1
    f032:	4904      	ldr	r1, [pc, #16]	; (f044 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    f034:	9b01      	ldr	r3, [sp, #4]
    f036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f03a:	bf00      	nop
    f03c:	b003      	add	sp, #12
    f03e:	f85d fb04 	ldr.w	pc, [sp], #4
    f042:	bf00      	nop
    f044:	1fff916c 	.word	0x1fff916c
    f048:	1fff9168 	.word	0x1fff9168

0000f04c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    f04c:	b500      	push	{lr}
    f04e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f050:	f7f1 fece 	bl	df0 <Sys_GetCoreID>
    f054:	4603      	mov	r3, r0
    f056:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    f058:	4a0d      	ldr	r2, [pc, #52]	; (f090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    f05a:	9b01      	ldr	r3, [sp, #4]
    f05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f060:	1e5a      	subs	r2, r3, #1
    f062:	490b      	ldr	r1, [pc, #44]	; (f090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    f064:	9b01      	ldr	r3, [sp, #4]
    f066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    f06a:	4a0a      	ldr	r2, [pc, #40]	; (f094 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    f06c:	9b01      	ldr	r3, [sp, #4]
    f06e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f072:	f003 0301 	and.w	r3, r3, #1
    f076:	2b00      	cmp	r3, #0
    f078:	d106      	bne.n	f088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    f07a:	4a05      	ldr	r2, [pc, #20]	; (f090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    f07c:	9b01      	ldr	r3, [sp, #4]
    f07e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f082:	2b00      	cmp	r3, #0
    f084:	d100      	bne.n	f088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f086:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f088:	bf00      	nop
    f08a:	b003      	add	sp, #12
    f08c:	f85d fb04 	ldr.w	pc, [sp], #4
    f090:	1fff916c 	.word	0x1fff916c
    f094:	1fff9168 	.word	0x1fff9168

0000f098 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    f098:	b500      	push	{lr}
    f09a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f09c:	f7f1 fea8 	bl	df0 <Sys_GetCoreID>
    f0a0:	4603      	mov	r3, r0
    f0a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    f0a4:	4a10      	ldr	r2, [pc, #64]	; (f0e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    f0a6:	9b01      	ldr	r3, [sp, #4]
    f0a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0ac:	2b00      	cmp	r3, #0
    f0ae:	d10d      	bne.n	f0cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f0b0:	f7f1 fd61 	bl	b76 <Port_schm_read_msr>
    f0b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f0b6:	9b00      	ldr	r3, [sp, #0]
    f0b8:	f003 0301 	and.w	r3, r3, #1
    f0bc:	2b00      	cmp	r3, #0
    f0be:	d100      	bne.n	f0c2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f0c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    f0c2:	490a      	ldr	r1, [pc, #40]	; (f0ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    f0c4:	9b01      	ldr	r3, [sp, #4]
    f0c6:	9a00      	ldr	r2, [sp, #0]
    f0c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    f0cc:	4a06      	ldr	r2, [pc, #24]	; (f0e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    f0ce:	9b01      	ldr	r3, [sp, #4]
    f0d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0d4:	1c5a      	adds	r2, r3, #1
    f0d6:	4904      	ldr	r1, [pc, #16]	; (f0e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    f0d8:	9b01      	ldr	r3, [sp, #4]
    f0da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f0de:	bf00      	nop
    f0e0:	b003      	add	sp, #12
    f0e2:	f85d fb04 	ldr.w	pc, [sp], #4
    f0e6:	bf00      	nop
    f0e8:	1fff9174 	.word	0x1fff9174
    f0ec:	1fff9170 	.word	0x1fff9170

0000f0f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    f0f0:	b500      	push	{lr}
    f0f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0f4:	f7f1 fe7c 	bl	df0 <Sys_GetCoreID>
    f0f8:	4603      	mov	r3, r0
    f0fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    f0fc:	4a0d      	ldr	r2, [pc, #52]	; (f134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    f0fe:	9b01      	ldr	r3, [sp, #4]
    f100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f104:	1e5a      	subs	r2, r3, #1
    f106:	490b      	ldr	r1, [pc, #44]	; (f134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    f108:	9b01      	ldr	r3, [sp, #4]
    f10a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    f10e:	4a0a      	ldr	r2, [pc, #40]	; (f138 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    f110:	9b01      	ldr	r3, [sp, #4]
    f112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f116:	f003 0301 	and.w	r3, r3, #1
    f11a:	2b00      	cmp	r3, #0
    f11c:	d106      	bne.n	f12c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    f11e:	4a05      	ldr	r2, [pc, #20]	; (f134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    f120:	9b01      	ldr	r3, [sp, #4]
    f122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f126:	2b00      	cmp	r3, #0
    f128:	d100      	bne.n	f12c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f12a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f12c:	bf00      	nop
    f12e:	b003      	add	sp, #12
    f130:	f85d fb04 	ldr.w	pc, [sp], #4
    f134:	1fff9174 	.word	0x1fff9174
    f138:	1fff9170 	.word	0x1fff9170

0000f13c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    f13c:	b500      	push	{lr}
    f13e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f140:	f7f1 fe56 	bl	df0 <Sys_GetCoreID>
    f144:	4603      	mov	r3, r0
    f146:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    f148:	4a10      	ldr	r2, [pc, #64]	; (f18c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    f14a:	9b01      	ldr	r3, [sp, #4]
    f14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f150:	2b00      	cmp	r3, #0
    f152:	d10d      	bne.n	f170 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f154:	f7f1 fd0f 	bl	b76 <Port_schm_read_msr>
    f158:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f15a:	9b00      	ldr	r3, [sp, #0]
    f15c:	f003 0301 	and.w	r3, r3, #1
    f160:	2b00      	cmp	r3, #0
    f162:	d100      	bne.n	f166 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f164:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    f166:	490a      	ldr	r1, [pc, #40]	; (f190 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    f168:	9b01      	ldr	r3, [sp, #4]
    f16a:	9a00      	ldr	r2, [sp, #0]
    f16c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    f170:	4a06      	ldr	r2, [pc, #24]	; (f18c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    f172:	9b01      	ldr	r3, [sp, #4]
    f174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f178:	1c5a      	adds	r2, r3, #1
    f17a:	4904      	ldr	r1, [pc, #16]	; (f18c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    f17c:	9b01      	ldr	r3, [sp, #4]
    f17e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f182:	bf00      	nop
    f184:	b003      	add	sp, #12
    f186:	f85d fb04 	ldr.w	pc, [sp], #4
    f18a:	bf00      	nop
    f18c:	1fff917c 	.word	0x1fff917c
    f190:	1fff9178 	.word	0x1fff9178

0000f194 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    f194:	b500      	push	{lr}
    f196:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f198:	f7f1 fe2a 	bl	df0 <Sys_GetCoreID>
    f19c:	4603      	mov	r3, r0
    f19e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    f1a0:	4a0d      	ldr	r2, [pc, #52]	; (f1d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    f1a2:	9b01      	ldr	r3, [sp, #4]
    f1a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1a8:	1e5a      	subs	r2, r3, #1
    f1aa:	490b      	ldr	r1, [pc, #44]	; (f1d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    f1ac:	9b01      	ldr	r3, [sp, #4]
    f1ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    f1b2:	4a0a      	ldr	r2, [pc, #40]	; (f1dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    f1b4:	9b01      	ldr	r3, [sp, #4]
    f1b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1ba:	f003 0301 	and.w	r3, r3, #1
    f1be:	2b00      	cmp	r3, #0
    f1c0:	d106      	bne.n	f1d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    f1c2:	4a05      	ldr	r2, [pc, #20]	; (f1d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    f1c4:	9b01      	ldr	r3, [sp, #4]
    f1c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1ca:	2b00      	cmp	r3, #0
    f1cc:	d100      	bne.n	f1d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f1ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f1d0:	bf00      	nop
    f1d2:	b003      	add	sp, #12
    f1d4:	f85d fb04 	ldr.w	pc, [sp], #4
    f1d8:	1fff917c 	.word	0x1fff917c
    f1dc:	1fff9178 	.word	0x1fff9178

0000f1e0 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    f1e0:	bf00      	nop
    f1e2:	4770      	bx	lr

0000f1e4 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    f1e4:	b510      	push	{r4, lr}
    f1e6:	b084      	sub	sp, #16
    f1e8:	4604      	mov	r4, r0
    f1ea:	4608      	mov	r0, r1
    f1ec:	4611      	mov	r1, r2
    f1ee:	461a      	mov	r2, r3
    f1f0:	4623      	mov	r3, r4
    f1f2:	f8ad 3006 	strh.w	r3, [sp, #6]
    f1f6:	4603      	mov	r3, r0
    f1f8:	f88d 3005 	strb.w	r3, [sp, #5]
    f1fc:	460b      	mov	r3, r1
    f1fe:	f88d 3004 	strb.w	r3, [sp, #4]
    f202:	4613      	mov	r3, r2
    f204:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f208:	f7f1 fdf2 	bl	df0 <Sys_GetCoreID>
    f20c:	4603      	mov	r3, r0
    f20e:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    f210:	490d      	ldr	r1, [pc, #52]	; (f248 <Det_ReportError+0x64>)
    f212:	9b03      	ldr	r3, [sp, #12]
    f214:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f218:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    f21c:	4a0b      	ldr	r2, [pc, #44]	; (f24c <Det_ReportError+0x68>)
    f21e:	9b03      	ldr	r3, [sp, #12]
    f220:	4413      	add	r3, r2
    f222:	f89d 2005 	ldrb.w	r2, [sp, #5]
    f226:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    f228:	4a09      	ldr	r2, [pc, #36]	; (f250 <Det_ReportError+0x6c>)
    f22a:	9b03      	ldr	r3, [sp, #12]
    f22c:	4413      	add	r3, r2
    f22e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    f232:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    f234:	4a07      	ldr	r2, [pc, #28]	; (f254 <Det_ReportError+0x70>)
    f236:	9b03      	ldr	r3, [sp, #12]
    f238:	4413      	add	r3, r2
    f23a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    f23e:	701a      	strb	r2, [r3, #0]

    return E_OK;
    f240:	2300      	movs	r3, #0
}
    f242:	4618      	mov	r0, r3
    f244:	b004      	add	sp, #16
    f246:	bd10      	pop	{r4, pc}
    f248:	1fff91a8 	.word	0x1fff91a8
    f24c:	1fff9180 	.word	0x1fff9180
    f250:	1fff9184 	.word	0x1fff9184
    f254:	1fff9188 	.word	0x1fff9188

0000f258 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    f258:	b510      	push	{r4, lr}
    f25a:	b084      	sub	sp, #16
    f25c:	4604      	mov	r4, r0
    f25e:	4608      	mov	r0, r1
    f260:	4611      	mov	r1, r2
    f262:	461a      	mov	r2, r3
    f264:	4623      	mov	r3, r4
    f266:	f8ad 3006 	strh.w	r3, [sp, #6]
    f26a:	4603      	mov	r3, r0
    f26c:	f88d 3005 	strb.w	r3, [sp, #5]
    f270:	460b      	mov	r3, r1
    f272:	f88d 3004 	strb.w	r3, [sp, #4]
    f276:	4613      	mov	r3, r2
    f278:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f27c:	f7f1 fdb8 	bl	df0 <Sys_GetCoreID>
    f280:	4603      	mov	r3, r0
    f282:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    f284:	490d      	ldr	r1, [pc, #52]	; (f2bc <Det_ReportRuntimeError+0x64>)
    f286:	9b03      	ldr	r3, [sp, #12]
    f288:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f28c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    f290:	4a0b      	ldr	r2, [pc, #44]	; (f2c0 <Det_ReportRuntimeError+0x68>)
    f292:	9b03      	ldr	r3, [sp, #12]
    f294:	4413      	add	r3, r2
    f296:	f89d 2005 	ldrb.w	r2, [sp, #5]
    f29a:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    f29c:	4a09      	ldr	r2, [pc, #36]	; (f2c4 <Det_ReportRuntimeError+0x6c>)
    f29e:	9b03      	ldr	r3, [sp, #12]
    f2a0:	4413      	add	r3, r2
    f2a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
    f2a6:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    f2a8:	4a07      	ldr	r2, [pc, #28]	; (f2c8 <Det_ReportRuntimeError+0x70>)
    f2aa:	9b03      	ldr	r3, [sp, #12]
    f2ac:	4413      	add	r3, r2
    f2ae:	f89d 2003 	ldrb.w	r2, [sp, #3]
    f2b2:	701a      	strb	r2, [r3, #0]

    return E_OK;
    f2b4:	2300      	movs	r3, #0
}
    f2b6:	4618      	mov	r0, r3
    f2b8:	b004      	add	sp, #16
    f2ba:	bd10      	pop	{r4, pc}
    f2bc:	1fff91ac 	.word	0x1fff91ac
    f2c0:	1fff918c 	.word	0x1fff918c
    f2c4:	1fff9190 	.word	0x1fff9190
    f2c8:	1fff9194 	.word	0x1fff9194

0000f2cc <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    f2cc:	b510      	push	{r4, lr}
    f2ce:	b084      	sub	sp, #16
    f2d0:	4604      	mov	r4, r0
    f2d2:	4608      	mov	r0, r1
    f2d4:	4611      	mov	r1, r2
    f2d6:	461a      	mov	r2, r3
    f2d8:	4623      	mov	r3, r4
    f2da:	f8ad 3006 	strh.w	r3, [sp, #6]
    f2de:	4603      	mov	r3, r0
    f2e0:	f88d 3005 	strb.w	r3, [sp, #5]
    f2e4:	460b      	mov	r3, r1
    f2e6:	f88d 3004 	strb.w	r3, [sp, #4]
    f2ea:	4613      	mov	r3, r2
    f2ec:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2f0:	f7f1 fd7e 	bl	df0 <Sys_GetCoreID>
    f2f4:	4603      	mov	r3, r0
    f2f6:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
    f2f8:	490d      	ldr	r1, [pc, #52]	; (f330 <Det_ReportTransientFault+0x64>)
    f2fa:	9b03      	ldr	r3, [sp, #12]
    f2fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f300:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
    f304:	4a0b      	ldr	r2, [pc, #44]	; (f334 <Det_ReportTransientFault+0x68>)
    f306:	9b03      	ldr	r3, [sp, #12]
    f308:	4413      	add	r3, r2
    f30a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    f30e:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
    f310:	4a09      	ldr	r2, [pc, #36]	; (f338 <Det_ReportTransientFault+0x6c>)
    f312:	9b03      	ldr	r3, [sp, #12]
    f314:	4413      	add	r3, r2
    f316:	f89d 2004 	ldrb.w	r2, [sp, #4]
    f31a:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
    f31c:	4a07      	ldr	r2, [pc, #28]	; (f33c <Det_ReportTransientFault+0x70>)
    f31e:	9b03      	ldr	r3, [sp, #12]
    f320:	4413      	add	r3, r2
    f322:	f89d 2003 	ldrb.w	r2, [sp, #3]
    f326:	701a      	strb	r2, [r3, #0]

    return E_OK;
    f328:	2300      	movs	r3, #0
}
    f32a:	4618      	mov	r0, r3
    f32c:	b004      	add	sp, #16
    f32e:	bd10      	pop	{r4, pc}
    f330:	1fff91a4 	.word	0x1fff91a4
    f334:	1fff9198 	.word	0x1fff9198
    f338:	1fff919c 	.word	0x1fff919c
    f33c:	1fff91a0 	.word	0x1fff91a0

0000f340 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
    f340:	bf00      	nop
    f342:	4770      	bx	lr

0000f344 <CanIf_Init>:
==================================================================================================*/
#define CANIF_START_SEC_CODE
#include "CanIf_MemMap.h"

void CanIf_Init(const CanIf_ConfigType * ConfigPtr)
{
    f344:	b082      	sub	sp, #8
    f346:	9001      	str	r0, [sp, #4]
    #if (STD_ON == CANIF_PRECOMPILE_SUPPORT)
    CanIf_ConfigPtr = &CanIf_Config;
    (void)ConfigPtr;
    #else
    CanIf_ConfigPtr = ConfigPtr;
    f348:	4a02      	ldr	r2, [pc, #8]	; (f354 <CanIf_Init+0x10>)
    f34a:	9b01      	ldr	r3, [sp, #4]
    f34c:	6013      	str	r3, [r2, #0]
    #endif
}
    f34e:	bf00      	nop
    f350:	b002      	add	sp, #8
    f352:	4770      	bx	lr
    f354:	1fff91b0 	.word	0x1fff91b0

0000f358 <CanIf_Transmit>:
Std_ReturnType CanIf_Transmit
(
    PduIdType CanTxPduId,
    const PduInfoType * PduInfoPtr
)
{
    f358:	b500      	push	{lr}
    f35a:	b08b      	sub	sp, #44	; 0x2c
    f35c:	4603      	mov	r3, r0
    f35e:	9100      	str	r1, [sp, #0]
    f360:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType RetVal = E_NOT_OK;
    f364:	2301      	movs	r3, #1
    f366:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    Can_HwHandleType CanHth = 0U;
    f36a:	2300      	movs	r3, #0
    f36c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Can_PduType PduInfo;
    const CanIf_TxPduType * TxPduInfo = NULL_PTR;
    f370:	2300      	movs	r3, #0
    f372:	9308      	str	r3, [sp, #32]
    uint8 CanIfControllerId = 0U;
    f374:	2300      	movs	r3, #0
    f376:	f88d 301f 	strb.w	r3, [sp, #31]
    const CanIf_CtrlPCConfigType * CanIfController = NULL_PTR;
    f37a:	2300      	movs	r3, #0
    f37c:	9306      	str	r3, [sp, #24]

    if (NULL_PTR != CanIf_ConfigPtr)
    f37e:	4b31      	ldr	r3, [pc, #196]	; (f444 <CanIf_Transmit+0xec>)
    f380:	681b      	ldr	r3, [r3, #0]
    f382:	2b00      	cmp	r3, #0
    f384:	d057      	beq.n	f436 <CanIf_Transmit+0xde>
    {
        if (CanTxPduId < (CanIf_ConfigPtr->NumTxPdu))
    f386:	4b2f      	ldr	r3, [pc, #188]	; (f444 <CanIf_Transmit+0xec>)
    f388:	681b      	ldr	r3, [r3, #0]
    f38a:	785b      	ldrb	r3, [r3, #1]
    f38c:	b29b      	uxth	r3, r3
    f38e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f392:	429a      	cmp	r2, r3
    f394:	d24f      	bcs.n	f436 <CanIf_Transmit+0xde>
        {
            TxPduInfo = &CanIf_ConfigPtr->CanIf_TxPduConfigPtr[CanTxPduId];
    f396:	4b2b      	ldr	r3, [pc, #172]	; (f444 <CanIf_Transmit+0xec>)
    f398:	681b      	ldr	r3, [r3, #0]
    f39a:	68d9      	ldr	r1, [r3, #12]
    f39c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f3a0:	4613      	mov	r3, r2
    f3a2:	009b      	lsls	r3, r3, #2
    f3a4:	4413      	add	r3, r2
    f3a6:	009b      	lsls	r3, r3, #2
    f3a8:	440b      	add	r3, r1
    f3aa:	9308      	str	r3, [sp, #32]
            CanIfControllerId = TxPduInfo->CanIfCtrlId;
    f3ac:	9b08      	ldr	r3, [sp, #32]
    f3ae:	7b9b      	ldrb	r3, [r3, #14]
    f3b0:	f88d 301f 	strb.w	r3, [sp, #31]
            CanIfController = &CanIf_PCConfig.CanIfCtrlConfigPtr[CanIfControllerId];
    f3b4:	4b24      	ldr	r3, [pc, #144]	; (f448 <CanIf_Transmit+0xf0>)
    f3b6:	685a      	ldr	r2, [r3, #4]
    f3b8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    f3bc:	00db      	lsls	r3, r3, #3
    f3be:	4413      	add	r3, r2
    f3c0:	9306      	str	r3, [sp, #24]

            CanHth = TxPduInfo->CanHth;
    f3c2:	9b08      	ldr	r3, [sp, #32]
    f3c4:	899b      	ldrh	r3, [r3, #12]
    f3c6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24

            PduInfo.id = TxPduInfo->CanId;
    f3ca:	9b08      	ldr	r3, [sp, #32]
    f3cc:	685b      	ldr	r3, [r3, #4]
    f3ce:	9303      	str	r3, [sp, #12]
            /* Convert Id by adding two most significant bits specify the frame type */
            switch (TxPduInfo->CanFrameType)
    f3d0:	9b08      	ldr	r3, [sp, #32]
    f3d2:	689b      	ldr	r3, [r3, #8]
    f3d4:	2b03      	cmp	r3, #3
    f3d6:	d010      	beq.n	f3fa <CanIf_Transmit+0xa2>
    f3d8:	2b03      	cmp	r3, #3
    f3da:	d813      	bhi.n	f404 <CanIf_Transmit+0xac>
    f3dc:	2b00      	cmp	r3, #0
    f3de:	d002      	beq.n	f3e6 <CanIf_Transmit+0x8e>
    f3e0:	2b01      	cmp	r3, #1
    f3e2:	d005      	beq.n	f3f0 <CanIf_Transmit+0x98>
                    PduInfo.id |= 0x40000000U;
                    break;
                }
                default:
                {
                    break;
    f3e4:	e00e      	b.n	f404 <CanIf_Transmit+0xac>
                    PduInfo.id |= 0x80000000U;
    f3e6:	9b03      	ldr	r3, [sp, #12]
    f3e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f3ec:	9303      	str	r3, [sp, #12]
                    break;
    f3ee:	e00a      	b.n	f406 <CanIf_Transmit+0xae>
                    PduInfo.id |= 0xC0000000U;
    f3f0:	9b03      	ldr	r3, [sp, #12]
    f3f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    f3f6:	9303      	str	r3, [sp, #12]
                    break;
    f3f8:	e005      	b.n	f406 <CanIf_Transmit+0xae>
                    PduInfo.id |= 0x40000000U;
    f3fa:	9b03      	ldr	r3, [sp, #12]
    f3fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f400:	9303      	str	r3, [sp, #12]
                    break;
    f402:	e000      	b.n	f406 <CanIf_Transmit+0xae>
                    break;
    f404:	bf00      	nop
                }
            }
            
            PduInfo.length = (uint8)(PduInfoPtr->SduLength);
    f406:	9b00      	ldr	r3, [sp, #0]
    f408:	689b      	ldr	r3, [r3, #8]
    f40a:	b2db      	uxtb	r3, r3
    f40c:	f88d 3012 	strb.w	r3, [sp, #18]
            PduInfo.sdu = PduInfoPtr->SduDataPtr;
    f410:	9b00      	ldr	r3, [sp, #0]
    f412:	681b      	ldr	r3, [r3, #0]
    f414:	9305      	str	r3, [sp, #20]
            PduInfo.swPduHandle = CanTxPduId;
    f416:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f41a:	f8ad 3010 	strh.w	r3, [sp, #16]

            RetVal = CanIfController->CanDrvConfigPtr->CanApi->CanWrite(CanHth, &PduInfo); 
    f41e:	9b06      	ldr	r3, [sp, #24]
    f420:	685b      	ldr	r3, [r3, #4]
    f422:	685b      	ldr	r3, [r3, #4]
    f424:	681b      	ldr	r3, [r3, #0]
    f426:	a903      	add	r1, sp, #12
    f428:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    f42c:	4610      	mov	r0, r2
    f42e:	4798      	blx	r3
    f430:	4603      	mov	r3, r0
    f432:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
    }
    return RetVal;
    f436:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    f43a:	4618      	mov	r0, r3
    f43c:	b00b      	add	sp, #44	; 0x2c
    f43e:	f85d fb04 	ldr.w	pc, [sp], #4
    f442:	bf00      	nop
    f444:	1fff91b0 	.word	0x1fff91b0
    f448:	00010018 	.word	0x00010018

0000f44c <CanIf_TxConfirmation>:

void CanIf_TxConfirmation
(
    PduIdType CanTxPduId
)
{
    f44c:	b500      	push	{lr}
    f44e:	b085      	sub	sp, #20
    f450:	4603      	mov	r3, r0
    f452:	f8ad 3006 	strh.w	r3, [sp, #6]
    PduIdType UserPduId;
    const CanIf_TxPduType * TxPduInfo = NULL_PTR;
    f456:	2300      	movs	r3, #0
    f458:	9303      	str	r3, [sp, #12]

    if (NULL_PTR != CanIf_ConfigPtr)
    f45a:	4b15      	ldr	r3, [pc, #84]	; (f4b0 <CanIf_TxConfirmation+0x64>)
    f45c:	681b      	ldr	r3, [r3, #0]
    f45e:	2b00      	cmp	r3, #0
    f460:	d021      	beq.n	f4a6 <CanIf_TxConfirmation+0x5a>
    {
        if (CanTxPduId < (CanIf_ConfigPtr->NumTxPdu))
    f462:	4b13      	ldr	r3, [pc, #76]	; (f4b0 <CanIf_TxConfirmation+0x64>)
    f464:	681b      	ldr	r3, [r3, #0]
    f466:	785b      	ldrb	r3, [r3, #1]
    f468:	b29b      	uxth	r3, r3
    f46a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f46e:	429a      	cmp	r2, r3
    f470:	d219      	bcs.n	f4a6 <CanIf_TxConfirmation+0x5a>
        {
            TxPduInfo = &CanIf_ConfigPtr->CanIf_TxPduConfigPtr[CanTxPduId];
    f472:	4b0f      	ldr	r3, [pc, #60]	; (f4b0 <CanIf_TxConfirmation+0x64>)
    f474:	681b      	ldr	r3, [r3, #0]
    f476:	68d9      	ldr	r1, [r3, #12]
    f478:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f47c:	4613      	mov	r3, r2
    f47e:	009b      	lsls	r3, r3, #2
    f480:	4413      	add	r3, r2
    f482:	009b      	lsls	r3, r3, #2
    f484:	440b      	add	r3, r1
    f486:	9303      	str	r3, [sp, #12]

            if (NULL_PTR != TxPduInfo->UserTxConfirmation)
    f488:	9b03      	ldr	r3, [sp, #12]
    f48a:	691b      	ldr	r3, [r3, #16]
    f48c:	2b00      	cmp	r3, #0
    f48e:	d00a      	beq.n	f4a6 <CanIf_TxConfirmation+0x5a>
            {
                UserPduId = TxPduInfo->PduId;
    f490:	9b03      	ldr	r3, [sp, #12]
    f492:	881b      	ldrh	r3, [r3, #0]
    f494:	f8ad 300a 	strh.w	r3, [sp, #10]
                TxPduInfo->UserTxConfirmation(UserPduId, E_OK);
    f498:	9b03      	ldr	r3, [sp, #12]
    f49a:	691b      	ldr	r3, [r3, #16]
    f49c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    f4a0:	2100      	movs	r1, #0
    f4a2:	4610      	mov	r0, r2
    f4a4:	4798      	blx	r3
            }
        }
    }
}
    f4a6:	bf00      	nop
    f4a8:	b005      	add	sp, #20
    f4aa:	f85d fb04 	ldr.w	pc, [sp], #4
    f4ae:	bf00      	nop
    f4b0:	1fff91b0 	.word	0x1fff91b0

0000f4b4 <CanIf_RxIndication>:
void CanIf_RxIndication
(
    const Can_HwType * Mailbox,
    const PduInfoType * PduInfoPtr
)
{
    f4b4:	b500      	push	{lr}
    f4b6:	b089      	sub	sp, #36	; 0x24
    f4b8:	9001      	str	r0, [sp, #4]
    f4ba:	9100      	str	r1, [sp, #0]
    PduIdType UserPduId = 0U;
    f4bc:	2300      	movs	r3, #0
    f4be:	f8ad 301e 	strh.w	r3, [sp, #30]
    PduInfoType PduInfo;
    const CanIf_RxPduType * RxPduInfo = NULL_PTR;
    f4c2:	2300      	movs	r3, #0
    f4c4:	9306      	str	r3, [sp, #24]
    uint8 CanDrvId = 0U;
    f4c6:	2300      	movs	r3, #0
    f4c8:	f88d 3017 	strb.w	r3, [sp, #23]

    if (NULL_PTR != CanIf_ConfigPtr)
    f4cc:	4b2c      	ldr	r3, [pc, #176]	; (f580 <CanIf_RxIndication+0xcc>)
    f4ce:	681b      	ldr	r3, [r3, #0]
    f4d0:	2b00      	cmp	r3, #0
    f4d2:	d050      	beq.n	f576 <CanIf_RxIndication+0xc2>
    {
        if ((Mailbox->ControllerId) < (CanIf_PCConfig.NumOfCtrl))
    f4d4:	9b01      	ldr	r3, [sp, #4]
    f4d6:	799a      	ldrb	r2, [r3, #6]
    f4d8:	4b2a      	ldr	r3, [pc, #168]	; (f584 <CanIf_RxIndication+0xd0>)
    f4da:	781b      	ldrb	r3, [r3, #0]
    f4dc:	429a      	cmp	r2, r3
    f4de:	d24a      	bcs.n	f576 <CanIf_RxIndication+0xc2>
        {
            if ((Mailbox->Hoh) < (CanIf_PCConfig.CanIfCtrlConfigPtr[Mailbox->ControllerId].CanDrvConfigPtr->NumCanHoh))
    f4e0:	9b01      	ldr	r3, [sp, #4]
    f4e2:	889a      	ldrh	r2, [r3, #4]
    f4e4:	4b27      	ldr	r3, [pc, #156]	; (f584 <CanIf_RxIndication+0xd0>)
    f4e6:	6859      	ldr	r1, [r3, #4]
    f4e8:	9b01      	ldr	r3, [sp, #4]
    f4ea:	799b      	ldrb	r3, [r3, #6]
    f4ec:	00db      	lsls	r3, r3, #3
    f4ee:	440b      	add	r3, r1
    f4f0:	685b      	ldr	r3, [r3, #4]
    f4f2:	885b      	ldrh	r3, [r3, #2]
    f4f4:	429a      	cmp	r2, r3
    f4f6:	d23e      	bcs.n	f576 <CanIf_RxIndication+0xc2>
            {
                CanDrvId = CanIf_PCConfig.CanIfCtrlConfigPtr[Mailbox->ControllerId].CanDrvConfigPtr->CanDrvId;
    f4f8:	4b22      	ldr	r3, [pc, #136]	; (f584 <CanIf_RxIndication+0xd0>)
    f4fa:	685a      	ldr	r2, [r3, #4]
    f4fc:	9b01      	ldr	r3, [sp, #4]
    f4fe:	799b      	ldrb	r3, [r3, #6]
    f500:	00db      	lsls	r3, r3, #3
    f502:	4413      	add	r3, r2
    f504:	685b      	ldr	r3, [r3, #4]
    f506:	781b      	ldrb	r3, [r3, #0]
    f508:	f88d 3017 	strb.w	r3, [sp, #23]
                RxPduInfo = CanIf_ConfigPtr->CanDrvConfigPtr[CanDrvId]->HohToRxPduMappingPtr[Mailbox->Hoh];
    f50c:	4b1c      	ldr	r3, [pc, #112]	; (f580 <CanIf_RxIndication+0xcc>)
    f50e:	681b      	ldr	r3, [r3, #0]
    f510:	685a      	ldr	r2, [r3, #4]
    f512:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f516:	009b      	lsls	r3, r3, #2
    f518:	4413      	add	r3, r2
    f51a:	681b      	ldr	r3, [r3, #0]
    f51c:	681a      	ldr	r2, [r3, #0]
    f51e:	9b01      	ldr	r3, [sp, #4]
    f520:	889b      	ldrh	r3, [r3, #4]
    f522:	009b      	lsls	r3, r3, #2
    f524:	4413      	add	r3, r2
    f526:	681b      	ldr	r3, [r3, #0]
    f528:	9306      	str	r3, [sp, #24]
                
                /* Will discard the Can HOH if it was not referred by any CanIf RxPDU */
                if (NULL_PTR != RxPduInfo)
    f52a:	9b06      	ldr	r3, [sp, #24]
    f52c:	2b00      	cmp	r3, #0
    f52e:	d022      	beq.n	f576 <CanIf_RxIndication+0xc2>
                {
                    if (NULL_PTR != RxPduInfo->UserRxIndication)
    f530:	9b06      	ldr	r3, [sp, #24]
    f532:	689b      	ldr	r3, [r3, #8]
    f534:	2b00      	cmp	r3, #0
    f536:	d01e      	beq.n	f576 <CanIf_RxIndication+0xc2>
                    {
                        UserPduId = RxPduInfo->PduId;
    f538:	9b06      	ldr	r3, [sp, #24]
    f53a:	881b      	ldrh	r3, [r3, #0]
    f53c:	f8ad 301e 	strh.w	r3, [sp, #30]
                        if ((TRUE == RxPduInfo->PduLengthCheck) && (PduInfoPtr->SduLength > (RxPduInfo->PduLength)))
    f540:	9b06      	ldr	r3, [sp, #24]
    f542:	789b      	ldrb	r3, [r3, #2]
    f544:	2b00      	cmp	r3, #0
    f546:	d009      	beq.n	f55c <CanIf_RxIndication+0xa8>
    f548:	9b00      	ldr	r3, [sp, #0]
    f54a:	689b      	ldr	r3, [r3, #8]
    f54c:	9a06      	ldr	r2, [sp, #24]
    f54e:	8892      	ldrh	r2, [r2, #4]
    f550:	4293      	cmp	r3, r2
    f552:	d903      	bls.n	f55c <CanIf_RxIndication+0xa8>
                        {
                            PduInfo.SduLength = RxPduInfo->PduLength; /* Truncates exceeded data as configured on GUI */
    f554:	9b06      	ldr	r3, [sp, #24]
    f556:	889b      	ldrh	r3, [r3, #4]
    f558:	9304      	str	r3, [sp, #16]
    f55a:	e002      	b.n	f562 <CanIf_RxIndication+0xae>
                        }
                        else
                        {
                            PduInfo.SduLength = PduInfoPtr->SduLength;
    f55c:	9b00      	ldr	r3, [sp, #0]
    f55e:	689b      	ldr	r3, [r3, #8]
    f560:	9304      	str	r3, [sp, #16]
                        }
                        PduInfo.SduDataPtr = PduInfoPtr->SduDataPtr;
    f562:	9b00      	ldr	r3, [sp, #0]
    f564:	681b      	ldr	r3, [r3, #0]
    f566:	9302      	str	r3, [sp, #8]
                        RxPduInfo->UserRxIndication(UserPduId, &PduInfo);
    f568:	9b06      	ldr	r3, [sp, #24]
    f56a:	689b      	ldr	r3, [r3, #8]
    f56c:	a902      	add	r1, sp, #8
    f56e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    f572:	4610      	mov	r0, r2
    f574:	4798      	blx	r3
                    }
                }
            }
        }
    }
}
    f576:	bf00      	nop
    f578:	b009      	add	sp, #36	; 0x24
    f57a:	f85d fb04 	ldr.w	pc, [sp], #4
    f57e:	bf00      	nop
    f580:	1fff91b0 	.word	0x1fff91b0
    f584:	00010018 	.word	0x00010018

0000f588 <CanIf_ControllerModeIndication>:
void CanIf_ControllerModeIndication
( 
    uint8 ControllerId, 
    Can_ControllerStateType ControllerMode 
)
{
    f588:	b082      	sub	sp, #8
    f58a:	4603      	mov	r3, r0
    f58c:	9100      	str	r1, [sp, #0]
    f58e:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId; 
    (void)ControllerMode;
}
    f592:	bf00      	nop
    f594:	b002      	add	sp, #8
    f596:	4770      	bx	lr

0000f598 <CanIf_ControllerBusOff>:
void CanIf_ControllerBusOff
(
    uint8 ControllerId
)
{
    f598:	b082      	sub	sp, #8
    f59a:	4603      	mov	r3, r0
    f59c:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
}
    f5a0:	bf00      	nop
    f5a2:	b002      	add	sp, #8
    f5a4:	4770      	bx	lr

0000f5a6 <CanIf_SetControllerMode>:

Std_ReturnType CanIf_SetControllerMode( uint8 Controller, Can_ControllerStateType Transition )
{
    f5a6:	b082      	sub	sp, #8
    f5a8:	4603      	mov	r3, r0
    f5aa:	9100      	str	r1, [sp, #0]
    f5ac:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)Controller;
    (void)Transition;
}
    f5b0:	bf00      	nop
    f5b2:	4618      	mov	r0, r3
    f5b4:	b002      	add	sp, #8
    f5b6:	4770      	bx	lr

0000f5b8 <CanIf_DisableControllerInterrupts>:
void CanIf_DisableControllerInterrupts( uint8 Controller )
{
    f5b8:	b082      	sub	sp, #8
    f5ba:	4603      	mov	r3, r0
    f5bc:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)Controller;
}
    f5c0:	bf00      	nop
    f5c2:	b002      	add	sp, #8
    f5c4:	4770      	bx	lr

0000f5c6 <CanIf_EnableControllerInterrupts>:
void CanIf_EnableControllerInterrupts(uint8 Controller)
{
    f5c6:	b082      	sub	sp, #8
    f5c8:	4603      	mov	r3, r0
    f5ca:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)Controller;
}
    f5ce:	bf00      	nop
    f5d0:	b002      	add	sp, #8
    f5d2:	4770      	bx	lr

0000f5d4 <CanIf_GetControllerErrorState>:
Std_ReturnType CanIf_GetControllerErrorState( uint8 ControllerId, Can_ErrorStateType * ErrorStatePtr)
{
    f5d4:	b082      	sub	sp, #8
    f5d6:	4603      	mov	r3, r0
    f5d8:	9100      	str	r1, [sp, #0]
    f5da:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
    (void)ErrorStatePtr;
}
    f5de:	bf00      	nop
    f5e0:	4618      	mov	r0, r3
    f5e2:	b002      	add	sp, #8
    f5e4:	4770      	bx	lr

0000f5e6 <CanIf_GetControllerMode>:
Std_ReturnType CanIf_GetControllerMode( uint8 Controller, Can_ControllerStateType * ControllerModePtr )
{
    f5e6:	b082      	sub	sp, #8
    f5e8:	4603      	mov	r3, r0
    f5ea:	9100      	str	r1, [sp, #0]
    f5ec:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)Controller;
    (void)ControllerModePtr;
}
    f5f0:	bf00      	nop
    f5f2:	4618      	mov	r0, r3
    f5f4:	b002      	add	sp, #8
    f5f6:	4770      	bx	lr

0000f5f8 <CanIf_GetControllerRxErrorCounter>:
Std_ReturnType CanIf_GetControllerRxErrorCounter(uint8 ControllerId, uint8 * RxErrorCounterPtr)
{
    f5f8:	b082      	sub	sp, #8
    f5fa:	4603      	mov	r3, r0
    f5fc:	9100      	str	r1, [sp, #0]
    f5fe:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
    (void)RxErrorCounterPtr;
}
    f602:	bf00      	nop
    f604:	4618      	mov	r0, r3
    f606:	b002      	add	sp, #8
    f608:	4770      	bx	lr

0000f60a <CanIf_GetControllerTxErrorCounter>:
Std_ReturnType CanIf_GetControllerTxErrorCounter( uint8 ControllerId, uint8 * TxErrorCounterPtr )
{
    f60a:	b082      	sub	sp, #8
    f60c:	4603      	mov	r3, r0
    f60e:	9100      	str	r1, [sp, #0]
    f610:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
    (void)TxErrorCounterPtr;
}
    f614:	bf00      	nop
    f616:	4618      	mov	r0, r3
    f618:	b002      	add	sp, #8
    f61a:	4770      	bx	lr

0000f61c <Fls_ACEraseRomEnd>:
    f61c:	204e4143 	.word	0x204e4143
    f620:	64756162 	.word	0x64756162
    f624:	74617220 	.word	0x74617220
    f628:	65732065 	.word	0x65732065
    f62c:	75732074 	.word	0x75732074
    f630:	73656363 	.word	0x73656363
    f634:	6c756673 	.word	0x6c756673
    f638:	202e796c 	.word	0x202e796c
    f63c:	0000000a 	.word	0x0000000a
    f640:	6c696146 	.word	0x6c696146
    f644:	74206465 	.word	0x74206465
    f648:	6573206f 	.word	0x6573206f
    f64c:	41432074 	.word	0x41432074
    f650:	6162204e 	.word	0x6162204e
    f654:	72206475 	.word	0x72206475
    f658:	2e657461 	.word	0x2e657461
    f65c:	00000a20 	.word	0x00000a20
    f660:	204e4143 	.word	0x204e4143
    f664:	746e6f63 	.word	0x746e6f63
    f668:	6c6c6f72 	.word	0x6c6c6f72
    f66c:	73207265 	.word	0x73207265
    f670:	65746174 	.word	0x65746174
    f674:	63616d20 	.word	0x63616d20
    f678:	656e6968 	.word	0x656e6968
    f67c:	74657320 	.word	0x74657320
    f680:	63757320 	.word	0x63757320
    f684:	73736563 	.word	0x73736563
    f688:	6c6c7566 	.word	0x6c6c7566
    f68c:	0a202e79 	.word	0x0a202e79
    f690:	00000000 	.word	0x00000000
    f694:	6c696146 	.word	0x6c696146
    f698:	74206465 	.word	0x74206465
    f69c:	6573206f 	.word	0x6573206f
    f6a0:	41432074 	.word	0x41432074
    f6a4:	6f63204e 	.word	0x6f63204e
    f6a8:	6f72746e 	.word	0x6f72746e
    f6ac:	72656c6c 	.word	0x72656c6c
    f6b0:	61747320 	.word	0x61747320
    f6b4:	6d206574 	.word	0x6d206574
    f6b8:	69686361 	.word	0x69686361
    f6bc:	202e656e 	.word	0x202e656e
    f6c0:	0000000a 	.word	0x0000000a
    f6c4:	204e4143 	.word	0x204e4143
    f6c8:	2067736d 	.word	0x2067736d
    f6cc:	35317830 	.word	0x35317830
    f6d0:	65722034 	.word	0x65722034
    f6d4:	76696563 	.word	0x76696563
    f6d8:	61206465 	.word	0x61206465
    f6dc:	30352074 	.word	0x30352074
    f6e0:	70626b30 	.word	0x70626b30
    f6e4:	6f742073 	.word	0x6f742073
    f6e8:	696c6220 	.word	0x696c6220
    f6ec:	42206b6e 	.word	0x42206b6e
    f6f0:	2045554c 	.word	0x2045554c
    f6f4:	2044454c 	.word	0x2044454c
    f6f8:	3a726f66 	.word	0x3a726f66
    f6fc:	20642520 	.word	0x20642520
    f700:	0a20736d 	.word	0x0a20736d
    f704:	00000000 	.word	0x00000000
    f708:	204e4143 	.word	0x204e4143
    f70c:	2067736d 	.word	0x2067736d
    f710:	33327830 	.word	0x33327830
    f714:	65722033 	.word	0x65722033
    f718:	76696563 	.word	0x76696563
    f71c:	61206465 	.word	0x61206465
    f720:	30352074 	.word	0x30352074
    f724:	70626b30 	.word	0x70626b30
    f728:	6f742073 	.word	0x6f742073
    f72c:	696c6220 	.word	0x696c6220
    f730:	52206b6e 	.word	0x52206b6e
    f734:	4c204445 	.word	0x4c204445
    f738:	66204445 	.word	0x66204445
    f73c:	203a726f 	.word	0x203a726f
    f740:	6d206425 	.word	0x6d206425
    f744:	000a2073 	.word	0x000a2073
    f748:	204e4143 	.word	0x204e4143
    f74c:	2067736d 	.word	0x2067736d
    f750:	38337830 	.word	0x38337830
    f754:	65722032 	.word	0x65722032
    f758:	76696563 	.word	0x76696563
    f75c:	61206465 	.word	0x61206465
    f760:	30352074 	.word	0x30352074
    f764:	70626b30 	.word	0x70626b30
    f768:	6f742073 	.word	0x6f742073
    f76c:	696c6220 	.word	0x696c6220
    f770:	47206b6e 	.word	0x47206b6e
    f774:	4e454552 	.word	0x4e454552
    f778:	44454c20 	.word	0x44454c20
    f77c:	726f6620 	.word	0x726f6620
    f780:	6425203a 	.word	0x6425203a
    f784:	20736d20 	.word	0x20736d20
    f788:	0000000a 	.word	0x0000000a
    f78c:	6d726554 	.word	0x6d726554
    f790:	6c616e69 	.word	0x6c616e69
    f794:	00000000 	.word	0x00000000
    f798:	4c554e28 	.word	0x4c554e28
    f79c:	0000294c 	.word	0x0000294c

0000f7a0 <Clock_Ip_au8DividerCallbackIndex>:
    f7a0:	0e0d0c00 06030201 0a070409 000b0805     ................

0000f7b0 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000f7c0 <Clock_Ip_au8XoscCallbackIndex>:
    f7c0:	00000100 00000000 00000000 00000000     ................

0000f7d0 <Clock_Ip_au8IrcoscCallbackIndex>:
    f7d0:	03020100 00000004 00000000 00000000     ................

0000f7e0 <Clock_Ip_au8GateCallbackIndex>:
    f7e0:	06010200 01040301 00000500 00000000     ................

0000f7f0 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000f800 <Clock_Ip_au8PllCallbackIndex>:
    f800:	00000100 00000000 00000000 00000000     ................

0000f810 <Clock_Ip_au8SelectorCallbackIndex>:
    f810:	0a090800 03020109 07060504 00000000     ................

0000f820 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000f830 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000f840 <Clock_Ip_au8ClockFeatures>:
	...
    f850:	01000000 00000000 00000000 00000002     ................
    f860:	00000000 00000300 00000000 00040000     ................
    f870:	00000000 05000000 00000000 00000000     ................
    f880:	00000006 00000000 00000100 00000000     ................
    f890:	00010000 00000000 04000000 00000000     ................
    f8a0:	00000000 00000005 00000001 00000401     ................
    f8b0:	00000200 00050100 00030000 04020000     ................
    f8c0:	04000000 02000000 00000005 00000005     ................
    f8d0:	00000403 00000600 00050300 00070000     ................
    f8e0:	05000000 00000000 00000000 00000006     ................
	...
    f920:	00050000 00000000 06000000 00000100     ................
    f930:	00000000 00030007 00000000 00000000     ................
    f940:	00000000 00060000 00000000 07000000     ................
    f950:	00000100 00000000 00030008 00000000     ................
	...
    f968:	00090000 00000000 0a000000 00000100     ................
    f978:	00000000 0003000b 00000000 00000000     ................
    f988:	00000000 000c0000 00000000 0d000000     ................
    f998:	00000100 00000000 0003000e 00000000     ................
    f9a8:	00000800 00000000 00090000 00000000     ................
    f9b8:	0a000000 00000000 00000000 0000000b     ................
    f9c8:	00000000 00000b01 00000000 000b0200     ................
    f9d8:	00000000 0b030000 00000000 00000000     ................
	...
    f9f0:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    fa00:	01000000 00000000 00000000 00000007     ................
    fa10:	00007300 00000700 00320000 00090000     .s........2.....
    fa20:	02000000 07000000 00000000 00000021     ............!...
    fa30:	00000009 00000400 00000900 00030000     ................
    fa40:	00070000 61000000 07000000 00000000     .......a........
    fa50:	00000024 00000007 00002500 00000700     $........%......
    fa60:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    fa70:	00000000 00000020 38000004 00003800     .... ......8.8..
    fa80:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    fa90:	04000000 00260000 00000026 66000004     ......&.&......f
    faa0:	00006600 00000400 00370037 00040000     .f......7.7.....
    fab0:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    fac0:	2e000004 00002e00 00000200 00404040     ............@@@.
    fad0:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    fae0:	0000006b 6c000004 00006c00 00000900     k......l.l......
    faf0:	00010000 00090000 00000000 07000000     ................
    fb00:	00000000 00000036 00000007 00003100     ....6........1..
    fb10:	00000700 00490000 00070000 4a000000     ......I........J
    fb20:	07000000 00000000 0000004b 00000007     ........K.......
    fb30:	00004c00 00000700 004d0000 00070000     .L........M.....
    fb40:	3d000000 03000000 00000000 00000000     ...=............

0000fb50 <Clock_Ip_au16SelectorEntryHardwareValue>:
    fb50:	01010a03 01010001 04040002 02000603     ................
    fb60:	00010810 02020100 00000000 00000007     ................
    fb70:	00000009 00000000 00000c0e 00000000     ................
	...

0000fba8 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    fba8:	00020000 00000300 00000601 00000000     ................
	...

0000fbd8 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    fbd8:	00000700 00000000 02020000 01010303     ................
    fbe8:	03020606 00000000 00000000 00000000     ................
	...

0000fc08 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    fc08:	00000001 00000000 02020000 01010303     ................
    fc18:	03020606 00000000 00000000 00000000     ................
	...

0000fc38 <Clock_Ip_au8DividerValueHardwareValue>:
    fc38:	00020100 00000003 00000004 00000000     ................
    fc48:	00000005 00000000 00000000 00000000     ................
    fc58:	00000006 00000000 00000000 00000000     ................
	...
    fc78:	00000007                                ....

0000fc7c <Clock_Ip_apxScgPeriphAsyncDivs>:
    fc7c:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

0000fc8c <Clock_Ip_aeSourceTypeClockName>:
    fc8c:	00000000 00000001 00000001 00000001     ................
    fc9c:	00000001 00000001 00000001 00000001     ................
    fcac:	00000002 00000003 00000001 00000001     ................
    fcbc:	00000001 00000001 00000002 00000002     ................
    fccc:	00000003 00000003 00000001 00000001     ................
    fcdc:	00000004 00000004 00000004 00000004     ................
	...

0000fd48 <Clock_Ip_aeHwPllName>:
    fd48:	00000009                                ....

0000fd4c <Clock_Ip_aeHwDfsName>:
    fd4c:	00000057                                W...

0000fd50 <Clock_Ip_axDividerCallbacks>:
    fd50:	00002e31 00002e3b 00002e55 00002e6f     1...;...U...o...
    fd60:	00002e89 00002ea3 00002ebd 00002ed7     ................
    fd70:	00002ef1 00002f0b 00002f25 00002f3f     ...../..%/..?/..
    fd80:	00002f59 00002f73 00002f8d              Y/..s/.../..

0000fd8c <Clock_Ip_axDividerTriggerCallbacks>:
    fd8c:	00003301 00003301                       .3...3..

0000fd94 <Clock_Ip_axExtOscCallbacks>:
    fd94:	0000330d 0000330d 0000330d 00003317     .3...3...3...3..
    fda4:	0000330d 00003321 0000333b 00003355     .3..!3..;3..U3..
    fdb4:	000033d9 000033ed                       .3...3..

0000fdbc <Clock_Ip_axFracDivCallbacks>:
    fdbc:	000035ad 000035ad 000035b7              .5...5...5..

0000fdc8 <Clock_Ip_axGateCallbacks>:
    fdc8:	000035d1 000035db 000036db 000036f5     .5...5...6...6..
    fdd8:	0000368b 000036a5 0000363b 00003655     .6...6..;6..U6..
    fde8:	000035eb 00003605 0000372b 00003745     .5...6..+7..E7..
    fdf8:	0000377b 00003795                       {7...7..

0000fe00 <Clock_Ip_axIntOscCallbacks>:
    fe00:	00003941 00003941 0000394b 00003955     A9..A9..K9..U9..
    fe10:	0000396f 00003989 0000399d 000039b7     o9...9...9...9..
    fe20:	000039d1 000039e5 000039ff 00003a19     .9...9...9...:..
    fe30:	00003ac1 00003adb 00003af5              .:...:...:..

0000fe3c <Clock_Ip_axCmuCallbacks>:
    fe3c:	00004091 0000409b 000040a7 00004091     .@...@...@...@..

0000fe4c <Clock_Ip_axPllCallbacks>:
    fe4c:	000040b1 000040b1 000040bb 000040b1     .@...@...@...@..
    fe5c:	000040c7 000040d1 000040eb 00004105     .@...@...@...A..
    fe6c:	000041a9 00004195                       .A...A..

0000fe74 <Clock_Ip_axPcfsCallbacks>:
    fe74:	00004305                                .C..

0000fe78 <Clock_Ip_axSelectorCallbacks>:
    fe78:	00004311 00004311 0000431b 00004335     .C...C...C..5C..
    fe88:	00004311 0000434f 00004369 00004383     .C..OC..iC...C..
    fe98:	0000439d 000043b7 000043d1 000043eb     .C...C...C...C..
    fea8:	00004405 0000441f 00004439 00004453     .D...D..9D..SD..
    feb8:	0000446d 00004487 000044a1 000044bb     mD...D...D...D..
    fec8:	000044d5 000044ef                       .D...D..

0000fed0 <ClockSource>:
    fed0:	00000000 00000008 00000002 00000005     ................
	...
    fee8:	00000009                                ....

0000feec <ResetReasonArray>:
    feec:	00000000 00000001 00000002 00000003     ................
    fefc:	00000004 00000005 00000006 00000007     ................
    ff0c:	00000008 00000009 0000000a 0000000b     ................
    ff1c:	0000000c 0000000d 0000000e              ............

0000ff28 <Port_au32PortCiPortBaseAddr>:
    ff28:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    ff38:	4004d000                                ...@

0000ff3c <Port_au32PortCiGpioBaseAddr>:
    ff3c:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    ff4c:	400ff100                                ...@

0000ff50 <Flexcan_Ip_apxBase>:
    ff50:	40024000 40025000 4002b000              .@.@.P.@...@

0000ff5c <payload_code.3>:
    ff5c:	03020100 07060504 09090908 0a0a0a09     ................
    ff6c:	0b0b0b0a 0c0c0c0b 0d0d0d0c 0d0d0d0d     ................
    ff7c:	0e0e0e0d 0e0e0e0e 0e0e0e0e 0e0e0e0e     ................
    ff8c:	0f0f0f0e 0f0f0f0f 0f0f0f0f 0f0f0f0f     ................
    ff9c:	0000000f                                ....

0000ffa0 <flexcanBase.2>:
    ffa0:	40024000 40025000 4002b000              .@.@.P.@...@

0000ffac <maxMbNum.1>:
    ffac:	00000020 00000010 00000010               ...........

0000ffb8 <flexcanBase.0>:
    ffb8:	40024000                                .@.@

0000ffbc <ButtonsCfg>:
    ffbc:	0000008c 0000012c 00000071 0000012c     ....,...q...,...
    ffcc:	0000000c 0000012c                       ....,...

0000ffd4 <LedsCfg>:
    ffd4:	00000060 0000006f 00000070 00010048     `...o...p...H...
    ffe4:	00010049 0001004a 0001004b 0001004c     I...J...K...L...
    fff4:	0001004d 0001004e 0001004f              M...N...O...

00010000 <Can_43_FLEXCAN_Driver_P2Func>:
   10000:	00007541 000071bd                       Au...q..

00010008 <Can_43_FLEXCAN_Driver_Config>:
   10008:	00030000 00010000                       ........

00010010 <CanIf_CtrlPCConfig>:
   10010:	00000000 00010008                       ........

00010018 <CanIf_PCConfig>:
   10018:	00000001 00010010                       ........

00010020 <CanIf_RxPdu>:
   10020:	00010000 00000008 000008fd 00010001     ................
   10030:	00000008 00000949 00010002 00000008     ....I...........
   10040:	00000995                                ....

00010044 <CanIf_Can_43_FLEXCAN_HohToRxPduMapping>:
   10044:	00010020 0001002c 00010038               ...,...8...

00010050 <CanIf_Can_43_FLEXCAN_DrvConfig>:
   10050:	00010044                                D...

00010054 <CanIf_CanDrvConfig>:
   10054:	00010050                                P...

00010058 <CanIf_Config>:
   10058:	00000003 00010054 00010020 00000000     ....T... .......

00010068 <Can_43_FLEXCANIpwHwChannelConfig0>:
   10068:	00010598                                ....

0001006c <Can_au32HwBufferAddr_Ctrl0>:
   1006c:	4002b080 4002b090 4002b0a0              ...@...@...@

00010078 <Can_aHwFilter_Object0>:
   10078:	00000154 dffc0000                       T.......

00010080 <Can_aHwFilter_Object1>:
   10080:	00000233 dffc0000                       3.......

00010088 <Can_aHwFilter_Object2>:
   10088:	00000382 dffc0000                       ........

00010090 <Can_aCtrlOffsetToCtrlIDMap>:
   10090:	0000ffff                                ....

00010094 <Can_aHwObjIDToCtrlIDMap>:
   10094:	00000000                                ....

00010098 <Can_aHwObjectConfig>:
	...
   100a4:	ff010000 00010008 00010078 00000000     ........x.......
   100b4:	00000000 0001006c 00000001 00000000     ....l...........
   100c4:	00000000 ff010000 00010008 00010080     ................
   100d4:	00000000 00000001 00010070 00000002     ........p.......
	...
   100ec:	ff010000 00010008 00010088 00000000     ................
   100fc:	00000002 00010074                       ....t...

00010104 <Can_aBaudrateConfig_Ctrl0>:
   10104:	04030000 001d0005 00000000 00000000     ................
	...
   1011c:	00050403 0000000b 00000000 00000000     ................
   1012c:	00000000 04030000 00050005 00000000     ................
	...

00010148 <Can_apHwObject_Ctrl0>:
   10148:	00010098 000100bc 000100e0              ............

00010154 <Can_aControllerConfig>:
   10154:	00020000 4002b000 00000001 ffffffff     .......@........
	...
   10170:	00030001 00010104 00010068 00000003     ........h.......
   10180:	00010148                                H...

00010184 <Can_apController>:
   10184:	00010154                                T...

00010188 <Can_43_FLEXCAN_Config>:
   10188:	00000000 00000003 00010090 00010094     ................
   10198:	00010098 00010184                       ........

000101a0 <Mcu_aClockConfigPB>:
	...
   101a8:	1c000101 04000010 01000029 00000005     ........).......
   101b8:	00000001 00000000 00000057 00000000     ........W.......
   101c8:	00000000 00000008 007a1200 00000001     ..........z.....
   101d8:	00000001 00000000 00000057 00000000     ........W.......
   101e8:	00000057 00000000 00000000 00000000     W...............
	...
   10208:	00000019 00000005 0000001a 00000002     ................
   10218:	0000001b 00000005 0000002a 00000005     ........*.......
   10228:	00000028 0000000e 00000029 00000001     (.......).......
   10238:	00000056 0000001c 00000032 0000002a     V.......2...*...
   10248:	0000002b 00000014 0000002c 00000014     +.......,.......
   10258:	0000002d 00000014 0000002e 00000014     -...............
   10268:	0000003f 00000000 00000040 00000000     ?.......@.......
   10278:	00000041 00000000 00000042 00000000     A.......B.......
   10288:	00000031 00000000 00000045 00000000     1.......E.......
   10298:	00000046 00000000 00000047 00000000     F.......G.......
   102a8:	00000044 00000000 00000030 00000000     D.......0.......
   102b8:	0000003d 00000000 00000043 00000000     =.......C.......
   102c8:	00000049 00000000 0000004a 00000000     I.......J.......
   102d8:	0000004b 00000000 00000048 00000000     K.......H.......
   102e8:	0000000c 00000001 00000000 0000000d     ................
   102f8:	00000002 00000000 0000000e 00000001     ................
   10308:	00000000 0000000f 00000001 00000000     ................
   10318:	0000001d 00000001 00000000 0000001e     ................
   10328:	00000008 00000000 0000001f 00000001     ................
   10338:	00000000 00000021 00000001 00000000     ....!...........
   10348:	00000022 00000002 00000000 00000023     "...........#...
   10358:	00000001 00000000 00000025 00000003     ........%.......
   10368:	00000000 00000026 00000004 00000000     ....&...........
   10378:	00000027 00000002 00000000 00000032     '...........2...
   10388:	00000001 00000000 00000048 00000001     ........H.......
   10398:	00000001 00000056 00000001 00000001     ....V...........
   103a8:	00000057 00000000 00000000 00000057     W...........W...
	...
   103c0:	00000057 00000000 00000000 00000057     W...........W...
	...
   103d8:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   103f4:	00000014 00007d00 00000015 00007d00     .....}.......}..
   10404:	00000016 00007d00 00000017 00008000     .....}..........
   10414:	00000012 00000001 00000013 00000001     ................
   10424:	00000030 00000000 00000031 00000000     0.......1.......
   10434:	00000032 00000000 00000033 00000000     2.......3.......
   10444:	00000034 00000000 00000035 00000001     4.......5.......
   10454:	00000036 00000000 00000037 00000001     6.......7.......
   10464:	00000038 00000001 00000039 00000000     8.......9.......
   10474:	0000003a 00000000 0000003b 00000000     :.......;.......
   10484:	0000003c 00000001 0000003d 00000000     <.......=.......
   10494:	0000003e 00000000 0000003f 00000000     >.......?.......
   104a4:	00000040 00000000 00000041 00000000     @.......A.......
   104b4:	00000042 00000000 00000043 00000000     B.......C.......
   104c4:	00000044 00000000 00000045 00000000     D.......E.......
   104d4:	00000046 00000000 00000047 00000000     F.......G.......
   104e4:	00000048 00000000 00000049 00000000     H.......I.......
   104f4:	0000004a 00000000 0000004b 00000000     J.......K.......
   10504:	0000004c 00000001 0000004d 00000001     L.......M.......
   10514:	0000004e 00000000 0000004f 00000000     N.......O.......
   10524:	00000050 00000001 00000051 00000001     P.......Q.......
   10534:	00000052 00000001 00000053 00000001     R.......S.......
   10544:	00000054 00000001 00000055 00000000     T.......U.......
   10554:	00000056 00000001 00000057 00000000     V.......W.......
   10564:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00010598 <Flexcan_aCtrlConfigPB>:
   10598:	00000003 00000000 00000000 00000000     ................
   105a8:	00000040 00000000 00000100 00000003     @...............
   105b8:	00000004 00000005 0000000b 00000000     ................
   105c8:	00000004 00000004 00000005 0000000b     ................
	...
   105e0:	000089e9 00008a95                       ........

000105e8 <aIrqConfiguration>:
   105e8:	0000005c 00000f01 0000cf15 0000005d     \...........]...
   105f8:	00000f01 0000cf25 0000005f 00000f01     ....%..._.......
   10608:	0000cf35                                5...

0001060c <intCtrlConfig>:
   1060c:	00000003 000105e8                       ........

00010614 <Mcu_Config>:
   10614:	0000005a 00000000 00000001 00000001     Z...............
   10624:	00010b18 000101a0 00010b24              ........$...

00010630 <OsIf_xPredefinedConfig>:
   10630:	00000000 02dc6c00                       .....l..

00010638 <OsIf_apxPredefinedConfig>:
   10638:	00010630                                0...

0001063c <Platform_uConfiguration>:
   1063c:	00010644                                D...

00010640 <Platform_Config>:
   10640:	0001063c                                <...

00010644 <ipwConfig>:
   10644:	0001060c 00000000                       ........

0001064c <g_pin_mux_InitConfigArr>:
   1064c:	4004c000 400ff0c0 00000010 00000002     ...@...@........
   1065c:	00000001 00000002 00000000 00000000     ................
   1066c:	00000000 00000100 4004c000 400ff0c0     ...........@...@
   1067c:	0000000f 00000002 00000001 00000002     ................
	...
   10698:	00000100 4004c000 400ff0c0 00000000     .......@...@....
   106a8:	00000002 00000001 00000002 00000000     ................
	...
   106c0:	00000100 4004c000 400ff0c0 00000011     .......@...@....
   106d0:	00000002 00000001 00000001 00000000     ................
	...
   106ec:	4004d000 400ff100 0000000c 00000002     ...@...@........
   106fc:	00000001 00000001 00000000 00000000     ................
	...
   10714:	40049000 400ff000 0000000c 00000002     ...@...@........
   10724:	00000001 00000001 00000000 00000000     ................
	...
   1073c:	4004b000 400ff080 00000008 00000002     ...@...@........
   1074c:	00000001 00000002 00000000 00000000     ................
	...
   10764:	4004b000 400ff080 00000009 00000002     ...@...@........
   10774:	00000001 00000002 00000000 00000000     ................
	...
   1078c:	4004b000 400ff080 0000000a 00000002     ...@...@........
   1079c:	00000001 00000002 00000000 00000000     ................
	...
   107b4:	4004b000 400ff080 0000000b 00000002     ...@...@........
   107c4:	00000001 00000002 00000000 00000000     ................
	...
   107dc:	4004b000 400ff080 0000000c 00000002     ...@...@........
   107ec:	00000001 00000002 00000000 00000000     ................
	...
   10804:	4004b000 400ff080 0000000d 00000002     ...@...@........
   10814:	00000001 00000002 00000000 00000000     ................
	...
   1082c:	4004b000 400ff080 0000000e 00000002     ...@...@........
   1083c:	00000001 00000002 00000000 00000000     ................
	...
   10854:	4004b000 400ff080 0000000f 00000002     ...@...@........
   10864:	00000001 00000002 00000000 00000000     ................
	...
   1087c:	4004b000 00000000 00000011 00000002     ...@............
   1088c:	00000003 00000001 00000000 00000000     ................
	...
   108a4:	4004b000 00000000 00000010 00000002     ...@............
   108b4:	00000003 00000001 00000000 00000000     ................
	...

000108cc <au8Port_PartitionList>:
   108cc:	00000001                                ....

000108d0 <au32Port_PinToPartitionMap>:
   108d0:	00000001 00000001 00000001 00000001     ................
   108e0:	00000001 00000001 00000001 00000001     ................
   108f0:	00000001 00000001 00000001 00000001     ................
   10900:	00000001 00000001 00000001 00000001     ................

00010910 <Port_au16NoUnUsedPadsArrayDefault>:
   10910:	00010000 00030002 00070006 00090008     ................
   10920:	000d000b 000f000e 00110010 00210020     ............ .!.
   10930:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
   10940:	002b002a 002d002c 002f002e 00310030     *.+.,.-.../.0.1.
   10950:	00410040 00430042 00470046 00620061     @.A.B.C.F.G.a.b.
   10960:	00640063 00660065 00680067 006a0069     c.d.e.f.g.h.i.j.
   10970:	006c006b 006e006d 00810080 00830082     k.l.m.n.........
   10980:	00850084 00870086 00890088 008b008a     ................
   10990:	008e008d 0090008f                       ........

00010998 <Port_UnUsedPin>:
   10998:	00000100 00000001 00000000              ............

000109a4 <Port_aPinConfigDefault>:
   109a4:	00000070 00000100 00000001 00000002     p...............
   109b4:	00010001 00000051 00000300 00000000     ....Q...........
   109c4:	00000001 00010000 00000050 00000300     ........P.......
   109d4:	00000000 00000001 00010000 0000006f     ............o...
   109e4:	00000100 00000001 00000002 00010001     ................
   109f4:	00000060 00000100 00000001 00000002     `...............
   10a04:	00010001 00000071 00000100 00000000     ....q...........
   10a14:	00000001 00010001 0000008c 00000100     ................
   10a24:	00000000 00000001 00010001 0000000c     ................
   10a34:	00000100 00000000 00000001 00010001     ................
   10a44:	00000048 00000100 00000000 00000002     H...............
   10a54:	00010001 00000049 00000100 00000000     ....I...........
   10a64:	00000002 00010001 0000004a 00000100     ........J.......
   10a74:	00000000 00000002 00010001 0000004b     ............K...
   10a84:	00000100 00000000 00000002 00010001     ................
   10a94:	0000004c 00000100 00000000 00000002     L...............
   10aa4:	00010001 0000004d 00000100 00000000     ....M...........
   10ab4:	00000002 00010001 0000004e 00000100     ........N.......
   10ac4:	00000000 00000002 00010001 0000004f     ............O...
   10ad4:	00000100 00000000 00000002 00010001     ................

00010ae4 <Port_Config>:
   10ae4:	00440010 00010910 00010998 000109a4     ..D.............
	...
   10afc:	000108d0 000108cc 0001064c              ........L...

00010b08 <Power_Ip_RCM_ConfigPB>:
	...

00010b10 <Power_Ip_PMC_ConfigPB>:
   10b10:	00000000                                ....

00010b14 <Power_Ip_SMC_ConfigPB>:
   10b14:	00000000                                ....

00010b18 <Power_Ip_aModeConfigPB>:
	...

00010b24 <Power_Ip_HwIPsConfigPB>:
   10b24:	00010b08 00010b10 00010b14              ............

00010b30 <_aInitStr.0>:
   10b30:	00000000 54540000 45522052 53454747     ......TTR REGGES
   10b40:	00000000                                ....

00010b44 <_aV2C.0>:
   10b44:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00010b54 <__INIT_TABLE>:
   10b54:	00000002 	.word	0x00000002
   10b58:	1fff8b10 	.word	0x1fff8b10
   10b5c:	00010b7c 	.word	0x00010b7c
   10b60:	00010bac 	.word	0x00010bac
   10b64:	1fff8800 	.word	0x1fff8800
   10b68:	00000000 	.word	0x00000000
   10b6c:	00000310 	.word	0x00000310

00010b70 <__ZERO_TABLE>:
   10b70:	00000001 	.word	0x00000001
   10b74:	1fff8b40 	.word	0x1fff8b40
   10b78:	1fff9690 	.word	0x1fff9690
