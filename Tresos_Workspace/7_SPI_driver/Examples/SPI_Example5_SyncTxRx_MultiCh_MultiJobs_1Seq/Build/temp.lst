
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000bf3 	.word	0x00000bf3
  10:	00000bf5 	.word	0x00000bf5
  14:	00000bf7 	.word	0x00000bf7
  18:	00000bf9 	.word	0x00000bf9
	...
  2c:	00000bfb 	.word	0x00000bfb
  30:	00000bfd 	.word	0x00000bfd
  34:	00000000 	.word	0x00000000
  38:	00000bff 	.word	0x00000bff
  3c:	00000c01 	.word	0x00000c01
  40:	00000c03 	.word	0x00000c03
  44:	00000c03 	.word	0x00000c03
  48:	00000c03 	.word	0x00000c03
  4c:	00000c03 	.word	0x00000c03
  50:	00000c03 	.word	0x00000c03
  54:	00000c03 	.word	0x00000c03
  58:	00000c03 	.word	0x00000c03
  5c:	00000c03 	.word	0x00000c03
  60:	00000c03 	.word	0x00000c03
  64:	00000c03 	.word	0x00000c03
  68:	00000c03 	.word	0x00000c03
  6c:	00000c03 	.word	0x00000c03
  70:	00000c03 	.word	0x00000c03
  74:	00000c03 	.word	0x00000c03
  78:	00000c03 	.word	0x00000c03
  7c:	00000c03 	.word	0x00000c03
  80:	00000c03 	.word	0x00000c03
  84:	00000c03 	.word	0x00000c03
  88:	00000c03 	.word	0x00000c03
  8c:	00000c03 	.word	0x00000c03
  90:	00000c03 	.word	0x00000c03
  94:	00000c03 	.word	0x00000c03
  98:	00000c03 	.word	0x00000c03
  9c:	00000c03 	.word	0x00000c03
  a0:	00000c03 	.word	0x00000c03
  a4:	00000c03 	.word	0x00000c03
  a8:	00000c03 	.word	0x00000c03
  ac:	00000c03 	.word	0x00000c03
  b0:	00000c03 	.word	0x00000c03
  b4:	00000c03 	.word	0x00000c03
  b8:	00000c03 	.word	0x00000c03
  bc:	00000c03 	.word	0x00000c03
  c0:	00000c03 	.word	0x00000c03
  c4:	00000c03 	.word	0x00000c03
  c8:	00000c03 	.word	0x00000c03
  cc:	00000c03 	.word	0x00000c03
  d0:	00000c03 	.word	0x00000c03
  d4:	00000c03 	.word	0x00000c03
  d8:	00000c03 	.word	0x00000c03
  dc:	00000c03 	.word	0x00000c03
  e0:	00000c03 	.word	0x00000c03
  e4:	00000c03 	.word	0x00000c03
  e8:	00000c03 	.word	0x00000c03
  ec:	00000c03 	.word	0x00000c03
  f0:	00000c03 	.word	0x00000c03
  f4:	00000c03 	.word	0x00000c03
  f8:	00000c03 	.word	0x00000c03
  fc:	00000c03 	.word	0x00000c03
 100:	00000c03 	.word	0x00000c03
 104:	00000c03 	.word	0x00000c03
 108:	00000c03 	.word	0x00000c03
 10c:	00000c03 	.word	0x00000c03
 110:	00000c03 	.word	0x00000c03
 114:	00000c03 	.word	0x00000c03
 118:	00000c03 	.word	0x00000c03
 11c:	00000c03 	.word	0x00000c03
 120:	00000c03 	.word	0x00000c03
 124:	00000c03 	.word	0x00000c03
 128:	00000c03 	.word	0x00000c03
 12c:	00000c03 	.word	0x00000c03
 130:	00000c03 	.word	0x00000c03
 134:	00000c03 	.word	0x00000c03
 138:	00000c03 	.word	0x00000c03
 13c:	00000c03 	.word	0x00000c03
 140:	00000c03 	.word	0x00000c03
 144:	00000c03 	.word	0x00000c03
 148:	00000c03 	.word	0x00000c03
 14c:	00000c03 	.word	0x00000c03
 150:	00000c03 	.word	0x00000c03
 154:	00000c03 	.word	0x00000c03
 158:	00000c03 	.word	0x00000c03
 15c:	00000c03 	.word	0x00000c03
 160:	00000c03 	.word	0x00000c03
 164:	00000c03 	.word	0x00000c03
 168:	00000c03 	.word	0x00000c03
 16c:	00000c03 	.word	0x00000c03
 170:	00000c03 	.word	0x00000c03
 174:	00000c03 	.word	0x00000c03
 178:	00000c03 	.word	0x00000c03
 17c:	00000c03 	.word	0x00000c03
 180:	00000c03 	.word	0x00000c03
 184:	00000c03 	.word	0x00000c03
 188:	00000c03 	.word	0x00000c03
 18c:	00000c03 	.word	0x00000c03
 190:	00000c03 	.word	0x00000c03
 194:	00000c03 	.word	0x00000c03
 198:	00000c03 	.word	0x00000c03
 19c:	00000c03 	.word	0x00000c03
 1a0:	00000c03 	.word	0x00000c03
 1a4:	00000c03 	.word	0x00000c03
 1a8:	00000c03 	.word	0x00000c03
 1ac:	00000c03 	.word	0x00000c03
 1b0:	00000c03 	.word	0x00000c03
 1b4:	00000c03 	.word	0x00000c03
 1b8:	00000c03 	.word	0x00000c03
 1bc:	00000c03 	.word	0x00000c03
 1c0:	00000c03 	.word	0x00000c03
 1c4:	00000c03 	.word	0x00000c03
 1c8:	00000c03 	.word	0x00000c03
 1cc:	00000c03 	.word	0x00000c03
 1d0:	00000c03 	.word	0x00000c03
 1d4:	00000c03 	.word	0x00000c03
 1d8:	00000c03 	.word	0x00000c03
 1dc:	00000c03 	.word	0x00000c03
 1e0:	00000c03 	.word	0x00000c03
 1e4:	00000c03 	.word	0x00000c03
 1e8:	00000c03 	.word	0x00000c03
 1ec:	00000c03 	.word	0x00000c03
 1f0:	00000c03 	.word	0x00000c03
 1f4:	00000c03 	.word	0x00000c03
 1f8:	00000c03 	.word	0x00000c03
 1fc:	00000c03 	.word	0x00000c03
 200:	00000c03 	.word	0x00000c03
 204:	00000c03 	.word	0x00000c03
 208:	00000c03 	.word	0x00000c03
 20c:	00000c03 	.word	0x00000c03
 210:	00000c03 	.word	0x00000c03
 214:	00000c03 	.word	0x00000c03
 218:	00000c03 	.word	0x00000c03
 21c:	00000c03 	.word	0x00000c03
 220:	00000c03 	.word	0x00000c03
 224:	00000c03 	.word	0x00000c03
 228:	00000c03 	.word	0x00000c03
 22c:	00000c03 	.word	0x00000c03
 230:	00000c03 	.word	0x00000c03
 234:	00000c03 	.word	0x00000c03
 238:	00000c03 	.word	0x00000c03
 23c:	00000c03 	.word	0x00000c03
 240:	00000c03 	.word	0x00000c03
 244:	00000c03 	.word	0x00000c03
 248:	00000c03 	.word	0x00000c03
 24c:	00000c03 	.word	0x00000c03
 250:	00000c03 	.word	0x00000c03
 254:	00000c03 	.word	0x00000c03
 258:	00000c03 	.word	0x00000c03
 25c:	00000c03 	.word	0x00000c03
 260:	00000c03 	.word	0x00000c03
 264:	00000c03 	.word	0x00000c03
 268:	00000c03 	.word	0x00000c03
 26c:	00000c03 	.word	0x00000c03
 270:	00000c03 	.word	0x00000c03
 274:	00000c03 	.word	0x00000c03
 278:	00000c03 	.word	0x00000c03
 27c:	00000c03 	.word	0x00000c03
 280:	00000c03 	.word	0x00000c03
 284:	00000c03 	.word	0x00000c03
 288:	00000c03 	.word	0x00000c03
 28c:	00000c03 	.word	0x00000c03
 290:	00000c03 	.word	0x00000c03
 294:	00000c03 	.word	0x00000c03
 298:	00000c03 	.word	0x00000c03
 29c:	00000c03 	.word	0x00000c03
 2a0:	00000c03 	.word	0x00000c03
 2a4:	00000c03 	.word	0x00000c03
 2a8:	00000c03 	.word	0x00000c03
 2ac:	00000c03 	.word	0x00000c03
 2b0:	00000c03 	.word	0x00000c03
 2b4:	00000c03 	.word	0x00000c03
 2b8:	00000c03 	.word	0x00000c03
 2bc:	00000c03 	.word	0x00000c03
 2c0:	00000c03 	.word	0x00000c03
 2c4:	00000c03 	.word	0x00000c03
 2c8:	00000c03 	.word	0x00000c03
 2cc:	00000c03 	.word	0x00000c03
 2d0:	00000c03 	.word	0x00000c03
 2d4:	00000c03 	.word	0x00000c03
 2d8:	00000c03 	.word	0x00000c03
 2dc:	00000c03 	.word	0x00000c03
 2e0:	00000c03 	.word	0x00000c03
 2e4:	00000c03 	.word	0x00000c03
 2e8:	00000c03 	.word	0x00000c03
 2ec:	00000c03 	.word	0x00000c03
 2f0:	00000c03 	.word	0x00000c03
 2f4:	00000c03 	.word	0x00000c03
 2f8:	00000c03 	.word	0x00000c03
 2fc:	00000c03 	.word	0x00000c03
 300:	00000c03 	.word	0x00000c03
 304:	00000c03 	.word	0x00000c03
 308:	00000c03 	.word	0x00000c03
 30c:	00000c03 	.word	0x00000c03

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 faed 	bl	a60 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fbac 	bl	be8 <startup_go_to_user_mode>
     490:	f000 fa34 	bl	8fc <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff8f0c 	.word	0x1fff8f0c

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 faf7 	bl	b8c <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Delay>:
void Delay( uint32 ms );

/*this is dummy delay function prepare just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     8b0:	b500      	push	{lr}
     8b2:	b087      	sub	sp, #28
     8b4:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     8b6:	9b01      	ldr	r3, [sp, #4]
     8b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8bc:	fb02 f303 	mul.w	r3, r2, r3
     8c0:	2101      	movs	r1, #1
     8c2:	4618      	mov	r0, r3
     8c4:	f001 f99e 	bl	1c04 <OsIf_MicrosToTicks>
     8c8:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     8ca:	2001      	movs	r0, #1
     8cc:	f001 f94e 	bl	1b6c <OsIf_GetCounter>
     8d0:	4603      	mov	r3, r0
     8d2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     8d4:	2300      	movs	r3, #0
     8d6:	9305      	str	r3, [sp, #20]
    do
    {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8d8:	ab03      	add	r3, sp, #12
     8da:	2101      	movs	r1, #1
     8dc:	4618      	mov	r0, r3
     8de:	f001 f95e 	bl	1b9e <OsIf_GetElapsed>
     8e2:	4602      	mov	r2, r0
     8e4:	9b05      	ldr	r3, [sp, #20]
     8e6:	4413      	add	r3, r2
     8e8:	9305      	str	r3, [sp, #20]
    }while( ElapsedTime < Timeout );
     8ea:	9a05      	ldr	r2, [sp, #20]
     8ec:	9b04      	ldr	r3, [sp, #16]
     8ee:	429a      	cmp	r2, r3
     8f0:	d3f2      	bcc.n	8d8 <__BSS_SRAM_SIZE+0x18>
}
     8f2:	bf00      	nop
     8f4:	bf00      	nop
     8f6:	b007      	add	sp, #28
     8f8:	f85d fb04 	ldr.w	pc, [sp], #4

000008fc <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8fc:	b500      	push	{lr}
     8fe:	b085      	sub	sp, #20
    Spi_DataBufferType TxBuffer[4] = { 0x00, 0x01, 0x02, 0x03 };
     900:	4b35      	ldr	r3, [pc, #212]	; (9d8 <main+0xdc>)
     902:	9303      	str	r3, [sp, #12]
    Spi_DataBufferType RxBuffer[4];
    uint8 Wren, Cmd;
    uint16 Address;

    EcuM_Init();
     904:	f000 f872 	bl	9ec <EcuM_Init>
    SEGGER_RTT_Init();
     908:	f000 fb0e 	bl	f28 <SEGGER_RTT_Init>

    /*Enable writing instructions in the eeprom memory by sending a 0x06
    and send it in the first Job*/
    Wren = 0x06;
     90c:	2306      	movs	r3, #6
     90e:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_Wren, &Wren, NULL, 1 );
     912:	f10d 0107 	add.w	r1, sp, #7
     916:	2301      	movs	r3, #1
     918:	2200      	movs	r2, #0
     91a:	2000      	movs	r0, #0
     91c:	f007 faa6 	bl	7e6c <Spi_SetupEB>
    /*Set up the buffer for the Write command + Memory Address and four bytes of data
    in the second job*/
    Cmd = 0x02;                 /*WREN Instruction value*/
     920:	2302      	movs	r3, #2
     922:	f88d 3006 	strb.w	r3, [sp, #6]
    Address = 0x00A0;       /*Memory address to write data*/    
     926:	23a0      	movs	r3, #160	; 0xa0
     928:	f8ad 3004 	strh.w	r3, [sp, #4]
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_Cmd, &Cmd, NULL, 1 );
     92c:	f10d 0106 	add.w	r1, sp, #6
     930:	2301      	movs	r3, #1
     932:	2200      	movs	r2, #0
     934:	2001      	movs	r0, #1
     936:	f007 fa99 	bl	7e6c <Spi_SetupEB>
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_Addr, (Spi_DataBufferType*)&Address, NULL, 1 );
     93a:	a901      	add	r1, sp, #4
     93c:	2301      	movs	r3, #1
     93e:	2200      	movs	r2, #0
     940:	2002      	movs	r0, #2
     942:	f007 fa93 	bl	7e6c <Spi_SetupEB>
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_Data, TxBuffer, NULL, 4 );
     946:	a903      	add	r1, sp, #12
     948:	2304      	movs	r3, #4
     94a:	2200      	movs	r2, #0
     94c:	2003      	movs	r0, #3
     94e:	f007 fa8d 	bl	7e6c <Spi_SetupEB>
    /*Send the data to the eeprom memory, two jobs*/
    Spi_SyncTransmit( SpiConf_SpiSequence_SpiSequence_Write );
     952:	2000      	movs	r0, #0
     954:	f007 fb62 	bl	801c <Spi_SyncTransmit>

    /*Wait for the data to be recorded in memory, it is not the best way to
    do it, so it's just for demonstration purposes*/
    Delay( 5 );
     958:	2005      	movs	r0, #5
     95a:	f7ff ffa9 	bl	8b0 <Delay>

    /*Set up the buffer with the read command + address to read and the buffer to store
    the read data in one job*/
    Cmd = 0x03;                 /*READ Instruction value*/
     95e:	2303      	movs	r3, #3
     960:	f88d 3006 	strb.w	r3, [sp, #6]
    Address = 0x00A0;           /*Memory address to read data*/
     964:	23a0      	movs	r3, #160	; 0xa0
     966:	f8ad 3004 	strh.w	r3, [sp, #4]
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_Cmd, &Cmd, NULL, 1 );
     96a:	f10d 0106 	add.w	r1, sp, #6
     96e:	2301      	movs	r3, #1
     970:	2200      	movs	r2, #0
     972:	2001      	movs	r0, #1
     974:	f007 fa7a 	bl	7e6c <Spi_SetupEB>
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_Addr, (Spi_DataBufferType*)&Address, NULL, 1 );
     978:	a901      	add	r1, sp, #4
     97a:	2301      	movs	r3, #1
     97c:	2200      	movs	r2, #0
     97e:	2002      	movs	r0, #2
     980:	f007 fa74 	bl	7e6c <Spi_SetupEB>
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_Data, NULL, RxBuffer, 4 );
     984:	aa02      	add	r2, sp, #8
     986:	2304      	movs	r3, #4
     988:	2100      	movs	r1, #0
     98a:	2003      	movs	r0, #3
     98c:	f007 fa6e 	bl	7e6c <Spi_SetupEB>
    Spi_SyncTransmit( SpiConf_SpiSequence_SpiSequence_Read );
     990:	2001      	movs	r0, #1
     992:	f007 fb43 	bl	801c <Spi_SyncTransmit>

    //SEGGER_RTT_printf(0, "Data read from eeprom 1: %x\n", RxBuffer[0] );
    SEGGER_RTT_printf(0, "Data read from eeprom 1 - RxBuffer[0]: 0x%x\n", RxBuffer[0] );
     996:	f89d 3008 	ldrb.w	r3, [sp, #8]
     99a:	461a      	mov	r2, r3
     99c:	490f      	ldr	r1, [pc, #60]	; (9dc <main+0xe0>)
     99e:	2000      	movs	r0, #0
     9a0:	f000 fe2a 	bl	15f8 <SEGGER_RTT_printf>
    SEGGER_RTT_printf(0, "Data read from eeprom 1 - RxBuffer[1]: 0x%x\n", RxBuffer[1] );
     9a4:	f89d 3009 	ldrb.w	r3, [sp, #9]
     9a8:	461a      	mov	r2, r3
     9aa:	490d      	ldr	r1, [pc, #52]	; (9e0 <main+0xe4>)
     9ac:	2000      	movs	r0, #0
     9ae:	f000 fe23 	bl	15f8 <SEGGER_RTT_printf>
    SEGGER_RTT_printf(0, "Data read from eeprom 1 - RxBuffer[2]: 0x%x\n", RxBuffer[2] );
     9b2:	f89d 300a 	ldrb.w	r3, [sp, #10]
     9b6:	461a      	mov	r2, r3
     9b8:	490a      	ldr	r1, [pc, #40]	; (9e4 <main+0xe8>)
     9ba:	2000      	movs	r0, #0
     9bc:	f000 fe1c 	bl	15f8 <SEGGER_RTT_printf>
    SEGGER_RTT_printf(0, "Data read from eeprom 1 - RxBuffer[3]: 0x%x\n", RxBuffer[3] );
     9c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
     9c4:	461a      	mov	r2, r3
     9c6:	4908      	ldr	r1, [pc, #32]	; (9e8 <main+0xec>)
     9c8:	2000      	movs	r0, #0
     9ca:	f000 fe15 	bl	15f8 <SEGGER_RTT_printf>


    while( 1u )
    {
        Delay( 10u );
     9ce:	200a      	movs	r0, #10
     9d0:	f7ff ff6e 	bl	8b0 <Delay>
     9d4:	e7fb      	b.n	9ce <main+0xd2>
     9d6:	bf00      	nop
     9d8:	03020100 	.word	0x03020100
     9dc:	0000a548 	.word	0x0000a548
     9e0:	0000a578 	.word	0x0000a578
     9e4:	0000a5a8 	.word	0x0000a5a8
     9e8:	0000a5d8 	.word	0x0000a5d8

000009ec <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     9ec:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     9ee:	480b      	ldr	r0, [pc, #44]	; (a1c <EcuM_Init+0x30>)
     9f0:	f004 fe48 	bl	5684 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     9f4:	2000      	movs	r0, #0
     9f6:	f004 fe99 	bl	572c <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     9fa:	2000      	movs	r0, #0
     9fc:	f004 feba 	bl	5774 <Mcu_SetMode>

    /*Init the internal tick reference Systick Timer*/
    OsIf_Init( NULL_PTR );
     a00:	2000      	movs	r0, #0
     a02:	f001 f8aa 	bl	1b5a <OsIf_Init>
    /*enable and setup interrupts*/
    Platform_Init( NULL_PTR );
     a06:	2000      	movs	r0, #0
     a08:	f000 ffa4 	bl	1954 <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration, for this case
    only Port Pin 122  (D16) is configured as output*/
    Port_Init( &Port_Config );
     a0c:	4804      	ldr	r0, [pc, #16]	; (a20 <EcuM_Init+0x34>)
     a0e:	f005 fa3b 	bl	5e88 <Port_Init>

    /*init the FlexCAN0 with the paramters set in Tresos in loop back mode*/
    Spi_Init( &Spi_Config );
     a12:	4804      	ldr	r0, [pc, #16]	; (a24 <EcuM_Init+0x38>)
     a14:	f007 f978 	bl	7d08 <Spi_Init>
}
     a18:	bf00      	nop
     a1a:	bd08      	pop	{r3, pc}
     a1c:	0000b204 	.word	0x0000b204
     a20:	0000b42c 	.word	0x0000b42c
     a24:	0000b5c8 	.word	0x0000b5c8

00000a28 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     a28:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a2a:	f3ef 8310 	mrs	r3, PRIMASK
     a2e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a30:	4623      	mov	r3, r4
}
     a32:	4618      	mov	r0, r3
     a34:	f85d 4b04 	ldr.w	r4, [sp], #4
     a38:	4770      	bx	lr

00000a3a <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     a3a:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a3c:	f3ef 8310 	mrs	r3, PRIMASK
     a40:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a42:	4623      	mov	r3, r4
}
     a44:	4618      	mov	r0, r3
     a46:	f85d 4b04 	ldr.w	r4, [sp], #4
     a4a:	4770      	bx	lr

00000a4c <Spi_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Spi_schm_read_msr(void)
{
     a4c:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a4e:	f3ef 8310 	mrs	r3, PRIMASK
     a52:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a54:	4623      	mov	r3, r4
}
     a56:	4618      	mov	r0, r3
     a58:	f85d 4b04 	ldr.w	r4, [sp], #4
     a5c:	4770      	bx	lr
	...

00000a60 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     a60:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     a62:	2300      	movs	r3, #0
     a64:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     a66:	2300      	movs	r3, #0
     a68:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     a6a:	2300      	movs	r3, #0
     a6c:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     a6e:	2300      	movs	r3, #0
     a70:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     a72:	4b44      	ldr	r3, [pc, #272]	; (b84 <init_data_bss+0x124>)
     a74:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     a76:	4b44      	ldr	r3, [pc, #272]	; (b88 <init_data_bss+0x128>)
     a78:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     a7a:	9b05      	ldr	r3, [sp, #20]
     a7c:	681b      	ldr	r3, [r3, #0]
     a7e:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     a80:	9b05      	ldr	r3, [sp, #20]
     a82:	3304      	adds	r3, #4
     a84:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     a86:	9b05      	ldr	r3, [sp, #20]
     a88:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     a8a:	2300      	movs	r3, #0
     a8c:	9309      	str	r3, [sp, #36]	; 0x24
     a8e:	e03d      	b.n	b0c <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a92:	4613      	mov	r3, r2
     a94:	005b      	lsls	r3, r3, #1
     a96:	4413      	add	r3, r2
     a98:	009b      	lsls	r3, r3, #2
     a9a:	461a      	mov	r2, r3
     a9c:	9b03      	ldr	r3, [sp, #12]
     a9e:	4413      	add	r3, r2
     aa0:	685b      	ldr	r3, [r3, #4]
     aa2:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aa6:	4613      	mov	r3, r2
     aa8:	005b      	lsls	r3, r3, #1
     aaa:	4413      	add	r3, r2
     aac:	009b      	lsls	r3, r3, #2
     aae:	461a      	mov	r2, r3
     ab0:	9b03      	ldr	r3, [sp, #12]
     ab2:	4413      	add	r3, r2
     ab4:	681b      	ldr	r3, [r3, #0]
     ab6:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aba:	4613      	mov	r3, r2
     abc:	005b      	lsls	r3, r3, #1
     abe:	4413      	add	r3, r2
     ac0:	009b      	lsls	r3, r3, #2
     ac2:	461a      	mov	r2, r3
     ac4:	9b03      	ldr	r3, [sp, #12]
     ac6:	4413      	add	r3, r2
     ac8:	689b      	ldr	r3, [r3, #8]
     aca:	4619      	mov	r1, r3
     acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ace:	4613      	mov	r3, r2
     ad0:	005b      	lsls	r3, r3, #1
     ad2:	4413      	add	r3, r2
     ad4:	009b      	lsls	r3, r3, #2
     ad6:	461a      	mov	r2, r3
     ad8:	9b03      	ldr	r3, [sp, #12]
     ada:	4413      	add	r3, r2
     adc:	685b      	ldr	r3, [r3, #4]
     ade:	1acb      	subs	r3, r1, r3
     ae0:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     ae2:	2300      	movs	r3, #0
     ae4:	9308      	str	r3, [sp, #32]
     ae6:	e00a      	b.n	afe <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     ae8:	9a00      	ldr	r2, [sp, #0]
     aea:	9b08      	ldr	r3, [sp, #32]
     aec:	441a      	add	r2, r3
     aee:	9901      	ldr	r1, [sp, #4]
     af0:	9b08      	ldr	r3, [sp, #32]
     af2:	440b      	add	r3, r1
     af4:	7812      	ldrb	r2, [r2, #0]
     af6:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     af8:	9b08      	ldr	r3, [sp, #32]
     afa:	3301      	adds	r3, #1
     afc:	9308      	str	r3, [sp, #32]
     afe:	9a08      	ldr	r2, [sp, #32]
     b00:	9b06      	ldr	r3, [sp, #24]
     b02:	429a      	cmp	r2, r3
     b04:	d3f0      	bcc.n	ae8 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b08:	3301      	adds	r3, #1
     b0a:	9309      	str	r3, [sp, #36]	; 0x24
     b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b0e:	9b07      	ldr	r3, [sp, #28]
     b10:	429a      	cmp	r2, r3
     b12:	d3bd      	bcc.n	a90 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     b14:	9b04      	ldr	r3, [sp, #16]
     b16:	681b      	ldr	r3, [r3, #0]
     b18:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     b1a:	9b04      	ldr	r3, [sp, #16]
     b1c:	3304      	adds	r3, #4
     b1e:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     b20:	9b04      	ldr	r3, [sp, #16]
     b22:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     b24:	2300      	movs	r3, #0
     b26:	9309      	str	r3, [sp, #36]	; 0x24
     b28:	e024      	b.n	b74 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b2c:	00db      	lsls	r3, r3, #3
     b2e:	9a02      	ldr	r2, [sp, #8]
     b30:	4413      	add	r3, r2
     b32:	681b      	ldr	r3, [r3, #0]
     b34:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b38:	00db      	lsls	r3, r3, #3
     b3a:	9a02      	ldr	r2, [sp, #8]
     b3c:	4413      	add	r3, r2
     b3e:	685b      	ldr	r3, [r3, #4]
     b40:	4619      	mov	r1, r3
     b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b44:	00db      	lsls	r3, r3, #3
     b46:	9a02      	ldr	r2, [sp, #8]
     b48:	4413      	add	r3, r2
     b4a:	681b      	ldr	r3, [r3, #0]
     b4c:	1acb      	subs	r3, r1, r3
     b4e:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b50:	2300      	movs	r3, #0
     b52:	9308      	str	r3, [sp, #32]
     b54:	e007      	b.n	b66 <init_data_bss+0x106>
        {
            ram[j] = 0U;
     b56:	9a01      	ldr	r2, [sp, #4]
     b58:	9b08      	ldr	r3, [sp, #32]
     b5a:	4413      	add	r3, r2
     b5c:	2200      	movs	r2, #0
     b5e:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b60:	9b08      	ldr	r3, [sp, #32]
     b62:	3301      	adds	r3, #1
     b64:	9308      	str	r3, [sp, #32]
     b66:	9a08      	ldr	r2, [sp, #32]
     b68:	9b06      	ldr	r3, [sp, #24]
     b6a:	429a      	cmp	r2, r3
     b6c:	d3f3      	bcc.n	b56 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b70:	3301      	adds	r3, #1
     b72:	9309      	str	r3, [sp, #36]	; 0x24
     b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b76:	9b07      	ldr	r3, [sp, #28]
     b78:	429a      	cmp	r2, r3
     b7a:	d3d6      	bcc.n	b2a <init_data_bss+0xca>
        }
    }
}
     b7c:	bf00      	nop
     b7e:	bf00      	nop
     b80:	b00a      	add	sp, #40	; 0x28
     b82:	4770      	bx	lr
     b84:	0000b60c 	.word	0x0000b60c
     b88:	0000b628 	.word	0x0000b628

00000b8c <sys_m4_cache_init>:
{
     b8c:	b084      	sub	sp, #16
     b8e:	4603      	mov	r3, r0
     b90:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     b94:	2300      	movs	r3, #0
     b96:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     b9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b9e:	2b00      	cmp	r3, #0
     ba0:	d118      	bne.n	bd4 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     ba2:	4b10      	ldr	r3, [pc, #64]	; (be4 <sys_m4_cache_init+0x58>)
     ba4:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     ba8:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     baa:	4b0e      	ldr	r3, [pc, #56]	; (be4 <sys_m4_cache_init+0x58>)
     bac:	681b      	ldr	r3, [r3, #0]
     bae:	4a0d      	ldr	r2, [pc, #52]	; (be4 <sys_m4_cache_init+0x58>)
     bb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     bb4:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     bb6:	bf00      	nop
     bb8:	4b0a      	ldr	r3, [pc, #40]	; (be4 <sys_m4_cache_init+0x58>)
     bba:	681b      	ldr	r3, [r3, #0]
     bbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     bc4:	d0f8      	beq.n	bb8 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     bc6:	4b07      	ldr	r3, [pc, #28]	; (be4 <sys_m4_cache_init+0x58>)
     bc8:	681b      	ldr	r3, [r3, #0]
     bca:	4a06      	ldr	r2, [pc, #24]	; (be4 <sys_m4_cache_init+0x58>)
     bcc:	f043 0301 	orr.w	r3, r3, #1
     bd0:	6013      	str	r3, [r2, #0]
     bd2:	e002      	b.n	bda <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     bd4:	2301      	movs	r3, #1
     bd6:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     bda:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     bde:	4618      	mov	r0, r3
     be0:	b004      	add	sp, #16
     be2:	4770      	bx	lr
     be4:	e0082000 	.word	0xe0082000

00000be8 <startup_go_to_user_mode>:
}
     be8:	bf00      	nop
     bea:	4770      	bx	lr

00000bec <Sys_GetCoreID>:
    return 0U;
     bec:	2300      	movs	r3, #0
}
     bee:	4618      	mov	r0, r3
     bf0:	4770      	bx	lr

00000bf2 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     bf2:	e7fe      	b.n	bf2 <HardFault_Handler>

00000bf4 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     bf4:	e7fe      	b.n	bf4 <MemManage_Handler>

00000bf6 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     bf6:	e7fe      	b.n	bf6 <BusFault_Handler>

00000bf8 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     bf8:	e7fe      	b.n	bf8 <UsageFault_Handler>

00000bfa <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     bfa:	e7fe      	b.n	bfa <SVC_Handler>

00000bfc <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     bfc:	e7fe      	b.n	bfc <DebugMon_Handler>

00000bfe <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     bfe:	e7fe      	b.n	bfe <PendSV_Handler>

00000c00 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     c00:	e7fe      	b.n	c00 <SysTick_Handler>

00000c02 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     c02:	e7fe      	b.n	c02 <undefined_handler>

00000c04 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     c04:	b500      	push	{lr}
     c06:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     c08:	4b26      	ldr	r3, [pc, #152]	; (ca4 <_DoInit+0xa0>)
     c0a:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     c0c:	22a8      	movs	r2, #168	; 0xa8
     c0e:	2100      	movs	r1, #0
     c10:	9800      	ldr	r0, [sp, #0]
     c12:	f000 fd13 	bl	163c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     c16:	9b00      	ldr	r3, [sp, #0]
     c18:	2203      	movs	r2, #3
     c1a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     c1c:	9b00      	ldr	r3, [sp, #0]
     c1e:	2203      	movs	r2, #3
     c20:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     c22:	9b00      	ldr	r3, [sp, #0]
     c24:	4a20      	ldr	r2, [pc, #128]	; (ca8 <_DoInit+0xa4>)
     c26:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     c28:	9b00      	ldr	r3, [sp, #0]
     c2a:	4a20      	ldr	r2, [pc, #128]	; (cac <_DoInit+0xa8>)
     c2c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     c2e:	9b00      	ldr	r3, [sp, #0]
     c30:	f44f 6280 	mov.w	r2, #1024	; 0x400
     c34:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     c36:	9b00      	ldr	r3, [sp, #0]
     c38:	2200      	movs	r2, #0
     c3a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     c3c:	9b00      	ldr	r3, [sp, #0]
     c3e:	2200      	movs	r2, #0
     c40:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     c42:	9b00      	ldr	r3, [sp, #0]
     c44:	2200      	movs	r2, #0
     c46:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     c48:	9b00      	ldr	r3, [sp, #0]
     c4a:	4a17      	ldr	r2, [pc, #92]	; (ca8 <_DoInit+0xa4>)
     c4c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     c4e:	9b00      	ldr	r3, [sp, #0]
     c50:	4a17      	ldr	r2, [pc, #92]	; (cb0 <_DoInit+0xac>)
     c52:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     c54:	9b00      	ldr	r3, [sp, #0]
     c56:	2210      	movs	r2, #16
     c58:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     c5a:	9b00      	ldr	r3, [sp, #0]
     c5c:	2200      	movs	r2, #0
     c5e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     c60:	9b00      	ldr	r3, [sp, #0]
     c62:	2200      	movs	r2, #0
     c64:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     c66:	9b00      	ldr	r3, [sp, #0]
     c68:	2200      	movs	r2, #0
     c6a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     c6c:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     c70:	2300      	movs	r3, #0
     c72:	9301      	str	r3, [sp, #4]
     c74:	e00c      	b.n	c90 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     c76:	9b01      	ldr	r3, [sp, #4]
     c78:	f1c3 030f 	rsb	r3, r3, #15
     c7c:	4a0d      	ldr	r2, [pc, #52]	; (cb4 <_DoInit+0xb0>)
     c7e:	5cd1      	ldrb	r1, [r2, r3]
     c80:	9a00      	ldr	r2, [sp, #0]
     c82:	9b01      	ldr	r3, [sp, #4]
     c84:	4413      	add	r3, r2
     c86:	460a      	mov	r2, r1
     c88:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     c8a:	9b01      	ldr	r3, [sp, #4]
     c8c:	3301      	adds	r3, #1
     c8e:	9301      	str	r3, [sp, #4]
     c90:	9b01      	ldr	r3, [sp, #4]
     c92:	2b0f      	cmp	r3, #15
     c94:	d9ef      	bls.n	c76 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     c96:	f3bf 8f5f 	dmb	sy
}
     c9a:	bf00      	nop
     c9c:	b003      	add	sp, #12
     c9e:	f85d fb04 	ldr.w	pc, [sp], #4
     ca2:	bf00      	nop
     ca4:	1fff8f40 	.word	0x1fff8f40
     ca8:	0000a608 	.word	0x0000a608
     cac:	1fff8fe8 	.word	0x1fff8fe8
     cb0:	1fff93e8 	.word	0x1fff93e8
     cb4:	0000b5e8 	.word	0x0000b5e8

00000cb8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     cb8:	b500      	push	{lr}
     cba:	b08b      	sub	sp, #44	; 0x2c
     cbc:	9003      	str	r0, [sp, #12]
     cbe:	9102      	str	r1, [sp, #8]
     cc0:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     cc2:	2300      	movs	r3, #0
     cc4:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     cc6:	9b03      	ldr	r3, [sp, #12]
     cc8:	68db      	ldr	r3, [r3, #12]
     cca:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     ccc:	9b03      	ldr	r3, [sp, #12]
     cce:	691b      	ldr	r3, [r3, #16]
     cd0:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     cd2:	9a06      	ldr	r2, [sp, #24]
     cd4:	9b07      	ldr	r3, [sp, #28]
     cd6:	429a      	cmp	r2, r3
     cd8:	d905      	bls.n	ce6 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     cda:	9a06      	ldr	r2, [sp, #24]
     cdc:	9b07      	ldr	r3, [sp, #28]
     cde:	1ad3      	subs	r3, r2, r3
     ce0:	3b01      	subs	r3, #1
     ce2:	9309      	str	r3, [sp, #36]	; 0x24
     ce4:	e007      	b.n	cf6 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     ce6:	9b03      	ldr	r3, [sp, #12]
     ce8:	689a      	ldr	r2, [r3, #8]
     cea:	9906      	ldr	r1, [sp, #24]
     cec:	9b07      	ldr	r3, [sp, #28]
     cee:	1acb      	subs	r3, r1, r3
     cf0:	4413      	add	r3, r2
     cf2:	3b01      	subs	r3, #1
     cf4:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     cf6:	9b03      	ldr	r3, [sp, #12]
     cf8:	689a      	ldr	r2, [r3, #8]
     cfa:	9b07      	ldr	r3, [sp, #28]
     cfc:	1ad3      	subs	r3, r2, r3
     cfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d00:	4293      	cmp	r3, r2
     d02:	bf28      	it	cs
     d04:	4613      	movcs	r3, r2
     d06:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d0a:	9b01      	ldr	r3, [sp, #4]
     d0c:	4293      	cmp	r3, r2
     d0e:	bf28      	it	cs
     d10:	4613      	movcs	r3, r2
     d12:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d14:	9b03      	ldr	r3, [sp, #12]
     d16:	685a      	ldr	r2, [r3, #4]
     d18:	9b07      	ldr	r3, [sp, #28]
     d1a:	4413      	add	r3, r2
     d1c:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d20:	9902      	ldr	r1, [sp, #8]
     d22:	9805      	ldr	r0, [sp, #20]
     d24:	f000 fc7c 	bl	1620 <memcpy>
    NumBytesWritten += NumBytesToWrite;
     d28:	9a08      	ldr	r2, [sp, #32]
     d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d2c:	4413      	add	r3, r2
     d2e:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     d30:	9a02      	ldr	r2, [sp, #8]
     d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d34:	4413      	add	r3, r2
     d36:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     d38:	9a01      	ldr	r2, [sp, #4]
     d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d3c:	1ad3      	subs	r3, r2, r3
     d3e:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     d40:	9a07      	ldr	r2, [sp, #28]
     d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d44:	4413      	add	r3, r2
     d46:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     d48:	9b03      	ldr	r3, [sp, #12]
     d4a:	689b      	ldr	r3, [r3, #8]
     d4c:	9a07      	ldr	r2, [sp, #28]
     d4e:	429a      	cmp	r2, r3
     d50:	d101      	bne.n	d56 <_WriteBlocking+0x9e>
      WrOff = 0u;
     d52:	2300      	movs	r3, #0
     d54:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d56:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     d5a:	9b03      	ldr	r3, [sp, #12]
     d5c:	9a07      	ldr	r2, [sp, #28]
     d5e:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     d60:	9b01      	ldr	r3, [sp, #4]
     d62:	2b00      	cmp	r3, #0
     d64:	d1b2      	bne.n	ccc <_WriteBlocking+0x14>
  return NumBytesWritten;
     d66:	9b08      	ldr	r3, [sp, #32]
}
     d68:	4618      	mov	r0, r3
     d6a:	b00b      	add	sp, #44	; 0x2c
     d6c:	f85d fb04 	ldr.w	pc, [sp], #4

00000d70 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     d70:	b500      	push	{lr}
     d72:	b089      	sub	sp, #36	; 0x24
     d74:	9003      	str	r0, [sp, #12]
     d76:	9102      	str	r1, [sp, #8]
     d78:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     d7a:	9b03      	ldr	r3, [sp, #12]
     d7c:	68db      	ldr	r3, [r3, #12]
     d7e:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     d80:	9b03      	ldr	r3, [sp, #12]
     d82:	689a      	ldr	r2, [r3, #8]
     d84:	9b07      	ldr	r3, [sp, #28]
     d86:	1ad3      	subs	r3, r2, r3
     d88:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     d8a:	9a06      	ldr	r2, [sp, #24]
     d8c:	9b01      	ldr	r3, [sp, #4]
     d8e:	429a      	cmp	r2, r3
     d90:	d911      	bls.n	db6 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d92:	9b03      	ldr	r3, [sp, #12]
     d94:	685a      	ldr	r2, [r3, #4]
     d96:	9b07      	ldr	r3, [sp, #28]
     d98:	4413      	add	r3, r2
     d9a:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     d9c:	9a01      	ldr	r2, [sp, #4]
     d9e:	9902      	ldr	r1, [sp, #8]
     da0:	9804      	ldr	r0, [sp, #16]
     da2:	f000 fc3d 	bl	1620 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     da6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     daa:	9a07      	ldr	r2, [sp, #28]
     dac:	9b01      	ldr	r3, [sp, #4]
     dae:	441a      	add	r2, r3
     db0:	9b03      	ldr	r3, [sp, #12]
     db2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     db4:	e01f      	b.n	df6 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     db6:	9b06      	ldr	r3, [sp, #24]
     db8:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     dba:	9b03      	ldr	r3, [sp, #12]
     dbc:	685a      	ldr	r2, [r3, #4]
     dbe:	9b07      	ldr	r3, [sp, #28]
     dc0:	4413      	add	r3, r2
     dc2:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     dc4:	9a05      	ldr	r2, [sp, #20]
     dc6:	9902      	ldr	r1, [sp, #8]
     dc8:	9804      	ldr	r0, [sp, #16]
     dca:	f000 fc29 	bl	1620 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     dce:	9a01      	ldr	r2, [sp, #4]
     dd0:	9b06      	ldr	r3, [sp, #24]
     dd2:	1ad3      	subs	r3, r2, r3
     dd4:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     dd6:	9b03      	ldr	r3, [sp, #12]
     dd8:	685b      	ldr	r3, [r3, #4]
     dda:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     ddc:	9a02      	ldr	r2, [sp, #8]
     dde:	9b06      	ldr	r3, [sp, #24]
     de0:	4413      	add	r3, r2
     de2:	9a05      	ldr	r2, [sp, #20]
     de4:	4619      	mov	r1, r3
     de6:	9804      	ldr	r0, [sp, #16]
     de8:	f000 fc1a 	bl	1620 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     dec:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     df0:	9b03      	ldr	r3, [sp, #12]
     df2:	9a05      	ldr	r2, [sp, #20]
     df4:	60da      	str	r2, [r3, #12]
}
     df6:	bf00      	nop
     df8:	b009      	add	sp, #36	; 0x24
     dfa:	f85d fb04 	ldr.w	pc, [sp], #4

00000dfe <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     dfe:	b086      	sub	sp, #24
     e00:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     e02:	9b01      	ldr	r3, [sp, #4]
     e04:	691b      	ldr	r3, [r3, #16]
     e06:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     e08:	9b01      	ldr	r3, [sp, #4]
     e0a:	68db      	ldr	r3, [r3, #12]
     e0c:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     e0e:	9a04      	ldr	r2, [sp, #16]
     e10:	9b03      	ldr	r3, [sp, #12]
     e12:	429a      	cmp	r2, r3
     e14:	d808      	bhi.n	e28 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     e16:	9b01      	ldr	r3, [sp, #4]
     e18:	689a      	ldr	r2, [r3, #8]
     e1a:	9b03      	ldr	r3, [sp, #12]
     e1c:	1ad2      	subs	r2, r2, r3
     e1e:	9b04      	ldr	r3, [sp, #16]
     e20:	4413      	add	r3, r2
     e22:	3b01      	subs	r3, #1
     e24:	9305      	str	r3, [sp, #20]
     e26:	e004      	b.n	e32 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     e28:	9a04      	ldr	r2, [sp, #16]
     e2a:	9b03      	ldr	r3, [sp, #12]
     e2c:	1ad3      	subs	r3, r2, r3
     e2e:	3b01      	subs	r3, #1
     e30:	9305      	str	r3, [sp, #20]
  }
  return r;
     e32:	9b05      	ldr	r3, [sp, #20]
}
     e34:	4618      	mov	r0, r3
     e36:	b006      	add	sp, #24
     e38:	4770      	bx	lr
	...

00000e3c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     e3c:	b500      	push	{lr}
     e3e:	b089      	sub	sp, #36	; 0x24
     e40:	9003      	str	r0, [sp, #12]
     e42:	9102      	str	r1, [sp, #8]
     e44:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     e46:	9b02      	ldr	r3, [sp, #8]
     e48:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     e4a:	9b03      	ldr	r3, [sp, #12]
     e4c:	1c5a      	adds	r2, r3, #1
     e4e:	4613      	mov	r3, r2
     e50:	005b      	lsls	r3, r3, #1
     e52:	4413      	add	r3, r2
     e54:	00db      	lsls	r3, r3, #3
     e56:	4a20      	ldr	r2, [pc, #128]	; (ed8 <SEGGER_RTT_WriteNoLock+0x9c>)
     e58:	4413      	add	r3, r2
     e5a:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     e5c:	9b05      	ldr	r3, [sp, #20]
     e5e:	695b      	ldr	r3, [r3, #20]
     e60:	2b02      	cmp	r3, #2
     e62:	d029      	beq.n	eb8 <SEGGER_RTT_WriteNoLock+0x7c>
     e64:	2b02      	cmp	r3, #2
     e66:	d82e      	bhi.n	ec6 <SEGGER_RTT_WriteNoLock+0x8a>
     e68:	2b00      	cmp	r3, #0
     e6a:	d002      	beq.n	e72 <SEGGER_RTT_WriteNoLock+0x36>
     e6c:	2b01      	cmp	r3, #1
     e6e:	d013      	beq.n	e98 <SEGGER_RTT_WriteNoLock+0x5c>
     e70:	e029      	b.n	ec6 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     e72:	9805      	ldr	r0, [sp, #20]
     e74:	f7ff ffc3 	bl	dfe <_GetAvailWriteSpace>
     e78:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     e7a:	9a04      	ldr	r2, [sp, #16]
     e7c:	9b01      	ldr	r3, [sp, #4]
     e7e:	429a      	cmp	r2, r3
     e80:	d202      	bcs.n	e88 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     e82:	2300      	movs	r3, #0
     e84:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     e86:	e021      	b.n	ecc <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     e88:	9b01      	ldr	r3, [sp, #4]
     e8a:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     e8c:	9a01      	ldr	r2, [sp, #4]
     e8e:	9906      	ldr	r1, [sp, #24]
     e90:	9805      	ldr	r0, [sp, #20]
     e92:	f7ff ff6d 	bl	d70 <_WriteNoCheck>
    break;
     e96:	e019      	b.n	ecc <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     e98:	9805      	ldr	r0, [sp, #20]
     e9a:	f7ff ffb0 	bl	dfe <_GetAvailWriteSpace>
     e9e:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     ea0:	9a01      	ldr	r2, [sp, #4]
     ea2:	9b04      	ldr	r3, [sp, #16]
     ea4:	4293      	cmp	r3, r2
     ea6:	bf28      	it	cs
     ea8:	4613      	movcs	r3, r2
     eaa:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     eac:	9a07      	ldr	r2, [sp, #28]
     eae:	9906      	ldr	r1, [sp, #24]
     eb0:	9805      	ldr	r0, [sp, #20]
     eb2:	f7ff ff5d 	bl	d70 <_WriteNoCheck>
    break;
     eb6:	e009      	b.n	ecc <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     eb8:	9a01      	ldr	r2, [sp, #4]
     eba:	9906      	ldr	r1, [sp, #24]
     ebc:	9805      	ldr	r0, [sp, #20]
     ebe:	f7ff fefb 	bl	cb8 <_WriteBlocking>
     ec2:	9007      	str	r0, [sp, #28]
    break;
     ec4:	e002      	b.n	ecc <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     ec6:	2300      	movs	r3, #0
     ec8:	9307      	str	r3, [sp, #28]
    break;
     eca:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     ecc:	9b07      	ldr	r3, [sp, #28]
}
     ece:	4618      	mov	r0, r3
     ed0:	b009      	add	sp, #36	; 0x24
     ed2:	f85d fb04 	ldr.w	pc, [sp], #4
     ed6:	bf00      	nop
     ed8:	1fff8f40 	.word	0x1fff8f40

00000edc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     edc:	b500      	push	{lr}
     ede:	b089      	sub	sp, #36	; 0x24
     ee0:	9003      	str	r0, [sp, #12]
     ee2:	9102      	str	r1, [sp, #8]
     ee4:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     ee6:	4b0f      	ldr	r3, [pc, #60]	; (f24 <SEGGER_RTT_Write+0x48>)
     ee8:	9307      	str	r3, [sp, #28]
     eea:	9b07      	ldr	r3, [sp, #28]
     eec:	781b      	ldrb	r3, [r3, #0]
     eee:	b2db      	uxtb	r3, r3
     ef0:	2b53      	cmp	r3, #83	; 0x53
     ef2:	d001      	beq.n	ef8 <SEGGER_RTT_Write+0x1c>
     ef4:	f7ff fe86 	bl	c04 <_DoInit>
  SEGGER_RTT_LOCK();
     ef8:	f3ef 8311 	mrs	r3, BASEPRI
     efc:	f04f 0120 	mov.w	r1, #32
     f00:	f381 8811 	msr	BASEPRI, r1
     f04:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     f06:	9a01      	ldr	r2, [sp, #4]
     f08:	9902      	ldr	r1, [sp, #8]
     f0a:	9803      	ldr	r0, [sp, #12]
     f0c:	f7ff ff96 	bl	e3c <SEGGER_RTT_WriteNoLock>
     f10:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     f12:	9b06      	ldr	r3, [sp, #24]
     f14:	f383 8811 	msr	BASEPRI, r3
  return Status;
     f18:	9b05      	ldr	r3, [sp, #20]
}
     f1a:	4618      	mov	r0, r3
     f1c:	b009      	add	sp, #36	; 0x24
     f1e:	f85d fb04 	ldr.w	pc, [sp], #4
     f22:	bf00      	nop
     f24:	1fff8f40 	.word	0x1fff8f40

00000f28 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
     f28:	b508      	push	{r3, lr}
  _DoInit();
     f2a:	f7ff fe6b 	bl	c04 <_DoInit>
}
     f2e:	bf00      	nop
     f30:	bd08      	pop	{r3, pc}

00000f32 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     f32:	b500      	push	{lr}
     f34:	b085      	sub	sp, #20
     f36:	9001      	str	r0, [sp, #4]
     f38:	460b      	mov	r3, r1
     f3a:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
     f3e:	9b01      	ldr	r3, [sp, #4]
     f40:	689b      	ldr	r3, [r3, #8]
     f42:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
     f44:	9b03      	ldr	r3, [sp, #12]
     f46:	1c5a      	adds	r2, r3, #1
     f48:	9b01      	ldr	r3, [sp, #4]
     f4a:	685b      	ldr	r3, [r3, #4]
     f4c:	429a      	cmp	r2, r3
     f4e:	d80f      	bhi.n	f70 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
     f50:	9b01      	ldr	r3, [sp, #4]
     f52:	681a      	ldr	r2, [r3, #0]
     f54:	9b03      	ldr	r3, [sp, #12]
     f56:	4413      	add	r3, r2
     f58:	f89d 2003 	ldrb.w	r2, [sp, #3]
     f5c:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
     f5e:	9b03      	ldr	r3, [sp, #12]
     f60:	1c5a      	adds	r2, r3, #1
     f62:	9b01      	ldr	r3, [sp, #4]
     f64:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
     f66:	9b01      	ldr	r3, [sp, #4]
     f68:	68db      	ldr	r3, [r3, #12]
     f6a:	1c5a      	adds	r2, r3, #1
     f6c:	9b01      	ldr	r3, [sp, #4]
     f6e:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
     f70:	9b01      	ldr	r3, [sp, #4]
     f72:	689a      	ldr	r2, [r3, #8]
     f74:	9b01      	ldr	r3, [sp, #4]
     f76:	685b      	ldr	r3, [r3, #4]
     f78:	429a      	cmp	r2, r3
     f7a:	d115      	bne.n	fa8 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
     f7c:	9b01      	ldr	r3, [sp, #4]
     f7e:	6918      	ldr	r0, [r3, #16]
     f80:	9b01      	ldr	r3, [sp, #4]
     f82:	6819      	ldr	r1, [r3, #0]
     f84:	9b01      	ldr	r3, [sp, #4]
     f86:	689b      	ldr	r3, [r3, #8]
     f88:	461a      	mov	r2, r3
     f8a:	f7ff ffa7 	bl	edc <SEGGER_RTT_Write>
     f8e:	4602      	mov	r2, r0
     f90:	9b01      	ldr	r3, [sp, #4]
     f92:	689b      	ldr	r3, [r3, #8]
     f94:	429a      	cmp	r2, r3
     f96:	d004      	beq.n	fa2 <_StoreChar+0x70>
      p->ReturnValue = -1;
     f98:	9b01      	ldr	r3, [sp, #4]
     f9a:	f04f 32ff 	mov.w	r2, #4294967295
     f9e:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
     fa0:	e002      	b.n	fa8 <_StoreChar+0x76>
      p->Cnt = 0u;
     fa2:	9b01      	ldr	r3, [sp, #4]
     fa4:	2200      	movs	r2, #0
     fa6:	609a      	str	r2, [r3, #8]
}
     fa8:	bf00      	nop
     faa:	b005      	add	sp, #20
     fac:	f85d fb04 	ldr.w	pc, [sp], #4

00000fb0 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
     fb0:	b500      	push	{lr}
     fb2:	b08b      	sub	sp, #44	; 0x2c
     fb4:	9003      	str	r0, [sp, #12]
     fb6:	9102      	str	r1, [sp, #8]
     fb8:	9201      	str	r2, [sp, #4]
     fba:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
     fbc:	9b02      	ldr	r3, [sp, #8]
     fbe:	9308      	str	r3, [sp, #32]
  Digit = 1u;
     fc0:	2301      	movs	r3, #1
     fc2:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
     fc4:	2301      	movs	r3, #1
     fc6:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     fc8:	e007      	b.n	fda <_PrintUnsigned+0x2a>
    Number = (Number / Base);
     fca:	9a08      	ldr	r2, [sp, #32]
     fcc:	9b01      	ldr	r3, [sp, #4]
     fce:	fbb2 f3f3 	udiv	r3, r2, r3
     fd2:	9308      	str	r3, [sp, #32]
    Width++;
     fd4:	9b07      	ldr	r3, [sp, #28]
     fd6:	3301      	adds	r3, #1
     fd8:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     fda:	9a08      	ldr	r2, [sp, #32]
     fdc:	9b01      	ldr	r3, [sp, #4]
     fde:	429a      	cmp	r2, r3
     fe0:	d2f3      	bcs.n	fca <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
     fe2:	9a00      	ldr	r2, [sp, #0]
     fe4:	9b07      	ldr	r3, [sp, #28]
     fe6:	429a      	cmp	r2, r3
     fe8:	d901      	bls.n	fee <_PrintUnsigned+0x3e>
    Width = NumDigits;
     fea:	9b00      	ldr	r3, [sp, #0]
     fec:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
     fee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     ff0:	f003 0301 	and.w	r3, r3, #1
     ff4:	2b00      	cmp	r3, #0
     ff6:	d128      	bne.n	104a <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
     ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     ffa:	2b00      	cmp	r3, #0
     ffc:	d025      	beq.n	104a <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
     ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1000:	f003 0302 	and.w	r3, r3, #2
    1004:	2b00      	cmp	r3, #0
    1006:	d006      	beq.n	1016 <_PrintUnsigned+0x66>
    1008:	9b00      	ldr	r3, [sp, #0]
    100a:	2b00      	cmp	r3, #0
    100c:	d103      	bne.n	1016 <_PrintUnsigned+0x66>
        c = '0';
    100e:	2330      	movs	r3, #48	; 0x30
    1010:	f88d 301b 	strb.w	r3, [sp, #27]
    1014:	e002      	b.n	101c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1016:	2320      	movs	r3, #32
    1018:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    101c:	e00c      	b.n	1038 <_PrintUnsigned+0x88>
        FieldWidth--;
    101e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1020:	3b01      	subs	r3, #1
    1022:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1024:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1028:	4619      	mov	r1, r3
    102a:	9803      	ldr	r0, [sp, #12]
    102c:	f7ff ff81 	bl	f32 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1030:	9b03      	ldr	r3, [sp, #12]
    1032:	68db      	ldr	r3, [r3, #12]
    1034:	2b00      	cmp	r3, #0
    1036:	db07      	blt.n	1048 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    103a:	2b00      	cmp	r3, #0
    103c:	d005      	beq.n	104a <_PrintUnsigned+0x9a>
    103e:	9a07      	ldr	r2, [sp, #28]
    1040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1042:	429a      	cmp	r2, r3
    1044:	d3eb      	bcc.n	101e <_PrintUnsigned+0x6e>
    1046:	e000      	b.n	104a <_PrintUnsigned+0x9a>
          break;
    1048:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    104a:	9b03      	ldr	r3, [sp, #12]
    104c:	68db      	ldr	r3, [r3, #12]
    104e:	2b00      	cmp	r3, #0
    1050:	db55      	blt.n	10fe <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1052:	9b00      	ldr	r3, [sp, #0]
    1054:	2b01      	cmp	r3, #1
    1056:	d903      	bls.n	1060 <_PrintUnsigned+0xb0>
        NumDigits--;
    1058:	9b00      	ldr	r3, [sp, #0]
    105a:	3b01      	subs	r3, #1
    105c:	9300      	str	r3, [sp, #0]
    105e:	e009      	b.n	1074 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1060:	9a02      	ldr	r2, [sp, #8]
    1062:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1064:	fbb2 f3f3 	udiv	r3, r2, r3
    1068:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    106a:	9a05      	ldr	r2, [sp, #20]
    106c:	9b01      	ldr	r3, [sp, #4]
    106e:	429a      	cmp	r2, r3
    1070:	d200      	bcs.n	1074 <_PrintUnsigned+0xc4>
          break;
    1072:	e005      	b.n	1080 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1074:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1076:	9a01      	ldr	r2, [sp, #4]
    1078:	fb02 f303 	mul.w	r3, r2, r3
    107c:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    107e:	e7e8      	b.n	1052 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1080:	9a02      	ldr	r2, [sp, #8]
    1082:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1084:	fbb2 f3f3 	udiv	r3, r2, r3
    1088:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    108a:	9b05      	ldr	r3, [sp, #20]
    108c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    108e:	fb02 f303 	mul.w	r3, r2, r3
    1092:	9a02      	ldr	r2, [sp, #8]
    1094:	1ad3      	subs	r3, r2, r3
    1096:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1098:	4a1b      	ldr	r2, [pc, #108]	; (1108 <_PrintUnsigned+0x158>)
    109a:	9b05      	ldr	r3, [sp, #20]
    109c:	4413      	add	r3, r2
    109e:	781b      	ldrb	r3, [r3, #0]
    10a0:	4619      	mov	r1, r3
    10a2:	9803      	ldr	r0, [sp, #12]
    10a4:	f7ff ff45 	bl	f32 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    10a8:	9b03      	ldr	r3, [sp, #12]
    10aa:	68db      	ldr	r3, [r3, #12]
    10ac:	2b00      	cmp	r3, #0
    10ae:	db08      	blt.n	10c2 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    10b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10b2:	9b01      	ldr	r3, [sp, #4]
    10b4:	fbb2 f3f3 	udiv	r3, r2, r3
    10b8:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    10ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10bc:	2b00      	cmp	r3, #0
    10be:	d1df      	bne.n	1080 <_PrintUnsigned+0xd0>
    10c0:	e000      	b.n	10c4 <_PrintUnsigned+0x114>
        break;
    10c2:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    10c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    10c6:	f003 0301 	and.w	r3, r3, #1
    10ca:	2b00      	cmp	r3, #0
    10cc:	d017      	beq.n	10fe <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    10ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10d0:	2b00      	cmp	r3, #0
    10d2:	d014      	beq.n	10fe <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    10d4:	e00a      	b.n	10ec <_PrintUnsigned+0x13c>
          FieldWidth--;
    10d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10d8:	3b01      	subs	r3, #1
    10da:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    10dc:	2120      	movs	r1, #32
    10de:	9803      	ldr	r0, [sp, #12]
    10e0:	f7ff ff27 	bl	f32 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    10e4:	9b03      	ldr	r3, [sp, #12]
    10e6:	68db      	ldr	r3, [r3, #12]
    10e8:	2b00      	cmp	r3, #0
    10ea:	db07      	blt.n	10fc <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    10ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10ee:	2b00      	cmp	r3, #0
    10f0:	d005      	beq.n	10fe <_PrintUnsigned+0x14e>
    10f2:	9a07      	ldr	r2, [sp, #28]
    10f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10f6:	429a      	cmp	r2, r3
    10f8:	d3ed      	bcc.n	10d6 <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    10fa:	e000      	b.n	10fe <_PrintUnsigned+0x14e>
            break;
    10fc:	bf00      	nop
}
    10fe:	bf00      	nop
    1100:	b00b      	add	sp, #44	; 0x2c
    1102:	f85d fb04 	ldr.w	pc, [sp], #4
    1106:	bf00      	nop
    1108:	0000b5fc 	.word	0x0000b5fc

0000110c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    110c:	b500      	push	{lr}
    110e:	b089      	sub	sp, #36	; 0x24
    1110:	9005      	str	r0, [sp, #20]
    1112:	9104      	str	r1, [sp, #16]
    1114:	9203      	str	r2, [sp, #12]
    1116:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1118:	9b04      	ldr	r3, [sp, #16]
    111a:	2b00      	cmp	r3, #0
    111c:	bfb8      	it	lt
    111e:	425b      	neglt	r3, r3
    1120:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1122:	2301      	movs	r3, #1
    1124:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1126:	e007      	b.n	1138 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1128:	9b03      	ldr	r3, [sp, #12]
    112a:	9a06      	ldr	r2, [sp, #24]
    112c:	fb92 f3f3 	sdiv	r3, r2, r3
    1130:	9306      	str	r3, [sp, #24]
    Width++;
    1132:	9b07      	ldr	r3, [sp, #28]
    1134:	3301      	adds	r3, #1
    1136:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1138:	9b03      	ldr	r3, [sp, #12]
    113a:	9a06      	ldr	r2, [sp, #24]
    113c:	429a      	cmp	r2, r3
    113e:	daf3      	bge.n	1128 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1140:	9a02      	ldr	r2, [sp, #8]
    1142:	9b07      	ldr	r3, [sp, #28]
    1144:	429a      	cmp	r2, r3
    1146:	d901      	bls.n	114c <_PrintInt+0x40>
    Width = NumDigits;
    1148:	9b02      	ldr	r3, [sp, #8]
    114a:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    114c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    114e:	2b00      	cmp	r3, #0
    1150:	d00a      	beq.n	1168 <_PrintInt+0x5c>
    1152:	9b04      	ldr	r3, [sp, #16]
    1154:	2b00      	cmp	r3, #0
    1156:	db04      	blt.n	1162 <_PrintInt+0x56>
    1158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    115a:	f003 0304 	and.w	r3, r3, #4
    115e:	2b00      	cmp	r3, #0
    1160:	d002      	beq.n	1168 <_PrintInt+0x5c>
    FieldWidth--;
    1162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1164:	3b01      	subs	r3, #1
    1166:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    116a:	f003 0302 	and.w	r3, r3, #2
    116e:	2b00      	cmp	r3, #0
    1170:	d002      	beq.n	1178 <_PrintInt+0x6c>
    1172:	9b02      	ldr	r3, [sp, #8]
    1174:	2b00      	cmp	r3, #0
    1176:	d01c      	beq.n	11b2 <_PrintInt+0xa6>
    1178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    117a:	f003 0301 	and.w	r3, r3, #1
    117e:	2b00      	cmp	r3, #0
    1180:	d117      	bne.n	11b2 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    1182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1184:	2b00      	cmp	r3, #0
    1186:	d014      	beq.n	11b2 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1188:	e00a      	b.n	11a0 <_PrintInt+0x94>
        FieldWidth--;
    118a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    118c:	3b01      	subs	r3, #1
    118e:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1190:	2120      	movs	r1, #32
    1192:	9805      	ldr	r0, [sp, #20]
    1194:	f7ff fecd 	bl	f32 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1198:	9b05      	ldr	r3, [sp, #20]
    119a:	68db      	ldr	r3, [r3, #12]
    119c:	2b00      	cmp	r3, #0
    119e:	db07      	blt.n	11b0 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11a2:	2b00      	cmp	r3, #0
    11a4:	d005      	beq.n	11b2 <_PrintInt+0xa6>
    11a6:	9a07      	ldr	r2, [sp, #28]
    11a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11aa:	429a      	cmp	r2, r3
    11ac:	d3ed      	bcc.n	118a <_PrintInt+0x7e>
    11ae:	e000      	b.n	11b2 <_PrintInt+0xa6>
          break;
    11b0:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    11b2:	9b05      	ldr	r3, [sp, #20]
    11b4:	68db      	ldr	r3, [r3, #12]
    11b6:	2b00      	cmp	r3, #0
    11b8:	db4a      	blt.n	1250 <_PrintInt+0x144>
    if (v < 0) {
    11ba:	9b04      	ldr	r3, [sp, #16]
    11bc:	2b00      	cmp	r3, #0
    11be:	da07      	bge.n	11d0 <_PrintInt+0xc4>
      v = -v;
    11c0:	9b04      	ldr	r3, [sp, #16]
    11c2:	425b      	negs	r3, r3
    11c4:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    11c6:	212d      	movs	r1, #45	; 0x2d
    11c8:	9805      	ldr	r0, [sp, #20]
    11ca:	f7ff feb2 	bl	f32 <_StoreChar>
    11ce:	e008      	b.n	11e2 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    11d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11d2:	f003 0304 	and.w	r3, r3, #4
    11d6:	2b00      	cmp	r3, #0
    11d8:	d003      	beq.n	11e2 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    11da:	212b      	movs	r1, #43	; 0x2b
    11dc:	9805      	ldr	r0, [sp, #20]
    11de:	f7ff fea8 	bl	f32 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    11e2:	9b05      	ldr	r3, [sp, #20]
    11e4:	68db      	ldr	r3, [r3, #12]
    11e6:	2b00      	cmp	r3, #0
    11e8:	db32      	blt.n	1250 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    11ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11ec:	f003 0302 	and.w	r3, r3, #2
    11f0:	2b00      	cmp	r3, #0
    11f2:	d01f      	beq.n	1234 <_PrintInt+0x128>
    11f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11f6:	f003 0301 	and.w	r3, r3, #1
    11fa:	2b00      	cmp	r3, #0
    11fc:	d11a      	bne.n	1234 <_PrintInt+0x128>
    11fe:	9b02      	ldr	r3, [sp, #8]
    1200:	2b00      	cmp	r3, #0
    1202:	d117      	bne.n	1234 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1206:	2b00      	cmp	r3, #0
    1208:	d014      	beq.n	1234 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    120a:	e00a      	b.n	1222 <_PrintInt+0x116>
            FieldWidth--;
    120c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    120e:	3b01      	subs	r3, #1
    1210:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1212:	2130      	movs	r1, #48	; 0x30
    1214:	9805      	ldr	r0, [sp, #20]
    1216:	f7ff fe8c 	bl	f32 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    121a:	9b05      	ldr	r3, [sp, #20]
    121c:	68db      	ldr	r3, [r3, #12]
    121e:	2b00      	cmp	r3, #0
    1220:	db07      	blt.n	1232 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1224:	2b00      	cmp	r3, #0
    1226:	d005      	beq.n	1234 <_PrintInt+0x128>
    1228:	9a07      	ldr	r2, [sp, #28]
    122a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    122c:	429a      	cmp	r2, r3
    122e:	d3ed      	bcc.n	120c <_PrintInt+0x100>
    1230:	e000      	b.n	1234 <_PrintInt+0x128>
              break;
    1232:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1234:	9b05      	ldr	r3, [sp, #20]
    1236:	68db      	ldr	r3, [r3, #12]
    1238:	2b00      	cmp	r3, #0
    123a:	db09      	blt.n	1250 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    123c:	9904      	ldr	r1, [sp, #16]
    123e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1240:	9301      	str	r3, [sp, #4]
    1242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1244:	9300      	str	r3, [sp, #0]
    1246:	9b02      	ldr	r3, [sp, #8]
    1248:	9a03      	ldr	r2, [sp, #12]
    124a:	9805      	ldr	r0, [sp, #20]
    124c:	f7ff feb0 	bl	fb0 <_PrintUnsigned>
      }
    }
  }
}
    1250:	bf00      	nop
    1252:	b009      	add	sp, #36	; 0x24
    1254:	f85d fb04 	ldr.w	pc, [sp], #4

00001258 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1258:	b500      	push	{lr}
    125a:	b0a3      	sub	sp, #140	; 0x8c
    125c:	9005      	str	r0, [sp, #20]
    125e:	9104      	str	r1, [sp, #16]
    1260:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    1262:	ab06      	add	r3, sp, #24
    1264:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    1266:	2340      	movs	r3, #64	; 0x40
    1268:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    126a:	2300      	movs	r3, #0
    126c:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    126e:	9b05      	ldr	r3, [sp, #20]
    1270:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    1272:	2300      	movs	r3, #0
    1274:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    1276:	9b04      	ldr	r3, [sp, #16]
    1278:	781b      	ldrb	r3, [r3, #0]
    127a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    127e:	9b04      	ldr	r3, [sp, #16]
    1280:	3301      	adds	r3, #1
    1282:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    1284:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1288:	2b00      	cmp	r3, #0
    128a:	f000 819c 	beq.w	15c6 <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    128e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1292:	2b25      	cmp	r3, #37	; 0x25
    1294:	f040 818b 	bne.w	15ae <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1298:	2300      	movs	r3, #0
    129a:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    129c:	2301      	movs	r3, #1
    129e:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    12a0:	9b04      	ldr	r3, [sp, #16]
    12a2:	781b      	ldrb	r3, [r3, #0]
    12a4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    12a8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12ac:	3b23      	subs	r3, #35	; 0x23
    12ae:	2b0d      	cmp	r3, #13
    12b0:	d83e      	bhi.n	1330 <SEGGER_RTT_vprintf+0xd8>
    12b2:	a201      	add	r2, pc, #4	; (adr r2, 12b8 <SEGGER_RTT_vprintf+0x60>)
    12b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    12b8:	00001321 	.word	0x00001321
    12bc:	00001331 	.word	0x00001331
    12c0:	00001331 	.word	0x00001331
    12c4:	00001331 	.word	0x00001331
    12c8:	00001331 	.word	0x00001331
    12cc:	00001331 	.word	0x00001331
    12d0:	00001331 	.word	0x00001331
    12d4:	00001331 	.word	0x00001331
    12d8:	00001311 	.word	0x00001311
    12dc:	00001331 	.word	0x00001331
    12e0:	000012f1 	.word	0x000012f1
    12e4:	00001331 	.word	0x00001331
    12e8:	00001331 	.word	0x00001331
    12ec:	00001301 	.word	0x00001301
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    12f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    12f2:	f043 0301 	orr.w	r3, r3, #1
    12f6:	931e      	str	r3, [sp, #120]	; 0x78
    12f8:	9b04      	ldr	r3, [sp, #16]
    12fa:	3301      	adds	r3, #1
    12fc:	9304      	str	r3, [sp, #16]
    12fe:	e01a      	b.n	1336 <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1300:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1302:	f043 0302 	orr.w	r3, r3, #2
    1306:	931e      	str	r3, [sp, #120]	; 0x78
    1308:	9b04      	ldr	r3, [sp, #16]
    130a:	3301      	adds	r3, #1
    130c:	9304      	str	r3, [sp, #16]
    130e:	e012      	b.n	1336 <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1310:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1312:	f043 0304 	orr.w	r3, r3, #4
    1316:	931e      	str	r3, [sp, #120]	; 0x78
    1318:	9b04      	ldr	r3, [sp, #16]
    131a:	3301      	adds	r3, #1
    131c:	9304      	str	r3, [sp, #16]
    131e:	e00a      	b.n	1336 <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1320:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1322:	f043 0308 	orr.w	r3, r3, #8
    1326:	931e      	str	r3, [sp, #120]	; 0x78
    1328:	9b04      	ldr	r3, [sp, #16]
    132a:	3301      	adds	r3, #1
    132c:	9304      	str	r3, [sp, #16]
    132e:	e002      	b.n	1336 <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1330:	2300      	movs	r3, #0
    1332:	9320      	str	r3, [sp, #128]	; 0x80
    1334:	bf00      	nop
        }
      } while (v);
    1336:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1338:	2b00      	cmp	r3, #0
    133a:	d1b1      	bne.n	12a0 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    133c:	2300      	movs	r3, #0
    133e:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1340:	9b04      	ldr	r3, [sp, #16]
    1342:	781b      	ldrb	r3, [r3, #0]
    1344:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1348:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    134c:	2b2f      	cmp	r3, #47	; 0x2f
    134e:	d912      	bls.n	1376 <SEGGER_RTT_vprintf+0x11e>
    1350:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1354:	2b39      	cmp	r3, #57	; 0x39
    1356:	d80e      	bhi.n	1376 <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1358:	9b04      	ldr	r3, [sp, #16]
    135a:	3301      	adds	r3, #1
    135c:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    135e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1360:	4613      	mov	r3, r2
    1362:	009b      	lsls	r3, r3, #2
    1364:	4413      	add	r3, r2
    1366:	005b      	lsls	r3, r3, #1
    1368:	461a      	mov	r2, r3
    136a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    136e:	4413      	add	r3, r2
    1370:	3b30      	subs	r3, #48	; 0x30
    1372:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    1374:	e7e4      	b.n	1340 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    1376:	2300      	movs	r3, #0
    1378:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    137a:	9b04      	ldr	r3, [sp, #16]
    137c:	781b      	ldrb	r3, [r3, #0]
    137e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    1382:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1386:	2b2e      	cmp	r3, #46	; 0x2e
    1388:	d11d      	bne.n	13c6 <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    138a:	9b04      	ldr	r3, [sp, #16]
    138c:	3301      	adds	r3, #1
    138e:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1390:	9b04      	ldr	r3, [sp, #16]
    1392:	781b      	ldrb	r3, [r3, #0]
    1394:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1398:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    139c:	2b2f      	cmp	r3, #47	; 0x2f
    139e:	d912      	bls.n	13c6 <SEGGER_RTT_vprintf+0x16e>
    13a0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13a4:	2b39      	cmp	r3, #57	; 0x39
    13a6:	d80e      	bhi.n	13c6 <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    13a8:	9b04      	ldr	r3, [sp, #16]
    13aa:	3301      	adds	r3, #1
    13ac:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    13ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    13b0:	4613      	mov	r3, r2
    13b2:	009b      	lsls	r3, r3, #2
    13b4:	4413      	add	r3, r2
    13b6:	005b      	lsls	r3, r3, #1
    13b8:	461a      	mov	r2, r3
    13ba:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13be:	4413      	add	r3, r2
    13c0:	3b30      	subs	r3, #48	; 0x30
    13c2:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    13c4:	e7e4      	b.n	1390 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    13c6:	9b04      	ldr	r3, [sp, #16]
    13c8:	781b      	ldrb	r3, [r3, #0]
    13ca:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    13ce:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13d2:	2b6c      	cmp	r3, #108	; 0x6c
    13d4:	d003      	beq.n	13de <SEGGER_RTT_vprintf+0x186>
    13d6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13da:	2b68      	cmp	r3, #104	; 0x68
    13dc:	d107      	bne.n	13ee <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    13de:	9b04      	ldr	r3, [sp, #16]
    13e0:	3301      	adds	r3, #1
    13e2:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    13e4:	9b04      	ldr	r3, [sp, #16]
    13e6:	781b      	ldrb	r3, [r3, #0]
    13e8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    13ec:	e7ef      	b.n	13ce <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    13ee:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13f2:	2b25      	cmp	r3, #37	; 0x25
    13f4:	f000 80d0 	beq.w	1598 <SEGGER_RTT_vprintf+0x340>
    13f8:	2b25      	cmp	r3, #37	; 0x25
    13fa:	f2c0 80d3 	blt.w	15a4 <SEGGER_RTT_vprintf+0x34c>
    13fe:	2b78      	cmp	r3, #120	; 0x78
    1400:	f300 80d0 	bgt.w	15a4 <SEGGER_RTT_vprintf+0x34c>
    1404:	2b58      	cmp	r3, #88	; 0x58
    1406:	f2c0 80cd 	blt.w	15a4 <SEGGER_RTT_vprintf+0x34c>
    140a:	3b58      	subs	r3, #88	; 0x58
    140c:	2b20      	cmp	r3, #32
    140e:	f200 80c9 	bhi.w	15a4 <SEGGER_RTT_vprintf+0x34c>
    1412:	a201      	add	r2, pc, #4	; (adr r2, 1418 <SEGGER_RTT_vprintf+0x1c0>)
    1414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1418:	00001509 	.word	0x00001509
    141c:	000015a5 	.word	0x000015a5
    1420:	000015a5 	.word	0x000015a5
    1424:	000015a5 	.word	0x000015a5
    1428:	000015a5 	.word	0x000015a5
    142c:	000015a5 	.word	0x000015a5
    1430:	000015a5 	.word	0x000015a5
    1434:	000015a5 	.word	0x000015a5
    1438:	000015a5 	.word	0x000015a5
    143c:	000015a5 	.word	0x000015a5
    1440:	000015a5 	.word	0x000015a5
    1444:	0000149d 	.word	0x0000149d
    1448:	000014c1 	.word	0x000014c1
    144c:	000015a5 	.word	0x000015a5
    1450:	000015a5 	.word	0x000015a5
    1454:	000015a5 	.word	0x000015a5
    1458:	000015a5 	.word	0x000015a5
    145c:	000015a5 	.word	0x000015a5
    1460:	000015a5 	.word	0x000015a5
    1464:	000015a5 	.word	0x000015a5
    1468:	000015a5 	.word	0x000015a5
    146c:	000015a5 	.word	0x000015a5
    1470:	000015a5 	.word	0x000015a5
    1474:	000015a5 	.word	0x000015a5
    1478:	00001575 	.word	0x00001575
    147c:	000015a5 	.word	0x000015a5
    1480:	000015a5 	.word	0x000015a5
    1484:	0000152d 	.word	0x0000152d
    1488:	000015a5 	.word	0x000015a5
    148c:	000014e5 	.word	0x000014e5
    1490:	000015a5 	.word	0x000015a5
    1494:	000015a5 	.word	0x000015a5
    1498:	00001509 	.word	0x00001509
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    149c:	9b03      	ldr	r3, [sp, #12]
    149e:	681b      	ldr	r3, [r3, #0]
    14a0:	1d19      	adds	r1, r3, #4
    14a2:	9a03      	ldr	r2, [sp, #12]
    14a4:	6011      	str	r1, [r2, #0]
    14a6:	681b      	ldr	r3, [r3, #0]
    14a8:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    14aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
    14ac:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    14b0:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    14b4:	ab16      	add	r3, sp, #88	; 0x58
    14b6:	4611      	mov	r1, r2
    14b8:	4618      	mov	r0, r3
    14ba:	f7ff fd3a 	bl	f32 <_StoreChar>
        break;
    14be:	e072      	b.n	15a6 <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    14c0:	9b03      	ldr	r3, [sp, #12]
    14c2:	681b      	ldr	r3, [r3, #0]
    14c4:	1d19      	adds	r1, r3, #4
    14c6:	9a03      	ldr	r2, [sp, #12]
    14c8:	6011      	str	r1, [r2, #0]
    14ca:	681b      	ldr	r3, [r3, #0]
    14cc:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    14ce:	a816      	add	r0, sp, #88	; 0x58
    14d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    14d2:	9301      	str	r3, [sp, #4]
    14d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    14d6:	9300      	str	r3, [sp, #0]
    14d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    14da:	220a      	movs	r2, #10
    14dc:	9920      	ldr	r1, [sp, #128]	; 0x80
    14de:	f7ff fe15 	bl	110c <_PrintInt>
        break;
    14e2:	e060      	b.n	15a6 <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    14e4:	9b03      	ldr	r3, [sp, #12]
    14e6:	681b      	ldr	r3, [r3, #0]
    14e8:	1d19      	adds	r1, r3, #4
    14ea:	9a03      	ldr	r2, [sp, #12]
    14ec:	6011      	str	r1, [r2, #0]
    14ee:	681b      	ldr	r3, [r3, #0]
    14f0:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    14f2:	9920      	ldr	r1, [sp, #128]	; 0x80
    14f4:	a816      	add	r0, sp, #88	; 0x58
    14f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    14f8:	9301      	str	r3, [sp, #4]
    14fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    14fc:	9300      	str	r3, [sp, #0]
    14fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1500:	220a      	movs	r2, #10
    1502:	f7ff fd55 	bl	fb0 <_PrintUnsigned>
        break;
    1506:	e04e      	b.n	15a6 <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1508:	9b03      	ldr	r3, [sp, #12]
    150a:	681b      	ldr	r3, [r3, #0]
    150c:	1d19      	adds	r1, r3, #4
    150e:	9a03      	ldr	r2, [sp, #12]
    1510:	6011      	str	r1, [r2, #0]
    1512:	681b      	ldr	r3, [r3, #0]
    1514:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    1516:	9920      	ldr	r1, [sp, #128]	; 0x80
    1518:	a816      	add	r0, sp, #88	; 0x58
    151a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    151c:	9301      	str	r3, [sp, #4]
    151e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1520:	9300      	str	r3, [sp, #0]
    1522:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1524:	2210      	movs	r2, #16
    1526:	f7ff fd43 	bl	fb0 <_PrintUnsigned>
        break;
    152a:	e03c      	b.n	15a6 <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    152c:	9b03      	ldr	r3, [sp, #12]
    152e:	681b      	ldr	r3, [r3, #0]
    1530:	1d19      	adds	r1, r3, #4
    1532:	9a03      	ldr	r2, [sp, #12]
    1534:	6011      	str	r1, [r2, #0]
    1536:	681b      	ldr	r3, [r3, #0]
    1538:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    153a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    153c:	2b00      	cmp	r3, #0
    153e:	d101      	bne.n	1544 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    1540:	4b2c      	ldr	r3, [pc, #176]	; (15f4 <SEGGER_RTT_vprintf+0x39c>)
    1542:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    1544:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1546:	781b      	ldrb	r3, [r3, #0]
    1548:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    154c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    154e:	3301      	adds	r3, #1
    1550:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    1552:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1556:	2b00      	cmp	r3, #0
    1558:	d00a      	beq.n	1570 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    155a:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    155e:	ab16      	add	r3, sp, #88	; 0x58
    1560:	4611      	mov	r1, r2
    1562:	4618      	mov	r0, r3
    1564:	f7ff fce5 	bl	f32 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1568:	9b19      	ldr	r3, [sp, #100]	; 0x64
    156a:	2b00      	cmp	r3, #0
    156c:	daea      	bge.n	1544 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    156e:	e01a      	b.n	15a6 <SEGGER_RTT_vprintf+0x34e>
              break;
    1570:	bf00      	nop
        break;
    1572:	e018      	b.n	15a6 <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    1574:	9b03      	ldr	r3, [sp, #12]
    1576:	681b      	ldr	r3, [r3, #0]
    1578:	1d19      	adds	r1, r3, #4
    157a:	9a03      	ldr	r2, [sp, #12]
    157c:	6011      	str	r1, [r2, #0]
    157e:	681b      	ldr	r3, [r3, #0]
    1580:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    1582:	9920      	ldr	r1, [sp, #128]	; 0x80
    1584:	a816      	add	r0, sp, #88	; 0x58
    1586:	2300      	movs	r3, #0
    1588:	9301      	str	r3, [sp, #4]
    158a:	2308      	movs	r3, #8
    158c:	9300      	str	r3, [sp, #0]
    158e:	2308      	movs	r3, #8
    1590:	2210      	movs	r2, #16
    1592:	f7ff fd0d 	bl	fb0 <_PrintUnsigned>
        break;
    1596:	e006      	b.n	15a6 <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1598:	ab16      	add	r3, sp, #88	; 0x58
    159a:	2125      	movs	r1, #37	; 0x25
    159c:	4618      	mov	r0, r3
    159e:	f7ff fcc8 	bl	f32 <_StoreChar>
        break;
    15a2:	e000      	b.n	15a6 <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    15a4:	bf00      	nop
      }
      sFormat++;
    15a6:	9b04      	ldr	r3, [sp, #16]
    15a8:	3301      	adds	r3, #1
    15aa:	9304      	str	r3, [sp, #16]
    15ac:	e006      	b.n	15bc <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    15ae:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    15b2:	ab16      	add	r3, sp, #88	; 0x58
    15b4:	4611      	mov	r1, r2
    15b6:	4618      	mov	r0, r3
    15b8:	f7ff fcbb 	bl	f32 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    15bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15be:	2b00      	cmp	r3, #0
    15c0:	f6bf ae59 	bge.w	1276 <SEGGER_RTT_vprintf+0x1e>
    15c4:	e000      	b.n	15c8 <SEGGER_RTT_vprintf+0x370>
      break;
    15c6:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    15c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15ca:	2b00      	cmp	r3, #0
    15cc:	dd0c      	ble.n	15e8 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    15ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
    15d0:	2b00      	cmp	r3, #0
    15d2:	d005      	beq.n	15e0 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    15d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    15d6:	ab06      	add	r3, sp, #24
    15d8:	4619      	mov	r1, r3
    15da:	9805      	ldr	r0, [sp, #20]
    15dc:	f7ff fc7e 	bl	edc <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    15e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    15e4:	4413      	add	r3, r2
    15e6:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    15e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    15ea:	4618      	mov	r0, r3
    15ec:	b023      	add	sp, #140	; 0x8c
    15ee:	f85d fb04 	ldr.w	pc, [sp], #4
    15f2:	bf00      	nop
    15f4:	0000a614 	.word	0x0000a614

000015f8 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    15f8:	b40e      	push	{r1, r2, r3}
    15fa:	b500      	push	{lr}
    15fc:	b084      	sub	sp, #16
    15fe:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1600:	ab06      	add	r3, sp, #24
    1602:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1604:	ab02      	add	r3, sp, #8
    1606:	461a      	mov	r2, r3
    1608:	9905      	ldr	r1, [sp, #20]
    160a:	9801      	ldr	r0, [sp, #4]
    160c:	f7ff fe24 	bl	1258 <SEGGER_RTT_vprintf>
    1610:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    1612:	9b03      	ldr	r3, [sp, #12]
}
    1614:	4618      	mov	r0, r3
    1616:	b004      	add	sp, #16
    1618:	f85d eb04 	ldr.w	lr, [sp], #4
    161c:	b003      	add	sp, #12
    161e:	4770      	bx	lr

00001620 <memcpy>:
    1620:	440a      	add	r2, r1
    1622:	4291      	cmp	r1, r2
    1624:	f100 33ff 	add.w	r3, r0, #4294967295
    1628:	d100      	bne.n	162c <memcpy+0xc>
    162a:	4770      	bx	lr
    162c:	b510      	push	{r4, lr}
    162e:	f811 4b01 	ldrb.w	r4, [r1], #1
    1632:	f803 4f01 	strb.w	r4, [r3, #1]!
    1636:	4291      	cmp	r1, r2
    1638:	d1f9      	bne.n	162e <memcpy+0xe>
    163a:	bd10      	pop	{r4, pc}

0000163c <memset>:
    163c:	4402      	add	r2, r0
    163e:	4603      	mov	r3, r0
    1640:	4293      	cmp	r3, r2
    1642:	d100      	bne.n	1646 <memset+0xa>
    1644:	4770      	bx	lr
    1646:	f803 1b01 	strb.w	r1, [r3], #1
    164a:	e7f9      	b.n	1640 <memset+0x4>

0000164c <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    164c:	b086      	sub	sp, #24
    164e:	9003      	str	r0, [sp, #12]
    1650:	9102      	str	r1, [sp, #8]
    1652:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    1654:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1658:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    165c:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    165e:	9b01      	ldr	r3, [sp, #4]
    1660:	2b00      	cmp	r3, #0
    1662:	d007      	beq.n	1674 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    1664:	9b03      	ldr	r3, [sp, #12]
    1666:	3310      	adds	r3, #16
    1668:	009b      	lsls	r3, r3, #2
    166a:	9a05      	ldr	r2, [sp, #20]
    166c:	4413      	add	r3, r2
    166e:	681a      	ldr	r2, [r3, #0]
    1670:	9b01      	ldr	r3, [sp, #4]
    1672:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    1674:	9b03      	ldr	r3, [sp, #12]
    1676:	3310      	adds	r3, #16
    1678:	009b      	lsls	r3, r3, #2
    167a:	9a05      	ldr	r2, [sp, #20]
    167c:	4413      	add	r3, r2
    167e:	9a02      	ldr	r2, [sp, #8]
    1680:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    1682:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    1686:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    168a:	bf00      	nop
    168c:	b006      	add	sp, #24
    168e:	4770      	bx	lr

00001690 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1690:	b082      	sub	sp, #8
    1692:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1694:	9b01      	ldr	r3, [sp, #4]
    1696:	f003 021f 	and.w	r2, r3, #31
    169a:	4905      	ldr	r1, [pc, #20]	; (16b0 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    169c:	9b01      	ldr	r3, [sp, #4]
    169e:	095b      	lsrs	r3, r3, #5
    16a0:	2001      	movs	r0, #1
    16a2:	fa00 f202 	lsl.w	r2, r0, r2
    16a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    16aa:	bf00      	nop
    16ac:	b002      	add	sp, #8
    16ae:	4770      	bx	lr
    16b0:	e000e100 	.word	0xe000e100

000016b4 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    16b4:	b082      	sub	sp, #8
    16b6:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    16b8:	9b01      	ldr	r3, [sp, #4]
    16ba:	f003 021f 	and.w	r2, r3, #31
    16be:	4906      	ldr	r1, [pc, #24]	; (16d8 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    16c0:	9b01      	ldr	r3, [sp, #4]
    16c2:	095b      	lsrs	r3, r3, #5
    16c4:	2001      	movs	r0, #1
    16c6:	fa00 f202 	lsl.w	r2, r0, r2
    16ca:	3320      	adds	r3, #32
    16cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    16d0:	bf00      	nop
    16d2:	b002      	add	sp, #8
    16d4:	4770      	bx	lr
    16d6:	bf00      	nop
    16d8:	e000e100 	.word	0xe000e100

000016dc <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    16dc:	b084      	sub	sp, #16
    16de:	9001      	str	r0, [sp, #4]
    16e0:	460b      	mov	r3, r1
    16e2:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    16e6:	2304      	movs	r3, #4
    16e8:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    16ec:	f89d 2003 	ldrb.w	r2, [sp, #3]
    16f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    16f4:	fa02 f103 	lsl.w	r1, r2, r3
    16f8:	4a04      	ldr	r2, [pc, #16]	; (170c <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    16fa:	9b01      	ldr	r3, [sp, #4]
    16fc:	b2c9      	uxtb	r1, r1
    16fe:	4413      	add	r3, r2
    1700:	460a      	mov	r2, r1
    1702:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    1706:	bf00      	nop
    1708:	b004      	add	sp, #16
    170a:	4770      	bx	lr
    170c:	e000e100 	.word	0xe000e100

00001710 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    1710:	b084      	sub	sp, #16
    1712:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1714:	2304      	movs	r3, #4
    1716:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    171a:	4a09      	ldr	r2, [pc, #36]	; (1740 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    171c:	9b01      	ldr	r3, [sp, #4]
    171e:	4413      	add	r3, r2
    1720:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    1724:	b2db      	uxtb	r3, r3
    1726:	461a      	mov	r2, r3
    1728:	f89d 300f 	ldrb.w	r3, [sp, #15]
    172c:	fa42 f303 	asr.w	r3, r2, r3
    1730:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    1734:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    1738:	4618      	mov	r0, r3
    173a:	b004      	add	sp, #16
    173c:	4770      	bx	lr
    173e:	bf00      	nop
    1740:	e000e100 	.word	0xe000e100

00001744 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    1744:	b082      	sub	sp, #8
    1746:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1748:	9b01      	ldr	r3, [sp, #4]
    174a:	f003 021f 	and.w	r2, r3, #31
    174e:	4906      	ldr	r1, [pc, #24]	; (1768 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    1750:	9b01      	ldr	r3, [sp, #4]
    1752:	095b      	lsrs	r3, r3, #5
    1754:	2001      	movs	r0, #1
    1756:	fa00 f202 	lsl.w	r2, r0, r2
    175a:	3360      	adds	r3, #96	; 0x60
    175c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    1760:	bf00      	nop
    1762:	b002      	add	sp, #8
    1764:	4770      	bx	lr
    1766:	bf00      	nop
    1768:	e000e100 	.word	0xe000e100

0000176c <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    176c:	b500      	push	{lr}
    176e:	b085      	sub	sp, #20
    1770:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1772:	2300      	movs	r3, #0
    1774:	9303      	str	r3, [sp, #12]
    1776:	e05d      	b.n	1834 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1778:	9b01      	ldr	r3, [sp, #4]
    177a:	6859      	ldr	r1, [r3, #4]
    177c:	9a03      	ldr	r2, [sp, #12]
    177e:	4613      	mov	r3, r2
    1780:	005b      	lsls	r3, r3, #1
    1782:	4413      	add	r3, r2
    1784:	009b      	lsls	r3, r3, #2
    1786:	440b      	add	r3, r1
    1788:	681b      	ldr	r3, [r3, #0]
    178a:	4618      	mov	r0, r3
    178c:	f000 f899 	bl	18c2 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1790:	9b01      	ldr	r3, [sp, #4]
    1792:	6859      	ldr	r1, [r3, #4]
    1794:	9a03      	ldr	r2, [sp, #12]
    1796:	4613      	mov	r3, r2
    1798:	005b      	lsls	r3, r3, #1
    179a:	4413      	add	r3, r2
    179c:	009b      	lsls	r3, r3, #2
    179e:	440b      	add	r3, r1
    17a0:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    17a2:	9b01      	ldr	r3, [sp, #4]
    17a4:	6859      	ldr	r1, [r3, #4]
    17a6:	9a03      	ldr	r2, [sp, #12]
    17a8:	4613      	mov	r3, r2
    17aa:	005b      	lsls	r3, r3, #1
    17ac:	4413      	add	r3, r2
    17ae:	009b      	lsls	r3, r3, #2
    17b0:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17b2:	795b      	ldrb	r3, [r3, #5]
    17b4:	4619      	mov	r1, r3
    17b6:	f000 f869 	bl	188c <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17ba:	9b01      	ldr	r3, [sp, #4]
    17bc:	6859      	ldr	r1, [r3, #4]
    17be:	9a03      	ldr	r2, [sp, #12]
    17c0:	4613      	mov	r3, r2
    17c2:	005b      	lsls	r3, r3, #1
    17c4:	4413      	add	r3, r2
    17c6:	009b      	lsls	r3, r3, #2
    17c8:	440b      	add	r3, r1
    17ca:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    17cc:	9b01      	ldr	r3, [sp, #4]
    17ce:	6859      	ldr	r1, [r3, #4]
    17d0:	9a03      	ldr	r2, [sp, #12]
    17d2:	4613      	mov	r3, r2
    17d4:	005b      	lsls	r3, r3, #1
    17d6:	4413      	add	r3, r2
    17d8:	009b      	lsls	r3, r3, #2
    17da:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17dc:	689b      	ldr	r3, [r3, #8]
    17de:	2200      	movs	r2, #0
    17e0:	4619      	mov	r1, r3
    17e2:	f000 f831 	bl	1848 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    17e6:	9b01      	ldr	r3, [sp, #4]
    17e8:	6859      	ldr	r1, [r3, #4]
    17ea:	9a03      	ldr	r2, [sp, #12]
    17ec:	4613      	mov	r3, r2
    17ee:	005b      	lsls	r3, r3, #1
    17f0:	4413      	add	r3, r2
    17f2:	009b      	lsls	r3, r3, #2
    17f4:	440b      	add	r3, r1
    17f6:	791b      	ldrb	r3, [r3, #4]
    17f8:	2b00      	cmp	r3, #0
    17fa:	d00c      	beq.n	1816 <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    17fc:	9b01      	ldr	r3, [sp, #4]
    17fe:	6859      	ldr	r1, [r3, #4]
    1800:	9a03      	ldr	r2, [sp, #12]
    1802:	4613      	mov	r3, r2
    1804:	005b      	lsls	r3, r3, #1
    1806:	4413      	add	r3, r2
    1808:	009b      	lsls	r3, r3, #2
    180a:	440b      	add	r3, r1
    180c:	681b      	ldr	r3, [r3, #0]
    180e:	4618      	mov	r0, r3
    1810:	f000 f828 	bl	1864 <IntCtrl_Ip_EnableIrq>
    1814:	e00b      	b.n	182e <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1816:	9b01      	ldr	r3, [sp, #4]
    1818:	6859      	ldr	r1, [r3, #4]
    181a:	9a03      	ldr	r2, [sp, #12]
    181c:	4613      	mov	r3, r2
    181e:	005b      	lsls	r3, r3, #1
    1820:	4413      	add	r3, r2
    1822:	009b      	lsls	r3, r3, #2
    1824:	440b      	add	r3, r1
    1826:	681b      	ldr	r3, [r3, #0]
    1828:	4618      	mov	r0, r3
    182a:	f000 f825 	bl	1878 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    182e:	9b03      	ldr	r3, [sp, #12]
    1830:	3301      	adds	r3, #1
    1832:	9303      	str	r3, [sp, #12]
    1834:	9b01      	ldr	r3, [sp, #4]
    1836:	681b      	ldr	r3, [r3, #0]
    1838:	9a03      	ldr	r2, [sp, #12]
    183a:	429a      	cmp	r2, r3
    183c:	d39c      	bcc.n	1778 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    183e:	2300      	movs	r3, #0
}
    1840:	4618      	mov	r0, r3
    1842:	b005      	add	sp, #20
    1844:	f85d fb04 	ldr.w	pc, [sp], #4

00001848 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1848:	b500      	push	{lr}
    184a:	b085      	sub	sp, #20
    184c:	9003      	str	r0, [sp, #12]
    184e:	9102      	str	r1, [sp, #8]
    1850:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    1852:	9a01      	ldr	r2, [sp, #4]
    1854:	9902      	ldr	r1, [sp, #8]
    1856:	9803      	ldr	r0, [sp, #12]
    1858:	f7ff fef8 	bl	164c <IntCtrl_Ip_InstallHandlerPrivileged>
}
    185c:	bf00      	nop
    185e:	b005      	add	sp, #20
    1860:	f85d fb04 	ldr.w	pc, [sp], #4

00001864 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    1864:	b500      	push	{lr}
    1866:	b083      	sub	sp, #12
    1868:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    186a:	9801      	ldr	r0, [sp, #4]
    186c:	f7ff ff10 	bl	1690 <IntCtrl_Ip_EnableIrqPrivileged>
}
    1870:	bf00      	nop
    1872:	b003      	add	sp, #12
    1874:	f85d fb04 	ldr.w	pc, [sp], #4

00001878 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    1878:	b500      	push	{lr}
    187a:	b083      	sub	sp, #12
    187c:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    187e:	9801      	ldr	r0, [sp, #4]
    1880:	f7ff ff18 	bl	16b4 <IntCtrl_Ip_DisableIrqPrivileged>
}
    1884:	bf00      	nop
    1886:	b003      	add	sp, #12
    1888:	f85d fb04 	ldr.w	pc, [sp], #4

0000188c <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    188c:	b500      	push	{lr}
    188e:	b083      	sub	sp, #12
    1890:	9001      	str	r0, [sp, #4]
    1892:	460b      	mov	r3, r1
    1894:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1898:	f89d 3003 	ldrb.w	r3, [sp, #3]
    189c:	4619      	mov	r1, r3
    189e:	9801      	ldr	r0, [sp, #4]
    18a0:	f7ff ff1c 	bl	16dc <IntCtrl_Ip_SetPriorityPrivileged>
}
    18a4:	bf00      	nop
    18a6:	b003      	add	sp, #12
    18a8:	f85d fb04 	ldr.w	pc, [sp], #4

000018ac <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    18ac:	b500      	push	{lr}
    18ae:	b083      	sub	sp, #12
    18b0:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    18b2:	9801      	ldr	r0, [sp, #4]
    18b4:	f7ff ff2c 	bl	1710 <IntCtrl_Ip_GetPriorityPrivileged>
    18b8:	4603      	mov	r3, r0
}
    18ba:	4618      	mov	r0, r3
    18bc:	b003      	add	sp, #12
    18be:	f85d fb04 	ldr.w	pc, [sp], #4

000018c2 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    18c2:	b500      	push	{lr}
    18c4:	b083      	sub	sp, #12
    18c6:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    18c8:	9801      	ldr	r0, [sp, #4]
    18ca:	f7ff ff3b 	bl	1744 <IntCtrl_Ip_ClearPendingPrivileged>
}
    18ce:	bf00      	nop
    18d0:	b003      	add	sp, #12
    18d2:	f85d fb04 	ldr.w	pc, [sp], #4
    18d6:	bf00      	nop

000018d8 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    18d8:	b500      	push	{lr}
    18da:	b083      	sub	sp, #12
    18dc:	9001      	str	r0, [sp, #4]
    18de:	460b      	mov	r3, r1
    18e0:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    18e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    18e8:	2b00      	cmp	r3, #0
    18ea:	d003      	beq.n	18f4 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    18ec:	9801      	ldr	r0, [sp, #4]
    18ee:	f7ff ffb9 	bl	1864 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    18f2:	e002      	b.n	18fa <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    18f4:	9801      	ldr	r0, [sp, #4]
    18f6:	f7ff ffbf 	bl	1878 <IntCtrl_Ip_DisableIrq>
}
    18fa:	bf00      	nop
    18fc:	b003      	add	sp, #12
    18fe:	f85d fb04 	ldr.w	pc, [sp], #4

00001902 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1902:	b500      	push	{lr}
    1904:	b083      	sub	sp, #12
    1906:	9001      	str	r0, [sp, #4]
    1908:	460b      	mov	r3, r1
    190a:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    190e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1912:	4619      	mov	r1, r3
    1914:	9801      	ldr	r0, [sp, #4]
    1916:	f7ff ffb9 	bl	188c <IntCtrl_Ip_SetPriority>
}
    191a:	bf00      	nop
    191c:	b003      	add	sp, #12
    191e:	f85d fb04 	ldr.w	pc, [sp], #4

00001922 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    1922:	b500      	push	{lr}
    1924:	b083      	sub	sp, #12
    1926:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1928:	9801      	ldr	r0, [sp, #4]
    192a:	f7ff ffbf 	bl	18ac <IntCtrl_Ip_GetPriority>
    192e:	4603      	mov	r3, r0
}
    1930:	4618      	mov	r0, r3
    1932:	b003      	add	sp, #12
    1934:	f85d fb04 	ldr.w	pc, [sp], #4

00001938 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1938:	b500      	push	{lr}
    193a:	b085      	sub	sp, #20
    193c:	9003      	str	r0, [sp, #12]
    193e:	9102      	str	r1, [sp, #8]
    1940:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1942:	9a01      	ldr	r2, [sp, #4]
    1944:	9902      	ldr	r1, [sp, #8]
    1946:	9803      	ldr	r0, [sp, #12]
    1948:	f7ff ff7e 	bl	1848 <IntCtrl_Ip_InstallHandler>
}
    194c:	bf00      	nop
    194e:	b005      	add	sp, #20
    1950:	f85d fb04 	ldr.w	pc, [sp], #4

00001954 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    1954:	b500      	push	{lr}
    1956:	b085      	sub	sp, #20
    1958:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    195a:	2300      	movs	r3, #0
    195c:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    1960:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1964:	4a05      	ldr	r2, [pc, #20]	; (197c <Platform_Init+0x28>)
    1966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    196a:	681b      	ldr	r3, [r3, #0]
    196c:	4618      	mov	r0, r3
    196e:	f000 f8c7 	bl	1b00 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    1972:	bf00      	nop
    1974:	b005      	add	sp, #20
    1976:	f85d fb04 	ldr.w	pc, [sp], #4
    197a:	bf00      	nop
    197c:	0000b230 	.word	0x0000b230

00001980 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1980:	b500      	push	{lr}
    1982:	b085      	sub	sp, #20
    1984:	9001      	str	r0, [sp, #4]
    1986:	460b      	mov	r3, r1
    1988:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    198c:	2300      	movs	r3, #0
    198e:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    1992:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1996:	4619      	mov	r1, r3
    1998:	9801      	ldr	r0, [sp, #4]
    199a:	f7ff ff9d 	bl	18d8 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    199e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    19a2:	4618      	mov	r0, r3
    19a4:	b005      	add	sp, #20
    19a6:	f85d fb04 	ldr.w	pc, [sp], #4

000019aa <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    19aa:	b500      	push	{lr}
    19ac:	b085      	sub	sp, #20
    19ae:	9001      	str	r0, [sp, #4]
    19b0:	460b      	mov	r3, r1
    19b2:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    19b6:	2300      	movs	r3, #0
    19b8:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    19bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    19c0:	4619      	mov	r1, r3
    19c2:	9801      	ldr	r0, [sp, #4]
    19c4:	f7ff ff9d 	bl	1902 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    19c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    19cc:	4618      	mov	r0, r3
    19ce:	b005      	add	sp, #20
    19d0:	f85d fb04 	ldr.w	pc, [sp], #4

000019d4 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    19d4:	b500      	push	{lr}
    19d6:	b085      	sub	sp, #20
    19d8:	9001      	str	r0, [sp, #4]
    19da:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    19dc:	2300      	movs	r3, #0
    19de:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    19e2:	9801      	ldr	r0, [sp, #4]
    19e4:	f7ff ff9d 	bl	1922 <Platform_Ipw_GetIrqPriority>
    19e8:	4603      	mov	r3, r0
    19ea:	461a      	mov	r2, r3
    19ec:	9b00      	ldr	r3, [sp, #0]
    19ee:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    19f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    19f4:	4618      	mov	r0, r3
    19f6:	b005      	add	sp, #20
    19f8:	f85d fb04 	ldr.w	pc, [sp], #4

000019fc <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    19fc:	b500      	push	{lr}
    19fe:	b087      	sub	sp, #28
    1a00:	9003      	str	r0, [sp, #12]
    1a02:	9102      	str	r1, [sp, #8]
    1a04:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1a06:	2300      	movs	r3, #0
    1a08:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1a0c:	9a01      	ldr	r2, [sp, #4]
    1a0e:	9902      	ldr	r1, [sp, #8]
    1a10:	9803      	ldr	r0, [sp, #12]
    1a12:	f7ff ff91 	bl	1938 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1a16:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1a1a:	4618      	mov	r0, r3
    1a1c:	b007      	add	sp, #28
    1a1e:	f85d fb04 	ldr.w	pc, [sp], #4
    1a22:	bf00      	nop

00001a24 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1a24:	b500      	push	{lr}
    1a26:	b085      	sub	sp, #20
    1a28:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a2a:	2300      	movs	r3, #0
    1a2c:	9303      	str	r3, [sp, #12]
    1a2e:	e05d      	b.n	1aec <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a30:	9b01      	ldr	r3, [sp, #4]
    1a32:	6859      	ldr	r1, [r3, #4]
    1a34:	9a03      	ldr	r2, [sp, #12]
    1a36:	4613      	mov	r3, r2
    1a38:	005b      	lsls	r3, r3, #1
    1a3a:	4413      	add	r3, r2
    1a3c:	009b      	lsls	r3, r3, #2
    1a3e:	440b      	add	r3, r1
    1a40:	681b      	ldr	r3, [r3, #0]
    1a42:	4618      	mov	r0, r3
    1a44:	f7ff ff3d 	bl	18c2 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a48:	9b01      	ldr	r3, [sp, #4]
    1a4a:	6859      	ldr	r1, [r3, #4]
    1a4c:	9a03      	ldr	r2, [sp, #12]
    1a4e:	4613      	mov	r3, r2
    1a50:	005b      	lsls	r3, r3, #1
    1a52:	4413      	add	r3, r2
    1a54:	009b      	lsls	r3, r3, #2
    1a56:	440b      	add	r3, r1
    1a58:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1a5a:	9b01      	ldr	r3, [sp, #4]
    1a5c:	6859      	ldr	r1, [r3, #4]
    1a5e:	9a03      	ldr	r2, [sp, #12]
    1a60:	4613      	mov	r3, r2
    1a62:	005b      	lsls	r3, r3, #1
    1a64:	4413      	add	r3, r2
    1a66:	009b      	lsls	r3, r3, #2
    1a68:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a6a:	795b      	ldrb	r3, [r3, #5]
    1a6c:	4619      	mov	r1, r3
    1a6e:	f7ff ff0d 	bl	188c <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a72:	9b01      	ldr	r3, [sp, #4]
    1a74:	6859      	ldr	r1, [r3, #4]
    1a76:	9a03      	ldr	r2, [sp, #12]
    1a78:	4613      	mov	r3, r2
    1a7a:	005b      	lsls	r3, r3, #1
    1a7c:	4413      	add	r3, r2
    1a7e:	009b      	lsls	r3, r3, #2
    1a80:	440b      	add	r3, r1
    1a82:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1a84:	9b01      	ldr	r3, [sp, #4]
    1a86:	6859      	ldr	r1, [r3, #4]
    1a88:	9a03      	ldr	r2, [sp, #12]
    1a8a:	4613      	mov	r3, r2
    1a8c:	005b      	lsls	r3, r3, #1
    1a8e:	4413      	add	r3, r2
    1a90:	009b      	lsls	r3, r3, #2
    1a92:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a94:	689b      	ldr	r3, [r3, #8]
    1a96:	2200      	movs	r2, #0
    1a98:	4619      	mov	r1, r3
    1a9a:	f7ff fed5 	bl	1848 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1a9e:	9b01      	ldr	r3, [sp, #4]
    1aa0:	6859      	ldr	r1, [r3, #4]
    1aa2:	9a03      	ldr	r2, [sp, #12]
    1aa4:	4613      	mov	r3, r2
    1aa6:	005b      	lsls	r3, r3, #1
    1aa8:	4413      	add	r3, r2
    1aaa:	009b      	lsls	r3, r3, #2
    1aac:	440b      	add	r3, r1
    1aae:	791b      	ldrb	r3, [r3, #4]
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d00c      	beq.n	1ace <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1ab4:	9b01      	ldr	r3, [sp, #4]
    1ab6:	6859      	ldr	r1, [r3, #4]
    1ab8:	9a03      	ldr	r2, [sp, #12]
    1aba:	4613      	mov	r3, r2
    1abc:	005b      	lsls	r3, r3, #1
    1abe:	4413      	add	r3, r2
    1ac0:	009b      	lsls	r3, r3, #2
    1ac2:	440b      	add	r3, r1
    1ac4:	681b      	ldr	r3, [r3, #0]
    1ac6:	4618      	mov	r0, r3
    1ac8:	f7ff fecc 	bl	1864 <IntCtrl_Ip_EnableIrq>
    1acc:	e00b      	b.n	1ae6 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1ace:	9b01      	ldr	r3, [sp, #4]
    1ad0:	6859      	ldr	r1, [r3, #4]
    1ad2:	9a03      	ldr	r2, [sp, #12]
    1ad4:	4613      	mov	r3, r2
    1ad6:	005b      	lsls	r3, r3, #1
    1ad8:	4413      	add	r3, r2
    1ada:	009b      	lsls	r3, r3, #2
    1adc:	440b      	add	r3, r1
    1ade:	681b      	ldr	r3, [r3, #0]
    1ae0:	4618      	mov	r0, r3
    1ae2:	f7ff fec9 	bl	1878 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1ae6:	9b03      	ldr	r3, [sp, #12]
    1ae8:	3301      	adds	r3, #1
    1aea:	9303      	str	r3, [sp, #12]
    1aec:	9b01      	ldr	r3, [sp, #4]
    1aee:	681b      	ldr	r3, [r3, #0]
    1af0:	9a03      	ldr	r2, [sp, #12]
    1af2:	429a      	cmp	r2, r3
    1af4:	d39c      	bcc.n	1a30 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1af6:	2300      	movs	r3, #0
}
    1af8:	4618      	mov	r0, r3
    1afa:	b005      	add	sp, #20
    1afc:	f85d fb04 	ldr.w	pc, [sp], #4

00001b00 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1b00:	b500      	push	{lr}
    1b02:	b085      	sub	sp, #20
    1b04:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1b06:	2300      	movs	r3, #0
    1b08:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1b0c:	9b01      	ldr	r3, [sp, #4]
    1b0e:	681b      	ldr	r3, [r3, #0]
    1b10:	2b00      	cmp	r3, #0
    1b12:	d007      	beq.n	1b24 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1b14:	9b01      	ldr	r3, [sp, #4]
    1b16:	681b      	ldr	r3, [r3, #0]
    1b18:	4618      	mov	r0, r3
    1b1a:	f7ff ff83 	bl	1a24 <Platform_Ipw_InitIntCtrl>
    1b1e:	4603      	mov	r3, r0
    1b20:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1b24:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1b28:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1b2a:	bf00      	nop
    1b2c:	b005      	add	sp, #20
    1b2e:	f85d fb04 	ldr.w	pc, [sp], #4

00001b32 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1b32:	2300      	movs	r3, #0
}
    1b34:	4618      	mov	r0, r3
    1b36:	4770      	bx	lr

00001b38 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1b38:	b082      	sub	sp, #8
    1b3a:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1b3c:	2301      	movs	r3, #1
}
    1b3e:	4618      	mov	r0, r3
    1b40:	b002      	add	sp, #8
    1b42:	4770      	bx	lr

00001b44 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1b44:	b082      	sub	sp, #8
    1b46:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1b48:	bf00      	nop
    1b4a:	b002      	add	sp, #8
    1b4c:	4770      	bx	lr

00001b4e <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1b4e:	b082      	sub	sp, #8
    1b50:	9001      	str	r0, [sp, #4]
    return Micros;
    1b52:	9b01      	ldr	r3, [sp, #4]
}
    1b54:	4618      	mov	r0, r3
    1b56:	b002      	add	sp, #8
    1b58:	4770      	bx	lr

00001b5a <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1b5a:	b500      	push	{lr}
    1b5c:	b083      	sub	sp, #12
    1b5e:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1b60:	f000 f86c 	bl	1c3c <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1b64:	bf00      	nop
    1b66:	b003      	add	sp, #12
    1b68:	f85d fb04 	ldr.w	pc, [sp], #4

00001b6c <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1b6c:	b500      	push	{lr}
    1b6e:	b085      	sub	sp, #20
    1b70:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1b72:	2300      	movs	r3, #0
    1b74:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1b76:	9b01      	ldr	r3, [sp, #4]
    1b78:	2b00      	cmp	r3, #0
    1b7a:	d003      	beq.n	1b84 <OsIf_GetCounter+0x18>
    1b7c:	9b01      	ldr	r3, [sp, #4]
    1b7e:	2b01      	cmp	r3, #1
    1b80:	d004      	beq.n	1b8c <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1b82:	e007      	b.n	1b94 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1b84:	f7ff ffd5 	bl	1b32 <OsIf_Timer_Dummy_GetCounter>
    1b88:	9003      	str	r0, [sp, #12]
            break;
    1b8a:	e003      	b.n	1b94 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1b8c:	f000 f872 	bl	1c74 <OsIf_Timer_System_GetCounter>
    1b90:	9003      	str	r0, [sp, #12]
            break;
    1b92:	bf00      	nop
    }

    return Value;
    1b94:	9b03      	ldr	r3, [sp, #12]
}
    1b96:	4618      	mov	r0, r3
    1b98:	b005      	add	sp, #20
    1b9a:	f85d fb04 	ldr.w	pc, [sp], #4

00001b9e <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1b9e:	b500      	push	{lr}
    1ba0:	b085      	sub	sp, #20
    1ba2:	9001      	str	r0, [sp, #4]
    1ba4:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1ba6:	2300      	movs	r3, #0
    1ba8:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1baa:	9b00      	ldr	r3, [sp, #0]
    1bac:	2b00      	cmp	r3, #0
    1bae:	d003      	beq.n	1bb8 <OsIf_GetElapsed+0x1a>
    1bb0:	9b00      	ldr	r3, [sp, #0]
    1bb2:	2b01      	cmp	r3, #1
    1bb4:	d005      	beq.n	1bc2 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1bb6:	e009      	b.n	1bcc <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1bb8:	9801      	ldr	r0, [sp, #4]
    1bba:	f7ff ffbd 	bl	1b38 <OsIf_Timer_Dummy_GetElapsed>
    1bbe:	9003      	str	r0, [sp, #12]
            break;
    1bc0:	e004      	b.n	1bcc <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1bc2:	9801      	ldr	r0, [sp, #4]
    1bc4:	f000 f864 	bl	1c90 <OsIf_Timer_System_GetElapsed>
    1bc8:	9003      	str	r0, [sp, #12]
            break;
    1bca:	bf00      	nop
    }

    return Value;
    1bcc:	9b03      	ldr	r3, [sp, #12]
}
    1bce:	4618      	mov	r0, r3
    1bd0:	b005      	add	sp, #20
    1bd2:	f85d fb04 	ldr.w	pc, [sp], #4

00001bd6 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1bd6:	b500      	push	{lr}
    1bd8:	b083      	sub	sp, #12
    1bda:	9001      	str	r0, [sp, #4]
    1bdc:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1bde:	9b00      	ldr	r3, [sp, #0]
    1be0:	2b00      	cmp	r3, #0
    1be2:	d003      	beq.n	1bec <OsIf_SetTimerFrequency+0x16>
    1be4:	9b00      	ldr	r3, [sp, #0]
    1be6:	2b01      	cmp	r3, #1
    1be8:	d004      	beq.n	1bf4 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1bea:	e007      	b.n	1bfc <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1bec:	9801      	ldr	r0, [sp, #4]
    1bee:	f7ff ffa9 	bl	1b44 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1bf2:	e003      	b.n	1bfc <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1bf4:	9801      	ldr	r0, [sp, #4]
    1bf6:	f000 f85b 	bl	1cb0 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1bfa:	bf00      	nop
    }
}
    1bfc:	bf00      	nop
    1bfe:	b003      	add	sp, #12
    1c00:	f85d fb04 	ldr.w	pc, [sp], #4

00001c04 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1c04:	b500      	push	{lr}
    1c06:	b085      	sub	sp, #20
    1c08:	9001      	str	r0, [sp, #4]
    1c0a:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1c0c:	2300      	movs	r3, #0
    1c0e:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1c10:	9b00      	ldr	r3, [sp, #0]
    1c12:	2b00      	cmp	r3, #0
    1c14:	d003      	beq.n	1c1e <OsIf_MicrosToTicks+0x1a>
    1c16:	9b00      	ldr	r3, [sp, #0]
    1c18:	2b01      	cmp	r3, #1
    1c1a:	d005      	beq.n	1c28 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c1c:	e009      	b.n	1c32 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1c1e:	9801      	ldr	r0, [sp, #4]
    1c20:	f7ff ff95 	bl	1b4e <OsIf_Timer_Dummy_MicrosToTicks>
    1c24:	9003      	str	r0, [sp, #12]
            break;
    1c26:	e004      	b.n	1c32 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1c28:	9801      	ldr	r0, [sp, #4]
    1c2a:	f000 f84f 	bl	1ccc <OsIf_Timer_System_MicrosToTicks>
    1c2e:	9003      	str	r0, [sp, #12]
            break;
    1c30:	bf00      	nop
    }

    return Value;
    1c32:	9b03      	ldr	r3, [sp, #12]
}
    1c34:	4618      	mov	r0, r3
    1c36:	b005      	add	sp, #20
    1c38:	f85d fb04 	ldr.w	pc, [sp], #4

00001c3c <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1c3c:	b500      	push	{lr}
    1c3e:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1c40:	2300      	movs	r3, #0
    1c42:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1c44:	4a09      	ldr	r2, [pc, #36]	; (1c6c <OsIf_Timer_System_Init+0x30>)
    1c46:	9b01      	ldr	r3, [sp, #4]
    1c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c4c:	685a      	ldr	r2, [r3, #4]
    1c4e:	4908      	ldr	r1, [pc, #32]	; (1c70 <OsIf_Timer_System_Init+0x34>)
    1c50:	9b01      	ldr	r3, [sp, #4]
    1c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1c56:	4a06      	ldr	r2, [pc, #24]	; (1c70 <OsIf_Timer_System_Init+0x34>)
    1c58:	9b01      	ldr	r3, [sp, #4]
    1c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c5e:	4618      	mov	r0, r3
    1c60:	f000 f868 	bl	1d34 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1c64:	bf00      	nop
    1c66:	b003      	add	sp, #12
    1c68:	f85d fb04 	ldr.w	pc, [sp], #4
    1c6c:	0000b228 	.word	0x0000b228
    1c70:	1fff8b40 	.word	0x1fff8b40

00001c74 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1c74:	b500      	push	{lr}
    1c76:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1c78:	2300      	movs	r3, #0
    1c7a:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1c7c:	2300      	movs	r3, #0
    1c7e:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1c80:	f000 f86c 	bl	1d5c <OsIf_Timer_System_Internal_GetCounter>
    1c84:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1c86:	9b01      	ldr	r3, [sp, #4]
}
    1c88:	4618      	mov	r0, r3
    1c8a:	b003      	add	sp, #12
    1c8c:	f85d fb04 	ldr.w	pc, [sp], #4

00001c90 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1c90:	b500      	push	{lr}
    1c92:	b085      	sub	sp, #20
    1c94:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1c96:	2300      	movs	r3, #0
    1c98:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1c9a:	2300      	movs	r3, #0
    1c9c:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1c9e:	9801      	ldr	r0, [sp, #4]
    1ca0:	f000 f864 	bl	1d6c <OsIf_Timer_System_Internal_GetElapsed>
    1ca4:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1ca6:	9b03      	ldr	r3, [sp, #12]
}
    1ca8:	4618      	mov	r0, r3
    1caa:	b005      	add	sp, #20
    1cac:	f85d fb04 	ldr.w	pc, [sp], #4

00001cb0 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1cb0:	b084      	sub	sp, #16
    1cb2:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1cb4:	2300      	movs	r3, #0
    1cb6:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1cb8:	4903      	ldr	r1, [pc, #12]	; (1cc8 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1cba:	9b03      	ldr	r3, [sp, #12]
    1cbc:	9a01      	ldr	r2, [sp, #4]
    1cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1cc2:	bf00      	nop
    1cc4:	b004      	add	sp, #16
    1cc6:	4770      	bx	lr
    1cc8:	1fff8b40 	.word	0x1fff8b40

00001ccc <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cce:	b087      	sub	sp, #28
    1cd0:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1cd2:	2100      	movs	r1, #0
    1cd4:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1cd6:	2100      	movs	r1, #0
    1cd8:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1cda:	9901      	ldr	r1, [sp, #4]
    1cdc:	2000      	movs	r0, #0
    1cde:	460e      	mov	r6, r1
    1ce0:	4607      	mov	r7, r0
    1ce2:	4812      	ldr	r0, [pc, #72]	; (1d2c <OsIf_Timer_System_MicrosToTicks+0x60>)
    1ce4:	9904      	ldr	r1, [sp, #16]
    1ce6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1cea:	2000      	movs	r0, #0
    1cec:	460c      	mov	r4, r1
    1cee:	4605      	mov	r5, r0
    1cf0:	fb04 f007 	mul.w	r0, r4, r7
    1cf4:	fb06 f105 	mul.w	r1, r6, r5
    1cf8:	4401      	add	r1, r0
    1cfa:	fba6 2304 	umull	r2, r3, r6, r4
    1cfe:	4419      	add	r1, r3
    1d00:	460b      	mov	r3, r1
    1d02:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1d06:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1d0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1d0e:	4a08      	ldr	r2, [pc, #32]	; (1d30 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1d10:	f04f 0300 	mov.w	r3, #0
    1d14:	f7fe fc46 	bl	5a4 <__aeabi_uldivmod>
    1d18:	4602      	mov	r2, r0
    1d1a:	460b      	mov	r3, r1
    1d1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1d20:	9b02      	ldr	r3, [sp, #8]
    1d22:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1d24:	9b05      	ldr	r3, [sp, #20]
}
    1d26:	4618      	mov	r0, r3
    1d28:	b007      	add	sp, #28
    1d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d2c:	1fff8b40 	.word	0x1fff8b40
    1d30:	000f4240 	.word	0x000f4240

00001d34 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1d34:	b082      	sub	sp, #8
    1d36:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1d38:	4b07      	ldr	r3, [pc, #28]	; (1d58 <OsIf_Timer_System_Internal_Init+0x24>)
    1d3a:	2200      	movs	r2, #0
    1d3c:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1d3e:	4b06      	ldr	r3, [pc, #24]	; (1d58 <OsIf_Timer_System_Internal_Init+0x24>)
    1d40:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1d44:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1d46:	4b04      	ldr	r3, [pc, #16]	; (1d58 <OsIf_Timer_System_Internal_Init+0x24>)
    1d48:	2200      	movs	r2, #0
    1d4a:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1d4c:	4b02      	ldr	r3, [pc, #8]	; (1d58 <OsIf_Timer_System_Internal_Init+0x24>)
    1d4e:	2205      	movs	r2, #5
    1d50:	601a      	str	r2, [r3, #0]
}
    1d52:	bf00      	nop
    1d54:	b002      	add	sp, #8
    1d56:	4770      	bx	lr
    1d58:	e000e010 	.word	0xe000e010

00001d5c <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1d5c:	4b02      	ldr	r3, [pc, #8]	; (1d68 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1d5e:	689b      	ldr	r3, [r3, #8]
    1d60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1d64:	4618      	mov	r0, r3
    1d66:	4770      	bx	lr
    1d68:	e000e010 	.word	0xe000e010

00001d6c <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1d6c:	b084      	sub	sp, #16
    1d6e:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1d70:	4b10      	ldr	r3, [pc, #64]	; (1db4 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1d72:	689b      	ldr	r3, [r3, #8]
    1d74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1d78:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1d7a:	2300      	movs	r3, #0
    1d7c:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1d7e:	9b01      	ldr	r3, [sp, #4]
    1d80:	681b      	ldr	r3, [r3, #0]
    1d82:	9a02      	ldr	r2, [sp, #8]
    1d84:	429a      	cmp	r2, r3
    1d86:	d909      	bls.n	1d9c <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1d88:	9b01      	ldr	r3, [sp, #4]
    1d8a:	681a      	ldr	r2, [r3, #0]
    1d8c:	9b02      	ldr	r3, [sp, #8]
    1d8e:	1ad3      	subs	r3, r2, r3
    1d90:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1d94:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1d98:	9303      	str	r3, [sp, #12]
    1d9a:	e004      	b.n	1da6 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1d9c:	9b01      	ldr	r3, [sp, #4]
    1d9e:	681a      	ldr	r2, [r3, #0]
    1da0:	9b02      	ldr	r3, [sp, #8]
    1da2:	1ad3      	subs	r3, r2, r3
    1da4:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1da6:	9b01      	ldr	r3, [sp, #4]
    1da8:	9a02      	ldr	r2, [sp, #8]
    1daa:	601a      	str	r2, [r3, #0]

    return dif;
    1dac:	9b03      	ldr	r3, [sp, #12]
}
    1dae:	4618      	mov	r0, r3
    1db0:	b004      	add	sp, #16
    1db2:	4770      	bx	lr
    1db4:	e000e010 	.word	0xe000e010

00001db8 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1db8:	b082      	sub	sp, #8
    1dba:	9001      	str	r0, [sp, #4]
    1dbc:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1dbe:	bf00      	nop
    1dc0:	b002      	add	sp, #8
    1dc2:	4770      	bx	lr

00001dc4 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1dc4:	b500      	push	{lr}
    1dc6:	b085      	sub	sp, #20
    1dc8:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1dca:	4b24      	ldr	r3, [pc, #144]	; (1e5c <Clock_Ip_UpdateDriverContext+0x98>)
    1dcc:	2201      	movs	r2, #1
    1dce:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1dd0:	4b23      	ldr	r3, [pc, #140]	; (1e60 <Clock_Ip_UpdateDriverContext+0x9c>)
    1dd2:	681b      	ldr	r3, [r3, #0]
    1dd4:	2102      	movs	r1, #2
    1dd6:	4618      	mov	r0, r3
    1dd8:	f003 fc32 	bl	5640 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1ddc:	2300      	movs	r3, #0
    1dde:	f88d 300f 	strb.w	r3, [sp, #15]
    1de2:	e015      	b.n	1e10 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1de4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1de8:	9a01      	ldr	r2, [sp, #4]
    1dea:	334a      	adds	r3, #74	; 0x4a
    1dec:	00db      	lsls	r3, r3, #3
    1dee:	4413      	add	r3, r2
    1df0:	6858      	ldr	r0, [r3, #4]
    1df2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1df6:	9a01      	ldr	r2, [sp, #4]
    1df8:	334a      	adds	r3, #74	; 0x4a
    1dfa:	00db      	lsls	r3, r3, #3
    1dfc:	4413      	add	r3, r2
    1dfe:	689b      	ldr	r3, [r3, #8]
    1e00:	4619      	mov	r1, r3
    1e02:	f001 fadc 	bl	33be <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1e06:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e0a:	3301      	adds	r3, #1
    1e0c:	f88d 300f 	strb.w	r3, [sp, #15]
    1e10:	9b01      	ldr	r3, [sp, #4]
    1e12:	7bdb      	ldrb	r3, [r3, #15]
    1e14:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e18:	429a      	cmp	r2, r3
    1e1a:	d3e3      	bcc.n	1de4 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1e1c:	f000 f824 	bl	1e68 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1e20:	2301      	movs	r3, #1
    1e22:	f88d 300f 	strb.w	r3, [sp, #15]
    1e26:	e00e      	b.n	1e46 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1e28:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e2c:	9b01      	ldr	r3, [sp, #4]
    1e2e:	327e      	adds	r2, #126	; 0x7e
    1e30:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1e34:	490b      	ldr	r1, [pc, #44]	; (1e64 <Clock_Ip_UpdateDriverContext+0xa0>)
    1e36:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e3a:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1e3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e40:	3301      	adds	r3, #1
    1e42:	f88d 300f 	strb.w	r3, [sp, #15]
    1e46:	9b01      	ldr	r3, [sp, #4]
    1e48:	7cdb      	ldrb	r3, [r3, #19]
    1e4a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e4e:	429a      	cmp	r2, r3
    1e50:	d3ea      	bcc.n	1e28 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1e52:	bf00      	nop
    1e54:	bf00      	nop
    1e56:	b005      	add	sp, #20
    1e58:	f85d fb04 	ldr.w	pc, [sp], #4
    1e5c:	1fff8b10 	.word	0x1fff8b10
    1e60:	1fff8b44 	.word	0x1fff8b44
    1e64:	1fff8b50 	.word	0x1fff8b50

00001e68 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1e68:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1e6a:	4b23      	ldr	r3, [pc, #140]	; (1ef8 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1e6c:	781b      	ldrb	r3, [r3, #0]
    1e6e:	f083 0301 	eor.w	r3, r3, #1
    1e72:	b2db      	uxtb	r3, r3
    1e74:	2b00      	cmp	r3, #0
    1e76:	d03d      	beq.n	1ef4 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1e78:	4b1f      	ldr	r3, [pc, #124]	; (1ef8 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1e7a:	2201      	movs	r2, #1
    1e7c:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1e7e:	4b1f      	ldr	r3, [pc, #124]	; (1efc <Clock_Ip_CallEmptyCallbacks+0x94>)
    1e80:	685b      	ldr	r3, [r3, #4]
    1e82:	2100      	movs	r1, #0
    1e84:	2000      	movs	r0, #0
    1e86:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1e88:	4b1c      	ldr	r3, [pc, #112]	; (1efc <Clock_Ip_CallEmptyCallbacks+0x94>)
    1e8a:	689b      	ldr	r3, [r3, #8]
    1e8c:	2057      	movs	r0, #87	; 0x57
    1e8e:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e90:	4b1b      	ldr	r3, [pc, #108]	; (1f00 <Clock_Ip_CallEmptyCallbacks+0x98>)
    1e92:	681b      	ldr	r3, [r3, #0]
    1e94:	2000      	movs	r0, #0
    1e96:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1e98:	4b1a      	ldr	r3, [pc, #104]	; (1f04 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1e9a:	681b      	ldr	r3, [r3, #0]
    1e9c:	2000      	movs	r0, #0
    1e9e:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1ea0:	4b19      	ldr	r3, [pc, #100]	; (1f08 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1ea2:	681b      	ldr	r3, [r3, #0]
    1ea4:	2000      	movs	r0, #0
    1ea6:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ea8:	4b18      	ldr	r3, [pc, #96]	; (1f0c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1eaa:	685b      	ldr	r3, [r3, #4]
    1eac:	2000      	movs	r0, #0
    1eae:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1eb0:	4b16      	ldr	r3, [pc, #88]	; (1f0c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1eb2:	689b      	ldr	r3, [r3, #8]
    1eb4:	2057      	movs	r0, #87	; 0x57
    1eb6:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1eb8:	4b15      	ldr	r3, [pc, #84]	; (1f10 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1eba:	681b      	ldr	r3, [r3, #0]
    1ebc:	2000      	movs	r0, #0
    1ebe:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1ec0:	4b13      	ldr	r3, [pc, #76]	; (1f10 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1ec2:	685b      	ldr	r3, [r3, #4]
    1ec4:	2100      	movs	r1, #0
    1ec6:	2057      	movs	r0, #87	; 0x57
    1ec8:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1eca:	4b12      	ldr	r3, [pc, #72]	; (1f14 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1ecc:	681b      	ldr	r3, [r3, #0]
    1ece:	2000      	movs	r0, #0
    1ed0:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ed2:	4b11      	ldr	r3, [pc, #68]	; (1f18 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1ed4:	685b      	ldr	r3, [r3, #4]
    1ed6:	2000      	movs	r0, #0
    1ed8:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1eda:	4b0f      	ldr	r3, [pc, #60]	; (1f18 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1edc:	689b      	ldr	r3, [r3, #8]
    1ede:	2057      	movs	r0, #87	; 0x57
    1ee0:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ee2:	4b0e      	ldr	r3, [pc, #56]	; (1f1c <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1ee4:	685b      	ldr	r3, [r3, #4]
    1ee6:	2000      	movs	r0, #0
    1ee8:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1eea:	4b0d      	ldr	r3, [pc, #52]	; (1f20 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1eec:	681b      	ldr	r3, [r3, #0]
    1eee:	2100      	movs	r1, #0
    1ef0:	2000      	movs	r0, #0
    1ef2:	4798      	blx	r3
    }
}
    1ef4:	bf00      	nop
    1ef6:	bd08      	pop	{r3, pc}
    1ef8:	1fff8b48 	.word	0x1fff8b48
    1efc:	0000acb8 	.word	0x0000acb8
    1f00:	0000abcc 	.word	0x0000abcc
    1f04:	0000ac08 	.word	0x0000ac08
    1f08:	0000ac10 	.word	0x0000ac10
    1f0c:	0000ac38 	.word	0x0000ac38
    1f10:	0000ac44 	.word	0x0000ac44
    1f14:	0000ac7c 	.word	0x0000ac7c
    1f18:	0000acc8 	.word	0x0000acc8
    1f1c:	0000acf4 	.word	0x0000acf4
    1f20:	0000acf0 	.word	0x0000acf0

00001f24 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1f24:	b500      	push	{lr}
    1f26:	b085      	sub	sp, #20
    1f28:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1f2a:	9b01      	ldr	r3, [sp, #4]
    1f2c:	7adb      	ldrb	r3, [r3, #11]
    1f2e:	9303      	str	r3, [sp, #12]
    1f30:	e01f      	b.n	1f72 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f32:	9b03      	ldr	r3, [sp, #12]
    1f34:	1e5a      	subs	r2, r3, #1
    1f36:	9b01      	ldr	r3, [sp, #4]
    1f38:	320d      	adds	r2, #13
    1f3a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1f3e:	495a      	ldr	r1, [pc, #360]	; (20a8 <Clock_Ip_ResetClockConfiguration+0x184>)
    1f40:	4613      	mov	r3, r2
    1f42:	00db      	lsls	r3, r3, #3
    1f44:	4413      	add	r3, r2
    1f46:	440b      	add	r3, r1
    1f48:	3301      	adds	r3, #1
    1f4a:	781b      	ldrb	r3, [r3, #0]
    1f4c:	461a      	mov	r2, r3
    1f4e:	4b57      	ldr	r3, [pc, #348]	; (20ac <Clock_Ip_ResetClockConfiguration+0x188>)
    1f50:	5c9b      	ldrb	r3, [r3, r2]
    1f52:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1f54:	4a56      	ldr	r2, [pc, #344]	; (20b0 <Clock_Ip_ResetClockConfiguration+0x18c>)
    1f56:	9b02      	ldr	r3, [sp, #8]
    1f58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f5c:	9a03      	ldr	r2, [sp, #12]
    1f5e:	3a01      	subs	r2, #1
    1f60:	320d      	adds	r2, #13
    1f62:	00d2      	lsls	r2, r2, #3
    1f64:	9901      	ldr	r1, [sp, #4]
    1f66:	440a      	add	r2, r1
    1f68:	4610      	mov	r0, r2
    1f6a:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1f6c:	9b03      	ldr	r3, [sp, #12]
    1f6e:	3b01      	subs	r3, #1
    1f70:	9303      	str	r3, [sp, #12]
    1f72:	9b03      	ldr	r3, [sp, #12]
    1f74:	2b00      	cmp	r3, #0
    1f76:	d1dc      	bne.n	1f32 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1f78:	9b01      	ldr	r3, [sp, #4]
    1f7a:	7b9b      	ldrb	r3, [r3, #14]
    1f7c:	9303      	str	r3, [sp, #12]
    1f7e:	e026      	b.n	1fce <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f80:	9b03      	ldr	r3, [sp, #12]
    1f82:	3b01      	subs	r3, #1
    1f84:	9a01      	ldr	r2, [sp, #4]
    1f86:	3324      	adds	r3, #36	; 0x24
    1f88:	011b      	lsls	r3, r3, #4
    1f8a:	4413      	add	r3, r2
    1f8c:	3304      	adds	r3, #4
    1f8e:	681a      	ldr	r2, [r3, #0]
    1f90:	4945      	ldr	r1, [pc, #276]	; (20a8 <Clock_Ip_ResetClockConfiguration+0x184>)
    1f92:	4613      	mov	r3, r2
    1f94:	00db      	lsls	r3, r3, #3
    1f96:	4413      	add	r3, r2
    1f98:	440b      	add	r3, r1
    1f9a:	3301      	adds	r3, #1
    1f9c:	781b      	ldrb	r3, [r3, #0]
    1f9e:	461a      	mov	r2, r3
    1fa0:	4b44      	ldr	r3, [pc, #272]	; (20b4 <Clock_Ip_ResetClockConfiguration+0x190>)
    1fa2:	5c9b      	ldrb	r3, [r3, r2]
    1fa4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1fa6:	4944      	ldr	r1, [pc, #272]	; (20b8 <Clock_Ip_ResetClockConfiguration+0x194>)
    1fa8:	9a02      	ldr	r2, [sp, #8]
    1faa:	4613      	mov	r3, r2
    1fac:	005b      	lsls	r3, r3, #1
    1fae:	4413      	add	r3, r2
    1fb0:	009b      	lsls	r3, r3, #2
    1fb2:	440b      	add	r3, r1
    1fb4:	681b      	ldr	r3, [r3, #0]
    1fb6:	9a03      	ldr	r2, [sp, #12]
    1fb8:	3a01      	subs	r2, #1
    1fba:	3224      	adds	r2, #36	; 0x24
    1fbc:	0112      	lsls	r2, r2, #4
    1fbe:	9901      	ldr	r1, [sp, #4]
    1fc0:	440a      	add	r2, r1
    1fc2:	3204      	adds	r2, #4
    1fc4:	4610      	mov	r0, r2
    1fc6:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1fc8:	9b03      	ldr	r3, [sp, #12]
    1fca:	3b01      	subs	r3, #1
    1fcc:	9303      	str	r3, [sp, #12]
    1fce:	9b03      	ldr	r3, [sp, #12]
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	d1d5      	bne.n	1f80 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1fd4:	9b01      	ldr	r3, [sp, #4]
    1fd6:	7a9b      	ldrb	r3, [r3, #10]
    1fd8:	9303      	str	r3, [sp, #12]
    1fda:	e02a      	b.n	2032 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1fdc:	9b03      	ldr	r3, [sp, #12]
    1fde:	1e5a      	subs	r2, r3, #1
    1fe0:	9901      	ldr	r1, [sp, #4]
    1fe2:	4613      	mov	r3, r2
    1fe4:	009b      	lsls	r3, r3, #2
    1fe6:	4413      	add	r3, r2
    1fe8:	00db      	lsls	r3, r3, #3
    1fea:	440b      	add	r3, r1
    1fec:	3340      	adds	r3, #64	; 0x40
    1fee:	681a      	ldr	r2, [r3, #0]
    1ff0:	492d      	ldr	r1, [pc, #180]	; (20a8 <Clock_Ip_ResetClockConfiguration+0x184>)
    1ff2:	4613      	mov	r3, r2
    1ff4:	00db      	lsls	r3, r3, #3
    1ff6:	4413      	add	r3, r2
    1ff8:	440b      	add	r3, r1
    1ffa:	3301      	adds	r3, #1
    1ffc:	781b      	ldrb	r3, [r3, #0]
    1ffe:	461a      	mov	r2, r3
    2000:	4b2e      	ldr	r3, [pc, #184]	; (20bc <Clock_Ip_ResetClockConfiguration+0x198>)
    2002:	5c9b      	ldrb	r3, [r3, r2]
    2004:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2006:	492e      	ldr	r1, [pc, #184]	; (20c0 <Clock_Ip_ResetClockConfiguration+0x19c>)
    2008:	9a02      	ldr	r2, [sp, #8]
    200a:	4613      	mov	r3, r2
    200c:	009b      	lsls	r3, r3, #2
    200e:	4413      	add	r3, r2
    2010:	009b      	lsls	r3, r3, #2
    2012:	440b      	add	r3, r1
    2014:	6819      	ldr	r1, [r3, #0]
    2016:	9b03      	ldr	r3, [sp, #12]
    2018:	1e5a      	subs	r2, r3, #1
    201a:	4613      	mov	r3, r2
    201c:	009b      	lsls	r3, r3, #2
    201e:	4413      	add	r3, r2
    2020:	00db      	lsls	r3, r3, #3
    2022:	3340      	adds	r3, #64	; 0x40
    2024:	9a01      	ldr	r2, [sp, #4]
    2026:	4413      	add	r3, r2
    2028:	4618      	mov	r0, r3
    202a:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    202c:	9b03      	ldr	r3, [sp, #12]
    202e:	3b01      	subs	r3, #1
    2030:	9303      	str	r3, [sp, #12]
    2032:	9b03      	ldr	r3, [sp, #12]
    2034:	2b00      	cmp	r3, #0
    2036:	d1d1      	bne.n	1fdc <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2038:	9b01      	ldr	r3, [sp, #4]
    203a:	7a5b      	ldrb	r3, [r3, #9]
    203c:	9303      	str	r3, [sp, #12]
    203e:	e02b      	b.n	2098 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2040:	9b03      	ldr	r3, [sp, #12]
    2042:	1e5a      	subs	r2, r3, #1
    2044:	9901      	ldr	r1, [sp, #4]
    2046:	4613      	mov	r3, r2
    2048:	009b      	lsls	r3, r3, #2
    204a:	4413      	add	r3, r2
    204c:	009b      	lsls	r3, r3, #2
    204e:	440b      	add	r3, r1
    2050:	332c      	adds	r3, #44	; 0x2c
    2052:	681a      	ldr	r2, [r3, #0]
    2054:	4914      	ldr	r1, [pc, #80]	; (20a8 <Clock_Ip_ResetClockConfiguration+0x184>)
    2056:	4613      	mov	r3, r2
    2058:	00db      	lsls	r3, r3, #3
    205a:	4413      	add	r3, r2
    205c:	440b      	add	r3, r1
    205e:	3301      	adds	r3, #1
    2060:	781b      	ldrb	r3, [r3, #0]
    2062:	461a      	mov	r2, r3
    2064:	4b17      	ldr	r3, [pc, #92]	; (20c4 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    2066:	5c9b      	ldrb	r3, [r3, r2]
    2068:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    206a:	4917      	ldr	r1, [pc, #92]	; (20c8 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    206c:	9a02      	ldr	r2, [sp, #8]
    206e:	4613      	mov	r3, r2
    2070:	009b      	lsls	r3, r3, #2
    2072:	4413      	add	r3, r2
    2074:	009b      	lsls	r3, r3, #2
    2076:	440b      	add	r3, r1
    2078:	6819      	ldr	r1, [r3, #0]
    207a:	9b03      	ldr	r3, [sp, #12]
    207c:	1e5a      	subs	r2, r3, #1
    207e:	4613      	mov	r3, r2
    2080:	009b      	lsls	r3, r3, #2
    2082:	4413      	add	r3, r2
    2084:	009b      	lsls	r3, r3, #2
    2086:	3328      	adds	r3, #40	; 0x28
    2088:	9a01      	ldr	r2, [sp, #4]
    208a:	4413      	add	r3, r2
    208c:	3304      	adds	r3, #4
    208e:	4618      	mov	r0, r3
    2090:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2092:	9b03      	ldr	r3, [sp, #12]
    2094:	3b01      	subs	r3, #1
    2096:	9303      	str	r3, [sp, #12]
    2098:	9b03      	ldr	r3, [sp, #12]
    209a:	2b00      	cmp	r3, #0
    209c:	d1d0      	bne.n	2040 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    209e:	bf00      	nop
    20a0:	bf00      	nop
    20a2:	b005      	add	sp, #20
    20a4:	f85d fb04 	ldr.w	pc, [sp], #4
    20a8:	0000a6bc 	.word	0x0000a6bc
    20ac:	0000a68c 	.word	0x0000a68c
    20b0:	0000acf4 	.word	0x0000acf4
    20b4:	0000a66c 	.word	0x0000a66c
    20b8:	0000ac38 	.word	0x0000ac38
    20bc:	0000a67c 	.word	0x0000a67c
    20c0:	0000acc8 	.word	0x0000acc8
    20c4:	0000a63c 	.word	0x0000a63c
    20c8:	0000ac10 	.word	0x0000ac10

000020cc <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    20cc:	b500      	push	{lr}
    20ce:	b085      	sub	sp, #20
    20d0:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    20d2:	2301      	movs	r3, #1
    20d4:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    20d6:	9801      	ldr	r0, [sp, #4]
    20d8:	f000 f818 	bl	210c <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    20dc:	4b0a      	ldr	r3, [pc, #40]	; (2108 <Clock_Ip_Init+0x3c>)
    20de:	781b      	ldrb	r3, [r3, #0]
    20e0:	2b00      	cmp	r3, #0
    20e2:	d00a      	beq.n	20fa <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    20e4:	f000 fb74 	bl	27d0 <Clock_Ip_GetPllStatus>
    20e8:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    20ea:	9b02      	ldr	r3, [sp, #8]
    20ec:	2b00      	cmp	r3, #0
    20ee:	d106      	bne.n	20fe <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    20f0:	f000 fbf2 	bl	28d8 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    20f4:	2300      	movs	r3, #0
    20f6:	9303      	str	r3, [sp, #12]
    20f8:	e001      	b.n	20fe <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    20fa:	2300      	movs	r3, #0
    20fc:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    20fe:	9b03      	ldr	r3, [sp, #12]
}
    2100:	4618      	mov	r0, r3
    2102:	b005      	add	sp, #20
    2104:	f85d fb04 	ldr.w	pc, [sp], #4
    2108:	1fff8b4c 	.word	0x1fff8b4c

0000210c <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    210c:	b510      	push	{r4, lr}
    210e:	b084      	sub	sp, #16
    2110:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2112:	4a9f      	ldr	r2, [pc, #636]	; (2390 <Clock_Ip_InitClock+0x284>)
    2114:	9b01      	ldr	r3, [sp, #4]
    2116:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2118:	2101      	movs	r1, #1
    211a:	9801      	ldr	r0, [sp, #4]
    211c:	f003 fa90 	bl	5640 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2120:	4b9b      	ldr	r3, [pc, #620]	; (2390 <Clock_Ip_InitClock+0x284>)
    2122:	681b      	ldr	r3, [r3, #0]
    2124:	2b00      	cmp	r3, #0
    2126:	d030      	beq.n	218a <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2128:	2300      	movs	r3, #0
    212a:	9303      	str	r3, [sp, #12]
    212c:	e027      	b.n	217e <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    212e:	9901      	ldr	r1, [sp, #4]
    2130:	9a03      	ldr	r2, [sp, #12]
    2132:	4613      	mov	r3, r2
    2134:	009b      	lsls	r3, r3, #2
    2136:	4413      	add	r3, r2
    2138:	009b      	lsls	r3, r3, #2
    213a:	440b      	add	r3, r1
    213c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2140:	681a      	ldr	r2, [r3, #0]
    2142:	4994      	ldr	r1, [pc, #592]	; (2394 <Clock_Ip_InitClock+0x288>)
    2144:	4613      	mov	r3, r2
    2146:	00db      	lsls	r3, r3, #3
    2148:	4413      	add	r3, r2
    214a:	440b      	add	r3, r1
    214c:	3301      	adds	r3, #1
    214e:	781b      	ldrb	r3, [r3, #0]
    2150:	461a      	mov	r2, r3
    2152:	4b91      	ldr	r3, [pc, #580]	; (2398 <Clock_Ip_InitClock+0x28c>)
    2154:	5c9b      	ldrb	r3, [r3, r2]
    2156:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2158:	4a90      	ldr	r2, [pc, #576]	; (239c <Clock_Ip_InitClock+0x290>)
    215a:	9b02      	ldr	r3, [sp, #8]
    215c:	011b      	lsls	r3, r3, #4
    215e:	4413      	add	r3, r2
    2160:	6819      	ldr	r1, [r3, #0]
    2162:	9a03      	ldr	r2, [sp, #12]
    2164:	4613      	mov	r3, r2
    2166:	009b      	lsls	r3, r3, #2
    2168:	4413      	add	r3, r2
    216a:	009b      	lsls	r3, r3, #2
    216c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2170:	9a01      	ldr	r2, [sp, #4]
    2172:	4413      	add	r3, r2
    2174:	4618      	mov	r0, r3
    2176:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2178:	9b03      	ldr	r3, [sp, #12]
    217a:	3301      	adds	r3, #1
    217c:	9303      	str	r3, [sp, #12]
    217e:	9b01      	ldr	r3, [sp, #4]
    2180:	7c9b      	ldrb	r3, [r3, #18]
    2182:	461a      	mov	r2, r3
    2184:	9b03      	ldr	r3, [sp, #12]
    2186:	4293      	cmp	r3, r2
    2188:	d3d1      	bcc.n	212e <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    218a:	9801      	ldr	r0, [sp, #4]
    218c:	f7ff feca 	bl	1f24 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2190:	2300      	movs	r3, #0
    2192:	9303      	str	r3, [sp, #12]
    2194:	e029      	b.n	21ea <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2196:	9901      	ldr	r1, [sp, #4]
    2198:	9a03      	ldr	r2, [sp, #12]
    219a:	4613      	mov	r3, r2
    219c:	005b      	lsls	r3, r3, #1
    219e:	4413      	add	r3, r2
    21a0:	009b      	lsls	r3, r3, #2
    21a2:	440b      	add	r3, r1
    21a4:	3314      	adds	r3, #20
    21a6:	681a      	ldr	r2, [r3, #0]
    21a8:	497a      	ldr	r1, [pc, #488]	; (2394 <Clock_Ip_InitClock+0x288>)
    21aa:	4613      	mov	r3, r2
    21ac:	00db      	lsls	r3, r3, #3
    21ae:	4413      	add	r3, r2
    21b0:	440b      	add	r3, r1
    21b2:	3301      	adds	r3, #1
    21b4:	781b      	ldrb	r3, [r3, #0]
    21b6:	461a      	mov	r2, r3
    21b8:	4b79      	ldr	r3, [pc, #484]	; (23a0 <Clock_Ip_InitClock+0x294>)
    21ba:	5c9b      	ldrb	r3, [r3, r2]
    21bc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    21be:	4979      	ldr	r1, [pc, #484]	; (23a4 <Clock_Ip_InitClock+0x298>)
    21c0:	9a02      	ldr	r2, [sp, #8]
    21c2:	4613      	mov	r3, r2
    21c4:	005b      	lsls	r3, r3, #1
    21c6:	4413      	add	r3, r2
    21c8:	009b      	lsls	r3, r3, #2
    21ca:	440b      	add	r3, r1
    21cc:	6819      	ldr	r1, [r3, #0]
    21ce:	9a03      	ldr	r2, [sp, #12]
    21d0:	4613      	mov	r3, r2
    21d2:	005b      	lsls	r3, r3, #1
    21d4:	4413      	add	r3, r2
    21d6:	009b      	lsls	r3, r3, #2
    21d8:	3310      	adds	r3, #16
    21da:	9a01      	ldr	r2, [sp, #4]
    21dc:	4413      	add	r3, r2
    21de:	3304      	adds	r3, #4
    21e0:	4618      	mov	r0, r3
    21e2:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    21e4:	9b03      	ldr	r3, [sp, #12]
    21e6:	3301      	adds	r3, #1
    21e8:	9303      	str	r3, [sp, #12]
    21ea:	9b01      	ldr	r3, [sp, #4]
    21ec:	7a1b      	ldrb	r3, [r3, #8]
    21ee:	461a      	mov	r2, r3
    21f0:	9b03      	ldr	r3, [sp, #12]
    21f2:	4293      	cmp	r3, r2
    21f4:	d3cf      	bcc.n	2196 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    21f6:	2300      	movs	r3, #0
    21f8:	9303      	str	r3, [sp, #12]
    21fa:	e02a      	b.n	2252 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    21fc:	9901      	ldr	r1, [sp, #4]
    21fe:	9a03      	ldr	r2, [sp, #12]
    2200:	4613      	mov	r3, r2
    2202:	009b      	lsls	r3, r3, #2
    2204:	4413      	add	r3, r2
    2206:	009b      	lsls	r3, r3, #2
    2208:	440b      	add	r3, r1
    220a:	332c      	adds	r3, #44	; 0x2c
    220c:	681a      	ldr	r2, [r3, #0]
    220e:	4961      	ldr	r1, [pc, #388]	; (2394 <Clock_Ip_InitClock+0x288>)
    2210:	4613      	mov	r3, r2
    2212:	00db      	lsls	r3, r3, #3
    2214:	4413      	add	r3, r2
    2216:	440b      	add	r3, r1
    2218:	3301      	adds	r3, #1
    221a:	781b      	ldrb	r3, [r3, #0]
    221c:	461a      	mov	r2, r3
    221e:	4b62      	ldr	r3, [pc, #392]	; (23a8 <Clock_Ip_InitClock+0x29c>)
    2220:	5c9b      	ldrb	r3, [r3, r2]
    2222:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2224:	4961      	ldr	r1, [pc, #388]	; (23ac <Clock_Ip_InitClock+0x2a0>)
    2226:	9a02      	ldr	r2, [sp, #8]
    2228:	4613      	mov	r3, r2
    222a:	009b      	lsls	r3, r3, #2
    222c:	4413      	add	r3, r2
    222e:	009b      	lsls	r3, r3, #2
    2230:	440b      	add	r3, r1
    2232:	3304      	adds	r3, #4
    2234:	6819      	ldr	r1, [r3, #0]
    2236:	9a03      	ldr	r2, [sp, #12]
    2238:	4613      	mov	r3, r2
    223a:	009b      	lsls	r3, r3, #2
    223c:	4413      	add	r3, r2
    223e:	009b      	lsls	r3, r3, #2
    2240:	3328      	adds	r3, #40	; 0x28
    2242:	9a01      	ldr	r2, [sp, #4]
    2244:	4413      	add	r3, r2
    2246:	3304      	adds	r3, #4
    2248:	4618      	mov	r0, r3
    224a:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    224c:	9b03      	ldr	r3, [sp, #12]
    224e:	3301      	adds	r3, #1
    2250:	9303      	str	r3, [sp, #12]
    2252:	9b01      	ldr	r3, [sp, #4]
    2254:	7a5b      	ldrb	r3, [r3, #9]
    2256:	461a      	mov	r2, r3
    2258:	9b03      	ldr	r3, [sp, #12]
    225a:	4293      	cmp	r3, r2
    225c:	d3ce      	bcc.n	21fc <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    225e:	9801      	ldr	r0, [sp, #4]
    2260:	f7ff fdb0 	bl	1dc4 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2264:	2300      	movs	r3, #0
    2266:	9303      	str	r3, [sp, #12]
    2268:	e028      	b.n	22bc <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    226a:	9901      	ldr	r1, [sp, #4]
    226c:	9a03      	ldr	r2, [sp, #12]
    226e:	4613      	mov	r3, r2
    2270:	009b      	lsls	r3, r3, #2
    2272:	4413      	add	r3, r2
    2274:	009b      	lsls	r3, r3, #2
    2276:	440b      	add	r3, r1
    2278:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    227c:	681a      	ldr	r2, [r3, #0]
    227e:	4945      	ldr	r1, [pc, #276]	; (2394 <Clock_Ip_InitClock+0x288>)
    2280:	4613      	mov	r3, r2
    2282:	00db      	lsls	r3, r3, #3
    2284:	4413      	add	r3, r2
    2286:	440b      	add	r3, r1
    2288:	3301      	adds	r3, #1
    228a:	781b      	ldrb	r3, [r3, #0]
    228c:	461a      	mov	r2, r3
    228e:	4b48      	ldr	r3, [pc, #288]	; (23b0 <Clock_Ip_InitClock+0x2a4>)
    2290:	5c9b      	ldrb	r3, [r3, r2]
    2292:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2294:	4a47      	ldr	r2, [pc, #284]	; (23b4 <Clock_Ip_InitClock+0x2a8>)
    2296:	9b02      	ldr	r3, [sp, #8]
    2298:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    229c:	9a03      	ldr	r2, [sp, #12]
    229e:	4613      	mov	r3, r2
    22a0:	009b      	lsls	r3, r3, #2
    22a2:	4413      	add	r3, r2
    22a4:	009b      	lsls	r3, r3, #2
    22a6:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    22aa:	9a01      	ldr	r2, [sp, #4]
    22ac:	4413      	add	r3, r2
    22ae:	3304      	adds	r3, #4
    22b0:	9903      	ldr	r1, [sp, #12]
    22b2:	4618      	mov	r0, r3
    22b4:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    22b6:	9b03      	ldr	r3, [sp, #12]
    22b8:	3301      	adds	r3, #1
    22ba:	9303      	str	r3, [sp, #12]
    22bc:	9b01      	ldr	r3, [sp, #4]
    22be:	7c5b      	ldrb	r3, [r3, #17]
    22c0:	461a      	mov	r2, r3
    22c2:	9b03      	ldr	r3, [sp, #12]
    22c4:	4293      	cmp	r3, r2
    22c6:	d3d0      	bcc.n	226a <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    22c8:	2300      	movs	r3, #0
    22ca:	9303      	str	r3, [sp, #12]
    22cc:	e026      	b.n	231c <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    22ce:	9901      	ldr	r1, [sp, #4]
    22d0:	9a03      	ldr	r2, [sp, #12]
    22d2:	4613      	mov	r3, r2
    22d4:	005b      	lsls	r3, r3, #1
    22d6:	4413      	add	r3, r2
    22d8:	009b      	lsls	r3, r3, #2
    22da:	440b      	add	r3, r1
    22dc:	f503 730e 	add.w	r3, r3, #568	; 0x238
    22e0:	681a      	ldr	r2, [r3, #0]
    22e2:	492c      	ldr	r1, [pc, #176]	; (2394 <Clock_Ip_InitClock+0x288>)
    22e4:	4613      	mov	r3, r2
    22e6:	00db      	lsls	r3, r3, #3
    22e8:	4413      	add	r3, r2
    22ea:	440b      	add	r3, r1
    22ec:	3301      	adds	r3, #1
    22ee:	781b      	ldrb	r3, [r3, #0]
    22f0:	461a      	mov	r2, r3
    22f2:	4b31      	ldr	r3, [pc, #196]	; (23b8 <Clock_Ip_InitClock+0x2ac>)
    22f4:	5c9b      	ldrb	r3, [r3, r2]
    22f6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    22f8:	4a30      	ldr	r2, [pc, #192]	; (23bc <Clock_Ip_InitClock+0x2b0>)
    22fa:	9b02      	ldr	r3, [sp, #8]
    22fc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2300:	9a03      	ldr	r2, [sp, #12]
    2302:	4613      	mov	r3, r2
    2304:	005b      	lsls	r3, r3, #1
    2306:	4413      	add	r3, r2
    2308:	009b      	lsls	r3, r3, #2
    230a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    230e:	9a01      	ldr	r2, [sp, #4]
    2310:	4413      	add	r3, r2
    2312:	4618      	mov	r0, r3
    2314:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2316:	9b03      	ldr	r3, [sp, #12]
    2318:	3301      	adds	r3, #1
    231a:	9303      	str	r3, [sp, #12]
    231c:	9b01      	ldr	r3, [sp, #4]
    231e:	7b5b      	ldrb	r3, [r3, #13]
    2320:	461a      	mov	r2, r3
    2322:	9b03      	ldr	r3, [sp, #12]
    2324:	4293      	cmp	r3, r2
    2326:	d3d2      	bcc.n	22ce <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2328:	2300      	movs	r3, #0
    232a:	9303      	str	r3, [sp, #12]
    232c:	e026      	b.n	237c <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    232e:	9901      	ldr	r1, [sp, #4]
    2330:	9a03      	ldr	r2, [sp, #12]
    2332:	4613      	mov	r3, r2
    2334:	005b      	lsls	r3, r3, #1
    2336:	4413      	add	r3, r2
    2338:	009b      	lsls	r3, r3, #2
    233a:	440b      	add	r3, r1
    233c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2340:	681a      	ldr	r2, [r3, #0]
    2342:	4914      	ldr	r1, [pc, #80]	; (2394 <Clock_Ip_InitClock+0x288>)
    2344:	4613      	mov	r3, r2
    2346:	00db      	lsls	r3, r3, #3
    2348:	4413      	add	r3, r2
    234a:	440b      	add	r3, r1
    234c:	3301      	adds	r3, #1
    234e:	781b      	ldrb	r3, [r3, #0]
    2350:	461a      	mov	r2, r3
    2352:	4b1b      	ldr	r3, [pc, #108]	; (23c0 <Clock_Ip_InitClock+0x2b4>)
    2354:	5c9b      	ldrb	r3, [r3, r2]
    2356:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    2358:	4a1a      	ldr	r2, [pc, #104]	; (23c4 <Clock_Ip_InitClock+0x2b8>)
    235a:	9b02      	ldr	r3, [sp, #8]
    235c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    2360:	9a03      	ldr	r2, [sp, #12]
    2362:	4613      	mov	r3, r2
    2364:	005b      	lsls	r3, r3, #1
    2366:	4413      	add	r3, r2
    2368:	009b      	lsls	r3, r3, #2
    236a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    236e:	9a01      	ldr	r2, [sp, #4]
    2370:	4413      	add	r3, r2
    2372:	4618      	mov	r0, r3
    2374:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2376:	9b03      	ldr	r3, [sp, #12]
    2378:	3301      	adds	r3, #1
    237a:	9303      	str	r3, [sp, #12]
    237c:	9b01      	ldr	r3, [sp, #4]
    237e:	7b1b      	ldrb	r3, [r3, #12]
    2380:	461a      	mov	r2, r3
    2382:	9b03      	ldr	r3, [sp, #12]
    2384:	4293      	cmp	r3, r2
    2386:	d3d2      	bcc.n	232e <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2388:	2300      	movs	r3, #0
    238a:	9303      	str	r3, [sp, #12]
    238c:	e044      	b.n	2418 <Clock_Ip_InitClock+0x30c>
    238e:	bf00      	nop
    2390:	1fff8b44 	.word	0x1fff8b44
    2394:	0000a6bc 	.word	0x0000a6bc
    2398:	0000a6ac 	.word	0x0000a6ac
    239c:	0000acb8 	.word	0x0000acb8
    23a0:	0000a64c 	.word	0x0000a64c
    23a4:	0000ac7c 	.word	0x0000ac7c
    23a8:	0000a63c 	.word	0x0000a63c
    23ac:	0000ac10 	.word	0x0000ac10
    23b0:	0000a69c 	.word	0x0000a69c
    23b4:	0000acf0 	.word	0x0000acf0
    23b8:	0000a62c 	.word	0x0000a62c
    23bc:	0000ac08 	.word	0x0000ac08
    23c0:	0000a61c 	.word	0x0000a61c
    23c4:	0000abcc 	.word	0x0000abcc
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    23c8:	9901      	ldr	r1, [sp, #4]
    23ca:	9a03      	ldr	r2, [sp, #12]
    23cc:	4613      	mov	r3, r2
    23ce:	005b      	lsls	r3, r3, #1
    23d0:	4413      	add	r3, r2
    23d2:	009b      	lsls	r3, r3, #2
    23d4:	440b      	add	r3, r1
    23d6:	f503 730e 	add.w	r3, r3, #568	; 0x238
    23da:	681a      	ldr	r2, [r3, #0]
    23dc:	49ac      	ldr	r1, [pc, #688]	; (2690 <Clock_Ip_InitClock+0x584>)
    23de:	4613      	mov	r3, r2
    23e0:	00db      	lsls	r3, r3, #3
    23e2:	4413      	add	r3, r2
    23e4:	440b      	add	r3, r1
    23e6:	3301      	adds	r3, #1
    23e8:	781b      	ldrb	r3, [r3, #0]
    23ea:	461a      	mov	r2, r3
    23ec:	4ba9      	ldr	r3, [pc, #676]	; (2694 <Clock_Ip_InitClock+0x588>)
    23ee:	5c9b      	ldrb	r3, [r3, r2]
    23f0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    23f2:	4aa9      	ldr	r2, [pc, #676]	; (2698 <Clock_Ip_InitClock+0x58c>)
    23f4:	9b02      	ldr	r3, [sp, #8]
    23f6:	00db      	lsls	r3, r3, #3
    23f8:	4413      	add	r3, r2
    23fa:	6859      	ldr	r1, [r3, #4]
    23fc:	9a03      	ldr	r2, [sp, #12]
    23fe:	4613      	mov	r3, r2
    2400:	005b      	lsls	r3, r3, #1
    2402:	4413      	add	r3, r2
    2404:	009b      	lsls	r3, r3, #2
    2406:	f503 730e 	add.w	r3, r3, #568	; 0x238
    240a:	9a01      	ldr	r2, [sp, #4]
    240c:	4413      	add	r3, r2
    240e:	4618      	mov	r0, r3
    2410:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2412:	9b03      	ldr	r3, [sp, #12]
    2414:	3301      	adds	r3, #1
    2416:	9303      	str	r3, [sp, #12]
    2418:	9b01      	ldr	r3, [sp, #4]
    241a:	7b5b      	ldrb	r3, [r3, #13]
    241c:	461a      	mov	r2, r3
    241e:	9b03      	ldr	r3, [sp, #12]
    2420:	4293      	cmp	r3, r2
    2422:	d3d1      	bcc.n	23c8 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2424:	2300      	movs	r3, #0
    2426:	9303      	str	r3, [sp, #12]
    2428:	e029      	b.n	247e <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    242a:	9901      	ldr	r1, [sp, #4]
    242c:	9a03      	ldr	r2, [sp, #12]
    242e:	4613      	mov	r3, r2
    2430:	009b      	lsls	r3, r3, #2
    2432:	4413      	add	r3, r2
    2434:	00db      	lsls	r3, r3, #3
    2436:	440b      	add	r3, r1
    2438:	3340      	adds	r3, #64	; 0x40
    243a:	681a      	ldr	r2, [r3, #0]
    243c:	4994      	ldr	r1, [pc, #592]	; (2690 <Clock_Ip_InitClock+0x584>)
    243e:	4613      	mov	r3, r2
    2440:	00db      	lsls	r3, r3, #3
    2442:	4413      	add	r3, r2
    2444:	440b      	add	r3, r1
    2446:	3301      	adds	r3, #1
    2448:	781b      	ldrb	r3, [r3, #0]
    244a:	461a      	mov	r2, r3
    244c:	4b93      	ldr	r3, [pc, #588]	; (269c <Clock_Ip_InitClock+0x590>)
    244e:	5c9b      	ldrb	r3, [r3, r2]
    2450:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    2452:	4993      	ldr	r1, [pc, #588]	; (26a0 <Clock_Ip_InitClock+0x594>)
    2454:	9a02      	ldr	r2, [sp, #8]
    2456:	4613      	mov	r3, r2
    2458:	009b      	lsls	r3, r3, #2
    245a:	4413      	add	r3, r2
    245c:	009b      	lsls	r3, r3, #2
    245e:	440b      	add	r3, r1
    2460:	3304      	adds	r3, #4
    2462:	6819      	ldr	r1, [r3, #0]
    2464:	9a03      	ldr	r2, [sp, #12]
    2466:	4613      	mov	r3, r2
    2468:	009b      	lsls	r3, r3, #2
    246a:	4413      	add	r3, r2
    246c:	00db      	lsls	r3, r3, #3
    246e:	3340      	adds	r3, #64	; 0x40
    2470:	9a01      	ldr	r2, [sp, #4]
    2472:	4413      	add	r3, r2
    2474:	4618      	mov	r0, r3
    2476:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2478:	9b03      	ldr	r3, [sp, #12]
    247a:	3301      	adds	r3, #1
    247c:	9303      	str	r3, [sp, #12]
    247e:	9b01      	ldr	r3, [sp, #4]
    2480:	7a9b      	ldrb	r3, [r3, #10]
    2482:	461a      	mov	r2, r3
    2484:	9b03      	ldr	r3, [sp, #12]
    2486:	4293      	cmp	r3, r2
    2488:	d3cf      	bcc.n	242a <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    248a:	2300      	movs	r3, #0
    248c:	9303      	str	r3, [sp, #12]
    248e:	e029      	b.n	24e4 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2490:	9901      	ldr	r1, [sp, #4]
    2492:	9a03      	ldr	r2, [sp, #12]
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	440b      	add	r3, r1
    249e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24a2:	681a      	ldr	r2, [r3, #0]
    24a4:	497a      	ldr	r1, [pc, #488]	; (2690 <Clock_Ip_InitClock+0x584>)
    24a6:	4613      	mov	r3, r2
    24a8:	00db      	lsls	r3, r3, #3
    24aa:	4413      	add	r3, r2
    24ac:	440b      	add	r3, r1
    24ae:	3301      	adds	r3, #1
    24b0:	781b      	ldrb	r3, [r3, #0]
    24b2:	461a      	mov	r2, r3
    24b4:	4b7b      	ldr	r3, [pc, #492]	; (26a4 <Clock_Ip_InitClock+0x598>)
    24b6:	5c9b      	ldrb	r3, [r3, r2]
    24b8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    24ba:	4a7b      	ldr	r2, [pc, #492]	; (26a8 <Clock_Ip_InitClock+0x59c>)
    24bc:	9b02      	ldr	r3, [sp, #8]
    24be:	011b      	lsls	r3, r3, #4
    24c0:	4413      	add	r3, r2
    24c2:	3304      	adds	r3, #4
    24c4:	681c      	ldr	r4, [r3, #0]
    24c6:	9a03      	ldr	r2, [sp, #12]
    24c8:	4613      	mov	r3, r2
    24ca:	009b      	lsls	r3, r3, #2
    24cc:	4413      	add	r3, r2
    24ce:	009b      	lsls	r3, r3, #2
    24d0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24d4:	9a01      	ldr	r2, [sp, #4]
    24d6:	4413      	add	r3, r2
    24d8:	9903      	ldr	r1, [sp, #12]
    24da:	4618      	mov	r0, r3
    24dc:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    24de:	9b03      	ldr	r3, [sp, #12]
    24e0:	3301      	adds	r3, #1
    24e2:	9303      	str	r3, [sp, #12]
    24e4:	9b01      	ldr	r3, [sp, #4]
    24e6:	7c9b      	ldrb	r3, [r3, #18]
    24e8:	461a      	mov	r2, r3
    24ea:	9b03      	ldr	r3, [sp, #12]
    24ec:	4293      	cmp	r3, r2
    24ee:	d3cf      	bcc.n	2490 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    24f0:	2300      	movs	r3, #0
    24f2:	9303      	str	r3, [sp, #12]
    24f4:	e02a      	b.n	254c <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    24f6:	9901      	ldr	r1, [sp, #4]
    24f8:	9a03      	ldr	r2, [sp, #12]
    24fa:	4613      	mov	r3, r2
    24fc:	009b      	lsls	r3, r3, #2
    24fe:	4413      	add	r3, r2
    2500:	009b      	lsls	r3, r3, #2
    2502:	440b      	add	r3, r1
    2504:	332c      	adds	r3, #44	; 0x2c
    2506:	681a      	ldr	r2, [r3, #0]
    2508:	4961      	ldr	r1, [pc, #388]	; (2690 <Clock_Ip_InitClock+0x584>)
    250a:	4613      	mov	r3, r2
    250c:	00db      	lsls	r3, r3, #3
    250e:	4413      	add	r3, r2
    2510:	440b      	add	r3, r1
    2512:	3301      	adds	r3, #1
    2514:	781b      	ldrb	r3, [r3, #0]
    2516:	461a      	mov	r2, r3
    2518:	4b64      	ldr	r3, [pc, #400]	; (26ac <Clock_Ip_InitClock+0x5a0>)
    251a:	5c9b      	ldrb	r3, [r3, r2]
    251c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    251e:	4964      	ldr	r1, [pc, #400]	; (26b0 <Clock_Ip_InitClock+0x5a4>)
    2520:	9a02      	ldr	r2, [sp, #8]
    2522:	4613      	mov	r3, r2
    2524:	009b      	lsls	r3, r3, #2
    2526:	4413      	add	r3, r2
    2528:	009b      	lsls	r3, r3, #2
    252a:	440b      	add	r3, r1
    252c:	3308      	adds	r3, #8
    252e:	6819      	ldr	r1, [r3, #0]
    2530:	9a03      	ldr	r2, [sp, #12]
    2532:	4613      	mov	r3, r2
    2534:	009b      	lsls	r3, r3, #2
    2536:	4413      	add	r3, r2
    2538:	009b      	lsls	r3, r3, #2
    253a:	3328      	adds	r3, #40	; 0x28
    253c:	9a01      	ldr	r2, [sp, #4]
    253e:	4413      	add	r3, r2
    2540:	3304      	adds	r3, #4
    2542:	4618      	mov	r0, r3
    2544:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2546:	9b03      	ldr	r3, [sp, #12]
    2548:	3301      	adds	r3, #1
    254a:	9303      	str	r3, [sp, #12]
    254c:	9b01      	ldr	r3, [sp, #4]
    254e:	7a5b      	ldrb	r3, [r3, #9]
    2550:	461a      	mov	r2, r3
    2552:	9b03      	ldr	r3, [sp, #12]
    2554:	4293      	cmp	r3, r2
    2556:	d3ce      	bcc.n	24f6 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2558:	2300      	movs	r3, #0
    255a:	9303      	str	r3, [sp, #12]
    255c:	e029      	b.n	25b2 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    255e:	9901      	ldr	r1, [sp, #4]
    2560:	9a03      	ldr	r2, [sp, #12]
    2562:	4613      	mov	r3, r2
    2564:	009b      	lsls	r3, r3, #2
    2566:	4413      	add	r3, r2
    2568:	00db      	lsls	r3, r3, #3
    256a:	440b      	add	r3, r1
    256c:	3340      	adds	r3, #64	; 0x40
    256e:	681a      	ldr	r2, [r3, #0]
    2570:	4947      	ldr	r1, [pc, #284]	; (2690 <Clock_Ip_InitClock+0x584>)
    2572:	4613      	mov	r3, r2
    2574:	00db      	lsls	r3, r3, #3
    2576:	4413      	add	r3, r2
    2578:	440b      	add	r3, r1
    257a:	3301      	adds	r3, #1
    257c:	781b      	ldrb	r3, [r3, #0]
    257e:	461a      	mov	r2, r3
    2580:	4b46      	ldr	r3, [pc, #280]	; (269c <Clock_Ip_InitClock+0x590>)
    2582:	5c9b      	ldrb	r3, [r3, r2]
    2584:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    2586:	4946      	ldr	r1, [pc, #280]	; (26a0 <Clock_Ip_InitClock+0x594>)
    2588:	9a02      	ldr	r2, [sp, #8]
    258a:	4613      	mov	r3, r2
    258c:	009b      	lsls	r3, r3, #2
    258e:	4413      	add	r3, r2
    2590:	009b      	lsls	r3, r3, #2
    2592:	440b      	add	r3, r1
    2594:	330c      	adds	r3, #12
    2596:	6819      	ldr	r1, [r3, #0]
    2598:	9a03      	ldr	r2, [sp, #12]
    259a:	4613      	mov	r3, r2
    259c:	009b      	lsls	r3, r3, #2
    259e:	4413      	add	r3, r2
    25a0:	00db      	lsls	r3, r3, #3
    25a2:	3340      	adds	r3, #64	; 0x40
    25a4:	9a01      	ldr	r2, [sp, #4]
    25a6:	4413      	add	r3, r2
    25a8:	4618      	mov	r0, r3
    25aa:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    25ac:	9b03      	ldr	r3, [sp, #12]
    25ae:	3301      	adds	r3, #1
    25b0:	9303      	str	r3, [sp, #12]
    25b2:	9b01      	ldr	r3, [sp, #4]
    25b4:	7a9b      	ldrb	r3, [r3, #10]
    25b6:	461a      	mov	r2, r3
    25b8:	9b03      	ldr	r3, [sp, #12]
    25ba:	4293      	cmp	r3, r2
    25bc:	d3cf      	bcc.n	255e <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    25be:	2300      	movs	r3, #0
    25c0:	9303      	str	r3, [sp, #12]
    25c2:	e025      	b.n	2610 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    25c4:	9a01      	ldr	r2, [sp, #4]
    25c6:	9b03      	ldr	r3, [sp, #12]
    25c8:	3324      	adds	r3, #36	; 0x24
    25ca:	011b      	lsls	r3, r3, #4
    25cc:	4413      	add	r3, r2
    25ce:	3304      	adds	r3, #4
    25d0:	681a      	ldr	r2, [r3, #0]
    25d2:	492f      	ldr	r1, [pc, #188]	; (2690 <Clock_Ip_InitClock+0x584>)
    25d4:	4613      	mov	r3, r2
    25d6:	00db      	lsls	r3, r3, #3
    25d8:	4413      	add	r3, r2
    25da:	440b      	add	r3, r1
    25dc:	3301      	adds	r3, #1
    25de:	781b      	ldrb	r3, [r3, #0]
    25e0:	461a      	mov	r2, r3
    25e2:	4b34      	ldr	r3, [pc, #208]	; (26b4 <Clock_Ip_InitClock+0x5a8>)
    25e4:	5c9b      	ldrb	r3, [r3, r2]
    25e6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    25e8:	4933      	ldr	r1, [pc, #204]	; (26b8 <Clock_Ip_InitClock+0x5ac>)
    25ea:	9a02      	ldr	r2, [sp, #8]
    25ec:	4613      	mov	r3, r2
    25ee:	005b      	lsls	r3, r3, #1
    25f0:	4413      	add	r3, r2
    25f2:	009b      	lsls	r3, r3, #2
    25f4:	440b      	add	r3, r1
    25f6:	3304      	adds	r3, #4
    25f8:	681b      	ldr	r3, [r3, #0]
    25fa:	9a03      	ldr	r2, [sp, #12]
    25fc:	3224      	adds	r2, #36	; 0x24
    25fe:	0112      	lsls	r2, r2, #4
    2600:	9901      	ldr	r1, [sp, #4]
    2602:	440a      	add	r2, r1
    2604:	3204      	adds	r2, #4
    2606:	4610      	mov	r0, r2
    2608:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    260a:	9b03      	ldr	r3, [sp, #12]
    260c:	3301      	adds	r3, #1
    260e:	9303      	str	r3, [sp, #12]
    2610:	9b01      	ldr	r3, [sp, #4]
    2612:	7b9b      	ldrb	r3, [r3, #14]
    2614:	461a      	mov	r2, r3
    2616:	9b03      	ldr	r3, [sp, #12]
    2618:	4293      	cmp	r3, r2
    261a:	d3d3      	bcc.n	25c4 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    261c:	4b27      	ldr	r3, [pc, #156]	; (26bc <Clock_Ip_InitClock+0x5b0>)
    261e:	2200      	movs	r2, #0
    2620:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    2622:	4b26      	ldr	r3, [pc, #152]	; (26bc <Clock_Ip_InitClock+0x5b0>)
    2624:	2200      	movs	r2, #0
    2626:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    2628:	4b24      	ldr	r3, [pc, #144]	; (26bc <Clock_Ip_InitClock+0x5b0>)
    262a:	2201      	movs	r2, #1
    262c:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    262e:	4b23      	ldr	r3, [pc, #140]	; (26bc <Clock_Ip_InitClock+0x5b0>)
    2630:	2200      	movs	r2, #0
    2632:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    2634:	f000 fa9c 	bl	2b70 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2638:	2300      	movs	r3, #0
    263a:	9303      	str	r3, [sp, #12]
    263c:	e04c      	b.n	26d8 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    263e:	9a01      	ldr	r2, [sp, #4]
    2640:	9b03      	ldr	r3, [sp, #12]
    2642:	330d      	adds	r3, #13
    2644:	00db      	lsls	r3, r3, #3
    2646:	4413      	add	r3, r2
    2648:	685b      	ldr	r3, [r3, #4]
    264a:	4a1d      	ldr	r2, [pc, #116]	; (26c0 <Clock_Ip_InitClock+0x5b4>)
    264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2650:	2b03      	cmp	r3, #3
    2652:	d03b      	beq.n	26cc <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2654:	9b01      	ldr	r3, [sp, #4]
    2656:	9a03      	ldr	r2, [sp, #12]
    2658:	320d      	adds	r2, #13
    265a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    265e:	490c      	ldr	r1, [pc, #48]	; (2690 <Clock_Ip_InitClock+0x584>)
    2660:	4613      	mov	r3, r2
    2662:	00db      	lsls	r3, r3, #3
    2664:	4413      	add	r3, r2
    2666:	440b      	add	r3, r1
    2668:	3301      	adds	r3, #1
    266a:	781b      	ldrb	r3, [r3, #0]
    266c:	461a      	mov	r2, r3
    266e:	4b15      	ldr	r3, [pc, #84]	; (26c4 <Clock_Ip_InitClock+0x5b8>)
    2670:	5c9b      	ldrb	r3, [r3, r2]
    2672:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    2674:	4a14      	ldr	r2, [pc, #80]	; (26c8 <Clock_Ip_InitClock+0x5bc>)
    2676:	9b02      	ldr	r3, [sp, #8]
    2678:	00db      	lsls	r3, r3, #3
    267a:	4413      	add	r3, r2
    267c:	685b      	ldr	r3, [r3, #4]
    267e:	9a03      	ldr	r2, [sp, #12]
    2680:	320d      	adds	r2, #13
    2682:	00d2      	lsls	r2, r2, #3
    2684:	9901      	ldr	r1, [sp, #4]
    2686:	440a      	add	r2, r1
    2688:	4610      	mov	r0, r2
    268a:	4798      	blx	r3
    268c:	e021      	b.n	26d2 <Clock_Ip_InitClock+0x5c6>
    268e:	bf00      	nop
    2690:	0000a6bc 	.word	0x0000a6bc
    2694:	0000a62c 	.word	0x0000a62c
    2698:	0000ac08 	.word	0x0000ac08
    269c:	0000a67c 	.word	0x0000a67c
    26a0:	0000acc8 	.word	0x0000acc8
    26a4:	0000a6ac 	.word	0x0000a6ac
    26a8:	0000acb8 	.word	0x0000acb8
    26ac:	0000a63c 	.word	0x0000a63c
    26b0:	0000ac10 	.word	0x0000ac10
    26b4:	0000a66c 	.word	0x0000a66c
    26b8:	0000ac38 	.word	0x0000ac38
    26bc:	1fff8b4c 	.word	0x1fff8b4c
    26c0:	0000ab08 	.word	0x0000ab08
    26c4:	0000a68c 	.word	0x0000a68c
    26c8:	0000acf4 	.word	0x0000acf4
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    26cc:	4b3a      	ldr	r3, [pc, #232]	; (27b8 <Clock_Ip_InitClock+0x6ac>)
    26ce:	2201      	movs	r2, #1
    26d0:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    26d2:	9b03      	ldr	r3, [sp, #12]
    26d4:	3301      	adds	r3, #1
    26d6:	9303      	str	r3, [sp, #12]
    26d8:	9b01      	ldr	r3, [sp, #4]
    26da:	7adb      	ldrb	r3, [r3, #11]
    26dc:	461a      	mov	r2, r3
    26de:	9b03      	ldr	r3, [sp, #12]
    26e0:	4293      	cmp	r3, r2
    26e2:	d3ac      	bcc.n	263e <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    26e4:	4b34      	ldr	r3, [pc, #208]	; (27b8 <Clock_Ip_InitClock+0x6ac>)
    26e6:	781b      	ldrb	r3, [r3, #0]
    26e8:	f083 0301 	eor.w	r3, r3, #1
    26ec:	b2db      	uxtb	r3, r3
    26ee:	2b00      	cmp	r3, #0
    26f0:	d05e      	beq.n	27b0 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    26f2:	2300      	movs	r3, #0
    26f4:	9303      	str	r3, [sp, #12]
    26f6:	e01f      	b.n	2738 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    26f8:	9a01      	ldr	r2, [sp, #4]
    26fa:	9b03      	ldr	r3, [sp, #12]
    26fc:	334e      	adds	r3, #78	; 0x4e
    26fe:	00db      	lsls	r3, r3, #3
    2700:	4413      	add	r3, r2
    2702:	685a      	ldr	r2, [r3, #4]
    2704:	492d      	ldr	r1, [pc, #180]	; (27bc <Clock_Ip_InitClock+0x6b0>)
    2706:	4613      	mov	r3, r2
    2708:	00db      	lsls	r3, r3, #3
    270a:	4413      	add	r3, r2
    270c:	440b      	add	r3, r1
    270e:	3301      	adds	r3, #1
    2710:	781b      	ldrb	r3, [r3, #0]
    2712:	461a      	mov	r2, r3
    2714:	4b2a      	ldr	r3, [pc, #168]	; (27c0 <Clock_Ip_InitClock+0x6b4>)
    2716:	5c9b      	ldrb	r3, [r3, r2]
    2718:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    271a:	4a2a      	ldr	r2, [pc, #168]	; (27c4 <Clock_Ip_InitClock+0x6b8>)
    271c:	9b02      	ldr	r3, [sp, #8]
    271e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2722:	9a03      	ldr	r2, [sp, #12]
    2724:	324e      	adds	r2, #78	; 0x4e
    2726:	00d2      	lsls	r2, r2, #3
    2728:	9901      	ldr	r1, [sp, #4]
    272a:	440a      	add	r2, r1
    272c:	3204      	adds	r2, #4
    272e:	4610      	mov	r0, r2
    2730:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2732:	9b03      	ldr	r3, [sp, #12]
    2734:	3301      	adds	r3, #1
    2736:	9303      	str	r3, [sp, #12]
    2738:	9b01      	ldr	r3, [sp, #4]
    273a:	7c1b      	ldrb	r3, [r3, #16]
    273c:	461a      	mov	r2, r3
    273e:	9b03      	ldr	r3, [sp, #12]
    2740:	4293      	cmp	r3, r2
    2742:	d3d9      	bcc.n	26f8 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2744:	2300      	movs	r3, #0
    2746:	9303      	str	r3, [sp, #12]
    2748:	e028      	b.n	279c <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    274a:	9901      	ldr	r1, [sp, #4]
    274c:	9a03      	ldr	r2, [sp, #12]
    274e:	4613      	mov	r3, r2
    2750:	009b      	lsls	r3, r3, #2
    2752:	4413      	add	r3, r2
    2754:	009b      	lsls	r3, r3, #2
    2756:	440b      	add	r3, r1
    2758:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    275c:	681a      	ldr	r2, [r3, #0]
    275e:	4917      	ldr	r1, [pc, #92]	; (27bc <Clock_Ip_InitClock+0x6b0>)
    2760:	4613      	mov	r3, r2
    2762:	00db      	lsls	r3, r3, #3
    2764:	4413      	add	r3, r2
    2766:	440b      	add	r3, r1
    2768:	3301      	adds	r3, #1
    276a:	781b      	ldrb	r3, [r3, #0]
    276c:	461a      	mov	r2, r3
    276e:	4b16      	ldr	r3, [pc, #88]	; (27c8 <Clock_Ip_InitClock+0x6bc>)
    2770:	5c9b      	ldrb	r3, [r3, r2]
    2772:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2774:	4a15      	ldr	r2, [pc, #84]	; (27cc <Clock_Ip_InitClock+0x6c0>)
    2776:	9b02      	ldr	r3, [sp, #8]
    2778:	011b      	lsls	r3, r3, #4
    277a:	4413      	add	r3, r2
    277c:	330c      	adds	r3, #12
    277e:	6819      	ldr	r1, [r3, #0]
    2780:	9a03      	ldr	r2, [sp, #12]
    2782:	4613      	mov	r3, r2
    2784:	009b      	lsls	r3, r3, #2
    2786:	4413      	add	r3, r2
    2788:	009b      	lsls	r3, r3, #2
    278a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    278e:	9a01      	ldr	r2, [sp, #4]
    2790:	4413      	add	r3, r2
    2792:	4618      	mov	r0, r3
    2794:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2796:	9b03      	ldr	r3, [sp, #12]
    2798:	3301      	adds	r3, #1
    279a:	9303      	str	r3, [sp, #12]
    279c:	9b01      	ldr	r3, [sp, #4]
    279e:	7c9b      	ldrb	r3, [r3, #18]
    27a0:	461a      	mov	r2, r3
    27a2:	9b03      	ldr	r3, [sp, #12]
    27a4:	4293      	cmp	r3, r2
    27a6:	d3d0      	bcc.n	274a <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    27a8:	2104      	movs	r1, #4
    27aa:	9801      	ldr	r0, [sp, #4]
    27ac:	f002 ff48 	bl	5640 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    27b0:	bf00      	nop
    27b2:	b004      	add	sp, #16
    27b4:	bd10      	pop	{r4, pc}
    27b6:	bf00      	nop
    27b8:	1fff8b4c 	.word	0x1fff8b4c
    27bc:	0000a6bc 	.word	0x0000a6bc
    27c0:	0000a65c 	.word	0x0000a65c
    27c4:	0000ac44 	.word	0x0000ac44
    27c8:	0000a6ac 	.word	0x0000a6ac
    27cc:	0000acb8 	.word	0x0000acb8

000027d0 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    27d0:	b500      	push	{lr}
    27d2:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    27d4:	2302      	movs	r3, #2
    27d6:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    27d8:	2300      	movs	r3, #0
    27da:	9304      	str	r3, [sp, #16]
    27dc:	e02c      	b.n	2838 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    27de:	4a36      	ldr	r2, [pc, #216]	; (28b8 <Clock_Ip_GetPllStatus+0xe8>)
    27e0:	9b04      	ldr	r3, [sp, #16]
    27e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    27e6:	4935      	ldr	r1, [pc, #212]	; (28bc <Clock_Ip_GetPllStatus+0xec>)
    27e8:	4613      	mov	r3, r2
    27ea:	00db      	lsls	r3, r3, #3
    27ec:	4413      	add	r3, r2
    27ee:	440b      	add	r3, r1
    27f0:	3301      	adds	r3, #1
    27f2:	781b      	ldrb	r3, [r3, #0]
    27f4:	461a      	mov	r2, r3
    27f6:	4b32      	ldr	r3, [pc, #200]	; (28c0 <Clock_Ip_GetPllStatus+0xf0>)
    27f8:	5c9b      	ldrb	r3, [r3, r2]
    27fa:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    27fc:	4931      	ldr	r1, [pc, #196]	; (28c4 <Clock_Ip_GetPllStatus+0xf4>)
    27fe:	9a03      	ldr	r2, [sp, #12]
    2800:	4613      	mov	r3, r2
    2802:	009b      	lsls	r3, r3, #2
    2804:	4413      	add	r3, r2
    2806:	009b      	lsls	r3, r3, #2
    2808:	440b      	add	r3, r1
    280a:	3308      	adds	r3, #8
    280c:	681b      	ldr	r3, [r3, #0]
    280e:	492a      	ldr	r1, [pc, #168]	; (28b8 <Clock_Ip_GetPllStatus+0xe8>)
    2810:	9a04      	ldr	r2, [sp, #16]
    2812:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2816:	4610      	mov	r0, r2
    2818:	4798      	blx	r3
    281a:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    281c:	9b02      	ldr	r3, [sp, #8]
    281e:	2b01      	cmp	r3, #1
    2820:	d102      	bne.n	2828 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2822:	2301      	movs	r3, #1
    2824:	9305      	str	r3, [sp, #20]
            break;
    2826:	e00d      	b.n	2844 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2828:	9b02      	ldr	r3, [sp, #8]
    282a:	2b02      	cmp	r3, #2
    282c:	d101      	bne.n	2832 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    282e:	2300      	movs	r3, #0
    2830:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2832:	9b04      	ldr	r3, [sp, #16]
    2834:	3301      	adds	r3, #1
    2836:	9304      	str	r3, [sp, #16]
    2838:	4b23      	ldr	r3, [pc, #140]	; (28c8 <Clock_Ip_GetPllStatus+0xf8>)
    283a:	789b      	ldrb	r3, [r3, #2]
    283c:	461a      	mov	r2, r3
    283e:	9b04      	ldr	r3, [sp, #16]
    2840:	4293      	cmp	r3, r2
    2842:	d3cc      	bcc.n	27de <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2844:	9b05      	ldr	r3, [sp, #20]
    2846:	2b00      	cmp	r3, #0
    2848:	d130      	bne.n	28ac <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    284a:	2300      	movs	r3, #0
    284c:	9304      	str	r3, [sp, #16]
    284e:	e027      	b.n	28a0 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2850:	4a1e      	ldr	r2, [pc, #120]	; (28cc <Clock_Ip_GetPllStatus+0xfc>)
    2852:	9b04      	ldr	r3, [sp, #16]
    2854:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2858:	4918      	ldr	r1, [pc, #96]	; (28bc <Clock_Ip_GetPllStatus+0xec>)
    285a:	4613      	mov	r3, r2
    285c:	00db      	lsls	r3, r3, #3
    285e:	4413      	add	r3, r2
    2860:	440b      	add	r3, r1
    2862:	3301      	adds	r3, #1
    2864:	781b      	ldrb	r3, [r3, #0]
    2866:	461a      	mov	r2, r3
    2868:	4b19      	ldr	r3, [pc, #100]	; (28d0 <Clock_Ip_GetPllStatus+0x100>)
    286a:	5c9b      	ldrb	r3, [r3, r2]
    286c:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    286e:	4919      	ldr	r1, [pc, #100]	; (28d4 <Clock_Ip_GetPllStatus+0x104>)
    2870:	9a03      	ldr	r2, [sp, #12]
    2872:	4613      	mov	r3, r2
    2874:	005b      	lsls	r3, r3, #1
    2876:	4413      	add	r3, r2
    2878:	009b      	lsls	r3, r3, #2
    287a:	440b      	add	r3, r1
    287c:	3308      	adds	r3, #8
    287e:	681b      	ldr	r3, [r3, #0]
    2880:	4912      	ldr	r1, [pc, #72]	; (28cc <Clock_Ip_GetPllStatus+0xfc>)
    2882:	9a04      	ldr	r2, [sp, #16]
    2884:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2888:	4610      	mov	r0, r2
    288a:	4798      	blx	r3
    288c:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    288e:	9b01      	ldr	r3, [sp, #4]
    2890:	2b01      	cmp	r3, #1
    2892:	d102      	bne.n	289a <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2894:	2301      	movs	r3, #1
    2896:	9305      	str	r3, [sp, #20]
                break;
    2898:	e008      	b.n	28ac <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    289a:	9b04      	ldr	r3, [sp, #16]
    289c:	3301      	adds	r3, #1
    289e:	9304      	str	r3, [sp, #16]
    28a0:	4b09      	ldr	r3, [pc, #36]	; (28c8 <Clock_Ip_GetPllStatus+0xf8>)
    28a2:	78db      	ldrb	r3, [r3, #3]
    28a4:	461a      	mov	r2, r3
    28a6:	9b04      	ldr	r3, [sp, #16]
    28a8:	4293      	cmp	r3, r2
    28aa:	d3d1      	bcc.n	2850 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    28ac:	9b05      	ldr	r3, [sp, #20]
}
    28ae:	4618      	mov	r0, r3
    28b0:	b007      	add	sp, #28
    28b2:	f85d fb04 	ldr.w	pc, [sp], #4
    28b6:	bf00      	nop
    28b8:	0000abc4 	.word	0x0000abc4
    28bc:	0000a6bc 	.word	0x0000a6bc
    28c0:	0000a67c 	.word	0x0000a67c
    28c4:	0000acc8 	.word	0x0000acc8
    28c8:	1fff8b4c 	.word	0x1fff8b4c
    28cc:	0000abc8 	.word	0x0000abc8
    28d0:	0000a66c 	.word	0x0000a66c
    28d4:	0000ac38 	.word	0x0000ac38

000028d8 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    28d8:	b500      	push	{lr}
    28da:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    28dc:	4b55      	ldr	r3, [pc, #340]	; (2a34 <Clock_Ip_DistributePll+0x15c>)
    28de:	681b      	ldr	r3, [r3, #0]
    28e0:	2b00      	cmp	r3, #0
    28e2:	f000 80a2 	beq.w	2a2a <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    28e6:	2300      	movs	r3, #0
    28e8:	9301      	str	r3, [sp, #4]
    28ea:	e02c      	b.n	2946 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    28ec:	4b51      	ldr	r3, [pc, #324]	; (2a34 <Clock_Ip_DistributePll+0x15c>)
    28ee:	681a      	ldr	r2, [r3, #0]
    28f0:	9b01      	ldr	r3, [sp, #4]
    28f2:	330d      	adds	r3, #13
    28f4:	00db      	lsls	r3, r3, #3
    28f6:	4413      	add	r3, r2
    28f8:	685b      	ldr	r3, [r3, #4]
    28fa:	4a4f      	ldr	r2, [pc, #316]	; (2a38 <Clock_Ip_DistributePll+0x160>)
    28fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2900:	2b03      	cmp	r3, #3
    2902:	d11d      	bne.n	2940 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2904:	4b4b      	ldr	r3, [pc, #300]	; (2a34 <Clock_Ip_DistributePll+0x15c>)
    2906:	681b      	ldr	r3, [r3, #0]
    2908:	9a01      	ldr	r2, [sp, #4]
    290a:	320d      	adds	r2, #13
    290c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2910:	494a      	ldr	r1, [pc, #296]	; (2a3c <Clock_Ip_DistributePll+0x164>)
    2912:	4613      	mov	r3, r2
    2914:	00db      	lsls	r3, r3, #3
    2916:	4413      	add	r3, r2
    2918:	440b      	add	r3, r1
    291a:	3301      	adds	r3, #1
    291c:	781b      	ldrb	r3, [r3, #0]
    291e:	461a      	mov	r2, r3
    2920:	4b47      	ldr	r3, [pc, #284]	; (2a40 <Clock_Ip_DistributePll+0x168>)
    2922:	5c9b      	ldrb	r3, [r3, r2]
    2924:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2926:	4a47      	ldr	r2, [pc, #284]	; (2a44 <Clock_Ip_DistributePll+0x16c>)
    2928:	9b00      	ldr	r3, [sp, #0]
    292a:	00db      	lsls	r3, r3, #3
    292c:	4413      	add	r3, r2
    292e:	685b      	ldr	r3, [r3, #4]
    2930:	4a40      	ldr	r2, [pc, #256]	; (2a34 <Clock_Ip_DistributePll+0x15c>)
    2932:	6811      	ldr	r1, [r2, #0]
    2934:	9a01      	ldr	r2, [sp, #4]
    2936:	320d      	adds	r2, #13
    2938:	00d2      	lsls	r2, r2, #3
    293a:	440a      	add	r2, r1
    293c:	4610      	mov	r0, r2
    293e:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2940:	9b01      	ldr	r3, [sp, #4]
    2942:	3301      	adds	r3, #1
    2944:	9301      	str	r3, [sp, #4]
    2946:	4b3b      	ldr	r3, [pc, #236]	; (2a34 <Clock_Ip_DistributePll+0x15c>)
    2948:	681b      	ldr	r3, [r3, #0]
    294a:	7adb      	ldrb	r3, [r3, #11]
    294c:	461a      	mov	r2, r3
    294e:	9b01      	ldr	r3, [sp, #4]
    2950:	4293      	cmp	r3, r2
    2952:	d3cb      	bcc.n	28ec <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2954:	4b3c      	ldr	r3, [pc, #240]	; (2a48 <Clock_Ip_DistributePll+0x170>)
    2956:	781b      	ldrb	r3, [r3, #0]
    2958:	2b00      	cmp	r3, #0
    295a:	d066      	beq.n	2a2a <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    295c:	2300      	movs	r3, #0
    295e:	9301      	str	r3, [sp, #4]
    2960:	e021      	b.n	29a6 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2962:	4b34      	ldr	r3, [pc, #208]	; (2a34 <Clock_Ip_DistributePll+0x15c>)
    2964:	681a      	ldr	r2, [r3, #0]
    2966:	9b01      	ldr	r3, [sp, #4]
    2968:	334e      	adds	r3, #78	; 0x4e
    296a:	00db      	lsls	r3, r3, #3
    296c:	4413      	add	r3, r2
    296e:	685a      	ldr	r2, [r3, #4]
    2970:	4932      	ldr	r1, [pc, #200]	; (2a3c <Clock_Ip_DistributePll+0x164>)
    2972:	4613      	mov	r3, r2
    2974:	00db      	lsls	r3, r3, #3
    2976:	4413      	add	r3, r2
    2978:	440b      	add	r3, r1
    297a:	3301      	adds	r3, #1
    297c:	781b      	ldrb	r3, [r3, #0]
    297e:	461a      	mov	r2, r3
    2980:	4b32      	ldr	r3, [pc, #200]	; (2a4c <Clock_Ip_DistributePll+0x174>)
    2982:	5c9b      	ldrb	r3, [r3, r2]
    2984:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2986:	4a32      	ldr	r2, [pc, #200]	; (2a50 <Clock_Ip_DistributePll+0x178>)
    2988:	9b00      	ldr	r3, [sp, #0]
    298a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    298e:	4a29      	ldr	r2, [pc, #164]	; (2a34 <Clock_Ip_DistributePll+0x15c>)
    2990:	6811      	ldr	r1, [r2, #0]
    2992:	9a01      	ldr	r2, [sp, #4]
    2994:	324e      	adds	r2, #78	; 0x4e
    2996:	00d2      	lsls	r2, r2, #3
    2998:	440a      	add	r2, r1
    299a:	3204      	adds	r2, #4
    299c:	4610      	mov	r0, r2
    299e:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    29a0:	9b01      	ldr	r3, [sp, #4]
    29a2:	3301      	adds	r3, #1
    29a4:	9301      	str	r3, [sp, #4]
    29a6:	4b23      	ldr	r3, [pc, #140]	; (2a34 <Clock_Ip_DistributePll+0x15c>)
    29a8:	681b      	ldr	r3, [r3, #0]
    29aa:	7c1b      	ldrb	r3, [r3, #16]
    29ac:	461a      	mov	r2, r3
    29ae:	9b01      	ldr	r3, [sp, #4]
    29b0:	4293      	cmp	r3, r2
    29b2:	d3d6      	bcc.n	2962 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    29b4:	2300      	movs	r3, #0
    29b6:	9301      	str	r3, [sp, #4]
    29b8:	e02a      	b.n	2a10 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    29ba:	4b1e      	ldr	r3, [pc, #120]	; (2a34 <Clock_Ip_DistributePll+0x15c>)
    29bc:	6819      	ldr	r1, [r3, #0]
    29be:	9a01      	ldr	r2, [sp, #4]
    29c0:	4613      	mov	r3, r2
    29c2:	009b      	lsls	r3, r3, #2
    29c4:	4413      	add	r3, r2
    29c6:	009b      	lsls	r3, r3, #2
    29c8:	440b      	add	r3, r1
    29ca:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    29ce:	681a      	ldr	r2, [r3, #0]
    29d0:	491a      	ldr	r1, [pc, #104]	; (2a3c <Clock_Ip_DistributePll+0x164>)
    29d2:	4613      	mov	r3, r2
    29d4:	00db      	lsls	r3, r3, #3
    29d6:	4413      	add	r3, r2
    29d8:	440b      	add	r3, r1
    29da:	3301      	adds	r3, #1
    29dc:	781b      	ldrb	r3, [r3, #0]
    29de:	461a      	mov	r2, r3
    29e0:	4b1c      	ldr	r3, [pc, #112]	; (2a54 <Clock_Ip_DistributePll+0x17c>)
    29e2:	5c9b      	ldrb	r3, [r3, r2]
    29e4:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    29e6:	4a1c      	ldr	r2, [pc, #112]	; (2a58 <Clock_Ip_DistributePll+0x180>)
    29e8:	9b00      	ldr	r3, [sp, #0]
    29ea:	011b      	lsls	r3, r3, #4
    29ec:	4413      	add	r3, r2
    29ee:	330c      	adds	r3, #12
    29f0:	6819      	ldr	r1, [r3, #0]
    29f2:	4b10      	ldr	r3, [pc, #64]	; (2a34 <Clock_Ip_DistributePll+0x15c>)
    29f4:	6818      	ldr	r0, [r3, #0]
    29f6:	9a01      	ldr	r2, [sp, #4]
    29f8:	4613      	mov	r3, r2
    29fa:	009b      	lsls	r3, r3, #2
    29fc:	4413      	add	r3, r2
    29fe:	009b      	lsls	r3, r3, #2
    2a00:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2a04:	4403      	add	r3, r0
    2a06:	4618      	mov	r0, r3
    2a08:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2a0a:	9b01      	ldr	r3, [sp, #4]
    2a0c:	3301      	adds	r3, #1
    2a0e:	9301      	str	r3, [sp, #4]
    2a10:	4b08      	ldr	r3, [pc, #32]	; (2a34 <Clock_Ip_DistributePll+0x15c>)
    2a12:	681b      	ldr	r3, [r3, #0]
    2a14:	7c9b      	ldrb	r3, [r3, #18]
    2a16:	461a      	mov	r2, r3
    2a18:	9b01      	ldr	r3, [sp, #4]
    2a1a:	4293      	cmp	r3, r2
    2a1c:	d3cd      	bcc.n	29ba <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2a1e:	4b05      	ldr	r3, [pc, #20]	; (2a34 <Clock_Ip_DistributePll+0x15c>)
    2a20:	681b      	ldr	r3, [r3, #0]
    2a22:	2104      	movs	r1, #4
    2a24:	4618      	mov	r0, r3
    2a26:	f002 fe0b 	bl	5640 <Clock_Ip_Command>
        }
    }
}
    2a2a:	bf00      	nop
    2a2c:	b003      	add	sp, #12
    2a2e:	f85d fb04 	ldr.w	pc, [sp], #4
    2a32:	bf00      	nop
    2a34:	1fff8b44 	.word	0x1fff8b44
    2a38:	0000ab08 	.word	0x0000ab08
    2a3c:	0000a6bc 	.word	0x0000a6bc
    2a40:	0000a68c 	.word	0x0000a68c
    2a44:	0000acf4 	.word	0x0000acf4
    2a48:	1fff8b4c 	.word	0x1fff8b4c
    2a4c:	0000a65c 	.word	0x0000a65c
    2a50:	0000ac44 	.word	0x0000ac44
    2a54:	0000a6ac 	.word	0x0000a6ac
    2a58:	0000acb8 	.word	0x0000acb8

00002a5c <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2a5c:	b500      	push	{lr}
    2a5e:	b085      	sub	sp, #20
    2a60:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2a62:	490c      	ldr	r1, [pc, #48]	; (2a94 <Clock_Ip_DisableClockMonitor+0x38>)
    2a64:	9a01      	ldr	r2, [sp, #4]
    2a66:	4613      	mov	r3, r2
    2a68:	00db      	lsls	r3, r3, #3
    2a6a:	4413      	add	r3, r2
    2a6c:	440b      	add	r3, r1
    2a6e:	3301      	adds	r3, #1
    2a70:	781b      	ldrb	r3, [r3, #0]
    2a72:	461a      	mov	r2, r3
    2a74:	4b08      	ldr	r3, [pc, #32]	; (2a98 <Clock_Ip_DisableClockMonitor+0x3c>)
    2a76:	5c9b      	ldrb	r3, [r3, r2]
    2a78:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2a7a:	4a08      	ldr	r2, [pc, #32]	; (2a9c <Clock_Ip_DisableClockMonitor+0x40>)
    2a7c:	9b03      	ldr	r3, [sp, #12]
    2a7e:	011b      	lsls	r3, r3, #4
    2a80:	4413      	add	r3, r2
    2a82:	3308      	adds	r3, #8
    2a84:	681b      	ldr	r3, [r3, #0]
    2a86:	9801      	ldr	r0, [sp, #4]
    2a88:	4798      	blx	r3
}
    2a8a:	bf00      	nop
    2a8c:	b005      	add	sp, #20
    2a8e:	f85d fb04 	ldr.w	pc, [sp], #4
    2a92:	bf00      	nop
    2a94:	0000a6bc 	.word	0x0000a6bc
    2a98:	0000a6ac 	.word	0x0000a6ac
    2a9c:	0000acb8 	.word	0x0000acb8

00002aa0 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2aa0:	b082      	sub	sp, #8
    2aa2:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2aa4:	4a02      	ldr	r2, [pc, #8]	; (2ab0 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2aa6:	9b01      	ldr	r3, [sp, #4]
    2aa8:	6013      	str	r3, [r2, #0]
}
    2aaa:	bf00      	nop
    2aac:	b002      	add	sp, #8
    2aae:	4770      	bx	lr
    2ab0:	1fff8b14 	.word	0x1fff8b14

00002ab4 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2ab4:	b500      	push	{lr}
    2ab6:	b085      	sub	sp, #20
    2ab8:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2aba:	490c      	ldr	r1, [pc, #48]	; (2aec <Clock_Ip_DisableModuleClock+0x38>)
    2abc:	9a01      	ldr	r2, [sp, #4]
    2abe:	4613      	mov	r3, r2
    2ac0:	00db      	lsls	r3, r3, #3
    2ac2:	4413      	add	r3, r2
    2ac4:	440b      	add	r3, r1
    2ac6:	3301      	adds	r3, #1
    2ac8:	781b      	ldrb	r3, [r3, #0]
    2aca:	461a      	mov	r2, r3
    2acc:	4b08      	ldr	r3, [pc, #32]	; (2af0 <Clock_Ip_DisableModuleClock+0x3c>)
    2ace:	5c9b      	ldrb	r3, [r3, r2]
    2ad0:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2ad2:	4a08      	ldr	r2, [pc, #32]	; (2af4 <Clock_Ip_DisableModuleClock+0x40>)
    2ad4:	9b03      	ldr	r3, [sp, #12]
    2ad6:	00db      	lsls	r3, r3, #3
    2ad8:	4413      	add	r3, r2
    2ada:	685b      	ldr	r3, [r3, #4]
    2adc:	2101      	movs	r1, #1
    2ade:	9801      	ldr	r0, [sp, #4]
    2ae0:	4798      	blx	r3
}
    2ae2:	bf00      	nop
    2ae4:	b005      	add	sp, #20
    2ae6:	f85d fb04 	ldr.w	pc, [sp], #4
    2aea:	bf00      	nop
    2aec:	0000a6bc 	.word	0x0000a6bc
    2af0:	0000a65c 	.word	0x0000a65c
    2af4:	0000ac44 	.word	0x0000ac44

00002af8 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2af8:	b500      	push	{lr}
    2afa:	b085      	sub	sp, #20
    2afc:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2afe:	490c      	ldr	r1, [pc, #48]	; (2b30 <Clock_Ip_EnableModuleClock+0x38>)
    2b00:	9a01      	ldr	r2, [sp, #4]
    2b02:	4613      	mov	r3, r2
    2b04:	00db      	lsls	r3, r3, #3
    2b06:	4413      	add	r3, r2
    2b08:	440b      	add	r3, r1
    2b0a:	3301      	adds	r3, #1
    2b0c:	781b      	ldrb	r3, [r3, #0]
    2b0e:	461a      	mov	r2, r3
    2b10:	4b08      	ldr	r3, [pc, #32]	; (2b34 <Clock_Ip_EnableModuleClock+0x3c>)
    2b12:	5c9b      	ldrb	r3, [r3, r2]
    2b14:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2b16:	4a08      	ldr	r2, [pc, #32]	; (2b38 <Clock_Ip_EnableModuleClock+0x40>)
    2b18:	9b03      	ldr	r3, [sp, #12]
    2b1a:	00db      	lsls	r3, r3, #3
    2b1c:	4413      	add	r3, r2
    2b1e:	685b      	ldr	r3, [r3, #4]
    2b20:	2100      	movs	r1, #0
    2b22:	9801      	ldr	r0, [sp, #4]
    2b24:	4798      	blx	r3
}
    2b26:	bf00      	nop
    2b28:	b005      	add	sp, #20
    2b2a:	f85d fb04 	ldr.w	pc, [sp], #4
    2b2e:	bf00      	nop
    2b30:	0000a6bc 	.word	0x0000a6bc
    2b34:	0000a65c 	.word	0x0000a65c
    2b38:	0000ac44 	.word	0x0000ac44

00002b3c <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2b3c:	b500      	push	{lr}
    2b3e:	b083      	sub	sp, #12
    2b40:	9001      	str	r0, [sp, #4]
    2b42:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2b44:	4b08      	ldr	r3, [pc, #32]	; (2b68 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2b46:	2200      	movs	r2, #0
    2b48:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2b4a:	4b08      	ldr	r3, [pc, #32]	; (2b6c <Clock_Ip_PowerModeChangeNotification+0x30>)
    2b4c:	681b      	ldr	r3, [r3, #0]
    2b4e:	2102      	movs	r1, #2
    2b50:	4618      	mov	r0, r3
    2b52:	f002 fd75 	bl	5640 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2b56:	9900      	ldr	r1, [sp, #0]
    2b58:	9801      	ldr	r0, [sp, #4]
    2b5a:	f002 fc51 	bl	5400 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2b5e:	bf00      	nop
    2b60:	b003      	add	sp, #12
    2b62:	f85d fb04 	ldr.w	pc, [sp], #4
    2b66:	bf00      	nop
    2b68:	1fff8b10 	.word	0x1fff8b10
    2b6c:	1fff8b44 	.word	0x1fff8b44

00002b70 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2b70:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2b72:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2b76:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2b78:	4b06      	ldr	r3, [pc, #24]	; (2b94 <Clock_Ip_SetWaitStates+0x24>)
    2b7a:	785b      	ldrb	r3, [r3, #1]
    2b7c:	2b00      	cmp	r3, #0
    2b7e:	d005      	beq.n	2b8c <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2b80:	9b01      	ldr	r3, [sp, #4]
    2b82:	3b01      	subs	r3, #1
    2b84:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2b86:	9b01      	ldr	r3, [sp, #4]
    2b88:	2b00      	cmp	r3, #0
    2b8a:	d1f9      	bne.n	2b80 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2b8c:	bf00      	nop
    2b8e:	b002      	add	sp, #8
    2b90:	4770      	bx	lr
    2b92:	bf00      	nop
    2b94:	1fff8b4c 	.word	0x1fff8b4c

00002b98 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2b98:	b500      	push	{lr}
    2b9a:	b083      	sub	sp, #12
    2b9c:	9001      	str	r0, [sp, #4]
    2b9e:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2ba0:	4b04      	ldr	r3, [pc, #16]	; (2bb4 <Clock_Ip_ReportClockErrors+0x1c>)
    2ba2:	681b      	ldr	r3, [r3, #0]
    2ba4:	9900      	ldr	r1, [sp, #0]
    2ba6:	9801      	ldr	r0, [sp, #4]
    2ba8:	4798      	blx	r3
}
    2baa:	bf00      	nop
    2bac:	b003      	add	sp, #12
    2bae:	f85d fb04 	ldr.w	pc, [sp], #4
    2bb2:	bf00      	nop
    2bb4:	1fff8b14 	.word	0x1fff8b14

00002bb8 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2bb8:	b500      	push	{lr}
    2bba:	b085      	sub	sp, #20
    2bbc:	9003      	str	r0, [sp, #12]
    2bbe:	9102      	str	r1, [sp, #8]
    2bc0:	9201      	str	r2, [sp, #4]
    2bc2:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2bc4:	2000      	movs	r0, #0
    2bc6:	f7fe ffd1 	bl	1b6c <OsIf_GetCounter>
    2bca:	4602      	mov	r2, r0
    2bcc:	9b03      	ldr	r3, [sp, #12]
    2bce:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2bd0:	9b02      	ldr	r3, [sp, #8]
    2bd2:	2200      	movs	r2, #0
    2bd4:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2bd6:	2100      	movs	r1, #0
    2bd8:	9800      	ldr	r0, [sp, #0]
    2bda:	f7ff f813 	bl	1c04 <OsIf_MicrosToTicks>
    2bde:	4602      	mov	r2, r0
    2be0:	9b01      	ldr	r3, [sp, #4]
    2be2:	601a      	str	r2, [r3, #0]
}
    2be4:	bf00      	nop
    2be6:	b005      	add	sp, #20
    2be8:	f85d fb04 	ldr.w	pc, [sp], #4

00002bec <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2bec:	b500      	push	{lr}
    2bee:	b087      	sub	sp, #28
    2bf0:	9003      	str	r0, [sp, #12]
    2bf2:	9102      	str	r1, [sp, #8]
    2bf4:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2bf6:	2300      	movs	r3, #0
    2bf8:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2bfc:	2100      	movs	r1, #0
    2bfe:	9803      	ldr	r0, [sp, #12]
    2c00:	f7fe ffcd 	bl	1b9e <OsIf_GetElapsed>
    2c04:	4602      	mov	r2, r0
    2c06:	9b02      	ldr	r3, [sp, #8]
    2c08:	681b      	ldr	r3, [r3, #0]
    2c0a:	441a      	add	r2, r3
    2c0c:	9b02      	ldr	r3, [sp, #8]
    2c0e:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2c10:	9b02      	ldr	r3, [sp, #8]
    2c12:	681b      	ldr	r3, [r3, #0]
    2c14:	9a01      	ldr	r2, [sp, #4]
    2c16:	429a      	cmp	r2, r3
    2c18:	d802      	bhi.n	2c20 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2c1a:	2301      	movs	r3, #1
    2c1c:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2c20:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2c24:	4618      	mov	r0, r3
    2c26:	b007      	add	sp, #28
    2c28:	f85d fb04 	ldr.w	pc, [sp], #4

00002c2c <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2c2c:	b082      	sub	sp, #8
    2c2e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2c30:	bf00      	nop
    2c32:	b002      	add	sp, #8
    2c34:	4770      	bx	lr

00002c36 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2c36:	b500      	push	{lr}
    2c38:	b083      	sub	sp, #12
    2c3a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c3c:	9b01      	ldr	r3, [sp, #4]
    2c3e:	2b00      	cmp	r3, #0
    2c40:	d002      	beq.n	2c48 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2c42:	9801      	ldr	r0, [sp, #4]
    2c44:	f000 f8ad 	bl	2da2 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c48:	bf00      	nop
    2c4a:	b003      	add	sp, #12
    2c4c:	f85d fb04 	ldr.w	pc, [sp], #4

00002c50 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2c50:	b500      	push	{lr}
    2c52:	b083      	sub	sp, #12
    2c54:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c56:	9b01      	ldr	r3, [sp, #4]
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d002      	beq.n	2c62 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2c5c:	9801      	ldr	r0, [sp, #4]
    2c5e:	f000 f8cd 	bl	2dfc <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c62:	bf00      	nop
    2c64:	b003      	add	sp, #12
    2c66:	f85d fb04 	ldr.w	pc, [sp], #4

00002c6a <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2c6a:	b500      	push	{lr}
    2c6c:	b083      	sub	sp, #12
    2c6e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c70:	9b01      	ldr	r3, [sp, #4]
    2c72:	2b00      	cmp	r3, #0
    2c74:	d002      	beq.n	2c7c <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2c76:	9801      	ldr	r0, [sp, #4]
    2c78:	f000 f8ee 	bl	2e58 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c7c:	bf00      	nop
    2c7e:	b003      	add	sp, #12
    2c80:	f85d fb04 	ldr.w	pc, [sp], #4

00002c84 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2c84:	b500      	push	{lr}
    2c86:	b083      	sub	sp, #12
    2c88:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c8a:	9b01      	ldr	r3, [sp, #4]
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	d002      	beq.n	2c96 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2c90:	9801      	ldr	r0, [sp, #4]
    2c92:	f000 f8f9 	bl	2e88 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c96:	bf00      	nop
    2c98:	b003      	add	sp, #12
    2c9a:	f85d fb04 	ldr.w	pc, [sp], #4

00002c9e <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2c9e:	b500      	push	{lr}
    2ca0:	b083      	sub	sp, #12
    2ca2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ca4:	9b01      	ldr	r3, [sp, #4]
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	d002      	beq.n	2cb0 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2caa:	9801      	ldr	r0, [sp, #4]
    2cac:	f000 f904 	bl	2eb8 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cb0:	bf00      	nop
    2cb2:	b003      	add	sp, #12
    2cb4:	f85d fb04 	ldr.w	pc, [sp], #4

00002cb8 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2cb8:	b500      	push	{lr}
    2cba:	b083      	sub	sp, #12
    2cbc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cbe:	9b01      	ldr	r3, [sp, #4]
    2cc0:	2b00      	cmp	r3, #0
    2cc2:	d002      	beq.n	2cca <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2cc4:	9801      	ldr	r0, [sp, #4]
    2cc6:	f000 f90f 	bl	2ee8 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cca:	bf00      	nop
    2ccc:	b003      	add	sp, #12
    2cce:	f85d fb04 	ldr.w	pc, [sp], #4

00002cd2 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2cd2:	b500      	push	{lr}
    2cd4:	b083      	sub	sp, #12
    2cd6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cd8:	9b01      	ldr	r3, [sp, #4]
    2cda:	2b00      	cmp	r3, #0
    2cdc:	d002      	beq.n	2ce4 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2cde:	9801      	ldr	r0, [sp, #4]
    2ce0:	f000 f91a 	bl	2f18 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ce4:	bf00      	nop
    2ce6:	b003      	add	sp, #12
    2ce8:	f85d fb04 	ldr.w	pc, [sp], #4

00002cec <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2cec:	b500      	push	{lr}
    2cee:	b083      	sub	sp, #12
    2cf0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cf2:	9b01      	ldr	r3, [sp, #4]
    2cf4:	2b00      	cmp	r3, #0
    2cf6:	d002      	beq.n	2cfe <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2cf8:	9801      	ldr	r0, [sp, #4]
    2cfa:	f000 f925 	bl	2f48 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cfe:	bf00      	nop
    2d00:	b003      	add	sp, #12
    2d02:	f85d fb04 	ldr.w	pc, [sp], #4

00002d06 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2d06:	b500      	push	{lr}
    2d08:	b083      	sub	sp, #12
    2d0a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d0c:	9b01      	ldr	r3, [sp, #4]
    2d0e:	2b00      	cmp	r3, #0
    2d10:	d002      	beq.n	2d18 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2d12:	9801      	ldr	r0, [sp, #4]
    2d14:	f000 f930 	bl	2f78 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d18:	bf00      	nop
    2d1a:	b003      	add	sp, #12
    2d1c:	f85d fb04 	ldr.w	pc, [sp], #4

00002d20 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2d20:	b500      	push	{lr}
    2d22:	b083      	sub	sp, #12
    2d24:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d26:	9b01      	ldr	r3, [sp, #4]
    2d28:	2b00      	cmp	r3, #0
    2d2a:	d002      	beq.n	2d32 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2d2c:	9801      	ldr	r0, [sp, #4]
    2d2e:	f000 f93b 	bl	2fa8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d32:	bf00      	nop
    2d34:	b003      	add	sp, #12
    2d36:	f85d fb04 	ldr.w	pc, [sp], #4

00002d3a <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2d3a:	b500      	push	{lr}
    2d3c:	b083      	sub	sp, #12
    2d3e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d40:	9b01      	ldr	r3, [sp, #4]
    2d42:	2b00      	cmp	r3, #0
    2d44:	d002      	beq.n	2d4c <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2d46:	9801      	ldr	r0, [sp, #4]
    2d48:	f000 f946 	bl	2fd8 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d4c:	bf00      	nop
    2d4e:	b003      	add	sp, #12
    2d50:	f85d fb04 	ldr.w	pc, [sp], #4

00002d54 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2d54:	b500      	push	{lr}
    2d56:	b083      	sub	sp, #12
    2d58:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d5a:	9b01      	ldr	r3, [sp, #4]
    2d5c:	2b00      	cmp	r3, #0
    2d5e:	d002      	beq.n	2d66 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2d60:	9801      	ldr	r0, [sp, #4]
    2d62:	f000 f951 	bl	3008 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d66:	bf00      	nop
    2d68:	b003      	add	sp, #12
    2d6a:	f85d fb04 	ldr.w	pc, [sp], #4

00002d6e <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2d6e:	b500      	push	{lr}
    2d70:	b083      	sub	sp, #12
    2d72:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d74:	9b01      	ldr	r3, [sp, #4]
    2d76:	2b00      	cmp	r3, #0
    2d78:	d002      	beq.n	2d80 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2d7a:	9801      	ldr	r0, [sp, #4]
    2d7c:	f000 f95e 	bl	303c <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d80:	bf00      	nop
    2d82:	b003      	add	sp, #12
    2d84:	f85d fb04 	ldr.w	pc, [sp], #4

00002d88 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2d88:	b500      	push	{lr}
    2d8a:	b083      	sub	sp, #12
    2d8c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d8e:	9b01      	ldr	r3, [sp, #4]
    2d90:	2b00      	cmp	r3, #0
    2d92:	d002      	beq.n	2d9a <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2d94:	9801      	ldr	r0, [sp, #4]
    2d96:	f000 f98b 	bl	30b0 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d9a:	bf00      	nop
    2d9c:	b003      	add	sp, #12
    2d9e:	f85d fb04 	ldr.w	pc, [sp], #4

00002da2 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2da2:	b086      	sub	sp, #24
    2da4:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2da6:	9b01      	ldr	r3, [sp, #4]
    2da8:	681a      	ldr	r2, [r3, #0]
    2daa:	4911      	ldr	r1, [pc, #68]	; (2df0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2dac:	4613      	mov	r3, r2
    2dae:	00db      	lsls	r3, r3, #3
    2db0:	4413      	add	r3, r2
    2db2:	440b      	add	r3, r1
    2db4:	781b      	ldrb	r3, [r3, #0]
    2db6:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2db8:	9b01      	ldr	r3, [sp, #4]
    2dba:	685b      	ldr	r3, [r3, #4]
    2dbc:	4a0d      	ldr	r2, [pc, #52]	; (2df4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2dbe:	5cd3      	ldrb	r3, [r2, r3]
    2dc0:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2dc2:	4a0d      	ldr	r2, [pc, #52]	; (2df8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2dc4:	9b05      	ldr	r3, [sp, #20]
    2dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2dca:	681b      	ldr	r3, [r3, #0]
    2dcc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2dce:	9b03      	ldr	r3, [sp, #12]
    2dd0:	f023 0307 	bic.w	r3, r3, #7
    2dd4:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2dd6:	9a03      	ldr	r2, [sp, #12]
    2dd8:	9b04      	ldr	r3, [sp, #16]
    2dda:	4313      	orrs	r3, r2
    2ddc:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2dde:	4a06      	ldr	r2, [pc, #24]	; (2df8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2de0:	9b05      	ldr	r3, [sp, #20]
    2de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2de6:	9a03      	ldr	r2, [sp, #12]
    2de8:	601a      	str	r2, [r3, #0]
}
    2dea:	bf00      	nop
    2dec:	b006      	add	sp, #24
    2dee:	4770      	bx	lr
    2df0:	0000a6bc 	.word	0x0000a6bc
    2df4:	0000aab4 	.word	0x0000aab4
    2df8:	0000aaf8 	.word	0x0000aaf8

00002dfc <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2dfc:	b086      	sub	sp, #24
    2dfe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2e00:	9b01      	ldr	r3, [sp, #4]
    2e02:	681a      	ldr	r2, [r3, #0]
    2e04:	4911      	ldr	r1, [pc, #68]	; (2e4c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2e06:	4613      	mov	r3, r2
    2e08:	00db      	lsls	r3, r3, #3
    2e0a:	4413      	add	r3, r2
    2e0c:	440b      	add	r3, r1
    2e0e:	781b      	ldrb	r3, [r3, #0]
    2e10:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2e12:	9b01      	ldr	r3, [sp, #4]
    2e14:	685b      	ldr	r3, [r3, #4]
    2e16:	4a0e      	ldr	r2, [pc, #56]	; (2e50 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2e18:	5cd3      	ldrb	r3, [r2, r3]
    2e1a:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2e1c:	4a0d      	ldr	r2, [pc, #52]	; (2e54 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2e1e:	9b05      	ldr	r3, [sp, #20]
    2e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e24:	681b      	ldr	r3, [r3, #0]
    2e26:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2e28:	9b03      	ldr	r3, [sp, #12]
    2e2a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2e2e:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2e30:	9b04      	ldr	r3, [sp, #16]
    2e32:	021b      	lsls	r3, r3, #8
    2e34:	9a03      	ldr	r2, [sp, #12]
    2e36:	4313      	orrs	r3, r2
    2e38:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2e3a:	4a06      	ldr	r2, [pc, #24]	; (2e54 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2e3c:	9b05      	ldr	r3, [sp, #20]
    2e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e42:	9a03      	ldr	r2, [sp, #12]
    2e44:	601a      	str	r2, [r3, #0]
}
    2e46:	bf00      	nop
    2e48:	b006      	add	sp, #24
    2e4a:	4770      	bx	lr
    2e4c:	0000a6bc 	.word	0x0000a6bc
    2e50:	0000aab4 	.word	0x0000aab4
    2e54:	0000aaf8 	.word	0x0000aaf8

00002e58 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e58:	b084      	sub	sp, #16
    2e5a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2e5c:	4b09      	ldr	r3, [pc, #36]	; (2e84 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2e5e:	695b      	ldr	r3, [r3, #20]
    2e60:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2e62:	9b03      	ldr	r3, [sp, #12]
    2e64:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2e68:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2e6a:	9b01      	ldr	r3, [sp, #4]
    2e6c:	685b      	ldr	r3, [r3, #4]
    2e6e:	3b01      	subs	r3, #1
    2e70:	041b      	lsls	r3, r3, #16
    2e72:	9a03      	ldr	r2, [sp, #12]
    2e74:	4313      	orrs	r3, r2
    2e76:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2e78:	4a02      	ldr	r2, [pc, #8]	; (2e84 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2e7a:	9b03      	ldr	r3, [sp, #12]
    2e7c:	6153      	str	r3, [r2, #20]
}
    2e7e:	bf00      	nop
    2e80:	b004      	add	sp, #16
    2e82:	4770      	bx	lr
    2e84:	40064000 	.word	0x40064000

00002e88 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e88:	b084      	sub	sp, #16
    2e8a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2e8c:	4b09      	ldr	r3, [pc, #36]	; (2eb4 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2e8e:	695b      	ldr	r3, [r3, #20]
    2e90:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2e92:	9b03      	ldr	r3, [sp, #12]
    2e94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2e98:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2e9a:	9b01      	ldr	r3, [sp, #4]
    2e9c:	685b      	ldr	r3, [r3, #4]
    2e9e:	3b01      	subs	r3, #1
    2ea0:	011b      	lsls	r3, r3, #4
    2ea2:	9a03      	ldr	r2, [sp, #12]
    2ea4:	4313      	orrs	r3, r2
    2ea6:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2ea8:	4a02      	ldr	r2, [pc, #8]	; (2eb4 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2eaa:	9b03      	ldr	r3, [sp, #12]
    2eac:	6153      	str	r3, [r2, #20]
}
    2eae:	bf00      	nop
    2eb0:	b004      	add	sp, #16
    2eb2:	4770      	bx	lr
    2eb4:	40064000 	.word	0x40064000

00002eb8 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2eb8:	b084      	sub	sp, #16
    2eba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2ebc:	4b09      	ldr	r3, [pc, #36]	; (2ee4 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2ebe:	695b      	ldr	r3, [r3, #20]
    2ec0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2ec2:	9b03      	ldr	r3, [sp, #12]
    2ec4:	f023 030f 	bic.w	r3, r3, #15
    2ec8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2eca:	9b01      	ldr	r3, [sp, #4]
    2ecc:	685b      	ldr	r3, [r3, #4]
    2ece:	3b01      	subs	r3, #1
    2ed0:	9a03      	ldr	r2, [sp, #12]
    2ed2:	4313      	orrs	r3, r2
    2ed4:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2ed6:	4a03      	ldr	r2, [pc, #12]	; (2ee4 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2ed8:	9b03      	ldr	r3, [sp, #12]
    2eda:	6153      	str	r3, [r2, #20]
}
    2edc:	bf00      	nop
    2ede:	b004      	add	sp, #16
    2ee0:	4770      	bx	lr
    2ee2:	bf00      	nop
    2ee4:	40064000 	.word	0x40064000

00002ee8 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ee8:	b084      	sub	sp, #16
    2eea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2eec:	4b09      	ldr	r3, [pc, #36]	; (2f14 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2eee:	699b      	ldr	r3, [r3, #24]
    2ef0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2ef2:	9b03      	ldr	r3, [sp, #12]
    2ef4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2ef8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2efa:	9b01      	ldr	r3, [sp, #4]
    2efc:	685b      	ldr	r3, [r3, #4]
    2efe:	3b01      	subs	r3, #1
    2f00:	041b      	lsls	r3, r3, #16
    2f02:	9a03      	ldr	r2, [sp, #12]
    2f04:	4313      	orrs	r3, r2
    2f06:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f08:	4a02      	ldr	r2, [pc, #8]	; (2f14 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2f0a:	9b03      	ldr	r3, [sp, #12]
    2f0c:	6193      	str	r3, [r2, #24]
}
    2f0e:	bf00      	nop
    2f10:	b004      	add	sp, #16
    2f12:	4770      	bx	lr
    2f14:	40064000 	.word	0x40064000

00002f18 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f18:	b084      	sub	sp, #16
    2f1a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f1c:	4b09      	ldr	r3, [pc, #36]	; (2f44 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2f1e:	699b      	ldr	r3, [r3, #24]
    2f20:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2f22:	9b03      	ldr	r3, [sp, #12]
    2f24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2f28:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2f2a:	9b01      	ldr	r3, [sp, #4]
    2f2c:	685b      	ldr	r3, [r3, #4]
    2f2e:	3b01      	subs	r3, #1
    2f30:	011b      	lsls	r3, r3, #4
    2f32:	9a03      	ldr	r2, [sp, #12]
    2f34:	4313      	orrs	r3, r2
    2f36:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f38:	4a02      	ldr	r2, [pc, #8]	; (2f44 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2f3a:	9b03      	ldr	r3, [sp, #12]
    2f3c:	6193      	str	r3, [r2, #24]
}
    2f3e:	bf00      	nop
    2f40:	b004      	add	sp, #16
    2f42:	4770      	bx	lr
    2f44:	40064000 	.word	0x40064000

00002f48 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f48:	b084      	sub	sp, #16
    2f4a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f4c:	4b09      	ldr	r3, [pc, #36]	; (2f74 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2f4e:	699b      	ldr	r3, [r3, #24]
    2f50:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2f52:	9b03      	ldr	r3, [sp, #12]
    2f54:	f023 030f 	bic.w	r3, r3, #15
    2f58:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2f5a:	9b01      	ldr	r3, [sp, #4]
    2f5c:	685b      	ldr	r3, [r3, #4]
    2f5e:	3b01      	subs	r3, #1
    2f60:	9a03      	ldr	r2, [sp, #12]
    2f62:	4313      	orrs	r3, r2
    2f64:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f66:	4a03      	ldr	r2, [pc, #12]	; (2f74 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2f68:	9b03      	ldr	r3, [sp, #12]
    2f6a:	6193      	str	r3, [r2, #24]
}
    2f6c:	bf00      	nop
    2f6e:	b004      	add	sp, #16
    2f70:	4770      	bx	lr
    2f72:	bf00      	nop
    2f74:	40064000 	.word	0x40064000

00002f78 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f78:	b084      	sub	sp, #16
    2f7a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2f7c:	4b09      	ldr	r3, [pc, #36]	; (2fa4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2f7e:	69db      	ldr	r3, [r3, #28]
    2f80:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2f82:	9b03      	ldr	r3, [sp, #12]
    2f84:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2f88:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2f8a:	9b01      	ldr	r3, [sp, #4]
    2f8c:	685b      	ldr	r3, [r3, #4]
    2f8e:	3b01      	subs	r3, #1
    2f90:	041b      	lsls	r3, r3, #16
    2f92:	9a03      	ldr	r2, [sp, #12]
    2f94:	4313      	orrs	r3, r2
    2f96:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2f98:	4a02      	ldr	r2, [pc, #8]	; (2fa4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2f9a:	9b03      	ldr	r3, [sp, #12]
    2f9c:	61d3      	str	r3, [r2, #28]
}
    2f9e:	bf00      	nop
    2fa0:	b004      	add	sp, #16
    2fa2:	4770      	bx	lr
    2fa4:	40064000 	.word	0x40064000

00002fa8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fa8:	b084      	sub	sp, #16
    2faa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2fac:	4b09      	ldr	r3, [pc, #36]	; (2fd4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2fae:	69db      	ldr	r3, [r3, #28]
    2fb0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2fb2:	9b03      	ldr	r3, [sp, #12]
    2fb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2fb8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2fba:	9b01      	ldr	r3, [sp, #4]
    2fbc:	685b      	ldr	r3, [r3, #4]
    2fbe:	3b01      	subs	r3, #1
    2fc0:	011b      	lsls	r3, r3, #4
    2fc2:	9a03      	ldr	r2, [sp, #12]
    2fc4:	4313      	orrs	r3, r2
    2fc6:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2fc8:	4a02      	ldr	r2, [pc, #8]	; (2fd4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2fca:	9b03      	ldr	r3, [sp, #12]
    2fcc:	61d3      	str	r3, [r2, #28]
}
    2fce:	bf00      	nop
    2fd0:	b004      	add	sp, #16
    2fd2:	4770      	bx	lr
    2fd4:	40064000 	.word	0x40064000

00002fd8 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fd8:	b084      	sub	sp, #16
    2fda:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2fdc:	4b09      	ldr	r3, [pc, #36]	; (3004 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2fde:	69db      	ldr	r3, [r3, #28]
    2fe0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    2fe2:	9b03      	ldr	r3, [sp, #12]
    2fe4:	f023 030f 	bic.w	r3, r3, #15
    2fe8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2fea:	9b01      	ldr	r3, [sp, #4]
    2fec:	685b      	ldr	r3, [r3, #4]
    2fee:	3b01      	subs	r3, #1
    2ff0:	9a03      	ldr	r2, [sp, #12]
    2ff2:	4313      	orrs	r3, r2
    2ff4:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2ff6:	4a03      	ldr	r2, [pc, #12]	; (3004 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2ff8:	9b03      	ldr	r3, [sp, #12]
    2ffa:	61d3      	str	r3, [r2, #28]
}
    2ffc:	bf00      	nop
    2ffe:	b004      	add	sp, #16
    3000:	4770      	bx	lr
    3002:	bf00      	nop
    3004:	40064000 	.word	0x40064000

00003008 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3008:	b084      	sub	sp, #16
    300a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    300c:	4b0a      	ldr	r3, [pc, #40]	; (3038 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    300e:	685b      	ldr	r3, [r3, #4]
    3010:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3012:	9b03      	ldr	r3, [sp, #12]
    3014:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3018:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    301a:	9b01      	ldr	r3, [sp, #4]
    301c:	685b      	ldr	r3, [r3, #4]
    301e:	3b01      	subs	r3, #1
    3020:	021b      	lsls	r3, r3, #8
    3022:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3026:	9a03      	ldr	r2, [sp, #12]
    3028:	4313      	orrs	r3, r2
    302a:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    302c:	4a02      	ldr	r2, [pc, #8]	; (3038 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    302e:	9b03      	ldr	r3, [sp, #12]
    3030:	6053      	str	r3, [r2, #4]
}
    3032:	bf00      	nop
    3034:	b004      	add	sp, #16
    3036:	4770      	bx	lr
    3038:	40048000 	.word	0x40048000

0000303c <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    303c:	b084      	sub	sp, #16
    303e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3040:	4919      	ldr	r1, [pc, #100]	; (30a8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3042:	9b01      	ldr	r3, [sp, #4]
    3044:	681a      	ldr	r2, [r3, #0]
    3046:	4819      	ldr	r0, [pc, #100]	; (30ac <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3048:	4613      	mov	r3, r2
    304a:	00db      	lsls	r3, r3, #3
    304c:	4413      	add	r3, r2
    304e:	4403      	add	r3, r0
    3050:	3305      	adds	r3, #5
    3052:	781b      	ldrb	r3, [r3, #0]
    3054:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3058:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    305a:	9b03      	ldr	r3, [sp, #12]
    305c:	f023 030f 	bic.w	r3, r3, #15
    3060:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    3062:	9b01      	ldr	r3, [sp, #4]
    3064:	685b      	ldr	r3, [r3, #4]
    3066:	3b01      	subs	r3, #1
    3068:	f003 0307 	and.w	r3, r3, #7
    306c:	9a03      	ldr	r2, [sp, #12]
    306e:	4313      	orrs	r3, r2
    3070:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3072:	9b01      	ldr	r3, [sp, #4]
    3074:	7a1b      	ldrb	r3, [r3, #8]
    3076:	3b01      	subs	r3, #1
    3078:	00db      	lsls	r3, r3, #3
    307a:	f003 0308 	and.w	r3, r3, #8
    307e:	9a03      	ldr	r2, [sp, #12]
    3080:	4313      	orrs	r3, r2
    3082:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3084:	4908      	ldr	r1, [pc, #32]	; (30a8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3086:	9b01      	ldr	r3, [sp, #4]
    3088:	681a      	ldr	r2, [r3, #0]
    308a:	4808      	ldr	r0, [pc, #32]	; (30ac <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    308c:	4613      	mov	r3, r2
    308e:	00db      	lsls	r3, r3, #3
    3090:	4413      	add	r3, r2
    3092:	4403      	add	r3, r0
    3094:	3305      	adds	r3, #5
    3096:	781b      	ldrb	r3, [r3, #0]
    3098:	461a      	mov	r2, r3
    309a:	9b03      	ldr	r3, [sp, #12]
    309c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    30a0:	bf00      	nop
    30a2:	b004      	add	sp, #16
    30a4:	4770      	bx	lr
    30a6:	bf00      	nop
    30a8:	40065000 	.word	0x40065000
    30ac:	0000a6bc 	.word	0x0000a6bc

000030b0 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30b0:	b084      	sub	sp, #16
    30b2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    30b4:	4b10      	ldr	r3, [pc, #64]	; (30f8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    30b8:	4a0f      	ldr	r2, [pc, #60]	; (30f8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    30be:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    30c0:	4b0d      	ldr	r3, [pc, #52]	; (30f8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    30c4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    30c6:	9b03      	ldr	r3, [sp, #12]
    30c8:	f023 030f 	bic.w	r3, r3, #15
    30cc:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    30ce:	9b01      	ldr	r3, [sp, #4]
    30d0:	685b      	ldr	r3, [r3, #4]
    30d2:	3b01      	subs	r3, #1
    30d4:	005b      	lsls	r3, r3, #1
    30d6:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    30da:	9b01      	ldr	r3, [sp, #4]
    30dc:	7a1b      	ldrb	r3, [r3, #8]
    30de:	3b01      	subs	r3, #1
    30e0:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    30e4:	4313      	orrs	r3, r2
    30e6:	9a03      	ldr	r2, [sp, #12]
    30e8:	4313      	orrs	r3, r2
    30ea:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    30ec:	4a02      	ldr	r2, [pc, #8]	; (30f8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30ee:	9b03      	ldr	r3, [sp, #12]
    30f0:	6693      	str	r3, [r2, #104]	; 0x68
}
    30f2:	bf00      	nop
    30f4:	b004      	add	sp, #16
    30f6:	4770      	bx	lr
    30f8:	40048000 	.word	0x40048000

000030fc <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    30fc:	b082      	sub	sp, #8
    30fe:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3100:	bf00      	nop
    3102:	b002      	add	sp, #8
    3104:	4770      	bx	lr
	...

00003108 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3108:	b082      	sub	sp, #8
    310a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    310c:	bf00      	nop
    310e:	b002      	add	sp, #8
    3110:	4770      	bx	lr

00003112 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3112:	b082      	sub	sp, #8
    3114:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3116:	bf00      	nop
    3118:	b002      	add	sp, #8
    311a:	4770      	bx	lr

0000311c <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    311c:	b500      	push	{lr}
    311e:	b083      	sub	sp, #12
    3120:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3122:	9b01      	ldr	r3, [sp, #4]
    3124:	2b00      	cmp	r3, #0
    3126:	d002      	beq.n	312e <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3128:	9801      	ldr	r0, [sp, #4]
    312a:	f000 f86a 	bl	3202 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    312e:	bf00      	nop
    3130:	b003      	add	sp, #12
    3132:	f85d fb04 	ldr.w	pc, [sp], #4

00003136 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3136:	b500      	push	{lr}
    3138:	b083      	sub	sp, #12
    313a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    313c:	9b01      	ldr	r3, [sp, #4]
    313e:	2b00      	cmp	r3, #0
    3140:	d002      	beq.n	3148 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    3142:	9801      	ldr	r0, [sp, #4]
    3144:	f000 f884 	bl	3250 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3148:	bf00      	nop
    314a:	b003      	add	sp, #12
    314c:	f85d fb04 	ldr.w	pc, [sp], #4

00003150 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3150:	b500      	push	{lr}
    3152:	b089      	sub	sp, #36	; 0x24
    3154:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3156:	2300      	movs	r3, #0
    3158:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    315c:	9b01      	ldr	r3, [sp, #4]
    315e:	2b00      	cmp	r3, #0
    3160:	d031      	beq.n	31c6 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    3162:	4b1b      	ldr	r3, [pc, #108]	; (31d0 <Clock_Ip_CompleteSOSC+0x80>)
    3164:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3168:	f003 0301 	and.w	r3, r3, #1
    316c:	2b00      	cmp	r3, #0
    316e:	d02a      	beq.n	31c6 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3170:	aa03      	add	r2, sp, #12
    3172:	a904      	add	r1, sp, #16
    3174:	a805      	add	r0, sp, #20
    3176:	f24c 3350 	movw	r3, #50000	; 0xc350
    317a:	f7ff fd1d 	bl	2bb8 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    317e:	4b14      	ldr	r3, [pc, #80]	; (31d0 <Clock_Ip_CompleteSOSC+0x80>)
    3180:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3184:	0e1b      	lsrs	r3, r3, #24
    3186:	f003 0301 	and.w	r3, r3, #1
    318a:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    318c:	9a03      	ldr	r2, [sp, #12]
    318e:	a904      	add	r1, sp, #16
    3190:	ab05      	add	r3, sp, #20
    3192:	4618      	mov	r0, r3
    3194:	f7ff fd2a 	bl	2bec <Clock_Ip_TimeoutExpired>
    3198:	4603      	mov	r3, r0
    319a:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    319e:	9b06      	ldr	r3, [sp, #24]
    31a0:	2b00      	cmp	r3, #0
    31a2:	d106      	bne.n	31b2 <Clock_Ip_CompleteSOSC+0x62>
    31a4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31a8:	f083 0301 	eor.w	r3, r3, #1
    31ac:	b2db      	uxtb	r3, r3
    31ae:	2b00      	cmp	r3, #0
    31b0:	d1e5      	bne.n	317e <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    31b2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31b6:	2b00      	cmp	r3, #0
    31b8:	d005      	beq.n	31c6 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    31ba:	9b01      	ldr	r3, [sp, #4]
    31bc:	681b      	ldr	r3, [r3, #0]
    31be:	4619      	mov	r1, r3
    31c0:	2001      	movs	r0, #1
    31c2:	f7ff fce9 	bl	2b98 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    31c6:	bf00      	nop
    31c8:	b009      	add	sp, #36	; 0x24
    31ca:	f85d fb04 	ldr.w	pc, [sp], #4
    31ce:	bf00      	nop
    31d0:	40064000 	.word	0x40064000

000031d4 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    31d4:	b500      	push	{lr}
    31d6:	b083      	sub	sp, #12
    31d8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    31da:	9801      	ldr	r0, [sp, #4]
    31dc:	f000 f8c0 	bl	3360 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    31e0:	bf00      	nop
    31e2:	b003      	add	sp, #12
    31e4:	f85d fb04 	ldr.w	pc, [sp], #4

000031e8 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    31e8:	b500      	push	{lr}
    31ea:	b083      	sub	sp, #12
    31ec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31ee:	9b01      	ldr	r3, [sp, #4]
    31f0:	2b00      	cmp	r3, #0
    31f2:	d002      	beq.n	31fa <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    31f4:	9801      	ldr	r0, [sp, #4]
    31f6:	f000 f8c3 	bl	3380 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31fa:	bf00      	nop
    31fc:	b003      	add	sp, #12
    31fe:	f85d fb04 	ldr.w	pc, [sp], #4

00003202 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3202:	b082      	sub	sp, #8
    3204:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3206:	4b11      	ldr	r3, [pc, #68]	; (324c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3208:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    320c:	4a0f      	ldr	r2, [pc, #60]	; (324c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    320e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3212:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    3216:	4b0d      	ldr	r3, [pc, #52]	; (324c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3218:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    321c:	4a0b      	ldr	r2, [pc, #44]	; (324c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    321e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3222:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    3226:	4b09      	ldr	r3, [pc, #36]	; (324c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3228:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    322c:	4a07      	ldr	r2, [pc, #28]	; (324c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    322e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3232:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    3236:	4b05      	ldr	r3, [pc, #20]	; (324c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3238:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    323c:	4a03      	ldr	r2, [pc, #12]	; (324c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    323e:	f023 0301 	bic.w	r3, r3, #1
    3242:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3246:	bf00      	nop
    3248:	b002      	add	sp, #8
    324a:	4770      	bx	lr
    324c:	40064000 	.word	0x40064000

00003250 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3250:	b082      	sub	sp, #8
    3252:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    3254:	9b01      	ldr	r3, [sp, #4]
    3256:	891b      	ldrh	r3, [r3, #8]
    3258:	2b01      	cmp	r3, #1
    325a:	d174      	bne.n	3346 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    325c:	9b01      	ldr	r3, [sp, #4]
    325e:	7bdb      	ldrb	r3, [r3, #15]
    3260:	2b00      	cmp	r3, #0
    3262:	d002      	beq.n	326a <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    3264:	2b01      	cmp	r3, #1
    3266:	d009      	beq.n	327c <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    3268:	e011      	b.n	328e <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    326a:	4b39      	ldr	r3, [pc, #228]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    326c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3270:	4a37      	ldr	r2, [pc, #220]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3272:	f023 0308 	bic.w	r3, r3, #8
    3276:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    327a:	e008      	b.n	328e <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    327c:	4b34      	ldr	r3, [pc, #208]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    327e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3282:	4a33      	ldr	r2, [pc, #204]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3284:	f043 0308 	orr.w	r3, r3, #8
    3288:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    328c:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    328e:	4b30      	ldr	r3, [pc, #192]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3290:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3294:	4a2e      	ldr	r2, [pc, #184]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3296:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    329a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    329e:	9b01      	ldr	r3, [sp, #4]
    32a0:	685b      	ldr	r3, [r3, #4]
    32a2:	4a2c      	ldr	r2, [pc, #176]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    32a4:	4293      	cmp	r3, r2
    32a6:	d90d      	bls.n	32c4 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    32a8:	9b01      	ldr	r3, [sp, #4]
    32aa:	685b      	ldr	r3, [r3, #4]
    32ac:	4a2a      	ldr	r2, [pc, #168]	; (3358 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    32ae:	4293      	cmp	r3, r2
    32b0:	d208      	bcs.n	32c4 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    32b2:	4b27      	ldr	r3, [pc, #156]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32b8:	4a25      	ldr	r2, [pc, #148]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32ba:	f043 0320 	orr.w	r3, r3, #32
    32be:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    32c2:	e007      	b.n	32d4 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    32c4:	4b22      	ldr	r3, [pc, #136]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32ca:	4a21      	ldr	r2, [pc, #132]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32cc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    32d0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    32d4:	9b01      	ldr	r3, [sp, #4]
    32d6:	7b1b      	ldrb	r3, [r3, #12]
    32d8:	2b00      	cmp	r3, #0
    32da:	d108      	bne.n	32ee <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    32dc:	4b1c      	ldr	r3, [pc, #112]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32e2:	4a1b      	ldr	r2, [pc, #108]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32e4:	f043 0304 	orr.w	r3, r3, #4
    32e8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    32ec:	e007      	b.n	32fe <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    32ee:	4b18      	ldr	r3, [pc, #96]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32f4:	4a16      	ldr	r2, [pc, #88]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32f6:	f023 0304 	bic.w	r3, r3, #4
    32fa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    32fe:	9b01      	ldr	r3, [sp, #4]
    3300:	7c1b      	ldrb	r3, [r3, #16]
    3302:	2b02      	cmp	r3, #2
    3304:	d011      	beq.n	332a <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3306:	2b02      	cmp	r3, #2
    3308:	dc14      	bgt.n	3334 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    330a:	2b00      	cmp	r3, #0
    330c:	d002      	beq.n	3314 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    330e:	2b01      	cmp	r3, #1
    3310:	d005      	beq.n	331e <Clock_Ip_SetSOSC_TrustedCall+0xce>
    3312:	e00f      	b.n	3334 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3314:	4b0e      	ldr	r3, [pc, #56]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3316:	2201      	movs	r2, #1
    3318:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    331c:	e014      	b.n	3348 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    331e:	4b0c      	ldr	r3, [pc, #48]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3320:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3324:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3328:	e00e      	b.n	3348 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    332a:	4b09      	ldr	r3, [pc, #36]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    332c:	4a0b      	ldr	r2, [pc, #44]	; (335c <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    332e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    3332:	e009      	b.n	3348 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3334:	4b06      	ldr	r3, [pc, #24]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3336:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    333a:	4a05      	ldr	r2, [pc, #20]	; (3350 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    333c:	f043 0301 	orr.w	r3, r3, #1
    3340:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3344:	e000      	b.n	3348 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    3346:	bf00      	nop
}
    3348:	bf00      	nop
    334a:	b002      	add	sp, #8
    334c:	4770      	bx	lr
    334e:	bf00      	nop
    3350:	40064000 	.word	0x40064000
    3354:	003d08ff 	.word	0x003d08ff
    3358:	007a1200 	.word	0x007a1200
    335c:	00030001 	.word	0x00030001

00003360 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    3360:	b082      	sub	sp, #8
    3362:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    3364:	4b05      	ldr	r3, [pc, #20]	; (337c <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3366:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    336a:	4a04      	ldr	r2, [pc, #16]	; (337c <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    336c:	f023 0301 	bic.w	r3, r3, #1
    3370:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3374:	bf00      	nop
    3376:	b002      	add	sp, #8
    3378:	4770      	bx	lr
    337a:	bf00      	nop
    337c:	40064000 	.word	0x40064000

00003380 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3380:	b082      	sub	sp, #8
    3382:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3384:	9b01      	ldr	r3, [sp, #4]
    3386:	891b      	ldrh	r3, [r3, #8]
    3388:	2b01      	cmp	r3, #1
    338a:	d107      	bne.n	339c <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    338c:	4b05      	ldr	r3, [pc, #20]	; (33a4 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    338e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3392:	4a04      	ldr	r2, [pc, #16]	; (33a4 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3394:	f043 0301 	orr.w	r3, r3, #1
    3398:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    339c:	bf00      	nop
    339e:	b002      	add	sp, #8
    33a0:	4770      	bx	lr
    33a2:	bf00      	nop
    33a4:	40064000 	.word	0x40064000

000033a8 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    33a8:	b082      	sub	sp, #8
    33aa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    33ac:	bf00      	nop
    33ae:	b002      	add	sp, #8
    33b0:	4770      	bx	lr

000033b2 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    33b2:	b082      	sub	sp, #8
    33b4:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    33b6:	2300      	movs	r3, #0
}
    33b8:	4618      	mov	r0, r3
    33ba:	b002      	add	sp, #8
    33bc:	4770      	bx	lr

000033be <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    33be:	b082      	sub	sp, #8
    33c0:	9001      	str	r0, [sp, #4]
    33c2:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    33c4:	bf00      	nop
    33c6:	b002      	add	sp, #8
    33c8:	4770      	bx	lr
	...

000033cc <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    33cc:	b082      	sub	sp, #8
    33ce:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    33d0:	bf00      	nop
    33d2:	b002      	add	sp, #8
    33d4:	4770      	bx	lr

000033d6 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    33d6:	b082      	sub	sp, #8
    33d8:	9001      	str	r0, [sp, #4]
    33da:	460b      	mov	r3, r1
    33dc:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    33e0:	bf00      	nop
    33e2:	b002      	add	sp, #8
    33e4:	4770      	bx	lr

000033e6 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    33e6:	b500      	push	{lr}
    33e8:	b083      	sub	sp, #12
    33ea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33ec:	9b01      	ldr	r3, [sp, #4]
    33ee:	2b00      	cmp	r3, #0
    33f0:	d002      	beq.n	33f8 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    33f2:	9801      	ldr	r0, [sp, #4]
    33f4:	f000 f8e7 	bl	35c6 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33f8:	bf00      	nop
    33fa:	b003      	add	sp, #12
    33fc:	f85d fb04 	ldr.w	pc, [sp], #4

00003400 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3400:	b500      	push	{lr}
    3402:	b085      	sub	sp, #20
    3404:	9001      	str	r0, [sp, #4]
    3406:	460b      	mov	r3, r1
    3408:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    340c:	9b01      	ldr	r3, [sp, #4]
    340e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3410:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3414:	2b00      	cmp	r3, #0
    3416:	d003      	beq.n	3420 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3418:	2300      	movs	r3, #0
    341a:	f8ad 300c 	strh.w	r3, [sp, #12]
    341e:	e002      	b.n	3426 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3420:	2301      	movs	r3, #1
    3422:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    3426:	ab02      	add	r3, sp, #8
    3428:	4618      	mov	r0, r3
    342a:	f7ff ffdc 	bl	33e6 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    342e:	bf00      	nop
    3430:	b005      	add	sp, #20
    3432:	f85d fb04 	ldr.w	pc, [sp], #4

00003436 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    3436:	b500      	push	{lr}
    3438:	b083      	sub	sp, #12
    343a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    343c:	9b01      	ldr	r3, [sp, #4]
    343e:	2b00      	cmp	r3, #0
    3440:	d002      	beq.n	3448 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    3442:	9801      	ldr	r0, [sp, #4]
    3444:	f000 f8d6 	bl	35f4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3448:	bf00      	nop
    344a:	b003      	add	sp, #12
    344c:	f85d fb04 	ldr.w	pc, [sp], #4

00003450 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3450:	b500      	push	{lr}
    3452:	b085      	sub	sp, #20
    3454:	9001      	str	r0, [sp, #4]
    3456:	460b      	mov	r3, r1
    3458:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    345c:	9b01      	ldr	r3, [sp, #4]
    345e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3460:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3464:	2b00      	cmp	r3, #0
    3466:	d003      	beq.n	3470 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    3468:	2300      	movs	r3, #0
    346a:	f8ad 300c 	strh.w	r3, [sp, #12]
    346e:	e002      	b.n	3476 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3470:	2301      	movs	r3, #1
    3472:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    3476:	ab02      	add	r3, sp, #8
    3478:	4618      	mov	r0, r3
    347a:	f7ff ffdc 	bl	3436 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    347e:	bf00      	nop
    3480:	b005      	add	sp, #20
    3482:	f85d fb04 	ldr.w	pc, [sp], #4

00003486 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    3486:	b500      	push	{lr}
    3488:	b083      	sub	sp, #12
    348a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    348c:	9b01      	ldr	r3, [sp, #4]
    348e:	2b00      	cmp	r3, #0
    3490:	d002      	beq.n	3498 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    3492:	9801      	ldr	r0, [sp, #4]
    3494:	f000 f8c6 	bl	3624 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3498:	bf00      	nop
    349a:	b003      	add	sp, #12
    349c:	f85d fb04 	ldr.w	pc, [sp], #4

000034a0 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    34a0:	b500      	push	{lr}
    34a2:	b085      	sub	sp, #20
    34a4:	9001      	str	r0, [sp, #4]
    34a6:	460b      	mov	r3, r1
    34a8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    34ac:	9b01      	ldr	r3, [sp, #4]
    34ae:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    34b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    34b4:	2b00      	cmp	r3, #0
    34b6:	d003      	beq.n	34c0 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    34b8:	2300      	movs	r3, #0
    34ba:	f8ad 300c 	strh.w	r3, [sp, #12]
    34be:	e002      	b.n	34c6 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    34c0:	2301      	movs	r3, #1
    34c2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    34c6:	ab02      	add	r3, sp, #8
    34c8:	4618      	mov	r0, r3
    34ca:	f7ff ffdc 	bl	3486 <Clock_Ip_ClockSetSimClkoutEnable>
}
    34ce:	bf00      	nop
    34d0:	b005      	add	sp, #20
    34d2:	f85d fb04 	ldr.w	pc, [sp], #4

000034d6 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    34d6:	b500      	push	{lr}
    34d8:	b083      	sub	sp, #12
    34da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34dc:	9b01      	ldr	r3, [sp, #4]
    34de:	2b00      	cmp	r3, #0
    34e0:	d002      	beq.n	34e8 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    34e2:	9801      	ldr	r0, [sp, #4]
    34e4:	f000 f8b6 	bl	3654 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34e8:	bf00      	nop
    34ea:	b003      	add	sp, #12
    34ec:	f85d fb04 	ldr.w	pc, [sp], #4

000034f0 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    34f0:	b500      	push	{lr}
    34f2:	b085      	sub	sp, #20
    34f4:	9001      	str	r0, [sp, #4]
    34f6:	460b      	mov	r3, r1
    34f8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    34fc:	9b01      	ldr	r3, [sp, #4]
    34fe:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3500:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3504:	2b00      	cmp	r3, #0
    3506:	d003      	beq.n	3510 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3508:	2300      	movs	r3, #0
    350a:	f8ad 300c 	strh.w	r3, [sp, #12]
    350e:	e002      	b.n	3516 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3510:	2301      	movs	r3, #1
    3512:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    3516:	ab02      	add	r3, sp, #8
    3518:	4618      	mov	r0, r3
    351a:	f7ff ffdc 	bl	34d6 <Clock_Ip_ClockSetPccCgcEnable>
}
    351e:	bf00      	nop
    3520:	b005      	add	sp, #20
    3522:	f85d fb04 	ldr.w	pc, [sp], #4

00003526 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    3526:	b500      	push	{lr}
    3528:	b083      	sub	sp, #12
    352a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    352c:	9b01      	ldr	r3, [sp, #4]
    352e:	2b00      	cmp	r3, #0
    3530:	d002      	beq.n	3538 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    3532:	9801      	ldr	r0, [sp, #4]
    3534:	f000 f8bc 	bl	36b0 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3538:	bf00      	nop
    353a:	b003      	add	sp, #12
    353c:	f85d fb04 	ldr.w	pc, [sp], #4

00003540 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    3540:	b500      	push	{lr}
    3542:	b085      	sub	sp, #20
    3544:	9001      	str	r0, [sp, #4]
    3546:	460b      	mov	r3, r1
    3548:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    354c:	9b01      	ldr	r3, [sp, #4]
    354e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3550:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3554:	2b00      	cmp	r3, #0
    3556:	d003      	beq.n	3560 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    3558:	2300      	movs	r3, #0
    355a:	f8ad 300c 	strh.w	r3, [sp, #12]
    355e:	e002      	b.n	3566 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3560:	2301      	movs	r3, #1
    3562:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    3566:	ab02      	add	r3, sp, #8
    3568:	4618      	mov	r0, r3
    356a:	f7ff ffdc 	bl	3526 <Clock_Ip_ClockSetSimGate>
}
    356e:	bf00      	nop
    3570:	b005      	add	sp, #20
    3572:	f85d fb04 	ldr.w	pc, [sp], #4

00003576 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    3576:	b500      	push	{lr}
    3578:	b083      	sub	sp, #12
    357a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    357c:	9b01      	ldr	r3, [sp, #4]
    357e:	2b00      	cmp	r3, #0
    3580:	d002      	beq.n	3588 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    3582:	9801      	ldr	r0, [sp, #4]
    3584:	f000 f8c0 	bl	3708 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3588:	bf00      	nop
    358a:	b003      	add	sp, #12
    358c:	f85d fb04 	ldr.w	pc, [sp], #4

00003590 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3590:	b500      	push	{lr}
    3592:	b085      	sub	sp, #20
    3594:	9001      	str	r0, [sp, #4]
    3596:	460b      	mov	r3, r1
    3598:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    359c:	9b01      	ldr	r3, [sp, #4]
    359e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    35a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    35a4:	2b00      	cmp	r3, #0
    35a6:	d003      	beq.n	35b0 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    35a8:	2300      	movs	r3, #0
    35aa:	f8ad 300c 	strh.w	r3, [sp, #12]
    35ae:	e002      	b.n	35b6 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    35b0:	2301      	movs	r3, #1
    35b2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    35b6:	ab02      	add	r3, sp, #8
    35b8:	4618      	mov	r0, r3
    35ba:	f7ff ffdc 	bl	3576 <Clock_Ip_ClockSetSimTraceEnable>
}
    35be:	bf00      	nop
    35c0:	b005      	add	sp, #20
    35c2:	f85d fb04 	ldr.w	pc, [sp], #4

000035c6 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35c6:	b084      	sub	sp, #16
    35c8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    35ca:	4b09      	ldr	r3, [pc, #36]	; (35f0 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    35cc:	691b      	ldr	r3, [r3, #16]
    35ce:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    35d0:	9b03      	ldr	r3, [sp, #12]
    35d2:	f023 0301 	bic.w	r3, r3, #1
    35d6:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    35d8:	9b01      	ldr	r3, [sp, #4]
    35da:	889b      	ldrh	r3, [r3, #4]
    35dc:	461a      	mov	r2, r3
    35de:	9b03      	ldr	r3, [sp, #12]
    35e0:	4313      	orrs	r3, r2
    35e2:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    35e4:	4a02      	ldr	r2, [pc, #8]	; (35f0 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    35e6:	9b03      	ldr	r3, [sp, #12]
    35e8:	6113      	str	r3, [r2, #16]
}
    35ea:	bf00      	nop
    35ec:	b004      	add	sp, #16
    35ee:	4770      	bx	lr
    35f0:	40048000 	.word	0x40048000

000035f4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35f4:	b084      	sub	sp, #16
    35f6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    35f8:	4b09      	ldr	r3, [pc, #36]	; (3620 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    35fa:	691b      	ldr	r3, [r3, #16]
    35fc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    35fe:	9b03      	ldr	r3, [sp, #12]
    3600:	f023 0302 	bic.w	r3, r3, #2
    3604:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3606:	9b01      	ldr	r3, [sp, #4]
    3608:	889b      	ldrh	r3, [r3, #4]
    360a:	005b      	lsls	r3, r3, #1
    360c:	9a03      	ldr	r2, [sp, #12]
    360e:	4313      	orrs	r3, r2
    3610:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3612:	4a03      	ldr	r2, [pc, #12]	; (3620 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3614:	9b03      	ldr	r3, [sp, #12]
    3616:	6113      	str	r3, [r2, #16]
}
    3618:	bf00      	nop
    361a:	b004      	add	sp, #16
    361c:	4770      	bx	lr
    361e:	bf00      	nop
    3620:	40048000 	.word	0x40048000

00003624 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3624:	b084      	sub	sp, #16
    3626:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3628:	4b09      	ldr	r3, [pc, #36]	; (3650 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    362a:	685b      	ldr	r3, [r3, #4]
    362c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    362e:	9b03      	ldr	r3, [sp, #12]
    3630:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3634:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    3636:	9b01      	ldr	r3, [sp, #4]
    3638:	889b      	ldrh	r3, [r3, #4]
    363a:	02db      	lsls	r3, r3, #11
    363c:	9a03      	ldr	r2, [sp, #12]
    363e:	4313      	orrs	r3, r2
    3640:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3642:	4a03      	ldr	r2, [pc, #12]	; (3650 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3644:	9b03      	ldr	r3, [sp, #12]
    3646:	6053      	str	r3, [r2, #4]
}
    3648:	bf00      	nop
    364a:	b004      	add	sp, #16
    364c:	4770      	bx	lr
    364e:	bf00      	nop
    3650:	40048000 	.word	0x40048000

00003654 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3654:	b084      	sub	sp, #16
    3656:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    3658:	4913      	ldr	r1, [pc, #76]	; (36a8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    365a:	9b01      	ldr	r3, [sp, #4]
    365c:	681a      	ldr	r2, [r3, #0]
    365e:	4813      	ldr	r0, [pc, #76]	; (36ac <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3660:	4613      	mov	r3, r2
    3662:	00db      	lsls	r3, r3, #3
    3664:	4413      	add	r3, r2
    3666:	4403      	add	r3, r0
    3668:	3306      	adds	r3, #6
    366a:	781b      	ldrb	r3, [r3, #0]
    366c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3670:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    3672:	9b03      	ldr	r3, [sp, #12]
    3674:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    3678:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    367a:	9b01      	ldr	r3, [sp, #4]
    367c:	889b      	ldrh	r3, [r3, #4]
    367e:	079b      	lsls	r3, r3, #30
    3680:	9a03      	ldr	r2, [sp, #12]
    3682:	4313      	orrs	r3, r2
    3684:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    3686:	4908      	ldr	r1, [pc, #32]	; (36a8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3688:	9b01      	ldr	r3, [sp, #4]
    368a:	681a      	ldr	r2, [r3, #0]
    368c:	4807      	ldr	r0, [pc, #28]	; (36ac <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    368e:	4613      	mov	r3, r2
    3690:	00db      	lsls	r3, r3, #3
    3692:	4413      	add	r3, r2
    3694:	4403      	add	r3, r0
    3696:	3306      	adds	r3, #6
    3698:	781b      	ldrb	r3, [r3, #0]
    369a:	461a      	mov	r2, r3
    369c:	9b03      	ldr	r3, [sp, #12]
    369e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    36a2:	bf00      	nop
    36a4:	b004      	add	sp, #16
    36a6:	4770      	bx	lr
    36a8:	40065000 	.word	0x40065000
    36ac:	0000a6bc 	.word	0x0000a6bc

000036b0 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    36b0:	b086      	sub	sp, #24
    36b2:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    36b4:	9b01      	ldr	r3, [sp, #4]
    36b6:	889b      	ldrh	r3, [r3, #4]
    36b8:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    36ba:	9b01      	ldr	r3, [sp, #4]
    36bc:	681a      	ldr	r2, [r3, #0]
    36be:	4910      	ldr	r1, [pc, #64]	; (3700 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    36c0:	4613      	mov	r3, r2
    36c2:	00db      	lsls	r3, r3, #3
    36c4:	4413      	add	r3, r2
    36c6:	440b      	add	r3, r1
    36c8:	3306      	adds	r3, #6
    36ca:	781b      	ldrb	r3, [r3, #0]
    36cc:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    36ce:	4b0d      	ldr	r3, [pc, #52]	; (3704 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    36d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    36d2:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    36d4:	2201      	movs	r2, #1
    36d6:	9b04      	ldr	r3, [sp, #16]
    36d8:	fa02 f303 	lsl.w	r3, r2, r3
    36dc:	43db      	mvns	r3, r3
    36de:	9a03      	ldr	r2, [sp, #12]
    36e0:	4013      	ands	r3, r2
    36e2:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    36e4:	9a05      	ldr	r2, [sp, #20]
    36e6:	9b04      	ldr	r3, [sp, #16]
    36e8:	fa02 f303 	lsl.w	r3, r2, r3
    36ec:	9a03      	ldr	r2, [sp, #12]
    36ee:	4313      	orrs	r3, r2
    36f0:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    36f2:	4a04      	ldr	r2, [pc, #16]	; (3704 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    36f4:	9b03      	ldr	r3, [sp, #12]
    36f6:	6413      	str	r3, [r2, #64]	; 0x40
}
    36f8:	bf00      	nop
    36fa:	b006      	add	sp, #24
    36fc:	4770      	bx	lr
    36fe:	bf00      	nop
    3700:	0000a6bc 	.word	0x0000a6bc
    3704:	40048000 	.word	0x40048000

00003708 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3708:	b084      	sub	sp, #16
    370a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    370c:	4b0a      	ldr	r3, [pc, #40]	; (3738 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    370e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3710:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    3712:	9b01      	ldr	r3, [sp, #4]
    3714:	889b      	ldrh	r3, [r3, #4]
    3716:	2b01      	cmp	r3, #1
    3718:	d104      	bne.n	3724 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    371a:	9b03      	ldr	r3, [sp, #12]
    371c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3720:	9303      	str	r3, [sp, #12]
    3722:	e003      	b.n	372c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3724:	9b03      	ldr	r3, [sp, #12]
    3726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    372a:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    372c:	4a02      	ldr	r2, [pc, #8]	; (3738 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    372e:	9b03      	ldr	r3, [sp, #12]
    3730:	6693      	str	r3, [r2, #104]	; 0x68
}
    3732:	bf00      	nop
    3734:	b004      	add	sp, #16
    3736:	4770      	bx	lr
    3738:	40048000 	.word	0x40048000

0000373c <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    373c:	b082      	sub	sp, #8
    373e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3740:	bf00      	nop
    3742:	b002      	add	sp, #8
    3744:	4770      	bx	lr

00003746 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    3746:	b082      	sub	sp, #8
    3748:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    374a:	bf00      	nop
    374c:	b002      	add	sp, #8
    374e:	4770      	bx	lr

00003750 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3750:	b500      	push	{lr}
    3752:	b083      	sub	sp, #12
    3754:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3756:	9b01      	ldr	r3, [sp, #4]
    3758:	2b00      	cmp	r3, #0
    375a:	d002      	beq.n	3762 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    375c:	9801      	ldr	r0, [sp, #4]
    375e:	f000 f8d1 	bl	3904 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3762:	bf00      	nop
    3764:	b003      	add	sp, #12
    3766:	f85d fb04 	ldr.w	pc, [sp], #4

0000376a <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    376a:	b500      	push	{lr}
    376c:	b083      	sub	sp, #12
    376e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3770:	9b01      	ldr	r3, [sp, #4]
    3772:	2b00      	cmp	r3, #0
    3774:	d002      	beq.n	377c <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    3776:	9801      	ldr	r0, [sp, #4]
    3778:	f000 f950 	bl	3a1c <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    377c:	bf00      	nop
    377e:	b003      	add	sp, #12
    3780:	f85d fb04 	ldr.w	pc, [sp], #4

00003784 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3784:	b500      	push	{lr}
    3786:	b083      	sub	sp, #12
    3788:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    378a:	9801      	ldr	r0, [sp, #4]
    378c:	f000 f98e 	bl	3aac <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3790:	bf00      	nop
    3792:	b003      	add	sp, #12
    3794:	f85d fb04 	ldr.w	pc, [sp], #4

00003798 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3798:	b500      	push	{lr}
    379a:	b083      	sub	sp, #12
    379c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    379e:	9b01      	ldr	r3, [sp, #4]
    37a0:	2b00      	cmp	r3, #0
    37a2:	d002      	beq.n	37aa <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    37a4:	9801      	ldr	r0, [sp, #4]
    37a6:	f000 f999 	bl	3adc <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37aa:	bf00      	nop
    37ac:	b003      	add	sp, #12
    37ae:	f85d fb04 	ldr.w	pc, [sp], #4

000037b2 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    37b2:	b500      	push	{lr}
    37b4:	b083      	sub	sp, #12
    37b6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37b8:	9b01      	ldr	r3, [sp, #4]
    37ba:	2b00      	cmp	r3, #0
    37bc:	d002      	beq.n	37c4 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    37be:	9801      	ldr	r0, [sp, #4]
    37c0:	f000 f9b0 	bl	3b24 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37c4:	bf00      	nop
    37c6:	b003      	add	sp, #12
    37c8:	f85d fb04 	ldr.w	pc, [sp], #4

000037cc <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    37cc:	b500      	push	{lr}
    37ce:	b083      	sub	sp, #12
    37d0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    37d2:	9801      	ldr	r0, [sp, #4]
    37d4:	f000 f9ba 	bl	3b4c <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    37d8:	bf00      	nop
    37da:	b003      	add	sp, #12
    37dc:	f85d fb04 	ldr.w	pc, [sp], #4

000037e0 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    37e0:	b500      	push	{lr}
    37e2:	b083      	sub	sp, #12
    37e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37e6:	9b01      	ldr	r3, [sp, #4]
    37e8:	2b00      	cmp	r3, #0
    37ea:	d002      	beq.n	37f2 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    37ec:	9801      	ldr	r0, [sp, #4]
    37ee:	f000 f9bd 	bl	3b6c <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37f2:	bf00      	nop
    37f4:	b003      	add	sp, #12
    37f6:	f85d fb04 	ldr.w	pc, [sp], #4

000037fa <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    37fa:	b500      	push	{lr}
    37fc:	b083      	sub	sp, #12
    37fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3800:	9b01      	ldr	r3, [sp, #4]
    3802:	2b00      	cmp	r3, #0
    3804:	d002      	beq.n	380c <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3806:	9801      	ldr	r0, [sp, #4]
    3808:	f000 f9d4 	bl	3bb4 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    380c:	bf00      	nop
    380e:	b003      	add	sp, #12
    3810:	f85d fb04 	ldr.w	pc, [sp], #4

00003814 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3814:	b500      	push	{lr}
    3816:	b083      	sub	sp, #12
    3818:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    381a:	9801      	ldr	r0, [sp, #4]
    381c:	f000 f9de 	bl	3bdc <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3820:	bf00      	nop
    3822:	b003      	add	sp, #12
    3824:	f85d fb04 	ldr.w	pc, [sp], #4

00003828 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3828:	b500      	push	{lr}
    382a:	b089      	sub	sp, #36	; 0x24
    382c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    382e:	2300      	movs	r3, #0
    3830:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3834:	4b20      	ldr	r3, [pc, #128]	; (38b8 <SetInputSouceSytemClock+0x90>)
    3836:	695b      	ldr	r3, [r3, #20]
    3838:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    383a:	9b06      	ldr	r3, [sp, #24]
    383c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3840:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3842:	9b01      	ldr	r3, [sp, #4]
    3844:	061b      	lsls	r3, r3, #24
    3846:	9a06      	ldr	r2, [sp, #24]
    3848:	4313      	orrs	r3, r2
    384a:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    384c:	4a1a      	ldr	r2, [pc, #104]	; (38b8 <SetInputSouceSytemClock+0x90>)
    384e:	9b06      	ldr	r3, [sp, #24]
    3850:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3852:	aa02      	add	r2, sp, #8
    3854:	a903      	add	r1, sp, #12
    3856:	a804      	add	r0, sp, #16
    3858:	f24c 3350 	movw	r3, #50000	; 0xc350
    385c:	f7ff f9ac 	bl	2bb8 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3860:	4b15      	ldr	r3, [pc, #84]	; (38b8 <SetInputSouceSytemClock+0x90>)
    3862:	691b      	ldr	r3, [r3, #16]
    3864:	0e1b      	lsrs	r3, r3, #24
    3866:	f003 030f 	and.w	r3, r3, #15
    386a:	9a01      	ldr	r2, [sp, #4]
    386c:	429a      	cmp	r2, r3
    386e:	bf0c      	ite	eq
    3870:	2301      	moveq	r3, #1
    3872:	2300      	movne	r3, #0
    3874:	b2db      	uxtb	r3, r3
    3876:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3878:	9a02      	ldr	r2, [sp, #8]
    387a:	a903      	add	r1, sp, #12
    387c:	ab04      	add	r3, sp, #16
    387e:	4618      	mov	r0, r3
    3880:	f7ff f9b4 	bl	2bec <Clock_Ip_TimeoutExpired>
    3884:	4603      	mov	r3, r0
    3886:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    388a:	9b05      	ldr	r3, [sp, #20]
    388c:	2b00      	cmp	r3, #0
    388e:	d106      	bne.n	389e <SetInputSouceSytemClock+0x76>
    3890:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3894:	f083 0301 	eor.w	r3, r3, #1
    3898:	b2db      	uxtb	r3, r3
    389a:	2b00      	cmp	r3, #0
    389c:	d1e0      	bne.n	3860 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    389e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    38a2:	2b00      	cmp	r3, #0
    38a4:	d003      	beq.n	38ae <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    38a6:	2105      	movs	r1, #5
    38a8:	2001      	movs	r0, #1
    38aa:	f7ff f975 	bl	2b98 <Clock_Ip_ReportClockErrors>
    }
}
    38ae:	bf00      	nop
    38b0:	b009      	add	sp, #36	; 0x24
    38b2:	f85d fb04 	ldr.w	pc, [sp], #4
    38b6:	bf00      	nop
    38b8:	40064000 	.word	0x40064000

000038bc <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    38bc:	b500      	push	{lr}
    38be:	b083      	sub	sp, #12
    38c0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38c2:	9b01      	ldr	r3, [sp, #4]
    38c4:	2b00      	cmp	r3, #0
    38c6:	d002      	beq.n	38ce <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    38c8:	9801      	ldr	r0, [sp, #4]
    38ca:	f000 f997 	bl	3bfc <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38ce:	bf00      	nop
    38d0:	b003      	add	sp, #12
    38d2:	f85d fb04 	ldr.w	pc, [sp], #4

000038d6 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    38d6:	b500      	push	{lr}
    38d8:	b083      	sub	sp, #12
    38da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38dc:	9b01      	ldr	r3, [sp, #4]
    38de:	2b00      	cmp	r3, #0
    38e0:	d002      	beq.n	38e8 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    38e2:	9801      	ldr	r0, [sp, #4]
    38e4:	f000 fa7e 	bl	3de4 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38e8:	bf00      	nop
    38ea:	b003      	add	sp, #12
    38ec:	f85d fb04 	ldr.w	pc, [sp], #4

000038f0 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    38f0:	b500      	push	{lr}
    38f2:	b083      	sub	sp, #12
    38f4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    38f6:	9801      	ldr	r0, [sp, #4]
    38f8:	f000 fab8 	bl	3e6c <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    38fc:	bf00      	nop
    38fe:	b003      	add	sp, #12
    3900:	f85d fb04 	ldr.w	pc, [sp], #4

00003904 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3904:	b500      	push	{lr}
    3906:	b08b      	sub	sp, #44	; 0x2c
    3908:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    390a:	2300      	movs	r3, #0
    390c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3910:	9b01      	ldr	r3, [sp, #4]
    3912:	2b00      	cmp	r3, #0
    3914:	d10b      	bne.n	392e <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3916:	2305      	movs	r3, #5
    3918:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    391a:	2301      	movs	r3, #1
    391c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3920:	2301      	movs	r3, #1
    3922:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3926:	2301      	movs	r3, #1
    3928:	f88d 3010 	strb.w	r3, [sp, #16]
    392c:	e00e      	b.n	394c <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    392e:	9b01      	ldr	r3, [sp, #4]
    3930:	681b      	ldr	r3, [r3, #0]
    3932:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3934:	9b01      	ldr	r3, [sp, #4]
    3936:	79db      	ldrb	r3, [r3, #7]
    3938:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    393c:	9b01      	ldr	r3, [sp, #4]
    393e:	889b      	ldrh	r3, [r3, #4]
    3940:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3944:	9b01      	ldr	r3, [sp, #4]
    3946:	7a1b      	ldrb	r3, [r3, #8]
    3948:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    394c:	4b32      	ldr	r3, [pc, #200]	; (3a18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    394e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3952:	4a31      	ldr	r2, [pc, #196]	; (3a18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3954:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3958:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    395c:	4b2e      	ldr	r3, [pc, #184]	; (3a18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    395e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3962:	4a2d      	ldr	r2, [pc, #180]	; (3a18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3964:	f023 0301 	bic.w	r3, r3, #1
    3968:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    396c:	4b2a      	ldr	r3, [pc, #168]	; (3a18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    396e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3972:	4a29      	ldr	r2, [pc, #164]	; (3a18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3974:	f023 0304 	bic.w	r3, r3, #4
    3978:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    397c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3980:	2b01      	cmp	r3, #1
    3982:	d144      	bne.n	3a0e <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3984:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3988:	4a23      	ldr	r2, [pc, #140]	; (3a18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    398a:	f003 0301 	and.w	r3, r3, #1
    398e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3992:	4b21      	ldr	r3, [pc, #132]	; (3a18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3994:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3998:	4a1f      	ldr	r2, [pc, #124]	; (3a18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    399a:	f043 0301 	orr.w	r3, r3, #1
    399e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    39a2:	4b1d      	ldr	r3, [pc, #116]	; (3a18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39a4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    39a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    39ac:	009b      	lsls	r3, r3, #2
    39ae:	f003 0304 	and.w	r3, r3, #4
    39b2:	4919      	ldr	r1, [pc, #100]	; (3a18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39b4:	4313      	orrs	r3, r2
    39b6:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    39ba:	aa05      	add	r2, sp, #20
    39bc:	a906      	add	r1, sp, #24
    39be:	a807      	add	r0, sp, #28
    39c0:	f24c 3350 	movw	r3, #50000	; 0xc350
    39c4:	f7ff f8f8 	bl	2bb8 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    39c8:	4b13      	ldr	r3, [pc, #76]	; (3a18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39ce:	0e1b      	lsrs	r3, r3, #24
    39d0:	f003 0301 	and.w	r3, r3, #1
    39d4:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    39d6:	9a05      	ldr	r2, [sp, #20]
    39d8:	a906      	add	r1, sp, #24
    39da:	ab07      	add	r3, sp, #28
    39dc:	4618      	mov	r0, r3
    39de:	f7ff f905 	bl	2bec <Clock_Ip_TimeoutExpired>
    39e2:	4603      	mov	r3, r0
    39e4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    39e8:	9b08      	ldr	r3, [sp, #32]
    39ea:	2b00      	cmp	r3, #0
    39ec:	d106      	bne.n	39fc <Clock_Ip_SetSirc_TrustedCall+0xf8>
    39ee:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    39f2:	f083 0301 	eor.w	r3, r3, #1
    39f6:	b2db      	uxtb	r3, r3
    39f8:	2b00      	cmp	r3, #0
    39fa:	d1e5      	bne.n	39c8 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    39fc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3a00:	2b00      	cmp	r3, #0
    3a02:	d004      	beq.n	3a0e <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3a04:	9b02      	ldr	r3, [sp, #8]
    3a06:	4619      	mov	r1, r3
    3a08:	2001      	movs	r0, #1
    3a0a:	f7ff f8c5 	bl	2b98 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3a0e:	bf00      	nop
    3a10:	b00b      	add	sp, #44	; 0x2c
    3a12:	f85d fb04 	ldr.w	pc, [sp], #4
    3a16:	bf00      	nop
    3a18:	40064000 	.word	0x40064000

00003a1c <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a1c:	b500      	push	{lr}
    3a1e:	b089      	sub	sp, #36	; 0x24
    3a20:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3a22:	2300      	movs	r3, #0
    3a24:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3a28:	4b1f      	ldr	r3, [pc, #124]	; (3aa8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a2e:	4a1e      	ldr	r2, [pc, #120]	; (3aa8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a30:	f043 0301 	orr.w	r3, r3, #1
    3a34:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3a38:	4b1b      	ldr	r3, [pc, #108]	; (3aa8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a3e:	4a1a      	ldr	r2, [pc, #104]	; (3aa8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a40:	f043 0304 	orr.w	r3, r3, #4
    3a44:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a48:	aa03      	add	r2, sp, #12
    3a4a:	a904      	add	r1, sp, #16
    3a4c:	a805      	add	r0, sp, #20
    3a4e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a52:	f7ff f8b1 	bl	2bb8 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3a56:	4b14      	ldr	r3, [pc, #80]	; (3aa8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a5c:	0e1b      	lsrs	r3, r3, #24
    3a5e:	f003 0301 	and.w	r3, r3, #1
    3a62:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3a64:	9a03      	ldr	r2, [sp, #12]
    3a66:	a904      	add	r1, sp, #16
    3a68:	ab05      	add	r3, sp, #20
    3a6a:	4618      	mov	r0, r3
    3a6c:	f7ff f8be 	bl	2bec <Clock_Ip_TimeoutExpired>
    3a70:	4603      	mov	r3, r0
    3a72:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3a76:	9b06      	ldr	r3, [sp, #24]
    3a78:	2b00      	cmp	r3, #0
    3a7a:	d106      	bne.n	3a8a <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3a7c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a80:	f083 0301 	eor.w	r3, r3, #1
    3a84:	b2db      	uxtb	r3, r3
    3a86:	2b00      	cmp	r3, #0
    3a88:	d1e5      	bne.n	3a56 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3a8a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a8e:	2b00      	cmp	r3, #0
    3a90:	d005      	beq.n	3a9e <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3a92:	9b01      	ldr	r3, [sp, #4]
    3a94:	681b      	ldr	r3, [r3, #0]
    3a96:	4619      	mov	r1, r3
    3a98:	2001      	movs	r0, #1
    3a9a:	f7ff f87d 	bl	2b98 <Clock_Ip_ReportClockErrors>
    }
}
    3a9e:	bf00      	nop
    3aa0:	b009      	add	sp, #36	; 0x24
    3aa2:	f85d fb04 	ldr.w	pc, [sp], #4
    3aa6:	bf00      	nop
    3aa8:	40064000 	.word	0x40064000

00003aac <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3aac:	b082      	sub	sp, #8
    3aae:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3ab0:	4b09      	ldr	r3, [pc, #36]	; (3ad8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ab2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ab6:	4a08      	ldr	r2, [pc, #32]	; (3ad8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ab8:	f023 0301 	bic.w	r3, r3, #1
    3abc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3ac0:	4b05      	ldr	r3, [pc, #20]	; (3ad8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ac2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ac6:	4a04      	ldr	r2, [pc, #16]	; (3ad8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ac8:	f023 0304 	bic.w	r3, r3, #4
    3acc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3ad0:	bf00      	nop
    3ad2:	b002      	add	sp, #8
    3ad4:	4770      	bx	lr
    3ad6:	bf00      	nop
    3ad8:	40064000 	.word	0x40064000

00003adc <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3adc:	b082      	sub	sp, #8
    3ade:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3ae0:	4b0f      	ldr	r3, [pc, #60]	; (3b20 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3ae2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ae6:	4a0e      	ldr	r2, [pc, #56]	; (3b20 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3ae8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3aec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3af0:	4b0b      	ldr	r3, [pc, #44]	; (3b20 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3af2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3af6:	4a0a      	ldr	r2, [pc, #40]	; (3b20 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3af8:	f023 0304 	bic.w	r3, r3, #4
    3afc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3b00:	4b07      	ldr	r3, [pc, #28]	; (3b20 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b02:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3b06:	9b01      	ldr	r3, [sp, #4]
    3b08:	7a1b      	ldrb	r3, [r3, #8]
    3b0a:	009b      	lsls	r3, r3, #2
    3b0c:	f003 0304 	and.w	r3, r3, #4
    3b10:	4903      	ldr	r1, [pc, #12]	; (3b20 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b12:	4313      	orrs	r3, r2
    3b14:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3b18:	bf00      	nop
    3b1a:	b002      	add	sp, #8
    3b1c:	4770      	bx	lr
    3b1e:	bf00      	nop
    3b20:	40064000 	.word	0x40064000

00003b24 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b24:	b082      	sub	sp, #8
    3b26:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3b28:	9b01      	ldr	r3, [sp, #4]
    3b2a:	889b      	ldrh	r3, [r3, #4]
    3b2c:	2b01      	cmp	r3, #1
    3b2e:	d107      	bne.n	3b40 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3b30:	4b05      	ldr	r3, [pc, #20]	; (3b48 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3b32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b36:	4a04      	ldr	r2, [pc, #16]	; (3b48 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3b38:	f043 0304 	orr.w	r3, r3, #4
    3b3c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3b40:	bf00      	nop
    3b42:	b002      	add	sp, #8
    3b44:	4770      	bx	lr
    3b46:	bf00      	nop
    3b48:	40064000 	.word	0x40064000

00003b4c <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3b4c:	b082      	sub	sp, #8
    3b4e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b50:	4b05      	ldr	r3, [pc, #20]	; (3b68 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3b52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b56:	4a04      	ldr	r2, [pc, #16]	; (3b68 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3b58:	f023 0304 	bic.w	r3, r3, #4
    3b5c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3b60:	bf00      	nop
    3b62:	b002      	add	sp, #8
    3b64:	4770      	bx	lr
    3b66:	bf00      	nop
    3b68:	40064000 	.word	0x40064000

00003b6c <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b6c:	b082      	sub	sp, #8
    3b6e:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3b70:	4b0f      	ldr	r3, [pc, #60]	; (3bb0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b76:	4a0e      	ldr	r2, [pc, #56]	; (3bb0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b7c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3b80:	4b0b      	ldr	r3, [pc, #44]	; (3bb0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b86:	4a0a      	ldr	r2, [pc, #40]	; (3bb0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b88:	f023 0302 	bic.w	r3, r3, #2
    3b8c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3b90:	4b07      	ldr	r3, [pc, #28]	; (3bb0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b92:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3b96:	9b01      	ldr	r3, [sp, #4]
    3b98:	7a5b      	ldrb	r3, [r3, #9]
    3b9a:	005b      	lsls	r3, r3, #1
    3b9c:	f003 0302 	and.w	r3, r3, #2
    3ba0:	4903      	ldr	r1, [pc, #12]	; (3bb0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3ba2:	4313      	orrs	r3, r2
    3ba4:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3ba8:	bf00      	nop
    3baa:	b002      	add	sp, #8
    3bac:	4770      	bx	lr
    3bae:	bf00      	nop
    3bb0:	40064000 	.word	0x40064000

00003bb4 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3bb4:	b082      	sub	sp, #8
    3bb6:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3bb8:	9b01      	ldr	r3, [sp, #4]
    3bba:	889b      	ldrh	r3, [r3, #4]
    3bbc:	2b01      	cmp	r3, #1
    3bbe:	d107      	bne.n	3bd0 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3bc0:	4b05      	ldr	r3, [pc, #20]	; (3bd8 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3bc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bc6:	4a04      	ldr	r2, [pc, #16]	; (3bd8 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3bc8:	f043 0302 	orr.w	r3, r3, #2
    3bcc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3bd0:	bf00      	nop
    3bd2:	b002      	add	sp, #8
    3bd4:	4770      	bx	lr
    3bd6:	bf00      	nop
    3bd8:	40064000 	.word	0x40064000

00003bdc <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3bdc:	b082      	sub	sp, #8
    3bde:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3be0:	4b05      	ldr	r3, [pc, #20]	; (3bf8 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3be2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3be6:	4a04      	ldr	r2, [pc, #16]	; (3bf8 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3be8:	f023 0302 	bic.w	r3, r3, #2
    3bec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3bf0:	bf00      	nop
    3bf2:	b002      	add	sp, #8
    3bf4:	4770      	bx	lr
    3bf6:	bf00      	nop
    3bf8:	40064000 	.word	0x40064000

00003bfc <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3bfc:	b500      	push	{lr}
    3bfe:	b08b      	sub	sp, #44	; 0x2c
    3c00:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3c02:	9b01      	ldr	r3, [sp, #4]
    3c04:	681a      	ldr	r2, [r3, #0]
    3c06:	4975      	ldr	r1, [pc, #468]	; (3ddc <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3c08:	4613      	mov	r3, r2
    3c0a:	00db      	lsls	r3, r3, #3
    3c0c:	4413      	add	r3, r2
    3c0e:	440b      	add	r3, r1
    3c10:	781b      	ldrb	r3, [r3, #0]
    3c12:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3c14:	2300      	movs	r3, #0
    3c16:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3c1a:	2300      	movs	r3, #0
    3c1c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3c20:	4b6f      	ldr	r3, [pc, #444]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c26:	4a6e      	ldr	r2, [pc, #440]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3c2c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3c30:	4b6b      	ldr	r3, [pc, #428]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3c3a:	2b00      	cmp	r3, #0
    3c3c:	d07d      	beq.n	3d3a <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3c3e:	9b01      	ldr	r3, [sp, #4]
    3c40:	79db      	ldrb	r3, [r3, #7]
    3c42:	461a      	mov	r2, r3
    3c44:	4b66      	ldr	r3, [pc, #408]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c46:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3c4a:	f003 0303 	and.w	r3, r3, #3
    3c4e:	429a      	cmp	r2, r3
    3c50:	d10b      	bne.n	3c6a <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3c52:	9b01      	ldr	r3, [sp, #4]
    3c54:	799b      	ldrb	r3, [r3, #6]
    3c56:	461a      	mov	r2, r3
    3c58:	4b61      	ldr	r3, [pc, #388]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c5e:	08db      	lsrs	r3, r3, #3
    3c60:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3c64:	429a      	cmp	r2, r3
    3c66:	f000 80b4 	beq.w	3dd2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3c6a:	4b5d      	ldr	r3, [pc, #372]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c70:	f003 0301 	and.w	r3, r3, #1
    3c74:	2b00      	cmp	r3, #0
    3c76:	d105      	bne.n	3c84 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3c78:	2301      	movs	r3, #1
    3c7a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3c7e:	2000      	movs	r0, #0
    3c80:	f7ff fd66 	bl	3750 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3c84:	2002      	movs	r0, #2
    3c86:	f7ff fdcf 	bl	3828 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3c8a:	4b55      	ldr	r3, [pc, #340]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c8c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c90:	4a53      	ldr	r2, [pc, #332]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c92:	f023 0301 	bic.w	r3, r3, #1
    3c96:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3c9a:	9b01      	ldr	r3, [sp, #4]
    3c9c:	889b      	ldrh	r3, [r3, #4]
    3c9e:	2b01      	cmp	r3, #1
    3ca0:	f040 8097 	bne.w	3dd2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3ca4:	9b01      	ldr	r3, [sp, #4]
    3ca6:	79db      	ldrb	r3, [r3, #7]
    3ca8:	4a4d      	ldr	r2, [pc, #308]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3caa:	f003 0303 	and.w	r3, r3, #3
    3cae:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3cb2:	4b4b      	ldr	r3, [pc, #300]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cb4:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3cb8:	9b01      	ldr	r3, [sp, #4]
    3cba:	799b      	ldrb	r3, [r3, #6]
    3cbc:	00db      	lsls	r3, r3, #3
    3cbe:	f003 0308 	and.w	r3, r3, #8
    3cc2:	4313      	orrs	r3, r2
    3cc4:	4a46      	ldr	r2, [pc, #280]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cc6:	f043 0301 	orr.w	r3, r3, #1
    3cca:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3cce:	aa03      	add	r2, sp, #12
    3cd0:	a904      	add	r1, sp, #16
    3cd2:	a805      	add	r0, sp, #20
    3cd4:	f24c 3350 	movw	r3, #50000	; 0xc350
    3cd8:	f7fe ff6e 	bl	2bb8 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3cdc:	4b40      	ldr	r3, [pc, #256]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cde:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ce2:	0e1b      	lsrs	r3, r3, #24
    3ce4:	f003 0301 	and.w	r3, r3, #1
    3ce8:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3cea:	9a03      	ldr	r2, [sp, #12]
    3cec:	a904      	add	r1, sp, #16
    3cee:	ab05      	add	r3, sp, #20
    3cf0:	4618      	mov	r0, r3
    3cf2:	f7fe ff7b 	bl	2bec <Clock_Ip_TimeoutExpired>
    3cf6:	4603      	mov	r3, r0
    3cf8:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3cfc:	9b06      	ldr	r3, [sp, #24]
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d106      	bne.n	3d10 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3d02:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d06:	f083 0301 	eor.w	r3, r3, #1
    3d0a:	b2db      	uxtb	r3, r3
    3d0c:	2b00      	cmp	r3, #0
    3d0e:	d1e5      	bne.n	3cdc <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3d10:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d14:	2b00      	cmp	r3, #0
    3d16:	d005      	beq.n	3d24 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d18:	9b01      	ldr	r3, [sp, #4]
    3d1a:	681b      	ldr	r3, [r3, #0]
    3d1c:	4619      	mov	r1, r3
    3d1e:	2001      	movs	r0, #1
    3d20:	f7fe ff3a 	bl	2b98 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3d24:	2003      	movs	r0, #3
    3d26:	f7ff fd7f 	bl	3828 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3d2a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3d2e:	2b00      	cmp	r3, #0
    3d30:	d04f      	beq.n	3dd2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3d32:	2002      	movs	r0, #2
    3d34:	f7ff fd26 	bl	3784 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3d38:	e04b      	b.n	3dd2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3d3a:	4b29      	ldr	r3, [pc, #164]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d3c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d40:	4a27      	ldr	r2, [pc, #156]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d42:	f023 0301 	bic.w	r3, r3, #1
    3d46:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3d4a:	9b01      	ldr	r3, [sp, #4]
    3d4c:	889b      	ldrh	r3, [r3, #4]
    3d4e:	2b01      	cmp	r3, #1
    3d50:	d13f      	bne.n	3dd2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3d52:	9b01      	ldr	r3, [sp, #4]
    3d54:	79db      	ldrb	r3, [r3, #7]
    3d56:	4a22      	ldr	r2, [pc, #136]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d58:	f003 0303 	and.w	r3, r3, #3
    3d5c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3d60:	4b1f      	ldr	r3, [pc, #124]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d62:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3d66:	9b01      	ldr	r3, [sp, #4]
    3d68:	799b      	ldrb	r3, [r3, #6]
    3d6a:	00db      	lsls	r3, r3, #3
    3d6c:	f003 0308 	and.w	r3, r3, #8
    3d70:	4313      	orrs	r3, r2
    3d72:	4a1b      	ldr	r2, [pc, #108]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d74:	f043 0301 	orr.w	r3, r3, #1
    3d78:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d7c:	aa03      	add	r2, sp, #12
    3d7e:	a904      	add	r1, sp, #16
    3d80:	a805      	add	r0, sp, #20
    3d82:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d86:	f7fe ff17 	bl	2bb8 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3d8a:	4b15      	ldr	r3, [pc, #84]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d8c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d90:	0e1b      	lsrs	r3, r3, #24
    3d92:	f003 0301 	and.w	r3, r3, #1
    3d96:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d98:	9a03      	ldr	r2, [sp, #12]
    3d9a:	a904      	add	r1, sp, #16
    3d9c:	ab05      	add	r3, sp, #20
    3d9e:	4618      	mov	r0, r3
    3da0:	f7fe ff24 	bl	2bec <Clock_Ip_TimeoutExpired>
    3da4:	4603      	mov	r3, r0
    3da6:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3daa:	9b06      	ldr	r3, [sp, #24]
    3dac:	2b00      	cmp	r3, #0
    3dae:	d106      	bne.n	3dbe <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3db0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3db4:	f083 0301 	eor.w	r3, r3, #1
    3db8:	b2db      	uxtb	r3, r3
    3dba:	2b00      	cmp	r3, #0
    3dbc:	d1e5      	bne.n	3d8a <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3dbe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dc2:	2b00      	cmp	r3, #0
    3dc4:	d005      	beq.n	3dd2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3dc6:	9b01      	ldr	r3, [sp, #4]
    3dc8:	681b      	ldr	r3, [r3, #0]
    3dca:	4619      	mov	r1, r3
    3dcc:	2001      	movs	r0, #1
    3dce:	f7fe fee3 	bl	2b98 <Clock_Ip_ReportClockErrors>
}
    3dd2:	bf00      	nop
    3dd4:	b00b      	add	sp, #44	; 0x2c
    3dd6:	f85d fb04 	ldr.w	pc, [sp], #4
    3dda:	bf00      	nop
    3ddc:	0000a6bc 	.word	0x0000a6bc
    3de0:	40064000 	.word	0x40064000

00003de4 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3de4:	b500      	push	{lr}
    3de6:	b089      	sub	sp, #36	; 0x24
    3de8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3dea:	2300      	movs	r3, #0
    3dec:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3df0:	9b01      	ldr	r3, [sp, #4]
    3df2:	889b      	ldrh	r3, [r3, #4]
    3df4:	2b01      	cmp	r3, #1
    3df6:	d132      	bne.n	3e5e <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3df8:	4b1b      	ldr	r3, [pc, #108]	; (3e68 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3dfa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3dfe:	4a1a      	ldr	r2, [pc, #104]	; (3e68 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e00:	f043 0301 	orr.w	r3, r3, #1
    3e04:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3e08:	aa03      	add	r2, sp, #12
    3e0a:	a904      	add	r1, sp, #16
    3e0c:	a805      	add	r0, sp, #20
    3e0e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3e12:	f7fe fed1 	bl	2bb8 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3e16:	4b14      	ldr	r3, [pc, #80]	; (3e68 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e18:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e1c:	0e1b      	lsrs	r3, r3, #24
    3e1e:	f003 0301 	and.w	r3, r3, #1
    3e22:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3e24:	9a03      	ldr	r2, [sp, #12]
    3e26:	a904      	add	r1, sp, #16
    3e28:	ab05      	add	r3, sp, #20
    3e2a:	4618      	mov	r0, r3
    3e2c:	f7fe fede 	bl	2bec <Clock_Ip_TimeoutExpired>
    3e30:	4603      	mov	r3, r0
    3e32:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3e36:	9b06      	ldr	r3, [sp, #24]
    3e38:	2b00      	cmp	r3, #0
    3e3a:	d106      	bne.n	3e4a <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3e3c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e40:	f083 0301 	eor.w	r3, r3, #1
    3e44:	b2db      	uxtb	r3, r3
    3e46:	2b00      	cmp	r3, #0
    3e48:	d1e5      	bne.n	3e16 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3e4a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d005      	beq.n	3e5e <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3e52:	9b01      	ldr	r3, [sp, #4]
    3e54:	681b      	ldr	r3, [r3, #0]
    3e56:	4619      	mov	r1, r3
    3e58:	2001      	movs	r0, #1
    3e5a:	f7fe fe9d 	bl	2b98 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3e5e:	bf00      	nop
    3e60:	b009      	add	sp, #36	; 0x24
    3e62:	f85d fb04 	ldr.w	pc, [sp], #4
    3e66:	bf00      	nop
    3e68:	40064000 	.word	0x40064000

00003e6c <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3e6c:	b082      	sub	sp, #8
    3e6e:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3e70:	4b05      	ldr	r3, [pc, #20]	; (3e88 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3e72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e76:	4a04      	ldr	r2, [pc, #16]	; (3e88 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3e78:	f023 0301 	bic.w	r3, r3, #1
    3e7c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3e80:	bf00      	nop
    3e82:	b002      	add	sp, #8
    3e84:	4770      	bx	lr
    3e86:	bf00      	nop
    3e88:	40064000 	.word	0x40064000

00003e8c <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3e8c:	b082      	sub	sp, #8
    3e8e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3e90:	bf00      	nop
    3e92:	b002      	add	sp, #8
    3e94:	4770      	bx	lr

00003e96 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3e96:	b082      	sub	sp, #8
    3e98:	9001      	str	r0, [sp, #4]
    3e9a:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3e9c:	bf00      	nop
    3e9e:	b002      	add	sp, #8
    3ea0:	4770      	bx	lr

00003ea2 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3ea2:	b082      	sub	sp, #8
    3ea4:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3ea6:	bf00      	nop
    3ea8:	b002      	add	sp, #8
    3eaa:	4770      	bx	lr

00003eac <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3eac:	b082      	sub	sp, #8
    3eae:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3eb0:	bf00      	nop
    3eb2:	b002      	add	sp, #8
    3eb4:	4770      	bx	lr

00003eb6 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3eb6:	b082      	sub	sp, #8
    3eb8:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3eba:	2302      	movs	r3, #2
}
    3ebc:	4618      	mov	r0, r3
    3ebe:	b002      	add	sp, #8
    3ec0:	4770      	bx	lr

00003ec2 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3ec2:	b082      	sub	sp, #8
    3ec4:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3ec6:	bf00      	nop
    3ec8:	b002      	add	sp, #8
    3eca:	4770      	bx	lr

00003ecc <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3ecc:	b500      	push	{lr}
    3ece:	b083      	sub	sp, #12
    3ed0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ed2:	9b01      	ldr	r3, [sp, #4]
    3ed4:	2b00      	cmp	r3, #0
    3ed6:	d002      	beq.n	3ede <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3ed8:	9801      	ldr	r0, [sp, #4]
    3eda:	f000 f870 	bl	3fbe <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ede:	bf00      	nop
    3ee0:	b003      	add	sp, #12
    3ee2:	f85d fb04 	ldr.w	pc, [sp], #4

00003ee6 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3ee6:	b500      	push	{lr}
    3ee8:	b083      	sub	sp, #12
    3eea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3eec:	9b01      	ldr	r3, [sp, #4]
    3eee:	2b00      	cmp	r3, #0
    3ef0:	d002      	beq.n	3ef8 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3ef2:	9801      	ldr	r0, [sp, #4]
    3ef4:	f000 f89a 	bl	402c <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ef8:	bf00      	nop
    3efa:	b003      	add	sp, #12
    3efc:	f85d fb04 	ldr.w	pc, [sp], #4

00003f00 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3f00:	b500      	push	{lr}
    3f02:	b089      	sub	sp, #36	; 0x24
    3f04:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3f06:	2301      	movs	r3, #1
    3f08:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3f0a:	2300      	movs	r3, #0
    3f0c:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3f10:	4b1e      	ldr	r3, [pc, #120]	; (3f8c <Clock_Ip_CompleteSpll+0x8c>)
    3f12:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f16:	f003 0301 	and.w	r3, r3, #1
    3f1a:	2b00      	cmp	r3, #0
    3f1c:	d02f      	beq.n	3f7e <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3f1e:	aa02      	add	r2, sp, #8
    3f20:	a903      	add	r1, sp, #12
    3f22:	a804      	add	r0, sp, #16
    3f24:	f24c 3350 	movw	r3, #50000	; 0xc350
    3f28:	f7fe fe46 	bl	2bb8 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3f2c:	4b17      	ldr	r3, [pc, #92]	; (3f8c <Clock_Ip_CompleteSpll+0x8c>)
    3f2e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f32:	0e1b      	lsrs	r3, r3, #24
    3f34:	f003 0301 	and.w	r3, r3, #1
    3f38:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3f3a:	9a02      	ldr	r2, [sp, #8]
    3f3c:	a903      	add	r1, sp, #12
    3f3e:	ab04      	add	r3, sp, #16
    3f40:	4618      	mov	r0, r3
    3f42:	f7fe fe53 	bl	2bec <Clock_Ip_TimeoutExpired>
    3f46:	4603      	mov	r3, r0
    3f48:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3f4c:	9b05      	ldr	r3, [sp, #20]
    3f4e:	2b00      	cmp	r3, #0
    3f50:	d106      	bne.n	3f60 <Clock_Ip_CompleteSpll+0x60>
    3f52:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3f56:	f083 0301 	eor.w	r3, r3, #1
    3f5a:	b2db      	uxtb	r3, r3
    3f5c:	2b00      	cmp	r3, #0
    3f5e:	d1e5      	bne.n	3f2c <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3f60:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3f64:	f083 0301 	eor.w	r3, r3, #1
    3f68:	b2db      	uxtb	r3, r3
    3f6a:	2b00      	cmp	r3, #0
    3f6c:	d002      	beq.n	3f74 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3f6e:	2302      	movs	r3, #2
    3f70:	9307      	str	r3, [sp, #28]
    3f72:	e006      	b.n	3f82 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3f74:	9901      	ldr	r1, [sp, #4]
    3f76:	2001      	movs	r0, #1
    3f78:	f7fe fe0e 	bl	2b98 <Clock_Ip_ReportClockErrors>
    3f7c:	e001      	b.n	3f82 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3f7e:	2300      	movs	r3, #0
    3f80:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3f82:	9b07      	ldr	r3, [sp, #28]
}
    3f84:	4618      	mov	r0, r3
    3f86:	b009      	add	sp, #36	; 0x24
    3f88:	f85d fb04 	ldr.w	pc, [sp], #4
    3f8c:	40064000 	.word	0x40064000

00003f90 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3f90:	b500      	push	{lr}
    3f92:	b083      	sub	sp, #12
    3f94:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3f96:	9801      	ldr	r0, [sp, #4]
    3f98:	f000 f886 	bl	40a8 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3f9c:	bf00      	nop
    3f9e:	b003      	add	sp, #12
    3fa0:	f85d fb04 	ldr.w	pc, [sp], #4

00003fa4 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3fa4:	b500      	push	{lr}
    3fa6:	b083      	sub	sp, #12
    3fa8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3faa:	9b01      	ldr	r3, [sp, #4]
    3fac:	2b00      	cmp	r3, #0
    3fae:	d002      	beq.n	3fb6 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3fb0:	9801      	ldr	r0, [sp, #4]
    3fb2:	f000 f891 	bl	40d8 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3fb6:	bf00      	nop
    3fb8:	b003      	add	sp, #12
    3fba:	f85d fb04 	ldr.w	pc, [sp], #4

00003fbe <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3fbe:	b082      	sub	sp, #8
    3fc0:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3fc2:	4b19      	ldr	r3, [pc, #100]	; (4028 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fc4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3fc8:	4a17      	ldr	r2, [pc, #92]	; (4028 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3fce:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3fd2:	4b15      	ldr	r3, [pc, #84]	; (4028 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fd4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3fd8:	4a13      	ldr	r2, [pc, #76]	; (4028 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3fde:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    3fe2:	4b11      	ldr	r3, [pc, #68]	; (4028 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fe4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3fe8:	4a0f      	ldr	r2, [pc, #60]	; (4028 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3fee:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3ff2:	4b0d      	ldr	r3, [pc, #52]	; (4028 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ff4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ff8:	4a0b      	ldr	r2, [pc, #44]	; (4028 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ffa:	f023 0301 	bic.w	r3, r3, #1
    3ffe:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4002:	4b09      	ldr	r3, [pc, #36]	; (4028 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4004:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4008:	4a07      	ldr	r2, [pc, #28]	; (4028 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    400a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    400e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4012:	4b05      	ldr	r3, [pc, #20]	; (4028 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4014:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4018:	4a03      	ldr	r2, [pc, #12]	; (4028 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    401a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    401e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4022:	bf00      	nop
    4024:	b002      	add	sp, #8
    4026:	4770      	bx	lr
    4028:	40064000 	.word	0x40064000

0000402c <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    402c:	b082      	sub	sp, #8
    402e:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4030:	9b01      	ldr	r3, [sp, #4]
    4032:	889b      	ldrh	r3, [r3, #4]
    4034:	2b01      	cmp	r3, #1
    4036:	d12f      	bne.n	4098 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4038:	4b1a      	ldr	r3, [pc, #104]	; (40a4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    403a:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    403e:	9b01      	ldr	r3, [sp, #4]
    4040:	7b5b      	ldrb	r3, [r3, #13]
    4042:	3b01      	subs	r3, #1
    4044:	021b      	lsls	r3, r3, #8
    4046:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    404a:	9b01      	ldr	r3, [sp, #4]
    404c:	7d1b      	ldrb	r3, [r3, #20]
    404e:	3b10      	subs	r3, #16
    4050:	041b      	lsls	r3, r3, #16
    4052:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4056:	430b      	orrs	r3, r1
    4058:	4912      	ldr	r1, [pc, #72]	; (40a4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    405a:	4313      	orrs	r3, r2
    405c:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4060:	9b01      	ldr	r3, [sp, #4]
    4062:	7fdb      	ldrb	r3, [r3, #31]
    4064:	2b02      	cmp	r3, #2
    4066:	d011      	beq.n	408c <Clock_Ip_SetSpll_TrustedCall+0x60>
    4068:	2b02      	cmp	r3, #2
    406a:	dc17      	bgt.n	409c <Clock_Ip_SetSpll_TrustedCall+0x70>
    406c:	2b00      	cmp	r3, #0
    406e:	d002      	beq.n	4076 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4070:	2b01      	cmp	r3, #1
    4072:	d005      	beq.n	4080 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4074:	e012      	b.n	409c <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    4076:	4b0b      	ldr	r3, [pc, #44]	; (40a4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4078:	2200      	movs	r2, #0
    407a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    407e:	e00e      	b.n	409e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4080:	4b08      	ldr	r3, [pc, #32]	; (40a4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4082:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4086:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    408a:	e008      	b.n	409e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    408c:	4b05      	ldr	r3, [pc, #20]	; (40a4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    408e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4092:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4096:	e002      	b.n	409e <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4098:	bf00      	nop
    409a:	e000      	b.n	409e <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    409c:	bf00      	nop
}
    409e:	bf00      	nop
    40a0:	b002      	add	sp, #8
    40a2:	4770      	bx	lr
    40a4:	40064000 	.word	0x40064000

000040a8 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    40a8:	b082      	sub	sp, #8
    40aa:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    40ac:	4b09      	ldr	r3, [pc, #36]	; (40d4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40ae:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    40b2:	4a08      	ldr	r2, [pc, #32]	; (40d4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    40b8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    40bc:	4b05      	ldr	r3, [pc, #20]	; (40d4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40be:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    40c2:	4a04      	ldr	r2, [pc, #16]	; (40d4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40c4:	f023 0301 	bic.w	r3, r3, #1
    40c8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    40cc:	bf00      	nop
    40ce:	b002      	add	sp, #8
    40d0:	4770      	bx	lr
    40d2:	bf00      	nop
    40d4:	40064000 	.word	0x40064000

000040d8 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    40d8:	b082      	sub	sp, #8
    40da:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    40dc:	9b01      	ldr	r3, [sp, #4]
    40de:	889b      	ldrh	r3, [r3, #4]
    40e0:	2b01      	cmp	r3, #1
    40e2:	d107      	bne.n	40f4 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    40e4:	4b05      	ldr	r3, [pc, #20]	; (40fc <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    40e6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    40ea:	4a04      	ldr	r2, [pc, #16]	; (40fc <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    40ec:	f043 0301 	orr.w	r3, r3, #1
    40f0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    40f4:	bf00      	nop
    40f6:	b002      	add	sp, #8
    40f8:	4770      	bx	lr
    40fa:	bf00      	nop
    40fc:	40064000 	.word	0x40064000

00004100 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4100:	b082      	sub	sp, #8
    4102:	9001      	str	r0, [sp, #4]
    4104:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4106:	bf00      	nop
    4108:	b002      	add	sp, #8
    410a:	4770      	bx	lr

0000410c <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    410c:	b082      	sub	sp, #8
    410e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4110:	bf00      	nop
    4112:	b002      	add	sp, #8
    4114:	4770      	bx	lr

00004116 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4116:	b500      	push	{lr}
    4118:	b083      	sub	sp, #12
    411a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    411c:	9b01      	ldr	r3, [sp, #4]
    411e:	2b00      	cmp	r3, #0
    4120:	d002      	beq.n	4128 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4122:	9801      	ldr	r0, [sp, #4]
    4124:	f000 f8ee 	bl	4304 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4128:	bf00      	nop
    412a:	b003      	add	sp, #12
    412c:	f85d fb04 	ldr.w	pc, [sp], #4

00004130 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4130:	b500      	push	{lr}
    4132:	b083      	sub	sp, #12
    4134:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4136:	9b01      	ldr	r3, [sp, #4]
    4138:	2b00      	cmp	r3, #0
    413a:	d002      	beq.n	4142 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    413c:	9801      	ldr	r0, [sp, #4]
    413e:	f000 f8ff 	bl	4340 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4142:	bf00      	nop
    4144:	b003      	add	sp, #12
    4146:	f85d fb04 	ldr.w	pc, [sp], #4

0000414a <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    414a:	b500      	push	{lr}
    414c:	b083      	sub	sp, #12
    414e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4150:	9b01      	ldr	r3, [sp, #4]
    4152:	2b00      	cmp	r3, #0
    4154:	d002      	beq.n	415c <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    4156:	9801      	ldr	r0, [sp, #4]
    4158:	f000 f912 	bl	4380 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    415c:	bf00      	nop
    415e:	b003      	add	sp, #12
    4160:	f85d fb04 	ldr.w	pc, [sp], #4

00004164 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4164:	b500      	push	{lr}
    4166:	b083      	sub	sp, #12
    4168:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    416a:	9b01      	ldr	r3, [sp, #4]
    416c:	2b00      	cmp	r3, #0
    416e:	d002      	beq.n	4176 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4170:	9801      	ldr	r0, [sp, #4]
    4172:	f000 f925 	bl	43c0 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4176:	bf00      	nop
    4178:	b003      	add	sp, #12
    417a:	f85d fb04 	ldr.w	pc, [sp], #4

0000417e <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    417e:	b500      	push	{lr}
    4180:	b083      	sub	sp, #12
    4182:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4184:	9b01      	ldr	r3, [sp, #4]
    4186:	2b00      	cmp	r3, #0
    4188:	d002      	beq.n	4190 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    418a:	9801      	ldr	r0, [sp, #4]
    418c:	f000 f936 	bl	43fc <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4190:	bf00      	nop
    4192:	b003      	add	sp, #12
    4194:	f85d fb04 	ldr.w	pc, [sp], #4

00004198 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4198:	b500      	push	{lr}
    419a:	b083      	sub	sp, #12
    419c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    419e:	9b01      	ldr	r3, [sp, #4]
    41a0:	2b00      	cmp	r3, #0
    41a2:	d002      	beq.n	41aa <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    41a4:	9801      	ldr	r0, [sp, #4]
    41a6:	f000 f949 	bl	443c <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41aa:	bf00      	nop
    41ac:	b003      	add	sp, #12
    41ae:	f85d fb04 	ldr.w	pc, [sp], #4

000041b2 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    41b2:	b500      	push	{lr}
    41b4:	b083      	sub	sp, #12
    41b6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41b8:	9b01      	ldr	r3, [sp, #4]
    41ba:	2b00      	cmp	r3, #0
    41bc:	d002      	beq.n	41c4 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    41be:	9801      	ldr	r0, [sp, #4]
    41c0:	f000 f958 	bl	4474 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41c4:	bf00      	nop
    41c6:	b003      	add	sp, #12
    41c8:	f85d fb04 	ldr.w	pc, [sp], #4

000041cc <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    41cc:	b500      	push	{lr}
    41ce:	b083      	sub	sp, #12
    41d0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41d2:	9b01      	ldr	r3, [sp, #4]
    41d4:	2b00      	cmp	r3, #0
    41d6:	d002      	beq.n	41de <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    41d8:	9801      	ldr	r0, [sp, #4]
    41da:	f000 f969 	bl	44b0 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41de:	bf00      	nop
    41e0:	b003      	add	sp, #12
    41e2:	f85d fb04 	ldr.w	pc, [sp], #4

000041e6 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    41e6:	b500      	push	{lr}
    41e8:	b083      	sub	sp, #12
    41ea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41ec:	9b01      	ldr	r3, [sp, #4]
    41ee:	2b00      	cmp	r3, #0
    41f0:	d002      	beq.n	41f8 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    41f2:	9801      	ldr	r0, [sp, #4]
    41f4:	f000 f978 	bl	44e8 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41f8:	bf00      	nop
    41fa:	b003      	add	sp, #12
    41fc:	f85d fb04 	ldr.w	pc, [sp], #4

00004200 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4200:	b500      	push	{lr}
    4202:	b083      	sub	sp, #12
    4204:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4206:	9b01      	ldr	r3, [sp, #4]
    4208:	2b00      	cmp	r3, #0
    420a:	d002      	beq.n	4212 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    420c:	9801      	ldr	r0, [sp, #4]
    420e:	f000 f989 	bl	4524 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4212:	bf00      	nop
    4214:	b003      	add	sp, #12
    4216:	f85d fb04 	ldr.w	pc, [sp], #4

0000421a <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    421a:	b500      	push	{lr}
    421c:	b083      	sub	sp, #12
    421e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4220:	9b01      	ldr	r3, [sp, #4]
    4222:	2b00      	cmp	r3, #0
    4224:	d002      	beq.n	422c <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    4226:	9801      	ldr	r0, [sp, #4]
    4228:	f000 f998 	bl	455c <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    422c:	bf00      	nop
    422e:	b003      	add	sp, #12
    4230:	f85d fb04 	ldr.w	pc, [sp], #4

00004234 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4234:	b500      	push	{lr}
    4236:	b083      	sub	sp, #12
    4238:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    423a:	9b01      	ldr	r3, [sp, #4]
    423c:	2b00      	cmp	r3, #0
    423e:	d002      	beq.n	4246 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4240:	9801      	ldr	r0, [sp, #4]
    4242:	f000 f9a9 	bl	4598 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4246:	bf00      	nop
    4248:	b003      	add	sp, #12
    424a:	f85d fb04 	ldr.w	pc, [sp], #4

0000424e <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    424e:	b500      	push	{lr}
    4250:	b083      	sub	sp, #12
    4252:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4254:	9b01      	ldr	r3, [sp, #4]
    4256:	2b00      	cmp	r3, #0
    4258:	d002      	beq.n	4260 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    425a:	9801      	ldr	r0, [sp, #4]
    425c:	f000 f9e6 	bl	462c <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4260:	bf00      	nop
    4262:	b003      	add	sp, #12
    4264:	f85d fb04 	ldr.w	pc, [sp], #4

00004268 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4268:	b500      	push	{lr}
    426a:	b083      	sub	sp, #12
    426c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    426e:	9b01      	ldr	r3, [sp, #4]
    4270:	2b00      	cmp	r3, #0
    4272:	d002      	beq.n	427a <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    4274:	9801      	ldr	r0, [sp, #4]
    4276:	f000 fa25 	bl	46c4 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    427a:	bf00      	nop
    427c:	b003      	add	sp, #12
    427e:	f85d fb04 	ldr.w	pc, [sp], #4

00004282 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4282:	b500      	push	{lr}
    4284:	b083      	sub	sp, #12
    4286:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4288:	9b01      	ldr	r3, [sp, #4]
    428a:	2b00      	cmp	r3, #0
    428c:	d002      	beq.n	4294 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    428e:	9801      	ldr	r0, [sp, #4]
    4290:	f000 fa2a 	bl	46e8 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4294:	bf00      	nop
    4296:	b003      	add	sp, #12
    4298:	f85d fb04 	ldr.w	pc, [sp], #4

0000429c <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    429c:	b500      	push	{lr}
    429e:	b083      	sub	sp, #12
    42a0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42a2:	9b01      	ldr	r3, [sp, #4]
    42a4:	2b00      	cmp	r3, #0
    42a6:	d002      	beq.n	42ae <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    42a8:	9801      	ldr	r0, [sp, #4]
    42aa:	f000 fa3b 	bl	4724 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42ae:	bf00      	nop
    42b0:	b003      	add	sp, #12
    42b2:	f85d fb04 	ldr.w	pc, [sp], #4

000042b6 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    42b6:	b500      	push	{lr}
    42b8:	b083      	sub	sp, #12
    42ba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42bc:	9b01      	ldr	r3, [sp, #4]
    42be:	2b00      	cmp	r3, #0
    42c0:	d002      	beq.n	42c8 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    42c2:	9801      	ldr	r0, [sp, #4]
    42c4:	f000 fa56 	bl	4774 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42c8:	bf00      	nop
    42ca:	b003      	add	sp, #12
    42cc:	f85d fb04 	ldr.w	pc, [sp], #4

000042d0 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    42d0:	b500      	push	{lr}
    42d2:	b083      	sub	sp, #12
    42d4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42d6:	9b01      	ldr	r3, [sp, #4]
    42d8:	2b00      	cmp	r3, #0
    42da:	d002      	beq.n	42e2 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    42dc:	9801      	ldr	r0, [sp, #4]
    42de:	f000 fa79 	bl	47d4 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42e2:	bf00      	nop
    42e4:	b003      	add	sp, #12
    42e6:	f85d fb04 	ldr.w	pc, [sp], #4

000042ea <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    42ea:	b500      	push	{lr}
    42ec:	b083      	sub	sp, #12
    42ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42f0:	9b01      	ldr	r3, [sp, #4]
    42f2:	2b00      	cmp	r3, #0
    42f4:	d002      	beq.n	42fc <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    42f6:	9801      	ldr	r0, [sp, #4]
    42f8:	f000 fa8a 	bl	4810 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42fc:	bf00      	nop
    42fe:	b003      	add	sp, #12
    4300:	f85d fb04 	ldr.w	pc, [sp], #4

00004304 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4304:	b084      	sub	sp, #16
    4306:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4308:	4b0b      	ldr	r3, [pc, #44]	; (4338 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    430a:	795b      	ldrb	r3, [r3, #5]
    430c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    430e:	4b0b      	ldr	r3, [pc, #44]	; (433c <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4310:	695b      	ldr	r3, [r3, #20]
    4312:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4314:	9b02      	ldr	r3, [sp, #8]
    4316:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    431a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    431c:	9b03      	ldr	r3, [sp, #12]
    431e:	061b      	lsls	r3, r3, #24
    4320:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4324:	9a02      	ldr	r2, [sp, #8]
    4326:	4313      	orrs	r3, r2
    4328:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    432a:	4a04      	ldr	r2, [pc, #16]	; (433c <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    432c:	9b02      	ldr	r3, [sp, #8]
    432e:	6153      	str	r3, [r2, #20]
}
    4330:	bf00      	nop
    4332:	b004      	add	sp, #16
    4334:	4770      	bx	lr
    4336:	bf00      	nop
    4338:	0000aa24 	.word	0x0000aa24
    433c:	40064000 	.word	0x40064000

00004340 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4340:	b084      	sub	sp, #16
    4342:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4344:	9b01      	ldr	r3, [sp, #4]
    4346:	685b      	ldr	r3, [r3, #4]
    4348:	4a0b      	ldr	r2, [pc, #44]	; (4378 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    434a:	5cd3      	ldrb	r3, [r2, r3]
    434c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    434e:	4b0b      	ldr	r3, [pc, #44]	; (437c <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4350:	695b      	ldr	r3, [r3, #20]
    4352:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4354:	9b02      	ldr	r3, [sp, #8]
    4356:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    435a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    435c:	9b03      	ldr	r3, [sp, #12]
    435e:	061b      	lsls	r3, r3, #24
    4360:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4364:	9a02      	ldr	r2, [sp, #8]
    4366:	4313      	orrs	r3, r2
    4368:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    436a:	4a04      	ldr	r2, [pc, #16]	; (437c <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    436c:	9b02      	ldr	r3, [sp, #8]
    436e:	6153      	str	r3, [r2, #20]
}
    4370:	bf00      	nop
    4372:	b004      	add	sp, #16
    4374:	4770      	bx	lr
    4376:	bf00      	nop
    4378:	0000aa24 	.word	0x0000aa24
    437c:	40064000 	.word	0x40064000

00004380 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4380:	b084      	sub	sp, #16
    4382:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4384:	9b01      	ldr	r3, [sp, #4]
    4386:	685b      	ldr	r3, [r3, #4]
    4388:	4a0b      	ldr	r2, [pc, #44]	; (43b8 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    438a:	5cd3      	ldrb	r3, [r2, r3]
    438c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    438e:	4b0b      	ldr	r3, [pc, #44]	; (43bc <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4390:	699b      	ldr	r3, [r3, #24]
    4392:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4394:	9b02      	ldr	r3, [sp, #8]
    4396:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    439a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    439c:	9b03      	ldr	r3, [sp, #12]
    439e:	061b      	lsls	r3, r3, #24
    43a0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    43a4:	9a02      	ldr	r2, [sp, #8]
    43a6:	4313      	orrs	r3, r2
    43a8:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    43aa:	4a04      	ldr	r2, [pc, #16]	; (43bc <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    43ac:	9b02      	ldr	r3, [sp, #8]
    43ae:	6193      	str	r3, [r2, #24]
}
    43b0:	bf00      	nop
    43b2:	b004      	add	sp, #16
    43b4:	4770      	bx	lr
    43b6:	bf00      	nop
    43b8:	0000aa24 	.word	0x0000aa24
    43bc:	40064000 	.word	0x40064000

000043c0 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43c0:	b084      	sub	sp, #16
    43c2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43c4:	4b0b      	ldr	r3, [pc, #44]	; (43f4 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    43c6:	795b      	ldrb	r3, [r3, #5]
    43c8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    43ca:	4b0b      	ldr	r3, [pc, #44]	; (43f8 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    43cc:	69db      	ldr	r3, [r3, #28]
    43ce:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    43d0:	9b02      	ldr	r3, [sp, #8]
    43d2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    43d6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    43d8:	9b03      	ldr	r3, [sp, #12]
    43da:	061b      	lsls	r3, r3, #24
    43dc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    43e0:	9a02      	ldr	r2, [sp, #8]
    43e2:	4313      	orrs	r3, r2
    43e4:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    43e6:	4a04      	ldr	r2, [pc, #16]	; (43f8 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    43e8:	9b02      	ldr	r3, [sp, #8]
    43ea:	61d3      	str	r3, [r2, #28]
}
    43ec:	bf00      	nop
    43ee:	b004      	add	sp, #16
    43f0:	4770      	bx	lr
    43f2:	bf00      	nop
    43f4:	0000aa24 	.word	0x0000aa24
    43f8:	40064000 	.word	0x40064000

000043fc <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43fc:	b084      	sub	sp, #16
    43fe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4400:	9b01      	ldr	r3, [sp, #4]
    4402:	685b      	ldr	r3, [r3, #4]
    4404:	4a0b      	ldr	r2, [pc, #44]	; (4434 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    4406:	5cd3      	ldrb	r3, [r2, r3]
    4408:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    440a:	4b0b      	ldr	r3, [pc, #44]	; (4438 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    440c:	69db      	ldr	r3, [r3, #28]
    440e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4410:	9b02      	ldr	r3, [sp, #8]
    4412:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4416:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4418:	9b03      	ldr	r3, [sp, #12]
    441a:	061b      	lsls	r3, r3, #24
    441c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4420:	9a02      	ldr	r2, [sp, #8]
    4422:	4313      	orrs	r3, r2
    4424:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4426:	4a04      	ldr	r2, [pc, #16]	; (4438 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4428:	9b02      	ldr	r3, [sp, #8]
    442a:	61d3      	str	r3, [r2, #28]
}
    442c:	bf00      	nop
    442e:	b004      	add	sp, #16
    4430:	4770      	bx	lr
    4432:	bf00      	nop
    4434:	0000aa24 	.word	0x0000aa24
    4438:	40064000 	.word	0x40064000

0000443c <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    443c:	b084      	sub	sp, #16
    443e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4440:	4b0a      	ldr	r3, [pc, #40]	; (446c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    4442:	7b9b      	ldrb	r3, [r3, #14]
    4444:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4446:	4b0a      	ldr	r3, [pc, #40]	; (4470 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4448:	691b      	ldr	r3, [r3, #16]
    444a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    444c:	9b02      	ldr	r3, [sp, #8]
    444e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4452:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4454:	9b03      	ldr	r3, [sp, #12]
    4456:	011b      	lsls	r3, r3, #4
    4458:	9a02      	ldr	r2, [sp, #8]
    445a:	4313      	orrs	r3, r2
    445c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    445e:	4a04      	ldr	r2, [pc, #16]	; (4470 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4460:	9b02      	ldr	r3, [sp, #8]
    4462:	6113      	str	r3, [r2, #16]
}
    4464:	bf00      	nop
    4466:	b004      	add	sp, #16
    4468:	4770      	bx	lr
    446a:	bf00      	nop
    446c:	0000a9cc 	.word	0x0000a9cc
    4470:	40048000 	.word	0x40048000

00004474 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4474:	b084      	sub	sp, #16
    4476:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4478:	9b01      	ldr	r3, [sp, #4]
    447a:	685b      	ldr	r3, [r3, #4]
    447c:	4a0a      	ldr	r2, [pc, #40]	; (44a8 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    447e:	5cd3      	ldrb	r3, [r2, r3]
    4480:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    4482:	4b0a      	ldr	r3, [pc, #40]	; (44ac <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4484:	691b      	ldr	r3, [r3, #16]
    4486:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4488:	9b02      	ldr	r3, [sp, #8]
    448a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    448e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4490:	9b03      	ldr	r3, [sp, #12]
    4492:	011b      	lsls	r3, r3, #4
    4494:	9a02      	ldr	r2, [sp, #8]
    4496:	4313      	orrs	r3, r2
    4498:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    449a:	4a04      	ldr	r2, [pc, #16]	; (44ac <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    449c:	9b02      	ldr	r3, [sp, #8]
    449e:	6113      	str	r3, [r2, #16]
}
    44a0:	bf00      	nop
    44a2:	b004      	add	sp, #16
    44a4:	4770      	bx	lr
    44a6:	bf00      	nop
    44a8:	0000a9cc 	.word	0x0000a9cc
    44ac:	40048000 	.word	0x40048000

000044b0 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44b0:	b084      	sub	sp, #16
    44b2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44b4:	4b0a      	ldr	r3, [pc, #40]	; (44e0 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    44b6:	785b      	ldrb	r3, [r3, #1]
    44b8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    44ba:	4b0a      	ldr	r3, [pc, #40]	; (44e4 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    44bc:	691b      	ldr	r3, [r3, #16]
    44be:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    44c0:	9b02      	ldr	r3, [sp, #8]
    44c2:	f023 030c 	bic.w	r3, r3, #12
    44c6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    44c8:	9b03      	ldr	r3, [sp, #12]
    44ca:	009b      	lsls	r3, r3, #2
    44cc:	9a02      	ldr	r2, [sp, #8]
    44ce:	4313      	orrs	r3, r2
    44d0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    44d2:	4a04      	ldr	r2, [pc, #16]	; (44e4 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    44d4:	9b02      	ldr	r3, [sp, #8]
    44d6:	6113      	str	r3, [r2, #16]
}
    44d8:	bf00      	nop
    44da:	b004      	add	sp, #16
    44dc:	4770      	bx	lr
    44de:	bf00      	nop
    44e0:	0000aa84 	.word	0x0000aa84
    44e4:	40048000 	.word	0x40048000

000044e8 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44e8:	b084      	sub	sp, #16
    44ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44ec:	9b01      	ldr	r3, [sp, #4]
    44ee:	685b      	ldr	r3, [r3, #4]
    44f0:	4a0a      	ldr	r2, [pc, #40]	; (451c <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    44f2:	5cd3      	ldrb	r3, [r2, r3]
    44f4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    44f6:	4b0a      	ldr	r3, [pc, #40]	; (4520 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    44f8:	691b      	ldr	r3, [r3, #16]
    44fa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    44fc:	9b02      	ldr	r3, [sp, #8]
    44fe:	f023 030c 	bic.w	r3, r3, #12
    4502:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4504:	9b03      	ldr	r3, [sp, #12]
    4506:	009b      	lsls	r3, r3, #2
    4508:	9a02      	ldr	r2, [sp, #8]
    450a:	4313      	orrs	r3, r2
    450c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    450e:	4a04      	ldr	r2, [pc, #16]	; (4520 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4510:	9b02      	ldr	r3, [sp, #8]
    4512:	6113      	str	r3, [r2, #16]
}
    4514:	bf00      	nop
    4516:	b004      	add	sp, #16
    4518:	4770      	bx	lr
    451a:	bf00      	nop
    451c:	0000aa84 	.word	0x0000aa84
    4520:	40048000 	.word	0x40048000

00004524 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4524:	b084      	sub	sp, #16
    4526:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4528:	4b0a      	ldr	r3, [pc, #40]	; (4554 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    452a:	795b      	ldrb	r3, [r3, #5]
    452c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    452e:	4b0a      	ldr	r3, [pc, #40]	; (4558 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4530:	6a1b      	ldr	r3, [r3, #32]
    4532:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4534:	9b02      	ldr	r3, [sp, #8]
    4536:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    453a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    453c:	9b03      	ldr	r3, [sp, #12]
    453e:	061b      	lsls	r3, r3, #24
    4540:	9a02      	ldr	r2, [sp, #8]
    4542:	4313      	orrs	r3, r2
    4544:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4546:	4a04      	ldr	r2, [pc, #16]	; (4558 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4548:	9b02      	ldr	r3, [sp, #8]
    454a:	6213      	str	r3, [r2, #32]
}
    454c:	bf00      	nop
    454e:	b004      	add	sp, #16
    4550:	4770      	bx	lr
    4552:	bf00      	nop
    4554:	0000aa24 	.word	0x0000aa24
    4558:	40064000 	.word	0x40064000

0000455c <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    455c:	b084      	sub	sp, #16
    455e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4560:	9b01      	ldr	r3, [sp, #4]
    4562:	685b      	ldr	r3, [r3, #4]
    4564:	4a0a      	ldr	r2, [pc, #40]	; (4590 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    4566:	5cd3      	ldrb	r3, [r2, r3]
    4568:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    456a:	4b0a      	ldr	r3, [pc, #40]	; (4594 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    456c:	6a1b      	ldr	r3, [r3, #32]
    456e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4570:	9b02      	ldr	r3, [sp, #8]
    4572:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4576:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4578:	9b03      	ldr	r3, [sp, #12]
    457a:	061b      	lsls	r3, r3, #24
    457c:	9a02      	ldr	r2, [sp, #8]
    457e:	4313      	orrs	r3, r2
    4580:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4582:	4a04      	ldr	r2, [pc, #16]	; (4594 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4584:	9b02      	ldr	r3, [sp, #8]
    4586:	6213      	str	r3, [r2, #32]
}
    4588:	bf00      	nop
    458a:	b004      	add	sp, #16
    458c:	4770      	bx	lr
    458e:	bf00      	nop
    4590:	0000aa24 	.word	0x0000aa24
    4594:	40064000 	.word	0x40064000

00004598 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4598:	b086      	sub	sp, #24
    459a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    459c:	4b20      	ldr	r3, [pc, #128]	; (4620 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    459e:	795b      	ldrb	r3, [r3, #5]
    45a0:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    45a2:	9b01      	ldr	r3, [sp, #4]
    45a4:	681a      	ldr	r2, [r3, #0]
    45a6:	491f      	ldr	r1, [pc, #124]	; (4624 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    45a8:	4613      	mov	r3, r2
    45aa:	00db      	lsls	r3, r3, #3
    45ac:	4413      	add	r3, r2
    45ae:	440b      	add	r3, r1
    45b0:	781b      	ldrb	r3, [r3, #0]
    45b2:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    45b4:	4b1c      	ldr	r3, [pc, #112]	; (4628 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    45b6:	68db      	ldr	r3, [r3, #12]
    45b8:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    45ba:	9b03      	ldr	r3, [sp, #12]
    45bc:	2b03      	cmp	r3, #3
    45be:	d813      	bhi.n	45e8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    45c0:	9b03      	ldr	r3, [sp, #12]
    45c2:	005b      	lsls	r3, r3, #1
    45c4:	3318      	adds	r3, #24
    45c6:	2203      	movs	r2, #3
    45c8:	fa02 f303 	lsl.w	r3, r2, r3
    45cc:	43db      	mvns	r3, r3
    45ce:	9a05      	ldr	r2, [sp, #20]
    45d0:	4013      	ands	r3, r2
    45d2:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    45d4:	9b03      	ldr	r3, [sp, #12]
    45d6:	005b      	lsls	r3, r3, #1
    45d8:	3318      	adds	r3, #24
    45da:	9a04      	ldr	r2, [sp, #16]
    45dc:	fa02 f303 	lsl.w	r3, r2, r3
    45e0:	9a05      	ldr	r2, [sp, #20]
    45e2:	4313      	orrs	r3, r2
    45e4:	9305      	str	r3, [sp, #20]
    45e6:	e014      	b.n	4612 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    45e8:	9b03      	ldr	r3, [sp, #12]
    45ea:	3b04      	subs	r3, #4
    45ec:	005b      	lsls	r3, r3, #1
    45ee:	3310      	adds	r3, #16
    45f0:	2203      	movs	r2, #3
    45f2:	fa02 f303 	lsl.w	r3, r2, r3
    45f6:	43db      	mvns	r3, r3
    45f8:	9a05      	ldr	r2, [sp, #20]
    45fa:	4013      	ands	r3, r2
    45fc:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    45fe:	9b03      	ldr	r3, [sp, #12]
    4600:	3b04      	subs	r3, #4
    4602:	005b      	lsls	r3, r3, #1
    4604:	3310      	adds	r3, #16
    4606:	9a04      	ldr	r2, [sp, #16]
    4608:	fa02 f303 	lsl.w	r3, r2, r3
    460c:	9a05      	ldr	r2, [sp, #20]
    460e:	4313      	orrs	r3, r2
    4610:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4612:	4a05      	ldr	r2, [pc, #20]	; (4628 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4614:	9b05      	ldr	r3, [sp, #20]
    4616:	60d3      	str	r3, [r2, #12]
}
    4618:	bf00      	nop
    461a:	b006      	add	sp, #24
    461c:	4770      	bx	lr
    461e:	bf00      	nop
    4620:	0000a9cc 	.word	0x0000a9cc
    4624:	0000a6bc 	.word	0x0000a6bc
    4628:	40048000 	.word	0x40048000

0000462c <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    462c:	b086      	sub	sp, #24
    462e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4630:	9b01      	ldr	r3, [sp, #4]
    4632:	685b      	ldr	r3, [r3, #4]
    4634:	4a20      	ldr	r2, [pc, #128]	; (46b8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    4636:	5cd3      	ldrb	r3, [r2, r3]
    4638:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    463a:	9b01      	ldr	r3, [sp, #4]
    463c:	681a      	ldr	r2, [r3, #0]
    463e:	491f      	ldr	r1, [pc, #124]	; (46bc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    4640:	4613      	mov	r3, r2
    4642:	00db      	lsls	r3, r3, #3
    4644:	4413      	add	r3, r2
    4646:	440b      	add	r3, r1
    4648:	781b      	ldrb	r3, [r3, #0]
    464a:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    464c:	4b1c      	ldr	r3, [pc, #112]	; (46c0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    464e:	68db      	ldr	r3, [r3, #12]
    4650:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4652:	9b03      	ldr	r3, [sp, #12]
    4654:	2b03      	cmp	r3, #3
    4656:	d813      	bhi.n	4680 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4658:	9b03      	ldr	r3, [sp, #12]
    465a:	005b      	lsls	r3, r3, #1
    465c:	3318      	adds	r3, #24
    465e:	2203      	movs	r2, #3
    4660:	fa02 f303 	lsl.w	r3, r2, r3
    4664:	43db      	mvns	r3, r3
    4666:	9a05      	ldr	r2, [sp, #20]
    4668:	4013      	ands	r3, r2
    466a:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    466c:	9b03      	ldr	r3, [sp, #12]
    466e:	005b      	lsls	r3, r3, #1
    4670:	3318      	adds	r3, #24
    4672:	9a04      	ldr	r2, [sp, #16]
    4674:	fa02 f303 	lsl.w	r3, r2, r3
    4678:	9a05      	ldr	r2, [sp, #20]
    467a:	4313      	orrs	r3, r2
    467c:	9305      	str	r3, [sp, #20]
    467e:	e014      	b.n	46aa <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4680:	9b03      	ldr	r3, [sp, #12]
    4682:	3b04      	subs	r3, #4
    4684:	005b      	lsls	r3, r3, #1
    4686:	3310      	adds	r3, #16
    4688:	2203      	movs	r2, #3
    468a:	fa02 f303 	lsl.w	r3, r2, r3
    468e:	43db      	mvns	r3, r3
    4690:	9a05      	ldr	r2, [sp, #20]
    4692:	4013      	ands	r3, r2
    4694:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4696:	9b03      	ldr	r3, [sp, #12]
    4698:	3b04      	subs	r3, #4
    469a:	005b      	lsls	r3, r3, #1
    469c:	3310      	adds	r3, #16
    469e:	9a04      	ldr	r2, [sp, #16]
    46a0:	fa02 f303 	lsl.w	r3, r2, r3
    46a4:	9a05      	ldr	r2, [sp, #20]
    46a6:	4313      	orrs	r3, r2
    46a8:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    46aa:	4a05      	ldr	r2, [pc, #20]	; (46c0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    46ac:	9b05      	ldr	r3, [sp, #20]
    46ae:	60d3      	str	r3, [r2, #12]
}
    46b0:	bf00      	nop
    46b2:	b006      	add	sp, #24
    46b4:	4770      	bx	lr
    46b6:	bf00      	nop
    46b8:	0000a9cc 	.word	0x0000a9cc
    46bc:	0000a6bc 	.word	0x0000a6bc
    46c0:	40048000 	.word	0x40048000

000046c4 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46c4:	b084      	sub	sp, #16
    46c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    46c8:	4b06      	ldr	r3, [pc, #24]	; (46e4 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    46ca:	685b      	ldr	r3, [r3, #4]
    46cc:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    46ce:	9b03      	ldr	r3, [sp, #12]
    46d0:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    46d4:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    46d6:	4a03      	ldr	r2, [pc, #12]	; (46e4 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    46d8:	9b03      	ldr	r3, [sp, #12]
    46da:	6053      	str	r3, [r2, #4]
}
    46dc:	bf00      	nop
    46de:	b004      	add	sp, #16
    46e0:	4770      	bx	lr
    46e2:	bf00      	nop
    46e4:	40048000 	.word	0x40048000

000046e8 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46e8:	b084      	sub	sp, #16
    46ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46ec:	9b01      	ldr	r3, [sp, #4]
    46ee:	685b      	ldr	r3, [r3, #4]
    46f0:	4a0a      	ldr	r2, [pc, #40]	; (471c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    46f2:	5cd3      	ldrb	r3, [r2, r3]
    46f4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    46f6:	4b0a      	ldr	r3, [pc, #40]	; (4720 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    46f8:	685b      	ldr	r3, [r3, #4]
    46fa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    46fc:	9b02      	ldr	r3, [sp, #8]
    46fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4702:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4704:	9b03      	ldr	r3, [sp, #12]
    4706:	011b      	lsls	r3, r3, #4
    4708:	9a02      	ldr	r2, [sp, #8]
    470a:	4313      	orrs	r3, r2
    470c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    470e:	4a04      	ldr	r2, [pc, #16]	; (4720 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4710:	9b02      	ldr	r3, [sp, #8]
    4712:	6053      	str	r3, [r2, #4]
}
    4714:	bf00      	nop
    4716:	b004      	add	sp, #16
    4718:	4770      	bx	lr
    471a:	bf00      	nop
    471c:	0000a9cc 	.word	0x0000a9cc
    4720:	40048000 	.word	0x40048000

00004724 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4724:	b084      	sub	sp, #16
    4726:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4728:	9b01      	ldr	r3, [sp, #4]
    472a:	681a      	ldr	r2, [r3, #0]
    472c:	490f      	ldr	r1, [pc, #60]	; (476c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    472e:	4613      	mov	r3, r2
    4730:	00db      	lsls	r3, r3, #3
    4732:	4413      	add	r3, r2
    4734:	440b      	add	r3, r1
    4736:	3304      	adds	r3, #4
    4738:	781b      	ldrb	r3, [r3, #0]
    473a:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    473c:	4a0c      	ldr	r2, [pc, #48]	; (4770 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    473e:	9b03      	ldr	r3, [sp, #12]
    4740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4744:	490a      	ldr	r1, [pc, #40]	; (4770 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4746:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    474a:	9b03      	ldr	r3, [sp, #12]
    474c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4750:	4a07      	ldr	r2, [pc, #28]	; (4770 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4752:	9b03      	ldr	r3, [sp, #12]
    4754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4758:	4905      	ldr	r1, [pc, #20]	; (4770 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    475a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    475e:	9b03      	ldr	r3, [sp, #12]
    4760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4764:	bf00      	nop
    4766:	b004      	add	sp, #16
    4768:	4770      	bx	lr
    476a:	bf00      	nop
    476c:	0000a6bc 	.word	0x0000a6bc
    4770:	40065000 	.word	0x40065000

00004774 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4774:	b086      	sub	sp, #24
    4776:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4778:	9b01      	ldr	r3, [sp, #4]
    477a:	681a      	ldr	r2, [r3, #0]
    477c:	4912      	ldr	r1, [pc, #72]	; (47c8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    477e:	4613      	mov	r3, r2
    4780:	00db      	lsls	r3, r3, #3
    4782:	4413      	add	r3, r2
    4784:	440b      	add	r3, r1
    4786:	3304      	adds	r3, #4
    4788:	781b      	ldrb	r3, [r3, #0]
    478a:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    478c:	9b01      	ldr	r3, [sp, #4]
    478e:	685b      	ldr	r3, [r3, #4]
    4790:	4a0e      	ldr	r2, [pc, #56]	; (47cc <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    4792:	5cd3      	ldrb	r3, [r2, r3]
    4794:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4796:	4a0e      	ldr	r2, [pc, #56]	; (47d0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4798:	9b05      	ldr	r3, [sp, #20]
    479a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    479e:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    47a0:	9b03      	ldr	r3, [sp, #12]
    47a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    47a6:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    47a8:	9b04      	ldr	r3, [sp, #16]
    47aa:	061b      	lsls	r3, r3, #24
    47ac:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    47b0:	9a03      	ldr	r2, [sp, #12]
    47b2:	4313      	orrs	r3, r2
    47b4:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    47b6:	4906      	ldr	r1, [pc, #24]	; (47d0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    47b8:	9b05      	ldr	r3, [sp, #20]
    47ba:	9a03      	ldr	r2, [sp, #12]
    47bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    47c0:	bf00      	nop
    47c2:	b006      	add	sp, #24
    47c4:	4770      	bx	lr
    47c6:	bf00      	nop
    47c8:	0000a6bc 	.word	0x0000a6bc
    47cc:	0000aa54 	.word	0x0000aa54
    47d0:	40065000 	.word	0x40065000

000047d4 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47d4:	b084      	sub	sp, #16
    47d6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47d8:	4b0b      	ldr	r3, [pc, #44]	; (4808 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    47da:	7f1b      	ldrb	r3, [r3, #28]
    47dc:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    47de:	4b0b      	ldr	r3, [pc, #44]	; (480c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    47e0:	685b      	ldr	r3, [r3, #4]
    47e2:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    47e4:	9b02      	ldr	r3, [sp, #8]
    47e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    47ea:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    47ec:	9b03      	ldr	r3, [sp, #12]
    47ee:	031b      	lsls	r3, r3, #12
    47f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    47f4:	9a02      	ldr	r2, [sp, #8]
    47f6:	4313      	orrs	r3, r2
    47f8:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    47fa:	4a04      	ldr	r2, [pc, #16]	; (480c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    47fc:	9b02      	ldr	r3, [sp, #8]
    47fe:	6053      	str	r3, [r2, #4]
}
    4800:	bf00      	nop
    4802:	b004      	add	sp, #16
    4804:	4770      	bx	lr
    4806:	bf00      	nop
    4808:	0000a9cc 	.word	0x0000a9cc
    480c:	40048000 	.word	0x40048000

00004810 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4810:	b084      	sub	sp, #16
    4812:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4814:	9b01      	ldr	r3, [sp, #4]
    4816:	685b      	ldr	r3, [r3, #4]
    4818:	4a0b      	ldr	r2, [pc, #44]	; (4848 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    481a:	5cd3      	ldrb	r3, [r2, r3]
    481c:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    481e:	4b0b      	ldr	r3, [pc, #44]	; (484c <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4820:	685b      	ldr	r3, [r3, #4]
    4822:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4824:	9b02      	ldr	r3, [sp, #8]
    4826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    482a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    482c:	9b03      	ldr	r3, [sp, #12]
    482e:	031b      	lsls	r3, r3, #12
    4830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4834:	9a02      	ldr	r2, [sp, #8]
    4836:	4313      	orrs	r3, r2
    4838:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    483a:	4a04      	ldr	r2, [pc, #16]	; (484c <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    483c:	9b02      	ldr	r3, [sp, #8]
    483e:	6053      	str	r3, [r2, #4]
}
    4840:	bf00      	nop
    4842:	b004      	add	sp, #16
    4844:	4770      	bx	lr
    4846:	bf00      	nop
    4848:	0000a9cc 	.word	0x0000a9cc
    484c:	40048000 	.word	0x40048000

00004850 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4850:	b500      	push	{lr}
    4852:	b085      	sub	sp, #20
    4854:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4856:	2300      	movs	r3, #0
    4858:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    485c:	9b01      	ldr	r3, [sp, #4]
    485e:	2b00      	cmp	r3, #0
    4860:	d037      	beq.n	48d2 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4862:	2300      	movs	r3, #0
    4864:	9303      	str	r3, [sp, #12]
    4866:	e02b      	b.n	48c0 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4868:	4b29      	ldr	r3, [pc, #164]	; (4910 <DisableSafeClock+0xc0>)
    486a:	6819      	ldr	r1, [r3, #0]
    486c:	9a03      	ldr	r2, [sp, #12]
    486e:	4613      	mov	r3, r2
    4870:	005b      	lsls	r3, r3, #1
    4872:	4413      	add	r3, r2
    4874:	009b      	lsls	r3, r3, #2
    4876:	440b      	add	r3, r1
    4878:	3314      	adds	r3, #20
    487a:	681b      	ldr	r3, [r3, #0]
    487c:	2b05      	cmp	r3, #5
    487e:	d11c      	bne.n	48ba <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4880:	2301      	movs	r3, #1
    4882:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4886:	4b22      	ldr	r3, [pc, #136]	; (4910 <DisableSafeClock+0xc0>)
    4888:	6819      	ldr	r1, [r3, #0]
    488a:	9a03      	ldr	r2, [sp, #12]
    488c:	4613      	mov	r3, r2
    488e:	005b      	lsls	r3, r3, #1
    4890:	4413      	add	r3, r2
    4892:	009b      	lsls	r3, r3, #2
    4894:	440b      	add	r3, r1
    4896:	3318      	adds	r3, #24
    4898:	881b      	ldrh	r3, [r3, #0]
    489a:	2b00      	cmp	r3, #0
    489c:	d118      	bne.n	48d0 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    489e:	4b1d      	ldr	r3, [pc, #116]	; (4914 <DisableSafeClock+0xc4>)
    48a0:	791b      	ldrb	r3, [r3, #4]
    48a2:	4619      	mov	r1, r3
    48a4:	4a1c      	ldr	r2, [pc, #112]	; (4918 <DisableSafeClock+0xc8>)
    48a6:	460b      	mov	r3, r1
    48a8:	005b      	lsls	r3, r3, #1
    48aa:	440b      	add	r3, r1
    48ac:	009b      	lsls	r3, r3, #2
    48ae:	4413      	add	r3, r2
    48b0:	3308      	adds	r3, #8
    48b2:	681b      	ldr	r3, [r3, #0]
    48b4:	2005      	movs	r0, #5
    48b6:	4798      	blx	r3
                }
                break;
    48b8:	e00a      	b.n	48d0 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    48ba:	9b03      	ldr	r3, [sp, #12]
    48bc:	3301      	adds	r3, #1
    48be:	9303      	str	r3, [sp, #12]
    48c0:	4b13      	ldr	r3, [pc, #76]	; (4910 <DisableSafeClock+0xc0>)
    48c2:	681b      	ldr	r3, [r3, #0]
    48c4:	7a1b      	ldrb	r3, [r3, #8]
    48c6:	461a      	mov	r2, r3
    48c8:	9b03      	ldr	r3, [sp, #12]
    48ca:	4293      	cmp	r3, r2
    48cc:	d3cc      	bcc.n	4868 <DisableSafeClock+0x18>
    48ce:	e000      	b.n	48d2 <DisableSafeClock+0x82>
                break;
    48d0:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    48d2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    48d6:	f083 0301 	eor.w	r3, r3, #1
    48da:	b2db      	uxtb	r3, r3
    48dc:	2b00      	cmp	r3, #0
    48de:	d013      	beq.n	4908 <DisableSafeClock+0xb8>
    48e0:	4b0e      	ldr	r3, [pc, #56]	; (491c <DisableSafeClock+0xcc>)
    48e2:	781b      	ldrb	r3, [r3, #0]
    48e4:	f083 0301 	eor.w	r3, r3, #1
    48e8:	b2db      	uxtb	r3, r3
    48ea:	2b00      	cmp	r3, #0
    48ec:	d00c      	beq.n	4908 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    48ee:	4b09      	ldr	r3, [pc, #36]	; (4914 <DisableSafeClock+0xc4>)
    48f0:	791b      	ldrb	r3, [r3, #4]
    48f2:	4619      	mov	r1, r3
    48f4:	4a08      	ldr	r2, [pc, #32]	; (4918 <DisableSafeClock+0xc8>)
    48f6:	460b      	mov	r3, r1
    48f8:	005b      	lsls	r3, r3, #1
    48fa:	440b      	add	r3, r1
    48fc:	009b      	lsls	r3, r3, #2
    48fe:	4413      	add	r3, r2
    4900:	3308      	adds	r3, #8
    4902:	681b      	ldr	r3, [r3, #0]
    4904:	2005      	movs	r0, #5
    4906:	4798      	blx	r3
    }
}
    4908:	bf00      	nop
    490a:	b005      	add	sp, #20
    490c:	f85d fb04 	ldr.w	pc, [sp], #4
    4910:	1fff8ba8 	.word	0x1fff8ba8
    4914:	0000a64c 	.word	0x0000a64c
    4918:	0000ac7c 	.word	0x0000ac7c
    491c:	1fff8b18 	.word	0x1fff8b18

00004920 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4920:	4b06      	ldr	r3, [pc, #24]	; (493c <SetFircToResetValue_TrustedCall+0x1c>)
    4922:	2200      	movs	r2, #0
    4924:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4928:	4b04      	ldr	r3, [pc, #16]	; (493c <SetFircToResetValue_TrustedCall+0x1c>)
    492a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    492e:	4a03      	ldr	r2, [pc, #12]	; (493c <SetFircToResetValue_TrustedCall+0x1c>)
    4930:	f043 0301 	orr.w	r3, r3, #1
    4934:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4938:	bf00      	nop
    493a:	4770      	bx	lr
    493c:	40064000 	.word	0x40064000

00004940 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4940:	b084      	sub	sp, #16
    4942:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4944:	2303      	movs	r3, #3
    4946:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4948:	2300      	movs	r3, #0
    494a:	9302      	str	r3, [sp, #8]
    494c:	e028      	b.n	49a0 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    494e:	9b01      	ldr	r3, [sp, #4]
    4950:	9a02      	ldr	r2, [sp, #8]
    4952:	320d      	adds	r2, #13
    4954:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4958:	2b28      	cmp	r3, #40	; 0x28
    495a:	d10b      	bne.n	4974 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    495c:	9a01      	ldr	r2, [sp, #4]
    495e:	9b02      	ldr	r3, [sp, #8]
    4960:	330d      	adds	r3, #13
    4962:	00db      	lsls	r3, r3, #3
    4964:	4413      	add	r3, r2
    4966:	685b      	ldr	r3, [r3, #4]
    4968:	4a2b      	ldr	r2, [pc, #172]	; (4a18 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    496a:	5cd3      	ldrb	r3, [r2, r3]
    496c:	011b      	lsls	r3, r3, #4
    496e:	9a03      	ldr	r2, [sp, #12]
    4970:	4313      	orrs	r3, r2
    4972:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4974:	9b01      	ldr	r3, [sp, #4]
    4976:	9a02      	ldr	r2, [sp, #8]
    4978:	320d      	adds	r2, #13
    497a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    497e:	2b29      	cmp	r3, #41	; 0x29
    4980:	d10b      	bne.n	499a <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4982:	9a01      	ldr	r2, [sp, #4]
    4984:	9b02      	ldr	r3, [sp, #8]
    4986:	330d      	adds	r3, #13
    4988:	00db      	lsls	r3, r3, #3
    498a:	4413      	add	r3, r2
    498c:	685b      	ldr	r3, [r3, #4]
    498e:	4a23      	ldr	r2, [pc, #140]	; (4a1c <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4990:	5cd3      	ldrb	r3, [r2, r3]
    4992:	009b      	lsls	r3, r3, #2
    4994:	9a03      	ldr	r2, [sp, #12]
    4996:	4313      	orrs	r3, r2
    4998:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    499a:	9b02      	ldr	r3, [sp, #8]
    499c:	3301      	adds	r3, #1
    499e:	9302      	str	r3, [sp, #8]
    49a0:	9b01      	ldr	r3, [sp, #4]
    49a2:	7adb      	ldrb	r3, [r3, #11]
    49a4:	461a      	mov	r2, r3
    49a6:	9b02      	ldr	r3, [sp, #8]
    49a8:	4293      	cmp	r3, r2
    49aa:	d3d0      	bcc.n	494e <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    49ac:	2300      	movs	r3, #0
    49ae:	9302      	str	r3, [sp, #8]
    49b0:	e026      	b.n	4a00 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    49b2:	9a01      	ldr	r2, [sp, #4]
    49b4:	9b02      	ldr	r3, [sp, #8]
    49b6:	334e      	adds	r3, #78	; 0x4e
    49b8:	00db      	lsls	r3, r3, #3
    49ba:	4413      	add	r3, r2
    49bc:	685b      	ldr	r3, [r3, #4]
    49be:	2b12      	cmp	r3, #18
    49c0:	d109      	bne.n	49d6 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    49c2:	9a01      	ldr	r2, [sp, #4]
    49c4:	9b02      	ldr	r3, [sp, #8]
    49c6:	334e      	adds	r3, #78	; 0x4e
    49c8:	00db      	lsls	r3, r3, #3
    49ca:	4413      	add	r3, r2
    49cc:	891b      	ldrh	r3, [r3, #8]
    49ce:	005b      	lsls	r3, r3, #1
    49d0:	9a03      	ldr	r2, [sp, #12]
    49d2:	4313      	orrs	r3, r2
    49d4:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    49d6:	9a01      	ldr	r2, [sp, #4]
    49d8:	9b02      	ldr	r3, [sp, #8]
    49da:	334e      	adds	r3, #78	; 0x4e
    49dc:	00db      	lsls	r3, r3, #3
    49de:	4413      	add	r3, r2
    49e0:	685b      	ldr	r3, [r3, #4]
    49e2:	2b13      	cmp	r3, #19
    49e4:	d109      	bne.n	49fa <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    49e6:	9a01      	ldr	r2, [sp, #4]
    49e8:	9b02      	ldr	r3, [sp, #8]
    49ea:	334e      	adds	r3, #78	; 0x4e
    49ec:	00db      	lsls	r3, r3, #3
    49ee:	4413      	add	r3, r2
    49f0:	891b      	ldrh	r3, [r3, #8]
    49f2:	461a      	mov	r2, r3
    49f4:	9b03      	ldr	r3, [sp, #12]
    49f6:	4313      	orrs	r3, r2
    49f8:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    49fa:	9b02      	ldr	r3, [sp, #8]
    49fc:	3301      	adds	r3, #1
    49fe:	9302      	str	r3, [sp, #8]
    4a00:	9b01      	ldr	r3, [sp, #4]
    4a02:	7c1b      	ldrb	r3, [r3, #16]
    4a04:	461a      	mov	r2, r3
    4a06:	9b02      	ldr	r3, [sp, #8]
    4a08:	4293      	cmp	r3, r2
    4a0a:	d3d2      	bcc.n	49b2 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4a0c:	4a04      	ldr	r2, [pc, #16]	; (4a20 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4a0e:	9b03      	ldr	r3, [sp, #12]
    4a10:	6113      	str	r3, [r2, #16]
}
    4a12:	bf00      	nop
    4a14:	b004      	add	sp, #16
    4a16:	4770      	bx	lr
    4a18:	0000a9cc 	.word	0x0000a9cc
    4a1c:	0000aa84 	.word	0x0000aa84
    4a20:	40048000 	.word	0x40048000

00004a24 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4a24:	b500      	push	{lr}
    4a26:	b089      	sub	sp, #36	; 0x24
    4a28:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4a2a:	2300      	movs	r3, #0
    4a2c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4a30:	4a21      	ldr	r2, [pc, #132]	; (4ab8 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4a32:	9b01      	ldr	r3, [sp, #4]
    4a34:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4a36:	4b21      	ldr	r3, [pc, #132]	; (4abc <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4a38:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a3c:	f003 0301 	and.w	r3, r3, #1
    4a40:	2b00      	cmp	r3, #0
    4a42:	d12e      	bne.n	4aa2 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4a44:	4b1e      	ldr	r3, [pc, #120]	; (4ac0 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4a46:	2200      	movs	r2, #0
    4a48:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4a4a:	f7ff ff69 	bl	4920 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4a4e:	aa03      	add	r2, sp, #12
    4a50:	a904      	add	r1, sp, #16
    4a52:	a805      	add	r0, sp, #20
    4a54:	f24c 3350 	movw	r3, #50000	; 0xc350
    4a58:	f7fe f8ae 	bl	2bb8 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4a5c:	4b17      	ldr	r3, [pc, #92]	; (4abc <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4a5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a62:	0e1b      	lsrs	r3, r3, #24
    4a64:	f003 0301 	and.w	r3, r3, #1
    4a68:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4a6a:	9a03      	ldr	r2, [sp, #12]
    4a6c:	a904      	add	r1, sp, #16
    4a6e:	ab05      	add	r3, sp, #20
    4a70:	4618      	mov	r0, r3
    4a72:	f7fe f8bb 	bl	2bec <Clock_Ip_TimeoutExpired>
    4a76:	4603      	mov	r3, r0
    4a78:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4a7c:	9b06      	ldr	r3, [sp, #24]
    4a7e:	2b00      	cmp	r3, #0
    4a80:	d106      	bne.n	4a90 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4a82:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a86:	f083 0301 	eor.w	r3, r3, #1
    4a8a:	b2db      	uxtb	r3, r3
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	d1e5      	bne.n	4a5c <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4a90:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a94:	2b00      	cmp	r3, #0
    4a96:	d007      	beq.n	4aa8 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4a98:	2105      	movs	r1, #5
    4a9a:	2001      	movs	r0, #1
    4a9c:	f7fe f87c 	bl	2b98 <Clock_Ip_ReportClockErrors>
    4aa0:	e002      	b.n	4aa8 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4aa2:	4b07      	ldr	r3, [pc, #28]	; (4ac0 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4aa4:	2201      	movs	r2, #1
    4aa6:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4aa8:	9801      	ldr	r0, [sp, #4]
    4aaa:	f7ff ff49 	bl	4940 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4aae:	bf00      	nop
    4ab0:	b009      	add	sp, #36	; 0x24
    4ab2:	f85d fb04 	ldr.w	pc, [sp], #4
    4ab6:	bf00      	nop
    4ab8:	1fff8ba8 	.word	0x1fff8ba8
    4abc:	40064000 	.word	0x40064000
    4ac0:	1fff8b18 	.word	0x1fff8b18

00004ac4 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4ac4:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4ac6:	2300      	movs	r3, #0
    4ac8:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4aca:	4b29      	ldr	r3, [pc, #164]	; (4b70 <getFircConfig+0xac>)
    4acc:	681b      	ldr	r3, [r3, #0]
    4ace:	2b00      	cmp	r3, #0
    4ad0:	d024      	beq.n	4b1c <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4ad2:	2300      	movs	r3, #0
    4ad4:	9301      	str	r3, [sp, #4]
    4ad6:	e01a      	b.n	4b0e <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4ad8:	4b25      	ldr	r3, [pc, #148]	; (4b70 <getFircConfig+0xac>)
    4ada:	6819      	ldr	r1, [r3, #0]
    4adc:	9a01      	ldr	r2, [sp, #4]
    4ade:	4613      	mov	r3, r2
    4ae0:	005b      	lsls	r3, r3, #1
    4ae2:	4413      	add	r3, r2
    4ae4:	009b      	lsls	r3, r3, #2
    4ae6:	440b      	add	r3, r1
    4ae8:	3314      	adds	r3, #20
    4aea:	681b      	ldr	r3, [r3, #0]
    4aec:	2b05      	cmp	r3, #5
    4aee:	d10b      	bne.n	4b08 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4af0:	4b1f      	ldr	r3, [pc, #124]	; (4b70 <getFircConfig+0xac>)
    4af2:	6819      	ldr	r1, [r3, #0]
    4af4:	9a01      	ldr	r2, [sp, #4]
    4af6:	4613      	mov	r3, r2
    4af8:	005b      	lsls	r3, r3, #1
    4afa:	4413      	add	r3, r2
    4afc:	009b      	lsls	r3, r3, #2
    4afe:	3310      	adds	r3, #16
    4b00:	440b      	add	r3, r1
    4b02:	3304      	adds	r3, #4
    4b04:	9300      	str	r3, [sp, #0]
                break;
    4b06:	e009      	b.n	4b1c <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4b08:	9b01      	ldr	r3, [sp, #4]
    4b0a:	3301      	adds	r3, #1
    4b0c:	9301      	str	r3, [sp, #4]
    4b0e:	4b18      	ldr	r3, [pc, #96]	; (4b70 <getFircConfig+0xac>)
    4b10:	681b      	ldr	r3, [r3, #0]
    4b12:	7a1b      	ldrb	r3, [r3, #8]
    4b14:	461a      	mov	r2, r3
    4b16:	9b01      	ldr	r3, [sp, #4]
    4b18:	4293      	cmp	r3, r2
    4b1a:	d3dd      	bcc.n	4ad8 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4b1c:	9b00      	ldr	r3, [sp, #0]
    4b1e:	2b00      	cmp	r3, #0
    4b20:	d121      	bne.n	4b66 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4b22:	4b14      	ldr	r3, [pc, #80]	; (4b74 <getFircConfig+0xb0>)
    4b24:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4b26:	4b13      	ldr	r3, [pc, #76]	; (4b74 <getFircConfig+0xb0>)
    4b28:	2205      	movs	r2, #5
    4b2a:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4b2c:	4b12      	ldr	r3, [pc, #72]	; (4b78 <getFircConfig+0xb4>)
    4b2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b32:	b29b      	uxth	r3, r3
    4b34:	f003 0301 	and.w	r3, r3, #1
    4b38:	b29a      	uxth	r2, r3
    4b3a:	4b0e      	ldr	r3, [pc, #56]	; (4b74 <getFircConfig+0xb0>)
    4b3c:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4b3e:	4b0e      	ldr	r3, [pc, #56]	; (4b78 <getFircConfig+0xb4>)
    4b40:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4b44:	b2db      	uxtb	r3, r3
    4b46:	f003 0303 	and.w	r3, r3, #3
    4b4a:	b2da      	uxtb	r2, r3
    4b4c:	4b09      	ldr	r3, [pc, #36]	; (4b74 <getFircConfig+0xb0>)
    4b4e:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4b50:	4b09      	ldr	r3, [pc, #36]	; (4b78 <getFircConfig+0xb4>)
    4b52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b56:	b2db      	uxtb	r3, r3
    4b58:	10db      	asrs	r3, r3, #3
    4b5a:	b2db      	uxtb	r3, r3
    4b5c:	f003 0301 	and.w	r3, r3, #1
    4b60:	b2da      	uxtb	r2, r3
    4b62:	4b04      	ldr	r3, [pc, #16]	; (4b74 <getFircConfig+0xb0>)
    4b64:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4b66:	9b00      	ldr	r3, [sp, #0]
}
    4b68:	4618      	mov	r0, r3
    4b6a:	b002      	add	sp, #8
    4b6c:	4770      	bx	lr
    4b6e:	bf00      	nop
    4b70:	1fff8ba8 	.word	0x1fff8ba8
    4b74:	1fff8c14 	.word	0x1fff8c14
    4b78:	40064000 	.word	0x40064000

00004b7c <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4b7c:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4b7e:	2300      	movs	r3, #0
    4b80:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4b82:	4b20      	ldr	r3, [pc, #128]	; (4c04 <getSoscConfig+0x88>)
    4b84:	681b      	ldr	r3, [r3, #0]
    4b86:	2b00      	cmp	r3, #0
    4b88:	d024      	beq.n	4bd4 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4b8a:	2300      	movs	r3, #0
    4b8c:	9301      	str	r3, [sp, #4]
    4b8e:	e01a      	b.n	4bc6 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4b90:	4b1c      	ldr	r3, [pc, #112]	; (4c04 <getSoscConfig+0x88>)
    4b92:	6819      	ldr	r1, [r3, #0]
    4b94:	9a01      	ldr	r2, [sp, #4]
    4b96:	4613      	mov	r3, r2
    4b98:	009b      	lsls	r3, r3, #2
    4b9a:	4413      	add	r3, r2
    4b9c:	009b      	lsls	r3, r3, #2
    4b9e:	440b      	add	r3, r1
    4ba0:	332c      	adds	r3, #44	; 0x2c
    4ba2:	681b      	ldr	r3, [r3, #0]
    4ba4:	2b08      	cmp	r3, #8
    4ba6:	d10b      	bne.n	4bc0 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4ba8:	4b16      	ldr	r3, [pc, #88]	; (4c04 <getSoscConfig+0x88>)
    4baa:	6819      	ldr	r1, [r3, #0]
    4bac:	9a01      	ldr	r2, [sp, #4]
    4bae:	4613      	mov	r3, r2
    4bb0:	009b      	lsls	r3, r3, #2
    4bb2:	4413      	add	r3, r2
    4bb4:	009b      	lsls	r3, r3, #2
    4bb6:	3328      	adds	r3, #40	; 0x28
    4bb8:	440b      	add	r3, r1
    4bba:	3304      	adds	r3, #4
    4bbc:	9300      	str	r3, [sp, #0]
                break;
    4bbe:	e009      	b.n	4bd4 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4bc0:	9b01      	ldr	r3, [sp, #4]
    4bc2:	3301      	adds	r3, #1
    4bc4:	9301      	str	r3, [sp, #4]
    4bc6:	4b0f      	ldr	r3, [pc, #60]	; (4c04 <getSoscConfig+0x88>)
    4bc8:	681b      	ldr	r3, [r3, #0]
    4bca:	7a5b      	ldrb	r3, [r3, #9]
    4bcc:	461a      	mov	r2, r3
    4bce:	9b01      	ldr	r3, [sp, #4]
    4bd0:	4293      	cmp	r3, r2
    4bd2:	d3dd      	bcc.n	4b90 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4bd4:	9b00      	ldr	r3, [sp, #0]
    4bd6:	2b00      	cmp	r3, #0
    4bd8:	d110      	bne.n	4bfc <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4bda:	4b0b      	ldr	r3, [pc, #44]	; (4c08 <getSoscConfig+0x8c>)
    4bdc:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4bde:	4b0a      	ldr	r3, [pc, #40]	; (4c08 <getSoscConfig+0x8c>)
    4be0:	2208      	movs	r2, #8
    4be2:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4be4:	4b09      	ldr	r3, [pc, #36]	; (4c0c <getSoscConfig+0x90>)
    4be6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4bea:	b29b      	uxth	r3, r3
    4bec:	f003 0301 	and.w	r3, r3, #1
    4bf0:	b29a      	uxth	r2, r3
    4bf2:	4b05      	ldr	r3, [pc, #20]	; (4c08 <getSoscConfig+0x8c>)
    4bf4:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4bf6:	4b04      	ldr	r3, [pc, #16]	; (4c08 <getSoscConfig+0x8c>)
    4bf8:	4a05      	ldr	r2, [pc, #20]	; (4c10 <getSoscConfig+0x94>)
    4bfa:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4bfc:	9b00      	ldr	r3, [sp, #0]
}
    4bfe:	4618      	mov	r0, r3
    4c00:	b002      	add	sp, #8
    4c02:	4770      	bx	lr
    4c04:	1fff8ba8 	.word	0x1fff8ba8
    4c08:	1fff8c20 	.word	0x1fff8c20
    4c0c:	40064000 	.word	0x40064000
    4c10:	02625a00 	.word	0x02625a00

00004c14 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4c14:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4c16:	2300      	movs	r3, #0
    4c18:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4c1a:	4b28      	ldr	r3, [pc, #160]	; (4cbc <getSpllConfig+0xa8>)
    4c1c:	681b      	ldr	r3, [r3, #0]
    4c1e:	2b00      	cmp	r3, #0
    4c20:	d023      	beq.n	4c6a <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4c22:	2300      	movs	r3, #0
    4c24:	9301      	str	r3, [sp, #4]
    4c26:	e019      	b.n	4c5c <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4c28:	4b24      	ldr	r3, [pc, #144]	; (4cbc <getSpllConfig+0xa8>)
    4c2a:	6819      	ldr	r1, [r3, #0]
    4c2c:	9a01      	ldr	r2, [sp, #4]
    4c2e:	4613      	mov	r3, r2
    4c30:	009b      	lsls	r3, r3, #2
    4c32:	4413      	add	r3, r2
    4c34:	00db      	lsls	r3, r3, #3
    4c36:	440b      	add	r3, r1
    4c38:	3340      	adds	r3, #64	; 0x40
    4c3a:	681b      	ldr	r3, [r3, #0]
    4c3c:	2b09      	cmp	r3, #9
    4c3e:	d10a      	bne.n	4c56 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4c40:	4b1e      	ldr	r3, [pc, #120]	; (4cbc <getSpllConfig+0xa8>)
    4c42:	6819      	ldr	r1, [r3, #0]
    4c44:	9a01      	ldr	r2, [sp, #4]
    4c46:	4613      	mov	r3, r2
    4c48:	009b      	lsls	r3, r3, #2
    4c4a:	4413      	add	r3, r2
    4c4c:	00db      	lsls	r3, r3, #3
    4c4e:	3340      	adds	r3, #64	; 0x40
    4c50:	440b      	add	r3, r1
    4c52:	9300      	str	r3, [sp, #0]
                break;
    4c54:	e009      	b.n	4c6a <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4c56:	9b01      	ldr	r3, [sp, #4]
    4c58:	3301      	adds	r3, #1
    4c5a:	9301      	str	r3, [sp, #4]
    4c5c:	4b17      	ldr	r3, [pc, #92]	; (4cbc <getSpllConfig+0xa8>)
    4c5e:	681b      	ldr	r3, [r3, #0]
    4c60:	7a9b      	ldrb	r3, [r3, #10]
    4c62:	461a      	mov	r2, r3
    4c64:	9b01      	ldr	r3, [sp, #4]
    4c66:	4293      	cmp	r3, r2
    4c68:	d3de      	bcc.n	4c28 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4c6a:	9b00      	ldr	r3, [sp, #0]
    4c6c:	2b00      	cmp	r3, #0
    4c6e:	d121      	bne.n	4cb4 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4c70:	4b13      	ldr	r3, [pc, #76]	; (4cc0 <getSpllConfig+0xac>)
    4c72:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4c74:	4b12      	ldr	r3, [pc, #72]	; (4cc0 <getSpllConfig+0xac>)
    4c76:	2209      	movs	r2, #9
    4c78:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4c7a:	4b12      	ldr	r3, [pc, #72]	; (4cc4 <getSpllConfig+0xb0>)
    4c7c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4c80:	b29b      	uxth	r3, r3
    4c82:	f003 0301 	and.w	r3, r3, #1
    4c86:	b29a      	uxth	r2, r3
    4c88:	4b0d      	ldr	r3, [pc, #52]	; (4cc0 <getSpllConfig+0xac>)
    4c8a:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4c8c:	4b0d      	ldr	r3, [pc, #52]	; (4cc4 <getSpllConfig+0xb0>)
    4c8e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c92:	0a1b      	lsrs	r3, r3, #8
    4c94:	b2db      	uxtb	r3, r3
    4c96:	f003 0307 	and.w	r3, r3, #7
    4c9a:	b2da      	uxtb	r2, r3
    4c9c:	4b08      	ldr	r3, [pc, #32]	; (4cc0 <getSpllConfig+0xac>)
    4c9e:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4ca0:	4b08      	ldr	r3, [pc, #32]	; (4cc4 <getSpllConfig+0xb0>)
    4ca2:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4ca6:	0c1b      	lsrs	r3, r3, #16
    4ca8:	b2db      	uxtb	r3, r3
    4caa:	f003 031f 	and.w	r3, r3, #31
    4cae:	b2da      	uxtb	r2, r3
    4cb0:	4b03      	ldr	r3, [pc, #12]	; (4cc0 <getSpllConfig+0xac>)
    4cb2:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4cb4:	9b00      	ldr	r3, [sp, #0]
}
    4cb6:	4618      	mov	r0, r3
    4cb8:	b002      	add	sp, #8
    4cba:	4770      	bx	lr
    4cbc:	1fff8ba8 	.word	0x1fff8ba8
    4cc0:	1fff8c34 	.word	0x1fff8c34
    4cc4:	40064000 	.word	0x40064000

00004cc8 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4cc8:	b086      	sub	sp, #24
    4cca:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4ccc:	2300      	movs	r3, #0
    4cce:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4cd0:	9b01      	ldr	r3, [sp, #4]
    4cd2:	2b1b      	cmp	r3, #27
    4cd4:	d00f      	beq.n	4cf6 <getSelectorConfig+0x2e>
    4cd6:	9b01      	ldr	r3, [sp, #4]
    4cd8:	2b1b      	cmp	r3, #27
    4cda:	d80f      	bhi.n	4cfc <getSelectorConfig+0x34>
    4cdc:	9b01      	ldr	r3, [sp, #4]
    4cde:	2b19      	cmp	r3, #25
    4ce0:	d003      	beq.n	4cea <getSelectorConfig+0x22>
    4ce2:	9b01      	ldr	r3, [sp, #4]
    4ce4:	2b1a      	cmp	r3, #26
    4ce6:	d003      	beq.n	4cf0 <getSelectorConfig+0x28>
    4ce8:	e008      	b.n	4cfc <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4cea:	2300      	movs	r3, #0
    4cec:	9304      	str	r3, [sp, #16]
            break;
    4cee:	e008      	b.n	4d02 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4cf0:	2301      	movs	r3, #1
    4cf2:	9304      	str	r3, [sp, #16]
            break;
    4cf4:	e005      	b.n	4d02 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4cf6:	2302      	movs	r3, #2
    4cf8:	9304      	str	r3, [sp, #16]
            break;
    4cfa:	e002      	b.n	4d02 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4cfc:	2300      	movs	r3, #0
    4cfe:	9304      	str	r3, [sp, #16]
            break;
    4d00:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4d02:	4b36      	ldr	r3, [pc, #216]	; (4ddc <getSelectorConfig+0x114>)
    4d04:	681b      	ldr	r3, [r3, #0]
    4d06:	2b00      	cmp	r3, #0
    4d08:	d01d      	beq.n	4d46 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4d0a:	2300      	movs	r3, #0
    4d0c:	9303      	str	r3, [sp, #12]
    4d0e:	e013      	b.n	4d38 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4d10:	4b32      	ldr	r3, [pc, #200]	; (4ddc <getSelectorConfig+0x114>)
    4d12:	681b      	ldr	r3, [r3, #0]
    4d14:	9a03      	ldr	r2, [sp, #12]
    4d16:	320d      	adds	r2, #13
    4d18:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4d1c:	9a01      	ldr	r2, [sp, #4]
    4d1e:	429a      	cmp	r2, r3
    4d20:	d107      	bne.n	4d32 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4d22:	4b2e      	ldr	r3, [pc, #184]	; (4ddc <getSelectorConfig+0x114>)
    4d24:	681a      	ldr	r2, [r3, #0]
    4d26:	9b03      	ldr	r3, [sp, #12]
    4d28:	330d      	adds	r3, #13
    4d2a:	00db      	lsls	r3, r3, #3
    4d2c:	4413      	add	r3, r2
    4d2e:	9305      	str	r3, [sp, #20]
                break;
    4d30:	e009      	b.n	4d46 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4d32:	9b03      	ldr	r3, [sp, #12]
    4d34:	3301      	adds	r3, #1
    4d36:	9303      	str	r3, [sp, #12]
    4d38:	4b28      	ldr	r3, [pc, #160]	; (4ddc <getSelectorConfig+0x114>)
    4d3a:	681b      	ldr	r3, [r3, #0]
    4d3c:	7adb      	ldrb	r3, [r3, #11]
    4d3e:	461a      	mov	r2, r3
    4d40:	9b03      	ldr	r3, [sp, #12]
    4d42:	4293      	cmp	r3, r2
    4d44:	d3e4      	bcc.n	4d10 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4d46:	9b05      	ldr	r3, [sp, #20]
    4d48:	2b00      	cmp	r3, #0
    4d4a:	d140      	bne.n	4dce <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4d4c:	9b04      	ldr	r3, [sp, #16]
    4d4e:	00db      	lsls	r3, r3, #3
    4d50:	4a23      	ldr	r2, [pc, #140]	; (4de0 <getSelectorConfig+0x118>)
    4d52:	4413      	add	r3, r2
    4d54:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4d56:	4922      	ldr	r1, [pc, #136]	; (4de0 <getSelectorConfig+0x118>)
    4d58:	9b04      	ldr	r3, [sp, #16]
    4d5a:	9a01      	ldr	r2, [sp, #4]
    4d5c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4d60:	9b01      	ldr	r3, [sp, #4]
    4d62:	2b1b      	cmp	r3, #27
    4d64:	d025      	beq.n	4db2 <getSelectorConfig+0xea>
    4d66:	9b01      	ldr	r3, [sp, #4]
    4d68:	2b1b      	cmp	r3, #27
    4d6a:	d832      	bhi.n	4dd2 <getSelectorConfig+0x10a>
    4d6c:	9b01      	ldr	r3, [sp, #4]
    4d6e:	2b19      	cmp	r3, #25
    4d70:	d003      	beq.n	4d7a <getSelectorConfig+0xb2>
    4d72:	9b01      	ldr	r3, [sp, #4]
    4d74:	2b1a      	cmp	r3, #26
    4d76:	d00e      	beq.n	4d96 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4d78:	e02b      	b.n	4dd2 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4d7a:	4b1a      	ldr	r3, [pc, #104]	; (4de4 <getSelectorConfig+0x11c>)
    4d7c:	695b      	ldr	r3, [r3, #20]
    4d7e:	0e1b      	lsrs	r3, r3, #24
    4d80:	f003 030f 	and.w	r3, r3, #15
    4d84:	4a18      	ldr	r2, [pc, #96]	; (4de8 <getSelectorConfig+0x120>)
    4d86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4d8a:	4915      	ldr	r1, [pc, #84]	; (4de0 <getSelectorConfig+0x118>)
    4d8c:	9b04      	ldr	r3, [sp, #16]
    4d8e:	00db      	lsls	r3, r3, #3
    4d90:	440b      	add	r3, r1
    4d92:	605a      	str	r2, [r3, #4]
                break;
    4d94:	e01e      	b.n	4dd4 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4d96:	4b13      	ldr	r3, [pc, #76]	; (4de4 <getSelectorConfig+0x11c>)
    4d98:	699b      	ldr	r3, [r3, #24]
    4d9a:	0e1b      	lsrs	r3, r3, #24
    4d9c:	f003 030f 	and.w	r3, r3, #15
    4da0:	4a11      	ldr	r2, [pc, #68]	; (4de8 <getSelectorConfig+0x120>)
    4da2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4da6:	490e      	ldr	r1, [pc, #56]	; (4de0 <getSelectorConfig+0x118>)
    4da8:	9b04      	ldr	r3, [sp, #16]
    4daa:	00db      	lsls	r3, r3, #3
    4dac:	440b      	add	r3, r1
    4dae:	605a      	str	r2, [r3, #4]
                break;
    4db0:	e010      	b.n	4dd4 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4db2:	4b0c      	ldr	r3, [pc, #48]	; (4de4 <getSelectorConfig+0x11c>)
    4db4:	69db      	ldr	r3, [r3, #28]
    4db6:	0e1b      	lsrs	r3, r3, #24
    4db8:	f003 030f 	and.w	r3, r3, #15
    4dbc:	4a0a      	ldr	r2, [pc, #40]	; (4de8 <getSelectorConfig+0x120>)
    4dbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4dc2:	4907      	ldr	r1, [pc, #28]	; (4de0 <getSelectorConfig+0x118>)
    4dc4:	9b04      	ldr	r3, [sp, #16]
    4dc6:	00db      	lsls	r3, r3, #3
    4dc8:	440b      	add	r3, r1
    4dca:	605a      	str	r2, [r3, #4]
                break;
    4dcc:	e002      	b.n	4dd4 <getSelectorConfig+0x10c>
        }
    }
    4dce:	bf00      	nop
    4dd0:	e000      	b.n	4dd4 <getSelectorConfig+0x10c>
                break;
    4dd2:	bf00      	nop

    return ReturnValue;
    4dd4:	9b05      	ldr	r3, [sp, #20]
}
    4dd6:	4618      	mov	r0, r3
    4dd8:	b006      	add	sp, #24
    4dda:	4770      	bx	lr
    4ddc:	1fff8ba8 	.word	0x1fff8ba8
    4de0:	1fff8c5c 	.word	0x1fff8c5c
    4de4:	40064000 	.word	0x40064000
    4de8:	0000ad4c 	.word	0x0000ad4c

00004dec <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4dec:	b086      	sub	sp, #24
    4dee:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4df0:	2300      	movs	r3, #0
    4df2:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4df4:	2300      	movs	r3, #0
    4df6:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4df8:	9b01      	ldr	r3, [sp, #4]
    4dfa:	2b1f      	cmp	r3, #31
    4dfc:	d00f      	beq.n	4e1e <getCoreDividerConfig+0x32>
    4dfe:	9b01      	ldr	r3, [sp, #4]
    4e00:	2b1f      	cmp	r3, #31
    4e02:	d80f      	bhi.n	4e24 <getCoreDividerConfig+0x38>
    4e04:	9b01      	ldr	r3, [sp, #4]
    4e06:	2b1d      	cmp	r3, #29
    4e08:	d003      	beq.n	4e12 <getCoreDividerConfig+0x26>
    4e0a:	9b01      	ldr	r3, [sp, #4]
    4e0c:	2b1e      	cmp	r3, #30
    4e0e:	d003      	beq.n	4e18 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4e10:	e008      	b.n	4e24 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4e12:	2300      	movs	r3, #0
    4e14:	9304      	str	r3, [sp, #16]
            break;
    4e16:	e006      	b.n	4e26 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4e18:	2301      	movs	r3, #1
    4e1a:	9304      	str	r3, [sp, #16]
            break;
    4e1c:	e003      	b.n	4e26 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4e1e:	2302      	movs	r3, #2
    4e20:	9304      	str	r3, [sp, #16]
            break;
    4e22:	e000      	b.n	4e26 <getCoreDividerConfig+0x3a>
                break;
    4e24:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4e26:	4b41      	ldr	r3, [pc, #260]	; (4f2c <getCoreDividerConfig+0x140>)
    4e28:	681b      	ldr	r3, [r3, #0]
    4e2a:	2b00      	cmp	r3, #0
    4e2c:	d026      	beq.n	4e7c <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e2e:	2300      	movs	r3, #0
    4e30:	9303      	str	r3, [sp, #12]
    4e32:	e01c      	b.n	4e6e <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4e34:	4b3d      	ldr	r3, [pc, #244]	; (4f2c <getCoreDividerConfig+0x140>)
    4e36:	6819      	ldr	r1, [r3, #0]
    4e38:	9a03      	ldr	r2, [sp, #12]
    4e3a:	4613      	mov	r3, r2
    4e3c:	005b      	lsls	r3, r3, #1
    4e3e:	4413      	add	r3, r2
    4e40:	009b      	lsls	r3, r3, #2
    4e42:	440b      	add	r3, r1
    4e44:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e48:	681b      	ldr	r3, [r3, #0]
    4e4a:	9a01      	ldr	r2, [sp, #4]
    4e4c:	429a      	cmp	r2, r3
    4e4e:	d10b      	bne.n	4e68 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4e50:	4b36      	ldr	r3, [pc, #216]	; (4f2c <getCoreDividerConfig+0x140>)
    4e52:	6819      	ldr	r1, [r3, #0]
    4e54:	9a03      	ldr	r2, [sp, #12]
    4e56:	4613      	mov	r3, r2
    4e58:	005b      	lsls	r3, r3, #1
    4e5a:	4413      	add	r3, r2
    4e5c:	009b      	lsls	r3, r3, #2
    4e5e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e62:	440b      	add	r3, r1
    4e64:	9305      	str	r3, [sp, #20]
                break;
    4e66:	e009      	b.n	4e7c <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e68:	9b03      	ldr	r3, [sp, #12]
    4e6a:	3301      	adds	r3, #1
    4e6c:	9303      	str	r3, [sp, #12]
    4e6e:	4b2f      	ldr	r3, [pc, #188]	; (4f2c <getCoreDividerConfig+0x140>)
    4e70:	681b      	ldr	r3, [r3, #0]
    4e72:	7b1b      	ldrb	r3, [r3, #12]
    4e74:	461a      	mov	r2, r3
    4e76:	9b03      	ldr	r3, [sp, #12]
    4e78:	4293      	cmp	r3, r2
    4e7a:	d3db      	bcc.n	4e34 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4e7c:	9b05      	ldr	r3, [sp, #20]
    4e7e:	2b00      	cmp	r3, #0
    4e80:	d14d      	bne.n	4f1e <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4e82:	9a04      	ldr	r2, [sp, #16]
    4e84:	4613      	mov	r3, r2
    4e86:	005b      	lsls	r3, r3, #1
    4e88:	4413      	add	r3, r2
    4e8a:	009b      	lsls	r3, r3, #2
    4e8c:	4a28      	ldr	r2, [pc, #160]	; (4f30 <getCoreDividerConfig+0x144>)
    4e8e:	4413      	add	r3, r2
    4e90:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4e92:	4927      	ldr	r1, [pc, #156]	; (4f30 <getCoreDividerConfig+0x144>)
    4e94:	9a04      	ldr	r2, [sp, #16]
    4e96:	4613      	mov	r3, r2
    4e98:	005b      	lsls	r3, r3, #1
    4e9a:	4413      	add	r3, r2
    4e9c:	009b      	lsls	r3, r3, #2
    4e9e:	440b      	add	r3, r1
    4ea0:	9a01      	ldr	r2, [sp, #4]
    4ea2:	601a      	str	r2, [r3, #0]
        switch(Name)
    4ea4:	9b01      	ldr	r3, [sp, #4]
    4ea6:	2b1f      	cmp	r3, #31
    4ea8:	d029      	beq.n	4efe <getCoreDividerConfig+0x112>
    4eaa:	9b01      	ldr	r3, [sp, #4]
    4eac:	2b1f      	cmp	r3, #31
    4eae:	d838      	bhi.n	4f22 <getCoreDividerConfig+0x136>
    4eb0:	9b01      	ldr	r3, [sp, #4]
    4eb2:	2b1d      	cmp	r3, #29
    4eb4:	d003      	beq.n	4ebe <getCoreDividerConfig+0xd2>
    4eb6:	9b01      	ldr	r3, [sp, #4]
    4eb8:	2b1e      	cmp	r3, #30
    4eba:	d010      	beq.n	4ede <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4ebc:	e031      	b.n	4f22 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4ebe:	4b1d      	ldr	r3, [pc, #116]	; (4f34 <getCoreDividerConfig+0x148>)
    4ec0:	695b      	ldr	r3, [r3, #20]
    4ec2:	0c1b      	lsrs	r3, r3, #16
    4ec4:	f003 030f 	and.w	r3, r3, #15
    4ec8:	1c59      	adds	r1, r3, #1
    4eca:	4819      	ldr	r0, [pc, #100]	; (4f30 <getCoreDividerConfig+0x144>)
    4ecc:	9a04      	ldr	r2, [sp, #16]
    4ece:	4613      	mov	r3, r2
    4ed0:	005b      	lsls	r3, r3, #1
    4ed2:	4413      	add	r3, r2
    4ed4:	009b      	lsls	r3, r3, #2
    4ed6:	4403      	add	r3, r0
    4ed8:	3304      	adds	r3, #4
    4eda:	6019      	str	r1, [r3, #0]
                break;
    4edc:	e022      	b.n	4f24 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4ede:	4b15      	ldr	r3, [pc, #84]	; (4f34 <getCoreDividerConfig+0x148>)
    4ee0:	699b      	ldr	r3, [r3, #24]
    4ee2:	0c1b      	lsrs	r3, r3, #16
    4ee4:	f003 030f 	and.w	r3, r3, #15
    4ee8:	1c59      	adds	r1, r3, #1
    4eea:	4811      	ldr	r0, [pc, #68]	; (4f30 <getCoreDividerConfig+0x144>)
    4eec:	9a04      	ldr	r2, [sp, #16]
    4eee:	4613      	mov	r3, r2
    4ef0:	005b      	lsls	r3, r3, #1
    4ef2:	4413      	add	r3, r2
    4ef4:	009b      	lsls	r3, r3, #2
    4ef6:	4403      	add	r3, r0
    4ef8:	3304      	adds	r3, #4
    4efa:	6019      	str	r1, [r3, #0]
                break;
    4efc:	e012      	b.n	4f24 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4efe:	4b0d      	ldr	r3, [pc, #52]	; (4f34 <getCoreDividerConfig+0x148>)
    4f00:	69db      	ldr	r3, [r3, #28]
    4f02:	0c1b      	lsrs	r3, r3, #16
    4f04:	f003 030f 	and.w	r3, r3, #15
    4f08:	1c59      	adds	r1, r3, #1
    4f0a:	4809      	ldr	r0, [pc, #36]	; (4f30 <getCoreDividerConfig+0x144>)
    4f0c:	9a04      	ldr	r2, [sp, #16]
    4f0e:	4613      	mov	r3, r2
    4f10:	005b      	lsls	r3, r3, #1
    4f12:	4413      	add	r3, r2
    4f14:	009b      	lsls	r3, r3, #2
    4f16:	4403      	add	r3, r0
    4f18:	3304      	adds	r3, #4
    4f1a:	6019      	str	r1, [r3, #0]
                break;
    4f1c:	e002      	b.n	4f24 <getCoreDividerConfig+0x138>
        }
    }
    4f1e:	bf00      	nop
    4f20:	e000      	b.n	4f24 <getCoreDividerConfig+0x138>
                break;
    4f22:	bf00      	nop

    return ReturnValue;
    4f24:	9b05      	ldr	r3, [sp, #20]
}
    4f26:	4618      	mov	r0, r3
    4f28:	b006      	add	sp, #24
    4f2a:	4770      	bx	lr
    4f2c:	1fff8ba8 	.word	0x1fff8ba8
    4f30:	1fff8c74 	.word	0x1fff8c74
    4f34:	40064000 	.word	0x40064000

00004f38 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4f38:	b086      	sub	sp, #24
    4f3a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4f3c:	2300      	movs	r3, #0
    4f3e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4f40:	2300      	movs	r3, #0
    4f42:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4f44:	9b01      	ldr	r3, [sp, #4]
    4f46:	2b23      	cmp	r3, #35	; 0x23
    4f48:	d00f      	beq.n	4f6a <getBusDividerConfig+0x32>
    4f4a:	9b01      	ldr	r3, [sp, #4]
    4f4c:	2b23      	cmp	r3, #35	; 0x23
    4f4e:	d80f      	bhi.n	4f70 <getBusDividerConfig+0x38>
    4f50:	9b01      	ldr	r3, [sp, #4]
    4f52:	2b21      	cmp	r3, #33	; 0x21
    4f54:	d003      	beq.n	4f5e <getBusDividerConfig+0x26>
    4f56:	9b01      	ldr	r3, [sp, #4]
    4f58:	2b22      	cmp	r3, #34	; 0x22
    4f5a:	d003      	beq.n	4f64 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4f5c:	e008      	b.n	4f70 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4f5e:	2300      	movs	r3, #0
    4f60:	9304      	str	r3, [sp, #16]
            break;
    4f62:	e006      	b.n	4f72 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4f64:	2301      	movs	r3, #1
    4f66:	9304      	str	r3, [sp, #16]
            break;
    4f68:	e003      	b.n	4f72 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4f6a:	2302      	movs	r3, #2
    4f6c:	9304      	str	r3, [sp, #16]
            break;
    4f6e:	e000      	b.n	4f72 <getBusDividerConfig+0x3a>
                break;
    4f70:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4f72:	4b41      	ldr	r3, [pc, #260]	; (5078 <getBusDividerConfig+0x140>)
    4f74:	681b      	ldr	r3, [r3, #0]
    4f76:	2b00      	cmp	r3, #0
    4f78:	d026      	beq.n	4fc8 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4f7a:	2300      	movs	r3, #0
    4f7c:	9303      	str	r3, [sp, #12]
    4f7e:	e01c      	b.n	4fba <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4f80:	4b3d      	ldr	r3, [pc, #244]	; (5078 <getBusDividerConfig+0x140>)
    4f82:	6819      	ldr	r1, [r3, #0]
    4f84:	9a03      	ldr	r2, [sp, #12]
    4f86:	4613      	mov	r3, r2
    4f88:	005b      	lsls	r3, r3, #1
    4f8a:	4413      	add	r3, r2
    4f8c:	009b      	lsls	r3, r3, #2
    4f8e:	440b      	add	r3, r1
    4f90:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4f94:	681b      	ldr	r3, [r3, #0]
    4f96:	9a01      	ldr	r2, [sp, #4]
    4f98:	429a      	cmp	r2, r3
    4f9a:	d10b      	bne.n	4fb4 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4f9c:	4b36      	ldr	r3, [pc, #216]	; (5078 <getBusDividerConfig+0x140>)
    4f9e:	6819      	ldr	r1, [r3, #0]
    4fa0:	9a03      	ldr	r2, [sp, #12]
    4fa2:	4613      	mov	r3, r2
    4fa4:	005b      	lsls	r3, r3, #1
    4fa6:	4413      	add	r3, r2
    4fa8:	009b      	lsls	r3, r3, #2
    4faa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4fae:	440b      	add	r3, r1
    4fb0:	9305      	str	r3, [sp, #20]
                break;
    4fb2:	e009      	b.n	4fc8 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4fb4:	9b03      	ldr	r3, [sp, #12]
    4fb6:	3301      	adds	r3, #1
    4fb8:	9303      	str	r3, [sp, #12]
    4fba:	4b2f      	ldr	r3, [pc, #188]	; (5078 <getBusDividerConfig+0x140>)
    4fbc:	681b      	ldr	r3, [r3, #0]
    4fbe:	7b1b      	ldrb	r3, [r3, #12]
    4fc0:	461a      	mov	r2, r3
    4fc2:	9b03      	ldr	r3, [sp, #12]
    4fc4:	4293      	cmp	r3, r2
    4fc6:	d3db      	bcc.n	4f80 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4fc8:	9b05      	ldr	r3, [sp, #20]
    4fca:	2b00      	cmp	r3, #0
    4fcc:	d14d      	bne.n	506a <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4fce:	9a04      	ldr	r2, [sp, #16]
    4fd0:	4613      	mov	r3, r2
    4fd2:	005b      	lsls	r3, r3, #1
    4fd4:	4413      	add	r3, r2
    4fd6:	009b      	lsls	r3, r3, #2
    4fd8:	4a28      	ldr	r2, [pc, #160]	; (507c <getBusDividerConfig+0x144>)
    4fda:	4413      	add	r3, r2
    4fdc:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    4fde:	4927      	ldr	r1, [pc, #156]	; (507c <getBusDividerConfig+0x144>)
    4fe0:	9a04      	ldr	r2, [sp, #16]
    4fe2:	4613      	mov	r3, r2
    4fe4:	005b      	lsls	r3, r3, #1
    4fe6:	4413      	add	r3, r2
    4fe8:	009b      	lsls	r3, r3, #2
    4fea:	440b      	add	r3, r1
    4fec:	9a01      	ldr	r2, [sp, #4]
    4fee:	601a      	str	r2, [r3, #0]
        switch(Name)
    4ff0:	9b01      	ldr	r3, [sp, #4]
    4ff2:	2b23      	cmp	r3, #35	; 0x23
    4ff4:	d029      	beq.n	504a <getBusDividerConfig+0x112>
    4ff6:	9b01      	ldr	r3, [sp, #4]
    4ff8:	2b23      	cmp	r3, #35	; 0x23
    4ffa:	d838      	bhi.n	506e <getBusDividerConfig+0x136>
    4ffc:	9b01      	ldr	r3, [sp, #4]
    4ffe:	2b21      	cmp	r3, #33	; 0x21
    5000:	d003      	beq.n	500a <getBusDividerConfig+0xd2>
    5002:	9b01      	ldr	r3, [sp, #4]
    5004:	2b22      	cmp	r3, #34	; 0x22
    5006:	d010      	beq.n	502a <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5008:	e031      	b.n	506e <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    500a:	4b1d      	ldr	r3, [pc, #116]	; (5080 <getBusDividerConfig+0x148>)
    500c:	695b      	ldr	r3, [r3, #20]
    500e:	091b      	lsrs	r3, r3, #4
    5010:	f003 030f 	and.w	r3, r3, #15
    5014:	1c59      	adds	r1, r3, #1
    5016:	4819      	ldr	r0, [pc, #100]	; (507c <getBusDividerConfig+0x144>)
    5018:	9a04      	ldr	r2, [sp, #16]
    501a:	4613      	mov	r3, r2
    501c:	005b      	lsls	r3, r3, #1
    501e:	4413      	add	r3, r2
    5020:	009b      	lsls	r3, r3, #2
    5022:	4403      	add	r3, r0
    5024:	3304      	adds	r3, #4
    5026:	6019      	str	r1, [r3, #0]
                break;
    5028:	e022      	b.n	5070 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    502a:	4b15      	ldr	r3, [pc, #84]	; (5080 <getBusDividerConfig+0x148>)
    502c:	699b      	ldr	r3, [r3, #24]
    502e:	091b      	lsrs	r3, r3, #4
    5030:	f003 030f 	and.w	r3, r3, #15
    5034:	1c59      	adds	r1, r3, #1
    5036:	4811      	ldr	r0, [pc, #68]	; (507c <getBusDividerConfig+0x144>)
    5038:	9a04      	ldr	r2, [sp, #16]
    503a:	4613      	mov	r3, r2
    503c:	005b      	lsls	r3, r3, #1
    503e:	4413      	add	r3, r2
    5040:	009b      	lsls	r3, r3, #2
    5042:	4403      	add	r3, r0
    5044:	3304      	adds	r3, #4
    5046:	6019      	str	r1, [r3, #0]
                break;
    5048:	e012      	b.n	5070 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    504a:	4b0d      	ldr	r3, [pc, #52]	; (5080 <getBusDividerConfig+0x148>)
    504c:	69db      	ldr	r3, [r3, #28]
    504e:	091b      	lsrs	r3, r3, #4
    5050:	f003 030f 	and.w	r3, r3, #15
    5054:	1c59      	adds	r1, r3, #1
    5056:	4809      	ldr	r0, [pc, #36]	; (507c <getBusDividerConfig+0x144>)
    5058:	9a04      	ldr	r2, [sp, #16]
    505a:	4613      	mov	r3, r2
    505c:	005b      	lsls	r3, r3, #1
    505e:	4413      	add	r3, r2
    5060:	009b      	lsls	r3, r3, #2
    5062:	4403      	add	r3, r0
    5064:	3304      	adds	r3, #4
    5066:	6019      	str	r1, [r3, #0]
                break;
    5068:	e002      	b.n	5070 <getBusDividerConfig+0x138>
        }
    }
    506a:	bf00      	nop
    506c:	e000      	b.n	5070 <getBusDividerConfig+0x138>
                break;
    506e:	bf00      	nop

    return ReturnValue;
    5070:	9b05      	ldr	r3, [sp, #20]
}
    5072:	4618      	mov	r0, r3
    5074:	b006      	add	sp, #24
    5076:	4770      	bx	lr
    5078:	1fff8ba8 	.word	0x1fff8ba8
    507c:	1fff8c98 	.word	0x1fff8c98
    5080:	40064000 	.word	0x40064000

00005084 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5084:	b086      	sub	sp, #24
    5086:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5088:	2300      	movs	r3, #0
    508a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    508c:	2300      	movs	r3, #0
    508e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5090:	9b01      	ldr	r3, [sp, #4]
    5092:	2b27      	cmp	r3, #39	; 0x27
    5094:	d00f      	beq.n	50b6 <getSlowDividerConfig+0x32>
    5096:	9b01      	ldr	r3, [sp, #4]
    5098:	2b27      	cmp	r3, #39	; 0x27
    509a:	d80f      	bhi.n	50bc <getSlowDividerConfig+0x38>
    509c:	9b01      	ldr	r3, [sp, #4]
    509e:	2b25      	cmp	r3, #37	; 0x25
    50a0:	d003      	beq.n	50aa <getSlowDividerConfig+0x26>
    50a2:	9b01      	ldr	r3, [sp, #4]
    50a4:	2b26      	cmp	r3, #38	; 0x26
    50a6:	d003      	beq.n	50b0 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    50a8:	e008      	b.n	50bc <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    50aa:	2300      	movs	r3, #0
    50ac:	9304      	str	r3, [sp, #16]
            break;
    50ae:	e006      	b.n	50be <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    50b0:	2301      	movs	r3, #1
    50b2:	9304      	str	r3, [sp, #16]
            break;
    50b4:	e003      	b.n	50be <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    50b6:	2302      	movs	r3, #2
    50b8:	9304      	str	r3, [sp, #16]
            break;
    50ba:	e000      	b.n	50be <getSlowDividerConfig+0x3a>
                break;
    50bc:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    50be:	4b40      	ldr	r3, [pc, #256]	; (51c0 <getSlowDividerConfig+0x13c>)
    50c0:	681b      	ldr	r3, [r3, #0]
    50c2:	2b00      	cmp	r3, #0
    50c4:	d026      	beq.n	5114 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    50c6:	2300      	movs	r3, #0
    50c8:	9303      	str	r3, [sp, #12]
    50ca:	e01c      	b.n	5106 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    50cc:	4b3c      	ldr	r3, [pc, #240]	; (51c0 <getSlowDividerConfig+0x13c>)
    50ce:	6819      	ldr	r1, [r3, #0]
    50d0:	9a03      	ldr	r2, [sp, #12]
    50d2:	4613      	mov	r3, r2
    50d4:	005b      	lsls	r3, r3, #1
    50d6:	4413      	add	r3, r2
    50d8:	009b      	lsls	r3, r3, #2
    50da:	440b      	add	r3, r1
    50dc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    50e0:	681b      	ldr	r3, [r3, #0]
    50e2:	9a01      	ldr	r2, [sp, #4]
    50e4:	429a      	cmp	r2, r3
    50e6:	d10b      	bne.n	5100 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    50e8:	4b35      	ldr	r3, [pc, #212]	; (51c0 <getSlowDividerConfig+0x13c>)
    50ea:	6819      	ldr	r1, [r3, #0]
    50ec:	9a03      	ldr	r2, [sp, #12]
    50ee:	4613      	mov	r3, r2
    50f0:	005b      	lsls	r3, r3, #1
    50f2:	4413      	add	r3, r2
    50f4:	009b      	lsls	r3, r3, #2
    50f6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    50fa:	440b      	add	r3, r1
    50fc:	9305      	str	r3, [sp, #20]
                break;
    50fe:	e009      	b.n	5114 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5100:	9b03      	ldr	r3, [sp, #12]
    5102:	3301      	adds	r3, #1
    5104:	9303      	str	r3, [sp, #12]
    5106:	4b2e      	ldr	r3, [pc, #184]	; (51c0 <getSlowDividerConfig+0x13c>)
    5108:	681b      	ldr	r3, [r3, #0]
    510a:	7b1b      	ldrb	r3, [r3, #12]
    510c:	461a      	mov	r2, r3
    510e:	9b03      	ldr	r3, [sp, #12]
    5110:	4293      	cmp	r3, r2
    5112:	d3db      	bcc.n	50cc <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5114:	9b05      	ldr	r3, [sp, #20]
    5116:	2b00      	cmp	r3, #0
    5118:	d14a      	bne.n	51b0 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    511a:	9a04      	ldr	r2, [sp, #16]
    511c:	4613      	mov	r3, r2
    511e:	005b      	lsls	r3, r3, #1
    5120:	4413      	add	r3, r2
    5122:	009b      	lsls	r3, r3, #2
    5124:	4a27      	ldr	r2, [pc, #156]	; (51c4 <getSlowDividerConfig+0x140>)
    5126:	4413      	add	r3, r2
    5128:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    512a:	4926      	ldr	r1, [pc, #152]	; (51c4 <getSlowDividerConfig+0x140>)
    512c:	9a04      	ldr	r2, [sp, #16]
    512e:	4613      	mov	r3, r2
    5130:	005b      	lsls	r3, r3, #1
    5132:	4413      	add	r3, r2
    5134:	009b      	lsls	r3, r3, #2
    5136:	440b      	add	r3, r1
    5138:	9a01      	ldr	r2, [sp, #4]
    513a:	601a      	str	r2, [r3, #0]
        switch(Name)
    513c:	9b01      	ldr	r3, [sp, #4]
    513e:	2b27      	cmp	r3, #39	; 0x27
    5140:	d027      	beq.n	5192 <getSlowDividerConfig+0x10e>
    5142:	9b01      	ldr	r3, [sp, #4]
    5144:	2b27      	cmp	r3, #39	; 0x27
    5146:	d835      	bhi.n	51b4 <getSlowDividerConfig+0x130>
    5148:	9b01      	ldr	r3, [sp, #4]
    514a:	2b25      	cmp	r3, #37	; 0x25
    514c:	d003      	beq.n	5156 <getSlowDividerConfig+0xd2>
    514e:	9b01      	ldr	r3, [sp, #4]
    5150:	2b26      	cmp	r3, #38	; 0x26
    5152:	d00f      	beq.n	5174 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5154:	e02e      	b.n	51b4 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    5156:	4b1c      	ldr	r3, [pc, #112]	; (51c8 <getSlowDividerConfig+0x144>)
    5158:	695b      	ldr	r3, [r3, #20]
    515a:	f003 030f 	and.w	r3, r3, #15
    515e:	1c59      	adds	r1, r3, #1
    5160:	4818      	ldr	r0, [pc, #96]	; (51c4 <getSlowDividerConfig+0x140>)
    5162:	9a04      	ldr	r2, [sp, #16]
    5164:	4613      	mov	r3, r2
    5166:	005b      	lsls	r3, r3, #1
    5168:	4413      	add	r3, r2
    516a:	009b      	lsls	r3, r3, #2
    516c:	4403      	add	r3, r0
    516e:	3304      	adds	r3, #4
    5170:	6019      	str	r1, [r3, #0]
                break;
    5172:	e020      	b.n	51b6 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5174:	4b14      	ldr	r3, [pc, #80]	; (51c8 <getSlowDividerConfig+0x144>)
    5176:	699b      	ldr	r3, [r3, #24]
    5178:	f003 030f 	and.w	r3, r3, #15
    517c:	1c59      	adds	r1, r3, #1
    517e:	4811      	ldr	r0, [pc, #68]	; (51c4 <getSlowDividerConfig+0x140>)
    5180:	9a04      	ldr	r2, [sp, #16]
    5182:	4613      	mov	r3, r2
    5184:	005b      	lsls	r3, r3, #1
    5186:	4413      	add	r3, r2
    5188:	009b      	lsls	r3, r3, #2
    518a:	4403      	add	r3, r0
    518c:	3304      	adds	r3, #4
    518e:	6019      	str	r1, [r3, #0]
                break;
    5190:	e011      	b.n	51b6 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    5192:	4b0d      	ldr	r3, [pc, #52]	; (51c8 <getSlowDividerConfig+0x144>)
    5194:	69db      	ldr	r3, [r3, #28]
    5196:	f003 030f 	and.w	r3, r3, #15
    519a:	1c59      	adds	r1, r3, #1
    519c:	4809      	ldr	r0, [pc, #36]	; (51c4 <getSlowDividerConfig+0x140>)
    519e:	9a04      	ldr	r2, [sp, #16]
    51a0:	4613      	mov	r3, r2
    51a2:	005b      	lsls	r3, r3, #1
    51a4:	4413      	add	r3, r2
    51a6:	009b      	lsls	r3, r3, #2
    51a8:	4403      	add	r3, r0
    51aa:	3304      	adds	r3, #4
    51ac:	6019      	str	r1, [r3, #0]
                break;
    51ae:	e002      	b.n	51b6 <getSlowDividerConfig+0x132>
        }
    }
    51b0:	bf00      	nop
    51b2:	e000      	b.n	51b6 <getSlowDividerConfig+0x132>
                break;
    51b4:	bf00      	nop

    return ReturnValue;
    51b6:	9b05      	ldr	r3, [sp, #20]
}
    51b8:	4618      	mov	r0, r3
    51ba:	b006      	add	sp, #24
    51bc:	4770      	bx	lr
    51be:	bf00      	nop
    51c0:	1fff8ba8 	.word	0x1fff8ba8
    51c4:	1fff8cbc 	.word	0x1fff8cbc
    51c8:	40064000 	.word	0x40064000

000051cc <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    51cc:	b500      	push	{lr}
    51ce:	b083      	sub	sp, #12
    51d0:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    51d2:	4b64      	ldr	r3, [pc, #400]	; (5364 <Clock_Ip_ClockInitializeObjects+0x198>)
    51d4:	781b      	ldrb	r3, [r3, #0]
    51d6:	f083 0301 	eor.w	r3, r3, #1
    51da:	b2db      	uxtb	r3, r3
    51dc:	2b00      	cmp	r3, #0
    51de:	d05b      	beq.n	5298 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    51e0:	4b60      	ldr	r3, [pc, #384]	; (5364 <Clock_Ip_ClockInitializeObjects+0x198>)
    51e2:	2201      	movs	r2, #1
    51e4:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    51e6:	4b60      	ldr	r3, [pc, #384]	; (5368 <Clock_Ip_ClockInitializeObjects+0x19c>)
    51e8:	785b      	ldrb	r3, [r3, #1]
    51ea:	461a      	mov	r2, r3
    51ec:	4613      	mov	r3, r2
    51ee:	009b      	lsls	r3, r3, #2
    51f0:	4413      	add	r3, r2
    51f2:	009b      	lsls	r3, r3, #2
    51f4:	4a5d      	ldr	r2, [pc, #372]	; (536c <Clock_Ip_ClockInitializeObjects+0x1a0>)
    51f6:	4413      	add	r3, r2
    51f8:	4a5d      	ldr	r2, [pc, #372]	; (5370 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    51fa:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    51fc:	4b5d      	ldr	r3, [pc, #372]	; (5374 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    51fe:	785b      	ldrb	r3, [r3, #1]
    5200:	461a      	mov	r2, r3
    5202:	4613      	mov	r3, r2
    5204:	009b      	lsls	r3, r3, #2
    5206:	4413      	add	r3, r2
    5208:	009b      	lsls	r3, r3, #2
    520a:	4a5b      	ldr	r2, [pc, #364]	; (5378 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    520c:	4413      	add	r3, r2
    520e:	4a5b      	ldr	r2, [pc, #364]	; (537c <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5210:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    5212:	4b5b      	ldr	r3, [pc, #364]	; (5380 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5214:	791b      	ldrb	r3, [r3, #4]
    5216:	461a      	mov	r2, r3
    5218:	4613      	mov	r3, r2
    521a:	005b      	lsls	r3, r3, #1
    521c:	4413      	add	r3, r2
    521e:	009b      	lsls	r3, r3, #2
    5220:	4a58      	ldr	r2, [pc, #352]	; (5384 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    5222:	4413      	add	r3, r2
    5224:	4a58      	ldr	r2, [pc, #352]	; (5388 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    5226:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5228:	4b58      	ldr	r3, [pc, #352]	; (538c <Clock_Ip_ClockInitializeObjects+0x1c0>)
    522a:	795b      	ldrb	r3, [r3, #5]
    522c:	00db      	lsls	r3, r3, #3
    522e:	4a58      	ldr	r2, [pc, #352]	; (5390 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5230:	4413      	add	r3, r2
    5232:	4a58      	ldr	r2, [pc, #352]	; (5394 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    5234:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    5236:	4b55      	ldr	r3, [pc, #340]	; (538c <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5238:	79db      	ldrb	r3, [r3, #7]
    523a:	00db      	lsls	r3, r3, #3
    523c:	4a54      	ldr	r2, [pc, #336]	; (5390 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    523e:	4413      	add	r3, r2
    5240:	4a55      	ldr	r2, [pc, #340]	; (5398 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    5242:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    5244:	4b55      	ldr	r3, [pc, #340]	; (539c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5246:	799b      	ldrb	r3, [r3, #6]
    5248:	009b      	lsls	r3, r3, #2
    524a:	4a55      	ldr	r2, [pc, #340]	; (53a0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    524c:	4413      	add	r3, r2
    524e:	4a55      	ldr	r2, [pc, #340]	; (53a4 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5250:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    5252:	4b52      	ldr	r3, [pc, #328]	; (539c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5254:	7a1b      	ldrb	r3, [r3, #8]
    5256:	009b      	lsls	r3, r3, #2
    5258:	4a51      	ldr	r2, [pc, #324]	; (53a0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    525a:	4413      	add	r3, r2
    525c:	4a52      	ldr	r2, [pc, #328]	; (53a8 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    525e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    5260:	4b4e      	ldr	r3, [pc, #312]	; (539c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5262:	7a5b      	ldrb	r3, [r3, #9]
    5264:	009b      	lsls	r3, r3, #2
    5266:	4a4e      	ldr	r2, [pc, #312]	; (53a0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5268:	4413      	add	r3, r2
    526a:	4a50      	ldr	r2, [pc, #320]	; (53ac <Clock_Ip_ClockInitializeObjects+0x1e0>)
    526c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    526e:	4b4b      	ldr	r3, [pc, #300]	; (539c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5270:	7adb      	ldrb	r3, [r3, #11]
    5272:	009b      	lsls	r3, r3, #2
    5274:	4a4a      	ldr	r2, [pc, #296]	; (53a0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5276:	4413      	add	r3, r2
    5278:	4a4d      	ldr	r2, [pc, #308]	; (53b0 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    527a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    527c:	4b47      	ldr	r3, [pc, #284]	; (539c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    527e:	7b1b      	ldrb	r3, [r3, #12]
    5280:	009b      	lsls	r3, r3, #2
    5282:	4a47      	ldr	r2, [pc, #284]	; (53a0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5284:	4413      	add	r3, r2
    5286:	4a4b      	ldr	r2, [pc, #300]	; (53b4 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    5288:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    528a:	4b44      	ldr	r3, [pc, #272]	; (539c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    528c:	7b9b      	ldrb	r3, [r3, #14]
    528e:	009b      	lsls	r3, r3, #2
    5290:	4a43      	ldr	r2, [pc, #268]	; (53a0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5292:	4413      	add	r3, r2
    5294:	4a48      	ldr	r2, [pc, #288]	; (53b8 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    5296:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5298:	4b48      	ldr	r3, [pc, #288]	; (53bc <Clock_Ip_ClockInitializeObjects+0x1f0>)
    529a:	781b      	ldrb	r3, [r3, #0]
    529c:	2b00      	cmp	r3, #0
    529e:	d002      	beq.n	52a6 <Clock_Ip_ClockInitializeObjects+0xda>
    52a0:	9b01      	ldr	r3, [sp, #4]
    52a2:	2b00      	cmp	r3, #0
    52a4:	d003      	beq.n	52ae <Clock_Ip_ClockInitializeObjects+0xe2>
    52a6:	4b46      	ldr	r3, [pc, #280]	; (53c0 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    52a8:	781b      	ldrb	r3, [r3, #0]
    52aa:	2b00      	cmp	r3, #0
    52ac:	d056      	beq.n	535c <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    52ae:	f7ff fc09 	bl	4ac4 <getFircConfig>
    52b2:	4603      	mov	r3, r0
    52b4:	4a43      	ldr	r2, [pc, #268]	; (53c4 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    52b6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    52b8:	f7ff fc60 	bl	4b7c <getSoscConfig>
    52bc:	4603      	mov	r3, r0
    52be:	4a42      	ldr	r2, [pc, #264]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    52c0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    52c2:	f7ff fca7 	bl	4c14 <getSpllConfig>
    52c6:	4603      	mov	r3, r0
    52c8:	4a40      	ldr	r2, [pc, #256]	; (53cc <Clock_Ip_ClockInitializeObjects+0x200>)
    52ca:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    52cc:	2019      	movs	r0, #25
    52ce:	f7ff fcfb 	bl	4cc8 <getSelectorConfig>
    52d2:	4603      	mov	r3, r0
    52d4:	4a3e      	ldr	r2, [pc, #248]	; (53d0 <Clock_Ip_ClockInitializeObjects+0x204>)
    52d6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    52d8:	201a      	movs	r0, #26
    52da:	f7ff fcf5 	bl	4cc8 <getSelectorConfig>
    52de:	4603      	mov	r3, r0
    52e0:	4a3c      	ldr	r2, [pc, #240]	; (53d4 <Clock_Ip_ClockInitializeObjects+0x208>)
    52e2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    52e4:	201b      	movs	r0, #27
    52e6:	f7ff fcef 	bl	4cc8 <getSelectorConfig>
    52ea:	4603      	mov	r3, r0
    52ec:	4a3a      	ldr	r2, [pc, #232]	; (53d8 <Clock_Ip_ClockInitializeObjects+0x20c>)
    52ee:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    52f0:	201d      	movs	r0, #29
    52f2:	f7ff fd7b 	bl	4dec <getCoreDividerConfig>
    52f6:	4603      	mov	r3, r0
    52f8:	4a38      	ldr	r2, [pc, #224]	; (53dc <Clock_Ip_ClockInitializeObjects+0x210>)
    52fa:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    52fc:	201e      	movs	r0, #30
    52fe:	f7ff fd75 	bl	4dec <getCoreDividerConfig>
    5302:	4603      	mov	r3, r0
    5304:	4a36      	ldr	r2, [pc, #216]	; (53e0 <Clock_Ip_ClockInitializeObjects+0x214>)
    5306:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5308:	201f      	movs	r0, #31
    530a:	f7ff fd6f 	bl	4dec <getCoreDividerConfig>
    530e:	4603      	mov	r3, r0
    5310:	4a34      	ldr	r2, [pc, #208]	; (53e4 <Clock_Ip_ClockInitializeObjects+0x218>)
    5312:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5314:	2021      	movs	r0, #33	; 0x21
    5316:	f7ff fe0f 	bl	4f38 <getBusDividerConfig>
    531a:	4603      	mov	r3, r0
    531c:	4a32      	ldr	r2, [pc, #200]	; (53e8 <Clock_Ip_ClockInitializeObjects+0x21c>)
    531e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5320:	2022      	movs	r0, #34	; 0x22
    5322:	f7ff fe09 	bl	4f38 <getBusDividerConfig>
    5326:	4603      	mov	r3, r0
    5328:	4a30      	ldr	r2, [pc, #192]	; (53ec <Clock_Ip_ClockInitializeObjects+0x220>)
    532a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    532c:	2023      	movs	r0, #35	; 0x23
    532e:	f7ff fe03 	bl	4f38 <getBusDividerConfig>
    5332:	4603      	mov	r3, r0
    5334:	4a2e      	ldr	r2, [pc, #184]	; (53f0 <Clock_Ip_ClockInitializeObjects+0x224>)
    5336:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    5338:	2025      	movs	r0, #37	; 0x25
    533a:	f7ff fea3 	bl	5084 <getSlowDividerConfig>
    533e:	4603      	mov	r3, r0
    5340:	4a2c      	ldr	r2, [pc, #176]	; (53f4 <Clock_Ip_ClockInitializeObjects+0x228>)
    5342:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    5344:	2026      	movs	r0, #38	; 0x26
    5346:	f7ff fe9d 	bl	5084 <getSlowDividerConfig>
    534a:	4603      	mov	r3, r0
    534c:	4a2a      	ldr	r2, [pc, #168]	; (53f8 <Clock_Ip_ClockInitializeObjects+0x22c>)
    534e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5350:	2027      	movs	r0, #39	; 0x27
    5352:	f7ff fe97 	bl	5084 <getSlowDividerConfig>
    5356:	4603      	mov	r3, r0
    5358:	4a28      	ldr	r2, [pc, #160]	; (53fc <Clock_Ip_ClockInitializeObjects+0x230>)
    535a:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    535c:	bf00      	nop
    535e:	b003      	add	sp, #12
    5360:	f85d fb04 	ldr.w	pc, [sp], #4
    5364:	1fff8ce0 	.word	0x1fff8ce0
    5368:	0000a67c 	.word	0x0000a67c
    536c:	0000acc8 	.word	0x0000acc8
    5370:	1fff8bac 	.word	0x1fff8bac
    5374:	0000a63c 	.word	0x0000a63c
    5378:	0000ac10 	.word	0x0000ac10
    537c:	1fff8bb0 	.word	0x1fff8bb0
    5380:	0000a64c 	.word	0x0000a64c
    5384:	0000ac7c 	.word	0x0000ac7c
    5388:	1fff8bb4 	.word	0x1fff8bb4
    538c:	0000a68c 	.word	0x0000a68c
    5390:	0000acf4 	.word	0x0000acf4
    5394:	1fff8bb8 	.word	0x1fff8bb8
    5398:	1fff8bf4 	.word	0x1fff8bf4
    539c:	0000a61c 	.word	0x0000a61c
    53a0:	0000abcc 	.word	0x0000abcc
    53a4:	1fff8bbc 	.word	0x1fff8bbc
    53a8:	1fff8bf8 	.word	0x1fff8bf8
    53ac:	1fff8bc0 	.word	0x1fff8bc0
    53b0:	1fff8bfc 	.word	0x1fff8bfc
    53b4:	1fff8bc4 	.word	0x1fff8bc4
    53b8:	1fff8c00 	.word	0x1fff8c00
    53bc:	1fff8b19 	.word	0x1fff8b19
    53c0:	1fff8b10 	.word	0x1fff8b10
    53c4:	1fff8bc8 	.word	0x1fff8bc8
    53c8:	1fff8bcc 	.word	0x1fff8bcc
    53cc:	1fff8bd0 	.word	0x1fff8bd0
    53d0:	1fff8bd4 	.word	0x1fff8bd4
    53d4:	1fff8bd8 	.word	0x1fff8bd8
    53d8:	1fff8c04 	.word	0x1fff8c04
    53dc:	1fff8bdc 	.word	0x1fff8bdc
    53e0:	1fff8be0 	.word	0x1fff8be0
    53e4:	1fff8c08 	.word	0x1fff8c08
    53e8:	1fff8be4 	.word	0x1fff8be4
    53ec:	1fff8be8 	.word	0x1fff8be8
    53f0:	1fff8c0c 	.word	0x1fff8c0c
    53f4:	1fff8bec 	.word	0x1fff8bec
    53f8:	1fff8bf0 	.word	0x1fff8bf0
    53fc:	1fff8c10 	.word	0x1fff8c10

00005400 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5400:	b500      	push	{lr}
    5402:	b083      	sub	sp, #12
    5404:	9001      	str	r0, [sp, #4]
    5406:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5408:	9b01      	ldr	r3, [sp, #4]
    540a:	2b03      	cmp	r3, #3
    540c:	f000 8090 	beq.w	5530 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    5410:	9b01      	ldr	r3, [sp, #4]
    5412:	2b03      	cmp	r3, #3
    5414:	f200 80d3 	bhi.w	55be <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5418:	9b01      	ldr	r3, [sp, #4]
    541a:	2b00      	cmp	r3, #0
    541c:	d040      	beq.n	54a0 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    541e:	9b01      	ldr	r3, [sp, #4]
    5420:	3b01      	subs	r3, #1
    5422:	2b01      	cmp	r3, #1
    5424:	f200 80cb 	bhi.w	55be <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    5428:	9b00      	ldr	r3, [sp, #0]
    542a:	2b00      	cmp	r3, #0
    542c:	f040 80c9 	bne.w	55c2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    5430:	4b68      	ldr	r3, [pc, #416]	; (55d4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5432:	2200      	movs	r2, #0
    5434:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    5436:	4b68      	ldr	r3, [pc, #416]	; (55d8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5438:	681b      	ldr	r3, [r3, #0]
    543a:	685b      	ldr	r3, [r3, #4]
    543c:	4a67      	ldr	r2, [pc, #412]	; (55dc <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    543e:	6812      	ldr	r2, [r2, #0]
    5440:	4610      	mov	r0, r2
    5442:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    5444:	4b66      	ldr	r3, [pc, #408]	; (55e0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5446:	681b      	ldr	r3, [r3, #0]
    5448:	681b      	ldr	r3, [r3, #0]
    544a:	4a66      	ldr	r2, [pc, #408]	; (55e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    544c:	6812      	ldr	r2, [r2, #0]
    544e:	4610      	mov	r0, r2
    5450:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    5452:	4b65      	ldr	r3, [pc, #404]	; (55e8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5454:	681b      	ldr	r3, [r3, #0]
    5456:	681b      	ldr	r3, [r3, #0]
    5458:	4a64      	ldr	r2, [pc, #400]	; (55ec <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    545a:	6812      	ldr	r2, [r2, #0]
    545c:	4610      	mov	r0, r2
    545e:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    5460:	4b63      	ldr	r3, [pc, #396]	; (55f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5462:	681b      	ldr	r3, [r3, #0]
    5464:	681b      	ldr	r3, [r3, #0]
    5466:	4a63      	ldr	r2, [pc, #396]	; (55f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    5468:	6812      	ldr	r2, [r2, #0]
    546a:	4610      	mov	r0, r2
    546c:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    546e:	4b62      	ldr	r3, [pc, #392]	; (55f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5470:	681b      	ldr	r3, [r3, #0]
    5472:	691b      	ldr	r3, [r3, #16]
    5474:	4a61      	ldr	r2, [pc, #388]	; (55fc <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5476:	6812      	ldr	r2, [r2, #0]
    5478:	6812      	ldr	r2, [r2, #0]
    547a:	4610      	mov	r0, r2
    547c:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    547e:	4b60      	ldr	r3, [pc, #384]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5480:	681b      	ldr	r3, [r3, #0]
    5482:	68db      	ldr	r3, [r3, #12]
    5484:	4a5f      	ldr	r2, [pc, #380]	; (5604 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5486:	6812      	ldr	r2, [r2, #0]
    5488:	6812      	ldr	r2, [r2, #0]
    548a:	4610      	mov	r0, r2
    548c:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    548e:	4b5e      	ldr	r3, [pc, #376]	; (5608 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5490:	681b      	ldr	r3, [r3, #0]
    5492:	689b      	ldr	r3, [r3, #8]
    5494:	4a5d      	ldr	r2, [pc, #372]	; (560c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5496:	6812      	ldr	r2, [r2, #0]
    5498:	6812      	ldr	r2, [r2, #0]
    549a:	4610      	mov	r0, r2
    549c:	4798      	blx	r3
            }
        }
        break;
    549e:	e090      	b.n	55c2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    54a0:	9b00      	ldr	r3, [sp, #0]
    54a2:	2b02      	cmp	r3, #2
    54a4:	f040 808f 	bne.w	55c6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    54a8:	4b4a      	ldr	r3, [pc, #296]	; (55d4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    54aa:	2201      	movs	r2, #1
    54ac:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    54ae:	4b56      	ldr	r3, [pc, #344]	; (5608 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    54b0:	681b      	ldr	r3, [r3, #0]
    54b2:	685b      	ldr	r3, [r3, #4]
    54b4:	4a55      	ldr	r2, [pc, #340]	; (560c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    54b6:	6812      	ldr	r2, [r2, #0]
    54b8:	4610      	mov	r0, r2
    54ba:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    54bc:	4b50      	ldr	r3, [pc, #320]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54be:	681b      	ldr	r3, [r3, #0]
    54c0:	691b      	ldr	r3, [r3, #16]
    54c2:	4a50      	ldr	r2, [pc, #320]	; (5604 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54c4:	6812      	ldr	r2, [r2, #0]
    54c6:	4610      	mov	r0, r2
    54c8:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    54ca:	4b4d      	ldr	r3, [pc, #308]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54cc:	681b      	ldr	r3, [r3, #0]
    54ce:	689b      	ldr	r3, [r3, #8]
    54d0:	4a4c      	ldr	r2, [pc, #304]	; (5604 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54d2:	6812      	ldr	r2, [r2, #0]
    54d4:	4610      	mov	r0, r2
    54d6:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    54d8:	4b47      	ldr	r3, [pc, #284]	; (55f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    54da:	681b      	ldr	r3, [r3, #0]
    54dc:	68db      	ldr	r3, [r3, #12]
    54de:	4a47      	ldr	r2, [pc, #284]	; (55fc <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    54e0:	6812      	ldr	r2, [r2, #0]
    54e2:	4610      	mov	r0, r2
    54e4:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    54e6:	4b44      	ldr	r3, [pc, #272]	; (55f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    54e8:	681b      	ldr	r3, [r3, #0]
    54ea:	689b      	ldr	r3, [r3, #8]
    54ec:	4a43      	ldr	r2, [pc, #268]	; (55fc <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    54ee:	6812      	ldr	r2, [r2, #0]
    54f0:	6812      	ldr	r2, [r2, #0]
    54f2:	4610      	mov	r0, r2
    54f4:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    54f6:	4b38      	ldr	r3, [pc, #224]	; (55d8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    54f8:	681b      	ldr	r3, [r3, #0]
    54fa:	685b      	ldr	r3, [r3, #4]
    54fc:	4a44      	ldr	r2, [pc, #272]	; (5610 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    54fe:	6812      	ldr	r2, [r2, #0]
    5500:	4610      	mov	r0, r2
    5502:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5504:	4b36      	ldr	r3, [pc, #216]	; (55e0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5506:	681b      	ldr	r3, [r3, #0]
    5508:	681b      	ldr	r3, [r3, #0]
    550a:	4a42      	ldr	r2, [pc, #264]	; (5614 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    550c:	6812      	ldr	r2, [r2, #0]
    550e:	4610      	mov	r0, r2
    5510:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    5512:	4b35      	ldr	r3, [pc, #212]	; (55e8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5514:	681b      	ldr	r3, [r3, #0]
    5516:	681b      	ldr	r3, [r3, #0]
    5518:	4a3f      	ldr	r2, [pc, #252]	; (5618 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    551a:	6812      	ldr	r2, [r2, #0]
    551c:	4610      	mov	r0, r2
    551e:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5520:	4b33      	ldr	r3, [pc, #204]	; (55f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5522:	681b      	ldr	r3, [r3, #0]
    5524:	681b      	ldr	r3, [r3, #0]
    5526:	4a3d      	ldr	r2, [pc, #244]	; (561c <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    5528:	6812      	ldr	r2, [r2, #0]
    552a:	4610      	mov	r0, r2
    552c:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    552e:	e04a      	b.n	55c6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5530:	9b00      	ldr	r3, [sp, #0]
    5532:	2b02      	cmp	r3, #2
    5534:	d149      	bne.n	55ca <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5536:	4b27      	ldr	r3, [pc, #156]	; (55d4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5538:	2201      	movs	r2, #1
    553a:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    553c:	4b32      	ldr	r3, [pc, #200]	; (5608 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    553e:	681b      	ldr	r3, [r3, #0]
    5540:	685b      	ldr	r3, [r3, #4]
    5542:	4a32      	ldr	r2, [pc, #200]	; (560c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5544:	6812      	ldr	r2, [r2, #0]
    5546:	4610      	mov	r0, r2
    5548:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    554a:	4b2d      	ldr	r3, [pc, #180]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    554c:	681b      	ldr	r3, [r3, #0]
    554e:	691b      	ldr	r3, [r3, #16]
    5550:	4a2c      	ldr	r2, [pc, #176]	; (5604 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5552:	6812      	ldr	r2, [r2, #0]
    5554:	4610      	mov	r0, r2
    5556:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5558:	4b29      	ldr	r3, [pc, #164]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    555a:	681b      	ldr	r3, [r3, #0]
    555c:	689b      	ldr	r3, [r3, #8]
    555e:	4a29      	ldr	r2, [pc, #164]	; (5604 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5560:	6812      	ldr	r2, [r2, #0]
    5562:	4610      	mov	r0, r2
    5564:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5566:	4b24      	ldr	r3, [pc, #144]	; (55f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5568:	681b      	ldr	r3, [r3, #0]
    556a:	68db      	ldr	r3, [r3, #12]
    556c:	4a23      	ldr	r2, [pc, #140]	; (55fc <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    556e:	6812      	ldr	r2, [r2, #0]
    5570:	4610      	mov	r0, r2
    5572:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5574:	4b20      	ldr	r3, [pc, #128]	; (55f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5576:	681b      	ldr	r3, [r3, #0]
    5578:	689b      	ldr	r3, [r3, #8]
    557a:	4a20      	ldr	r2, [pc, #128]	; (55fc <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    557c:	6812      	ldr	r2, [r2, #0]
    557e:	6812      	ldr	r2, [r2, #0]
    5580:	4610      	mov	r0, r2
    5582:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    5584:	4b26      	ldr	r3, [pc, #152]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    5586:	681b      	ldr	r3, [r3, #0]
    5588:	685b      	ldr	r3, [r3, #4]
    558a:	4a26      	ldr	r2, [pc, #152]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    558c:	6812      	ldr	r2, [r2, #0]
    558e:	4610      	mov	r0, r2
    5590:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    5592:	4b25      	ldr	r3, [pc, #148]	; (5628 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5594:	681b      	ldr	r3, [r3, #0]
    5596:	681b      	ldr	r3, [r3, #0]
    5598:	4a24      	ldr	r2, [pc, #144]	; (562c <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    559a:	6812      	ldr	r2, [r2, #0]
    559c:	4610      	mov	r0, r2
    559e:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    55a0:	4b23      	ldr	r3, [pc, #140]	; (5630 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    55a2:	681b      	ldr	r3, [r3, #0]
    55a4:	681b      	ldr	r3, [r3, #0]
    55a6:	4a23      	ldr	r2, [pc, #140]	; (5634 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    55a8:	6812      	ldr	r2, [r2, #0]
    55aa:	4610      	mov	r0, r2
    55ac:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    55ae:	4b22      	ldr	r3, [pc, #136]	; (5638 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    55b0:	681b      	ldr	r3, [r3, #0]
    55b2:	681b      	ldr	r3, [r3, #0]
    55b4:	4a21      	ldr	r2, [pc, #132]	; (563c <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    55b6:	6812      	ldr	r2, [r2, #0]
    55b8:	4610      	mov	r0, r2
    55ba:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    55bc:	e005      	b.n	55ca <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    55be:	bf00      	nop
    55c0:	e004      	b.n	55cc <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    55c2:	bf00      	nop
    55c4:	e002      	b.n	55cc <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    55c6:	bf00      	nop
    55c8:	e000      	b.n	55cc <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    55ca:	bf00      	nop
    }

}
    55cc:	bf00      	nop
    55ce:	b003      	add	sp, #12
    55d0:	f85d fb04 	ldr.w	pc, [sp], #4
    55d4:	1fff8b19 	.word	0x1fff8b19
    55d8:	1fff8bb8 	.word	0x1fff8bb8
    55dc:	1fff8bd8 	.word	0x1fff8bd8
    55e0:	1fff8bbc 	.word	0x1fff8bbc
    55e4:	1fff8be0 	.word	0x1fff8be0
    55e8:	1fff8bc0 	.word	0x1fff8bc0
    55ec:	1fff8be8 	.word	0x1fff8be8
    55f0:	1fff8bc4 	.word	0x1fff8bc4
    55f4:	1fff8bf0 	.word	0x1fff8bf0
    55f8:	1fff8bac 	.word	0x1fff8bac
    55fc:	1fff8bd0 	.word	0x1fff8bd0
    5600:	1fff8bb0 	.word	0x1fff8bb0
    5604:	1fff8bcc 	.word	0x1fff8bcc
    5608:	1fff8bb4 	.word	0x1fff8bb4
    560c:	1fff8bc8 	.word	0x1fff8bc8
    5610:	1fff8bd4 	.word	0x1fff8bd4
    5614:	1fff8bdc 	.word	0x1fff8bdc
    5618:	1fff8be4 	.word	0x1fff8be4
    561c:	1fff8bec 	.word	0x1fff8bec
    5620:	1fff8bf4 	.word	0x1fff8bf4
    5624:	1fff8c04 	.word	0x1fff8c04
    5628:	1fff8bf8 	.word	0x1fff8bf8
    562c:	1fff8c08 	.word	0x1fff8c08
    5630:	1fff8bfc 	.word	0x1fff8bfc
    5634:	1fff8c0c 	.word	0x1fff8c0c
    5638:	1fff8c00 	.word	0x1fff8c00
    563c:	1fff8c10 	.word	0x1fff8c10

00005640 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    5640:	b500      	push	{lr}
    5642:	b083      	sub	sp, #12
    5644:	9001      	str	r0, [sp, #4]
    5646:	9100      	str	r1, [sp, #0]
    switch(Command)
    5648:	9b00      	ldr	r3, [sp, #0]
    564a:	2b04      	cmp	r3, #4
    564c:	d010      	beq.n	5670 <Clock_Ip_Command+0x30>
    564e:	9b00      	ldr	r3, [sp, #0]
    5650:	2b04      	cmp	r3, #4
    5652:	d811      	bhi.n	5678 <Clock_Ip_Command+0x38>
    5654:	9b00      	ldr	r3, [sp, #0]
    5656:	2b01      	cmp	r3, #1
    5658:	d006      	beq.n	5668 <Clock_Ip_Command+0x28>
    565a:	9b00      	ldr	r3, [sp, #0]
    565c:	2b02      	cmp	r3, #2
    565e:	d10b      	bne.n	5678 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    5660:	9801      	ldr	r0, [sp, #4]
    5662:	f7ff fdb3 	bl	51cc <Clock_Ip_ClockInitializeObjects>
            break;
    5666:	e008      	b.n	567a <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    5668:	9801      	ldr	r0, [sp, #4]
    566a:	f7ff f9db 	bl	4a24 <Clock_Ip_SpecificPlatformInitClock>
            break;
    566e:	e004      	b.n	567a <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5670:	9801      	ldr	r0, [sp, #4]
    5672:	f7ff f8ed 	bl	4850 <DisableSafeClock>
            break;
    5676:	e000      	b.n	567a <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    5678:	bf00      	nop
    }
}
    567a:	bf00      	nop
    567c:	b003      	add	sp, #12
    567e:	f85d fb04 	ldr.w	pc, [sp], #4
    5682:	bf00      	nop

00005684 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5684:	b500      	push	{lr}
    5686:	b085      	sub	sp, #20
    5688:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    568a:	4a20      	ldr	r2, [pc, #128]	; (570c <Mcu_Init+0x88>)
    568c:	9b01      	ldr	r3, [sp, #4]
    568e:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5690:	2300      	movs	r3, #0
    5692:	9303      	str	r3, [sp, #12]
    5694:	e010      	b.n	56b8 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5696:	4b1d      	ldr	r3, [pc, #116]	; (570c <Mcu_Init+0x88>)
    5698:	681b      	ldr	r3, [r3, #0]
    569a:	6919      	ldr	r1, [r3, #16]
    569c:	9a03      	ldr	r2, [sp, #12]
    569e:	4613      	mov	r3, r2
    56a0:	005b      	lsls	r3, r3, #1
    56a2:	4413      	add	r3, r2
    56a4:	009b      	lsls	r3, r3, #2
    56a6:	440b      	add	r3, r1
    56a8:	681b      	ldr	r3, [r3, #0]
    56aa:	9a03      	ldr	r2, [sp, #12]
    56ac:	b2d1      	uxtb	r1, r2
    56ae:	4a18      	ldr	r2, [pc, #96]	; (5710 <Mcu_Init+0x8c>)
    56b0:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    56b2:	9b03      	ldr	r3, [sp, #12]
    56b4:	3301      	adds	r3, #1
    56b6:	9303      	str	r3, [sp, #12]
    56b8:	4b14      	ldr	r3, [pc, #80]	; (570c <Mcu_Init+0x88>)
    56ba:	681b      	ldr	r3, [r3, #0]
    56bc:	689b      	ldr	r3, [r3, #8]
    56be:	9a03      	ldr	r2, [sp, #12]
    56c0:	429a      	cmp	r2, r3
    56c2:	d3e8      	bcc.n	5696 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    56c4:	2300      	movs	r3, #0
    56c6:	9303      	str	r3, [sp, #12]
    56c8:	e010      	b.n	56ec <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    56ca:	4b10      	ldr	r3, [pc, #64]	; (570c <Mcu_Init+0x88>)
    56cc:	681b      	ldr	r3, [r3, #0]
    56ce:	6959      	ldr	r1, [r3, #20]
    56d0:	9a03      	ldr	r2, [sp, #12]
    56d2:	4613      	mov	r3, r2
    56d4:	01db      	lsls	r3, r3, #7
    56d6:	1a9b      	subs	r3, r3, r2
    56d8:	00db      	lsls	r3, r3, #3
    56da:	440b      	add	r3, r1
    56dc:	681b      	ldr	r3, [r3, #0]
    56de:	9a03      	ldr	r2, [sp, #12]
    56e0:	b2d1      	uxtb	r1, r2
    56e2:	4a0c      	ldr	r2, [pc, #48]	; (5714 <Mcu_Init+0x90>)
    56e4:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    56e6:	9b03      	ldr	r3, [sp, #12]
    56e8:	3301      	adds	r3, #1
    56ea:	9303      	str	r3, [sp, #12]
    56ec:	4b07      	ldr	r3, [pc, #28]	; (570c <Mcu_Init+0x88>)
    56ee:	681b      	ldr	r3, [r3, #0]
    56f0:	68db      	ldr	r3, [r3, #12]
    56f2:	9a03      	ldr	r2, [sp, #12]
    56f4:	429a      	cmp	r2, r3
    56f6:	d3e8      	bcc.n	56ca <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    56f8:	4b04      	ldr	r3, [pc, #16]	; (570c <Mcu_Init+0x88>)
    56fa:	681b      	ldr	r3, [r3, #0]
    56fc:	699b      	ldr	r3, [r3, #24]
    56fe:	4618      	mov	r0, r3
    5700:	f000 f88a 	bl	5818 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5704:	bf00      	nop
    5706:	b005      	add	sp, #20
    5708:	f85d fb04 	ldr.w	pc, [sp], #4
    570c:	1fff8cec 	.word	0x1fff8cec
    5710:	1fff8ce8 	.word	0x1fff8ce8
    5714:	1fff8ce4 	.word	0x1fff8ce4

00005718 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5718:	b084      	sub	sp, #16
    571a:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    571c:	2301      	movs	r3, #1
    571e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5722:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5726:	4618      	mov	r0, r3
    5728:	b004      	add	sp, #16
    572a:	4770      	bx	lr

0000572c <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    572c:	b500      	push	{lr}
    572e:	b085      	sub	sp, #20
    5730:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5732:	4a0e      	ldr	r2, [pc, #56]	; (576c <Mcu_InitClock+0x40>)
    5734:	9b01      	ldr	r3, [sp, #4]
    5736:	4413      	add	r3, r2
    5738:	781b      	ldrb	r3, [r3, #0]
    573a:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    573e:	4b0c      	ldr	r3, [pc, #48]	; (5770 <Mcu_InitClock+0x44>)
    5740:	681b      	ldr	r3, [r3, #0]
    5742:	6959      	ldr	r1, [r3, #20]
    5744:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5748:	4613      	mov	r3, r2
    574a:	01db      	lsls	r3, r3, #7
    574c:	1a9b      	subs	r3, r3, r2
    574e:	00db      	lsls	r3, r3, #3
    5750:	440b      	add	r3, r1
    5752:	4618      	mov	r0, r3
    5754:	f000 f86a 	bl	582c <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5758:	2300      	movs	r3, #0
    575a:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    575e:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    5762:	4618      	mov	r0, r3
    5764:	b005      	add	sp, #20
    5766:	f85d fb04 	ldr.w	pc, [sp], #4
    576a:	bf00      	nop
    576c:	1fff8ce4 	.word	0x1fff8ce4
    5770:	1fff8cec 	.word	0x1fff8cec

00005774 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5774:	b500      	push	{lr}
    5776:	b085      	sub	sp, #20
    5778:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    577a:	4a0d      	ldr	r2, [pc, #52]	; (57b0 <Mcu_SetMode+0x3c>)
    577c:	9b01      	ldr	r3, [sp, #4]
    577e:	4413      	add	r3, r2
    5780:	781b      	ldrb	r3, [r3, #0]
    5782:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    5786:	f002 fedb 	bl	8540 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    578a:	4b0a      	ldr	r3, [pc, #40]	; (57b4 <Mcu_SetMode+0x40>)
    578c:	681b      	ldr	r3, [r3, #0]
    578e:	6919      	ldr	r1, [r3, #16]
    5790:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5794:	4613      	mov	r3, r2
    5796:	005b      	lsls	r3, r3, #1
    5798:	4413      	add	r3, r2
    579a:	009b      	lsls	r3, r3, #2
    579c:	440b      	add	r3, r1
    579e:	4618      	mov	r0, r3
    57a0:	f000 f84e 	bl	5840 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    57a4:	f002 fef8 	bl	8598 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    57a8:	bf00      	nop
    57aa:	b005      	add	sp, #20
    57ac:	f85d fb04 	ldr.w	pc, [sp], #4
    57b0:	1fff8ce8 	.word	0x1fff8ce8
    57b4:	1fff8cec 	.word	0x1fff8cec

000057b8 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    57b8:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    57ba:	2302      	movs	r3, #2
    57bc:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    57be:	9b01      	ldr	r3, [sp, #4]
}
    57c0:	4618      	mov	r0, r3
    57c2:	b002      	add	sp, #8
    57c4:	4770      	bx	lr

000057c6 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    57c6:	b500      	push	{lr}
    57c8:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    57ca:	f000 f843 	bl	5854 <Mcu_Ipw_GetResetReason>
    57ce:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    57d0:	9b01      	ldr	r3, [sp, #4]
}
    57d2:	4618      	mov	r0, r3
    57d4:	b003      	add	sp, #12
    57d6:	f85d fb04 	ldr.w	pc, [sp], #4

000057da <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    57da:	b500      	push	{lr}
    57dc:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    57de:	f000 f83f 	bl	5860 <Mcu_Ipw_GetResetRawValue>
    57e2:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    57e4:	9b01      	ldr	r3, [sp, #4]
}
    57e6:	4618      	mov	r0, r3
    57e8:	b003      	add	sp, #12
    57ea:	f85d fb04 	ldr.w	pc, [sp], #4

000057ee <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    57ee:	b500      	push	{lr}
    57f0:	b083      	sub	sp, #12
    57f2:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    57f4:	9801      	ldr	r0, [sp, #4]
    57f6:	f000 f839 	bl	586c <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    57fa:	bf00      	nop
    57fc:	b003      	add	sp, #12
    57fe:	f85d fb04 	ldr.w	pc, [sp], #4

00005802 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5802:	b082      	sub	sp, #8
    5804:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5806:	4b03      	ldr	r3, [pc, #12]	; (5814 <Mcu_ClkSrcFailureNotification+0x12>)
    5808:	681b      	ldr	r3, [r3, #0]
    580a:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    580c:	bf00      	nop
    580e:	b002      	add	sp, #8
    5810:	4770      	bx	lr
    5812:	bf00      	nop
    5814:	1fff8cec 	.word	0x1fff8cec

00005818 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5818:	b500      	push	{lr}
    581a:	b083      	sub	sp, #12
    581c:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    581e:	9801      	ldr	r0, [sp, #4]
    5820:	f000 f882 	bl	5928 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5824:	bf00      	nop
    5826:	b003      	add	sp, #12
    5828:	f85d fb04 	ldr.w	pc, [sp], #4

0000582c <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    582c:	b500      	push	{lr}
    582e:	b083      	sub	sp, #12
    5830:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5832:	9801      	ldr	r0, [sp, #4]
    5834:	f7fc fc6a 	bl	210c <Clock_Ip_InitClock>
}
    5838:	bf00      	nop
    583a:	b003      	add	sp, #12
    583c:	f85d fb04 	ldr.w	pc, [sp], #4

00005840 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5840:	b500      	push	{lr}
    5842:	b083      	sub	sp, #12
    5844:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5846:	9801      	ldr	r0, [sp, #4]
    5848:	f000 f820 	bl	588c <Power_Ip_SetMode>
}
    584c:	bf00      	nop
    584e:	b003      	add	sp, #12
    5850:	f85d fb04 	ldr.w	pc, [sp], #4

00005854 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5854:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5856:	f000 f84f 	bl	58f8 <Power_Ip_GetResetReason>
    585a:	4603      	mov	r3, r0
}
    585c:	4618      	mov	r0, r3
    585e:	bd08      	pop	{r3, pc}

00005860 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5860:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5862:	f000 f857 	bl	5914 <Power_Ip_GetResetRawValue>
    5866:	4603      	mov	r3, r0
}
    5868:	4618      	mov	r0, r3
    586a:	bd08      	pop	{r3, pc}

0000586c <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    586c:	b500      	push	{lr}
    586e:	b083      	sub	sp, #12
    5870:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5872:	9b01      	ldr	r3, [sp, #4]
    5874:	2b00      	cmp	r3, #0
    5876:	d102      	bne.n	587e <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5878:	f000 f86c 	bl	5954 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    587c:	e001      	b.n	5882 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    587e:	f000 f86e 	bl	595e <Power_Ip_EnableSleepOnExit>
}
    5882:	bf00      	nop
    5884:	b003      	add	sp, #12
    5886:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000588c <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    588c:	b500      	push	{lr}
    588e:	b085      	sub	sp, #20
    5890:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5892:	9b01      	ldr	r3, [sp, #4]
    5894:	685b      	ldr	r3, [r3, #4]
    5896:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5898:	9802      	ldr	r0, [sp, #8]
    589a:	f000 f9f5 	bl	5c88 <Power_Ip_SMC_ModeCheckEntry>
    589e:	4603      	mov	r3, r0
    58a0:	2b00      	cmp	r3, #0
    58a2:	d002      	beq.n	58aa <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    58a4:	2301      	movs	r3, #1
    58a6:	9303      	str	r3, [sp, #12]
    58a8:	e003      	b.n	58b2 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    58aa:	9801      	ldr	r0, [sp, #4]
    58ac:	f000 fa1e 	bl	5cec <Power_Ip_SMC_ModeConfig>
    58b0:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    58b2:	9b03      	ldr	r3, [sp, #12]
    58b4:	2b01      	cmp	r3, #1
    58b6:	d103      	bne.n	58c0 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    58b8:	21ff      	movs	r1, #255	; 0xff
    58ba:	2003      	movs	r0, #3
    58bc:	f000 f8f4 	bl	5aa8 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    58c0:	bf00      	nop
    58c2:	b005      	add	sp, #20
    58c4:	f85d fb04 	ldr.w	pc, [sp], #4

000058c8 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    58c8:	b084      	sub	sp, #16
    58ca:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    58cc:	230c      	movs	r3, #12
    58ce:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    58d0:	4a08      	ldr	r2, [pc, #32]	; (58f4 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    58d2:	9b01      	ldr	r3, [sp, #4]
    58d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    58d8:	2b0e      	cmp	r3, #14
    58da:	d805      	bhi.n	58e8 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    58dc:	4a05      	ldr	r2, [pc, #20]	; (58f4 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    58de:	9b01      	ldr	r3, [sp, #4]
    58e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    58e4:	9303      	str	r3, [sp, #12]
    58e6:	e001      	b.n	58ec <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    58e8:	230c      	movs	r3, #12
    58ea:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    58ec:	9b03      	ldr	r3, [sp, #12]
}
    58ee:	4618      	mov	r0, r3
    58f0:	b004      	add	sp, #16
    58f2:	4770      	bx	lr
    58f4:	0000ad68 	.word	0x0000ad68

000058f8 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    58f8:	b500      	push	{lr}
    58fa:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    58fc:	f000 f940 	bl	5b80 <Power_Ip_RCM_GetResetReason>
    5900:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5902:	9801      	ldr	r0, [sp, #4]
    5904:	f7ff ffe0 	bl	58c8 <Power_Ip_ConvertIntergeToResetType>
    5908:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    590a:	9b00      	ldr	r3, [sp, #0]
}
    590c:	4618      	mov	r0, r3
    590e:	b003      	add	sp, #12
    5910:	f85d fb04 	ldr.w	pc, [sp], #4

00005914 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5914:	b500      	push	{lr}
    5916:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5918:	f000 f98a 	bl	5c30 <Power_Ip_RCM_GetResetRawValue>
    591c:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    591e:	9b01      	ldr	r3, [sp, #4]
}
    5920:	4618      	mov	r0, r3
    5922:	b003      	add	sp, #12
    5924:	f85d fb04 	ldr.w	pc, [sp], #4

00005928 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5928:	b500      	push	{lr}
    592a:	b083      	sub	sp, #12
    592c:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    592e:	9b01      	ldr	r3, [sp, #4]
    5930:	681b      	ldr	r3, [r3, #0]
    5932:	4618      	mov	r0, r3
    5934:	f000 f90e 	bl	5b54 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5938:	9b01      	ldr	r3, [sp, #4]
    593a:	685b      	ldr	r3, [r3, #4]
    593c:	4618      	mov	r0, r3
    593e:	f000 f86d 	bl	5a1c <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5942:	9b01      	ldr	r3, [sp, #4]
    5944:	689b      	ldr	r3, [r3, #8]
    5946:	4618      	mov	r0, r3
    5948:	f000 f990 	bl	5c6c <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    594c:	bf00      	nop
    594e:	b003      	add	sp, #12
    5950:	f85d fb04 	ldr.w	pc, [sp], #4

00005954 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5954:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5956:	f000 f811 	bl	597c <Power_Ip_CM4_DisableSleepOnExit>
}
    595a:	bf00      	nop
    595c:	bd08      	pop	{r3, pc}

0000595e <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    595e:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5960:	f000 f820 	bl	59a4 <Power_Ip_CM4_EnableSleepOnExit>
}
    5964:	bf00      	nop
    5966:	bd08      	pop	{r3, pc}

00005968 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5968:	b082      	sub	sp, #8
    596a:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    596c:	4a02      	ldr	r2, [pc, #8]	; (5978 <Power_Ip_InstallNotificationsCallback+0x10>)
    596e:	9b01      	ldr	r3, [sp, #4]
    5970:	6013      	str	r3, [r2, #0]
}
    5972:	bf00      	nop
    5974:	b002      	add	sp, #8
    5976:	4770      	bx	lr
    5978:	1fff8b1c 	.word	0x1fff8b1c

0000597c <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    597c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    597e:	2300      	movs	r3, #0
    5980:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5982:	4b07      	ldr	r3, [pc, #28]	; (59a0 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5984:	681b      	ldr	r3, [r3, #0]
    5986:	685b      	ldr	r3, [r3, #4]
    5988:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    598a:	9b01      	ldr	r3, [sp, #4]
    598c:	f023 0302 	bic.w	r3, r3, #2
    5990:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5992:	4b03      	ldr	r3, [pc, #12]	; (59a0 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5994:	681b      	ldr	r3, [r3, #0]
    5996:	9a01      	ldr	r2, [sp, #4]
    5998:	605a      	str	r2, [r3, #4]
}
    599a:	bf00      	nop
    599c:	b002      	add	sp, #8
    599e:	4770      	bx	lr
    59a0:	1fff8b20 	.word	0x1fff8b20

000059a4 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    59a4:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59a6:	2300      	movs	r3, #0
    59a8:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59aa:	4b07      	ldr	r3, [pc, #28]	; (59c8 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    59ac:	681b      	ldr	r3, [r3, #0]
    59ae:	685b      	ldr	r3, [r3, #4]
    59b0:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    59b2:	9b01      	ldr	r3, [sp, #4]
    59b4:	f043 0302 	orr.w	r3, r3, #2
    59b8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    59ba:	4b03      	ldr	r3, [pc, #12]	; (59c8 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    59bc:	681b      	ldr	r3, [r3, #0]
    59be:	9a01      	ldr	r2, [sp, #4]
    59c0:	605a      	str	r2, [r3, #4]
}
    59c2:	bf00      	nop
    59c4:	b002      	add	sp, #8
    59c6:	4770      	bx	lr
    59c8:	1fff8b20 	.word	0x1fff8b20

000059cc <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    59cc:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59ce:	2300      	movs	r3, #0
    59d0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59d2:	4b07      	ldr	r3, [pc, #28]	; (59f0 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    59d4:	681b      	ldr	r3, [r3, #0]
    59d6:	685b      	ldr	r3, [r3, #4]
    59d8:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    59da:	9b01      	ldr	r3, [sp, #4]
    59dc:	f043 0304 	orr.w	r3, r3, #4
    59e0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    59e2:	4b03      	ldr	r3, [pc, #12]	; (59f0 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    59e4:	681b      	ldr	r3, [r3, #0]
    59e6:	9a01      	ldr	r2, [sp, #4]
    59e8:	605a      	str	r2, [r3, #4]
}
    59ea:	bf00      	nop
    59ec:	b002      	add	sp, #8
    59ee:	4770      	bx	lr
    59f0:	1fff8b20 	.word	0x1fff8b20

000059f4 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    59f4:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59f6:	2300      	movs	r3, #0
    59f8:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59fa:	4b07      	ldr	r3, [pc, #28]	; (5a18 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    59fc:	681b      	ldr	r3, [r3, #0]
    59fe:	685b      	ldr	r3, [r3, #4]
    5a00:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5a02:	9b01      	ldr	r3, [sp, #4]
    5a04:	f023 0304 	bic.w	r3, r3, #4
    5a08:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a0a:	4b03      	ldr	r3, [pc, #12]	; (5a18 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5a0c:	681b      	ldr	r3, [r3, #0]
    5a0e:	9a01      	ldr	r2, [sp, #4]
    5a10:	605a      	str	r2, [r3, #4]
}
    5a12:	bf00      	nop
    5a14:	b002      	add	sp, #8
    5a16:	4770      	bx	lr
    5a18:	1fff8b20 	.word	0x1fff8b20

00005a1c <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5a1c:	b084      	sub	sp, #16
    5a1e:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5a20:	4b20      	ldr	r3, [pc, #128]	; (5aa4 <Power_Ip_PMC_PowerInit+0x88>)
    5a22:	781b      	ldrb	r3, [r3, #0]
    5a24:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5a28:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a2c:	f003 030f 	and.w	r3, r3, #15
    5a30:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5a34:	9b01      	ldr	r3, [sp, #4]
    5a36:	781a      	ldrb	r2, [r3, #0]
    5a38:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a3c:	4313      	orrs	r3, r2
    5a3e:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5a42:	4a18      	ldr	r2, [pc, #96]	; (5aa4 <Power_Ip_PMC_PowerInit+0x88>)
    5a44:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a48:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5a4a:	4b16      	ldr	r3, [pc, #88]	; (5aa4 <Power_Ip_PMC_PowerInit+0x88>)
    5a4c:	785b      	ldrb	r3, [r3, #1]
    5a4e:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5a52:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a56:	f003 031f 	and.w	r3, r3, #31
    5a5a:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5a5e:	9b01      	ldr	r3, [sp, #4]
    5a60:	785a      	ldrb	r2, [r3, #1]
    5a62:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a66:	4313      	orrs	r3, r2
    5a68:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5a6c:	4a0d      	ldr	r2, [pc, #52]	; (5aa4 <Power_Ip_PMC_PowerInit+0x88>)
    5a6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a72:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5a74:	4b0b      	ldr	r3, [pc, #44]	; (5aa4 <Power_Ip_PMC_PowerInit+0x88>)
    5a76:	789b      	ldrb	r3, [r3, #2]
    5a78:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5a7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a80:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5a84:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5a88:	9b01      	ldr	r3, [sp, #4]
    5a8a:	789a      	ldrb	r2, [r3, #2]
    5a8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a90:	4313      	orrs	r3, r2
    5a92:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5a96:	4a03      	ldr	r2, [pc, #12]	; (5aa4 <Power_Ip_PMC_PowerInit+0x88>)
    5a98:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a9c:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5a9e:	bf00      	nop
    5aa0:	b004      	add	sp, #16
    5aa2:	4770      	bx	lr
    5aa4:	4007d000 	.word	0x4007d000

00005aa8 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5aa8:	b500      	push	{lr}
    5aaa:	b083      	sub	sp, #12
    5aac:	9001      	str	r0, [sp, #4]
    5aae:	460b      	mov	r3, r1
    5ab0:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5ab4:	4b05      	ldr	r3, [pc, #20]	; (5acc <Power_Ip_ReportPowerErrors+0x24>)
    5ab6:	681b      	ldr	r3, [r3, #0]
    5ab8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5abc:	4611      	mov	r1, r2
    5abe:	9801      	ldr	r0, [sp, #4]
    5ac0:	4798      	blx	r3
}
    5ac2:	bf00      	nop
    5ac4:	b003      	add	sp, #12
    5ac6:	f85d fb04 	ldr.w	pc, [sp], #4
    5aca:	bf00      	nop
    5acc:	1fff8b1c 	.word	0x1fff8b1c

00005ad0 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5ad0:	b082      	sub	sp, #8
    5ad2:	9001      	str	r0, [sp, #4]
    5ad4:	460b      	mov	r3, r1
    5ad6:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5ada:	bf00      	nop
    5adc:	b002      	add	sp, #8
    5ade:	4770      	bx	lr

00005ae0 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5ae0:	b500      	push	{lr}
    5ae2:	b085      	sub	sp, #20
    5ae4:	9003      	str	r0, [sp, #12]
    5ae6:	9102      	str	r1, [sp, #8]
    5ae8:	9201      	str	r2, [sp, #4]
    5aea:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5aec:	2000      	movs	r0, #0
    5aee:	f7fc f83d 	bl	1b6c <OsIf_GetCounter>
    5af2:	4602      	mov	r2, r0
    5af4:	9b03      	ldr	r3, [sp, #12]
    5af6:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5af8:	9b02      	ldr	r3, [sp, #8]
    5afa:	2200      	movs	r2, #0
    5afc:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5afe:	2100      	movs	r1, #0
    5b00:	9800      	ldr	r0, [sp, #0]
    5b02:	f7fc f87f 	bl	1c04 <OsIf_MicrosToTicks>
    5b06:	4602      	mov	r2, r0
    5b08:	9b01      	ldr	r3, [sp, #4]
    5b0a:	601a      	str	r2, [r3, #0]
}
    5b0c:	bf00      	nop
    5b0e:	b005      	add	sp, #20
    5b10:	f85d fb04 	ldr.w	pc, [sp], #4

00005b14 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5b14:	b500      	push	{lr}
    5b16:	b087      	sub	sp, #28
    5b18:	9003      	str	r0, [sp, #12]
    5b1a:	9102      	str	r1, [sp, #8]
    5b1c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5b1e:	2300      	movs	r3, #0
    5b20:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5b24:	2100      	movs	r1, #0
    5b26:	9803      	ldr	r0, [sp, #12]
    5b28:	f7fc f839 	bl	1b9e <OsIf_GetElapsed>
    5b2c:	4602      	mov	r2, r0
    5b2e:	9b02      	ldr	r3, [sp, #8]
    5b30:	681b      	ldr	r3, [r3, #0]
    5b32:	441a      	add	r2, r3
    5b34:	9b02      	ldr	r3, [sp, #8]
    5b36:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5b38:	9b02      	ldr	r3, [sp, #8]
    5b3a:	681b      	ldr	r3, [r3, #0]
    5b3c:	9a01      	ldr	r2, [sp, #4]
    5b3e:	429a      	cmp	r2, r3
    5b40:	d802      	bhi.n	5b48 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5b42:	2301      	movs	r3, #1
    5b44:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5b48:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5b4c:	4618      	mov	r0, r3
    5b4e:	b007      	add	sp, #28
    5b50:	f85d fb04 	ldr.w	pc, [sp], #4

00005b54 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5b54:	b082      	sub	sp, #8
    5b56:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5b58:	9b01      	ldr	r3, [sp, #4]
    5b5a:	681a      	ldr	r2, [r3, #0]
    5b5c:	4907      	ldr	r1, [pc, #28]	; (5b7c <Power_Ip_RCM_ResetInit+0x28>)
    5b5e:	f641 7307 	movw	r3, #7943	; 0x1f07
    5b62:	4013      	ands	r3, r2
    5b64:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5b66:	9b01      	ldr	r3, [sp, #4]
    5b68:	685a      	ldr	r2, [r3, #4]
    5b6a:	4904      	ldr	r1, [pc, #16]	; (5b7c <Power_Ip_RCM_ResetInit+0x28>)
    5b6c:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5b70:	4013      	ands	r3, r2
    5b72:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5b74:	bf00      	nop
    5b76:	b002      	add	sp, #8
    5b78:	4770      	bx	lr
    5b7a:	bf00      	nop
    5b7c:	4007f000 	.word	0x4007f000

00005b80 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5b80:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5b82:	230c      	movs	r3, #12
    5b84:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5b86:	2300      	movs	r3, #0
    5b88:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5b8a:	2300      	movs	r3, #0
    5b8c:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5b8e:	2300      	movs	r3, #0
    5b90:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5b92:	4b25      	ldr	r3, [pc, #148]	; (5c28 <Power_Ip_RCM_GetResetReason+0xa8>)
    5b94:	699a      	ldr	r2, [r3, #24]
    5b96:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b9a:	4013      	ands	r3, r2
    5b9c:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5b9e:	9b03      	ldr	r3, [sp, #12]
    5ba0:	2b00      	cmp	r3, #0
    5ba2:	d008      	beq.n	5bb6 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5ba4:	4920      	ldr	r1, [pc, #128]	; (5c28 <Power_Ip_RCM_GetResetReason+0xa8>)
    5ba6:	9a03      	ldr	r2, [sp, #12]
    5ba8:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bac:	4013      	ands	r3, r2
    5bae:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5bb0:	4a1e      	ldr	r2, [pc, #120]	; (5c2c <Power_Ip_RCM_GetResetReason+0xac>)
    5bb2:	9b03      	ldr	r3, [sp, #12]
    5bb4:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5bb6:	4b1d      	ldr	r3, [pc, #116]	; (5c2c <Power_Ip_RCM_GetResetReason+0xac>)
    5bb8:	681b      	ldr	r3, [r3, #0]
    5bba:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5bbc:	9a02      	ldr	r2, [sp, #8]
    5bbe:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bc2:	4013      	ands	r3, r2
    5bc4:	2b82      	cmp	r3, #130	; 0x82
    5bc6:	d102      	bne.n	5bce <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5bc8:	2305      	movs	r3, #5
    5bca:	9307      	str	r3, [sp, #28]
    5bcc:	e027      	b.n	5c1e <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5bce:	2300      	movs	r3, #0
    5bd0:	9306      	str	r3, [sp, #24]
    5bd2:	e021      	b.n	5c18 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5bd4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5bd8:	9b06      	ldr	r3, [sp, #24]
    5bda:	fa22 f303 	lsr.w	r3, r2, r3
    5bde:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5be0:	9a01      	ldr	r2, [sp, #4]
    5be2:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5be6:	4013      	ands	r3, r2
    5be8:	2b00      	cmp	r3, #0
    5bea:	d012      	beq.n	5c12 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5bec:	9a01      	ldr	r2, [sp, #4]
    5bee:	9b02      	ldr	r3, [sp, #8]
    5bf0:	4013      	ands	r3, r2
    5bf2:	2b00      	cmp	r3, #0
    5bf4:	d00a      	beq.n	5c0c <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5bf6:	9b05      	ldr	r3, [sp, #20]
    5bf8:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5bfa:	9b04      	ldr	r3, [sp, #16]
    5bfc:	3301      	adds	r3, #1
    5bfe:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5c00:	9b04      	ldr	r3, [sp, #16]
    5c02:	2b01      	cmp	r3, #1
    5c04:	d902      	bls.n	5c0c <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5c06:	230d      	movs	r3, #13
    5c08:	9307      	str	r3, [sp, #28]
                        break;
    5c0a:	e008      	b.n	5c1e <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5c0c:	9b05      	ldr	r3, [sp, #20]
    5c0e:	3301      	adds	r3, #1
    5c10:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5c12:	9b06      	ldr	r3, [sp, #24]
    5c14:	3301      	adds	r3, #1
    5c16:	9306      	str	r3, [sp, #24]
    5c18:	9b06      	ldr	r3, [sp, #24]
    5c1a:	2b1f      	cmp	r3, #31
    5c1c:	d9da      	bls.n	5bd4 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5c1e:	9b07      	ldr	r3, [sp, #28]
}
    5c20:	4618      	mov	r0, r3
    5c22:	b008      	add	sp, #32
    5c24:	4770      	bx	lr
    5c26:	bf00      	nop
    5c28:	4007f000 	.word	0x4007f000
    5c2c:	1fff8cf0 	.word	0x1fff8cf0

00005c30 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5c30:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5c32:	4b0c      	ldr	r3, [pc, #48]	; (5c64 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5c34:	699a      	ldr	r2, [r3, #24]
    5c36:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c3a:	4013      	ands	r3, r2
    5c3c:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5c3e:	9b01      	ldr	r3, [sp, #4]
    5c40:	2b00      	cmp	r3, #0
    5c42:	d008      	beq.n	5c56 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5c44:	4907      	ldr	r1, [pc, #28]	; (5c64 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5c46:	9a01      	ldr	r2, [sp, #4]
    5c48:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c4c:	4013      	ands	r3, r2
    5c4e:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5c50:	4a05      	ldr	r2, [pc, #20]	; (5c68 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5c52:	9b01      	ldr	r3, [sp, #4]
    5c54:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5c56:	4b04      	ldr	r3, [pc, #16]	; (5c68 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5c58:	681b      	ldr	r3, [r3, #0]
    5c5a:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5c5c:	9b00      	ldr	r3, [sp, #0]
}
    5c5e:	4618      	mov	r0, r3
    5c60:	b002      	add	sp, #8
    5c62:	4770      	bx	lr
    5c64:	4007f000 	.word	0x4007f000
    5c68:	1fff8cf0 	.word	0x1fff8cf0

00005c6c <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5c6c:	b082      	sub	sp, #8
    5c6e:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5c70:	9b01      	ldr	r3, [sp, #4]
    5c72:	681b      	ldr	r3, [r3, #0]
    5c74:	4a03      	ldr	r2, [pc, #12]	; (5c84 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5c76:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5c7a:	6093      	str	r3, [r2, #8]
}
    5c7c:	bf00      	nop
    5c7e:	b002      	add	sp, #8
    5c80:	4770      	bx	lr
    5c82:	bf00      	nop
    5c84:	4007e000 	.word	0x4007e000

00005c88 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5c88:	b084      	sub	sp, #16
    5c8a:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5c8c:	2301      	movs	r3, #1
    5c8e:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5c90:	4b15      	ldr	r3, [pc, #84]	; (5ce8 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5c92:	695b      	ldr	r3, [r3, #20]
    5c94:	b2db      	uxtb	r3, r3
    5c96:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5c98:	9b01      	ldr	r3, [sp, #4]
    5c9a:	2b02      	cmp	r3, #2
    5c9c:	d012      	beq.n	5cc4 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5c9e:	9b01      	ldr	r3, [sp, #4]
    5ca0:	2b02      	cmp	r3, #2
    5ca2:	d818      	bhi.n	5cd6 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5ca4:	9b01      	ldr	r3, [sp, #4]
    5ca6:	2b00      	cmp	r3, #0
    5ca8:	d003      	beq.n	5cb2 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5caa:	9b01      	ldr	r3, [sp, #4]
    5cac:	2b01      	cmp	r3, #1
    5cae:	d003      	beq.n	5cb8 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5cb0:	e011      	b.n	5cd6 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5cb2:	2300      	movs	r3, #0
    5cb4:	9303      	str	r3, [sp, #12]
            break;
    5cb6:	e013      	b.n	5ce0 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5cb8:	9b02      	ldr	r3, [sp, #8]
    5cba:	2b01      	cmp	r3, #1
    5cbc:	d10d      	bne.n	5cda <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5cbe:	2300      	movs	r3, #0
    5cc0:	9303      	str	r3, [sp, #12]
            break;
    5cc2:	e00a      	b.n	5cda <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5cc4:	9b02      	ldr	r3, [sp, #8]
    5cc6:	2b01      	cmp	r3, #1
    5cc8:	d002      	beq.n	5cd0 <Power_Ip_SMC_ModeCheckEntry+0x48>
    5cca:	9b02      	ldr	r3, [sp, #8]
    5ccc:	2b10      	cmp	r3, #16
    5cce:	d106      	bne.n	5cde <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5cd0:	2300      	movs	r3, #0
    5cd2:	9303      	str	r3, [sp, #12]
            break;
    5cd4:	e003      	b.n	5cde <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5cd6:	bf00      	nop
    5cd8:	e002      	b.n	5ce0 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5cda:	bf00      	nop
    5cdc:	e000      	b.n	5ce0 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5cde:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5ce0:	9b03      	ldr	r3, [sp, #12]
}
    5ce2:	4618      	mov	r0, r3
    5ce4:	b004      	add	sp, #16
    5ce6:	4770      	bx	lr
    5ce8:	4007e000 	.word	0x4007e000

00005cec <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5cec:	b500      	push	{lr}
    5cee:	b08b      	sub	sp, #44	; 0x2c
    5cf0:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5cf2:	2300      	movs	r3, #0
    5cf4:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5cf6:	2300      	movs	r3, #0
    5cf8:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5cfa:	2300      	movs	r3, #0
    5cfc:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5d00:	9b01      	ldr	r3, [sp, #4]
    5d02:	685b      	ldr	r3, [r3, #4]
    5d04:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5d06:	9b08      	ldr	r3, [sp, #32]
    5d08:	2b02      	cmp	r3, #2
    5d0a:	d076      	beq.n	5dfa <Power_Ip_SMC_ModeConfig+0x10e>
    5d0c:	9b08      	ldr	r3, [sp, #32]
    5d0e:	2b02      	cmp	r3, #2
    5d10:	f200 80ab 	bhi.w	5e6a <Power_Ip_SMC_ModeConfig+0x17e>
    5d14:	9b08      	ldr	r3, [sp, #32]
    5d16:	2b00      	cmp	r3, #0
    5d18:	d003      	beq.n	5d22 <Power_Ip_SMC_ModeConfig+0x36>
    5d1a:	9b08      	ldr	r3, [sp, #32]
    5d1c:	2b01      	cmp	r3, #1
    5d1e:	d034      	beq.n	5d8a <Power_Ip_SMC_ModeConfig+0x9e>
    5d20:	e0a3      	b.n	5e6a <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5d22:	4b58      	ldr	r3, [pc, #352]	; (5e84 <Power_Ip_SMC_ModeConfig+0x198>)
    5d24:	68db      	ldr	r3, [r3, #12]
    5d26:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d28:	9b06      	ldr	r3, [sp, #24]
    5d2a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d2e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5d30:	4a54      	ldr	r2, [pc, #336]	; (5e84 <Power_Ip_SMC_ModeConfig+0x198>)
    5d32:	9b06      	ldr	r3, [sp, #24]
    5d34:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5d36:	aa02      	add	r2, sp, #8
    5d38:	a903      	add	r1, sp, #12
    5d3a:	a804      	add	r0, sp, #16
    5d3c:	f24c 3350 	movw	r3, #50000	; 0xc350
    5d40:	f7ff fece 	bl	5ae0 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5d44:	9a02      	ldr	r2, [sp, #8]
    5d46:	a903      	add	r1, sp, #12
    5d48:	ab04      	add	r3, sp, #16
    5d4a:	4618      	mov	r0, r3
    5d4c:	f7ff fee2 	bl	5b14 <Power_Ip_TimeoutExpired>
    5d50:	4603      	mov	r3, r0
    5d52:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5d56:	4b4b      	ldr	r3, [pc, #300]	; (5e84 <Power_Ip_SMC_ModeConfig+0x198>)
    5d58:	695b      	ldr	r3, [r3, #20]
    5d5a:	f003 0301 	and.w	r3, r3, #1
    5d5e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5d60:	9b05      	ldr	r3, [sp, #20]
    5d62:	2b01      	cmp	r3, #1
    5d64:	d006      	beq.n	5d74 <Power_Ip_SMC_ModeConfig+0x88>
    5d66:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d6a:	f083 0301 	eor.w	r3, r3, #1
    5d6e:	b2db      	uxtb	r3, r3
    5d70:	2b00      	cmp	r3, #0
    5d72:	d1e7      	bne.n	5d44 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5d74:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d78:	2b00      	cmp	r3, #0
    5d7a:	d079      	beq.n	5e70 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5d7c:	2301      	movs	r3, #1
    5d7e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5d80:	21ff      	movs	r1, #255	; 0xff
    5d82:	2000      	movs	r0, #0
    5d84:	f7ff fe90 	bl	5aa8 <Power_Ip_ReportPowerErrors>
            }

            break;
    5d88:	e072      	b.n	5e70 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5d8a:	4b3e      	ldr	r3, [pc, #248]	; (5e84 <Power_Ip_SMC_ModeConfig+0x198>)
    5d8c:	68db      	ldr	r3, [r3, #12]
    5d8e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d90:	9b06      	ldr	r3, [sp, #24]
    5d92:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d96:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5d98:	9b06      	ldr	r3, [sp, #24]
    5d9a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5d9e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5da0:	4a38      	ldr	r2, [pc, #224]	; (5e84 <Power_Ip_SMC_ModeConfig+0x198>)
    5da2:	9b06      	ldr	r3, [sp, #24]
    5da4:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5da6:	aa02      	add	r2, sp, #8
    5da8:	a903      	add	r1, sp, #12
    5daa:	a804      	add	r0, sp, #16
    5dac:	f24c 3350 	movw	r3, #50000	; 0xc350
    5db0:	f7ff fe96 	bl	5ae0 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5db4:	9a02      	ldr	r2, [sp, #8]
    5db6:	a903      	add	r1, sp, #12
    5db8:	ab04      	add	r3, sp, #16
    5dba:	4618      	mov	r0, r3
    5dbc:	f7ff feaa 	bl	5b14 <Power_Ip_TimeoutExpired>
    5dc0:	4603      	mov	r3, r0
    5dc2:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5dc6:	4b2f      	ldr	r3, [pc, #188]	; (5e84 <Power_Ip_SMC_ModeConfig+0x198>)
    5dc8:	695b      	ldr	r3, [r3, #20]
    5dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5dce:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5dd0:	9b05      	ldr	r3, [sp, #20]
    5dd2:	2b80      	cmp	r3, #128	; 0x80
    5dd4:	d006      	beq.n	5de4 <Power_Ip_SMC_ModeConfig+0xf8>
    5dd6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5dda:	f083 0301 	eor.w	r3, r3, #1
    5dde:	b2db      	uxtb	r3, r3
    5de0:	2b00      	cmp	r3, #0
    5de2:	d1e7      	bne.n	5db4 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5de4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5de8:	2b00      	cmp	r3, #0
    5dea:	d043      	beq.n	5e74 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5dec:	2301      	movs	r3, #1
    5dee:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5df0:	21ff      	movs	r1, #255	; 0xff
    5df2:	2000      	movs	r0, #0
    5df4:	f7ff fe58 	bl	5aa8 <Power_Ip_ReportPowerErrors>
            }

            break;
    5df8:	e03c      	b.n	5e74 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5dfa:	4b22      	ldr	r3, [pc, #136]	; (5e84 <Power_Ip_SMC_ModeConfig+0x198>)
    5dfc:	68db      	ldr	r3, [r3, #12]
    5dfe:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5e00:	9b06      	ldr	r3, [sp, #24]
    5e02:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5e06:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5e08:	9b06      	ldr	r3, [sp, #24]
    5e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5e0e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5e10:	4a1c      	ldr	r2, [pc, #112]	; (5e84 <Power_Ip_SMC_ModeConfig+0x198>)
    5e12:	9b06      	ldr	r3, [sp, #24]
    5e14:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5e16:	aa02      	add	r2, sp, #8
    5e18:	a903      	add	r1, sp, #12
    5e1a:	a804      	add	r0, sp, #16
    5e1c:	f24c 3350 	movw	r3, #50000	; 0xc350
    5e20:	f7ff fe5e 	bl	5ae0 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5e24:	9a02      	ldr	r2, [sp, #8]
    5e26:	a903      	add	r1, sp, #12
    5e28:	ab04      	add	r3, sp, #16
    5e2a:	4618      	mov	r0, r3
    5e2c:	f7ff fe72 	bl	5b14 <Power_Ip_TimeoutExpired>
    5e30:	4603      	mov	r3, r0
    5e32:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5e36:	4b13      	ldr	r3, [pc, #76]	; (5e84 <Power_Ip_SMC_ModeConfig+0x198>)
    5e38:	695b      	ldr	r3, [r3, #20]
    5e3a:	f003 0304 	and.w	r3, r3, #4
    5e3e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5e40:	9b05      	ldr	r3, [sp, #20]
    5e42:	2b04      	cmp	r3, #4
    5e44:	d006      	beq.n	5e54 <Power_Ip_SMC_ModeConfig+0x168>
    5e46:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e4a:	f083 0301 	eor.w	r3, r3, #1
    5e4e:	b2db      	uxtb	r3, r3
    5e50:	2b00      	cmp	r3, #0
    5e52:	d1e7      	bne.n	5e24 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5e54:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e58:	2b00      	cmp	r3, #0
    5e5a:	d00d      	beq.n	5e78 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e5c:	2301      	movs	r3, #1
    5e5e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5e60:	21ff      	movs	r1, #255	; 0xff
    5e62:	2000      	movs	r0, #0
    5e64:	f7ff fe20 	bl	5aa8 <Power_Ip_ReportPowerErrors>
            }

            break;
    5e68:	e006      	b.n	5e78 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e6a:	2301      	movs	r3, #1
    5e6c:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5e6e:	e004      	b.n	5e7a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e70:	bf00      	nop
    5e72:	e002      	b.n	5e7a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e74:	bf00      	nop
    5e76:	e000      	b.n	5e7a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e78:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5e7c:	4618      	mov	r0, r3
    5e7e:	b00b      	add	sp, #44	; 0x2c
    5e80:	f85d fb04 	ldr.w	pc, [sp], #4
    5e84:	4007e000 	.word	0x4007e000

00005e88 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5e88:	b500      	push	{lr}
    5e8a:	b085      	sub	sp, #20
    5e8c:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5e8e:	9b01      	ldr	r3, [sp, #4]
    5e90:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5e92:	9803      	ldr	r0, [sp, #12]
    5e94:	f000 fbc8 	bl	6628 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5e98:	4a03      	ldr	r2, [pc, #12]	; (5ea8 <Port_Init+0x20>)
    5e9a:	9b03      	ldr	r3, [sp, #12]
    5e9c:	6013      	str	r3, [r2, #0]
        }
    }
}
    5e9e:	bf00      	nop
    5ea0:	b005      	add	sp, #20
    5ea2:	f85d fb04 	ldr.w	pc, [sp], #4
    5ea6:	bf00      	nop
    5ea8:	1fff8cf4 	.word	0x1fff8cf4

00005eac <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5eac:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5eae:	4b03      	ldr	r3, [pc, #12]	; (5ebc <Port_RefreshPortDirection+0x10>)
    5eb0:	681b      	ldr	r3, [r3, #0]
    5eb2:	4618      	mov	r0, r3
    5eb4:	f000 fc10 	bl	66d8 <Port_Ipw_RefreshPortDirection>
    }
}
    5eb8:	bf00      	nop
    5eba:	bd08      	pop	{r3, pc}
    5ebc:	1fff8cf4 	.word	0x1fff8cf4

00005ec0 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5ec0:	b086      	sub	sp, #24
    5ec2:	9003      	str	r0, [sp, #12]
    5ec4:	9102      	str	r1, [sp, #8]
    5ec6:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5ec8:	23ff      	movs	r3, #255	; 0xff
    5eca:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5ecc:	9b03      	ldr	r3, [sp, #12]
    5ece:	4a39      	ldr	r2, [pc, #228]	; (5fb4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5ed0:	4293      	cmp	r3, r2
    5ed2:	d151      	bne.n	5f78 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5ed4:	9b02      	ldr	r3, [sp, #8]
    5ed6:	2b10      	cmp	r3, #16
    5ed8:	d867      	bhi.n	5faa <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5eda:	a201      	add	r2, pc, #4	; (adr r2, 5ee0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5ee0:	00005f25 	.word	0x00005f25
    5ee4:	00005f33 	.word	0x00005f33
    5ee8:	00005fab 	.word	0x00005fab
    5eec:	00005fab 	.word	0x00005fab
    5ef0:	00005fab 	.word	0x00005fab
    5ef4:	00005fab 	.word	0x00005fab
    5ef8:	00005fab 	.word	0x00005fab
    5efc:	00005fab 	.word	0x00005fab
    5f00:	00005fab 	.word	0x00005fab
    5f04:	00005fab 	.word	0x00005fab
    5f08:	00005fab 	.word	0x00005fab
    5f0c:	00005fab 	.word	0x00005fab
    5f10:	00005fab 	.word	0x00005fab
    5f14:	00005f41 	.word	0x00005f41
    5f18:	00005f4f 	.word	0x00005f4f
    5f1c:	00005f5d 	.word	0x00005f5d
    5f20:	00005f6b 	.word	0x00005f6b
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5f24:	2301      	movs	r3, #1
    5f26:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f28:	9a05      	ldr	r2, [sp, #20]
    5f2a:	9b01      	ldr	r3, [sp, #4]
    5f2c:	4313      	orrs	r3, r2
    5f2e:	9305      	str	r3, [sp, #20]
                break;
    5f30:	e03c      	b.n	5fac <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5f32:	2302      	movs	r3, #2
    5f34:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f36:	9a05      	ldr	r2, [sp, #20]
    5f38:	9b01      	ldr	r3, [sp, #4]
    5f3a:	4313      	orrs	r3, r2
    5f3c:	9305      	str	r3, [sp, #20]
                break;
    5f3e:	e035      	b.n	5fac <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5f40:	2304      	movs	r3, #4
    5f42:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f44:	9a05      	ldr	r2, [sp, #20]
    5f46:	9b01      	ldr	r3, [sp, #4]
    5f48:	4313      	orrs	r3, r2
    5f4a:	9305      	str	r3, [sp, #20]
                break;
    5f4c:	e02e      	b.n	5fac <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5f4e:	2308      	movs	r3, #8
    5f50:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f52:	9a05      	ldr	r2, [sp, #20]
    5f54:	9b01      	ldr	r3, [sp, #4]
    5f56:	4313      	orrs	r3, r2
    5f58:	9305      	str	r3, [sp, #20]
                break;
    5f5a:	e027      	b.n	5fac <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5f5c:	230e      	movs	r3, #14
    5f5e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f60:	9a05      	ldr	r2, [sp, #20]
    5f62:	9b01      	ldr	r3, [sp, #4]
    5f64:	4013      	ands	r3, r2
    5f66:	9305      	str	r3, [sp, #20]
                break;
    5f68:	e020      	b.n	5fac <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5f6a:	230d      	movs	r3, #13
    5f6c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f6e:	9a05      	ldr	r2, [sp, #20]
    5f70:	9b01      	ldr	r3, [sp, #4]
    5f72:	4013      	ands	r3, r2
    5f74:	9305      	str	r3, [sp, #20]
                break;
    5f76:	e019      	b.n	5fac <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5f78:	9b03      	ldr	r3, [sp, #12]
    5f7a:	4a0f      	ldr	r2, [pc, #60]	; (5fb8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5f7c:	4293      	cmp	r3, r2
    5f7e:	d115      	bne.n	5fac <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5f80:	9b02      	ldr	r3, [sp, #8]
    5f82:	2b00      	cmp	r3, #0
    5f84:	d003      	beq.n	5f8e <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5f86:	9b02      	ldr	r3, [sp, #8]
    5f88:	2b01      	cmp	r3, #1
    5f8a:	d007      	beq.n	5f9c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5f8c:	e00e      	b.n	5fac <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5f8e:	230b      	movs	r3, #11
    5f90:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f92:	9a05      	ldr	r2, [sp, #20]
    5f94:	9b01      	ldr	r3, [sp, #4]
    5f96:	4013      	ands	r3, r2
    5f98:	9305      	str	r3, [sp, #20]
                break;
    5f9a:	e007      	b.n	5fac <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5f9c:	2307      	movs	r3, #7
    5f9e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5fa0:	9a05      	ldr	r2, [sp, #20]
    5fa2:	9b01      	ldr	r3, [sp, #4]
    5fa4:	4013      	ands	r3, r2
    5fa6:	9305      	str	r3, [sp, #20]
                break;
    5fa8:	e000      	b.n	5fac <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5faa:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5fac:	9b05      	ldr	r3, [sp, #20]
}
    5fae:	4618      	mov	r0, r3
    5fb0:	b006      	add	sp, #24
    5fb2:	4770      	bx	lr
    5fb4:	4004a000 	.word	0x4004a000
    5fb8:	4004b000 	.word	0x4004b000

00005fbc <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5fbc:	b500      	push	{lr}
    5fbe:	b089      	sub	sp, #36	; 0x24
    5fc0:	9003      	str	r0, [sp, #12]
    5fc2:	9102      	str	r1, [sp, #8]
    5fc4:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5fc6:	9b01      	ldr	r3, [sp, #4]
    5fc8:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5fca:	9b01      	ldr	r3, [sp, #4]
    5fcc:	2b08      	cmp	r3, #8
    5fce:	d121      	bne.n	6014 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5fd0:	4b13      	ldr	r3, [pc, #76]	; (6020 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5fd2:	685b      	ldr	r3, [r3, #4]
    5fd4:	f003 030f 	and.w	r3, r3, #15
    5fd8:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5fda:	9a06      	ldr	r2, [sp, #24]
    5fdc:	9902      	ldr	r1, [sp, #8]
    5fde:	9803      	ldr	r0, [sp, #12]
    5fe0:	f7ff ff6e 	bl	5ec0 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    5fe4:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    5fe6:	9b05      	ldr	r3, [sp, #20]
    5fe8:	2bff      	cmp	r3, #255	; 0xff
    5fea:	d011      	beq.n	6010 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5fec:	f002 fd38 	bl	8a60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    5ff0:	4b0b      	ldr	r3, [pc, #44]	; (6020 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5ff2:	685b      	ldr	r3, [r3, #4]
    5ff4:	4a0a      	ldr	r2, [pc, #40]	; (6020 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5ff6:	f023 030f 	bic.w	r3, r3, #15
    5ffa:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5ffc:	4b08      	ldr	r3, [pc, #32]	; (6020 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5ffe:	685a      	ldr	r2, [r3, #4]
    6000:	9b05      	ldr	r3, [sp, #20]
    6002:	f003 030f 	and.w	r3, r3, #15
    6006:	4906      	ldr	r1, [pc, #24]	; (6020 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6008:	4313      	orrs	r3, r2
    600a:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    600c:	f002 fd54 	bl	8ab8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6010:	2300      	movs	r3, #0
    6012:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6014:	9b07      	ldr	r3, [sp, #28]
}
    6016:	4618      	mov	r0, r3
    6018:	b009      	add	sp, #36	; 0x24
    601a:	f85d fb04 	ldr.w	pc, [sp], #4
    601e:	bf00      	nop
    6020:	40048000 	.word	0x40048000

00006024 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6024:	b500      	push	{lr}
    6026:	b087      	sub	sp, #28
    6028:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    602a:	2300      	movs	r3, #0
    602c:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    602e:	2300      	movs	r3, #0
    6030:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    6032:	2300      	movs	r3, #0
    6034:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    6036:	9b01      	ldr	r3, [sp, #4]
    6038:	68db      	ldr	r3, [r3, #12]
    603a:	2b02      	cmp	r3, #2
    603c:	d00a      	beq.n	6054 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    603e:	9b05      	ldr	r3, [sp, #20]
    6040:	f043 0302 	orr.w	r3, r3, #2
    6044:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    6046:	9b01      	ldr	r3, [sp, #4]
    6048:	68db      	ldr	r3, [r3, #12]
    604a:	f003 0301 	and.w	r3, r3, #1
    604e:	9a05      	ldr	r2, [sp, #20]
    6050:	4313      	orrs	r3, r2
    6052:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    6054:	9b01      	ldr	r3, [sp, #4]
    6056:	699b      	ldr	r3, [r3, #24]
    6058:	019b      	lsls	r3, r3, #6
    605a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    605e:	9a05      	ldr	r2, [sp, #20]
    6060:	4313      	orrs	r3, r2
    6062:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    6064:	9b01      	ldr	r3, [sp, #4]
    6066:	6a1b      	ldr	r3, [r3, #32]
    6068:	03db      	lsls	r3, r3, #15
    606a:	b29b      	uxth	r3, r3
    606c:	9a05      	ldr	r2, [sp, #20]
    606e:	4313      	orrs	r3, r2
    6070:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    6072:	9b01      	ldr	r3, [sp, #4]
    6074:	7f1b      	ldrb	r3, [r3, #28]
    6076:	2b00      	cmp	r3, #0
    6078:	d001      	beq.n	607e <Port_Ci_Port_Ip_PinInit+0x5a>
    607a:	2310      	movs	r3, #16
    607c:	e000      	b.n	6080 <Port_Ci_Port_Ip_PinInit+0x5c>
    607e:	2300      	movs	r3, #0
    6080:	9a05      	ldr	r2, [sp, #20]
    6082:	4313      	orrs	r3, r2
    6084:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    6086:	9b01      	ldr	r3, [sp, #4]
    6088:	691b      	ldr	r3, [r3, #16]
    608a:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    608c:	9b01      	ldr	r3, [sp, #4]
    608e:	6818      	ldr	r0, [r3, #0]
    6090:	9b01      	ldr	r3, [sp, #4]
    6092:	689b      	ldr	r3, [r3, #8]
    6094:	9a04      	ldr	r2, [sp, #16]
    6096:	4619      	mov	r1, r3
    6098:	f7ff ff90 	bl	5fbc <Port_Ci_Port_Ip_ConfigureInterleave>
    609c:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    609e:	9b03      	ldr	r3, [sp, #12]
    60a0:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    60a2:	9b04      	ldr	r3, [sp, #16]
    60a4:	021b      	lsls	r3, r3, #8
    60a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    60aa:	9a05      	ldr	r2, [sp, #20]
    60ac:	4313      	orrs	r3, r2
    60ae:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    60b0:	f002 fb3c 	bl	872c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    60b4:	9b01      	ldr	r3, [sp, #4]
    60b6:	681b      	ldr	r3, [r3, #0]
    60b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    60bc:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    60be:	9b01      	ldr	r3, [sp, #4]
    60c0:	689b      	ldr	r3, [r3, #8]
    60c2:	2201      	movs	r2, #1
    60c4:	fa02 f303 	lsl.w	r3, r2, r3
    60c8:	43db      	mvns	r3, r3
    60ca:	9a02      	ldr	r2, [sp, #8]
    60cc:	4013      	ands	r3, r2
    60ce:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    60d0:	9b01      	ldr	r3, [sp, #4]
    60d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    60d6:	2b00      	cmp	r3, #0
    60d8:	d001      	beq.n	60de <Port_Ci_Port_Ip_PinInit+0xba>
    60da:	2201      	movs	r2, #1
    60dc:	e000      	b.n	60e0 <Port_Ci_Port_Ip_PinInit+0xbc>
    60de:	2200      	movs	r2, #0
    60e0:	9b01      	ldr	r3, [sp, #4]
    60e2:	689b      	ldr	r3, [r3, #8]
    60e4:	fa02 f303 	lsl.w	r3, r2, r3
    60e8:	9a02      	ldr	r2, [sp, #8]
    60ea:	4313      	orrs	r3, r2
    60ec:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    60ee:	9b01      	ldr	r3, [sp, #4]
    60f0:	681b      	ldr	r3, [r3, #0]
    60f2:	9a02      	ldr	r2, [sp, #8]
    60f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    60f8:	f002 fb44 	bl	8784 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    60fc:	9b04      	ldr	r3, [sp, #16]
    60fe:	2b01      	cmp	r3, #1
    6100:	d16d      	bne.n	61de <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6102:	9b01      	ldr	r3, [sp, #4]
    6104:	695b      	ldr	r3, [r3, #20]
    6106:	2b02      	cmp	r3, #2
    6108:	d138      	bne.n	617c <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    610a:	9b01      	ldr	r3, [sp, #4]
    610c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6110:	2b01      	cmp	r3, #1
    6112:	d10f      	bne.n	6134 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6114:	f002 fb5c 	bl	87d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6118:	9b01      	ldr	r3, [sp, #4]
    611a:	685b      	ldr	r3, [r3, #4]
    611c:	6859      	ldr	r1, [r3, #4]
    611e:	9b01      	ldr	r3, [sp, #4]
    6120:	689b      	ldr	r3, [r3, #8]
    6122:	2201      	movs	r2, #1
    6124:	409a      	lsls	r2, r3
    6126:	9b01      	ldr	r3, [sp, #4]
    6128:	685b      	ldr	r3, [r3, #4]
    612a:	430a      	orrs	r2, r1
    612c:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    612e:	f002 fb7b 	bl	8828 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    6132:	e013      	b.n	615c <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6134:	9b01      	ldr	r3, [sp, #4]
    6136:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    613a:	2b00      	cmp	r3, #0
    613c:	d10e      	bne.n	615c <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    613e:	f002 fb99 	bl	8874 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    6142:	9b01      	ldr	r3, [sp, #4]
    6144:	685b      	ldr	r3, [r3, #4]
    6146:	6899      	ldr	r1, [r3, #8]
    6148:	9b01      	ldr	r3, [sp, #4]
    614a:	689b      	ldr	r3, [r3, #8]
    614c:	2201      	movs	r2, #1
    614e:	409a      	lsls	r2, r3
    6150:	9b01      	ldr	r3, [sp, #4]
    6152:	685b      	ldr	r3, [r3, #4]
    6154:	430a      	orrs	r2, r1
    6156:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6158:	f002 fbb8 	bl	88cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    615c:	f002 fbdc 	bl	8918 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6160:	9b01      	ldr	r3, [sp, #4]
    6162:	685b      	ldr	r3, [r3, #4]
    6164:	6959      	ldr	r1, [r3, #20]
    6166:	9b01      	ldr	r3, [sp, #4]
    6168:	689b      	ldr	r3, [r3, #8]
    616a:	2201      	movs	r2, #1
    616c:	409a      	lsls	r2, r3
    616e:	9b01      	ldr	r3, [sp, #4]
    6170:	685b      	ldr	r3, [r3, #4]
    6172:	430a      	orrs	r2, r1
    6174:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6176:	f002 fbfb 	bl	8970 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    617a:	e030      	b.n	61de <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    617c:	f002 fbcc 	bl	8918 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    6180:	9b01      	ldr	r3, [sp, #4]
    6182:	685b      	ldr	r3, [r3, #4]
    6184:	6959      	ldr	r1, [r3, #20]
    6186:	9b01      	ldr	r3, [sp, #4]
    6188:	689b      	ldr	r3, [r3, #8]
    618a:	2201      	movs	r2, #1
    618c:	fa02 f303 	lsl.w	r3, r2, r3
    6190:	43da      	mvns	r2, r3
    6192:	9b01      	ldr	r3, [sp, #4]
    6194:	685b      	ldr	r3, [r3, #4]
    6196:	400a      	ands	r2, r1
    6198:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    619a:	f002 fbe9 	bl	8970 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    619e:	f002 fc0d 	bl	89bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    61a2:	9b01      	ldr	r3, [sp, #4]
    61a4:	685b      	ldr	r3, [r3, #4]
    61a6:	6999      	ldr	r1, [r3, #24]
    61a8:	9b01      	ldr	r3, [sp, #4]
    61aa:	689b      	ldr	r3, [r3, #8]
    61ac:	2201      	movs	r2, #1
    61ae:	fa02 f303 	lsl.w	r3, r2, r3
    61b2:	43da      	mvns	r2, r3
    61b4:	9b01      	ldr	r3, [sp, #4]
    61b6:	685b      	ldr	r3, [r3, #4]
    61b8:	400a      	ands	r2, r1
    61ba:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    61bc:	9b01      	ldr	r3, [sp, #4]
    61be:	695b      	ldr	r3, [r3, #20]
    61c0:	2b03      	cmp	r3, #3
    61c2:	d10a      	bne.n	61da <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    61c4:	9b01      	ldr	r3, [sp, #4]
    61c6:	685b      	ldr	r3, [r3, #4]
    61c8:	6999      	ldr	r1, [r3, #24]
    61ca:	9b01      	ldr	r3, [sp, #4]
    61cc:	689b      	ldr	r3, [r3, #8]
    61ce:	2201      	movs	r2, #1
    61d0:	409a      	lsls	r2, r3
    61d2:	9b01      	ldr	r3, [sp, #4]
    61d4:	685b      	ldr	r3, [r3, #4]
    61d6:	430a      	orrs	r2, r1
    61d8:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    61da:	f002 fc1b 	bl	8a14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    61de:	9b01      	ldr	r3, [sp, #4]
    61e0:	681b      	ldr	r3, [r3, #0]
    61e2:	9a01      	ldr	r2, [sp, #4]
    61e4:	6892      	ldr	r2, [r2, #8]
    61e6:	9905      	ldr	r1, [sp, #20]
    61e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    61ec:	bf00      	nop
    61ee:	b007      	add	sp, #28
    61f0:	f85d fb04 	ldr.w	pc, [sp], #4

000061f4 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    61f4:	b500      	push	{lr}
    61f6:	b085      	sub	sp, #20
    61f8:	9001      	str	r0, [sp, #4]
    61fa:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    61fc:	2300      	movs	r3, #0
    61fe:	9303      	str	r3, [sp, #12]
    6200:	e00d      	b.n	621e <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6202:	9a03      	ldr	r2, [sp, #12]
    6204:	4613      	mov	r3, r2
    6206:	009b      	lsls	r3, r3, #2
    6208:	4413      	add	r3, r2
    620a:	00db      	lsls	r3, r3, #3
    620c:	461a      	mov	r2, r3
    620e:	9b00      	ldr	r3, [sp, #0]
    6210:	4413      	add	r3, r2
    6212:	4618      	mov	r0, r3
    6214:	f7ff ff06 	bl	6024 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6218:	9b03      	ldr	r3, [sp, #12]
    621a:	3301      	adds	r3, #1
    621c:	9303      	str	r3, [sp, #12]
    621e:	9a03      	ldr	r2, [sp, #12]
    6220:	9b01      	ldr	r3, [sp, #4]
    6222:	429a      	cmp	r2, r3
    6224:	d3ed      	bcc.n	6202 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    6226:	2300      	movs	r3, #0
}
    6228:	4618      	mov	r0, r3
    622a:	b005      	add	sp, #20
    622c:	f85d fb04 	ldr.w	pc, [sp], #4

00006230 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6230:	b500      	push	{lr}
    6232:	b087      	sub	sp, #28
    6234:	9003      	str	r0, [sp, #12]
    6236:	9102      	str	r1, [sp, #8]
    6238:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    623a:	9a01      	ldr	r2, [sp, #4]
    623c:	9902      	ldr	r1, [sp, #8]
    623e:	9803      	ldr	r0, [sp, #12]
    6240:	f7ff febc 	bl	5fbc <Port_Ci_Port_Ip_ConfigureInterleave>
    6244:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    6246:	f002 fc5d 	bl	8b04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    624a:	9b03      	ldr	r3, [sp, #12]
    624c:	9a02      	ldr	r2, [sp, #8]
    624e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6252:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    6254:	9b04      	ldr	r3, [sp, #16]
    6256:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    625a:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    625c:	9b05      	ldr	r3, [sp, #20]
    625e:	021b      	lsls	r3, r3, #8
    6260:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6264:	9a04      	ldr	r2, [sp, #16]
    6266:	4313      	orrs	r3, r2
    6268:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    626a:	9b03      	ldr	r3, [sp, #12]
    626c:	9a02      	ldr	r2, [sp, #8]
    626e:	9904      	ldr	r1, [sp, #16]
    6270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6274:	f002 fc72 	bl	8b5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6278:	bf00      	nop
    627a:	b007      	add	sp, #28
    627c:	f85d fb04 	ldr.w	pc, [sp], #4

00006280 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6280:	b500      	push	{lr}
    6282:	b083      	sub	sp, #12
    6284:	9001      	str	r0, [sp, #4]
    6286:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    6288:	f002 fc8e 	bl	8ba8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    628c:	9b01      	ldr	r3, [sp, #4]
    628e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6292:	2101      	movs	r1, #1
    6294:	9b00      	ldr	r3, [sp, #0]
    6296:	fa01 f303 	lsl.w	r3, r1, r3
    629a:	431a      	orrs	r2, r3
    629c:	9b01      	ldr	r3, [sp, #4]
    629e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    62a2:	f002 fcad 	bl	8c00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    62a6:	bf00      	nop
    62a8:	b003      	add	sp, #12
    62aa:	f85d fb04 	ldr.w	pc, [sp], #4

000062ae <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    62ae:	b500      	push	{lr}
    62b0:	b083      	sub	sp, #12
    62b2:	9001      	str	r0, [sp, #4]
    62b4:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    62b6:	f002 fcc9 	bl	8c4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    62ba:	9b01      	ldr	r3, [sp, #4]
    62bc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    62c0:	2101      	movs	r1, #1
    62c2:	9b00      	ldr	r3, [sp, #0]
    62c4:	fa01 f303 	lsl.w	r3, r1, r3
    62c8:	43db      	mvns	r3, r3
    62ca:	401a      	ands	r2, r3
    62cc:	9b01      	ldr	r3, [sp, #4]
    62ce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    62d2:	f002 fce7 	bl	8ca4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    62d6:	bf00      	nop
    62d8:	b003      	add	sp, #12
    62da:	f85d fb04 	ldr.w	pc, [sp], #4

000062de <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    62de:	b082      	sub	sp, #8
    62e0:	9001      	str	r0, [sp, #4]
    62e2:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    62e4:	9b00      	ldr	r3, [sp, #0]
    62e6:	785b      	ldrb	r3, [r3, #1]
    62e8:	f003 0201 	and.w	r2, r3, #1
    62ec:	9b01      	ldr	r3, [sp, #4]
    62ee:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    62f2:	9b00      	ldr	r3, [sp, #0]
    62f4:	789b      	ldrb	r3, [r3, #2]
    62f6:	f003 021f 	and.w	r2, r3, #31
    62fa:	9b01      	ldr	r3, [sp, #4]
    62fc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6300:	bf00      	nop
    6302:	b002      	add	sp, #8
    6304:	4770      	bx	lr

00006306 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6306:	b086      	sub	sp, #24
    6308:	9003      	str	r0, [sp, #12]
    630a:	9301      	str	r3, [sp, #4]
    630c:	460b      	mov	r3, r1
    630e:	f8ad 300a 	strh.w	r3, [sp, #10]
    6312:	4613      	mov	r3, r2
    6314:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6318:	2300      	movs	r3, #0
    631a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    631e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6322:	f043 0301 	orr.w	r3, r3, #1
    6326:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    632a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    632e:	f043 0302 	orr.w	r3, r3, #2
    6332:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    6336:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    633a:	f043 0310 	orr.w	r3, r3, #16
    633e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    6342:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    634a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    634e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6352:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    6356:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    635a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    635e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    6362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    6366:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    636a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    636e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6372:	4013      	ands	r3, r2
    6374:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6378:	9b01      	ldr	r3, [sp, #4]
    637a:	2b00      	cmp	r3, #0
    637c:	d003      	beq.n	6386 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    637e:	9b01      	ldr	r3, [sp, #4]
    6380:	2b01      	cmp	r3, #1
    6382:	d00a      	beq.n	639a <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6384:	e013      	b.n	63ae <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    6386:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    638a:	041a      	lsls	r2, r3, #16
    638c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6390:	431a      	orrs	r2, r3
    6392:	9b03      	ldr	r3, [sp, #12]
    6394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6398:	e009      	b.n	63ae <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    639a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    639e:	041a      	lsls	r2, r3, #16
    63a0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63a4:	431a      	orrs	r2, r3
    63a6:	9b03      	ldr	r3, [sp, #12]
    63a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    63ac:	bf00      	nop
    }
}
    63ae:	bf00      	nop
    63b0:	b006      	add	sp, #24
    63b2:	4770      	bx	lr

000063b4 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    63b4:	b500      	push	{lr}
    63b6:	b087      	sub	sp, #28
    63b8:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    63ba:	9b01      	ldr	r3, [sp, #4]
    63bc:	885b      	ldrh	r3, [r3, #2]
    63be:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    63c2:	9b01      	ldr	r3, [sp, #4]
    63c4:	689b      	ldr	r3, [r3, #8]
    63c6:	7a1b      	ldrb	r3, [r3, #8]
    63c8:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    63cc:	9b01      	ldr	r3, [sp, #4]
    63ce:	689b      	ldr	r3, [r3, #8]
    63d0:	681b      	ldr	r3, [r3, #0]
    63d2:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    63d4:	9b01      	ldr	r3, [sp, #4]
    63d6:	689b      	ldr	r3, [r3, #8]
    63d8:	685b      	ldr	r3, [r3, #4]
    63da:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    63dc:	2300      	movs	r3, #0
    63de:	f8ad 3016 	strh.w	r3, [sp, #22]
    63e2:	e111      	b.n	6608 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    63e4:	9b02      	ldr	r3, [sp, #8]
    63e6:	2b02      	cmp	r3, #2
    63e8:	d169      	bne.n	64be <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    63ea:	f89d 3013 	ldrb.w	r3, [sp, #19]
    63ee:	2b01      	cmp	r3, #1
    63f0:	d11a      	bne.n	6428 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    63f2:	9b01      	ldr	r3, [sp, #4]
    63f4:	685a      	ldr	r2, [r3, #4]
    63f6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63fa:	005b      	lsls	r3, r3, #1
    63fc:	4413      	add	r3, r2
    63fe:	881b      	ldrh	r3, [r3, #0]
    6400:	f003 021f 	and.w	r2, r3, #31
    6404:	9b01      	ldr	r3, [sp, #4]
    6406:	6859      	ldr	r1, [r3, #4]
    6408:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    640c:	005b      	lsls	r3, r3, #1
    640e:	440b      	add	r3, r1
    6410:	881b      	ldrh	r3, [r3, #0]
    6412:	095b      	lsrs	r3, r3, #5
    6414:	b29b      	uxth	r3, r3
    6416:	4619      	mov	r1, r3
    6418:	4b81      	ldr	r3, [pc, #516]	; (6620 <Port_Ipw_Init_UnusedPins+0x26c>)
    641a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    641e:	2101      	movs	r1, #1
    6420:	fa01 f202 	lsl.w	r2, r1, r2
    6424:	605a      	str	r2, [r3, #4]
    6426:	e01d      	b.n	6464 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6428:	f89d 3013 	ldrb.w	r3, [sp, #19]
    642c:	2b00      	cmp	r3, #0
    642e:	d119      	bne.n	6464 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6430:	9b01      	ldr	r3, [sp, #4]
    6432:	685a      	ldr	r2, [r3, #4]
    6434:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6438:	005b      	lsls	r3, r3, #1
    643a:	4413      	add	r3, r2
    643c:	881b      	ldrh	r3, [r3, #0]
    643e:	f003 021f 	and.w	r2, r3, #31
    6442:	9b01      	ldr	r3, [sp, #4]
    6444:	6859      	ldr	r1, [r3, #4]
    6446:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    644a:	005b      	lsls	r3, r3, #1
    644c:	440b      	add	r3, r1
    644e:	881b      	ldrh	r3, [r3, #0]
    6450:	095b      	lsrs	r3, r3, #5
    6452:	b29b      	uxth	r3, r3
    6454:	4619      	mov	r1, r3
    6456:	4b72      	ldr	r3, [pc, #456]	; (6620 <Port_Ipw_Init_UnusedPins+0x26c>)
    6458:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    645c:	2101      	movs	r1, #1
    645e:	fa01 f202 	lsl.w	r2, r1, r2
    6462:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6464:	f002 fc44 	bl	8cf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6468:	9b01      	ldr	r3, [sp, #4]
    646a:	685a      	ldr	r2, [r3, #4]
    646c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6470:	005b      	lsls	r3, r3, #1
    6472:	4413      	add	r3, r2
    6474:	881b      	ldrh	r3, [r3, #0]
    6476:	095b      	lsrs	r3, r3, #5
    6478:	b29b      	uxth	r3, r3
    647a:	461a      	mov	r2, r3
    647c:	4b68      	ldr	r3, [pc, #416]	; (6620 <Port_Ipw_Init_UnusedPins+0x26c>)
    647e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6482:	6959      	ldr	r1, [r3, #20]
    6484:	9b01      	ldr	r3, [sp, #4]
    6486:	685a      	ldr	r2, [r3, #4]
    6488:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    648c:	005b      	lsls	r3, r3, #1
    648e:	4413      	add	r3, r2
    6490:	881b      	ldrh	r3, [r3, #0]
    6492:	f003 031f 	and.w	r3, r3, #31
    6496:	2201      	movs	r2, #1
    6498:	409a      	lsls	r2, r3
    649a:	9b01      	ldr	r3, [sp, #4]
    649c:	6858      	ldr	r0, [r3, #4]
    649e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64a2:	005b      	lsls	r3, r3, #1
    64a4:	4403      	add	r3, r0
    64a6:	881b      	ldrh	r3, [r3, #0]
    64a8:	095b      	lsrs	r3, r3, #5
    64aa:	b29b      	uxth	r3, r3
    64ac:	4618      	mov	r0, r3
    64ae:	4b5c      	ldr	r3, [pc, #368]	; (6620 <Port_Ipw_Init_UnusedPins+0x26c>)
    64b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    64b4:	430a      	orrs	r2, r1
    64b6:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    64b8:	f002 fc46 	bl	8d48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    64bc:	e086      	b.n	65cc <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    64be:	f002 fc17 	bl	8cf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    64c2:	9b01      	ldr	r3, [sp, #4]
    64c4:	685a      	ldr	r2, [r3, #4]
    64c6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64ca:	005b      	lsls	r3, r3, #1
    64cc:	4413      	add	r3, r2
    64ce:	881b      	ldrh	r3, [r3, #0]
    64d0:	095b      	lsrs	r3, r3, #5
    64d2:	b29b      	uxth	r3, r3
    64d4:	461a      	mov	r2, r3
    64d6:	4b52      	ldr	r3, [pc, #328]	; (6620 <Port_Ipw_Init_UnusedPins+0x26c>)
    64d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64dc:	6959      	ldr	r1, [r3, #20]
    64de:	9b01      	ldr	r3, [sp, #4]
    64e0:	685a      	ldr	r2, [r3, #4]
    64e2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64e6:	005b      	lsls	r3, r3, #1
    64e8:	4413      	add	r3, r2
    64ea:	881b      	ldrh	r3, [r3, #0]
    64ec:	f003 031f 	and.w	r3, r3, #31
    64f0:	2201      	movs	r2, #1
    64f2:	fa02 f303 	lsl.w	r3, r2, r3
    64f6:	43da      	mvns	r2, r3
    64f8:	9b01      	ldr	r3, [sp, #4]
    64fa:	6858      	ldr	r0, [r3, #4]
    64fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6500:	005b      	lsls	r3, r3, #1
    6502:	4403      	add	r3, r0
    6504:	881b      	ldrh	r3, [r3, #0]
    6506:	095b      	lsrs	r3, r3, #5
    6508:	b29b      	uxth	r3, r3
    650a:	4618      	mov	r0, r3
    650c:	4b44      	ldr	r3, [pc, #272]	; (6620 <Port_Ipw_Init_UnusedPins+0x26c>)
    650e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6512:	400a      	ands	r2, r1
    6514:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6516:	f002 fc17 	bl	8d48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    651a:	f002 fc3b 	bl	8d94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    651e:	9b01      	ldr	r3, [sp, #4]
    6520:	685a      	ldr	r2, [r3, #4]
    6522:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6526:	005b      	lsls	r3, r3, #1
    6528:	4413      	add	r3, r2
    652a:	881b      	ldrh	r3, [r3, #0]
    652c:	095b      	lsrs	r3, r3, #5
    652e:	b29b      	uxth	r3, r3
    6530:	461a      	mov	r2, r3
    6532:	4b3b      	ldr	r3, [pc, #236]	; (6620 <Port_Ipw_Init_UnusedPins+0x26c>)
    6534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6538:	6999      	ldr	r1, [r3, #24]
    653a:	9b01      	ldr	r3, [sp, #4]
    653c:	685a      	ldr	r2, [r3, #4]
    653e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6542:	005b      	lsls	r3, r3, #1
    6544:	4413      	add	r3, r2
    6546:	881b      	ldrh	r3, [r3, #0]
    6548:	f003 031f 	and.w	r3, r3, #31
    654c:	2201      	movs	r2, #1
    654e:	fa02 f303 	lsl.w	r3, r2, r3
    6552:	43da      	mvns	r2, r3
    6554:	9b01      	ldr	r3, [sp, #4]
    6556:	6858      	ldr	r0, [r3, #4]
    6558:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    655c:	005b      	lsls	r3, r3, #1
    655e:	4403      	add	r3, r0
    6560:	881b      	ldrh	r3, [r3, #0]
    6562:	095b      	lsrs	r3, r3, #5
    6564:	b29b      	uxth	r3, r3
    6566:	4618      	mov	r0, r3
    6568:	4b2d      	ldr	r3, [pc, #180]	; (6620 <Port_Ipw_Init_UnusedPins+0x26c>)
    656a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    656e:	400a      	ands	r2, r1
    6570:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6572:	9b02      	ldr	r3, [sp, #8]
    6574:	2b03      	cmp	r3, #3
    6576:	d127      	bne.n	65c8 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6578:	9b01      	ldr	r3, [sp, #4]
    657a:	685a      	ldr	r2, [r3, #4]
    657c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6580:	005b      	lsls	r3, r3, #1
    6582:	4413      	add	r3, r2
    6584:	881b      	ldrh	r3, [r3, #0]
    6586:	095b      	lsrs	r3, r3, #5
    6588:	b29b      	uxth	r3, r3
    658a:	461a      	mov	r2, r3
    658c:	4b24      	ldr	r3, [pc, #144]	; (6620 <Port_Ipw_Init_UnusedPins+0x26c>)
    658e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6592:	6999      	ldr	r1, [r3, #24]
    6594:	9b01      	ldr	r3, [sp, #4]
    6596:	685a      	ldr	r2, [r3, #4]
    6598:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    659c:	005b      	lsls	r3, r3, #1
    659e:	4413      	add	r3, r2
    65a0:	881b      	ldrh	r3, [r3, #0]
    65a2:	f003 031f 	and.w	r3, r3, #31
    65a6:	2201      	movs	r2, #1
    65a8:	409a      	lsls	r2, r3
    65aa:	9b01      	ldr	r3, [sp, #4]
    65ac:	6858      	ldr	r0, [r3, #4]
    65ae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65b2:	005b      	lsls	r3, r3, #1
    65b4:	4403      	add	r3, r0
    65b6:	881b      	ldrh	r3, [r3, #0]
    65b8:	095b      	lsrs	r3, r3, #5
    65ba:	b29b      	uxth	r3, r3
    65bc:	4618      	mov	r0, r3
    65be:	4b18      	ldr	r3, [pc, #96]	; (6620 <Port_Ipw_Init_UnusedPins+0x26c>)
    65c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    65c4:	430a      	orrs	r2, r1
    65c6:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    65c8:	f002 fc10 	bl	8dec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    65cc:	9b01      	ldr	r3, [sp, #4]
    65ce:	685a      	ldr	r2, [r3, #4]
    65d0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65d4:	005b      	lsls	r3, r3, #1
    65d6:	4413      	add	r3, r2
    65d8:	881b      	ldrh	r3, [r3, #0]
    65da:	095b      	lsrs	r3, r3, #5
    65dc:	b29b      	uxth	r3, r3
    65de:	461a      	mov	r2, r3
    65e0:	4b10      	ldr	r3, [pc, #64]	; (6624 <Port_Ipw_Init_UnusedPins+0x270>)
    65e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    65e6:	9a01      	ldr	r2, [sp, #4]
    65e8:	6851      	ldr	r1, [r2, #4]
    65ea:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    65ee:	0052      	lsls	r2, r2, #1
    65f0:	440a      	add	r2, r1
    65f2:	8812      	ldrh	r2, [r2, #0]
    65f4:	f002 021f 	and.w	r2, r2, #31
    65f8:	9903      	ldr	r1, [sp, #12]
    65fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    65fe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6602:	3301      	adds	r3, #1
    6604:	f8ad 3016 	strh.w	r3, [sp, #22]
    6608:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    660c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6610:	429a      	cmp	r2, r3
    6612:	f4ff aee7 	bcc.w	63e4 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6616:	bf00      	nop
    6618:	bf00      	nop
    661a:	b007      	add	sp, #28
    661c:	f85d fb04 	ldr.w	pc, [sp], #4
    6620:	0000adb8 	.word	0x0000adb8
    6624:	0000ada4 	.word	0x0000ada4

00006628 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6628:	b500      	push	{lr}
    662a:	b085      	sub	sp, #20
    662c:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    662e:	9b01      	ldr	r3, [sp, #4]
    6630:	7c1b      	ldrb	r3, [r3, #16]
    6632:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6636:	2300      	movs	r3, #0
    6638:	f8ad 300e 	strh.w	r3, [sp, #14]
    663c:	e035      	b.n	66aa <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    663e:	9b01      	ldr	r3, [sp, #4]
    6640:	695a      	ldr	r2, [r3, #20]
    6642:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6646:	00db      	lsls	r3, r3, #3
    6648:	4413      	add	r3, r2
    664a:	781b      	ldrb	r3, [r3, #0]
    664c:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6650:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6654:	4a1f      	ldr	r2, [pc, #124]	; (66d4 <Port_Ipw_Init+0xac>)
    6656:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    665a:	9b01      	ldr	r3, [sp, #4]
    665c:	695a      	ldr	r2, [r3, #20]
    665e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6662:	00db      	lsls	r3, r3, #3
    6664:	4413      	add	r3, r2
    6666:	4619      	mov	r1, r3
    6668:	f7ff fe39 	bl	62de <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    666c:	f002 fd2c 	bl	90c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6670:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6674:	4a17      	ldr	r2, [pc, #92]	; (66d4 <Port_Ipw_Init+0xac>)
    6676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    667a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    667e:	9b01      	ldr	r3, [sp, #4]
    6680:	695a      	ldr	r2, [r3, #20]
    6682:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6686:	00db      	lsls	r3, r3, #3
    6688:	4413      	add	r3, r2
    668a:	685a      	ldr	r2, [r3, #4]
    668c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6690:	4810      	ldr	r0, [pc, #64]	; (66d4 <Port_Ipw_Init+0xac>)
    6692:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6696:	430a      	orrs	r2, r1
    6698:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    669c:	f002 fd40 	bl	9120 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    66a0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    66a4:	3301      	adds	r3, #1
    66a6:	f8ad 300e 	strh.w	r3, [sp, #14]
    66aa:	f89d 300d 	ldrb.w	r3, [sp, #13]
    66ae:	b29b      	uxth	r3, r3
    66b0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66b4:	429a      	cmp	r2, r3
    66b6:	d3c2      	bcc.n	663e <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    66b8:	9b01      	ldr	r3, [sp, #4]
    66ba:	6a1b      	ldr	r3, [r3, #32]
    66bc:	4619      	mov	r1, r3
    66be:	2005      	movs	r0, #5
    66c0:	f7ff fd98 	bl	61f4 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    66c4:	9801      	ldr	r0, [sp, #4]
    66c6:	f7ff fe75 	bl	63b4 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    66ca:	bf00      	nop
    66cc:	b005      	add	sp, #20
    66ce:	f85d fb04 	ldr.w	pc, [sp], #4
    66d2:	bf00      	nop
    66d4:	0000ada4 	.word	0x0000ada4

000066d8 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    66d8:	b500      	push	{lr}
    66da:	b085      	sub	sp, #20
    66dc:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    66de:	9b01      	ldr	r3, [sp, #4]
    66e0:	881b      	ldrh	r3, [r3, #0]
    66e2:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    66e6:	2300      	movs	r3, #0
    66e8:	f8ad 300e 	strh.w	r3, [sp, #14]
    66ec:	e0d2      	b.n	6894 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    66ee:	9b01      	ldr	r3, [sp, #4]
    66f0:	68d9      	ldr	r1, [r3, #12]
    66f2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66f6:	4613      	mov	r3, r2
    66f8:	009b      	lsls	r3, r3, #2
    66fa:	4413      	add	r3, r2
    66fc:	009b      	lsls	r3, r3, #2
    66fe:	440b      	add	r3, r1
    6700:	7c5b      	ldrb	r3, [r3, #17]
    6702:	f083 0301 	eor.w	r3, r3, #1
    6706:	b2db      	uxtb	r3, r3
    6708:	2b00      	cmp	r3, #0
    670a:	f000 80be 	beq.w	688a <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    670e:	9b01      	ldr	r3, [sp, #4]
    6710:	68d9      	ldr	r1, [r3, #12]
    6712:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6716:	4613      	mov	r3, r2
    6718:	009b      	lsls	r3, r3, #2
    671a:	4413      	add	r3, r2
    671c:	009b      	lsls	r3, r3, #2
    671e:	440b      	add	r3, r1
    6720:	7c1b      	ldrb	r3, [r3, #16]
    6722:	2b00      	cmp	r3, #0
    6724:	f000 80b1 	beq.w	688a <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    6728:	9b01      	ldr	r3, [sp, #4]
    672a:	68d9      	ldr	r1, [r3, #12]
    672c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6730:	4613      	mov	r3, r2
    6732:	009b      	lsls	r3, r3, #2
    6734:	4413      	add	r3, r2
    6736:	009b      	lsls	r3, r3, #2
    6738:	440b      	add	r3, r1
    673a:	881b      	ldrh	r3, [r3, #0]
    673c:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6740:	9b01      	ldr	r3, [sp, #4]
    6742:	68d9      	ldr	r1, [r3, #12]
    6744:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6748:	4613      	mov	r3, r2
    674a:	009b      	lsls	r3, r3, #2
    674c:	4413      	add	r3, r2
    674e:	009b      	lsls	r3, r3, #2
    6750:	440b      	add	r3, r1
    6752:	68db      	ldr	r3, [r3, #12]
    6754:	2b02      	cmp	r3, #2
    6756:	d11d      	bne.n	6794 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6758:	f002 fdfe 	bl	9358 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    675c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6760:	095b      	lsrs	r3, r3, #5
    6762:	b29b      	uxth	r3, r3
    6764:	461a      	mov	r2, r3
    6766:	4b51      	ldr	r3, [pc, #324]	; (68ac <Port_Ipw_RefreshPortDirection+0x1d4>)
    6768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    676c:	6959      	ldr	r1, [r3, #20]
    676e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6772:	f003 031f 	and.w	r3, r3, #31
    6776:	2201      	movs	r2, #1
    6778:	409a      	lsls	r2, r3
    677a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    677e:	095b      	lsrs	r3, r3, #5
    6780:	b29b      	uxth	r3, r3
    6782:	4618      	mov	r0, r3
    6784:	4b49      	ldr	r3, [pc, #292]	; (68ac <Port_Ipw_RefreshPortDirection+0x1d4>)
    6786:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    678a:	430a      	orrs	r2, r1
    678c:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    678e:	f002 fe0f 	bl	93b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    6792:	e07a      	b.n	688a <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    6794:	9b01      	ldr	r3, [sp, #4]
    6796:	68d9      	ldr	r1, [r3, #12]
    6798:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    679c:	4613      	mov	r3, r2
    679e:	009b      	lsls	r3, r3, #2
    67a0:	4413      	add	r3, r2
    67a2:	009b      	lsls	r3, r3, #2
    67a4:	440b      	add	r3, r1
    67a6:	68db      	ldr	r3, [r3, #12]
    67a8:	2b01      	cmp	r3, #1
    67aa:	d00b      	beq.n	67c4 <Port_Ipw_RefreshPortDirection+0xec>
    67ac:	9b01      	ldr	r3, [sp, #4]
    67ae:	68d9      	ldr	r1, [r3, #12]
    67b0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67b4:	4613      	mov	r3, r2
    67b6:	009b      	lsls	r3, r3, #2
    67b8:	4413      	add	r3, r2
    67ba:	009b      	lsls	r3, r3, #2
    67bc:	440b      	add	r3, r1
    67be:	68db      	ldr	r3, [r3, #12]
    67c0:	2b03      	cmp	r3, #3
    67c2:	d162      	bne.n	688a <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    67c4:	f002 fdc8 	bl	9358 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    67c8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67cc:	095b      	lsrs	r3, r3, #5
    67ce:	b29b      	uxth	r3, r3
    67d0:	461a      	mov	r2, r3
    67d2:	4b36      	ldr	r3, [pc, #216]	; (68ac <Port_Ipw_RefreshPortDirection+0x1d4>)
    67d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    67d8:	6959      	ldr	r1, [r3, #20]
    67da:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67de:	f003 031f 	and.w	r3, r3, #31
    67e2:	2201      	movs	r2, #1
    67e4:	fa02 f303 	lsl.w	r3, r2, r3
    67e8:	43da      	mvns	r2, r3
    67ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67ee:	095b      	lsrs	r3, r3, #5
    67f0:	b29b      	uxth	r3, r3
    67f2:	4618      	mov	r0, r3
    67f4:	4b2d      	ldr	r3, [pc, #180]	; (68ac <Port_Ipw_RefreshPortDirection+0x1d4>)
    67f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67fa:	400a      	ands	r2, r1
    67fc:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    67fe:	f002 fdd7 	bl	93b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    6802:	f002 fdfb 	bl	93fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6806:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    680a:	095b      	lsrs	r3, r3, #5
    680c:	b29b      	uxth	r3, r3
    680e:	461a      	mov	r2, r3
    6810:	4b26      	ldr	r3, [pc, #152]	; (68ac <Port_Ipw_RefreshPortDirection+0x1d4>)
    6812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6816:	6999      	ldr	r1, [r3, #24]
    6818:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    681c:	f003 031f 	and.w	r3, r3, #31
    6820:	2201      	movs	r2, #1
    6822:	fa02 f303 	lsl.w	r3, r2, r3
    6826:	43da      	mvns	r2, r3
    6828:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    682c:	095b      	lsrs	r3, r3, #5
    682e:	b29b      	uxth	r3, r3
    6830:	4618      	mov	r0, r3
    6832:	4b1e      	ldr	r3, [pc, #120]	; (68ac <Port_Ipw_RefreshPortDirection+0x1d4>)
    6834:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6838:	400a      	ands	r2, r1
    683a:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    683c:	9b01      	ldr	r3, [sp, #4]
    683e:	68d9      	ldr	r1, [r3, #12]
    6840:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6844:	4613      	mov	r3, r2
    6846:	009b      	lsls	r3, r3, #2
    6848:	4413      	add	r3, r2
    684a:	009b      	lsls	r3, r3, #2
    684c:	440b      	add	r3, r1
    684e:	68db      	ldr	r3, [r3, #12]
    6850:	2b03      	cmp	r3, #3
    6852:	d118      	bne.n	6886 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6854:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6858:	095b      	lsrs	r3, r3, #5
    685a:	b29b      	uxth	r3, r3
    685c:	461a      	mov	r2, r3
    685e:	4b13      	ldr	r3, [pc, #76]	; (68ac <Port_Ipw_RefreshPortDirection+0x1d4>)
    6860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6864:	6999      	ldr	r1, [r3, #24]
    6866:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    686a:	f003 031f 	and.w	r3, r3, #31
    686e:	2201      	movs	r2, #1
    6870:	409a      	lsls	r2, r3
    6872:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6876:	095b      	lsrs	r3, r3, #5
    6878:	b29b      	uxth	r3, r3
    687a:	4618      	mov	r0, r3
    687c:	4b0b      	ldr	r3, [pc, #44]	; (68ac <Port_Ipw_RefreshPortDirection+0x1d4>)
    687e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6882:	430a      	orrs	r2, r1
    6884:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    6886:	f002 fde5 	bl	9454 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    688a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    688e:	3301      	adds	r3, #1
    6890:	f8ad 300e 	strh.w	r3, [sp, #14]
    6894:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6898:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    689c:	429a      	cmp	r2, r3
    689e:	f4ff af26 	bcc.w	66ee <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    68a2:	bf00      	nop
    68a4:	bf00      	nop
    68a6:	b005      	add	sp, #20
    68a8:	f85d fb04 	ldr.w	pc, [sp], #4
    68ac:	0000adb8 	.word	0x0000adb8

000068b0 <Lpspi_Ip_ChannelFinished>:
* @param[in]     Instance            Index of the hardware instance.
* @param[in]     ErrorFlag           Save the status of transfer error flags
* @return void
*/
static void Lpspi_Ip_ChannelFinished(uint8 Instance, boolean ErrorFlag)
{
    68b0:	b500      	push	{lr}
    68b2:	b085      	sub	sp, #20
    68b4:	4603      	mov	r3, r0
    68b6:	460a      	mov	r2, r1
    68b8:	f88d 3007 	strb.w	r3, [sp, #7]
    68bc:	4613      	mov	r3, r2
    68be:	f88d 3006 	strb.w	r3, [sp, #6]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    68c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68c6:	4a12      	ldr	r2, [pc, #72]	; (6910 <Lpspi_Ip_ChannelFinished+0x60>)
    68c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68cc:	9302      	str	r3, [sp, #8]
    Lpspi_Ip_EventType EventState = LPSPI_IP_EVENT_FAULT;
    68ce:	2301      	movs	r3, #1
    68d0:	9303      	str	r3, [sp, #12]
    
    if(TRUE == ErrorFlag)
    68d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    68d6:	2b00      	cmp	r3, #0
    68d8:	d005      	beq.n	68e6 <Lpspi_Ip_ChannelFinished+0x36>
    {
        State->Status = LPSPI_IP_FAULT;
    68da:	9b02      	ldr	r3, [sp, #8]
    68dc:	2203      	movs	r2, #3
    68de:	605a      	str	r2, [r3, #4]
        EventState = LPSPI_IP_EVENT_FAULT;
    68e0:	2301      	movs	r3, #1
    68e2:	9303      	str	r3, [sp, #12]
    68e4:	e004      	b.n	68f0 <Lpspi_Ip_ChannelFinished+0x40>
    }
    else
    {
        State->Status = LPSPI_IP_IDLE;
    68e6:	9b02      	ldr	r3, [sp, #8]
    68e8:	2201      	movs	r2, #1
    68ea:	605a      	str	r2, [r3, #4]
        EventState = LPSPI_IP_EVENT_END_TRANSFER;
    68ec:	2300      	movs	r3, #0
    68ee:	9303      	str	r3, [sp, #12]
    }

    if (NULL_PTR != State->Callback)
    68f0:	9b02      	ldr	r3, [sp, #8]
    68f2:	691b      	ldr	r3, [r3, #16]
    68f4:	2b00      	cmp	r3, #0
    68f6:	d006      	beq.n	6906 <Lpspi_Ip_ChannelFinished+0x56>
    {
        State->Callback(Instance, EventState);
    68f8:	9b02      	ldr	r3, [sp, #8]
    68fa:	691b      	ldr	r3, [r3, #16]
    68fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6900:	9903      	ldr	r1, [sp, #12]
    6902:	4610      	mov	r0, r2
    6904:	4798      	blx	r3
    }
}
    6906:	bf00      	nop
    6908:	b005      	add	sp, #20
    690a:	f85d fb04 	ldr.w	pc, [sp], #4
    690e:	bf00      	nop
    6910:	1fff8d38 	.word	0x1fff8d38

00006914 <Lpspi_Ip_TransferProcess>:
*
* @param[in]     Instance      Index of the hardware instance.
* @return void
*/
static void Lpspi_Ip_TransferProcess(uint8 Instance)
{
    6914:	b510      	push	{r4, lr}
    6916:	b092      	sub	sp, #72	; 0x48
    6918:	4603      	mov	r3, r0
    691a:	f88d 300f 	strb.w	r3, [sp, #15]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    691e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6922:	4aad      	ldr	r2, [pc, #692]	; (6bd8 <Lpspi_Ip_TransferProcess+0x2c4>)
    6924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6928:	9310      	str	r3, [sp, #64]	; 0x40
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    692a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    692e:	4aab      	ldr	r2, [pc, #684]	; (6bdc <Lpspi_Ip_TransferProcess+0x2c8>)
    6930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6934:	930f      	str	r3, [sp, #60]	; 0x3c
    uint32 SrStatusRegister;
    uint8 NumberOfWrites = 0u;
    6936:	2300      	movs	r3, #0
    6938:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    uint8 NumberOfReads = 0u;
    693c:	2300      	movs	r3, #0
    693e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    boolean ErrorFlag = FALSE;
    6942:	2300      	movs	r3, #0
    6944:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45

    if (LPSPI_IP_BUSY == State->Status)
    6948:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    694a:	685b      	ldr	r3, [r3, #4]
    694c:	2b02      	cmp	r3, #2
    694e:	f040 821e 	bne.w	6d8e <Lpspi_Ip_TransferProcess+0x47a>
    {
        /* Read Status and clear all flags. */
        SrStatusRegister = Base->SR;
    6952:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6954:	695b      	ldr	r3, [r3, #20]
    6956:	930e      	str	r3, [sp, #56]	; 0x38
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    6958:	9b10      	ldr	r3, [sp, #64]	; 0x40
    695a:	695b      	ldr	r3, [r3, #20]
    695c:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    6960:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6962:	615a      	str	r2, [r3, #20]
        
        if ((SrStatusRegister & (LPSPI_SR_REF_MASK | LPSPI_SR_TEF_MASK)) != 0u)
    6964:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6966:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    696a:	2b00      	cmp	r3, #0
    696c:	d003      	beq.n	6976 <Lpspi_Ip_TransferProcess+0x62>
        {
            /* mark error flag */
            ErrorFlag = TRUE;
    696e:	2301      	movs	r3, #1
    6970:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    6974:	e1f6      	b.n	6d64 <Lpspi_Ip_TransferProcess+0x450>
        }
        else
        {
            /* RECEIVE */
            /* Read all Data available in receive HW fifo. */
            NumberOfReads = (uint8)(((Base->FSR) & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
    6976:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    697a:	0c1b      	lsrs	r3, r3, #16
    697c:	b2db      	uxtb	r3, r3
    697e:	f003 0307 	and.w	r3, r3, #7
    6982:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
            if (NumberOfReads != 0u)
    6986:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    698a:	2b00      	cmp	r3, #0
    698c:	f000 80cb 	beq.w	6b26 <Lpspi_Ip_TransferProcess+0x212>
            {
                if (NumberOfReads > (State->ExpectedFifoReads - State->RxIndex))
    6990:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
    6994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6996:	8b1b      	ldrh	r3, [r3, #24]
    6998:	4619      	mov	r1, r3
    699a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    699c:	8a9b      	ldrh	r3, [r3, #20]
    699e:	1acb      	subs	r3, r1, r3
    69a0:	429a      	cmp	r2, r3
    69a2:	dd08      	ble.n	69b6 <Lpspi_Ip_TransferProcess+0xa2>
                {
                    NumberOfReads = (uint8)(State->ExpectedFifoReads - State->RxIndex);
    69a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69a6:	8b1b      	ldrh	r3, [r3, #24]
    69a8:	b2da      	uxtb	r2, r3
    69aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69ac:	8a9b      	ldrh	r3, [r3, #20]
    69ae:	b2db      	uxtb	r3, r3
    69b0:	1ad3      	subs	r3, r2, r3
    69b2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
                }
                /* If these are the first frames of this channel. Current TXFIFO slot must be plus 1 because the slot of CMD have moved out and
                  CurrentTxFifoSlot was minus 1 when prepare TX channel */
                if (0u == State->RxIndex)
    69b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69b8:	8a9b      	ldrh	r3, [r3, #20]
    69ba:	2b00      	cmp	r3, #0
    69bc:	d107      	bne.n	69ce <Lpspi_Ip_TransferProcess+0xba>
                {
                    State->CurrentTxFifoSlot += 1u;
    69be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    69c4:	3301      	adds	r3, #1
    69c6:	b2da      	uxtb	r2, r3
    69c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    69ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    69d2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    69d6:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    69da:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    const LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    69de:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    69e2:	4a7d      	ldr	r2, [pc, #500]	; (6bd8 <Lpspi_Ip_TransferProcess+0x2c4>)
    69e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69e8:	930c      	str	r3, [sp, #48]	; 0x30
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    69ea:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    69ee:	4a7b      	ldr	r2, [pc, #492]	; (6bdc <Lpspi_Ip_TransferProcess+0x2c8>)
    69f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69f4:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 Data = 0u;
    69f6:	2300      	movs	r3, #0
    69f8:	930a      	str	r3, [sp, #40]	; 0x28
    uint8 Index = 0u;
    69fa:	2300      	movs	r3, #0
    69fc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    if (NULL_PTR != State->RxBuffer)
    6a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a02:	689b      	ldr	r3, [r3, #8]
    6a04:	2b00      	cmp	r3, #0
    6a06:	d069      	beq.n	6adc <Lpspi_Ip_TransferProcess+0x1c8>
        if (State->ExternalDevice->DeviceParams->FrameSize < 9u)
    6a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a0c:	68db      	ldr	r3, [r3, #12]
    6a0e:	881b      	ldrh	r3, [r3, #0]
    6a10:	2b08      	cmp	r3, #8
    6a12:	d81e      	bhi.n	6a52 <Lpspi_Ip_TransferProcess+0x13e>
            for (Index = 0; Index < NumberOfReads; Index++)
    6a14:	2300      	movs	r3, #0
    6a16:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6a1a:	e013      	b.n	6a44 <Lpspi_Ip_TransferProcess+0x130>
                Data = Base->RDR;
    6a1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    6a20:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint8*)(&State->RxBuffer[State->RxIndex + Index])) = (uint8)Data;
    6a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a24:	689b      	ldr	r3, [r3, #8]
    6a26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6a28:	8a92      	ldrh	r2, [r2, #20]
    6a2a:	4611      	mov	r1, r2
    6a2c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    6a30:	440a      	add	r2, r1
    6a32:	4413      	add	r3, r2
    6a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6a36:	b2d2      	uxtb	r2, r2
    6a38:	701a      	strb	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    6a3a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6a3e:	3301      	adds	r3, #1
    6a40:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6a44:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    6a48:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6a4c:	429a      	cmp	r2, r3
    6a4e:	d8e5      	bhi.n	6a1c <Lpspi_Ip_TransferProcess+0x108>
    6a50:	e055      	b.n	6afe <Lpspi_Ip_TransferProcess+0x1ea>
        else if (State->ExternalDevice->DeviceParams->FrameSize < 17u)
    6a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a56:	68db      	ldr	r3, [r3, #12]
    6a58:	881b      	ldrh	r3, [r3, #0]
    6a5a:	2b10      	cmp	r3, #16
    6a5c:	d81f      	bhi.n	6a9e <Lpspi_Ip_TransferProcess+0x18a>
            for (Index = 0; Index < NumberOfReads; Index++)
    6a5e:	2300      	movs	r3, #0
    6a60:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6a64:	e014      	b.n	6a90 <Lpspi_Ip_TransferProcess+0x17c>
                Data = Base->RDR;
    6a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    6a6a:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint16*)(&State->RxBuffer[2u * (State->RxIndex + Index)])) = (uint16)Data;
    6a6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a6e:	689a      	ldr	r2, [r3, #8]
    6a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a72:	8a9b      	ldrh	r3, [r3, #20]
    6a74:	4619      	mov	r1, r3
    6a76:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6a7a:	440b      	add	r3, r1
    6a7c:	005b      	lsls	r3, r3, #1
    6a7e:	4413      	add	r3, r2
    6a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6a82:	b292      	uxth	r2, r2
    6a84:	801a      	strh	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    6a86:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6a8a:	3301      	adds	r3, #1
    6a8c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6a90:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    6a94:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6a98:	429a      	cmp	r2, r3
    6a9a:	d8e4      	bhi.n	6a66 <Lpspi_Ip_TransferProcess+0x152>
    6a9c:	e02f      	b.n	6afe <Lpspi_Ip_TransferProcess+0x1ea>
            for (Index = 0; Index < NumberOfReads; Index++)
    6a9e:	2300      	movs	r3, #0
    6aa0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6aa4:	e013      	b.n	6ace <Lpspi_Ip_TransferProcess+0x1ba>
                Data = Base->RDR;
    6aa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    6aaa:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint32*)(&State->RxBuffer[4u * (State->RxIndex + Index)])) = (uint32)Data;
    6aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6aae:	689a      	ldr	r2, [r3, #8]
    6ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6ab2:	8a9b      	ldrh	r3, [r3, #20]
    6ab4:	4619      	mov	r1, r3
    6ab6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6aba:	440b      	add	r3, r1
    6abc:	009b      	lsls	r3, r3, #2
    6abe:	4413      	add	r3, r2
    6ac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6ac2:	601a      	str	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    6ac4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6ac8:	3301      	adds	r3, #1
    6aca:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6ace:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    6ad2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6ad6:	429a      	cmp	r2, r3
    6ad8:	d8e5      	bhi.n	6aa6 <Lpspi_Ip_TransferProcess+0x192>
    6ada:	e010      	b.n	6afe <Lpspi_Ip_TransferProcess+0x1ea>
        for (Index = 0; Index < NumberOfReads; Index++)
    6adc:	2300      	movs	r3, #0
    6ade:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6ae2:	e006      	b.n	6af2 <Lpspi_Ip_TransferProcess+0x1de>
            (void)Base->RDR;
    6ae4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        for (Index = 0; Index < NumberOfReads; Index++)
    6ae8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6aec:	3301      	adds	r3, #1
    6aee:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6af2:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    6af6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6afa:	429a      	cmp	r2, r3
    6afc:	d8f2      	bhi.n	6ae4 <Lpspi_Ip_TransferProcess+0x1d0>
    State->RxIndex += NumberOfReads;
    6afe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6b00:	8a9a      	ldrh	r2, [r3, #20]
    6b02:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    6b06:	b29b      	uxth	r3, r3
    6b08:	4413      	add	r3, r2
    6b0a:	b29a      	uxth	r2, r3
    6b0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6b0e:	829a      	strh	r2, [r3, #20]
}
    6b10:	bf00      	nop
                }
                /* Read Data from RX FIFO */
                Lpspi_Ip_ReadDataFromFifo(Instance, NumberOfReads);
                /* Update current FIFO slots are available to fill .*/
                State->CurrentTxFifoSlot += NumberOfReads;
    6b12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b14:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    6b18:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    6b1c:	4413      	add	r3, r2
    6b1e:	b2da      	uxtb	r2, r3
    6b20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            to fill TX FIFO. At that time, another interrupt occurred and preemptive current interrupt, and the time to process that interrupt is longer than the time to transfer all frames 
            in TX FIFO. So TX FIFO will be empty and some frames received in RX FIFO, then the program is returned from that interrupt and fill TX FIFO until full and exist SPI interrupt function. 
            And if there is a interrupt occurred with higher priority of SPI interrupt and the time to process that interrupt is longer than the time to transfer all frames in TX FIFO. 
            So, RX FIFO can be overflow due to SPI interrupt function is not serviced to read RX FIFO.
            State->CurrentTxFifoSlot variable is used to hanlde number of frames are "on bus transfer". They are always less than FIFO size */
            if((State->CurrentTxFifoSlot != 0u) && (State->TxDoneFlag != TRUE))
    6b26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    6b2c:	2b00      	cmp	r3, #0
    6b2e:	f000 8119 	beq.w	6d64 <Lpspi_Ip_TransferProcess+0x450>
    6b32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    6b38:	f083 0301 	eor.w	r3, r3, #1
    6b3c:	b2db      	uxtb	r3, r3
    6b3e:	2b00      	cmp	r3, #0
    6b40:	f000 8110 	beq.w	6d64 <Lpspi_Ip_TransferProcess+0x450>
            {
                if(State->ExpectedFifoWrites != State->TxIndex)
    6b44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b46:	8b5a      	ldrh	r2, [r3, #26]
    6b48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b4a:	8adb      	ldrh	r3, [r3, #22]
    6b4c:	429a      	cmp	r2, r3
    6b4e:	f000 80ca 	beq.w	6ce6 <Lpspi_Ip_TransferProcess+0x3d2>
                {
                    NumberOfWrites = State->CurrentTxFifoSlot;
    6b52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    6b58:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
                    /* Limits to remaining frames. */
                    if (NumberOfWrites > (State->ExpectedFifoWrites - State->TxIndex))
    6b5c:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
    6b60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b62:	8b5b      	ldrh	r3, [r3, #26]
    6b64:	4619      	mov	r1, r3
    6b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b68:	8adb      	ldrh	r3, [r3, #22]
    6b6a:	1acb      	subs	r3, r1, r3
    6b6c:	429a      	cmp	r2, r3
    6b6e:	dd08      	ble.n	6b82 <Lpspi_Ip_TransferProcess+0x26e>
                    {
                        NumberOfWrites = (uint8)(State->ExpectedFifoWrites - State->TxIndex);
    6b70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b72:	8b5b      	ldrh	r3, [r3, #26]
    6b74:	b2da      	uxtb	r2, r3
    6b76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b78:	8adb      	ldrh	r3, [r3, #22]
    6b7a:	b2db      	uxtb	r3, r3
    6b7c:	1ad3      	subs	r3, r2, r3
    6b7e:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    6b82:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b86:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    6b8a:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    6b8e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    6b92:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    6b96:	4a10      	ldr	r2, [pc, #64]	; (6bd8 <Lpspi_Ip_TransferProcess+0x2c4>)
    6b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b9c:	9308      	str	r3, [sp, #32]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    6b9e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    6ba2:	4a0e      	ldr	r2, [pc, #56]	; (6bdc <Lpspi_Ip_TransferProcess+0x2c8>)
    6ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ba8:	9307      	str	r3, [sp, #28]
    uint32 Data = 0u;
    6baa:	2300      	movs	r3, #0
    6bac:	9306      	str	r3, [sp, #24]
    uint8 Index = 0u;
    6bae:	2300      	movs	r3, #0
    6bb0:	f88d 3017 	strb.w	r3, [sp, #23]
    Data = State->ExternalDevice->DeviceParams->DefaultData;
    6bb4:	9b07      	ldr	r3, [sp, #28]
    6bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6bb8:	68db      	ldr	r3, [r3, #12]
    6bba:	685b      	ldr	r3, [r3, #4]
    6bbc:	9306      	str	r3, [sp, #24]
    if (NULL_PTR != State->TxBuffer)
    6bbe:	9b07      	ldr	r3, [sp, #28]
    6bc0:	68db      	ldr	r3, [r3, #12]
    6bc2:	2b00      	cmp	r3, #0
    6bc4:	d068      	beq.n	6c98 <Lpspi_Ip_TransferProcess+0x384>
        if (State->TxFrameSize < 9u)
    6bc6:	9b07      	ldr	r3, [sp, #28]
    6bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    6bca:	2b08      	cmp	r3, #8
    6bcc:	d822      	bhi.n	6c14 <Lpspi_Ip_TransferProcess+0x300>
            for (Index = 0; Index < NumberOfWrites; Index++)
    6bce:	2300      	movs	r3, #0
    6bd0:	f88d 3017 	strb.w	r3, [sp, #23]
    6bd4:	e017      	b.n	6c06 <Lpspi_Ip_TransferProcess+0x2f2>
    6bd6:	bf00      	nop
    6bd8:	0000adcc 	.word	0x0000adcc
    6bdc:	1fff8d38 	.word	0x1fff8d38
                Data = *((const uint8*)(&State->TxBuffer[State->TxIndex + Index]));
    6be0:	9b07      	ldr	r3, [sp, #28]
    6be2:	68db      	ldr	r3, [r3, #12]
    6be4:	9a07      	ldr	r2, [sp, #28]
    6be6:	8ad2      	ldrh	r2, [r2, #22]
    6be8:	4611      	mov	r1, r2
    6bea:	f89d 2017 	ldrb.w	r2, [sp, #23]
    6bee:	440a      	add	r2, r1
    6bf0:	4413      	add	r3, r2
    6bf2:	781b      	ldrb	r3, [r3, #0]
    6bf4:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    6bf6:	9b08      	ldr	r3, [sp, #32]
    6bf8:	9a06      	ldr	r2, [sp, #24]
    6bfa:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    6bfc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c00:	3301      	adds	r3, #1
    6c02:	f88d 3017 	strb.w	r3, [sp, #23]
    6c06:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    6c0a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c0e:	429a      	cmp	r2, r3
    6c10:	d8e6      	bhi.n	6be0 <Lpspi_Ip_TransferProcess+0x2cc>
    6c12:	e053      	b.n	6cbc <Lpspi_Ip_TransferProcess+0x3a8>
        else if (State->TxFrameSize < 17u)
    6c14:	9b07      	ldr	r3, [sp, #28]
    6c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    6c18:	2b10      	cmp	r3, #16
    6c1a:	d81e      	bhi.n	6c5a <Lpspi_Ip_TransferProcess+0x346>
            for (Index = 0; Index < NumberOfWrites; Index++)
    6c1c:	2300      	movs	r3, #0
    6c1e:	f88d 3017 	strb.w	r3, [sp, #23]
    6c22:	e013      	b.n	6c4c <Lpspi_Ip_TransferProcess+0x338>
                Data = *((const uint16*)(&State->TxBuffer[2u * (State->TxIndex + Index)]));
    6c24:	9b07      	ldr	r3, [sp, #28]
    6c26:	68da      	ldr	r2, [r3, #12]
    6c28:	9b07      	ldr	r3, [sp, #28]
    6c2a:	8adb      	ldrh	r3, [r3, #22]
    6c2c:	4619      	mov	r1, r3
    6c2e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c32:	440b      	add	r3, r1
    6c34:	005b      	lsls	r3, r3, #1
    6c36:	4413      	add	r3, r2
    6c38:	881b      	ldrh	r3, [r3, #0]
    6c3a:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    6c3c:	9b08      	ldr	r3, [sp, #32]
    6c3e:	9a06      	ldr	r2, [sp, #24]
    6c40:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    6c42:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c46:	3301      	adds	r3, #1
    6c48:	f88d 3017 	strb.w	r3, [sp, #23]
    6c4c:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    6c50:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c54:	429a      	cmp	r2, r3
    6c56:	d8e5      	bhi.n	6c24 <Lpspi_Ip_TransferProcess+0x310>
    6c58:	e030      	b.n	6cbc <Lpspi_Ip_TransferProcess+0x3a8>
            for (Index = 0; Index < NumberOfWrites; Index++)
    6c5a:	2300      	movs	r3, #0
    6c5c:	f88d 3017 	strb.w	r3, [sp, #23]
    6c60:	e013      	b.n	6c8a <Lpspi_Ip_TransferProcess+0x376>
                Data = *((const uint32*)(&State->TxBuffer[4u * (State->TxIndex + Index)]));
    6c62:	9b07      	ldr	r3, [sp, #28]
    6c64:	68da      	ldr	r2, [r3, #12]
    6c66:	9b07      	ldr	r3, [sp, #28]
    6c68:	8adb      	ldrh	r3, [r3, #22]
    6c6a:	4619      	mov	r1, r3
    6c6c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c70:	440b      	add	r3, r1
    6c72:	009b      	lsls	r3, r3, #2
    6c74:	4413      	add	r3, r2
    6c76:	681b      	ldr	r3, [r3, #0]
    6c78:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    6c7a:	9b08      	ldr	r3, [sp, #32]
    6c7c:	9a06      	ldr	r2, [sp, #24]
    6c7e:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    6c80:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c84:	3301      	adds	r3, #1
    6c86:	f88d 3017 	strb.w	r3, [sp, #23]
    6c8a:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    6c8e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c92:	429a      	cmp	r2, r3
    6c94:	d8e5      	bhi.n	6c62 <Lpspi_Ip_TransferProcess+0x34e>
    6c96:	e011      	b.n	6cbc <Lpspi_Ip_TransferProcess+0x3a8>
        for (Index = 0; Index < NumberOfWrites; Index++)
    6c98:	2300      	movs	r3, #0
    6c9a:	f88d 3017 	strb.w	r3, [sp, #23]
    6c9e:	e007      	b.n	6cb0 <Lpspi_Ip_TransferProcess+0x39c>
            Base->TDR = Data;
    6ca0:	9b08      	ldr	r3, [sp, #32]
    6ca2:	9a06      	ldr	r2, [sp, #24]
    6ca4:	665a      	str	r2, [r3, #100]	; 0x64
        for (Index = 0; Index < NumberOfWrites; Index++)
    6ca6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6caa:	3301      	adds	r3, #1
    6cac:	f88d 3017 	strb.w	r3, [sp, #23]
    6cb0:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    6cb4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6cb8:	429a      	cmp	r2, r3
    6cba:	d8f1      	bhi.n	6ca0 <Lpspi_Ip_TransferProcess+0x38c>
    State->TxIndex += NumberOfWrites;
    6cbc:	9b07      	ldr	r3, [sp, #28]
    6cbe:	8ada      	ldrh	r2, [r3, #22]
    6cc0:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    6cc4:	b29b      	uxth	r3, r3
    6cc6:	4413      	add	r3, r2
    6cc8:	b29a      	uxth	r2, r3
    6cca:	9b07      	ldr	r3, [sp, #28]
    6ccc:	82da      	strh	r2, [r3, #22]
}
    6cce:	bf00      	nop
                    }
                    /* Push Data into TX FIFO */
                    Lpspi_Ip_PushDataToFifo(Instance, NumberOfWrites);
                    State->CurrentTxFifoSlot -= NumberOfWrites;
    6cd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6cd2:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    6cd6:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    6cda:	1ad3      	subs	r3, r2, r3
    6cdc:	b2da      	uxtb	r2, r3
    6cde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    6ce4:	e03e      	b.n	6d64 <Lpspi_Ip_TransferProcess+0x450>
                }
                else
                {
                    if(TRUE == State->NextTransferConfigAvailable)
    6ce6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6ce8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    6cec:	2b00      	cmp	r3, #0
    6cee:	d01c      	beq.n	6d2a <Lpspi_Ip_TransferProcess+0x416>
                    {
                        /* Initialize next transfer */
                        State->ExternalDevice->DeviceParams->DefaultData = State->DefaultDataNext;
    6cf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6cf4:	68db      	ldr	r3, [r3, #12]
    6cf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6cf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
    6cfa:	605a      	str	r2, [r3, #4]
                        State->FirstCmd = FALSE;
    6cfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6cfe:	2200      	movs	r2, #0
    6d00:	775a      	strb	r2, [r3, #29]
                        Lpspi_TransmitTxInit(Instance, State->TxBufferNext, State->FrameSizeNext, State->LsbNext, State->LengthNext);
    6d02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    6d06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d08:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    6d0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d0c:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
    6d10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d12:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    6d14:	f89d 000f 	ldrb.w	r0, [sp, #15]
    6d18:	9300      	str	r3, [sp, #0]
    6d1a:	4623      	mov	r3, r4
    6d1c:	f000 fb7a 	bl	7414 <Lpspi_TransmitTxInit>
                        State->NextTransferConfigAvailable = FALSE;
    6d20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d22:	2200      	movs	r2, #0
    6d24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    6d28:	e01c      	b.n	6d64 <Lpspi_Ip_TransferProcess+0x450>
                    }
                    else
                    {
                        State->TxDoneFlag = TRUE;
    6d2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d2c:	2201      	movs	r2, #1
    6d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                        /* Disable TX interrupt */
                        Base->IER &= ~LPSPI_IER_TDIE_MASK;
    6d32:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d34:	699b      	ldr	r3, [r3, #24]
    6d36:	f023 0201 	bic.w	r2, r3, #1
    6d3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d3c:	619a      	str	r2, [r3, #24]
                        if((FALSE == State->KeepCs) && (0u != (Base->TCR & LPSPI_TCR_CONT_MASK)))
    6d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d40:	7f1b      	ldrb	r3, [r3, #28]
    6d42:	f083 0301 	eor.w	r3, r3, #1
    6d46:	b2db      	uxtb	r3, r3
    6d48:	2b00      	cmp	r3, #0
    6d4a:	d00b      	beq.n	6d64 <Lpspi_Ip_TransferProcess+0x450>
    6d4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    6d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    6d54:	2b00      	cmp	r3, #0
    6d56:	d005      	beq.n	6d64 <Lpspi_Ip_TransferProcess+0x450>
                        {
                            /* Clear CS */
                            Base->TCR &= ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK);
    6d58:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    6d5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    6d60:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d62:	661a      	str	r2, [r3, #96]	; 0x60
                }
            }
        }
        
        /* End of transfer */
        if((State->RxIndex == State->ExpectedFifoReads) || (TRUE == ErrorFlag))
    6d64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d66:	8a9a      	ldrh	r2, [r3, #20]
    6d68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d6a:	8b1b      	ldrh	r3, [r3, #24]
    6d6c:	429a      	cmp	r2, r3
    6d6e:	d003      	beq.n	6d78 <Lpspi_Ip_TransferProcess+0x464>
    6d70:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    6d74:	2b00      	cmp	r3, #0
    6d76:	d00a      	beq.n	6d8e <Lpspi_Ip_TransferProcess+0x47a>
                Base->TCR |= LPSPI_TCR_RXMSK(1);
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12();
            }
            #endif
            /* Disable interrupts */
            Base->IER = 0u;
    6d78:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d7a:	2200      	movs	r2, #0
    6d7c:	619a      	str	r2, [r3, #24]
            Lpspi_Ip_ChannelFinished(Instance, ErrorFlag);
    6d7e:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    6d82:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6d86:	4611      	mov	r1, r2
    6d88:	4618      	mov	r0, r3
    6d8a:	f7ff fd91 	bl	68b0 <Lpspi_Ip_ChannelFinished>
        }
    }
}
    6d8e:	bf00      	nop
    6d90:	b012      	add	sp, #72	; 0x48
    6d92:	bd10      	pop	{r4, pc}

00006d94 <Lpspi_Ip_Init>:
    OsIf_Trusted_Call1param(Lpspi_Ip_SetUserAccess, Instance);
}
#endif /* LPSPI_IP_ENABLE_USER_MODE_SUPPORT */
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_Init(const Lpspi_Ip_ConfigType *PhyUnitConfigPtr)
{
    6d94:	b500      	push	{lr}
    6d96:	b087      	sub	sp, #28
    6d98:	9001      	str	r0, [sp, #4]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    6d9a:	2300      	movs	r3, #0
    6d9c:	9305      	str	r3, [sp, #20]
    uint8 Instance = 0u;
    6d9e:	2300      	movs	r3, #0
    6da0:	f88d 3013 	strb.w	r3, [sp, #19]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(PhyUnitConfigPtr != NULL_PTR);
    #endif
    Instance = PhyUnitConfigPtr->Instance;
    6da4:	9b01      	ldr	r3, [sp, #4]
    6da6:	781b      	ldrb	r3, [r3, #0]
    6da8:	f88d 3013 	strb.w	r3, [sp, #19]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    6dac:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6db0:	4a23      	ldr	r2, [pc, #140]	; (6e40 <Lpspi_Ip_Init+0xac>)
    6db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6db6:	9303      	str	r3, [sp, #12]
    Base = Lpspi_Ip_apxBases[Instance];
    6db8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6dbc:	4a21      	ldr	r2, [pc, #132]	; (6e44 <Lpspi_Ip_Init+0xb0>)
    6dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dc2:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State == NULL_PTR);
    #endif
    Lpspi_Ip_apxStateStructureArray[Instance] = &Lpspi_Ip_axStateStructure[PhyUnitConfigPtr->StateIndex];
    6dc4:	9b01      	ldr	r3, [sp, #4]
    6dc6:	7c1b      	ldrb	r3, [r3, #16]
    6dc8:	461a      	mov	r2, r3
    6dca:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6dce:	0192      	lsls	r2, r2, #6
    6dd0:	491d      	ldr	r1, [pc, #116]	; (6e48 <Lpspi_Ip_Init+0xb4>)
    6dd2:	440a      	add	r2, r1
    6dd4:	491a      	ldr	r1, [pc, #104]	; (6e40 <Lpspi_Ip_Init+0xac>)
    6dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    6dda:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6dde:	4a18      	ldr	r2, [pc, #96]	; (6e40 <Lpspi_Ip_Init+0xac>)
    6de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6de4:	9303      	str	r3, [sp, #12]
    State->PhyUnitConfig = PhyUnitConfigPtr;
    6de6:	9b03      	ldr	r3, [sp, #12]
    6de8:	9a01      	ldr	r2, [sp, #4]
    6dea:	621a      	str	r2, [r3, #32]
    /* enable in debug mode to ensure CS will be kept when CPU halts at breakpoint */
    Base->CR = PhyUnitConfigPtr->Cr | LPSPI_CR_DBGEN_MASK;
    6dec:	9b01      	ldr	r3, [sp, #4]
    6dee:	685b      	ldr	r3, [r3, #4]
    6df0:	f043 0208 	orr.w	r2, r3, #8
    6df4:	9b02      	ldr	r3, [sp, #8]
    6df6:	611a      	str	r2, [r3, #16]
    Base->CFGR1 = PhyUnitConfigPtr->Cfgr1;
    6df8:	9b01      	ldr	r3, [sp, #4]
    6dfa:	689a      	ldr	r2, [r3, #8]
    6dfc:	9b02      	ldr	r3, [sp, #8]
    6dfe:	625a      	str	r2, [r3, #36]	; 0x24
    /* Set TX WATER. it will be set again in DMA mode */
    Base->FCR = LPSPI_FCR_TXWATER((uint32)LPSPI_IP_FIFO_SIZE_U8 - (uint32)1u);
    6e00:	9b02      	ldr	r3, [sp, #8]
    6e02:	2203      	movs	r2, #3
    6e04:	659a      	str	r2, [r3, #88]	; 0x58
    #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
    State->ClockMode = LPSPI_IP_NORMAL_CLOCK;
    #endif
    State->KeepCs = FALSE;
    6e06:	9b03      	ldr	r3, [sp, #12]
    6e08:	2200      	movs	r2, #0
    6e0a:	771a      	strb	r2, [r3, #28]
    State->FirstCmd = TRUE;
    6e0c:	9b03      	ldr	r3, [sp, #12]
    6e0e:	2201      	movs	r2, #1
    6e10:	775a      	strb	r2, [r3, #29]
    #if ((STD_ON == LPSPI_IP_DMA_USED) && (STD_ON == LPSPI_IP_ENABLE_DMAFASTTRANSFER_SUPPORT))
    Lpspi_Ip_TxDmaTcdSGInit(Instance);
    Lpspi_Ip_RxDmaTcdSGInit(Instance);
    #endif
    /* set State to idle */
    State->Status = LPSPI_IP_IDLE;
    6e12:	9b03      	ldr	r3, [sp, #12]
    6e14:	2201      	movs	r2, #1
    6e16:	605a      	str	r2, [r3, #4]
    (void)Lpspi_Ip_UpdateTransferMode(Instance, PhyUnitConfigPtr->TransferMode);
    6e18:	9b01      	ldr	r3, [sp, #4]
    6e1a:	68da      	ldr	r2, [r3, #12]
    6e1c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6e20:	4611      	mov	r1, r2
    6e22:	4618      	mov	r0, r3
    6e24:	f000 fd10 	bl	7848 <Lpspi_Ip_UpdateTransferMode>
    
    /* Enable SPI module */
    Base->CR |= LPSPI_CR_MEN_MASK;
    6e28:	9b02      	ldr	r3, [sp, #8]
    6e2a:	691b      	ldr	r3, [r3, #16]
    6e2c:	f043 0201 	orr.w	r2, r3, #1
    6e30:	9b02      	ldr	r3, [sp, #8]
    6e32:	611a      	str	r2, [r3, #16]
    return Status;
    6e34:	9b05      	ldr	r3, [sp, #20]
}
    6e36:	4618      	mov	r0, r3
    6e38:	b007      	add	sp, #28
    6e3a:	f85d fb04 	ldr.w	pc, [sp], #4
    6e3e:	bf00      	nop
    6e40:	1fff8d38 	.word	0x1fff8d38
    6e44:	0000adcc 	.word	0x0000adcc
    6e48:	1fff8cf8 	.word	0x1fff8cf8

00006e4c <Lpspi_Ip_DeInit>:
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_DeInit(uint8 Instance)
{
    6e4c:	b086      	sub	sp, #24
    6e4e:	4603      	mov	r3, r0
    6e50:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base;
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    6e54:	2300      	movs	r3, #0
    6e56:	9305      	str	r3, [sp, #20]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    6e58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e5c:	4a11      	ldr	r2, [pc, #68]	; (6ea4 <Lpspi_Ip_DeInit+0x58>)
    6e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e62:	9304      	str	r3, [sp, #16]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    6e64:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e68:	4a0f      	ldr	r2, [pc, #60]	; (6ea8 <Lpspi_Ip_DeInit+0x5c>)
    6e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e6e:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    if (LPSPI_IP_BUSY == State->Status)
    6e70:	9b03      	ldr	r3, [sp, #12]
    6e72:	685b      	ldr	r3, [r3, #4]
    6e74:	2b02      	cmp	r3, #2
    6e76:	d102      	bne.n	6e7e <Lpspi_Ip_DeInit+0x32>
    {
        Status = LPSPI_IP_STATUS_FAIL;
    6e78:	2301      	movs	r3, #1
    6e7a:	9305      	str	r3, [sp, #20]
    6e7c:	e00e      	b.n	6e9c <Lpspi_Ip_DeInit+0x50>
    }
    else
    {
        /* Use reset hardware feature. */
        Base->CR |= LPSPI_CR_RST(1u);
    6e7e:	9b04      	ldr	r3, [sp, #16]
    6e80:	691b      	ldr	r3, [r3, #16]
    6e82:	f043 0202 	orr.w	r2, r3, #2
    6e86:	9b04      	ldr	r3, [sp, #16]
    6e88:	611a      	str	r2, [r3, #16]
        Base->CR = 0;
    6e8a:	9b04      	ldr	r3, [sp, #16]
    6e8c:	2200      	movs	r2, #0
    6e8e:	611a      	str	r2, [r3, #16]

        Lpspi_Ip_apxStateStructureArray[Instance] = NULL_PTR;
    6e90:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e94:	4a04      	ldr	r2, [pc, #16]	; (6ea8 <Lpspi_Ip_DeInit+0x5c>)
    6e96:	2100      	movs	r1, #0
    6e98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    return Status;
    6e9c:	9b05      	ldr	r3, [sp, #20]
}
    6e9e:	4618      	mov	r0, r3
    6ea0:	b006      	add	sp, #24
    6ea2:	4770      	bx	lr
    6ea4:	0000adcc 	.word	0x0000adcc
    6ea8:	1fff8d38 	.word	0x1fff8d38

00006eac <Lpspi_Ip_SyncTransmit>:
                                            const uint8 *TxBuffer,
                                            uint8 *RxBuffer,
                                            uint16 Length,
                                            uint32 TimeOut
                                         )
{
    6eac:	b510      	push	{r4, lr}
    6eae:	b09a      	sub	sp, #104	; 0x68
    6eb0:	9005      	str	r0, [sp, #20]
    6eb2:	9104      	str	r1, [sp, #16]
    6eb4:	9203      	str	r2, [sp, #12]
    6eb6:	f8ad 300a 	strh.w	r3, [sp, #10]
    LPSPI_Type *Base;
    Lpspi_Ip_StateStructureType *State;
    uint8 NumberOfWrites, NumberOfReads;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    6eba:	2300      	movs	r3, #0
    6ebc:	9318      	str	r3, [sp, #96]	; 0x60
    uint32 TimeoutTicks = OsIf_MicrosToTicks(TimeOut, LPSPI_IP_TIMEOUT_METHOD);
    6ebe:	2100      	movs	r1, #0
    6ec0:	981c      	ldr	r0, [sp, #112]	; 0x70
    6ec2:	f7fa fe9f 	bl	1c04 <OsIf_MicrosToTicks>
    6ec6:	9015      	str	r0, [sp, #84]	; 0x54
    uint32 CurrentTicks = 0u; /* initialize current counter */
    6ec8:	2300      	movs	r3, #0
    6eca:	9307      	str	r3, [sp, #28]
    uint32 ElapsedTicks = 0u; /* elapsed will give timeout */
    6ecc:	2300      	movs	r3, #0
    6ece:	9317      	str	r3, [sp, #92]	; 0x5c
    uint8 Instance = 0u;
    6ed0:	2300      	movs	r3, #0
    6ed2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    uint32 Cfgr1 = 0u;
    6ed6:	2300      	movs	r3, #0
    6ed8:	9313      	str	r3, [sp, #76]	; 0x4c
    boolean TxDoneFlag = FALSE;
    6eda:	2300      	movs	r3, #0
    6edc:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
    DevAssert(ExternalDevice != NULL_PTR);
    DevAssert(0u != Length);
    DevAssert(0u != TimeOut);
    Lpspi_Ip_CheckValidParameters(ExternalDevice, Length);
    #endif
    Instance = ExternalDevice->Instance;
    6ee0:	9b05      	ldr	r3, [sp, #20]
    6ee2:	781b      	ldrb	r3, [r3, #0]
    6ee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    6ee8:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    6eec:	4a92      	ldr	r2, [pc, #584]	; (7138 <Lpspi_Ip_SyncTransmit+0x28c>)
    6eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ef2:	9312      	str	r3, [sp, #72]	; 0x48
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State != NULL_PTR);
    #endif
    
    Base = Lpspi_Ip_apxBases[Instance];    
    6ef4:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    6ef8:	4a90      	ldr	r2, [pc, #576]	; (713c <Lpspi_Ip_SyncTransmit+0x290>)
    6efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6efe:	9311      	str	r3, [sp, #68]	; 0x44
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08();
    6f00:	f002 ff9c 	bl	9e3c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08>
    if (LPSPI_IP_BUSY == State->Status)
    6f04:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f06:	685b      	ldr	r3, [r3, #4]
    6f08:	2b02      	cmp	r3, #2
    6f0a:	d104      	bne.n	6f16 <Lpspi_Ip_SyncTransmit+0x6a>
    {
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08();
    6f0c:	f002 ffc2 	bl	9e94 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>
        Status = LPSPI_IP_STATUS_FAIL;
    6f10:	2301      	movs	r3, #1
    6f12:	9318      	str	r3, [sp, #96]	; 0x60
    6f14:	e276      	b.n	7404 <Lpspi_Ip_SyncTransmit+0x558>
        /* Clear some bits which support for half duplex mode at previous transfer */
        Base->CFGR1 &= ~(LPSPI_CFGR1_PCSCFG_MASK | LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK);
        #endif
        
        /* Mark the hardware as busy. */
        State->Status = LPSPI_IP_BUSY;
    6f16:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f18:	2202      	movs	r2, #2
    6f1a:	605a      	str	r2, [r3, #4]
        State->ExternalDevice = ExternalDevice;
    6f1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f1e:	9a05      	ldr	r2, [sp, #20]
    6f20:	625a      	str	r2, [r3, #36]	; 0x24
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08();
    6f22:	f002 ffb7 	bl	9e94 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>
        
        /* Disable DMA requests and all interrupts */
        Base->DER = 0u;
    6f26:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f28:	2200      	movs	r2, #0
    6f2a:	61da      	str	r2, [r3, #28]
        Base->IER = 0u;
    6f2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f2e:	2200      	movs	r2, #0
    6f30:	619a      	str	r2, [r3, #24]
        
        /* Update State structure. */
        State->NextTransferConfigAvailable = State->KeepCs;
    6f32:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f34:	7f1a      	ldrb	r2, [r3, #28]
    6f36:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Set clock configuration */
        if(TRUE == State->FirstCmd)
    6f3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f3e:	7f5b      	ldrb	r3, [r3, #29]
    6f40:	2b00      	cmp	r3, #0
    6f42:	d030      	beq.n	6fa6 <Lpspi_Ip_SyncTransmit+0xfa>
            /* Makes sure that FIFOs will be empty before start new transfer session. 
            There is maybe a frame in RX shifter register (previous transfer is broken and CS did not de-assert).
            So use reset FIFO do not prevent the potential issue. So reset module by software reset bit should be used here */
            /* Reset FIFOs using CR[RST] bit */
            /* store CFGR1 and restore after all registers are reset */
            Cfgr1 = Base->CFGR1;
    6f44:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6f48:	9313      	str	r3, [sp, #76]	; 0x4c
            Base->CR |= LPSPI_CR_RST_MASK;
    6f4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f4c:	691b      	ldr	r3, [r3, #16]
    6f4e:	f043 0202 	orr.w	r2, r3, #2
    6f52:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f54:	611a      	str	r2, [r3, #16]
            Base->CR &= ~LPSPI_CR_RST_MASK;
    6f56:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f58:	691b      	ldr	r3, [r3, #16]
    6f5a:	f023 0202 	bic.w	r2, r3, #2
    6f5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f60:	611a      	str	r2, [r3, #16]
            /* restore CFGR1 */
            Base->CFGR1 = Cfgr1;
    6f62:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6f66:	625a      	str	r2, [r3, #36]	; 0x24
            /* clear all flags */
            Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    6f68:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f6a:	695b      	ldr	r3, [r3, #20]
    6f6c:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    6f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f72:	615a      	str	r2, [r3, #20]

            #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
            Base->CCR = ExternalDevice->Ccr[State->ClockMode];
            #else
            Base->CCR = ExternalDevice->Ccr;
    6f74:	9b05      	ldr	r3, [sp, #20]
    6f76:	685a      	ldr	r2, [r3, #4]
    6f78:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f7a:	641a      	str	r2, [r3, #64]	; 0x40
            #endif
                /* Reset current FIFO slots are available to fill at beginning of job (HLD).*/
            State->CurrentTxFifoSlot = LPSPI_IP_FIFO_SIZE_U8;
    6f7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f7e:	2204      	movs	r2, #4
    6f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            Lpspi_TransmitTxInit(Instance, (const uint8*)TxBuffer, State->ExternalDevice->DeviceParams->FrameSize, State->ExternalDevice->DeviceParams->Lsb, Length);
    6f84:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6f88:	68db      	ldr	r3, [r3, #12]
    6f8a:	881a      	ldrh	r2, [r3, #0]
    6f8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6f90:	68db      	ldr	r3, [r3, #12]
    6f92:	7899      	ldrb	r1, [r3, #2]
    6f94:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    6f98:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6f9c:	9300      	str	r3, [sp, #0]
    6f9e:	460b      	mov	r3, r1
    6fa0:	9904      	ldr	r1, [sp, #16]
    6fa2:	f000 fa37 	bl	7414 <Lpspi_TransmitTxInit>
        }
        Lpspi_TransmitRxInit(Instance, RxBuffer, State->ExternalDevice->DeviceParams->FrameSize, Length);
    6fa6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6faa:	68db      	ldr	r3, [r3, #12]
    6fac:	881a      	ldrh	r2, [r3, #0]
    6fae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6fb2:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    6fb6:	9903      	ldr	r1, [sp, #12]
    6fb8:	f000 facc 	bl	7554 <Lpspi_TransmitRxInit>
        /* initialize current counter */
        CurrentTicks = OsIf_GetCounter(LPSPI_IP_TIMEOUT_METHOD);
    6fbc:	2000      	movs	r0, #0
    6fbe:	f7fa fdd5 	bl	1b6c <OsIf_GetCounter>
    6fc2:	4603      	mov	r3, r0
    6fc4:	9307      	str	r3, [sp, #28]
        while(State->RxIndex != State->ExpectedFifoReads)
    6fc6:	e202      	b.n	73ce <Lpspi_Ip_SyncTransmit+0x522>
        {
            /* RECEIVE DATA */
            /* The receiving should be performed first because maybe have a last frame in RX FIFO from previous channel
                , it should be read to clear RXFIFO before start a new write to TXFIFO */
            /* Read all Data available in receive HW fifo. */
            NumberOfReads = (uint8)(((Base->FSR) & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
    6fc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    6fcc:	0c1b      	lsrs	r3, r3, #16
    6fce:	b2db      	uxtb	r3, r3
    6fd0:	f003 0307 	and.w	r3, r3, #7
    6fd4:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
            /* Limits to remaining frames. */
            
            if (NumberOfReads != 0u)
    6fd8:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    6fdc:	2b00      	cmp	r3, #0
    6fde:	f000 80d2 	beq.w	7186 <Lpspi_Ip_SyncTransmit+0x2da>
            {
                if (NumberOfReads > (State->ExpectedFifoReads - State->RxIndex))
    6fe2:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
    6fe6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6fe8:	8b1b      	ldrh	r3, [r3, #24]
    6fea:	4619      	mov	r1, r3
    6fec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6fee:	8a9b      	ldrh	r3, [r3, #20]
    6ff0:	1acb      	subs	r3, r1, r3
    6ff2:	429a      	cmp	r2, r3
    6ff4:	dd08      	ble.n	7008 <Lpspi_Ip_SyncTransmit+0x15c>
                {
                    NumberOfReads = (uint8)(State->ExpectedFifoReads - State->RxIndex);
    6ff6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6ff8:	8b1b      	ldrh	r3, [r3, #24]
    6ffa:	b2da      	uxtb	r2, r3
    6ffc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6ffe:	8a9b      	ldrh	r3, [r3, #20]
    7000:	b2db      	uxtb	r3, r3
    7002:	1ad3      	subs	r3, r2, r3
    7004:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                }
                /* If these are the first frames of this channel. Current TXFIFO slot must be plus 1 because the slot of CMD have moved out */
                if (0u == State->RxIndex)
    7008:	9b12      	ldr	r3, [sp, #72]	; 0x48
    700a:	8a9b      	ldrh	r3, [r3, #20]
    700c:	2b00      	cmp	r3, #0
    700e:	d107      	bne.n	7020 <Lpspi_Ip_SyncTransmit+0x174>
                {
                    State->CurrentTxFifoSlot += 1u;
    7010:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    7016:	3301      	adds	r3, #1
    7018:	b2da      	uxtb	r2, r3
    701a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    701c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    7020:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    7024:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    7028:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    702c:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    const LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    7030:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    7034:	4a41      	ldr	r2, [pc, #260]	; (713c <Lpspi_Ip_SyncTransmit+0x290>)
    7036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    703a:	930f      	str	r3, [sp, #60]	; 0x3c
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    703c:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    7040:	4a3d      	ldr	r2, [pc, #244]	; (7138 <Lpspi_Ip_SyncTransmit+0x28c>)
    7042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7046:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 Data = 0u;
    7048:	2300      	movs	r3, #0
    704a:	930d      	str	r3, [sp, #52]	; 0x34
    uint8 Index = 0u;
    704c:	2300      	movs	r3, #0
    704e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    if (NULL_PTR != State->RxBuffer)
    7052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7054:	689b      	ldr	r3, [r3, #8]
    7056:	2b00      	cmp	r3, #0
    7058:	d069      	beq.n	712e <Lpspi_Ip_SyncTransmit+0x282>
        if (State->ExternalDevice->DeviceParams->FrameSize < 9u)
    705a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    705e:	68db      	ldr	r3, [r3, #12]
    7060:	881b      	ldrh	r3, [r3, #0]
    7062:	2b08      	cmp	r3, #8
    7064:	d81e      	bhi.n	70a4 <Lpspi_Ip_SyncTransmit+0x1f8>
            for (Index = 0; Index < NumberOfReads; Index++)
    7066:	2300      	movs	r3, #0
    7068:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    706c:	e013      	b.n	7096 <Lpspi_Ip_SyncTransmit+0x1ea>
                Data = Base->RDR;
    706e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    7072:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint8*)(&State->RxBuffer[State->RxIndex + Index])) = (uint8)Data;
    7074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7076:	689b      	ldr	r3, [r3, #8]
    7078:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    707a:	8a92      	ldrh	r2, [r2, #20]
    707c:	4611      	mov	r1, r2
    707e:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
    7082:	440a      	add	r2, r1
    7084:	4413      	add	r3, r2
    7086:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7088:	b2d2      	uxtb	r2, r2
    708a:	701a      	strb	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    708c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    7090:	3301      	adds	r3, #1
    7092:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    7096:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    709a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    709e:	429a      	cmp	r2, r3
    70a0:	d8e5      	bhi.n	706e <Lpspi_Ip_SyncTransmit+0x1c2>
    70a2:	e05a      	b.n	715a <Lpspi_Ip_SyncTransmit+0x2ae>
        else if (State->ExternalDevice->DeviceParams->FrameSize < 17u)
    70a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    70a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    70a8:	68db      	ldr	r3, [r3, #12]
    70aa:	881b      	ldrh	r3, [r3, #0]
    70ac:	2b10      	cmp	r3, #16
    70ae:	d81f      	bhi.n	70f0 <Lpspi_Ip_SyncTransmit+0x244>
            for (Index = 0; Index < NumberOfReads; Index++)
    70b0:	2300      	movs	r3, #0
    70b2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    70b6:	e014      	b.n	70e2 <Lpspi_Ip_SyncTransmit+0x236>
                Data = Base->RDR;
    70b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    70ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    70bc:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint16*)(&State->RxBuffer[2u * (State->RxIndex + Index)])) = (uint16)Data;
    70be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    70c0:	689a      	ldr	r2, [r3, #8]
    70c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    70c4:	8a9b      	ldrh	r3, [r3, #20]
    70c6:	4619      	mov	r1, r3
    70c8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    70cc:	440b      	add	r3, r1
    70ce:	005b      	lsls	r3, r3, #1
    70d0:	4413      	add	r3, r2
    70d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    70d4:	b292      	uxth	r2, r2
    70d6:	801a      	strh	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    70d8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    70dc:	3301      	adds	r3, #1
    70de:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    70e2:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    70e6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    70ea:	429a      	cmp	r2, r3
    70ec:	d8e4      	bhi.n	70b8 <Lpspi_Ip_SyncTransmit+0x20c>
    70ee:	e034      	b.n	715a <Lpspi_Ip_SyncTransmit+0x2ae>
            for (Index = 0; Index < NumberOfReads; Index++)
    70f0:	2300      	movs	r3, #0
    70f2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    70f6:	e013      	b.n	7120 <Lpspi_Ip_SyncTransmit+0x274>
                Data = Base->RDR;
    70f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    70fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    70fc:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint32*)(&State->RxBuffer[4u * (State->RxIndex + Index)])) = (uint32)Data;
    70fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7100:	689a      	ldr	r2, [r3, #8]
    7102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7104:	8a9b      	ldrh	r3, [r3, #20]
    7106:	4619      	mov	r1, r3
    7108:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    710c:	440b      	add	r3, r1
    710e:	009b      	lsls	r3, r3, #2
    7110:	4413      	add	r3, r2
    7112:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7114:	601a      	str	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    7116:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    711a:	3301      	adds	r3, #1
    711c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    7120:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    7124:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    7128:	429a      	cmp	r2, r3
    712a:	d8e5      	bhi.n	70f8 <Lpspi_Ip_SyncTransmit+0x24c>
    712c:	e015      	b.n	715a <Lpspi_Ip_SyncTransmit+0x2ae>
        for (Index = 0; Index < NumberOfReads; Index++)
    712e:	2300      	movs	r3, #0
    7130:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    7134:	e00b      	b.n	714e <Lpspi_Ip_SyncTransmit+0x2a2>
    7136:	bf00      	nop
    7138:	1fff8d38 	.word	0x1fff8d38
    713c:	0000adcc 	.word	0x0000adcc
            (void)Base->RDR;
    7140:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        for (Index = 0; Index < NumberOfReads; Index++)
    7144:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    7148:	3301      	adds	r3, #1
    714a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    714e:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    7152:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    7156:	429a      	cmp	r2, r3
    7158:	d8f2      	bhi.n	7140 <Lpspi_Ip_SyncTransmit+0x294>
    State->RxIndex += NumberOfReads;
    715a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    715c:	8a9a      	ldrh	r2, [r3, #20]
    715e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    7162:	b29b      	uxth	r3, r3
    7164:	4413      	add	r3, r2
    7166:	b29a      	uxth	r2, r3
    7168:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    716a:	829a      	strh	r2, [r3, #20]
}
    716c:	bf00      	nop
                }
                /* Read Data from RX FIFO */
                Lpspi_Ip_ReadDataFromFifo(Instance, NumberOfReads);
                /* Update current FIFO slots are available to fill .*/
                State->CurrentTxFifoSlot += NumberOfReads;
    716e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7170:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    7174:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    7178:	4413      	add	r3, r2
    717a:	b2da      	uxtb	r2, r3
    717c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    717e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                ElapsedTicks = 0u;
    7182:	2300      	movs	r3, #0
    7184:	9317      	str	r3, [sp, #92]	; 0x5c
            /* After driver code read all frames in RX FIFO, if there are still some frames in TX FIFO, at the time before driver code check number of frames available in TX FIFO 
            to prepare to fill TX FIFO. At that time, interrupt occurred, and the time to process interrupt is longer than the time to transfer all frames in TX FIFO. 
            So TX FIFO will be empty and some frames received in RX FIFO, then the program is returned from interrupt and fill TX FIFO until full. 
            And there is a interrupt occurred after that before read all frames in RX FIFO, and the time to process interrupt is longer than the time to transfer all frames in TX FIFO.
            State->CurrentTxFifoSlot variable is used to hanlde number of frames are "on bus transfer". They are always less than FIFO size */
            if((State->CurrentTxFifoSlot != 0u) && (TxDoneFlag != TRUE))
    7186:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    718c:	2b00      	cmp	r3, #0
    718e:	f000 810e 	beq.w	73ae <Lpspi_Ip_SyncTransmit+0x502>
    7192:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
    7196:	f083 0301 	eor.w	r3, r3, #1
    719a:	b2db      	uxtb	r3, r3
    719c:	2b00      	cmp	r3, #0
    719e:	f000 8106 	beq.w	73ae <Lpspi_Ip_SyncTransmit+0x502>
            {
                if(State->ExpectedFifoWrites != State->TxIndex)
    71a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71a4:	8b5a      	ldrh	r2, [r3, #26]
    71a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71a8:	8adb      	ldrh	r3, [r3, #22]
    71aa:	429a      	cmp	r2, r3
    71ac:	f000 80c7 	beq.w	733e <Lpspi_Ip_SyncTransmit+0x492>
                {
                    NumberOfWrites = State->CurrentTxFifoSlot;
    71b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    71b6:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
                    /* Limits to remaining frames. */
                    if (NumberOfWrites > (State->ExpectedFifoWrites - State->TxIndex))
    71ba:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
    71be:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71c0:	8b5b      	ldrh	r3, [r3, #26]
    71c2:	4619      	mov	r1, r3
    71c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71c6:	8adb      	ldrh	r3, [r3, #22]
    71c8:	1acb      	subs	r3, r1, r3
    71ca:	429a      	cmp	r2, r3
    71cc:	dd08      	ble.n	71e0 <Lpspi_Ip_SyncTransmit+0x334>
                    {
                        NumberOfWrites = (uint8)(State->ExpectedFifoWrites - State->TxIndex);
    71ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71d0:	8b5b      	ldrh	r3, [r3, #26]
    71d2:	b2da      	uxtb	r2, r3
    71d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71d6:	8adb      	ldrh	r3, [r3, #22]
    71d8:	b2db      	uxtb	r3, r3
    71da:	1ad3      	subs	r3, r2, r3
    71dc:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    71e0:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    71e4:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    71e8:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    71ec:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    71f0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    71f4:	4a85      	ldr	r2, [pc, #532]	; (740c <Lpspi_Ip_SyncTransmit+0x560>)
    71f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71fa:	930b      	str	r3, [sp, #44]	; 0x2c
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    71fc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    7200:	4a83      	ldr	r2, [pc, #524]	; (7410 <Lpspi_Ip_SyncTransmit+0x564>)
    7202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7206:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 Data = 0u;
    7208:	2300      	movs	r3, #0
    720a:	9309      	str	r3, [sp, #36]	; 0x24
    uint8 Index = 0u;
    720c:	2300      	movs	r3, #0
    720e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Data = State->ExternalDevice->DeviceParams->DefaultData;
    7212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7216:	68db      	ldr	r3, [r3, #12]
    7218:	685b      	ldr	r3, [r3, #4]
    721a:	9309      	str	r3, [sp, #36]	; 0x24
    if (NULL_PTR != State->TxBuffer)
    721c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    721e:	68db      	ldr	r3, [r3, #12]
    7220:	2b00      	cmp	r3, #0
    7222:	d063      	beq.n	72ec <Lpspi_Ip_SyncTransmit+0x440>
        if (State->TxFrameSize < 9u)
    7224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    7228:	2b08      	cmp	r3, #8
    722a:	d81d      	bhi.n	7268 <Lpspi_Ip_SyncTransmit+0x3bc>
            for (Index = 0; Index < NumberOfWrites; Index++)
    722c:	2300      	movs	r3, #0
    722e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    7232:	e012      	b.n	725a <Lpspi_Ip_SyncTransmit+0x3ae>
                Data = *((const uint8*)(&State->TxBuffer[State->TxIndex + Index]));
    7234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7236:	68db      	ldr	r3, [r3, #12]
    7238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    723a:	8ad2      	ldrh	r2, [r2, #22]
    723c:	4611      	mov	r1, r2
    723e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    7242:	440a      	add	r2, r1
    7244:	4413      	add	r3, r2
    7246:	781b      	ldrb	r3, [r3, #0]
    7248:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    724a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    724c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    724e:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    7250:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    7254:	3301      	adds	r3, #1
    7256:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    725a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    725e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    7262:	429a      	cmp	r2, r3
    7264:	d8e6      	bhi.n	7234 <Lpspi_Ip_SyncTransmit+0x388>
    7266:	e053      	b.n	7310 <Lpspi_Ip_SyncTransmit+0x464>
        else if (State->TxFrameSize < 17u)
    7268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    726a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    726c:	2b10      	cmp	r3, #16
    726e:	d81e      	bhi.n	72ae <Lpspi_Ip_SyncTransmit+0x402>
            for (Index = 0; Index < NumberOfWrites; Index++)
    7270:	2300      	movs	r3, #0
    7272:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    7276:	e013      	b.n	72a0 <Lpspi_Ip_SyncTransmit+0x3f4>
                Data = *((const uint16*)(&State->TxBuffer[2u * (State->TxIndex + Index)]));
    7278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    727a:	68da      	ldr	r2, [r3, #12]
    727c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    727e:	8adb      	ldrh	r3, [r3, #22]
    7280:	4619      	mov	r1, r3
    7282:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    7286:	440b      	add	r3, r1
    7288:	005b      	lsls	r3, r3, #1
    728a:	4413      	add	r3, r2
    728c:	881b      	ldrh	r3, [r3, #0]
    728e:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    7290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7292:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7294:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    7296:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    729a:	3301      	adds	r3, #1
    729c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    72a0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    72a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    72a8:	429a      	cmp	r2, r3
    72aa:	d8e5      	bhi.n	7278 <Lpspi_Ip_SyncTransmit+0x3cc>
    72ac:	e030      	b.n	7310 <Lpspi_Ip_SyncTransmit+0x464>
            for (Index = 0; Index < NumberOfWrites; Index++)
    72ae:	2300      	movs	r3, #0
    72b0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    72b4:	e013      	b.n	72de <Lpspi_Ip_SyncTransmit+0x432>
                Data = *((const uint32*)(&State->TxBuffer[4u * (State->TxIndex + Index)]));
    72b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    72b8:	68da      	ldr	r2, [r3, #12]
    72ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    72bc:	8adb      	ldrh	r3, [r3, #22]
    72be:	4619      	mov	r1, r3
    72c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    72c4:	440b      	add	r3, r1
    72c6:	009b      	lsls	r3, r3, #2
    72c8:	4413      	add	r3, r2
    72ca:	681b      	ldr	r3, [r3, #0]
    72cc:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    72ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    72d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    72d2:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    72d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    72d8:	3301      	adds	r3, #1
    72da:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    72de:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    72e2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    72e6:	429a      	cmp	r2, r3
    72e8:	d8e5      	bhi.n	72b6 <Lpspi_Ip_SyncTransmit+0x40a>
    72ea:	e011      	b.n	7310 <Lpspi_Ip_SyncTransmit+0x464>
        for (Index = 0; Index < NumberOfWrites; Index++)
    72ec:	2300      	movs	r3, #0
    72ee:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    72f2:	e007      	b.n	7304 <Lpspi_Ip_SyncTransmit+0x458>
            Base->TDR = Data;
    72f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    72f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    72f8:	665a      	str	r2, [r3, #100]	; 0x64
        for (Index = 0; Index < NumberOfWrites; Index++)
    72fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    72fe:	3301      	adds	r3, #1
    7300:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    7304:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    7308:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    730c:	429a      	cmp	r2, r3
    730e:	d8f1      	bhi.n	72f4 <Lpspi_Ip_SyncTransmit+0x448>
    State->TxIndex += NumberOfWrites;
    7310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7312:	8ada      	ldrh	r2, [r3, #22]
    7314:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    7318:	b29b      	uxth	r3, r3
    731a:	4413      	add	r3, r2
    731c:	b29a      	uxth	r2, r3
    731e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7320:	82da      	strh	r2, [r3, #22]
}
    7322:	bf00      	nop
                    }
                    /* Push Data into TX FIFO */
                    Lpspi_Ip_PushDataToFifo(Instance, NumberOfWrites);
                    State->CurrentTxFifoSlot -= NumberOfWrites;
    7324:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7326:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    732a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    732e:	1ad3      	subs	r3, r2, r3
    7330:	b2da      	uxtb	r2, r3
    7332:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                    ElapsedTicks = 0u;
    7338:	2300      	movs	r3, #0
    733a:	9317      	str	r3, [sp, #92]	; 0x5c
    733c:	e037      	b.n	73ae <Lpspi_Ip_SyncTransmit+0x502>
                }
                else
                {
                    if(TRUE == State->NextTransferConfigAvailable)
    733e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7340:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    7344:	2b00      	cmp	r3, #0
    7346:	d01c      	beq.n	7382 <Lpspi_Ip_SyncTransmit+0x4d6>
                    {
                        /* Initialize next transfer */
                        State->ExternalDevice->DeviceParams->DefaultData = State->DefaultDataNext;
    7348:	9b12      	ldr	r3, [sp, #72]	; 0x48
    734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    734c:	68db      	ldr	r3, [r3, #12]
    734e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7350:	6b52      	ldr	r2, [r2, #52]	; 0x34
    7352:	605a      	str	r2, [r3, #4]
                        State->FirstCmd = FALSE;
    7354:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7356:	2200      	movs	r2, #0
    7358:	775a      	strb	r2, [r3, #29]
                        Lpspi_TransmitTxInit(Instance, State->TxBufferNext, State->FrameSizeNext, State->LsbNext, State->LengthNext);
    735a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    735c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    735e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7360:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    7362:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7364:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
    7368:	9b12      	ldr	r3, [sp, #72]	; 0x48
    736a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    736c:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    7370:	9300      	str	r3, [sp, #0]
    7372:	4623      	mov	r3, r4
    7374:	f000 f84e 	bl	7414 <Lpspi_TransmitTxInit>
                        State->NextTransferConfigAvailable = FALSE;
    7378:	9b12      	ldr	r3, [sp, #72]	; 0x48
    737a:	2200      	movs	r2, #0
    737c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    7380:	e015      	b.n	73ae <Lpspi_Ip_SyncTransmit+0x502>
                    }
                    else
                    {
                        TxDoneFlag = TRUE;
    7382:	2301      	movs	r3, #1
    7384:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
                        if((FALSE == State->KeepCs) && (0u != (Base->TCR & LPSPI_TCR_CONT_MASK)))
    7388:	9b12      	ldr	r3, [sp, #72]	; 0x48
    738a:	7f1b      	ldrb	r3, [r3, #28]
    738c:	f083 0301 	eor.w	r3, r3, #1
    7390:	b2db      	uxtb	r3, r3
    7392:	2b00      	cmp	r3, #0
    7394:	d00b      	beq.n	73ae <Lpspi_Ip_SyncTransmit+0x502>
    7396:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    739a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    739e:	2b00      	cmp	r3, #0
    73a0:	d005      	beq.n	73ae <Lpspi_Ip_SyncTransmit+0x502>
                        {
                            /* Clear CS */
                            Base->TCR &= ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK);
    73a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    73a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    73a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    73aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    73ac:	661a      	str	r2, [r3, #96]	; 0x60
                        }
                    }
                }
            }
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, LPSPI_IP_TIMEOUT_METHOD);
    73ae:	ab07      	add	r3, sp, #28
    73b0:	2100      	movs	r1, #0
    73b2:	4618      	mov	r0, r3
    73b4:	f7fa fbf3 	bl	1b9e <OsIf_GetElapsed>
    73b8:	4602      	mov	r2, r0
    73ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    73bc:	4413      	add	r3, r2
    73be:	9317      	str	r3, [sp, #92]	; 0x5c
            if (ElapsedTicks >= TimeoutTicks)
    73c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    73c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    73c4:	429a      	cmp	r2, r3
    73c6:	d302      	bcc.n	73ce <Lpspi_Ip_SyncTransmit+0x522>
            {
                Status = LPSPI_IP_TIMEOUT;
    73c8:	2303      	movs	r3, #3
    73ca:	9318      	str	r3, [sp, #96]	; 0x60
                break;
    73cc:	e006      	b.n	73dc <Lpspi_Ip_SyncTransmit+0x530>
        while(State->RxIndex != State->ExpectedFifoReads)
    73ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
    73d0:	8a9a      	ldrh	r2, [r3, #20]
    73d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    73d4:	8b1b      	ldrh	r3, [r3, #24]
    73d6:	429a      	cmp	r2, r3
    73d8:	f47f adf6 	bne.w	6fc8 <Lpspi_Ip_SyncTransmit+0x11c>
            }
        }
        if ((LPSPI_IP_STATUS_SUCCESS != Status) || (0u == Length))
    73dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
    73de:	2b00      	cmp	r3, #0
    73e0:	d103      	bne.n	73ea <Lpspi_Ip_SyncTransmit+0x53e>
    73e2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73e6:	2b00      	cmp	r3, #0
    73e8:	d109      	bne.n	73fe <Lpspi_Ip_SyncTransmit+0x552>
        {
#if (STD_OFF == LPSPI_IP_DEV_ERROR_DETECT)
            /* Return Fail status if length is 0. Error Detect is enabled, nothing need to be done here */
            if (0u == Length)
    73ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73ee:	2b00      	cmp	r3, #0
    73f0:	d101      	bne.n	73f6 <Lpspi_Ip_SyncTransmit+0x54a>
            {
                Status = LPSPI_IP_STATUS_FAIL;
    73f2:	2301      	movs	r3, #1
    73f4:	9318      	str	r3, [sp, #96]	; 0x60
            }
#endif
            State->Status = LPSPI_IP_FAULT;
    73f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    73f8:	2203      	movs	r2, #3
    73fa:	605a      	str	r2, [r3, #4]
    73fc:	e002      	b.n	7404 <Lpspi_Ip_SyncTransmit+0x558>
        }
        else
        {
            State->Status = LPSPI_IP_IDLE;
    73fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7400:	2201      	movs	r2, #1
    7402:	605a      	str	r2, [r3, #4]
        }
    }
    return Status;
    7404:	9b18      	ldr	r3, [sp, #96]	; 0x60
}
    7406:	4618      	mov	r0, r3
    7408:	b01a      	add	sp, #104	; 0x68
    740a:	bd10      	pop	{r4, pc}
    740c:	0000adcc 	.word	0x0000adcc
    7410:	1fff8d38 	.word	0x1fff8d38

00007414 <Lpspi_TransmitTxInit>:
                                 const uint8* TxBuffer,
                                 uint16 TxFrameSize,
                                 boolean TxLsb,
                                 uint16 BufLen
                                )
{
    7414:	b088      	sub	sp, #32
    7416:	9100      	str	r1, [sp, #0]
    7418:	4611      	mov	r1, r2
    741a:	461a      	mov	r2, r3
    741c:	4603      	mov	r3, r0
    741e:	f88d 3007 	strb.w	r3, [sp, #7]
    7422:	460b      	mov	r3, r1
    7424:	f8ad 3004 	strh.w	r3, [sp, #4]
    7428:	4613      	mov	r3, r2
    742a:	f88d 3006 	strb.w	r3, [sp, #6]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    742e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7432:	4a46      	ldr	r2, [pc, #280]	; (754c <Lpspi_TransmitTxInit+0x138>)
    7434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7438:	9307      	str	r3, [sp, #28]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    743a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    743e:	4a44      	ldr	r2, [pc, #272]	; (7550 <Lpspi_TransmitTxInit+0x13c>)
    7440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7444:	9306      	str	r3, [sp, #24]
    uint32 TransferCommand = 0u;
    7446:	2300      	movs	r3, #0
    7448:	9305      	str	r3, [sp, #20]
    uint8 LsbWriteValue = TxLsb ? 1U : 0U;
    744a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    744e:	2b00      	cmp	r3, #0
    7450:	d001      	beq.n	7456 <Lpspi_TransmitTxInit+0x42>
    7452:	2301      	movs	r3, #1
    7454:	e000      	b.n	7458 <Lpspi_TransmitTxInit+0x44>
    7456:	2300      	movs	r3, #0
    7458:	f88d 3013 	strb.w	r3, [sp, #19]

    State->TxFrameSize = TxFrameSize;
    745c:	9b06      	ldr	r3, [sp, #24]
    745e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7462:	851a      	strh	r2, [r3, #40]	; 0x28
    State->TxLsb = TxLsb;
    7464:	9b06      	ldr	r3, [sp, #24]
    7466:	f89d 2006 	ldrb.w	r2, [sp, #6]
    746a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    /* Get transfer command */
#if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
    TransferCommand = State->ExternalDevice->Tcr[State->ClockMode] | LPSPI_TCR_FRAMESZ((uint32)TxFrameSize - 1u) | LPSPI_TCR_LSBF(LsbWriteValue);
#else
    TransferCommand = State->ExternalDevice->Tcr | LPSPI_TCR_FRAMESZ((uint32)TxFrameSize - 1u) | LPSPI_TCR_LSBF(LsbWriteValue);
    746e:	9b06      	ldr	r3, [sp, #24]
    7470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7472:	689a      	ldr	r2, [r3, #8]
    7474:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7478:	3b01      	subs	r3, #1
    747a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    747e:	431a      	orrs	r2, r3
    7480:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7484:	05db      	lsls	r3, r3, #23
    7486:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    748a:	4313      	orrs	r3, r2
    748c:	9305      	str	r3, [sp, #20]
        {
            TransferCommand &= ~LPSPI_TCR_CONT_MASK;
        }
        #endif
        
        if(TRUE == State->FirstCmd)
    748e:	9b06      	ldr	r3, [sp, #24]
    7490:	7f5b      	ldrb	r3, [r3, #29]
    7492:	2b00      	cmp	r3, #0
    7494:	d003      	beq.n	749e <Lpspi_TransmitTxInit+0x8a>
        {
            /* Set transfer command */
            Base->TCR = TransferCommand;
    7496:	9b07      	ldr	r3, [sp, #28]
    7498:	9a05      	ldr	r2, [sp, #20]
    749a:	661a      	str	r2, [r3, #96]	; 0x60
    749c:	e00d      	b.n	74ba <Lpspi_TransmitTxInit+0xa6>
        }
        else
        {
            if (0u != (TransferCommand & LPSPI_TCR_CONT_MASK))
    749e:	9b05      	ldr	r3, [sp, #20]
    74a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    74a4:	2b00      	cmp	r3, #0
    74a6:	d005      	beq.n	74b4 <Lpspi_TransmitTxInit+0xa0>
            {
                Base->TCR = TransferCommand | LPSPI_TCR_CONTC_MASK;
    74a8:	9b05      	ldr	r3, [sp, #20]
    74aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
    74ae:	9b07      	ldr	r3, [sp, #28]
    74b0:	661a      	str	r2, [r3, #96]	; 0x60
    74b2:	e002      	b.n	74ba <Lpspi_TransmitTxInit+0xa6>
            }
            else
            {
                Base->TCR = TransferCommand;
    74b4:	9b07      	ldr	r3, [sp, #28]
    74b6:	9a05      	ldr	r2, [sp, #20]
    74b8:	661a      	str	r2, [r3, #96]	; 0x60
        #if (STD_ON == LPSPI_IP_HALF_DUPLEX_MODE_SUPPORT)
        if (LPSPI_IP_FULL_DUPLEX == State->ExternalDevice->DeviceParams->TransferType)
        #endif
        {
            /* CMD will take 1 slot in TXFIFO, update current TX FIFO slot. it will be plus 1 when the first frames of channel have recieved */
            State->CurrentTxFifoSlot -= 1u;
    74ba:	9b06      	ldr	r3, [sp, #24]
    74bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    74c0:	3b01      	subs	r3, #1
    74c2:	b2da      	uxtb	r2, r3
    74c4:	9b06      	ldr	r3, [sp, #24]
    74c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        }
    }
    
    /* Update State structure. */
    State->TxIndex = 0u;
    74ca:	9b06      	ldr	r3, [sp, #24]
    74cc:	2200      	movs	r2, #0
    74ce:	82da      	strh	r2, [r3, #22]
        (void)TxBuffer;
    }
    else
    #endif
    {
        State->TxBuffer = TxBuffer;
    74d0:	9b06      	ldr	r3, [sp, #24]
    74d2:	9a00      	ldr	r2, [sp, #0]
    74d4:	60da      	str	r2, [r3, #12]
    74d6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    74da:	f8ad 3010 	strh.w	r3, [sp, #16]
    74de:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    74e2:	f8ad 300e 	strh.w	r3, [sp, #14]
    if (FrameSize < 9u)
    74e6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    74ea:	2b08      	cmp	r3, #8
    74ec:	d804      	bhi.n	74f8 <Lpspi_TransmitTxInit+0xe4>
        Ret = Length;
    74ee:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    74f2:	f8ad 300c 	strh.w	r3, [sp, #12]
    74f6:	e022      	b.n	753e <Lpspi_TransmitTxInit+0x12a>
    else if (FrameSize < 17u)
    74f8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    74fc:	2b10      	cmp	r3, #16
    74fe:	d80c      	bhi.n	751a <Lpspi_TransmitTxInit+0x106>
        Ret = (uint16)(Length / 2u) + (uint16)(Length % 2U);
    7500:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    7504:	085b      	lsrs	r3, r3, #1
    7506:	b29a      	uxth	r2, r3
    7508:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    750c:	f003 0301 	and.w	r3, r3, #1
    7510:	b29b      	uxth	r3, r3
    7512:	4413      	add	r3, r2
    7514:	f8ad 300c 	strh.w	r3, [sp, #12]
    7518:	e011      	b.n	753e <Lpspi_TransmitTxInit+0x12a>
        Ret = (uint16)(Length / 4u) + (uint16)(((Length % 4U) == 0U) ? 0U : 1U);
    751a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    751e:	089b      	lsrs	r3, r3, #2
    7520:	b29a      	uxth	r2, r3
    7522:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    7526:	f003 0303 	and.w	r3, r3, #3
    752a:	b29b      	uxth	r3, r3
    752c:	2b00      	cmp	r3, #0
    752e:	bf14      	ite	ne
    7530:	2301      	movne	r3, #1
    7532:	2300      	moveq	r3, #0
    7534:	b2db      	uxtb	r3, r3
    7536:	b29b      	uxth	r3, r3
    7538:	4413      	add	r3, r2
    753a:	f8ad 300c 	strh.w	r3, [sp, #12]
    return Ret;
    753e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    }

    State->ExpectedFifoWrites = Lpspi_Ip_GetWordsFromLength(BufLen, TxFrameSize);
    7542:	9b06      	ldr	r3, [sp, #24]
    7544:	835a      	strh	r2, [r3, #26]
}
    7546:	bf00      	nop
    7548:	b008      	add	sp, #32
    754a:	4770      	bx	lr
    754c:	0000adcc 	.word	0x0000adcc
    7550:	1fff8d38 	.word	0x1fff8d38

00007554 <Lpspi_TransmitRxInit>:
static void Lpspi_TransmitRxInit(uint8 Instance,
                                      uint8* RxBuffer,
                                      uint16 RxFrameSize,
                                      uint16 BufLen
                                     )
{
    7554:	b088      	sub	sp, #32
    7556:	9102      	str	r1, [sp, #8]
    7558:	4611      	mov	r1, r2
    755a:	461a      	mov	r2, r3
    755c:	4603      	mov	r3, r0
    755e:	f88d 300f 	strb.w	r3, [sp, #15]
    7562:	460b      	mov	r3, r1
    7564:	f8ad 300c 	strh.w	r3, [sp, #12]
    7568:	4613      	mov	r3, r2
    756a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    756e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7572:	4a22      	ldr	r2, [pc, #136]	; (75fc <Lpspi_TransmitRxInit+0xa8>)
    7574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7578:	9307      	str	r3, [sp, #28]
    
    /* Update State structure. */
    State->RxIndex = 0u;
    757a:	9b07      	ldr	r3, [sp, #28]
    757c:	2200      	movs	r2, #0
    757e:	829a      	strh	r2, [r3, #20]
        (void)RxBuffer; 
    }
    else
    #endif        
    {
        State->RxBuffer = RxBuffer; 
    7580:	9b07      	ldr	r3, [sp, #28]
    7582:	9a02      	ldr	r2, [sp, #8]
    7584:	609a      	str	r2, [r3, #8]
    7586:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    758a:	f8ad 301a 	strh.w	r3, [sp, #26]
    758e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7592:	f8ad 3018 	strh.w	r3, [sp, #24]
    if (FrameSize < 9u)
    7596:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    759a:	2b08      	cmp	r3, #8
    759c:	d804      	bhi.n	75a8 <Lpspi_TransmitRxInit+0x54>
        Ret = Length;
    759e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    75a2:	f8ad 3016 	strh.w	r3, [sp, #22]
    75a6:	e022      	b.n	75ee <Lpspi_TransmitRxInit+0x9a>
    else if (FrameSize < 17u)
    75a8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    75ac:	2b10      	cmp	r3, #16
    75ae:	d80c      	bhi.n	75ca <Lpspi_TransmitRxInit+0x76>
        Ret = (uint16)(Length / 2u) + (uint16)(Length % 2U);
    75b0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    75b4:	085b      	lsrs	r3, r3, #1
    75b6:	b29a      	uxth	r2, r3
    75b8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    75bc:	f003 0301 	and.w	r3, r3, #1
    75c0:	b29b      	uxth	r3, r3
    75c2:	4413      	add	r3, r2
    75c4:	f8ad 3016 	strh.w	r3, [sp, #22]
    75c8:	e011      	b.n	75ee <Lpspi_TransmitRxInit+0x9a>
        Ret = (uint16)(Length / 4u) + (uint16)(((Length % 4U) == 0U) ? 0U : 1U);
    75ca:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    75ce:	089b      	lsrs	r3, r3, #2
    75d0:	b29a      	uxth	r2, r3
    75d2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    75d6:	f003 0303 	and.w	r3, r3, #3
    75da:	b29b      	uxth	r3, r3
    75dc:	2b00      	cmp	r3, #0
    75de:	bf14      	ite	ne
    75e0:	2301      	movne	r3, #1
    75e2:	2300      	moveq	r3, #0
    75e4:	b2db      	uxtb	r3, r3
    75e6:	b29b      	uxth	r3, r3
    75e8:	4413      	add	r3, r2
    75ea:	f8ad 3016 	strh.w	r3, [sp, #22]
    return Ret;
    75ee:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    }

    State->ExpectedFifoReads = Lpspi_Ip_GetWordsFromLength(BufLen, RxFrameSize);
    75f2:	9b07      	ldr	r3, [sp, #28]
    75f4:	831a      	strh	r2, [r3, #24]
}
    75f6:	bf00      	nop
    75f8:	b008      	add	sp, #32
    75fa:	4770      	bx	lr
    75fc:	1fff8d38 	.word	0x1fff8d38

00007600 <Lpspi_Ip_AsyncTransmit>:
                                            const uint8 *TxBuffer,
                                            uint8 *RxBuffer,
                                            uint16 Length,
                                            Lpspi_Ip_CallbackType EndCallback
                                          )
{
    7600:	b500      	push	{lr}
    7602:	b08b      	sub	sp, #44	; 0x2c
    7604:	9005      	str	r0, [sp, #20]
    7606:	9104      	str	r1, [sp, #16]
    7608:	9203      	str	r2, [sp, #12]
    760a:	f8ad 300a 	strh.w	r3, [sp, #10]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    760e:	2300      	movs	r3, #0
    7610:	9309      	str	r3, [sp, #36]	; 0x24
    uint8 Instance = 0u;
    7612:	2300      	movs	r3, #0
    7614:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(ExternalDevice != NULL_PTR);
    DevAssert(0u != Length);
    Lpspi_Ip_CheckValidParameters(ExternalDevice, Length);
    #endif
    Instance = ExternalDevice->Instance;
    7618:	9b05      	ldr	r3, [sp, #20]
    761a:	781b      	ldrb	r3, [r3, #0]
    761c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    7620:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    7624:	4a3d      	ldr	r2, [pc, #244]	; (771c <Lpspi_Ip_AsyncTransmit+0x11c>)
    7626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    762a:	9307      	str	r3, [sp, #28]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State != NULL_PTR);
    #endif
    
    Base = Lpspi_Ip_apxBases[Instance];
    762c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    7630:	4a3b      	ldr	r2, [pc, #236]	; (7720 <Lpspi_Ip_AsyncTransmit+0x120>)
    7632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7636:	9306      	str	r3, [sp, #24]
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09();
    7638:	f002 fc52 	bl	9ee0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09>
    if (LPSPI_IP_BUSY == State->Status)
    763c:	9b07      	ldr	r3, [sp, #28]
    763e:	685b      	ldr	r3, [r3, #4]
    7640:	2b02      	cmp	r3, #2
    7642:	d104      	bne.n	764e <Lpspi_Ip_AsyncTransmit+0x4e>
    {
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09();
    7644:	f002 fc78 	bl	9f38 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>
        Status = LPSPI_IP_STATUS_FAIL;
    7648:	2301      	movs	r3, #1
    764a:	9309      	str	r3, [sp, #36]	; 0x24
    764c:	e061      	b.n	7712 <Lpspi_Ip_AsyncTransmit+0x112>
        #if (STD_ON == LPSPI_IP_HALF_DUPLEX_MODE_SUPPORT)
        /* Clear some bits which support for half duplex mode at previous transfer */
        Base->CFGR1 &= ~(LPSPI_CFGR1_PCSCFG_MASK | LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK);
        #endif
        /* Mark the hardware as busy. */
        State->Status = LPSPI_IP_BUSY;
    764e:	9b07      	ldr	r3, [sp, #28]
    7650:	2202      	movs	r2, #2
    7652:	605a      	str	r2, [r3, #4]
        State->ExternalDevice = ExternalDevice;
    7654:	9b07      	ldr	r3, [sp, #28]
    7656:	9a05      	ldr	r2, [sp, #20]
    7658:	625a      	str	r2, [r3, #36]	; 0x24
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09();
    765a:	f002 fc6d 	bl	9f38 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>
        
        /* Update State structure. */
        State->Callback = EndCallback;
    765e:	9b07      	ldr	r3, [sp, #28]
    7660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7662:	611a      	str	r2, [r3, #16]
        State->NextTransferConfigAvailable = State->KeepCs;
    7664:	9b07      	ldr	r3, [sp, #28]
    7666:	7f1a      	ldrb	r2, [r3, #28]
    7668:	9b07      	ldr	r3, [sp, #28]
    766a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Reset TX done flag */
        State->TxDoneFlag = FALSE;
    766e:	9b07      	ldr	r3, [sp, #28]
    7670:	2200      	movs	r2, #0
    7672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        /* Set clock configuration */
        if(TRUE == State->FirstCmd)
    7676:	9b07      	ldr	r3, [sp, #28]
    7678:	7f5b      	ldrb	r3, [r3, #29]
    767a:	2b00      	cmp	r3, #0
    767c:	d028      	beq.n	76d0 <Lpspi_Ip_AsyncTransmit+0xd0>
        {
            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11();
    767e:	f002 fcd3 	bl	a028 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11>
            /* Make sure that FIFOs will be empty before start new transfer session */
            Base->CR |= LPSPI_CR_RTF_MASK|LPSPI_CR_RRF_MASK;
    7682:	9b06      	ldr	r3, [sp, #24]
    7684:	691b      	ldr	r3, [r3, #16]
    7686:	f443 7240 	orr.w	r2, r3, #768	; 0x300
    768a:	9b06      	ldr	r3, [sp, #24]
    768c:	611a      	str	r2, [r3, #16]
            /* clear all flags */
            Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    768e:	9b06      	ldr	r3, [sp, #24]
    7690:	695b      	ldr	r3, [r3, #20]
    7692:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    7696:	9b06      	ldr	r3, [sp, #24]
    7698:	615a      	str	r2, [r3, #20]
            #endif
            {
                #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
                Base->CCR = ExternalDevice->Ccr[State->ClockMode];
                #else
                Base->CCR = ExternalDevice->Ccr;
    769a:	9b05      	ldr	r3, [sp, #20]
    769c:	685a      	ldr	r2, [r3, #4]
    769e:	9b06      	ldr	r3, [sp, #24]
    76a0:	641a      	str	r2, [r3, #64]	; 0x40
                #endif
            }
            /* Update current FIFO slots are available to fill .*/
            State->CurrentTxFifoSlot = LPSPI_IP_FIFO_SIZE_U8;
    76a2:	9b07      	ldr	r3, [sp, #28]
    76a4:	2204      	movs	r2, #4
    76a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            /* In setting up Transmit command register, the RXMSK is also cleared */
            Lpspi_TransmitTxInit(Instance, (const uint8*)TxBuffer, State->ExternalDevice->DeviceParams->FrameSize, State->ExternalDevice->DeviceParams->Lsb, Length);
    76aa:	9b07      	ldr	r3, [sp, #28]
    76ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    76ae:	68db      	ldr	r3, [r3, #12]
    76b0:	881a      	ldrh	r2, [r3, #0]
    76b2:	9b07      	ldr	r3, [sp, #28]
    76b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    76b6:	68db      	ldr	r3, [r3, #12]
    76b8:	7899      	ldrb	r1, [r3, #2]
    76ba:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    76be:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    76c2:	9300      	str	r3, [sp, #0]
    76c4:	460b      	mov	r3, r1
    76c6:	9904      	ldr	r1, [sp, #16]
    76c8:	f7ff fea4 	bl	7414 <Lpspi_TransmitTxInit>
            SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11();
    76cc:	f002 fcd8 	bl	a080 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11>
        }
        Lpspi_TransmitRxInit(Instance, RxBuffer, State->ExternalDevice->DeviceParams->FrameSize, Length);
    76d0:	9b07      	ldr	r3, [sp, #28]
    76d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    76d4:	68db      	ldr	r3, [r3, #12]
    76d6:	881a      	ldrh	r2, [r3, #0]
    76d8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    76dc:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    76e0:	9903      	ldr	r1, [sp, #12]
    76e2:	f7ff ff37 	bl	7554 <Lpspi_TransmitRxInit>
            }
            else
            #endif
            {
                /* Set TX water */
                Base->FCR = LPSPI_FCR_TXWATER((uint32)LPSPI_IP_FIFO_SIZE_U8 - (uint32)1u);
    76e6:	9b06      	ldr	r3, [sp, #24]
    76e8:	2203      	movs	r2, #3
    76ea:	659a      	str	r2, [r3, #88]	; 0x58
            }
            
            /* Disable DMA requests */
            Base->DER = 0u;
    76ec:	9b06      	ldr	r3, [sp, #24]
    76ee:	2200      	movs	r2, #0
    76f0:	61da      	str	r2, [r3, #28]
            switch (State->TransferMode)
    76f2:	9b07      	ldr	r3, [sp, #28]
    76f4:	681b      	ldr	r3, [r3, #0]
    76f6:	2b00      	cmp	r3, #0
    76f8:	d002      	beq.n	7700 <Lpspi_Ip_AsyncTransmit+0x100>
    76fa:	2b01      	cmp	r3, #1
    76fc:	d004      	beq.n	7708 <Lpspi_Ip_AsyncTransmit+0x108>
                case LPSPI_IP_INTERRUPT:
                    Base->IER = LPSPI_IER_RDIE_MASK | LPSPI_IER_TDIE_MASK | LPSPI_IER_REIE_MASK | LPSPI_IER_TEIE_MASK;
                    break;
                default:
                    /* Nothing to do */
                    break;
    76fe:	e008      	b.n	7712 <Lpspi_Ip_AsyncTransmit+0x112>
                    Base->IER = 0u;
    7700:	9b06      	ldr	r3, [sp, #24]
    7702:	2200      	movs	r2, #0
    7704:	619a      	str	r2, [r3, #24]
                    break;
    7706:	e004      	b.n	7712 <Lpspi_Ip_AsyncTransmit+0x112>
                    Base->IER = LPSPI_IER_RDIE_MASK | LPSPI_IER_TDIE_MASK | LPSPI_IER_REIE_MASK | LPSPI_IER_TEIE_MASK;
    7708:	9b06      	ldr	r3, [sp, #24]
    770a:	f641 0203 	movw	r2, #6147	; 0x1803
    770e:	619a      	str	r2, [r3, #24]
                    break;
    7710:	bf00      	nop
            /* Enable DMA request. */
            Base->DER = LPSPI_DER_RDDE_MASK | LPSPI_DER_TDDE_MASK;
        }
        #endif
    }
    return Status;
    7712:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    7714:	4618      	mov	r0, r3
    7716:	b00b      	add	sp, #44	; 0x2c
    7718:	f85d fb04 	ldr.w	pc, [sp], #4
    771c:	1fff8d38 	.word	0x1fff8d38
    7720:	0000adcc 	.word	0x0000adcc

00007724 <Lpspi_Ip_ManageBuffers>:
}
#endif
#endif

void Lpspi_Ip_ManageBuffers(uint8 Instance)
{
    7724:	b500      	push	{lr}
    7726:	b085      	sub	sp, #20
    7728:	4603      	mov	r3, r0
    772a:	f88d 3007 	strb.w	r3, [sp, #7]
    #endif

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    772e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7732:	4a14      	ldr	r2, [pc, #80]	; (7784 <Lpspi_Ip_ManageBuffers+0x60>)
    7734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7738:	9303      	str	r3, [sp, #12]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    773a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    773e:	4a12      	ldr	r2, [pc, #72]	; (7788 <Lpspi_Ip_ManageBuffers+0x64>)
    7740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7744:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    if (LPSPI_IP_POLLING == State->TransferMode)
    7746:	9b02      	ldr	r3, [sp, #8]
    7748:	681b      	ldr	r3, [r3, #0]
    774a:	2b00      	cmp	r3, #0
    774c:	d115      	bne.n	777a <Lpspi_Ip_ManageBuffers+0x56>
                - Receive: Both TDF (push CDM) and DRF (receive data) are set.
               In half duplex Slave mode:
                - Transmit: TDF is set only, RDF will never be set by RX FIFO have masked.
                - Receive: Both TDF and RDF are set. But only process for RDF to receive data. In this case, State->CurrentTxFifoSlot will be set to 0 */
            if(
                (0u != (Base->SR & LPSPI_SR_RDF_MASK)) ||
    774e:	9b03      	ldr	r3, [sp, #12]
    7750:	695b      	ldr	r3, [r3, #20]
    7752:	f003 0302 	and.w	r3, r3, #2
            if(
    7756:	2b00      	cmp	r3, #0
    7758:	d10a      	bne.n	7770 <Lpspi_Ip_ManageBuffers+0x4c>
                ((0u != (Base->SR & LPSPI_SR_TDF_MASK)) && (0u!= State->CurrentTxFifoSlot))
    775a:	9b03      	ldr	r3, [sp, #12]
    775c:	695b      	ldr	r3, [r3, #20]
    775e:	f003 0301 	and.w	r3, r3, #1
                (0u != (Base->SR & LPSPI_SR_RDF_MASK)) ||
    7762:	2b00      	cmp	r3, #0
    7764:	d009      	beq.n	777a <Lpspi_Ip_ManageBuffers+0x56>
                ((0u != (Base->SR & LPSPI_SR_TDF_MASK)) && (0u!= State->CurrentTxFifoSlot))
    7766:	9b02      	ldr	r3, [sp, #8]
    7768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    776c:	2b00      	cmp	r3, #0
    776e:	d004      	beq.n	777a <Lpspi_Ip_ManageBuffers+0x56>
                    Lpspi_Ip_TransferProcessHalfDuplex(Instance);
                }
                else
                #endif
                {
                    Lpspi_Ip_TransferProcess(Instance); 
    7770:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7774:	4618      	mov	r0, r3
    7776:	f7ff f8cd 	bl	6914 <Lpspi_Ip_TransferProcess>
                Lpspi_Ip_IrqTxDmaHandler(Instance);
            }
        }
        #endif
    }
}
    777a:	bf00      	nop
    777c:	b005      	add	sp, #20
    777e:	f85d fb04 	ldr.w	pc, [sp], #4
    7782:	bf00      	nop
    7784:	0000adcc 	.word	0x0000adcc
    7788:	1fff8d38 	.word	0x1fff8d38

0000778c <Lpspi_Ip_UpdateFrameSize>:
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_UpdateFrameSize(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, uint16 FrameSize)
{
    778c:	b084      	sub	sp, #16
    778e:	9001      	str	r0, [sp, #4]
    7790:	460b      	mov	r3, r1
    7792:	f8ad 3002 	strh.w	r3, [sp, #2]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    7796:	2300      	movs	r3, #0
    7798:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    DevAssert(LPSPI_IP_FRAMESIZE_MAX_U16 >= FrameSize);
    DevAssert(LPSPI_IP_FRAMESIZE_MIN_U16 <= FrameSize);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    779a:	9b01      	ldr	r3, [sp, #4]
    779c:	781b      	ldrb	r3, [r3, #0]
    779e:	461a      	mov	r2, r3
    77a0:	4b09      	ldr	r3, [pc, #36]	; (77c8 <Lpspi_Ip_UpdateFrameSize+0x3c>)
    77a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    77a6:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Frame size can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    77a8:	9b02      	ldr	r3, [sp, #8]
    77aa:	685b      	ldr	r3, [r3, #4]
    77ac:	2b02      	cmp	r3, #2
    77ae:	d005      	beq.n	77bc <Lpspi_Ip_UpdateFrameSize+0x30>
    {
        ExternalDevice->DeviceParams->FrameSize = FrameSize;
    77b0:	9b01      	ldr	r3, [sp, #4]
    77b2:	68db      	ldr	r3, [r3, #12]
    77b4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    77b8:	801a      	strh	r2, [r3, #0]
    77ba:	e001      	b.n	77c0 <Lpspi_Ip_UpdateFrameSize+0x34>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    77bc:	2301      	movs	r3, #1
    77be:	9303      	str	r3, [sp, #12]
    }
    return Status;
    77c0:	9b03      	ldr	r3, [sp, #12]
}
    77c2:	4618      	mov	r0, r3
    77c4:	b004      	add	sp, #16
    77c6:	4770      	bx	lr
    77c8:	1fff8d38 	.word	0x1fff8d38

000077cc <Lpspi_Ip_UpdateLsb>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateLsb(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, boolean Lsb)
{
    77cc:	b084      	sub	sp, #16
    77ce:	9001      	str	r0, [sp, #4]
    77d0:	460b      	mov	r3, r1
    77d2:	f88d 3003 	strb.w	r3, [sp, #3]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    77d6:	2300      	movs	r3, #0
    77d8:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    77da:	9b01      	ldr	r3, [sp, #4]
    77dc:	781b      	ldrb	r3, [r3, #0]
    77de:	461a      	mov	r2, r3
    77e0:	4b09      	ldr	r3, [pc, #36]	; (7808 <Lpspi_Ip_UpdateLsb+0x3c>)
    77e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    77e6:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Bite order can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    77e8:	9b02      	ldr	r3, [sp, #8]
    77ea:	685b      	ldr	r3, [r3, #4]
    77ec:	2b02      	cmp	r3, #2
    77ee:	d005      	beq.n	77fc <Lpspi_Ip_UpdateLsb+0x30>
    {
        ExternalDevice->DeviceParams->Lsb = Lsb;
    77f0:	9b01      	ldr	r3, [sp, #4]
    77f2:	68db      	ldr	r3, [r3, #12]
    77f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    77f8:	709a      	strb	r2, [r3, #2]
    77fa:	e001      	b.n	7800 <Lpspi_Ip_UpdateLsb+0x34>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    77fc:	2301      	movs	r3, #1
    77fe:	9303      	str	r3, [sp, #12]
    }
    return Status;
    7800:	9b03      	ldr	r3, [sp, #12]
}
    7802:	4618      	mov	r0, r3
    7804:	b004      	add	sp, #16
    7806:	4770      	bx	lr
    7808:	1fff8d38 	.word	0x1fff8d38

0000780c <Lpspi_Ip_UpdateDefaultTransmitData>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateDefaultTransmitData(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, uint32 DefaultData)
{
    780c:	b084      	sub	sp, #16
    780e:	9001      	str	r0, [sp, #4]
    7810:	9100      	str	r1, [sp, #0]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    7812:	2300      	movs	r3, #0
    7814:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    7816:	9b01      	ldr	r3, [sp, #4]
    7818:	781b      	ldrb	r3, [r3, #0]
    781a:	461a      	mov	r2, r3
    781c:	4b09      	ldr	r3, [pc, #36]	; (7844 <Lpspi_Ip_UpdateDefaultTransmitData+0x38>)
    781e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7822:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Bite order can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    7824:	9b02      	ldr	r3, [sp, #8]
    7826:	685b      	ldr	r3, [r3, #4]
    7828:	2b02      	cmp	r3, #2
    782a:	d004      	beq.n	7836 <Lpspi_Ip_UpdateDefaultTransmitData+0x2a>
    {
        ExternalDevice->DeviceParams->DefaultData = DefaultData;
    782c:	9b01      	ldr	r3, [sp, #4]
    782e:	68db      	ldr	r3, [r3, #12]
    7830:	9a00      	ldr	r2, [sp, #0]
    7832:	605a      	str	r2, [r3, #4]
    7834:	e001      	b.n	783a <Lpspi_Ip_UpdateDefaultTransmitData+0x2e>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    7836:	2301      	movs	r3, #1
    7838:	9303      	str	r3, [sp, #12]
    }
    return Status;
    783a:	9b03      	ldr	r3, [sp, #12]
}
    783c:	4618      	mov	r0, r3
    783e:	b004      	add	sp, #16
    7840:	4770      	bx	lr
    7842:	bf00      	nop
    7844:	1fff8d38 	.word	0x1fff8d38

00007848 <Lpspi_Ip_UpdateTransferMode>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateTransferMode(uint8 Instance, Lpspi_Ip_ModeType Mode)
{
    7848:	b084      	sub	sp, #16
    784a:	4603      	mov	r3, r0
    784c:	9100      	str	r1, [sp, #0]
    784e:	f88d 3007 	strb.w	r3, [sp, #7]
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    7852:	2300      	movs	r3, #0
    7854:	9303      	str	r3, [sp, #12]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    7856:	f89d 3007 	ldrb.w	r3, [sp, #7]
    785a:	4a09      	ldr	r2, [pc, #36]	; (7880 <Lpspi_Ip_UpdateTransferMode+0x38>)
    785c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7860:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Transfer mode can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    7862:	9b02      	ldr	r3, [sp, #8]
    7864:	685b      	ldr	r3, [r3, #4]
    7866:	2b02      	cmp	r3, #2
    7868:	d003      	beq.n	7872 <Lpspi_Ip_UpdateTransferMode+0x2a>
    {
        State->TransferMode = Mode;
    786a:	9b02      	ldr	r3, [sp, #8]
    786c:	9a00      	ldr	r2, [sp, #0]
    786e:	601a      	str	r2, [r3, #0]
    7870:	e001      	b.n	7876 <Lpspi_Ip_UpdateTransferMode+0x2e>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    7872:	2301      	movs	r3, #1
    7874:	9303      	str	r3, [sp, #12]
    }
    return Status;
    7876:	9b03      	ldr	r3, [sp, #12]
}
    7878:	4618      	mov	r0, r3
    787a:	b004      	add	sp, #16
    787c:	4770      	bx	lr
    787e:	bf00      	nop
    7880:	1fff8d38 	.word	0x1fff8d38

00007884 <Lpspi_Ip_Cancel>:

void Lpspi_Ip_Cancel(uint8 Instance)
{
    7884:	b500      	push	{lr}
    7886:	b087      	sub	sp, #28
    7888:	4603      	mov	r3, r0
    788a:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    uint32 Cfgr1 = 0u;
    788e:	2300      	movs	r3, #0
    7890:	9305      	str	r3, [sp, #20]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    7892:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7896:	4a18      	ldr	r2, [pc, #96]	; (78f8 <Lpspi_Ip_Cancel+0x74>)
    7898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    789c:	9304      	str	r3, [sp, #16]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    789e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78a2:	4a16      	ldr	r2, [pc, #88]	; (78fc <Lpspi_Ip_Cancel+0x78>)
    78a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78a8:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10();
    78aa:	f002 fb6b 	bl	9f84 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10>
    if (LPSPI_IP_BUSY == State->Status)
    78ae:	9b03      	ldr	r3, [sp, #12]
    78b0:	685b      	ldr	r3, [r3, #4]
    78b2:	2b02      	cmp	r3, #2
    78b4:	d11a      	bne.n	78ec <Lpspi_Ip_Cancel+0x68>
    {
        /* Mask Rx to discard received data */
        Base->TCR |= LPSPI_TCR_RXMSK(1);
    78b6:	9b04      	ldr	r3, [sp, #16]
    78b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    78ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
    78be:	9b04      	ldr	r3, [sp, #16]
    78c0:	661a      	str	r2, [r3, #96]	; 0x60
        /* store CFGR1 and restore after all registers are reset */
        Cfgr1 = Base->CFGR1;
    78c2:	9b04      	ldr	r3, [sp, #16]
    78c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    78c6:	9305      	str	r3, [sp, #20]
        /* Disable interrupts and DMA requests. */
        /* Clear FIFO */
        /* RTF and RRF will not clear shifter, so RST must be used to ensure old Data in shifter will also be cleared. */
        Base->CR |= LPSPI_CR_RST_MASK;
    78c8:	9b04      	ldr	r3, [sp, #16]
    78ca:	691b      	ldr	r3, [r3, #16]
    78cc:	f043 0202 	orr.w	r2, r3, #2
    78d0:	9b04      	ldr	r3, [sp, #16]
    78d2:	611a      	str	r2, [r3, #16]
        Base->CR &= ~LPSPI_CR_RST_MASK;
    78d4:	9b04      	ldr	r3, [sp, #16]
    78d6:	691b      	ldr	r3, [r3, #16]
    78d8:	f023 0202 	bic.w	r2, r3, #2
    78dc:	9b04      	ldr	r3, [sp, #16]
    78de:	611a      	str	r2, [r3, #16]
        /* restore CFGR1 */
        Base->CFGR1 = Cfgr1;
    78e0:	9b04      	ldr	r3, [sp, #16]
    78e2:	9a05      	ldr	r2, [sp, #20]
    78e4:	625a      	str	r2, [r3, #36]	; 0x24
            (void)Dma_Ip_SetLogicChannelCommand(State->PhyUnitConfig->RxDmaChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            (void)Dma_Ip_SetLogicChannelCommand(State->PhyUnitConfig->TxDmaChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
        #endif
        /* set State to idle */
        State->Status = LPSPI_IP_IDLE;
    78e6:	9b03      	ldr	r3, [sp, #12]
    78e8:	2201      	movs	r2, #1
    78ea:	605a      	str	r2, [r3, #4]
    }
    SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10();
    78ec:	f002 fb76 	bl	9fdc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10>
}
    78f0:	bf00      	nop
    78f2:	b007      	add	sp, #28
    78f4:	f85d fb04 	ldr.w	pc, [sp], #4
    78f8:	0000adcc 	.word	0x0000adcc
    78fc:	1fff8d38 	.word	0x1fff8d38

00007900 <Lpspi_Ip_IrqHandler>:
* @param[in]     Instance            Instance of the hardware unit.
*
* @implements Lpspi_Ip_IrqHandler_Activity
*/
void Lpspi_Ip_IrqHandler(uint8 Instance)
{
    7900:	b500      	push	{lr}
    7902:	b087      	sub	sp, #28
    7904:	4603      	mov	r3, r0
    7906:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    790a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    790e:	4a18      	ldr	r2, [pc, #96]	; (7970 <Lpspi_Ip_IrqHandler+0x70>)
    7910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7914:	9305      	str	r3, [sp, #20]
    const Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    7916:	f89d 3007 	ldrb.w	r3, [sp, #7]
    791a:	4a16      	ldr	r2, [pc, #88]	; (7974 <Lpspi_Ip_IrqHandler+0x74>)
    791c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7920:	9304      	str	r3, [sp, #16]
    uint32 IrqFlags = 0u;
    7922:	2300      	movs	r3, #0
    7924:	9303      	str	r3, [sp, #12]

    if (NULL_PTR != State)
    7926:	9b04      	ldr	r3, [sp, #16]
    7928:	2b00      	cmp	r3, #0
    792a:	d016      	beq.n	795a <Lpspi_Ip_IrqHandler+0x5a>
    {
        /* the driver has been initialized */
        IrqFlags = Base->SR & (LPSPI_SR_TDF_MASK | LPSPI_SR_RDF_MASK | LPSPI_SR_TEF_MASK | LPSPI_SR_REF_MASK);
    792c:	9b05      	ldr	r3, [sp, #20]
    792e:	695a      	ldr	r2, [r3, #20]
    7930:	f641 0303 	movw	r3, #6147	; 0x1803
    7934:	4013      	ands	r3, r2
    7936:	9303      	str	r3, [sp, #12]
        IrqFlags &= Base->IER & (LPSPI_IER_TDIE_MASK | LPSPI_IER_RDIE_MASK | LPSPI_IER_TEIE_MASK | LPSPI_IER_REIE_MASK);
    7938:	9b05      	ldr	r3, [sp, #20]
    793a:	699a      	ldr	r2, [r3, #24]
    793c:	f641 0303 	movw	r3, #6147	; 0x1803
    7940:	4013      	ands	r3, r2
    7942:	9a03      	ldr	r2, [sp, #12]
    7944:	4013      	ands	r3, r2
    7946:	9303      	str	r3, [sp, #12]
        if (0u != IrqFlags)
    7948:	9b03      	ldr	r3, [sp, #12]
    794a:	2b00      	cmp	r3, #0
    794c:	d00b      	beq.n	7966 <Lpspi_Ip_IrqHandler+0x66>
                Lpspi_Ip_TransferProcessHalfDuplex(Instance);    
            }
            else
            #endif
            {
                Lpspi_Ip_TransferProcess(Instance); 
    794e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7952:	4618      	mov	r0, r3
    7954:	f7fe ffde 	bl	6914 <Lpspi_Ip_TransferProcess>
    {
        /* the driver has not been initialized */
        /* clear all flags */
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    }
}
    7958:	e005      	b.n	7966 <Lpspi_Ip_IrqHandler+0x66>
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    795a:	9b05      	ldr	r3, [sp, #20]
    795c:	695b      	ldr	r3, [r3, #20]
    795e:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    7962:	9b05      	ldr	r3, [sp, #20]
    7964:	615a      	str	r2, [r3, #20]
}
    7966:	bf00      	nop
    7968:	b007      	add	sp, #28
    796a:	f85d fb04 	ldr.w	pc, [sp], #4
    796e:	bf00      	nop
    7970:	0000adcc 	.word	0x0000adcc
    7974:	1fff8d38 	.word	0x1fff8d38

00007978 <Lpspi_Ip_GetStatus>:
* @param[in]        Instance - SPI peripheral instance number.
*
* @return           Lpspi_Ip_HwStatusType
*/
Lpspi_Ip_HwStatusType Lpspi_Ip_GetStatus(uint8 Instance)
{
    7978:	b084      	sub	sp, #16
    797a:	4603      	mov	r3, r0
    797c:	f88d 3007 	strb.w	r3, [sp, #7]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_HwStatusType Status = LPSPI_IP_UNINIT;
    7980:	2300      	movs	r3, #0
    7982:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    7984:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7988:	4a06      	ldr	r2, [pc, #24]	; (79a4 <Lpspi_Ip_GetStatus+0x2c>)
    798a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    798e:	9302      	str	r3, [sp, #8]
    if (State != NULL_PTR)
    7990:	9b02      	ldr	r3, [sp, #8]
    7992:	2b00      	cmp	r3, #0
    7994:	d002      	beq.n	799c <Lpspi_Ip_GetStatus+0x24>
    {
        Status = State->Status;
    7996:	9b02      	ldr	r3, [sp, #8]
    7998:	685b      	ldr	r3, [r3, #4]
    799a:	9303      	str	r3, [sp, #12]
    }
    
    return Status;
    799c:	9b03      	ldr	r3, [sp, #12]
}
    799e:	4618      	mov	r0, r3
    79a0:	b004      	add	sp, #16
    79a2:	4770      	bx	lr
    79a4:	1fff8d38 	.word	0x1fff8d38

000079a8 <Spi_CheckInit>:
static inline Std_ReturnType Spi_CheckInit
    ( 
        const Spi_ConfigType *ConfigPtr,
        uint32 SpiCoreID
    )
{
    79a8:	b086      	sub	sp, #24
    79aa:	9001      	str	r0, [sp, #4]
    79ac:	9100      	str	r1, [sp, #0]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    79ae:	2300      	movs	r3, #0
    79b0:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 Sequence;
#endif

#if (SPI_PRECOMPILE_SUPPORT == STD_OFF)
    /* Configuration sizes must be checked for Post Build & Link Time configurations */
    Channel  = (uint32)(ConfigPtr->SpiMaxChannel);
    79b4:	9b01      	ldr	r3, [sp, #4]
    79b6:	789b      	ldrb	r3, [r3, #2]
    79b8:	9304      	str	r3, [sp, #16]
    Job      = (uint32)(ConfigPtr->SpiMaxJob);
    79ba:	9b01      	ldr	r3, [sp, #4]
    79bc:	889b      	ldrh	r3, [r3, #4]
    79be:	9303      	str	r3, [sp, #12]
    Sequence = (uint32)(ConfigPtr->SpiMaxSequence);
    79c0:	9b01      	ldr	r3, [sp, #4]
    79c2:	799b      	ldrb	r3, [r3, #6]
    79c4:	9302      	str	r3, [sp, #8]

    if ((Channel >= SPI_MAX_CHANNEL) || (Job >= SPI_MAX_JOB) || (Sequence >= SPI_MAX_SEQUENCE))
    79c6:	9b04      	ldr	r3, [sp, #16]
    79c8:	2b03      	cmp	r3, #3
    79ca:	d805      	bhi.n	79d8 <Spi_CheckInit+0x30>
    79cc:	9b03      	ldr	r3, [sp, #12]
    79ce:	2b01      	cmp	r3, #1
    79d0:	d802      	bhi.n	79d8 <Spi_CheckInit+0x30>
    79d2:	9b02      	ldr	r3, [sp, #8]
    79d4:	2b01      	cmp	r3, #1
    79d6:	d902      	bls.n	79de <Spi_CheckInit+0x36>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    79d8:	2301      	movs	r3, #1
    79da:	f88d 3017 	strb.w	r3, [sp, #23]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        /* Call Det_ReportError */
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_INIT_ID,SPI_E_CONFIG_OUT_OF_RANGE);
#endif
    }
    if (SpiCoreID != ConfigPtr->SpiCoreUse)
    79de:	9b01      	ldr	r3, [sp, #4]
    79e0:	689b      	ldr	r3, [r3, #8]
    79e2:	9a00      	ldr	r2, [sp, #0]
    79e4:	429a      	cmp	r2, r3
    79e6:	d002      	beq.n	79ee <Spi_CheckInit+0x46>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    79e8:	2301      	movs	r3, #1
    79ea:	f88d 3017 	strb.w	r3, [sp, #23]
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_INIT_ID,SPI_E_INVALID_POINTER);
#endif
    }
#endif /* (SPI_PRECOMPILE_SUPPORT == STD_OFF) */

    return CheckStatus;
    79ee:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    79f2:	4618      	mov	r0, r3
    79f4:	b006      	add	sp, #24
    79f6:	4770      	bx	lr

000079f8 <Spi_SyncJobsTranfer>:
static Std_ReturnType Spi_SyncJobsTranfer
    (
        const Spi_SequenceConfigType *SequenceConfig,
        uint32 SpiCoreID
    )
{
    79f8:	b500      	push	{lr}
    79fa:	b089      	sub	sp, #36	; 0x24
    79fc:	9001      	str	r0, [sp, #4]
    79fe:	9100      	str	r1, [sp, #0]
    Spi_JobType JobsCount;
    const Spi_JobType *JobIndexList;
    Spi_JobType Job;
    Spi_JobStateType *JobState;
    const Spi_JobConfigType *JobConfig;
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    7a00:	2300      	movs	r3, #0
    7a02:	f88d 3017 	strb.w	r3, [sp, #23]
    
    /* Get the number of jobs in the sequence */
    JobsCount = SequenceConfig->NumJobs;
    7a06:	9b01      	ldr	r3, [sp, #4]
    7a08:	881b      	ldrh	r3, [r3, #0]
    7a0a:	f8ad 301e 	strh.w	r3, [sp, #30]
    JobIndexList = SequenceConfig->JobIndexList;
    7a0e:	9b01      	ldr	r3, [sp, #4]
    7a10:	689b      	ldr	r3, [r3, #8]
    7a12:	9306      	str	r3, [sp, #24]
    while (0u < JobsCount)
    7a14:	e072      	b.n	7afc <Spi_SyncJobsTranfer+0x104>
    {
        /* Get the job id */
        Job = *JobIndexList;
    7a16:	9b06      	ldr	r3, [sp, #24]
    7a18:	881b      	ldrh	r3, [r3, #0]
    7a1a:	f8ad 3014 	strh.w	r3, [sp, #20]
        /* Set the job status as pending */
        JobState = &Spi_axSpiJobState[Job];
    7a1e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7a22:	009b      	lsls	r3, r3, #2
    7a24:	4a3a      	ldr	r2, [pc, #232]	; (7b10 <Spi_SyncJobsTranfer+0x118>)
    7a26:	4413      	add	r3, r2
    7a28:	9304      	str	r3, [sp, #16]
        JobState->Result = SPI_JOB_PENDING;
    7a2a:	9b04      	ldr	r3, [sp, #16]
    7a2c:	2201      	movs	r2, #1
    7a2e:	601a      	str	r2, [r3, #0]
        JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    7a30:	4a38      	ldr	r2, [pc, #224]	; (7b14 <Spi_SyncJobsTranfer+0x11c>)
    7a32:	9b00      	ldr	r3, [sp, #0]
    7a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a38:	691a      	ldr	r2, [r3, #16]
    7a3a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7a3e:	009b      	lsls	r3, r3, #2
    7a40:	4413      	add	r3, r2
    7a42:	681b      	ldr	r3, [r3, #0]
    7a44:	9303      	str	r3, [sp, #12]
        
        /* start job notification to assert the non-cs pin,
        when non-cs pin is used as chipselect*/
        if (NULL_PTR != JobConfig->StartNotification)
    7a46:	9b03      	ldr	r3, [sp, #12]
    7a48:	68db      	ldr	r3, [r3, #12]
    7a4a:	2b00      	cmp	r3, #0
    7a4c:	d002      	beq.n	7a54 <Spi_SyncJobsTranfer+0x5c>
        {
            JobConfig->StartNotification();
    7a4e:	9b03      	ldr	r3, [sp, #12]
    7a50:	68db      	ldr	r3, [r3, #12]
    7a52:	4798      	blx	r3
        else
        {
            /* Do nothing */
        }
        /* Mark HWUnit as busy */
        Spi_axSpiHwUnitQueueArray[JobConfig->HWUnit].Status = SPI_BUSY;
    7a54:	9b03      	ldr	r3, [sp, #12]
    7a56:	7f1b      	ldrb	r3, [r3, #28]
    7a58:	4619      	mov	r1, r3
    7a5a:	4b2f      	ldr	r3, [pc, #188]	; (7b18 <Spi_SyncJobsTranfer+0x120>)
    7a5c:	2202      	movs	r2, #2
    7a5e:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        
        Status = Spi_Ipw_SyncTransmit(JobConfig, SpiCoreID);
    7a62:	9900      	ldr	r1, [sp, #0]
    7a64:	9803      	ldr	r0, [sp, #12]
    7a66:	f000 fc5f 	bl	8328 <Spi_Ipw_SyncTransmit>
    7a6a:	4603      	mov	r3, r0
    7a6c:	f88d 3017 	strb.w	r3, [sp, #23]
        
        /* release HWUnit */
        Spi_axSpiHwUnitQueueArray[JobConfig->HWUnit].Status = SPI_IDLE;
    7a70:	9b03      	ldr	r3, [sp, #12]
    7a72:	7f1b      	ldrb	r3, [r3, #28]
    7a74:	4619      	mov	r1, r3
    7a76:	4b28      	ldr	r3, [pc, #160]	; (7b18 <Spi_SyncJobsTranfer+0x120>)
    7a78:	2201      	movs	r2, #1
    7a7a:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        
        if ((Std_ReturnType)E_OK == Status)
    7a7e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7a82:	2b00      	cmp	r3, #0
    7a84:	d10a      	bne.n	7a9c <Spi_SyncJobsTranfer+0xa4>
        {
            /* Job is done set the status as OK */
            JobState->Result = SPI_JOB_OK;
    7a86:	9b04      	ldr	r3, [sp, #16]
    7a88:	2200      	movs	r2, #0
    7a8a:	601a      	str	r2, [r3, #0]
            /* Perform job EndNotification (if there is one) */
            if (NULL_PTR != JobConfig->EndNotification)
    7a8c:	9b03      	ldr	r3, [sp, #12]
    7a8e:	689b      	ldr	r3, [r3, #8]
    7a90:	2b00      	cmp	r3, #0
    7a92:	d02b      	beq.n	7aec <Spi_SyncJobsTranfer+0xf4>
            {
                JobConfig->EndNotification();
    7a94:	9b03      	ldr	r3, [sp, #12]
    7a96:	689b      	ldr	r3, [r3, #8]
    7a98:	4798      	blx	r3
    7a9a:	e027      	b.n	7aec <Spi_SyncJobsTranfer+0xf4>
            /* transmission failed */
            /* set the remaining job status (including the current one) as FAILED */
            do
            {
                /* Set the job status as FAILED */
                Spi_axSpiJobState[*JobIndexList].Result = SPI_JOB_FAILED;
    7a9c:	9b06      	ldr	r3, [sp, #24]
    7a9e:	881b      	ldrh	r3, [r3, #0]
    7aa0:	4619      	mov	r1, r3
    7aa2:	4b1b      	ldr	r3, [pc, #108]	; (7b10 <Spi_SyncJobsTranfer+0x118>)
    7aa4:	2202      	movs	r2, #2
    7aa6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                /* Update pointer position for JobConfig */
                JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[*JobIndexList].JobCfg;
    7aaa:	4a1a      	ldr	r2, [pc, #104]	; (7b14 <Spi_SyncJobsTranfer+0x11c>)
    7aac:	9b00      	ldr	r3, [sp, #0]
    7aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ab2:	691a      	ldr	r2, [r3, #16]
    7ab4:	9b06      	ldr	r3, [sp, #24]
    7ab6:	881b      	ldrh	r3, [r3, #0]
    7ab8:	009b      	lsls	r3, r3, #2
    7aba:	4413      	add	r3, r2
    7abc:	681b      	ldr	r3, [r3, #0]
    7abe:	9303      	str	r3, [sp, #12]
                /* Perform job EndNotification (if there is one) */
                if (NULL_PTR != JobConfig->EndNotification)
    7ac0:	9b03      	ldr	r3, [sp, #12]
    7ac2:	689b      	ldr	r3, [r3, #8]
    7ac4:	2b00      	cmp	r3, #0
    7ac6:	d002      	beq.n	7ace <Spi_SyncJobsTranfer+0xd6>
                {
                    JobConfig->EndNotification();
    7ac8:	9b03      	ldr	r3, [sp, #12]
    7aca:	689b      	ldr	r3, [r3, #8]
    7acc:	4798      	blx	r3
                }
                else
                {
                    /* Do nothing */
                }
                JobIndexList++;
    7ace:	9b06      	ldr	r3, [sp, #24]
    7ad0:	3302      	adds	r3, #2
    7ad2:	9306      	str	r3, [sp, #24]
                JobsCount--;
    7ad4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7ad8:	3b01      	subs	r3, #1
    7ada:	f8ad 301e 	strh.w	r3, [sp, #30]
            } while (0u < JobsCount);
    7ade:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7ae2:	2b00      	cmp	r3, #0
    7ae4:	d1da      	bne.n	7a9c <Spi_SyncJobsTranfer+0xa4>
            JobsCount = 1u;  /* needed to end correctly the outer loop */
    7ae6:	2301      	movs	r3, #1
    7ae8:	f8ad 301e 	strh.w	r3, [sp, #30]
        }
        /* iterate to next job in sequence */
        JobIndexList++;
    7aec:	9b06      	ldr	r3, [sp, #24]
    7aee:	3302      	adds	r3, #2
    7af0:	9306      	str	r3, [sp, #24]
        JobsCount--;
    7af2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7af6:	3b01      	subs	r3, #1
    7af8:	f8ad 301e 	strh.w	r3, [sp, #30]
    while (0u < JobsCount)
    7afc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7b00:	2b00      	cmp	r3, #0
    7b02:	d188      	bne.n	7a16 <Spi_SyncJobsTranfer+0x1e>
    } /* while (JobsCount > 0u) */
    return Status;
    7b04:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7b08:	4618      	mov	r0, r3
    7b0a:	b009      	add	sp, #36	; 0x24
    7b0c:	f85d fb04 	ldr.w	pc, [sp], #4
    7b10:	1fff8d58 	.word	0x1fff8d58
    7b14:	1fff8d4c 	.word	0x1fff8d4c
    7b18:	1fff8d44 	.word	0x1fff8d44

00007b1c <Spi_InitChannelsJobsSeqsState>:
*/
static void Spi_InitChannelsJobsSeqsState
    (
        uint32 SpiCoreID      
    )
{
    7b1c:	b088      	sub	sp, #32
    7b1e:	9001      	str	r0, [sp, #4]
#endif
    const Spi_ChannelConfigType *ChannelConfig;
    const Spi_JobConfigType *JobConfig;
    const Spi_SequenceConfigType *SequenceConfig;
    
    for (Channel = 0u;
    7b20:	2300      	movs	r3, #0
    7b22:	9307      	str	r3, [sp, #28]
    7b24:	e034      	b.n	7b90 <Spi_InitChannelsJobsSeqsState+0x74>
        Channel <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxChannel);
        Channel++)
    {
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[Channel].ChannelCfg;
    7b26:	4a4a      	ldr	r2, [pc, #296]	; (7c50 <Spi_InitChannelsJobsSeqsState+0x134>)
    7b28:	9b01      	ldr	r3, [sp, #4]
    7b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b2e:	68da      	ldr	r2, [r3, #12]
    7b30:	9b07      	ldr	r3, [sp, #28]
    7b32:	009b      	lsls	r3, r3, #2
    7b34:	4413      	add	r3, r2
    7b36:	681b      	ldr	r3, [r3, #0]
    7b38:	9302      	str	r3, [sp, #8]
        /* Check which channel has assigned for current core */
        if((NULL_PTR != ChannelConfig) && (SpiCoreID == ChannelConfig->SpiCoreUse))
    7b3a:	9b02      	ldr	r3, [sp, #8]
    7b3c:	2b00      	cmp	r3, #0
    7b3e:	d024      	beq.n	7b8a <Spi_InitChannelsJobsSeqsState+0x6e>
    7b40:	9b02      	ldr	r3, [sp, #8]
    7b42:	695b      	ldr	r3, [r3, #20]
    7b44:	9a01      	ldr	r2, [sp, #4]
    7b46:	429a      	cmp	r2, r3
    7b48:	d11f      	bne.n	7b8a <Spi_InitChannelsJobsSeqsState+0x6e>
        {
            /* Check if configured buffers are External (EB) */
            if (EB == ChannelConfig->BufferType)
    7b4a:	9b02      	ldr	r3, [sp, #8]
    7b4c:	681b      	ldr	r3, [r3, #0]
    7b4e:	2b01      	cmp	r3, #1
    7b50:	d10e      	bne.n	7b70 <Spi_InitChannelsJobsSeqsState+0x54>
            {
                /* Initialize all buffers */
                ChannelConfig->BufferDescriptor->ExternalBufferTX = NULL_PTR;
    7b52:	9b02      	ldr	r3, [sp, #8]
    7b54:	691b      	ldr	r3, [r3, #16]
    7b56:	2200      	movs	r2, #0
    7b58:	601a      	str	r2, [r3, #0]
                ChannelConfig->BufferDescriptor->BufferRX = NULL_PTR;
    7b5a:	9b02      	ldr	r3, [sp, #8]
    7b5c:	691b      	ldr	r3, [r3, #16]
    7b5e:	2200      	movs	r2, #0
    7b60:	609a      	str	r2, [r3, #8]
    
                /* Channel length is zero for unconfigured external buffers */
                Spi_axSpiChannelState[Channel].Length = (Spi_NumberOfDataType) 0;
    7b62:	4a3c      	ldr	r2, [pc, #240]	; (7c54 <Spi_InitChannelsJobsSeqsState+0x138>)
    7b64:	9b07      	ldr	r3, [sp, #28]
    7b66:	009b      	lsls	r3, r3, #2
    7b68:	4413      	add	r3, r2
    7b6a:	2200      	movs	r2, #0
    7b6c:	805a      	strh	r2, [r3, #2]
    7b6e:	e007      	b.n	7b80 <Spi_InitChannelsJobsSeqsState+0x64>
            }
            else
            {
                /* Setup channel length according to configuration */
                Spi_axSpiChannelState[Channel].Length = ChannelConfig->Length;
    7b70:	9b02      	ldr	r3, [sp, #8]
    7b72:	8999      	ldrh	r1, [r3, #12]
    7b74:	4a37      	ldr	r2, [pc, #220]	; (7c54 <Spi_InitChannelsJobsSeqsState+0x138>)
    7b76:	9b07      	ldr	r3, [sp, #28]
    7b78:	009b      	lsls	r3, r3, #2
    7b7a:	4413      	add	r3, r2
    7b7c:	460a      	mov	r2, r1
    7b7e:	805a      	strh	r2, [r3, #2]
            }
            Spi_axSpiChannelState[Channel].Flags = SPI_CHANNEL_FLAG_TX_DEFAULT_U8;
    7b80:	4a34      	ldr	r2, [pc, #208]	; (7c54 <Spi_InitChannelsJobsSeqsState+0x138>)
    7b82:	9b07      	ldr	r3, [sp, #28]
    7b84:	2101      	movs	r1, #1
    7b86:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        Channel++)
    7b8a:	9b07      	ldr	r3, [sp, #28]
    7b8c:	3301      	adds	r3, #1
    7b8e:	9307      	str	r3, [sp, #28]
        Channel <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxChannel);
    7b90:	4a2f      	ldr	r2, [pc, #188]	; (7c50 <Spi_InitChannelsJobsSeqsState+0x134>)
    7b92:	9b01      	ldr	r3, [sp, #4]
    7b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b98:	789b      	ldrb	r3, [r3, #2]
    7b9a:	461a      	mov	r2, r3
    for (Channel = 0u;
    7b9c:	9b07      	ldr	r3, [sp, #28]
    7b9e:	4293      	cmp	r3, r2
    7ba0:	d9c1      	bls.n	7b26 <Spi_InitChannelsJobsSeqsState+0xa>
        }
    }
    
    /* initialize job results */
    for (Job = 0u;
    7ba2:	2300      	movs	r3, #0
    7ba4:	9306      	str	r3, [sp, #24]
    7ba6:	e019      	b.n	7bdc <Spi_InitChannelsJobsSeqsState+0xc0>
        Job <= (uint32)( Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxJob);
        Job++)
    {
        JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    7ba8:	4a29      	ldr	r2, [pc, #164]	; (7c50 <Spi_InitChannelsJobsSeqsState+0x134>)
    7baa:	9b01      	ldr	r3, [sp, #4]
    7bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bb0:	691a      	ldr	r2, [r3, #16]
    7bb2:	9b06      	ldr	r3, [sp, #24]
    7bb4:	009b      	lsls	r3, r3, #2
    7bb6:	4413      	add	r3, r2
    7bb8:	681b      	ldr	r3, [r3, #0]
    7bba:	9303      	str	r3, [sp, #12]
        if((NULL_PTR != JobConfig) && (SpiCoreID == JobConfig->SpiCoreUse))
    7bbc:	9b03      	ldr	r3, [sp, #12]
    7bbe:	2b00      	cmp	r3, #0
    7bc0:	d009      	beq.n	7bd6 <Spi_InitChannelsJobsSeqsState+0xba>
    7bc2:	9b03      	ldr	r3, [sp, #12]
    7bc4:	695b      	ldr	r3, [r3, #20]
    7bc6:	9a01      	ldr	r2, [sp, #4]
    7bc8:	429a      	cmp	r2, r3
    7bca:	d104      	bne.n	7bd6 <Spi_InitChannelsJobsSeqsState+0xba>
        {
            Spi_axSpiJobState[Job].Result = SPI_JOB_OK;
    7bcc:	4a22      	ldr	r2, [pc, #136]	; (7c58 <Spi_InitChannelsJobsSeqsState+0x13c>)
    7bce:	9b06      	ldr	r3, [sp, #24]
    7bd0:	2100      	movs	r1, #0
    7bd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Job++)
    7bd6:	9b06      	ldr	r3, [sp, #24]
    7bd8:	3301      	adds	r3, #1
    7bda:	9306      	str	r3, [sp, #24]
        Job <= (uint32)( Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxJob);
    7bdc:	4a1c      	ldr	r2, [pc, #112]	; (7c50 <Spi_InitChannelsJobsSeqsState+0x134>)
    7bde:	9b01      	ldr	r3, [sp, #4]
    7be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7be4:	889b      	ldrh	r3, [r3, #4]
    7be6:	461a      	mov	r2, r3
    for (Job = 0u;
    7be8:	9b06      	ldr	r3, [sp, #24]
    7bea:	4293      	cmp	r3, r2
    7bec:	d9dc      	bls.n	7ba8 <Spi_InitChannelsJobsSeqsState+0x8c>
            Spi_axSpiJobState[Job].AsyncCrtSequenceState = NULL_PTR;
        #endif
        }
    }
    
    for (Sequence = 0u;
    7bee:	2300      	movs	r3, #0
    7bf0:	9305      	str	r3, [sp, #20]
    7bf2:	e01f      	b.n	7c34 <Spi_InitChannelsJobsSeqsState+0x118>
        Sequence <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxSequence);
        Sequence++)
    {
        SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
    7bf4:	4a16      	ldr	r2, [pc, #88]	; (7c50 <Spi_InitChannelsJobsSeqsState+0x134>)
    7bf6:	9b01      	ldr	r3, [sp, #4]
    7bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bfc:	695a      	ldr	r2, [r3, #20]
    7bfe:	9b05      	ldr	r3, [sp, #20]
    7c00:	009b      	lsls	r3, r3, #2
    7c02:	4413      	add	r3, r2
    7c04:	681b      	ldr	r3, [r3, #0]
    7c06:	9304      	str	r3, [sp, #16]
        if ((NULL_PTR != SequenceConfig) && (SpiCoreID == SequenceConfig->SpiCoreUse))
    7c08:	9b04      	ldr	r3, [sp, #16]
    7c0a:	2b00      	cmp	r3, #0
    7c0c:	d00f      	beq.n	7c2e <Spi_InitChannelsJobsSeqsState+0x112>
    7c0e:	9b04      	ldr	r3, [sp, #16]
    7c10:	685b      	ldr	r3, [r3, #4]
    7c12:	9a01      	ldr	r2, [sp, #4]
    7c14:	429a      	cmp	r2, r3
    7c16:	d10a      	bne.n	7c2e <Spi_InitChannelsJobsSeqsState+0x112>
            SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
            Spi_axSpiSequenceState[Sequence].Sequence = SequenceConfig;
            #endif
    
            /* initialize sequence results */
            Spi_axSpiSequenceState[Sequence].Result = SPI_SEQ_OK;
    7c18:	4a10      	ldr	r2, [pc, #64]	; (7c5c <Spi_InitChannelsJobsSeqsState+0x140>)
    7c1a:	9b05      	ldr	r3, [sp, #20]
    7c1c:	2100      	movs	r1, #0
    7c1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* SPI135: Spi_SyncTransmit() must fail if an other sync transmission
                    is ongoing.*/
            /* mark all HW units as used by the sync transmission, in order to
                force the mutual exclusion of Spi_SyncTransmit() calls */
    
            Spi_au32SpiSeqUsedHWUnits[Sequence] = 0xFFFFFFFFU;
    7c22:	4a0f      	ldr	r2, [pc, #60]	; (7c60 <Spi_InitChannelsJobsSeqsState+0x144>)
    7c24:	9b05      	ldr	r3, [sp, #20]
    7c26:	f04f 31ff 	mov.w	r1, #4294967295
    7c2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Sequence++)
    7c2e:	9b05      	ldr	r3, [sp, #20]
    7c30:	3301      	adds	r3, #1
    7c32:	9305      	str	r3, [sp, #20]
        Sequence <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxSequence);
    7c34:	4a06      	ldr	r2, [pc, #24]	; (7c50 <Spi_InitChannelsJobsSeqsState+0x134>)
    7c36:	9b01      	ldr	r3, [sp, #4]
    7c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c3c:	799b      	ldrb	r3, [r3, #6]
    7c3e:	461a      	mov	r2, r3
    for (Sequence = 0u;
    7c40:	9b05      	ldr	r3, [sp, #20]
    7c42:	4293      	cmp	r3, r2
    7c44:	d9d6      	bls.n	7bf4 <Spi_InitChannelsJobsSeqsState+0xd8>
        else
        {
            /* Do nothing */
        }
    }
}
    7c46:	bf00      	nop
    7c48:	bf00      	nop
    7c4a:	b008      	add	sp, #32
    7c4c:	4770      	bx	lr
    7c4e:	bf00      	nop
    7c50:	1fff8d4c 	.word	0x1fff8d4c
    7c54:	1fff8d60 	.word	0x1fff8d60
    7c58:	1fff8d58 	.word	0x1fff8d58
    7c5c:	1fff8d50 	.word	0x1fff8d50
    7c60:	1fff8d70 	.word	0x1fff8d70

00007c64 <Spi_GetStatusAsyncCheckHwBusy>:
*/
static Spi_StatusType Spi_GetStatusAsyncCheckHwBusy
    (
        uint32 SpiCoreID
    )
{
    7c64:	b084      	sub	sp, #16
    7c66:	9001      	str	r0, [sp, #4]
    Spi_StatusType StatusFlag = SPI_IDLE;
    7c68:	2301      	movs	r3, #1
    7c6a:	9303      	str	r3, [sp, #12]
    Spi_HWUnitType HWUnit;
    
    for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    7c6c:	2300      	movs	r3, #0
    7c6e:	f88d 300b 	strb.w	r3, [sp, #11]
    7c72:	e028      	b.n	7cc6 <Spi_GetStatusAsyncCheckHwBusy+0x62>
    {
        if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7c74:	4a18      	ldr	r2, [pc, #96]	; (7cd8 <Spi_GetStatusAsyncCheckHwBusy+0x74>)
    7c76:	9b01      	ldr	r3, [sp, #4]
    7c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c7c:	69da      	ldr	r2, [r3, #28]
    7c7e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7c82:	009b      	lsls	r3, r3, #2
    7c84:	4413      	add	r3, r2
    7c86:	681b      	ldr	r3, [r3, #0]
    7c88:	2b00      	cmp	r3, #0
    7c8a:	d017      	beq.n	7cbc <Spi_GetStatusAsyncCheckHwBusy+0x58>
            (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    7c8c:	4a12      	ldr	r2, [pc, #72]	; (7cd8 <Spi_GetStatusAsyncCheckHwBusy+0x74>)
    7c8e:	9b01      	ldr	r3, [sp, #4]
    7c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c94:	69da      	ldr	r2, [r3, #28]
    7c96:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7c9a:	009b      	lsls	r3, r3, #2
    7c9c:	4413      	add	r3, r2
    7c9e:	681b      	ldr	r3, [r3, #0]
    7ca0:	689b      	ldr	r3, [r3, #8]
        if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7ca2:	9a01      	ldr	r2, [sp, #4]
    7ca4:	429a      	cmp	r2, r3
    7ca6:	d109      	bne.n	7cbc <Spi_GetStatusAsyncCheckHwBusy+0x58>
           )
        {
            if (SPI_BUSY == Spi_axSpiHwUnitQueueArray[HWUnit].Status)
    7ca8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7cac:	4a0b      	ldr	r2, [pc, #44]	; (7cdc <Spi_GetStatusAsyncCheckHwBusy+0x78>)
    7cae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    7cb2:	2b02      	cmp	r3, #2
    7cb4:	d102      	bne.n	7cbc <Spi_GetStatusAsyncCheckHwBusy+0x58>
            {
                StatusFlag = SPI_BUSY;
    7cb6:	2302      	movs	r3, #2
    7cb8:	9303      	str	r3, [sp, #12]
                break;
    7cba:	e008      	b.n	7cce <Spi_GetStatusAsyncCheckHwBusy+0x6a>
    for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    7cbc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7cc0:	3301      	adds	r3, #1
    7cc2:	f88d 300b 	strb.w	r3, [sp, #11]
    7cc6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7cca:	2b00      	cmp	r3, #0
    7ccc:	d0d2      	beq.n	7c74 <Spi_GetStatusAsyncCheckHwBusy+0x10>
        else
        {
            /* Do nothing */
        }
    }
    return StatusFlag;
    7cce:	9b03      	ldr	r3, [sp, #12]
}
    7cd0:	4618      	mov	r0, r3
    7cd2:	b004      	add	sp, #16
    7cd4:	4770      	bx	lr
    7cd6:	bf00      	nop
    7cd8:	1fff8d4c 	.word	0x1fff8d4c
    7cdc:	1fff8d44 	.word	0x1fff8d44

00007ce0 <Spi_GetVersionInfo>:
/** @implements Spi_GetVersionInfo_Activity */
void Spi_GetVersionInfo 
    (
        Std_VersionInfoType *versioninfo
    )
{
    7ce0:	b082      	sub	sp, #8
    7ce2:	9001      	str	r0, [sp, #4]
        (void)Det_ReportError((uint16)SPI_MODULE_ID,(uint8)0,SPI_GETVERSIONINFO_ID,SPI_E_PARAM_POINTER);
    }
    else
    {
#endif /* SPI_DEV_ERROR_DETECT == STD_ON */
    versioninfo->vendorID = (uint16)SPI_VENDOR_ID;
    7ce4:	9b01      	ldr	r3, [sp, #4]
    7ce6:	222b      	movs	r2, #43	; 0x2b
    7ce8:	801a      	strh	r2, [r3, #0]
    versioninfo->moduleID = (uint8)SPI_MODULE_ID;
    7cea:	9b01      	ldr	r3, [sp, #4]
    7cec:	2253      	movs	r2, #83	; 0x53
    7cee:	805a      	strh	r2, [r3, #2]
    versioninfo->sw_major_version = (uint8)SPI_SW_MAJOR_VERSION;
    7cf0:	9b01      	ldr	r3, [sp, #4]
    7cf2:	2202      	movs	r2, #2
    7cf4:	711a      	strb	r2, [r3, #4]
    versioninfo->sw_minor_version = (uint8)SPI_SW_MINOR_VERSION;
    7cf6:	9b01      	ldr	r3, [sp, #4]
    7cf8:	2200      	movs	r2, #0
    7cfa:	715a      	strb	r2, [r3, #5]
    versioninfo->sw_patch_version = (uint8)SPI_SW_PATCH_VERSION;
    7cfc:	9b01      	ldr	r3, [sp, #4]
    7cfe:	2200      	movs	r2, #0
    7d00:	719a      	strb	r2, [r3, #6]
#if(SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif /* SPI_DEV_ERROR_DETECT == STD_ON */
}
    7d02:	bf00      	nop
    7d04:	b002      	add	sp, #8
    7d06:	4770      	bx	lr

00007d08 <Spi_Init>:
/** @implements Spi_Init_Activity */
void Spi_Init
    (
        const Spi_ConfigType *ConfigPtr
    )
{
    7d08:	b500      	push	{lr}
    7d0a:	b085      	sub	sp, #20
    7d0c:	9001      	str	r0, [sp, #4]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    7d0e:	2300      	movs	r3, #0
    7d10:	f88d 300e 	strb.w	r3, [sp, #14]

    SpiCoreID = Spi_GetCoreID;
    7d14:	2300      	movs	r3, #0
    7d16:	9302      	str	r3, [sp, #8]
    CheckStatus = Spi_InitCheckDemError(SpiCoreID, ConfigPtr);
    if ((Std_ReturnType)E_OK == CheckStatus) 
    {
#endif /*(SPI_DEV_ERROR_DETECT == STD_ON)*/

    CheckStatus = Spi_CheckInit(ConfigPtr, SpiCoreID);
    7d18:	9902      	ldr	r1, [sp, #8]
    7d1a:	9801      	ldr	r0, [sp, #4]
    7d1c:	f7ff fe44 	bl	79a8 <Spi_CheckInit>
    7d20:	4603      	mov	r3, r0
    7d22:	f88d 300e 	strb.w	r3, [sp, #14]

    if((Std_ReturnType)E_OK == CheckStatus )
    7d26:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7d2a:	2b00      	cmp	r3, #0
    7d2c:	d144      	bne.n	7db8 <Spi_Init+0xb0>
    {
    #if (SPI_PRECOMPILE_SUPPORT == STD_OFF)
        Spi_apxSpiConfigPtr[SpiCoreID] = ConfigPtr;
    7d2e:	4924      	ldr	r1, [pc, #144]	; (7dc0 <Spi_Init+0xb8>)
    7d30:	9b02      	ldr	r3, [sp, #8]
    7d32:	9a01      	ldr	r2, [sp, #4]
    7d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    #else /* (SPI_CONFIG_VARIANT == SPI_VARIANT_PRECOMPILE) */
        Spi_apxSpiConfigPtr[SpiCoreID] = Spi_PBCfgVariantPredefined[SpiCoreID];
    #endif /* (SPI_PRECOMPILE_SUPPORT == STD_OFF) */
    /* Initiate Channels, Jobs, Sequences state */
    Spi_InitChannelsJobsSeqsState(SpiCoreID);
    7d38:	9802      	ldr	r0, [sp, #8]
    7d3a:	f7ff feef 	bl	7b1c <Spi_InitChannelsJobsSeqsState>
        
        /* initialize all physical HWUnits */
        for (HWUnit = (Spi_HWUnitType) 0;
    7d3e:	2300      	movs	r3, #0
    7d40:	f88d 300f 	strb.w	r3, [sp, #15]
    7d44:	e034      	b.n	7db0 <Spi_Init+0xa8>
            HWUnit < (Spi_HWUnitType) SPI_MAX_HWUNIT;
            HWUnit++)
        {
            if((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7d46:	4a1e      	ldr	r2, [pc, #120]	; (7dc0 <Spi_Init+0xb8>)
    7d48:	9b02      	ldr	r3, [sp, #8]
    7d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d4e:	69da      	ldr	r2, [r3, #28]
    7d50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d54:	009b      	lsls	r3, r3, #2
    7d56:	4413      	add	r3, r2
    7d58:	681b      	ldr	r3, [r3, #0]
    7d5a:	2b00      	cmp	r3, #0
    7d5c:	d023      	beq.n	7da6 <Spi_Init+0x9e>
               (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    7d5e:	4a18      	ldr	r2, [pc, #96]	; (7dc0 <Spi_Init+0xb8>)
    7d60:	9b02      	ldr	r3, [sp, #8]
    7d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d66:	69da      	ldr	r2, [r3, #28]
    7d68:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d6c:	009b      	lsls	r3, r3, #2
    7d6e:	4413      	add	r3, r2
    7d70:	681b      	ldr	r3, [r3, #0]
    7d72:	689b      	ldr	r3, [r3, #8]
            if((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7d74:	9a02      	ldr	r2, [sp, #8]
    7d76:	429a      	cmp	r2, r3
    7d78:	d115      	bne.n	7da6 <Spi_Init+0x9e>
              )
            {
                Spi_Ipw_Init(HWUnit, Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig);
    7d7a:	4a11      	ldr	r2, [pc, #68]	; (7dc0 <Spi_Init+0xb8>)
    7d7c:	9b02      	ldr	r3, [sp, #8]
    7d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d82:	69da      	ldr	r2, [r3, #28]
    7d84:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d88:	009b      	lsls	r3, r3, #2
    7d8a:	4413      	add	r3, r2
    7d8c:	681a      	ldr	r2, [r3, #0]
    7d8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d92:	4611      	mov	r1, r2
    7d94:	4618      	mov	r0, r3
    7d96:	f000 fa8c 	bl	82b2 <Spi_Ipw_Init>

#if ((SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2))
                /* initialize the Job lists => no scheduled job for the unit */
                Spi_InitJobsList(HWUnit);
#endif
                Spi_axSpiHwUnitQueueArray[HWUnit].Status = SPI_IDLE;
    7d9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d9e:	4a09      	ldr	r2, [pc, #36]	; (7dc4 <Spi_Init+0xbc>)
    7da0:	2101      	movs	r1, #1
    7da2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            HWUnit++)
    7da6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7daa:	3301      	adds	r3, #1
    7dac:	f88d 300f 	strb.w	r3, [sp, #15]
        for (HWUnit = (Spi_HWUnitType) 0;
    7db0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7db4:	2b00      	cmp	r3, #0
    7db6:	d0c6      	beq.n	7d46 <Spi_Init+0x3e>
    }

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif /*(SPI_DEV_ERROR_DETECT == STD_ON)*/
}
    7db8:	bf00      	nop
    7dba:	b005      	add	sp, #20
    7dbc:	f85d fb04 	ldr.w	pc, [sp], #4
    7dc0:	1fff8d4c 	.word	0x1fff8d4c
    7dc4:	1fff8d44 	.word	0x1fff8d44

00007dc8 <Spi_DeInit>:
*       if SPI_DEV_ERROR_DETECT is STD_ON.
*
* @implements Spi_DeInit_Activity
*/
Std_ReturnType Spi_DeInit(void)
{
    7dc8:	b500      	push	{lr}
    7dca:	b083      	sub	sp, #12
    Std_ReturnType TempExit = (Std_ReturnType)E_OK;
    7dcc:	2300      	movs	r3, #0
    7dce:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;

    SpiCoreID = Spi_GetCoreID;
    7dd2:	2300      	movs	r3, #0
    7dd4:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Check if Spi Status is Busy */
        if (SPI_BUSY == Spi_GetStatus())
    7dd6:	f000 f8b1 	bl	7f3c <Spi_GetStatus>
    7dda:	4603      	mov	r3, r0
    7ddc:	2b02      	cmp	r3, #2
    7dde:	d103      	bne.n	7de8 <Spi_DeInit+0x20>
        {
            TempExit = E_NOT_OK;
    7de0:	2301      	movs	r3, #1
    7de2:	f88d 3007 	strb.w	r3, [sp, #7]
    7de6:	e037      	b.n	7e58 <Spi_DeInit+0x90>
        }
        else
        {
            /* De-initialize all physical HWUnits */
            for (HWUnit = (Spi_HWUnitType) 0;
    7de8:	2300      	movs	r3, #0
    7dea:	f88d 3006 	strb.w	r3, [sp, #6]
    7dee:	e02a      	b.n	7e46 <Spi_DeInit+0x7e>
                 HWUnit < (Spi_HWUnitType) SPI_MAX_HWUNIT;
                 HWUnit++)
            {
                if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7df0:	4a1c      	ldr	r2, [pc, #112]	; (7e64 <Spi_DeInit+0x9c>)
    7df2:	9b00      	ldr	r3, [sp, #0]
    7df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7df8:	69da      	ldr	r2, [r3, #28]
    7dfa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7dfe:	009b      	lsls	r3, r3, #2
    7e00:	4413      	add	r3, r2
    7e02:	681b      	ldr	r3, [r3, #0]
    7e04:	2b00      	cmp	r3, #0
    7e06:	d019      	beq.n	7e3c <Spi_DeInit+0x74>
                    (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    7e08:	4a16      	ldr	r2, [pc, #88]	; (7e64 <Spi_DeInit+0x9c>)
    7e0a:	9b00      	ldr	r3, [sp, #0]
    7e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e10:	69da      	ldr	r2, [r3, #28]
    7e12:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e16:	009b      	lsls	r3, r3, #2
    7e18:	4413      	add	r3, r2
    7e1a:	681b      	ldr	r3, [r3, #0]
    7e1c:	689b      	ldr	r3, [r3, #8]
                if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7e1e:	9a00      	ldr	r2, [sp, #0]
    7e20:	429a      	cmp	r2, r3
    7e22:	d10b      	bne.n	7e3c <Spi_DeInit+0x74>
                   )
                {
                    Spi_Ipw_DeInit(HWUnit, SpiCoreID);
    7e24:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e28:	9900      	ldr	r1, [sp, #0]
    7e2a:	4618      	mov	r0, r3
    7e2c:	f000 fa54 	bl	82d8 <Spi_Ipw_DeInit>
    
                    Spi_axSpiHwUnitQueueArray[HWUnit].Status = SPI_UNINIT;
    7e30:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e34:	4a0c      	ldr	r2, [pc, #48]	; (7e68 <Spi_DeInit+0xa0>)
    7e36:	2100      	movs	r1, #0
    7e38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
                 HWUnit++)
    7e3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e40:	3301      	adds	r3, #1
    7e42:	f88d 3006 	strb.w	r3, [sp, #6]
            for (HWUnit = (Spi_HWUnitType) 0;
    7e46:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e4a:	2b00      	cmp	r3, #0
    7e4c:	d0d0      	beq.n	7df0 <Spi_DeInit+0x28>
                {
                    /* Do nothing */
                }
            }
            /* Reset configuration pointer */
            Spi_apxSpiConfigPtr[SpiCoreID] = NULL_PTR;
    7e4e:	4a05      	ldr	r2, [pc, #20]	; (7e64 <Spi_DeInit+0x9c>)
    7e50:	9b00      	ldr	r3, [sp, #0]
    7e52:	2100      	movs	r1, #0
    7e54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return TempExit;
    7e58:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
    7e5c:	4618      	mov	r0, r3
    7e5e:	b003      	add	sp, #12
    7e60:	f85d fb04 	ldr.w	pc, [sp], #4
    7e64:	1fff8d4c 	.word	0x1fff8d4c
    7e68:	1fff8d44 	.word	0x1fff8d44

00007e6c <Spi_SetupEB>:
        Spi_ChannelType Channel,
        const Spi_DataBufferType  *SrcDataBufferPtr,
        Spi_DataBufferType *DesDataBufferPtr,
        Spi_NumberOfDataType Length
    )
{
    7e6c:	b500      	push	{lr}
    7e6e:	b089      	sub	sp, #36	; 0x24
    7e70:	9102      	str	r1, [sp, #8]
    7e72:	9201      	str	r2, [sp, #4]
    7e74:	461a      	mov	r2, r3
    7e76:	4603      	mov	r3, r0
    7e78:	f88d 300f 	strb.w	r3, [sp, #15]
    7e7c:	4613      	mov	r3, r2
    7e7e:	f8ad 300c 	strh.w	r3, [sp, #12]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    7e82:	2300      	movs	r3, #0
    7e84:	f88d 301f 	strb.w	r3, [sp, #31]
    Spi_ChannelStateType *ChannelState;
    const Spi_ChannelConfigType *ChannelConfig;
    uint32 SpiCoreID;

    /* get current coreID */
    SpiCoreID = Spi_GetCoreID;
    7e88:	2300      	movs	r3, #0
    7e8a:	9306      	str	r3, [sp, #24]
        Status = (Std_ReturnType)E_NOT_OK;
    }
    else
    {
#endif
        ChannelState = &Spi_axSpiChannelState[Channel];
    7e8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e90:	009b      	lsls	r3, r3, #2
    7e92:	4a28      	ldr	r2, [pc, #160]	; (7f34 <Spi_SetupEB+0xc8>)
    7e94:	4413      	add	r3, r2
    7e96:	9305      	str	r3, [sp, #20]
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[Channel].ChannelCfg;
    7e98:	4a27      	ldr	r2, [pc, #156]	; (7f38 <Spi_SetupEB+0xcc>)
    7e9a:	9b06      	ldr	r3, [sp, #24]
    7e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ea0:	68da      	ldr	r2, [r3, #12]
    7ea2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ea6:	009b      	lsls	r3, r3, #2
    7ea8:	4413      	add	r3, r2
    7eaa:	681b      	ldr	r3, [r3, #0]
    7eac:	9304      	str	r3, [sp, #16]
        /* exit early if this is the wrong buffer type */
        if (IB == ChannelConfig->BufferType)
    7eae:	9b04      	ldr	r3, [sp, #16]
    7eb0:	681b      	ldr	r3, [r3, #0]
    7eb2:	2b00      	cmp	r3, #0
    7eb4:	d103      	bne.n	7ebe <Spi_SetupEB+0x52>
        {
            /* Call Det_ReportError */
#if (SPI_DEV_ERROR_DETECT == STD_ON)
            (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_SETUPEB_ID,SPI_E_PARAM_CHANNEL);
#endif
            Status = (Std_ReturnType)E_NOT_OK;
    7eb6:	2301      	movs	r3, #1
    7eb8:	f88d 301f 	strb.w	r3, [sp, #31]
    7ebc:	e033      	b.n	7f26 <Spi_SetupEB+0xba>
            /* Length and Framesize - aren't compatible */
            /* If 8 < Framesize =< 16: Length must be divisible by 2 */
            /* If 16 < Framesize =< 32: Length must be divisible by 4 */
            Status = Spi_SetupEbCheckLength(ChannelConfig, Length);
#endif
            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05();
    7ebe:	f001 fec7 	bl	9c50 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05>
            /* save the new parameters */
            ChannelConfig->BufferDescriptor->ExternalBufferTX = SrcDataBufferPtr;
    7ec2:	9b04      	ldr	r3, [sp, #16]
    7ec4:	691b      	ldr	r3, [r3, #16]
    7ec6:	9a02      	ldr	r2, [sp, #8]
    7ec8:	601a      	str	r2, [r3, #0]
            ChannelConfig->BufferDescriptor->BufferRX = DesDataBufferPtr;
    7eca:	9b04      	ldr	r3, [sp, #16]
    7ecc:	691b      	ldr	r3, [r3, #16]
    7ece:	9a01      	ldr	r2, [sp, #4]
    7ed0:	609a      	str	r2, [r3, #8]

            ChannelState->Length = Length;
    7ed2:	9b05      	ldr	r3, [sp, #20]
    7ed4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7ed8:	805a      	strh	r2, [r3, #2]

            /* if source data pointer is zero, transmit default value */
            if (NULL_PTR == SrcDataBufferPtr)
    7eda:	9b02      	ldr	r3, [sp, #8]
    7edc:	2b00      	cmp	r3, #0
    7ede:	d107      	bne.n	7ef0 <Spi_SetupEB+0x84>
            {
                ChannelState->Flags |= SPI_CHANNEL_FLAG_TX_DEFAULT_U8;
    7ee0:	9b05      	ldr	r3, [sp, #20]
    7ee2:	781b      	ldrb	r3, [r3, #0]
    7ee4:	f043 0301 	orr.w	r3, r3, #1
    7ee8:	b2da      	uxtb	r2, r3
    7eea:	9b05      	ldr	r3, [sp, #20]
    7eec:	701a      	strb	r2, [r3, #0]
    7eee:	e006      	b.n	7efe <Spi_SetupEB+0x92>
            }
            else
            {
                ChannelState->Flags &= (uint8) (~SPI_CHANNEL_FLAG_TX_DEFAULT_U8);
    7ef0:	9b05      	ldr	r3, [sp, #20]
    7ef2:	781b      	ldrb	r3, [r3, #0]
    7ef4:	f023 0301 	bic.w	r3, r3, #1
    7ef8:	b2da      	uxtb	r2, r3
    7efa:	9b05      	ldr	r3, [sp, #20]
    7efc:	701a      	strb	r2, [r3, #0]
            }

            /* if destination data pointer is zero, discard receiving data */
            if (NULL_PTR == DesDataBufferPtr)
    7efe:	9b01      	ldr	r3, [sp, #4]
    7f00:	2b00      	cmp	r3, #0
    7f02:	d107      	bne.n	7f14 <Spi_SetupEB+0xa8>
            {
                ChannelState->Flags |= SPI_CHANNEL_FLAG_RX_DISCARD_U8;
    7f04:	9b05      	ldr	r3, [sp, #20]
    7f06:	781b      	ldrb	r3, [r3, #0]
    7f08:	f043 0302 	orr.w	r3, r3, #2
    7f0c:	b2da      	uxtb	r2, r3
    7f0e:	9b05      	ldr	r3, [sp, #20]
    7f10:	701a      	strb	r2, [r3, #0]
    7f12:	e006      	b.n	7f22 <Spi_SetupEB+0xb6>
            }
            else
            {
                ChannelState->Flags &= (uint8) (~SPI_CHANNEL_FLAG_RX_DISCARD_U8);
    7f14:	9b05      	ldr	r3, [sp, #20]
    7f16:	781b      	ldrb	r3, [r3, #0]
    7f18:	f023 0302 	bic.w	r3, r3, #2
    7f1c:	b2da      	uxtb	r2, r3
    7f1e:	9b05      	ldr	r3, [sp, #20]
    7f20:	701a      	strb	r2, [r3, #0]
            }
            SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05();
    7f22:	f001 fec1 	bl	9ca8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05>
        }
#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return Status;
    7f26:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    7f2a:	4618      	mov	r0, r3
    7f2c:	b009      	add	sp, #36	; 0x24
    7f2e:	f85d fb04 	ldr.w	pc, [sp], #4
    7f32:	bf00      	nop
    7f34:	1fff8d60 	.word	0x1fff8d60
    7f38:	1fff8d4c 	.word	0x1fff8d4c

00007f3c <Spi_GetStatus>:
*       if SPI_DEV_ERROR_DETECT is STD_ON.
*
* @implements Spi_GetStatus_Activity
*/
Spi_StatusType Spi_GetStatus(void)
{
    7f3c:	b500      	push	{lr}
    7f3e:	b085      	sub	sp, #20
    Spi_StatusType StatusFlag = SPI_IDLE;
    7f40:	2301      	movs	r3, #1
    7f42:	9303      	str	r3, [sp, #12]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;
    
    /* Get current coreID */
    SpiCoreID = Spi_GetCoreID;
    7f44:	2300      	movs	r3, #0
    7f46:	9301      	str	r3, [sp, #4]

    if (NULL_PTR == Spi_apxSpiConfigPtr[SpiCoreID])
    7f48:	4a22      	ldr	r2, [pc, #136]	; (7fd4 <Spi_GetStatus+0x98>)
    7f4a:	9b01      	ldr	r3, [sp, #4]
    7f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f50:	2b00      	cmp	r3, #0
    7f52:	d102      	bne.n	7f5a <Spi_GetStatus+0x1e>
        /* If Development Error Detection is enabled, report error if not */
        /* initialized */
        /* Call Det_ReportError */
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETSTATUS_ID,SPI_E_UNINIT);
#endif
        StatusFlag = SPI_UNINIT;
    7f54:	2300      	movs	r3, #0
    7f56:	9303      	str	r3, [sp, #12]
    7f58:	e037      	b.n	7fca <Spi_GetStatus+0x8e>
    }
    else
    {
        /* The SPI Handler Driver software module shall be busy when any
           HWUnit is busy */
        for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    7f5a:	2300      	movs	r3, #0
    7f5c:	f88d 300b 	strb.w	r3, [sp, #11]
    7f60:	e028      	b.n	7fb4 <Spi_GetStatus+0x78>
        {
            if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7f62:	4a1c      	ldr	r2, [pc, #112]	; (7fd4 <Spi_GetStatus+0x98>)
    7f64:	9b01      	ldr	r3, [sp, #4]
    7f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f6a:	69da      	ldr	r2, [r3, #28]
    7f6c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7f70:	009b      	lsls	r3, r3, #2
    7f72:	4413      	add	r3, r2
    7f74:	681b      	ldr	r3, [r3, #0]
    7f76:	2b00      	cmp	r3, #0
    7f78:	d017      	beq.n	7faa <Spi_GetStatus+0x6e>
                (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    7f7a:	4a16      	ldr	r2, [pc, #88]	; (7fd4 <Spi_GetStatus+0x98>)
    7f7c:	9b01      	ldr	r3, [sp, #4]
    7f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f82:	69da      	ldr	r2, [r3, #28]
    7f84:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7f88:	009b      	lsls	r3, r3, #2
    7f8a:	4413      	add	r3, r2
    7f8c:	681b      	ldr	r3, [r3, #0]
    7f8e:	689b      	ldr	r3, [r3, #8]
            if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7f90:	9a01      	ldr	r2, [sp, #4]
    7f92:	429a      	cmp	r2, r3
    7f94:	d109      	bne.n	7faa <Spi_GetStatus+0x6e>
               )
            {
                if (1u == Spi_au32SpiBusySyncHWUnitsStatus[HWUnit])
    7f96:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7f9a:	4a0f      	ldr	r2, [pc, #60]	; (7fd8 <Spi_GetStatus+0x9c>)
    7f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fa0:	2b01      	cmp	r3, #1
    7fa2:	d102      	bne.n	7faa <Spi_GetStatus+0x6e>
                {
                    StatusFlag = SPI_BUSY;
    7fa4:	2302      	movs	r3, #2
    7fa6:	9303      	str	r3, [sp, #12]
                    break;
    7fa8:	e008      	b.n	7fbc <Spi_GetStatus+0x80>
        for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    7faa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7fae:	3301      	adds	r3, #1
    7fb0:	f88d 300b 	strb.w	r3, [sp, #11]
    7fb4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7fb8:	2b00      	cmp	r3, #0
    7fba:	d0d2      	beq.n	7f62 <Spi_GetStatus+0x26>
            {
                /* Do nothing */
            }
        }
        /* check for busy HWUnit in async transmissions */
        if (SPI_BUSY != StatusFlag)
    7fbc:	9b03      	ldr	r3, [sp, #12]
    7fbe:	2b02      	cmp	r3, #2
    7fc0:	d003      	beq.n	7fca <Spi_GetStatus+0x8e>
        {
            /* Note: Checking for IsSync attribute for HWUnit is not really needed
                 It is preferable to skip this check in order to have a more compact code
            */
            StatusFlag = Spi_GetStatusAsyncCheckHwBusy(SpiCoreID);
    7fc2:	9801      	ldr	r0, [sp, #4]
    7fc4:	f7ff fe4e 	bl	7c64 <Spi_GetStatusAsyncCheckHwBusy>
    7fc8:	9003      	str	r0, [sp, #12]
        else
        {
            /* Do notthing */
        }
    }
    return StatusFlag;
    7fca:	9b03      	ldr	r3, [sp, #12]
}
    7fcc:	4618      	mov	r0, r3
    7fce:	b005      	add	sp, #20
    7fd0:	f85d fb04 	ldr.w	pc, [sp], #4
    7fd4:	1fff8d4c 	.word	0x1fff8d4c
    7fd8:	1fff8d78 	.word	0x1fff8d78

00007fdc <Spi_GetJobResult>:
/** @implements Spi_GetJobResult_Activity */
Spi_JobResultType Spi_GetJobResult
    (
        Spi_JobType Job
    )
{
    7fdc:	b084      	sub	sp, #16
    7fde:	4603      	mov	r3, r0
    7fe0:	f8ad 3006 	strh.w	r3, [sp, #6]
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETJOBRESULT_ID,SPI_E_PARAM_CONFIG);
    }
    else
    {
#endif
        JobResult = Spi_axSpiJobState[Job].Result;
    7fe4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7fe8:	4a03      	ldr	r2, [pc, #12]	; (7ff8 <Spi_GetJobResult+0x1c>)
    7fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fee:	9303      	str	r3, [sp, #12]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return JobResult;
    7ff0:	9b03      	ldr	r3, [sp, #12]
}
    7ff2:	4618      	mov	r0, r3
    7ff4:	b004      	add	sp, #16
    7ff6:	4770      	bx	lr
    7ff8:	1fff8d58 	.word	0x1fff8d58

00007ffc <Spi_GetSequenceResult>:
/** @implements Spi_GetSequenceResult_Activity */
Spi_SeqResultType Spi_GetSequenceResult
    (
        Spi_SequenceType Sequence
    )
{
    7ffc:	b084      	sub	sp, #16
    7ffe:	4603      	mov	r3, r0
    8000:	f88d 3007 	strb.w	r3, [sp, #7]
            (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETSEQUENCERESULT_ID,SPI_E_PARAM_CONFIG);
        }
        else
        {
#endif
           SequenceResult = Spi_axSpiSequenceState[Sequence].Result;
    8004:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8008:	4a03      	ldr	r2, [pc, #12]	; (8018 <Spi_GetSequenceResult+0x1c>)
    800a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    800e:	9303      	str	r3, [sp, #12]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif

    return SequenceResult;
    8010:	9b03      	ldr	r3, [sp, #12]
}
    8012:	4618      	mov	r0, r3
    8014:	b004      	add	sp, #16
    8016:	4770      	bx	lr
    8018:	1fff8d50 	.word	0x1fff8d50

0000801c <Spi_SyncTransmit>:
/** @implements Spi_SyncTransmit_Activity */
Std_ReturnType Spi_SyncTransmit
    (
        Spi_SequenceType Sequence
    )
{
    801c:	b500      	push	{lr}
    801e:	b08b      	sub	sp, #44	; 0x2c
    8020:	4603      	mov	r3, r0
    8022:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_SequenceStateType *SequenceState;
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    8026:	2300      	movs	r3, #0
    8028:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    Spi_JobType Job;
    const Spi_JobConfigType *JobConfig;
    uint32 SpiCoreID;

    /* Get current coreID */
    SpiCoreID = Spi_GetCoreID;
    802c:	2300      	movs	r3, #0
    802e:	9308      	str	r3, [sp, #32]
        Status = Spi_SynctransmitCheckJobsIsValid(SequenceConfig, SpiCoreID);

        if ((Std_ReturnType)E_NOT_OK != Status)
        {
#endif /* (SPI_DEV_ERROR_DETECT == STD_ON) */
            SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
    8030:	4a60      	ldr	r2, [pc, #384]	; (81b4 <Spi_SyncTransmit+0x198>)
    8032:	9b08      	ldr	r3, [sp, #32]
    8034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8038:	695a      	ldr	r2, [r3, #20]
    803a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    803e:	009b      	lsls	r3, r3, #2
    8040:	4413      	add	r3, r2
    8042:	681b      	ldr	r3, [r3, #0]
    8044:	9307      	str	r3, [sp, #28]
            /* Get the number of jobs in the sequence */
            NumJobsInSequence = SequenceConfig->NumJobs;
    8046:	9b07      	ldr	r3, [sp, #28]
    8048:	881b      	ldrh	r3, [r3, #0]
    804a:	f8ad 301a 	strh.w	r3, [sp, #26]

            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06();
    804e:	f001 fe51 	bl	9cf4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06>
            /* check if there are HW units already running */
            for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    8052:	2300      	movs	r3, #0
    8054:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    8058:	e017      	b.n	808a <Spi_SyncTransmit+0x6e>
            {
                if (0u != ((Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] << HWUnit) & Spi_au32SpiSeqUsedHWUnits[Sequence]))
    805a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    805e:	4a56      	ldr	r2, [pc, #344]	; (81b8 <Spi_SyncTransmit+0x19c>)
    8060:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8064:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    8068:	409a      	lsls	r2, r3
    806a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    806e:	4953      	ldr	r1, [pc, #332]	; (81bc <Spi_SyncTransmit+0x1a0>)
    8070:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    8074:	4013      	ands	r3, r2
    8076:	2b00      	cmp	r3, #0
    8078:	d002      	beq.n	8080 <Spi_SyncTransmit+0x64>
                {
                    Status = (Std_ReturnType)E_NOT_OK;
    807a:	2301      	movs	r3, #1
    807c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    8080:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    8084:	3301      	adds	r3, #1
    8086:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    808a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    808e:	2b00      	cmp	r3, #0
    8090:	d0e3      	beq.n	805a <Spi_SyncTransmit+0x3e>
                {
                    /* Do notthing */
                }
            }
            
            if ((Std_ReturnType)E_NOT_OK != Status)
    8092:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8096:	2b01      	cmp	r3, #1
    8098:	f000 8083 	beq.w	81a2 <Spi_SyncTransmit+0x186>
            {
                /* Set the sequence as pending */
                SequenceState = &Spi_axSpiSequenceState[Sequence];
    809c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    80a0:	009b      	lsls	r3, r3, #2
    80a2:	4a47      	ldr	r2, [pc, #284]	; (81c0 <Spi_SyncTransmit+0x1a4>)
    80a4:	4413      	add	r3, r2
    80a6:	9305      	str	r3, [sp, #20]
                SequenceState->Result = SPI_SEQ_PENDING;
    80a8:	9b05      	ldr	r3, [sp, #20]
    80aa:	2201      	movs	r2, #1
    80ac:	601a      	str	r2, [r3, #0]
                /* set used HW units as busy */
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    80ae:	2300      	movs	r3, #0
    80b0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    80b4:	e022      	b.n	80fc <Spi_SyncTransmit+0xe0>
                {
                    /* Get the job id */
                    Job = SequenceConfig->JobIndexList[JobIndex];
    80b6:	9b07      	ldr	r3, [sp, #28]
    80b8:	689a      	ldr	r2, [r3, #8]
    80ba:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    80be:	005b      	lsls	r3, r3, #1
    80c0:	4413      	add	r3, r2
    80c2:	881b      	ldrh	r3, [r3, #0]
    80c4:	f8ad 3012 	strh.w	r3, [sp, #18]
                    JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    80c8:	4a3a      	ldr	r2, [pc, #232]	; (81b4 <Spi_SyncTransmit+0x198>)
    80ca:	9b08      	ldr	r3, [sp, #32]
    80cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80d0:	691a      	ldr	r2, [r3, #16]
    80d2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    80d6:	009b      	lsls	r3, r3, #2
    80d8:	4413      	add	r3, r2
    80da:	681b      	ldr	r3, [r3, #0]
    80dc:	9303      	str	r3, [sp, #12]
                    /* Logical Spi HWUnit */
                    HWUnit = JobConfig->HWUnit;
    80de:	9b03      	ldr	r3, [sp, #12]
    80e0:	7f1b      	ldrb	r3, [r3, #28]
    80e2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] = 1u;
    80e6:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    80ea:	4a33      	ldr	r2, [pc, #204]	; (81b8 <Spi_SyncTransmit+0x19c>)
    80ec:	2101      	movs	r1, #1
    80ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    80f2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    80f6:	3301      	adds	r3, #1
    80f8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    80fc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    8100:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    8104:	429a      	cmp	r2, r3
    8106:	d3d6      	bcc.n	80b6 <Spi_SyncTransmit+0x9a>
                }
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06();
    8108:	f001 fe20 	bl	9d4c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>
                /* Transmit Jobs */
                Status = Spi_SyncJobsTranfer(SequenceConfig, SpiCoreID);
    810c:	9908      	ldr	r1, [sp, #32]
    810e:	9807      	ldr	r0, [sp, #28]
    8110:	f7ff fc72 	bl	79f8 <Spi_SyncJobsTranfer>
    8114:	4603      	mov	r3, r0
    8116:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                
                if ((Std_ReturnType)E_OK == Status)
    811a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    811e:	2b00      	cmp	r3, #0
    8120:	d103      	bne.n	812a <Spi_SyncTransmit+0x10e>
                {
                    /* Set the sequence as OK */
                    SequenceState->Result = SPI_SEQ_OK;
    8122:	9b05      	ldr	r3, [sp, #20]
    8124:	2200      	movs	r2, #0
    8126:	601a      	str	r2, [r3, #0]
    8128:	e002      	b.n	8130 <Spi_SyncTransmit+0x114>
#endif
                }
                else
                {
                    /* Set the sequence as FAILED */
                    SequenceState->Result = SPI_SEQ_FAILED;
    812a:	9b05      	ldr	r3, [sp, #20]
    812c:	2202      	movs	r2, #2
    812e:	601a      	str	r2, [r3, #0]
                    /* Report to DEM */
                    Spi_DemReportStatus(SpiCoreID, DEM_EVENT_STATUS_FAILED);
#endif
                }
                
                SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07();
    8130:	f001 fe32 	bl	9d98 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07>
                /* set used HW units as idle */
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    8134:	2300      	movs	r3, #0
    8136:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    813a:	e022      	b.n	8182 <Spi_SyncTransmit+0x166>
                {
                    /* Get the job id */
                    Job = SequenceConfig->JobIndexList[JobIndex];
    813c:	9b07      	ldr	r3, [sp, #28]
    813e:	689a      	ldr	r2, [r3, #8]
    8140:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    8144:	005b      	lsls	r3, r3, #1
    8146:	4413      	add	r3, r2
    8148:	881b      	ldrh	r3, [r3, #0]
    814a:	f8ad 3012 	strh.w	r3, [sp, #18]
                    JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    814e:	4a19      	ldr	r2, [pc, #100]	; (81b4 <Spi_SyncTransmit+0x198>)
    8150:	9b08      	ldr	r3, [sp, #32]
    8152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8156:	691a      	ldr	r2, [r3, #16]
    8158:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    815c:	009b      	lsls	r3, r3, #2
    815e:	4413      	add	r3, r2
    8160:	681b      	ldr	r3, [r3, #0]
    8162:	9303      	str	r3, [sp, #12]
                    /* Logical Spi HWUnit */
                    HWUnit = JobConfig->HWUnit;
    8164:	9b03      	ldr	r3, [sp, #12]
    8166:	7f1b      	ldrb	r3, [r3, #28]
    8168:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] = 0u;
    816c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    8170:	4a11      	ldr	r2, [pc, #68]	; (81b8 <Spi_SyncTransmit+0x19c>)
    8172:	2100      	movs	r1, #0
    8174:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    8178:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    817c:	3301      	adds	r3, #1
    817e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    8182:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    8186:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    818a:	429a      	cmp	r2, r3
    818c:	d3d6      	bcc.n	813c <Spi_SyncTransmit+0x120>
                }
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07();
    818e:	f001 fe2f 	bl	9df0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07>
                
                /* End Sequence Notification */
                if (NULL_PTR != SequenceConfig->EndNotification)
    8192:	9b07      	ldr	r3, [sp, #28]
    8194:	68db      	ldr	r3, [r3, #12]
    8196:	2b00      	cmp	r3, #0
    8198:	d005      	beq.n	81a6 <Spi_SyncTransmit+0x18a>
                {
                    SequenceConfig->EndNotification();
    819a:	9b07      	ldr	r3, [sp, #28]
    819c:	68db      	ldr	r3, [r3, #12]
    819e:	4798      	blx	r3
    81a0:	e001      	b.n	81a6 <Spi_SyncTransmit+0x18a>
                    /* Do nothing */
                }
            }
            else
            {
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06();
    81a2:	f001 fdd3 	bl	9d4c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>
            /* Do nothing */
        }
    }
#endif

    return Status;
    81a6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    81aa:	4618      	mov	r0, r3
    81ac:	b00b      	add	sp, #44	; 0x2c
    81ae:	f85d fb04 	ldr.w	pc, [sp], #4
    81b2:	bf00      	nop
    81b4:	1fff8d4c 	.word	0x1fff8d4c
    81b8:	1fff8d78 	.word	0x1fff8d78
    81bc:	1fff8d70 	.word	0x1fff8d70
    81c0:	1fff8d50 	.word	0x1fff8d50

000081c4 <Spi_GetHWUnitStatus>:
/** @implements Spi_GetHWUnitStatus_Activity */
Spi_StatusType Spi_GetHWUnitStatus
    (
        Spi_HWUnitType HWUnit
    )
{
    81c4:	b084      	sub	sp, #16
    81c6:	4603      	mov	r3, r0
    81c8:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_StatusType Status = SPI_UNINIT;
    81cc:	2300      	movs	r3, #0
    81ce:	9303      	str	r3, [sp, #12]
        /* Do nothing */
    }
    else
    {
#endif
        Status = Spi_axSpiHwUnitQueueArray[HWUnit].Status;
    81d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    81d4:	4a03      	ldr	r2, [pc, #12]	; (81e4 <Spi_GetHWUnitStatus+0x20>)
    81d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    81da:	9303      	str	r3, [sp, #12]

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return Status;
    81dc:	9b03      	ldr	r3, [sp, #12]
}
    81de:	4618      	mov	r0, r3
    81e0:	b004      	add	sp, #16
    81e2:	4770      	bx	lr
    81e4:	1fff8d44 	.word	0x1fff8d44

000081e8 <Spi_Cancel>:
*       undefined state due to cancelling a sequence transmission.
*
*/
/**  @implements Spi_Cancel_Activity */
void Spi_Cancel(Spi_SequenceType Sequence)
{
    81e8:	b082      	sub	sp, #8
    81ea:	4603      	mov	r3, r0
    81ec:	f88d 3007 	strb.w	r3, [sp, #7]
        }
        else
        {
#endif
            /* Set sequence state to Cancel */
            Spi_axSpiSequenceState[Sequence].Result = SPI_SEQ_CANCELLED;
    81f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    81f4:	4a03      	ldr	r2, [pc, #12]	; (8204 <Spi_Cancel+0x1c>)
    81f6:	2103      	movs	r1, #3
    81f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            #endif
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif
}
    81fc:	bf00      	nop
    81fe:	b002      	add	sp, #8
    8200:	4770      	bx	lr
    8202:	bf00      	nop
    8204:	1fff8d50 	.word	0x1fff8d50

00008208 <Spi_MainFunction_Handling>:
                /*Do nothing */
            }
        }
    }
#endif /* #if ( (SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2) ) */
}
    8208:	bf00      	nop
    820a:	4770      	bx	lr

0000820c <Spi_Ipw_SyncTransmitProcess>:
        const Spi_JobConfigType *JobConfig,
        const Spi_ChannelConfigType *ChannelConfig,
        Spi_DataBufferType *RxBuffer,
        const Spi_DataBufferType *TxBuffer
    )
{
    820c:	b500      	push	{lr}
    820e:	b08d      	sub	sp, #52	; 0x34
    8210:	9005      	str	r0, [sp, #20]
    8212:	9104      	str	r1, [sp, #16]
    8214:	9203      	str	r2, [sp, #12]
    8216:	9302      	str	r3, [sp, #8]
    Lpspi_Ip_StatusType Lpspi_spiStatus = LPSPI_IP_STATUS_SUCCESS;
    8218:	2300      	movs	r3, #0
    821a:	930b      	str	r3, [sp, #44]	; 0x2c
    const Lpspi_Ip_ExternalDeviceType* LpspiExternalDevice;
#if (SPI_IPW_SPI_FLEXIO_ENABLE == STD_ON)
    Flexio_Spi_Ip_StatusType Flexio_spiStatus = FLEXIO_SPI_IP_STATUS_SUCCESS;
    const Flexio_Spi_Ip_ExternalDeviceType* Flexio_SpiExternalDevice;
#endif
    Std_ReturnType Ipw_Status = (Std_ReturnType)E_OK;
    821c:	2300      	movs	r3, #0
    821e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    Spi_NumberOfDataType NumberOfBytes;
    Spi_Ipw_SupportedIpsType IpType = JobConfig->ExternalDeviceConfig->ExDeviceConfig->IpType;
    8222:	9b05      	ldr	r3, [sp, #20]
    8224:	6a1b      	ldr	r3, [r3, #32]
    8226:	681b      	ldr	r3, [r3, #0]
    8228:	681b      	ldr	r3, [r3, #0]
    822a:	9309      	str	r3, [sp, #36]	; 0x24
        HalfDuplexMode = LPSPI_IP_FULL_DUPLEX;
        HalfDuplexModeSupport = FALSE;
    }
#endif
    
    NumberOfBytes = ChannelConfig->ChannelState->Length;
    822c:	9b04      	ldr	r3, [sp, #16]
    822e:	699b      	ldr	r3, [r3, #24]
    8230:	885b      	ldrh	r3, [r3, #2]
    8232:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    if (SPI_OVER_LPSPI == IpType)
    8236:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8238:	2b00      	cmp	r3, #0
    823a:	d12e      	bne.n	829a <Spi_Ipw_SyncTransmitProcess+0x8e>
    {
        LpspiExternalDevice = JobConfig->ExternalDeviceConfig->ExDeviceConfig->ExternalDeviceConfig.LpspiExternalDeviceConfig;
    823c:	9b05      	ldr	r3, [sp, #20]
    823e:	6a1b      	ldr	r3, [r3, #32]
    8240:	681b      	ldr	r3, [r3, #0]
    8242:	689b      	ldr	r3, [r3, #8]
    8244:	9307      	str	r3, [sp, #28]
        Lpspi_spiStatus = Lpspi_Ip_UpdateDefaultTransmitData(LpspiExternalDevice, ChannelConfig->DefaultTransmitValue);
    8246:	9b04      	ldr	r3, [sp, #16]
    8248:	689b      	ldr	r3, [r3, #8]
    824a:	4619      	mov	r1, r3
    824c:	9807      	ldr	r0, [sp, #28]
    824e:	f7ff fadd 	bl	780c <Lpspi_Ip_UpdateDefaultTransmitData>
    8252:	900b      	str	r0, [sp, #44]	; 0x2c
        if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    8254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8256:	2b00      	cmp	r3, #0
    8258:	d11f      	bne.n	829a <Spi_Ipw_SyncTransmitProcess+0x8e>
        {
            Lpspi_spiStatus = Lpspi_Ip_UpdateFrameSize(LpspiExternalDevice, ChannelConfig->FrameSize);
    825a:	9b04      	ldr	r3, [sp, #16]
    825c:	791b      	ldrb	r3, [r3, #4]
    825e:	b29b      	uxth	r3, r3
    8260:	4619      	mov	r1, r3
    8262:	9807      	ldr	r0, [sp, #28]
    8264:	f7ff fa92 	bl	778c <Lpspi_Ip_UpdateFrameSize>
    8268:	900b      	str	r0, [sp, #44]	; 0x2c
            if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    826a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    826c:	2b00      	cmp	r3, #0
    826e:	d114      	bne.n	829a <Spi_Ipw_SyncTransmitProcess+0x8e>
            {
                Lpspi_spiStatus = Lpspi_Ip_UpdateLsb(LpspiExternalDevice, ChannelConfig->Lsb);
    8270:	9b04      	ldr	r3, [sp, #16]
    8272:	795b      	ldrb	r3, [r3, #5]
    8274:	4619      	mov	r1, r3
    8276:	9807      	ldr	r0, [sp, #28]
    8278:	f7ff faa8 	bl	77cc <Lpspi_Ip_UpdateLsb>
    827c:	900b      	str	r0, [sp, #44]	; 0x2c
                if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    827e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8280:	2b00      	cmp	r3, #0
    8282:	d10a      	bne.n	829a <Spi_Ipw_SyncTransmitProcess+0x8e>
                        Lpspi_spiStatus = Lpspi_Ip_SyncTransmitHalfDuplex(LpspiExternalDevice, Buffer, NumberOfBytes, HalfDuplexMode, SPI_TIMEOUT_COUNTER_U32);
                    }
                    else
                    #endif
                    {
                        Lpspi_spiStatus = Lpspi_Ip_SyncTransmit(LpspiExternalDevice, (const uint8*)TxBuffer, RxBuffer, NumberOfBytes, SPI_TIMEOUT_COUNTER_U32);
    8284:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    8288:	f24c 3250 	movw	r2, #50000	; 0xc350
    828c:	9200      	str	r2, [sp, #0]
    828e:	9a03      	ldr	r2, [sp, #12]
    8290:	9902      	ldr	r1, [sp, #8]
    8292:	9807      	ldr	r0, [sp, #28]
    8294:	f7fe fe0a 	bl	6eac <Lpspi_Ip_SyncTransmit>
    8298:	900b      	str	r0, [sp, #44]	; 0x2c
            }
        }
    }
    if( (LPSPI_IP_STATUS_SUCCESS != Lpspi_spiStatus) || (FLEXIO_SPI_IP_STATUS_SUCCESS != Flexio_spiStatus))
#else
    if(LPSPI_IP_STATUS_SUCCESS != Lpspi_spiStatus)
    829a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    829c:	2b00      	cmp	r3, #0
    829e:	d002      	beq.n	82a6 <Spi_Ipw_SyncTransmitProcess+0x9a>
#endif /*(SPI_IPW_SPI_FLEXIO_ENABLE == STD_ON)*/
    {
        Ipw_Status = (Std_ReturnType)E_NOT_OK;
    82a0:	2301      	movs	r3, #1
    82a2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    }
    return Ipw_Status;
    82a6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
}
    82aa:	4618      	mov	r0, r3
    82ac:	b00d      	add	sp, #52	; 0x34
    82ae:	f85d fb04 	ldr.w	pc, [sp], #4

000082b2 <Spi_Ipw_Init>:
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* Spi_Ipw_Init */
void Spi_Ipw_Init(const Spi_HWUnitType HWUnitId, const Spi_HWUnitConfigType *HWUnit)
{
    82b2:	b500      	push	{lr}
    82b4:	b083      	sub	sp, #12
    82b6:	4603      	mov	r3, r0
    82b8:	9100      	str	r1, [sp, #0]
    82ba:	f88d 3007 	strb.w	r3, [sp, #7]
    if (SPI_OVER_LPSPI == HWUnit->IpType)
    82be:	9b00      	ldr	r3, [sp, #0]
    82c0:	681b      	ldr	r3, [r3, #0]
    82c2:	2b00      	cmp	r3, #0
    82c4:	d104      	bne.n	82d0 <Spi_Ipw_Init+0x1e>
    #if ((SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2))
        Spi_Ipw_au8LpspiHWUnitMapping[HWUnit->Instance] = HWUnitId;
    #else
        (void)HWUnitId;
    #endif
        (void)Lpspi_Ip_Init(HWUnit->IpConfig.LpspiIpConfig);
    82c6:	9b00      	ldr	r3, [sp, #0]
    82c8:	68db      	ldr	r3, [r3, #12]
    82ca:	4618      	mov	r0, r3
    82cc:	f7fe fd62 	bl	6d94 <Lpspi_Ip_Init>
        (void)HWUnitId;
    #endif
        (void)Flexio_Spi_Ip_Init(HWUnit->IpConfig.FlexioSpiIpConfig);
    }
#endif
}
    82d0:	bf00      	nop
    82d2:	b003      	add	sp, #12
    82d4:	f85d fb04 	ldr.w	pc, [sp], #4

000082d8 <Spi_Ipw_DeInit>:

/* Spi_Ipw_DeInit */
void Spi_Ipw_DeInit(Spi_HWUnitType HWUnit, uint32 SpiCoreID)
{
    82d8:	b500      	push	{lr}
    82da:	b083      	sub	sp, #12
    82dc:	4603      	mov	r3, r0
    82de:	9100      	str	r1, [sp, #0]
    82e0:	f88d 3007 	strb.w	r3, [sp, #7]
    if (SPI_OVER_LPSPI == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->IpType)
    82e4:	4a0f      	ldr	r2, [pc, #60]	; (8324 <Spi_Ipw_DeInit+0x4c>)
    82e6:	9b00      	ldr	r3, [sp, #0]
    82e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82ec:	69da      	ldr	r2, [r3, #28]
    82ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82f2:	009b      	lsls	r3, r3, #2
    82f4:	4413      	add	r3, r2
    82f6:	681b      	ldr	r3, [r3, #0]
    82f8:	681b      	ldr	r3, [r3, #0]
    82fa:	2b00      	cmp	r3, #0
    82fc:	d10d      	bne.n	831a <Spi_Ipw_DeInit+0x42>
    {
        (void)Lpspi_Ip_DeInit(Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->Instance);
    82fe:	4a09      	ldr	r2, [pc, #36]	; (8324 <Spi_Ipw_DeInit+0x4c>)
    8300:	9b00      	ldr	r3, [sp, #0]
    8302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8306:	69da      	ldr	r2, [r3, #28]
    8308:	f89d 3007 	ldrb.w	r3, [sp, #7]
    830c:	009b      	lsls	r3, r3, #2
    830e:	4413      	add	r3, r2
    8310:	681b      	ldr	r3, [r3, #0]
    8312:	791b      	ldrb	r3, [r3, #4]
    8314:	4618      	mov	r0, r3
    8316:	f7fe fd99 	bl	6e4c <Lpspi_Ip_DeInit>
    else
    {
        (void)Flexio_Spi_Ip_DeInit(Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->Instance);
    }
#endif
}
    831a:	bf00      	nop
    831c:	b003      	add	sp, #12
    831e:	f85d fb04 	ldr.w	pc, [sp], #4
    8322:	bf00      	nop
    8324:	1fff8d4c 	.word	0x1fff8d4c

00008328 <Spi_Ipw_SyncTransmit>:

/* Spi_Ipw_SyncTransmit */
#if ( (SPI_LEVEL_DELIVERED == SPI_LEVEL2) || (SPI_LEVEL_DELIVERED == SPI_LEVEL0) )
Std_ReturnType Spi_Ipw_SyncTransmit(const Spi_JobConfigType *JobConfig, uint32 SpiCoreID)
{
    8328:	b500      	push	{lr}
    832a:	b08b      	sub	sp, #44	; 0x2c
    832c:	9001      	str	r0, [sp, #4]
    832e:	9100      	str	r1, [sp, #0]

    Std_ReturnType Ipw_Status = (Std_ReturnType)E_OK;
    8330:	2300      	movs	r3, #0
    8332:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    const Spi_ChannelConfigType *ChannelConfig;
    const Spi_ChannelConfigType *NextChannelConfig;
    Spi_ChannelType ChannelID;
    Spi_ChannelType NumChannelsInJob;
    Spi_ChannelType ChannelIndex;
    Spi_Ipw_SupportedIpsType IpType = JobConfig->ExternalDeviceConfig->ExDeviceConfig->IpType;
    8336:	9b01      	ldr	r3, [sp, #4]
    8338:	6a1b      	ldr	r3, [r3, #32]
    833a:	681b      	ldr	r3, [r3, #0]
    833c:	681b      	ldr	r3, [r3, #0]
    833e:	9306      	str	r3, [sp, #24]
    
    NumChannelsInJob = JobConfig->NumChannels;
    8340:	9b01      	ldr	r3, [sp, #4]
    8342:	781b      	ldrb	r3, [r3, #0]
    8344:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChannelIndex = (Spi_ChannelType)0; ChannelIndex < NumChannelsInJob; ChannelIndex++)
    8348:	2300      	movs	r3, #0
    834a:	f88d 301f 	strb.w	r3, [sp, #31]
    834e:	e0e6      	b.n	851e <Spi_Ipw_SyncTransmit+0x1f6>
    {
        ChannelID = JobConfig->ChannelIndexList[ChannelIndex];
    8350:	9b01      	ldr	r3, [sp, #4]
    8352:	685a      	ldr	r2, [r3, #4]
    8354:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8358:	4413      	add	r3, r2
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	f88d 3016 	strb.w	r3, [sp, #22]
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[ChannelID].ChannelCfg;
    8360:	4a75      	ldr	r2, [pc, #468]	; (8538 <Spi_Ipw_SyncTransmit+0x210>)
    8362:	9b00      	ldr	r3, [sp, #0]
    8364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8368:	68da      	ldr	r2, [r3, #12]
    836a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    836e:	009b      	lsls	r3, r3, #2
    8370:	4413      	add	r3, r2
    8372:	681b      	ldr	r3, [r3, #0]
    8374:	9304      	str	r3, [sp, #16]
        RxBuffer = ChannelConfig->BufferDescriptor->BufferRX;
    8376:	9b04      	ldr	r3, [sp, #16]
    8378:	691b      	ldr	r3, [r3, #16]
    837a:	689b      	ldr	r3, [r3, #8]
    837c:	9303      	str	r3, [sp, #12]
        if(0u != (ChannelConfig->ChannelState->Flags & SPI_CHANNEL_FLAG_TX_DEFAULT_U8))
    837e:	9b04      	ldr	r3, [sp, #16]
    8380:	699b      	ldr	r3, [r3, #24]
    8382:	781b      	ldrb	r3, [r3, #0]
    8384:	f003 0301 	and.w	r3, r3, #1
    8388:	2b00      	cmp	r3, #0
    838a:	d002      	beq.n	8392 <Spi_Ipw_SyncTransmit+0x6a>
        {
            TxBuffer = NULL_PTR;
    838c:	2300      	movs	r3, #0
    838e:	9308      	str	r3, [sp, #32]
    8390:	e00c      	b.n	83ac <Spi_Ipw_SyncTransmit+0x84>
        }
        else
        {
            if(EB == ChannelConfig->BufferType)
    8392:	9b04      	ldr	r3, [sp, #16]
    8394:	681b      	ldr	r3, [r3, #0]
    8396:	2b01      	cmp	r3, #1
    8398:	d104      	bne.n	83a4 <Spi_Ipw_SyncTransmit+0x7c>
            {
                TxBuffer = ChannelConfig->BufferDescriptor->ExternalBufferTX;
    839a:	9b04      	ldr	r3, [sp, #16]
    839c:	691b      	ldr	r3, [r3, #16]
    839e:	681b      	ldr	r3, [r3, #0]
    83a0:	9308      	str	r3, [sp, #32]
    83a2:	e003      	b.n	83ac <Spi_Ipw_SyncTransmit+0x84>
            }
            else
            {
                TxBuffer = (const uint8*)(ChannelConfig->BufferDescriptor->InternalBufferTX);
    83a4:	9b04      	ldr	r3, [sp, #16]
    83a6:	691b      	ldr	r3, [r3, #16]
    83a8:	685b      	ldr	r3, [r3, #4]
    83aa:	9308      	str	r3, [sp, #32]
            }
        }
        
        if (SPI_OVER_LPSPI == IpType)
    83ac:	9b06      	ldr	r3, [sp, #24]
    83ae:	2b00      	cmp	r3, #0
    83b0:	f040 80a7 	bne.w	8502 <Spi_Ipw_SyncTransmit+0x1da>
        {
            if(ChannelIndex == (NumChannelsInJob - 1u))
    83b4:	f89d 201f 	ldrb.w	r2, [sp, #31]
    83b8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    83bc:	3b01      	subs	r3, #1
    83be:	429a      	cmp	r2, r3
    83c0:	d10a      	bne.n	83d8 <Spi_Ipw_SyncTransmit+0xb0>
            {
                /* Clear CS after current channel */
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->KeepCs = FALSE;
    83c2:	9b01      	ldr	r3, [sp, #4]
    83c4:	6a1b      	ldr	r3, [r3, #32]
    83c6:	681b      	ldr	r3, [r3, #0]
    83c8:	791b      	ldrb	r3, [r3, #4]
    83ca:	461a      	mov	r2, r3
    83cc:	4b5b      	ldr	r3, [pc, #364]	; (853c <Spi_Ipw_SyncTransmit+0x214>)
    83ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    83d2:	2200      	movs	r2, #0
    83d4:	771a      	strb	r2, [r3, #28]
    83d6:	e07b      	b.n	84d0 <Spi_Ipw_SyncTransmit+0x1a8>
            }
            else
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->KeepCs = TRUE;
    83d8:	9b01      	ldr	r3, [sp, #4]
    83da:	6a1b      	ldr	r3, [r3, #32]
    83dc:	681b      	ldr	r3, [r3, #0]
    83de:	791b      	ldrb	r3, [r3, #4]
    83e0:	461a      	mov	r2, r3
    83e2:	4b56      	ldr	r3, [pc, #344]	; (853c <Spi_Ipw_SyncTransmit+0x214>)
    83e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    83e8:	2201      	movs	r2, #1
    83ea:	771a      	strb	r2, [r3, #28]
                MCAL_DATA_SYNC_BARRIER();
    83ec:	f3bf 8f4f 	dsb	sy
                /* update data for next transfer */
                NextChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[JobConfig->ChannelIndexList[ChannelIndex + 1u]].ChannelCfg;
    83f0:	4a51      	ldr	r2, [pc, #324]	; (8538 <Spi_Ipw_SyncTransmit+0x210>)
    83f2:	9b00      	ldr	r3, [sp, #0]
    83f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83f8:	68da      	ldr	r2, [r3, #12]
    83fa:	9b01      	ldr	r3, [sp, #4]
    83fc:	6859      	ldr	r1, [r3, #4]
    83fe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8402:	3301      	adds	r3, #1
    8404:	440b      	add	r3, r1
    8406:	781b      	ldrb	r3, [r3, #0]
    8408:	009b      	lsls	r3, r3, #2
    840a:	4413      	add	r3, r2
    840c:	681b      	ldr	r3, [r3, #0]
    840e:	9302      	str	r3, [sp, #8]
                MCAL_DATA_SYNC_BARRIER();
    8410:	f3bf 8f4f 	dsb	sy
                if(0u != (NextChannelConfig->ChannelState->Flags & SPI_CHANNEL_FLAG_TX_DEFAULT_U8))
    8414:	9b02      	ldr	r3, [sp, #8]
    8416:	699b      	ldr	r3, [r3, #24]
    8418:	781b      	ldrb	r3, [r3, #0]
    841a:	f003 0301 	and.w	r3, r3, #1
    841e:	2b00      	cmp	r3, #0
    8420:	d00a      	beq.n	8438 <Spi_Ipw_SyncTransmit+0x110>
                {
                    Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NULL_PTR;
    8422:	9b01      	ldr	r3, [sp, #4]
    8424:	6a1b      	ldr	r3, [r3, #32]
    8426:	681b      	ldr	r3, [r3, #0]
    8428:	791b      	ldrb	r3, [r3, #4]
    842a:	461a      	mov	r2, r3
    842c:	4b43      	ldr	r3, [pc, #268]	; (853c <Spi_Ipw_SyncTransmit+0x214>)
    842e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8432:	2200      	movs	r2, #0
    8434:	62da      	str	r2, [r3, #44]	; 0x2c
    8436:	e01c      	b.n	8472 <Spi_Ipw_SyncTransmit+0x14a>
                }
                else
                {
                    if(EB == NextChannelConfig->BufferType)
    8438:	9b02      	ldr	r3, [sp, #8]
    843a:	681b      	ldr	r3, [r3, #0]
    843c:	2b01      	cmp	r3, #1
    843e:	d10c      	bne.n	845a <Spi_Ipw_SyncTransmit+0x132>
                    {
                        Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NextChannelConfig->BufferDescriptor->ExternalBufferTX;
    8440:	9b02      	ldr	r3, [sp, #8]
    8442:	691a      	ldr	r2, [r3, #16]
    8444:	9b01      	ldr	r3, [sp, #4]
    8446:	6a1b      	ldr	r3, [r3, #32]
    8448:	681b      	ldr	r3, [r3, #0]
    844a:	791b      	ldrb	r3, [r3, #4]
    844c:	4619      	mov	r1, r3
    844e:	4b3b      	ldr	r3, [pc, #236]	; (853c <Spi_Ipw_SyncTransmit+0x214>)
    8450:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    8454:	6812      	ldr	r2, [r2, #0]
    8456:	62da      	str	r2, [r3, #44]	; 0x2c
    8458:	e00b      	b.n	8472 <Spi_Ipw_SyncTransmit+0x14a>
                    }
                    else
                    {
                        Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NextChannelConfig->BufferDescriptor->InternalBufferTX;
    845a:	9b02      	ldr	r3, [sp, #8]
    845c:	691a      	ldr	r2, [r3, #16]
    845e:	9b01      	ldr	r3, [sp, #4]
    8460:	6a1b      	ldr	r3, [r3, #32]
    8462:	681b      	ldr	r3, [r3, #0]
    8464:	791b      	ldrb	r3, [r3, #4]
    8466:	4619      	mov	r1, r3
    8468:	4b34      	ldr	r3, [pc, #208]	; (853c <Spi_Ipw_SyncTransmit+0x214>)
    846a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    846e:	6852      	ldr	r2, [r2, #4]
    8470:	62da      	str	r2, [r3, #44]	; 0x2c
                    }
                }
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FrameSizeNext = NextChannelConfig->FrameSize;
    8472:	9b02      	ldr	r3, [sp, #8]
    8474:	791a      	ldrb	r2, [r3, #4]
    8476:	9b01      	ldr	r3, [sp, #4]
    8478:	6a1b      	ldr	r3, [r3, #32]
    847a:	681b      	ldr	r3, [r3, #0]
    847c:	791b      	ldrb	r3, [r3, #4]
    847e:	4619      	mov	r1, r3
    8480:	4b2e      	ldr	r3, [pc, #184]	; (853c <Spi_Ipw_SyncTransmit+0x214>)
    8482:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    8486:	b292      	uxth	r2, r2
    8488:	861a      	strh	r2, [r3, #48]	; 0x30
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->LsbNext = NextChannelConfig->Lsb;
    848a:	9b01      	ldr	r3, [sp, #4]
    848c:	6a1b      	ldr	r3, [r3, #32]
    848e:	681b      	ldr	r3, [r3, #0]
    8490:	791b      	ldrb	r3, [r3, #4]
    8492:	461a      	mov	r2, r3
    8494:	4b29      	ldr	r3, [pc, #164]	; (853c <Spi_Ipw_SyncTransmit+0x214>)
    8496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    849a:	9a02      	ldr	r2, [sp, #8]
    849c:	7952      	ldrb	r2, [r2, #5]
    849e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->DefaultDataNext = NextChannelConfig->DefaultTransmitValue;
    84a2:	9b01      	ldr	r3, [sp, #4]
    84a4:	6a1b      	ldr	r3, [r3, #32]
    84a6:	681b      	ldr	r3, [r3, #0]
    84a8:	791b      	ldrb	r3, [r3, #4]
    84aa:	461a      	mov	r2, r3
    84ac:	4b23      	ldr	r3, [pc, #140]	; (853c <Spi_Ipw_SyncTransmit+0x214>)
    84ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    84b2:	9a02      	ldr	r2, [sp, #8]
    84b4:	6892      	ldr	r2, [r2, #8]
    84b6:	635a      	str	r2, [r3, #52]	; 0x34
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->LengthNext = NextChannelConfig->ChannelState->Length;
    84b8:	9b02      	ldr	r3, [sp, #8]
    84ba:	699a      	ldr	r2, [r3, #24]
    84bc:	9b01      	ldr	r3, [sp, #4]
    84be:	6a1b      	ldr	r3, [r3, #32]
    84c0:	681b      	ldr	r3, [r3, #0]
    84c2:	791b      	ldrb	r3, [r3, #4]
    84c4:	4619      	mov	r1, r3
    84c6:	4b1d      	ldr	r3, [pc, #116]	; (853c <Spi_Ipw_SyncTransmit+0x214>)
    84c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    84cc:	8852      	ldrh	r2, [r2, #2]
    84ce:	871a      	strh	r2, [r3, #56]	; 0x38
                    Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->NextChannelIsRX = FALSE;
                }
                #endif
            }
            
            if(0u == ChannelIndex)
    84d0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    84d4:	2b00      	cmp	r3, #0
    84d6:	d10a      	bne.n	84ee <Spi_Ipw_SyncTransmit+0x1c6>
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FirstCmd = TRUE;
    84d8:	9b01      	ldr	r3, [sp, #4]
    84da:	6a1b      	ldr	r3, [r3, #32]
    84dc:	681b      	ldr	r3, [r3, #0]
    84de:	791b      	ldrb	r3, [r3, #4]
    84e0:	461a      	mov	r2, r3
    84e2:	4b16      	ldr	r3, [pc, #88]	; (853c <Spi_Ipw_SyncTransmit+0x214>)
    84e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    84e8:	2201      	movs	r2, #1
    84ea:	775a      	strb	r2, [r3, #29]
    84ec:	e009      	b.n	8502 <Spi_Ipw_SyncTransmit+0x1da>
            }
            else
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FirstCmd = FALSE;
    84ee:	9b01      	ldr	r3, [sp, #4]
    84f0:	6a1b      	ldr	r3, [r3, #32]
    84f2:	681b      	ldr	r3, [r3, #0]
    84f4:	791b      	ldrb	r3, [r3, #4]
    84f6:	461a      	mov	r2, r3
    84f8:	4b10      	ldr	r3, [pc, #64]	; (853c <Spi_Ipw_SyncTransmit+0x214>)
    84fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    84fe:	2200      	movs	r2, #0
    8500:	775a      	strb	r2, [r3, #29]
            }
        }
        Ipw_Status = Spi_Ipw_SyncTransmitProcess(JobConfig, ChannelConfig, RxBuffer, (const uint8*)TxBuffer);
    8502:	9b08      	ldr	r3, [sp, #32]
    8504:	9a03      	ldr	r2, [sp, #12]
    8506:	9904      	ldr	r1, [sp, #16]
    8508:	9801      	ldr	r0, [sp, #4]
    850a:	f7ff fe7f 	bl	820c <Spi_Ipw_SyncTransmitProcess>
    850e:	4603      	mov	r3, r0
    8510:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (ChannelIndex = (Spi_ChannelType)0; ChannelIndex < NumChannelsInJob; ChannelIndex++)
    8514:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8518:	3301      	adds	r3, #1
    851a:	f88d 301f 	strb.w	r3, [sp, #31]
    851e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    8522:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8526:	429a      	cmp	r2, r3
    8528:	f4ff af12 	bcc.w	8350 <Spi_Ipw_SyncTransmit+0x28>
    }
    return Ipw_Status;
    852c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    8530:	4618      	mov	r0, r3
    8532:	b00b      	add	sp, #44	; 0x2c
    8534:	f85d fb04 	ldr.w	pc, [sp], #4
    8538:	1fff8d4c 	.word	0x1fff8d4c
    853c:	1fff8d38 	.word	0x1fff8d38

00008540 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    8540:	b500      	push	{lr}
    8542:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8544:	f7f8 fb52 	bl	bec <Sys_GetCoreID>
    8548:	4603      	mov	r3, r0
    854a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    854c:	4a10      	ldr	r2, [pc, #64]	; (8590 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    854e:	9b01      	ldr	r3, [sp, #4]
    8550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8554:	2b00      	cmp	r3, #0
    8556:	d10d      	bne.n	8574 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8558:	f7f8 fa66 	bl	a28 <Mcu_schm_read_msr>
    855c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    855e:	9b00      	ldr	r3, [sp, #0]
    8560:	f003 0301 	and.w	r3, r3, #1
    8564:	2b00      	cmp	r3, #0
    8566:	d100      	bne.n	856a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8568:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    856a:	490a      	ldr	r1, [pc, #40]	; (8594 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    856c:	9b01      	ldr	r3, [sp, #4]
    856e:	9a00      	ldr	r2, [sp, #0]
    8570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    8574:	4a06      	ldr	r2, [pc, #24]	; (8590 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    8576:	9b01      	ldr	r3, [sp, #4]
    8578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    857c:	1c5a      	adds	r2, r3, #1
    857e:	4904      	ldr	r1, [pc, #16]	; (8590 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    8580:	9b01      	ldr	r3, [sp, #4]
    8582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8586:	bf00      	nop
    8588:	b003      	add	sp, #12
    858a:	f85d fb04 	ldr.w	pc, [sp], #4
    858e:	bf00      	nop
    8590:	1fff8d80 	.word	0x1fff8d80
    8594:	1fff8d7c 	.word	0x1fff8d7c

00008598 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    8598:	b500      	push	{lr}
    859a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    859c:	f7f8 fb26 	bl	bec <Sys_GetCoreID>
    85a0:	4603      	mov	r3, r0
    85a2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    85a4:	4a0d      	ldr	r2, [pc, #52]	; (85dc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    85a6:	9b01      	ldr	r3, [sp, #4]
    85a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85ac:	1e5a      	subs	r2, r3, #1
    85ae:	490b      	ldr	r1, [pc, #44]	; (85dc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    85b0:	9b01      	ldr	r3, [sp, #4]
    85b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    85b6:	4a0a      	ldr	r2, [pc, #40]	; (85e0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    85b8:	9b01      	ldr	r3, [sp, #4]
    85ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85be:	f003 0301 	and.w	r3, r3, #1
    85c2:	2b00      	cmp	r3, #0
    85c4:	d106      	bne.n	85d4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    85c6:	4a05      	ldr	r2, [pc, #20]	; (85dc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    85c8:	9b01      	ldr	r3, [sp, #4]
    85ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85ce:	2b00      	cmp	r3, #0
    85d0:	d100      	bne.n	85d4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    85d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    85d4:	bf00      	nop
    85d6:	b003      	add	sp, #12
    85d8:	f85d fb04 	ldr.w	pc, [sp], #4
    85dc:	1fff8d80 	.word	0x1fff8d80
    85e0:	1fff8d7c 	.word	0x1fff8d7c

000085e4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    85e4:	b500      	push	{lr}
    85e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    85e8:	f7f8 fb00 	bl	bec <Sys_GetCoreID>
    85ec:	4603      	mov	r3, r0
    85ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    85f0:	4a10      	ldr	r2, [pc, #64]	; (8634 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    85f2:	9b01      	ldr	r3, [sp, #4]
    85f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85f8:	2b00      	cmp	r3, #0
    85fa:	d10d      	bne.n	8618 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    85fc:	f7f8 fa14 	bl	a28 <Mcu_schm_read_msr>
    8600:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8602:	9b00      	ldr	r3, [sp, #0]
    8604:	f003 0301 	and.w	r3, r3, #1
    8608:	2b00      	cmp	r3, #0
    860a:	d100      	bne.n	860e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    860c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    860e:	490a      	ldr	r1, [pc, #40]	; (8638 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    8610:	9b01      	ldr	r3, [sp, #4]
    8612:	9a00      	ldr	r2, [sp, #0]
    8614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    8618:	4a06      	ldr	r2, [pc, #24]	; (8634 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    861a:	9b01      	ldr	r3, [sp, #4]
    861c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8620:	1c5a      	adds	r2, r3, #1
    8622:	4904      	ldr	r1, [pc, #16]	; (8634 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    8624:	9b01      	ldr	r3, [sp, #4]
    8626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    862a:	bf00      	nop
    862c:	b003      	add	sp, #12
    862e:	f85d fb04 	ldr.w	pc, [sp], #4
    8632:	bf00      	nop
    8634:	1fff8d88 	.word	0x1fff8d88
    8638:	1fff8d84 	.word	0x1fff8d84

0000863c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    863c:	b500      	push	{lr}
    863e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8640:	f7f8 fad4 	bl	bec <Sys_GetCoreID>
    8644:	4603      	mov	r3, r0
    8646:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    8648:	4a0d      	ldr	r2, [pc, #52]	; (8680 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    864a:	9b01      	ldr	r3, [sp, #4]
    864c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8650:	1e5a      	subs	r2, r3, #1
    8652:	490b      	ldr	r1, [pc, #44]	; (8680 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    8654:	9b01      	ldr	r3, [sp, #4]
    8656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    865a:	4a0a      	ldr	r2, [pc, #40]	; (8684 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    865c:	9b01      	ldr	r3, [sp, #4]
    865e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8662:	f003 0301 	and.w	r3, r3, #1
    8666:	2b00      	cmp	r3, #0
    8668:	d106      	bne.n	8678 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    866a:	4a05      	ldr	r2, [pc, #20]	; (8680 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    866c:	9b01      	ldr	r3, [sp, #4]
    866e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8672:	2b00      	cmp	r3, #0
    8674:	d100      	bne.n	8678 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8676:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8678:	bf00      	nop
    867a:	b003      	add	sp, #12
    867c:	f85d fb04 	ldr.w	pc, [sp], #4
    8680:	1fff8d88 	.word	0x1fff8d88
    8684:	1fff8d84 	.word	0x1fff8d84

00008688 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    8688:	b500      	push	{lr}
    868a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    868c:	f7f8 faae 	bl	bec <Sys_GetCoreID>
    8690:	4603      	mov	r3, r0
    8692:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    8694:	4a10      	ldr	r2, [pc, #64]	; (86d8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    8696:	9b01      	ldr	r3, [sp, #4]
    8698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    869c:	2b00      	cmp	r3, #0
    869e:	d10d      	bne.n	86bc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    86a0:	f7f8 f9c2 	bl	a28 <Mcu_schm_read_msr>
    86a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    86a6:	9b00      	ldr	r3, [sp, #0]
    86a8:	f003 0301 	and.w	r3, r3, #1
    86ac:	2b00      	cmp	r3, #0
    86ae:	d100      	bne.n	86b2 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    86b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    86b2:	490a      	ldr	r1, [pc, #40]	; (86dc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    86b4:	9b01      	ldr	r3, [sp, #4]
    86b6:	9a00      	ldr	r2, [sp, #0]
    86b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    86bc:	4a06      	ldr	r2, [pc, #24]	; (86d8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    86be:	9b01      	ldr	r3, [sp, #4]
    86c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86c4:	1c5a      	adds	r2, r3, #1
    86c6:	4904      	ldr	r1, [pc, #16]	; (86d8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    86c8:	9b01      	ldr	r3, [sp, #4]
    86ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    86ce:	bf00      	nop
    86d0:	b003      	add	sp, #12
    86d2:	f85d fb04 	ldr.w	pc, [sp], #4
    86d6:	bf00      	nop
    86d8:	1fff8d90 	.word	0x1fff8d90
    86dc:	1fff8d8c 	.word	0x1fff8d8c

000086e0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    86e0:	b500      	push	{lr}
    86e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    86e4:	f7f8 fa82 	bl	bec <Sys_GetCoreID>
    86e8:	4603      	mov	r3, r0
    86ea:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    86ec:	4a0d      	ldr	r2, [pc, #52]	; (8724 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    86ee:	9b01      	ldr	r3, [sp, #4]
    86f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86f4:	1e5a      	subs	r2, r3, #1
    86f6:	490b      	ldr	r1, [pc, #44]	; (8724 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    86f8:	9b01      	ldr	r3, [sp, #4]
    86fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    86fe:	4a0a      	ldr	r2, [pc, #40]	; (8728 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    8700:	9b01      	ldr	r3, [sp, #4]
    8702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8706:	f003 0301 	and.w	r3, r3, #1
    870a:	2b00      	cmp	r3, #0
    870c:	d106      	bne.n	871c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    870e:	4a05      	ldr	r2, [pc, #20]	; (8724 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    8710:	9b01      	ldr	r3, [sp, #4]
    8712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8716:	2b00      	cmp	r3, #0
    8718:	d100      	bne.n	871c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    871a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    871c:	bf00      	nop
    871e:	b003      	add	sp, #12
    8720:	f85d fb04 	ldr.w	pc, [sp], #4
    8724:	1fff8d90 	.word	0x1fff8d90
    8728:	1fff8d8c 	.word	0x1fff8d8c

0000872c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    872c:	b500      	push	{lr}
    872e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8730:	f7f8 fa5c 	bl	bec <Sys_GetCoreID>
    8734:	4603      	mov	r3, r0
    8736:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    8738:	4a10      	ldr	r2, [pc, #64]	; (877c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    873a:	9b01      	ldr	r3, [sp, #4]
    873c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8740:	2b00      	cmp	r3, #0
    8742:	d10d      	bne.n	8760 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8744:	f7f8 f979 	bl	a3a <Port_schm_read_msr>
    8748:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    874a:	9b00      	ldr	r3, [sp, #0]
    874c:	f003 0301 	and.w	r3, r3, #1
    8750:	2b00      	cmp	r3, #0
    8752:	d100      	bne.n	8756 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8754:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    8756:	490a      	ldr	r1, [pc, #40]	; (8780 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    8758:	9b01      	ldr	r3, [sp, #4]
    875a:	9a00      	ldr	r2, [sp, #0]
    875c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    8760:	4a06      	ldr	r2, [pc, #24]	; (877c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    8762:	9b01      	ldr	r3, [sp, #4]
    8764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8768:	1c5a      	adds	r2, r3, #1
    876a:	4904      	ldr	r1, [pc, #16]	; (877c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    876c:	9b01      	ldr	r3, [sp, #4]
    876e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8772:	bf00      	nop
    8774:	b003      	add	sp, #12
    8776:	f85d fb04 	ldr.w	pc, [sp], #4
    877a:	bf00      	nop
    877c:	1fff8d98 	.word	0x1fff8d98
    8780:	1fff8d94 	.word	0x1fff8d94

00008784 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    8784:	b500      	push	{lr}
    8786:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8788:	f7f8 fa30 	bl	bec <Sys_GetCoreID>
    878c:	4603      	mov	r3, r0
    878e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    8790:	4a0d      	ldr	r2, [pc, #52]	; (87c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    8792:	9b01      	ldr	r3, [sp, #4]
    8794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8798:	1e5a      	subs	r2, r3, #1
    879a:	490b      	ldr	r1, [pc, #44]	; (87c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    879c:	9b01      	ldr	r3, [sp, #4]
    879e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    87a2:	4a0a      	ldr	r2, [pc, #40]	; (87cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    87a4:	9b01      	ldr	r3, [sp, #4]
    87a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87aa:	f003 0301 	and.w	r3, r3, #1
    87ae:	2b00      	cmp	r3, #0
    87b0:	d106      	bne.n	87c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    87b2:	4a05      	ldr	r2, [pc, #20]	; (87c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    87b4:	9b01      	ldr	r3, [sp, #4]
    87b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87ba:	2b00      	cmp	r3, #0
    87bc:	d100      	bne.n	87c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    87be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    87c0:	bf00      	nop
    87c2:	b003      	add	sp, #12
    87c4:	f85d fb04 	ldr.w	pc, [sp], #4
    87c8:	1fff8d98 	.word	0x1fff8d98
    87cc:	1fff8d94 	.word	0x1fff8d94

000087d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    87d0:	b500      	push	{lr}
    87d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    87d4:	f7f8 fa0a 	bl	bec <Sys_GetCoreID>
    87d8:	4603      	mov	r3, r0
    87da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    87dc:	4a10      	ldr	r2, [pc, #64]	; (8820 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    87de:	9b01      	ldr	r3, [sp, #4]
    87e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87e4:	2b00      	cmp	r3, #0
    87e6:	d10d      	bne.n	8804 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    87e8:	f7f8 f927 	bl	a3a <Port_schm_read_msr>
    87ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    87ee:	9b00      	ldr	r3, [sp, #0]
    87f0:	f003 0301 	and.w	r3, r3, #1
    87f4:	2b00      	cmp	r3, #0
    87f6:	d100      	bne.n	87fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    87f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    87fa:	490a      	ldr	r1, [pc, #40]	; (8824 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    87fc:	9b01      	ldr	r3, [sp, #4]
    87fe:	9a00      	ldr	r2, [sp, #0]
    8800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    8804:	4a06      	ldr	r2, [pc, #24]	; (8820 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    8806:	9b01      	ldr	r3, [sp, #4]
    8808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    880c:	1c5a      	adds	r2, r3, #1
    880e:	4904      	ldr	r1, [pc, #16]	; (8820 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    8810:	9b01      	ldr	r3, [sp, #4]
    8812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8816:	bf00      	nop
    8818:	b003      	add	sp, #12
    881a:	f85d fb04 	ldr.w	pc, [sp], #4
    881e:	bf00      	nop
    8820:	1fff8da0 	.word	0x1fff8da0
    8824:	1fff8d9c 	.word	0x1fff8d9c

00008828 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    8828:	b500      	push	{lr}
    882a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    882c:	f7f8 f9de 	bl	bec <Sys_GetCoreID>
    8830:	4603      	mov	r3, r0
    8832:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    8834:	4a0d      	ldr	r2, [pc, #52]	; (886c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8836:	9b01      	ldr	r3, [sp, #4]
    8838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    883c:	1e5a      	subs	r2, r3, #1
    883e:	490b      	ldr	r1, [pc, #44]	; (886c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8840:	9b01      	ldr	r3, [sp, #4]
    8842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    8846:	4a0a      	ldr	r2, [pc, #40]	; (8870 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    8848:	9b01      	ldr	r3, [sp, #4]
    884a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    884e:	f003 0301 	and.w	r3, r3, #1
    8852:	2b00      	cmp	r3, #0
    8854:	d106      	bne.n	8864 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    8856:	4a05      	ldr	r2, [pc, #20]	; (886c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8858:	9b01      	ldr	r3, [sp, #4]
    885a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    885e:	2b00      	cmp	r3, #0
    8860:	d100      	bne.n	8864 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8862:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8864:	bf00      	nop
    8866:	b003      	add	sp, #12
    8868:	f85d fb04 	ldr.w	pc, [sp], #4
    886c:	1fff8da0 	.word	0x1fff8da0
    8870:	1fff8d9c 	.word	0x1fff8d9c

00008874 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    8874:	b500      	push	{lr}
    8876:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8878:	f7f8 f9b8 	bl	bec <Sys_GetCoreID>
    887c:	4603      	mov	r3, r0
    887e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    8880:	4a10      	ldr	r2, [pc, #64]	; (88c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    8882:	9b01      	ldr	r3, [sp, #4]
    8884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8888:	2b00      	cmp	r3, #0
    888a:	d10d      	bne.n	88a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    888c:	f7f8 f8d5 	bl	a3a <Port_schm_read_msr>
    8890:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8892:	9b00      	ldr	r3, [sp, #0]
    8894:	f003 0301 	and.w	r3, r3, #1
    8898:	2b00      	cmp	r3, #0
    889a:	d100      	bne.n	889e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    889c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    889e:	490a      	ldr	r1, [pc, #40]	; (88c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    88a0:	9b01      	ldr	r3, [sp, #4]
    88a2:	9a00      	ldr	r2, [sp, #0]
    88a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    88a8:	4a06      	ldr	r2, [pc, #24]	; (88c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    88aa:	9b01      	ldr	r3, [sp, #4]
    88ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88b0:	1c5a      	adds	r2, r3, #1
    88b2:	4904      	ldr	r1, [pc, #16]	; (88c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    88b4:	9b01      	ldr	r3, [sp, #4]
    88b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    88ba:	bf00      	nop
    88bc:	b003      	add	sp, #12
    88be:	f85d fb04 	ldr.w	pc, [sp], #4
    88c2:	bf00      	nop
    88c4:	1fff8da8 	.word	0x1fff8da8
    88c8:	1fff8da4 	.word	0x1fff8da4

000088cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    88cc:	b500      	push	{lr}
    88ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    88d0:	f7f8 f98c 	bl	bec <Sys_GetCoreID>
    88d4:	4603      	mov	r3, r0
    88d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    88d8:	4a0d      	ldr	r2, [pc, #52]	; (8910 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    88da:	9b01      	ldr	r3, [sp, #4]
    88dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88e0:	1e5a      	subs	r2, r3, #1
    88e2:	490b      	ldr	r1, [pc, #44]	; (8910 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    88e4:	9b01      	ldr	r3, [sp, #4]
    88e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    88ea:	4a0a      	ldr	r2, [pc, #40]	; (8914 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    88ec:	9b01      	ldr	r3, [sp, #4]
    88ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88f2:	f003 0301 	and.w	r3, r3, #1
    88f6:	2b00      	cmp	r3, #0
    88f8:	d106      	bne.n	8908 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    88fa:	4a05      	ldr	r2, [pc, #20]	; (8910 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    88fc:	9b01      	ldr	r3, [sp, #4]
    88fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8902:	2b00      	cmp	r3, #0
    8904:	d100      	bne.n	8908 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8906:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8908:	bf00      	nop
    890a:	b003      	add	sp, #12
    890c:	f85d fb04 	ldr.w	pc, [sp], #4
    8910:	1fff8da8 	.word	0x1fff8da8
    8914:	1fff8da4 	.word	0x1fff8da4

00008918 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    8918:	b500      	push	{lr}
    891a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    891c:	f7f8 f966 	bl	bec <Sys_GetCoreID>
    8920:	4603      	mov	r3, r0
    8922:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    8924:	4a10      	ldr	r2, [pc, #64]	; (8968 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    8926:	9b01      	ldr	r3, [sp, #4]
    8928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    892c:	2b00      	cmp	r3, #0
    892e:	d10d      	bne.n	894c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8930:	f7f8 f883 	bl	a3a <Port_schm_read_msr>
    8934:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8936:	9b00      	ldr	r3, [sp, #0]
    8938:	f003 0301 	and.w	r3, r3, #1
    893c:	2b00      	cmp	r3, #0
    893e:	d100      	bne.n	8942 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8940:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    8942:	490a      	ldr	r1, [pc, #40]	; (896c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    8944:	9b01      	ldr	r3, [sp, #4]
    8946:	9a00      	ldr	r2, [sp, #0]
    8948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    894c:	4a06      	ldr	r2, [pc, #24]	; (8968 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    894e:	9b01      	ldr	r3, [sp, #4]
    8950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8954:	1c5a      	adds	r2, r3, #1
    8956:	4904      	ldr	r1, [pc, #16]	; (8968 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    8958:	9b01      	ldr	r3, [sp, #4]
    895a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    895e:	bf00      	nop
    8960:	b003      	add	sp, #12
    8962:	f85d fb04 	ldr.w	pc, [sp], #4
    8966:	bf00      	nop
    8968:	1fff8db0 	.word	0x1fff8db0
    896c:	1fff8dac 	.word	0x1fff8dac

00008970 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    8970:	b500      	push	{lr}
    8972:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8974:	f7f8 f93a 	bl	bec <Sys_GetCoreID>
    8978:	4603      	mov	r3, r0
    897a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    897c:	4a0d      	ldr	r2, [pc, #52]	; (89b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    897e:	9b01      	ldr	r3, [sp, #4]
    8980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8984:	1e5a      	subs	r2, r3, #1
    8986:	490b      	ldr	r1, [pc, #44]	; (89b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    8988:	9b01      	ldr	r3, [sp, #4]
    898a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    898e:	4a0a      	ldr	r2, [pc, #40]	; (89b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    8990:	9b01      	ldr	r3, [sp, #4]
    8992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8996:	f003 0301 	and.w	r3, r3, #1
    899a:	2b00      	cmp	r3, #0
    899c:	d106      	bne.n	89ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    899e:	4a05      	ldr	r2, [pc, #20]	; (89b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    89a0:	9b01      	ldr	r3, [sp, #4]
    89a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89a6:	2b00      	cmp	r3, #0
    89a8:	d100      	bne.n	89ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    89aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    89ac:	bf00      	nop
    89ae:	b003      	add	sp, #12
    89b0:	f85d fb04 	ldr.w	pc, [sp], #4
    89b4:	1fff8db0 	.word	0x1fff8db0
    89b8:	1fff8dac 	.word	0x1fff8dac

000089bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    89bc:	b500      	push	{lr}
    89be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    89c0:	f7f8 f914 	bl	bec <Sys_GetCoreID>
    89c4:	4603      	mov	r3, r0
    89c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    89c8:	4a10      	ldr	r2, [pc, #64]	; (8a0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    89ca:	9b01      	ldr	r3, [sp, #4]
    89cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89d0:	2b00      	cmp	r3, #0
    89d2:	d10d      	bne.n	89f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    89d4:	f7f8 f831 	bl	a3a <Port_schm_read_msr>
    89d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    89da:	9b00      	ldr	r3, [sp, #0]
    89dc:	f003 0301 	and.w	r3, r3, #1
    89e0:	2b00      	cmp	r3, #0
    89e2:	d100      	bne.n	89e6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    89e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    89e6:	490a      	ldr	r1, [pc, #40]	; (8a10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    89e8:	9b01      	ldr	r3, [sp, #4]
    89ea:	9a00      	ldr	r2, [sp, #0]
    89ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    89f0:	4a06      	ldr	r2, [pc, #24]	; (8a0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    89f2:	9b01      	ldr	r3, [sp, #4]
    89f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89f8:	1c5a      	adds	r2, r3, #1
    89fa:	4904      	ldr	r1, [pc, #16]	; (8a0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    89fc:	9b01      	ldr	r3, [sp, #4]
    89fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8a02:	bf00      	nop
    8a04:	b003      	add	sp, #12
    8a06:	f85d fb04 	ldr.w	pc, [sp], #4
    8a0a:	bf00      	nop
    8a0c:	1fff8db8 	.word	0x1fff8db8
    8a10:	1fff8db4 	.word	0x1fff8db4

00008a14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    8a14:	b500      	push	{lr}
    8a16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8a18:	f7f8 f8e8 	bl	bec <Sys_GetCoreID>
    8a1c:	4603      	mov	r3, r0
    8a1e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    8a20:	4a0d      	ldr	r2, [pc, #52]	; (8a58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    8a22:	9b01      	ldr	r3, [sp, #4]
    8a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a28:	1e5a      	subs	r2, r3, #1
    8a2a:	490b      	ldr	r1, [pc, #44]	; (8a58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    8a2c:	9b01      	ldr	r3, [sp, #4]
    8a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    8a32:	4a0a      	ldr	r2, [pc, #40]	; (8a5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    8a34:	9b01      	ldr	r3, [sp, #4]
    8a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a3a:	f003 0301 	and.w	r3, r3, #1
    8a3e:	2b00      	cmp	r3, #0
    8a40:	d106      	bne.n	8a50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    8a42:	4a05      	ldr	r2, [pc, #20]	; (8a58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    8a44:	9b01      	ldr	r3, [sp, #4]
    8a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a4a:	2b00      	cmp	r3, #0
    8a4c:	d100      	bne.n	8a50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8a4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8a50:	bf00      	nop
    8a52:	b003      	add	sp, #12
    8a54:	f85d fb04 	ldr.w	pc, [sp], #4
    8a58:	1fff8db8 	.word	0x1fff8db8
    8a5c:	1fff8db4 	.word	0x1fff8db4

00008a60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    8a60:	b500      	push	{lr}
    8a62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8a64:	f7f8 f8c2 	bl	bec <Sys_GetCoreID>
    8a68:	4603      	mov	r3, r0
    8a6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    8a6c:	4a10      	ldr	r2, [pc, #64]	; (8ab0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    8a6e:	9b01      	ldr	r3, [sp, #4]
    8a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a74:	2b00      	cmp	r3, #0
    8a76:	d10d      	bne.n	8a94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8a78:	f7f7 ffdf 	bl	a3a <Port_schm_read_msr>
    8a7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8a7e:	9b00      	ldr	r3, [sp, #0]
    8a80:	f003 0301 	and.w	r3, r3, #1
    8a84:	2b00      	cmp	r3, #0
    8a86:	d100      	bne.n	8a8a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8a88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    8a8a:	490a      	ldr	r1, [pc, #40]	; (8ab4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    8a8c:	9b01      	ldr	r3, [sp, #4]
    8a8e:	9a00      	ldr	r2, [sp, #0]
    8a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    8a94:	4a06      	ldr	r2, [pc, #24]	; (8ab0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    8a96:	9b01      	ldr	r3, [sp, #4]
    8a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a9c:	1c5a      	adds	r2, r3, #1
    8a9e:	4904      	ldr	r1, [pc, #16]	; (8ab0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    8aa0:	9b01      	ldr	r3, [sp, #4]
    8aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8aa6:	bf00      	nop
    8aa8:	b003      	add	sp, #12
    8aaa:	f85d fb04 	ldr.w	pc, [sp], #4
    8aae:	bf00      	nop
    8ab0:	1fff8dc0 	.word	0x1fff8dc0
    8ab4:	1fff8dbc 	.word	0x1fff8dbc

00008ab8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    8ab8:	b500      	push	{lr}
    8aba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8abc:	f7f8 f896 	bl	bec <Sys_GetCoreID>
    8ac0:	4603      	mov	r3, r0
    8ac2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    8ac4:	4a0d      	ldr	r2, [pc, #52]	; (8afc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    8ac6:	9b01      	ldr	r3, [sp, #4]
    8ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8acc:	1e5a      	subs	r2, r3, #1
    8ace:	490b      	ldr	r1, [pc, #44]	; (8afc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    8ad0:	9b01      	ldr	r3, [sp, #4]
    8ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    8ad6:	4a0a      	ldr	r2, [pc, #40]	; (8b00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    8ad8:	9b01      	ldr	r3, [sp, #4]
    8ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ade:	f003 0301 	and.w	r3, r3, #1
    8ae2:	2b00      	cmp	r3, #0
    8ae4:	d106      	bne.n	8af4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    8ae6:	4a05      	ldr	r2, [pc, #20]	; (8afc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    8ae8:	9b01      	ldr	r3, [sp, #4]
    8aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8aee:	2b00      	cmp	r3, #0
    8af0:	d100      	bne.n	8af4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8af2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8af4:	bf00      	nop
    8af6:	b003      	add	sp, #12
    8af8:	f85d fb04 	ldr.w	pc, [sp], #4
    8afc:	1fff8dc0 	.word	0x1fff8dc0
    8b00:	1fff8dbc 	.word	0x1fff8dbc

00008b04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    8b04:	b500      	push	{lr}
    8b06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8b08:	f7f8 f870 	bl	bec <Sys_GetCoreID>
    8b0c:	4603      	mov	r3, r0
    8b0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    8b10:	4a10      	ldr	r2, [pc, #64]	; (8b54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    8b12:	9b01      	ldr	r3, [sp, #4]
    8b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b18:	2b00      	cmp	r3, #0
    8b1a:	d10d      	bne.n	8b38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8b1c:	f7f7 ff8d 	bl	a3a <Port_schm_read_msr>
    8b20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8b22:	9b00      	ldr	r3, [sp, #0]
    8b24:	f003 0301 	and.w	r3, r3, #1
    8b28:	2b00      	cmp	r3, #0
    8b2a:	d100      	bne.n	8b2e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8b2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    8b2e:	490a      	ldr	r1, [pc, #40]	; (8b58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    8b30:	9b01      	ldr	r3, [sp, #4]
    8b32:	9a00      	ldr	r2, [sp, #0]
    8b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    8b38:	4a06      	ldr	r2, [pc, #24]	; (8b54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    8b3a:	9b01      	ldr	r3, [sp, #4]
    8b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b40:	1c5a      	adds	r2, r3, #1
    8b42:	4904      	ldr	r1, [pc, #16]	; (8b54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    8b44:	9b01      	ldr	r3, [sp, #4]
    8b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8b4a:	bf00      	nop
    8b4c:	b003      	add	sp, #12
    8b4e:	f85d fb04 	ldr.w	pc, [sp], #4
    8b52:	bf00      	nop
    8b54:	1fff8dc8 	.word	0x1fff8dc8
    8b58:	1fff8dc4 	.word	0x1fff8dc4

00008b5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    8b5c:	b500      	push	{lr}
    8b5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8b60:	f7f8 f844 	bl	bec <Sys_GetCoreID>
    8b64:	4603      	mov	r3, r0
    8b66:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    8b68:	4a0d      	ldr	r2, [pc, #52]	; (8ba0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    8b6a:	9b01      	ldr	r3, [sp, #4]
    8b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b70:	1e5a      	subs	r2, r3, #1
    8b72:	490b      	ldr	r1, [pc, #44]	; (8ba0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    8b74:	9b01      	ldr	r3, [sp, #4]
    8b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    8b7a:	4a0a      	ldr	r2, [pc, #40]	; (8ba4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    8b7c:	9b01      	ldr	r3, [sp, #4]
    8b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b82:	f003 0301 	and.w	r3, r3, #1
    8b86:	2b00      	cmp	r3, #0
    8b88:	d106      	bne.n	8b98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    8b8a:	4a05      	ldr	r2, [pc, #20]	; (8ba0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    8b8c:	9b01      	ldr	r3, [sp, #4]
    8b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b92:	2b00      	cmp	r3, #0
    8b94:	d100      	bne.n	8b98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8b96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8b98:	bf00      	nop
    8b9a:	b003      	add	sp, #12
    8b9c:	f85d fb04 	ldr.w	pc, [sp], #4
    8ba0:	1fff8dc8 	.word	0x1fff8dc8
    8ba4:	1fff8dc4 	.word	0x1fff8dc4

00008ba8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    8ba8:	b500      	push	{lr}
    8baa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8bac:	f7f8 f81e 	bl	bec <Sys_GetCoreID>
    8bb0:	4603      	mov	r3, r0
    8bb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    8bb4:	4a10      	ldr	r2, [pc, #64]	; (8bf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    8bb6:	9b01      	ldr	r3, [sp, #4]
    8bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bbc:	2b00      	cmp	r3, #0
    8bbe:	d10d      	bne.n	8bdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8bc0:	f7f7 ff3b 	bl	a3a <Port_schm_read_msr>
    8bc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8bc6:	9b00      	ldr	r3, [sp, #0]
    8bc8:	f003 0301 	and.w	r3, r3, #1
    8bcc:	2b00      	cmp	r3, #0
    8bce:	d100      	bne.n	8bd2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8bd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    8bd2:	490a      	ldr	r1, [pc, #40]	; (8bfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    8bd4:	9b01      	ldr	r3, [sp, #4]
    8bd6:	9a00      	ldr	r2, [sp, #0]
    8bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    8bdc:	4a06      	ldr	r2, [pc, #24]	; (8bf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    8bde:	9b01      	ldr	r3, [sp, #4]
    8be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8be4:	1c5a      	adds	r2, r3, #1
    8be6:	4904      	ldr	r1, [pc, #16]	; (8bf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    8be8:	9b01      	ldr	r3, [sp, #4]
    8bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8bee:	bf00      	nop
    8bf0:	b003      	add	sp, #12
    8bf2:	f85d fb04 	ldr.w	pc, [sp], #4
    8bf6:	bf00      	nop
    8bf8:	1fff8dd0 	.word	0x1fff8dd0
    8bfc:	1fff8dcc 	.word	0x1fff8dcc

00008c00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    8c00:	b500      	push	{lr}
    8c02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c04:	f7f7 fff2 	bl	bec <Sys_GetCoreID>
    8c08:	4603      	mov	r3, r0
    8c0a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    8c0c:	4a0d      	ldr	r2, [pc, #52]	; (8c44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    8c0e:	9b01      	ldr	r3, [sp, #4]
    8c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c14:	1e5a      	subs	r2, r3, #1
    8c16:	490b      	ldr	r1, [pc, #44]	; (8c44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    8c18:	9b01      	ldr	r3, [sp, #4]
    8c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    8c1e:	4a0a      	ldr	r2, [pc, #40]	; (8c48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    8c20:	9b01      	ldr	r3, [sp, #4]
    8c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c26:	f003 0301 	and.w	r3, r3, #1
    8c2a:	2b00      	cmp	r3, #0
    8c2c:	d106      	bne.n	8c3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    8c2e:	4a05      	ldr	r2, [pc, #20]	; (8c44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    8c30:	9b01      	ldr	r3, [sp, #4]
    8c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c36:	2b00      	cmp	r3, #0
    8c38:	d100      	bne.n	8c3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8c3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8c3c:	bf00      	nop
    8c3e:	b003      	add	sp, #12
    8c40:	f85d fb04 	ldr.w	pc, [sp], #4
    8c44:	1fff8dd0 	.word	0x1fff8dd0
    8c48:	1fff8dcc 	.word	0x1fff8dcc

00008c4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    8c4c:	b500      	push	{lr}
    8c4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c50:	f7f7 ffcc 	bl	bec <Sys_GetCoreID>
    8c54:	4603      	mov	r3, r0
    8c56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    8c58:	4a10      	ldr	r2, [pc, #64]	; (8c9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    8c5a:	9b01      	ldr	r3, [sp, #4]
    8c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c60:	2b00      	cmp	r3, #0
    8c62:	d10d      	bne.n	8c80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8c64:	f7f7 fee9 	bl	a3a <Port_schm_read_msr>
    8c68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8c6a:	9b00      	ldr	r3, [sp, #0]
    8c6c:	f003 0301 	and.w	r3, r3, #1
    8c70:	2b00      	cmp	r3, #0
    8c72:	d100      	bne.n	8c76 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8c74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    8c76:	490a      	ldr	r1, [pc, #40]	; (8ca0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    8c78:	9b01      	ldr	r3, [sp, #4]
    8c7a:	9a00      	ldr	r2, [sp, #0]
    8c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    8c80:	4a06      	ldr	r2, [pc, #24]	; (8c9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    8c82:	9b01      	ldr	r3, [sp, #4]
    8c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c88:	1c5a      	adds	r2, r3, #1
    8c8a:	4904      	ldr	r1, [pc, #16]	; (8c9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    8c8c:	9b01      	ldr	r3, [sp, #4]
    8c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8c92:	bf00      	nop
    8c94:	b003      	add	sp, #12
    8c96:	f85d fb04 	ldr.w	pc, [sp], #4
    8c9a:	bf00      	nop
    8c9c:	1fff8dd8 	.word	0x1fff8dd8
    8ca0:	1fff8dd4 	.word	0x1fff8dd4

00008ca4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    8ca4:	b500      	push	{lr}
    8ca6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ca8:	f7f7 ffa0 	bl	bec <Sys_GetCoreID>
    8cac:	4603      	mov	r3, r0
    8cae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    8cb0:	4a0d      	ldr	r2, [pc, #52]	; (8ce8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    8cb2:	9b01      	ldr	r3, [sp, #4]
    8cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cb8:	1e5a      	subs	r2, r3, #1
    8cba:	490b      	ldr	r1, [pc, #44]	; (8ce8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    8cbc:	9b01      	ldr	r3, [sp, #4]
    8cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    8cc2:	4a0a      	ldr	r2, [pc, #40]	; (8cec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    8cc4:	9b01      	ldr	r3, [sp, #4]
    8cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cca:	f003 0301 	and.w	r3, r3, #1
    8cce:	2b00      	cmp	r3, #0
    8cd0:	d106      	bne.n	8ce0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    8cd2:	4a05      	ldr	r2, [pc, #20]	; (8ce8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    8cd4:	9b01      	ldr	r3, [sp, #4]
    8cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cda:	2b00      	cmp	r3, #0
    8cdc:	d100      	bne.n	8ce0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8cde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8ce0:	bf00      	nop
    8ce2:	b003      	add	sp, #12
    8ce4:	f85d fb04 	ldr.w	pc, [sp], #4
    8ce8:	1fff8dd8 	.word	0x1fff8dd8
    8cec:	1fff8dd4 	.word	0x1fff8dd4

00008cf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    8cf0:	b500      	push	{lr}
    8cf2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8cf4:	f7f7 ff7a 	bl	bec <Sys_GetCoreID>
    8cf8:	4603      	mov	r3, r0
    8cfa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    8cfc:	4a10      	ldr	r2, [pc, #64]	; (8d40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    8cfe:	9b01      	ldr	r3, [sp, #4]
    8d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d04:	2b00      	cmp	r3, #0
    8d06:	d10d      	bne.n	8d24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8d08:	f7f7 fe97 	bl	a3a <Port_schm_read_msr>
    8d0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8d0e:	9b00      	ldr	r3, [sp, #0]
    8d10:	f003 0301 	and.w	r3, r3, #1
    8d14:	2b00      	cmp	r3, #0
    8d16:	d100      	bne.n	8d1a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8d18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    8d1a:	490a      	ldr	r1, [pc, #40]	; (8d44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    8d1c:	9b01      	ldr	r3, [sp, #4]
    8d1e:	9a00      	ldr	r2, [sp, #0]
    8d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    8d24:	4a06      	ldr	r2, [pc, #24]	; (8d40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    8d26:	9b01      	ldr	r3, [sp, #4]
    8d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d2c:	1c5a      	adds	r2, r3, #1
    8d2e:	4904      	ldr	r1, [pc, #16]	; (8d40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    8d30:	9b01      	ldr	r3, [sp, #4]
    8d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8d36:	bf00      	nop
    8d38:	b003      	add	sp, #12
    8d3a:	f85d fb04 	ldr.w	pc, [sp], #4
    8d3e:	bf00      	nop
    8d40:	1fff8de0 	.word	0x1fff8de0
    8d44:	1fff8ddc 	.word	0x1fff8ddc

00008d48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    8d48:	b500      	push	{lr}
    8d4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d4c:	f7f7 ff4e 	bl	bec <Sys_GetCoreID>
    8d50:	4603      	mov	r3, r0
    8d52:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    8d54:	4a0d      	ldr	r2, [pc, #52]	; (8d8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    8d56:	9b01      	ldr	r3, [sp, #4]
    8d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d5c:	1e5a      	subs	r2, r3, #1
    8d5e:	490b      	ldr	r1, [pc, #44]	; (8d8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    8d60:	9b01      	ldr	r3, [sp, #4]
    8d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    8d66:	4a0a      	ldr	r2, [pc, #40]	; (8d90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    8d68:	9b01      	ldr	r3, [sp, #4]
    8d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d6e:	f003 0301 	and.w	r3, r3, #1
    8d72:	2b00      	cmp	r3, #0
    8d74:	d106      	bne.n	8d84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    8d76:	4a05      	ldr	r2, [pc, #20]	; (8d8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    8d78:	9b01      	ldr	r3, [sp, #4]
    8d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d7e:	2b00      	cmp	r3, #0
    8d80:	d100      	bne.n	8d84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8d82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8d84:	bf00      	nop
    8d86:	b003      	add	sp, #12
    8d88:	f85d fb04 	ldr.w	pc, [sp], #4
    8d8c:	1fff8de0 	.word	0x1fff8de0
    8d90:	1fff8ddc 	.word	0x1fff8ddc

00008d94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    8d94:	b500      	push	{lr}
    8d96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d98:	f7f7 ff28 	bl	bec <Sys_GetCoreID>
    8d9c:	4603      	mov	r3, r0
    8d9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    8da0:	4a10      	ldr	r2, [pc, #64]	; (8de4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    8da2:	9b01      	ldr	r3, [sp, #4]
    8da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8da8:	2b00      	cmp	r3, #0
    8daa:	d10d      	bne.n	8dc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8dac:	f7f7 fe45 	bl	a3a <Port_schm_read_msr>
    8db0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8db2:	9b00      	ldr	r3, [sp, #0]
    8db4:	f003 0301 	and.w	r3, r3, #1
    8db8:	2b00      	cmp	r3, #0
    8dba:	d100      	bne.n	8dbe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8dbc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    8dbe:	490a      	ldr	r1, [pc, #40]	; (8de8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    8dc0:	9b01      	ldr	r3, [sp, #4]
    8dc2:	9a00      	ldr	r2, [sp, #0]
    8dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    8dc8:	4a06      	ldr	r2, [pc, #24]	; (8de4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    8dca:	9b01      	ldr	r3, [sp, #4]
    8dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dd0:	1c5a      	adds	r2, r3, #1
    8dd2:	4904      	ldr	r1, [pc, #16]	; (8de4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    8dd4:	9b01      	ldr	r3, [sp, #4]
    8dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8dda:	bf00      	nop
    8ddc:	b003      	add	sp, #12
    8dde:	f85d fb04 	ldr.w	pc, [sp], #4
    8de2:	bf00      	nop
    8de4:	1fff8de8 	.word	0x1fff8de8
    8de8:	1fff8de4 	.word	0x1fff8de4

00008dec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    8dec:	b500      	push	{lr}
    8dee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8df0:	f7f7 fefc 	bl	bec <Sys_GetCoreID>
    8df4:	4603      	mov	r3, r0
    8df6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    8df8:	4a0d      	ldr	r2, [pc, #52]	; (8e30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    8dfa:	9b01      	ldr	r3, [sp, #4]
    8dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e00:	1e5a      	subs	r2, r3, #1
    8e02:	490b      	ldr	r1, [pc, #44]	; (8e30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    8e04:	9b01      	ldr	r3, [sp, #4]
    8e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    8e0a:	4a0a      	ldr	r2, [pc, #40]	; (8e34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    8e0c:	9b01      	ldr	r3, [sp, #4]
    8e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e12:	f003 0301 	and.w	r3, r3, #1
    8e16:	2b00      	cmp	r3, #0
    8e18:	d106      	bne.n	8e28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    8e1a:	4a05      	ldr	r2, [pc, #20]	; (8e30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    8e1c:	9b01      	ldr	r3, [sp, #4]
    8e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e22:	2b00      	cmp	r3, #0
    8e24:	d100      	bne.n	8e28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8e26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8e28:	bf00      	nop
    8e2a:	b003      	add	sp, #12
    8e2c:	f85d fb04 	ldr.w	pc, [sp], #4
    8e30:	1fff8de8 	.word	0x1fff8de8
    8e34:	1fff8de4 	.word	0x1fff8de4

00008e38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    8e38:	b500      	push	{lr}
    8e3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e3c:	f7f7 fed6 	bl	bec <Sys_GetCoreID>
    8e40:	4603      	mov	r3, r0
    8e42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    8e44:	4a10      	ldr	r2, [pc, #64]	; (8e88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    8e46:	9b01      	ldr	r3, [sp, #4]
    8e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e4c:	2b00      	cmp	r3, #0
    8e4e:	d10d      	bne.n	8e6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8e50:	f7f7 fdf3 	bl	a3a <Port_schm_read_msr>
    8e54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8e56:	9b00      	ldr	r3, [sp, #0]
    8e58:	f003 0301 	and.w	r3, r3, #1
    8e5c:	2b00      	cmp	r3, #0
    8e5e:	d100      	bne.n	8e62 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8e60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    8e62:	490a      	ldr	r1, [pc, #40]	; (8e8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    8e64:	9b01      	ldr	r3, [sp, #4]
    8e66:	9a00      	ldr	r2, [sp, #0]
    8e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    8e6c:	4a06      	ldr	r2, [pc, #24]	; (8e88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    8e6e:	9b01      	ldr	r3, [sp, #4]
    8e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e74:	1c5a      	adds	r2, r3, #1
    8e76:	4904      	ldr	r1, [pc, #16]	; (8e88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    8e78:	9b01      	ldr	r3, [sp, #4]
    8e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8e7e:	bf00      	nop
    8e80:	b003      	add	sp, #12
    8e82:	f85d fb04 	ldr.w	pc, [sp], #4
    8e86:	bf00      	nop
    8e88:	1fff8df0 	.word	0x1fff8df0
    8e8c:	1fff8dec 	.word	0x1fff8dec

00008e90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    8e90:	b500      	push	{lr}
    8e92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e94:	f7f7 feaa 	bl	bec <Sys_GetCoreID>
    8e98:	4603      	mov	r3, r0
    8e9a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    8e9c:	4a0d      	ldr	r2, [pc, #52]	; (8ed4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    8e9e:	9b01      	ldr	r3, [sp, #4]
    8ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ea4:	1e5a      	subs	r2, r3, #1
    8ea6:	490b      	ldr	r1, [pc, #44]	; (8ed4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    8ea8:	9b01      	ldr	r3, [sp, #4]
    8eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    8eae:	4a0a      	ldr	r2, [pc, #40]	; (8ed8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    8eb0:	9b01      	ldr	r3, [sp, #4]
    8eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8eb6:	f003 0301 	and.w	r3, r3, #1
    8eba:	2b00      	cmp	r3, #0
    8ebc:	d106      	bne.n	8ecc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    8ebe:	4a05      	ldr	r2, [pc, #20]	; (8ed4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    8ec0:	9b01      	ldr	r3, [sp, #4]
    8ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ec6:	2b00      	cmp	r3, #0
    8ec8:	d100      	bne.n	8ecc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8eca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8ecc:	bf00      	nop
    8ece:	b003      	add	sp, #12
    8ed0:	f85d fb04 	ldr.w	pc, [sp], #4
    8ed4:	1fff8df0 	.word	0x1fff8df0
    8ed8:	1fff8dec 	.word	0x1fff8dec

00008edc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    8edc:	b500      	push	{lr}
    8ede:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ee0:	f7f7 fe84 	bl	bec <Sys_GetCoreID>
    8ee4:	4603      	mov	r3, r0
    8ee6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    8ee8:	4a10      	ldr	r2, [pc, #64]	; (8f2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    8eea:	9b01      	ldr	r3, [sp, #4]
    8eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ef0:	2b00      	cmp	r3, #0
    8ef2:	d10d      	bne.n	8f10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8ef4:	f7f7 fda1 	bl	a3a <Port_schm_read_msr>
    8ef8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8efa:	9b00      	ldr	r3, [sp, #0]
    8efc:	f003 0301 	and.w	r3, r3, #1
    8f00:	2b00      	cmp	r3, #0
    8f02:	d100      	bne.n	8f06 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8f04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    8f06:	490a      	ldr	r1, [pc, #40]	; (8f30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    8f08:	9b01      	ldr	r3, [sp, #4]
    8f0a:	9a00      	ldr	r2, [sp, #0]
    8f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    8f10:	4a06      	ldr	r2, [pc, #24]	; (8f2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    8f12:	9b01      	ldr	r3, [sp, #4]
    8f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f18:	1c5a      	adds	r2, r3, #1
    8f1a:	4904      	ldr	r1, [pc, #16]	; (8f2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    8f1c:	9b01      	ldr	r3, [sp, #4]
    8f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8f22:	bf00      	nop
    8f24:	b003      	add	sp, #12
    8f26:	f85d fb04 	ldr.w	pc, [sp], #4
    8f2a:	bf00      	nop
    8f2c:	1fff8df8 	.word	0x1fff8df8
    8f30:	1fff8df4 	.word	0x1fff8df4

00008f34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    8f34:	b500      	push	{lr}
    8f36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f38:	f7f7 fe58 	bl	bec <Sys_GetCoreID>
    8f3c:	4603      	mov	r3, r0
    8f3e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    8f40:	4a0d      	ldr	r2, [pc, #52]	; (8f78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    8f42:	9b01      	ldr	r3, [sp, #4]
    8f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f48:	1e5a      	subs	r2, r3, #1
    8f4a:	490b      	ldr	r1, [pc, #44]	; (8f78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    8f4c:	9b01      	ldr	r3, [sp, #4]
    8f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    8f52:	4a0a      	ldr	r2, [pc, #40]	; (8f7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    8f54:	9b01      	ldr	r3, [sp, #4]
    8f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f5a:	f003 0301 	and.w	r3, r3, #1
    8f5e:	2b00      	cmp	r3, #0
    8f60:	d106      	bne.n	8f70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    8f62:	4a05      	ldr	r2, [pc, #20]	; (8f78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    8f64:	9b01      	ldr	r3, [sp, #4]
    8f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f6a:	2b00      	cmp	r3, #0
    8f6c:	d100      	bne.n	8f70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8f6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8f70:	bf00      	nop
    8f72:	b003      	add	sp, #12
    8f74:	f85d fb04 	ldr.w	pc, [sp], #4
    8f78:	1fff8df8 	.word	0x1fff8df8
    8f7c:	1fff8df4 	.word	0x1fff8df4

00008f80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    8f80:	b500      	push	{lr}
    8f82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f84:	f7f7 fe32 	bl	bec <Sys_GetCoreID>
    8f88:	4603      	mov	r3, r0
    8f8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    8f8c:	4a10      	ldr	r2, [pc, #64]	; (8fd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    8f8e:	9b01      	ldr	r3, [sp, #4]
    8f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f94:	2b00      	cmp	r3, #0
    8f96:	d10d      	bne.n	8fb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8f98:	f7f7 fd4f 	bl	a3a <Port_schm_read_msr>
    8f9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8f9e:	9b00      	ldr	r3, [sp, #0]
    8fa0:	f003 0301 	and.w	r3, r3, #1
    8fa4:	2b00      	cmp	r3, #0
    8fa6:	d100      	bne.n	8faa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8fa8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    8faa:	490a      	ldr	r1, [pc, #40]	; (8fd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    8fac:	9b01      	ldr	r3, [sp, #4]
    8fae:	9a00      	ldr	r2, [sp, #0]
    8fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    8fb4:	4a06      	ldr	r2, [pc, #24]	; (8fd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    8fb6:	9b01      	ldr	r3, [sp, #4]
    8fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fbc:	1c5a      	adds	r2, r3, #1
    8fbe:	4904      	ldr	r1, [pc, #16]	; (8fd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    8fc0:	9b01      	ldr	r3, [sp, #4]
    8fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8fc6:	bf00      	nop
    8fc8:	b003      	add	sp, #12
    8fca:	f85d fb04 	ldr.w	pc, [sp], #4
    8fce:	bf00      	nop
    8fd0:	1fff8e00 	.word	0x1fff8e00
    8fd4:	1fff8dfc 	.word	0x1fff8dfc

00008fd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    8fd8:	b500      	push	{lr}
    8fda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8fdc:	f7f7 fe06 	bl	bec <Sys_GetCoreID>
    8fe0:	4603      	mov	r3, r0
    8fe2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    8fe4:	4a0d      	ldr	r2, [pc, #52]	; (901c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    8fe6:	9b01      	ldr	r3, [sp, #4]
    8fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fec:	1e5a      	subs	r2, r3, #1
    8fee:	490b      	ldr	r1, [pc, #44]	; (901c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    8ff0:	9b01      	ldr	r3, [sp, #4]
    8ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    8ff6:	4a0a      	ldr	r2, [pc, #40]	; (9020 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    8ff8:	9b01      	ldr	r3, [sp, #4]
    8ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ffe:	f003 0301 	and.w	r3, r3, #1
    9002:	2b00      	cmp	r3, #0
    9004:	d106      	bne.n	9014 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    9006:	4a05      	ldr	r2, [pc, #20]	; (901c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    9008:	9b01      	ldr	r3, [sp, #4]
    900a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    900e:	2b00      	cmp	r3, #0
    9010:	d100      	bne.n	9014 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9012:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9014:	bf00      	nop
    9016:	b003      	add	sp, #12
    9018:	f85d fb04 	ldr.w	pc, [sp], #4
    901c:	1fff8e00 	.word	0x1fff8e00
    9020:	1fff8dfc 	.word	0x1fff8dfc

00009024 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    9024:	b500      	push	{lr}
    9026:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9028:	f7f7 fde0 	bl	bec <Sys_GetCoreID>
    902c:	4603      	mov	r3, r0
    902e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    9030:	4a10      	ldr	r2, [pc, #64]	; (9074 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    9032:	9b01      	ldr	r3, [sp, #4]
    9034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9038:	2b00      	cmp	r3, #0
    903a:	d10d      	bne.n	9058 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    903c:	f7f7 fcfd 	bl	a3a <Port_schm_read_msr>
    9040:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9042:	9b00      	ldr	r3, [sp, #0]
    9044:	f003 0301 	and.w	r3, r3, #1
    9048:	2b00      	cmp	r3, #0
    904a:	d100      	bne.n	904e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    904c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    904e:	490a      	ldr	r1, [pc, #40]	; (9078 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    9050:	9b01      	ldr	r3, [sp, #4]
    9052:	9a00      	ldr	r2, [sp, #0]
    9054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    9058:	4a06      	ldr	r2, [pc, #24]	; (9074 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    905a:	9b01      	ldr	r3, [sp, #4]
    905c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9060:	1c5a      	adds	r2, r3, #1
    9062:	4904      	ldr	r1, [pc, #16]	; (9074 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    9064:	9b01      	ldr	r3, [sp, #4]
    9066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    906a:	bf00      	nop
    906c:	b003      	add	sp, #12
    906e:	f85d fb04 	ldr.w	pc, [sp], #4
    9072:	bf00      	nop
    9074:	1fff8e08 	.word	0x1fff8e08
    9078:	1fff8e04 	.word	0x1fff8e04

0000907c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    907c:	b500      	push	{lr}
    907e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9080:	f7f7 fdb4 	bl	bec <Sys_GetCoreID>
    9084:	4603      	mov	r3, r0
    9086:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    9088:	4a0d      	ldr	r2, [pc, #52]	; (90c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    908a:	9b01      	ldr	r3, [sp, #4]
    908c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9090:	1e5a      	subs	r2, r3, #1
    9092:	490b      	ldr	r1, [pc, #44]	; (90c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    9094:	9b01      	ldr	r3, [sp, #4]
    9096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    909a:	4a0a      	ldr	r2, [pc, #40]	; (90c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    909c:	9b01      	ldr	r3, [sp, #4]
    909e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90a2:	f003 0301 	and.w	r3, r3, #1
    90a6:	2b00      	cmp	r3, #0
    90a8:	d106      	bne.n	90b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    90aa:	4a05      	ldr	r2, [pc, #20]	; (90c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    90ac:	9b01      	ldr	r3, [sp, #4]
    90ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90b2:	2b00      	cmp	r3, #0
    90b4:	d100      	bne.n	90b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    90b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    90b8:	bf00      	nop
    90ba:	b003      	add	sp, #12
    90bc:	f85d fb04 	ldr.w	pc, [sp], #4
    90c0:	1fff8e08 	.word	0x1fff8e08
    90c4:	1fff8e04 	.word	0x1fff8e04

000090c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    90c8:	b500      	push	{lr}
    90ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    90cc:	f7f7 fd8e 	bl	bec <Sys_GetCoreID>
    90d0:	4603      	mov	r3, r0
    90d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    90d4:	4a10      	ldr	r2, [pc, #64]	; (9118 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    90d6:	9b01      	ldr	r3, [sp, #4]
    90d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90dc:	2b00      	cmp	r3, #0
    90de:	d10d      	bne.n	90fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    90e0:	f7f7 fcab 	bl	a3a <Port_schm_read_msr>
    90e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    90e6:	9b00      	ldr	r3, [sp, #0]
    90e8:	f003 0301 	and.w	r3, r3, #1
    90ec:	2b00      	cmp	r3, #0
    90ee:	d100      	bne.n	90f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    90f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    90f2:	490a      	ldr	r1, [pc, #40]	; (911c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    90f4:	9b01      	ldr	r3, [sp, #4]
    90f6:	9a00      	ldr	r2, [sp, #0]
    90f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    90fc:	4a06      	ldr	r2, [pc, #24]	; (9118 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    90fe:	9b01      	ldr	r3, [sp, #4]
    9100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9104:	1c5a      	adds	r2, r3, #1
    9106:	4904      	ldr	r1, [pc, #16]	; (9118 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    9108:	9b01      	ldr	r3, [sp, #4]
    910a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    910e:	bf00      	nop
    9110:	b003      	add	sp, #12
    9112:	f85d fb04 	ldr.w	pc, [sp], #4
    9116:	bf00      	nop
    9118:	1fff8e10 	.word	0x1fff8e10
    911c:	1fff8e0c 	.word	0x1fff8e0c

00009120 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    9120:	b500      	push	{lr}
    9122:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9124:	f7f7 fd62 	bl	bec <Sys_GetCoreID>
    9128:	4603      	mov	r3, r0
    912a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    912c:	4a0d      	ldr	r2, [pc, #52]	; (9164 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    912e:	9b01      	ldr	r3, [sp, #4]
    9130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9134:	1e5a      	subs	r2, r3, #1
    9136:	490b      	ldr	r1, [pc, #44]	; (9164 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    9138:	9b01      	ldr	r3, [sp, #4]
    913a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    913e:	4a0a      	ldr	r2, [pc, #40]	; (9168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    9140:	9b01      	ldr	r3, [sp, #4]
    9142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9146:	f003 0301 	and.w	r3, r3, #1
    914a:	2b00      	cmp	r3, #0
    914c:	d106      	bne.n	915c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    914e:	4a05      	ldr	r2, [pc, #20]	; (9164 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    9150:	9b01      	ldr	r3, [sp, #4]
    9152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9156:	2b00      	cmp	r3, #0
    9158:	d100      	bne.n	915c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    915a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    915c:	bf00      	nop
    915e:	b003      	add	sp, #12
    9160:	f85d fb04 	ldr.w	pc, [sp], #4
    9164:	1fff8e10 	.word	0x1fff8e10
    9168:	1fff8e0c 	.word	0x1fff8e0c

0000916c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    916c:	b500      	push	{lr}
    916e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9170:	f7f7 fd3c 	bl	bec <Sys_GetCoreID>
    9174:	4603      	mov	r3, r0
    9176:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    9178:	4a10      	ldr	r2, [pc, #64]	; (91bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    917a:	9b01      	ldr	r3, [sp, #4]
    917c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9180:	2b00      	cmp	r3, #0
    9182:	d10d      	bne.n	91a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9184:	f7f7 fc59 	bl	a3a <Port_schm_read_msr>
    9188:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    918a:	9b00      	ldr	r3, [sp, #0]
    918c:	f003 0301 	and.w	r3, r3, #1
    9190:	2b00      	cmp	r3, #0
    9192:	d100      	bne.n	9196 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9194:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    9196:	490a      	ldr	r1, [pc, #40]	; (91c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    9198:	9b01      	ldr	r3, [sp, #4]
    919a:	9a00      	ldr	r2, [sp, #0]
    919c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    91a0:	4a06      	ldr	r2, [pc, #24]	; (91bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    91a2:	9b01      	ldr	r3, [sp, #4]
    91a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91a8:	1c5a      	adds	r2, r3, #1
    91aa:	4904      	ldr	r1, [pc, #16]	; (91bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    91ac:	9b01      	ldr	r3, [sp, #4]
    91ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    91b2:	bf00      	nop
    91b4:	b003      	add	sp, #12
    91b6:	f85d fb04 	ldr.w	pc, [sp], #4
    91ba:	bf00      	nop
    91bc:	1fff8e18 	.word	0x1fff8e18
    91c0:	1fff8e14 	.word	0x1fff8e14

000091c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    91c4:	b500      	push	{lr}
    91c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    91c8:	f7f7 fd10 	bl	bec <Sys_GetCoreID>
    91cc:	4603      	mov	r3, r0
    91ce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    91d0:	4a0d      	ldr	r2, [pc, #52]	; (9208 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    91d2:	9b01      	ldr	r3, [sp, #4]
    91d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91d8:	1e5a      	subs	r2, r3, #1
    91da:	490b      	ldr	r1, [pc, #44]	; (9208 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    91dc:	9b01      	ldr	r3, [sp, #4]
    91de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    91e2:	4a0a      	ldr	r2, [pc, #40]	; (920c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    91e4:	9b01      	ldr	r3, [sp, #4]
    91e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91ea:	f003 0301 	and.w	r3, r3, #1
    91ee:	2b00      	cmp	r3, #0
    91f0:	d106      	bne.n	9200 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    91f2:	4a05      	ldr	r2, [pc, #20]	; (9208 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    91f4:	9b01      	ldr	r3, [sp, #4]
    91f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91fa:	2b00      	cmp	r3, #0
    91fc:	d100      	bne.n	9200 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    91fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9200:	bf00      	nop
    9202:	b003      	add	sp, #12
    9204:	f85d fb04 	ldr.w	pc, [sp], #4
    9208:	1fff8e18 	.word	0x1fff8e18
    920c:	1fff8e14 	.word	0x1fff8e14

00009210 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    9210:	b500      	push	{lr}
    9212:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9214:	f7f7 fcea 	bl	bec <Sys_GetCoreID>
    9218:	4603      	mov	r3, r0
    921a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    921c:	4a10      	ldr	r2, [pc, #64]	; (9260 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    921e:	9b01      	ldr	r3, [sp, #4]
    9220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9224:	2b00      	cmp	r3, #0
    9226:	d10d      	bne.n	9244 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9228:	f7f7 fc07 	bl	a3a <Port_schm_read_msr>
    922c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    922e:	9b00      	ldr	r3, [sp, #0]
    9230:	f003 0301 	and.w	r3, r3, #1
    9234:	2b00      	cmp	r3, #0
    9236:	d100      	bne.n	923a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9238:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    923a:	490a      	ldr	r1, [pc, #40]	; (9264 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    923c:	9b01      	ldr	r3, [sp, #4]
    923e:	9a00      	ldr	r2, [sp, #0]
    9240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    9244:	4a06      	ldr	r2, [pc, #24]	; (9260 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    9246:	9b01      	ldr	r3, [sp, #4]
    9248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    924c:	1c5a      	adds	r2, r3, #1
    924e:	4904      	ldr	r1, [pc, #16]	; (9260 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    9250:	9b01      	ldr	r3, [sp, #4]
    9252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9256:	bf00      	nop
    9258:	b003      	add	sp, #12
    925a:	f85d fb04 	ldr.w	pc, [sp], #4
    925e:	bf00      	nop
    9260:	1fff8e20 	.word	0x1fff8e20
    9264:	1fff8e1c 	.word	0x1fff8e1c

00009268 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    9268:	b500      	push	{lr}
    926a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    926c:	f7f7 fcbe 	bl	bec <Sys_GetCoreID>
    9270:	4603      	mov	r3, r0
    9272:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    9274:	4a0d      	ldr	r2, [pc, #52]	; (92ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    9276:	9b01      	ldr	r3, [sp, #4]
    9278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    927c:	1e5a      	subs	r2, r3, #1
    927e:	490b      	ldr	r1, [pc, #44]	; (92ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    9280:	9b01      	ldr	r3, [sp, #4]
    9282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    9286:	4a0a      	ldr	r2, [pc, #40]	; (92b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    9288:	9b01      	ldr	r3, [sp, #4]
    928a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    928e:	f003 0301 	and.w	r3, r3, #1
    9292:	2b00      	cmp	r3, #0
    9294:	d106      	bne.n	92a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    9296:	4a05      	ldr	r2, [pc, #20]	; (92ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    9298:	9b01      	ldr	r3, [sp, #4]
    929a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    929e:	2b00      	cmp	r3, #0
    92a0:	d100      	bne.n	92a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    92a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    92a4:	bf00      	nop
    92a6:	b003      	add	sp, #12
    92a8:	f85d fb04 	ldr.w	pc, [sp], #4
    92ac:	1fff8e20 	.word	0x1fff8e20
    92b0:	1fff8e1c 	.word	0x1fff8e1c

000092b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    92b4:	b500      	push	{lr}
    92b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    92b8:	f7f7 fc98 	bl	bec <Sys_GetCoreID>
    92bc:	4603      	mov	r3, r0
    92be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    92c0:	4a10      	ldr	r2, [pc, #64]	; (9304 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    92c2:	9b01      	ldr	r3, [sp, #4]
    92c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92c8:	2b00      	cmp	r3, #0
    92ca:	d10d      	bne.n	92e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    92cc:	f7f7 fbb5 	bl	a3a <Port_schm_read_msr>
    92d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    92d2:	9b00      	ldr	r3, [sp, #0]
    92d4:	f003 0301 	and.w	r3, r3, #1
    92d8:	2b00      	cmp	r3, #0
    92da:	d100      	bne.n	92de <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    92dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    92de:	490a      	ldr	r1, [pc, #40]	; (9308 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    92e0:	9b01      	ldr	r3, [sp, #4]
    92e2:	9a00      	ldr	r2, [sp, #0]
    92e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    92e8:	4a06      	ldr	r2, [pc, #24]	; (9304 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    92ea:	9b01      	ldr	r3, [sp, #4]
    92ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92f0:	1c5a      	adds	r2, r3, #1
    92f2:	4904      	ldr	r1, [pc, #16]	; (9304 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    92f4:	9b01      	ldr	r3, [sp, #4]
    92f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    92fa:	bf00      	nop
    92fc:	b003      	add	sp, #12
    92fe:	f85d fb04 	ldr.w	pc, [sp], #4
    9302:	bf00      	nop
    9304:	1fff8e28 	.word	0x1fff8e28
    9308:	1fff8e24 	.word	0x1fff8e24

0000930c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    930c:	b500      	push	{lr}
    930e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9310:	f7f7 fc6c 	bl	bec <Sys_GetCoreID>
    9314:	4603      	mov	r3, r0
    9316:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    9318:	4a0d      	ldr	r2, [pc, #52]	; (9350 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    931a:	9b01      	ldr	r3, [sp, #4]
    931c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9320:	1e5a      	subs	r2, r3, #1
    9322:	490b      	ldr	r1, [pc, #44]	; (9350 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    9324:	9b01      	ldr	r3, [sp, #4]
    9326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    932a:	4a0a      	ldr	r2, [pc, #40]	; (9354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    932c:	9b01      	ldr	r3, [sp, #4]
    932e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9332:	f003 0301 	and.w	r3, r3, #1
    9336:	2b00      	cmp	r3, #0
    9338:	d106      	bne.n	9348 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    933a:	4a05      	ldr	r2, [pc, #20]	; (9350 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    933c:	9b01      	ldr	r3, [sp, #4]
    933e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9342:	2b00      	cmp	r3, #0
    9344:	d100      	bne.n	9348 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9346:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9348:	bf00      	nop
    934a:	b003      	add	sp, #12
    934c:	f85d fb04 	ldr.w	pc, [sp], #4
    9350:	1fff8e28 	.word	0x1fff8e28
    9354:	1fff8e24 	.word	0x1fff8e24

00009358 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    9358:	b500      	push	{lr}
    935a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    935c:	f7f7 fc46 	bl	bec <Sys_GetCoreID>
    9360:	4603      	mov	r3, r0
    9362:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    9364:	4a10      	ldr	r2, [pc, #64]	; (93a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    9366:	9b01      	ldr	r3, [sp, #4]
    9368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    936c:	2b00      	cmp	r3, #0
    936e:	d10d      	bne.n	938c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9370:	f7f7 fb63 	bl	a3a <Port_schm_read_msr>
    9374:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9376:	9b00      	ldr	r3, [sp, #0]
    9378:	f003 0301 	and.w	r3, r3, #1
    937c:	2b00      	cmp	r3, #0
    937e:	d100      	bne.n	9382 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9380:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    9382:	490a      	ldr	r1, [pc, #40]	; (93ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    9384:	9b01      	ldr	r3, [sp, #4]
    9386:	9a00      	ldr	r2, [sp, #0]
    9388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    938c:	4a06      	ldr	r2, [pc, #24]	; (93a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    938e:	9b01      	ldr	r3, [sp, #4]
    9390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9394:	1c5a      	adds	r2, r3, #1
    9396:	4904      	ldr	r1, [pc, #16]	; (93a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    9398:	9b01      	ldr	r3, [sp, #4]
    939a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    939e:	bf00      	nop
    93a0:	b003      	add	sp, #12
    93a2:	f85d fb04 	ldr.w	pc, [sp], #4
    93a6:	bf00      	nop
    93a8:	1fff8e30 	.word	0x1fff8e30
    93ac:	1fff8e2c 	.word	0x1fff8e2c

000093b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    93b0:	b500      	push	{lr}
    93b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    93b4:	f7f7 fc1a 	bl	bec <Sys_GetCoreID>
    93b8:	4603      	mov	r3, r0
    93ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    93bc:	4a0d      	ldr	r2, [pc, #52]	; (93f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    93be:	9b01      	ldr	r3, [sp, #4]
    93c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93c4:	1e5a      	subs	r2, r3, #1
    93c6:	490b      	ldr	r1, [pc, #44]	; (93f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    93c8:	9b01      	ldr	r3, [sp, #4]
    93ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    93ce:	4a0a      	ldr	r2, [pc, #40]	; (93f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    93d0:	9b01      	ldr	r3, [sp, #4]
    93d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93d6:	f003 0301 	and.w	r3, r3, #1
    93da:	2b00      	cmp	r3, #0
    93dc:	d106      	bne.n	93ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    93de:	4a05      	ldr	r2, [pc, #20]	; (93f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    93e0:	9b01      	ldr	r3, [sp, #4]
    93e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93e6:	2b00      	cmp	r3, #0
    93e8:	d100      	bne.n	93ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    93ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    93ec:	bf00      	nop
    93ee:	b003      	add	sp, #12
    93f0:	f85d fb04 	ldr.w	pc, [sp], #4
    93f4:	1fff8e30 	.word	0x1fff8e30
    93f8:	1fff8e2c 	.word	0x1fff8e2c

000093fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    93fc:	b500      	push	{lr}
    93fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9400:	f7f7 fbf4 	bl	bec <Sys_GetCoreID>
    9404:	4603      	mov	r3, r0
    9406:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    9408:	4a10      	ldr	r2, [pc, #64]	; (944c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    940a:	9b01      	ldr	r3, [sp, #4]
    940c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9410:	2b00      	cmp	r3, #0
    9412:	d10d      	bne.n	9430 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9414:	f7f7 fb11 	bl	a3a <Port_schm_read_msr>
    9418:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    941a:	9b00      	ldr	r3, [sp, #0]
    941c:	f003 0301 	and.w	r3, r3, #1
    9420:	2b00      	cmp	r3, #0
    9422:	d100      	bne.n	9426 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9424:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    9426:	490a      	ldr	r1, [pc, #40]	; (9450 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    9428:	9b01      	ldr	r3, [sp, #4]
    942a:	9a00      	ldr	r2, [sp, #0]
    942c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    9430:	4a06      	ldr	r2, [pc, #24]	; (944c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    9432:	9b01      	ldr	r3, [sp, #4]
    9434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9438:	1c5a      	adds	r2, r3, #1
    943a:	4904      	ldr	r1, [pc, #16]	; (944c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    943c:	9b01      	ldr	r3, [sp, #4]
    943e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9442:	bf00      	nop
    9444:	b003      	add	sp, #12
    9446:	f85d fb04 	ldr.w	pc, [sp], #4
    944a:	bf00      	nop
    944c:	1fff8e38 	.word	0x1fff8e38
    9450:	1fff8e34 	.word	0x1fff8e34

00009454 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    9454:	b500      	push	{lr}
    9456:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9458:	f7f7 fbc8 	bl	bec <Sys_GetCoreID>
    945c:	4603      	mov	r3, r0
    945e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    9460:	4a0d      	ldr	r2, [pc, #52]	; (9498 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    9462:	9b01      	ldr	r3, [sp, #4]
    9464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9468:	1e5a      	subs	r2, r3, #1
    946a:	490b      	ldr	r1, [pc, #44]	; (9498 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    946c:	9b01      	ldr	r3, [sp, #4]
    946e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    9472:	4a0a      	ldr	r2, [pc, #40]	; (949c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    9474:	9b01      	ldr	r3, [sp, #4]
    9476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    947a:	f003 0301 	and.w	r3, r3, #1
    947e:	2b00      	cmp	r3, #0
    9480:	d106      	bne.n	9490 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    9482:	4a05      	ldr	r2, [pc, #20]	; (9498 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    9484:	9b01      	ldr	r3, [sp, #4]
    9486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    948a:	2b00      	cmp	r3, #0
    948c:	d100      	bne.n	9490 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    948e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9490:	bf00      	nop
    9492:	b003      	add	sp, #12
    9494:	f85d fb04 	ldr.w	pc, [sp], #4
    9498:	1fff8e38 	.word	0x1fff8e38
    949c:	1fff8e34 	.word	0x1fff8e34

000094a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    94a0:	b500      	push	{lr}
    94a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    94a4:	f7f7 fba2 	bl	bec <Sys_GetCoreID>
    94a8:	4603      	mov	r3, r0
    94aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    94ac:	4a10      	ldr	r2, [pc, #64]	; (94f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    94ae:	9b01      	ldr	r3, [sp, #4]
    94b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94b4:	2b00      	cmp	r3, #0
    94b6:	d10d      	bne.n	94d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    94b8:	f7f7 fabf 	bl	a3a <Port_schm_read_msr>
    94bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    94be:	9b00      	ldr	r3, [sp, #0]
    94c0:	f003 0301 	and.w	r3, r3, #1
    94c4:	2b00      	cmp	r3, #0
    94c6:	d100      	bne.n	94ca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    94c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    94ca:	490a      	ldr	r1, [pc, #40]	; (94f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    94cc:	9b01      	ldr	r3, [sp, #4]
    94ce:	9a00      	ldr	r2, [sp, #0]
    94d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    94d4:	4a06      	ldr	r2, [pc, #24]	; (94f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    94d6:	9b01      	ldr	r3, [sp, #4]
    94d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94dc:	1c5a      	adds	r2, r3, #1
    94de:	4904      	ldr	r1, [pc, #16]	; (94f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    94e0:	9b01      	ldr	r3, [sp, #4]
    94e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    94e6:	bf00      	nop
    94e8:	b003      	add	sp, #12
    94ea:	f85d fb04 	ldr.w	pc, [sp], #4
    94ee:	bf00      	nop
    94f0:	1fff8e40 	.word	0x1fff8e40
    94f4:	1fff8e3c 	.word	0x1fff8e3c

000094f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    94f8:	b500      	push	{lr}
    94fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    94fc:	f7f7 fb76 	bl	bec <Sys_GetCoreID>
    9500:	4603      	mov	r3, r0
    9502:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    9504:	4a0d      	ldr	r2, [pc, #52]	; (953c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9506:	9b01      	ldr	r3, [sp, #4]
    9508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    950c:	1e5a      	subs	r2, r3, #1
    950e:	490b      	ldr	r1, [pc, #44]	; (953c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9510:	9b01      	ldr	r3, [sp, #4]
    9512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    9516:	4a0a      	ldr	r2, [pc, #40]	; (9540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    9518:	9b01      	ldr	r3, [sp, #4]
    951a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    951e:	f003 0301 	and.w	r3, r3, #1
    9522:	2b00      	cmp	r3, #0
    9524:	d106      	bne.n	9534 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    9526:	4a05      	ldr	r2, [pc, #20]	; (953c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9528:	9b01      	ldr	r3, [sp, #4]
    952a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    952e:	2b00      	cmp	r3, #0
    9530:	d100      	bne.n	9534 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9532:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9534:	bf00      	nop
    9536:	b003      	add	sp, #12
    9538:	f85d fb04 	ldr.w	pc, [sp], #4
    953c:	1fff8e40 	.word	0x1fff8e40
    9540:	1fff8e3c 	.word	0x1fff8e3c

00009544 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    9544:	b500      	push	{lr}
    9546:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9548:	f7f7 fb50 	bl	bec <Sys_GetCoreID>
    954c:	4603      	mov	r3, r0
    954e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    9550:	4a10      	ldr	r2, [pc, #64]	; (9594 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    9552:	9b01      	ldr	r3, [sp, #4]
    9554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9558:	2b00      	cmp	r3, #0
    955a:	d10d      	bne.n	9578 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    955c:	f7f7 fa6d 	bl	a3a <Port_schm_read_msr>
    9560:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9562:	9b00      	ldr	r3, [sp, #0]
    9564:	f003 0301 	and.w	r3, r3, #1
    9568:	2b00      	cmp	r3, #0
    956a:	d100      	bne.n	956e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    956c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    956e:	490a      	ldr	r1, [pc, #40]	; (9598 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    9570:	9b01      	ldr	r3, [sp, #4]
    9572:	9a00      	ldr	r2, [sp, #0]
    9574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    9578:	4a06      	ldr	r2, [pc, #24]	; (9594 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    957a:	9b01      	ldr	r3, [sp, #4]
    957c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9580:	1c5a      	adds	r2, r3, #1
    9582:	4904      	ldr	r1, [pc, #16]	; (9594 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    9584:	9b01      	ldr	r3, [sp, #4]
    9586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    958a:	bf00      	nop
    958c:	b003      	add	sp, #12
    958e:	f85d fb04 	ldr.w	pc, [sp], #4
    9592:	bf00      	nop
    9594:	1fff8e48 	.word	0x1fff8e48
    9598:	1fff8e44 	.word	0x1fff8e44

0000959c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    959c:	b500      	push	{lr}
    959e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    95a0:	f7f7 fb24 	bl	bec <Sys_GetCoreID>
    95a4:	4603      	mov	r3, r0
    95a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    95a8:	4a0d      	ldr	r2, [pc, #52]	; (95e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    95aa:	9b01      	ldr	r3, [sp, #4]
    95ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95b0:	1e5a      	subs	r2, r3, #1
    95b2:	490b      	ldr	r1, [pc, #44]	; (95e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    95b4:	9b01      	ldr	r3, [sp, #4]
    95b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    95ba:	4a0a      	ldr	r2, [pc, #40]	; (95e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    95bc:	9b01      	ldr	r3, [sp, #4]
    95be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95c2:	f003 0301 	and.w	r3, r3, #1
    95c6:	2b00      	cmp	r3, #0
    95c8:	d106      	bne.n	95d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    95ca:	4a05      	ldr	r2, [pc, #20]	; (95e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    95cc:	9b01      	ldr	r3, [sp, #4]
    95ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95d2:	2b00      	cmp	r3, #0
    95d4:	d100      	bne.n	95d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    95d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    95d8:	bf00      	nop
    95da:	b003      	add	sp, #12
    95dc:	f85d fb04 	ldr.w	pc, [sp], #4
    95e0:	1fff8e48 	.word	0x1fff8e48
    95e4:	1fff8e44 	.word	0x1fff8e44

000095e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    95e8:	b500      	push	{lr}
    95ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    95ec:	f7f7 fafe 	bl	bec <Sys_GetCoreID>
    95f0:	4603      	mov	r3, r0
    95f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    95f4:	4a10      	ldr	r2, [pc, #64]	; (9638 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    95f6:	9b01      	ldr	r3, [sp, #4]
    95f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95fc:	2b00      	cmp	r3, #0
    95fe:	d10d      	bne.n	961c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9600:	f7f7 fa1b 	bl	a3a <Port_schm_read_msr>
    9604:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9606:	9b00      	ldr	r3, [sp, #0]
    9608:	f003 0301 	and.w	r3, r3, #1
    960c:	2b00      	cmp	r3, #0
    960e:	d100      	bne.n	9612 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9610:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    9612:	490a      	ldr	r1, [pc, #40]	; (963c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    9614:	9b01      	ldr	r3, [sp, #4]
    9616:	9a00      	ldr	r2, [sp, #0]
    9618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    961c:	4a06      	ldr	r2, [pc, #24]	; (9638 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    961e:	9b01      	ldr	r3, [sp, #4]
    9620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9624:	1c5a      	adds	r2, r3, #1
    9626:	4904      	ldr	r1, [pc, #16]	; (9638 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    9628:	9b01      	ldr	r3, [sp, #4]
    962a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    962e:	bf00      	nop
    9630:	b003      	add	sp, #12
    9632:	f85d fb04 	ldr.w	pc, [sp], #4
    9636:	bf00      	nop
    9638:	1fff8e50 	.word	0x1fff8e50
    963c:	1fff8e4c 	.word	0x1fff8e4c

00009640 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    9640:	b500      	push	{lr}
    9642:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9644:	f7f7 fad2 	bl	bec <Sys_GetCoreID>
    9648:	4603      	mov	r3, r0
    964a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    964c:	4a0d      	ldr	r2, [pc, #52]	; (9684 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    964e:	9b01      	ldr	r3, [sp, #4]
    9650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9654:	1e5a      	subs	r2, r3, #1
    9656:	490b      	ldr	r1, [pc, #44]	; (9684 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9658:	9b01      	ldr	r3, [sp, #4]
    965a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    965e:	4a0a      	ldr	r2, [pc, #40]	; (9688 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    9660:	9b01      	ldr	r3, [sp, #4]
    9662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9666:	f003 0301 	and.w	r3, r3, #1
    966a:	2b00      	cmp	r3, #0
    966c:	d106      	bne.n	967c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    966e:	4a05      	ldr	r2, [pc, #20]	; (9684 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9670:	9b01      	ldr	r3, [sp, #4]
    9672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9676:	2b00      	cmp	r3, #0
    9678:	d100      	bne.n	967c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    967a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    967c:	bf00      	nop
    967e:	b003      	add	sp, #12
    9680:	f85d fb04 	ldr.w	pc, [sp], #4
    9684:	1fff8e50 	.word	0x1fff8e50
    9688:	1fff8e4c 	.word	0x1fff8e4c

0000968c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    968c:	b500      	push	{lr}
    968e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9690:	f7f7 faac 	bl	bec <Sys_GetCoreID>
    9694:	4603      	mov	r3, r0
    9696:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    9698:	4a10      	ldr	r2, [pc, #64]	; (96dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    969a:	9b01      	ldr	r3, [sp, #4]
    969c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96a0:	2b00      	cmp	r3, #0
    96a2:	d10d      	bne.n	96c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    96a4:	f7f7 f9c9 	bl	a3a <Port_schm_read_msr>
    96a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    96aa:	9b00      	ldr	r3, [sp, #0]
    96ac:	f003 0301 	and.w	r3, r3, #1
    96b0:	2b00      	cmp	r3, #0
    96b2:	d100      	bne.n	96b6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    96b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    96b6:	490a      	ldr	r1, [pc, #40]	; (96e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    96b8:	9b01      	ldr	r3, [sp, #4]
    96ba:	9a00      	ldr	r2, [sp, #0]
    96bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    96c0:	4a06      	ldr	r2, [pc, #24]	; (96dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    96c2:	9b01      	ldr	r3, [sp, #4]
    96c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96c8:	1c5a      	adds	r2, r3, #1
    96ca:	4904      	ldr	r1, [pc, #16]	; (96dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    96cc:	9b01      	ldr	r3, [sp, #4]
    96ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    96d2:	bf00      	nop
    96d4:	b003      	add	sp, #12
    96d6:	f85d fb04 	ldr.w	pc, [sp], #4
    96da:	bf00      	nop
    96dc:	1fff8e58 	.word	0x1fff8e58
    96e0:	1fff8e54 	.word	0x1fff8e54

000096e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    96e4:	b500      	push	{lr}
    96e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    96e8:	f7f7 fa80 	bl	bec <Sys_GetCoreID>
    96ec:	4603      	mov	r3, r0
    96ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    96f0:	4a0d      	ldr	r2, [pc, #52]	; (9728 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    96f2:	9b01      	ldr	r3, [sp, #4]
    96f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96f8:	1e5a      	subs	r2, r3, #1
    96fa:	490b      	ldr	r1, [pc, #44]	; (9728 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    96fc:	9b01      	ldr	r3, [sp, #4]
    96fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    9702:	4a0a      	ldr	r2, [pc, #40]	; (972c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    9704:	9b01      	ldr	r3, [sp, #4]
    9706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    970a:	f003 0301 	and.w	r3, r3, #1
    970e:	2b00      	cmp	r3, #0
    9710:	d106      	bne.n	9720 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    9712:	4a05      	ldr	r2, [pc, #20]	; (9728 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    9714:	9b01      	ldr	r3, [sp, #4]
    9716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    971a:	2b00      	cmp	r3, #0
    971c:	d100      	bne.n	9720 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    971e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9720:	bf00      	nop
    9722:	b003      	add	sp, #12
    9724:	f85d fb04 	ldr.w	pc, [sp], #4
    9728:	1fff8e58 	.word	0x1fff8e58
    972c:	1fff8e54 	.word	0x1fff8e54

00009730 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    9730:	b500      	push	{lr}
    9732:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9734:	f7f7 fa5a 	bl	bec <Sys_GetCoreID>
    9738:	4603      	mov	r3, r0
    973a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    973c:	4a10      	ldr	r2, [pc, #64]	; (9780 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    973e:	9b01      	ldr	r3, [sp, #4]
    9740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9744:	2b00      	cmp	r3, #0
    9746:	d10d      	bne.n	9764 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9748:	f7f7 f977 	bl	a3a <Port_schm_read_msr>
    974c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    974e:	9b00      	ldr	r3, [sp, #0]
    9750:	f003 0301 	and.w	r3, r3, #1
    9754:	2b00      	cmp	r3, #0
    9756:	d100      	bne.n	975a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9758:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    975a:	490a      	ldr	r1, [pc, #40]	; (9784 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    975c:	9b01      	ldr	r3, [sp, #4]
    975e:	9a00      	ldr	r2, [sp, #0]
    9760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    9764:	4a06      	ldr	r2, [pc, #24]	; (9780 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    9766:	9b01      	ldr	r3, [sp, #4]
    9768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    976c:	1c5a      	adds	r2, r3, #1
    976e:	4904      	ldr	r1, [pc, #16]	; (9780 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    9770:	9b01      	ldr	r3, [sp, #4]
    9772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9776:	bf00      	nop
    9778:	b003      	add	sp, #12
    977a:	f85d fb04 	ldr.w	pc, [sp], #4
    977e:	bf00      	nop
    9780:	1fff8e60 	.word	0x1fff8e60
    9784:	1fff8e5c 	.word	0x1fff8e5c

00009788 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    9788:	b500      	push	{lr}
    978a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    978c:	f7f7 fa2e 	bl	bec <Sys_GetCoreID>
    9790:	4603      	mov	r3, r0
    9792:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    9794:	4a0d      	ldr	r2, [pc, #52]	; (97cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    9796:	9b01      	ldr	r3, [sp, #4]
    9798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    979c:	1e5a      	subs	r2, r3, #1
    979e:	490b      	ldr	r1, [pc, #44]	; (97cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    97a0:	9b01      	ldr	r3, [sp, #4]
    97a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    97a6:	4a0a      	ldr	r2, [pc, #40]	; (97d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    97a8:	9b01      	ldr	r3, [sp, #4]
    97aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97ae:	f003 0301 	and.w	r3, r3, #1
    97b2:	2b00      	cmp	r3, #0
    97b4:	d106      	bne.n	97c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    97b6:	4a05      	ldr	r2, [pc, #20]	; (97cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    97b8:	9b01      	ldr	r3, [sp, #4]
    97ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97be:	2b00      	cmp	r3, #0
    97c0:	d100      	bne.n	97c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    97c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    97c4:	bf00      	nop
    97c6:	b003      	add	sp, #12
    97c8:	f85d fb04 	ldr.w	pc, [sp], #4
    97cc:	1fff8e60 	.word	0x1fff8e60
    97d0:	1fff8e5c 	.word	0x1fff8e5c

000097d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    97d4:	b500      	push	{lr}
    97d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    97d8:	f7f7 fa08 	bl	bec <Sys_GetCoreID>
    97dc:	4603      	mov	r3, r0
    97de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    97e0:	4a10      	ldr	r2, [pc, #64]	; (9824 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    97e2:	9b01      	ldr	r3, [sp, #4]
    97e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97e8:	2b00      	cmp	r3, #0
    97ea:	d10d      	bne.n	9808 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    97ec:	f7f7 f925 	bl	a3a <Port_schm_read_msr>
    97f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    97f2:	9b00      	ldr	r3, [sp, #0]
    97f4:	f003 0301 	and.w	r3, r3, #1
    97f8:	2b00      	cmp	r3, #0
    97fa:	d100      	bne.n	97fe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    97fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    97fe:	490a      	ldr	r1, [pc, #40]	; (9828 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    9800:	9b01      	ldr	r3, [sp, #4]
    9802:	9a00      	ldr	r2, [sp, #0]
    9804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    9808:	4a06      	ldr	r2, [pc, #24]	; (9824 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    980a:	9b01      	ldr	r3, [sp, #4]
    980c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9810:	1c5a      	adds	r2, r3, #1
    9812:	4904      	ldr	r1, [pc, #16]	; (9824 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    9814:	9b01      	ldr	r3, [sp, #4]
    9816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    981a:	bf00      	nop
    981c:	b003      	add	sp, #12
    981e:	f85d fb04 	ldr.w	pc, [sp], #4
    9822:	bf00      	nop
    9824:	1fff8e68 	.word	0x1fff8e68
    9828:	1fff8e64 	.word	0x1fff8e64

0000982c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    982c:	b500      	push	{lr}
    982e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9830:	f7f7 f9dc 	bl	bec <Sys_GetCoreID>
    9834:	4603      	mov	r3, r0
    9836:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    9838:	4a0d      	ldr	r2, [pc, #52]	; (9870 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    983a:	9b01      	ldr	r3, [sp, #4]
    983c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9840:	1e5a      	subs	r2, r3, #1
    9842:	490b      	ldr	r1, [pc, #44]	; (9870 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    9844:	9b01      	ldr	r3, [sp, #4]
    9846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    984a:	4a0a      	ldr	r2, [pc, #40]	; (9874 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    984c:	9b01      	ldr	r3, [sp, #4]
    984e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9852:	f003 0301 	and.w	r3, r3, #1
    9856:	2b00      	cmp	r3, #0
    9858:	d106      	bne.n	9868 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    985a:	4a05      	ldr	r2, [pc, #20]	; (9870 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    985c:	9b01      	ldr	r3, [sp, #4]
    985e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9862:	2b00      	cmp	r3, #0
    9864:	d100      	bne.n	9868 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9866:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9868:	bf00      	nop
    986a:	b003      	add	sp, #12
    986c:	f85d fb04 	ldr.w	pc, [sp], #4
    9870:	1fff8e68 	.word	0x1fff8e68
    9874:	1fff8e64 	.word	0x1fff8e64

00009878 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    9878:	b500      	push	{lr}
    987a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    987c:	f7f7 f9b6 	bl	bec <Sys_GetCoreID>
    9880:	4603      	mov	r3, r0
    9882:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    9884:	4a10      	ldr	r2, [pc, #64]	; (98c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    9886:	9b01      	ldr	r3, [sp, #4]
    9888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    988c:	2b00      	cmp	r3, #0
    988e:	d10d      	bne.n	98ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9890:	f7f7 f8d3 	bl	a3a <Port_schm_read_msr>
    9894:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9896:	9b00      	ldr	r3, [sp, #0]
    9898:	f003 0301 	and.w	r3, r3, #1
    989c:	2b00      	cmp	r3, #0
    989e:	d100      	bne.n	98a2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    98a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    98a2:	490a      	ldr	r1, [pc, #40]	; (98cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    98a4:	9b01      	ldr	r3, [sp, #4]
    98a6:	9a00      	ldr	r2, [sp, #0]
    98a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    98ac:	4a06      	ldr	r2, [pc, #24]	; (98c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    98ae:	9b01      	ldr	r3, [sp, #4]
    98b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98b4:	1c5a      	adds	r2, r3, #1
    98b6:	4904      	ldr	r1, [pc, #16]	; (98c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    98b8:	9b01      	ldr	r3, [sp, #4]
    98ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    98be:	bf00      	nop
    98c0:	b003      	add	sp, #12
    98c2:	f85d fb04 	ldr.w	pc, [sp], #4
    98c6:	bf00      	nop
    98c8:	1fff8e70 	.word	0x1fff8e70
    98cc:	1fff8e6c 	.word	0x1fff8e6c

000098d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    98d0:	b500      	push	{lr}
    98d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    98d4:	f7f7 f98a 	bl	bec <Sys_GetCoreID>
    98d8:	4603      	mov	r3, r0
    98da:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    98dc:	4a0d      	ldr	r2, [pc, #52]	; (9914 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    98de:	9b01      	ldr	r3, [sp, #4]
    98e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98e4:	1e5a      	subs	r2, r3, #1
    98e6:	490b      	ldr	r1, [pc, #44]	; (9914 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    98e8:	9b01      	ldr	r3, [sp, #4]
    98ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    98ee:	4a0a      	ldr	r2, [pc, #40]	; (9918 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    98f0:	9b01      	ldr	r3, [sp, #4]
    98f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98f6:	f003 0301 	and.w	r3, r3, #1
    98fa:	2b00      	cmp	r3, #0
    98fc:	d106      	bne.n	990c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    98fe:	4a05      	ldr	r2, [pc, #20]	; (9914 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    9900:	9b01      	ldr	r3, [sp, #4]
    9902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9906:	2b00      	cmp	r3, #0
    9908:	d100      	bne.n	990c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    990a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    990c:	bf00      	nop
    990e:	b003      	add	sp, #12
    9910:	f85d fb04 	ldr.w	pc, [sp], #4
    9914:	1fff8e70 	.word	0x1fff8e70
    9918:	1fff8e6c 	.word	0x1fff8e6c

0000991c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00(void)
{
    991c:	b500      	push	{lr}
    991e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9920:	f7f7 f964 	bl	bec <Sys_GetCoreID>
    9924:	4603      	mov	r3, r0
    9926:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId])
    9928:	4a10      	ldr	r2, [pc, #64]	; (996c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
    992a:	9b01      	ldr	r3, [sp, #4]
    992c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9930:	2b00      	cmp	r3, #0
    9932:	d10d      	bne.n	9950 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9934:	f7f7 f88a 	bl	a4c <Spi_schm_read_msr>
    9938:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    993a:	9b00      	ldr	r3, [sp, #0]
    993c:	f003 0301 	and.w	r3, r3, #1
    9940:	2b00      	cmp	r3, #0
    9942:	d100      	bne.n	9946 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9944:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    9946:	490a      	ldr	r1, [pc, #40]	; (9970 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x54>)
    9948:	9b01      	ldr	r3, [sp, #4]
    994a:	9a00      	ldr	r2, [sp, #0]
    994c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]++;
    9950:	4a06      	ldr	r2, [pc, #24]	; (996c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
    9952:	9b01      	ldr	r3, [sp, #4]
    9954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9958:	1c5a      	adds	r2, r3, #1
    995a:	4904      	ldr	r1, [pc, #16]	; (996c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
    995c:	9b01      	ldr	r3, [sp, #4]
    995e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9962:	bf00      	nop
    9964:	b003      	add	sp, #12
    9966:	f85d fb04 	ldr.w	pc, [sp], #4
    996a:	bf00      	nop
    996c:	1fff8e78 	.word	0x1fff8e78
    9970:	1fff8e74 	.word	0x1fff8e74

00009974 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00(void)
{
    9974:	b500      	push	{lr}
    9976:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9978:	f7f7 f938 	bl	bec <Sys_GetCoreID>
    997c:	4603      	mov	r3, r0
    997e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]--;
    9980:	4a0d      	ldr	r2, [pc, #52]	; (99b8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
    9982:	9b01      	ldr	r3, [sp, #4]
    9984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9988:	1e5a      	subs	r2, r3, #1
    998a:	490b      	ldr	r1, [pc, #44]	; (99b8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
    998c:	9b01      	ldr	r3, [sp, #4]
    998e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    9992:	4a0a      	ldr	r2, [pc, #40]	; (99bc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x48>)
    9994:	9b01      	ldr	r3, [sp, #4]
    9996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    999a:	f003 0301 	and.w	r3, r3, #1
    999e:	2b00      	cmp	r3, #0
    99a0:	d106      	bne.n	99b0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x3c>
    99a2:	4a05      	ldr	r2, [pc, #20]	; (99b8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
    99a4:	9b01      	ldr	r3, [sp, #4]
    99a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99aa:	2b00      	cmp	r3, #0
    99ac:	d100      	bne.n	99b0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    99ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    99b0:	bf00      	nop
    99b2:	b003      	add	sp, #12
    99b4:	f85d fb04 	ldr.w	pc, [sp], #4
    99b8:	1fff8e78 	.word	0x1fff8e78
    99bc:	1fff8e74 	.word	0x1fff8e74

000099c0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01(void)
{
    99c0:	b500      	push	{lr}
    99c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    99c4:	f7f7 f912 	bl	bec <Sys_GetCoreID>
    99c8:	4603      	mov	r3, r0
    99ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId])
    99cc:	4a10      	ldr	r2, [pc, #64]	; (9a10 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
    99ce:	9b01      	ldr	r3, [sp, #4]
    99d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99d4:	2b00      	cmp	r3, #0
    99d6:	d10d      	bne.n	99f4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    99d8:	f7f7 f838 	bl	a4c <Spi_schm_read_msr>
    99dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    99de:	9b00      	ldr	r3, [sp, #0]
    99e0:	f003 0301 	and.w	r3, r3, #1
    99e4:	2b00      	cmp	r3, #0
    99e6:	d100      	bne.n	99ea <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    99e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    99ea:	490a      	ldr	r1, [pc, #40]	; (9a14 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x54>)
    99ec:	9b01      	ldr	r3, [sp, #4]
    99ee:	9a00      	ldr	r2, [sp, #0]
    99f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]++;
    99f4:	4a06      	ldr	r2, [pc, #24]	; (9a10 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
    99f6:	9b01      	ldr	r3, [sp, #4]
    99f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99fc:	1c5a      	adds	r2, r3, #1
    99fe:	4904      	ldr	r1, [pc, #16]	; (9a10 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
    9a00:	9b01      	ldr	r3, [sp, #4]
    9a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9a06:	bf00      	nop
    9a08:	b003      	add	sp, #12
    9a0a:	f85d fb04 	ldr.w	pc, [sp], #4
    9a0e:	bf00      	nop
    9a10:	1fff8e80 	.word	0x1fff8e80
    9a14:	1fff8e7c 	.word	0x1fff8e7c

00009a18 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01(void)
{
    9a18:	b500      	push	{lr}
    9a1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a1c:	f7f7 f8e6 	bl	bec <Sys_GetCoreID>
    9a20:	4603      	mov	r3, r0
    9a22:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]--;
    9a24:	4a0d      	ldr	r2, [pc, #52]	; (9a5c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
    9a26:	9b01      	ldr	r3, [sp, #4]
    9a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a2c:	1e5a      	subs	r2, r3, #1
    9a2e:	490b      	ldr	r1, [pc, #44]	; (9a5c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
    9a30:	9b01      	ldr	r3, [sp, #4]
    9a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    9a36:	4a0a      	ldr	r2, [pc, #40]	; (9a60 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x48>)
    9a38:	9b01      	ldr	r3, [sp, #4]
    9a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a3e:	f003 0301 	and.w	r3, r3, #1
    9a42:	2b00      	cmp	r3, #0
    9a44:	d106      	bne.n	9a54 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x3c>
    9a46:	4a05      	ldr	r2, [pc, #20]	; (9a5c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
    9a48:	9b01      	ldr	r3, [sp, #4]
    9a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a4e:	2b00      	cmp	r3, #0
    9a50:	d100      	bne.n	9a54 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9a52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9a54:	bf00      	nop
    9a56:	b003      	add	sp, #12
    9a58:	f85d fb04 	ldr.w	pc, [sp], #4
    9a5c:	1fff8e80 	.word	0x1fff8e80
    9a60:	1fff8e7c 	.word	0x1fff8e7c

00009a64 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02(void)
{
    9a64:	b500      	push	{lr}
    9a66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a68:	f7f7 f8c0 	bl	bec <Sys_GetCoreID>
    9a6c:	4603      	mov	r3, r0
    9a6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId])
    9a70:	4a10      	ldr	r2, [pc, #64]	; (9ab4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
    9a72:	9b01      	ldr	r3, [sp, #4]
    9a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a78:	2b00      	cmp	r3, #0
    9a7a:	d10d      	bne.n	9a98 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9a7c:	f7f6 ffe6 	bl	a4c <Spi_schm_read_msr>
    9a80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9a82:	9b00      	ldr	r3, [sp, #0]
    9a84:	f003 0301 	and.w	r3, r3, #1
    9a88:	2b00      	cmp	r3, #0
    9a8a:	d100      	bne.n	9a8e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9a8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    9a8e:	490a      	ldr	r1, [pc, #40]	; (9ab8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x54>)
    9a90:	9b01      	ldr	r3, [sp, #4]
    9a92:	9a00      	ldr	r2, [sp, #0]
    9a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]++;
    9a98:	4a06      	ldr	r2, [pc, #24]	; (9ab4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
    9a9a:	9b01      	ldr	r3, [sp, #4]
    9a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aa0:	1c5a      	adds	r2, r3, #1
    9aa2:	4904      	ldr	r1, [pc, #16]	; (9ab4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
    9aa4:	9b01      	ldr	r3, [sp, #4]
    9aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9aaa:	bf00      	nop
    9aac:	b003      	add	sp, #12
    9aae:	f85d fb04 	ldr.w	pc, [sp], #4
    9ab2:	bf00      	nop
    9ab4:	1fff8e88 	.word	0x1fff8e88
    9ab8:	1fff8e84 	.word	0x1fff8e84

00009abc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02(void)
{
    9abc:	b500      	push	{lr}
    9abe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9ac0:	f7f7 f894 	bl	bec <Sys_GetCoreID>
    9ac4:	4603      	mov	r3, r0
    9ac6:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]--;
    9ac8:	4a0d      	ldr	r2, [pc, #52]	; (9b00 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
    9aca:	9b01      	ldr	r3, [sp, #4]
    9acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ad0:	1e5a      	subs	r2, r3, #1
    9ad2:	490b      	ldr	r1, [pc, #44]	; (9b00 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
    9ad4:	9b01      	ldr	r3, [sp, #4]
    9ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    9ada:	4a0a      	ldr	r2, [pc, #40]	; (9b04 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x48>)
    9adc:	9b01      	ldr	r3, [sp, #4]
    9ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ae2:	f003 0301 	and.w	r3, r3, #1
    9ae6:	2b00      	cmp	r3, #0
    9ae8:	d106      	bne.n	9af8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x3c>
    9aea:	4a05      	ldr	r2, [pc, #20]	; (9b00 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
    9aec:	9b01      	ldr	r3, [sp, #4]
    9aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9af2:	2b00      	cmp	r3, #0
    9af4:	d100      	bne.n	9af8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9af6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9af8:	bf00      	nop
    9afa:	b003      	add	sp, #12
    9afc:	f85d fb04 	ldr.w	pc, [sp], #4
    9b00:	1fff8e88 	.word	0x1fff8e88
    9b04:	1fff8e84 	.word	0x1fff8e84

00009b08 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03(void)
{
    9b08:	b500      	push	{lr}
    9b0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b0c:	f7f7 f86e 	bl	bec <Sys_GetCoreID>
    9b10:	4603      	mov	r3, r0
    9b12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId])
    9b14:	4a10      	ldr	r2, [pc, #64]	; (9b58 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
    9b16:	9b01      	ldr	r3, [sp, #4]
    9b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b1c:	2b00      	cmp	r3, #0
    9b1e:	d10d      	bne.n	9b3c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9b20:	f7f6 ff94 	bl	a4c <Spi_schm_read_msr>
    9b24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9b26:	9b00      	ldr	r3, [sp, #0]
    9b28:	f003 0301 	and.w	r3, r3, #1
    9b2c:	2b00      	cmp	r3, #0
    9b2e:	d100      	bne.n	9b32 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9b30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    9b32:	490a      	ldr	r1, [pc, #40]	; (9b5c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x54>)
    9b34:	9b01      	ldr	r3, [sp, #4]
    9b36:	9a00      	ldr	r2, [sp, #0]
    9b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]++;
    9b3c:	4a06      	ldr	r2, [pc, #24]	; (9b58 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
    9b3e:	9b01      	ldr	r3, [sp, #4]
    9b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b44:	1c5a      	adds	r2, r3, #1
    9b46:	4904      	ldr	r1, [pc, #16]	; (9b58 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
    9b48:	9b01      	ldr	r3, [sp, #4]
    9b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9b4e:	bf00      	nop
    9b50:	b003      	add	sp, #12
    9b52:	f85d fb04 	ldr.w	pc, [sp], #4
    9b56:	bf00      	nop
    9b58:	1fff8e90 	.word	0x1fff8e90
    9b5c:	1fff8e8c 	.word	0x1fff8e8c

00009b60 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03(void)
{
    9b60:	b500      	push	{lr}
    9b62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b64:	f7f7 f842 	bl	bec <Sys_GetCoreID>
    9b68:	4603      	mov	r3, r0
    9b6a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]--;
    9b6c:	4a0d      	ldr	r2, [pc, #52]	; (9ba4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
    9b6e:	9b01      	ldr	r3, [sp, #4]
    9b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b74:	1e5a      	subs	r2, r3, #1
    9b76:	490b      	ldr	r1, [pc, #44]	; (9ba4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
    9b78:	9b01      	ldr	r3, [sp, #4]
    9b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    9b7e:	4a0a      	ldr	r2, [pc, #40]	; (9ba8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x48>)
    9b80:	9b01      	ldr	r3, [sp, #4]
    9b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b86:	f003 0301 	and.w	r3, r3, #1
    9b8a:	2b00      	cmp	r3, #0
    9b8c:	d106      	bne.n	9b9c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x3c>
    9b8e:	4a05      	ldr	r2, [pc, #20]	; (9ba4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
    9b90:	9b01      	ldr	r3, [sp, #4]
    9b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b96:	2b00      	cmp	r3, #0
    9b98:	d100      	bne.n	9b9c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9b9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9b9c:	bf00      	nop
    9b9e:	b003      	add	sp, #12
    9ba0:	f85d fb04 	ldr.w	pc, [sp], #4
    9ba4:	1fff8e90 	.word	0x1fff8e90
    9ba8:	1fff8e8c 	.word	0x1fff8e8c

00009bac <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04(void)
{
    9bac:	b500      	push	{lr}
    9bae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9bb0:	f7f7 f81c 	bl	bec <Sys_GetCoreID>
    9bb4:	4603      	mov	r3, r0
    9bb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId])
    9bb8:	4a10      	ldr	r2, [pc, #64]	; (9bfc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
    9bba:	9b01      	ldr	r3, [sp, #4]
    9bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bc0:	2b00      	cmp	r3, #0
    9bc2:	d10d      	bne.n	9be0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9bc4:	f7f6 ff42 	bl	a4c <Spi_schm_read_msr>
    9bc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9bca:	9b00      	ldr	r3, [sp, #0]
    9bcc:	f003 0301 	and.w	r3, r3, #1
    9bd0:	2b00      	cmp	r3, #0
    9bd2:	d100      	bne.n	9bd6 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9bd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    9bd6:	490a      	ldr	r1, [pc, #40]	; (9c00 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x54>)
    9bd8:	9b01      	ldr	r3, [sp, #4]
    9bda:	9a00      	ldr	r2, [sp, #0]
    9bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]++;
    9be0:	4a06      	ldr	r2, [pc, #24]	; (9bfc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
    9be2:	9b01      	ldr	r3, [sp, #4]
    9be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9be8:	1c5a      	adds	r2, r3, #1
    9bea:	4904      	ldr	r1, [pc, #16]	; (9bfc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
    9bec:	9b01      	ldr	r3, [sp, #4]
    9bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9bf2:	bf00      	nop
    9bf4:	b003      	add	sp, #12
    9bf6:	f85d fb04 	ldr.w	pc, [sp], #4
    9bfa:	bf00      	nop
    9bfc:	1fff8e98 	.word	0x1fff8e98
    9c00:	1fff8e94 	.word	0x1fff8e94

00009c04 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04(void)
{
    9c04:	b500      	push	{lr}
    9c06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c08:	f7f6 fff0 	bl	bec <Sys_GetCoreID>
    9c0c:	4603      	mov	r3, r0
    9c0e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]--;
    9c10:	4a0d      	ldr	r2, [pc, #52]	; (9c48 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
    9c12:	9b01      	ldr	r3, [sp, #4]
    9c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c18:	1e5a      	subs	r2, r3, #1
    9c1a:	490b      	ldr	r1, [pc, #44]	; (9c48 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
    9c1c:	9b01      	ldr	r3, [sp, #4]
    9c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    9c22:	4a0a      	ldr	r2, [pc, #40]	; (9c4c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x48>)
    9c24:	9b01      	ldr	r3, [sp, #4]
    9c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c2a:	f003 0301 	and.w	r3, r3, #1
    9c2e:	2b00      	cmp	r3, #0
    9c30:	d106      	bne.n	9c40 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x3c>
    9c32:	4a05      	ldr	r2, [pc, #20]	; (9c48 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
    9c34:	9b01      	ldr	r3, [sp, #4]
    9c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c3a:	2b00      	cmp	r3, #0
    9c3c:	d100      	bne.n	9c40 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9c3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9c40:	bf00      	nop
    9c42:	b003      	add	sp, #12
    9c44:	f85d fb04 	ldr.w	pc, [sp], #4
    9c48:	1fff8e98 	.word	0x1fff8e98
    9c4c:	1fff8e94 	.word	0x1fff8e94

00009c50 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05(void)
{
    9c50:	b500      	push	{lr}
    9c52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c54:	f7f6 ffca 	bl	bec <Sys_GetCoreID>
    9c58:	4603      	mov	r3, r0
    9c5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId])
    9c5c:	4a10      	ldr	r2, [pc, #64]	; (9ca0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
    9c5e:	9b01      	ldr	r3, [sp, #4]
    9c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c64:	2b00      	cmp	r3, #0
    9c66:	d10d      	bne.n	9c84 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9c68:	f7f6 fef0 	bl	a4c <Spi_schm_read_msr>
    9c6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9c6e:	9b00      	ldr	r3, [sp, #0]
    9c70:	f003 0301 	and.w	r3, r3, #1
    9c74:	2b00      	cmp	r3, #0
    9c76:	d100      	bne.n	9c7a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9c78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    9c7a:	490a      	ldr	r1, [pc, #40]	; (9ca4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x54>)
    9c7c:	9b01      	ldr	r3, [sp, #4]
    9c7e:	9a00      	ldr	r2, [sp, #0]
    9c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]++;
    9c84:	4a06      	ldr	r2, [pc, #24]	; (9ca0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
    9c86:	9b01      	ldr	r3, [sp, #4]
    9c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c8c:	1c5a      	adds	r2, r3, #1
    9c8e:	4904      	ldr	r1, [pc, #16]	; (9ca0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
    9c90:	9b01      	ldr	r3, [sp, #4]
    9c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9c96:	bf00      	nop
    9c98:	b003      	add	sp, #12
    9c9a:	f85d fb04 	ldr.w	pc, [sp], #4
    9c9e:	bf00      	nop
    9ca0:	1fff8ea0 	.word	0x1fff8ea0
    9ca4:	1fff8e9c 	.word	0x1fff8e9c

00009ca8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05(void)
{
    9ca8:	b500      	push	{lr}
    9caa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9cac:	f7f6 ff9e 	bl	bec <Sys_GetCoreID>
    9cb0:	4603      	mov	r3, r0
    9cb2:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]--;
    9cb4:	4a0d      	ldr	r2, [pc, #52]	; (9cec <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
    9cb6:	9b01      	ldr	r3, [sp, #4]
    9cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cbc:	1e5a      	subs	r2, r3, #1
    9cbe:	490b      	ldr	r1, [pc, #44]	; (9cec <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
    9cc0:	9b01      	ldr	r3, [sp, #4]
    9cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    9cc6:	4a0a      	ldr	r2, [pc, #40]	; (9cf0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x48>)
    9cc8:	9b01      	ldr	r3, [sp, #4]
    9cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cce:	f003 0301 	and.w	r3, r3, #1
    9cd2:	2b00      	cmp	r3, #0
    9cd4:	d106      	bne.n	9ce4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x3c>
    9cd6:	4a05      	ldr	r2, [pc, #20]	; (9cec <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
    9cd8:	9b01      	ldr	r3, [sp, #4]
    9cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cde:	2b00      	cmp	r3, #0
    9ce0:	d100      	bne.n	9ce4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9ce2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9ce4:	bf00      	nop
    9ce6:	b003      	add	sp, #12
    9ce8:	f85d fb04 	ldr.w	pc, [sp], #4
    9cec:	1fff8ea0 	.word	0x1fff8ea0
    9cf0:	1fff8e9c 	.word	0x1fff8e9c

00009cf4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06(void)
{
    9cf4:	b500      	push	{lr}
    9cf6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9cf8:	f7f6 ff78 	bl	bec <Sys_GetCoreID>
    9cfc:	4603      	mov	r3, r0
    9cfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId])
    9d00:	4a10      	ldr	r2, [pc, #64]	; (9d44 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
    9d02:	9b01      	ldr	r3, [sp, #4]
    9d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d08:	2b00      	cmp	r3, #0
    9d0a:	d10d      	bne.n	9d28 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9d0c:	f7f6 fe9e 	bl	a4c <Spi_schm_read_msr>
    9d10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9d12:	9b00      	ldr	r3, [sp, #0]
    9d14:	f003 0301 	and.w	r3, r3, #1
    9d18:	2b00      	cmp	r3, #0
    9d1a:	d100      	bne.n	9d1e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9d1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    9d1e:	490a      	ldr	r1, [pc, #40]	; (9d48 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x54>)
    9d20:	9b01      	ldr	r3, [sp, #4]
    9d22:	9a00      	ldr	r2, [sp, #0]
    9d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]++;
    9d28:	4a06      	ldr	r2, [pc, #24]	; (9d44 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
    9d2a:	9b01      	ldr	r3, [sp, #4]
    9d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d30:	1c5a      	adds	r2, r3, #1
    9d32:	4904      	ldr	r1, [pc, #16]	; (9d44 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
    9d34:	9b01      	ldr	r3, [sp, #4]
    9d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9d3a:	bf00      	nop
    9d3c:	b003      	add	sp, #12
    9d3e:	f85d fb04 	ldr.w	pc, [sp], #4
    9d42:	bf00      	nop
    9d44:	1fff8ea8 	.word	0x1fff8ea8
    9d48:	1fff8ea4 	.word	0x1fff8ea4

00009d4c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06(void)
{
    9d4c:	b500      	push	{lr}
    9d4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d50:	f7f6 ff4c 	bl	bec <Sys_GetCoreID>
    9d54:	4603      	mov	r3, r0
    9d56:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]--;
    9d58:	4a0d      	ldr	r2, [pc, #52]	; (9d90 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
    9d5a:	9b01      	ldr	r3, [sp, #4]
    9d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d60:	1e5a      	subs	r2, r3, #1
    9d62:	490b      	ldr	r1, [pc, #44]	; (9d90 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
    9d64:	9b01      	ldr	r3, [sp, #4]
    9d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    9d6a:	4a0a      	ldr	r2, [pc, #40]	; (9d94 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x48>)
    9d6c:	9b01      	ldr	r3, [sp, #4]
    9d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d72:	f003 0301 	and.w	r3, r3, #1
    9d76:	2b00      	cmp	r3, #0
    9d78:	d106      	bne.n	9d88 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x3c>
    9d7a:	4a05      	ldr	r2, [pc, #20]	; (9d90 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
    9d7c:	9b01      	ldr	r3, [sp, #4]
    9d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d82:	2b00      	cmp	r3, #0
    9d84:	d100      	bne.n	9d88 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9d86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9d88:	bf00      	nop
    9d8a:	b003      	add	sp, #12
    9d8c:	f85d fb04 	ldr.w	pc, [sp], #4
    9d90:	1fff8ea8 	.word	0x1fff8ea8
    9d94:	1fff8ea4 	.word	0x1fff8ea4

00009d98 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07(void)
{
    9d98:	b500      	push	{lr}
    9d9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d9c:	f7f6 ff26 	bl	bec <Sys_GetCoreID>
    9da0:	4603      	mov	r3, r0
    9da2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId])
    9da4:	4a10      	ldr	r2, [pc, #64]	; (9de8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
    9da6:	9b01      	ldr	r3, [sp, #4]
    9da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dac:	2b00      	cmp	r3, #0
    9dae:	d10d      	bne.n	9dcc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9db0:	f7f6 fe4c 	bl	a4c <Spi_schm_read_msr>
    9db4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9db6:	9b00      	ldr	r3, [sp, #0]
    9db8:	f003 0301 	and.w	r3, r3, #1
    9dbc:	2b00      	cmp	r3, #0
    9dbe:	d100      	bne.n	9dc2 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9dc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    9dc2:	490a      	ldr	r1, [pc, #40]	; (9dec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x54>)
    9dc4:	9b01      	ldr	r3, [sp, #4]
    9dc6:	9a00      	ldr	r2, [sp, #0]
    9dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]++;
    9dcc:	4a06      	ldr	r2, [pc, #24]	; (9de8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
    9dce:	9b01      	ldr	r3, [sp, #4]
    9dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dd4:	1c5a      	adds	r2, r3, #1
    9dd6:	4904      	ldr	r1, [pc, #16]	; (9de8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
    9dd8:	9b01      	ldr	r3, [sp, #4]
    9dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9dde:	bf00      	nop
    9de0:	b003      	add	sp, #12
    9de2:	f85d fb04 	ldr.w	pc, [sp], #4
    9de6:	bf00      	nop
    9de8:	1fff8eb0 	.word	0x1fff8eb0
    9dec:	1fff8eac 	.word	0x1fff8eac

00009df0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07(void)
{
    9df0:	b500      	push	{lr}
    9df2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9df4:	f7f6 fefa 	bl	bec <Sys_GetCoreID>
    9df8:	4603      	mov	r3, r0
    9dfa:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]--;
    9dfc:	4a0d      	ldr	r2, [pc, #52]	; (9e34 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
    9dfe:	9b01      	ldr	r3, [sp, #4]
    9e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e04:	1e5a      	subs	r2, r3, #1
    9e06:	490b      	ldr	r1, [pc, #44]	; (9e34 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
    9e08:	9b01      	ldr	r3, [sp, #4]
    9e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    9e0e:	4a0a      	ldr	r2, [pc, #40]	; (9e38 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x48>)
    9e10:	9b01      	ldr	r3, [sp, #4]
    9e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e16:	f003 0301 	and.w	r3, r3, #1
    9e1a:	2b00      	cmp	r3, #0
    9e1c:	d106      	bne.n	9e2c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x3c>
    9e1e:	4a05      	ldr	r2, [pc, #20]	; (9e34 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
    9e20:	9b01      	ldr	r3, [sp, #4]
    9e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e26:	2b00      	cmp	r3, #0
    9e28:	d100      	bne.n	9e2c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9e2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9e2c:	bf00      	nop
    9e2e:	b003      	add	sp, #12
    9e30:	f85d fb04 	ldr.w	pc, [sp], #4
    9e34:	1fff8eb0 	.word	0x1fff8eb0
    9e38:	1fff8eac 	.word	0x1fff8eac

00009e3c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08(void)
{
    9e3c:	b500      	push	{lr}
    9e3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e40:	f7f6 fed4 	bl	bec <Sys_GetCoreID>
    9e44:	4603      	mov	r3, r0
    9e46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId])
    9e48:	4a10      	ldr	r2, [pc, #64]	; (9e8c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
    9e4a:	9b01      	ldr	r3, [sp, #4]
    9e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e50:	2b00      	cmp	r3, #0
    9e52:	d10d      	bne.n	9e70 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9e54:	f7f6 fdfa 	bl	a4c <Spi_schm_read_msr>
    9e58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9e5a:	9b00      	ldr	r3, [sp, #0]
    9e5c:	f003 0301 	and.w	r3, r3, #1
    9e60:	2b00      	cmp	r3, #0
    9e62:	d100      	bne.n	9e66 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9e64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    9e66:	490a      	ldr	r1, [pc, #40]	; (9e90 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x54>)
    9e68:	9b01      	ldr	r3, [sp, #4]
    9e6a:	9a00      	ldr	r2, [sp, #0]
    9e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]++;
    9e70:	4a06      	ldr	r2, [pc, #24]	; (9e8c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
    9e72:	9b01      	ldr	r3, [sp, #4]
    9e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e78:	1c5a      	adds	r2, r3, #1
    9e7a:	4904      	ldr	r1, [pc, #16]	; (9e8c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
    9e7c:	9b01      	ldr	r3, [sp, #4]
    9e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9e82:	bf00      	nop
    9e84:	b003      	add	sp, #12
    9e86:	f85d fb04 	ldr.w	pc, [sp], #4
    9e8a:	bf00      	nop
    9e8c:	1fff8eb8 	.word	0x1fff8eb8
    9e90:	1fff8eb4 	.word	0x1fff8eb4

00009e94 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08(void)
{
    9e94:	b500      	push	{lr}
    9e96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e98:	f7f6 fea8 	bl	bec <Sys_GetCoreID>
    9e9c:	4603      	mov	r3, r0
    9e9e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]--;
    9ea0:	4a0d      	ldr	r2, [pc, #52]	; (9ed8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
    9ea2:	9b01      	ldr	r3, [sp, #4]
    9ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ea8:	1e5a      	subs	r2, r3, #1
    9eaa:	490b      	ldr	r1, [pc, #44]	; (9ed8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
    9eac:	9b01      	ldr	r3, [sp, #4]
    9eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    9eb2:	4a0a      	ldr	r2, [pc, #40]	; (9edc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x48>)
    9eb4:	9b01      	ldr	r3, [sp, #4]
    9eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9eba:	f003 0301 	and.w	r3, r3, #1
    9ebe:	2b00      	cmp	r3, #0
    9ec0:	d106      	bne.n	9ed0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x3c>
    9ec2:	4a05      	ldr	r2, [pc, #20]	; (9ed8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
    9ec4:	9b01      	ldr	r3, [sp, #4]
    9ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9eca:	2b00      	cmp	r3, #0
    9ecc:	d100      	bne.n	9ed0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9ece:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9ed0:	bf00      	nop
    9ed2:	b003      	add	sp, #12
    9ed4:	f85d fb04 	ldr.w	pc, [sp], #4
    9ed8:	1fff8eb8 	.word	0x1fff8eb8
    9edc:	1fff8eb4 	.word	0x1fff8eb4

00009ee0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09(void)
{
    9ee0:	b500      	push	{lr}
    9ee2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9ee4:	f7f6 fe82 	bl	bec <Sys_GetCoreID>
    9ee8:	4603      	mov	r3, r0
    9eea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId])
    9eec:	4a10      	ldr	r2, [pc, #64]	; (9f30 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
    9eee:	9b01      	ldr	r3, [sp, #4]
    9ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ef4:	2b00      	cmp	r3, #0
    9ef6:	d10d      	bne.n	9f14 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9ef8:	f7f6 fda8 	bl	a4c <Spi_schm_read_msr>
    9efc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9efe:	9b00      	ldr	r3, [sp, #0]
    9f00:	f003 0301 	and.w	r3, r3, #1
    9f04:	2b00      	cmp	r3, #0
    9f06:	d100      	bne.n	9f0a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9f08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    9f0a:	490a      	ldr	r1, [pc, #40]	; (9f34 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x54>)
    9f0c:	9b01      	ldr	r3, [sp, #4]
    9f0e:	9a00      	ldr	r2, [sp, #0]
    9f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]++;
    9f14:	4a06      	ldr	r2, [pc, #24]	; (9f30 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
    9f16:	9b01      	ldr	r3, [sp, #4]
    9f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f1c:	1c5a      	adds	r2, r3, #1
    9f1e:	4904      	ldr	r1, [pc, #16]	; (9f30 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
    9f20:	9b01      	ldr	r3, [sp, #4]
    9f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9f26:	bf00      	nop
    9f28:	b003      	add	sp, #12
    9f2a:	f85d fb04 	ldr.w	pc, [sp], #4
    9f2e:	bf00      	nop
    9f30:	1fff8ec0 	.word	0x1fff8ec0
    9f34:	1fff8ebc 	.word	0x1fff8ebc

00009f38 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09(void)
{
    9f38:	b500      	push	{lr}
    9f3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f3c:	f7f6 fe56 	bl	bec <Sys_GetCoreID>
    9f40:	4603      	mov	r3, r0
    9f42:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]--;
    9f44:	4a0d      	ldr	r2, [pc, #52]	; (9f7c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
    9f46:	9b01      	ldr	r3, [sp, #4]
    9f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f4c:	1e5a      	subs	r2, r3, #1
    9f4e:	490b      	ldr	r1, [pc, #44]	; (9f7c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
    9f50:	9b01      	ldr	r3, [sp, #4]
    9f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    9f56:	4a0a      	ldr	r2, [pc, #40]	; (9f80 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x48>)
    9f58:	9b01      	ldr	r3, [sp, #4]
    9f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f5e:	f003 0301 	and.w	r3, r3, #1
    9f62:	2b00      	cmp	r3, #0
    9f64:	d106      	bne.n	9f74 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x3c>
    9f66:	4a05      	ldr	r2, [pc, #20]	; (9f7c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
    9f68:	9b01      	ldr	r3, [sp, #4]
    9f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f6e:	2b00      	cmp	r3, #0
    9f70:	d100      	bne.n	9f74 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9f72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9f74:	bf00      	nop
    9f76:	b003      	add	sp, #12
    9f78:	f85d fb04 	ldr.w	pc, [sp], #4
    9f7c:	1fff8ec0 	.word	0x1fff8ec0
    9f80:	1fff8ebc 	.word	0x1fff8ebc

00009f84 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10(void)
{
    9f84:	b500      	push	{lr}
    9f86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f88:	f7f6 fe30 	bl	bec <Sys_GetCoreID>
    9f8c:	4603      	mov	r3, r0
    9f8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId])
    9f90:	4a10      	ldr	r2, [pc, #64]	; (9fd4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
    9f92:	9b01      	ldr	r3, [sp, #4]
    9f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f98:	2b00      	cmp	r3, #0
    9f9a:	d10d      	bne.n	9fb8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9f9c:	f7f6 fd56 	bl	a4c <Spi_schm_read_msr>
    9fa0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9fa2:	9b00      	ldr	r3, [sp, #0]
    9fa4:	f003 0301 	and.w	r3, r3, #1
    9fa8:	2b00      	cmp	r3, #0
    9faa:	d100      	bne.n	9fae <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9fac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    9fae:	490a      	ldr	r1, [pc, #40]	; (9fd8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x54>)
    9fb0:	9b01      	ldr	r3, [sp, #4]
    9fb2:	9a00      	ldr	r2, [sp, #0]
    9fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]++;
    9fb8:	4a06      	ldr	r2, [pc, #24]	; (9fd4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
    9fba:	9b01      	ldr	r3, [sp, #4]
    9fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fc0:	1c5a      	adds	r2, r3, #1
    9fc2:	4904      	ldr	r1, [pc, #16]	; (9fd4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
    9fc4:	9b01      	ldr	r3, [sp, #4]
    9fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9fca:	bf00      	nop
    9fcc:	b003      	add	sp, #12
    9fce:	f85d fb04 	ldr.w	pc, [sp], #4
    9fd2:	bf00      	nop
    9fd4:	1fff8ec8 	.word	0x1fff8ec8
    9fd8:	1fff8ec4 	.word	0x1fff8ec4

00009fdc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10(void)
{
    9fdc:	b500      	push	{lr}
    9fde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9fe0:	f7f6 fe04 	bl	bec <Sys_GetCoreID>
    9fe4:	4603      	mov	r3, r0
    9fe6:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]--;
    9fe8:	4a0d      	ldr	r2, [pc, #52]	; (a020 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
    9fea:	9b01      	ldr	r3, [sp, #4]
    9fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ff0:	1e5a      	subs	r2, r3, #1
    9ff2:	490b      	ldr	r1, [pc, #44]	; (a020 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
    9ff4:	9b01      	ldr	r3, [sp, #4]
    9ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    9ffa:	4a0a      	ldr	r2, [pc, #40]	; (a024 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x48>)
    9ffc:	9b01      	ldr	r3, [sp, #4]
    9ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a002:	f003 0301 	and.w	r3, r3, #1
    a006:	2b00      	cmp	r3, #0
    a008:	d106      	bne.n	a018 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x3c>
    a00a:	4a05      	ldr	r2, [pc, #20]	; (a020 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
    a00c:	9b01      	ldr	r3, [sp, #4]
    a00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a012:	2b00      	cmp	r3, #0
    a014:	d100      	bne.n	a018 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a016:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a018:	bf00      	nop
    a01a:	b003      	add	sp, #12
    a01c:	f85d fb04 	ldr.w	pc, [sp], #4
    a020:	1fff8ec8 	.word	0x1fff8ec8
    a024:	1fff8ec4 	.word	0x1fff8ec4

0000a028 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11(void)
{
    a028:	b500      	push	{lr}
    a02a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a02c:	f7f6 fdde 	bl	bec <Sys_GetCoreID>
    a030:	4603      	mov	r3, r0
    a032:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId])
    a034:	4a10      	ldr	r2, [pc, #64]	; (a078 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
    a036:	9b01      	ldr	r3, [sp, #4]
    a038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a03c:	2b00      	cmp	r3, #0
    a03e:	d10d      	bne.n	a05c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a040:	f7f6 fd04 	bl	a4c <Spi_schm_read_msr>
    a044:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a046:	9b00      	ldr	r3, [sp, #0]
    a048:	f003 0301 	and.w	r3, r3, #1
    a04c:	2b00      	cmp	r3, #0
    a04e:	d100      	bne.n	a052 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a050:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    a052:	490a      	ldr	r1, [pc, #40]	; (a07c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x54>)
    a054:	9b01      	ldr	r3, [sp, #4]
    a056:	9a00      	ldr	r2, [sp, #0]
    a058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]++;
    a05c:	4a06      	ldr	r2, [pc, #24]	; (a078 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
    a05e:	9b01      	ldr	r3, [sp, #4]
    a060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a064:	1c5a      	adds	r2, r3, #1
    a066:	4904      	ldr	r1, [pc, #16]	; (a078 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
    a068:	9b01      	ldr	r3, [sp, #4]
    a06a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a06e:	bf00      	nop
    a070:	b003      	add	sp, #12
    a072:	f85d fb04 	ldr.w	pc, [sp], #4
    a076:	bf00      	nop
    a078:	1fff8ed0 	.word	0x1fff8ed0
    a07c:	1fff8ecc 	.word	0x1fff8ecc

0000a080 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11(void)
{
    a080:	b500      	push	{lr}
    a082:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a084:	f7f6 fdb2 	bl	bec <Sys_GetCoreID>
    a088:	4603      	mov	r3, r0
    a08a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]--;
    a08c:	4a0d      	ldr	r2, [pc, #52]	; (a0c4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
    a08e:	9b01      	ldr	r3, [sp, #4]
    a090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a094:	1e5a      	subs	r2, r3, #1
    a096:	490b      	ldr	r1, [pc, #44]	; (a0c4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
    a098:	9b01      	ldr	r3, [sp, #4]
    a09a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    a09e:	4a0a      	ldr	r2, [pc, #40]	; (a0c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x48>)
    a0a0:	9b01      	ldr	r3, [sp, #4]
    a0a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0a6:	f003 0301 	and.w	r3, r3, #1
    a0aa:	2b00      	cmp	r3, #0
    a0ac:	d106      	bne.n	a0bc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x3c>
    a0ae:	4a05      	ldr	r2, [pc, #20]	; (a0c4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
    a0b0:	9b01      	ldr	r3, [sp, #4]
    a0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0b6:	2b00      	cmp	r3, #0
    a0b8:	d100      	bne.n	a0bc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a0ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a0bc:	bf00      	nop
    a0be:	b003      	add	sp, #12
    a0c0:	f85d fb04 	ldr.w	pc, [sp], #4
    a0c4:	1fff8ed0 	.word	0x1fff8ed0
    a0c8:	1fff8ecc 	.word	0x1fff8ecc

0000a0cc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12(void)
{
    a0cc:	b500      	push	{lr}
    a0ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a0d0:	f7f6 fd8c 	bl	bec <Sys_GetCoreID>
    a0d4:	4603      	mov	r3, r0
    a0d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId])
    a0d8:	4a10      	ldr	r2, [pc, #64]	; (a11c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
    a0da:	9b01      	ldr	r3, [sp, #4]
    a0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0e0:	2b00      	cmp	r3, #0
    a0e2:	d10d      	bne.n	a100 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a0e4:	f7f6 fcb2 	bl	a4c <Spi_schm_read_msr>
    a0e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a0ea:	9b00      	ldr	r3, [sp, #0]
    a0ec:	f003 0301 	and.w	r3, r3, #1
    a0f0:	2b00      	cmp	r3, #0
    a0f2:	d100      	bne.n	a0f6 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a0f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    a0f6:	490a      	ldr	r1, [pc, #40]	; (a120 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x54>)
    a0f8:	9b01      	ldr	r3, [sp, #4]
    a0fa:	9a00      	ldr	r2, [sp, #0]
    a0fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]++;
    a100:	4a06      	ldr	r2, [pc, #24]	; (a11c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
    a102:	9b01      	ldr	r3, [sp, #4]
    a104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a108:	1c5a      	adds	r2, r3, #1
    a10a:	4904      	ldr	r1, [pc, #16]	; (a11c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
    a10c:	9b01      	ldr	r3, [sp, #4]
    a10e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a112:	bf00      	nop
    a114:	b003      	add	sp, #12
    a116:	f85d fb04 	ldr.w	pc, [sp], #4
    a11a:	bf00      	nop
    a11c:	1fff8ed8 	.word	0x1fff8ed8
    a120:	1fff8ed4 	.word	0x1fff8ed4

0000a124 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12(void)
{
    a124:	b500      	push	{lr}
    a126:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a128:	f7f6 fd60 	bl	bec <Sys_GetCoreID>
    a12c:	4603      	mov	r3, r0
    a12e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]--;
    a130:	4a0d      	ldr	r2, [pc, #52]	; (a168 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
    a132:	9b01      	ldr	r3, [sp, #4]
    a134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a138:	1e5a      	subs	r2, r3, #1
    a13a:	490b      	ldr	r1, [pc, #44]	; (a168 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
    a13c:	9b01      	ldr	r3, [sp, #4]
    a13e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    a142:	4a0a      	ldr	r2, [pc, #40]	; (a16c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x48>)
    a144:	9b01      	ldr	r3, [sp, #4]
    a146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a14a:	f003 0301 	and.w	r3, r3, #1
    a14e:	2b00      	cmp	r3, #0
    a150:	d106      	bne.n	a160 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x3c>
    a152:	4a05      	ldr	r2, [pc, #20]	; (a168 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
    a154:	9b01      	ldr	r3, [sp, #4]
    a156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a15a:	2b00      	cmp	r3, #0
    a15c:	d100      	bne.n	a160 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a15e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a160:	bf00      	nop
    a162:	b003      	add	sp, #12
    a164:	f85d fb04 	ldr.w	pc, [sp], #4
    a168:	1fff8ed8 	.word	0x1fff8ed8
    a16c:	1fff8ed4 	.word	0x1fff8ed4

0000a170 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13(void)
{
    a170:	b500      	push	{lr}
    a172:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a174:	f7f6 fd3a 	bl	bec <Sys_GetCoreID>
    a178:	4603      	mov	r3, r0
    a17a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId])
    a17c:	4a10      	ldr	r2, [pc, #64]	; (a1c0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
    a17e:	9b01      	ldr	r3, [sp, #4]
    a180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a184:	2b00      	cmp	r3, #0
    a186:	d10d      	bne.n	a1a4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a188:	f7f6 fc60 	bl	a4c <Spi_schm_read_msr>
    a18c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a18e:	9b00      	ldr	r3, [sp, #0]
    a190:	f003 0301 	and.w	r3, r3, #1
    a194:	2b00      	cmp	r3, #0
    a196:	d100      	bne.n	a19a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a198:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    a19a:	490a      	ldr	r1, [pc, #40]	; (a1c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x54>)
    a19c:	9b01      	ldr	r3, [sp, #4]
    a19e:	9a00      	ldr	r2, [sp, #0]
    a1a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]++;
    a1a4:	4a06      	ldr	r2, [pc, #24]	; (a1c0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
    a1a6:	9b01      	ldr	r3, [sp, #4]
    a1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1ac:	1c5a      	adds	r2, r3, #1
    a1ae:	4904      	ldr	r1, [pc, #16]	; (a1c0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
    a1b0:	9b01      	ldr	r3, [sp, #4]
    a1b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a1b6:	bf00      	nop
    a1b8:	b003      	add	sp, #12
    a1ba:	f85d fb04 	ldr.w	pc, [sp], #4
    a1be:	bf00      	nop
    a1c0:	1fff8ee0 	.word	0x1fff8ee0
    a1c4:	1fff8edc 	.word	0x1fff8edc

0000a1c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13(void)
{
    a1c8:	b500      	push	{lr}
    a1ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a1cc:	f7f6 fd0e 	bl	bec <Sys_GetCoreID>
    a1d0:	4603      	mov	r3, r0
    a1d2:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]--;
    a1d4:	4a0d      	ldr	r2, [pc, #52]	; (a20c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
    a1d6:	9b01      	ldr	r3, [sp, #4]
    a1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1dc:	1e5a      	subs	r2, r3, #1
    a1de:	490b      	ldr	r1, [pc, #44]	; (a20c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
    a1e0:	9b01      	ldr	r3, [sp, #4]
    a1e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    a1e6:	4a0a      	ldr	r2, [pc, #40]	; (a210 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x48>)
    a1e8:	9b01      	ldr	r3, [sp, #4]
    a1ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1ee:	f003 0301 	and.w	r3, r3, #1
    a1f2:	2b00      	cmp	r3, #0
    a1f4:	d106      	bne.n	a204 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x3c>
    a1f6:	4a05      	ldr	r2, [pc, #20]	; (a20c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
    a1f8:	9b01      	ldr	r3, [sp, #4]
    a1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1fe:	2b00      	cmp	r3, #0
    a200:	d100      	bne.n	a204 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a202:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a204:	bf00      	nop
    a206:	b003      	add	sp, #12
    a208:	f85d fb04 	ldr.w	pc, [sp], #4
    a20c:	1fff8ee0 	.word	0x1fff8ee0
    a210:	1fff8edc 	.word	0x1fff8edc

0000a214 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14(void)
{
    a214:	b500      	push	{lr}
    a216:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a218:	f7f6 fce8 	bl	bec <Sys_GetCoreID>
    a21c:	4603      	mov	r3, r0
    a21e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId])
    a220:	4a10      	ldr	r2, [pc, #64]	; (a264 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
    a222:	9b01      	ldr	r3, [sp, #4]
    a224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a228:	2b00      	cmp	r3, #0
    a22a:	d10d      	bne.n	a248 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a22c:	f7f6 fc0e 	bl	a4c <Spi_schm_read_msr>
    a230:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a232:	9b00      	ldr	r3, [sp, #0]
    a234:	f003 0301 	and.w	r3, r3, #1
    a238:	2b00      	cmp	r3, #0
    a23a:	d100      	bne.n	a23e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a23c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    a23e:	490a      	ldr	r1, [pc, #40]	; (a268 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x54>)
    a240:	9b01      	ldr	r3, [sp, #4]
    a242:	9a00      	ldr	r2, [sp, #0]
    a244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]++;
    a248:	4a06      	ldr	r2, [pc, #24]	; (a264 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
    a24a:	9b01      	ldr	r3, [sp, #4]
    a24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a250:	1c5a      	adds	r2, r3, #1
    a252:	4904      	ldr	r1, [pc, #16]	; (a264 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
    a254:	9b01      	ldr	r3, [sp, #4]
    a256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a25a:	bf00      	nop
    a25c:	b003      	add	sp, #12
    a25e:	f85d fb04 	ldr.w	pc, [sp], #4
    a262:	bf00      	nop
    a264:	1fff8ee8 	.word	0x1fff8ee8
    a268:	1fff8ee4 	.word	0x1fff8ee4

0000a26c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14(void)
{
    a26c:	b500      	push	{lr}
    a26e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a270:	f7f6 fcbc 	bl	bec <Sys_GetCoreID>
    a274:	4603      	mov	r3, r0
    a276:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]--;
    a278:	4a0d      	ldr	r2, [pc, #52]	; (a2b0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
    a27a:	9b01      	ldr	r3, [sp, #4]
    a27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a280:	1e5a      	subs	r2, r3, #1
    a282:	490b      	ldr	r1, [pc, #44]	; (a2b0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
    a284:	9b01      	ldr	r3, [sp, #4]
    a286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    a28a:	4a0a      	ldr	r2, [pc, #40]	; (a2b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x48>)
    a28c:	9b01      	ldr	r3, [sp, #4]
    a28e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a292:	f003 0301 	and.w	r3, r3, #1
    a296:	2b00      	cmp	r3, #0
    a298:	d106      	bne.n	a2a8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x3c>
    a29a:	4a05      	ldr	r2, [pc, #20]	; (a2b0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
    a29c:	9b01      	ldr	r3, [sp, #4]
    a29e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2a2:	2b00      	cmp	r3, #0
    a2a4:	d100      	bne.n	a2a8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a2a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a2a8:	bf00      	nop
    a2aa:	b003      	add	sp, #12
    a2ac:	f85d fb04 	ldr.w	pc, [sp], #4
    a2b0:	1fff8ee8 	.word	0x1fff8ee8
    a2b4:	1fff8ee4 	.word	0x1fff8ee4

0000a2b8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15(void)
{
    a2b8:	b500      	push	{lr}
    a2ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a2bc:	f7f6 fc96 	bl	bec <Sys_GetCoreID>
    a2c0:	4603      	mov	r3, r0
    a2c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId])
    a2c4:	4a10      	ldr	r2, [pc, #64]	; (a308 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
    a2c6:	9b01      	ldr	r3, [sp, #4]
    a2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2cc:	2b00      	cmp	r3, #0
    a2ce:	d10d      	bne.n	a2ec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a2d0:	f7f6 fbbc 	bl	a4c <Spi_schm_read_msr>
    a2d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a2d6:	9b00      	ldr	r3, [sp, #0]
    a2d8:	f003 0301 	and.w	r3, r3, #1
    a2dc:	2b00      	cmp	r3, #0
    a2de:	d100      	bne.n	a2e2 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a2e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    a2e2:	490a      	ldr	r1, [pc, #40]	; (a30c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x54>)
    a2e4:	9b01      	ldr	r3, [sp, #4]
    a2e6:	9a00      	ldr	r2, [sp, #0]
    a2e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]++;
    a2ec:	4a06      	ldr	r2, [pc, #24]	; (a308 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
    a2ee:	9b01      	ldr	r3, [sp, #4]
    a2f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2f4:	1c5a      	adds	r2, r3, #1
    a2f6:	4904      	ldr	r1, [pc, #16]	; (a308 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
    a2f8:	9b01      	ldr	r3, [sp, #4]
    a2fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a2fe:	bf00      	nop
    a300:	b003      	add	sp, #12
    a302:	f85d fb04 	ldr.w	pc, [sp], #4
    a306:	bf00      	nop
    a308:	1fff8ef0 	.word	0x1fff8ef0
    a30c:	1fff8eec 	.word	0x1fff8eec

0000a310 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15(void)
{
    a310:	b500      	push	{lr}
    a312:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a314:	f7f6 fc6a 	bl	bec <Sys_GetCoreID>
    a318:	4603      	mov	r3, r0
    a31a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]--;
    a31c:	4a0d      	ldr	r2, [pc, #52]	; (a354 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
    a31e:	9b01      	ldr	r3, [sp, #4]
    a320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a324:	1e5a      	subs	r2, r3, #1
    a326:	490b      	ldr	r1, [pc, #44]	; (a354 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
    a328:	9b01      	ldr	r3, [sp, #4]
    a32a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    a32e:	4a0a      	ldr	r2, [pc, #40]	; (a358 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x48>)
    a330:	9b01      	ldr	r3, [sp, #4]
    a332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a336:	f003 0301 	and.w	r3, r3, #1
    a33a:	2b00      	cmp	r3, #0
    a33c:	d106      	bne.n	a34c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x3c>
    a33e:	4a05      	ldr	r2, [pc, #20]	; (a354 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
    a340:	9b01      	ldr	r3, [sp, #4]
    a342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a346:	2b00      	cmp	r3, #0
    a348:	d100      	bne.n	a34c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a34a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a34c:	bf00      	nop
    a34e:	b003      	add	sp, #12
    a350:	f85d fb04 	ldr.w	pc, [sp], #4
    a354:	1fff8ef0 	.word	0x1fff8ef0
    a358:	1fff8eec 	.word	0x1fff8eec

0000a35c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16(void)
{
    a35c:	b500      	push	{lr}
    a35e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a360:	f7f6 fc44 	bl	bec <Sys_GetCoreID>
    a364:	4603      	mov	r3, r0
    a366:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId])
    a368:	4a10      	ldr	r2, [pc, #64]	; (a3ac <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
    a36a:	9b01      	ldr	r3, [sp, #4]
    a36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a370:	2b00      	cmp	r3, #0
    a372:	d10d      	bne.n	a390 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a374:	f7f6 fb6a 	bl	a4c <Spi_schm_read_msr>
    a378:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a37a:	9b00      	ldr	r3, [sp, #0]
    a37c:	f003 0301 	and.w	r3, r3, #1
    a380:	2b00      	cmp	r3, #0
    a382:	d100      	bne.n	a386 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a384:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    a386:	490a      	ldr	r1, [pc, #40]	; (a3b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x54>)
    a388:	9b01      	ldr	r3, [sp, #4]
    a38a:	9a00      	ldr	r2, [sp, #0]
    a38c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]++;
    a390:	4a06      	ldr	r2, [pc, #24]	; (a3ac <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
    a392:	9b01      	ldr	r3, [sp, #4]
    a394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a398:	1c5a      	adds	r2, r3, #1
    a39a:	4904      	ldr	r1, [pc, #16]	; (a3ac <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
    a39c:	9b01      	ldr	r3, [sp, #4]
    a39e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a3a2:	bf00      	nop
    a3a4:	b003      	add	sp, #12
    a3a6:	f85d fb04 	ldr.w	pc, [sp], #4
    a3aa:	bf00      	nop
    a3ac:	1fff8ef8 	.word	0x1fff8ef8
    a3b0:	1fff8ef4 	.word	0x1fff8ef4

0000a3b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16(void)
{
    a3b4:	b500      	push	{lr}
    a3b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a3b8:	f7f6 fc18 	bl	bec <Sys_GetCoreID>
    a3bc:	4603      	mov	r3, r0
    a3be:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]--;
    a3c0:	4a0d      	ldr	r2, [pc, #52]	; (a3f8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
    a3c2:	9b01      	ldr	r3, [sp, #4]
    a3c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3c8:	1e5a      	subs	r2, r3, #1
    a3ca:	490b      	ldr	r1, [pc, #44]	; (a3f8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
    a3cc:	9b01      	ldr	r3, [sp, #4]
    a3ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    a3d2:	4a0a      	ldr	r2, [pc, #40]	; (a3fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x48>)
    a3d4:	9b01      	ldr	r3, [sp, #4]
    a3d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3da:	f003 0301 	and.w	r3, r3, #1
    a3de:	2b00      	cmp	r3, #0
    a3e0:	d106      	bne.n	a3f0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x3c>
    a3e2:	4a05      	ldr	r2, [pc, #20]	; (a3f8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
    a3e4:	9b01      	ldr	r3, [sp, #4]
    a3e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3ea:	2b00      	cmp	r3, #0
    a3ec:	d100      	bne.n	a3f0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a3ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a3f0:	bf00      	nop
    a3f2:	b003      	add	sp, #12
    a3f4:	f85d fb04 	ldr.w	pc, [sp], #4
    a3f8:	1fff8ef8 	.word	0x1fff8ef8
    a3fc:	1fff8ef4 	.word	0x1fff8ef4

0000a400 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17(void)
{
    a400:	b500      	push	{lr}
    a402:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a404:	f7f6 fbf2 	bl	bec <Sys_GetCoreID>
    a408:	4603      	mov	r3, r0
    a40a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId])
    a40c:	4a10      	ldr	r2, [pc, #64]	; (a450 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
    a40e:	9b01      	ldr	r3, [sp, #4]
    a410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a414:	2b00      	cmp	r3, #0
    a416:	d10d      	bne.n	a434 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a418:	f7f6 fb18 	bl	a4c <Spi_schm_read_msr>
    a41c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a41e:	9b00      	ldr	r3, [sp, #0]
    a420:	f003 0301 	and.w	r3, r3, #1
    a424:	2b00      	cmp	r3, #0
    a426:	d100      	bne.n	a42a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a428:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    a42a:	490a      	ldr	r1, [pc, #40]	; (a454 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x54>)
    a42c:	9b01      	ldr	r3, [sp, #4]
    a42e:	9a00      	ldr	r2, [sp, #0]
    a430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]++;
    a434:	4a06      	ldr	r2, [pc, #24]	; (a450 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
    a436:	9b01      	ldr	r3, [sp, #4]
    a438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a43c:	1c5a      	adds	r2, r3, #1
    a43e:	4904      	ldr	r1, [pc, #16]	; (a450 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
    a440:	9b01      	ldr	r3, [sp, #4]
    a442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a446:	bf00      	nop
    a448:	b003      	add	sp, #12
    a44a:	f85d fb04 	ldr.w	pc, [sp], #4
    a44e:	bf00      	nop
    a450:	1fff8f00 	.word	0x1fff8f00
    a454:	1fff8efc 	.word	0x1fff8efc

0000a458 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17(void)
{
    a458:	b500      	push	{lr}
    a45a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a45c:	f7f6 fbc6 	bl	bec <Sys_GetCoreID>
    a460:	4603      	mov	r3, r0
    a462:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]--;
    a464:	4a0d      	ldr	r2, [pc, #52]	; (a49c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
    a466:	9b01      	ldr	r3, [sp, #4]
    a468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a46c:	1e5a      	subs	r2, r3, #1
    a46e:	490b      	ldr	r1, [pc, #44]	; (a49c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
    a470:	9b01      	ldr	r3, [sp, #4]
    a472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    a476:	4a0a      	ldr	r2, [pc, #40]	; (a4a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x48>)
    a478:	9b01      	ldr	r3, [sp, #4]
    a47a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a47e:	f003 0301 	and.w	r3, r3, #1
    a482:	2b00      	cmp	r3, #0
    a484:	d106      	bne.n	a494 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x3c>
    a486:	4a05      	ldr	r2, [pc, #20]	; (a49c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
    a488:	9b01      	ldr	r3, [sp, #4]
    a48a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a48e:	2b00      	cmp	r3, #0
    a490:	d100      	bne.n	a494 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a492:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a494:	bf00      	nop
    a496:	b003      	add	sp, #12
    a498:	f85d fb04 	ldr.w	pc, [sp], #4
    a49c:	1fff8f00 	.word	0x1fff8f00
    a4a0:	1fff8efc 	.word	0x1fff8efc

0000a4a4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18(void)
{
    a4a4:	b500      	push	{lr}
    a4a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a4a8:	f7f6 fba0 	bl	bec <Sys_GetCoreID>
    a4ac:	4603      	mov	r3, r0
    a4ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId])
    a4b0:	4a10      	ldr	r2, [pc, #64]	; (a4f4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
    a4b2:	9b01      	ldr	r3, [sp, #4]
    a4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4b8:	2b00      	cmp	r3, #0
    a4ba:	d10d      	bne.n	a4d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a4bc:	f7f6 fac6 	bl	a4c <Spi_schm_read_msr>
    a4c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a4c2:	9b00      	ldr	r3, [sp, #0]
    a4c4:	f003 0301 	and.w	r3, r3, #1
    a4c8:	2b00      	cmp	r3, #0
    a4ca:	d100      	bne.n	a4ce <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a4cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    a4ce:	490a      	ldr	r1, [pc, #40]	; (a4f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x54>)
    a4d0:	9b01      	ldr	r3, [sp, #4]
    a4d2:	9a00      	ldr	r2, [sp, #0]
    a4d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]++;
    a4d8:	4a06      	ldr	r2, [pc, #24]	; (a4f4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
    a4da:	9b01      	ldr	r3, [sp, #4]
    a4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4e0:	1c5a      	adds	r2, r3, #1
    a4e2:	4904      	ldr	r1, [pc, #16]	; (a4f4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
    a4e4:	9b01      	ldr	r3, [sp, #4]
    a4e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a4ea:	bf00      	nop
    a4ec:	b003      	add	sp, #12
    a4ee:	f85d fb04 	ldr.w	pc, [sp], #4
    a4f2:	bf00      	nop
    a4f4:	1fff8f08 	.word	0x1fff8f08
    a4f8:	1fff8f04 	.word	0x1fff8f04

0000a4fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18(void)
{
    a4fc:	b500      	push	{lr}
    a4fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a500:	f7f6 fb74 	bl	bec <Sys_GetCoreID>
    a504:	4603      	mov	r3, r0
    a506:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]--;
    a508:	4a0d      	ldr	r2, [pc, #52]	; (a540 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
    a50a:	9b01      	ldr	r3, [sp, #4]
    a50c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a510:	1e5a      	subs	r2, r3, #1
    a512:	490b      	ldr	r1, [pc, #44]	; (a540 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
    a514:	9b01      	ldr	r3, [sp, #4]
    a516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    a51a:	4a0a      	ldr	r2, [pc, #40]	; (a544 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x48>)
    a51c:	9b01      	ldr	r3, [sp, #4]
    a51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a522:	f003 0301 	and.w	r3, r3, #1
    a526:	2b00      	cmp	r3, #0
    a528:	d106      	bne.n	a538 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x3c>
    a52a:	4a05      	ldr	r2, [pc, #20]	; (a540 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
    a52c:	9b01      	ldr	r3, [sp, #4]
    a52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a532:	2b00      	cmp	r3, #0
    a534:	d100      	bne.n	a538 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a536:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a538:	bf00      	nop
    a53a:	b003      	add	sp, #12
    a53c:	f85d fb04 	ldr.w	pc, [sp], #4
    a540:	1fff8f08 	.word	0x1fff8f08
    a544:	1fff8f04 	.word	0x1fff8f04

0000a548 <Fls_ACEraseRomEnd>:
    a548:	61746144 	.word	0x61746144
    a54c:	61657220 	.word	0x61657220
    a550:	72662064 	.word	0x72662064
    a554:	65206d6f 	.word	0x65206d6f
    a558:	6f727065 	.word	0x6f727065
    a55c:	2031206d 	.word	0x2031206d
    a560:	7852202d 	.word	0x7852202d
    a564:	66667542 	.word	0x66667542
    a568:	305b7265 	.word	0x305b7265
    a56c:	30203a5d 	.word	0x30203a5d
    a570:	0a782578 	.word	0x0a782578
    a574:	00000000 	.word	0x00000000
    a578:	61746144 	.word	0x61746144
    a57c:	61657220 	.word	0x61657220
    a580:	72662064 	.word	0x72662064
    a584:	65206d6f 	.word	0x65206d6f
    a588:	6f727065 	.word	0x6f727065
    a58c:	2031206d 	.word	0x2031206d
    a590:	7852202d 	.word	0x7852202d
    a594:	66667542 	.word	0x66667542
    a598:	315b7265 	.word	0x315b7265
    a59c:	30203a5d 	.word	0x30203a5d
    a5a0:	0a782578 	.word	0x0a782578
    a5a4:	00000000 	.word	0x00000000
    a5a8:	61746144 	.word	0x61746144
    a5ac:	61657220 	.word	0x61657220
    a5b0:	72662064 	.word	0x72662064
    a5b4:	65206d6f 	.word	0x65206d6f
    a5b8:	6f727065 	.word	0x6f727065
    a5bc:	2031206d 	.word	0x2031206d
    a5c0:	7852202d 	.word	0x7852202d
    a5c4:	66667542 	.word	0x66667542
    a5c8:	325b7265 	.word	0x325b7265
    a5cc:	30203a5d 	.word	0x30203a5d
    a5d0:	0a782578 	.word	0x0a782578
    a5d4:	00000000 	.word	0x00000000
    a5d8:	61746144 	.word	0x61746144
    a5dc:	61657220 	.word	0x61657220
    a5e0:	72662064 	.word	0x72662064
    a5e4:	65206d6f 	.word	0x65206d6f
    a5e8:	6f727065 	.word	0x6f727065
    a5ec:	2031206d 	.word	0x2031206d
    a5f0:	7852202d 	.word	0x7852202d
    a5f4:	66667542 	.word	0x66667542
    a5f8:	335b7265 	.word	0x335b7265
    a5fc:	30203a5d 	.word	0x30203a5d
    a600:	0a782578 	.word	0x0a782578
    a604:	00000000 	.word	0x00000000
    a608:	6d726554 	.word	0x6d726554
    a60c:	6c616e69 	.word	0x6c616e69
    a610:	00000000 	.word	0x00000000
    a614:	4c554e28 	.word	0x4c554e28
    a618:	0000294c 	.word	0x0000294c

0000a61c <Clock_Ip_au8DividerCallbackIndex>:
    a61c:	0e0d0c00 06030201 0a070409 000b0805     ................

0000a62c <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000a63c <Clock_Ip_au8XoscCallbackIndex>:
    a63c:	00000100 00000000 00000000 00000000     ................

0000a64c <Clock_Ip_au8IrcoscCallbackIndex>:
    a64c:	03020100 00000004 00000000 00000000     ................

0000a65c <Clock_Ip_au8GateCallbackIndex>:
    a65c:	06010200 01040301 00000500 00000000     ................

0000a66c <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000a67c <Clock_Ip_au8PllCallbackIndex>:
    a67c:	00000100 00000000 00000000 00000000     ................

0000a68c <Clock_Ip_au8SelectorCallbackIndex>:
    a68c:	0a090800 03020109 07060504 00000000     ................

0000a69c <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000a6ac <Clock_Ip_au8CmuCallbackIndex>:
	...

0000a6bc <Clock_Ip_au8ClockFeatures>:
	...
    a6cc:	01000000 00000000 00000000 00000002     ................
    a6dc:	00000000 00000300 00000000 00040000     ................
    a6ec:	00000000 05000000 00000000 00000000     ................
    a6fc:	00000006 00000000 00000100 00000000     ................
    a70c:	00010000 00000000 04000000 00000000     ................
    a71c:	00000000 00000005 00000001 00000401     ................
    a72c:	00000200 00050100 00030000 04020000     ................
    a73c:	04000000 02000000 00000005 00000005     ................
    a74c:	00000403 00000600 00050300 00070000     ................
    a75c:	05000000 00000000 00000000 00000006     ................
	...
    a79c:	00050000 00000000 06000000 00000100     ................
    a7ac:	00000000 00030007 00000000 00000000     ................
    a7bc:	00000000 00060000 00000000 07000000     ................
    a7cc:	00000100 00000000 00030008 00000000     ................
	...
    a7e4:	00090000 00000000 0a000000 00000100     ................
    a7f4:	00000000 0003000b 00000000 00000000     ................
    a804:	00000000 000c0000 00000000 0d000000     ................
    a814:	00000100 00000000 0003000e 00000000     ................
    a824:	00000800 00000000 00090000 00000000     ................
    a834:	0a000000 00000000 00000000 0000000b     ................
    a844:	00000000 00000b01 00000000 000b0200     ................
    a854:	00000000 0b030000 00000000 00000000     ................
	...
    a86c:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    a87c:	01000000 00000000 00000000 00000007     ................
    a88c:	00007300 00000700 00320000 00090000     .s........2.....
    a89c:	02000000 07000000 00000000 00000021     ............!...
    a8ac:	00000009 00000400 00000900 00030000     ................
    a8bc:	00070000 61000000 07000000 00000000     .......a........
    a8cc:	00000024 00000007 00002500 00000700     $........%......
    a8dc:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    a8ec:	00000000 00000020 38000004 00003800     .... ......8.8..
    a8fc:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    a90c:	04000000 00260000 00000026 66000004     ......&.&......f
    a91c:	00006600 00000400 00370037 00040000     .f......7.7.....
    a92c:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    a93c:	2e000004 00002e00 00000200 00404040     ............@@@.
    a94c:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    a95c:	0000006b 6c000004 00006c00 00000900     k......l.l......
    a96c:	00010000 00090000 00000000 07000000     ................
    a97c:	00000000 00000036 00000007 00003100     ....6........1..
    a98c:	00000700 00490000 00070000 4a000000     ......I........J
    a99c:	07000000 00000000 0000004b 00000007     ........K.......
    a9ac:	00004c00 00000700 004d0000 00070000     .L........M.....
    a9bc:	3d000000 03000000 00000000 00000000     ...=............

0000a9cc <Clock_Ip_au16SelectorEntryHardwareValue>:
    a9cc:	01010a03 01010001 04040002 02000603     ................
    a9dc:	00010810 02020100 00000000 00000007     ................
    a9ec:	00000009 00000000 00000c0e 00000000     ................
	...

0000aa24 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    aa24:	00020000 00000300 00000601 00000000     ................
	...

0000aa54 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    aa54:	00000700 00000000 02020000 01010303     ................
    aa64:	03020606 00000000 00000000 00000000     ................
	...

0000aa84 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    aa84:	00000001 00000000 02020000 01010303     ................
    aa94:	03020606 00000000 00000000 00000000     ................
	...

0000aab4 <Clock_Ip_au8DividerValueHardwareValue>:
    aab4:	00020100 00000003 00000004 00000000     ................
    aac4:	00000005 00000000 00000000 00000000     ................
    aad4:	00000006 00000000 00000000 00000000     ................
	...
    aaf4:	00000007                                ....

0000aaf8 <Clock_Ip_apxScgPeriphAsyncDivs>:
    aaf8:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

0000ab08 <Clock_Ip_aeSourceTypeClockName>:
    ab08:	00000000 00000001 00000001 00000001     ................
    ab18:	00000001 00000001 00000001 00000001     ................
    ab28:	00000002 00000003 00000001 00000001     ................
    ab38:	00000001 00000001 00000002 00000002     ................
    ab48:	00000003 00000003 00000001 00000001     ................
    ab58:	00000004 00000004 00000004 00000004     ................
	...

0000abc4 <Clock_Ip_aeHwPllName>:
    abc4:	00000009                                ....

0000abc8 <Clock_Ip_aeHwDfsName>:
    abc8:	00000057                                W...

0000abcc <Clock_Ip_axDividerCallbacks>:
    abcc:	00002c2d 00002c37 00002c51 00002c6b     -,..7,..Q,..k,..
    abdc:	00002c85 00002c9f 00002cb9 00002cd3     .,...,...,...,..
    abec:	00002ced 00002d07 00002d21 00002d3b     .,...-..!-..;-..
    abfc:	00002d55 00002d6f 00002d89              U-..o-...-..

0000ac08 <Clock_Ip_axDividerTriggerCallbacks>:
    ac08:	000030fd 000030fd                       .0...0..

0000ac10 <Clock_Ip_axExtOscCallbacks>:
    ac10:	00003109 00003109 00003109 00003113     .1...1...1...1..
    ac20:	00003109 0000311d 00003137 00003151     .1...1..71..Q1..
    ac30:	000031d5 000031e9                       .1...1..

0000ac38 <Clock_Ip_axFracDivCallbacks>:
    ac38:	000033a9 000033a9 000033b3              .3...3...3..

0000ac44 <Clock_Ip_axGateCallbacks>:
    ac44:	000033cd 000033d7 000034d7 000034f1     .3...3...4...4..
    ac54:	00003487 000034a1 00003437 00003451     .4...4..74..Q4..
    ac64:	000033e7 00003401 00003527 00003541     .3...4..'5..A5..
    ac74:	00003577 00003591                       w5...5..

0000ac7c <Clock_Ip_axIntOscCallbacks>:
    ac7c:	0000373d 0000373d 00003747 00003751     =7..=7..G7..Q7..
    ac8c:	0000376b 00003785 00003799 000037b3     k7...7...7...7..
    ac9c:	000037cd 000037e1 000037fb 00003815     .7...7...7...8..
    acac:	000038bd 000038d7 000038f1              .8...8...8..

0000acb8 <Clock_Ip_axCmuCallbacks>:
    acb8:	00003e8d 00003e97 00003ea3 00003e8d     .>...>...>...>..

0000acc8 <Clock_Ip_axPllCallbacks>:
    acc8:	00003ead 00003ead 00003eb7 00003ead     .>...>...>...>..
    acd8:	00003ec3 00003ecd 00003ee7 00003f01     .>...>...>...?..
    ace8:	00003fa5 00003f91                       .?...?..

0000acf0 <Clock_Ip_axPcfsCallbacks>:
    acf0:	00004101                                .A..

0000acf4 <Clock_Ip_axSelectorCallbacks>:
    acf4:	0000410d 0000410d 00004117 00004131     .A...A...A..1A..
    ad04:	0000410d 0000414b 00004165 0000417f     .A..KA..eA...A..
    ad14:	00004199 000041b3 000041cd 000041e7     .A...A...A...A..
    ad24:	00004201 0000421b 00004235 0000424f     .B...B..5B..OB..
    ad34:	00004269 00004283 0000429d 000042b7     iB...B...B...B..
    ad44:	000042d1 000042eb                       .B...B..

0000ad4c <ClockSource>:
    ad4c:	00000000 00000008 00000002 00000005     ................
	...
    ad64:	00000009                                ....

0000ad68 <ResetReasonArray>:
    ad68:	00000000 00000001 00000002 00000003     ................
    ad78:	00000004 00000005 00000006 00000007     ................
    ad88:	00000008 00000009 0000000a 0000000b     ................
    ad98:	0000000c 0000000d 0000000e              ............

0000ada4 <Port_au32PortCiPortBaseAddr>:
    ada4:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    adb4:	4004d000                                ...@

0000adb8 <Port_au32PortCiGpioBaseAddr>:
    adb8:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    adc8:	400ff100                                ...@

0000adcc <Lpspi_Ip_apxBases>:
    adcc:	4002c000 4002d000 4002e000              ...@...@...@

0000add8 <Mcu_aClockConfigPB>:
	...
    ade0:	1c000101 04000010 01000029 00000005     ........).......
    adf0:	00000001 00000000 00000057 00000000     ........W.......
    ae00:	00000000 00000008 007a1200 00000001     ..........z.....
    ae10:	00000001 00000000 00000057 00000000     ........W.......
    ae20:	00000057 00000000 00000000 00000000     W...............
	...
    ae40:	00000019 00000005 0000001a 00000002     ................
    ae50:	0000001b 00000005 0000002a 00000005     ........*.......
    ae60:	00000028 0000000e 00000029 00000001     (.......).......
    ae70:	00000056 0000001c 00000032 0000002a     V.......2...*...
    ae80:	0000002b 00000014 0000002c 00000014     +.......,.......
    ae90:	0000002d 00000014 0000002e 00000014     -...............
    aea0:	0000003f 00000000 00000040 00000000     ?.......@.......
    aeb0:	00000041 00000000 00000042 00000000     A.......B.......
    aec0:	00000031 00000000 00000045 0000000d     1.......E.......
    aed0:	00000046 00000000 00000047 00000000     F.......G.......
    aee0:	00000044 00000000 00000030 00000000     D.......0.......
    aef0:	0000003d 00000000 00000043 00000000     =.......C.......
    af00:	00000049 00000000 0000004a 00000000     I.......J.......
    af10:	0000004b 00000000 00000048 00000000     K.......H.......
    af20:	0000000c 00000001 00000000 0000000d     ................
    af30:	00000002 00000000 0000000e 00000001     ................
    af40:	00000000 0000000f 00000001 00000000     ................
    af50:	0000001d 00000001 00000000 0000001e     ................
    af60:	00000008 00000000 0000001f 00000001     ................
    af70:	00000000 00000021 00000001 00000000     ....!...........
    af80:	00000022 00000002 00000000 00000023     "...........#...
    af90:	00000001 00000000 00000025 00000003     ........%.......
    afa0:	00000000 00000026 00000004 00000000     ....&...........
    afb0:	00000027 00000002 00000000 00000032     '...........2...
    afc0:	00000001 00000000 00000048 00000001     ........H.......
    afd0:	00000001 00000056 00000001 00000001     ....V...........
    afe0:	00000057 00000000 00000000 00000057     W...........W...
	...
    aff8:	00000057 00000000 00000000 00000057     W...........W...
	...
    b010:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    b02c:	00000014 00007d00 00000015 00007d00     .....}.......}..
    b03c:	00000016 00007d00 00000017 00008000     .....}..........
    b04c:	00000012 00000001 00000013 00000001     ................
    b05c:	00000030 00000000 00000031 00000000     0.......1.......
    b06c:	00000032 00000000 00000033 00000000     2.......3.......
    b07c:	00000034 00000000 00000035 00000001     4.......5.......
    b08c:	00000036 00000000 00000037 00000001     6.......7.......
    b09c:	00000038 00000001 00000039 00000000     8.......9.......
    b0ac:	0000003a 00000000 0000003b 00000000     :.......;.......
    b0bc:	0000003c 00000000 0000003d 00000000     <.......=.......
    b0cc:	0000003e 00000000 0000003f 00000000     >.......?.......
    b0dc:	00000040 00000000 00000041 00000000     @.......A.......
    b0ec:	00000042 00000000 00000043 00000000     B.......C.......
    b0fc:	00000044 00000000 00000045 00000001     D.......E.......
    b10c:	00000046 00000000 00000047 00000000     F.......G.......
    b11c:	00000048 00000000 00000049 00000000     H.......I.......
    b12c:	0000004a 00000000 0000004b 00000000     J.......K.......
    b13c:	0000004c 00000001 0000004d 00000001     L.......M.......
    b14c:	0000004e 00000000 0000004f 00000000     N.......O.......
    b15c:	00000050 00000001 00000051 00000001     P.......Q.......
    b16c:	00000052 00000001 00000053 00000001     R.......S.......
    b17c:	00000054 00000001 00000055 00000000     T.......U.......
    b18c:	00000056 00000001 00000057 00000000     V.......W.......
    b19c:	00000000 00000057 00000000 00000057     ....W.......W...
	...

0000b1d0 <Lpspi_Ip_DeviceAttributes_SpiExternalDevice_0>:
    b1d0:	00000000 2f2f2e2e 00200000 1fff8b24     ......//.. .$...

0000b1e0 <Lpspi_Ip_DeviceAttributes_SpiExternalDevice_1>:
    b1e0:	00000000 2f2f2e2e 01200000 1fff8b2c     ......//.. .,...

0000b1f0 <Lpspi_Ip_PhyUnitConfig_SpiPhyUnit_0>:
	...
    b1f8:	03000001 00000000 00000000              ............

0000b204 <Mcu_Config>:
    b204:	0000005a 00000000 00000001 00000001     Z...............
    b214:	0000b460 0000add8 0000b46c              `.......l...

0000b220 <OsIf_xPredefinedConfig>:
    b220:	00000000 02dc6c00                       .....l..

0000b228 <OsIf_apxPredefinedConfig>:
    b228:	0000b220                                 ...

0000b22c <Platform_uConfiguration>:
    b22c:	0000b234                                4...

0000b230 <Platform_Config>:
    b230:	0000b22c                                ,...

0000b234 <ipwConfig>:
	...

0000b23c <g_pin_mux_InitConfigArr>:
    b23c:	4004a000 00000000 00000004 00000002     ...@............
    b24c:	00000003 00000002 00000000 00000000     ................
	...
    b264:	4004a000 00000000 00000003 00000002     ...@............
    b274:	00000003 00000001 00000000 00000000     ................
	...
    b28c:	4004a000 00000000 00000002 00000002     ...@............
    b29c:	00000003 00000001 00000000 00000000     ................
	...
    b2b4:	4004a000 00000000 00000005 00000002     ...@............
    b2c4:	00000003 00000001 00000000 00000000     ................
	...
    b2dc:	4004a000 00000000 00000000 00000002     ...@............
    b2ec:	00000003 00000001 00000000 00000000     ................
	...

0000b304 <au8Port_PartitionList>:
    b304:	00000001                                ....

0000b308 <au32Port_PinToPartitionMap>:
    b308:	00000001 00000001 00000001 00000001     ................
    b318:	00000001                                ....

0000b31c <Port_au16NoUnUsedPadsArrayDefault>:
    b31c:	00010000 00030002 00070006 00090008     ................
    b32c:	000c000b 000e000d 0010000f 00210011     ..............!.
    b33c:	00270026 00290028 002b002a 002d002c     &.'.(.).*.+.,.-.
    b34c:	002f002e 00310030 00410040 00430042     ../.0.1.@.A.B.C.
    b35c:	00470046 00490048 004b004a 004d004c     F.G.H.I.J.K.L.M.
    b36c:	004f004e 00510050 00610060 00630062     N.O.P.Q.`.a.b.c.
    b37c:	00650064 00670066 00690068 006b006a     d.e.f.g.h.i.j.k.
    b38c:	006d006c 006f006e 00710070 00810080     l.m.n.o.p.q.....
    b39c:	00830082 00850084 00870086 00890088     ................
    b3ac:	008b008a 008d008c 008f008e 00000090     ................

0000b3bc <Port_UnUsedPin>:
    b3bc:	00000100 00000001 00000000              ............

0000b3c8 <Port_aPinConfigDefault>:
    b3c8:	00000024 00000300 00000000 00000002     $...............
    b3d8:	00010000 00000023 00000300 00000000     ....#...........
    b3e8:	00000001 00010000 00000022 00000300     ........".......
    b3f8:	00000000 00000001 00010000 00000025     ............%...
    b408:	00000300 00000000 00000001 00010000     ................
    b418:	00000020 00000300 00000000 00000001      ...............
    b428:	00010000                                ....

0000b42c <Port_Config>:
    b42c:	004f0005 0000b31c 0000b3bc 0000b3c8     ..O.............
	...
    b444:	0000b308 0000b304 0000b23c              ........<...

0000b450 <Power_Ip_RCM_ConfigPB>:
	...

0000b458 <Power_Ip_PMC_ConfigPB>:
    b458:	00000000                                ....

0000b45c <Power_Ip_SMC_ConfigPB>:
    b45c:	00000000                                ....

0000b460 <Power_Ip_aModeConfigPB>:
	...

0000b46c <Power_Ip_HwIPsConfigPB>:
    b46c:	0000b450 0000b458 0000b45c              P...X...\...

0000b478 <Spi_ExternalDeviceConfig_SpiExternalDevice_0>:
	...
    b480:	0000b1d0 00000000                       ........

0000b488 <Spi_ExternalDeviceConfig_SpiExternalDevice_1>:
	...
    b490:	0000b1e0 00000000                       ........

0000b498 <Spi_aExternalDeviceConfigList>:
    b498:	0000b478 0000b488                       x.......

0000b4a0 <Spi_HwUnitConfig_SpiPhyUnit_0>:
	...
    b4ac:	0000b1f0 00000001                       ........

0000b4b4 <Spi_aHwUnitConfigList>:
    b4b4:	0000b4a0                                ....

0000b4b8 <Spi_ChannelConfig_SpiChannel_Wren>:
    b4b8:	00000001 00000008 00000001 00000004     ................
    b4c8:	1fff8f10 00000000 1fff8d60              ........`...

0000b4d4 <Spi_ChannelConfig_SpiChannel_Cmd>:
    b4d4:	00000001 00000008 00000001 00000004     ................
    b4e4:	1fff8f1c 00000000 1fff8d64              ........d...

0000b4f0 <Spi_ChannelConfig_SpiChannel_Addr>:
    b4f0:	00000001 00000010 00000001 00000004     ................
    b500:	1fff8f28 00000000 1fff8d68              (.......h...

0000b50c <Spi_ChannelConfig_SpiChannel_Data>:
    b50c:	00000001 00000008 00000001 00000004     ................
    b51c:	1fff8f34 00000000 1fff8d6c              4.......l...

0000b528 <Spi_aChannelConfigList>:
    b528:	0000b4b8 0000b4d4 0000b4f0 0000b50c     ................

0000b538 <Spi_SpiJob_Wren_ChannelAssignment>:
    b538:	00000000                                ....

0000b53c <Spi_SpiJob_Data_ChannelAssignment>:
    b53c:	00030201                                ....

0000b540 <Spi_JobConfig_SpiJob_Wren>:
    b540:	00000001 0000b538 00000000 00000000     ....8...........
	...
    b558:	1fff8d58 00000000 0000b498              X...........

0000b564 <Spi_JobConfig_SpiJob_Data>:
    b564:	00000003 0000b53c 00000000 00000000     ....<...........
	...
    b57c:	1fff8d5c 00000000 0000b498              \...........

0000b588 <Spi_aJobConfigList>:
    b588:	0000b540 0000b564                       @...d...

0000b590 <Spi_SpiSequence_Write_JobAssignment>:
    b590:	00010000                                ....

0000b594 <Spi_SpiSequence_Read_JobAssignment>:
    b594:	00000001                                ....

0000b598 <Spi_SequenceConfig_SpiSequence_Write>:
    b598:	00000002 00000000 0000b590 00000000     ................
    b5a8:	00000000                                ....

0000b5ac <Spi_SequenceConfig_SpiSequence_Read>:
    b5ac:	00000001 00000000 0000b594 00000000     ................
    b5bc:	00000000                                ....

0000b5c0 <Spi_aSequenceConfigList>:
    b5c0:	0000b598 0000b5ac                       ........

0000b5c8 <Spi_Config>:
    b5c8:	00030002 00010001 00000000 0000b528     ............(...
    b5d8:	0000b588 0000b5c0 0000b498 0000b4b4     ................

0000b5e8 <_aInitStr.0>:
    b5e8:	00000000 54540000 45522052 53454747     ......TTR REGGES
    b5f8:	00000000                                ....

0000b5fc <_aV2C.0>:
    b5fc:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0000b60c <__INIT_TABLE>:
    b60c:	00000002 	.word	0x00000002
    b610:	1fff8b10 	.word	0x1fff8b10
    b614:	0000b634 	.word	0x0000b634
    b618:	0000b658 	.word	0x0000b658
    b61c:	1fff8800 	.word	0x1fff8800
    b620:	00000000 	.word	0x00000000
    b624:	00000310 	.word	0x00000310

0000b628 <__ZERO_TABLE>:
    b628:	00000001 	.word	0x00000001
    b62c:	1fff8b40 	.word	0x1fff8b40
    b630:	1fff9400 	.word	0x1fff9400
